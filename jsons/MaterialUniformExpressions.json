[
  {
    "label": "FMaterialUniformExpressionType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionType"
  },
  {
    "label": "FMaterialUniformExpression",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpression"
  },
  {
    "label": "FMaterialUniformExpressionTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTexture"
  },
  {
    "label": "FMaterialUniformExpressionExternalTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionExternalTexture"
  },
  {
    "label": "FMaterialUniformExpressionTextureCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTextureCollection"
  },
  {
    "label": "FMaterialRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialRenderContext"
  },
  {
    "label": "FMaterialUniformExpressionTextureParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTextureParameter"
  },
  {
    "label": "FMaterialUniformExpressionTextureCollectionParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTextureCollectionParameter"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionExternalTextureBase"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionExternalTextureParameter"
  },
  {
    "label": "FMaterialUniformExpressionConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionConstant"
  },
  {
    "label": "FMaterialUniformExpressionGenericConstant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionGenericConstant"
  },
  {
    "label": "FMaterialUniformExpressionNumericParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionNumericParameter"
  },
  {
    "label": "FMaterialUniformExpressionStaticBoolParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionStaticBoolParameter"
  },
  {
    "label": "FMaterialUniformExpressionFlipBookTextureParameter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionFlipBookTextureParameter"
  },
  {
    "label": "FMaterialUniformExpressionSine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionSine"
  },
  {
    "label": "ETrigMathOperation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETrigMathOperation"
  },
  {
    "label": "FMaterialUniformExpressionTrigMath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTrigMath"
  },
  {
    "label": "FMaterialUniformExpressionSquareRoot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionSquareRoot"
  },
  {
    "label": "FMaterialUniformExpressionRcp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionRcp"
  },
  {
    "label": "FMaterialUniformExpressionLength",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionLength"
  },
  {
    "label": "FMaterialUniformExpressionNormalize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionNormalize"
  },
  {
    "label": "FMaterialUniformExpressionExponential",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionExponential"
  },
  {
    "label": "FMaterialUniformExpressionExponential2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionExponential2"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionLogarithm"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionLogarithm2"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm10",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionLogarithm10"
  },
  {
    "label": "EFoldedMathOperation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFoldedMathOperation"
  },
  {
    "label": "FMaterialUniformExpressionFoldedMath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionFoldedMath"
  },
  {
    "label": "FMaterialUniformExpressionPeriodic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionPeriodic"
  },
  {
    "label": "FMaterialUniformExpressionAppendVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionAppendVector"
  },
  {
    "label": "FMaterialUniformExpressionMin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionMin"
  },
  {
    "label": "FMaterialUniformExpressionMax",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionMax"
  },
  {
    "label": "FMaterialUniformExpressionClamp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionClamp"
  },
  {
    "label": "FMaterialUniformExpressionSaturate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionSaturate"
  },
  {
    "label": "FMaterialUniformExpressionComponentSwizzle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionComponentSwizzle"
  },
  {
    "label": "FMaterialUniformExpressionFloor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionFloor"
  },
  {
    "label": "FMaterialUniformExpressionCeil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionCeil"
  },
  {
    "label": "FMaterialUniformExpressionRound",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionRound"
  },
  {
    "label": "FMaterialUniformExpressionTruncate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTruncate"
  },
  {
    "label": "FMaterialUniformExpressionSign",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionSign"
  },
  {
    "label": "FMaterialUniformExpressionFrac",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionFrac"
  },
  {
    "label": "FMaterialUniformExpressionFmod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionFmod"
  },
  {
    "label": "FMaterialUniformExpressionModulo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionModulo"
  },
  {
    "label": "FMaterialUniformExpressionAbs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionAbs"
  },
  {
    "label": "FMaterialUniformExpressionTextureProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionTextureProperty"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateOffset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateOffset"
  },
  {
    "label": "FMaterialUniformExpressionRuntimeVirtualTextureUniform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionRuntimeVirtualTextureUniform"
  },
  {
    "label": "FMaterialUniformExpressionSparseVolumeTextureUniform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialUniformExpressionSparseVolumeTextureUniform"
  },
  {
    "label": "GetTypeList()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Materials / MaterialInterface . h \" # include \" MaterialShared . h \" # include \" TextureResource . h \" # include \" Engine / Texture . h \" # include \" Materials / MaterialExpressionTextureProperty . h \" # include \" Materials / MaterialLayersFunctions . h \" class FMaterialUniformExpressionType { public : TLinkedList<FMaterialUniformExpressionType*>*&)",
    "insertText": "GetTypeList()"
  },
  {
    "label": "GetTypeMap()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FMaterialUniformExpressionType*>&)",
    "insertText": "GetTypeMap()"
  },
  {
    "label": "FMaterialUniformExpressionType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionType(const TCHAR* InName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (\\ FMaterialUniformExpressionType*)",
    "insertText": "GetType()"
  },
  {
    "label": "FMaterialUniformExpression()",
    "kind": "Method",
    "detail": "Function (class FMaterialUniformExpression : public FRefCountedObject { public : ~)",
    "insertText": "FMaterialUniformExpression()"
  },
  {
    "label": "GetTextureUniformExpression()",
    "kind": "Method",
    "detail": "Function (class FMaterialUniformExpressionTexture*)",
    "insertText": "GetTextureUniformExpression()"
  },
  {
    "label": "GetNumberValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNumberValue(const struct FMaterialRenderContext& Context, FLinearColor& OutValue)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FMaterialUniformExpression*>)",
    "insertText": "GetChildren()"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} int32 UniformOffset = INDEX_NONE ; int32 UniformIndex = INDEX_NONE ; } ; class FMaterialUniformExpressionTexture : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionTexture)"
  },
  {
    "label": "FMaterialUniformExpressionTexture()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionTexture()"
  },
  {
    "label": "FMaterialUniformExpressionTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionTexture(int32 InTextureIndex, EMaterialSamplerType InSamplerType, ESamplerSourceMode InSamplerSource, bool InVirtualTexture)"
  },
  {
    "label": "FMaterialUniformExpressionTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionTexture(int32 InTextureIndex, int16 InTextureLayerIndex, int16 InPageTableLayerIndex, EMaterialSamplerType InSamplerType)"
  },
  {
    "label": "FMaterialUniformExpressionTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionTexture(int32 InTextureIndex, EMaterialSamplerType InSamplerType)"
  },
  {
    "label": "GetTextureIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextureIndex()"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (protected : int32 TextureIndex ; int16 TextureLayerIndex ; int16 PageTableLayerIndex ; # if WITH_EDITORONLY_DATA EMaterialSamplerType SamplerType ; # endif ESamplerSourceMode SamplerSource ; bool bVirtualTexture ; } ; class FMaterialUniformExpressionTextureCollection : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionTextureCollection)"
  },
  {
    "label": "FMaterialUniformExpressionTextureCollection()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionTextureCollection(int32 InTextureCollectionIndex)"
  },
  {
    "label": "GetTextureCollectionUniformExpression()",
    "kind": "Method",
    "detail": "Function (class FMaterialUniformExpressionTextureCollection*)",
    "insertText": "GetTextureCollectionUniformExpression()"
  },
  {
    "label": "GetTextureCollectionParameterUniformExpression()",
    "kind": "Method",
    "detail": "Function (class FMaterialUniformExpressionTextureCollectionParameter*)",
    "insertText": "GetTextureCollectionParameterUniformExpression()"
  },
  {
    "label": "GetTextureCollectionParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureCollectionParameterInfo(FMaterialTextureCollectionParameterInfo& OutParameter)"
  },
  {
    "label": "GetTextureCollectionIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetTextureCollectionIndex()"
  },
  {
    "label": "FMaterialUniformExpressionTextureCollectionParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionTextureCollectionParameter(const FMaterialParameterInfo& InParameterInfo, int32 InTextureCollectionIndex)"
  },
  {
    "label": "IsIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIdentical(const FMaterialUniformExpression* OtherExpression)"
  },
  {
    "label": "IsConstant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstant()"
  },
  {
    "label": "GetParameterName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetParameterName()"
  },
  {
    "label": "GetParameterInfo()",
    "kind": "Method",
    "detail": "Function (} const FHashedMaterialParameterInfo&)",
    "insertText": "GetParameterInfo()"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionExternalTextureBase(int32 InSourceTextureIndex = INDEX_NONE)"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionExternalTextureBase(const FGuid& InExternalTextureGuid)"
  },
  {
    "label": "GetSourceTextureIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSourceTextureIndex()"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (int32 SourceTextureIndex ; FGuid ExternalTextureGuid ; } ; class FMaterialUniformExpressionExternalTexture : public FMaterialUniformExpressionExternalTextureBase {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionExternalTexture)"
  },
  {
    "label": "FMaterialUniformExpressionExternalTexture()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionExternalTexture(int32 InSourceTextureIndex = INDEX_NONE) : FMaterialUniformExpressionExternalTextureBase(InSourceTextureIndex)"
  },
  {
    "label": "FMaterialUniformExpressionExternalTexture()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionExternalTexture(const FGuid& InGuid) : FMaterialUniformExpressionExternalTextureBase(InGuid)"
  },
  {
    "label": "GetExternalTextureUniformExpression()",
    "kind": "Method",
    "detail": "Function (} FMaterialUniformExpressionExternalTexture*)",
    "insertText": "GetExternalTextureUniformExpression()"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; class FMaterialUniformExpressionConstant : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionConstant)"
  },
  {
    "label": "FMaterialUniformExpressionConstant()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionConstant()"
  },
  {
    "label": "FMaterialUniformExpressionConstant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionConstant(const FLinearColor& InValue,uint8 InValueType): Value(InValue), ValueType(InValueType)"
  },
  {
    "label": "ConstantValue()",
    "kind": "Method",
    "detail": "Function (UE::Shader::FValue)",
    "insertText": "ConstantValue(Value)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; } OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Constant)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Write(ConstantValue)"
  },
  {
    "label": "GetNumberValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNumberValue(const FMaterialRenderContext& Context, FLinearColor& OutValue)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (OutValue = Value ; } private : FLinearColor Value ; uint8 ValueType ; } ; class FMaterialUniformExpressionGenericConstant : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionGenericConstant)"
  },
  {
    "label": "FMaterialUniformExpressionGenericConstant()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionGenericConstant()"
  },
  {
    "label": "FMaterialUniformExpressionGenericConstant()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionGenericConstant(const UE::Shader::FValue& InValue) : Value(InValue)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Write(Value)"
  },
  {
    "label": "AsLinearColor()",
    "kind": "Method",
    "detail": "Function (OutValue = Value .)",
    "insertText": "AsLinearColor()"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : UE::Shader::FValue Value ; } ; class FMaterialUniformExpressionNumericParameter : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionNumericParameter)"
  },
  {
    "label": "FMaterialUniformExpressionNumericParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionNumericParameter()"
  },
  {
    "label": "FMaterialUniformExpressionNumericParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionNumericParameter(const FMaterialParameterInfo& InParameterInfo, int32 InParameterIndex) : ParameterInfo(InParameterInfo) , ParameterIndex(InParameterIndex)"
  },
  {
    "label": "WriteNumberOpcodes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteNumberOpcodes(UE::Shader::FPreshaderData& OutData)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Parameter)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "Write((uint16)ParameterIndex)"
  },
  {
    "label": "FMaterialUniformExpressionStaticBoolParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionStaticBoolParameter()"
  },
  {
    "label": "FMaterialUniformExpressionStaticBoolParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionStaticBoolParameter(const FMaterialParameterInfo& InParameterInfo, uint32 InParameterIndex) : ParameterIndex(InParameterIndex) , ParameterInfo(InParameterInfo)"
  },
  {
    "label": "GetReferencedTextures()",
    "kind": "Method",
    "detail": "Function (UObject* IndexedTexture = nullptr ; const TArrayView<const TObjectPtr<UObject>> ReferencedTextures = Material .)",
    "insertText": "GetReferencedTextures()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IndexedTexture = ReferencedTextures [ TextureIndex ] ; })",
    "insertText": "if(IndexedTexture == nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bWarnedOnce = false ;)",
    "insertText": "if(!bWarnedOnce)"
  },
  {
    "label": "TextureType()",
    "kind": "Method",
    "detail": "Function (bWarnedOnce = true ; } } return Cast<)",
    "insertText": "TextureType(IndexedTexture)"
  },
  {
    "label": "GetIndexedTextureCollection()",
    "kind": "Method",
    "detail": "Function (} UTextureCollection*)",
    "insertText": "GetIndexedTextureCollection(const FMaterial& Material, int32 TextureCollectionIndex)"
  },
  {
    "label": "GetReferencedTextureCollections()",
    "kind": "Method",
    "detail": "Function (UTextureCollection* IndexedTextureCollection = nullptr ; const TArrayView<const TObjectPtr<UTextureCollection>> ReferencedTextureCollections = Material .)",
    "insertText": "GetReferencedTextureCollections()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IndexedTextureCollection = ReferencedTextureCollections [ TextureCollectionIndex ] ; })",
    "insertText": "if(IndexedTextureCollection == nullptr)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (bWarnedOnce = true ; } } return IndexedTextureCollection ; } class FMaterialUniformExpressionTextureParameter : public FMaterialUniformExpressionTexture { typedef FMaterialUniformExpressionTexture Super ;)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionTextureParameter)"
  },
  {
    "label": "FMaterialUniformExpressionTextureParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionTextureParameter()"
  },
  {
    "label": "FMaterialUniformExpressionTextureParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionTextureParameter(const FMaterialParameterInfo& InParameterInfo, int32 InTextureIndex, EMaterialSamplerType InSamplerType, ESamplerSourceMode InSourceMode, bool InVirtualTexture) : Super(InTextureIndex, InSamplerType, InSourceMode, InVirtualTexture) , ParameterInfo(InParameterInfo)"
  },
  {
    "label": "FMaterialUniformExpressionTextureParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionTextureParameter(const FMaterialParameterInfo& InParameterInfo, int32 InTextureIndex, int32 InTextureLayerIndex, int32 InPageTableLayerIndex, EMaterialSamplerType InSamplerType) : Super(InTextureIndex, InTextureLayerIndex, InPageTableLayerIndex, InSamplerType) , ParameterInfo(InParameterInfo)"
  },
  {
    "label": "FMaterialUniformExpressionTextureParameter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionTextureParameter(const FMaterialParameterInfo& InParameterInfo, int32 InTextureIndex, EMaterialSamplerType InSamplerType) : Super(InTextureIndex, InSamplerType) , ParameterInfo(InParameterInfo)"
  },
  {
    "label": "GetTextureParameterUniformExpression()",
    "kind": "Method",
    "detail": "Function (} class FMaterialUniformExpressionTextureParameter*)",
    "insertText": "GetTextureParameterUniformExpression()"
  },
  {
    "label": "GetTextureParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureParameterInfo(OutParameter)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : FHashedMaterialParameterInfo ParameterInfo ; int32 ParameterIndex ; } ; class FMaterialUniformExpressionFlipBookTextureParameter : public FMaterialUniformExpressionTexture { typedef FMaterialUniformExpressionTexture Super ;)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionFlipBookTextureParameter)"
  },
  {
    "label": "FMaterialUniformExpressionFlipBookTextureParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionFlipBookTextureParameter()"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureParameter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionExternalTextureParameter()"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionExternalTextureParameter(FName InParameterName, int32 InTextureIndex)"
  },
  {
    "label": "GetExternalTextureParameterInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExternalTextureParameterInfo(FMaterialExternalTextureParameterInfo& OutParameter)"
  },
  {
    "label": "GetExternalTextureParameterUniformExpression()",
    "kind": "Method",
    "detail": "Function (FMaterialUniformExpressionExternalTextureParameter*)",
    "insertText": "GetExternalTextureParameterUniformExpression()"
  },
  {
    "label": "FMaterialUniformExpressionSine()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionSine()"
  },
  {
    "label": "FMaterialUniformExpressionSine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionSine(FMaterialUniformExpression* InX,bool bInIsCosine): X(InX), bIsCosine(bInIsCosine)"
  },
  {
    "label": "WriteNumberOpcodes()",
    "kind": "Method",
    "detail": "Function (X ->)",
    "insertText": "WriteNumberOpcodes(OutData)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(bIsCosine ? UE::Shader::EPreshaderOpcode::Cos : UE::Shader::EPreshaderOpcode::Sin)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; bool bIsCosine ; } ; enum ETrigMathOperation { TMO_Sin,TMO_Cos,TMO_Tan,TMO_Asin,TMO_Acos,TMO_Atan,TMO_Atan2 } ; class FMaterialUniformExpressionTrigMath : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionTrigMath)"
  },
  {
    "label": "FMaterialUniformExpressionTrigMath()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionTrigMath()"
  },
  {
    "label": "FMaterialUniformExpressionTrigMath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionTrigMath(FMaterialUniformExpression* InX, ETrigMathOperation InOp): X(InX), Y(InX), Op(InOp)"
  },
  {
    "label": "FMaterialUniformExpressionTrigMath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionTrigMath(FMaterialUniformExpression* InX, FMaterialUniformExpression* InY, ETrigMathOperation InOp): X(InX), Y(InY), Op(InOp)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "switch(Op)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case TMO_Cos : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Cos)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case TMO_Tan : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Tan)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case TMO_Asin : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Asin)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case TMO_Acos : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Acos)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case TMO_Atan : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Atan)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case TMO_Atan2 : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Atan2)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; TRefCountPtr<FMaterialUniformExpression> Y ; uint8 Op ; } ; class FMaterialUniformExpressionSquareRoot : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionSquareRoot)"
  },
  {
    "label": "FMaterialUniformExpressionSquareRoot()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionSquareRoot()"
  },
  {
    "label": "FMaterialUniformExpressionSquareRoot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionSquareRoot(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Sqrt)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionRcp : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionRcp)"
  },
  {
    "label": "FMaterialUniformExpressionRcp()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionRcp()"
  },
  {
    "label": "FMaterialUniformExpressionRcp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionRcp(FMaterialUniformExpression* InX) : X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Rcp)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionLength : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionLength)"
  },
  {
    "label": "FMaterialUniformExpressionLength()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionLength() : ValueType(MCT_Float)"
  },
  {
    "label": "FMaterialUniformExpressionLength()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionLength(FMaterialUniformExpression* InX, uint32 InValueType = MCT_Float): X(InX), ValueType(InValueType)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Length)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; uint32 ValueType ; } ; class FMaterialUniformExpressionNormalize : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionNormalize)"
  },
  {
    "label": "FMaterialUniformExpressionNormalize()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionNormalize()"
  },
  {
    "label": "FMaterialUniformExpressionNormalize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionNormalize(FMaterialUniformExpression* InX) : X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Normalize)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionExponential : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionExponential)"
  },
  {
    "label": "FMaterialUniformExpressionExponential()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionExponential()"
  },
  {
    "label": "FMaterialUniformExpressionExponential()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionExponential(FMaterialUniformExpression* InX) : X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Exp)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionExponential2 : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionExponential2)"
  },
  {
    "label": "FMaterialUniformExpressionExponential2()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionExponential2()"
  },
  {
    "label": "FMaterialUniformExpressionExponential2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionExponential2(FMaterialUniformExpression* InX) : X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Exp2)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionLogarithm : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionLogarithm)"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionLogarithm()"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionLogarithm(FMaterialUniformExpression* InX) : X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Log)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionLogarithm2 : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionLogarithm2)"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm2()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionLogarithm2()"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionLogarithm2(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Log2)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionLogarithm10 : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionLogarithm10)"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm10()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionLogarithm10()"
  },
  {
    "label": "FMaterialUniformExpressionLogarithm10()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionLogarithm10(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Log10)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; enum EFoldedMathOperation { FMO_Add,FMO_Sub,FMO_Mul,FMO_Div,FMO_Dot,FMO_Cross } ; class FMaterialUniformExpressionFoldedMath : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionFoldedMath)"
  },
  {
    "label": "FMaterialUniformExpressionFoldedMath()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionFoldedMath() : ValueType(MCT_Float)"
  },
  {
    "label": "FMaterialUniformExpressionFoldedMath()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionFoldedMath(FMaterialUniformExpression* InA,FMaterialUniformExpression* InB,uint8 InOp, uint32 InValueType = MCT_Float): A(InA), B(InB), ValueType(InValueType), Op(InOp)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case FMO_Sub : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Sub)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case FMO_Mul : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Mul)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case FMO_Div : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Div)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case FMO_Dot : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Dot)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; case FMO_Cross : OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Cross)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> A ; TRefCountPtr<FMaterialUniformExpression> B ; uint32 ValueType ; uint8 Op ; } ; class FMaterialUniformExpressionPeriodic : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionPeriodic)"
  },
  {
    "label": "FMaterialUniformExpressionPeriodic()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionPeriodic()"
  },
  {
    "label": "FMaterialUniformExpressionPeriodic()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionPeriodic(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Fractional)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionAppendVector : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionAppendVector)"
  },
  {
    "label": "FMaterialUniformExpressionAppendVector()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionAppendVector()"
  },
  {
    "label": "FMaterialUniformExpressionAppendVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionAppendVector(FMaterialUniformExpression* InA,FMaterialUniformExpression* InB,uint32 InNumComponentsA): A(InA), B(InB), NumComponentsA(InNumComponentsA)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::AppendVector)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> A ; TRefCountPtr<FMaterialUniformExpression> B ; uint32 NumComponentsA ; } ; class FMaterialUniformExpressionMin : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionMin)"
  },
  {
    "label": "FMaterialUniformExpressionMin()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionMin()"
  },
  {
    "label": "FMaterialUniformExpressionMin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionMin(FMaterialUniformExpression* InA,FMaterialUniformExpression* InB): A(InA), B(InB)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Min)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> A ; TRefCountPtr<FMaterialUniformExpression> B ; } ; class FMaterialUniformExpressionMax : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionMax)"
  },
  {
    "label": "FMaterialUniformExpressionMax()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionMax()"
  },
  {
    "label": "FMaterialUniformExpressionMax()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionMax(FMaterialUniformExpression* InA,FMaterialUniformExpression* InB): A(InA), B(InB)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Max)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> A ; TRefCountPtr<FMaterialUniformExpression> B ; } ; class FMaterialUniformExpressionClamp : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionClamp)"
  },
  {
    "label": "FMaterialUniformExpressionClamp()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionClamp()"
  },
  {
    "label": "FMaterialUniformExpressionClamp()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionClamp(FMaterialUniformExpression* InInput,FMaterialUniformExpression* InMin,FMaterialUniformExpression* InMax): Input(InInput), Min(InMin), Max(InMax)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Clamp)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> Input ; TRefCountPtr<FMaterialUniformExpression> Min ; TRefCountPtr<FMaterialUniformExpression> Max ; } ; class FMaterialUniformExpressionSaturate : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionSaturate)"
  },
  {
    "label": "FMaterialUniformExpressionSaturate()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionSaturate()"
  },
  {
    "label": "FMaterialUniformExpressionSaturate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionSaturate(FMaterialUniformExpression* InInput): Input(InInput)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Saturate)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> Input ; } ; class FMaterialUniformExpressionComponentSwizzle : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionComponentSwizzle)"
  },
  {
    "label": "FMaterialUniformExpressionComponentSwizzle()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionComponentSwizzle()"
  },
  {
    "label": "FMaterialUniformExpressionComponentSwizzle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionComponentSwizzle(FMaterialUniformExpression* InX, int8 InR, int8 InG, int8 InB, int8 InA) : X(InX), IndexR(InR), IndexG(InG), IndexB(InB), IndexA(InA)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumElements = 0 ;)",
    "insertText": "if(InA >= 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (+ + NumElements ;)",
    "insertText": "check(InB >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InB >= 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (+ + NumElements ;)",
    "insertText": "check(InG >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InG >= 0)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (+ + NumElements ; })",
    "insertText": "check(InR >= 0 && InR <= 3)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::ComponentSwizzle).Write((uint8)NumElements).Write((uint8)IndexR).Write((uint8)IndexG).Write((uint8)IndexB).Write((uint8)IndexA)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; int8 IndexR ; int8 IndexG ; int8 IndexB ; int8 IndexA ; int8 NumElements ; } ; class FMaterialUniformExpressionFloor : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionFloor)"
  },
  {
    "label": "FMaterialUniformExpressionFloor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionFloor()"
  },
  {
    "label": "FMaterialUniformExpressionFloor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionFloor(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Floor)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionCeil : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionCeil)"
  },
  {
    "label": "FMaterialUniformExpressionCeil()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionCeil()"
  },
  {
    "label": "FMaterialUniformExpressionCeil()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionCeil(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Ceil)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionRound : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionRound)"
  },
  {
    "label": "FMaterialUniformExpressionRound()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionRound()"
  },
  {
    "label": "FMaterialUniformExpressionRound()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionRound(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Round)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionTruncate : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionTruncate)"
  },
  {
    "label": "FMaterialUniformExpressionTruncate()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionTruncate()"
  },
  {
    "label": "FMaterialUniformExpressionTruncate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionTruncate(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Trunc)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionSign : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionSign)"
  },
  {
    "label": "FMaterialUniformExpressionSign()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionSign()"
  },
  {
    "label": "FMaterialUniformExpressionSign()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionSign(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Sign)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionFrac : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionFrac)"
  },
  {
    "label": "FMaterialUniformExpressionFrac()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionFrac()"
  },
  {
    "label": "FMaterialUniformExpressionFrac()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionFrac(FMaterialUniformExpression* InX): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Frac)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionFmod : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionFmod)"
  },
  {
    "label": "FMaterialUniformExpressionFmod()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionFmod()"
  },
  {
    "label": "FMaterialUniformExpressionFmod()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionFmod(FMaterialUniformExpression* InA,FMaterialUniformExpression* InB): A(InA), B(InB)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Fmod)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> A ; TRefCountPtr<FMaterialUniformExpression> B ; } ; class FMaterialUniformExpressionModulo : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionModulo)"
  },
  {
    "label": "FMaterialUniformExpressionModulo()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionModulo()"
  },
  {
    "label": "FMaterialUniformExpressionModulo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionModulo(FMaterialUniformExpression* InA,FMaterialUniformExpression* InB): A(InA), B(InB)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Modulo)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> A ; TRefCountPtr<FMaterialUniformExpression> B ; } ; class FMaterialUniformExpressionAbs : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionAbs)"
  },
  {
    "label": "FMaterialUniformExpressionAbs()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionAbs()"
  },
  {
    "label": "FMaterialUniformExpressionAbs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionAbs(FMaterialUniformExpression* InX ): X(InX)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "WriteOpcode(UE::Shader::EPreshaderOpcode::Abs)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpression> X ; } ; class FMaterialUniformExpressionTextureProperty : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionTextureProperty)"
  },
  {
    "label": "FMaterialUniformExpressionTextureProperty()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionTextureProperty()"
  },
  {
    "label": "FMaterialUniformExpressionTextureProperty()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionTextureProperty(FMaterialUniformExpressionTexture* InTextureExpression, EMaterialExposedTextureProperty InTextureProperty) : TextureExpression(InTextureExpression) , TextureProperty(InTextureProperty)"
  },
  {
    "label": "GetTextureParameterInfo()",
    "kind": "Method",
    "detail": "Function (FMaterialTextureParameterInfo TextureParameter ; TextureExpression ->)",
    "insertText": "GetTextureParameterInfo(TextureParameter)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (UE::Shader::EPreshaderOpcode Op = UE::Shader::EPreshaderOpcode::Nop ;)",
    "insertText": "switch(TextureProperty)"
  },
  {
    "label": "WriteOpcode()",
    "kind": "Method",
    "detail": "Function (break ; } OutData .)",
    "insertText": "WriteOpcode(Op).Write(TextureParameter.ParameterInfo).Write((int32)TextureParameter.TextureIndex)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (} private : TRefCountPtr<FMaterialUniformExpressionTexture> TextureExpression ; int8 TextureProperty ; } ; class FMaterialUniformExpressionExternalTextureCoordinateScaleRotation : public FMaterialUniformExpressionExternalTextureBase {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionExternalTextureCoordinateScaleRotation)"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation()"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation(const FGuid& InGuid) : FMaterialUniformExpressionExternalTextureBase(InGuid)"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateScaleRotation(int32 InSourceTextureIndex, TOptional<FName> InParameterName) : FMaterialUniformExpressionExternalTextureBase(InSourceTextureIndex), ParameterName(InParameterName)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (protected : typedef FMaterialUniformExpressionExternalTextureBase Super ; TOptional<FName> ParameterName ; } ; class FMaterialUniformExpressionExternalTextureCoordinateOffset : public FMaterialUniformExpressionExternalTextureBase {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionExternalTextureCoordinateOffset)"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateOffset()"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateOffset(const FGuid& InGuid) : FMaterialUniformExpressionExternalTextureBase(InGuid)"
  },
  {
    "label": "FMaterialUniformExpressionExternalTextureCoordinateOffset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMaterialUniformExpressionExternalTextureCoordinateOffset(int32 InSourceTextureIndex, TOptional<FName> InParameterName) : FMaterialUniformExpressionExternalTextureBase(InSourceTextureIndex), ParameterName(InParameterName)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (protected : typedef FMaterialUniformExpressionExternalTextureBase Super ; TOptional<FName> ParameterName ; } ; class FMaterialUniformExpressionRuntimeVirtualTextureUniform : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionRuntimeVirtualTextureUniform)"
  },
  {
    "label": "FMaterialUniformExpressionRuntimeVirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionRuntimeVirtualTextureUniform()"
  },
  {
    "label": "FMaterialUniformExpressionRuntimeVirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionRuntimeVirtualTextureUniform(int32 InTextureIndex, int32 InVectorIndex)"
  },
  {
    "label": "FMaterialUniformExpressionRuntimeVirtualTextureUniform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionRuntimeVirtualTextureUniform(const FMaterialParameterInfo& InParameterInfo, int32 InTextureIndex, int32 InVectorIndex)"
  },
  {
    "label": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE()",
    "kind": "Method",
    "detail": "Function (protected : bool bParameter ; FHashedMaterialParameterInfo ParameterInfo ; int32 TextureIndex ; int32 VectorIndex ; } ; class FMaterialUniformExpressionSparseVolumeTextureUniform : public FMaterialUniformExpression {)",
    "insertText": "DECLARE_MATERIALUNIFORMEXPRESSION_TYPE(FMaterialUniformExpressionSparseVolumeTextureUniform)"
  },
  {
    "label": "FMaterialUniformExpressionSparseVolumeTextureUniform()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FMaterialUniformExpressionSparseVolumeTextureUniform()"
  },
  {
    "label": "FMaterialUniformExpressionSparseVolumeTextureUniform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionSparseVolumeTextureUniform(int32 InTextureIndex, int32 InVectorIndex)"
  },
  {
    "label": "FMaterialUniformExpressionSparseVolumeTextureUniform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMaterialUniformExpressionSparseVolumeTextureUniform(const FMaterialParameterInfo& InParameterInfo, int32 InTextureIndex, int32 InVectorIndex)"
  }
]