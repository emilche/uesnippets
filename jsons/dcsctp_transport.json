[
  {
    "label": "DcSctpTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DcSctpTransport"
  },
  {
    "label": "StreamState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StreamState"
  },
  {
    "label": "DcSctpTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef MEDIA_SCTP_DCSCTP_TRANSPORT_H_ # define MEDIA_SCTP_DCSCTP_TRANSPORT_H_ # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / task_queue / task_queue_base . h \" # include \" media / sctp / sctp_transport_internal . h \" # include \" net / dcsctp / public / dcsctp_options . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / public / dcsctp_socket_factory . h \" # include \" net / dcsctp / public / types . h \" # include \" net / dcsctp / timer / task_queue_timeout . h \" # include \" p2p / base / packet_transport_internal . h \" # include \" rtc_base / containers / flat_map . h \" # include \" rtc_base / copy_on_write_buffer . h \" # include \" rtc_base / random . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class DcSctpTransport : public cricket::SctpTransportInternal,public dcsctp::DcSctpSocketCallbacks,public sigslot::has_slots<> { public :)",
    "insertText": "DcSctpTransport(rtc::Thread* network_thread, rtc::PacketTransportInternal* transport, Clock* clock)"
  },
  {
    "label": "DcSctpTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DcSctpTransport(rtc::Thread* network_thread, rtc::PacketTransportInternal* transport, Clock* clock, std::unique_ptr<dcsctp::DcSctpSocketFactory> socket_factory)"
  },
  {
    "label": "DcSctpTransport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DcSctpTransport()"
  },
  {
    "label": "SetOnConnectedCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnConnectedCallback(std::function<void()> callback)"
  },
  {
    "label": "SetDataChannelSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataChannelSink(DataChannelSink* sink)"
  },
  {
    "label": "SetDtlsTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDtlsTransport(rtc::PacketTransportInternal* transport)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(int local_sctp_port, int remote_sctp_port, int max_message_size)"
  },
  {
    "label": "OpenStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenStream(int sid)"
  },
  {
    "label": "ResetStream()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetStream(int sid)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendData(int sid, const SendDataParams& params, const rtc::CopyOnWriteBuffer& payload, cricket::SendDataResult* result = nullptr)"
  },
  {
    "label": "ReadyToSendData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToSendData()"
  },
  {
    "label": "max_message_size()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "max_message_size()"
  },
  {
    "label": "max_outbound_streams()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "max_outbound_streams()"
  },
  {
    "label": "max_inbound_streams()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "max_inbound_streams()"
  },
  {
    "label": "set_debug_name_for_testing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_debug_name_for_testing(const char* debug_name)"
  },
  {
    "label": "SendPacketWithStatus()",
    "kind": "Method",
    "detail": "Function (private : dcsctp::SendPacketStatus)",
    "insertText": "SendPacketWithStatus(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "CreateTimeout()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<dcsctp::Timeout>)",
    "insertText": "CreateTimeout(webrtc::TaskQueueBase::DelayPrecision precision)"
  },
  {
    "label": "TimeMillis()",
    "kind": "Method",
    "detail": "Function (dcsctp::TimeMs)",
    "insertText": "TimeMillis()"
  },
  {
    "label": "GetRandomInt()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetRandomInt(uint32_t low, uint32_t high)"
  },
  {
    "label": "OnTotalBufferedAmountLow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTotalBufferedAmountLow()"
  },
  {
    "label": "OnMessageReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMessageReceived(dcsctp::DcSctpMessage message)"
  },
  {
    "label": "OnError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnError(dcsctp::ErrorKind error, absl::string_view message)"
  },
  {
    "label": "OnAborted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAborted(dcsctp::ErrorKind error, absl::string_view message)"
  },
  {
    "label": "OnConnected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnected()"
  },
  {
    "label": "OnClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClosed()"
  },
  {
    "label": "OnConnectionRestarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionRestarted()"
  },
  {
    "label": "OnStreamsResetFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamsResetFailed(rtc::ArrayView<const dcsctp::StreamID> outgoing_streams, absl::string_view reason)"
  },
  {
    "label": "OnStreamsResetPerformed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStreamsResetPerformed(rtc::ArrayView<const dcsctp::StreamID> outgoing_streams)"
  },
  {
    "label": "OnIncomingStreamsReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIncomingStreamsReset(rtc::ArrayView<const dcsctp::StreamID> incoming_streams)"
  },
  {
    "label": "ConnectTransportSignals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConnectTransportSignals()"
  },
  {
    "label": "DisconnectTransportSignals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectTransportSignals()"
  },
  {
    "label": "OnTransportWritableState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportWritableState(rtc::PacketTransportInternal* transport)"
  },
  {
    "label": "OnTransportReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportReadPacket(rtc::PacketTransportInternal* transport, const char* data, size_t length, const int64_t& , int flags)"
  },
  {
    "label": "OnTransportClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportClosed(rtc::PacketTransportInternal* transport)"
  },
  {
    "label": "MaybeConnectSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeConnectSocket()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::Thread* network_thread_ ; rtc::PacketTransportInternal* transport_ ; Clock* clock_ ; Random random_ ; std::unique_ptr<dcsctp::DcSctpSocketFactory> socket_factory_ ; dcsctp::TaskQueueTimeoutFactory task_queue_timeout_factory_ ; std::unique_ptr<dcsctp::DcSctpSocketInterface> socket_ ; std::string debug_name_ = \" DcSctpTransport \" ; rtc::CopyOnWriteBuffer receive_buffer_ ; struct StreamState { bool closure_initiated = false ; bool incoming_reset_done = false ; bool outgoing_reset_done = false ; } ; flat_map<dcsctp::StreamID,StreamState> stream_states_)",
    "insertText": "RTC_GUARDED_BY(network_thread_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (bool ready_to_send_data_ = false ; std::function<)",
    "insertText": "void()> on_connected_callback_ RTC_GUARDED_BY(network_thread_)"
  }
]