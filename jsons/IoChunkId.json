[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FPackageId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageId"
  },
  {
    "label": "FIoContainerId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoContainerId"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIoChunkId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoChunkId"
  },
  {
    "label": "FIoStoreReaderImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIoStoreReaderImpl"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / StringFwd . h \" # include \" Memory / MemoryView . h \" # include \" Misc / ByteSwap . h \" # include \" String / BytesToHex . h \" class FArchive ; class FCbFieldView ; class FCbWriter ; class FPackageId ; class FIoContainerId ; enum class EIoChunkType : uint8 { Invalid = 0,ExportBundleData = 1,BulkData = 2,OptionalBulkData = 3,MemoryMappedBulkData = 4,ScriptObjects = 5,ContainerHeader = 6,ExternalFile = 7,ShaderCodeLibrary = 8,ShaderCode = 9,PackageStoreEntry = 1 0,DerivedData = 1 1,EditorDerivedData = 1 2,PackageResource = 1 3,MAX } ; FString)",
    "insertText": "LexToString(const EIoChunkType Type)"
  },
  {
    "label": "IsBulkDataType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBulkDataType(const EIoChunkType Type)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 5 3 8 1 ;)",
    "insertText": "for(int i = 0; i < sizeof Id; ++i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Hash = Hash* 3 3 + InId . Id [ i ] ; } return Hash ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FIoChunkId& ChunkId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FIoChunkId& ChunkId)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FIoChunkId& OutChunkId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<CharType> TStringBuilderBase<CharType>&)",
    "insertText": "operator(TStringBuilderBase<CharType>& Builder, const FIoChunkId& ChunkId)"
  },
  {
    "label": "BytesToHexLower()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "BytesToHexLower(ChunkId.Id, Builder)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(const FIoChunkId& Id)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FIoChunkId& Rhs)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(const void* InIdPtr, SIZE_T InSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Id, InIdPtr, sizeof Id)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(FMemoryView InView)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Id, InView.GetData(), sizeof Id)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FromHex()",
    "kind": "Method",
    "detail": "Function (} class FIoStoreReaderImpl ; FIoChunkId)",
    "insertText": "FromHex(FStringView Hex)"
  },
  {
    "label": "CreateEmptyId()",
    "kind": "Method",
    "detail": "Function (private : FIoChunkId)",
    "insertText": "CreateEmptyId()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FIoChunkId ChunkId ; uint8 Data [ 1 2 ] = { 0 } ; ChunkId .)",
    "insertText": "Set(Data, sizeof Data)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (uint8 Data [ 1 2 ] = { 0 } ;* reinterpret_cast<)",
    "insertText": "uint64(&Data[0])"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "uint16(&Data[8]) = NETWORK_ORDER16(ChunkIndex)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "uint8(&Data[11]) = static_cast<uint8>(IoChunkType)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FIoChunkId IoChunkId ; IoChunkId .)",
    "insertText": "Set(Data, 12)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (* reinterpret_cast<)",
    "insertText": "uint8(&Data[10])"
  },
  {
    "label": "CreateExternalFileChunkId()",
    "kind": "Method",
    "detail": "Function (FIoChunkId)",
    "insertText": "CreateExternalFileChunkId(const FStringView Filename)"
  },
  {
    "label": "CreateContainerHeaderChunkId()",
    "kind": "Method",
    "detail": "Function (FIoChunkId)",
    "insertText": "CreateContainerHeaderChunkId(const FIoContainerId& ContainerId)"
  }
]