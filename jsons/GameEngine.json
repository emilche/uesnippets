[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FEngineConsoleCommandExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEngineConsoleCommandExecutor"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "UGameEngine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameEngine"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "IEngineLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEngineLoop"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Widgets / SWindow . h \" # include \" Widgets / SViewport . h \" # include \" Engine / Engine . h \" # include \" MovieSceneCaptureHandle . h \" # include \" Templates / PimplPtr . h \" # include \" GameEngine . generated . h \" class Error ; class FEngineConsoleCommandExecutor ; class FSceneViewport ; class UGameViewportClient ; class UNetDriver ;)",
    "insertText": "UCLASS(config=Engine, transient, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(config)"
  },
  {
    "label": "CreateGameViewportWidget()",
    "kind": "Method",
    "detail": "Function (public : TWeakPtr<class SWindow> GameViewportWindow ; TSharedPtr<class FSceneViewport> SceneViewport ; TSharedPtr<class SViewport> GameViewportWidget ; void)",
    "insertText": "CreateGameViewportWidget(UGameViewportClient* GameViewportClient)"
  },
  {
    "label": "CreateGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGameViewport(UGameViewportClient* GameViewportClient)"
  },
  {
    "label": "CreateGameWindow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWindow>)",
    "insertText": "CreateGameWindow()"
  },
  {
    "label": "SafeFrameChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeFrameChanged()"
  },
  {
    "label": "EnableGameWindowSettingsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGameWindowSettingsOverride(bool bEnabled)"
  },
  {
    "label": "ConditionallyOverrideSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConditionallyOverrideSettings(int32& ResolutionX, int32& ResolutionY, EWindowMode::Type& WindowMode)"
  },
  {
    "label": "DetermineGameWindowResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineGameWindowResolution(int32& ResolutionX, int32& ResolutionY, EWindowMode::Type& WindowMode, bool bUseWorkAreaForWindowed = false)"
  },
  {
    "label": "SwitchGameWindowToUseGameViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchGameWindowToUseGameViewport()"
  },
  {
    "label": "OnGameWindowClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameWindowClosed(const TSharedRef<SWindow>& WindowBeingClosed)"
  },
  {
    "label": "OnGameWindowMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameWindowMoved(const TSharedRef<SWindow>& WindowBeingMoved)"
  },
  {
    "label": "RedrawViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawViewports(bool bShouldPresent = true)"
  },
  {
    "label": "OnViewportResized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnViewportResized(FViewport* Viewport, uint32 Unused)"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Init(class IEngineLoop* InEngineLoop)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "PreExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreExit()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds, bool bIdleMode)"
  },
  {
    "label": "GetMaxTickRate()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxTickRate(float DeltaTime, bool bAllowFrameRateSmoothing = true)"
  },
  {
    "label": "ProcessToggleFreezeCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessToggleFreezeCommand(UWorld* InWorld)"
  },
  {
    "label": "ProcessToggleFreezeStreamingCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessToggleFreezeStreamingCommand(UWorld* InWorld)"
  },
  {
    "label": "NetworkRemapPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NetworkRemapPath(UNetConnection* Connection, FString& Str, bool bReading = true)"
  },
  {
    "label": "ShouldDoAsyncEndOfFrameTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDoAsyncEndOfFrameTasks()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (public : # if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "HandleCommand()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "HandleCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleExitCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleExitCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleMinimizeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMinimizeCommand(const TCHAR *Cmd, FOutputDevice &Ar)"
  },
  {
    "label": "HandleGetMaxTickRateCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGetMaxTickRateCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleCancelCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCancelCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleApplyUserSettingsCommand()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "HandleApplyUserSettingsCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetGameViewportWidget()",
    "kind": "Method",
    "detail": "Function (# endif TSharedPtr<SViewport>)",
    "insertText": "GetGameViewportWidget()"
  },
  {
    "label": "GetGameSceneViewport()",
    "kind": "Method",
    "detail": "Function (protected : FSceneViewport*)",
    "insertText": "GetGameSceneViewport(UGameViewportClient* ViewportClient)"
  },
  {
    "label": "HandleBrowseToDefaultMapFailure()",
    "kind": "Method",
    "detail": "Function (FMovieSceneCaptureHandle StartupMovieCaptureHandle ; void)",
    "insertText": "HandleBrowseToDefaultMapFailure(FWorldContext& Context, const FString& TextURL, const FString& Error)"
  },
  {
    "label": "HandleNetworkFailure_NotifyGameInstance()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleNetworkFailure_NotifyGameInstance(UWorld* World, UNetDriver* NetDriver, ENetworkFailure::Type FailureType)"
  },
  {
    "label": "HandleTravelFailure_NotifyGameInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTravelFailure_NotifyGameInstance(UWorld* World, ETravelFailure::Type FailureType)"
  }
]