[
  {
    "label": "Aec3RenderQueueItemVerifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Aec3RenderQueueItemVerifier"
  },
  {
    "label": "EchoCanceller3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EchoCanceller3"
  },
  {
    "label": "EchoCanceller3Tester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EchoCanceller3Tester"
  },
  {
    "label": "RenderWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RenderWriter"
  },
  {
    "label": "AdjustConfig()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_ECHO_CANCELLER3_H_ # define MODULES_AUDIO_PROCESSING_AEC3_ECHO_CANCELLER3_H_ # include<stddef . h> # include<atomic> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" api / audio / echo_control . h \" # include \" modules / audio_processing / aec3 / api_call_jitter_metrics . h \" # include \" modules / audio_processing / aec3 / block_delay_buffer . h \" # include \" modules / audio_processing / aec3 / block_framer . h \" # include \" modules / audio_processing / aec3 / block_processor . h \" # include \" modules / audio_processing / aec3 / config_selector . h \" # include \" modules / audio_processing / aec3 / frame_blocker . h \" # include \" modules / audio_processing / aec3 / multi_channel_content_detector . h \" # include \" modules / audio_processing / audio_buffer . h \" # include \" modules / audio_processing / logging / apm_data_dumper . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / swap_queue . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { EchoCanceller3Config)",
    "insertText": "AdjustConfig(const EchoCanceller3Config& config)"
  },
  {
    "label": "Aec3RenderQueueItemVerifier()",
    "kind": "Method",
    "detail": "Function (class Aec3RenderQueueItemVerifier { public :)",
    "insertText": "Aec3RenderQueueItemVerifier(size_t num_bands, size_t num_channels, size_t frame_length) : num_bands_(num_bands), num_channels_(num_channels), frame_length_(frame_length)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()(const std::vector<std::vector<std::vector<float>>>& v)"
  },
  {
    "label": "EchoCanceller3()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EchoCanceller3()"
  },
  {
    "label": "EchoCanceller3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EchoCanceller3(const EchoCanceller3&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EchoCanceller3&)",
    "insertText": "operator(const EchoCanceller3&)"
  },
  {
    "label": "AnalyzeRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeRender(AudioBuffer* render)"
  },
  {
    "label": "AnalyzeRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeRender(*render)"
  },
  {
    "label": "AnalyzeCapture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AnalyzeCapture(AudioBuffer* capture)"
  },
  {
    "label": "AnalyzeCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCapture(*capture)"
  },
  {
    "label": "ProcessCapture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessCapture(AudioBuffer* capture, bool level_change)"
  },
  {
    "label": "ProcessCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCapture(AudioBuffer* capture, AudioBuffer* linear_output, bool level_change)"
  },
  {
    "label": "GetMetrics()",
    "kind": "Method",
    "detail": "Function (Metrics)",
    "insertText": "GetMetrics()"
  },
  {
    "label": "SetAudioBufferDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioBufferDelay(int delay_ms)"
  },
  {
    "label": "SetCaptureOutputUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCaptureOutputUsage(bool capture_output_used)"
  },
  {
    "label": "ActiveProcessing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ActiveProcessing()"
  },
  {
    "label": "UpdateEchoLeakageStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEchoLeakageStatus(bool leakage_detected)"
  },
  {
    "label": "RTC_DCHECK_RUNS_SERIALIZED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUNS_SERIALIZED(&capture_race_checker_)"
  },
  {
    "label": "UpdateEchoLeakageStatus()",
    "kind": "Method",
    "detail": "Function (block_processor_ ->)",
    "insertText": "UpdateEchoLeakageStatus(leakage_detected)"
  },
  {
    "label": "CreateDefaultMultichannelConfig()",
    "kind": "Method",
    "detail": "Function (} EchoCanceller3Config)",
    "insertText": "CreateDefaultMultichannelConfig()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private : class EchoCanceller3Tester ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(EchoCanceller3, DetectionOfProperStereo)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(EchoCanceller3, DetectionOfProperStereoUsingThreshold)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(EchoCanceller3, DetectionOfProperStereoUsingHysteresis)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(EchoCanceller3, StereoContentDetectionForMonoSignals)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (class RenderWriter ; void)",
    "insertText": "Initialize()"
  },
  {
    "label": "SetBlockProcessorForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlockProcessorForTesting(std::unique_ptr<BlockProcessor> block_processor)"
  },
  {
    "label": "StereoRenderProcessingActiveForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StereoRenderProcessingActiveForTesting()"
  },
  {
    "label": "GetActiveConfigForTesting()",
    "kind": "Method",
    "detail": "Function (} const EchoCanceller3Config&)",
    "insertText": "GetActiveConfigForTesting()"
  },
  {
    "label": "EmptyRenderQueue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmptyRenderQueue()"
  },
  {
    "label": "AnalyzeRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeRender(const AudioBuffer& render)"
  },
  {
    "label": "AnalyzeCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeCapture(const AudioBuffer& capture)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (rtc::RaceChecker capture_race_checker_ ; rtc::RaceChecker render_race_checker_ ; std::unique_ptr<RenderWriter> render_writer_)",
    "insertText": "RTC_GUARDED_BY(render_race_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::atomic<int> instance_count_ ; std::unique_ptr<ApmDataDumper> data_dumper_ ; const EchoCanceller3Config config_ ; const int sample_rate_hz_ ; const int num_bands_ ; const size_t num_render_input_channels_ ; size_t num_render_channels_to_aec_ ; const size_t num_capture_channels_ ; ConfigSelector config_selector_ ; MultiChannelContentDetector multichannel_content_detector_ ; std::unique_ptr<BlockFramer> linear_output_framer_)",
    "insertText": "RTC_GUARDED_BY(capture_race_checker_)"
  }
]