[
  {
    "label": "CorotatedCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CorotatedCache"
  },
  {
    "label": "CorotatedCache()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Matrix . h \" namespace Chaos::Softs { template<T> struct CorotatedCache { TArray<T> JFInvTCache,RCache ; TArray<T> DInvCache ; T JCache ;)",
    "insertText": "CorotatedCache()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (JFInvTCache .)",
    "insertText": "Init((T)0., 3*3)"
  },
  {
    "label": "UpdateCache()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateCache(const Chaos::PMatrix<T, 3, 3>& F)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "P(const Chaos::PMatrix<T, 3, 3>& F, const T mu, const T lambda, Chaos::PMatrix<T, 3, 3>& P)"
  },
  {
    "label": "deltaP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deltaP(const Chaos::PMatrix<T, 3, 3>& F, const Chaos::PMatrix<T, 3, 3>& dF, const T mu, const T lambda, Chaos::PMatrix<T, 3, 3>& dP)"
  },
  {
    "label": "PsiCorotated()",
    "kind": "Method",
    "detail": "Function (} ; template<T> T)",
    "insertText": "PsiCorotated(const Chaos::PMatrix<T, 3, 3>& F, const T mu, const T lambda)"
  },
  {
    "label": "PCorotated()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "PCorotated(const Chaos::PMatrix<T, 3, 3>& F, const T mu, const T lambda, Chaos::PMatrix<T, 3, 3>& P)"
  }
]