[
  {
    "label": "SRC_STATE_tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SRC_STATE_tag"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # if PLATFORM_WINDOWS # define SRC_EXPORT)",
    "insertText": "__declspec(dllexport) #elif PLATFORM_MAC #define SRC_EXPORT __attribute__((visibility(\"default\"))) #elif PLATFORM_LINUX #define SRC_EXPORT __attribute__((visibility(\"default\"))) #elif PLATFORM_CONSOLE_DYNAMIC_LINK #define SRC_EXPORT __declspec(dllexport)"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct SRC_STATE_tag SRC_STATE ; typedef struct { const float* data_in ; float* data_out ; long input_frames,output_frames ; long input_frames_used,output_frames_gen ; int end_of_input ; double src_ratio ; } SRC_DATA ; typedef)",
    "insertText": "long(*src_callback_t) (void *cb_data, float **data)"
  },
  {
    "label": "src_new()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT SRC_STATE*)",
    "insertText": "src_new(int converter_type, int channels, int *error)"
  },
  {
    "label": "src_clone()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT SRC_STATE*)",
    "insertText": "src_clone(SRC_STATE* orig, int *error)"
  },
  {
    "label": "src_callback_new()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT SRC_STATE*)",
    "insertText": "src_callback_new(src_callback_t func, int converter_type, int channels, int *error, void* cb_data)"
  },
  {
    "label": "src_delete()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT SRC_STATE*)",
    "insertText": "src_delete(SRC_STATE *state)"
  },
  {
    "label": "src_process()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT int)",
    "insertText": "src_process(SRC_STATE *state, SRC_DATA *data)"
  },
  {
    "label": "src_callback_read()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT long)",
    "insertText": "src_callback_read(SRC_STATE *state, double src_ratio, long frames, float *data)"
  },
  {
    "label": "src_simple()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT int)",
    "insertText": "src_simple(SRC_DATA *data, int converter_type, int channels)"
  },
  {
    "label": "src_get_name()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT const char*)",
    "insertText": "src_get_name(int converter_type)"
  },
  {
    "label": "src_get_description()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT const char*)",
    "insertText": "src_get_description(int converter_type)"
  },
  {
    "label": "src_get_version()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT const char*)",
    "insertText": "src_get_version(void)"
  },
  {
    "label": "src_set_ratio()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT int)",
    "insertText": "src_set_ratio(SRC_STATE *state, double new_ratio)"
  },
  {
    "label": "src_get_channels()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT int)",
    "insertText": "src_get_channels(SRC_STATE *state)"
  },
  {
    "label": "src_reset()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT int)",
    "insertText": "src_reset(SRC_STATE *state)"
  },
  {
    "label": "src_is_valid_ratio()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT int)",
    "insertText": "src_is_valid_ratio(double ratio)"
  },
  {
    "label": "src_error()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT int)",
    "insertText": "src_error(SRC_STATE *state)"
  },
  {
    "label": "src_strerror()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT const char*)",
    "insertText": "src_strerror(int error)"
  },
  {
    "label": "src_short_to_float_array()",
    "kind": "Method",
    "detail": "Function (enum { # ifndef LIBSAMPLERATE_WITHOUT_SINC SRC_SINC_BEST_QUALITY = 0,SRC_SINC_MEDIUM_QUALITY = 1,SRC_SINC_FASTEST = 2,# endif # ifndef LIBSAMPLERATE_WITHOUT_ZERO_ORDER_HOLD SRC_ZERO_ORDER_HOLD = 3,# endif # ifndef LIBSAMPLERATE_WITHOUT_LINEAR SRC_LINEAR = 4,# endif } ; SRC_EXPORT void)",
    "insertText": "src_short_to_float_array(const short *in, float *out, int len)"
  },
  {
    "label": "src_float_to_short_array()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT void)",
    "insertText": "src_float_to_short_array(const float *in, short *out, int len)"
  },
  {
    "label": "src_int_to_float_array()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT void)",
    "insertText": "src_int_to_float_array(const int *in, float *out, int len)"
  },
  {
    "label": "src_float_to_int_array()",
    "kind": "Method",
    "detail": "Function (SRC_EXPORT void)",
    "insertText": "src_float_to_int_array(const float *in, int *out, int len)"
  }
]