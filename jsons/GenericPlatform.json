[
  {
    "label": "SelectIntPointerType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SelectIntPointerType"
  },
  {
    "label": "FGenericPlatformTypes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformTypes"
  },
  {
    "label": "UTF8CHAR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTF8CHAR"
  },
  {
    "label": "deprecated()",
    "kind": "Method",
    "detail": "Function (# pragma once template<T32BITS,T64BITS,int PointerSize> struct SelectIntPointerType { } ; template<T32BITS,T64BITS> struct SelectIntPointerType<T32BITS,T64BITS,8> { typedef T64BITS TIntPointer ; } ; template<T32BITS,T64BITS> struct SelectIntPointerType<T32BITS,T64BITS,4> { typedef T32BITS TIntPointer ; } ; struct FGenericPlatformTypes { typedef unsigned char uint8 ; typedef unsigned short int uint16 ; typedef unsigned int uint32 ; typedef unsigned long long uint64 ; typedef signed char int8 ; typedef signed short int int16 ; typedef signed int int32 ; typedef signed long long int64 ; typedef char ANSICHAR ; typedef wchar_t WIDECHAR ; enum UTF8CHAR : unsigned char { } ; [ [)",
    "insertText": "deprecated(\"FPlatformTypes::CHAR8 is deprecated, please use FPlatformTypes::UTF8CHAR instead.\")"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef uint16 CHAR16 ; typedef uint32 CHAR32 ; typedef WIDECHAR TCHAR ; typedef SelectIntPointerType<uint32,uint64,)",
    "insertText": "sizeof(void*)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (typedef UPTRINT SIZE_T ; typedef PTRINT SSIZE_T ; typedef int32 TYPE_OF_NULL ; typedef)",
    "insertText": "decltype(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FGenericPlatformTypes::UTF8CHAR&)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch)"
  },
  {
    "label": "Ch()",
    "kind": "Method",
    "detail": "Function (FGenericPlatformTypes::UTF8CHAR Result =)",
    "insertText": "Ch(unsigned char*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch -= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch /= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch *= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch %= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch &= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch |= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch ^= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch <<= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> auto)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, T&& InValue) -> decltype((FGenericPlatformTypes::UTF8CHAR&)(*(unsigned char*)&Ch >>= (T&&)InValue))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FGenericPlatformTypes::UTF8CHAR&)",
    "insertText": "operator(FGenericPlatformTypes::UTF8CHAR& Ch, FGenericPlatformTypes::UTF8CHAR InValue)"
  }
]