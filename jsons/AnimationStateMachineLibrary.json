[
  {
    "label": "FAnimNode_StateMachine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateMachine"
  },
  {
    "label": "FAnimNode_StateResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_StateResult"
  },
  {
    "label": "FAnimationStateResultReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationStateResultReference"
  },
  {
    "label": "FAnimationStateMachineReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationStateMachineReference"
  },
  {
    "label": "UAnimationStateMachineLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationStateMachineLibrary"
  },
  {
    "label": "ConvertToAnimationStateResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToAnimationStateResult(const FAnimNodeReference& Node, FAnimationStateResultReference& AnimationState, EAnimNodeReferenceConversionResult& Result)"
  },
  {
    "label": "ConvertToAnimationStateMachine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToAnimationStateMachine(const FAnimNodeReference& Node, FAnimationStateMachineReference& AnimationState, EAnimNodeReferenceConversionResult& Result)"
  },
  {
    "label": "IsStateBlendingIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStateBlendingIn(const FAnimUpdateContext& UpdateContext, const FAnimationStateResultReference& Node)"
  },
  {
    "label": "IsStateBlendingOut()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStateBlendingOut(const FAnimUpdateContext& UpdateContext, const FAnimationStateResultReference& Node)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(const FAnimUpdateContext& UpdateContext, const FAnimationStateMachineReference& Node, FName TargetState, float Duration\n\t\t, TEnumAsByte<ETransitionLogicType::Type> BlendType, UBlendProfile* BlendProfile, EAlphaBlendOption AlphaBlendOption, UCurveFloat* CustomBlendCurve)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetState(const FAnimUpdateContext& UpdateContext, const FAnimationStateMachineReference& Node)"
  },
  {
    "label": "GetRelevantAnimTimeRemaining()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemaining(const FAnimUpdateContext& UpdateContext, const FAnimationStateResultReference& Node)"
  },
  {
    "label": "GetRelevantAnimTimeRemainingFraction()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRelevantAnimTimeRemainingFraction(const FAnimUpdateContext& UpdateContext, const FAnimationStateResultReference& Node)"
  }
]