[
  {
    "label": "CSemanticAnalyzerPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSemanticAnalyzerPass"
  },
  {
    "label": "CSemanticAnalyzerPass()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / CompilerPasses / ISemanticAnalyzerPass . h \" # include \" uLang / SemanticAnalyzer / SemanticAnalyzer . h \" namespace uLang { class CSemanticAnalyzerPass : public ISemanticAnalyzerPass { public : ~)",
    "insertText": "CSemanticAnalyzerPass()"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(!_Context.IsValid(), \"Destructor called without clean up.\")"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const SBuildContext& BuildContext, const SProgramContext& ProgramContext)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(!_Context.IsValid(), \"Initialize called without a paired clean up.\")"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (_Context = TUPtr<CSemanticAnalyzer)",
    "insertText": "New(ProgramContext._Program, BuildContext)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CleanUp(void)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (_Context .)",
    "insertText": "Reset()"
  },
  {
    "label": "ProcessVst()",
    "kind": "Method",
    "detail": "Function (} TSRef<CSemanticProgram>)",
    "insertText": "ProcessVst(const Verse::Vst::Project& Vst, const ESemanticPass Pass)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERTF(_Context.IsValid(), \"ProcessVst called without initializing.\")"
  },
  {
    "label": "ProcessVst()",
    "kind": "Method",
    "detail": "Function (_Context ->)",
    "insertText": "ProcessVst(Vst, Pass)"
  }
]