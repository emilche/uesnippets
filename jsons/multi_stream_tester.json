[
  {
    "label": "MultiStreamTester",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiStreamTester"
  },
  {
    "label": "CodecSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSettings"
  },
  {
    "label": "MultiStreamTester()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_END_TO_END_TESTS_MULTI_STREAM_TESTER_H_ # define VIDEO_END_TO_END_TESTS_MULTI_STREAM_TESTER_H_ # include<map> # include<memory> # include \" api / task_queue / task_queue_base . h \" # include \" call / call . h \" # include \" test / direct_transport . h \" # include \" test / frame_generator_capturer . h \" namespace webrtc { class MultiStreamTester { public : size_t kNumStreams = 3 ; const uint8_t kVideoPayloadType = 1 2 4 ; const std::map<uint8_t,MediaType> payload_type_map_ = { { kVideoPayloadType,MediaType::VIDEO } } ; struct CodecSettings { uint32_t ssrc ; int width ; int height ; } codec_settings [ kNumStreams ] ;)",
    "insertText": "MultiStreamTester()"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTest()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Wait()"
  },
  {
    "label": "UpdateSendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSendConfig(size_t stream_index, VideoSendStream::Config* send_config, VideoEncoderConfig* encoder_config, test::FrameGeneratorCapturer** frame_generator)"
  },
  {
    "label": "UpdateReceiveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReceiveConfig(size_t stream_index, VideoReceiveStreamInterface::Config* receive_config)"
  },
  {
    "label": "CreateSendTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::DirectTransport>)",
    "insertText": "CreateSendTransport(TaskQueueBase* task_queue, Call* sender_call)"
  },
  {
    "label": "CreateReceiveTransport()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<test::DirectTransport>)",
    "insertText": "CreateReceiveTransport(TaskQueueBase* task_queue, Call* receiver_call)"
  }
]