[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FPreAnimatedObjectGroupManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedObjectGroupManager"
  },
  {
    "label": "FRestoreStateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRestoreStateParams"
  },
  {
    "label": "FRootInstanceHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRootInstanceHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TPreAnimatedStateTaskParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPreAnimatedStateTaskParams"
  },
  {
    "label": "FPreAnimatedStateTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreAnimatedStateTraits"
  },
  {
    "label": "TPreAnimatedStateStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPreAnimatedStateStorage"
  },
  {
    "label": "IRestoreMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IRestoreMask"
  },
  {
    "label": "FCachedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedData"
  },
  {
    "label": "TSimplePreAnimatedStateTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimplePreAnimatedStateTraits"
  },
  {
    "label": "TSimplePreAnimatedStateStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSimplePreAnimatedStateStorage"
  },
  {
    "label": "TPreAnimatedStateTaskParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / SortedMap . h \" # include \" Containers / SparseArray . h \" # include \" CoreTypes . h \" # include \" EntitySystem / BuiltInComponentTypes . h \" # include \" EntitySystem / EntityAllocationIterator . h \" # include \" EntitySystem / MovieSceneComponentPtr . h \" # include \" EntitySystem / MovieSceneComponentTypeInfo . h \" # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntityRange . h \" # include \" EntitySystem / MovieSceneEntitySystemLinker . h \" # include \" EntitySystem / MovieSceneEntitySystemTask . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" Evaluation / PreAnimatedState / IMovieScenePreAnimatedStorage . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedCaptureSources . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateExtension . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStateTypes . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedStorageID . h \" # include \" Evaluation / PreAnimatedState / MovieSceneRestoreStateParams . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Casts . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" UObject / ObjectKey . h \" class FReferenceCollector ; class UObject ; namespace UE { namespace MovieScene { struct FPreAnimatedObjectGroupManager ; struct FRestoreStateParams ; struct FRootInstanceHandle ; enum class EPreAnimatedCaptureSourceTracking { CacheIfTracked,AlwaysCache,} ; template<. . . InputTypes> struct TPreAnimatedStateTaskParams { FEntityComponentFilter AdditionalFilter ; EPreAnimatedCaptureSourceTracking TrackingMode ;)",
    "insertText": "TPreAnimatedStateTaskParams()"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (TrackingMode = EPreAnimatedCaptureSourceTracking::CacheIfTracked ; AdditionalFilter .)",
    "insertText": "All({ FBuiltInComponentTypes::Get()->Tags.NeedsLink })"
  },
  {
    "label": "IRestoreMask()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPreAnimatedStateTraits { enum { NeedsInitialize = false,SupportsGrouping = false,SupportsReplaceObject = false,} ; } ; template<StorageTraits> struct TPreAnimatedStateStorage : IPreAnimatedStorage { using KeyType = StorageTraits::KeyType ; using StorageType = StorageTraits::StorageType ; struct IRestoreMask { ~)",
    "insertText": "IRestoreMask()"
  },
  {
    "label": "CanRestore()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanRestore(const KeyType& InKey)"
  },
  {
    "label": "TPreAnimatedStateStorage()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "TPreAnimatedStateStorage()"
  },
  {
    "label": "TPreAnimatedStateStorage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPreAnimatedStateStorage(StorageTraits&& InTraits) : Traits(MoveTemp(InTraits))"
  },
  {
    "label": "TPreAnimatedStateStorage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPreAnimatedStateStorage(const TPreAnimatedStateStorage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TPreAnimatedStateStorage&)",
    "insertText": "operator(const TPreAnimatedStateStorage&)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize(FPreAnimatedStorageID InStorageID, FPreAnimatedStateExtension* InParentExtension)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (ParentExtension = InParentExtension ; StorageID = InStorageID ; if)",
    "insertText": "constexpr(StorageTraits::NeedsInitialize)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (this -> Traits .)",
    "insertText": "Initialize(InStorageID, InParentExtension)"
  },
  {
    "label": "GetStorageType()",
    "kind": "Method",
    "detail": "Function (} } FPreAnimatedStorageID)",
    "insertText": "GetStorageType()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (FCachedData CachedData =)",
    "insertText": "MoveTemp(PreAnimatedStorage[StorageIndex])"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (KeyToStorageIndex .)",
    "insertText": "Remove(CachedData.Key)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (PreAnimatedStorage .)",
    "insertText": "RemoveAt(StorageIndex, 1)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (TransientPreAnimatedStorage .)",
    "insertText": "Remove(StorageIndex)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (Traits .)",
    "insertText": "RestorePreAnimatedValue(CachedData.Key, CachedData.Value, Params)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} return EPreAnimatedStorageRequirement::None ; } else {)",
    "insertText": "ensure(TargetRequirement == EPreAnimatedStorageRequirement::NoChange)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCachedData& CachedData = PreAnimatedStorage [ StorageIndex ] ;)",
    "insertText": "if(CachedData.bInitialized)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} return EPreAnimatedStorageRequirement::NoChange ; } })",
    "insertText": "ensure(SourceRequirement == EPreAnimatedStorageRequirement::Transient)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (Traits .)",
    "insertText": "RestorePreAnimatedValue(PreAnimatedStorage[StorageIndex].Key, *CachedData, Params)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCachedData& ActualValue = PreAnimatedStorage [ StorageIndex ] ;)",
    "insertText": "if(ActualValue.bPersistent)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (Traits .)",
    "insertText": "RestorePreAnimatedValue(ActualValue.Key, ActualValue.Value, Params)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (KeyToStorageIndex .)",
    "insertText": "Remove(Tmp.Key)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (Traits .)",
    "insertText": "RestorePreAnimatedValue(Tmp.Key, Tmp.Value, Params)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return EPreAnimatedStorageRequirement::None ; })",
    "insertText": "if(TargetRequirement == EPreAnimatedStorageRequirement::Persistent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCachedData& PersistentData = PreAnimatedStorage [ StorageIndex ] ;)",
    "insertText": "if(PersistentData.bInitialized)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (PersistentData . bPersistent = true ; Traits .)",
    "insertText": "RestorePreAnimatedValue(PersistentData.Key, PersistentData.Value, Params)"
  },
  {
    "label": "DiscardPreAnimatedStateStorage()",
    "kind": "Method",
    "detail": "Function (} } return EPreAnimatedStorageRequirement::Persistent ; } EPreAnimatedStorageRequirement)",
    "insertText": "DiscardPreAnimatedStateStorage(FPreAnimatedStorageIndex StorageIndex, EPreAnimatedStorageRequirement SourceRequirement)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (KeyType Key = PreAnimatedStorage [ StorageIndex ] . Key ; KeyToStorageIndex .)",
    "insertText": "Remove(Key)"
  },
  {
    "label": "SetRestoreMask()",
    "kind": "Method",
    "detail": "Function (PreAnimatedStorage [ StorageIndex ] . bPersistent = true ; } return EPreAnimatedStorageRequirement::Persistent ; } } void)",
    "insertText": "SetRestoreMask(const IRestoreMask* InRestoreMask)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (RestoreMask = InRestoreMask ; } void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& ReferenceCollector)"
  },
  {
    "label": "AddReferencedObjectForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjectForComponent(&ReferenceCollector, &It.Key())"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } if)",
    "insertText": "constexpr(THasAddReferencedObjectForComponent<KeyType>::Value || THasAddReferencedObjectForComponent<StorageType>::Value)"
  },
  {
    "label": "AddReferencedObjectForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjectForComponent(&ReferenceCollector, &CachedData.Key)"
  },
  {
    "label": "AddReferencedObjectForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjectForComponent(&ReferenceCollector, &CachedData.Value)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} } if)",
    "insertText": "constexpr(THasAddReferencedObjectForComponent<StorageType>::Value)"
  },
  {
    "label": "AddReferencedObjectForComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjectForComponent(&ReferenceCollector, &It.Value())"
  },
  {
    "label": "GetOrCreateStorageIndex()",
    "kind": "Method",
    "detail": "Function (} } } FPreAnimatedStorageIndex)",
    "insertText": "GetOrCreateStorageIndex(const KeyType& InKey)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStorageIndex Index = KeyToStorageIndex .)",
    "insertText": "FindRef(InKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Index = PreAnimatedStorage .)",
    "insertText": "Add(FCachedData{InKey})"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyToStorageIndex .)",
    "insertText": "Add(InKey, Index)"
  },
  {
    "label": "FindStorageIndex()",
    "kind": "Method",
    "detail": "Function (} return Index ; } FPreAnimatedStorageIndex)",
    "insertText": "FindStorageIndex(const KeyType& InKey)"
  },
  {
    "label": "AssignPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AssignPreAnimatedValue(FPreAnimatedStorageIndex StorageIndex, EPreAnimatedStorageRequirement StorageRequirement, StorageType&& InNewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FCachedData& CachedData = PreAnimatedStorage [ StorageIndex . Value ] ;)",
    "insertText": "if(StorageRequirement == EPreAnimatedStorageRequirement::Persistent)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (CachedData . Value =)",
    "insertText": "MoveTemp(InNewValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CachedData . bPersistent = true ; CachedData . bInitialized = true ; } else)",
    "insertText": "if(StorageRequirement == EPreAnimatedStorageRequirement::Transient)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CachedData . bInitialized = true ; } else { TransientPreAnimatedStorage .)",
    "insertText": "Add(StorageIndex, MoveTemp(InNewValue))"
  },
  {
    "label": "IsStorageRequirementSatisfied()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsStorageRequirementSatisfied(FPreAnimatedStorageIndex StorageIndex, EPreAnimatedStorageRequirement StorageRequirement)"
  },
  {
    "label": "FindEntry()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<. . . KeyArgs> FPreAnimatedStateEntry)",
    "insertText": "FindEntry(KeyArgs&&... InKeyArgs)"
  },
  {
    "label": "KeyArgs()",
    "kind": "Method",
    "detail": "Function (KeyType Key { Forward<)",
    "insertText": "KeyArgs(InKeyArgs)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStorageGroupHandle GroupHandle ; if)",
    "insertText": "constexpr(StorageTraits::SupportsGrouping)"
  },
  {
    "label": "FindGroup()",
    "kind": "Method",
    "detail": "Function (GroupHandle = this -> Traits .)",
    "insertText": "FindGroup(InKeyArgs...)"
  },
  {
    "label": "FindStorageIndex()",
    "kind": "Method",
    "detail": "Function (} FPreAnimatedStorageIndex StorageIndex = this ->)",
    "insertText": "FindStorageIndex(Key)"
  },
  {
    "label": "MakeGroup()",
    "kind": "Method",
    "detail": "Function (GroupHandle = this -> Traits .)",
    "insertText": "MakeGroup(InKeyArgs...)"
  },
  {
    "label": "GetOrCreateStorageIndex()",
    "kind": "Method",
    "detail": "Function (} FPreAnimatedStorageIndex StorageIndex = this ->)",
    "insertText": "GetOrCreateStorageIndex(Key)"
  },
  {
    "label": "IsStorageInitialized()",
    "kind": "Method",
    "detail": "Function (PreAnimatedStorage [ StorageIndex . Value ] . bPersistent = true ; } bool)",
    "insertText": "IsStorageInitialized(FPreAnimatedStorageIndex StorageIndex)"
  },
  {
    "label": "HasEverAnimated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasEverAnimated(FPreAnimatedStorageIndex StorageIndex)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (KeyType OldKey = PreAnimatedStorage [ StorageIndex ] . Key ; PreAnimatedStorage [ StorageIndex ] . Key = NewKey ; KeyToStorageIndex .)",
    "insertText": "Remove(OldKey)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KeyToStorageIndex .)",
    "insertText": "Add(NewKey, StorageIndex)"
  },
  {
    "label": "GetCachedValue()",
    "kind": "Method",
    "detail": "Function (} const StorageType&)",
    "insertText": "GetCachedValue(FPreAnimatedStorageIndex StorageIndex)"
  },
  {
    "label": "StorageType()",
    "kind": "Method",
    "detail": "Function (const StorageType DefaultValue =)",
    "insertText": "StorageType()"
  },
  {
    "label": "BeginTrackingEntitiesTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrackingEntitiesTask(Linker, TPreAnimatedStateTaskParams<ContributorTypes...>(), InComponentTypes...)"
  },
  {
    "label": "BeginTrackingEntitiesTask()",
    "kind": "Method",
    "detail": "Function (} template<TaskType,. . . ContributorTypes> void)",
    "insertText": "BeginTrackingEntitiesTask(UMovieSceneEntitySystemLinker* Linker, const TaskType& InParams, TComponentTypeID<ContributorTypes>... InComponentTypes)"
  },
  {
    "label": "InParams()",
    "kind": "Method",
    "detail": "Function (auto VisitAllocation = [ this,)",
    "insertText": "InParams(FEntityAllocationIteratorItem Item, TRead<FMovieSceneEntityID> EntityIDs, TRead<FRootInstanceHandle> RootInstanceHandles, TRead<ContributorTypes>... Inputs)"
  },
  {
    "label": "Params()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedTrackerParams)",
    "insertText": "Params(Item)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Params . Num ; const bool bWantsRestore = Params . bWantsRestoreState ;)",
    "insertText": "if(!this->ParentExtension->IsCapturingGlobalState() && !bWantsRestore)"
  },
  {
    "label": "MakeEntry()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStateEntry Entry =)",
    "insertText": "MakeEntry(Inputs[Index]...)"
  },
  {
    "label": "BeginTrackingEntity()",
    "kind": "Method",
    "detail": "Function (EntityMetaData ->)",
    "insertText": "BeginTrackingEntity(Entry, EntityIDs[Index], RootInstanceHandles[Index], bWantsRestore)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } ; FBuiltInComponentTypes* BuiltInComponents =)",
    "insertText": "Get()"
  },
  {
    "label": "ExcludeMask()",
    "kind": "Method",
    "detail": "Function (FComponentMask)",
    "insertText": "ExcludeMask({ BuiltInComponents->Tags.NeedsUnlink, BuiltInComponents->Tags.Finished, BuiltInComponents->Tags.Ignored })"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityTaskBuilder() .ReadEntityIDs() .Read(BuiltInComponents->RootInstanceHandle) .ReadAllOf(InComponentTypes...) .FilterNone(ExcludeMask) .CombineFilter(InParams.AdditionalFilter) .Iterate_PerAllocation(&Linker->EntityManager, VisitAllocation)"
  },
  {
    "label": "BeginTrackingEntity()",
    "kind": "Method",
    "detail": "Function (} template<. . . ContributorTypes> void)",
    "insertText": "BeginTrackingEntity(FMovieSceneEntityID EntityID, const bool bWantsRestoreState, FRootInstanceHandle RootInstanceHandle, ContributorTypes... InComponents)"
  },
  {
    "label": "GetOrCreateEntityMetaData()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedEntityCaptureSource* EntityMetaData = this -> ParentExtension ->)",
    "insertText": "GetOrCreateEntityMetaData()"
  },
  {
    "label": "BeginTrackingEntity()",
    "kind": "Method",
    "detail": "Function (EntityMetaData ->)",
    "insertText": "BeginTrackingEntity(Entry, EntityID, RootInstanceHandle, bWantsRestoreState)"
  },
  {
    "label": "CachePreAnimatedValues()",
    "kind": "Method",
    "detail": "Function (} template<. . . ContributorTypes> void)",
    "insertText": "CachePreAnimatedValues(UMovieSceneEntitySystemLinker* Linker, TComponentTypeID<ContributorTypes>... InComponentTypes)"
  },
  {
    "label": "CachePreAnimatedValuesTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreAnimatedValuesTask(Linker, TPreAnimatedStateTaskParams<ContributorTypes...>(), InComponentTypes...)"
  },
  {
    "label": "CachePreAnimatedValuesTask()",
    "kind": "Method",
    "detail": "Function (} template<TaskType,. . . ContributorTypes> void)",
    "insertText": "CachePreAnimatedValuesTask(UMovieSceneEntitySystemLinker* Linker, const TaskType& InParams, TComponentTypeID<ContributorTypes>... InComponentTypes)"
  },
  {
    "label": "InParams()",
    "kind": "Method",
    "detail": "Function (auto VisitAllocation = [ this,&)",
    "insertText": "InParams(FEntityAllocationIteratorItem Item, TRead<ContributorTypes>... Values)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (const int32 Num = Item .)",
    "insertText": "GetAllocation()->Num()"
  },
  {
    "label": "MakeEntry()",
    "kind": "Method",
    "detail": "Function (continue ; } FPreAnimatedStateEntry Entry =)",
    "insertText": "MakeEntry(Values[Index]...)"
  },
  {
    "label": "TrackCaptureSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackCaptureSource(Entry, InParams.TrackingMode)"
  },
  {
    "label": "GetStorageRequirement()",
    "kind": "Method",
    "detail": "Function (EPreAnimatedStorageRequirement StorageRequirement = this -> ParentExtension ->)",
    "insertText": "GetStorageRequirement(Entry)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (StorageType NewValue = this -> Traits .)",
    "insertText": "CachePreAnimatedValue(Values[Index]...)"
  },
  {
    "label": "AssignPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AssignPreAnimatedValue(Entry.ValueHandle.StorageIndex, StorageRequirement, MoveTemp(NewValue))"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (} } } ;)",
    "insertText": "FEntityTaskBuilder() .ReadAllOf(InComponentTypes...) .CombineFilter(InParams.AdditionalFilter) .Iterate_PerAllocation(&Linker->EntityManager, VisitAllocation)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . ContributorTypes> void)",
    "insertText": "CachePreAnimatedValue(ContributorTypes... Values)"
  },
  {
    "label": "CacheTrackedPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheTrackedPreAnimatedValue(EPreAnimatedCaptureSourceTracking::CacheIfTracked, Values...)"
  },
  {
    "label": "CacheTrackedPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . ContributorTypes> void)",
    "insertText": "CacheTrackedPreAnimatedValue(EPreAnimatedCaptureSourceTracking TrackingMode, ContributorTypes... Values)"
  },
  {
    "label": "MakeEntry()",
    "kind": "Method",
    "detail": "Function (FPreAnimatedStateEntry Entry =)",
    "insertText": "MakeEntry(Values...)"
  },
  {
    "label": "TrackCaptureSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackCaptureSource(Entry, TrackingMode)"
  },
  {
    "label": "HasActiveCaptureSource()",
    "kind": "Method",
    "detail": "Function (EPreAnimatedStorageRequirement Requirement = ParentExtension ->)",
    "insertText": "HasActiveCaptureSource()"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (StorageType NewValue = this -> Traits .)",
    "insertText": "CachePreAnimatedValue(Values...)"
  },
  {
    "label": "AssignPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AssignPreAnimatedValue(Entry.ValueHandle.StorageIndex, Requirement, MoveTemp(NewValue))"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} } } template<OnCacheValue> void)",
    "insertText": "CachePreAnimatedValue(const KeyType& InKey, OnCacheValue&& CacheCallback, EPreAnimatedCaptureSourceTracking TrackingMode = EPreAnimatedCaptureSourceTracking::CacheIfTracked)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CachePreAnimatedValue(FPreAnimatedStorageGroupHandle(), InKey, Forward<OnCacheValue>(CacheCallback), TrackingMode)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} template<OnCacheValue> void)",
    "insertText": "CachePreAnimatedValue(FPreAnimatedStorageGroupHandle GroupHandle, const KeyType& InKey, OnCacheValue&& CacheCallback, EPreAnimatedCaptureSourceTracking TrackingMode = EPreAnimatedCaptureSourceTracking::CacheIfTracked)"
  },
  {
    "label": "CacheCallback()",
    "kind": "Method",
    "detail": "Function (StorageType NewValue =)",
    "insertText": "CacheCallback(InKey)"
  },
  {
    "label": "AssignPreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignPreAnimatedValue(StorageIndex, Requirement, MoveTemp(NewValue))"
  },
  {
    "label": "BeginTrackingAndCachePreAnimatedValues()",
    "kind": "Method",
    "detail": "Function (} } template<. . . ContributorTypes> void)",
    "insertText": "BeginTrackingAndCachePreAnimatedValues(UMovieSceneEntitySystemLinker* Linker, TComponentTypeID<ContributorTypes>... InComponentTypes)"
  },
  {
    "label": "BeginTrackingAndCachePreAnimatedValuesTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrackingAndCachePreAnimatedValuesTask(Linker, TPreAnimatedStateTaskParams<ContributorTypes...>(), InComponentTypes...)"
  },
  {
    "label": "BeginTrackingAndCachePreAnimatedValuesTask()",
    "kind": "Method",
    "detail": "Function (} template<TaskType,. . . ContributorTypes> void)",
    "insertText": "BeginTrackingAndCachePreAnimatedValuesTask(UMovieSceneEntitySystemLinker* Linker, const TaskType& InParams, TComponentTypeID<ContributorTypes>... InComponentTypes)"
  },
  {
    "label": "CachePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (StorageType NewValue = this -> Traits .)",
    "insertText": "CachePreAnimatedValue(Inputs[Index]...)"
  },
  {
    "label": "FEntityTaskBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEntityTaskBuilder() .ReadEntityIDs() .Read(BuiltInComponents->RootInstanceHandle) .ReadAllOf(InComponentTypes...) .CombineFilter(InParams.AdditionalFilter) .Iterate_PerAllocation(&Linker->EntityManager, VisitAllocation)"
  },
  {
    "label": "OnObjectReplaced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnObjectReplaced(FPreAnimatedStorageIndex StorageIndex, const FObjectKey& OldObject, const FObjectKey& NewObject)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (KeyType ExistingKey = this ->)",
    "insertText": "GetKey(StorageIndex)"
  },
  {
    "label": "ReplaceObject()",
    "kind": "Method",
    "detail": "Function (this -> Traits .)",
    "insertText": "ReplaceObject(ExistingKey, NewObject)"
  },
  {
    "label": "ReplaceKey()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "ReplaceKey(StorageIndex, ExistingKey)"
  },
  {
    "label": "ShouldTrackCaptureSource()",
    "kind": "Method",
    "detail": "Function (} protected : template<. . . KeyArgs> bool)",
    "insertText": "ShouldTrackCaptureSource(EPreAnimatedCaptureSourceTracking TrackingMode, KeyArgs&&... InKeyArgs)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (} return false ; } break ; case EPreAnimatedCaptureSourceTracking::AlwaysCache : { return true ; } break ; default :)",
    "insertText": "ensureMsgf(false, TEXT(\"Unsupported tracking mode, no pre-animated state caching will occur!\"))"
  },
  {
    "label": "EnsureMetaData()",
    "kind": "Method",
    "detail": "Function (this -> ParentExtension ->)",
    "insertText": "EnsureMetaData(Entry)"
  },
  {
    "label": "AddSourceMetaData()",
    "kind": "Method",
    "detail": "Function (} break ; case EPreAnimatedCaptureSourceTracking::AlwaysCache : { this -> ParentExtension ->)",
    "insertText": "AddSourceMetaData(Entry)"
  },
  {
    "label": "FCachedData()",
    "kind": "Method",
    "detail": "Function (} } struct FCachedData {)",
    "insertText": "FCachedData() : bInitialized(false) , bPersistent(false)"
  },
  {
    "label": "FCachedData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedData(const KeyType& InKey) : Key(InKey) , bInitialized(false) , bPersistent(false)"
  },
  {
    "label": "FCachedData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedData(const KeyType& InKey, StorageType&& InValue) : Key(InKey) , Value(MoveTemp(InValue)) , bInitialized(true) , bPersistent(false)"
  },
  {
    "label": "RestorePreAnimatedValue()",
    "kind": "Method",
    "detail": "Function (} KeyType Key ; StorageType Value ; bool bInitialized : 1 ; bool bPersistent : 1 ; } ; TMap<KeyType,FPreAnimatedStorageIndex> KeyToStorageIndex ; TSparseArray<FCachedData> PreAnimatedStorage ; TSortedMap<FPreAnimatedStorageIndex,StorageType> TransientPreAnimatedStorage ; FPreAnimatedStateExtension* ParentExtension = nullptr ; const IRestoreMask* RestoreMask = nullptr ; FPreAnimatedStorageID StorageID ; StorageTraits Traits ; } ; template<InKeyType,InStorageType> struct TSimplePreAnimatedStateTraits : FPreAnimatedStateTraits { using KeyType = InKeyType ; using StorageType = InStorageType ; void)",
    "insertText": "RestorePreAnimatedValue(const KeyType& Key, StorageType& SavedValue, const FRestoreStateParams& Params)"
  },
  {
    "label": "RestoreState()",
    "kind": "Method",
    "detail": "Function (SavedValue .)",
    "insertText": "RestoreState(Key, Params)"
  }
]