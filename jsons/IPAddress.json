[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "FInternetAddrKeyMapFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternetAddrKeyMapFuncs"
  },
  {
    "label": "FInternetAddrConstKeyMapFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternetAddrConstKeyMapFuncs"
  },
  {
    "label": "FInternetAddr()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformAtomics . h \" # include \" Misc / AssertionMacros . h \" # include \" SocketTypes . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FInternetAddr { protected :)",
    "insertText": "FInternetAddr()"
  },
  {
    "label": "CompareEndpoints()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CompareEndpoints(const FInternetAddr& InAddr)"
  },
  {
    "label": "SetIp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIp(const TCHAR* InAddr, bool& bIsValid)"
  },
  {
    "label": "GetIp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIp(uint32& OutAddr)"
  },
  {
    "label": "SetPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPort(int32 InPort)"
  },
  {
    "label": "IsPortValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPortValid(int32 InPort)"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (OutPort =)",
    "insertText": "GetPort()"
  },
  {
    "label": "SetPlatformPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlatformPort(int32 InPort)"
  },
  {
    "label": "SetPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPort(InPort)"
  },
  {
    "label": "GetPlatformPort()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlatformPort()"
  },
  {
    "label": "SetRawIp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRawIp(const TArray<uint8>& RawAddr)"
  },
  {
    "label": "GetRawIp()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "GetRawIp()"
  },
  {
    "label": "SetAnyAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnyAddress()"
  },
  {
    "label": "SetBroadcastAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBroadcastAddress()"
  },
  {
    "label": "SetLoopbackAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLoopbackAddress()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(bool bAppendPort)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FInternetAddr& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr>)",
    "insertText": "Clone()"
  },
  {
    "label": "GetProtocolType()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetProtocolType()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FInternetAddr& InAddr)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueType> struct FInternetAddrKeyMapFuncs : public BaseKeyFuncs<ValueType,TSharedRef<FInternetAddr>,false> { const TSharedRef<FInternetAddr>&)",
    "insertText": "GetSetKey(const TPair<TSharedRef<FInternetAddr>, ValueType>& Element)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueType> struct FInternetAddrConstKeyMapFuncs : public BaseKeyFuncs<ValueType,TSharedRef<const FInternetAddr>,false> { const TSharedRef<const FInternetAddr>&)",
    "insertText": "GetSetKey(const TPair<TSharedRef<const FInternetAddr>, ValueType>& Element)"
  }
]