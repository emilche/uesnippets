[
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "ANavMeshBoundsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavMeshBoundsVolume"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FNavDataGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavDataGenerator"
  },
  {
    "label": "INavigationInvokerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationInvokerInterface"
  },
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "INavRelevantInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavRelevantInterface"
  },
  {
    "label": "UCrowdManagerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdManagerBase"
  },
  {
    "label": "UNavArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavArea"
  },
  {
    "label": "UNavigationPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationPath"
  },
  {
    "label": "UNavigationObjectRepository",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationObjectRepository"
  },
  {
    "label": "UNavigationSystemModuleConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemModuleConfig"
  },
  {
    "label": "FDebugText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugText"
  },
  {
    "label": "FNavigationRelevantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantData"
  },
  {
    "label": "FNavigationOctreeElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationOctreeElement"
  },
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "FCustomLinkOwnerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomLinkOwnerInfo"
  },
  {
    "label": "FNavigationSystemExec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSystemExec"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNavRegenTimeSlicer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavRegenTimeSlicer"
  },
  {
    "label": "FTileHistoryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileHistoryData"
  },
  {
    "label": "FNavRegenTimeSliceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavRegenTimeSliceManager"
  },
  {
    "label": "UNavigationSystemV1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemV1"
  },
  {
    "label": "ERegistrationResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERegistrationResult"
  },
  {
    "label": "EOctreeUpdateMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOctreeUpdateMode"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UNavigationSystemModuleConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemModuleConfig"
  },
  {
    "label": "FCustomLinkOwnerInfo()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FCustomLinkOwnerInfo(INavLinkCustomInterface* Link)"
  },
  {
    "label": "ShouldLoadNavigationOnClient()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "ShouldLoadNavigationOnClient(ANavigationData& NavData)"
  },
  {
    "label": "MakeAllComponentsNeverAffectNav()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "MakeAllComponentsNeverAffectNav(AActor& Actor)"
  },
  {
    "label": "MARK_TIMESLICE_SECTION_DEBUG()",
    "kind": "Method",
    "detail": "Function (define)",
    "insertText": "MARK_TIMESLICE_SECTION_DEBUG(TIME_SLICER, TIME_SLICE_FNAME)"
  },
  {
    "label": "SetupTimeSlice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTimeSlice(double SliceDuration)"
  },
  {
    "label": "StartTimeSlice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTimeSlice()"
  },
  {
    "label": "EndTimeSliceAndAdjustDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTimeSliceAndAdjustDuration()"
  },
  {
    "label": "FNavRegenTimeSliceManager()",
    "kind": "Method",
    "detail": "Function (NAVIGATIONSYSTEM_API)",
    "insertText": "FNavRegenTimeSliceManager()"
  },
  {
    "label": "ResetTileWaitTimeArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTileWaitTimeArrays(const TArray<TObjectPtr<ANavigationData>>& NavDataSet)"
  },
  {
    "label": "PushTileWaitTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTileWaitTime(const int32 NavDataIndex, const double NewTime)"
  },
  {
    "label": "ResetTileHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTileHistoryData(const TArray<TObjectPtr<ANavigationData>>& NavDataSet)"
  },
  {
    "label": "PushTileHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTileHistoryData(const int32 NavDataIndex, const FTileHistoryData& TileData)"
  },
  {
    "label": "ResetTileWaitTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTileWaitTime(const int32 NavDataIndex)"
  },
  {
    "label": "CalcAverageDeltaTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcAverageDeltaTime(uint64 FrameNum)"
  },
  {
    "label": "CalcTimeSliceDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTimeSliceDuration(const TArray<TObjectPtr<ANavigationData>>& NavDataSet, int32 NumTilesToRegen, const TArray<double>& CurrentTileRegenDurations)"
  },
  {
    "label": "SetMinTimeSliceDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinTimeSliceDuration(double NewMinTimeSliceDuration)"
  },
  {
    "label": "SetMaxTimeSliceDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxTimeSliceDuration(double NewMaxTimeSliceDuration)"
  },
  {
    "label": "SetMaxDesiredTileRegenDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDesiredTileRegenDuration(float NewMaxDesiredTileRegenDuration)"
  },
  {
    "label": "UpdateInvokers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInvokers()"
  },
  {
    "label": "UpdateNavDataActiveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavDataActiveTiles()"
  },
  {
    "label": "DirtyTilesInBuildBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyTilesInBuildBounds()"
  },
  {
    "label": "UnregisterInvoker_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInvoker_Internal(const UObject& Invoker)"
  },
  {
    "label": "RegisterToRepositoryDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterToRepositoryDelegates()"
  },
  {
    "label": "K2_ProjectPointToNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_ProjectPointToNavigation(UObject* WorldContextObject, const FVector& Point, FVector& ProjectedLocation, ANavigationData* NavData, TSubclassOf<UNavigationQueryFilter> FilterClass, const FVector QueryExtent = FVector::ZeroVector)"
  },
  {
    "label": "K2_GetRandomReachablePointInRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_GetRandomReachablePointInRadius(UObject* WorldContextObject, const FVector& Origin, FVector& RandomLocation, float Radius, ANavigationData* NavData = NULL, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL)"
  },
  {
    "label": "K2_GetRandomLocationInNavigableRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_GetRandomLocationInNavigableRadius(UObject* WorldContextObject, const FVector& Origin, FVector& RandomLocation, float Radius, ANavigationData* NavData = NULL, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL)"
  },
  {
    "label": "GetPathCost()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "GetPathCost(UObject* WorldContextObject, const FVector& PathStart, const FVector& PathEnd, double& PathCost, ANavigationData* NavData = NULL, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL)"
  },
  {
    "label": "GetPathLength()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "GetPathLength(UObject* WorldContextObject, const FVector& PathStart, const FVector& PathEnd, double& PathLength, ANavigationData* NavData = NULL, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL)"
  },
  {
    "label": "IsNavigationBeingBuilt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationBeingBuilt(UObject* WorldContextObject)"
  },
  {
    "label": "IsNavigationBeingBuiltOrLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationBeingBuiltOrLocked(UObject* WorldContextObject)"
  },
  {
    "label": "NavigationRaycast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavigationRaycast(UObject* WorldContextObject, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL, AController* Querier = NULL)"
  },
  {
    "label": "NavigationRaycastWithAdditionalResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavigationRaycastWithAdditionalResults(UObject* WorldContextObject, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL, AController* Querier = NULL)"
  },
  {
    "label": "SetMaxSimultaneousTileGenerationJobsCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSimultaneousTileGenerationJobsCount(int32 MaxNumberOfJobs)"
  },
  {
    "label": "ResetMaxSimultaneousTileGenerationJobsCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMaxSimultaneousTileGenerationJobsCount()"
  },
  {
    "label": "RegisterNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavigationInvoker(AActor* Invoker, float TileGenerationRadius = 3000, float TileRemovalRadius = 5000)"
  },
  {
    "label": "UnregisterNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavigationInvoker(AActor* Invoker)"
  },
  {
    "label": "SetGeometryGatheringMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometryGatheringMode(ENavDataGatheringModeConfig NewMode)"
  },
  {
    "label": "K2_ReplaceAreaInOctreeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_ReplaceAreaInOctreeData(const UObject* Object, TSubclassOf<UNavArea> OldArea, TSubclassOf<UNavArea> NewArea)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetOuterUWorld()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetOuterUWorld()"
  },
  {
    "label": "CalcTimeSlicedUpdateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTimeSlicedUpdateData(TArray<double>& OutCurrentTimeSlicedBuildTaskDurations, TArray<bool>& OutIsTimeSlicingArray, bool& bOutAnyNonTimeSlicedGenerators, TArray<int32, TInlineAllocator<8>>& OutNumTimeSlicedRemainingBuildTasksArray)"
  },
  {
    "label": "CreateCrowdManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCrowdManager()"
  },
  {
    "label": "SetSupportedAgentsNavigationClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSupportedAgentsNavigationClass(int32 AgentIndex, TSubclassOf<ANavigationData> NavigationDataClass)"
  },
  {
    "label": "FindPathSync()",
    "kind": "Method",
    "detail": "Function (FPathFindingResult)",
    "insertText": "FindPathSync(const FNavAgentProperties& AgentProperties, FPathFindingQuery Query, EPathFindingMode::Type Mode = EPathFindingMode::Regular)"
  },
  {
    "label": "FindPathSync()",
    "kind": "Method",
    "detail": "Function (FPathFindingResult)",
    "insertText": "FindPathSync(FPathFindingQuery Query, EPathFindingMode::Type Mode = EPathFindingMode::Regular)"
  },
  {
    "label": "FindPathAsync()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindPathAsync(const FNavAgentProperties& AgentProperties, FPathFindingQuery Query, const FNavPathQueryDelegate& ResultDelegate, EPathFindingMode::Type Mode = EPathFindingMode::Regular)"
  },
  {
    "label": "AbortAsyncFindPathRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortAsyncFindPathRequest(uint32 AsynPathQueryID)"
  },
  {
    "label": "GetRandomPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPoint(FNavLocation& ResultLocation, ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "GetWorldPartitionNavigationDataBuilderOverlap()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetWorldPartitionNavigationDataBuilderOverlap(const UWorld& World)"
  },
  {
    "label": "OverrideSupportedAgents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverrideSupportedAgents(const TArray<FNavDataConfig>& NewSupportedAgents)"
  },
  {
    "label": "SetSupportedAgentsMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSupportedAgentsMask(const FNavAgentSelector& InSupportedAgentsMask)"
  },
  {
    "label": "DoesPathIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPathIntersectBox(const FNavigationPath* Path, const FBox& Box, uint32 StartingIndex = 0, FVector* AgentExtent = NULL)"
  },
  {
    "label": "DoesPathIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPathIntersectBox(const FNavigationPath* Path, const FBox& Box, const FVector& AgentLocation, uint32 StartingIndex = 0, FVector* AgentExtent = NULL)"
  },
  {
    "label": "RegisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInvoker(AActor& Invoker, float TileGenerationRadius, float TileRemovalRadius, const FNavAgentSelector& Agents, ENavigationInvokerPriority InPriority)"
  },
  {
    "label": "RegisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInvoker(const TWeakInterfacePtr<INavigationInvokerInterface>& Invoker, float TileGenerationRadius, float TileRemovalRadius, const FNavAgentSelector& Agents, ENavigationInvokerPriority InPriority)"
  },
  {
    "label": "UnregisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInvoker(AActor& Invoker)"
  },
  {
    "label": "UnregisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInvoker(const TWeakInterfacePtr<INavigationInvokerInterface>& Invoker)"
  },
  {
    "label": "UnregisterNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavigationInvoker(AActor& Invoker)"
  },
  {
    "label": "UnregisterNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavData(ANavigationData* NavData)"
  },
  {
    "label": "UnregisterUnusedNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterUnusedNavData()"
  },
  {
    "label": "RequestRegistrationDeferred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRegistrationDeferred(ANavigationData& NavData)"
  },
  {
    "label": "ApplySupportedAgentsFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplySupportedAgentsFilter()"
  },
  {
    "label": "RegisterNavigationDataInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavigationDataInstances()"
  },
  {
    "label": "ConditionalPopulateNavOctree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalPopulateNavOctree()"
  },
  {
    "label": "ConstructNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructNavOctree()"
  },
  {
    "label": "ProcessRegistrationCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRegistrationCandidates()"
  },
  {
    "label": "ProcessCustomLinkPendingRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCustomLinkPendingRegistration()"
  },
  {
    "label": "PerformNavigationBoundsUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformNavigationBoundsUpdate(const TArray<FNavigationBoundsUpdateRequest>& UpdateRequests)"
  },
  {
    "label": "AddNavigationBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationBounds(const FNavigationBounds& NewBounds)"
  },
  {
    "label": "GatherNavigationBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherNavigationBounds()"
  },
  {
    "label": "GetInvokerSeedLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInvokerSeedLocations(const UWorld& InWorld, TArray<FVector, TInlineAllocator<32>>& OutSeedLocations)"
  },
  {
    "label": "GetInvokerSeedLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInvokerSeedLocations(const UWorld& InWorld, TArray<FVector2D, TInlineAllocator<32>>& OutSeedLocations)"
  },
  {
    "label": "RegisterComponentToNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentToNavOctree(UActorComponent* Comp)"
  },
  {
    "label": "UnregisterComponentToNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponentToNavOctree(UActorComponent* Comp)"
  },
  {
    "label": "ReleaseInitialBuildingLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseInitialBuildingLock()"
  },
  {
    "label": "AddNavigationElement()",
    "kind": "Method",
    "detail": "Function (FNavigationElementHandle)",
    "insertText": "AddNavigationElement(UWorld* World, FNavigationElement&& Element)"
  },
  {
    "label": "RemoveNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavigationElement(UWorld* World, FNavigationElementHandle ElementHandle)"
  },
  {
    "label": "OnNavigationElementUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationElementUpdated(UWorld* World, FNavigationElementHandle ElementHandle, FNavigationElement&& Element)"
  },
  {
    "label": "OnNavRelevantObjectRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavRelevantObjectRegistered(UObject& Object)"
  },
  {
    "label": "UpdateNavRelevantObjectInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavRelevantObjectInNavOctree(UObject& Object)"
  },
  {
    "label": "OnNavRelevantObjectUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavRelevantObjectUnregistered(UObject& Object)"
  },
  {
    "label": "OnComponentRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentRegistered(UActorComponent* Comp)"
  },
  {
    "label": "OnComponentUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentUnregistered(UActorComponent* Comp)"
  },
  {
    "label": "RegisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponent(UActorComponent* Comp)"
  },
  {
    "label": "UnregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponent(UActorComponent* Comp)"
  },
  {
    "label": "OnActorRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorRegistered(AActor* Actor)"
  },
  {
    "label": "OnActorUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorUnregistered(AActor* Actor)"
  },
  {
    "label": "UpdateActorInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorInNavOctree(AActor& Actor)"
  },
  {
    "label": "UpdateComponentInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentInNavOctree(UActorComponent& Comp)"
  },
  {
    "label": "UpdateActorAndComponentsInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorAndComponentsInNavOctree(AActor& Actor, bool bUpdateAttachedActors = true)"
  },
  {
    "label": "UpdateNavOctreeAfterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeAfterMove(USceneComponent* Comp)"
  },
  {
    "label": "RegisterNavRelevantObjectStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavRelevantObjectStatic(const INavRelevantInterface& NavRelevantObject, const UObject& Object)"
  },
  {
    "label": "RegisterNavRelevantObjectInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavRelevantObjectInternal(const INavRelevantInterface& NavRelevantObject, const UObject& Object)"
  },
  {
    "label": "UnregisterNavRelevantObjectStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavRelevantObjectStatic(const UObject& Object)"
  },
  {
    "label": "UnregisterNavRelevantObjectInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavRelevantObjectInternal(const UObject& Object)"
  },
  {
    "label": "GetAllAttachedActors()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAllAttachedActors(const AActor& RootActor, TArray<AActor*>& OutAttachedActors)"
  },
  {
    "label": "UpdateAttachedActorsInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttachedActorsInNavOctree(AActor& RootActor)"
  },
  {
    "label": "ClearNavOctreeAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearNavOctreeAll(AActor* Actor)"
  },
  {
    "label": "UpdateNavOctreeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeBounds(AActor* Actor)"
  },
  {
    "label": "AddDirtyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirtyArea(const FBox& NewArea, ENavigationDirtyFlag Flags, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "AddDirtyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirtyAreas(const TArray<FBox>& NewAreas, ENavigationDirtyFlag Flags, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "AddDirtyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirtyArea(const FBox& NewArea, int32 Flags, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "AddDirtyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirtyAreas(const TArray<FBox>& NewAreas, int32 Flags, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "HashObject()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "HashObject(const UObject& Object)"
  },
  {
    "label": "RemoveObjectsNavOctreeId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObjectsNavOctreeId(const UObject& Object)"
  },
  {
    "label": "RemoveNavOctreeElementId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavOctreeElementId(const FOctreeElementId2& ElementId, int32 UpdateFlags)"
  },
  {
    "label": "RemoveFromNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromNavOctree(const FOctreeElementId2& ElementId, int32 UpdateFlags)"
  },
  {
    "label": "FindElementsInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindElementsInNavOctree(const FBox& QueryBox, const FNavigationOctreeFilter& Filter, TArray<FNavigationOctreeElement>& Elements)"
  },
  {
    "label": "UpdateNavOctreeElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeElement(FNavigationElementHandle Handle, const TSharedRef<const FNavigationElement>& Element, int32 UpdateFlags)"
  },
  {
    "label": "UpdateNavOctreeElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeElement(UObject* ElementOwner, INavRelevantInterface* ElementInterface, int32 UpdateFlags)"
  },
  {
    "label": "UpdateNavOctreeParentChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeParentChain(UObject* ElementOwner, bool bSkipElementOwnerUpdate = false)"
  },
  {
    "label": "UpdateNavOctreeElementBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNavOctreeElementBounds(FNavigationElementHandle Handle, const FBox& NewBounds, TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "UpdateNavOctreeElementBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNavOctreeElementBounds(UActorComponent* Comp, const FBox& NewBounds, const FBox& DirtyArea)"
  },
  {
    "label": "UpdateNavOctreeElementBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNavOctreeElementBounds(UObject& Object, const FBox& NewBounds, TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "ReplaceAreaInOctreeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceAreaInOctreeData(FNavigationElementHandle Handle, TSubclassOf<UNavArea> OldArea, TSubclassOf<UNavArea> NewArea, bool bReplaceChildClasses = false)"
  },
  {
    "label": "ReplaceAreaInOctreeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceAreaInOctreeData(const UObject& Object, TSubclassOf<UNavArea> OldArea, TSubclassOf<UNavArea> NewArea, bool bReplaceChildClasses = false)"
  },
  {
    "label": "RegisterCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomLink(INavLinkCustomInterface& CustomLink)"
  },
  {
    "label": "UnregisterCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCustomLink(INavLinkCustomInterface& CustomLink)"
  },
  {
    "label": "RequestCustomLinkRegistering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCustomLinkRegistering(INavLinkCustomInterface& CustomLink, UObject* OwnerOb)"
  },
  {
    "label": "RequestCustomLinkUnregistering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCustomLinkUnregistering(INavLinkCustomInterface& CustomLink, UObject* ObjectOb)"
  },
  {
    "label": "UpdateCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomLink(const INavLinkCustomInterface* CustomLink)"
  },
  {
    "label": "ComputeCustomLinkBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeCustomLinkBounds(const INavLinkCustomInterface& CustomLink)"
  },
  {
    "label": "RequestAreaRegistering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAreaRegistering(UClass* NavAreaClass)"
  },
  {
    "label": "RequestAreaUnregistering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAreaUnregistering(UClass* NavAreaClass)"
  },
  {
    "label": "ResetCachedFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCachedFilter(TSubclassOf<UNavigationQueryFilter> FilterClass)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build()"
  },
  {
    "label": "CancelBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelBuild()"
  },
  {
    "label": "OnPIEStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPIEStart()"
  },
  {
    "label": "OnPIEEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPIEEnd()"
  },
  {
    "label": "OnNavigationBoundsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsUpdated(ANavMeshBoundsVolume* NavVolume)"
  },
  {
    "label": "OnNavigationBoundsAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsAdded(ANavMeshBoundsVolume* NavVolume)"
  },
  {
    "label": "OnNavigationBoundsRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsRemoved(ANavMeshBoundsVolume* NavVolume)"
  },
  {
    "label": "IsNavigationBuildInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationBuildInProgress()"
  },
  {
    "label": "OnNavigationGenerationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationGenerationFinished(ANavigationData& NavData)"
  },
  {
    "label": "DoInitialSetup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoInitialSetup()"
  },
  {
    "label": "UpdateAbstractNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAbstractNavData()"
  },
  {
    "label": "AddLevelToOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelToOctree(ULevel& Level)"
  },
  {
    "label": "OnBeginTearingDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginTearingDown(UWorld* World)"
  },
  {
    "label": "OnWorldInitDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldInitDone(FNavigationSystemRunMode Mode)"
  },
  {
    "label": "InitializeLevelCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeLevelCollisions()"
  },
  {
    "label": "AddNavigationBuildLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationBuildLock(uint8 Flags)"
  },
  {
    "label": "RemoveNavigationBuildLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavigationBuildLock(uint8 Flags, const ELockRemovalRebuildAction RebuildAction = ELockRemovalRebuildAction::Rebuild)"
  },
  {
    "label": "SetNavigationOctreeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationOctreeLock(bool bLock)"
  },
  {
    "label": "SetNavigationAutoUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationAutoUpdateEnabled(bool bNewEnable, UNavigationSystemBase* InNavigationSystem)"
  },
  {
    "label": "IsNavigationRegisterLocked()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsNavigationRegisterLocked()"
  },
  {
    "label": "UpdateLevelCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLevelCollision(ULevel* InLevel)"
  },
  {
    "label": "ConfigureAsStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureAsStatic(bool bEnableStatic = true)"
  },
  {
    "label": "SetUpdateNavOctreeOnComponentChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateNavOctreeOnComponentChange(bool bNewUpdateOnComponentChange)"
  },
  {
    "label": "HandleCycleNavDrawnCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCycleNavDrawnCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleCountNavMemCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCountNavMemCommand()"
  },
  {
    "label": "CycleNavigationDataDrawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleNavigationDataDrawn()"
  },
  {
    "label": "OnPostLoadMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoadMap(UWorld* LoadedWorld)"
  },
  {
    "label": "OnActorMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorMoved(AActor* Actor)"
  },
  {
    "label": "OnNavigationDirtied()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationDirtied(const FBox& Bounds)"
  },
  {
    "label": "OnReloadComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReloadComplete(EReloadCompleteReason Reason)"
  },
  {
    "label": "RegisterNavData()",
    "kind": "Method",
    "detail": "Function (ERegistrationResult)",
    "insertText": "RegisterNavData(ANavigationData* NavData)"
  },
  {
    "label": "RegisterNavAreaClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavAreaClass(UClass* NavAreaClass)"
  },
  {
    "label": "UnregisterNavAreaClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavAreaClass(UClass* NavAreaClass)"
  },
  {
    "label": "OnNavigationAreaEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationAreaEvent(UClass* AreaClass, ENavAreaEvent::Type Event)"
  },
  {
    "label": "RegisterNavigationElementWithNavOctree()",
    "kind": "Method",
    "detail": "Function (FSetElementId)",
    "insertText": "RegisterNavigationElementWithNavOctree(const TSharedRef<const FNavigationElement>& Element, int32 UpdateFlags)"
  },
  {
    "label": "RegisterNavOctreeElement()",
    "kind": "Method",
    "detail": "Function (FSetElementId)",
    "insertText": "RegisterNavOctreeElement(UObject* ElementOwner, INavRelevantInterface* ElementInterface, int32 UpdateFlags)"
  },
  {
    "label": "UnregisterNavigationElementWithOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavigationElementWithOctree(const TSharedRef<const FNavigationElement>& Element, int32 UpdateFlags)"
  },
  {
    "label": "UnregisterNavOctreeElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavOctreeElement(UObject* ElementOwner, INavRelevantInterface* ElementInterface, int32 UpdateFlags)"
  },
  {
    "label": "GetNavOctreeElementData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavOctreeElementData(FNavigationElementHandle Element, ENavigationDirtyFlag& OutDirtyFlags, FBox& OutDirtyBounds)"
  },
  {
    "label": "GetNavOctreeElementData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavOctreeElementData(const UObject& NodeOwner, int32& DirtyFlags, FBox& DirtyBounds)"
  },
  {
    "label": "AddElementToNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElementToNavOctree(const FNavigationDirtyElement& DirtyElement)"
  },
  {
    "label": "SetCrowdManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdManager(UCrowdManagerBase* NewCrowdManager)"
  },
  {
    "label": "AddLevelCollisionToOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelCollisionToOctree(ULevel* Level)"
  },
  {
    "label": "RemoveLevelCollisionFromOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelCollisionFromOctree(ULevel* Level)"
  },
  {
    "label": "SpawnMissingNavigationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnMissingNavigationData()"
  },
  {
    "label": "FillInstantiatedDataMask()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "FillInstantiatedDataMask(TBitArray<>& OutInstantiatedMask, ULevel* InLevel = nullptr)"
  },
  {
    "label": "SpawnMissingNavigationDataInLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnMissingNavigationDataInLevel(const TBitArray<>& InInstantiatedMask, ULevel* InLevel = nullptr)"
  },
  {
    "label": "DemandLazyDataGathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DemandLazyDataGathering(FNavigationRelevantData& ElementData)"
  },
  {
    "label": "RebuildDirtyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildDirtyAreas(float DeltaSeconds)"
  },
  {
    "label": "AddNavigationBoundsUpdateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationBoundsUpdateRequest(const FNavigationBoundsUpdateRequest& UpdateRequest)"
  },
  {
    "label": "RebuildAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildAll(bool bIsLoadTime = false)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAddedToWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "AddAsyncQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsyncQuery(const FAsyncPathFindingQuery& Query)"
  },
  {
    "label": "TriggerAsyncQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerAsyncQueries(TArray<FAsyncPathFindingQuery>& PathFindingQueries)"
  },
  {
    "label": "PerformAsyncQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAsyncQueries(TArray<FAsyncPathFindingQuery> PathFindingQueries)"
  },
  {
    "label": "PostponeAsyncQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostponeAsyncQueries()"
  },
  {
    "label": "DestroyNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyNavOctree()"
  },
  {
    "label": "LogNavDataRegistrationResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNavDataRegistrationResult(ERegistrationResult)"
  },
  {
    "label": "OnGenerateNavigationOnlyAroundNavigationInvokersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerateNavigationOnlyAroundNavigationInvokersChanged()"
  },
  {
    "label": "VerifyNavigationRenderingComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyNavigationRenderingComponents(const bool bShow)"
  },
  {
    "label": "GetOnScreenMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOnScreenMessages(TMultiMap<FCoreDelegates::EOnScreenMessageSeverity, FText>& OutMessages)"
  },
  {
    "label": "K2_GetRandomPointInNavigableRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "K2_GetRandomPointInNavigableRadius(UObject* WorldContextObject, const FVector& Origin, FVector& RandomLocation, float Radius, ANavigationData* NavData = NULL, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL)"
  },
  {
    "label": "UpdateWithNavSysCDO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWithNavSysCDO(const UNavigationSystemV1& NavSysCDO)"
  }
]