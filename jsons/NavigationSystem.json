[
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "ANavMeshBoundsVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavMeshBoundsVolume"
  },
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FEdMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdMode"
  },
  {
    "label": "FNavDataGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavDataGenerator"
  },
  {
    "label": "INavigationInvokerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavigationInvokerInterface"
  },
  {
    "label": "INavLinkCustomInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkCustomInterface"
  },
  {
    "label": "INavRelevantInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavRelevantInterface"
  },
  {
    "label": "UCrowdManagerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCrowdManagerBase"
  },
  {
    "label": "UNavArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavArea"
  },
  {
    "label": "UNavigationPath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationPath"
  },
  {
    "label": "UNavigationObjectRepository",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationObjectRepository"
  },
  {
    "label": "UNavigationSystemModuleConfig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemModuleConfig"
  },
  {
    "label": "FDebugText",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugText"
  },
  {
    "label": "FNavigationRelevantData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationRelevantData"
  },
  {
    "label": "FNavigationOctreeElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationOctreeElement"
  },
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "FCustomLinkOwnerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomLinkOwnerInfo"
  },
  {
    "label": "FNavigationSystemExec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationSystemExec"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNavRegenTimeSlicer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavRegenTimeSlicer"
  },
  {
    "label": "FTileHistoryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileHistoryData"
  },
  {
    "label": "FNavRegenTimeSliceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavRegenTimeSliceManager"
  },
  {
    "label": "UNavigationSystemV1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavigationSystemV1"
  },
  {
    "label": "ERegistrationResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERegistrationResult"
  },
  {
    "label": "EOctreeUpdateMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOctreeUpdateMode"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "ANavigationDataChunkActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationDataChunkActor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Misc / CoreMisc . h \" # include \" Misc / CoreDelegates . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" AI / Navigation / NavigationTypes . h \" # include \" AI / Navigation / NavigationDirtyElement . h \" # include \" AI / Navigation / NavigationInvokerPriority . h \" # include \" NavigationSystemTypes . h \" # include \" NavigationData . h \" # include \" AI / NavigationSystemBase . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" NavigationOctree . h \" # include \" AI / NavigationSystemConfig . h \" # include \" NavigationOctreeController . h \" # include \" NavigationDirtyAreasController . h \" # include \" Math / MovingWindowAverageFast . h \" # include \" AI / Navigation / NavigationBounds . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" NavigationSystem . generated . h \" class AController ; class ANavMeshBoundsVolume ; class AWorldSettings ; class FEdMode ; class FNavDataGenerator ; class INavigationInvokerInterface ; class INavLinkCustomInterface ; class INavRelevantInterface ; class UCrowdManagerBase ; class UNavArea ; class UNavigationPath ; class UNavigationObjectRepository ; class UNavigationSystemModuleConfig ; struct FDebugText ; struct FNavigationRelevantData ; struct FNavigationOctreeElement ; struct FNavigationElement ; # if ! UE_BUILD_SHIPPING # define ALLOW_TIME_SLICE_DEBUG 1 # else # define ALLOW_TIME_SLICE_DEBUG 0 # endif)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnNavAreaChanged, const UClass*)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnNavDataGenericEvent, ANavigationData*, NavData)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnNavigationInitDone)"
  },
  {
    "label": "ANavigationData()",
    "kind": "Method",
    "detail": "Function (namespace NavigationDebugDrawing { const float PathLineThickness ; const FVector PathOffset ; const FVector PathNodeBoxExtent ; } namespace FNavigationSystem { typedef)",
    "insertText": "ANavigationData(*FNavigationDataInstanceCreator)(UWorld*, const FNavDataConfig&)"
  },
  {
    "label": "FCustomLinkOwnerInfo()",
    "kind": "Method",
    "detail": "Function (struct FCustomLinkOwnerInfo { FWeakObjectPtr LinkOwner ; INavLinkCustomInterface* LinkInterface ;)",
    "insertText": "FCustomLinkOwnerInfo() : LinkInterface(nullptr)"
  },
  {
    "label": "FCustomLinkOwnerInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomLinkOwnerInfo(INavLinkCustomInterface* Link)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ShouldLoadNavigationOnClient()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "ShouldLoadNavigationOnClient(ANavigationData& NavData)"
  },
  {
    "label": "MakeAllComponentsNeverAffectNav()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeAllComponentsNeverAffectNav(AActor& Actor)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_TIME_SLICE_DEBUG const FName DebugTimeSliceDefaultSectionName =)",
    "insertText": "FName(TEXT(\"DefaultSection\"))"
  },
  {
    "label": "Exec_Runtime()",
    "kind": "Method",
    "detail": "Function (# endif } struct FNavigationSystemExec : public FSelfRegisteringExec { protected : bool)",
    "insertText": "Exec_Runtime(UWorld* Inworld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "MARK_TIMESLICE_SECTION_DEBUG()",
    "kind": "Method",
    "detail": "Function (} ; namespace ENavigationBuildLock { enum Type { NoUpdateInEditor = 1<<1,NoUpdateInPIE = 1<<2,InitialLock = 1<<3,Custom = 1<<4,} ; } # if ALLOW_TIME_SLICE_DEBUG # define)",
    "insertText": "MARK_TIMESLICE_SECTION_DEBUG(TIME_SLICER, TIME_SLICE_FNAME) \\ static const FName TIME_SLICE_FNAME(TEXT(#TIME_SLICE_FNAME))"
  },
  {
    "label": "DebugSetSectionName()",
    "kind": "Method",
    "detail": "Function (\\ TIME_SLICER .)",
    "insertText": "DebugSetSectionName(TIME_SLICE_FNAME)"
  },
  {
    "label": "MARK_TIMESLICE_SECTION_DEBUG()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "MARK_TIMESLICE_SECTION_DEBUG(TIME_SLICER, TIME_SLICE_FNAME)"
  },
  {
    "label": "SetupTimeSlice()",
    "kind": "Method",
    "detail": "Function (# endif class FNavRegenTimeSlicer { public : void)",
    "insertText": "SetupTimeSlice(double SliceDuration)"
  },
  {
    "label": "StartTimeSlice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTimeSlice()"
  },
  {
    "label": "EndTimeSliceAndAdjustDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTimeSliceAndAdjustDuration()"
  },
  {
    "label": "IsTimeSliceFinishedCached()",
    "kind": "Method",
    "detail": "Function (/ bool)",
    "insertText": "IsTimeSliceFinishedCached()"
  },
  {
    "label": "DebugResetLongTimeSliceFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugResetLongTimeSliceFunction()"
  },
  {
    "label": "DebugSetSectionName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugSetSectionName(FName InDebugSectionName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (DebugSectionName = InDebugSectionName ; } # endif protected : double OriginalDuration = 0 . ; double RemainingDuration = 0 . ; double StartTime = 0 . ; double TimeLastTested = 0 . ; bool bTimeSliceFinishedCached = false ; # if ALLOW_TIME_SLICE_DEBUG TFunction<)",
    "insertText": "void(FName, double)"
  },
  {
    "label": "FNavRegenTimeSliceManager()",
    "kind": "Method",
    "detail": "Function (double DebugLongTimeSliceDuration = 0 . ; FName DebugSectionName = FNavigationSystem::DebugTimeSliceDefaultSectionName ; # endif } ; # if ! UE_BUILD_SHIPPING struct FTileHistoryData { int32 TileX = 0 ; int32 TileY = 0 ; float TileRegenTime = 0 . f ; float TileWaitTime = 0 . f ; int64 StartRegenFrame = 0 ; int64 EndRegenFrame = 0 ; } ; # endif class FNavRegenTimeSliceManager { public :)",
    "insertText": "FNavRegenTimeSliceManager()"
  },
  {
    "label": "PushTileRegenTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTileRegenTime(double NewTime)"
  },
  {
    "label": "PushValue()",
    "kind": "Method",
    "detail": "Function (MovingWindowTileRegenTime .)",
    "insertText": "PushValue(NewTime)"
  },
  {
    "label": "GetAverageTileRegenTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAverageTileRegenTime()"
  },
  {
    "label": "GetAverageDeltaTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAverageDeltaTime()"
  },
  {
    "label": "ResetTileWaitTimeArrays()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetTileWaitTimeArrays(const TArray<TObjectPtr<ANavigationData>>& NavDataSet)"
  },
  {
    "label": "PushTileWaitTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTileWaitTime(const int32 NavDataIndex, const double NewTime)"
  },
  {
    "label": "ResetTileHistoryData()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "ResetTileHistoryData(const TArray<TObjectPtr<ANavigationData>>& NavDataSet)"
  },
  {
    "label": "PushTileHistoryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTileHistoryData(const int32 NavDataIndex, const FTileHistoryData& TileData)"
  },
  {
    "label": "GetAverageTileWaitTime()",
    "kind": "Method",
    "detail": "Function (# endif double)",
    "insertText": "GetAverageTileWaitTime(const int32 NavDataIndex)"
  },
  {
    "label": "ResetTileWaitTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTileWaitTime(const int32 NavDataIndex)"
  },
  {
    "label": "DoTimeSlicedUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoTimeSlicedUpdate()"
  },
  {
    "label": "CalcTimeSliceDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalcTimeSliceDuration(const TArray<TObjectPtr<ANavigationData>>& NavDataSet, int32 NumTilesToRegen, const TArray<double>& CurrentTileRegenDurations)"
  },
  {
    "label": "SetMinTimeSliceDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinTimeSliceDuration(double NewMinTimeSliceDuration)"
  },
  {
    "label": "SetMaxTimeSliceDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxTimeSliceDuration(double NewMaxTimeSliceDuration)"
  },
  {
    "label": "SetMaxDesiredTileRegenDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDesiredTileRegenDuration(float NewMaxDesiredTileRegenDuration)"
  },
  {
    "label": "GetNavDataIdx()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNavDataIdx()"
  },
  {
    "label": "GetTimeSlicer()",
    "kind": "Method",
    "detail": "Function (NavDataIdx = InNavDataIdx ; } FNavRegenTimeSlicer&)",
    "insertText": "GetTimeSlicer()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif protected : FNavRegenTimeSlicer TimeSlicer ; FMovingWindowAverageFast<double,2 5 6> MovingWindowTileRegenTime ; FMovingWindowAverageFast<double,2 5 6> MovingWindowDeltaTime ; TArray<TArray<double>> TileWaitTimes ; # if ! UE_BUILD_SHIPPING TArray<TArray<FTileHistoryData>> TileHistoryData ; double TileHistoryStartTime = 0 ; # endif double MinTimeSliceDuration ; double MaxTimeSliceDuration ; uint64 FrameNumOld ; float MaxDesiredTileRegenDuration ; double TimeLastCall ; int32 NavDataIdx ; bool bDoTimeSlicedUpdate ; } ;)",
    "insertText": "UCLASS(Within=World, config=Engine, defaultconfig, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UNavigationSystemV1()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UNavigationSystemV1(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UNavigationSystemV1()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UNavigationSystemV1()"
  },
  {
    "label": "GatherDebugLabels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugLabels(TArray<FString>& InOutDebugLabels)"
  },
  {
    "label": "UpdateInvokers()",
    "kind": "Method",
    "detail": "Function (FOnNavigationInitDone OnNavigationInitDone ; private : TWeakObjectPtr<UCrowdManagerBase> CrowdManager ; uint32 bNavDataRemovedDueToMissingNavBounds : 1 ; protected : TSet<FNavigationBounds> RegisteredNavBounds ; private : TMap<UObject*,FNavigationInvoker> Invokers ; TArray<FNavigationInvokerRaw> InvokerLocations ; TArray<FBox> InvokersSeedBounds ; double NextInvokersUpdateTime ; void)",
    "insertText": "UpdateInvokers()"
  },
  {
    "label": "UpdateNavDataActiveTiles()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateNavDataActiveTiles()"
  },
  {
    "label": "DirtyTilesInBuildBounds()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DirtyTilesInBuildBounds()"
  },
  {
    "label": "UnregisterInvoker_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInvoker_Internal(const UObject& Invoker)"
  },
  {
    "label": "RegisterToRepositoryDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterToRepositoryDelegates()"
  },
  {
    "label": "UnregisterFromRepositoryDelegates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterFromRepositoryDelegates()"
  },
  {
    "label": "NavigationRaycastWithAdditionalResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NavigationRaycastWithAdditionalResults(UObject* WorldContextObject, const FVector& RayStart, const FVector& RayEnd, FVector& HitLocation, FNavigationRaycastAdditionalResults* AdditionalResults, TSubclassOf<UNavigationQueryFilter> FilterClass = NULL, AController* Querier = NULL)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (FOnNavigationDirty NavigationDirtyEvent ; enum ERegistrationResult { RegistrationError,RegistrationFailed_DataPendingKill,RegistrationFailed_AgentAlreadySupported,RegistrationFailed_AgentNotValid,RegistrationFailed_NotSuitable,RegistrationSuccessful,} ; enum EOctreeUpdateMode { OctreeUpdate_Default = 0,OctreeUpdate_Geometry = 1,OctreeUpdate_Modifiers = 2,OctreeUpdate_Refresh = 4,OctreeUpdate_ParentChain = 8,} ; void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "PostEditChangeChainProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeChainProperty(FPropertyChangedChainEvent& PropertyChangedEvent)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetCrowdManager()",
    "kind": "Method",
    "detail": "Function (} UCrowdManagerBase*)",
    "insertText": "GetCrowdManager()"
  },
  {
    "label": "CalcTimeSlicedUpdateData()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "CalcTimeSlicedUpdateData(TArray<double>& OutCurrentTimeSlicedBuildTaskDurations, TArray<bool>& OutIsTimeSlicingArray, bool& bOutAnyNonTimeSlicedGenerators, TArray<int32, TInlineAllocator<8>>& OutNumTimeSlicedRemainingBuildTasksArray)"
  },
  {
    "label": "CreateCrowdManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateCrowdManager()"
  },
  {
    "label": "SetSupportedAgentsNavigationClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSupportedAgentsNavigationClass(int32 AgentIndex, TSubclassOf<ANavigationData> NavigationDataClass)"
  },
  {
    "label": "FindPathSync()",
    "kind": "Method",
    "detail": "Function (public : FPathFindingResult)",
    "insertText": "FindPathSync(const FNavAgentProperties& AgentProperties, FPathFindingQuery Query, EPathFindingMode::Type Mode = EPathFindingMode::Regular)"
  },
  {
    "label": "FindPathSync()",
    "kind": "Method",
    "detail": "Function (FPathFindingResult)",
    "insertText": "FindPathSync(FPathFindingQuery Query, EPathFindingMode::Type Mode = EPathFindingMode::Regular)"
  },
  {
    "label": "FindPathAsync()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindPathAsync(const FNavAgentProperties& AgentProperties, FPathFindingQuery Query, const FNavPathQueryDelegate& ResultDelegate, EPathFindingMode::Type Mode = EPathFindingMode::Regular)"
  },
  {
    "label": "AbortAsyncFindPathRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortAsyncFindPathRequest(uint32 AsynPathQueryID)"
  },
  {
    "label": "TestPathSync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TestPathSync(FPathFindingQuery Query, EPathFindingMode::Type Mode = EPathFindingMode::Regular, int32* NumVisitedNodes = NULL)"
  },
  {
    "label": "GetRandomPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPoint(FNavLocation& ResultLocation, ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "GetRandomReachablePointInRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomReachablePointInRadius(const FVector& Origin, float Radius, FNavLocation& ResultLocation, ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "GetRandomPointInNavigableRadius()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRandomPointInNavigableRadius(const FVector& Origin, float Radius, FNavLocation& ResultLocation, ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "GetPathCost()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "GetPathCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& PathCost, const ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "GetPathLength()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "GetPathLength(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& PathLength, const ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "GetPathLengthAndCost()",
    "kind": "Method",
    "detail": "Function (ENavigationQueryResult::Type)",
    "insertText": "GetPathLengthAndCost(const FVector& PathStart, const FVector& PathEnd, FVector::FReal& PathLength, FVector::FReal& PathCost, const ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "ProjectPointToNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProjectPointToNavigation(const FVector& Point, FNavLocation& OutLocation, const FVector& Extent = INVALID_NAVEXTENT, const FNavAgentProperties* AgentProperties = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "ProjectPointToNavigation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ProjectPointToNavigation(const FVector& Point, FNavLocation& OutLocation, const FVector& Extent = INVALID_NAVEXTENT, const ANavigationData* NavData = NULL, FSharedConstNavQueryFilter QueryFilter = NULL)"
  },
  {
    "label": "GetNavDataForProps()",
    "kind": "Method",
    "detail": "Function (ANavigationData*)",
    "insertText": "GetNavDataForProps(const FNavAgentProperties& AgentProperties)"
  },
  {
    "label": "GetNavDataForAgentName()",
    "kind": "Method",
    "detail": "Function (ANavigationData*)",
    "insertText": "GetNavDataForAgentName(const FName AgentName)"
  },
  {
    "label": "GetNavDataForProps()",
    "kind": "Method",
    "detail": "Function (ANavigationData*)",
    "insertText": "GetNavDataForProps(const FNavAgentProperties& AgentProperties, const FVector& AgentLocation, const FVector& Extent = INVALID_NAVEXTENT)"
  },
  {
    "label": "GetDefaultNavDataInstance()",
    "kind": "Method",
    "detail": "Function (ANavigationData*)",
    "insertText": "GetDefaultNavDataInstance(FNavigationSystem::ECreateIfMissing CreateNewIfNoneFound)"
  },
  {
    "label": "GetMainNavData()",
    "kind": "Method",
    "detail": "Function (INavigationDataInterface*)",
    "insertText": "GetMainNavData()"
  },
  {
    "label": "GetMainNavDataChecked()",
    "kind": "Method",
    "detail": "Function (} ANavigationData&)",
    "insertText": "GetMainNavDataChecked()"
  },
  {
    "label": "GetNavigableWorldBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetNavigableWorldBounds()"
  },
  {
    "label": "ContainsNavData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsNavData(const FBox& Bounds)"
  },
  {
    "label": "ComputeNavDataBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeNavDataBounds()"
  },
  {
    "label": "AddNavigationDataChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationDataChunk(class ANavigationDataChunkActor& DataChunkActor)"
  },
  {
    "label": "RemoveNavigationDataChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavigationDataChunk(class ANavigationDataChunkActor& DataChunkActor)"
  },
  {
    "label": "FillNavigationDataChunkActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNavigationDataChunkActor(const FBox& QueryBounds, class ANavigationDataChunkActor& DataChunkActor, FBox& OutTilesBounds)"
  },
  {
    "label": "GetDefaultNavDataInstance()",
    "kind": "Method",
    "detail": "Function (ANavigationData*)",
    "insertText": "GetDefaultNavDataInstance()"
  },
  {
    "label": "CreateDefaultQueryFilterCopy()",
    "kind": "Method",
    "detail": "Function (FSharedNavQueryFilter)",
    "insertText": "CreateDefaultQueryFilterCopy()"
  },
  {
    "label": "ShouldGeneratorRun()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGeneratorRun(const FNavDataGenerator* Generator)"
  },
  {
    "label": "IsNavigationBuilt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationBuilt(const AWorldSettings* Settings)"
  },
  {
    "label": "IsThereAnywhereToBuildNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThereAnywhereToBuildNavigation()"
  },
  {
    "label": "ShouldGenerateNavigationEverywhere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGenerateNavigationEverywhere()"
  },
  {
    "label": "GetLevelBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetLevelBounds(ULevel* InLevel)"
  },
  {
    "label": "IsNavigationRelevant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationRelevant(const AActor* TestActor)"
  },
  {
    "label": "GetNavigationBounds()",
    "kind": "Method",
    "detail": "Function (const TSet<FNavigationBounds>&)",
    "insertText": "GetNavigationBounds()"
  },
  {
    "label": "GetDefaultSupportedAgent()",
    "kind": "Method",
    "detail": "Function (const FNavDataConfig&)",
    "insertText": "GetDefaultSupportedAgent()"
  },
  {
    "label": "GetBiggestSupportedAgent()",
    "kind": "Method",
    "detail": "Function (const FNavDataConfig&)",
    "insertText": "GetBiggestSupportedAgent(const UWorld* World)"
  },
  {
    "label": "GetWorldPartitionNavigationDataBuilderOverlap()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR double)",
    "insertText": "GetWorldPartitionNavigationDataBuilderOverlap(const UWorld& World)"
  },
  {
    "label": "GetDefaultSupportedAgentConfig()",
    "kind": "Method",
    "detail": "Function (# endif const FNavDataConfig&)",
    "insertText": "GetDefaultSupportedAgentConfig()"
  },
  {
    "label": "SetSupportedAgentsMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSupportedAgentsMask(const FNavAgentSelector& InSupportedAgentsMask)"
  },
  {
    "label": "GetSupportedAgentsMask()",
    "kind": "Method",
    "detail": "Function (FNavAgentSelector)",
    "insertText": "GetSupportedAgentsMask()"
  },
  {
    "label": "IsNavigationDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationDirty()"
  },
  {
    "label": "CanRebuildDirtyNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRebuildDirtyNavigation()"
  },
  {
    "label": "DoesPathIntersectBox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPathIntersectBox(const FNavigationPath* Path, const FBox& Box, const FVector& AgentLocation, uint32 StartingIndex = 0, FVector* AgentExtent = NULL)"
  },
  {
    "label": "RegisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInvoker(AActor& Invoker, float TileGenerationRadius, float TileRemovalRadius, const FNavAgentSelector& Agents, ENavigationInvokerPriority InPriority)"
  },
  {
    "label": "RegisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterInvoker(const TWeakInterfacePtr<INavigationInvokerInterface>& Invoker, float TileGenerationRadius, float TileRemovalRadius, const FNavAgentSelector& Agents, ENavigationInvokerPriority InPriority)"
  },
  {
    "label": "UnregisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInvoker(AActor& Invoker)"
  },
  {
    "label": "UnregisterInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInvoker(const TWeakInterfacePtr<INavigationInvokerInterface>& Invoker)"
  },
  {
    "label": "RegisterNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavigationInvoker(AActor& Invoker, float TileGenerationRadius, float TileRemovalRadius, const FNavAgentSelector& Agents = FNavAgentSelector(), ENavigationInvokerPriority Priority = ENavigationInvokerPriority::Default)"
  },
  {
    "label": "UnregisterNavigationInvoker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavigationInvoker(AActor& Invoker)"
  },
  {
    "label": "GetInvokerLocations()",
    "kind": "Method",
    "detail": "Function (const TArray<FNavigationInvokerRaw>&)",
    "insertText": "GetInvokerLocations()"
  },
  {
    "label": "UnregisterUnusedNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterUnusedNavData()"
  },
  {
    "label": "RequestRegistrationDeferred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRegistrationDeferred(ANavigationData& NavData)"
  },
  {
    "label": "ApplySupportedAgentsFilter()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ApplySupportedAgentsFilter()"
  },
  {
    "label": "RegisterNavigationDataInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavigationDataInstances()"
  },
  {
    "label": "ConditionalPopulateNavOctree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalPopulateNavOctree()"
  },
  {
    "label": "ConstructNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructNavOctree()"
  },
  {
    "label": "ProcessRegistrationCandidates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessRegistrationCandidates()"
  },
  {
    "label": "ProcessCustomLinkPendingRegistration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCustomLinkPendingRegistration()"
  },
  {
    "label": "PerformNavigationBoundsUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformNavigationBoundsUpdate(const TArray<FNavigationBoundsUpdateRequest>& UpdateRequests)"
  },
  {
    "label": "AddNavigationBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationBounds(const FNavigationBounds& NewBounds)"
  },
  {
    "label": "GatherNavigationBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherNavigationBounds()"
  },
  {
    "label": "GetInvokerSeedLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInvokerSeedLocations(const UWorld& InWorld, TArray<FVector, TInlineAllocator<32>>& OutSeedLocations)"
  },
  {
    "label": "GetNavDataWithID()",
    "kind": "Method",
    "detail": "Function (ANavigationData*)",
    "insertText": "GetNavDataWithID(const uint16 NavDataID)"
  },
  {
    "label": "GetNavigationElementForUObject()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FNavigationElement>)",
    "insertText": "GetNavigationElementForUObject(const UObject*)"
  },
  {
    "label": "GetNavigationElementHandleForUObject()",
    "kind": "Method",
    "detail": "Function (FNavigationElementHandle)",
    "insertText": "GetNavigationElementHandleForUObject(const UObject*)"
  },
  {
    "label": "RegisterComponentToNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentToNavOctree(UActorComponent* Comp)"
  },
  {
    "label": "UnregisterComponentToNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponentToNavOctree(UActorComponent* Comp)"
  },
  {
    "label": "ReleaseInitialBuildingLock()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReleaseInitialBuildingLock()"
  },
  {
    "label": "AddNavigationElement()",
    "kind": "Method",
    "detail": "Function (FNavigationElementHandle)",
    "insertText": "AddNavigationElement(UWorld* World, FNavigationElement&& Element)"
  },
  {
    "label": "RemoveNavigationElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavigationElement(UWorld* World, FNavigationElementHandle ElementHandle)"
  },
  {
    "label": "OnNavigationElementUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationElementUpdated(UWorld* World, FNavigationElementHandle ElementHandle, FNavigationElement&& Element)"
  },
  {
    "label": "OnNavRelevantObjectRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavRelevantObjectRegistered(UObject& Object)"
  },
  {
    "label": "UpdateNavRelevantObjectInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavRelevantObjectInNavOctree(UObject& Object)"
  },
  {
    "label": "OnNavRelevantObjectUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavRelevantObjectUnregistered(UObject& Object)"
  },
  {
    "label": "OnComponentRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentRegistered(UActorComponent* Comp)"
  },
  {
    "label": "OnComponentUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentUnregistered(UActorComponent* Comp)"
  },
  {
    "label": "RegisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponent(UActorComponent* Comp)"
  },
  {
    "label": "UnregisterComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponent(UActorComponent* Comp)"
  },
  {
    "label": "OnActorRegistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorRegistered(AActor* Actor)"
  },
  {
    "label": "OnActorUnregistered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActorUnregistered(AActor* Actor)"
  },
  {
    "label": "UpdateActorInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorInNavOctree(AActor& Actor)"
  },
  {
    "label": "UpdateComponentInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateComponentInNavOctree(UActorComponent& Comp)"
  },
  {
    "label": "UpdateActorAndComponentsInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActorAndComponentsInNavOctree(AActor& Actor, bool bUpdateAttachedActors = true)"
  },
  {
    "label": "UpdateNavOctreeAfterMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeAfterMove(USceneComponent* Comp)"
  },
  {
    "label": "RegisterNavRelevantObjectStatic()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RegisterNavRelevantObjectStatic(const INavRelevantInterface& NavRelevantObject, const UObject& Object)"
  },
  {
    "label": "RegisterNavRelevantObjectInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavRelevantObjectInternal(const INavRelevantInterface& NavRelevantObject, const UObject& Object)"
  },
  {
    "label": "UnregisterNavRelevantObjectStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavRelevantObjectStatic(const UObject& Object)"
  },
  {
    "label": "UnregisterNavRelevantObjectInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavRelevantObjectInternal(const UObject& Object)"
  },
  {
    "label": "UpdateNavRelevantObjectInNavOctreeStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavRelevantObjectInNavOctreeStatic(const INavRelevantInterface& InNavRelevantObject, const UObject& InObject, UNavigationSystemV1* InNavigationSystem, TFunctionRef<void(UNavigationSystemV1&, const TSharedRef<const FNavigationElement>&)> InCallback)"
  },
  {
    "label": "GetAllAttachedActors()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAllAttachedActors(const AActor& RootActor, TArray<AActor*>& OutAttachedActors)"
  },
  {
    "label": "UpdateAttachedActorsInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAttachedActorsInNavOctree(AActor& RootActor)"
  },
  {
    "label": "ClearNavOctreeAll()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ClearNavOctreeAll(AActor* Actor)"
  },
  {
    "label": "UpdateNavOctreeBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeBounds(AActor* Actor)"
  },
  {
    "label": "AddDirtyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirtyArea(const FBox& NewArea, ENavigationDirtyFlag Flags, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "AddDirtyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirtyArea(const FBox& NewArea, ENavigationDirtyFlag Flags, const TFunction<const TSharedPtr<const FNavigationElement>()>& ElementProviderFunc, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "AddDirtyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirtyAreas(const TArray<FBox>& NewAreas, ENavigationDirtyFlag Flags, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "HasDirtyAreasQueued()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDirtyAreasQueued()"
  },
  {
    "label": "GetNumDirtyAreas()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumDirtyAreas()"
  },
  {
    "label": "GetDirtyAreaWarningSizeThreshold()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDirtyAreaWarningSizeThreshold()"
  },
  {
    "label": "GetMutableNavOctree()",
    "kind": "Method",
    "detail": "Function (} FNavigationOctree*)",
    "insertText": "GetMutableNavOctree()"
  },
  {
    "label": "RemoveFromNavOctree()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RemoveFromNavOctree(const FOctreeElementId2& ElementId, int32 UpdateFlags)"
  },
  {
    "label": "GetDataForElement()",
    "kind": "Method",
    "detail": "Function (public : const FNavigationRelevantData*)",
    "insertText": "GetDataForElement(FNavigationElementHandle Element)"
  },
  {
    "label": "GetMutableDataForElement()",
    "kind": "Method",
    "detail": "Function (FNavigationRelevantData*)",
    "insertText": "GetMutableDataForElement(FNavigationElementHandle Element)"
  },
  {
    "label": "FindElementsInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindElementsInNavOctree(const FBox& QueryBox, const FNavigationOctreeFilter& Filter, TArray<FNavigationOctreeElement>& Elements)"
  },
  {
    "label": "UpdateNavOctreeElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeElement(FNavigationElementHandle Handle, const TSharedRef<const FNavigationElement>& Element, int32 UpdateFlags)"
  },
  {
    "label": "UpdateNavOctreeElementBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNavOctreeElementBounds(FNavigationElementHandle Handle, const FBox& NewBounds, TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "ReplaceAreaInOctreeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceAreaInOctreeData(FNavigationElementHandle Handle, TSubclassOf<UNavArea> OldArea, TSubclassOf<UNavArea> NewArea, bool bReplaceChildClasses = false)"
  },
  {
    "label": "RegisterCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCustomLink(INavLinkCustomInterface& CustomLink)"
  },
  {
    "label": "UnregisterCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterCustomLink(INavLinkCustomInterface& CustomLink)"
  },
  {
    "label": "GetNumCustomLinks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCustomLinks()"
  },
  {
    "label": "RequestCustomLinkRegistering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestCustomLinkRegistering(INavLinkCustomInterface& CustomLink, UObject* OwnerOb)"
  },
  {
    "label": "RequestCustomLinkUnregistering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestCustomLinkUnregistering(INavLinkCustomInterface& CustomLink, UObject* ObjectOb)"
  },
  {
    "label": "UpdateCustomLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomLink(const INavLinkCustomInterface* CustomLink)"
  },
  {
    "label": "ComputeCustomLinkBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeCustomLinkBounds(const INavLinkCustomInterface& CustomLink)"
  },
  {
    "label": "RequestAreaRegistering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAreaRegistering(UClass* NavAreaClass)"
  },
  {
    "label": "RequestAreaUnregistering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAreaUnregistering(UClass* NavAreaClass)"
  },
  {
    "label": "GetSupportedAgentIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSupportedAgentIndex(const ANavigationData* NavData)"
  },
  {
    "label": "GetSupportedAgentIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSupportedAgentIndex(const FNavAgentProperties& NavAgent)"
  },
  {
    "label": "DescribeFilterFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeFilterFlags(UEnum* FlagsEnum)"
  },
  {
    "label": "DescribeFilterFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DescribeFilterFlags(const TArray<FString>& FlagsDesc)"
  },
  {
    "label": "ResetCachedFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCachedFilter(TSubclassOf<UNavigationQueryFilter> FilterClass)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build()"
  },
  {
    "label": "CancelBuild()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelBuild()"
  },
  {
    "label": "OnPIEStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPIEStart()"
  },
  {
    "label": "OnPIEEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPIEEnd()"
  },
  {
    "label": "IsNavigationBuildingPermanentlyLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNavigationBuildingPermanentlyLocked()"
  },
  {
    "label": "IsNavigationOctreeLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNavigationOctreeLocked()"
  },
  {
    "label": "OnNavigationBoundsAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsAdded(ANavMeshBoundsVolume* NavVolume)"
  },
  {
    "label": "OnNavigationBoundsRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBoundsRemoved(ANavMeshBoundsVolume* NavVolume)"
  },
  {
    "label": "IsNavigationBuildInProgress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationBuildInProgress()"
  },
  {
    "label": "OnNavigationGenerationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationGenerationFinished(ANavigationData& NavData)"
  },
  {
    "label": "GetNumRemainingBuildTasks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumRemainingBuildTasks()"
  },
  {
    "label": "GetNumRunningBuildTasks()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumRunningBuildTasks()"
  },
  {
    "label": "DoInitialSetup()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DoInitialSetup()"
  },
  {
    "label": "UpdateAbstractNavData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAbstractNavData()"
  },
  {
    "label": "AddLevelToOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelToOctree(ULevel& Level)"
  },
  {
    "label": "OnBeginTearingDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginTearingDown(UWorld* World)"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CleanUp(const FNavigationSystem::ECleanupMode Mode = FNavigationSystem::ECleanupMode::CleanupUnsafe)"
  },
  {
    "label": "OnInitializeActors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitializeActors()"
  },
  {
    "label": "OnWorldInitDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldInitDone(FNavigationSystemRunMode Mode)"
  },
  {
    "label": "AddNavigationBuildLock()",
    "kind": "Method",
    "detail": "Function (enum class ELockRemovalRebuildAction { Rebuild,RebuildIfNotInEditor,NoRebuild } ; void)",
    "insertText": "AddNavigationBuildLock(uint8 Flags)"
  },
  {
    "label": "RemoveNavigationBuildLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNavigationBuildLock(uint8 Flags, const ELockRemovalRebuildAction RebuildAction = ELockRemovalRebuildAction::Rebuild)"
  },
  {
    "label": "SetNavigationOctreeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNavigationOctreeLock(bool bLock)"
  },
  {
    "label": "GetIsAutoUpdateEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsAutoUpdateEnabled()"
  },
  {
    "label": "IsNavigationUpdateLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNavigationUpdateLocked()"
  },
  {
    "label": "AddNavigationUpdateLock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNavigationUpdateLock(uint8 Flags)"
  },
  {
    "label": "RemoveNavigationUpdateLock()",
    "kind": "Method",
    "detail": "Function (NavUpdateLockFlags | = Flags ; } void)",
    "insertText": "RemoveNavigationUpdateLock(uint8 Flags)"
  },
  {
    "label": "UpdateLevelCollision()",
    "kind": "Method",
    "detail": "Function (NavUpdateLockFlags& = ~ Flags ; } void)",
    "insertText": "UpdateLevelCollision(ULevel* InLevel)"
  },
  {
    "label": "IsSetUpForLazyGeometryExporting()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsSetUpForLazyGeometryExporting()"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UNavigationSystemV1*)",
    "insertText": "GetCurrent(UWorld* World)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (UNavigationSystemV1*)",
    "insertText": "GetCurrent(UObject* WorldContextObject)"
  },
  {
    "label": "InitializeForWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForWorld(UWorld& World, FNavigationSystemRunMode Mode)"
  },
  {
    "label": "GetNavAgentPropertiesArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNavAgentPropertiesArray(TArray<FNavAgentProperties>& OutNavAgentProperties)"
  },
  {
    "label": "ShouldUpdateNavOctreeOnComponentChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateNavOctreeOnComponentChange()"
  },
  {
    "label": "ShouldCreateNavigationSystemInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCreateNavigationSystemInstance(const UWorld* World)"
  },
  {
    "label": "IsNavigationSystemStatic()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNavigationSystemStatic()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "return(bStaticRuntimeNavigation && !(GIsEditor && !GIsPlayInEditorWorld)) || IsRunningCookCommandlet()"
  },
  {
    "label": "ConfigureAsStatic()",
    "kind": "Method",
    "detail": "Function (# else return bStaticRuntimeNavigation ; # endif } void)",
    "insertText": "ConfigureAsStatic(bool bEnableStatic = true)"
  },
  {
    "label": "SetUpdateNavOctreeOnComponentChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpdateNavOctreeOnComponentChange(bool bNewUpdateOnComponentChange)"
  },
  {
    "label": "HandleCycleNavDrawnCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCycleNavDrawnCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleCountNavMemCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCountNavMemCommand()"
  },
  {
    "label": "CycleNavigationDataDrawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CycleNavigationDataDrawn()"
  },
  {
    "label": "GetMutableNavRegenTimeSliceManager()",
    "kind": "Method",
    "detail": "Function (FNavRegenTimeSliceManager&)",
    "insertText": "GetMutableNavRegenTimeSliceManager()"
  },
  {
    "label": "OnPostLoadMap()",
    "kind": "Method",
    "detail": "Function (FCriticalSection NavDataRegistrationSection ; # if WITH_EDITOR uint8 NavUpdateLockFlags ; # endif uint8 NavBuildingLockFlags ; uint8 InitialNavBuildingLockFlags ; uint8 bInitialSetupHasBeenPerformed : 1 ; uint8 bInitialLevelsAdded : 1 ; uint8 bWorldInitDone : 1 ; uint8 bCleanUpDone : 1 ; uint8 bAsyncBuildPaused : 1 ; protected : FBox NavigableWorldBounds ; int32 CurrentlyDrawnNavDataIndex ; # if ! UE_BUILD_SHIPPING FNavigationSystemExec ExecHandler ; # endif bool bNavigationAutoUpdateEnabled ; bool bUpdateNavOctreeOnComponentChange ; bool bStaticRuntimeNavigation ; bool bIsPIEActive ; TSet<TObjectPtr<const UClass>> NavAreaClasses ; FNavRegenTimeSliceManager NavRegenTimeSliceManager ; void)",
    "insertText": "OnPostLoadMap(UWorld* LoadedWorld)"
  },
  {
    "label": "OnActorMoved()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnActorMoved(AActor* Actor)"
  },
  {
    "label": "OnNavigationDirtied()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "OnNavigationDirtied(const FBox& Bounds)"
  },
  {
    "label": "OnReloadComplete()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle ReloadCompleteDelegateHandle ; void)",
    "insertText": "OnReloadComplete(EReloadCompleteReason Reason)"
  },
  {
    "label": "RegisterNavData()",
    "kind": "Method",
    "detail": "Function (ERegistrationResult)",
    "insertText": "RegisterNavData(ANavigationData* NavData)"
  },
  {
    "label": "RegisterNavAreaClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNavAreaClass(UClass* NavAreaClass)"
  },
  {
    "label": "UnregisterNavAreaClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavAreaClass(UClass* NavAreaClass)"
  },
  {
    "label": "OnNavigationAreaEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationAreaEvent(UClass* AreaClass, ENavAreaEvent::Type Event)"
  },
  {
    "label": "RegisterNavigationElementWithNavOctree()",
    "kind": "Method",
    "detail": "Function (FSetElementId)",
    "insertText": "RegisterNavigationElementWithNavOctree(const TSharedRef<const FNavigationElement>& Element, int32 UpdateFlags)"
  },
  {
    "label": "UnregisterNavigationElementWithOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterNavigationElementWithOctree(const TSharedRef<const FNavigationElement>& Element, int32 UpdateFlags)"
  },
  {
    "label": "GetNavOctreeElementData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNavOctreeElementData(FNavigationElementHandle Element, ENavigationDirtyFlag& OutDirtyFlags, FBox& OutDirtyBounds)"
  },
  {
    "label": "AddElementToNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElementToNavOctree(const FNavigationDirtyElement& DirtyElement)"
  },
  {
    "label": "SetCrowdManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCrowdManager(UCrowdManagerBase* NewCrowdManager)"
  },
  {
    "label": "AddLevelCollisionToOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelCollisionToOctree(ULevel* Level)"
  },
  {
    "label": "RemoveLevelCollisionFromOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelCollisionFromOctree(ULevel* Level)"
  },
  {
    "label": "SpawnMissingNavigationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnMissingNavigationData()"
  },
  {
    "label": "FillInstantiatedDataMask()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "FillInstantiatedDataMask(TBitArray<>& OutInstantiatedMask, ULevel* InLevel = nullptr)"
  },
  {
    "label": "SpawnMissingNavigationDataInLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnMissingNavigationDataInLevel(const TBitArray<>& InInstantiatedMask, ULevel* InLevel = nullptr)"
  },
  {
    "label": "DemandLazyDataGathering()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DemandLazyDataGathering(FNavigationRelevantData& ElementData)"
  },
  {
    "label": "CheckToLimitNavigationBoundsToLoadedRegions()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CheckToLimitNavigationBoundsToLoadedRegions(FNavigationBounds& OutBounds)"
  },
  {
    "label": "RebuildDirtyAreas()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RebuildDirtyAreas(float DeltaSeconds)"
  },
  {
    "label": "AddNavigationBoundsUpdateRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNavigationBoundsUpdateRequest(const FNavigationBoundsUpdateRequest& UpdateRequest)"
  },
  {
    "label": "RebuildAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildAll(bool bIsLoadTime = false)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAddedToWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld(ULevel* InLevel, UWorld* InWorld)"
  },
  {
    "label": "OnWorldPostActorTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorldPostActorTick(UWorld* World, ELevelTick TickType, float DeltaTime)"
  },
  {
    "label": "PostponeAsyncQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostponeAsyncQueries()"
  },
  {
    "label": "AddAsyncQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddAsyncQuery(const FAsyncPathFindingQuery& Query)"
  },
  {
    "label": "TriggerAsyncQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerAsyncQueries(TArray<FAsyncPathFindingQuery>& PathFindingQueries)"
  },
  {
    "label": "PerformAsyncQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformAsyncQueries(TArray<FAsyncPathFindingQuery> PathFindingQueries)"
  },
  {
    "label": "DispatchAsyncQueriesResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchAsyncQueriesResults(const TArray<FAsyncPathFindingQuery>& PathFindingQueries)"
  },
  {
    "label": "DestroyNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyNavOctree()"
  },
  {
    "label": "RequiresNavOctree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresNavOctree()"
  },
  {
    "label": "GetRuntimeGenerationType()",
    "kind": "Method",
    "detail": "Function (ERuntimeGenerationType)",
    "insertText": "GetRuntimeGenerationType()"
  },
  {
    "label": "LogNavDataRegistrationResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogNavDataRegistrationResult(ERegistrationResult)"
  },
  {
    "label": "IsAllowedToRebuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedToRebuild()"
  },
  {
    "label": "OnGenerateNavigationOnlyAroundNavigationInvokersChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerateNavigationOnlyAroundNavigationInvokersChanged()"
  },
  {
    "label": "VerifyNavigationRenderingComponents()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "VerifyNavigationRenderingComponents(const bool bShow)"
  },
  {
    "label": "GetNavigationBoundsForNavData()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetNavigationBoundsForNavData(const ANavigationData& NavData, TArray<FBox>& OutBounds, ULevel* InLevel = nullptr)"
  },
  {
    "label": "GetNavDataForActor()",
    "kind": "Method",
    "detail": "Function (INavigationDataInterface*)",
    "insertText": "GetNavDataForActor(const AActor& Actor)"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Configure(const UNavigationSystemConfig& Config)"
  },
  {
    "label": "AppendConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendConfig(const UNavigationSystemConfig& NewConfig)"
  },
  {
    "label": "GetOnScreenMessages()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "GetOnScreenMessages(TMultiMap<FCoreDelegates::EOnScreenMessageSeverity, FText>& OutMessages)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() protected: UPROPERTY(EditAnywhere, Category = Navigation)"
  },
  {
    "label": "UNavigationSystemModuleConfig()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UNavigationSystemModuleConfig(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "CreateAndConfigureNavigationSystem()",
    "kind": "Method",
    "detail": "Function (UNavigationSystemBase*)",
    "insertText": "CreateAndConfigureNavigationSystem(UWorld& World)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "UpdateWithNavSysCDO()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if WITH_EDITOR UNavigationSystemV1 ; # endif void)",
    "insertText": "UpdateWithNavSysCDO(const UNavigationSystemV1& NavSysCDO)"
  }
]