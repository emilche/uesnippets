[
  {
    "label": "BaseMaskIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseMaskIterator"
  },
  {
    "label": "OnMaskIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnMaskIterator"
  },
  {
    "label": "OffMaskIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OffMaskIterator"
  },
  {
    "label": "DenseMaskIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseMaskIterator"
  },
  {
    "label": "NodeMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeMask"
  },
  {
    "label": "RootNodeMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootNodeMask"
  },
  {
    "label": "BaseIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseIterator"
  },
  {
    "label": "OnIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnIterator"
  },
  {
    "label": "OffIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OffIterator"
  },
  {
    "label": "DenseIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseIterator"
  },
  {
    "label": "CountOn()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_UTIL_NODEMASKS_HAS_BEEN_INCLUDED # define OPENVDB_UTIL_NODEMASKS_HAS_BEEN_INCLUDED # include<algorithm> # include<cassert> # include<cstring> # include<iostream> # include<openvdb / Platform . h> # include<openvdb / Types . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace util { Index32)",
    "insertText": "CountOn(Byte v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OPENVDB_USE_SSE42) && defined(_MSC_VER) return __popcnt16(v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(OPENVDB_USE_SSE42) && (defined(__GNUC__) || defined(__clang__)) return __builtin_popcount(v)"
  },
  {
    "label": "COUNTONB2()",
    "kind": "Method",
    "detail": "Function (# else const Byte numBits [ 2 5 6 ] = { # define)",
    "insertText": "COUNTONB2(n) n, n+1, n+1, n+2 #define COUNTONB4(n) COUNTONB2(n), COUNTONB2(n+1), COUNTONB2(n+1), COUNTONB2(n+2) #define COUNTONB6(n) COUNTONB4(n), COUNTONB4(n+1), COUNTONB4(n+1), COUNTONB4(n+2) COUNTONB6(0), COUNTONB6(1), COUNTONB6(1), COUNTONB6(2)"
  },
  {
    "label": "CountOn()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "CountOn(Index32 v)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "v((v >> 1) & 0x55555555U)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(v & 0x33333333U) + ((v >> 2) & 0x33333333U)"
  },
  {
    "label": "CountOff()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "CountOff(Index32 v)"
  },
  {
    "label": "CountOn()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "CountOn(Index64 v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OPENVDB_USE_SSE42) && defined(_MSC_VER) && defined(_M_X64) v = __popcnt64(v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(OPENVDB_USE_SSE42) && (defined(__GNUC__) || defined(__clang__)) v = __builtin_popcountll(v)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (# else v =)",
    "insertText": "v((v >> 1) & UINT64_C(0x5555555555555555))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(v & UINT64_C(0x3333333333333333)) + ((v >> 2) & UINT64_C(0x3333333333333333))"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(((v + (v >> 4)) & UINT64_C(0xF0F0F0F0F0F0F0F)) * UINT64_C(0x101010101010101))"
  },
  {
    "label": "Index32()",
    "kind": "Method",
    "detail": "Function (# endif return static_cast<)",
    "insertText": "Index32(v)"
  },
  {
    "label": "CountOff()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "CountOff(Index64 v)"
  },
  {
    "label": "FindLowestOn()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "FindLowestOn(Byte v)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OPENVDB_USE_SSE42) && defined(_MSC_VER)"
  },
  {
    "label": "_BitScanForward()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_BitScanForward(&index, static_cast<Index32>(v))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(OPENVDB_USE_SSE42) && (defined(__GNUC__) || defined(__clang__)) return __builtin_ctz(v)"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (# else const Byte DeBruijn [ 8 ] = { 0,1,6,2,7,5,4,3 } ; return DeBruijn [)",
    "insertText": "Byte((v & -v) * 0x1DU)"
  },
  {
    "label": "FindLowestOn()",
    "kind": "Method",
    "detail": "Function (# endif } Index32)",
    "insertText": "FindLowestOn(Index32 v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (const Byte DeBruijn [ 3 2 ] = { 0,1,2 8,2,2 9,1 4,2 4,3,3 0,2 2,2 0,1 5,2 5,1 7,4,8,3 1,2 7,1 3,2 3,2 1,1 9,1 6,7,2 6,1 2,1 8,6,1 1,5,1 0,9 } ; # if)",
    "insertText": "defined(_MSC_VER) #pragma warning(push) #pragma warning(disable:4146) #endif return DeBruijn[Index32((v & -v) * 0x077CB531U)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) #pragma warning(pop) #endif } inline Index32 FindLowestOn(Index64 v)"
  },
  {
    "label": "_BitScanForward64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_BitScanForward64(&index, v)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(OPENVDB_USE_SSE42) && (defined(__GNUC__) || defined(__clang__)) return static_cast<Index32>(__builtin_ctzll(v))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# else const Byte DeBruijn [ 6 4 ] = { 0,1,2,5 3,3,7,5 4,2 7,4,3 8,4 1,8,3 4,5 5,4 8,2 8,6 2,5,3 9,4 6,4 4,4 2,2 2,9,2 4,3 5,5 9,5 6,4 9,1 8,2 9,1 1,6 3,5 2,6,2 6,3 7,4 0,3 3,4 7,6 1,4 5,4 3,2 1,2 3,5 8,1 7,1 0,5 1,2 5,3 6,3 2,6 0,2 0,5 7,1 6,5 0,3 1,1 9,1 5,3 0,1 4,1 3,1 2,} ; # if)",
    "insertText": "defined(_MSC_VER) #pragma warning(push) #pragma warning(disable:4146) #endif return DeBruijn[Index64((v & -v) * UINT64_C(0x022FDD63CC95386D))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) #pragma warning(pop) #endif #endif } inline Index32 FindHighestOn(Index32 v)"
  },
  {
    "label": "Index32()",
    "kind": "Method",
    "detail": "Function (const Byte DeBruijn [ 3 2 ] = { 0,9,1,1 0,1 3,2 1,2,2 9,1 1,1 4,1 6,1 8,2 2,2 5,3,3 0,8,1 2,2 0,2 8,1 5,1 7,2 4,7,1 9,2 7,2 3,6,2 6,5,4,3 1 } ; v | = v>> 1 ; v | = v>> 2 ; v | = v>> 4 ; v | = v>> 8 ; v | = v>> 1 6 ; return DeBruijn [)",
    "insertText": "Index32(v * 0x07C4ACDDU)"
  },
  {
    "label": "BaseMaskIterator()",
    "kind": "Method",
    "detail": "Function (} template<NodeMask> class BaseMaskIterator { protected : Index32 mPos ; const NodeMask* mParent ; public :)",
    "insertText": "BaseMaskIterator(): mPos(NodeMask::SIZE), mParent(nullptr)"
  },
  {
    "label": "BaseMaskIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BaseMaskIterator(const BaseMaskIterator&)"
  },
  {
    "label": "BaseMaskIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BaseMaskIterator(Index32 pos, const NodeMask* parent): mPos(pos), mParent(parent)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((parent == nullptr && pos == 0) || (parent != nullptr && pos <= NodeMask::SIZE))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const BaseMaskIterator &iter)"
  },
  {
    "label": "offset()",
    "kind": "Method",
    "detail": "Function (mPos = iter . mPos ; mParent = iter . mParent ; return* this ; } Index32)",
    "insertText": "offset()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mPos <= NodeMask::SIZE)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "OnMaskIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<NodeMask> class OnMaskIterator : public BaseMaskIterator<NodeMask> { private : using BaseType = BaseMaskIterator<NodeMask> ; using BaseType::mPos ; using BaseType::mParent ; public :)",
    "insertText": "OnMaskIterator() : BaseType()"
  },
  {
    "label": "OnMaskIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnMaskIterator(Index32 pos,const NodeMask *parent) : BaseType(pos,parent)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "increment()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mParent != nullptr)"
  },
  {
    "label": "findNextOn()",
    "kind": "Method",
    "detail": "Function (mPos = mParent ->)",
    "insertText": "findNextOn(mPos+1)"
  },
  {
    "label": "increment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "increment(Index n)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "next()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()"
  },
  {
    "label": "OffMaskIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OffMaskIterator(Index32 pos,const NodeMask *parent) : BaseType(pos,parent)"
  },
  {
    "label": "findNextOff()",
    "kind": "Method",
    "detail": "Function (mPos = mParent ->)",
    "insertText": "findNextOff(mPos+1)"
  },
  {
    "label": "DenseMaskIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DenseMaskIterator(Index32 pos,const NodeMask *parent) : BaseType(pos,parent)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (mPos + = 1 ;)",
    "insertText": "assert(mPos<= NodeMask::SIZE)"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (const Index32 LOG2DIM = Log2Dim ; const Index32 DIM = 1<<Log2Dim ; const Index32 SIZE = 1<<3* Log2Dim ; const Index32 WORD_COUNT = SIZE>> 6 ; using Word = Index64 ; private : Word mWords [ WORD_COUNT ] ; public :)",
    "insertText": "NodeMask()"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOff()"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeMask(bool on)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "set(on)"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeMask(const NodeMask &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} NodeMask&)",
    "insertText": "operator(const NodeMask& other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 n = WORD_COUNT ; const Word* w2 = other . mWords ;)",
    "insertText": "for(Word* w1 = mWords; n--; ++w1, ++w2)"
  },
  {
    "label": "endOn()",
    "kind": "Method",
    "detail": "Function (} OnIterator)",
    "insertText": "endOn()"
  },
  {
    "label": "beginOff()",
    "kind": "Method",
    "detail": "Function (} OffIterator)",
    "insertText": "beginOff()"
  },
  {
    "label": "endOff()",
    "kind": "Method",
    "detail": "Function (} OffIterator)",
    "insertText": "endOff()"
  },
  {
    "label": "beginDense()",
    "kind": "Method",
    "detail": "Function (} DenseIterator)",
    "insertText": "beginDense()"
  },
  {
    "label": "endDense()",
    "kind": "Method",
    "detail": "Function (} DenseIterator)",
    "insertText": "endDense()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const NodeMask &other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int n = WORD_COUNT ;)",
    "insertText": "for(const Word *w1=mWords, *w2=other.mWords; n-- && *w1++ == *w2++;)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} template<WordOp> const NodeMask&)",
    "insertText": "foreach(const NodeMask& other, const WordOp& op)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Word* w1 = mWords ; const Word* w2 = other . mWords ;)",
    "insertText": "for(Index32 n = WORD_COUNT; n--; ++w1, ++w2) op( *w1, *w2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Word* w1 = mWords ; const Word* w2 = other1 . mWords,* w3 = other2 . mWords ;)",
    "insertText": "for(Index32 n = WORD_COUNT; n--; ++w1, ++w2, ++w3) op( *w1, *w2, *w3)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Word* w1 = mWords ; const Word* w2 = other1 . mWords,* w3 = other2 . mWords,* w4 = other3 . mWords ;)",
    "insertText": "for(Index32 n = WORD_COUNT; n--; ++w1, ++w2, ++w3, ++w4) op( *w1, *w2, *w3, *w4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Word* w1 = mWords ; const Word* w2 = other . mWords ;)",
    "insertText": "for(Index32 n = WORD_COUNT; n--; ++w1, ++w2)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (NodeMask)",
    "insertText": "m(*this)"
  },
  {
    "label": "toggle()",
    "kind": "Method",
    "detail": "Function (m .)",
    "insertText": "toggle()"
  },
  {
    "label": "memUsage()",
    "kind": "Method",
    "detail": "Function (m ^ = other ; return m ; } Index32)",
    "insertText": "memUsage()"
  },
  {
    "label": "countOn()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "countOn()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 sum = 0,n = WORD_COUNT ;)",
    "insertText": "for(const Word* w = mWords; n--; ++w) sum += CountOn(*w)"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOn(Index32 n)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((n >> 6) < WORD_COUNT)"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (mWords [ n>> 6 ] | =)",
    "insertText": "Word(1) << (n & 63)"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOff(Index32 n)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (mWords [)",
    "insertText": "n(Word(1) << (n & 63))"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set(Index32 n, bool On)"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (On ? this ->)",
    "insertText": "setOn(n) : this->setOff(n)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set(bool on)"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (const Word state = on ? ~)",
    "insertText": "Word(0) : Word(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 n = WORD_COUNT ;)",
    "insertText": "for(Word* w = mWords; n--; ++w)"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOn()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 n = WORD_COUNT ;)",
    "insertText": "for(Word* w = mWords; n--; ++w) *w = ~Word(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 n = WORD_COUNT ;)",
    "insertText": "for(Word* w = mWords; n--; ++w) *w = Word(0)"
  },
  {
    "label": "toggle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "toggle(Index32 n)"
  },
  {
    "label": "setFirstOn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFirstOn()"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOn(0)"
  },
  {
    "label": "setLastOn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLastOn()"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOn(SIZE-1)"
  },
  {
    "label": "setFirstOff()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFirstOff()"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOff(0)"
  },
  {
    "label": "setLastOff()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setLastOff()"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOff(SIZE-1)"
  },
  {
    "label": "isOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOn(Index32 n)"
  },
  {
    "label": "isOff()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOff(Index32 n)"
  },
  {
    "label": "isOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOn()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int n = WORD_COUNT ;)",
    "insertText": "for(const Word *w = mWords; n-- && *w++ == ~Word(0);)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int n = WORD_COUNT ;)",
    "insertText": "for(const Word *w = mWords; n-- && *w++ == Word(0);)"
  },
  {
    "label": "isOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "isOn(mWords[0] == ~Word(0))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const Word* w = mWords + 1,* n = mWords + WORD_COUNT ;)",
    "insertText": "while(w<n && *w == mWords[0])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 n = 0 ; const Word* w = mWords ;)",
    "insertText": "for(; n<WORD_COUNT && !*w; ++w, ++n)"
  },
  {
    "label": "findFirstOff()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "findFirstOff()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 n = 0 ; const Word* w = mWords ;)",
    "insertText": "for(; n<WORD_COUNT && !~*w; ++w, ++n)"
  },
  {
    "label": "getWord()",
    "kind": "Method",
    "detail": "Function (} template<WordT> WordT)",
    "insertText": "getWord(Index n)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n*8*sizeof(WordT) < SIZE)"
  },
  {
    "label": "save()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "save(std::ostream& os)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "write(reinterpret_cast<const char*>(mWords), this->memUsage())"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "load(std::istream& is)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(mWords), this->memUsage())"
  },
  {
    "label": "seek()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "seek(std::istream& is)"
  },
  {
    "label": "seekg()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "seekg(this->memUsage(), std::ios_base::cur)"
  },
  {
    "label": "printInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "printInfo(std::ostream& os=std::cout)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (os<<\" NodeMask : Dim = \"<<DIM<<\" Log2Dim = \"<<Log2Dim<<\" Bit count = \"<<SIZE<<\" word count = \"<<WORD_COUNT<<std::endl ; } void)",
    "insertText": "printBits(std::ostream& os=std::cout, Index32 max_out=80u)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (const Index32)",
    "insertText": "n(SIZE>max_out ? max_out : SIZE)"
  },
  {
    "label": "isOn()",
    "kind": "Method",
    "detail": "Function (os<<this ->)",
    "insertText": "isOn(i)"
  },
  {
    "label": "printAll()",
    "kind": "Method",
    "detail": "Function (} os<<\" | \"<<std::endl ; } void)",
    "insertText": "printAll(std::ostream& os=std::cout, Index32 max_out=80u)"
  },
  {
    "label": "printInfo()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "printInfo(os)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "printBits(os, max_out)"
  },
  {
    "label": "findNextOn()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "findNextOn(Index32 start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index32 n = start>> 6 ;)",
    "insertText": "if(n >= WORD_COUNT)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index32 m = start& 6 3 ; Word b = mWords [ n ] ;)",
    "insertText": "if(b & (Word(1) << m))"
  },
  {
    "label": "Word()",
    "kind": "Method",
    "detail": "Function (b& = ~)",
    "insertText": "Word(0)"
  },
  {
    "label": "findNextOff()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "findNextOff(Index32 start)"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class NodeMask<1> { public : const Index32 LOG2DIM = 1 ; const Index32 DIM = 2 ; const Index32 SIZE = 8 ; const Index32 WORD_COUNT = 1 ; using Word = Byte ; private : Byte mByte ; public :)",
    "insertText": "NodeMask() : mByte(0x00U)"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeMask(bool on) : mByte(on ? 0xFFU : 0x00U)"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeMask(const NodeMask &other) : mByte(other.mByte)"
  },
  {
    "label": "beginOn()",
    "kind": "Method",
    "detail": "Function (mByte = other . mByte ; } using OnIterator = OnMaskIterator<NodeMask> ; using OffIterator = OffMaskIterator<NodeMask> ; using DenseIterator = DenseMaskIterator<NodeMask> ; OnIterator)",
    "insertText": "beginOn()"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(mByte, other.mByte)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(mByte, other1.mByte, other2.mByte)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(mByte, other1.mByte, other2.mByte, other3.mByte)"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (mByte& = static_cast<)",
    "insertText": "Byte(~other.mByte)"
  },
  {
    "label": "countOff()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "countOff()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n < 8)"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (mByte = static_cast<)",
    "insertText": "Byte(mByte | 0x01U << (n & 7))"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (mByte = static_cast<)",
    "insertText": "Byte(mByte & ~(0x01U << (n & 7)))"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (mByte = static_cast<)",
    "insertText": "Byte(mByte ^ 0x01U << (n & 7))"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (mByte = static_cast<)",
    "insertText": "Byte(~mByte)"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOn(7)"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOff(7)"
  },
  {
    "label": "findFirstOn()",
    "kind": "Method",
    "detail": "Function (} Index32)",
    "insertText": "findFirstOn()"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "write(reinterpret_cast<const char*>(&mByte), 1)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&mByte), 1)"
  },
  {
    "label": "seekg()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "seekg(1, std::ios_base::cur)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (os<<\" NodeMask : Dim = 2,Log2Dim = 1,Bit count = 8,Word count = 1 \"<<std::endl ; } void)",
    "insertText": "printBits(std::ostream& os=std::cout)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (os<<\" | | \" ;)",
    "insertText": "for(Index32 i=0; i < 8; ++i) os << this->isOn(i)"
  },
  {
    "label": "printAll()",
    "kind": "Method",
    "detail": "Function (os<<\" | | \"<<std::endl ; } void)",
    "insertText": "printAll(std::ostream& os=std::cout)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "printBits(os)"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (const Byte b = static_cast<)",
    "insertText": "Byte(mByte & (0xFFU << start))"
  },
  {
    "label": "Byte()",
    "kind": "Method",
    "detail": "Function (const Byte b = static_cast<)",
    "insertText": "Byte(~mByte & (0xFFU << start))"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class NodeMask<2> { public : const Index32 LOG2DIM = 2 ; const Index32 DIM = 4 ; const Index32 SIZE = 6 4 ; const Index32 WORD_COUNT = 1 ; using Word = Index64 ; private : Word mWord ; public :)",
    "insertText": "NodeMask() : mWord(UINT64_C(0x00))"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeMask(bool on) : mWord(on ? UINT64_C(0xFFFFFFFFFFFFFFFF) : UINT64_C(0x00))"
  },
  {
    "label": "NodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeMask(const NodeMask &other) : mWord(other.mWord)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(mWord, other.mWord)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(mWord, other1.mWord, other2.mWord)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(mWord, other1.mWord, other2.mWord, other3.mWord)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(n < 64)"
  },
  {
    "label": "UINT64_C()",
    "kind": "Method",
    "detail": "Function (mWord | =)",
    "insertText": "UINT64_C(0x01) << (n & 63)"
  },
  {
    "label": "mWord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mWord(UINT64_C(0x01) << (n & 63))"
  },
  {
    "label": "UINT64_C()",
    "kind": "Method",
    "detail": "Function (mWord = on ?)",
    "insertText": "UINT64_C(0xFFFFFFFFFFFFFFFF) : UINT64_C(0x00)"
  },
  {
    "label": "UINT64_C()",
    "kind": "Method",
    "detail": "Function (mWord =)",
    "insertText": "UINT64_C(0xFFFFFFFFFFFFFFFF)"
  },
  {
    "label": "UINT64_C()",
    "kind": "Method",
    "detail": "Function (mWord =)",
    "insertText": "UINT64_C(0x00)"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOn(63)"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOff(63)"
  },
  {
    "label": "isOff()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOff()"
  },
  {
    "label": "FindLowestOn()",
    "kind": "Method",
    "detail": "Function (const Word w = ~ mWord ; return w ?)",
    "insertText": "FindLowestOn(w)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "write(reinterpret_cast<const char*>(&mWord), 8)"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(&mWord), 8)"
  },
  {
    "label": "seekg()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "seekg(8, std::ios_base::cur)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (os<<\" | \" ;)",
    "insertText": "for(Index32 i=0; i < 64; ++i)"
  },
  {
    "label": "mWord()",
    "kind": "Method",
    "detail": "Function (const Word w =)",
    "insertText": "mWord(UINT64_C(0xFFFFFFFFFFFFFFFF) << start)"
  },
  {
    "label": "RootNodeMask()",
    "kind": "Method",
    "detail": "Function (} } ; class RootNodeMask { protected : Index32 mBitSize,mIntSize ; Index32* mBits ; public :)",
    "insertText": "RootNodeMask(): mBitSize(0), mIntSize(0), mBits(nullptr)"
  },
  {
    "label": "RootNodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RootNodeMask(Index32 bit_size): mBitSize(bit_size), mIntSize(((bit_size-1)>>5)+1), mBits(new Index32[mIntSize])"
  },
  {
    "label": "RootNodeMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RootNodeMask(const RootNodeMask& B): mBitSize(B.mBitSize), mIntSize(B.mIntSize), mBits(new Index32[mIntSize])"
  },
  {
    "label": "RootNodeMask()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RootNodeMask()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (delete [ ] mBits ; } void)",
    "insertText": "init(Index32 bit_size)"
  },
  {
    "label": "mIntSize()",
    "kind": "Method",
    "detail": "Function (mBitSize = bit_size ;)",
    "insertText": "mIntSize((bit_size-1)>>5)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (delete [ ] mBits ; mBits = new Index32 [ mIntSize ] ;)",
    "insertText": "for(Index32 i=0; i<mIntSize; ++i)"
  },
  {
    "label": "getBitSize()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "getBitSize()"
  },
  {
    "label": "BaseIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BaseIterator(const BaseIterator&)"
  },
  {
    "label": "BaseIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BaseIterator(Index32 pos, const RootNodeMask* parent): mPos(pos), mBitSize(parent->getBitSize()), mParent(parent)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pos <= mBitSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const BaseIterator &iter)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mPos <= mBitSize)"
  },
  {
    "label": "OnIterator()",
    "kind": "Method",
    "detail": "Function (} } ; class OnIterator : public BaseIterator { protected : using BaseIterator::mPos ; using BaseIterator::mBitSize ; using BaseIterator::mParent ; public :)",
    "insertText": "OnIterator() : BaseIterator()"
  },
  {
    "label": "OnIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OnIterator(Index32 pos,const RootNodeMask *parent) : BaseIterator(pos,parent)"
  },
  {
    "label": "OffIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OffIterator(Index32 pos,const RootNodeMask *parent) : BaseIterator(pos,parent)"
  },
  {
    "label": "DenseIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DenseIterator(Index32 pos,const RootNodeMask *parent) : BaseIterator(pos,parent)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (mPos + = 1 ;)",
    "insertText": "assert(mPos<= mBitSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const RootNodeMask &B)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mIntSize == other.mIntSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (mBits [ i ]& = other . mBits [ i ] ; })",
    "insertText": "for(Index32 i = other.mIntSize; i < mIntSize; ++i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mBits [ i ] | = other . mBits [ i ] ; } return* this ; } const RootNodeMask&)",
    "insertText": "operator(const RootNodeMask& other)"
  },
  {
    "label": "getMemUsage()",
    "kind": "Method",
    "detail": "Function (m ^ = other ; return m ; } Index32)",
    "insertText": "getMemUsage()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(mBits)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index32 n = 0 ;)",
    "insertText": "for(Index32 i=0; i< mIntSize; ++i) n += CountOn(mBits[i])"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOn(Index32 i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((i>>5) < mIntSize)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (mBits [)",
    "insertText": "i(i&31)"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOff(Index32 i)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (mBits [)",
    "insertText": "i(1<<(i&31))"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set(Index32 i, bool On)"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (On ? this ->)",
    "insertText": "setOn(i) : this->setOff(i)"
  },
  {
    "label": "toggle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "toggle(Index32 i)"
  },
  {
    "label": "setOn()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOn(mBitSize-1)"
  },
  {
    "label": "setOff()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "setOff(mBitSize-1)"
  },
  {
    "label": "isOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOn(Index32 i)"
  },
  {
    "label": "isOff()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isOff(Index32 i)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index32 i = 0 ;)",
    "insertText": "while(!mBits[i]) if (++i == mIntSize)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index32 i = 0 ;)",
    "insertText": "while(!(~mBits[i])) if (++i == mIntSize)"
  },
  {
    "label": "write()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "write(reinterpret_cast<const char*>(mBits), mIntSize * sizeof(Index32))"
  },
  {
    "label": "read()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "read(reinterpret_cast<char*>(mBits), mIntSize * sizeof(Index32))"
  },
  {
    "label": "seekg()",
    "kind": "Method",
    "detail": "Function (is .)",
    "insertText": "seekg(mIntSize * sizeof(Index32), std::ios_base::cur)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (const Index32)",
    "insertText": "n(mBitSize>max_out?max_out:mBitSize)"
  },
  {
    "label": "printBits()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "printBits(os,max_out)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index32 n = start>> 5,m = start& 3 1 ;)",
    "insertText": "if(n>=mIntSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index32 b = mBits [ n ] ;)",
    "insertText": "if(b & (1<<m))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (b& = 0 xFFFFFFFF<<m ;)",
    "insertText": "while(!b && ++n<mIntSize)"
  }
]