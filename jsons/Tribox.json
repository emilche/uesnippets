[
  {
    "label": "FTribox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTribox"
  },
  {
    "label": "FTribox()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / Convex . h \" namespace Chaos { namespace Private { class FTribox { public : using FRealType = FRealSingle ; using FVec3Type = TVec3<FRealType> ; using FRigidTransform3Type = TRigidTransform<FRealType,3> ; using FMatrix33Type = PMatrix<FRealType,3,3> ; using FPlaneType = TPlaneConcrete<FRealType,3> ; int32 NumPlanes = 1 8 ; int32 NumPrincipalPlanes = 6 ; int32 NumChamferPlanes = 1 2 ; FRealType InflateDistance = 0 . 5 ;)",
    "insertText": "FTribox() : MaxDists(), bIsValid(false), bHasDatas(false)"
  },
  {
    "label": "Lowest()",
    "kind": "Method",
    "detail": "Function (MaxDists [ DistsIndex ] = TNumericLimits<FRealType)",
    "insertText": "Lowest()"
  },
  {
    "label": "FTribox()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "FTribox(const FTribox& OtherTribox) : MaxDists(), bIsValid(false), bHasDatas(false)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (MaxDists [ DistsIndex ] = OtherTribox . MaxDists [ DistsIndex ] ; } bIsValid = OtherTribox . bIsValid ; bHasDatas = OtherTribox . bHasDatas ; } ; FVec3Type)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FAABB3)",
    "insertText": "GetBounds()"
  },
  {
    "label": "GetClosestPlane()",
    "kind": "Method",
    "detail": "Function (FRealType)",
    "insertText": "GetClosestPlane(const FVec3Type& PointPosition, int32& PlaneAxis, FRealType& PlaneProjection)"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoint(const FVec3Type& PointPosition)"
  },
  {
    "label": "AddConvex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConvex(const FConvex* Convex, const FRigidTransform3Type& RelativeTransform)"
  },
  {
    "label": "BuildTribox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildTribox()"
  },
  {
    "label": "OverlapTribox()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapTribox(const FTribox& OtherTribox, FTribox& OverlapTribox)"
  },
  {
    "label": "IsTriboxOverlapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTriboxOverlapping(const FTribox& OtherTribox)"
  },
  {
    "label": "SplitTriboxSlab()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitTriboxSlab(const int32 PlaneAxis, const FRealType& PlaneDistance, FTribox& LeftTribox, FTribox& RightTribox)"
  },
  {
    "label": "GetThickestSlab()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetThickestSlab()"
  },
  {
    "label": "SampleSlabPoint()",
    "kind": "Method",
    "detail": "Function (FRealType)",
    "insertText": "SampleSlabPoint(const int32 PlaneAxis, const FRealType& LocalDistance)"
  },
  {
    "label": "ComputeVolume()",
    "kind": "Method",
    "detail": "Function (FRealType)",
    "insertText": "ComputeVolume()"
  },
  {
    "label": "MakeConvex()",
    "kind": "Method",
    "detail": "Function (FImplicitObjectPtr)",
    "insertText": "MakeConvex()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTribox&)",
    "insertText": "operator(const FTribox& OtherTribox)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "HasDatas()",
    "kind": "Method",
    "detail": "Function (bIsValid = bValid ; } bool)",
    "insertText": "HasDatas()"
  },
  {
    "label": "SolveIntersection()",
    "kind": "Method",
    "detail": "Function (} } private : FVec3)",
    "insertText": "SolveIntersection(const int32 FaceIndex[3], const FMatrix33Type& A)"
  },
  {
    "label": "AddIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIntersection(const int32 FaceIndex[3], const int32 FaceOrder[3], const FVec3Type& VertexPosition, TArray<TArray<int32>>& FaceIndices, TArray<FConvex::FVec3Type>& ConvexVertices)"
  },
  {
    "label": "ComputeIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeIntersection(const int32 CornerIndex, const int32 PrincipalIndex, const int32 ChamferIndex, TArray<TArray<int32>>& FaceIndices, TArray<FConvex::FVec3Type>& ConvexVertices)"
  },
  {
    "label": "BuildPrincipalDist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildPrincipalDist(const FVec3Type& P, const int32 CoordIndexA, const int32 DistsIndexA, const int32 DistsIndexB)"
  },
  {
    "label": "BuildChamferDist()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildChamferDist(const FVec3Type& P, const int32 CoordIndexA, const int32 CoordIndexB, const int32 DistsIndexA, const int32 DistsIndexB, const int32 DistsIndexC, const int32 DistsIndexD)"
  },
  {
    "label": "CreateConvexFromTopology()",
    "kind": "Method",
    "detail": "Function (FImplicitObjectPtr)",
    "insertText": "CreateConvexFromTopology(TArray<FConvex::FPlaneType>&& ConvexPlanes, TArray<TArray<int32>>&& FaceIndices, TArray<FConvex::FVec3Type>&& ConvexVertices)"
  },
  {
    "label": "Lowest()",
    "kind": "Method",
    "detail": "Function (FRealType MaxDists [ NumPlanes ] = { TNumericLimits<FRealType)",
    "insertText": "Lowest(), TNumericLimits<FRealType>::Lowest(), TNumericLimits<FRealType>::Lowest(), TNumericLimits<FRealType>::Lowest(), TNumericLimits<FRealType>::Lowest(), TNumericLimits<FRealType>::Lowest(), TNumericLimits<FRealType>::Lowest(), TNumericLimits<FRealType>::Lowest(), TNumericLimits<FRealType>::Lowest()"
  }
]