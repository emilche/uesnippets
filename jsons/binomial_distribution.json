[
  {
    "label": "_IntType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_IntType"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "binomial_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "binomial_distribution"
  },
  {
    "label": "_URNG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_URNG"
  },
  {
    "label": "_CharT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_CharT"
  },
  {
    "label": "_Traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANDOM_BINOMIAL_DISTRIBUTION_H # define _LIBCPP___RANDOM_BINOMIAL_DISTRIBUTION_H # include<__config> # include<__random / is_valid . h> # include<__random / uniform_real_distribution . h> # include<cmath> # include<iosfwd> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (public : typedef _IntType result_type ; class _LIBCPP_TEMPLATE_VIS param_type { result_type __t_ ; double __p_ ; double __pr_ ; double __odds_ratio_ ; result_type __r0_ ; public : typedef binomial_distribution distribution_type ;)",
    "insertText": "param_type(result_type __t = 1, double __p = 0.5)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "t()"
  },
  {
    "label": "binomial_distribution()",
    "kind": "Method",
    "detail": "Function (} class binomial_distribution ; } ; private : param_type __p_ ; public : # ifndef _LIBCPP_CXX03_LANG _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "binomial_distribution() : binomial_distribution(1)"
  },
  {
    "label": "binomial_distribution()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "binomial_distribution(result_type __t, double __p = 0.5) : __p_(param_type(__t, __p))"
  },
  {
    "label": "binomial_distribution()",
    "kind": "Method",
    "detail": "Function (} # else _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "binomial_distribution(result_type __t = 1, double __p = 0.5) : __p_(param_type(__t, __p))"
  },
  {
    "label": "binomial_distribution()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "binomial_distribution(const param_type& __p) : __p_(__p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "operator()(_URNG& __g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _URNG> result_type)",
    "insertText": "operator()(_URNG& __g, const param_type& __p)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY double)",
    "insertText": "p()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY param_type)",
    "insertText": "param()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (__p_ = __p ; } _LIBCPP_INLINE_VISIBILITY result_type)",
    "insertText": "min()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY bool)",
    "insertText": "operator(const binomial_distribution& __x, const binomial_distribution& __y)"
  },
  {
    "label": "lgamma_r()",
    "kind": "Method",
    "detail": "Function (} } ; # ifndef _LIBCPP_MSVCRT_LIKE \" C \" double)",
    "insertText": "lgamma_r(double, int *)"
  },
  {
    "label": "__libcpp_lgamma()",
    "kind": "Method",
    "detail": "Function (# endif _LIBCPP_INLINE_VISIBILITY double)",
    "insertText": "__libcpp_lgamma(double __d)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_LIBCPP_MSVCRT_LIKE) return lgamma(__d)"
  },
  {
    "label": "lgamma_r()",
    "kind": "Method",
    "detail": "Function (# else int __sign ; return)",
    "insertText": "lgamma_r(__d, &__sign)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# endif } template<class _IntType> binomial_distribution<_IntType>::)",
    "insertText": "param_type(result_type __t, double __p) : __t_(__t), __p_(__p)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (__r0_ = static_cast<)",
    "insertText": "result_type((__t_ + 1) * __p_)"
  },
  {
    "label": "exp()",
    "kind": "Method",
    "detail": "Function (__pr_ =)",
    "insertText": "exp(__libcpp_lgamma(__t_ + 1.) - __libcpp_lgamma(__r0_ + 1.) - __libcpp_lgamma(__t_ - __r0_ + 1.) + __r0_ * _VSTD::log(__p_) + (__t_ - __r0_) * _VSTD::log(1 - __p_))"
  },
  {
    "label": "__p_()",
    "kind": "Method",
    "detail": "Function (__odds_ratio_ =)",
    "insertText": "__p_(1 - __p_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<class _IntType> template<class _URNG> _IntType binomial_distribution<_IntType)",
    "insertText": "operator()(_URNG& __g, const param_type& __pr)"
  },
  {
    "label": "__gen()",
    "kind": "Method",
    "detail": "Function (uniform_real_distribution<double> __gen ; double __u =)",
    "insertText": "__gen(__g)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool __break = true ;)",
    "insertText": "if(__rd >= 1)"
  },
  {
    "label": "__rd()",
    "kind": "Method",
    "detail": "Function (__pd* =)",
    "insertText": "__rd(__pr.__odds_ratio_ * (__pr.__t_ - __rd + 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (__u - = __pd ; __break = false ;)",
    "insertText": "if(__u < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__rd != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + __ru ;)",
    "insertText": "if(__ru <= __pr.__t_)"
  },
  {
    "label": "__pu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__pu(__pr.__t_ - __ru + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(__break)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<class _CharT,class _Traits,class _IntType> basic_ostream<_CharT,_Traits>&)",
    "insertText": "operator(basic_ostream<_CharT, _Traits>& __os, const binomial_distribution<_IntType>& __x)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (__save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__os)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_ostream<_CharT,_Traits> _OStream ; __os .)",
    "insertText": "flags(_OStream::dec | _OStream::left | _OStream::fixed | _OStream::scientific)"
  },
  {
    "label": "widen()",
    "kind": "Method",
    "detail": "Function (_CharT __sp = __os .)",
    "insertText": "widen(' ')"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (__os .)",
    "insertText": "fill(__sp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _CharT,class _Traits,class _IntType> basic_istream<_CharT,_Traits>&)",
    "insertText": "operator(basic_istream<_CharT, _Traits>& __is, binomial_distribution<_IntType>& __x)"
  },
  {
    "label": "__lx()",
    "kind": "Method",
    "detail": "Function (typedef binomial_distribution<_IntType> _Eng ; typedef _Eng::result_type result_type ; typedef _Eng::param_type param_type ; __save_flags<_CharT,_Traits>)",
    "insertText": "__lx(__is)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (typedef basic_istream<_CharT,_Traits> _Istream ; __is .)",
    "insertText": "flags(_Istream::dec | _Istream::skipws)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result_type __t ; double __p ; __is>> __t>> __p ;)",
    "insertText": "if(!__is.fail()) __x.param(param_type(__t, __p))"
  }
]