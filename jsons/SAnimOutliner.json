[
  {
    "label": "FAnimModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimModel"
  },
  {
    "label": "SAnimTrackArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimTrackArea"
  },
  {
    "label": "SAnimOutlinerItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimOutlinerItem"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FTextFilterExpressionEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionEvaluator"
  },
  {
    "label": "SAnimOutliner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimOutliner"
  },
  {
    "label": "FCachedGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedGeometry"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Input / Reply . h \" # include \" Styling / ISlateStyle . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STreeView . h \" # include \" AnimTimeline / AnimTimelineTrack . h \" class FAnimModel ; class SAnimTrackArea ; class SAnimOutlinerItem ; class FMenuBuilder ; class FTextFilterExpressionEvaluator ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnGetContextMenuContent, FMenuBuilder&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SAnimOutliner : public STreeView<TSharedRef<FAnimTimelineTrack>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimOutliner)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SScrollBar>, ExternalScrollbar) SLATE_EVENT(FOnGetContextMenuContent, OnGetContextMenuContent) SLATE_ATTRIBUTE(FText, FilterText) SLATE_END_ARGS() ~SAnimOutliner()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FAnimModel>& InAnimModel, const TSharedRef<SAnimTrackArea>& InTrackArea)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SetItemSelection(TSharedRef<FAnimTimelineTrack> TheItem, bool bShouldBeSelected, bool bWasUserDirected = false)"
  },
  {
    "label": "Private_ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_ClearSelection()"
  },
  {
    "label": "Private_SelectRangeFromCurrentTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Private_SelectRangeFromCurrentTo(TSharedRef<FAnimTimelineTrack> InRangeSelectionEnd)"
  },
  {
    "label": "FCachedGeometry()",
    "kind": "Method",
    "detail": "Function (struct FCachedGeometry {)",
    "insertText": "FCachedGeometry(TSharedRef<FAnimTimelineTrack> InTrack, float InTop, float InHeight) : Track(MoveTemp(InTrack)) , Top(InTop) , Height(InHeight)"
  },
  {
    "label": "GetCachedGeometryForTrack()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FAnimTimelineTrack> Track ; float Top ; float Height ; } ; TOptional<FCachedGeometry>)",
    "insertText": "GetCachedGeometryForTrack(const TSharedRef<FAnimTimelineTrack>& InTrack)"
  },
  {
    "label": "ComputeTrackPosition()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "ComputeTrackPosition(const TSharedRef<FAnimTimelineTrack>& InTrack)"
  },
  {
    "label": "ReportChildRowGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportChildRowGeometry(const TSharedRef<FAnimTimelineTrack>& InTrack, const FGeometry& InGeometry)"
  },
  {
    "label": "OnChildRowRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildRowRemoved(const TSharedRef<FAnimTimelineTrack>& InTrack)"
  },
  {
    "label": "ScrollByDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollByDelta(float DeltaInSlateUnits)"
  },
  {
    "label": "RefreshFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshFilter()"
  },
  {
    "label": "HandleGenerateRow()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "HandleGenerateRow(TSharedRef<FAnimTimelineTrack> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGetChildren(TSharedRef<FAnimTimelineTrack> Item, TArray<TSharedRef<FAnimTimelineTrack>>& OutChildren)"
  },
  {
    "label": "HandleExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleExpansionChanged(TSharedRef<FAnimTimelineTrack> InItem, bool bIsExpanded)"
  },
  {
    "label": "HandleContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "HandleContextMenuOpening()"
  },
  {
    "label": "HandleTracksChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTracksChanged()"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const TSharedRef<FAnimTimelineTrack>& InTrack, const FName& ColumnId, const TSharedRef<SAnimOutlinerItem>& Row)"
  }
]