[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FSlotBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlotBase"
  },
  {
    "label": "FChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChildren"
  },
  {
    "label": "FCombinedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCombinedChildren"
  },
  {
    "label": "TOneDynamicChild",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOneDynamicChild"
  },
  {
    "label": "ECopyConstruct",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECopyConstruct"
  },
  {
    "label": "ERefConstruct",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERefConstruct"
  },
  {
    "label": "FWidgetRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetRef"
  },
  {
    "label": "FConstWidgetRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstWidgetRef"
  },
  {
    "label": "UE_WITH_SLATE_CHILDREN_DEBUGGING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlotBase . h \" # include \" SlateGlobals . h \" # include \" Types / ReflectionMetadata . h \" # ifndef UE_WITH_SLATE_CHILDREN_DEBUGGING # define)",
    "insertText": "UE_WITH_SLATE_CHILDREN_DEBUGGING(UE_BUILD_SHIPPING)"
  },
  {
    "label": "FChildren()",
    "kind": "Method",
    "detail": "Function (class FSlotBase ; class FChildren { public :)",
    "insertText": "FChildren(SWidget* InOwner) : Owner(InOwner) , Name(\"Children\")"
  },
  {
    "label": "FChildren()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FChildren(SWidget* InOwner, FName InName) : Owner(InOwner) , Name(InName)"
  },
  {
    "label": "FChildren()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FChildren(std::nullptr_t)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetChildAt()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetChildAt(int32 Index)"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (SWidget&)",
    "insertText": "GetOwner()"
  },
  {
    "label": "Debug_TestDestroyTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Debug_TestDestroyTag()"
  },
  {
    "label": "IteratingGuard()",
    "kind": "Method",
    "detail": "Function (TGuardValue<bool>)",
    "insertText": "IteratingGuard(Debug_bIsIteratingChildren, true)"
  },
  {
    "label": "GetChildRefAt()",
    "kind": "Method",
    "detail": "Function (FWidgetRef WidgetRef =)",
    "insertText": "GetChildRefAt(Index)"
  },
  {
    "label": "Pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pred(WidgetRef.GetWidget())"
  },
  {
    "label": "ForEachWidget()",
    "kind": "Method",
    "detail": "Function (} } template<Predicate> void)",
    "insertText": "ForEachWidget(Predicate&& Pred)"
  },
  {
    "label": "NumSlot()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "NumSlot()"
  },
  {
    "label": "GetSlotAt()",
    "kind": "Method",
    "detail": "Function (} const FSlotBase&)",
    "insertText": "GetSlotAt(int32 ChildIndex)"
  },
  {
    "label": "SupportSlotWithSlateAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportSlotWithSlateAttribute()"
  },
  {
    "label": "FWidgetRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWidgetRef(ERefConstruct, SWidget& InWidgetRef) : WidgetCopy() , WidgetReference(InWidgetRef)"
  },
  {
    "label": "FWidgetRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWidgetRef(const FWidgetRef& Other) : WidgetCopy(Other.WidgetCopy) , WidgetReference(WidgetCopy.IsSet() ? WidgetCopy.GetValue().Get() : Other.WidgetReference)"
  },
  {
    "label": "FWidgetRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FWidgetRef(FWidgetRef&& Other) : WidgetCopy(MoveTemp(Other.WidgetCopy)) , WidgetReference(WidgetCopy.IsSet() ? WidgetCopy.GetValue().Get() : Other.WidgetReference)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FWidgetRef&)",
    "insertText": "operator(const FWidgetRef&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FWidgetRef&)",
    "insertText": "operator(FWidgetRef&&)"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (SWidget&)",
    "insertText": "GetWidget()"
  },
  {
    "label": "FConstWidgetRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstWidgetRef(ERefConstruct, const SWidget& InWidgetRef) : WidgetCopy() , WidgetReference(InWidgetRef)"
  },
  {
    "label": "FConstWidgetRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstWidgetRef(const FConstWidgetRef& Other) : WidgetCopy(Other.WidgetCopy) , WidgetReference(WidgetCopy.IsSet() ? WidgetCopy.GetValue().Get() : Other.WidgetReference)"
  },
  {
    "label": "FConstWidgetRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstWidgetRef(FConstWidgetRef&& Other) : WidgetCopy(MoveTemp(Other.WidgetCopy)) , WidgetReference(WidgetCopy.IsSet() ? WidgetCopy.GetValue().Get() : Other.WidgetReference)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FConstWidgetRef&)",
    "insertText": "operator(const FConstWidgetRef&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FConstWidgetRef&)",
    "insertText": "operator(FConstWidgetRef&&)"
  },
  {
    "label": "GetChildRefAt()",
    "kind": "Method",
    "detail": "Function (FConstWidgetRef)",
    "insertText": "GetChildRefAt(int32 Index)"
  },
  {
    "label": "FChildren()",
    "kind": "Method",
    "detail": "Function (protected : # if UE_WITH_SLATE_CHILDREN_DEBUGGING ~)",
    "insertText": "FChildren()"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (Debug_DestroyedTag = 0 xA3 ;)",
    "insertText": "UE_CLOG(Debug_bIsIteratingChildren, LogSlate, Fatal, TEXT(\"Destroying widget while iterating children! Owner: %s [%s]\"), *FReflectionMetaData::GetWidgetDebugInfo(Owner), *Name.ToString())"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(Debug_DestroyedTag != 0xDC, LogSlate, Fatal, TEXT(\"The FChildren is destroyed. You probably have 1 widget owned by 2 different FChildren.\"))"
  }
]