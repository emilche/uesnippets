[
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FObjectMemoryUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectMemoryUsage"
  },
  {
    "label": "EObjFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EObjFlags"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FObjectMemoryAnalyzer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectMemoryAnalyzer"
  },
  {
    "label": "EAnalyzeFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EAnalyzeFlags"
  },
  {
    "label": "ESortKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ESortKey"
  },
  {
    "label": "FCompareFSortBySize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompareFSortBySize"
  },
  {
    "label": "EPrintFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EPrintFlags"
  },
  {
    "label": "FObjectMemoryUsage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMath . h \" # include \" Misc / AssertionMacros . h \" # include \" UObject / UObjectAnnotation . h \" class FOutputDevice ; class UClass ; class UObject ; struct FObjectMemoryUsage { struct EObjFlags { enum Type { IsRoot = 1<<0,IsReferencedByRoot = 1<<1,IsProcessed = 1<<2,IsReferencedByNonRoot = 1<<3,} ; } ;)",
    "insertText": "FObjectMemoryUsage() : InclusiveMemoryUsage(0) , ExclusiveMemoryUsage(0) , Flags(0) , Object(NULL)"
  },
  {
    "label": "FObjectMemoryUsage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FObjectMemoryUsage(SIZE_T InclusiveMemUsage, SIZE_T ExclusiveMemUsage, uint32 InFlags = 0) : InclusiveMemoryUsage(InclusiveMemUsage) , ExclusiveMemoryUsage(ExclusiveMemUsage) , Flags(InFlags) , Object(NULL)"
  },
  {
    "label": "IsDefault()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDefault()"
  },
  {
    "label": "IsReferencedByRoot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencedByRoot()"
  },
  {
    "label": "IsProcessed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProcessed()"
  },
  {
    "label": "IsReferencedByNonRoot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReferencedByNonRoot()"
  },
  {
    "label": "FCompareFSortBySize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T InclusiveMemoryUsage ; SIZE_T ExclusiveMemoryUsage ; SIZE_T InclusiveResourceSize ; SIZE_T ExclusiveResourceSize ; uint32 Flags ; UObject* Object ; TArray<UObject*> RootReferencer ; TArray<UObject*> NonRootReferencer ; } ; struct FObjectMemoryAnalyzer { struct EAnalyzeFlags { enum Type { IncludeDefaultObjects = 1<<0,} ; } ; struct ESortKey { enum Type { InclusiveSize,ExclusiveSize,InclusiveResSize,ExclusiveResSize,InclusiveTotal,ExclusiveTotal,} ; } ; struct FCompareFSortBySize {)",
    "insertText": "FCompareFSortBySize(ESortKey::Type InSortKey ) : SortKey( InSortKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()( const FObjectMemoryUsage& A, const FObjectMemoryUsage& B)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(false)"
  },
  {
    "label": "FObjectMemoryAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectMemoryAnalyzer(class UClass* BaseClass, uint32 Flags = 0)"
  },
  {
    "label": "FObjectMemoryAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectMemoryAnalyzer(class UObject* Object, uint32 Flags = 0)"
  },
  {
    "label": "FObjectMemoryAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectMemoryAnalyzer(const TArray<class UObject*>& ObjectList, uint32 Flags = 0)"
  },
  {
    "label": "AnalyzeObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeObject(class UObject* Object)"
  },
  {
    "label": "AnalyzeObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeObjects(const TArray<class UObject*>& ObjectList)"
  },
  {
    "label": "AnalyzeObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeObjects(class UClass* BaseClass)"
  },
  {
    "label": "GetResults()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetResults(TArray<FObjectMemoryUsage>& Results)"
  },
  {
    "label": "GetObjectMemoryUsage()",
    "kind": "Method",
    "detail": "Function (const FObjectMemoryUsage&)",
    "insertText": "GetObjectMemoryUsage(class UObject* Obj)"
  },
  {
    "label": "PrintResults()",
    "kind": "Method",
    "detail": "Function (struct EPrintFlags { enum Type { PrintReferences = 1<<0,PrintReferencer = 1<<1,PrintAll = PrintReferences | PrintReferencer,} ; } ; void)",
    "insertText": "PrintResults(FOutputDevice& Ar, uint32 PrintFlags = 0)"
  },
  {
    "label": "GetReferencedObjects()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "GetReferencedObjects(UObject* Obj, TArray<UObject*>& ReferencedObjects)"
  },
  {
    "label": "ProcessSubObjRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessSubObjRecursive(UObject* Root, UObject* Object)"
  },
  {
    "label": "CalculateSizeRecursive()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "CalculateSizeRecursive(UObject* Object)"
  },
  {
    "label": "GetFlagsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFlagsString(const FObjectMemoryUsage& Annotation)"
  },
  {
    "label": "PrintSubObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSubObjects(FOutputDevice& Ar, const FString& Indent, UObject* Parent, uint32 PrintFlags)"
  }
]