[
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "FBaseMeshReconstructorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseMeshReconstructorModule"
  },
  {
    "label": "UMeshReconstructorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshReconstructorBase"
  },
  {
    "label": "FDynamicMeshVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshVertex"
  },
  {
    "label": "IMRMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMRMesh"
  },
  {
    "label": "FBrickDataReceipt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBrickDataReceipt"
  },
  {
    "label": "FSendBrickDataArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSendBrickDataArgs"
  },
  {
    "label": "UMRMeshBodyHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMRMeshBodyHolder"
  },
  {
    "label": "FTriMeshCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionData"
  },
  {
    "label": "FTriMeshCollisionDataEstimates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionDataEstimates"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UMRMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMRMeshComponent"
  },
  {
    "label": "FMRMeshProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMRMeshProxy"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IMRMesh::FBrickId InBrickId)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const IMRMesh::FSendBrickDataArgs& Args)"
  },
  {
    "label": "AbortCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortCook()"
  },
  {
    "label": "ReleaseArgData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseArgData()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "FinishPhysicsAsyncCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishPhysicsAsyncCook(bool bSuccess, UBodySetup* FinishedBodySetup)"
  },
  {
    "label": "ForceNavMeshUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceNavMeshUpdate()"
  },
  {
    "label": "RequestNavMeshUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestNavMeshUpdate()"
  },
  {
    "label": "SetWireframeMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWireframeMaterial(class UMaterialInterface* InMaterial)"
  },
  {
    "label": "UpdateMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMesh(const FVector& InLocation, const FQuat& InRotation, const FVector& Scale, TArray<FVector>& Vertices, TArray<MRMESH_INDEX_TYPE>& Indices, TArray<FVector2D> UVData = {}, TArray<FPackedNormal> TangentXZData = {}, TArray<FColor> ColorData = {})"
  },
  {
    "label": "UpdateMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMesh(const FVector& InLocation, const FQuat& InRotation, const FVector& Scale, TArray<FVector3f>& Vertices, TArray<MRMESH_INDEX_TYPE>& Indices, TArray<FVector2D> UVData = {}, TArray<FPackedNormal> TangentXZData = {}, TArray<FColor> ColorData = {})"
  },
  {
    "label": "SetEnableMeshOcclusion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnableMeshOcclusion(bool bEnable)"
  },
  {
    "label": "SetUseWireframe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseWireframe(bool bUseWireframe)"
  },
  {
    "label": "SetWireframeColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWireframeColor(const FLinearColor& InColor)"
  },
  {
    "label": "SuggestNavMeshUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuggestNavMeshUpdate()"
  },
  {
    "label": "SendBrickData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBrickData_Internal(IMRMesh::FSendBrickDataArgs Args)"
  },
  {
    "label": "RemoveBodyInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBodyInstance(int32 BodyIndex)"
  },
  {
    "label": "ClearAllBrickData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllBrickData_Internal()"
  }
]