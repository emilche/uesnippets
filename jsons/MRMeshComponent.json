[
  {
    "label": "UMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterial"
  },
  {
    "label": "FBaseMeshReconstructorModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseMeshReconstructorModule"
  },
  {
    "label": "UMeshReconstructorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshReconstructorBase"
  },
  {
    "label": "FDynamicMeshVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicMeshVertex"
  },
  {
    "label": "IMRMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMRMesh"
  },
  {
    "label": "FBrickDataReceipt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBrickDataReceipt"
  },
  {
    "label": "FSendBrickDataArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSendBrickDataArgs"
  },
  {
    "label": "UMRMeshBodyHolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMRMeshBodyHolder"
  },
  {
    "label": "FTriMeshCollisionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionData"
  },
  {
    "label": "FTriMeshCollisionDataEstimates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTriMeshCollisionDataEstimates"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UMRMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMRMeshComponent"
  },
  {
    "label": "FMRMeshProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMRMeshProxy"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "DECLARE_STATS_GROUP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / PrimitiveComponent . h \" # include \" Interfaces / Interface_CollisionDataProvider . h \" # include \" PackedNormal . h \" # include \" MRMeshBufferDefines . h \" # include \" MRMeshComponent . generated . h \" class UMaterial ; class FBaseMeshReconstructorModule ; class UMeshReconstructorBase ; struct FDynamicMeshVertex ;)",
    "insertText": "DECLARE_STATS_GROUP(TEXT(\"MRMesh\"), STATGROUP_MRMESH, STATCAT_Advanced)"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogMrMesh, Warning, All)"
  },
  {
    "label": "FBrickDataReceipt()",
    "kind": "Method",
    "detail": "Function (# ifndef PLATFORM_HOLOLENS # define PLATFORM_HOLOLENS 0 # endif class IMRMesh { public : struct FBrickDataReceipt { ~)",
    "insertText": "FBrickDataReceipt()"
  },
  {
    "label": "FBox()",
    "kind": "Method",
    "detail": "Function (} } ; typedef uint64 FBrickId ; struct FSendBrickDataArgs { TSharedPtr<FBrickDataReceipt,ESPMode::ThreadSafe> BrickDataReceipt ; const FBrickId BrickId = 0 ; const TArray<FVector3f>& PositionData ; const TArray<FVector2D>& UVData ; const TArray<FPackedNormal>& TangentXZData ; const TArray<FColor>& ColorData ; const TArray<MRMESH_INDEX_TYPE>& Indices ; const FBox Bounds =)",
    "insertText": "FBox(EForceInit::ForceInit)"
  },
  {
    "label": "SetConnected()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetConnected(bool value)"
  },
  {
    "label": "IsConnected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnected()"
  },
  {
    "label": "SendRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRelativeTransform(const FTransform& Transform)"
  },
  {
    "label": "SendBrickData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBrickData(FSendBrickDataArgs Args)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ClearAllBrickData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllBrickData()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() void Initialize(IMRMesh::FBrickId InBrickId)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const IMRMesh::FSendBrickDataArgs& Args)"
  },
  {
    "label": "AbortCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortCook()"
  },
  {
    "label": "ReleaseArgData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseArgData()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "GetPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPhysicsTriMeshData(struct FTriMeshCollisionData* CollisionData, bool InUseAllTriData)"
  },
  {
    "label": "GetTriMeshSizeEstimates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTriMeshSizeEstimates(struct FTriMeshCollisionDataEstimates& OutTriMeshEstimates, bool bInUseAllTriData)"
  },
  {
    "label": "ContainsPhysicsTriMeshData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPhysicsTriMeshData(bool InUseAllTriData)"
  },
  {
    "label": "WantsNegXTriMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsNegXTriMesh()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (bool bCookInProgress = false ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnMRMeshBrickDataUpdatedDelegate, const UMRMeshComponent*, const IMRMesh::FSendBrickDataArgs&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(hideCategories=(Physics), meta = (BlueprintSpawnableComponent), ClassGroup = Rendering, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (public : class FMRMeshProxy ;)",
    "insertText": "GENERATED_UCLASS_BODY() MRMESH_API virtual void BeginPlay()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "SetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRelativeTransform(Transform)"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaterial(int32 ElementIndex, class UMaterialInterface* InMaterial)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (class UMaterialInterface*)",
    "insertText": "GetMaterial(int32 ElementIndex)"
  },
  {
    "label": "UpdateMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMesh(const FVector& InLocation, const FQuat& InRotation, const FVector& Scale, TArray<FVector>& Vertices, TArray<MRMESH_INDEX_TYPE>& Indices, TArray<FVector2D> UVData = {}, TArray<FPackedNormal> TangentXZData = {}, TArray<FColor> ColorData = {})"
  },
  {
    "label": "UpdateMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMesh(const FVector& InLocation, const FQuat& InRotation, const FVector& Scale, TArray<FVector3f>& Vertices, TArray<MRMESH_INDEX_TYPE>& Indices, TArray<FVector2D> UVData = {}, TArray<FPackedNormal> TangentXZData = {}, TArray<FColor> ColorData = {})"
  },
  {
    "label": "OnBrickDataUpdated()",
    "kind": "Method",
    "detail": "Function (FOnMRMeshBrickDataUpdatedDelegate&)",
    "insertText": "OnBrickDataUpdated()"
  },
  {
    "label": "UpdatePhysicsToRBChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicsToRBChannels()"
  },
  {
    "label": "SetCollisionObjectType()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetCollisionObjectType(ECollisionChannel Channel)"
  },
  {
    "label": "SetCollisionResponseToChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionResponseToChannel(ECollisionChannel Channel, ECollisionResponse NewResponse)"
  },
  {
    "label": "SetCollisionResponseToAllChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionResponseToAllChannels(ECollisionResponse NewResponse)"
  },
  {
    "label": "SetCollisionResponseToChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionResponseToChannels(const FCollisionResponseContainer& NewResponses)"
  },
  {
    "label": "SetCollisionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionEnabled(ECollisionEnabled::Type NewType)"
  },
  {
    "label": "SetCollisionProfileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollisionProfileName(FName InCollisionProfileName, bool bUpdateOverlaps=true)"
  },
  {
    "label": "SetWalkableSlopeOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWalkableSlopeOverride(const FWalkableSlopeOverride& NewOverride)"
  },
  {
    "label": "SetNeverCreateCollisionMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNeverCreateCollisionMesh(bool bNeverCreate)"
  },
  {
    "label": "SetEnableNavMesh()",
    "kind": "Method",
    "detail": "Function (bNeverCreateCollisionMesh = bNeverCreate ; } void)",
    "insertText": "SetEnableNavMesh(bool bEnable)"
  },
  {
    "label": "SuggestNavMeshUpdate()",
    "kind": "Method",
    "detail": "Function (bUpdateNavMeshOnMeshUpdate = bEnable ; } void)",
    "insertText": "SuggestNavMeshUpdate()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(UMRMeshComponent, FOnClear)"
  },
  {
    "label": "OnClear()",
    "kind": "Method",
    "detail": "Function (FOnClear&)",
    "insertText": "OnClear()"
  },
  {
    "label": "GetUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUsedMaterials(TArray<UMaterialInterface*>& OutMaterials, bool bGetDebugMaterials = false)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "DoCustomNavigableGeometryExport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoCustomNavigableGeometryExport(FNavigableGeometryExport& GeomExport)"
  },
  {
    "label": "ShouldCreatePhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCreatePhysicsState()"
  },
  {
    "label": "SendRenderDynamicData_Concurrent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRenderDynamicData_Concurrent()"
  },
  {
    "label": "SendBrickData_Internal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SendBrickData_Internal(IMRMesh::FSendBrickDataArgs Args)"
  },
  {
    "label": "RemoveBodyInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBodyInstance(int32 BodyIndex)"
  },
  {
    "label": "OnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateTransform(EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport)"
  },
  {
    "label": "ClearAllBrickData_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllBrickData_Internal()"
  }
]