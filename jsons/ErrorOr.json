[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "V",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V"
  },
  {
    "label": "ReferenceStorage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReferenceStorage"
  },
  {
    "label": "ErrorOr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ErrorOr"
  },
  {
    "label": "OtherT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherT"
  },
  {
    "label": "E",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "E"
  },
  {
    "label": "T1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T1"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "moveIfMoveConstructible()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_ERROROR_H # define LLVM_SUPPORT_ERROROR_H # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / Support / AlignOf . h \" # include<cassert> # include<system_error> # include<type_traits> namespace llvm { template<class T,class V> std::enable_if<std::is_constructible<T,V>::value,std::remove_reference<V>::type>::type&&)",
    "insertText": "moveIfMoveConstructible(V &Val)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "T()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(getErrorStorage()) std::error_code(make_error_code(ErrorCode))"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ErrorOr(std::error_code EC) : HasError(true)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(getErrorStorage()) std::error_code(EC)"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ErrorOr(T Val) : HasError(false)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(getStorage()) storage_type(moveIfMoveConstructible<storage_type>(Val))"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ErrorOr(const ErrorOr &Other)"
  },
  {
    "label": "copyConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyConstruct(Other)"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherT>)",
    "insertText": "ErrorOr(const ErrorOr<OtherT> &Other, typename std::enable_if<std::is_convertible<OtherT, T>::value>::type * = nullptr)"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherT>)",
    "insertText": "ErrorOr(const ErrorOr<OtherT> &Other, typename std::enable_if< !std::is_convertible<OtherT, const T &>::value>::type * = nullptr)"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ErrorOr(ErrorOr &&Other)"
  },
  {
    "label": "moveConstruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveConstruct(std::move(Other))"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherT>)",
    "insertText": "ErrorOr(ErrorOr<OtherT> &&Other, typename std::enable_if<std::is_convertible<OtherT, T>::value>::type * = nullptr)"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (} template<class OtherT>)",
    "insertText": "ErrorOr(ErrorOr<OtherT> &&Other, typename std::enable_if<!std::is_convertible<OtherT, T>::value>::type * = nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ErrorOr&)",
    "insertText": "operator(const ErrorOr &Other)"
  },
  {
    "label": "copyAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyAssign(Other)"
  },
  {
    "label": "moveAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "moveAssign(std::move(Other))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} const_reference)",
    "insertText": "get()"
  },
  {
    "label": "getError()",
    "kind": "Method",
    "detail": "Function (} std::error_code)",
    "insertText": "getError()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "operator()"
  },
  {
    "label": "copyConstruct()",
    "kind": "Method",
    "detail": "Function (} private : template<class OtherT> void)",
    "insertText": "copyConstruct(const ErrorOr<OtherT> &Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (HasError = false ;)",
    "insertText": "new(getStorage()) storage_type(*Other.getStorage())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else { HasError = true ;)",
    "insertText": "new(getErrorStorage()) std::error_code(Other.getError())"
  },
  {
    "label": "compareThisIfSameType()",
    "kind": "Method",
    "detail": "Function (} } template<class T1> bool)",
    "insertText": "compareThisIfSameType(const T1 &a, const T1 &b)"
  },
  {
    "label": "ErrorOr()",
    "kind": "Method",
    "detail": "Function (this -> ~)",
    "insertText": "ErrorOr()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) ErrorOr(Other)"
  },
  {
    "label": "moveConstruct()",
    "kind": "Method",
    "detail": "Function (} template<class OtherT> void)",
    "insertText": "moveConstruct(ErrorOr<OtherT> &&Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (HasError = false ;)",
    "insertText": "new(getStorage()) storage_type(std::move(*Other.getStorage()))"
  },
  {
    "label": "moveAssign()",
    "kind": "Method",
    "detail": "Function (} } template<class OtherT> void)",
    "insertText": "moveAssign(ErrorOr<OtherT> &&Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(this) ErrorOr(std::move(Other))"
  },
  {
    "label": "toPointer()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "toPointer(pointer Val)"
  },
  {
    "label": "getStorage()",
    "kind": "Method",
    "detail": "Function (} storage_type*)",
    "insertText": "getStorage()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!HasError && \"Cannot get value when an error exists!\")"
  },
  {
    "label": "getErrorStorage()",
    "kind": "Method",
    "detail": "Function (} std::error_code*)",
    "insertText": "getErrorStorage()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(HasError && \"Cannot get error when a value exists!\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} union { AlignedCharArrayUnion<storage_type> TStorage ; AlignedCharArrayUnion<std::error_code> ErrorStorage ; } ; bool HasError : 1 ; } ; template<class T,class E> std::enable_if<std::is_error_code_enum<E>::value | | std::is_error_condition_enum<E>::value,bool>::type)",
    "insertText": "operator(const ErrorOr<T> &Err, E Code)"
  }
]