[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__)"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (template<HandlePlaceholderFunction> bool)",
    "insertText": "Equal(FAllocationContext Context, VValue Left, VValue Right, HandlePlaceholderFunction HandlePlaceholder)"
  },
  {
    "label": "HandlePlaceholder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePlaceholder(Left, Right)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Left.IsInt() || Right.IsInt())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Left.IsLogic() || Right.IsLogic())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Left.IsEnumerator() || Right.IsEnumerator())"
  },
  {
    "label": "AsCell()",
    "kind": "Method",
    "detail": "Function (VCell* LeftCell =& Left .)",
    "insertText": "AsCell()"
  },
  {
    "label": "Equal()",
    "kind": "Method",
    "detail": "Function (} return LeftCell ->)",
    "insertText": "Equal(Context, RightCell, HandlePlaceholder)"
  }
]