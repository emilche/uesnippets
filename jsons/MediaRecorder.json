[
  {
    "label": "FMediaPlayerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaPlayerFacade"
  },
  {
    "label": "FMediaRecorderClockSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaRecorderClockSink"
  },
  {
    "label": "IImageWriteQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IImageWriteQueue"
  },
  {
    "label": "FMediaRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaRecorder"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMediaRecorderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaRecorderData"
  },
  {
    "label": "FMediaRecorder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / Future . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" IImageWrapper . h \" # include \" MediaSampleQueue . h \" # include \" Misc / Timespan . h \" # include \" Templates / SharedPointer . h \" class FMediaPlayerFacade ; class FMediaRecorderClockSink ; class IImageWriteQueue ; class FMediaRecorder { public :)",
    "insertText": "FMediaRecorder()"
  },
  {
    "label": "FMediaRecorderData()",
    "kind": "Method",
    "detail": "Function (public : enum class EMediaRecorderNumerationStyle { AppendFrameNumber,AppendSampleTime } ; struct FMediaRecorderData { TSharedRef<FMediaPlayerFacade,ESPMode::ThreadSafe> PlayerFacade ; FString BaseFilename ; EMediaRecorderNumerationStyle NumerationStyle ; EImageFormat TargetImageFormat ; bool bResetAlpha ; int32 CompressionQuality ;)",
    "insertText": "FMediaRecorderData(const TSharedRef<FMediaPlayerFacade, ESPMode::ThreadSafe>& InPlayerFacade, const FString& InBaseFilename) : PlayerFacade(InPlayerFacade) , BaseFilename(InBaseFilename) , NumerationStyle(EMediaRecorderNumerationStyle::AppendSampleTime) , TargetImageFormat(EImageFormat::EXR) , bResetAlpha(false) , CompressionQuality(0)"
  },
  {
    "label": "StartRecording()",
    "kind": "Method",
    "detail": "Function (} } ; public : void)",
    "insertText": "StartRecording(const FMediaRecorderData& InRecoderData)"
  },
  {
    "label": "StopRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecording()"
  },
  {
    "label": "IsRecording()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRecording()"
  },
  {
    "label": "TickRecording()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "TickRecording()"
  }
]