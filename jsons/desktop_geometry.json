[
  {
    "label": "DesktopVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopVector"
  },
  {
    "label": "DesktopSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopSize"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "DesktopVector()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_DESKTOP_GEOMETRY_H_ # define MODULES_DESKTOP_CAPTURE_DESKTOP_GEOMETRY_H_ # include<stdint . h> # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class DesktopVector { public :)",
    "insertText": "DesktopVector() : x_(0), y_(0)"
  },
  {
    "label": "DesktopVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DesktopVector(int32_t x, int32_t y) : x_(x), y_(y)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "x()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (x_ = x ; y_ = y ; } DesktopVector)",
    "insertText": "add(const DesktopVector& other)"
  },
  {
    "label": "subtract()",
    "kind": "Method",
    "detail": "Function (} DesktopVector)",
    "insertText": "subtract(const DesktopVector& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DesktopVector)",
    "insertText": "operator()"
  },
  {
    "label": "DesktopSize()",
    "kind": "Method",
    "detail": "Function (} private : int32_t x_ ; int32_t y_ ; } ; class DesktopSize { public :)",
    "insertText": "DesktopSize() : width_(0), height_(0)"
  },
  {
    "label": "DesktopSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DesktopSize(int32_t width, int32_t height) : width_(width), height_(height)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "width()"
  },
  {
    "label": "MakeSize()",
    "kind": "Method",
    "detail": "Function (width_ = width ; height_ = height ; } private : int32_t width_ ; int32_t height_ ; } ; class RTC_EXPORT DesktopRect { public : DesktopRect)",
    "insertText": "MakeSize(const DesktopSize& size)"
  },
  {
    "label": "MakeWH()",
    "kind": "Method",
    "detail": "Function (} DesktopRect)",
    "insertText": "MakeWH(int32_t width, int32_t height)"
  },
  {
    "label": "MakeXYWH()",
    "kind": "Method",
    "detail": "Function (} DesktopRect)",
    "insertText": "MakeXYWH(int32_t x, int32_t y, int32_t width, int32_t height)"
  },
  {
    "label": "MakeLTRB()",
    "kind": "Method",
    "detail": "Function (} DesktopRect)",
    "insertText": "MakeLTRB(int32_t left, int32_t top, int32_t right, int32_t bottom)"
  },
  {
    "label": "MakeOriginSize()",
    "kind": "Method",
    "detail": "Function (} DesktopRect)",
    "insertText": "MakeOriginSize(const DesktopVector& origin, const DesktopSize& size)"
  },
  {
    "label": "DesktopRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DesktopRect() : left_(0), top_(0), right_(0), bottom_(0)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "left()"
  },
  {
    "label": "set_height()",
    "kind": "Method",
    "detail": "Function (right_ = left_ + width ; } void)",
    "insertText": "set_height(int32_t height)"
  },
  {
    "label": "top_left()",
    "kind": "Method",
    "detail": "Function (bottom_ = top_ + height ; } DesktopVector)",
    "insertText": "top_left()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} DesktopSize)",
    "insertText": "size()"
  },
  {
    "label": "is_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_empty()"
  },
  {
    "label": "ContainsRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsRect(const DesktopRect& rect)"
  },
  {
    "label": "IntersectWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntersectWith(const DesktopRect& rect)"
  },
  {
    "label": "UnionWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnionWith(const DesktopRect& rect)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(int32_t dx, int32_t dy)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(DesktopVector d)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Translate(d.x(), d.y())"
  },
  {
    "label": "Extend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Extend(int32_t left_offset, int32_t top_offset, int32_t right_offset, int32_t bottom_offset)"
  },
  {
    "label": "Scale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Scale(double horizontal, double vertical)"
  },
  {
    "label": "DesktopRect()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "DesktopRect(int32_t left, int32_t top, int32_t right, int32_t bottom) : left_(left), top_(top), right_(right), bottom_(bottom)"
  }
]