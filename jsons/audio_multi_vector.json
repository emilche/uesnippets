[
  {
    "label": "AudioMultiVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioMultiVector"
  },
  {
    "label": "AudioMultiVector()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_AUDIO_MULTI_VECTOR_H_ # define MODULES_AUDIO_CODING_NETEQ_AUDIO_MULTI_VECTOR_H_ # include<stdint . h> # include<string . h> # include<vector> # include \" api / array_view . h \" # include \" modules / audio_coding / neteq / audio_vector . h \" namespace webrtc { class AudioMultiVector { public :)",
    "insertText": "AudioMultiVector(size_t N)"
  },
  {
    "label": "AudioMultiVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioMultiVector(size_t N, size_t initial_size)"
  },
  {
    "label": "AudioMultiVector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioMultiVector()"
  },
  {
    "label": "AudioMultiVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioMultiVector(const AudioMultiVector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioMultiVector&)",
    "insertText": "operator(const AudioMultiVector&)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Zeros()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Zeros(size_t length)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(AudioMultiVector* copy_to)"
  },
  {
    "label": "PushBackInterleaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBackInterleaved(rtc::ArrayView<const int16_t> append_this)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBack(const AudioMultiVector& append_this)"
  },
  {
    "label": "PushBackFromIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBackFromIndex(const AudioMultiVector& append_this, size_t index)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFront(size_t length)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBack(size_t length)"
  },
  {
    "label": "ReadInterleaved()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadInterleaved(size_t length, int16_t* destination)"
  },
  {
    "label": "ReadInterleavedFromIndex()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadInterleavedFromIndex(size_t start_index, size_t length, int16_t* destination)"
  },
  {
    "label": "ReadInterleavedFromEnd()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadInterleavedFromEnd(size_t length, int16_t* destination)"
  },
  {
    "label": "OverwriteAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverwriteAt(const AudioMultiVector& insert_this, size_t length, size_t position)"
  },
  {
    "label": "CrossFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CrossFade(const AudioMultiVector& append_this, size_t fade_length)"
  },
  {
    "label": "Channels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Channels()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "AssertSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertSize(size_t required_size)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Empty()"
  },
  {
    "label": "CopyChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyChannel(size_t from_channel, size_t to_channel)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const AudioVector&)",
    "insertText": "operator(size_t index)"
  }
]