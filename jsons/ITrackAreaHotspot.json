[
  {
    "label": "FExtender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExtender"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FTrackAreaViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackAreaViewModel"
  },
  {
    "label": "ISequencerEditToolDragOperation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerEditToolDragOperation"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_CASTABLE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Styling / SlateBrush . h \" # include \" Misc / FrameTime . h \" # include \" MVVM / ICastable . h \" class FExtender ; class FMenuBuilder ; struct FGeometry ; struct FPointerEvent ; namespace UE { namespace Sequencer { class FTrackAreaViewModel ; class ISequencerEditToolDragOperation ; struct ITrackAreaHotspot : public ICastable {)",
    "insertText": "UE_SEQUENCER_DECLARE_CASTABLE(ITrackAreaHotspot)"
  },
  {
    "label": "ITrackAreaHotspot()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ITrackAreaHotspot()"
  },
  {
    "label": "UpdateOnHover()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateOnHover(FTrackAreaViewModel& InTrackArea)"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameNumber>)",
    "insertText": "GetTime()"
  },
  {
    "label": "GetOffsetTime()",
    "kind": "Method",
    "detail": "Function (} TOptional<FFrameTime>)",
    "insertText": "GetOffsetTime()"
  },
  {
    "label": "InitiateDrag()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ISequencerEditToolDragOperation>)",
    "insertText": "InitiateDrag(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetCursorDecorator()",
    "kind": "Method",
    "detail": "Function (} const FSlateBrush*)",
    "insertText": "GetCursorDecorator(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Result = HotspotPtr -> CastThis<)",
    "insertText": "T()"
  }
]