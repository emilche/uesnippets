[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FFileRegion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileRegion"
  },
  {
    "label": "FKeyChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyChain"
  },
  {
    "label": "FPakEntryPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakEntryPair"
  },
  {
    "label": "FPakInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakInfo"
  },
  {
    "label": "FPakOrderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPakOrderMap"
  },
  {
    "label": "FPakFooterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPakFooterInfo"
  },
  {
    "label": "FPakOrderMap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathSSE . h \" # include \" Misc / Optional . h \" # include \" Misc / IEngineCrypto . h \" # include \" Templates / Tuple . h \" class FArchive ; struct FFileRegion ; struct FKeyChain ; struct FPakEntryPair ; struct FPakInfo ; class FPakOrderMap { public :)",
    "insertText": "FPakOrderMap() : MaxPrimaryOrderIndex(MAX_uint64) , MaxIndex(0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (MaxPrimaryOrderIndex = MAX_uint64 ; MaxIndex = 0 ; } int32)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const FString& Filename, uint64 Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OrderMap .)",
    "insertText": "Add(Filename, Index)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxIndex =)",
    "insertText": "Max(MaxIndex, Index)"
  },
  {
    "label": "AddOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddOffset(const FString& Filename, uint64 Offset)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OrderMap .)",
    "insertText": "Add(Filename, Offset)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxIndex =)",
    "insertText": "Max(MaxIndex, Offset)"
  },
  {
    "label": "ConvertOffsetsToOrder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ConvertOffsetsToOrder()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TPair<FString,uint64>> FilenameAndOffsets ;)",
    "insertText": "for(auto& FilenameAndOffset : OrderMap)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FilenameAndOffsets .)",
    "insertText": "Add(FilenameAndOffset)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} FilenameAndOffsets .)",
    "insertText": "Sort([](const TPair<FString, uint64>& A, const TPair<FString, uint64>& B) { return A.Value < B.Value; })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 Index = 0 ;)",
    "insertText": "for(auto& FilenameAndOffset : FilenameAndOffsets)"
  },
  {
    "label": "ProcessOrderFile()",
    "kind": "Method",
    "detail": "Function (OrderMap [ FilenameAndOffset . Key ] = Index ; + + Index ; } MaxIndex = Index - 1 ; } bool)",
    "insertText": "ProcessOrderFile(const TCHAR* ResponseFile, bool bSecondaryOrderFile = false, bool bMergeOrder = false, TOptional<uint64> InOffset = {})"
  },
  {
    "label": "MergeOrderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeOrderMap(FPakOrderMap&& Other)"
  },
  {
    "label": "GetFileOrder()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetFileOrder(const FString& Path, bool bAllowUexpUBulkFallback, bool* OutIsPrimary=nullptr)"
  },
  {
    "label": "WriteOpenOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteOpenOrder(FArchive* Ar)"
  },
  {
    "label": "GetMaxIndex()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetMaxIndex()"
  },
  {
    "label": "ExecuteUnrealPak()",
    "kind": "Method",
    "detail": "Function (TMap<FString,uint64> OrderMap ; uint64 MaxPrimaryOrderIndex ; uint64 MaxIndex ; } ; bool)",
    "insertText": "ExecuteUnrealPak(const TCHAR* CmdLine)"
  },
  {
    "label": "FPakFooterInfo()",
    "kind": "Method",
    "detail": "Function (struct FPakFooterInfo {)",
    "insertText": "FPakFooterInfo(const TCHAR* InFilename, const FString& InMountPoint, FPakInfo& InInfo, TArray<FPakEntryPair>& InIndex) : Filename(InFilename) , MountPoint(InMountPoint) , Info(InInfo) , Index(InIndex)"
  },
  {
    "label": "SetEncryptionInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEncryptionInfo(const FKeyChain& InKeyChain, uint64* InTotalEncryptedDataSize)"
  },
  {
    "label": "SetFileRegionInfo()",
    "kind": "Method",
    "detail": "Function (KeyChain =& InKeyChain ; TotalEncryptedDataSize = InTotalEncryptedDataSize ; } void)",
    "insertText": "SetFileRegionInfo(bool bInFileRegions, TArray<FFileRegion>& InAllFileRegions)"
  },
  {
    "label": "WritePakFooter()",
    "kind": "Method",
    "detail": "Function (bFileRegions = bInFileRegions ; AllFileRegions =& InAllFileRegions ; } const TCHAR* Filename ; const FString& MountPoint ; FPakInfo& Info ; TArray<FPakEntryPair>& Index ; const FKeyChain* KeyChain = nullptr ; uint64* TotalEncryptedDataSize = nullptr ; bool bFileRegions = false ; TArray<FFileRegion>* AllFileRegions = nullptr ; int64 PrimaryIndexSize = 0 ; int64 PathHashIndexSize = 0 ; int64 FullDirectoryIndexSize = 0 ; } ; void)",
    "insertText": "WritePakFooter(FArchive& PakHandle, FPakFooterInfo& FooterInfo)"
  },
  {
    "label": "SignPakFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SignPakFile(const FString& InPakFilename, const FRSAKeyHandle InSigningKey)"
  }
]