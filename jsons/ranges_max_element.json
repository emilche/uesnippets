[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_MAX_ELEMENT_H # define _LIBCPP___ALGORITHM_RANGES_MAX_ELEMENT_H # include<__algorithm / ranges_min_element . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __max_element { struct __fn { template<forward_iterator _Ip,sentinel_for<_Ip> _Sp,class _Proj = identity,indirect_strict_weak_order<projected<_Ip,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI _Ip)",
    "insertText": "operator()(_Ip __first, _Sp __last, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "__comp_lhs_rhs_swapped()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__comp_lhs_rhs_swapped(auto&& __lhs, auto&& __rhs)"
  },
  {
    "label": "__min_element_impl()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "__min_element_impl(__first, __last, __comp_lhs_rhs_swapped, __proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<forward_range _Rp,class _Proj = identity,indirect_strict_weak_order<projected<iterator_t<_Rp>,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Rp>)",
    "insertText": "operator()(_Rp&& __r, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "__min_element_impl()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "__min_element_impl(ranges::begin(__r), ranges::end(__r), __comp_lhs_rhs_swapped, __proj)"
  }
]