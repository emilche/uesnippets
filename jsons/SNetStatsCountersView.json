[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "ITableCellValueSorter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableCellValueSorter"
  },
  {
    "label": "SNetworkingProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNetworkingProfilerWindow"
  },
  {
    "label": "SNetStatsCountersView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNetStatsCountersView"
  },
  {
    "label": "SNetStatsCountersView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / FilterCollection . h \" # include \" Misc / TextFilter . h \" # include \" SlateFwd . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" # include \" TraceServices / Model / NetProfiler . h \" # include \" Insights / NetworkingProfiler / ViewModels / NetStatsCounterGroupingAndSorting . h \" # include \" Insights / NetworkingProfiler / ViewModels / NetStatsCounterNode . h \" class FMenuBuilder ; namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights { class FTable ; class FTableColumn ; class ITableCellValueSorter ; } namespace UE::Insights::NetworkingProfiler { class SNetworkingProfilerWindow ; typedef TFilterCollection<const FNetStatsCounterNodePtr&> FNetStatsCounterNodeFilterCollection ; typedef TTextFilter<const FNetStatsCounterNodePtr&> FNetStatsCounterNodeTextFilter ; class SNetStatsCountersView : public SCompoundWidget { public :)",
    "insertText": "SNetStatsCountersView()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SNetStatsCountersView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<SNetworkingProfilerWindow> InProfilerWindow)"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTable>)",
    "insertText": "GetTable()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "RebuildTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildTree(bool bResync)"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStats()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStats(uint32 InGameInstanceIndex, uint32 InConnectionIndex, TraceServices::ENetProfilerConnectionMode InConnectionMode, uint32 InStatsPacketStartIndex, uint32 InStatsPacketEndIndex)"
  },
  {
    "label": "GetNetStatsCounterNode()",
    "kind": "Method",
    "detail": "Function (FNetStatsCounterNodePtr)",
    "insertText": "GetNetStatsCounterNode(uint32 TypeIndex)"
  },
  {
    "label": "SelectNetStatsCounterNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNetStatsCounterNode(uint32 TypeIndex)"
  },
  {
    "label": "UpdateTree()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdateTree()"
  },
  {
    "label": "UpdateStatsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsInternal()"
  },
  {
    "label": "InsightsManager_OnSessionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsightsManager_OnSessionChanged()"
  },
  {
    "label": "HandleItemToStringArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleItemToStringArray(const FNetStatsCounterNodePtr& GroupOrStatNodePtr, TArray<FString>& OutSearchStrings)"
  },
  {
    "label": "TreeView_GetMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "TreeView_GetMenuContent()"
  },
  {
    "label": "TreeView_BuildSortByMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildSortByMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "TreeView_BuildViewColumnMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_BuildViewColumnMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "InitializeAndShowHeaderColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeAndShowHeaderColumns()"
  },
  {
    "label": "GetColumnHeaderText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetColumnHeaderText(const FName ColumnId)"
  },
  {
    "label": "TreeViewHeaderRow_GenerateColumnMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "TreeViewHeaderRow_GenerateColumnMenu(const FTableColumn& Column)"
  },
  {
    "label": "TreeView_Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_Refresh()"
  },
  {
    "label": "TreeView_OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnGetChildren(FNetStatsCounterNodePtr InParent, TArray<FNetStatsCounterNodePtr>& OutChildren)"
  },
  {
    "label": "TreeView_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnSelectionChanged(FNetStatsCounterNodePtr SelectedItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "TreeView_OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TreeView_OnMouseButtonDoubleClick(FNetStatsCounterNodePtr TreeNode)"
  },
  {
    "label": "TreeView_OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "TreeView_OnGenerateRow(FNetStatsCounterNodePtr TreeNode, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "TableRow_ShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TableRow_ShouldBeEnabled(FNetStatsCounterNodePtr NodePtr)"
  },
  {
    "label": "TableRow_SetHoveredCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TableRow_SetHoveredCell(TSharedPtr<FTable> TablePtr, TSharedPtr<FTableColumn> ColumnPtr, FNetStatsCounterNodePtr NodePtr)"
  },
  {
    "label": "TableRow_GetColumnOutlineHAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "TableRow_GetColumnOutlineHAlignment(const FName ColumnId)"
  },
  {
    "label": "TableRow_GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TableRow_GetHighlightText()"
  },
  {
    "label": "TableRow_GetHighlightedNodeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "TableRow_GetHighlightedNodeName()"
  },
  {
    "label": "ApplyFiltering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFiltering()"
  },
  {
    "label": "FilterOutZeroCountStatsCounters_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterOutZeroCountStatsCounters_OnCheckStateChanged(ECheckBoxState NewRadioState)"
  },
  {
    "label": "FilterOutZeroCountStatsCounters_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterOutZeroCountStatsCounters_IsChecked()"
  },
  {
    "label": "GetToggleButtonForNetStatsCounterType()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetToggleButtonForNetStatsCounterType(const ENetStatsCounterNodeType InNetStatsCounterType)"
  },
  {
    "label": "FilterByNetStatsCounterType_OnCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterByNetStatsCounterType_OnCheckStateChanged(ECheckBoxState NewRadioState, const ENetStatsCounterNodeType InNetStatsCounterType)"
  },
  {
    "label": "FilterByNetStatsCounterType_IsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "FilterByNetStatsCounterType_IsChecked(const ENetStatsCounterNodeType InNetStatsCounterType)"
  },
  {
    "label": "SearchBox_IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchBox_IsEnabled()"
  },
  {
    "label": "SearchBox_OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SearchBox_OnTextChanged(const FText& InFilterText)"
  },
  {
    "label": "CreateGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroups()"
  },
  {
    "label": "CreateGroupByOptionsSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateGroupByOptionsSources()"
  },
  {
    "label": "GroupBy_OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupBy_OnSelectionChanged(TSharedPtr<ENetStatsCounterGroupingMode> NewGroupingMode, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GroupBy_OnGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GroupBy_OnGenerateWidget(TSharedPtr<ENetStatsCounterGroupingMode> InGroupingMode)"
  },
  {
    "label": "GroupBy_GetSelectedText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedText()"
  },
  {
    "label": "GroupBy_GetSelectedTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GroupBy_GetSelectedTooltipText()"
  },
  {
    "label": "GetDefaultColumnBeingSorted()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "GetDefaultColumnBeingSorted()"
  },
  {
    "label": "GetDefaultColumnSortMode()",
    "kind": "Method",
    "detail": "Function (const EColumnSortMode::Type)",
    "insertText": "GetDefaultColumnSortMode()"
  },
  {
    "label": "CreateSortings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSortings()"
  },
  {
    "label": "UpdateCurrentSortingByColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCurrentSortingByColumn()"
  },
  {
    "label": "SortTreeNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodes()"
  },
  {
    "label": "SortTreeNodesRec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortTreeNodesRec(FNetStatsCounterNode& Node, const ITableCellValueSorter& Sorter)"
  },
  {
    "label": "GetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetSortModeForColumn(const FName ColumnId)"
  },
  {
    "label": "SetSortModeForColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortModeForColumn(const FName& ColumnId, EColumnSortMode::Type SortMode)"
  },
  {
    "label": "OnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type SortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_IsChecked(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HeaderMenu_SortMode_CanExecute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "HeaderMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeaderMenu_SortMode_Execute(const FName ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_IsChecked(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortMode_CanExecute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortMode_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortMode_Execute(const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "ContextMenu_SortByColumn_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_IsChecked(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_SortByColumn_CanExecute(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_SortByColumn_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_SortByColumn_Execute(const FName ColumnId)"
  },
  {
    "label": "CanShowColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanShowColumn(const FName ColumnId)"
  },
  {
    "label": "ShowColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowColumn(const FName ColumnId)"
  },
  {
    "label": "CanHideColumn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHideColumn(const FName ColumnId)"
  },
  {
    "label": "HideColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideColumn(const FName ColumnId)"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsColumnVisible(const FName ColumnId)"
  },
  {
    "label": "CanToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ToggleColumnVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleColumnVisibility(const FName ColumnId)"
  },
  {
    "label": "ContextMenu_ShowAllColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowAllColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowAllColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowAllColumns_Execute()"
  },
  {
    "label": "ContextMenu_ShowMinMaxMedColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowMinMaxMedColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowMinMaxMedColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowMinMaxMedColumns_Execute()"
  },
  {
    "label": "ContextMenu_ResetColumns_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ResetColumns_CanExecute()"
  },
  {
    "label": "ContextMenu_ResetColumns_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ResetColumns_Execute()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SNetworkingProfilerWindow> ProfilerWindow ; TSharedPtr<FTable> Table ; TSharedPtr<const TraceServices::IAnalysisSession> Session ; TSharedPtr<STreeView<FNetStatsCounterNodePtr>> TreeView ; TSharedPtr<SHeaderRow> TreeViewHeaderRow ; TSharedPtr<SScrollBar> ExternalScrollbar ; FName HoveredColumnId ; FNetStatsCounterNodePtr HoveredNodePtr ; FName HighlightedNodeName ; TArray<FNetStatsCounterNodePtr> GroupNodes ; TArray<FNetStatsCounterNodePtr> FilteredGroupNodes ; TArray<FNetStatsCounterNodePtr> NetStatsCounterNodes ; TSet<FNetStatsCounterNodePtr> ExpandedNodes ; bool bExpansionSaved ; TSharedPtr<SSearchBox> SearchBox ; TSharedPtr<FNetStatsCounterNodeTextFilter> TextFilter ; TSharedPtr<FNetStatsCounterNodeFilterCollection> Filters ; bool bStatsCounterTypeIsVisible [ static_cast<)",
    "insertText": "int(ENetStatsCounterNodeType::InvalidOrMax)"
  }
]