[
  {
    "label": "FArrayIndexSetsDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayIndexSetsDecomposition"
  },
  {
    "label": "FIndexSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIndexSet"
  },
  {
    "label": "GetIndexSetIDs()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / IndirectArray . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { class FArrayIndexSetsDecomposition { protected : struct FIndexSet { int32 Identifier ; TArray<int32> IndexArray ; } ; TIndirectArray<FIndexSet> Sets ; TMap<int32,FIndexSet*> SetIdentifierMap ; int32 IDCounter = 1 ; TArray<int32> AllSetIDs ; public : const TArray<int32>&)",
    "insertText": "GetIndexSetIDs()"
  },
  {
    "label": "FIndexSet()",
    "kind": "Method",
    "detail": "Function (FIndexSet* Set = new)",
    "insertText": "FIndexSet()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Set -> Identifier = IDCounter + + ; Sets .)",
    "insertText": "Add(Set)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SetIdentifierMap .)",
    "insertText": "Add(Set->Identifier, Set)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllSetIDs .)",
    "insertText": "Add(Set->Identifier)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FIndexSet** Found = SetIdentifierMap .)",
    "insertText": "Find(SetID)"
  },
  {
    "label": "GetIndexSetArray()",
    "kind": "Method",
    "detail": "Function (} const TArray<int32>&)",
    "insertText": "GetIndexSetArray(int32 SetID)"
  }
]