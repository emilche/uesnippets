[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingScene"
  },
  {
    "label": "FRayTracingShaderBindingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingShaderBindingTable"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FViewFamilyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewFamilyInfo"
  },
  {
    "label": "FGlobalDynamicReadBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicReadBuffer"
  },
  {
    "label": "FSceneOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOptions"
  },
  {
    "label": "FGatherInstancesTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatherInstancesTaskData"
  },
  {
    "label": "FSceneOptions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RendererInterface . h \" # include \" RenderGraphDefinitions . h \" # include \" RayTracingDefinitions . h \" # include \" RHIDefinitions . h \" # include \" ShaderCore . h \" enum class EDiffuseIndirectMethod ; enum class EReflectionsMethod ; class FRayTracingScene ; class FRayTracingShaderBindingTable ; class FScene ; class FViewInfo ; class FViewFamilyInfo ; class FGlobalDynamicReadBuffer ; namespace RayTracing { struct FSceneOptions { bool bTranslucentGeometry = true ;)",
    "insertText": "FSceneOptions(const FScene& Scene, const FViewFamilyInfo& ViewFamily, const FViewInfo& View, EDiffuseIndirectMethod DiffuseIndirectMethod, EReflectionsMethod ReflectionsMethod)"
  },
  {
    "label": "OnRenderBegin()",
    "kind": "Method",
    "detail": "Function (} ; } ; # if RHI_RAYTRACING namespace RayTracing { struct FGatherInstancesTaskData ; void)",
    "insertText": "OnRenderBegin(FScene& Scene, TArray<FViewInfo>& Views, const FViewFamilyInfo& ViewFamily)"
  },
  {
    "label": "GetShaderBindingLayout()",
    "kind": "Method",
    "detail": "Function (const FShaderBindingLayout*)",
    "insertText": "GetShaderBindingLayout(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "BindStaticUniformBufferBindings()",
    "kind": "Method",
    "detail": "Function (TOptional<FScopedUniformBufferStaticBindings>)",
    "insertText": "BindStaticUniformBufferBindings(const FViewInfo& View, FRHIUniformBuffer* SceneUniformBuffer, FRHICommandList& RHICmdList)"
  },
  {
    "label": "CreateGatherInstancesTaskData()",
    "kind": "Method",
    "detail": "Function (FGatherInstancesTaskData*)",
    "insertText": "CreateGatherInstancesTaskData(FSceneRenderingBulkObjectAllocator& InAllocator, FScene& Scene, FViewInfo& View, const FViewFamilyInfo& ViewFamily, EDiffuseIndirectMethod DiffuseIndirectMethod, EReflectionsMethod ReflectionsMethod)"
  },
  {
    "label": "BeginGatherInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginGatherInstances(FGatherInstancesTaskData& TaskData, UE::Tasks::FTask FrustumCullTask)"
  },
  {
    "label": "FinishGatherInstances()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishGatherInstances(FRDGBuilder& GraphBuilder, FGatherInstancesTaskData& TaskData, FRayTracingScene& RayTracingScene, FRayTracingShaderBindingTable& RayTracingSBT, FGlobalDynamicReadBuffer& InDynamicReadBuffer, FSceneRenderingBulkObjectAllocator& InBulkAllocator)"
  },
  {
    "label": "ShouldExcludeDecals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExcludeDecals()"
  }
]