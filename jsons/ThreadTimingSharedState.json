[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "FCpuTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCpuTimingTrack"
  },
  {
    "label": "FGpuTimingTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGpuTimingTrack"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FThreadTimingSharedState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadTimingSharedState"
  },
  {
    "label": "FThreadGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadGroup"
  },
  {
    "label": "GetOrder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" Misc / Crc . h \" # include \" Templates / SharedPointer . h \" # include \" Insights / ITimingViewExtender . h \" namespace TraceServices { class IAnalysisSession ; } namespace UE::Insights::TimingProfiler { class FCpuTimingTrack ; class FGpuTimingTrack ; class STimingView ; class FThreadTimingSharedState : public Timing::ITimingViewExtender,public TSharedFromThis<FThreadTimingSharedState> { private : struct FThreadGroup { const TCHAR* Name ; bool bIsVisible ; uint32 NumTimelines ; int32 Order ; / int32)",
    "insertText": "GetOrder()"
  },
  {
    "label": "FThreadTimingSharedState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FThreadTimingSharedState()"
  },
  {
    "label": "GetGpuTrack()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGpuTimingTrack>)",
    "insertText": "GetGpuTrack()"
  },
  {
    "label": "GetAllCpuTracks()",
    "kind": "Method",
    "detail": "Function (const TMap<uint32,TSharedPtr<FCpuTimingTrack>>)",
    "insertText": "GetAllCpuTracks()"
  },
  {
    "label": "IsCpuTrackVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCpuTrackVisible(uint32 InThreadId)"
  },
  {
    "label": "GetVisibleCpuThreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVisibleCpuThreads(TSet<uint32>& OutSet)"
  },
  {
    "label": "GetVisibleTimelineIndexes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVisibleTimelineIndexes(TSet<uint32>& OutSet)"
  },
  {
    "label": "OnBeginSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "OnEndSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndSession(Timing::ITimingViewSession& InSession)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(Timing::ITimingViewSession& InSession, const TraceServices::IAnalysisSession& InAnalysisSession)"
  },
  {
    "label": "ExtendGpuTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendGpuTracksFilterMenu(Timing::ITimingViewSession& InSession, FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "ExtendCpuTracksFilterMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendCpuTracksFilterMenu(Timing::ITimingViewSession& InSession, FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "IsAllGpuTracksToggleOn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllGpuTracksToggleOn()"
  },
  {
    "label": "ShowAllGpuTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllGpuTracks()"
  },
  {
    "label": "SetAllGpuTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllGpuTracksToggle(true)"
  },
  {
    "label": "HideAllGpuTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideAllGpuTracks()"
  },
  {
    "label": "SetAllGpuTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllGpuTracksToggle(false)"
  },
  {
    "label": "ShowHideAllGpuTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowHideAllGpuTracks()"
  },
  {
    "label": "SetAllGpuTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllGpuTracksToggle(!IsAllGpuTracksToggleOn())"
  },
  {
    "label": "IsAllCpuTracksToggleOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAllCpuTracksToggleOn()"
  },
  {
    "label": "ShowAllCpuTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowAllCpuTracks()"
  },
  {
    "label": "SetAllCpuTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllCpuTracksToggle(true)"
  },
  {
    "label": "HideAllCpuTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HideAllCpuTracks()"
  },
  {
    "label": "SetAllCpuTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllCpuTracksToggle(false)"
  },
  {
    "label": "ShowHideAllCpuTracks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowHideAllCpuTracks()"
  },
  {
    "label": "SetAllCpuTracksToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllCpuTracksToggle(!IsAllCpuTracksToggleOn())"
  },
  {
    "label": "FindMaxEventInstance()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<const ITimingEvent>)",
    "insertText": "FindMaxEventInstance(uint32 TimerId, double StartTime, double EndTime)"
  },
  {
    "label": "FindMinEventInstance()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const ITimingEvent>)",
    "insertText": "FindMinEventInstance(uint32 TimerId, double StartTime, double EndTime)"
  },
  {
    "label": "CreateThreadGroupsMenu()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateThreadGroupsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ToggleTrackVisibilityByGroup_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ToggleTrackVisibilityByGroup_IsChecked(const TCHAR* InGroupName)"
  },
  {
    "label": "ToggleTrackVisibilityByGroup_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleTrackVisibilityByGroup_Execute(const TCHAR* InGroupName)"
  }
]