[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FViewportFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportFrame"
  },
  {
    "label": "IGameLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGameLayerManager"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "FMargin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMargin"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "UConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConsole"
  },
  {
    "label": "FDebugDisplayProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugDisplayProperty"
  },
  {
    "label": "FSplitscreenData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplitscreenData"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "ETravelFailure",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETravelFailure"
  },
  {
    "label": "ENetworkFailure",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENetworkFailure"
  },
  {
    "label": "FPngFileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPngFileData"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / IDelegateInstance . h \" # include \" UObject / ObjectMacros . h \" # include \" InputCoreTypes . h \" # include \" Engine / EngineBaseTypes . h \" # include \" UObject / ScriptMacros . h \" # include \" Input / PopupMethodReply . h \" # include \" ShowFlags . h \" # include \" Engine / ScriptViewportClient . h \" # include \" Engine / ViewportSplitScreen . h \" # include \" Engine / TitleSafeZone . h \" # include \" Engine / GameViewportDelegates . h \" # include \" Engine / DebugDisplayProperty . h \" # include \" UObject / SoftObjectPath . h \" # include \" StereoRendering . h \" # include \" AudioDeviceHandle . h \" # include \" GameViewportClient . generated . h \" class FCanvas ; class FSceneView ; class FSceneViewport ; class FViewportFrame ; class IGameLayerManager ; class SOverlay ; class SViewport ; class SWidget ; class SWindow ; class UCanvas ; class UGameInstance ; class ULocalPlayer ; class UNetDriver ; struct FMargin ; enum class EViewStatusForScreenPercentage ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FCustomNavigationHandler, const uint32, TSharedPtr<SWidget>)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOverrideInputKeyHandler, FInputKeyEventArgs&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_FourParams(bool, FOverrideInputAxisHandler, FInputKeyEventArgs& , float& , float& , int32&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_SevenParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_SevenParams(FOnInputAxisSignature, FViewport* , int32 , FKey , float , float , int32 , bool)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnInputKeySignature, const FInputKeyEventArgs&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(Within=Engine, transient, config=Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: ENGINE_API UGameViewportClient(FVTableHelper& Helper)"
  },
  {
    "label": "UGameViewportClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UGameViewportClient()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "CreateGameViewport()",
    "kind": "Method",
    "detail": "Function (FSceneViewport*)",
    "insertText": "CreateGameViewport(TSharedPtr<SViewport> InViewportWidget)"
  },
  {
    "label": "GetGameViewport()",
    "kind": "Method",
    "detail": "Function (FSceneViewport*)",
    "insertText": "GetGameViewport()"
  },
  {
    "label": "GetGameViewportWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SViewport>)",
    "insertText": "GetGameViewportWidget()"
  },
  {
    "label": "GetGameInstance()",
    "kind": "Method",
    "detail": "Function (UGameInstance*)",
    "insertText": "GetGameInstance()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(struct FWorldContext& WorldContext, UGameInstance* OwningGameInstance, bool bCreateNewAudioDevice = true)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "RedrawRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedrawRequested(FViewport* InViewport)"
  },
  {
    "label": "InputKey()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InputKey(const FInputKeyEventArgs& EventArgs)"
  },
  {
    "label": "InputAxis()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputAxis(FViewport* Viewport, FInputDeviceId InputDevice, FKey Key, float Delta, float DeltaTime, int32 NumSamples = 1, bool bGamepad = false)"
  },
  {
    "label": "InputChar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputChar(FViewport* Viewport,int32 ControllerId, TCHAR Character)"
  },
  {
    "label": "InputTouch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputTouch(FViewport* Viewport, int32 ControllerId, uint32 Handle, ETouchType::Type Type, const FVector2D& TouchLocation, float Force, FDateTime DeviceTimestamp, uint32 TouchpadIndex)"
  },
  {
    "label": "InputMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InputMotion(FViewport* Viewport, int32 ControllerId, const FVector& Tilt, const FVector& RotationRate, const FVector& Gravity, const FVector& Acceleration)"
  },
  {
    "label": "GetCursor()",
    "kind": "Method",
    "detail": "Function (EMouseCursor::Type)",
    "insertText": "GetCursor(FViewport* Viewport, int32 X, int32 Y)"
  },
  {
    "label": "MapCursor()",
    "kind": "Method",
    "detail": "Function (TOptional<TSharedRef<SWidget>>)",
    "insertText": "MapCursor(FViewport* Viewport, const FCursorReply& CursorReply)"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Precache()"
  },
  {
    "label": "Draw()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Draw(FViewport* Viewport,FCanvas* SceneCanvas)"
  },
  {
    "label": "ProcessScreenShots()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessScreenShots(FViewport* Viewport)"
  },
  {
    "label": "QueryShowFocus()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "QueryShowFocus(const EFocusCause InFocusCause)"
  },
  {
    "label": "LostFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LostFocus(FViewport* Viewport)"
  },
  {
    "label": "ReceivedFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedFocus(FViewport* Viewport)"
  },
  {
    "label": "IsFocused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFocused(FViewport* Viewport)"
  },
  {
    "label": "Activated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Activated(FViewport* InViewport, const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "Deactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivated(FViewport* InViewport, const FWindowActivateEvent& InActivateEvent)"
  },
  {
    "label": "IsInPermanentCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInPermanentCapture()"
  },
  {
    "label": "WindowCloseRequested()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WindowCloseRequested()"
  },
  {
    "label": "CloseRequested()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseRequested(FViewport* Viewport)"
  },
  {
    "label": "RequiresHitProxyStorage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresHitProxyStorage()"
  },
  {
    "label": "MouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseEnter(FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "MouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MouseLeave(FViewport* Viewport)"
  },
  {
    "label": "SetIsSimulateInEditorViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsSimulateInEditorViewport(bool bInIsSimulateInEditorViewport)"
  },
  {
    "label": "FinalizeViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeViews(class FSceneViewFamily* ViewFamily, const TMap<ULocalPlayer*, FSceneView*>& PlayerViewMap)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (} # if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd,FOutputDevice& Ar)"
  },
  {
    "label": "Exec_Runtime()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "Exec_Runtime(UWorld* InWorld, const TCHAR* Cmd,FOutputDevice& Ar)"
  },
  {
    "label": "TryToggleFullscreenOnInputKey()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "TryToggleFullscreenOnInputKey(FKey Key, EInputEvent EventType)"
  },
  {
    "label": "RemapControllerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapControllerInput(FInputKeyEventArgs& InOutKeyEvent)"
  },
  {
    "label": "HandleForceFullscreenCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleForceFullscreenCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleShowCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShowCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleShowLayerCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShowLayerCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleViewModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleViewModeCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleNextViewModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNextViewModeCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandlePrevViewModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePrevViewModeCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandlePreCacheCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePreCacheCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleToggleFullscreenCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleFullscreenCommand()"
  },
  {
    "label": "HandleSetResCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetResCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleHighresScreenshotCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleHighresScreenshotCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleHighresScreenshotUICommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleHighresScreenshotUICommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleScreenshotCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleScreenshotCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleBugScreenshotwithHUDInfoCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugScreenshotwithHUDInfoCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleBugScreenshotCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugScreenshotCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleKillParticlesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKillParticlesCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleForceSkelLODCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleForceSkelLODCommand(const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "HandleDisplayCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisplayAllCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayAllCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisplayAllLocationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayAllLocationCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisplayAllRotationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayAllRotationCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleDisplayClearCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayClearCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleGetAllLocationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGetAllLocationCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleGetAllRotationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGetAllRotationCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleTextureDefragCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTextureDefragCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandleToggleMIPFadeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleMIPFadeCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "HandlePauseRenderClockCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePauseRenderClockCommand(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "AddViewportWidgetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportWidgetContent(TSharedRef<class SWidget> ViewportContent, const int32 ZOrder = 0)"
  },
  {
    "label": "RemoveViewportWidgetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportWidgetContent(TSharedRef<class SWidget> ViewportContent)"
  },
  {
    "label": "AddViewportWidgetForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportWidgetForPlayer(ULocalPlayer* Player, TSharedRef<SWidget> ViewportContent, const int32 ZOrder)"
  },
  {
    "label": "RemoveViewportWidgetForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportWidgetForPlayer(ULocalPlayer* Player, TSharedRef<SWidget> ViewportContent)"
  },
  {
    "label": "RemoveAllViewportWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllViewportWidgets()"
  },
  {
    "label": "AddGameLayerWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameLayerWidget(TSharedRef<SWidget> ViewportContent, const int32 ZOrder)"
  },
  {
    "label": "RemoveGameLayerWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGameLayerWidget(TSharedRef<SWidget> ViewportContent)"
  },
  {
    "label": "RebuildCursors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildCursors()"
  },
  {
    "label": "DetachViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachViewportClient()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "RequiresUncapturedAxisInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresUncapturedAxisInput()"
  },
  {
    "label": "SetViewportFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportFrame(FViewportFrame* InViewportFrame)"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewport(FViewport* InViewportFrame)"
  },
  {
    "label": "SetViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportOverlayWidget(TSharedPtr< SWindow > InWindow, TSharedRef<SOverlay> InViewportOverlayWidget)"
  },
  {
    "label": "SetGameLayerManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameLayerManager(TSharedPtr< IGameLayerManager > LayerManager)"
  },
  {
    "label": "GetGameLayerManager()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IGameLayerManager>)",
    "insertText": "GetGameLayerManager()"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<SWindow>)",
    "insertText": "GetWindow()"
  },
  {
    "label": "SetDropDetail()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDropDetail(float DeltaSeconds)"
  },
  {
    "label": "ConsoleCommand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConsoleCommand(const FString& Command)"
  },
  {
    "label": "GetViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewportSize(FVector2D& ViewportSize)"
  },
  {
    "label": "IsFullScreenViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullScreenViewport()"
  },
  {
    "label": "IsExclusiveFullscreenViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExclusiveFullscreenViewport()"
  },
  {
    "label": "GetMousePosition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMousePosition(FVector2D& MousePosition)"
  },
  {
    "label": "ShouldForceFullscreenViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldForceFullscreenViewport()"
  },
  {
    "label": "SetupInitialLocalPlayer()",
    "kind": "Method",
    "detail": "Function (ULocalPlayer*)",
    "insertText": "SetupInitialLocalPlayer(FString& OutError)"
  },
  {
    "label": "LayoutPlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LayoutPlayers()"
  },
  {
    "label": "SetForceDisableSplitscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceDisableSplitscreen(const bool bDisabled)"
  },
  {
    "label": "IsSplitscreenForceDisabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSplitscreenForceDisabled()"
  },
  {
    "label": "ConvertLocalPlayerToGamePlayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConvertLocalPlayerToGamePlayerIndex(ULocalPlayer* LPlayer)"
  },
  {
    "label": "HasTopSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTopSafeZone(int32 LocalPlayerIndex)"
  },
  {
    "label": "HasBottomSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBottomSafeZone(int32 LocalPlayerIndex)"
  },
  {
    "label": "HasLeftSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLeftSafeZone(int32 LocalPlayerIndex)"
  },
  {
    "label": "HasRightSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRightSafeZone(int32 LocalPlayerIndex)"
  },
  {
    "label": "GetPixelSizeOfScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPixelSizeOfScreen(float& Width, float& Height, UCanvas* Canvas, int32 LocalPlayerIndex)"
  },
  {
    "label": "CalculateSafeZoneValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSafeZoneValues(FMargin& SafeZone, UCanvas* Canvas, int32 LocalPlayerIndex, bool bUseMaxPercent)"
  },
  {
    "label": "CalculateDeadZoneForAllSides()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateDeadZoneForAllSides(ULocalPlayer* LPlayer, UCanvas* Canvas, float& fTopSafeZone, float& fBottomSafeZone, float& fLeftSafeZone, float& fRightSafeZone, bool bUseMaxPercent = false)"
  },
  {
    "label": "DrawTitleSafeArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTitleSafeArea(UCanvas* Canvas)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender(UCanvas* Canvas)"
  },
  {
    "label": "DrawTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTransition(UCanvas* Canvas)"
  },
  {
    "label": "DrawTransitionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTransitionMessage(UCanvas* Canvas, const FString& Message)"
  },
  {
    "label": "NotifyPlayerAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlayerAdded(int32 PlayerIndex, class ULocalPlayer* AddedPlayer)"
  },
  {
    "label": "NotifyPlayerRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlayerRemoved(int32 PlayerIndex, class ULocalPlayer* RemovedPlayer)"
  },
  {
    "label": "PeekTravelFailureMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeekTravelFailureMessages(UWorld* InWorld, enum ETravelFailure::Type FailureType, const FString& ErrorString)"
  },
  {
    "label": "PeekNetworkFailureMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeekNetworkFailureMessages(UWorld *InWorld, UNetDriver *NetDriver, enum ENetworkFailure::Type FailureType, const FString& ErrorString)"
  },
  {
    "label": "VerifyPathRenderingComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyPathRenderingComponents()"
  },
  {
    "label": "OnScreenshotCaptured()",
    "kind": "Method",
    "detail": "Function (FOnScreenshotCaptured&)",
    "insertText": "OnScreenshotCaptured()"
  },
  {
    "label": "IsSimulateInEditorViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulateInEditorViewport()"
  },
  {
    "label": "ShouldDPIScaleSceneCanvas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDPIScaleSceneCanvas()"
  },
  {
    "label": "SetCurrentBufferVisualizationMode()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetCurrentBufferVisualizationMode(FName NewBufferVisualizationMode)"
  },
  {
    "label": "GetCurrentBufferVisualizationMode()",
    "kind": "Method",
    "detail": "Function (CurrentBufferVisualizationMode = NewBufferVisualizationMode ; } FName)",
    "insertText": "GetCurrentBufferVisualizationMode()"
  },
  {
    "label": "GetCurrentNaniteVisualizationMode()",
    "kind": "Method",
    "detail": "Function (CurrentNaniteVisualizationMode = NewNaniteVisualizationMode ; } FName)",
    "insertText": "GetCurrentNaniteVisualizationMode()"
  },
  {
    "label": "GetCurrentLumenVisualizationMode()",
    "kind": "Method",
    "detail": "Function (CurrentLumenVisualizationMode = NewLumenVisualizationMode ; } FName)",
    "insertText": "GetCurrentLumenVisualizationMode()"
  },
  {
    "label": "GetCurrentSubstrateVisualizationMode()",
    "kind": "Method",
    "detail": "Function (CurrentSubstrateVisualizationMode = NewSubstrateVisualizationMode ; } FName)",
    "insertText": "GetCurrentSubstrateVisualizationMode()"
  },
  {
    "label": "GetCurrentGroomVisualizationMode()",
    "kind": "Method",
    "detail": "Function (CurrentGroomVisualizationMode = NewGroomVisualizationMode ; } FName)",
    "insertText": "GetCurrentGroomVisualizationMode()"
  },
  {
    "label": "GetCurrentVirtualShadowMapVisualizationMode()",
    "kind": "Method",
    "detail": "Function (CurrentVirtualShadowMapVisualizationMode = NewVirtualShadowMapVisualizationMode ; } FName)",
    "insertText": "GetCurrentVirtualShadowMapVisualizationMode()"
  },
  {
    "label": "UpdateViewportClientWindowDPIScale()",
    "kind": "Method",
    "detail": "Function (protected : float)",
    "insertText": "UpdateViewportClientWindowDPIScale()"
  },
  {
    "label": "SetSuppressTransitionMessage()",
    "kind": "Method",
    "detail": "Function (public : FEngineShowFlags EngineShowFlags ; FViewport* Viewport ; FViewportFrame* ViewportFrame ; void)",
    "insertText": "SetSuppressTransitionMessage(bool bSuppress)"
  },
  {
    "label": "GetStatUnitData()",
    "kind": "Method",
    "detail": "Function (bSuppressTransitionMessage = bSuppress ; } FStatUnitData*)",
    "insertText": "GetStatUnitData()"
  },
  {
    "label": "IsStatEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStatEnabled(const FString& InName)"
  },
  {
    "label": "SetIgnoreInput()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIgnoreInput(bool Ignore)"
  },
  {
    "label": "IgnoreInput()",
    "kind": "Method",
    "detail": "Function (bIgnoreInput = Ignore ; } bool)",
    "insertText": "IgnoreInput()"
  },
  {
    "label": "GetMouseCaptureMode()",
    "kind": "Method",
    "detail": "Function (EMouseCaptureMode)",
    "insertText": "GetMouseCaptureMode()"
  },
  {
    "label": "CaptureMouseOnLaunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CaptureMouseOnLaunch()"
  },
  {
    "label": "LockDuringCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LockDuringCapture()"
  },
  {
    "label": "SetMouseLockMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMouseLockMode(EMouseLockMode InMouseLockMode)"
  },
  {
    "label": "GetMouseLockMode()",
    "kind": "Method",
    "detail": "Function (EMouseLockMode)",
    "insertText": "GetMouseLockMode()"
  },
  {
    "label": "SetHideCursorDuringCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHideCursorDuringCapture(bool InHideCursorDuringCapture)"
  },
  {
    "label": "HideCursorDuringCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HideCursorDuringCapture()"
  },
  {
    "label": "HandleNavigation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNavigation(const uint32 InUserIndex, TSharedPtr<SWidget> InDestination)"
  },
  {
    "label": "SetUseSoftwareCursorWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseSoftwareCursorWidgets(bool bInUseSoftwareCursorWidgets)"
  },
  {
    "label": "GetIsUsingSoftwareCursorWidgets()",
    "kind": "Method",
    "detail": "Function (bUseSoftwareCursorWidgets = bInUseSoftwareCursorWidgets ; } bool)",
    "insertText": "GetIsUsingSoftwareCursorWidgets()"
  },
  {
    "label": "SetSoftwareCursorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftwareCursorWidget(EMouseCursor::Type InCursorType, class UUserWidget* Widget)"
  },
  {
    "label": "SetSoftwareCursorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftwareCursorWidget(EMouseCursor::Type InCursorType, TSharedPtr<SWidget> CursorWidgetPtr)"
  },
  {
    "label": "GetSoftwareCursorWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSoftwareCursorWidget(EMouseCursor::Type Cursor)"
  },
  {
    "label": "HasSoftwareCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSoftwareCursor(EMouseCursor::Type Cursor)"
  },
  {
    "label": "EnableCsvPlayerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCsvPlayerStats(int32 LocalPlayerCount)"
  },
  {
    "label": "GetViewStatusForScreenPercentage()",
    "kind": "Method",
    "detail": "Function (EViewStatusForScreenPercentage)",
    "insertText": "GetViewStatusForScreenPercentage()"
  },
  {
    "label": "ResetHardwareCursorStates()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetHardwareCursorStates()"
  },
  {
    "label": "SetSoftwareCursorFromClassPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftwareCursorFromClassPath(EMouseCursor::Type Cursor, const FSoftClassPath& CursorClass)"
  },
  {
    "label": "SetStatEnabled()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetStatEnabled(const TCHAR* InName, const bool bEnable, const bool bAll = false)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (EnabledStats .)",
    "insertText": "AddUnique(InName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(bAll)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (EnabledStats .)",
    "insertText": "Empty()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} else { EnabledStats .)",
    "insertText": "Remove(InName)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } return EnabledStats .)",
    "insertText": "Num()"
  },
  {
    "label": "ToggleShowVolumes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ToggleShowVolumes()"
  },
  {
    "label": "ToggleShowCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowCollision()"
  },
  {
    "label": "HandleViewportStatCheckEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatCheckEnabled(const TCHAR* InName, bool& bOutCurrentEnabled, bool& bOutOthersEnabled)"
  },
  {
    "label": "HandleViewportStatEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatEnabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisableAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisableAll(const bool bInAnyViewport)"
  },
  {
    "label": "HandleWindowDPIScaleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWindowDPIScaleChanged(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "FPngFileData()",
    "kind": "Method",
    "detail": "Function (struct FPngFileData { FString FileName ; double ScaleFactor ; TArray<uint8> FileData ;)",
    "insertText": "FPngFileData() : ScaleFactor(1.0)"
  },
  {
    "label": "LoadCursorFromPngs()",
    "kind": "Method",
    "detail": "Function (} } ; void*)",
    "insertText": "LoadCursorFromPngs(ICursor& PlatformCursor, const FString& InPathToCursorWithoutExtension, FVector2D InHotSpot)"
  },
  {
    "label": "LoadAvailableCursorPngs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAvailableCursorPngs(TArray<TSharedPtr<FPngFileData>>& Results, const FString& InPathToCursorWithoutExtension)"
  },
  {
    "label": "AddDebugDisplayProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDebugDisplayProperty(class UObject* Obj, TSubclassOf<class UObject> WithinClass, const FName& PropertyName, bool bSpecialProperty = false)"
  },
  {
    "label": "RequestBugScreenShot()",
    "kind": "Method",
    "detail": "Function (protected : uint32 AudioDeviceHandle = INDEX_NONE ; bool bHasAudioFocus = false ; private : TWeakPtr<SWindow> Window ; TWeakPtr<SOverlay> ViewportOverlayWidget ; TWeakPtr<IGameLayerManager> GameLayerManagerPtr ; FName CurrentBufferVisualizationMode ; FName CurrentNaniteVisualizationMode ; FName CurrentLumenVisualizationMode ; FName CurrentSubstrateVisualizationMode ; FName CurrentGroomVisualizationMode ; FName CurrentVirtualShadowMapVisualizationMode ; TWeakPtr<SWindow> HighResScreenshotDialog ; TMap<FName,void*> HardwareCursorCache ; TMap<EMouseCursor::Type,void*> HardwareCursors ; TMap<EMouseCursor::Type,TSharedPtr<SWidget>> CursorWidgets ; bool bUseSoftwareCursorWidgets ; bool)",
    "insertText": "RequestBugScreenShot(const TCHAR* Cmd, bool bDisplayHUDInfo)"
  }
]