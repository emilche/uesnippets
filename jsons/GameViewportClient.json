[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FViewportFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportFrame"
  },
  {
    "label": "IGameLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGameLayerManager"
  },
  {
    "label": "SOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SOverlay"
  },
  {
    "label": "SViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewport"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UGameInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameInstance"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "UNetDriver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetDriver"
  },
  {
    "label": "FMargin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMargin"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UGameViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameViewportClient"
  },
  {
    "label": "UConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UConsole"
  },
  {
    "label": "FDebugDisplayProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDebugDisplayProperty"
  },
  {
    "label": "FSplitscreenData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSplitscreenData"
  },
  {
    "label": "EViewModeIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EViewModeIndex"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "ULocalPlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalPlayer"
  },
  {
    "label": "ETravelFailure",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETravelFailure"
  },
  {
    "label": "ENetworkFailure",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENetworkFailure"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "path",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "path"
  },
  {
    "label": "FPngFileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPngFileData"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UGameViewportClient()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "UGameViewportClient(FVTableHelper& Helper)"
  },
  {
    "label": "SSSwapControllers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SSSwapControllers()"
  },
  {
    "label": "ShowTitleSafeArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowTitleSafeArea()"
  },
  {
    "label": "SetConsoleTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConsoleTarget(int32 PlayerIndex)"
  },
  {
    "label": "AddCursorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCursorWidget(EMouseCursor::Type Cursor, class UUserWidget* CursorWidget)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(struct FWorldContext& WorldContext, UGameInstance* OwningGameInstance, bool bCreateNewAudioDevice = true)"
  },
  {
    "label": "TryToggleFullscreenOnInputKey()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryToggleFullscreenOnInputKey(FKey Key, EInputEvent EventType)"
  },
  {
    "label": "RemapControllerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemapControllerInput(FInputKeyEventArgs& InOutKeyEvent)"
  },
  {
    "label": "HandleForceFullscreenCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleForceFullscreenCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleShowCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShowCommand( const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleShowLayerCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShowLayerCommand( const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleViewModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleViewModeCommand( const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleNextViewModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleNextViewModeCommand( const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandlePrevViewModeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePrevViewModeCommand( const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandlePreCacheCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePreCacheCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleToggleFullscreenCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleFullscreenCommand()"
  },
  {
    "label": "HandleSetResCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleSetResCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleHighresScreenshotCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleHighresScreenshotCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleHighresScreenshotUICommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleHighresScreenshotUICommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleScreenshotCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleScreenshotCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleBugScreenshotwithHUDInfoCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugScreenshotwithHUDInfoCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleBugScreenshotCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleBugScreenshotCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleKillParticlesCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKillParticlesCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleForceSkelLODCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleForceSkelLODCommand( const TCHAR* Cmd, FOutputDevice& Ar, UWorld* InWorld )"
  },
  {
    "label": "HandleDisplayCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleDisplayAllCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayAllCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleDisplayAllLocationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayAllLocationCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleDisplayAllRotationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayAllRotationCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleDisplayClearCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleDisplayClearCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleGetAllLocationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGetAllLocationCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleGetAllRotationCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleGetAllRotationCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleTextureDefragCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleTextureDefragCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandleToggleMIPFadeCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleToggleMIPFadeCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "HandlePauseRenderClockCommand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePauseRenderClockCommand( const TCHAR* Cmd, FOutputDevice& Ar )"
  },
  {
    "label": "AddViewportWidgetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportWidgetContent( TSharedRef<class SWidget> ViewportContent, const int32 ZOrder = 0 )"
  },
  {
    "label": "RemoveViewportWidgetContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportWidgetContent( TSharedRef<class SWidget> ViewportContent )"
  },
  {
    "label": "AddViewportWidgetForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportWidgetForPlayer(ULocalPlayer* Player, TSharedRef<SWidget> ViewportContent, const int32 ZOrder)"
  },
  {
    "label": "RemoveViewportWidgetForPlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportWidgetForPlayer(ULocalPlayer* Player, TSharedRef<SWidget> ViewportContent)"
  },
  {
    "label": "RemoveAllViewportWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllViewportWidgets()"
  },
  {
    "label": "AddGameLayerWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGameLayerWidget(TSharedRef<SWidget> ViewportContent, const int32 ZOrder)"
  },
  {
    "label": "RemoveGameLayerWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveGameLayerWidget(TSharedRef<SWidget> ViewportContent)"
  },
  {
    "label": "RebuildCursors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildCursors()"
  },
  {
    "label": "DetachViewportClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetachViewportClient()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick( float DeltaTime )"
  },
  {
    "label": "SetViewportFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportFrame( FViewportFrame* InViewportFrame )"
  },
  {
    "label": "SetViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewport( FViewport* InViewportFrame )"
  },
  {
    "label": "SetViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportOverlayWidget(TSharedPtr< SWindow > InWindow, TSharedRef<SOverlay> InViewportOverlayWidget)"
  },
  {
    "label": "SetGameLayerManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGameLayerManager(TSharedPtr< IGameLayerManager > LayerManager)"
  },
  {
    "label": "SetDropDetail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDropDetail(float DeltaSeconds)"
  },
  {
    "label": "ConsoleCommand()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConsoleCommand( const FString& Command )"
  },
  {
    "label": "UpdateActiveSplitscreenType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveSplitscreenType()"
  },
  {
    "label": "LayoutPlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LayoutPlayers()"
  },
  {
    "label": "SetForceDisableSplitscreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceDisableSplitscreen(const bool bDisabled)"
  },
  {
    "label": "GetSubtitleRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubtitleRegion(FVector2D& MinPos, FVector2D& MaxPos)"
  },
  {
    "label": "ConvertLocalPlayerToGamePlayerIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ConvertLocalPlayerToGamePlayerIndex( ULocalPlayer* LPlayer )"
  },
  {
    "label": "HasTopSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTopSafeZone( int32 LocalPlayerIndex )"
  },
  {
    "label": "HasBottomSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBottomSafeZone( int32 LocalPlayerIndex )"
  },
  {
    "label": "HasLeftSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLeftSafeZone( int32 LocalPlayerIndex )"
  },
  {
    "label": "HasRightSafeZone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRightSafeZone( int32 LocalPlayerIndex )"
  },
  {
    "label": "GetPixelSizeOfScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPixelSizeOfScreen( float& Width, float& Height, UCanvas* Canvas, int32 LocalPlayerIndex )"
  },
  {
    "label": "CalculateSafeZoneValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSafeZoneValues( FMargin& SafeZone, UCanvas* Canvas, int32 LocalPlayerIndex, bool bUseMaxPercent )"
  },
  {
    "label": "CalculateDeadZoneForAllSides()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalculateDeadZoneForAllSides( ULocalPlayer* LPlayer, UCanvas* Canvas, float& fTopSafeZone, float& fBottomSafeZone, float& fLeftSafeZone, float& fRightSafeZone, bool bUseMaxPercent = false )"
  },
  {
    "label": "DrawTitleSafeArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTitleSafeArea( UCanvas* Canvas )"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender( UCanvas* Canvas )"
  },
  {
    "label": "DrawTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTransition( UCanvas* Canvas )"
  },
  {
    "label": "DrawTransitionMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTransitionMessage( UCanvas* Canvas, const FString& Message )"
  },
  {
    "label": "NotifyPlayerAdded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlayerAdded( int32 PlayerIndex, class ULocalPlayer* AddedPlayer )"
  },
  {
    "label": "NotifyPlayerRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPlayerRemoved( int32 PlayerIndex, class ULocalPlayer* RemovedPlayer )"
  },
  {
    "label": "PeekTravelFailureMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeekTravelFailureMessages(UWorld* InWorld, enum ETravelFailure::Type FailureType, const FString& ErrorString)"
  },
  {
    "label": "PeekNetworkFailureMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PeekNetworkFailureMessages(UWorld *InWorld, UNetDriver *NetDriver, enum ENetworkFailure::Type FailureType, const FString& ErrorString)"
  },
  {
    "label": "VerifyPathRenderingComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyPathRenderingComponents()"
  },
  {
    "label": "SetHardwareCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetHardwareCursor(EMouseCursor::Type CursorShape, FName GameContentPath, FVector2D HotSpot)"
  },
  {
    "label": "UpdateCsvCameraStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCsvCameraStats(const TMap<ULocalPlayer*, FSceneView*>& PlayerViewMap)"
  },
  {
    "label": "SetMouseCaptureMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouseCaptureMode(EMouseCaptureMode Mode)"
  },
  {
    "label": "SetMouseLockMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouseLockMode(EMouseLockMode InMouseLockMode)"
  },
  {
    "label": "SetHideCursorDuringCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHideCursorDuringCapture(bool InHideCursorDuringCapture)"
  },
  {
    "label": "SetDisplayConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetDisplayConfiguration( const FIntPoint* Dimensions, EWindowMode::Type WindowMode)"
  },
  {
    "label": "SetVirtualCursorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVirtualCursorWidget(EMouseCursor::Type Cursor, class UUserWidget* Widget)"
  },
  {
    "label": "AddSoftwareCursorFromSlateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSoftwareCursorFromSlateWidget(EMouseCursor::Type InCursorType, TSharedPtr<SWidget> CursorWidgetPtr)"
  },
  {
    "label": "AddSoftwareCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSoftwareCursor(EMouseCursor::Type Cursor, const FSoftClassPath& CursorClass)"
  },
  {
    "label": "SetSoftwareCursorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftwareCursorWidget(EMouseCursor::Type InCursorType, class UUserWidget* Widget)"
  },
  {
    "label": "SetSoftwareCursorWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftwareCursorWidget(EMouseCursor::Type InCursorType, TSharedPtr<SWidget> CursorWidgetPtr)"
  },
  {
    "label": "EnableCsvPlayerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableCsvPlayerStats(int32 LocalPlayerCount)"
  },
  {
    "label": "ResetHardwareCursorStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetHardwareCursorStates()"
  },
  {
    "label": "SetSoftwareCursorFromClassPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSoftwareCursorFromClassPath(EMouseCursor::Type Cursor, const FSoftClassPath& CursorClass)"
  },
  {
    "label": "ToggleShowVolumes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowVolumes()"
  },
  {
    "label": "ToggleShowCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowCollision()"
  },
  {
    "label": "HandleViewportStatCheckEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatCheckEnabled(const TCHAR* InName, bool& bOutCurrentEnabled, bool& bOutOthersEnabled)"
  },
  {
    "label": "HandleViewportStatEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatEnabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisabled(const TCHAR* InName)"
  },
  {
    "label": "HandleViewportStatDisableAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleViewportStatDisableAll(const bool bInAnyViewport)"
  },
  {
    "label": "HandleWindowDPIScaleChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWindowDPIScaleChanged(TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "LoadAvailableCursorPngs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadAvailableCursorPngs(TArray<TSharedPtr<FPngFileData>>& Results, const FString& InPathToCursorWithoutExtension)"
  },
  {
    "label": "AddDebugDisplayProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDebugDisplayProperty(class UObject* Obj, TSubclassOf<class UObject> WithinClass, const FName& PropertyName, bool bSpecialProperty = false)"
  },
  {
    "label": "RequestBugScreenShot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestBugScreenShot(const TCHAR* Cmd, bool bDisplayHUDInfo)"
  }
]