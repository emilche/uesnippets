[
  {
    "label": "task_scheduler_observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task_scheduler_observer"
  },
  {
    "label": "observer_proxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "observer_proxy"
  },
  {
    "label": "observer_list",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "observer_list"
  },
  {
    "label": "task_scheduler_observer_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "task_scheduler_observer_v3"
  },
  {
    "label": "interface6",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "interface6"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "observe()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_task_scheduler_observer_H # define __TBB_task_scheduler_observer_H # include \" atomic . h \" # if __TBB_ARENA_OBSERVER # include \" task_arena . h \" # endif # if __TBB_SCHEDULER_OBSERVER namespace tbb { namespace interface6 { class task_scheduler_observer ; } namespace internal { class observer_proxy ; class observer_list ; class task_scheduler_observer_v3 { class observer_proxy ; class observer_list ; class interface6::task_scheduler_observer ; observer_proxy* my_proxy ; atomic<intptr_t> my_busy_count ; public : void __TBB_EXPORTED_METHOD)",
    "insertText": "observe(bool state=true)"
  },
  {
    "label": "is_observing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_observing()"
  },
  {
    "label": "relaxed()",
    "kind": "Method",
    "detail": "Function (my_busy_count . store<)",
    "insertText": "relaxed(0)"
  },
  {
    "label": "on_scheduler_entry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "on_scheduler_entry(bool)"
  },
  {
    "label": "on_scheduler_exit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "on_scheduler_exit(bool)"
  },
  {
    "label": "task_scheduler_observer_v3()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "task_scheduler_observer_v3()"
  },
  {
    "label": "v6_trait()",
    "kind": "Method",
    "detail": "Function (} } ; } # if __TBB_ARENA_OBSERVER namespace interface6 { class task_scheduler_observer : public internal::task_scheduler_observer_v3 { class internal::task_scheduler_observer_v3 ; class internal::observer_proxy ; class internal::observer_list ; const intptr_t)",
    "insertText": "v6_trait(intptr_t)((~(uintptr_t)0 >> 1) + 1)"
  },
  {
    "label": "task_scheduler_observer()",
    "kind": "Method",
    "detail": "Function (intptr_t my_context_tag ; enum { global_tag = 0,implicit_tag = 1 } ; public :)",
    "insertText": "task_scheduler_observer(bool local = false)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (# if __TBB_ARENA_OBSERVER my_context_tag = local ? implicit_tag : global_tag ; # else)",
    "insertText": "__TBB_ASSERT_EX(!local, NULL)"
  },
  {
    "label": "task_scheduler_observer()",
    "kind": "Method",
    "detail": "Function (my_context_tag = global_tag ; # endif } # if __TBB_ARENA_OBSERVER)",
    "insertText": "task_scheduler_observer(task_arena & a)"
  },
  {
    "label": "my_context_tag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "my_context_tag(intptr_t)"
  },
  {
    "label": "task_scheduler_observer()",
    "kind": "Method",
    "detail": "Function (} # endif ~)",
    "insertText": "task_scheduler_observer()"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(!my_busy_count, \"Inconsistent state of task_scheduler_observer instance\")"
  },
  {
    "label": "relaxed()",
    "kind": "Method",
    "detail": "Function (my_busy_count . store<)",
    "insertText": "relaxed(v6_trait)"
  },
  {
    "label": "observe()",
    "kind": "Method",
    "detail": "Function (} internal::)",
    "insertText": "observe(state)"
  }
]