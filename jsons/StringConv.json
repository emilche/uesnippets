[
  {
    "label": "TStringConvert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringConvert"
  },
  {
    "label": "FUnused",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnused"
  },
  {
    "label": "FCountingOutputIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCountingOutputIterator"
  },
  {
    "label": "FTCHARToUTF8_Convert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTCHARToUTF8_Convert"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFromStrCast",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFromStrCast"
  },
  {
    "label": "FUTF8ToTCHAR_Convert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUTF8ToTCHAR_Convert"
  },
  {
    "label": "TUTF32ToUTF16_Convert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUTF32ToUTF16_Convert"
  },
  {
    "label": "TUTF16ToUTF32_Convert",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TUTF16ToUTF32_Convert"
  },
  {
    "label": "TStringConversion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringConversion"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TElementType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TElementType"
  },
  {
    "label": "TStringPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringPointer"
  },
  {
    "label": "TStringPassthru",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TStringPassthru"
  },
  {
    "label": "TPassthruPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPassthruPointer"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" # include \" Misc / CString . h \" # include \" Templates / IsArray . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Traits / ElementType . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" Traits / IsContiguousContainer . h \" # include<type_traits> # define DEFAULT_STRING_CONVERSION_SIZE 1 2 8 u template<From,To> class TStringConvert { public : typedef From FromType ; typedef To ToType ; template<CharType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<CharType, FromType>) > FORCEINLINE static void Convert(To* Dest, int32 DestLen, const CharType* Source, int32 SourceLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (To* Result =)",
    "insertText": "Convert(Dest, DestLen, (const FromType*)Source, SourceLen)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<CharType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<CharType, FromType>) > static int32 ConvertedLength(const CharType* Source, int32 SourceLen)"
  },
  {
    "label": "IsValidCodepoint()",
    "kind": "Method",
    "detail": "Function (} } ; namespace StringConv { bool)",
    "insertText": "IsValidCodepoint(const uint32 Codepoint)"
  },
  {
    "label": "DecodeSurrogate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DecodeSurrogate(const uint32 Codepoint, uint16& OutHighSurrogate, uint16& OutLowSurrogate)"
  },
  {
    "label": "OutHighSurrogate()",
    "kind": "Method",
    "detail": "Function (const uint32 TmpCodepoint = Codepoint - 0 x10000 ;)",
    "insertText": "OutHighSurrogate(uint16)((TmpCodepoint >> 10) + HIGH_SURROGATE_START_CODEPOINT)"
  },
  {
    "label": "OutLowSurrogate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutLowSurrogate(TmpCodepoint & 0x3FF)"
  },
  {
    "label": "IsEncodedSurrogate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEncodedSurrogate(const uint32 Codepoint)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CharType Codepoint = StrBuffer [ Index ] ;)",
    "insertText": "if(StringConv::IsHighSurrogate(Codepoint))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StrBuffer [ Index ] = UNICODE_BOGUS_CHAR_CODEPOINT ; break ; } const uint32 HighCodepoint = Codepoint ; Codepoint = StrBuffer [ Index + 1 ] ;)",
    "insertText": "if(StringConv::IsLowSurrogate(Codepoint))"
  },
  {
    "label": "EncodeSurrogate()",
    "kind": "Method",
    "detail": "Function (const uint32 LowCodepoint = Codepoint ; Codepoint =)",
    "insertText": "EncodeSurrogate(static_cast<uint16>(HighCodepoint), static_cast<uint16>(LowCodepoint))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StrBuffer [ Index ] = Codepoint ; { const int32 ArrayNum = StrLen + 1 ; const int32 IndexToRemove = Index + 1 ; const int32 NumToMove = ArrayNum - IndexToRemove - 1 ;)",
    "insertText": "if(NumToMove > 0)"
  },
  {
    "label": "Memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memmove(StrBuffer + IndexToRemove, StrBuffer + IndexToRemove + 1, NumToMove * sizeof(CharType))"
  },
  {
    "label": "InlineCombineSurrogates_Array()",
    "kind": "Method",
    "detail": "Function (StrBuffer [ Index ] = UNICODE_BOGUS_CHAR_CODEPOINT ; } } return StrLen ; } template<AllocatorType> void)",
    "insertText": "InlineCombineSurrogates_Array(TArray<TCHAR, AllocatorType>& StrBuffer)"
  },
  {
    "label": "InlineCombineSurrogates_Buffer()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_TCHAR_IS_4_BYTES const int32 NewStrLen =)",
    "insertText": "InlineCombineSurrogates_Buffer(StrBuffer.GetData(), StrBuffer.Num() - 1)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (StrBuffer .)",
    "insertText": "SetNum(NewStrLen + 1, EAllowShrinking::No)"
  },
  {
    "label": "GetLegacyFromType()",
    "kind": "Method",
    "detail": "Function (# endif } struct FUnused ; template<ConverterType> ConverterType::LegacyFromType)",
    "insertText": "GetLegacyFromType(typename ConverterType::LegacyFromType*)"
  },
  {
    "label": "GetLegacyFromType()",
    "kind": "Method",
    "detail": "Function (template<ConverterType> FUnused)",
    "insertText": "GetLegacyFromType(...)"
  },
  {
    "label": "FCountingOutputIterator()",
    "kind": "Method",
    "detail": "Function (} namespace UE::Core::Private { struct FCountingOutputIterator {)",
    "insertText": "FCountingOutputIterator() : Counter(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FCountingOutputIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + Counter ; return* this ; } const FCountingOutputIterator&)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + Counter ; return* this ; } const FCountingOutputIterator&)",
    "insertText": "operator(const int32 Amount)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Counter + = Amount ; return* this ; } template<T> T)",
    "insertText": "operator(T Val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Codepoint = UNICODE_BOGUS_CHAR_CODEPOINT ; } else)",
    "insertText": "if(StringConv::IsHighSurrogate(Codepoint) || StringConv::IsLowSurrogate(Codepoint))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Codepoint = UNICODE_BOGUS_CHAR_CODEPOINT ; })",
    "insertText": "if(Codepoint < 0x80)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Codepoint < 0x800)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Codepoint < 0x10000)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(OutputIteratorByteSizeRemaining >= 4)"
  },
  {
    "label": "UE_PTRDIFF_TO_INT32()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "UE_PTRDIFF_TO_INT32(OutputIterator - OutputIteratorStartPosition)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > static FORCEINLINE int32 Convert(IntendedToType* Dest, int32 DestLen, const SrcBufferType* Source, int32 SourceLen)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > static FORCEINLINE int32 Convert(ToType* Dest, int32 DestLen, const SrcBufferType* Source, int32 SourceLen)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > static FORCEINLINE int32 ConvertedLength(const SrcBufferType* Source, int32 SourceLen)"
  },
  {
    "label": "FFromStrCast()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ENullTerminatedString { No = 0,Yes = 1 } ; struct FFromStrCast {)",
    "insertText": "FFromStrCast()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} ; } using FTCHARToUTF8_Convert = UE::Core::Private::FTCHARToUTF8_Convert ; class FUTF8ToTCHAR_Convert { public : typedef ANSICHAR LegacyFromType ; typedef UTF8CHAR FromType ; typedef TCHAR ToType ; template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > static FORCEINLINE void Convert(ToType* Dest, const int32 DestLen, const SrcBufferType* Source, const int32 SourceLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Convert(ToType* Dest, const int32 DestLen, const LegacyFromType* Source, const int32 SourceLen)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > static int32 ConvertedLength(const SrcBufferType* Source, const int32 SourceLen)"
  },
  {
    "label": "ConvertedLength()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ConvertedLength(const LegacyFromType* Source, const int32 SourceLen)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; template<InFromType,InToType> class TUTF32ToUTF16_Convert {)",
    "insertText": "static_assert(sizeof(InFromType) == 4, \"FromType must be 4 bytes!\")"
  },
  {
    "label": "Utf16FromCodepoint()",
    "kind": "Method",
    "detail": "Function (public : typedef InFromType FromType ; typedef InToType ToType ; template<BufferType> int32)",
    "insertText": "Utf16FromCodepoint(uint32 Codepoint, BufferType OutputIterator, uint32 OutputIteratorNumRemaining)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Codepoint = UNICODE_BOGUS_CHAR_CODEPOINT ; })",
    "insertText": "if(StringConv::IsEncodedSurrogate(Codepoint))"
  },
  {
    "label": "DecodeSurrogate()",
    "kind": "Method",
    "detail": "Function (uint16 HighSurrogate = 0 ; uint16 LowSurrogate = 0 ;)",
    "insertText": "DecodeSurrogate(Codepoint, HighSurrogate, LowSurrogate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Codepoint > ENCODED_SURROGATE_END_CODEPOINT)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(OutputIterator++) = (ToType)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > static FORCEINLINE void Convert(ToType* Dest, int32 DestLen, const SrcBufferType* Source, int32 SourceLen)"
  },
  {
    "label": "Convert_Impl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert_Impl(Dest, DestLen, (const FromType*)Source, SourceLen)"
  },
  {
    "label": "Convert_Impl()",
    "kind": "Method",
    "detail": "Function (} private : template<DestBufferType> void)",
    "insertText": "Convert_Impl(DestBufferType& Dest, int32 DestLen, const FromType* Source, const int32 SourceLen)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Codepoint = static_cast<)",
    "insertText": "uint32(Source[i])"
  },
  {
    "label": "Utf16FromCodepoint()",
    "kind": "Method",
    "detail": "Function (int32 WrittenChars =)",
    "insertText": "Utf16FromCodepoint(Codepoint, Dest, DestLen)"
  },
  {
    "label": "Convert_Impl()",
    "kind": "Method",
    "detail": "Function (UE::Core::Private::FCountingOutputIterator Dest ;)",
    "insertText": "Convert_Impl(Dest, MAX_int32, (const FromType*)Source, SourceLen)"
  },
  {
    "label": "CodepointFromUtf16()",
    "kind": "Method",
    "detail": "Function (} private : uint32)",
    "insertText": "CodepointFromUtf16(const FromType*& SourceString, const uint32 SourceLengthRemaining)"
  },
  {
    "label": "HighSurrogate()",
    "kind": "Method",
    "detail": "Function (SourceString + = SourceLengthRemaining ; return UNICODE_BOGUS_CHAR_CODEPOINT ; } const uint16)",
    "insertText": "HighSurrogate(uint16)"
  },
  {
    "label": "Codepoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Codepoint(++CodeUnitPtr)"
  },
  {
    "label": "LowSurrogate()",
    "kind": "Method",
    "detail": "Function (const uint16)",
    "insertText": "LowSurrogate(uint16)"
  },
  {
    "label": "EncodeSurrogate()",
    "kind": "Method",
    "detail": "Function (Codepoint =)",
    "insertText": "EncodeSurrogate(HighSurrogate, LowSurrogate)"
  },
  {
    "label": "Convert_Impl()",
    "kind": "Method",
    "detail": "Function (+ + SourceString ; return UNICODE_BOGUS_CHAR_CODEPOINT ; } else { + + SourceString ; return Codepoint ; } } template<DestBufferType> void)",
    "insertText": "Convert_Impl(DestBufferType& ConvertedBuffer, int32 DestLen, const FromType* Source, const int32 SourceLen)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const FromType* SourceEnd = Source + SourceLen ;)",
    "insertText": "while(Source < SourceEnd && DestLen > 0)"
  },
  {
    "label": "CodepointFromUtf16()",
    "kind": "Method",
    "detail": "Function (uint32 Codepoint =)",
    "insertText": "CodepointFromUtf16(Source, SourceEnd - Source)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (- - DestLen ; } } } ; template<Converter,int32 DefaultConversionSize = DEFAULT_STRING_CONVERSION_SIZE> class TStringConversion : private Converter,private TInlineAllocator<DefaultConversionSize>::template ForElementType<Converter::ToType> { typedef TInlineAllocator<DefaultConversionSize>::template ForElementType<Converter::ToType> AllocatorType ; typedef Converter::FromType FromType ; typedef Converter::ToType ToType ; using LegacyFromType =)",
    "insertText": "decltype(StringConv::GetLegacyFromType<Converter>(nullptr))"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FromType* Source, int32 SourceLen, UE::Core::Private::ENullTerminatedString NullTerminated)"
  },
  {
    "label": "NullOffset()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NullOffset(NullTerminated == UE::Core::Private::ENullTerminatedString::Yes)"
  },
  {
    "label": "ConvertedLength()",
    "kind": "Method",
    "detail": "Function (StringLength =)",
    "insertText": "ConvertedLength(Source, SourceLen)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (int32 BufferSize = StringLength + NullOffset ;)",
    "insertText": "ResizeAllocation(0, BufferSize, sizeof(ToType))"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ptr(ToType*)AllocatorType::GetAllocation()"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(Ptr, BufferSize, Source, SourceLen + NullOffset)"
  },
  {
    "label": "TStringConversion()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "TStringConversion(TStringConversion&&)"
  },
  {
    "label": "TStringConversion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TStringConversion(const TStringConversion&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStringConversion&)",
    "insertText": "operator(TStringConversion&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStringConversion&)",
    "insertText": "operator(const TStringConversion&)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > explicit TStringConversion(const SrcBufferType* Source)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init((const FromType*)Source, TCString<FromType>::Strlen((const FromType*)Source), UE::Core::Private::ENullTerminatedString::Yes)"
  },
  {
    "label": "TStringConversion()",
    "kind": "Method",
    "detail": "Function (} else { Ptr = nullptr ; StringLength = 0 ; } })",
    "insertText": "TStringConversion(const LegacyFromType* Source) : TStringConversion((const FromType*)Source)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > TStringConversion(const SrcBufferType* Source, int32 SourceLen)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UE::Core::Private::ENullTerminatedString NullTerminated = UE::Core::Private::ENullTerminatedString::No ;)",
    "insertText": "if(SourceLen > 0 && ((const FromType*)Source)[SourceLen-1] == 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (NullTerminated = UE::Core::Private::ENullTerminatedString::Yes ; SourceLen - = 1 ; })",
    "insertText": "Init((const FromType*)Source, SourceLen, NullTerminated)"
  },
  {
    "label": "TStringConversion()",
    "kind": "Method",
    "detail": "Function (} else { Ptr = nullptr ; StringLength = 0 ; } })",
    "insertText": "TStringConversion(const LegacyFromType* Source, int32 SourceLen) : TStringConversion((const FromType*)Source, SourceLen)"
  },
  {
    "label": "TStringConversion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStringConversion(UE::Core::Private::FFromStrCast, const FromType* Source, int32 SourceLen)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Source, SourceLen, UE::Core::Private::ENullTerminatedString::No)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<FromRangeType,FromRangeCharType = std::remove_cv_t<std::remove_pointer_t<)",
    "insertText": "decltype(GetData(std::declval<FromRangeType>()))>> UE_REQUIRES( TIsContiguousContainer<FromRangeType>::Value && !TIsArray<std::remove_reference_t<FromRangeType>>::Value && TIsCharEncodingCompatibleWith<FromRangeCharType, FromType>::Value ) > TStringConversion(FromRangeType&& Source) : TStringConversion((const FromType*)GetData(Source), GetNum(Source))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} const ToType*)",
    "insertText": "Get()"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (} template<Converter,int32 DefaultConversionSize> auto)",
    "insertText": "GetNum(const TStringConversion<Converter, DefaultConversionSize>& Conversion) -> decltype(Conversion.Length())"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<Converter,int32 DefaultConversionSize> struct TIsContiguousContainer<TStringConversion<Converter,DefaultConversionSize>> { bool Value = true ; } ; template<Converter,int32 DefaultConversionSize> struct TElementType<TStringConversion<Converter,DefaultConversionSize>> { using Type = Converter::ToType ; } ; template<InFromType,InToType = InFromType> class TStringPointer {)",
    "insertText": "static_assert(sizeof(InFromType) == sizeof(InToType), \"FromType must be the same size as ToType!\")"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (public : typedef InFromType FromType ; typedef InToType ToType ; public : template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > explicit TStringPointer(const SrcBufferType* Source)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ptr(const ToType*)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (StringLength = - 1 ; } else { Ptr = nullptr ; StringLength = 0 ; } } template<SrcBufferType)",
    "insertText": "UE_REQUIRES(TIsCharEncodingCompatibleWith_V<SrcBufferType, FromType>) > explicit TStringPointer(const SrcBufferType* Source, int32 SourceLen)"
  },
  {
    "label": "TStringPointer()",
    "kind": "Method",
    "detail": "Function (StringLength = SourceLen ; } else { Ptr = nullptr ; StringLength = 0 ; } })",
    "insertText": "TStringPointer(UE::Core::Private::FFromStrCast, const FromType* Source, int32 SourceLen) : Ptr((const ToType*)Source) , StringLength(SourceLen)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<FromRangeType,FromRangeCharType = std::remove_cv_t<std::remove_pointer_t<)",
    "insertText": "decltype(GetData(std::declval<FromRangeType>()))>> UE_REQUIRES( TIsContiguousContainer<FromRangeType>::Value && !TIsArray<std::remove_reference_t<FromRangeType>>::Value && TIsCharEncodingCompatibleWith<FromRangeCharType, FromType>::Value ) > TStringPointer(FromRangeType&& Source) : TStringPointer((const FromType*)GetData(Source), GetNum(Source))"
  },
  {
    "label": "TStringPointer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStringPointer(TStringPointer&& Other)"
  },
  {
    "label": "TStringPointer()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TStringPointer(const TStringPointer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStringPointer&)",
    "insertText": "operator(const TStringPointer&)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const ToType* Ptr ; int32 StringLength ; } ; template<FromType,ToType> auto)",
    "insertText": "GetData(const TStringPointer<FromType, ToType>& Pointer) -> decltype(Pointer.Get())"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (} template<FromType,ToType> auto)",
    "insertText": "GetNum(const TStringPointer<FromType, ToType>& Pointer) -> decltype(Pointer.Length())"
  },
  {
    "label": "TCHAR_TO_ANSI()",
    "kind": "Method",
    "detail": "Function (} template<FromType,ToType> struct TIsContiguousContainer<TStringPointer<FromType,ToType>> { bool Value = true ; } ; template<FromType,ToType> struct TElementType<TStringPointer<FromType,ToType>> { using Type = ToType ; } ; using FTCHARToUTF8 = TStringConversion<UE::Core::Private::FTCHARToUTF8_Convert> ; using FUTF8ToTCHAR = TStringConversion<FUTF8ToTCHAR_Convert> ; # define)",
    "insertText": "TCHAR_TO_ANSI(str) (ANSICHAR*)StringCast<ANSICHAR>(static_cast<const TCHAR*>(str)).Get() #define ANSI_TO_TCHAR(str) (TCHAR*)StringCast<TCHAR>(static_cast<const ANSICHAR*>(str)).Get() #define TCHAR_TO_UTF8(str) (ANSICHAR*)FTCHARToUTF8((const TCHAR*)str).Get() #define UTF8_TO_TCHAR(str) (TCHAR*)FUTF8ToTCHAR((const ANSICHAR*)str).Get()"
  },
  {
    "label": "TCHAR_TO_UTF16()",
    "kind": "Method",
    "detail": "Function (typedef TStringConversion<TUTF16ToUTF32_Convert<UTF16CHAR,TCHAR>> FUTF16ToTCHAR ; # define)",
    "insertText": "TCHAR_TO_UTF16(str) (UTF16CHAR*)FTCHARToUTF16((const TCHAR*)str).Get() #define UTF16_TO_TCHAR(str) (TCHAR*)FUTF16ToTCHAR((const UTF16CHAR*)str).Get() static_assert(sizeof(TCHAR) == sizeof(UTF32CHAR), \"TCHAR and UTF32CHAR are expected to be the same size for inline conversion! PLATFORM_TCHAR_IS_4_BYTES is not configured correctly for this platform.\")"
  },
  {
    "label": "TCHAR_TO_UTF32()",
    "kind": "Method",
    "detail": "Function (typedef TStringPointer<TCHAR,UTF32CHAR> FTCHARToUTF32 ; typedef TStringPointer<UTF32CHAR,TCHAR> FUTF32ToTCHAR ; # define)",
    "insertText": "TCHAR_TO_UTF32(str) (UTF32CHAR*)(str) #define UTF32_TO_TCHAR(str) (TCHAR*)(str)"
  },
  {
    "label": "TCHAR_TO_UTF16()",
    "kind": "Method",
    "detail": "Function (typedef TStringConversion<TStringConvert<UTF16CHAR,TCHAR>> FUTF16ToTCHAR ; # define)",
    "insertText": "TCHAR_TO_UTF16(str) (UTF16CHAR*)FTCHARToUTF16((const TCHAR*)str).Get() #define UTF16_TO_TCHAR(str) (TCHAR*)FUTF16ToTCHAR((const UTF16CHAR*)str).Get()"
  },
  {
    "label": "TCHAR_TO_UTF32()",
    "kind": "Method",
    "detail": "Function (typedef TStringConversion<TStringConvert<UTF32CHAR,TCHAR>> FUTF32ToTCHAR ; # define)",
    "insertText": "TCHAR_TO_UTF32(str) (UTF32CHAR*)FTCHARToUTF32((const TCHAR*)str).Get() #define UTF32_TO_TCHAR(str) (TCHAR*)FUTF32ToTCHAR((const UTF32CHAR*)str).Get() #else static_assert(sizeof(TCHAR) == sizeof(UTF16CHAR), \"TCHAR and UTF16CHAR are expected to be the same size for inline conversion! PLATFORM_TCHAR_IS_4_BYTES is not configured correctly for this platform.\")"
  },
  {
    "label": "TCHAR_TO_UTF16()",
    "kind": "Method",
    "detail": "Function (typedef TStringPointer<TCHAR,UTF16CHAR> FTCHARToUTF16 ; typedef TStringPointer<UTF16CHAR,TCHAR> FUTF16ToTCHAR ; # define)",
    "insertText": "TCHAR_TO_UTF16(str) (UTF16CHAR*)(str) #define UTF16_TO_TCHAR(str) (TCHAR*)(str)"
  },
  {
    "label": "TCHAR_TO_UTF32()",
    "kind": "Method",
    "detail": "Function (typedef TStringConversion<TUTF32ToUTF16_Convert<UTF32CHAR,TCHAR>> FUTF32ToTCHAR ; # define)",
    "insertText": "TCHAR_TO_UTF32(str) (UTF32CHAR*)FTCHARToUTF32((const TCHAR*)str).Get() #define UTF32_TO_TCHAR(str) (TCHAR*)FUTF32ToTCHAR((const UTF32CHAR*)str).Get()"
  },
  {
    "label": "TCHAR_TO_WCHAR()",
    "kind": "Method",
    "detail": "Function (typedef TStringConversion<TUTF32ToUTF16_Convert<wchar_t,TCHAR>> FWCharToTCHAR ; # define)",
    "insertText": "TCHAR_TO_WCHAR(str) (wchar_t*)FTCHARToWChar((const TCHAR*)str).Get() #define WCHAR_TO_TCHAR(str) (TCHAR*)FWCharToTCHAR((const wchar_t*)str).Get()"
  },
  {
    "label": "TCHAR_TO_WCHAR()",
    "kind": "Method",
    "detail": "Function (typedef TStringConversion<TStringConvert<wchar_t,TCHAR>> FWCharToTCHAR ; # define)",
    "insertText": "TCHAR_TO_WCHAR(str) (wchar_t*)FTCHARToUTF32((const TCHAR*)str).Get() #define WCHAR_TO_TCHAR(str) (TCHAR*)FWCharToTCHAR((const wchar_t*)str).Get() #else static_assert(sizeof(TCHAR) == sizeof(wchar_t), \"TCHAR and wchar_t are expected to be the same size for inline conversion! PLATFORM_WCHAR_IS_4_BYTES is not configured correctly for this platform.\")"
  },
  {
    "label": "TCHAR_TO_WCHAR()",
    "kind": "Method",
    "detail": "Function (typedef TStringPointer<TCHAR,wchar_t> FTCHARToWChar ; typedef TStringPointer<wchar_t,TCHAR> FWCharToTCHAR ; # define)",
    "insertText": "TCHAR_TO_WCHAR(str) (wchar_t*)(str) #define WCHAR_TO_TCHAR(str) (TCHAR*)(str) #endif template <typename To, int32 DefaultConversionSize = DEFAULT_STRING_CONVERSION_SIZE, typename From> FORCEINLINE auto StringCast(const From* Str)"
  },
  {
    "label": "DefaultConversionSize()",
    "kind": "Method",
    "detail": "Function (} else { return TStringConversion<TStringConvert<From,To>,)",
    "insertText": "DefaultConversionSize(Str)"
  },
  {
    "label": "StringCast()",
    "kind": "Method",
    "detail": "Function (} } template<To,int32 DefaultConversionSize = DEFAULT_STRING_CONVERSION_SIZE,From> auto)",
    "insertText": "StringCast(const From* Str, int32 Len)"
  },
  {
    "label": "DefaultConversionSize()",
    "kind": "Method",
    "detail": "Function (} else { return TStringConversion<TStringConvert<From,To>,)",
    "insertText": "DefaultConversionSize(Str, Len)"
  },
  {
    "label": "StrCast()",
    "kind": "Method",
    "detail": "Function (} } template<To,int32 DefaultConversionSize = DEFAULT_STRING_CONVERSION_SIZE,From> auto)",
    "insertText": "StrCast(const From* Str, int32 Len)"
  },
  {
    "label": "DefaultConversionSize()",
    "kind": "Method",
    "detail": "Function (} else { return TStringConversion<TStringConvert<From,To>,)",
    "insertText": "DefaultConversionSize(UE::Core::Private::FFromStrCast{}, Str, Len)"
  },
  {
    "label": "CharCast()",
    "kind": "Method",
    "detail": "Function (} } template<To,From> To)",
    "insertText": "CharCast(From Ch)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (To Result ;)",
    "insertText": "Convert(&Result, 1, &Ch, 1)"
  },
  {
    "label": "ResizeAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeAllocation(0, SrcLen, sizeof(FromType))"
  },
  {
    "label": "TStringPassthru()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TStringPassthru(TStringPassthru&& Other)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveToEmpty(Other)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply()"
  },
  {
    "label": "Source()",
    "kind": "Method",
    "detail": "Function (const FromType*)",
    "insertText": "Source(const FromType*)AllocatorType::GetAllocation()"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(Dest, DestLen, Source, SrcLen)"
  },
  {
    "label": "TStringPassthru()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TStringPassthru(const TStringPassthru&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TStringPassthru&)",
    "insertText": "operator(const TStringPassthru&)"
  },
  {
    "label": "TPassthruPointer()",
    "kind": "Method",
    "detail": "Function (ToType* Dest ; int32 DestLen ; int32 SrcLen ; } ; template<T> class TPassthruPointer { public :)",
    "insertText": "TPassthruPointer(T* InPtr) : Ptr(InPtr)"
  },
  {
    "label": "StringMemoryPassthru()",
    "kind": "Method",
    "detail": "Function (} private : T* Ptr ; } ; template<From,To,int32 DefaultConversionSize = DEFAULT_STRING_CONVERSION_SIZE> auto)",
    "insertText": "StringMemoryPassthru(To* Buffer, int32 BufferSize, int32 SourceLength)"
  },
  {
    "label": "DefaultConversionSize()",
    "kind": "Method",
    "detail": "Function (} else { return TStringPassthru<To,From,)",
    "insertText": "DefaultConversionSize(Buffer, BufferSize, SourceLength)"
  },
  {
    "label": "StringToArray()",
    "kind": "Method",
    "detail": "Function (} } template<ToType,FromType> TArray<ToType>)",
    "insertText": "StringToArray(const FromType* Src, int32 SrcLen)"
  },
  {
    "label": "ToType()",
    "kind": "Method",
    "detail": "Function (int32 DestLen = FPlatformString::ConvertedLength<)",
    "insertText": "ToType(Src, SrcLen)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<ToType> Result ; Result .)",
    "insertText": "AddUninitialized(DestLen)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert(Result.GetData(), DestLen, Src, SrcLen)"
  }
]