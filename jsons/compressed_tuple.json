[
  {
    "label": "CompressedTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompressedTuple"
  },
  {
    "label": "Elem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Elem"
  },
  {
    "label": "uses_inheritance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "uses_inheritance"
  },
  {
    "label": "Storage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Storage"
  },
  {
    "label": "ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TupleMoveConstructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TupleMoveConstructible"
  },
  {
    "label": "compressed_tuple_size",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "compressed_tuple_size"
  },
  {
    "label": "TupleItemsMoveConstructible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TupleItemsMoveConstructible"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_COMPRESSED_TUPLE_H_ # define ABSL_CONTAINER_INTERNAL_COMPRESSED_TUPLE_H_ # include<initializer_list> # include<tuple> # include<type_traits> # include<utility> # include \" absl / utility / utility . h \" # if)",
    "insertText": "defined(_MSC_VER) && !defined(__NVCC__) #define ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC __declspec(empty_bases)"
  },
  {
    "label": "IsFinal()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace container_internal { template<. . . Ts> class CompressedTuple ; namespace internal_compressed_tuple { template<D,size_t I> struct Elem ; template<. . . B,size_t I> struct Elem<CompressedTuple<B . . .>,I> : std::tuple_element<I,std::tuple<B . . .>> { } ; template<D,size_t I> using ElemT = Elem<D,I>::type ; template<T> bool)",
    "insertText": "IsFinal()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__clang__) || defined(__GNUC__) return __is_final(T)"
  },
  {
    "label": "ShouldUseBase()",
    "kind": "Method",
    "detail": "Function (# else return false ; # endif } struct uses_inheritance { } ; template<T> bool)",
    "insertText": "ShouldUseBase()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} template<T,size_t I,# if)",
    "insertText": "defined(_MSC_VER) bool UseBase = ShouldUseBase<typename std::enable_if<true, T>::type>()> #else bool UseBase = ShouldUseBase<T>()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (T value ;)",
    "insertText": "Storage()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (template<V>)",
    "insertText": "Storage(absl::in_place_t, V&& v) : value(absl::forward<V>(v))"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} const T&)",
    "insertText": "get()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (template<V>)",
    "insertText": "Storage(absl::in_place_t, V&& v) : T(absl::forward<V>(v))"
  },
  {
    "label": "CompressedTupleImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<D,I,bool ShouldAnyUseBase> struct ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC CompressedTupleImpl ; template<. . . Ts,size_t . . . I,bool ShouldAnyUseBase> struct ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC CompressedTupleImpl<CompressedTuple<Ts . . .>,absl::index_sequence<I . . .>,ShouldAnyUseBase> : uses_inheritance,Storage<Ts,std::integral_constant<size_t,I>::value> . . . {)",
    "insertText": "CompressedTupleImpl()"
  },
  {
    "label": "CompressedTupleImpl()",
    "kind": "Method",
    "detail": "Function (template<. . . Vs>)",
    "insertText": "CompressedTupleImpl(absl::in_place_t, Vs&&... args) : Storage<Ts, I>(absl::in_place, absl::forward<Vs>(args))"
  },
  {
    "label": "CompressedTupleImpl()",
    "kind": "Method",
    "detail": "Function (template<. . . Vs>)",
    "insertText": "CompressedTupleImpl(absl::in_place_t, Vs&&... args) : Storage<Ts, I, false>(absl::in_place, absl::forward<Vs>(args))"
  },
  {
    "label": "Or()",
    "kind": "Method",
    "detail": "Function (} CompressedTuple<Ts . . .> ; } ; std::false_type)",
    "insertText": "Or(std::initializer_list<std::false_type>)"
  },
  {
    "label": "Or()",
    "kind": "Method",
    "detail": "Function (std::true_type)",
    "insertText": "Or(std::initializer_list<bool>)"
  },
  {
    "label": "ShouldAnyUseBase()",
    "kind": "Method",
    "detail": "Function (template<. . . Ts> bool)",
    "insertText": "ShouldAnyUseBase()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; } template<T,V> using TupleElementMoveConstructible = std::conditional<std::is_reference<T>::value,std::is_convertible<V,T>,std::is_constructible<T,V&&>>::type ; template<bool SizeMatches,class T,class . . . Vs> struct TupleMoveConstructible : std::false_type { } ; template<class . . . Ts,class . . . Vs> struct TupleMoveConstructible<true,CompressedTuple<Ts . . .>,Vs . . .> : std::integral_constant<bool,absl::conjunction<TupleElementMoveConstructible<Ts,Vs&&> . . .>::value> { } ; template<T> struct compressed_tuple_size ; template<. . . Es> struct compressed_tuple_size<CompressedTuple<Es . . .>> : public std::integral_constant<std::size_t,)",
    "insertText": "sizeof(Es)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; template<class T,class . . . Vs> struct TupleItemsMoveConstructible : std::integral_constant<bool,TupleMoveConstructible<compressed_tuple_size<T>::value = =)",
    "insertText": "sizeof(Vs)"
  },
  {
    "label": "Ts()",
    "kind": "Method",
    "detail": "Function (} ; } template<. . . Ts> class ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC CompressedTuple : private internal_compressed_tuple::CompressedTupleImpl<CompressedTuple<Ts . . .>,absl::index_sequence_for<Ts . . .>,internal_compressed_tuple::ShouldAnyUseBase<)",
    "insertText": "Ts()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : template<int I> using ElemT = internal_compressed_tuple::ElemT<CompressedTuple,I> ; template<int I> using StorageT = internal_compressed_tuple::Storage<ElemT<I>,I> ; public : # if)",
    "insertText": "defined(_MSC_VER) constexpr CompressedTuple() : CompressedTuple::CompressedTupleImpl()"
  },
  {
    "label": "CompressedTuple()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "CompressedTuple()"
  },
  {
    "label": "CompressedTuple()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "CompressedTuple(const Ts&... base) : CompressedTuple::CompressedTupleImpl(absl::in_place, base...)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<First,. . . Vs,absl::enable_if_t<absl::conjunction<absl::negation<std::is_same<)",
    "insertText": "void(CompressedTuple), void(absl::decay_t<First>)>>, internal_compressed_tuple::TupleItemsMoveConstructible< CompressedTuple<Ts...>, First, Vs...>>::value, bool> = true> explicit constexpr CompressedTuple(First&& first, Vs&&... base) : CompressedTuple::CompressedTupleImpl(absl::in_place, absl::forward<First>(first), absl::forward<Vs>(base)...)"
  }
]