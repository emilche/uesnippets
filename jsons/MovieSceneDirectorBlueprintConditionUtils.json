[
  {
    "label": "MOVIESCENETOOLS_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MOVIESCENETOOLS_API"
  },
  {
    "label": "SetEndpoint()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" MovieScene . h \" # include \" Conditions / MovieSceneDirectorBlueprintCondition . h \" # include \" EntitySystem / MovieSceneSharedPlaybackState . h \" # include \" Evaluation / MovieSceneEvaluationState . h \" # include \" Editor . h \" # include \" MovieSceneCommonHelpers . h \" # include \" Conditions / MovieSceneGroupCondition . h \" # include \" MovieSceneDirectorBlueprintConditionUtils . generated . h \" struct FMovieSceneDirectorBlueprintConditionUtils { using FSharedPlaybackState = UE::MovieScene::FSharedPlaybackState ; void)",
    "insertText": "SetEndpoint(UMovieScene* MovieScene, FMovieSceneDirectorBlueprintConditionData* DirectorBlueprintConditionData, UK2Node* NewEndpoint)"
  },
  {
    "label": "EnsureBlueprintExtensionCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBlueprintExtensionCreated(UMovieSceneSequence* MovieSceneSequence, UBlueprint* Blueprint)"
  },
  {
    "label": "IterateDirectorBlueprintConditions()",
    "kind": "Method",
    "detail": "Function (template<Callback> void)",
    "insertText": "IterateDirectorBlueprintConditions(UMovieScene* InMovieScene, Callback&& InCallback)"
  },
  {
    "label": "InCallback()",
    "kind": "Method",
    "detail": "Function (auto IterateThroughTrack = [&)",
    "insertText": "InCallback(UMovieSceneTrack* Track)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(UMovieSceneCondition*)"
  },
  {
    "label": "IterateThroughCondition()",
    "kind": "Method",
    "detail": "Function (IterateThroughCondition = [& InCallback,&)",
    "insertText": "IterateThroughCondition(UMovieSceneCondition* Condition)"
  },
  {
    "label": "InCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InCallback(DirectorBlueprintCondition->DirectorBlueprintConditionData)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(UMovieSceneGroupCondition* GroupCondition = Cast<UMovieSceneGroupCondition>(Condition))"
  },
  {
    "label": "IterateThroughCondition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateThroughCondition(Container.Condition)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } ;)",
    "insertText": "for(UMovieSceneCondition* Condition : Track->GetAllConditions())"
  },
  {
    "label": "IterateThroughCondition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateThroughCondition(Condition)"
  },
  {
    "label": "GetTracks()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<UMovieSceneTrack*> Tracks = InMovieScene ->)",
    "insertText": "GetTracks()"
  },
  {
    "label": "IterateThroughTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateThroughTrack(Track)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(UMovieSceneTrack* Track = InMovieScene->GetCameraCutTrack())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(FMovieSceneBinding& Binding : InMovieScene->GetBindings())"
  },
  {
    "label": "GatherDirectorBlueprintConditions()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "GatherDirectorBlueprintConditions(UMovieScene* InMovieScene, TArray<FMovieSceneDirectorBlueprintConditionData*>& OutDirectorBlueprintConditionData)"
  },
  {
    "label": "IterateDirectorBlueprintConditions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateDirectorBlueprintConditions(InMovieScene, [&](FMovieSceneDirectorBlueprintConditionData& Item) { OutDirectorBlueprintConditionData.Add(&Item); })"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UFUNCTION() bool SampleDirectorBlueprintCondition(const FMovieSceneConditionContext& ConditionContext)"
  }
]