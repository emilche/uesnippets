[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UInterchangeBaseNodeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeBaseNodeContainer"
  },
  {
    "label": "UInterchangeResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeResult"
  },
  {
    "label": "UInterchangeSourceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeSourceData"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FInterchangePipelineContextParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterchangePipelineContextParams"
  },
  {
    "label": "FInterchangePipelinePropertyStatePerContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterchangePipelinePropertyStatePerContext"
  },
  {
    "label": "FInterchangePipelinePropertyStates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterchangePipelinePropertyStates"
  },
  {
    "label": "FInterchangeConflictInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterchangeConflictInfo"
  },
  {
    "label": "SInterchangeBaseConflictWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInterchangeBaseConflictWidget"
  },
  {
    "label": "UInterchangePipelineBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangePipelineBase"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" InterchangeResultsContainer . h \" # include \" InterchangeSourceData . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / OptionalFwd . h \" # include \" Nodes / InterchangeBaseNodeContainer . h \" # include \" Nodes / InterchangeFactoryBaseNode . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SWindow . h \" # include \" InterchangePipelineBase . generated . h \" class FText ; class UClass ; class UInterchangeBaseNodeContainer ; class UInterchangeResult ; class UInterchangeSourceData ; struct FFrame ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (PostTranslator,PostFactory,PostImport,Export } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (None,AssetImport,AssetReimport,SceneImport,SceneReimport,AssetCustomLODImport,AssetCustomLODReimport,AssetAlternateSkinningImport,AssetAlternateSkinningReimport,AssetCustomMorphTargetImport,AssetCustomMorphTargetReImport,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (UClass* ImportObjectType = nullptr ; TObjectPtr<UObject> ReimportAsset = nullptr ; const UInterchangeBaseNodeContainer* BaseNodeContainer = nullptr ; } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Property States\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() bool IsPropertyLocked()"
  },
  {
    "label": "IsPropertyPreDialogReset()",
    "kind": "Method",
    "detail": "Function (bLocked = bLockValue ; } bool)",
    "insertText": "IsPropertyPreDialogReset()"
  },
  {
    "label": "IsPropertyVisibleInShowEssentials()",
    "kind": "Method",
    "detail": "Function (bPreDialogReset = bPreDialogResetValue ; } bool)",
    "insertText": "IsPropertyVisibleInShowEssentials()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bVisible = bIsReimportContext ? ReimportStates . bVisible : ImportStates . bVisible ;)",
    "insertText": "if(bVisible)"
  },
  {
    "label": "SetPropertyImportVisibility()",
    "kind": "Method",
    "detail": "Function (bVisible = bIsShowEssentials ? BasicLayoutStates . bVisible : true ; } return bVisible ; } void)",
    "insertText": "SetPropertyImportVisibility(const bool bVisibleValue)"
  },
  {
    "label": "SetPropertyReimportVisibility()",
    "kind": "Method",
    "detail": "Function (ImportStates . bVisible = bVisibleValue ; } void)",
    "insertText": "SetPropertyReimportVisibility(const bool bVisibleValue)"
  },
  {
    "label": "SetPropertyShowEssentialsVisibility()",
    "kind": "Method",
    "detail": "Function (ReimportStates . bVisible = bVisibleValue ; } void)",
    "insertText": "SetPropertyShowEssentialsVisibility(const bool bVisibleValue)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; struct FInterchangeConflictInfo { FString DisplayName ; FString Description ; FGuid UniqueId ; TObjectPtr<UInterchangePipelineBase> Pipeline = nullptr ; TSet<UClass*> AffectedAssetClasses ; } ; class SInterchangeBaseConflictWidget : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SInterchangeBaseConflictWidget) : _WidgetWindow(nullptr)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<SWindow>, WidgetWindow) SLATE_END_ARGS() virtual void SetWidgetWindow(TSharedPtr<SWindow> InWidgetWindow)"
  },
  {
    "label": "GetMinimumSize()",
    "kind": "Method",
    "detail": "Function (WidgetWindow = InWidgetWindow ; } FVector2D)",
    "insertText": "GetMinimumSize(float ApplicationScale)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} protected : TSharedPtr<SWindow> WidgetWindow = nullptr ; } ;)",
    "insertText": "UCLASS(BlueprintType, Blueprintable, editinlinenew, Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintNativeEvent, BlueprintCallable, Category = \"Interchange | Pipeline\") INTERCHANGECORE_API FString ScriptedGetPipelineDisplayName()"
  },
  {
    "label": "ScriptedGetPipelineDisplayName_Implementation()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ScriptedGetPipelineDisplayName_Implementation()"
  },
  {
    "label": "ScriptedExecutePipeline_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScriptedExecutePipeline_Implementation(UInterchangeBaseNodeContainer* BaseNodeContainer, const TArray<UInterchangeSourceData*>& SourceDatas, const FString& ContentBasePath)"
  },
  {
    "label": "ExecutePipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePipeline(BaseNodeContainer, SourceDatas, ContentBasePath)"
  },
  {
    "label": "ScriptedExecutePostFactoryPipeline_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScriptedExecutePostFactoryPipeline_Implementation(const UInterchangeBaseNodeContainer* BaseNodeContainer, const FString& FactoryNodeKey, UObject* CreatedAsset, bool bIsAReimport)"
  },
  {
    "label": "ExecutePostFactoryPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePostFactoryPipeline(BaseNodeContainer, FactoryNodeKey, CreatedAsset, bIsAReimport)"
  },
  {
    "label": "ScriptedExecutePostImportPipeline_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScriptedExecutePostImportPipeline_Implementation(const UInterchangeBaseNodeContainer* BaseNodeContainer, const FString& FactoryNodeKey, UObject* CreatedAsset, bool bIsAReimport)"
  },
  {
    "label": "ExecutePostImportPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePostImportPipeline(BaseNodeContainer, FactoryNodeKey, CreatedAsset, bIsAReimport)"
  },
  {
    "label": "ScriptedExecutePostBroadcastPipeline_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScriptedExecutePostBroadcastPipeline_Implementation(const UInterchangeBaseNodeContainer* BaseNodeContainer, const FString& FactoryNodeKey, UObject* CreatedAsset, bool bIsAReimport)"
  },
  {
    "label": "ExecutePostBroadcastPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePostBroadcastPipeline(BaseNodeContainer, FactoryNodeKey, CreatedAsset, bIsAReimport)"
  },
  {
    "label": "ScriptedExecuteExportPipeline_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScriptedExecuteExportPipeline_Implementation(UInterchangeBaseNodeContainer* BaseNodeContainer)"
  },
  {
    "label": "ExecuteExportPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteExportPipeline(BaseNodeContainer)"
  },
  {
    "label": "CanExecuteOnAnyThread()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanExecuteOnAnyThread(EInterchangePipelineTask PipelineTask)"
  },
  {
    "label": "ScriptedSetReimportSourceIndex_Implementation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScriptedSetReimportSourceIndex_Implementation(UClass* ReimportObjectClass, const int32 SourceFileIndex)"
  },
  {
    "label": "SetReimportSourceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReimportSourceIndex(ReimportObjectClass, SourceFileIndex)"
  },
  {
    "label": "IsScripted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsScripted()"
  },
  {
    "label": "SaveSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettings(const FName PipelineStackName)"
  },
  {
    "label": "AdjustSettingsForContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustSettingsForContext(const FInterchangePipelineContextParams& ContextParams)"
  },
  {
    "label": "AdjustSettingsFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustSettingsFromCache()"
  },
  {
    "label": "TransferAdjustSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferAdjustSettings(const UInterchangePipelineBase* SourcePipeline)"
  },
  {
    "label": "SetShowEssentialsMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowEssentialsMode(bool bShowEssentialsModeValue)"
  },
  {
    "label": "SetFromReimportOrOverride()",
    "kind": "Method",
    "detail": "Function (bIsShowEssentials = bShowEssentialsModeValue ; } void)",
    "insertText": "SetFromReimportOrOverride(bool bInFromReimportOrOverride)"
  },
  {
    "label": "IsFromReimportOrOverride()",
    "kind": "Method",
    "detail": "Function (bFromReimportOrOverride = bInFromReimportOrOverride ; } bool)",
    "insertText": "IsFromReimportOrOverride()"
  },
  {
    "label": "IsSettingsAreValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSettingsAreValid(TOptional<FText>& OutInvalidReason)"
  },
  {
    "label": "IsPropertyChangeNeedRefresh()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPropertyChangeNeedRefresh(const FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ConflictInfos .)",
    "insertText": "Empty()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Item = Results -> Add<)",
    "insertText": "T()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Results ->)",
    "insertText": "Add(Item)"
  },
  {
    "label": "SetResultsContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResultsContainer(UInterchangeResultsContainer* InResults)"
  },
  {
    "label": "GetPropertyStates()",
    "kind": "Method",
    "detail": "Function (Results = InResults ; } const FInterchangePipelinePropertyStates*)",
    "insertText": "GetPropertyStates(const FName PropertyPath)"
  },
  {
    "label": "GetMutablePropertyStates()",
    "kind": "Method",
    "detail": "Function (FInterchangePipelinePropertyStates*)",
    "insertText": "GetMutablePropertyStates(const FName PropertyPath)"
  },
  {
    "label": "GetPropertiesStatesPropertyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPropertiesStatesPropertyName()"
  },
  {
    "label": "GetResultsPropertyName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetResultsPropertyName()"
  },
  {
    "label": "CanEditPropertiesStates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditPropertiesStates()"
  },
  {
    "label": "UpdateWeakObjectPtrs()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateWeakObjectPtrs()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "SupportReimport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportReimport()"
  },
  {
    "label": "GetPipelineDisplayName()",
    "kind": "Method",
    "detail": "Function (protected : FString)",
    "insertText": "GetPipelineDisplayName()"
  },
  {
    "label": "ExecutePipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecutePipeline(UInterchangeBaseNodeContainer* BaseNodeContainer, const TArray<UInterchangeSourceData*>& SourceDatas, const FString& ContentBasePath)"
  },
  {
    "label": "ExecutePostFactoryPipeline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecutePostFactoryPipeline(const UInterchangeBaseNodeContainer* BaseNodeContainer, const FString& NodeKey, UObject* CreatedAsset, bool bIsAReimport)"
  },
  {
    "label": "ExecutePostImportPipeline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecutePostImportPipeline(const UInterchangeBaseNodeContainer* BaseNodeContainer, const FString& NodeKey, UObject* CreatedAsset, bool bIsAReimport)"
  },
  {
    "label": "ExecutePostBroadcastPipeline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecutePostBroadcastPipeline(const UInterchangeBaseNodeContainer* BaseNodeContainer, const FString& NodeKey, UObject* CreatedAsset, bool bIsAReimport)"
  },
  {
    "label": "SetReimportSourceIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReimportSourceIndex(UClass* ReimportObjectClass, const int32 SourceFileIndex)"
  },
  {
    "label": "ExecuteExportPipeline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ExecuteExportPipeline(UInterchangeBaseNodeContainer* BaseNodeContainer)"
  },
  {
    "label": "LoadSettingsInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadSettingsInternal(const FName PipelineStackName, const FString& ConfigFilename, TMap<FName, FInterchangePipelinePropertyStates>& ParentPropertiesStates, bool bResetPreDialog)"
  },
  {
    "label": "SaveSettingsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveSettingsInternal(const FName PipelineStackName, const FString& ConfigFilename)"
  },
  {
    "label": "GetMostPipelineOuter()",
    "kind": "Method",
    "detail": "Function (UInterchangePipelineBase*)",
    "insertText": "GetMostPipelineOuter()"
  },
  {
    "label": "InternalToggleVisibilityPropertiesOfMetaDataValue()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "InternalToggleVisibilityPropertiesOfMetaDataValue(UInterchangePipelineBase* OuterMostPipeline, UInterchangePipelineBase* Pipeline, bool bDoTransientSubPipeline, const FString& MetaDataKey, const FString& MetaDataValue, const bool bVisibilityState)"
  },
  {
    "label": "HidePropertiesOfCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HidePropertiesOfCategory(UInterchangePipelineBase* OuterMostPipeline, UInterchangePipelineBase* Pipeline, const FString& HideCategoryName, bool bDoTransientSubPipeline = false)"
  },
  {
    "label": "HidePropertiesOfSubCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HidePropertiesOfSubCategory(UInterchangePipelineBase* OuterMostPipeline, UInterchangePipelineBase* Pipeline, const FString& HideSubCategoryName, bool bDoTransientSubPipeline = false)"
  },
  {
    "label": "HideProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideProperty(UInterchangePipelineBase* OuterMostPipeline, UInterchangePipelineBase* Pipeline, const FName& HidePropertyName)"
  }
]