[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "ACameraActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACameraActor"
  },
  {
    "label": "FSequencerKeyCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerKeyCollection"
  },
  {
    "label": "FSequencerSelectionPreview",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSelectionPreview"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "IKeyArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyArea"
  },
  {
    "label": "ISidebarDrawerContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISidebarDrawerContent"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UActorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorFactory"
  },
  {
    "label": "UCameraComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCameraComponent"
  },
  {
    "label": "UMovieSceneCinematicShotSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCinematicShotSection"
  },
  {
    "label": "UMovieSceneFolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneFolder"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSequence"
  },
  {
    "label": "UMovieSceneSubSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSubSection"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USequencerSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USequencerSettings"
  },
  {
    "label": "FCanKeyPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCanKeyPropertyParams"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "FKeyPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPropertyParams"
  },
  {
    "label": "FMovieSceneBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBinding"
  },
  {
    "label": "FMovieSceneChannelHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelHandle"
  },
  {
    "label": "FMovieSceneMarkedFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneMarkedFrame"
  },
  {
    "label": "FQualifiedFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQualifiedFrameTime"
  },
  {
    "label": "FSidebarDrawerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSidebarDrawerConfig"
  },
  {
    "label": "INumericTypeInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "INumericTypeInterface"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveModel"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "FAnimatedRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimatedRange"
  },
  {
    "label": "FMovieSceneChannelMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelMetaData"
  },
  {
    "label": "FMovieSceneSequencePlaybackParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequencePlaybackParams"
  },
  {
    "label": "FSequencerEditorViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditorViewModel"
  },
  {
    "label": "FCreateBindingParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateBindingParams"
  },
  {
    "label": "FTimeDomainOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeDomainOverride"
  },
  {
    "label": "ESnapTimeMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ESnapTimeMode"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "ISequencerObjectChangeListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerObjectChangeListener"
  },
  {
    "label": "ISequencerPropertyKeyedStatusHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerPropertyKeyedStatusHandler"
  },
  {
    "label": "ITimeSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSlider"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" ViewRangeInterpolation . h \" # include \" Evaluation / MovieSceneSequenceTransform . h \" # include \" Filters / ISequencerTrackFilters . h \" # include \" HAL / Platform . h \" # include \" IMovieScenePlayer . h \" # include \" IMovieScenePlayer . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" KeyParams . h \" # include \" KeyPropertyParams . h \" # include \" Math / Range . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Guid . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" MovieSceneBinding . h \" # include \" MovieSceneSequenceID . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / Input / NumericTypeInterface . h \" # include \" Widgets / SWidget . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_3 # include \" ITimeSlider . h \" # endif # include \" Bindings / MovieSceneCustomBinding . h \" # include \" ISequencer . generated . h \" class AActor ; class ACameraActor ; class FSequencerKeyCollection ; class FSequencerSelectionPreview ; class FUICommandList ; class IDetailsView ; class IKeyArea ; class ISidebarDrawerContent ; class ISequencerTrackEditor ; class SWidget ; class UActorFactory ; class UCameraComponent ; class UMovieSceneCinematicShotSection ; class UMovieSceneFolder ; class UMovieSceneSection ; class UMovieSceneSequence ; class UMovieSceneSubSection ; class UMovieSceneTrack ; class UObject ; class USequencerSettings ; struct FCanKeyPropertyParams ; struct FFrameNumber ; struct FFrameTime ; struct FKeyPropertyParams ; struct FMovieSceneBinding ; struct FMovieSceneChannelHandle ; struct FMovieSceneMarkedFrame ; struct FQualifiedFrameTime ; struct FSidebarDrawerConfig ; template<NumericType> struct INumericTypeInterface ; enum class EMapChangeType : uint8 ; enum class EPropertyKeyedStatus : uint8 ; enum class ENearestKeyOption : uint8 ; class FCurveEditor ; class FCurveModel ; class IToolkitHost ; struct FAnimatedRange ; struct FMovieSceneChannelMetaData ; struct FMovieSceneSequencePlaybackParams ; namespace UE { namespace Sequencer { enum class ETimeDomain : uint8 ; class FSequencerEditorViewModel ; struct FCreateBindingParams ; struct FTimeDomainOverride ; } })",
    "insertText": "UENUM()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (KeyChanged,KeyGroup,KeyAll } ; enum class ESequencerCommandBindings { Sequencer,Shared,CurveEditor } ; enum ESnapTimeMode { STM_None = 0 x00000000,STM_Interval = 0 x00000001,STM_Keys = 0 x00000002,STM_All = STM_Interval | STM_Keys } ; enum class EMovieSceneDataChangeType { TrackValueChanged,TrackValueChangedRefreshImmediately,MovieSceneStructureItemAdded,MovieSceneStructureItemRemoved,MovieSceneStructureItemsChanged,ActiveMovieSceneChanged,RefreshAllImmediately,Unknown,RefreshTree } ; class ISequencer : public IMovieScenePlayer,public TSharedFromThis<ISequencer> { public :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnGlobalTimeChanged)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnPlayEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnStopEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnRecordEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnBeginScrubbingEvent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnEndScrubbingEvent)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(TArray<float>, FOnGetPlaybackSpeeds)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnMovieSceneDataChanged, EMovieSceneDataChangeType)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnChannelChanged, const FMovieSceneChannelMetaData* MetaData, UMovieSceneSection*) DECLARE_MULTICAST_DELEGATE(FOnMovieSceneBindingsChanged)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnMovieSceneBindingsPasted, const TArray<FMovieSceneBinding>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSelectionChangedObjectGuids, TArray<FGuid>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSelectionChangedTracks, TArray<UMovieSceneTrack*>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSelectionChangedSections, TArray<UMovieSceneSection*>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnCurveDisplayChanged, FCurveModel* , bool ,const FCurveEditor*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnCloseEvent, TSharedRef<ISequencer>)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnActorAddedToSequencer, AActor*, const FGuid)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnTreeViewChanged)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnViewportSelectionLimitedChanged, const bool)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Close()"
  },
  {
    "label": "OnCloseEvent()",
    "kind": "Method",
    "detail": "Function (FOnCloseEvent&)",
    "insertText": "OnCloseEvent()"
  },
  {
    "label": "GetSequencerWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetSequencerWidget()"
  },
  {
    "label": "GetRootMovieSceneSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetRootMovieSceneSequence()"
  },
  {
    "label": "GetFocusedMovieSceneSequence()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSequence*)",
    "insertText": "GetFocusedMovieSceneSequence()"
  },
  {
    "label": "GetFocusedMovieSceneSequenceTransform()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceTransform)",
    "insertText": "GetFocusedMovieSceneSequenceTransform()"
  },
  {
    "label": "GetLocalTimeWarpTransform()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceTransform)",
    "insertText": "GetLocalTimeWarpTransform()"
  },
  {
    "label": "GetGlobalPlaybackWarpTransform()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceTransform)",
    "insertText": "GetGlobalPlaybackWarpTransform()"
  },
  {
    "label": "GetRootTemplateID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceIDRef)",
    "insertText": "GetRootTemplateID()"
  },
  {
    "label": "GetFocusedTemplateID()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSequenceIDRef)",
    "insertText": "GetFocusedTemplateID()"
  },
  {
    "label": "GetSubSequenceHierarchy()",
    "kind": "Method",
    "detail": "Function (const TArray<FMovieSceneSequenceID>&)",
    "insertText": "GetSubSequenceHierarchy()"
  },
  {
    "label": "FindSubSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSubSection*)",
    "insertText": "FindSubSection(FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "FindObjectsInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (TArrayView<TWeakObjectPtr<>>)",
    "insertText": "FindObjectsInCurrentSequence(const FGuid& InObjectBinding)"
  },
  {
    "label": "ResetToNewRootSequence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetToNewRootSequence(UMovieSceneSequence& NewAnimation)"
  },
  {
    "label": "FocusSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusSequenceInstance(UMovieSceneSubSection& Section)"
  },
  {
    "label": "PopToSequenceInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopToSequenceInstance(FMovieSceneSequenceIDRef SequenceID)"
  },
  {
    "label": "GetSubSequenceRange()",
    "kind": "Method",
    "detail": "Function (TOptional<TRange<FFrameNumber>>)",
    "insertText": "GetSubSequenceRange()"
  },
  {
    "label": "GetViewModel()",
    "kind": "Method",
    "detail": "Function (TOptional<TRange<FFrameNumber>> Optional ; return Optional ; } TSharedPtr<UE::Sequencer::FSequencerEditorViewModel>)",
    "insertText": "GetViewModel()"
  },
  {
    "label": "SuppressAutoEvaluation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressAutoEvaluation(UMovieSceneSequence* Sequence, const FGuid& InSignature)"
  },
  {
    "label": "CreateBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "CreateBinding(UObject& InObject, const UE::Sequencer::FCreateBindingParams& InParams)"
  },
  {
    "label": "CreateBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "CreateBinding(UMovieSceneSequence* InSequence, UObject* InObject)"
  },
  {
    "label": "MakeNewSpawnable()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "MakeNewSpawnable(UObject& SourceObject, UActorFactory* ActorFactory = nullptr, bool bSetupDefaults = true)"
  },
  {
    "label": "AddActors()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "AddActors(const TArray<TWeakObjectPtr<AActor> >& InActors, bool bSelectActors = true)"
  },
  {
    "label": "AddEmptyBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "AddEmptyBinding()"
  },
  {
    "label": "OnAddBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddBinding(const FGuid& ObjectBinding, UMovieScene* MovieScene)"
  },
  {
    "label": "OnAddTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddTrack(const TWeakObjectPtr<UMovieSceneTrack>& InTrack, const FGuid& ObjectBinding)"
  },
  {
    "label": "ConvertToSpawnable()",
    "kind": "Method",
    "detail": "Function (TArray<FGuid>)",
    "insertText": "ConvertToSpawnable(FGuid Guid)"
  },
  {
    "label": "AddSubSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSubSequence(UMovieSceneSequence* Sequence)"
  },
  {
    "label": "GetAutoChangeMode()",
    "kind": "Method",
    "detail": "Function (EAutoChangeMode)",
    "insertText": "GetAutoChangeMode()"
  },
  {
    "label": "SetAutoChangeMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAutoChangeMode(EAutoChangeMode AutoChangeMode)"
  },
  {
    "label": "GetAllowEditsMode()",
    "kind": "Method",
    "detail": "Function (EAllowEditsMode)",
    "insertText": "GetAllowEditsMode()"
  },
  {
    "label": "SetAllowEditsMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowEditsMode(EAllowEditsMode AllowEditsMode)"
  },
  {
    "label": "GetKeyGroupMode()",
    "kind": "Method",
    "detail": "Function (EKeyGroupMode)",
    "insertText": "GetKeyGroupMode()"
  },
  {
    "label": "SetKeyGroupMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyGroupMode(EKeyGroupMode Mode)"
  },
  {
    "label": "GetKeyInterpolation()",
    "kind": "Method",
    "detail": "Function (EMovieSceneKeyInterpolation)",
    "insertText": "GetKeyInterpolation()"
  },
  {
    "label": "SetKeyInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyInterpolation(EMovieSceneKeyInterpolation)"
  },
  {
    "label": "GetInfiniteKeyAreas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInfiniteKeyAreas()"
  },
  {
    "label": "SetInfiniteKeyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInfiniteKeyAreas(bool bInfiniteKeyAreas)"
  },
  {
    "label": "GetAutoSetTrackDefaults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAutoSetTrackDefaults()"
  },
  {
    "label": "IsAllowedToChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowedToChange()"
  },
  {
    "label": "GetToolkitHost()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IToolkitHost>)",
    "insertText": "GetToolkitHost()"
  },
  {
    "label": "GetLocalTime()",
    "kind": "Method",
    "detail": "Function (FQualifiedFrameTime)",
    "insertText": "GetLocalTime()"
  },
  {
    "label": "GetGlobalTime()",
    "kind": "Method",
    "detail": "Function (FQualifiedFrameTime)",
    "insertText": "GetGlobalTime()"
  },
  {
    "label": "GetUnwarpedLocalTime()",
    "kind": "Method",
    "detail": "Function (FQualifiedFrameTime)",
    "insertText": "GetUnwarpedLocalTime()"
  },
  {
    "label": "OverrideTimeDomain()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] UE::Sequencer::FTimeDomainOverride)",
    "insertText": "OverrideTimeDomain(UE::Sequencer::ETimeDomain NewDomain)"
  },
  {
    "label": "GetLocalLoopIndex()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetLocalLoopIndex()"
  },
  {
    "label": "SetLocalTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTime(FFrameTime Time, ESnapTimeMode SnapTimeMode = ESnapTimeMode::STM_None, bool bEvaluate = true)"
  },
  {
    "label": "SetLocalTimeDirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLocalTimeDirectly(FFrameTime NewTime, bool bEvaluate = true)"
  },
  {
    "label": "SetGlobalTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalTime(FFrameTime Time, bool bEvaluate = true)"
  },
  {
    "label": "GetLastEvaluatedLocalTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "GetLastEvaluatedLocalTime()"
  },
  {
    "label": "PlayTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayTo(FMovieSceneSequencePlaybackParams PlaybackParams)"
  },
  {
    "label": "SnapSequencerTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapSequencerTime(FFrameTime& InOutScrubTime)"
  },
  {
    "label": "RequestInvalidateCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestInvalidateCachedData()"
  },
  {
    "label": "RequestEvaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestEvaluate()"
  },
  {
    "label": "ForceEvaluate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceEvaluate()"
  },
  {
    "label": "GetLastEvaluatedCameraCut()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UCameraComponent>)",
    "insertText": "GetLastEvaluatedCameraCut()"
  },
  {
    "label": "ResetTimeController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTimeController()"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (FAnimatedRange)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(TRange<double> NewViewRange, EViewRangeInterpolation Interpolation = EViewRangeInterpolation::Animated)"
  },
  {
    "label": "SetClampRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClampRange(TRange<double> NewClampRange)"
  },
  {
    "label": "SetPerspectiveViewportPossessionEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerspectiveViewportPossessionEnabled(bool bEnabled)"
  },
  {
    "label": "IsPerspectiveViewportPossessionEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPerspectiveViewportPossessionEnabled()"
  },
  {
    "label": "IsPerspectiveViewportCameraCutEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPerspectiveViewportCameraCutEnabled()"
  },
  {
    "label": "RenderMovie()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RenderMovie(const TArray<UMovieSceneCinematicShotSection*>& InSections)"
  },
  {
    "label": "RecreateCurveEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateCurveEditor()"
  },
  {
    "label": "SetShowCurveEditor()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetShowCurveEditor(bool bInShowCurveEditor)"
  },
  {
    "label": "GetCurveEditorIsVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCurveEditorIsVisible()"
  },
  {
    "label": "ExitSilentMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitSilentMode()"
  },
  {
    "label": "IsInSilentMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInSilentMode()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save()"
  },
  {
    "label": "OnActorAddedToSequencer()",
    "kind": "Method",
    "detail": "Function (FOnActorAddedToSequencer&)",
    "insertText": "OnActorAddedToSequencer()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(ISequencer, FOnCameraCut, UObject*, bool) virtual FOnCameraCut& OnCameraCut()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ISequencer, FOnPreSave, ISequencer&) virtual FOnPreSave& OnPreSave()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ISequencer, FOnPostSave, ISequencer&) virtual FOnPostSave& OnPostSave()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ISequencer, FOnActivateSequence, FMovieSceneSequenceIDRef) virtual FOnActivateSequence& OnActivateSequence()"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(ISequencer, FOnInitializeDetailsPanel, TSharedRef<IDetailsView>, TSharedRef<ISequencer>) FOnInitializeDetailsPanel& OnInitializeDetailsPanel()"
  },
  {
    "label": "GetObjectChangeListener()",
    "kind": "Method",
    "detail": "Function (class ISequencerObjectChangeListener&)",
    "insertText": "GetObjectChangeListener()"
  },
  {
    "label": "GetPropertyKeyedStatusHandler()",
    "kind": "Method",
    "detail": "Function (class ISequencerPropertyKeyedStatusHandler&)",
    "insertText": "GetPropertyKeyedStatusHandler()"
  },
  {
    "label": "CanKeyProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanKeyProperty(FCanKeyPropertyParams CanKeyPropertyParams)"
  },
  {
    "label": "KeyProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyProperty(FKeyPropertyParams KeyPropertyParams)"
  },
  {
    "label": "GetPropertyKeyedStatus()",
    "kind": "Method",
    "detail": "Function (EPropertyKeyedStatus)",
    "insertText": "GetPropertyKeyedStatus(const IPropertyHandle& PropertyHandle)"
  },
  {
    "label": "RefreshTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTree()"
  },
  {
    "label": "NotifyMovieSceneDataChangedInternal()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NotifyMovieSceneDataChangedInternal()"
  },
  {
    "label": "NotifyMovieSceneDataChanged()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "NotifyMovieSceneDataChanged(EMovieSceneDataChangeType DataChangeType)"
  },
  {
    "label": "UpdatePlaybackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlaybackRange()"
  },
  {
    "label": "SetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeed(float InPlaybackSpeed)"
  },
  {
    "label": "GetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPlaybackSpeed()"
  },
  {
    "label": "RestorePlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestorePlaybackSpeed()"
  },
  {
    "label": "SnapToClosestPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapToClosestPlaybackSpeed()"
  },
  {
    "label": "GetKeysFromSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeysFromSelection(TUniquePtr<FSequencerKeyCollection>& KeyCollection, float DuplicateThresoldTime)"
  },
  {
    "label": "GetKeyCollection()",
    "kind": "Method",
    "detail": "Function (FSequencerKeyCollection*)",
    "insertText": "GetKeyCollection()"
  },
  {
    "label": "OnGetNearestKey()",
    "kind": "Method",
    "detail": "Function (FFrameNumber)",
    "insertText": "OnGetNearestKey(FFrameTime InTime, ENearestKeyOption NearestKeyOption)"
  },
  {
    "label": "GetMarkedFrames()",
    "kind": "Method",
    "detail": "Function (TArray<FMovieSceneMarkedFrame>)",
    "insertText": "GetMarkedFrames()"
  },
  {
    "label": "GetSelectedTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedTracks(TArray<UMovieSceneTrack*>& OutSelectedTracks)"
  },
  {
    "label": "GetSelectedTrackRows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedTrackRows(TArray<TPair<UMovieSceneTrack*, int32>>& OutSelectedTrackRows)"
  },
  {
    "label": "GetSelectedSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedSections(TArray<UMovieSceneSection*>& OutSelectedSections)"
  },
  {
    "label": "GetSelectedFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedFolders(TArray<UMovieSceneFolder*>& OutSelectedFolders)"
  },
  {
    "label": "GetSelectedKeyAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedKeyAreas(TArray<const IKeyArea*>& OutSelectedKeyAreas, bool bIncludeSelectedKeys = true)"
  },
  {
    "label": "GetSelectedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedObjects(TArray<FGuid>& OutSelectedObjects)"
  },
  {
    "label": "SelectObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectObject(FGuid ObjectBinding)"
  },
  {
    "label": "SelectTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectTrack(UMovieSceneTrack* Track)"
  },
  {
    "label": "SelectSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSection(UMovieSceneSection* Section)"
  },
  {
    "label": "SelectFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectFolder(UMovieSceneFolder* Folder)"
  },
  {
    "label": "SelectByPropertyPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByPropertyPaths(const TArray<FString>& InPropertyPaths)"
  },
  {
    "label": "SelectByChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByChannels(UMovieSceneSection* Section, TArrayView<const FMovieSceneChannelHandle> InChannels, bool bSelectParentInstead, bool bSelect)"
  },
  {
    "label": "SelectByChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByChannels(UMovieSceneSection* Section, const TArray<FName>& InChannelNames, bool bSelectParentInstead, bool bSelect)"
  },
  {
    "label": "SelectByNthCategoryNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectByNthCategoryNode(UMovieSceneSection* Section, int Index, bool bSelect)"
  },
  {
    "label": "EmptySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptySelection()"
  },
  {
    "label": "ThrobKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrobKeySelection()"
  },
  {
    "label": "ThrobSectionSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrobSectionSelection()"
  },
  {
    "label": "OnScrubPositionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScrubPositionChanged(FFrameTime NewScrubPosition, bool bScrubbing, bool bEvaluate)"
  },
  {
    "label": "OnBeginScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginScrubbing()"
  },
  {
    "label": "OnEndScrubbing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndScrubbing()"
  },
  {
    "label": "OnGlobalTimeChanged()",
    "kind": "Method",
    "detail": "Function (FOnGlobalTimeChanged&)",
    "insertText": "OnGlobalTimeChanged()"
  },
  {
    "label": "OnPlayEvent()",
    "kind": "Method",
    "detail": "Function (FOnPlayEvent&)",
    "insertText": "OnPlayEvent()"
  },
  {
    "label": "OnStopEvent()",
    "kind": "Method",
    "detail": "Function (FOnStopEvent&)",
    "insertText": "OnStopEvent()"
  },
  {
    "label": "OnRecordEvent()",
    "kind": "Method",
    "detail": "Function (FOnRecordEvent&)",
    "insertText": "OnRecordEvent()"
  },
  {
    "label": "OnBeginScrubbingEvent()",
    "kind": "Method",
    "detail": "Function (FOnBeginScrubbingEvent&)",
    "insertText": "OnBeginScrubbingEvent()"
  },
  {
    "label": "OnEndScrubbingEvent()",
    "kind": "Method",
    "detail": "Function (FOnEndScrubbingEvent&)",
    "insertText": "OnEndScrubbingEvent()"
  },
  {
    "label": "OnTreeViewChanged()",
    "kind": "Method",
    "detail": "Function (FOnTreeViewChanged&)",
    "insertText": "OnTreeViewChanged()"
  },
  {
    "label": "OnMovieSceneDataChanged()",
    "kind": "Method",
    "detail": "Function (FOnMovieSceneDataChanged&)",
    "insertText": "OnMovieSceneDataChanged()"
  },
  {
    "label": "OnChannelChanged()",
    "kind": "Method",
    "detail": "Function (FOnChannelChanged&)",
    "insertText": "OnChannelChanged()"
  },
  {
    "label": "OnMovieSceneBindingsChanged()",
    "kind": "Method",
    "detail": "Function (FOnMovieSceneBindingsChanged&)",
    "insertText": "OnMovieSceneBindingsChanged()"
  },
  {
    "label": "OnMovieSceneBindingsPasted()",
    "kind": "Method",
    "detail": "Function (FOnMovieSceneBindingsPasted&)",
    "insertText": "OnMovieSceneBindingsPasted()"
  },
  {
    "label": "GetSelectionChangedObjectGuids()",
    "kind": "Method",
    "detail": "Function (FOnSelectionChangedObjectGuids&)",
    "insertText": "GetSelectionChangedObjectGuids()"
  },
  {
    "label": "GetSelectionChangedTracks()",
    "kind": "Method",
    "detail": "Function (FOnSelectionChangedTracks&)",
    "insertText": "GetSelectionChangedTracks()"
  },
  {
    "label": "GetSelectionChangedSections()",
    "kind": "Method",
    "detail": "Function (FOnSelectionChangedSections&)",
    "insertText": "GetSelectionChangedSections()"
  },
  {
    "label": "GetCurveDisplayChanged()",
    "kind": "Method",
    "detail": "Function (FOnCurveDisplayChanged&)",
    "insertText": "GetCurveDisplayChanged()"
  },
  {
    "label": "GetNumericTypeInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<INumericTypeInterface<double>>)",
    "insertText": "GetNumericTypeInterface()"
  },
  {
    "label": "GetCommandBindings()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandList>)",
    "insertText": "GetCommandBindings(ESequencerCommandBindings Type = ESequencerCommandBindings::Sequencer)"
  },
  {
    "label": "MakeTransportControls()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTransportControls(bool bExtended)"
  },
  {
    "label": "OnPlay()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPlay(bool bTogglePlay = true)"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "GetSequencerSettings()",
    "kind": "Method",
    "detail": "Function (USequencerSettings*)",
    "insertText": "GetSequencerSettings()"
  },
  {
    "label": "SetSequencerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequencerSettings(USequencerSettings*)"
  },
  {
    "label": "FindSpawnedObjectOrTemplate()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindSpawnedObjectOrTemplate(const FGuid& BindingId)"
  },
  {
    "label": "ExternalSelectionHasChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExternalSelectionHasChanged()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "IsLevelEditorSequencer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelEditorSequencer()"
  },
  {
    "label": "MakeTimeRange()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeTimeRange(const TSharedRef<SWidget>& InnerContent, bool bShowWorkingRange, bool bShowViewRange, bool bShowPlaybackRange)"
  },
  {
    "label": "GetTopTimeSliderWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ITimeSlider>)",
    "insertText": "GetTopTimeSliderWidget()"
  },
  {
    "label": "SetSelectionRangeEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeEnd(FFrameTime EndFrame)"
  },
  {
    "label": "SetSelectionRangeStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRangeStart(FFrameTime StartFrame)"
  },
  {
    "label": "GetSelectionRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetSelectionRange()"
  },
  {
    "label": "GetTrackEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencerTrackEditor>)",
    "insertText": "GetTrackEditor(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "ObjectImplicitlyAdded()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ObjectImplicitlyAdded(UObject* InObject)"
  },
  {
    "label": "ObjectImplicitlyRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectImplicitlyRemoved(UObject* InObject)"
  },
  {
    "label": "GetFilterInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerTrackFilters>)",
    "insertText": "GetFilterInterface()"
  },
  {
    "label": "GetRootTickResolution()",
    "kind": "Method",
    "detail": "Function (public : FFrameRate)",
    "insertText": "GetRootTickResolution()"
  },
  {
    "label": "GetRootDisplayRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetRootDisplayRate()"
  },
  {
    "label": "GetFocusedTickResolution()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetFocusedTickResolution()"
  },
  {
    "label": "GetFocusedDisplayRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetFocusedDisplayRate()"
  },
  {
    "label": "CreateBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "CreateBinding(UObject& InObject, const FString& InName)"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName(FGuid InBinding)"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayName(FGuid InBinding, const FText& InDisplayName)"
  },
  {
    "label": "GetSupportedCustomBindingTypes()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TSubclassOf<UMovieSceneCustomBinding>>)",
    "insertText": "GetSupportedCustomBindingTypes()"
  },
  {
    "label": "RefreshSupportedCustomBindingTypes()",
    "kind": "Method",
    "detail": "Function (TArray<TSubclassOf<UMovieSceneCustomBinding>> EmptyArray ; return EmptyArray ; } void)",
    "insertText": "RefreshSupportedCustomBindingTypes()"
  },
  {
    "label": "IsViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsViewportSelectionLimited()"
  },
  {
    "label": "SetViewportSelectionLimited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportSelectionLimited(const bool bInSelectionLimited)"
  },
  {
    "label": "IsObjectSelectableInViewport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectSelectableInViewport(UObject* const InObject)"
  },
  {
    "label": "OnViewportSelectionLimitedChanged()",
    "kind": "Method",
    "detail": "Function (FOnViewportSelectionLimitedChanged&)",
    "insertText": "OnViewportSelectionLimitedChanged()"
  },
  {
    "label": "RegisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawer(FSidebarDrawerConfig&& InDrawerConfig)"
  },
  {
    "label": "UnregisterDrawer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawer(const FName InDrawerId)"
  },
  {
    "label": "RegisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDrawerSection(const FName InDrawerId, const TSharedPtr<ISidebarDrawerContent>& InSection)"
  },
  {
    "label": "UnregisterDrawerSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterDrawerSection(const FName InDrawerId, const FName InSectionId)"
  },
  {
    "label": "TrackSupportsConditions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TrackSupportsConditions(const UMovieSceneTrack* Track)"
  }
]