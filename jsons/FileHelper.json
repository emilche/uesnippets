[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "IPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformFile"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FFileHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileHelper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "BufferToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" HAL / FileManager . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Color . h \" # include \" Math / MathFwd . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / UnrealTemplate . h \" class FArchive ; class FText ; class IPlatformFile ; template<FuncType> class TFunctionRef ; struct FFileHelper { enum class EHashOptions { None = 0,EnableVerify = 1<<0,ErrorMissingHash = 1<<1 } ; enum class EEncodingOptions { AutoDetect,ForceAnsi,ForceUnicode,ForceUTF8,ForceUTF8WithoutBOM } ; enum class EColorChannel { R,G,B,A,All } ; void)",
    "insertText": "BufferToString(FString& Result, const uint8* Buffer, int32 Size)"
  },
  {
    "label": "LoadFileToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToArray(TArray<uint8>& Result, const TCHAR* Filename, uint32 Flags = 0)"
  },
  {
    "label": "LoadFileToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToArray(TArray64<uint8>& Result, const TCHAR* Filename, uint32 Flags = 0)"
  },
  {
    "label": "LoadFileToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToString(FString& Result, FArchive& Reader, EHashOptions VerifyFlags = EHashOptions::None)"
  },
  {
    "label": "LoadFileToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToString(FString& Result, const TCHAR* Filename, EHashOptions VerifyFlags = EHashOptions::None, uint32 ReadFlags = 0)"
  },
  {
    "label": "LoadFileToString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToString(FString& Result, IPlatformFile* PlatformFile, const TCHAR* Filename, EHashOptions VerifyFlags = EHashOptions::None, uint32 ReadFlags = 0)"
  },
  {
    "label": "LoadFileToStringArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToStringArray(TArray<FString>& Result, const TCHAR* Filename)"
  },
  {
    "label": "LoadFileToStringArrayWithPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToStringArrayWithPredicate(TArray<FString>& Result, const TCHAR* Filename, TFunctionRef<bool(const FString&)> Predicate)"
  },
  {
    "label": "LoadFileToStringWithLineVisitor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFileToStringWithLineVisitor(const TCHAR* Filename, TFunctionRef<void(FStringView Line)> Visitor)"
  },
  {
    "label": "SaveArrayToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveArrayToFile(TArrayView64<const uint8> Array, const TCHAR* Filename, IFileManager* FileManager = &IFileManager::Get(), uint32 WriteFlags = 0)"
  },
  {
    "label": "SaveArrayToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveArrayToFile(const TArray64<uint8>& Array, const TCHAR* Filename, IFileManager* FileManager = &IFileManager::Get(), uint32 WriteFlags = 0)"
  },
  {
    "label": "SaveStringToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveStringToFile(FStringView String, const TCHAR* Filename, EEncodingOptions EncodingOptions = EEncodingOptions::AutoDetect, IFileManager* FileManager = &IFileManager::Get(), uint32 WriteFlags = 0)"
  },
  {
    "label": "SaveStringArrayToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveStringArrayToFile(const TArray<FString>& Lines, const TCHAR* Filename, EEncodingOptions EncodingOptions = EEncodingOptions::AutoDetect, IFileManager* FileManager = &IFileManager::Get(), uint32 WriteFlags = 0)"
  },
  {
    "label": "CreateBitmap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateBitmap(const TCHAR* Pattern, int32 DataWidth, int32 DataHeight, const struct FColor* Data, FIntRect* SubRectangle = NULL, IFileManager* FileManager = &IFileManager::Get(), FString* OutFilename = NULL, bool bInWriteAlpha = false, EColorChannel ColorChannel = EColorChannel::All)"
  },
  {
    "label": "GenerateNextBitmapFilename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateNextBitmapFilename(const FString& Pattern, const FString& Extension, FString& OutFilename, IFileManager* FileManager = &IFileManager::Get())"
  },
  {
    "label": "GenerateDateTimeBasedBitmapFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateDateTimeBasedBitmapFilename(const FString& Pattern, const FString& Extension, FString& OutFilename)"
  },
  {
    "label": "LoadANSITextFileToStrings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadANSITextFileToStrings(const TCHAR* InFilename, IFileManager* InFileManager, TArray<FString>& OutStrings)"
  },
  {
    "label": "IsFilenameValidForSaving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilenameValidForSaving(const FString& Filename, FText& OutError)"
  },
  {
    "label": "STRUCT_OFFSET()",
    "kind": "Method",
    "detail": "Function (R =)",
    "insertText": "STRUCT_OFFSET(FColor, R), G = STRUCT_OFFSET(FColor, G), B = STRUCT_OFFSET(FColor, B), A = STRUCT_OFFSET(FColor, A)"
  }
]