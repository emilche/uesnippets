[
  {
    "label": "rcLogCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcLogCategory"
  },
  {
    "label": "rcTimerLabel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcTimerLabel"
  },
  {
    "label": "rcContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rcContext"
  },
  {
    "label": "rcRegionPartitioning",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcRegionPartitioning"
  },
  {
    "label": "rcBorderSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcBorderSize"
  },
  {
    "label": "rcConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcConfig"
  },
  {
    "label": "rcSpanData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpanData"
  },
  {
    "label": "rcSpanCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpanCache"
  },
  {
    "label": "rcSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpan"
  },
  {
    "label": "rcSpanPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpanPool"
  },
  {
    "label": "rcRowExt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcRowExt"
  },
  {
    "label": "rcEdgeHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcEdgeHit"
  },
  {
    "label": "rcTempSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcTempSpan"
  },
  {
    "label": "rcHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfield"
  },
  {
    "label": "rcCompactCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactCell"
  },
  {
    "label": "rcCompactSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactSpan"
  },
  {
    "label": "rcCompactHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactHeightfield"
  },
  {
    "label": "rcHeightfieldLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfieldLayer"
  },
  {
    "label": "rcHeightfieldLayerSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfieldLayerSet"
  },
  {
    "label": "rcContour",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcContour"
  },
  {
    "label": "rcContourSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcContourSet"
  },
  {
    "label": "rcClusterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcClusterSet"
  },
  {
    "label": "rcPolyMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcPolyMesh"
  },
  {
    "label": "rcPolyMeshDetail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcPolyMeshDetail"
  },
  {
    "label": "rcBuildContoursFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcBuildContoursFlags"
  },
  {
    "label": "rcFilterLowAreaFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcFilterLowAreaFlags"
  },
  {
    "label": "rcRasterizationFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcRasterizationFlags"
  },
  {
    "label": "rcNeighborSlopeFilterMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcNeighborSlopeFilterMode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "sinf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sinf(x)"
  },
  {
    "label": "sin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sin(x)"
  },
  {
    "label": "cosf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cosf(x)"
  },
  {
    "label": "cos()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cos(x)"
  },
  {
    "label": "floorf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "floorf(x)"
  },
  {
    "label": "floor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "floor(x)"
  },
  {
    "label": "ceilf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ceilf(x)"
  },
  {
    "label": "ceil()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ceil(x)"
  },
  {
    "label": "fabsf()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "fabsf(x)"
  },
  {
    "label": "fabs()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "fabs(x)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (NAVMESH_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogRecast, Log, All)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "log(const rcLogCategory category, const char* format, ...)"
  },
  {
    "label": "rcFreeHeightField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeHeightField(rcHeightfield* hf)"
  },
  {
    "label": "rcFreeCompactHeightfield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeCompactHeightfield(rcCompactHeightfield* chf)"
  },
  {
    "label": "rcFreeHeightfieldLayerSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeHeightfieldLayerSet(rcHeightfieldLayerSet* lset)"
  },
  {
    "label": "rcFreeContourSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeContourSet(rcContourSet* cset)"
  },
  {
    "label": "rcFreeClusterSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeClusterSet(rcClusterSet* clset)"
  },
  {
    "label": "rcFreePolyMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreePolyMesh(rcPolyMesh* pmesh)"
  },
  {
    "label": "rcFreePolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreePolyMeshDetail(rcPolyMeshDetail* dmesh)"
  },
  {
    "label": "rcSqrt()",
    "kind": "Method",
    "detail": "Function (rcReal)",
    "insertText": "rcSqrt(rcReal x)"
  },
  {
    "label": "rcSqrt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "rcSqrt(dx*dx + dy*dy + dz*dz)"
  },
  {
    "label": "rcCalcTriNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcCalcTriNormals(const rcReal* verts, const int nv, const int* tris, const int nt, rcReal* norms)"
  },
  {
    "label": "rcCalcBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcCalcBounds(const rcReal* verts, int nv, rcReal* bmin, rcReal* bmax)"
  },
  {
    "label": "rcCalcGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcCalcGridSize(const rcReal* bmin, const rcReal* bmax, rcReal cs, int* w, int* h)"
  },
  {
    "label": "rcCreateHeightfield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcCreateHeightfield(rcContext* ctx, rcHeightfield& hf, int width, int height,\n\t\t\t\t\t\t const rcReal* bmin, const rcReal* bmax,\n\t\t\t\t\t\t rcReal cs, rcReal ch)"
  },
  {
    "label": "rcResetHeightfield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcResetHeightfield(rcHeightfield& hf)"
  },
  {
    "label": "rcMarkWalkableTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkWalkableTriangles(rcContext* ctx, const rcReal walkableSlopeAngle, const rcReal* verts, int nv,\n\t\t\t\t\t\t\t const int* tris, int nt, unsigned char* areas)"
  },
  {
    "label": "rcMarkWalkableTrianglesCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkWalkableTrianglesCos(rcContext* ctx, const rcReal walkableSlopeCos, const rcReal* verts, int nv,\n\t\t\t\t\t\t\t    const int* tris, int nt, unsigned char* areas)"
  },
  {
    "label": "rcClearUnwalkableTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcClearUnwalkableTriangles(rcContext* ctx, const rcReal walkableSlopeAngle, const rcReal* verts, int nv,\n\t\t\t\t\t\t\t\tconst int* tris, int nt, unsigned char* areas)"
  },
  {
    "label": "rcAddSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcAddSpan(rcContext* ctx, rcHeightfield& hf, const int x, const int y,\n\t\t\t   const unsigned short smin, const unsigned short smax,\n\t\t\t   const unsigned char area, const int flagMergeThr)"
  },
  {
    "label": "rcAddSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcAddSpans(rcContext* ctx, rcHeightfield& hf, const int flagMergeThr,\n\t\t\t    const rcSpanCache* cachedSpans, const int nspans)"
  },
  {
    "label": "rcCountSpans()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rcCountSpans(rcContext* ctx, rcHeightfield& hf)"
  },
  {
    "label": "rcCacheSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcCacheSpans(rcContext* ctx, rcHeightfield& hf, rcSpanCache* cachedSpans)"
  },
  {
    "label": "rcRasterizeTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangle(rcContext* ctx, const rcReal* v0, const rcReal* v1, const rcReal* v2,\n\t\t\t\t\t\t const unsigned char area, rcHeightfield& solid,\n\t\t\t\t\t\t const int flagMergeThr = 1, \n\t\t\t\t\t\t const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcRasterizeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangles(rcContext* ctx, const rcReal* verts, const int nv,\n\t\t\t\t\t\t  const int* tris, const unsigned char* areas, const int nt,\n\t\t\t\t\t\t  rcHeightfield& solid, const int flagMergeThr = 1, \n\t\t\t\t\t\t  const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcRasterizeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangles(rcContext* ctx, const rcReal* verts, const int nv,\n\t\t\t\t\t\t  const unsigned short* tris, const unsigned char* areas, const int nt,\n\t\t\t\t\t\t  rcHeightfield& solid, const int flagMergeThr = 1, \n\t\t\t\t\t\t  const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcRasterizeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangles(rcContext* ctx, const rcReal* verts, const unsigned char* areas, const int nt,\n\t\t\t\t\t\t  rcHeightfield& solid, const int flagMergeThr = 1,\n\t\t\t\t\t\t  const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcFilterLowHangingWalkableObstacles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterLowHangingWalkableObstacles(rcContext* ctx, const int walkableClimb, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterLedgeSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterLedgeSpans(rcContext* ctx, const int walkableHeight, const int walkableClimb,\n\t\t\t\t\tconst rcNeighborSlopeFilterMode neighborSlopeFilterMode, const rcReal maxStepFromWalkableSlope, const rcReal ch, const int yStart, const int maxYProcess, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterLedgeSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterLedgeSpans(rcContext* ctx, const int walkableHeight, const int walkableClimb,\n\t\t\t\t\tconst rcNeighborSlopeFilterMode neighborSlopeFilterMode, const rcReal maxStepFromWalkableSlope, const rcReal ch, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterWalkableLowHeightSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterWalkableLowHeightSpans(rcContext* ctx, int walkableHeight, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterWalkableLowHeightSpansSequences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterWalkableLowHeightSpansSequences(rcContext* ctx, int walkableHeight, rcHeightfield& solid)"
  },
  {
    "label": "rcGetHeightFieldSpanCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rcGetHeightFieldSpanCount(rcContext* ctx, rcHeightfield& hf)"
  },
  {
    "label": "rcBuildCompactHeightfield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildCompactHeightfield(rcContext* ctx, const int walkableHeight, const int walkableClimb,\n\t\t\t\t\t\t\t   rcHeightfield& hf, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcErodeWalkableArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcErodeWalkableArea(rcContext* ctx, int radius, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcErodeWalkableAndLowAreas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcErodeWalkableAndLowAreas(rcContext* ctx, int radius, unsigned int height,\n\t\t\t\t\t\t\t\t\t\t\tunsigned char areaId, unsigned char filterFlags,\n\t\t\t\t\t\t\t\t\t\t\trcCompactHeightfield& chf)"
  },
  {
    "label": "rcMedianFilterWalkableArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMedianFilterWalkableArea(rcContext* ctx, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcMarkLowAreas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMarkLowAreas(rcContext* ctx, unsigned int height, unsigned char areaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcMarkBoxArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkBoxArea(rcContext* ctx, const rcReal* bmin, const rcReal* bmax, unsigned char areaId,\n\t\t\t\t   rcCompactHeightfield& chf)"
  },
  {
    "label": "rcMarkConvexPolyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkConvexPolyArea(rcContext* ctx, const rcReal* verts, const int nverts,\n\t\t\t\t\t\t  const rcReal hmin, const rcReal hmax, unsigned char areaId,\n\t\t\t\t\t\t  rcCompactHeightfield& chf)"
  },
  {
    "label": "rcOffsetPoly()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rcOffsetPoly(const rcReal* verts, const int nverts, const rcReal offset,\n\t\t\t\t rcReal* outVerts, const int maxOutVerts)"
  },
  {
    "label": "rcMarkCylinderArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkCylinderArea(rcContext* ctx, const rcReal* pos,\n\t\t\t\t\t\tconst rcReal r, const rcReal h, unsigned char areaId,\n\t\t\t\t\t\trcCompactHeightfield& chf)"
  },
  {
    "label": "rcReplaceBoxArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcReplaceBoxArea(rcContext* ctx, const rcReal* bmin, const rcReal* bmax,\n\tunsigned char areaId, unsigned char filterAreaId,\n\trcCompactHeightfield& chf)"
  },
  {
    "label": "rcReplaceConvexPolyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcReplaceConvexPolyArea(rcContext* ctx, const rcReal* verts, const int nverts,\n\tconst rcReal hmin, const rcReal hmax, unsigned char areaId, unsigned char filterAreaId,\n\trcCompactHeightfield& chf)"
  },
  {
    "label": "rcReplaceCylinderArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcReplaceCylinderArea(rcContext* ctx, const rcReal* pos,\n\tconst rcReal r, const rcReal h, unsigned char areaId, unsigned char filterAreaId,\n\trcCompactHeightfield& chf)"
  },
  {
    "label": "rcBuildDistanceField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildDistanceField(rcContext* ctx, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcBuildRegions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildRegions(rcContext* ctx, rcCompactHeightfield& chf,\n\t\t\t\t\tconst int borderSize, const int minRegionArea, const int mergeRegionArea)"
  },
  {
    "label": "rcBuildRegionsMonotone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildRegionsMonotone(rcContext* ctx, rcCompactHeightfield& chf,\n\t\t\t\t\t\t\tconst rcBorderSize borderSize, const int minRegionArea, const int mergeRegionArea)"
  },
  {
    "label": "rcBuildRegionsChunky()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildRegionsChunky(rcContext* ctx, rcCompactHeightfield& chf,\n\t\t\t\t\t\t  const rcBorderSize borderSize, const int minRegionArea, const int mergeRegionArea,\t\t//@UE\n\t\t\t\t\t\t  const int chunkSize)"
  },
  {
    "label": "rcBuildHeightfieldLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildHeightfieldLayers(rcContext* ctx, rcCompactHeightfield& chf,\n\t\t\t\t\t\t\t  const rcBorderSize borderSize, const int walkableHeight,\t\t//@UE\n\t\t\t\t\t\t\t  rcHeightfieldLayerSet& lset)"
  },
  {
    "label": "rcBuildHeightfieldLayersMonotone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildHeightfieldLayersMonotone(rcContext* ctx, rcCompactHeightfield& chf,\n\t\t\t\t\t\t\t\t\t  const rcBorderSize borderSize, const int walkableHeight,\t\t//@UE\n\t\t\t\t\t\t\t\t\t  rcHeightfieldLayerSet& lset)"
  },
  {
    "label": "rcBuildHeightfieldLayersChunky()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildHeightfieldLayersChunky(rcContext* ctx, rcCompactHeightfield& chf,\n\t\t\t\t\t\t\t\t\tconst rcBorderSize borderSize, const int walkableHeight,\t\t//@UE\n\t\t\t\t\t\t\t\t\tconst int chunkSize,\n\t\t\t\t\t\t\t\t\trcHeightfieldLayerSet& lset)"
  },
  {
    "label": "rcBuildContours()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildContours(rcContext* ctx, rcCompactHeightfield& chf,\n\t\t\t\t\t const rcReal maxError, const int maxEdgeLen,\n\t\t\t\t\t rcContourSet& cset, const int flags = RC_CONTOUR_TESS_WALL_EDGES)"
  },
  {
    "label": "rcBuildClusters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildClusters(rcContext* ctx, rcContourSet& cset, rcClusterSet& clusters)"
  },
  {
    "label": "rcBuildPolyMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildPolyMesh(rcContext* ctx, rcContourSet& cset, const int nvp, rcPolyMesh& mesh)"
  },
  {
    "label": "rcMergePolyMeshes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMergePolyMeshes(rcContext* ctx, rcPolyMesh** meshes, const int nmeshes, rcPolyMesh& mesh)"
  },
  {
    "label": "rcBuildPolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildPolyMeshDetail(rcContext* ctx, const rcPolyMesh& mesh, const rcCompactHeightfield& chf,\n\t\t\t\t\t\t   const rcReal sampleDist, const rcReal sampleMaxError,\n\t\t\t\t\t\t   rcPolyMeshDetail& dmesh)"
  },
  {
    "label": "rcCopyPolyMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcCopyPolyMesh(rcContext* ctx, const rcPolyMesh& src, rcPolyMesh& dst)"
  },
  {
    "label": "rcMergePolyMeshDetails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMergePolyMeshDetails(rcContext* ctx, rcPolyMeshDetail** meshes, const int nmeshes, rcPolyMeshDetail& mesh)"
  }
]