[
  {
    "label": "rcLogCategory",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcLogCategory"
  },
  {
    "label": "rcTimerLabel",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcTimerLabel"
  },
  {
    "label": "rcContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "rcContext"
  },
  {
    "label": "rcRegionPartitioning",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcRegionPartitioning"
  },
  {
    "label": "rcBorderSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcBorderSize"
  },
  {
    "label": "rcConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcConfig"
  },
  {
    "label": "rcSpanData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpanData"
  },
  {
    "label": "rcSpanCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpanCache"
  },
  {
    "label": "rcSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpan"
  },
  {
    "label": "rcSpanPool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcSpanPool"
  },
  {
    "label": "rcRowExt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcRowExt"
  },
  {
    "label": "rcEdgeHit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcEdgeHit"
  },
  {
    "label": "rcTempSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcTempSpan"
  },
  {
    "label": "rcHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfield"
  },
  {
    "label": "rcCompactCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactCell"
  },
  {
    "label": "rcCompactSpan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactSpan"
  },
  {
    "label": "rcCompactHeightfield",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcCompactHeightfield"
  },
  {
    "label": "rcHeightfieldLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfieldLayer"
  },
  {
    "label": "rcHeightfieldLayerSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcHeightfieldLayerSet"
  },
  {
    "label": "rcContour",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcContour"
  },
  {
    "label": "rcContourSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcContourSet"
  },
  {
    "label": "rcClusterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcClusterSet"
  },
  {
    "label": "rcPolyMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcPolyMesh"
  },
  {
    "label": "rcPolyMeshDetail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rcPolyMeshDetail"
  },
  {
    "label": "rcBuildContoursFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcBuildContoursFlags"
  },
  {
    "label": "rcFilterLowAreaFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcFilterLowAreaFlags"
  },
  {
    "label": "rcRasterizationFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcRasterizationFlags"
  },
  {
    "label": "rcNeighborSlopeFilterMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "rcNeighborSlopeFilterMode"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "rcSin()",
    "kind": "Method",
    "detail": "Function (# ifndef RECAST_H # define RECAST_H # include \" CoreMinimal . h \" # include \" Logging / LogMacros . h \" # include \" RecastLargeWorldCoordinates . h \" const rcReal RC_PI = 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 ; float)",
    "insertText": "rcSin(float x)"
  },
  {
    "label": "rcSin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "rcSin(double x)"
  },
  {
    "label": "rcCos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "rcCos(float x)"
  },
  {
    "label": "rcCos()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "rcCos(double x)"
  },
  {
    "label": "rcFloor()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "rcFloor(float x)"
  },
  {
    "label": "rcFloor()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "rcFloor(double x)"
  },
  {
    "label": "rcCeil()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "rcCeil(float x)"
  },
  {
    "label": "rcCeil()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "rcCeil(double x)"
  },
  {
    "label": "rcAbs()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "rcAbs(float x)"
  },
  {
    "label": "rcAbs()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "rcAbs(double x)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (} enum rcLogCategory { RC_LOG_PROGRESS = 1,RC_LOG_WARNING,RC_LOG_ERROR,} ; enum rcTimerLabel { RC_TIMER_TOTAL,RC_TIMER_TEMP,RC_TIMER_RASTERIZE_TRIANGLES,RC_TIMER_BUILD_COMPACTHEIGHTFIELD,RC_TIMER_BUILD_CONTOURS,RC_TIMER_BUILD_CONTOURS_TRACE,RC_TIMER_BUILD_CONTOURS_SIMPLIFY,RC_TIMER_BUILD_CLUSTERS,RC_TIMER_FILTER_BORDER,RC_TIMER_FILTER_WALKABLE,RC_TIMER_MEDIAN_AREA,RC_TIMER_FILTER_LOW_OBSTACLES,RC_TIMER_BUILD_POLYMESH,RC_TIMER_MERGE_POLYMESH,RC_TIMER_ERODE_AREA,RC_TIMER_MARK_BOX_AREA,RC_TIMER_MARK_CYLINDER_AREA,RC_TIMER_MARK_CONVEXPOLY_AREA,RC_TIMER_BUILD_DISTANCEFIELD,RC_TIMER_BUILD_DISTANCEFIELD_DIST,RC_TIMER_BUILD_DISTANCEFIELD_BLUR,RC_TIMER_BUILD_REGIONS,RC_TIMER_BUILD_REGIONS_WATERSHED,RC_TIMER_BUILD_REGIONS_EXPAND,RC_TIMER_BUILD_REGIONS_FLOOD,RC_TIMER_BUILD_REGIONS_FILTER,RC_TIMER_BUILD_LAYERS,RC_TIMER_BUILD_POLYMESHDETAIL,RC_TIMER_MERGE_POLYMESHDETAIL,RC_MAX_TIMERS } ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogRecast, Log, All)"
  },
  {
    "label": "rcContext()",
    "kind": "Method",
    "detail": "Function (class rcContext { public :)",
    "insertText": "rcContext(bool state = true) : m_logEnabled(state), m_timerEnabled(state)"
  },
  {
    "label": "rcContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "rcContext()"
  },
  {
    "label": "enableLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "enableLog(bool state)"
  },
  {
    "label": "resetLog()",
    "kind": "Method",
    "detail": "Function (m_logEnabled = state ; } void)",
    "insertText": "resetLog()"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "log(const rcLogCategory category, const char* format, ...)"
  },
  {
    "label": "enableTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enableTimer(bool state)"
  },
  {
    "label": "resetTimers()",
    "kind": "Method",
    "detail": "Function (m_timerEnabled = state ; } void)",
    "insertText": "resetTimers()"
  },
  {
    "label": "startTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "startTimer(const rcTimerLabel label)"
  },
  {
    "label": "stopTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "stopTimer(const rcTimerLabel label)"
  },
  {
    "label": "getAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getAccumulatedTime(const rcTimerLabel label)"
  },
  {
    "label": "doResetLog()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "doResetLog()"
  },
  {
    "label": "doLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "doLog(const rcLogCategory , const char* , const int)"
  },
  {
    "label": "doResetTimers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "doResetTimers()"
  },
  {
    "label": "doStartTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "doStartTimer(const rcTimerLabel)"
  },
  {
    "label": "doStopTimer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "doStopTimer(const rcTimerLabel)"
  },
  {
    "label": "doGetAccumulatedTime()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "doGetAccumulatedTime(const rcTimerLabel)"
  },
  {
    "label": "rcAllocHeightfield()",
    "kind": "Method",
    "detail": "Function (const int RC_SPANS_PER_POOL = 2 0 4 8 ; typedef unsigned int rcSpanUInt ; struct rcSpanData { rcSpanUInt smin : RC_SPAN_HEIGHT_BITS ; rcSpanUInt smax : RC_SPAN_HEIGHT_BITS ; unsigned int area : 6 ; } ; struct rcSpanCache { unsigned short x ; unsigned short y ; rcSpanData data ; } ; struct rcSpan { rcSpanData data ; rcSpan* next ; } ; struct rcSpanPool { rcSpanPool* next ; rcSpan items [ RC_SPANS_PER_POOL ] ; } ; # define EPIC_ADDITION_USE_NEW_RECAST_RASTERIZER 1 # if EPIC_ADDITION_USE_NEW_RECAST_RASTERIZER struct rcRowExt { int MinCol ; int MaxCol ; } ; struct rcEdgeHit { unsigned char Hits [ 2 ] ; } ; struct rcTempSpan { int sminmax [ 2 ] ; } ; # endif struct rcHeightfield { int width ; int height ; rcReal bmin [ 3 ] ; rcReal bmax [ 3 ] ; rcReal cs ; rcReal ch ; rcSpan** spans ; rcSpanPool* pools ; rcSpan* freelist ; # if EPIC_ADDITION_USE_NEW_RECAST_RASTERIZER rcEdgeHit* EdgeHits ; rcRowExt* RowExt ; rcTempSpan* tempspans ; # endif } ; struct rcCompactCell { unsigned int index : 2 4 ; unsigned int count : 8 ; } ; struct rcCompactSpan { rcSpanUInt y ; unsigned int con ; unsigned short reg ; unsigned char h ; } ; struct rcCompactHeightfield { int width ; int height ; int spanCount ; int walkableHeight ; int walkableClimb ; rcBorderSize borderSize ; unsigned short maxDistance ; unsigned short maxRegions ; rcReal bmin [ 3 ] ; rcReal bmax [ 3 ] ; rcReal cs ; rcReal ch ; rcCompactCell* cells ; rcCompactSpan* spans ; unsigned short* dist ; unsigned char* areas ; } ; struct rcHeightfieldLayer { rcReal bmin [ 3 ] ; rcReal bmax [ 3 ] ; rcReal cs ; rcReal ch ; int width ; int height ; int minx ; int maxx ; int miny ; int maxy ; int hmin ; int hmax ; unsigned short* heights ; unsigned char* areas ; unsigned char* cons ; } ; struct rcHeightfieldLayerSet { rcHeightfieldLayer* layers ; int nlayers ; } ; struct rcContour { int* verts ; int nverts ; int* rverts ; int nrverts ; unsigned short reg ; unsigned char area ; } ; struct rcContourSet { rcContour* conts ; int nconts ; rcReal bmin [ 3 ] ; rcReal bmax [ 3 ] ; rcReal cs ; rcReal ch ; int width ; int height ; rcBorderSize borderSize ; } ; # if WITH_NAVMESH_CLUSTER_LINKS struct rcClusterSet { int nclusters ; rcReal* center ; unsigned short* nlinks ; unsigned short* links ; } ; # endif struct rcPolyMesh { unsigned short* verts ; unsigned short* polys ; unsigned short* regs ; unsigned short* flags ; unsigned char* areas ; int nverts ; int npolys ; int maxpolys ; int nvp ; rcReal bmin [ 3 ] ; rcReal bmax [ 3 ] ; rcReal cs ; rcReal ch ; rcBorderSize borderSize ; } ; struct rcPolyMeshDetail { unsigned int* meshes ; rcReal* verts ; unsigned char* tris ; int nmeshes ; int nverts ; int ntris ; } ; rcHeightfield*)",
    "insertText": "rcAllocHeightfield()"
  },
  {
    "label": "rcFreeHeightField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeHeightField(rcHeightfield* hf)"
  },
  {
    "label": "rcAllocCompactHeightfield()",
    "kind": "Method",
    "detail": "Function (rcCompactHeightfield*)",
    "insertText": "rcAllocCompactHeightfield()"
  },
  {
    "label": "rcFreeCompactHeightfield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeCompactHeightfield(rcCompactHeightfield* chf)"
  },
  {
    "label": "rcAllocHeightfieldLayerSet()",
    "kind": "Method",
    "detail": "Function (rcHeightfieldLayerSet*)",
    "insertText": "rcAllocHeightfieldLayerSet()"
  },
  {
    "label": "rcFreeHeightfieldLayerSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeHeightfieldLayerSet(rcHeightfieldLayerSet* lset)"
  },
  {
    "label": "rcAllocContourSet()",
    "kind": "Method",
    "detail": "Function (rcContourSet*)",
    "insertText": "rcAllocContourSet()"
  },
  {
    "label": "rcFreeContourSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeContourSet(rcContourSet* cset)"
  },
  {
    "label": "rcAllocClusterSet()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS rcClusterSet*)",
    "insertText": "rcAllocClusterSet()"
  },
  {
    "label": "rcFreeClusterSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreeClusterSet(rcClusterSet* clset)"
  },
  {
    "label": "rcAllocPolyMesh()",
    "kind": "Method",
    "detail": "Function (# endif rcPolyMesh*)",
    "insertText": "rcAllocPolyMesh()"
  },
  {
    "label": "rcFreePolyMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreePolyMesh(rcPolyMesh* pmesh)"
  },
  {
    "label": "rcAllocPolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (rcPolyMeshDetail*)",
    "insertText": "rcAllocPolyMeshDetail()"
  },
  {
    "label": "rcFreePolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFreePolyMeshDetail(rcPolyMeshDetail* dmesh)"
  },
  {
    "label": "rcSwap()",
    "kind": "Method",
    "detail": "Function (const unsigned short RC_BORDER_REG = 0 x8000 ; const int RC_BORDER_VERTEX = 0 x10000 ; const int RC_AREA_BORDER = 0 x20000 ; enum rcBuildContoursFlags { RC_CONTOUR_TESS_WALL_EDGES = 0 x01,RC_CONTOUR_TESS_AREA_EDGES = 0 x02,} ; enum rcFilterLowAreaFlags { RC_LOW_FILTER_SEED_SPANS = 0 x01,RC_LOW_FILTER_POST_PROCESS = 0 x02,} ; enum rcRasterizationFlags { RC_PROJECT_TO_BOTTOM = 1<<0,} ; enum rcNeighborSlopeFilterMode { RC_SLOPE_FILTER_RECAST,RC_SLOPE_FILTER_NONE,RC_SLOPE_FILTER_USE_HEIGHT_FROM_WALKABLE_SLOPE } ; const int RC_CONTOUR_REG_MASK = 0 xffff ; const unsigned short RC_MESH_NULL_IDX = 0 xffff ; const unsigned char RC_NULL_AREA = 0 ; const unsigned char RC_WALKABLE_AREA = 6 3 ; const int RC_NOT_CONNECTED = 0 xff ; template<class T> void)",
    "insertText": "rcSwap(T& a, T& b)"
  },
  {
    "label": "rcMin()",
    "kind": "Method",
    "detail": "Function (T t = a ; a = b ; b = t ; } template<class T> T)",
    "insertText": "rcMin(T a, T b)"
  },
  {
    "label": "rcMax()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "rcMax(T a, T b)"
  },
  {
    "label": "rcAbs()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "rcAbs(T a)"
  },
  {
    "label": "rcClamp()",
    "kind": "Method",
    "detail": "Function (} rcReal)",
    "insertText": "rcClamp(rcReal v, rcReal mn, rcReal mx)"
  },
  {
    "label": "rcSqrt()",
    "kind": "Method",
    "detail": "Function (} rcReal)",
    "insertText": "rcSqrt(rcReal x)"
  },
  {
    "label": "rcVcross()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcVcross(rcReal* dest, const rcReal* v1, const rcReal* v2)"
  },
  {
    "label": "rcVdot()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 1 ]* v2 [ 2 ] - v1 [ 2 ]* v2 [ 1 ] ; dest [ 1 ] = v1 [ 2 ]* v2 [ 0 ] - v1 [ 0 ]* v2 [ 2 ] ; dest [ 2 ] = v1 [ 0 ]* v2 [ 1 ] - v1 [ 1 ]* v2 [ 0 ] ; } rcReal)",
    "insertText": "rcVdot(const rcReal* v1, const rcReal* v2)"
  },
  {
    "label": "rcVadd()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 0 ] + v2 [ 0 ]* s ; dest [ 1 ] = v1 [ 1 ] + v2 [ 1 ]* s ; dest [ 2 ] = v1 [ 2 ] + v2 [ 2 ]* s ; } void)",
    "insertText": "rcVadd(rcReal* dest, const rcReal* v1, const rcReal* v2)"
  },
  {
    "label": "rcVsub()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 0 ] + v2 [ 0 ] ; dest [ 1 ] = v1 [ 1 ] + v2 [ 1 ] ; dest [ 2 ] = v1 [ 2 ] + v2 [ 2 ] ; } void)",
    "insertText": "rcVsub(rcReal* dest, const rcReal* v1, const rcReal* v2)"
  },
  {
    "label": "rcVmin()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v1 [ 0 ] - v2 [ 0 ] ; dest [ 1 ] = v1 [ 1 ] - v2 [ 1 ] ; dest [ 2 ] = v1 [ 2 ] - v2 [ 2 ] ; } void)",
    "insertText": "rcVmin(rcReal* mn, const rcReal* v)"
  },
  {
    "label": "rcMin()",
    "kind": "Method",
    "detail": "Function (mn [ 0 ] =)",
    "insertText": "rcMin(mn[0], v[0])"
  },
  {
    "label": "rcMin()",
    "kind": "Method",
    "detail": "Function (mn [ 1 ] =)",
    "insertText": "rcMin(mn[1], v[1])"
  },
  {
    "label": "rcMin()",
    "kind": "Method",
    "detail": "Function (mn [ 2 ] =)",
    "insertText": "rcMin(mn[2], v[2])"
  },
  {
    "label": "rcVmax()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rcVmax(rcReal* mx, const rcReal* v)"
  },
  {
    "label": "rcMax()",
    "kind": "Method",
    "detail": "Function (mx [ 0 ] =)",
    "insertText": "rcMax(mx[0], v[0])"
  },
  {
    "label": "rcMax()",
    "kind": "Method",
    "detail": "Function (mx [ 1 ] =)",
    "insertText": "rcMax(mx[1], v[1])"
  },
  {
    "label": "rcMax()",
    "kind": "Method",
    "detail": "Function (mx [ 2 ] =)",
    "insertText": "rcMax(mx[2], v[2])"
  },
  {
    "label": "rcVcopy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "rcVcopy(rcReal* dest, const rcReal* v)"
  },
  {
    "label": "rcVdist()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = v [ 0 ] ; dest [ 1 ] = v [ 1 ] ; dest [ 2 ] = v [ 2 ] ; } rcReal)",
    "insertText": "rcVdist(const rcReal* v1, const rcReal* v2)"
  },
  {
    "label": "rcSqrt()",
    "kind": "Method",
    "detail": "Function (rcReal dx = v2 [ 0 ] - v1 [ 0 ] ; rcReal dy = v2 [ 1 ] - v1 [ 1 ] ; rcReal dz = v2 [ 2 ] - v1 [ 2 ] ; return)",
    "insertText": "rcSqrt(dx*dx + dy*dy + dz*dz)"
  },
  {
    "label": "rcVdistSqr()",
    "kind": "Method",
    "detail": "Function (} rcReal)",
    "insertText": "rcVdistSqr(const rcReal* v1, const rcReal* v2)"
  },
  {
    "label": "rcVnormalize()",
    "kind": "Method",
    "detail": "Function (rcReal dx = v2 [ 0 ] - v1 [ 0 ] ; rcReal dy = v2 [ 1 ] - v1 [ 1 ] ; rcReal dz = v2 [ 2 ] - v1 [ 2 ] ; return dx* dx + dy* dy + dz* dz ; } void)",
    "insertText": "rcVnormalize(rcReal* v)"
  },
  {
    "label": "rcSqrt()",
    "kind": "Method",
    "detail": "Function (rcReal d = 1 . 0 f /)",
    "insertText": "rcSqrt(rcSqr(v[0]) + rcSqr(v[1]) + rcSqr(v[2]))"
  },
  {
    "label": "rcCalcTriNormals()",
    "kind": "Method",
    "detail": "Function (v [ 0 ]* = d ; v [ 1 ]* = d ; v [ 2 ]* = d ; } void)",
    "insertText": "rcCalcTriNormals(const rcReal* verts, const int nv, const int* tris, const int nt, rcReal* norms)"
  },
  {
    "label": "rcCalcBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcCalcBounds(const rcReal* verts, int nv, rcReal* bmin, rcReal* bmax)"
  },
  {
    "label": "rcCalcGridSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcCalcGridSize(const rcReal* bmin, const rcReal* bmax, rcReal cs, int* w, int* h)"
  },
  {
    "label": "rcCreateHeightfield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcCreateHeightfield(rcContext* ctx, rcHeightfield& hf, int width, int height, const rcReal* bmin, const rcReal* bmax, rcReal cs, rcReal ch)"
  },
  {
    "label": "rcResetHeightfield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcResetHeightfield(rcHeightfield& hf)"
  },
  {
    "label": "rcMarkWalkableTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkWalkableTriangles(rcContext* ctx, const rcReal walkableSlopeAngle, const rcReal* verts, int nv, const int* tris, int nt, unsigned char* areas)"
  },
  {
    "label": "rcMarkWalkableTrianglesCos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkWalkableTrianglesCos(rcContext* ctx, const rcReal walkableSlopeCos, const rcReal* verts, int nv, const int* tris, int nt, unsigned char* areas)"
  },
  {
    "label": "rcClearUnwalkableTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcClearUnwalkableTriangles(rcContext* ctx, const rcReal walkableSlopeAngle, const rcReal* verts, int nv, const int* tris, int nt, unsigned char* areas)"
  },
  {
    "label": "rcAddSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcAddSpan(rcContext* ctx, rcHeightfield& hf, const int x, const int y, const unsigned short smin, const unsigned short smax, const unsigned char area, const int flagMergeThr)"
  },
  {
    "label": "rcAddSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcAddSpans(rcContext* ctx, rcHeightfield& hf, const int flagMergeThr, const rcSpanCache* cachedSpans, const int nspans)"
  },
  {
    "label": "rcCountSpans()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rcCountSpans(rcContext* ctx, rcHeightfield& hf)"
  },
  {
    "label": "rcCacheSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcCacheSpans(rcContext* ctx, rcHeightfield& hf, rcSpanCache* cachedSpans)"
  },
  {
    "label": "rcRasterizeTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangle(rcContext* ctx, const rcReal* v0, const rcReal* v1, const rcReal* v2, const unsigned char area, rcHeightfield& solid, const int flagMergeThr = 1, const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcRasterizeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangles(rcContext* ctx, const rcReal* verts, const int nv, const int* tris, const unsigned char* areas, const int nt, rcHeightfield& solid, const int flagMergeThr = 1, const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcRasterizeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangles(rcContext* ctx, const rcReal* verts, const int nv, const unsigned short* tris, const unsigned char* areas, const int nt, rcHeightfield& solid, const int flagMergeThr = 1, const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcRasterizeTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcRasterizeTriangles(rcContext* ctx, const rcReal* verts, const unsigned char* areas, const int nt, rcHeightfield& solid, const int flagMergeThr = 1, const int rasterizationFlags = 0, const int* rasterizationMasks = nullptr)"
  },
  {
    "label": "rcFilterLowHangingWalkableObstacles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterLowHangingWalkableObstacles(rcContext* ctx, const int walkableClimb, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterLedgeSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterLedgeSpans(rcContext* ctx, const int walkableHeight, const int walkableClimb, const rcNeighborSlopeFilterMode neighborSlopeFilterMode, const rcReal maxStepFromWalkableSlope, const rcReal ch, const int yStart, const int maxYProcess, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterLedgeSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterLedgeSpans(rcContext* ctx, const int walkableHeight, const int walkableClimb, const rcNeighborSlopeFilterMode neighborSlopeFilterMode, const rcReal maxStepFromWalkableSlope, const rcReal ch, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterWalkableLowHeightSpans()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterWalkableLowHeightSpans(rcContext* ctx, int walkableHeight, rcHeightfield& solid)"
  },
  {
    "label": "rcFilterWalkableLowHeightSpansSequences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcFilterWalkableLowHeightSpansSequences(rcContext* ctx, int walkableHeight, rcHeightfield& solid)"
  },
  {
    "label": "rcGetHeightFieldSpanCount()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rcGetHeightFieldSpanCount(rcContext* ctx, rcHeightfield& hf)"
  },
  {
    "label": "rcBuildCompactHeightfield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildCompactHeightfield(rcContext* ctx, const int walkableHeight, const int walkableClimb, rcHeightfield& hf, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcErodeWalkableArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcErodeWalkableArea(rcContext* ctx, int radius, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcErodeWalkableAndLowAreas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcErodeWalkableAndLowAreas(rcContext* ctx, int radius, unsigned int height, unsigned char areaId, unsigned char filterFlags, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcMedianFilterWalkableArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMedianFilterWalkableArea(rcContext* ctx, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcMarkLowAreas()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMarkLowAreas(rcContext* ctx, unsigned int height, unsigned char areaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcMarkBoxArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkBoxArea(rcContext* ctx, const rcReal* bmin, const rcReal* bmax, unsigned char areaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcMarkConvexPolyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkConvexPolyArea(rcContext* ctx, const rcReal* verts, const int nverts, const rcReal hmin, const rcReal hmax, unsigned char areaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcOffsetPoly()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "rcOffsetPoly(const rcReal* verts, const int nverts, const rcReal offset, rcReal* outVerts, const int maxOutVerts)"
  },
  {
    "label": "rcMarkCylinderArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcMarkCylinderArea(rcContext* ctx, const rcReal* pos, const rcReal r, const rcReal h, unsigned char areaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcReplaceBoxArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcReplaceBoxArea(rcContext* ctx, const rcReal* bmin, const rcReal* bmax, unsigned char areaId, unsigned char filterAreaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcReplaceConvexPolyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcReplaceConvexPolyArea(rcContext* ctx, const rcReal* verts, const int nverts, const rcReal hmin, const rcReal hmax, unsigned char areaId, unsigned char filterAreaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcReplaceCylinderArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcReplaceCylinderArea(rcContext* ctx, const rcReal* pos, const rcReal r, const rcReal h, unsigned char areaId, unsigned char filterAreaId, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcBuildDistanceField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildDistanceField(rcContext* ctx, rcCompactHeightfield& chf)"
  },
  {
    "label": "rcBuildRegions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildRegions(rcContext* ctx, rcCompactHeightfield& chf, const int borderSize, const int minRegionArea, const int mergeRegionArea)"
  },
  {
    "label": "rcBuildRegionsMonotone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildRegionsMonotone(rcContext* ctx, rcCompactHeightfield& chf, const rcBorderSize borderSize, const int minRegionArea, const int mergeRegionArea)"
  },
  {
    "label": "rcBuildRegionsChunky()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildRegionsChunky(rcContext* ctx, rcCompactHeightfield& chf, const rcBorderSize borderSize, const int minRegionArea, const int mergeRegionArea, const int chunkSize)"
  },
  {
    "label": "rcSetCon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rcSetCon(rcCompactSpan& s, int dir, int i)"
  },
  {
    "label": "shift()",
    "kind": "Method",
    "detail": "Function (const unsigned int)",
    "insertText": "shift(unsigned int)"
  },
  {
    "label": "con()",
    "kind": "Method",
    "detail": "Function (unsigned int con = s . con ; s .)",
    "insertText": "con(con & ~(0xff << shift)) | (((unsigned int)i & 0xff) << shift)"
  },
  {
    "label": "rcGetCon()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "rcGetCon(const rcCompactSpan& s, int dir)"
  },
  {
    "label": "rcGetDirOffsetX()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "rcGetDirOffsetX(int dir)"
  },
  {
    "label": "rcGetDirOffsetY()",
    "kind": "Method",
    "detail": "Function (const int offset [ 4 ] = { - 1,0,1,0,} ; return offset [ dir& 0 x03 ] ; } int)",
    "insertText": "rcGetDirOffsetY(int dir)"
  },
  {
    "label": "rcBuildHeightfieldLayers()",
    "kind": "Method",
    "detail": "Function (const int offset [ 4 ] = { 0,1,0,- 1 } ; return offset [ dir& 0 x03 ] ; } bool)",
    "insertText": "rcBuildHeightfieldLayers(rcContext* ctx, rcCompactHeightfield& chf, const rcBorderSize borderSize, const int walkableHeight, rcHeightfieldLayerSet& lset)"
  },
  {
    "label": "rcBuildHeightfieldLayersMonotone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildHeightfieldLayersMonotone(rcContext* ctx, rcCompactHeightfield& chf, const rcBorderSize borderSize, const int walkableHeight, rcHeightfieldLayerSet& lset)"
  },
  {
    "label": "rcBuildHeightfieldLayersChunky()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildHeightfieldLayersChunky(rcContext* ctx, rcCompactHeightfield& chf, const rcBorderSize borderSize, const int walkableHeight, const int chunkSize, rcHeightfieldLayerSet& lset)"
  },
  {
    "label": "rcBuildContours()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildContours(rcContext* ctx, rcCompactHeightfield& chf, const rcReal maxError, const int maxEdgeLen, rcContourSet& cset, const int flags = RC_CONTOUR_TESS_WALL_EDGES)"
  },
  {
    "label": "rcBuildClusters()",
    "kind": "Method",
    "detail": "Function (# if WITH_NAVMESH_CLUSTER_LINKS bool)",
    "insertText": "rcBuildClusters(rcContext* ctx, rcContourSet& cset, rcClusterSet& clusters)"
  },
  {
    "label": "rcBuildPolyMesh()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "rcBuildPolyMesh(rcContext* ctx, rcContourSet& cset, const int nvp, rcPolyMesh& mesh)"
  },
  {
    "label": "rcMergePolyMeshes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMergePolyMeshes(rcContext* ctx, rcPolyMesh** meshes, const int nmeshes, rcPolyMesh& mesh)"
  },
  {
    "label": "rcBuildPolyMeshDetail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcBuildPolyMeshDetail(rcContext* ctx, const rcPolyMesh& mesh, const rcCompactHeightfield& chf, const rcReal sampleDist, const rcReal sampleMaxError, rcPolyMeshDetail& dmesh)"
  },
  {
    "label": "rcCopyPolyMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcCopyPolyMesh(rcContext* ctx, const rcPolyMesh& src, rcPolyMesh& dst)"
  },
  {
    "label": "rcMergePolyMeshDetails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rcMergePolyMeshDetails(rcContext* ctx, rcPolyMeshDetail** meshes, const int nmeshes, rcPolyMeshDetail& mesh)"
  }
]