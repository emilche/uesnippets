[
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FD3D12SamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12SamplerState"
  },
  {
    "label": "FD3D12ShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ShaderResourceView"
  },
  {
    "label": "FD3D12UnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12UnorderedAccessView"
  },
  {
    "label": "FD3D12Payload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12Payload"
  },
  {
    "label": "FD3D12BindlessDescriptorAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BindlessDescriptorAllocator"
  },
  {
    "label": "FD3D12BindlessSamplerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BindlessSamplerManager"
  },
  {
    "label": "FD3D12ContextBindlessState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ContextBindlessState"
  },
  {
    "label": "FMovingWindowMax",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovingWindowMax"
  },
  {
    "label": "FD3D12BindlessResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BindlessResourceManager"
  },
  {
    "label": "FGpuHeapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGpuHeapData"
  },
  {
    "label": "FD3D12DescriptorHeapPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12DescriptorHeapPair"
  },
  {
    "label": "FD3D12BindlessDescriptorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BindlessDescriptorManager"
  },
  {
    "label": "COMPILED_PLATFORM_HEADER()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12RHICommon . h \" # include \" D3D12Descriptors . h \" # include \" RHIDefinitions . h \" # include \" RHIDescriptorAllocator . h \" # include \" Templates / RefCounting . h \" class FRHICommandListBase ; class FD3D12SamplerState ; class FD3D12ShaderResourceView ; class FD3D12UnorderedAccessView ; struct FD3D12Payload ; # if PLATFORM_SUPPORTS_BINDLESS_RENDERING # include)",
    "insertText": "COMPILED_PLATFORM_HEADER(D3D12BindlessDescriptors.h)"
  },
  {
    "label": "CreateCpuHeap()",
    "kind": "Method",
    "detail": "Function (FD3D12DescriptorHeap*)",
    "insertText": "CreateCpuHeap(FD3D12Device* InDevice, ERHIDescriptorHeapType InType, uint32 InNewNumDescriptorsPerHeap)"
  },
  {
    "label": "CreateGpuHeap()",
    "kind": "Method",
    "detail": "Function (FD3D12DescriptorHeap*)",
    "insertText": "CreateGpuHeap(FD3D12Device* InDevice, ERHIDescriptorHeapType InType, uint32 InNewNumDescriptorsPerHeap)"
  },
  {
    "label": "DeferredFreeHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredFreeHeap(FD3D12Device* InDevice, FD3D12DescriptorHeap* InHeap)"
  },
  {
    "label": "FD3D12BindlessDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (} class FD3D12BindlessDescriptorAllocator : public FD3D12AdapterChild { public :)",
    "insertText": "FD3D12BindlessDescriptorAllocator()"
  },
  {
    "label": "FD3D12BindlessDescriptorAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12BindlessDescriptorAllocator(FD3D12Adapter* InParent)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "GetResourcesConfiguration()",
    "kind": "Method",
    "detail": "Function (ERHIBindlessConfiguration)",
    "insertText": "GetResourcesConfiguration()"
  },
  {
    "label": "AllocateResourceHandle()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "AllocateResourceHandle()"
  },
  {
    "label": "FreeSamplerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeSamplerHandle(FRHIDescriptorHandle Handle)"
  },
  {
    "label": "FreeResourceHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeResourceHandle(FRHIDescriptorHandle Handle)"
  },
  {
    "label": "GetResourceHeapsCS()",
    "kind": "Method",
    "detail": "Function (FCriticalSection&)",
    "insertText": "GetResourceHeapsCS()"
  },
  {
    "label": "GetSamplerCapacity()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSamplerCapacity()"
  },
  {
    "label": "GetResourceAllocatedRange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetResourceAllocatedRange(FRHIDescriptorAllocatorRange& OutAllocatedRange)"
  },
  {
    "label": "GetResourceAllocator()",
    "kind": "Method",
    "detail": "Function (} # if D3D12RHI_CUSTOM_BINDLESS_RESOURCE_MANAGER FRHIHeapDescriptorAllocator*)",
    "insertText": "GetResourceAllocator()"
  },
  {
    "label": "FD3D12BindlessSamplerManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12BindlessSamplerManager(FD3D12Device* InDevice, FD3D12BindlessDescriptorAllocator& InAllocator)"
  },
  {
    "label": "CleanupResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupResources()"
  },
  {
    "label": "InitializeDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDescriptor(FRHIDescriptorHandle DstHandle, FD3D12SamplerState* SamplerState)"
  },
  {
    "label": "OpenCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenCommandList(FD3D12CommandContext& Context)"
  },
  {
    "label": "CloseCommandList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseCommandList(FD3D12CommandContext& Context)"
  },
  {
    "label": "GetExplicitHeapForContext()",
    "kind": "Method",
    "detail": "Function (FD3D12DescriptorHeap*)",
    "insertText": "GetExplicitHeapForContext(FD3D12CommandContext& Context)"
  },
  {
    "label": "GetHeap()",
    "kind": "Method",
    "detail": "Function (FD3D12DescriptorHeap*)",
    "insertText": "GetHeap()"
  },
  {
    "label": "GetConfiguration()",
    "kind": "Method",
    "detail": "Function (} ERHIBindlessConfiguration)",
    "insertText": "GetConfiguration()"
  },
  {
    "label": "FD3D12ContextBindlessState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12ContextBindlessState()"
  },
  {
    "label": "HasAnyPending()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyPending()"
  },
  {
    "label": "PushValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PushValue(T Value)"
  },
  {
    "label": "RemoveNextIdx()",
    "kind": "Method",
    "detail": "Function (ValuesArray [ RemoveNextIdx ] = Value ;)",
    "insertText": "RemoveNextIdx(RemoveNextIdx + 1)"
  },
  {
    "label": "GetMax()",
    "kind": "Method",
    "detail": "Function (} else { ValuesArray [ NumValuesUsed ] = Value ; + + NumValuesUsed ; } } T)",
    "insertText": "GetMax()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T Max = static_cast<)",
    "insertText": "T(0)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Max =)",
    "insertText": "Max(Max, ValuesArray[Index])"
  },
  {
    "label": "FD3D12BindlessResourceManager()",
    "kind": "Method",
    "detail": "Function (} return Max ; } private : TStaticArray<T,ArraySize> ValuesArray ; int32 RemoveNextIdx ; int32 NumValuesUsed ; } ; class FD3D12BindlessResourceManager : public FD3D12DeviceChild { public :)",
    "insertText": "FD3D12BindlessResourceManager()"
  },
  {
    "label": "FD3D12BindlessResourceManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12BindlessResourceManager(FD3D12Device* InDevice, FD3D12BindlessDescriptorAllocator& InAllocator)"
  },
  {
    "label": "GarbageCollect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GarbageCollect()"
  },
  {
    "label": "Recycle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Recycle(FD3D12DescriptorHeap* DescriptorHeap)"
  },
  {
    "label": "InitializeDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDescriptor(FRHIDescriptorHandle DstHandle, FD3D12View* View)"
  },
  {
    "label": "UpdateDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDescriptor(FD3D12ContextArray const& Contexts, FRHIDescriptorHandle DstHandle, FD3D12View* View)"
  },
  {
    "label": "FlushPendingDescriptorUpdates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlushPendingDescriptorUpdates(FD3D12CommandContext& Context)"
  },
  {
    "label": "FinalizeContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeContext(FD3D12CommandContext& Context)"
  },
  {
    "label": "GetHeap()",
    "kind": "Method",
    "detail": "Function (FD3D12DescriptorHeap*)",
    "insertText": "GetHeap(ERHIPipeline Pipeline)"
  },
  {
    "label": "CopyCpuHeap()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CopyCpuHeap(FD3D12DescriptorHeap* DestinationHeap)"
  },
  {
    "label": "AssignHeapToState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignHeapToState(FD3D12ContextBindlessState& State)"
  },
  {
    "label": "FinalizeHeapOnState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeHeapOnState(FD3D12ContextBindlessState& State)"
  },
  {
    "label": "CheckRequestNewActiveGPUHeap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckRequestNewActiveGPUHeap()"
  },
  {
    "label": "AddActiveGPUHeap()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AddActiveGPUHeap()"
  },
  {
    "label": "ReleaseGPUHeaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseGPUHeaps()"
  },
  {
    "label": "UpdateInUseGPUHeaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInUseGPUHeaps(bool bInUse)"
  },
  {
    "label": "FD3D12BindlessDescriptorManager()",
    "kind": "Method",
    "detail": "Function (FCriticalSection& HeapsCS ; FD3D12DescriptorHeapPtr CpuHeap ; const ERHIBindlessConfiguration Configuration ; uint64 GarbageCollectCycle = 0 ; uint64 LastUsedExplicitHeapCycle = 0 ; bool bRequestNewActiveGpuHeap = false ; bool bCPUHeapResized = false ; uint32 InUseGPUHeaps = 0 ; uint32 MaxInUseGPUHeaps = 0 ; FMovingWindowMax<uint32,1 0 0> MovingWindowMaxInUseGPUHeaps ; struct FGpuHeapData { FD3D12DescriptorHeapPtr GpuHeap ; TArray<FRHIDescriptorHandle> UpdatedHandles ; bool bInUse = true ; uint64 LastUsedGarbageCollectCycle = 0 ; } ; int32 ActiveGpuHeapIndex = - 1 ; TArray<FGpuHeapData> ActiveGpuHeaps ; TArray<FGpuHeapData> PooledGpuHeaps ; } ; # endif struct FD3D12DescriptorHeapPair { FD3D12DescriptorHeap* SamplerHeap ; FD3D12DescriptorHeap* ResourceHeap ; } ; class FD3D12BindlessDescriptorManager : public FD3D12DeviceChild { public :)",
    "insertText": "FD3D12BindlessDescriptorManager(FD3D12Device* InDevice, FD3D12BindlessDescriptorAllocator& InAllocator)"
  },
  {
    "label": "FD3D12BindlessDescriptorManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12BindlessDescriptorManager()"
  },
  {
    "label": "GetAllocator()",
    "kind": "Method",
    "detail": "Function (FD3D12BindlessDescriptorAllocator&)",
    "insertText": "GetAllocator()"
  },
  {
    "label": "GetSamplerManager()",
    "kind": "Method",
    "detail": "Function (} FD3D12BindlessSamplerManager*)",
    "insertText": "GetSamplerManager()"
  },
  {
    "label": "AreSamplersBindless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreSamplersBindless()"
  },
  {
    "label": "AreResourcesBindless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreResourcesBindless(ERHIBindlessConfiguration InConfiguration)"
  },
  {
    "label": "AreSamplersBindless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreSamplersBindless(ERHIBindlessConfiguration InConfiguration)"
  },
  {
    "label": "AreResourcesFullyBindless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreResourcesFullyBindless()"
  },
  {
    "label": "AreSamplersFullyBindless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreSamplersFullyBindless()"
  },
  {
    "label": "ImmediateFree()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ImmediateFree(FRHIDescriptorHandle InHandle)"
  },
  {
    "label": "DeferredFreeFromDestructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredFreeFromDestructor(FRHIDescriptorHandle InHandle)"
  },
  {
    "label": "UpdateDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDescriptor(FD3D12ContextArray const& Contexts, FRHIDescriptorHandle DstHandle, FD3D12View* SourceView)"
  },
  {
    "label": "SetHeapsForRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHeapsForRayTracing(FD3D12CommandContext& Context)"
  },
  {
    "label": "GetExplicitHeapsForContext()",
    "kind": "Method",
    "detail": "Function (FD3D12DescriptorHeapPair)",
    "insertText": "GetExplicitHeapsForContext(FD3D12CommandContext& Context, ERHIBindlessConfiguration InConfiguration)"
  },
  {
    "label": "AllocateResourceHeapsForAllPipelines()",
    "kind": "Method",
    "detail": "Function (# if D3D12RHI_USE_CONSTANT_BUFFER_VIEWS TRHIPipelineArray<FD3D12DescriptorHeapPtr>)",
    "insertText": "AllocateResourceHeapsForAllPipelines(int32 InSize)"
  }
]