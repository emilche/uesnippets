[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UFbxSceneImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxSceneImportData"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FFbxAttributeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxAttributeInfo"
  },
  {
    "label": "FFbxMeshInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxMeshInfo"
  },
  {
    "label": "FFbxTextureInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxTextureInfo"
  },
  {
    "label": "FFbxMaterialInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxMaterialInfo"
  },
  {
    "label": "FFbxCameraInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxCameraInfo"
  },
  {
    "label": "FFbxLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxLightInfo"
  },
  {
    "label": "FFbxNodeInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxNodeInfo"
  },
  {
    "label": "FFbxSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFbxSceneInfo"
  },
  {
    "label": "FBXImportOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBXImportOptions"
  },
  {
    "label": "UFbxSceneImportFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxSceneImportFactory"
  },
  {
    "label": "UFbxSceneImportOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxSceneImportOptions"
  },
  {
    "label": "UFbxSceneImportOptionsStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxSceneImportOptionsStaticMesh"
  },
  {
    "label": "UFbxSceneImportOptionsSkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxSceneImportOptionsSkeletalMesh"
  },
  {
    "label": "UFbxStaticMeshImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxStaticMeshImportData"
  },
  {
    "label": "UFbxSkeletalMeshImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxSkeletalMeshImportData"
  },
  {
    "label": "UFbxAnimSequenceImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxAnimSequenceImportData"
  },
  {
    "label": "UFbxTextureImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFbxTextureImportData"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "GetImportPath()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" SceneImportFactory . h \" # include \" FbxSceneImportFactory . generated . h \" class AActor ; class UFbxSceneImportData ; class USceneComponent ; # define INVALID_UNIQUE_ID 0 xFFFFFFFFFFFFFFFF class FFbxAttributeInfo : public TSharedFromThis<FFbxAttributeInfo> { public : FString Name ; uint64 UniqueId ; bool bImportAttribute ; FString OriginalImportPath ; FString OriginalFullImportName ; bool bOriginalTypeChanged ; bool bOverridePath ; FString OverrideImportPath ; FString OverrideFullImportName ; FString OptionName ; uint64 PivotNodeUid ; FString PivotNodeName ; TMap<FVector,TArray<uint64>> NodeReferencePivots ; FString)",
    "insertText": "GetImportPath()"
  },
  {
    "label": "SetOriginalFullImportName()",
    "kind": "Method",
    "detail": "Function (OriginalImportPath = ImportPath ; IsContentObjectUpToDate = false ; } void)",
    "insertText": "SetOriginalFullImportName(FString FullImportName)"
  },
  {
    "label": "SetOverridePath()",
    "kind": "Method",
    "detail": "Function (OriginalFullImportName = FullImportName ; IsContentObjectUpToDate = false ; } void)",
    "insertText": "SetOverridePath(bool OverridePath)"
  },
  {
    "label": "FFbxAttributeInfo()",
    "kind": "Method",
    "detail": "Function (bOverridePath = OverridePath ; IsContentObjectUpToDate = false ; })",
    "insertText": "FFbxAttributeInfo() : Name(TEXT(\"\")) , UniqueId(INVALID_UNIQUE_ID) , bImportAttribute(true) , OriginalImportPath(TEXT(\"\")) , OriginalFullImportName(TEXT(\"\")) , bOriginalTypeChanged(false) , bOverridePath(false) , OverrideImportPath(TEXT(\"\")) , OverrideFullImportName(TEXT(\"\")) , OptionName(TEXT(\"\")) , PivotNodeUid(INVALID_UNIQUE_ID) , PivotNodeName(TEXT(\"-\")) , IsContentObjectUpToDate(false) , ContentPackage(nullptr) , ContentObject(nullptr)"
  },
  {
    "label": "FFbxAttributeInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFbxAttributeInfo()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} UClass*)",
    "insertText": "GetType()"
  },
  {
    "label": "GetContentPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GetContentPackage()"
  },
  {
    "label": "GetContentObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetContentObject()"
  },
  {
    "label": "FFbxMeshInfo()",
    "kind": "Method",
    "detail": "Function (private : bool IsContentObjectUpToDate ; UPackage* ContentPackage ; UObject* ContentObject ; } ; class FFbxMeshInfo : public FFbxAttributeInfo { public : int32 FaceNum ; int32 VertexNum ; bool bTriangulated ; int32 MaterialNum ; bool bIsSkelMesh ; FString SkeletonRoot ; int32 SkeletonElemNum ; FString LODGroup ; int32 LODLevel ; int32 MorphNum ; bool IsLod ; bool IsCollision ;)",
    "insertText": "FFbxMeshInfo() : FaceNum(0) , VertexNum(0) , bTriangulated(false) , MaterialNum(0) , bIsSkelMesh(false) , SkeletonRoot(TEXT(\"\")) , SkeletonElemNum(0) , LODGroup(TEXT(\"\")) , LODLevel(0) , MorphNum(0) , IsLod(false) , IsCollision(false)"
  },
  {
    "label": "FFbxMeshInfo()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FFbxMeshInfo()"
  },
  {
    "label": "FFbxTextureInfo()",
    "kind": "Method",
    "detail": "Function (} ; class FFbxTextureInfo : public FFbxAttributeInfo { public : FString TexturePath ;)",
    "insertText": "FFbxTextureInfo() : TexturePath(TEXT(\"\"))"
  },
  {
    "label": "FFbxMaterialInfo()",
    "kind": "Method",
    "detail": "Function (} ; class FFbxMaterialInfo : public FFbxAttributeInfo { public : FString HierarchyPath ; TArray<TSharedPtr<FFbxTextureInfo>> Textures ;)",
    "insertText": "FFbxMaterialInfo() : HierarchyPath(TEXT(\"\"))"
  },
  {
    "label": "FFbxCameraInfo()",
    "kind": "Method",
    "detail": "Function (} ; class FFbxCameraInfo : public TSharedFromThis<FFbxCameraInfo> { public : FString Name ; uint64 UniqueId ; bool ProjectionPerspective ; float AspectWidth ; float AspectHeight ; float NearPlane ; float FarPlane ; float OrthoZoom ; float FieldOfView ; float FocalLength ; float ApertureWidth ; float ApertureHeight ;)",
    "insertText": "FFbxCameraInfo() : Name(TEXT(\"\")) , UniqueId(INVALID_UNIQUE_ID) , ProjectionPerspective(true) , AspectWidth(0.0f) , AspectHeight(0.0f) , NearPlane(0.0f) , FarPlane(0.0f) , OrthoZoom(0.0f) , FieldOfView(0.0f) , FocalLength(0.0f) , ApertureWidth(0.0f) , ApertureHeight(0.0f)"
  },
  {
    "label": "FFbxLightInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FFbxLightInfo : public TSharedFromThis<FFbxLightInfo> { public : FString Name ; uint64 UniqueId ; int32 Type ; FColor Color ; float Intensity ; int32 Decay ; bool CastLight ; bool CastShadow ; FColor ShadowColor ; float InnerAngle ; float OuterAngle ; float Fog ; float DecayStart ; bool EnableNearAttenuation ; float NearAttenuationStart ; float NearAttenuationEnd ; bool EnableFarAttenuation ; float FarAttenuationStart ; float FarAttenuationEnd ;)",
    "insertText": "FFbxLightInfo() : Name(TEXT(\"\")) , UniqueId(INVALID_UNIQUE_ID) , Type(0) , Color(FColor::White) , Intensity(1.0f) , Decay(0) , CastLight(false) , CastShadow(false) , ShadowColor(FColor::Black) , InnerAngle(0.0f) , OuterAngle(0.0f) , Fog(0.0f) , DecayStart(0.0f) , EnableNearAttenuation(false) , NearAttenuationStart(0.0f) , NearAttenuationEnd(0.0f) , EnableFarAttenuation(false) , FarAttenuationStart(0.0f) , FarAttenuationEnd(0.0f)"
  },
  {
    "label": "FFbxNodeInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FFbxNodeInfo : public TSharedFromThis<FFbxNodeInfo> { public : FString NodeName ; uint64 UniqueId ; FString NodeHierarchyPath ; TSharedPtr<FFbxNodeInfo> ParentNodeInfo ; TSharedPtr<FFbxAttributeInfo> AttributeInfo ; uint64 AttributeUniqueId ; FString AttributeType ; FTransform Transform ; FVector PivotRotation ; FVector PivotScaling ; bool bImportNode ; TArray<TSharedPtr<FFbxNodeInfo>> Childrens ; TArray<TSharedPtr<FFbxMaterialInfo>> Materials ;)",
    "insertText": "FFbxNodeInfo() : NodeName(TEXT(\"\")) , UniqueId(INVALID_UNIQUE_ID) , NodeHierarchyPath(TEXT(\"\")) , ParentNodeInfo(NULL) , AttributeInfo(NULL) , AttributeUniqueId(INVALID_UNIQUE_ID) , AttributeType(TEXT(\"\")) , Transform(FTransform::Identity) , bImportNode(true)"
  },
  {
    "label": "FFbxSceneInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FFbxSceneInfo : public TSharedFromThis<FFbxSceneInfo> { public : int32 NonSkinnedMeshNum ; int32 SkinnedMeshNum ; int32 TotalGeometryNum ; int32 TotalMaterialNum ; int32 TotalTextureNum ; TArray<TSharedPtr<FFbxMeshInfo>> MeshInfo ; TArray<TSharedPtr<FFbxNodeInfo>> HierarchyInfo ; TMap<uint64,TSharedPtr<FFbxLightInfo>> LightInfo ; TMap<uint64,TSharedPtr<FFbxCameraInfo>> CameraInfo ; bool bHasAnimation ; double FrameRate ; double TotalTime ;)",
    "insertText": "FFbxSceneInfo() : NonSkinnedMeshNum(0) , SkinnedMeshNum(0) , TotalGeometryNum(0) , TotalMaterialNum(0) , TotalTextureNum(0) , bHasAnimation(false) , FrameRate(0.0) , TotalTime(0.0)"
  },
  {
    "label": "RecursiveFindLODParentNode()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FFbxNodeInfo>)",
    "insertText": "RecursiveFindLODParentNode(TSharedPtr<FFbxNodeInfo> NodeInfo)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UnFbx { struct FBXImportOptions ; } typedef TMap<FString,UnFbx::FBXImportOptions*> ImportOptionsNameMap ; typedef ImportOptionsNameMap* ImportOptionsNameMapPtr ;)",
    "insertText": "UCLASS(BlueprintType, hidecategories=Object, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UNREALED_API virtual UObject* FactoryCreateFile(UClass* InClass, UObject* InParent, FName InName, EObjectFlags Flags, const FString& Filename, const TCHAR* Parms, FFeedbackContext* Warn, bool& bOutOperationCanceled)"
  },
  {
    "label": "FactoryCreateBinary()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FactoryCreateBinary(UClass* InClass, UObject* InParent, FName InName, EObjectFlags Flags, UObject* Context, const TCHAR* Type, const uint8*& Buffer, const uint8* BufferEnd, FFeedbackContext* Warn)"
  },
  {
    "label": "FactoryCreateBinary()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FactoryCreateBinary(UClass* InClass, UObject* InParent, FName InName, EObjectFlags Flags, UObject* Context, const TCHAR* Type, const uint8*& Buffer, const uint8* BufferEnd, FFeedbackContext* Warn, bool& bOutOperationCanceled)"
  },
  {
    "label": "FactoryCanImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FactoryCanImport(const FString& Filename)"
  },
  {
    "label": "GetFormats()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetFormats()"
  },
  {
    "label": "ImportsAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportsAssets()"
  },
  {
    "label": "ConvertSceneInfo()",
    "kind": "Method",
    "detail": "Function (FString DefaultOptionName ; public : TSharedPtr<FFbxSceneInfo>)",
    "insertText": "ConvertSceneInfo(void* VoidFbxImporter, void* VoidFbxSceneInfo)"
  },
  {
    "label": "ExtractMaterialInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractMaterialInfo(void* FbxImporterVoid, TSharedPtr<FFbxSceneInfo> SceneInfoPtr)"
  },
  {
    "label": "ChangeFrontAxis()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ChangeFrontAxis(void* VoidFbxImporter, void* VoidSceneInfo, TSharedPtr<FFbxSceneInfo> SceneInfoPtr)"
  },
  {
    "label": "ApplyMeshInfoFbxOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMeshInfoFbxOptions(TSharedPtr<FFbxMeshInfo> MeshInfo)"
  },
  {
    "label": "FillSceneHierarchyPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSceneHierarchyPath(TSharedPtr<FFbxSceneInfo> SceneInfo)"
  },
  {
    "label": "CreateLevelActorHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateLevelActorHierarchy(TSharedPtr<FFbxSceneInfo> SceneInfoPtr)"
  },
  {
    "label": "CreateActorComponentsHierarchy()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "CreateActorComponentsHierarchy(TSharedPtr<FFbxSceneInfo> SceneInfoPtr)"
  },
  {
    "label": "ApplyTransformToComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTransformToComponent(USceneComponent *SceneComponent, FTransform *LocalTransform, FTransform *PreMultiplyTransform, FVector &PivotLocation, FVector &ParentPivotAccumulation)"
  },
  {
    "label": "ImportAllSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportAllSkeletalMesh(void* VoidRootNodeToImport, void* VoidFbxImporter, EObjectFlags Flags, int32& NodeIndex, int32& InterestingNodeCount , TSharedPtr<FFbxSceneInfo> SceneInfo)"
  },
  {
    "label": "ImportOneSkeletalMesh()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ImportOneSkeletalMesh(void* VoidRootNodeToImport, void* VoidFbxImporter, TSharedPtr<FFbxSceneInfo> SceneInfo, EObjectFlags Flags, TArray<void*> &VoidNodeArray, int32 &TotalNumNodes)"
  },
  {
    "label": "ImportAllStaticMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportAllStaticMesh(void* VoidRootNodeToImport, void* VoidFbxImporter, EObjectFlags Flags, int32& NodeIndex, int32& InterestingNodeCount, TSharedPtr<FFbxSceneInfo> SceneInfo)"
  },
  {
    "label": "RecursiveImportNode()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "RecursiveImportNode(void* FFbxImporter, void* VoidNode, EObjectFlags Flags, int32& Index, int32 Total, TSharedPtr<FFbxSceneInfo> SceneInfo, FString PackagePath)"
  },
  {
    "label": "ImportANode()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ImportANode(void* VoidFbxImporter, TArray<void*> &VoidNode, EObjectFlags Flags, int32& NodeIndex, TSharedPtr<FFbxSceneInfo> SceneInfo, TSharedPtr<FFbxNodeInfo> &OutNodeInfo, FString PackagePath, int32 Total = 0, UObject* InMesh = NULL, int LODIndex = 0)"
  },
  {
    "label": "FindSceneNodeInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindSceneNodeInfo(TSharedPtr<FFbxSceneInfo> SceneInfo, uint64 NodeInfoUniqueId, TSharedPtr<FFbxNodeInfo> &OutNodeInfo)"
  },
  {
    "label": "CreatePackageForNode()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "CreatePackageForNode(FString PackageName, FString &StaticMeshName)"
  },
  {
    "label": "SetStaticMeshComponentOverrideMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetStaticMeshComponentOverrideMaterial(class UStaticMeshComponent* StaticMeshComponent, TSharedPtr<FFbxNodeInfo> NodeInfo)"
  },
  {
    "label": "GetOptionsFromName()",
    "kind": "Method",
    "detail": "Function (TMap<TSharedPtr<FFbxAttributeInfo>,UObject*> AllNewAssets ; UnFbx::FBXImportOptions* GlobalImportSettings ; UnFbx::FBXImportOptions* GlobalImportSettingsReference ; ImportOptionsNameMap NameOptionsMap ; UnFbx::FBXImportOptions*)",
    "insertText": "GetOptionsFromName(FString OptionName)"
  }
]