[
  {
    "label": "UCalendarType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarType"
  },
  {
    "label": "UCalendarDateFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDateFields"
  },
  {
    "label": "UCalendarDaysOfWeek",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDaysOfWeek"
  },
  {
    "label": "UCalendarMonths",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarMonths"
  },
  {
    "label": "UCalendarAMPMs",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarAMPMs"
  },
  {
    "label": "USystemTimeZoneType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "USystemTimeZoneType"
  },
  {
    "label": "UCalendarDisplayNameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDisplayNameType"
  },
  {
    "label": "UCalendarAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarAttribute"
  },
  {
    "label": "UCalendarWallTimeOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarWallTimeOption"
  },
  {
    "label": "UCalendarLimitType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarLimitType"
  },
  {
    "label": "UCalendarWeekdayType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarWeekdayType"
  },
  {
    "label": "UTimeZoneTransitionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeZoneTransitionType"
  },
  {
    "label": "ucal_openTimeZoneIDEnumeration()",
    "kind": "Method",
    "detail": "Function (# ifndef UCAL_H # define UCAL_H # include \" unicode / utypes . h \" # include \" unicode / uenum . h \" # include \" unicode / uloc . h \" # include \" unicode / localpointer . h \" # if ! UCONFIG_NO_FORMATTING # define UCAL_UNKNOWN_ZONE_ID \" Etc / Unknown \" typedef void* UCalendar ; enum UCalendarType { UCAL_TRADITIONAL,UCAL_DEFAULT = UCAL_TRADITIONAL,UCAL_GREGORIAN } ; typedef enum UCalendarType UCalendarType ; enum UCalendarDateFields { UCAL_ERA,UCAL_YEAR,UCAL_MONTH,UCAL_WEEK_OF_YEAR,UCAL_WEEK_OF_MONTH,UCAL_DATE,UCAL_DAY_OF_YEAR,UCAL_DAY_OF_WEEK,UCAL_DAY_OF_WEEK_IN_MONTH,UCAL_AM_PM,UCAL_HOUR,UCAL_HOUR_OF_DAY,UCAL_MINUTE,UCAL_SECOND,UCAL_MILLISECOND,UCAL_ZONE_OFFSET,UCAL_DST_OFFSET,UCAL_YEAR_WOY,UCAL_DOW_LOCAL,UCAL_EXTENDED_YEAR,UCAL_JULIAN_DAY,UCAL_MILLISECONDS_IN_DAY,UCAL_IS_LEAP_MONTH,UCAL_FIELD_COUNT,UCAL_DAY_OF_MONTH = UCAL_DATE } ; typedef enum UCalendarDateFields UCalendarDateFields ; enum UCalendarDaysOfWeek { UCAL_SUNDAY = 1,UCAL_MONDAY,UCAL_TUESDAY,UCAL_WEDNESDAY,UCAL_THURSDAY,UCAL_FRIDAY,UCAL_SATURDAY } ; typedef enum UCalendarDaysOfWeek UCalendarDaysOfWeek ; enum UCalendarMonths { UCAL_JANUARY,UCAL_FEBRUARY,UCAL_MARCH,UCAL_APRIL,UCAL_MAY,UCAL_JUNE,UCAL_JULY,UCAL_AUGUST,UCAL_SEPTEMBER,UCAL_OCTOBER,UCAL_NOVEMBER,UCAL_DECEMBER,UCAL_UNDECIMBER } ; typedef enum UCalendarMonths UCalendarMonths ; enum UCalendarAMPMs { UCAL_AM,UCAL_PM } ; typedef enum UCalendarAMPMs UCalendarAMPMs ; enum USystemTimeZoneType { UCAL_ZONE_TYPE_ANY,UCAL_ZONE_TYPE_CANONICAL,UCAL_ZONE_TYPE_CANONICAL_LOCATION } ; typedef enum USystemTimeZoneType USystemTimeZoneType ; U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucal_openTimeZoneIDEnumeration(USystemTimeZoneType zoneType, const char* region, const int32_t* rawOffset, UErrorCode* ec)"
  },
  {
    "label": "ucal_openTimeZones()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucal_openTimeZones(UErrorCode* ec)"
  },
  {
    "label": "ucal_openCountryTimeZones()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucal_openCountryTimeZones(const char* country, UErrorCode* ec)"
  },
  {
    "label": "ucal_getDefaultTimeZone()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getDefaultTimeZone(UChar* result, int32_t resultCapacity, UErrorCode* ec)"
  },
  {
    "label": "ucal_setDefaultTimeZone()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_setDefaultTimeZone(const UChar* zoneID, UErrorCode* ec)"
  },
  {
    "label": "ucal_getDSTSavings()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getDSTSavings(const UChar* zoneID, UErrorCode* ec)"
  },
  {
    "label": "ucal_getNow()",
    "kind": "Method",
    "detail": "Function (U_STABLE UDate U_EXPORT2)",
    "insertText": "ucal_getNow(void)"
  },
  {
    "label": "ucal_open()",
    "kind": "Method",
    "detail": "Function (U_STABLE UCalendar* U_EXPORT2)",
    "insertText": "ucal_open(const UChar* zoneID, int32_t len, const char* locale, UCalendarType type, UErrorCode* status)"
  },
  {
    "label": "ucal_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_close(UCalendar *cal)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUCalendarPointer, UCalendar, ucal_close)"
  },
  {
    "label": "ucal_clone()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE UCalendar* U_EXPORT2)",
    "insertText": "ucal_clone(const UCalendar* cal, UErrorCode* status)"
  },
  {
    "label": "ucal_setTimeZone()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_setTimeZone(UCalendar* cal, const UChar* zoneID, int32_t len, UErrorCode* status)"
  },
  {
    "label": "ucal_getTimeZoneID()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getTimeZoneID(const UCalendar *cal, UChar *result, int32_t resultLength, UErrorCode *status)"
  },
  {
    "label": "ucal_getTimeZoneDisplayName()",
    "kind": "Method",
    "detail": "Function (enum UCalendarDisplayNameType { UCAL_STANDARD,UCAL_SHORT_STANDARD,UCAL_DST,UCAL_SHORT_DST } ; typedef enum UCalendarDisplayNameType UCalendarDisplayNameType ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getTimeZoneDisplayName(const UCalendar* cal, UCalendarDisplayNameType type, const char* locale, UChar* result, int32_t resultLength, UErrorCode* status)"
  },
  {
    "label": "ucal_inDaylightTime()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucal_inDaylightTime(const UCalendar* cal, UErrorCode* status)"
  },
  {
    "label": "ucal_setGregorianChange()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_setGregorianChange(UCalendar *cal, UDate date, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucal_getGregorianChange()",
    "kind": "Method",
    "detail": "Function (U_STABLE UDate U_EXPORT2)",
    "insertText": "ucal_getGregorianChange(const UCalendar *cal, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucal_getAttribute()",
    "kind": "Method",
    "detail": "Function (enum UCalendarAttribute { UCAL_LENIENT,UCAL_FIRST_DAY_OF_WEEK,UCAL_MINIMAL_DAYS_IN_FIRST_WEEK,UCAL_REPEATED_WALL_TIME,UCAL_SKIPPED_WALL_TIME } ; typedef enum UCalendarAttribute UCalendarAttribute ; enum UCalendarWallTimeOption { UCAL_WALLTIME_LAST,UCAL_WALLTIME_FIRST,UCAL_WALLTIME_NEXT_VALID } ; typedef enum UCalendarWallTimeOption UCalendarWallTimeOption ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getAttribute(const UCalendar* cal, UCalendarAttribute attr)"
  },
  {
    "label": "ucal_setAttribute()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_setAttribute(UCalendar* cal, UCalendarAttribute attr, int32_t newValue)"
  },
  {
    "label": "ucal_getAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucal_getAvailable(int32_t localeIndex)"
  },
  {
    "label": "ucal_countAvailable()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_countAvailable(void)"
  },
  {
    "label": "ucal_getMillis()",
    "kind": "Method",
    "detail": "Function (U_STABLE UDate U_EXPORT2)",
    "insertText": "ucal_getMillis(const UCalendar* cal, UErrorCode* status)"
  },
  {
    "label": "ucal_setMillis()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_setMillis(UCalendar* cal, UDate dateTime, UErrorCode* status)"
  },
  {
    "label": "ucal_setDate()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_setDate(UCalendar* cal, int32_t year, int32_t month, int32_t date, UErrorCode* status)"
  },
  {
    "label": "ucal_setDateTime()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_setDateTime(UCalendar* cal, int32_t year, int32_t month, int32_t date, int32_t hour, int32_t minute, int32_t second, UErrorCode* status)"
  },
  {
    "label": "ucal_equivalentTo()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucal_equivalentTo(const UCalendar* cal1, const UCalendar* cal2)"
  },
  {
    "label": "ucal_add()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_add(UCalendar* cal, UCalendarDateFields field, int32_t amount, UErrorCode* status)"
  },
  {
    "label": "ucal_roll()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_roll(UCalendar* cal, UCalendarDateFields field, int32_t amount, UErrorCode* status)"
  },
  {
    "label": "ucal_get()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_get(const UCalendar* cal, UCalendarDateFields field, UErrorCode* status)"
  },
  {
    "label": "ucal_set()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_set(UCalendar* cal, UCalendarDateFields field, int32_t value)"
  },
  {
    "label": "ucal_isSet()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucal_isSet(const UCalendar* cal, UCalendarDateFields field)"
  },
  {
    "label": "ucal_clearField()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_clearField(UCalendar* cal, UCalendarDateFields field)"
  },
  {
    "label": "ucal_clear()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "ucal_clear(UCalendar* calendar)"
  },
  {
    "label": "ucal_getLimit()",
    "kind": "Method",
    "detail": "Function (enum UCalendarLimitType { UCAL_MINIMUM,UCAL_MAXIMUM,UCAL_GREATEST_MINIMUM,UCAL_LEAST_MAXIMUM,UCAL_ACTUAL_MINIMUM,UCAL_ACTUAL_MAXIMUM } ; typedef enum UCalendarLimitType UCalendarLimitType ; U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getLimit(const UCalendar* cal, UCalendarDateFields field, UCalendarLimitType type, UErrorCode* status)"
  },
  {
    "label": "ucal_getLocaleByType()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucal_getLocaleByType(const UCalendar *cal, ULocDataLocaleType type, UErrorCode* status)"
  },
  {
    "label": "ucal_getTZDataVersion()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucal_getTZDataVersion(UErrorCode* status)"
  },
  {
    "label": "ucal_getCanonicalTimeZoneID()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getCanonicalTimeZoneID(const UChar* id, int32_t len, UChar* result, int32_t resultCapacity, UBool *isSystemID, UErrorCode* status)"
  },
  {
    "label": "ucal_getType()",
    "kind": "Method",
    "detail": "Function (U_STABLE const char* U_EXPORT2)",
    "insertText": "ucal_getType(const UCalendar *cal, UErrorCode* status)"
  },
  {
    "label": "ucal_getKeywordValuesForLocale()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "ucal_getKeywordValuesForLocale(const char* key, const char* locale, UBool commonlyUsed, UErrorCode* status)"
  },
  {
    "label": "ucal_getDayOfWeekType()",
    "kind": "Method",
    "detail": "Function (enum UCalendarWeekdayType { UCAL_WEEKDAY,UCAL_WEEKEND,UCAL_WEEKEND_ONSET,UCAL_WEEKEND_CEASE } ; typedef enum UCalendarWeekdayType UCalendarWeekdayType ; U_STABLE UCalendarWeekdayType U_EXPORT2)",
    "insertText": "ucal_getDayOfWeekType(const UCalendar *cal, UCalendarDaysOfWeek dayOfWeek, UErrorCode* status)"
  },
  {
    "label": "ucal_getWeekendTransition()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getWeekendTransition(const UCalendar *cal, UCalendarDaysOfWeek dayOfWeek, UErrorCode *status)"
  },
  {
    "label": "ucal_isWeekend()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "ucal_isWeekend(const UCalendar *cal, UDate date, UErrorCode *status)"
  },
  {
    "label": "ucal_getFieldDifference()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getFieldDifference(UCalendar* cal, UDate target, UCalendarDateFields field, UErrorCode* status)"
  },
  {
    "label": "ucal_getTimeZoneTransitionDate()",
    "kind": "Method",
    "detail": "Function (enum UTimeZoneTransitionType { UCAL_TZ_TRANSITION_NEXT,UCAL_TZ_TRANSITION_NEXT_INCLUSIVE,UCAL_TZ_TRANSITION_PREVIOUS,UCAL_TZ_TRANSITION_PREVIOUS_INCLUSIVE } ; typedef enum UTimeZoneTransitionType UTimeZoneTransitionType ; U_STABLE UBool U_EXPORT2)",
    "insertText": "ucal_getTimeZoneTransitionDate(const UCalendar* cal, UTimeZoneTransitionType type, UDate* transition, UErrorCode* status)"
  },
  {
    "label": "ucal_getWindowsTimeZoneID()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getWindowsTimeZoneID(const UChar* id, int32_t len, UChar* winid, int32_t winidCapacity, UErrorCode* status)"
  },
  {
    "label": "ucal_getTimeZoneIDForWindowsID()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "ucal_getTimeZoneIDForWindowsID(const UChar* winid, int32_t len, const char* region, UChar* id, int32_t idCapacity, UErrorCode* status)"
  }
]