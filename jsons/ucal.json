[
  {
    "label": "UCalendarType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarType"
  },
  {
    "label": "UCalendarType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarType"
  },
  {
    "label": "UCalendarType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarType"
  },
  {
    "label": "UCalendarDateFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDateFields"
  },
  {
    "label": "UCalendarDateFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDateFields"
  },
  {
    "label": "UCalendarDaysOfWeek",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDaysOfWeek"
  },
  {
    "label": "UCalendarDaysOfWeek",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDaysOfWeek"
  },
  {
    "label": "UCalendarMonths",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarMonths"
  },
  {
    "label": "UCalendarMonths",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarMonths"
  },
  {
    "label": "UCalendarAMPMs",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarAMPMs"
  },
  {
    "label": "UCalendarAMPMs",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarAMPMs"
  },
  {
    "label": "USystemTimeZoneType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "USystemTimeZoneType"
  },
  {
    "label": "USystemTimeZoneType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "USystemTimeZoneType"
  },
  {
    "label": "LocalUCalendarPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalUCalendarPointer"
  },
  {
    "label": "UCalendarDisplayNameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDisplayNameType"
  },
  {
    "label": "UCalendarDisplayNameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarDisplayNameType"
  },
  {
    "label": "UCalendarAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarAttribute"
  },
  {
    "label": "UCalendarAttribute",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarAttribute"
  },
  {
    "label": "UCalendarWallTimeOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarWallTimeOption"
  },
  {
    "label": "UCalendarWallTimeOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarWallTimeOption"
  },
  {
    "label": "UCalendarLimitType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarLimitType"
  },
  {
    "label": "UCalendarLimitType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarLimitType"
  },
  {
    "label": "UCalendarWeekdayType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarWeekdayType"
  },
  {
    "label": "UCalendarWeekdayType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UCalendarWeekdayType"
  },
  {
    "label": "UTimeZoneTransitionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeZoneTransitionType"
  },
  {
    "label": "UTimeZoneTransitionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTimeZoneTransitionType"
  },
  {
    "label": "ucal_openTimeZoneIDEnumeration()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_openTimeZoneIDEnumeration(USystemTimeZoneType zoneType, const char* region,\n                                const int32_t* rawOffset, UErrorCode* ec)"
  },
  {
    "label": "ucal_openTimeZones()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_openTimeZones(UErrorCode* ec)"
  },
  {
    "label": "country()",
    "kind": "Method",
    "detail": "Function (no)",
    "insertText": "country(e.g., \"UTC\")"
  },
  {
    "label": "ucal_openCountryTimeZones()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_openCountryTimeZones(const char* country, UErrorCode* ec)"
  },
  {
    "label": "ucal_getDefaultTimeZone()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getDefaultTimeZone(UChar* result, int32_t resultCapacity, UErrorCode* ec)"
  },
  {
    "label": "ucal_setDefaultTimeZone()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_setDefaultTimeZone(const UChar* zoneID, UErrorCode* ec)"
  },
  {
    "label": "ucal_getDSTSavings()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getDSTSavings(const UChar* zoneID, UErrorCode* ec)"
  },
  {
    "label": "ucal_getNow()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getNow(void)"
  },
  {
    "label": "ucal_open()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_open(const UChar*   zoneID,\n          int32_t        len,\n          const char*    locale,\n          UCalendarType  type,\n          UErrorCode*    status)"
  },
  {
    "label": "ucal_close()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_close(UCalendar *cal)"
  },
  {
    "label": "ucal_clone()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_clone(const UCalendar* cal,\n           UErrorCode*      status)"
  },
  {
    "label": "ucal_setTimeZone()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_setTimeZone(UCalendar*    cal,\n                 const UChar*  zoneID,\n                 int32_t       len,\n                 UErrorCode*   status)"
  },
  {
    "label": "ucal_getTimeZoneID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getTimeZoneID(const UCalendar *cal,\n                   UChar *result,\n                   int32_t resultLength,\n                   UErrorCode *status)"
  },
  {
    "label": "ucal_getTimeZoneDisplayName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getTimeZoneDisplayName(const UCalendar*          cal,\n                            UCalendarDisplayNameType  type,\n                            const char*               locale,\n                            UChar*                    result,\n                            int32_t                   resultLength,\n                            UErrorCode*               status)"
  },
  {
    "label": "ucal_inDaylightTime()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_inDaylightTime(const UCalendar*  cal,\n                    UErrorCode*       status )"
  },
  {
    "label": "ucal_setGregorianChange()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_setGregorianChange(UCalendar *cal, UDate date, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucal_getGregorianChange()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getGregorianChange(const UCalendar *cal, UErrorCode *pErrorCode)"
  },
  {
    "label": "ucal_getAttribute()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getAttribute(const UCalendar*    cal,\n                  UCalendarAttribute  attr)"
  },
  {
    "label": "ucal_setAttribute()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_setAttribute(UCalendar*          cal,\n                  UCalendarAttribute  attr,\n                  int32_t             newValue)"
  },
  {
    "label": "ucal_getAvailable()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getAvailable(int32_t localeIndex)"
  },
  {
    "label": "ucal_countAvailable()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_countAvailable(void)"
  },
  {
    "label": "ucal_getMillis()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getMillis(const UCalendar*  cal,\n               UErrorCode*       status)"
  },
  {
    "label": "ucal_setMillis()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_setMillis(UCalendar*   cal,\n               UDate        dateTime,\n               UErrorCode*  status )"
  },
  {
    "label": "ucal_setDate()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_setDate(UCalendar*   cal,\n             int32_t      year,\n             int32_t      month,\n             int32_t      date,\n             UErrorCode*  status)"
  },
  {
    "label": "ucal_setDateTime()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_setDateTime(UCalendar*   cal,\n                 int32_t      year,\n                 int32_t      month,\n                 int32_t      date,\n                 int32_t      hour,\n                 int32_t      minute,\n                 int32_t      second,\n                 UErrorCode*  status)"
  },
  {
    "label": "ucal_equivalentTo()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_equivalentTo(const UCalendar*  cal1,\n                  const UCalendar*  cal2)"
  },
  {
    "label": "ucal_add()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_add(UCalendar*           cal,\n         UCalendarDateFields  field,\n         int32_t              amount,\n         UErrorCode*          status)"
  },
  {
    "label": "ucal_roll()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_roll(UCalendar*           cal,\n          UCalendarDateFields  field,\n          int32_t              amount,\n          UErrorCode*          status)"
  },
  {
    "label": "ucal_get()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_get(const UCalendar*     cal,\n         UCalendarDateFields  field,\n         UErrorCode*          status )"
  },
  {
    "label": "ucal_set()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_set(UCalendar*           cal,\n         UCalendarDateFields  field,\n         int32_t              value)"
  },
  {
    "label": "ucal_isSet()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_isSet(const UCalendar*     cal,\n           UCalendarDateFields  field)"
  },
  {
    "label": "ucal_clearField()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_clearField(UCalendar*           cal,\n                UCalendarDateFields  field)"
  },
  {
    "label": "ucal_clear()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_clear(UCalendar* calendar)"
  },
  {
    "label": "ucal_getLimit()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getLimit(const UCalendar*     cal,\n              UCalendarDateFields  field,\n              UCalendarLimitType   type,\n              UErrorCode*          status)"
  },
  {
    "label": "ucal_getLocaleByType()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getLocaleByType(const UCalendar *cal, ULocDataLocaleType type, UErrorCode* status)"
  },
  {
    "label": "ucal_getTZDataVersion()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getTZDataVersion(UErrorCode* status)"
  },
  {
    "label": "ucal_getCanonicalTimeZoneID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getCanonicalTimeZoneID(const UChar* id, int32_t len,\n                            UChar* result, int32_t resultCapacity, UBool *isSystemID, UErrorCode* status)"
  },
  {
    "label": "ucal_getType()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getType(const UCalendar *cal, UErrorCode* status)"
  },
  {
    "label": "ucal_getKeywordValuesForLocale()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getKeywordValuesForLocale(const char* key,\n                               const char* locale,\n                               UBool commonlyUsed,\n                               UErrorCode* status)"
  },
  {
    "label": "ucal_getDayOfWeekType()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getDayOfWeekType(const UCalendar *cal, UCalendarDaysOfWeek dayOfWeek, UErrorCode* status)"
  },
  {
    "label": "ucal_getWeekendTransition()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getWeekendTransition(const UCalendar *cal, UCalendarDaysOfWeek dayOfWeek, UErrorCode *status)"
  },
  {
    "label": "ucal_isWeekend()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_isWeekend(const UCalendar *cal, UDate date, UErrorCode *status)"
  },
  {
    "label": "ucal_getFieldDifference()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getFieldDifference(UCalendar* cal,\n                        UDate target,\n                        UCalendarDateFields field,\n                        UErrorCode* status)"
  },
  {
    "label": "ucal_getTimeZoneTransitionDate()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getTimeZoneTransitionDate(const UCalendar* cal, UTimeZoneTransitionType type,\n                               UDate* transition, UErrorCode* status)"
  },
  {
    "label": "ucal_getWindowsTimeZoneID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getWindowsTimeZoneID(const UChar* id, int32_t len,\n                            UChar* winid, int32_t winidCapacity, UErrorCode* status)"
  },
  {
    "label": "ucal_getTimeZoneIDForWindowsID()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "ucal_getTimeZoneIDForWindowsID(const UChar* winid, int32_t len, const char* region,\n                                UChar* id, int32_t idCapacity, UErrorCode* status)"
  }
]