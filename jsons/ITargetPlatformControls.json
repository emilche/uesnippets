[
  {
    "label": "IDeviceManagerCustomPlatformWidgetCreator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDeviceManagerCustomPlatformWidgetCreator"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "FDataDrivenPlatformInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataDrivenPlatformInfo"
  },
  {
    "label": "ITargetPlatformSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformSettings"
  },
  {
    "label": "FTargetPlatformInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetPlatformInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ITargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatformControls"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "ITargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Interfaces / ITargetDevice . h \" class IDeviceManagerCustomPlatformWidgetCreator ; class IPlugin ; struct FDataDrivenPlatformInfo ; class ITargetPlatformSettings ; namespace PlatformInfo { struct FTargetPlatformInfo ; } enum class EPlatformAuthentication { Never,Possible,Always,} ; namespace ETargetPlatformReadyStatus { const int32 Ready = 0 ; const int32 SDKNotFound = 1 ; const int32 CodeUnsupported = 2 ; const int32 PluginsUnsupported = 4 ; const int32 SigningKeyNotFound = 8 ; const int32 ProvisionNotFound = 1 6 ; const int32 ManifestNotFound = 3 2 ; const int32 RemoveServerNameEmpty = 6 4 ; const int32 LicenseNotAccepted = 1 2 8 ; const int32 CodeBuildRequired = 2 5 6 ; } ; class ITargetPlatformControls { public :)",
    "insertText": "ITargetPlatformControls(ITargetPlatformSettings* InTargetPlatformSettings) :TargetPlatformSettings(InTargetPlatformSettings)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "AddDevice(const FString& DeviceName, bool bDefault)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddDevice(const FString& DeviceId, const FString& DeviceUserFriendlyName, const FString& Username, const FString& Password, bool bDefault)"
  },
  {
    "label": "PlatformName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "PlatformName()"
  },
  {
    "label": "DisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "DisplayName()"
  },
  {
    "label": "CheckRequirements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CheckRequirements(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FString& OutTutorialPath, FString& OutDocumentationPath, FText& CustomizedLogMessage)"
  },
  {
    "label": "RequiresTempTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresTempTarget(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FText& OutReason)"
  },
  {
    "label": "GetTargetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo&)",
    "insertText": "GetTargetPlatformInfo()"
  },
  {
    "label": "GetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const FDataDrivenPlatformInfo&)",
    "insertText": "GetPlatformInfo()"
  },
  {
    "label": "CookingDeviceProfileName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CookingDeviceProfileName()"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDeviceCheck(bool OnOff)"
  },
  {
    "label": "GetAllDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllDevices(TArray<ITargetDevicePtr>& OutDevices)"
  },
  {
    "label": "GetZlibReplacementFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetZlibReplacementFormat()"
  },
  {
    "label": "GetMemoryMappingAlignment()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMemoryMappingAlignment()"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreamingInstallManifest(const TMultiMap<FString, int32>& PakchunkMap, const TSet<int32>& PakchunkIndicesInUse)"
  },
  {
    "label": "GetDefaultDevice()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr)",
    "insertText": "GetDefaultDevice()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr)",
    "insertText": "GetDevice(const FTargetDeviceId& DeviceId)"
  },
  {
    "label": "HasEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEditorOnlyData()"
  },
  {
    "label": "AllowsEditorObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsEditorObjects()"
  },
  {
    "label": "AllowsDevelopmentObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsDevelopmentObjects()"
  },
  {
    "label": "IsClientOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClientOnly()"
  },
  {
    "label": "IsLittleEndian()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLittleEndian()"
  },
  {
    "label": "IsRunningPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunningPlatform()"
  },
  {
    "label": "IsServerOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsServerOnly()"
  },
  {
    "label": "IsEnabledForPlugin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabledForPlugin(const IPlugin& Plugin)"
  },
  {
    "label": "CanSupportRemoteShaderCompile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSupportRemoteShaderCompile()"
  },
  {
    "label": "GetShaderCompilerDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderCompilerDependencies(TArray<FString>& OutDependencies)"
  },
  {
    "label": "IsSdkInstalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSdkInstalled(bool bProjectHasCode, FString& OutDocumentationPath)"
  },
  {
    "label": "RequiresCookedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresCookedData()"
  },
  {
    "label": "RequiresOriginalReleaseVersionForPatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresOriginalReleaseVersionForPatch()"
  },
  {
    "label": "HasSecurePackageFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSecurePackageFormat()"
  },
  {
    "label": "RequiresUserCredentials()",
    "kind": "Method",
    "detail": "Function (EPlatformAuthentication)",
    "insertText": "RequiresUserCredentials()"
  },
  {
    "label": "SupportsAutoSDK()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsAutoSDK()"
  },
  {
    "label": "SupportsBuildTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBuildTarget(EBuildTargetType TargetType)"
  },
  {
    "label": "GetRuntimePlatformType()",
    "kind": "Method",
    "detail": "Function (EBuildTargetType)",
    "insertText": "GetRuntimePlatformType()"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray)"
  },
  {
    "label": "GetPhysicsFormat()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE FName)",
    "insertText": "GetPhysicsFormat(class UBodySetup* Body)"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureFormats(const class UTexture* Texture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetTextureSizeLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureSizeLimits(uint64 & OutMaximumSurfaceBytes, uint64 & OutMaximumPackageBytes)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetTextureFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextureFormatModuleHints(TArray<FName>& OutModuleNames)"
  },
  {
    "label": "FinalizeVirtualTextureLayerFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FinalizeVirtualTextureLayerFormat(FName Format)"
  },
  {
    "label": "SupportsLQCompressionTextureFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsLQCompressionTextureFormat()"
  },
  {
    "label": "GetWaveFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetWaveFormat(const class USoundWave* Wave)"
  },
  {
    "label": "GetAllWaveFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllWaveFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetWaveFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWaveFormatModuleHints(TArray<FName>& OutModuleNames)"
  },
  {
    "label": "AllowAudioVisualData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowAudioVisualData()"
  },
  {
    "label": "AllowObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowObject(const class UObject* Object)"
  },
  {
    "label": "GetMeshBuilderModuleName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetMeshBuilderModuleName()"
  },
  {
    "label": "PackageBuild()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "PackageBuild(const FString& InPackgeDirectory)"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsVariants()"
  },
  {
    "label": "GetVariantPriority()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetVariantPriority()"
  },
  {
    "label": "SendLowerCaseFilePaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendLowerCaseFilePaths()"
  },
  {
    "label": "GetBuildProjectSettingKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildProjectSettingKeys(FString& OutSection, TArray<FString>& InBoolKeys, TArray<FString>& InIntKeys, TArray<FString>& InStringKeys)"
  },
  {
    "label": "GetPlatformOrdinal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPlatformOrdinal()"
  },
  {
    "label": "GetPlatformFromOrdinal()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatformControls*)",
    "insertText": "GetPlatformFromOrdinal(int32 Ordinal)"
  },
  {
    "label": "GetCustomWidgetCreator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDeviceManagerCustomPlatformWidgetCreator>)",
    "insertText": "GetCustomWidgetCreator()"
  },
  {
    "label": "ShouldExpandTo32Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExpandTo32Bit(const uint16* Indices, const int32 NumIndices)"
  },
  {
    "label": "CopyFileToTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFileToTarget(const FString& DeviceId, const FString& HostFilename, const FString& TargetFilename, const TMap<FString, FString>& CustomPlatformData)"
  },
  {
    "label": "InitializeForCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeForCook()"
  },
  {
    "label": "GetExtraPackagesToCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExtraPackagesToCook(TArray<FName>& PackageNames)"
  },
  {
    "label": "InitializeHostPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeHostPlatform()"
  },
  {
    "label": "GetTargetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (ITargetPlatformSettings*)",
    "insertText": "GetTargetPlatformSettings()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(ITargetPlatformControls, FOnTargetDeviceDiscovered, ITargetDeviceRef)"
  },
  {
    "label": "OnDeviceDiscovered()",
    "kind": "Method",
    "detail": "Function (FOnTargetDeviceDiscovered&)",
    "insertText": "OnDeviceDiscovered()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(ITargetPlatformControls, FOnTargetDeviceLost, ITargetDeviceRef)"
  },
  {
    "label": "OnDeviceLost()",
    "kind": "Method",
    "detail": "Function (FOnTargetDeviceLost&)",
    "insertText": "OnDeviceLost()"
  },
  {
    "label": "AssignPlatformOrdinal()",
    "kind": "Method",
    "detail": "Function (protected : ITargetPlatformSettings* TargetPlatformSettings ; int32)",
    "insertText": "AssignPlatformOrdinal(const ITargetPlatformControls& Platform)"
  }
]