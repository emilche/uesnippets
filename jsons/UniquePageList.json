[
  {
    "label": "FUniquePageList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniquePageList"
  },
  {
    "label": "FUniquePageList()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VirtualTextureShared . h \" # include \" Containers / HashTable . h \" class FUniquePageList { public :)",
    "insertText": "FUniquePageList()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(uint32 Page, uint32 Count)"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNum()"
  },
  {
    "label": "FUniquePageList()",
    "kind": "Method",
    "detail": "Function (private : enum { HashSize = 1 6* 1 0 2 4,MaxUniquePages = 8* 1 0 2 4,} ; bool bInitialized ; uint32 NumPages ; uint32 MaxNumCollisions ; uint16 HashIndices [ HashSize ] ; uint32 Pages [ MaxUniquePages ] ; uint16 Counts [ MaxUniquePages ] ; } ;)",
    "insertText": "FUniquePageList() : bInitialized( false ) , NumPages( 0 ) , MaxNumCollisions( 0)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(HashIndices, 0xff)"
  },
  {
    "label": "MurmurFinalize32()",
    "kind": "Method",
    "detail": "Function (uint32 HashIndex =)",
    "insertText": "MurmurFinalize32(Page) & (HashSize - 1u)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 NumCollisions = 0 u ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 PageIndex = HashIndices [ HashIndex ] ;)",
    "insertText": "if(PageIndex == 0xffff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PageIndex = NumPages + + ; HashIndices [ HashIndex ] = PageIndex ; Pages [ PageIndex ] = Page ; Counts [ PageIndex ] = Count ; } break ; } else)",
    "insertText": "if(Pages[PageIndex] == Page)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 PrevCount = Counts [ PageIndex ] ; Counts [ PageIndex ] = FMath::Min<)",
    "insertText": "uint32(PrevCount + Count, 0xffff)"
  },
  {
    "label": "HashIndex()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "HashIndex(HashIndex + 1u) & (HashSize - 1u)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (+ + NumCollisions ; } # if DO_GUARD_SLOW MaxNumCollisions =)",
    "insertText": "Max(MaxNumCollisions, NumCollisions)"
  },
  {
    "label": "MergePages()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "MergePages(const FUniquePageList* RESTRICT Other)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Other->Pages[Index], Other->Counts[Index])"
  }
]