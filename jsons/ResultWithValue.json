[
  {
    "label": "ResultWithValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResultWithValue"
  },
  {
    "label": "ResultWithValue()",
    "kind": "Method",
    "detail": "Function (# ifndef OBOE_RESULT_WITH_VALUE_H # define OBOE_RESULT_WITH_VALUE_H # include \" oboe / Definitions . h \" # include<iostream> # include<sstream> namespace oboe { template<T> class ResultWithValue { public :)",
    "insertText": "ResultWithValue(oboe::Result error)"
  },
  {
    "label": "mError()",
    "kind": "Method",
    "detail": "Function (},)",
    "insertText": "mError(error)"
  },
  {
    "label": "ResultWithValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ResultWithValue(T value) : mValue(value) , mError(oboe::Result::OK)"
  },
  {
    "label": "error()",
    "kind": "Method",
    "detail": "Function (} oboe::Result)",
    "insertText": "error()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} else { return ResultWithValue<)",
    "insertText": "T(static_cast<Result>(numericResult))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } private : const T mValue ; const oboe::Result mError ; } ; template<T> std::ostream&)",
    "insertText": "operator(std::ostream &strm, const ResultWithValue<T> &result)"
  },
  {
    "label": "convertToText()",
    "kind": "Method",
    "detail": "Function (strm<<)",
    "insertText": "convertToText(result.error())"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} else { strm<<result .)",
    "insertText": "value()"
  }
]