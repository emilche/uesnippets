[
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "TVolumeLightingSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVolumeLightingSample"
  },
  {
    "label": "FLightVolumeOctreeSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightVolumeOctreeSemantics"
  },
  {
    "label": "FPrecomputedLightVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolumeData"
  },
  {
    "label": "FPrecomputedLightVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolume"
  },
  {
    "label": "FPrecomputedLightVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolume"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector(PackedSkyBentNormal.R / 255.0f * 2.0f - 1.0f, PackedSkyBentNormal.G / 255.0f * 2.0f - 1.0f, PackedSkyBentNormal.B / 255.0f * 2.0f - 1.0f)"
  },
  {
    "label": "FPrecomputedLightVolumeData()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPrecomputedLightVolumeData()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FBox& NewBounds)"
  },
  {
    "label": "AddHighQualityLightingSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHighQualityLightingSample(const FVolumeLightingSample& NewHighQualitySample)"
  },
  {
    "label": "AddLowQualityLightingSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLowQualityLightingSample(const FVolumeLightingSample& NewLowQualitySample)"
  },
  {
    "label": "FinalizeSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeSamples()"
  },
  {
    "label": "InvalidateLightingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLightingCache()"
  },
  {
    "label": "FPrecomputedLightVolume()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPrecomputedLightVolume()"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene(class FSceneInterface* Scene, class UMapBuildDataRegistry* Registry, FGuid LevelBuildDataId)"
  },
  {
    "label": "RemoveFromScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromScene(FSceneInterface* Scene)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(const FPrecomputedLightVolumeData* NewData, FSceneInterface* Scene)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset)"
  }
]