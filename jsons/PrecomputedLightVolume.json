[
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "TVolumeLightingSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TVolumeLightingSample"
  },
  {
    "label": "FLightVolumeOctreeSemantics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightVolumeOctreeSemantics"
  },
  {
    "label": "FPrecomputedLightVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolumeData"
  },
  {
    "label": "FPrecomputedLightVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolume"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "TVolumeLightingSample()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Math / SHMath . h \" # include \" Math / GenericOctreePublic . h \" # include \" Math / GenericOctree . h \" class FSceneInterface ; template<int32 SHOrder> class TVolumeLightingSample { public : FVector3f Position ; float Radius ; TSHVectorRGB<SHOrder> Lighting ; FColor PackedSkyBentNormal ; float DirectionalLightShadowing ;)",
    "insertText": "TVolumeLightingSample() : Position(FVector(0, 0, 0)), Radius(0), PackedSkyBentNormal(FColor(127, 127, 255)), DirectionalLightShadowing(1)"
  },
  {
    "label": "TVolumeLightingSample()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TVolumeLightingSample(const TVolumeLightingSample<2>& Other)"
  },
  {
    "label": "TVolumeLightingSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TVolumeLightingSample(const TVolumeLightingSample<3>& Other)"
  },
  {
    "label": "SetPackedSkyBentNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackedSkyBentNormal(FVector InSkyBentNormal)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (PackedSkyBentNormal =)",
    "insertText": "FColor(FMath::TruncToInt((InSkyBentNormal.X * .5f + .5f) * 255.0f), FMath::TruncToInt((InSkyBentNormal.Y * .5f + .5f) * 255.0f), FMath::TruncToInt((InSkyBentNormal.Z * .5f + .5f) * 255.0f))"
  },
  {
    "label": "GetSkyBentNormalUnpacked()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetSkyBentNormalUnpacked()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, TVolumeLightingSample<SHOrder>& Sample)"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (} ; typedef TVolumeLightingSample<3> FVolumeLightingSample ; typedef TVolumeLightingSample<2> FVolumeLightingSample2Band ; struct FLightVolumeOctreeSemantics { enum { MaxElementsPerLeaf = 4 } ; enum { MaxNodeDepth = 1 2 } ; typedef FDefaultAllocator ElementAllocator ; const float*)",
    "insertText": "GetBoundingBox(const FVolumeLightingSample& Sample)"
  },
  {
    "label": "Prefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Prefetch(&Sample, PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "ApplyOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyOffset(FVolumeLightingSample& Element, FVector Offset)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (Element . Position + =)",
    "insertText": "FVector3f(Offset)"
  },
  {
    "label": "FPrecomputedLightVolumeData()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TOctree2<FVolumeLightingSample,FLightVolumeOctreeSemantics> FLightVolumeOctree ; class FPrecomputedLightVolumeData { public :)",
    "insertText": "FPrecomputedLightVolumeData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPrecomputedLightVolumeData& Volume)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPrecomputedLightVolumeData*& Volume)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FBox& NewBounds)"
  },
  {
    "label": "AddHighQualityLightingSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHighQualityLightingSample(const FVolumeLightingSample& NewHighQualitySample)"
  },
  {
    "label": "AddLowQualityLightingSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLowQualityLightingSample(const FVolumeLightingSample& NewLowQualitySample)"
  },
  {
    "label": "FinalizeSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeSamples()"
  },
  {
    "label": "InvalidateLightingCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLightingCache()"
  },
  {
    "label": "GetAllocatedBytes()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedBytes()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "FPrecomputedLightVolume()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPrecomputedLightVolume()"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene(class FSceneInterface* Scene, class UMapBuildDataRegistry* Registry, FGuid LevelBuildDataId)"
  },
  {
    "label": "RemoveFromScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromScene(FSceneInterface* Scene)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(const FPrecomputedLightVolumeData* NewData, FSceneInterface* Scene)"
  },
  {
    "label": "InterpolateIncidentRadiancePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateIncidentRadiancePoint(const FVector& Position, float& AccumulatedWeight, float& AccumulatedDirectionalLightShadowing, FSHVectorRGB3& AccumulatedIncidentRadiance, FVector& SkyBentNormal)"
  },
  {
    "label": "InterpolateIncidentRadianceBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateIncidentRadianceBlock(const FBoxCenterAndExtent& BoundingBox, const FIntVector& QueryCellDimensions, const FIntVector& DestCellDimensions, const FIntVector& DestCellPosition, TArray<float>& AccumulatedWeights, TArray<FSHVectorRGB2>& AccumulatedIncidentRadiance)"
  },
  {
    "label": "DebugDrawSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawSamples(class FPrimitiveDrawInterface* PDI, bool bDrawDirectionalShadowing)"
  },
  {
    "label": "IntersectBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntersectBounds(const FBoxSphereBounds& InBounds)"
  },
  {
    "label": "IsAddedToScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAddedToScene()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset)"
  }
]