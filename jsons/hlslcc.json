[
  {
    "label": "ir_function_signature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ir_function_signature"
  },
  {
    "label": "FCodeBackend",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCodeBackend"
  },
  {
    "label": "exec_list",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "exec_list"
  },
  {
    "label": "_mesa_glsl_parse_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_mesa_glsl_parse_state"
  },
  {
    "label": "FHlslCrossCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHlslCrossCompilerContext"
  },
  {
    "label": "ILanguageSpec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ILanguageSpec"
  },
  {
    "label": "FCRTMemLeakScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCRTMemLeakScope"
  },
  {
    "label": "FCodeBackend()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HlslccDefinitions . h \" enum { HLSLCC_VersionMajor = 0,HLSLCC_VersionMinor = 7 3,} ; class ir_function_signature ; class FCodeBackend { protected : const unsigned int HlslCompileFlags ; const EHlslCompileTarget Target ; public :)",
    "insertText": "FCodeBackend(unsigned int InHlslCompileFlags, EHlslCompileTarget InTarget) : HlslCompileFlags(InHlslCompileFlags), Target(InTarget)"
  },
  {
    "label": "FCodeBackend()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCodeBackend()"
  },
  {
    "label": "GenerateCode()",
    "kind": "Method",
    "detail": "Function (} char*)",
    "insertText": "GenerateCode(struct exec_list* ir, struct _mesa_glsl_parse_state* ParseState, EHlslShaderFrequency Frequency)"
  },
  {
    "label": "ApplyAndVerifyPlatformRestrictions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyAndVerifyPlatformRestrictions(exec_list* Instructions, _mesa_glsl_parse_state* ParseState, EHlslShaderFrequency Frequency)"
  },
  {
    "label": "Optimize()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "Optimize(exec_list* Instructions, _mesa_glsl_parse_state* ParseState)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate(exec_list* Instructions, _mesa_glsl_parse_state* ParseState)"
  },
  {
    "label": "FindEntryPointFunction()",
    "kind": "Method",
    "detail": "Function (ir_function_signature*)",
    "insertText": "FindEntryPointFunction(exec_list* Instructions, _mesa_glsl_parse_state* ParseState, const char* EntryPoint)"
  },
  {
    "label": "GetMainFunction()",
    "kind": "Method",
    "detail": "Function (protected : ir_function_signature*)",
    "insertText": "GetMainFunction(exec_list* Instructions)"
  },
  {
    "label": "FHlslCrossCompilerContext()",
    "kind": "Method",
    "detail": "Function (} ; class FHlslCrossCompilerContext { public :)",
    "insertText": "FHlslCrossCompilerContext(int InFlags, EHlslShaderFrequency InShaderFrequency, EHlslCompileTarget InCompileTarget)"
  },
  {
    "label": "FHlslCrossCompilerContext()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FHlslCrossCompilerContext()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(const char* InSourceFilename, struct ILanguageSpec* InLanguageSpec)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Run(const char* InShaderSource, const char* InEntryPoint, FCodeBackend* InShaderBackEnd, char** OutShaderSource, char** OutErrorLog)"
  },
  {
    "label": "RunFrontend()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "RunFrontend(const char** InOutShaderSource)"
  },
  {
    "label": "RunBackend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunBackend(const char* InShaderSource, const char* InEntryPoint, FCodeBackend* InShaderBackEnd)"
  },
  {
    "label": "FCRTMemLeakScope()",
    "kind": "Method",
    "detail": "Function (void* MemContext ; struct _mesa_glsl_parse_state* ParseState ; struct exec_list* ir ; int Flags ; const EHlslShaderFrequency ShaderFrequency ; const EHlslCompileTarget CompileTarget ; } ; # define ENABLE_CRT_MEM_LEAKS 0&& WIN32 # if ENABLE_CRT_MEM_LEAKS # define _CRTDBG_MAP_ALLOC # include<stdlib . h> # include<crtdbg . h> # endif class FCRTMemLeakScope { public :)",
    "insertText": "FCRTMemLeakScope(bool bInDumpLeaks = false) : bDumpLeaks(bInDumpLeaks)"
  },
  {
    "label": "_CrtMemCheckpoint()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_CRT_MEM_LEAKS)",
    "insertText": "_CrtMemCheckpoint(&Begin)"
  },
  {
    "label": "FCRTMemLeakScope()",
    "kind": "Method",
    "detail": "Function (# endif } ~)",
    "insertText": "FCRTMemLeakScope()"
  },
  {
    "label": "_CrtMemCheckpoint()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_CRT_MEM_LEAKS)",
    "insertText": "_CrtMemCheckpoint(&End)"
  },
  {
    "label": "_CrtMemDumpStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CrtMemDumpStatistics(&Delta)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bDumpLeaks)"
  },
  {
    "label": "_CrtDumpMemoryLeaks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_CrtDumpMemoryLeaks()"
  },
  {
    "label": "BreakOnBlock()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "BreakOnBlock(long Block)"
  },
  {
    "label": "_CrtSetBreakAlloc()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_CRT_MEM_LEAKS)",
    "insertText": "_CrtSetBreakAlloc(Block)"
  },
  {
    "label": "CheckIntegrity()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "CheckIntegrity()"
  },
  {
    "label": "_CrtCheckMemory()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_CRT_MEM_LEAKS)",
    "insertText": "_CrtCheckMemory()"
  }
]