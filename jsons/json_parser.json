[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "JSONParserTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JSONParserTest"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "JsonParseError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JsonParseError"
  },
  {
    "label": "Token",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Token"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "centralizes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "centralizes"
  },
  {
    "label": "StringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBuilder"
  },
  {
    "label": "JSONParserTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JSONParserTest"
  },
  {
    "label": "JSONParser()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "JSONParser(int options, size_t max_depth = kAbsoluteMaxDepth)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "Parse(StringPiece input)"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "StringBuilder(const char* pos)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(base_icu::UChar32 point)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert()"
  },
  {
    "label": "DestructiveAsString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DestructiveAsString()"
  },
  {
    "label": "PeekChars()",
    "kind": "Method",
    "detail": "Function (absl::optional<StringPiece>)",
    "insertText": "PeekChars(size_t count)"
  },
  {
    "label": "PeekChar()",
    "kind": "Method",
    "detail": "Function (absl::optional<char>)",
    "insertText": "PeekChar()"
  },
  {
    "label": "ConsumeChars()",
    "kind": "Method",
    "detail": "Function (absl::optional<StringPiece>)",
    "insertText": "ConsumeChars(size_t count)"
  },
  {
    "label": "ConsumeChar()",
    "kind": "Method",
    "detail": "Function (absl::optional<char>)",
    "insertText": "ConsumeChar()"
  },
  {
    "label": "GetNextToken()",
    "kind": "Method",
    "detail": "Function (Token)",
    "insertText": "GetNextToken()"
  },
  {
    "label": "EatWhitespaceAndComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EatWhitespaceAndComments()"
  },
  {
    "label": "EatComment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EatComment()"
  },
  {
    "label": "ParseNextToken()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ParseNextToken()"
  },
  {
    "label": "ParseToken()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ParseToken(Token token)"
  },
  {
    "label": "ConsumeDictionary()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeDictionary()"
  },
  {
    "label": "ConsumeList()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeList()"
  },
  {
    "label": "ConsumeString()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeString()"
  },
  {
    "label": "ConsumeStringRaw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConsumeStringRaw(StringBuilder* out)"
  },
  {
    "label": "DecodeUTF16()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeUTF16(base_icu::UChar32* out_code_point)"
  },
  {
    "label": "ConsumeNumber()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeNumber()"
  },
  {
    "label": "ReadInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadInt(bool allow_leading_zeros)"
  },
  {
    "label": "ConsumeLiteral()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeLiteral()"
  },
  {
    "label": "ConsumeIfMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConsumeIfMatch(StringPiece match)"
  },
  {
    "label": "ReportError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError(JsonParseError code, int column_adjust)"
  },
  {
    "label": "FormatErrorMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatErrorMessage(int line, int column,\n                                        const std::string& description)"
  }
]