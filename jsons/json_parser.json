[
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "JSONParserTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JSONParserTest"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "JsonParseError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "JsonParseError"
  },
  {
    "label": "Token",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Token"
  },
  {
    "label": "StringBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringBuilder"
  },
  {
    "label": "JSONParser()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_JSON_JSON_PARSER_H_ # define BASE_JSON_JSON_PARSER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<string> # include \" base / base_export . h \" # include \" base / compiler_specific . h \" # include \" base / gtest_prod_util . h \" # include \" base / json / json_common . h \" # include \" base / strings / string_piece . h \" # include \" base / third_party / icu / icu_utf . h \" # include \" base / values . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class Value ; namespace internal { class JSONParserTest ; class BASE_EXPORT JSONParser { public : enum JsonParseError { JSON_NO_ERROR = base::ValueDeserializer::kErrorCodeNoError,JSON_SYNTAX_ERROR = base::ValueDeserializer::kErrorCodeInvalidFormat,JSON_INVALID_ESCAPE,JSON_UNEXPECTED_TOKEN,JSON_TRAILING_COMMA,JSON_TOO_MUCH_NESTING,JSON_UNEXPECTED_DATA_AFTER_ROOT,JSON_UNSUPPORTED_ENCODING,JSON_UNQUOTED_DICTIONARY_KEY,JSON_UNREPRESENTABLE_NUMBER,JSON_PARSE_ERROR_COUNT } ; const char kSyntaxError [ ] ; const char kInvalidEscape [ ] ; const char kUnexpectedToken [ ] ; const char kTrailingComma [ ] ; const char kTooMuchNesting [ ] ; const char kUnexpectedDataAfterRoot [ ] ; const char kUnsupportedEncoding [ ] ; const char kUnquotedDictionaryKey [ ] ; const char kUnrepresentableNumber [ ] ;)",
    "insertText": "JSONParser(int options, size_t max_depth = kAbsoluteMaxDepth)"
  },
  {
    "label": "JSONParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JSONParser(const JSONParser&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JSONParser&)",
    "insertText": "operator(const JSONParser&)"
  },
  {
    "label": "JSONParser()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JSONParser()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "Parse(StringPiece input)"
  },
  {
    "label": "error_code()",
    "kind": "Method",
    "detail": "Function (JsonParseError)",
    "insertText": "error_code()"
  },
  {
    "label": "GetErrorMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetErrorMessage()"
  },
  {
    "label": "error_line()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "error_line()"
  },
  {
    "label": "error_column()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "error_column()"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (private : enum Token { T_OBJECT_BEGIN,T_OBJECT_END,T_ARRAY_BEGIN,T_ARRAY_END,T_STRING,T_NUMBER,T_BOOL_TRUE,T_BOOL_FALSE,T_NULL,T_LIST_SEPARATOR,T_OBJECT_PAIR_SEPARATOR,T_END_OF_INPUT,T_INVALID_TOKEN,} ; class StringBuilder { public :)",
    "insertText": "StringBuilder()"
  },
  {
    "label": "StringBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StringBuilder(const char* pos)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StringBuilder&)",
    "insertText": "operator(StringBuilder&& other)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(base_icu::UChar32 point)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Convert()"
  },
  {
    "label": "DestructiveAsString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "DestructiveAsString()"
  },
  {
    "label": "PeekChars()",
    "kind": "Method",
    "detail": "Function (private : const char* pos_ ; size_t length_ ; absl::optional<std::string> string_ ; } ; absl::optional<StringPiece>)",
    "insertText": "PeekChars(size_t count)"
  },
  {
    "label": "PeekChar()",
    "kind": "Method",
    "detail": "Function (absl::optional<char>)",
    "insertText": "PeekChar()"
  },
  {
    "label": "ConsumeChars()",
    "kind": "Method",
    "detail": "Function (absl::optional<StringPiece>)",
    "insertText": "ConsumeChars(size_t count)"
  },
  {
    "label": "ConsumeChar()",
    "kind": "Method",
    "detail": "Function (absl::optional<char>)",
    "insertText": "ConsumeChar()"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "pos()"
  },
  {
    "label": "GetNextToken()",
    "kind": "Method",
    "detail": "Function (Token)",
    "insertText": "GetNextToken()"
  },
  {
    "label": "EatWhitespaceAndComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EatWhitespaceAndComments()"
  },
  {
    "label": "EatComment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EatComment()"
  },
  {
    "label": "ParseNextToken()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ParseNextToken()"
  },
  {
    "label": "ParseToken()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ParseToken(Token token)"
  },
  {
    "label": "ConsumeDictionary()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeDictionary()"
  },
  {
    "label": "ConsumeList()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeList()"
  },
  {
    "label": "ConsumeString()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeString()"
  },
  {
    "label": "ConsumeStringRaw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConsumeStringRaw(StringBuilder* out)"
  },
  {
    "label": "DecodeUTF16()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DecodeUTF16(base_icu::UChar32* out_code_point)"
  },
  {
    "label": "ConsumeNumber()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeNumber()"
  },
  {
    "label": "ReadInt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadInt(bool allow_leading_zeros)"
  },
  {
    "label": "ConsumeLiteral()",
    "kind": "Method",
    "detail": "Function (absl::optional<Value>)",
    "insertText": "ConsumeLiteral()"
  },
  {
    "label": "ConsumeIfMatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConsumeIfMatch(StringPiece match)"
  },
  {
    "label": "ReportError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportError(JsonParseError code, int column_adjust)"
  },
  {
    "label": "FormatErrorMessage()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "FormatErrorMessage(int line, int column, const std::string& description)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (const int options_ ; const size_t max_depth_ ; StringPiece input_ ; size_t index_ ; size_t stack_depth_ ; int line_number_ ; size_t index_last_line_ ; JsonParseError error_code_ ; int error_line_ ; int error_column_ ; class JSONParserTest ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(JSONParserTest, NextChar)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(JSONParserTest, ConsumeDictionary)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(JSONParserTest, ConsumeList)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(JSONParserTest, ConsumeString)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(JSONParserTest, ConsumeLiterals)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(JSONParserTest, ConsumeNumbers)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(JSONParserTest, ErrorMessages)"
  }
]