[
  {
    "label": "JSONValueConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JSONValueConverter"
  },
  {
    "label": "FieldConverterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldConverterBase"
  },
  {
    "label": "ValueConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueConverter"
  },
  {
    "label": "FieldConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FieldConverter"
  },
  {
    "label": "BasicValueConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicValueConverter"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ValueFieldConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueFieldConverter"
  },
  {
    "label": "CustomFieldConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CustomFieldConverter"
  },
  {
    "label": "NestedValueConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NestedValueConverter"
  },
  {
    "label": "RepeatedValueConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RepeatedValueConverter"
  },
  {
    "label": "RepeatedMessageConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RepeatedMessageConverter"
  },
  {
    "label": "RepeatedCustomValueConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RepeatedCustomValueConverter"
  },
  {
    "label": "StructType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StructType"
  },
  {
    "label": "NestedType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NestedType"
  },
  {
    "label": "FieldConverterBase()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_JSON_JSON_VALUE_CONVERTER_H_ # define BASE_JSON_JSON_VALUE_CONVERTER_H_ # include<stddef . h> # include<memory> # include<string> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / logging . h \" # include \" base / memory / ptr_util . h \" # include \" base / strings / string_piece . h \" # include \" base / values . h \" namespace base { template<StructType> class JSONValueConverter ; namespace internal { template<StructType> class FieldConverterBase { public :)",
    "insertText": "FieldConverterBase(const std::string& path) : field_path_(path)"
  },
  {
    "label": "FieldConverterBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FieldConverterBase(const FieldConverterBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FieldConverterBase&)",
    "insertText": "operator(const FieldConverterBase&)"
  },
  {
    "label": "FieldConverterBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FieldConverterBase()"
  },
  {
    "label": "ConvertField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertField(const base::Value& value, StructType* obj)"
  },
  {
    "label": "field_path()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "field_path()"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, FieldType* field)"
  },
  {
    "label": "FieldConverter()",
    "kind": "Method",
    "detail": "Function (} ; template<StructType,FieldType> class FieldConverter : public FieldConverterBase<StructType> { public :)",
    "insertText": "FieldConverter(const std::string& path, FieldType StructType::*field, ValueConverter<FieldType>* converter) : FieldConverterBase<StructType>(path), field_pointer_(field), value_converter_(converter)"
  },
  {
    "label": "FieldConverter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FieldConverter(const FieldConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FieldConverter&)",
    "insertText": "operator(const FieldConverter&)"
  },
  {
    "label": "ConvertField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertField(const base::Value& value, StructType* dst)"
  },
  {
    "label": "BasicValueConverter()",
    "kind": "Method",
    "detail": "Function (} private : FieldType StructType::* field_pointer_ ; std::unique_ptr<ValueConverter<FieldType>> value_converter_ ; } ; template<FieldType> class BasicValueConverter ; template<> class BASE_EXPORT BasicValueConverter<int> : public ValueConverter<int> { public :)",
    "insertText": "BasicValueConverter()"
  },
  {
    "label": "BasicValueConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasicValueConverter(const BasicValueConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BasicValueConverter&)",
    "insertText": "operator(const BasicValueConverter&)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, int* field)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, std::string* field)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, std::u16string* field)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, double* field)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, bool* field)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; template<FieldType> class ValueFieldConverter : public ValueConverter<FieldType> { public : typedef)",
    "insertText": "bool(*ConvertFunc)(const base::Value* value, FieldType* field)"
  },
  {
    "label": "ValueFieldConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValueFieldConverter(ConvertFunc convert_func) : convert_func_(convert_func)"
  },
  {
    "label": "ValueFieldConverter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ValueFieldConverter(const ValueFieldConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ValueFieldConverter&)",
    "insertText": "operator(const ValueFieldConverter&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} private : ConvertFunc convert_func_ ; } ; template<FieldType> class CustomFieldConverter : public ValueConverter<FieldType> { public : typedef)",
    "insertText": "bool(*ConvertFunc)(StringPiece value, FieldType* field)"
  },
  {
    "label": "CustomFieldConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomFieldConverter(ConvertFunc convert_func) : convert_func_(convert_func)"
  },
  {
    "label": "CustomFieldConverter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CustomFieldConverter(const CustomFieldConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CustomFieldConverter&)",
    "insertText": "operator(const CustomFieldConverter&)"
  },
  {
    "label": "NestedValueConverter()",
    "kind": "Method",
    "detail": "Function (} private : ConvertFunc convert_func_ ; } ; template<NestedType> class NestedValueConverter : public ValueConverter<NestedType> { public :)",
    "insertText": "NestedValueConverter()"
  },
  {
    "label": "NestedValueConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NestedValueConverter(const NestedValueConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NestedValueConverter&)",
    "insertText": "operator(const NestedValueConverter&)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, NestedType* field)"
  },
  {
    "label": "RepeatedValueConverter()",
    "kind": "Method",
    "detail": "Function (} private : JSONValueConverter<NestedType> converter_ ; } ; template<Element> class RepeatedValueConverter : public ValueConverter<std::vector<std::unique_ptr<Element>>> { public :)",
    "insertText": "RepeatedValueConverter()"
  },
  {
    "label": "RepeatedValueConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatedValueConverter(const RepeatedValueConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RepeatedValueConverter&)",
    "insertText": "operator(const RepeatedValueConverter&)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, std::vector<std::unique_ptr<Element>>* field)"
  },
  {
    "label": "GetIfList()",
    "kind": "Method",
    "detail": "Function (const Value::List* list = value .)",
    "insertText": "GetIfList()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (size_t i = 0 ;)",
    "insertText": "for(const Value& element : *list)"
  },
  {
    "label": "Element()",
    "kind": "Method",
    "detail": "Function (auto e = std::make_unique<)",
    "insertText": "Element()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (field ->)",
    "insertText": "push_back(std::move(e))"
  },
  {
    "label": "DVLOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DVLOG(1)"
  },
  {
    "label": "RepeatedMessageConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatedMessageConverter(const RepeatedMessageConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RepeatedMessageConverter&)",
    "insertText": "operator(const RepeatedMessageConverter&)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Convert(const base::Value& value, std::vector<std::unique_ptr<NestedType>>* field)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (field ->)",
    "insertText": "reserve(list->size())"
  },
  {
    "label": "NestedType()",
    "kind": "Method",
    "detail": "Function (auto nested = std::make_unique<)",
    "insertText": "NestedType()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (field ->)",
    "insertText": "push_back(std::move(nested))"
  },
  {
    "label": "RepeatedCustomValueConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatedCustomValueConverter(ConvertFunc convert_func) : convert_func_(convert_func)"
  },
  {
    "label": "RepeatedCustomValueConverter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RepeatedCustomValueConverter(const RepeatedCustomValueConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RepeatedCustomValueConverter&)",
    "insertText": "operator(const RepeatedCustomValueConverter&)"
  },
  {
    "label": "RegisterJSONConverter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterJSONConverter(this)"
  },
  {
    "label": "JSONValueConverter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "JSONValueConverter(const JSONValueConverter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (JSONValueConverter&)",
    "insertText": "operator(const JSONValueConverter&)"
  },
  {
    "label": "RegisterIntField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterIntField(const std::string& field_name, int StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, int>>( field_name, field, new internal::BasicValueConverter<int>))"
  },
  {
    "label": "RegisterStringField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterStringField(const std::string& field_name, std::string StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, std::string>>( field_name, field, new internal::BasicValueConverter<std::string>))"
  },
  {
    "label": "RegisterStringField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterStringField(const std::string& field_name, std::u16string StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, std::u16string>>( field_name, field, new internal::BasicValueConverter<std::u16string>))"
  },
  {
    "label": "RegisterBoolField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterBoolField(const std::string& field_name, bool StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, bool>>( field_name, field, new internal::BasicValueConverter<bool>))"
  },
  {
    "label": "RegisterDoubleField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterDoubleField(const std::string& field_name, double StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, double>>( field_name, field, new internal::BasicValueConverter<double>))"
  },
  {
    "label": "RegisterNestedField()",
    "kind": "Method",
    "detail": "Function (} template<class NestedType> void)",
    "insertText": "RegisterNestedField(const std::string& field_name, NestedType StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, NestedType>>( field_name, field, new internal::NestedValueConverter<NestedType>))"
  },
  {
    "label": "RegisterCustomField()",
    "kind": "Method",
    "detail": "Function (} template<FieldType> void)",
    "insertText": "RegisterCustomField(const std::string& field_name, FieldType StructType::*field, bool (*convert_func)(StringPiece, FieldType*))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, FieldType>>( field_name, field, new internal::CustomFieldConverter<FieldType>(convert_func)))"
  },
  {
    "label": "RegisterCustomValueField()",
    "kind": "Method",
    "detail": "Function (} template<FieldType> void)",
    "insertText": "RegisterCustomValueField(const std::string& field_name, FieldType StructType::*field, bool (*convert_func)(const base::Value*, FieldType*))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter<StructType, FieldType>>( field_name, field, new internal::ValueFieldConverter<FieldType>(convert_func)))"
  },
  {
    "label": "RegisterRepeatedInt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterRepeatedInt(const std::string& field_name, std::vector<std::unique_ptr<int>> StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter< StructType, std::vector<std::unique_ptr<int>>>>( field_name, field, new internal::RepeatedValueConverter<int>))"
  },
  {
    "label": "RegisterRepeatedString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterRepeatedString(const std::string& field_name, std::vector<std::unique_ptr<std::string>> StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter< StructType, std::vector<std::unique_ptr<std::string>>>>( field_name, field, new internal::RepeatedValueConverter<std::string>))"
  },
  {
    "label": "RegisterRepeatedString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterRepeatedString(const std::string& field_name, std::vector<std::unique_ptr<std::u16string>> StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter< StructType, std::vector<std::unique_ptr<std::u16string>>>>( field_name, field, new internal::RepeatedValueConverter<std::u16string>))"
  },
  {
    "label": "RegisterRepeatedDouble()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterRepeatedDouble(const std::string& field_name, std::vector<std::unique_ptr<double>> StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter< StructType, std::vector<std::unique_ptr<double>>>>( field_name, field, new internal::RepeatedValueConverter<double>))"
  },
  {
    "label": "RegisterRepeatedBool()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterRepeatedBool(const std::string& field_name, std::vector<std::unique_ptr<bool>> StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter< StructType, std::vector<std::unique_ptr<bool>>>>( field_name, field, new internal::RepeatedValueConverter<bool>))"
  },
  {
    "label": "RegisterRepeatedCustomValue()",
    "kind": "Method",
    "detail": "Function (} template<class NestedType> void)",
    "insertText": "RegisterRepeatedCustomValue(const std::string& field_name, std::vector<std::unique_ptr<NestedType>> StructType::*field, bool (*convert_func)(const base::Value*, NestedType*))"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter< StructType, std::vector<std::unique_ptr<NestedType>>>>( field_name, field, new internal::RepeatedCustomValueConverter<NestedType>( convert_func)))"
  },
  {
    "label": "RegisterRepeatedMessage()",
    "kind": "Method",
    "detail": "Function (} template<class NestedType> void)",
    "insertText": "RegisterRepeatedMessage(const std::string& field_name, std::vector<std::unique_ptr<NestedType>> StructType::*field)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (fields_ .)",
    "insertText": "push_back(std::make_unique<internal::FieldConverter< StructType, std::vector<std::unique_ptr<NestedType>>>>( field_name, field, new internal::RepeatedMessageConverter<NestedType>))"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Convert(const base::Value& value, StructType* output)"
  },
  {
    "label": "GetIfDict()",
    "kind": "Method",
    "detail": "Function (const Value::Dict* dict = value .)",
    "insertText": "GetIfDict()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (const internal::FieldConverterBase<StructType>* field_converter = fields_ [ i ] .)",
    "insertText": "get()"
  },
  {
    "label": "FindByDottedPath()",
    "kind": "Method",
    "detail": "Function (const base::Value* field = dict ->)",
    "insertText": "FindByDottedPath(field_converter->field_path())"
  },
  {
    "label": "DVLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DVLOG(1) << \"failure at field \" << field_converter->field_path()"
  }
]