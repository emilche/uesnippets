[
  {
    "label": "URegularExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "URegularExpression"
  },
  {
    "label": "URegularExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "URegularExpression"
  },
  {
    "label": "URegexpFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URegexpFlag"
  },
  {
    "label": "URegexpFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URegexpFlag"
  },
  {
    "label": "itself",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "itself"
  },
  {
    "label": "URegexpFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URegexpFlag"
  },
  {
    "label": "URegexpFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URegexpFlag"
  },
  {
    "label": "LocalURegularExpressionPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalURegularExpressionPointer"
  },
  {
    "label": "uregex_open()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_open( const  UChar          *pattern,\n                    int32_t         patternLength,\n                    uint32_t        flags,\n                    UParseError    *pe,\n                    UErrorCode     *status)"
  },
  {
    "label": "uregex_openUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_openUText(UText          *pattern,\n                 uint32_t        flags,\n                 UParseError    *pe,\n                 UErrorCode     *status)"
  },
  {
    "label": "uregex_openC()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_openC( const char           *pattern,\n                    uint32_t        flags,\n                    UParseError    *pe,\n                    UErrorCode     *status)"
  },
  {
    "label": "uregex_close()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_close(URegularExpression *regexp)"
  },
  {
    "label": "uregex_clone()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_clone(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_pattern()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_pattern(const URegularExpression *regexp,\n                     int32_t            *patLength,\n                     UErrorCode         *status)"
  },
  {
    "label": "uregex_patternUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_patternUText(const URegularExpression *regexp,\n                          UErrorCode         *status)"
  },
  {
    "label": "uregex_flags()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_flags(const  URegularExpression   *regexp,\n                    UErrorCode           *status)"
  },
  {
    "label": "uregex_setText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setText(URegularExpression *regexp,\n               const UChar        *text,\n               int32_t             textLength,\n               UErrorCode         *status)"
  },
  {
    "label": "uregex_setUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setUText(URegularExpression *regexp,\n                UText              *text,\n                UErrorCode         *status)"
  },
  {
    "label": "uregex_getText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_getText(URegularExpression *regexp,\n               int32_t            *textLength,\n               UErrorCode         *status)"
  },
  {
    "label": "uregex_getUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_getUText(URegularExpression *regexp,\n                UText              *dest,\n                UErrorCode         *status)"
  },
  {
    "label": "uregex_refreshUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_refreshUText(URegularExpression *regexp,\n                    UText              *text,\n                    UErrorCode         *status)"
  },
  {
    "label": "uregex_matches()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_matches(URegularExpression *regexp,\n                int32_t            startIndex,\n                UErrorCode        *status)"
  },
  {
    "label": "uregex_matches64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_matches64(URegularExpression *regexp,\n                 int64_t            startIndex,\n                 UErrorCode        *status)"
  },
  {
    "label": "uregex_lookingAt()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_lookingAt(URegularExpression *regexp,\n                 int32_t             startIndex,\n                 UErrorCode         *status)"
  },
  {
    "label": "uregex_lookingAt64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_lookingAt64(URegularExpression *regexp,\n                   int64_t             startIndex,\n                   UErrorCode         *status)"
  },
  {
    "label": "uregex_find()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_find(URegularExpression *regexp,\n            int32_t             startIndex, \n            UErrorCode         *status)"
  },
  {
    "label": "uregex_find64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_find64(URegularExpression *regexp,\n              int64_t             startIndex, \n              UErrorCode         *status)"
  },
  {
    "label": "uregex_findNext()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_findNext(URegularExpression *regexp,\n                UErrorCode         *status)"
  },
  {
    "label": "uregex_groupCount()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_groupCount(URegularExpression *regexp,\n                  UErrorCode         *status)"
  },
  {
    "label": "uregex_groupNumberFromName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_groupNumberFromName(URegularExpression *regexp,\n                           const UChar        *groupName,\n                           int32_t             nameLength,\n                           UErrorCode          *status)"
  },
  {
    "label": "uregex_groupNumberFromCName()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_groupNumberFromCName(URegularExpression *regexp,\n                            const char         *groupName,\n                            int32_t             nameLength,\n                            UErrorCode          *status)"
  },
  {
    "label": "uregex_group()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_group(URegularExpression *regexp,\n             int32_t             groupNum,\n             UChar              *dest,\n             int32_t             destCapacity,\n             UErrorCode          *status)"
  },
  {
    "label": "uregex_groupUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_groupUText(URegularExpression *regexp,\n                  int32_t             groupNum,\n                  UText              *dest,\n                  int64_t            *groupLength,\n                  UErrorCode         *status)"
  },
  {
    "label": "uregex_start()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_start(URegularExpression *regexp,\n             int32_t             groupNum,\n             UErrorCode          *status)"
  },
  {
    "label": "uregex_start64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_start64(URegularExpression *regexp,\n               int32_t             groupNum,\n               UErrorCode          *status)"
  },
  {
    "label": "uregex_end()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_end(URegularExpression   *regexp,\n           int32_t               groupNum,\n           UErrorCode           *status)"
  },
  {
    "label": "uregex_end64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_end64(URegularExpression *regexp,\n             int32_t               groupNum,\n             UErrorCode           *status)"
  },
  {
    "label": "uregex_reset()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_reset(URegularExpression    *regexp,\n             int32_t               index,\n             UErrorCode            *status)"
  },
  {
    "label": "uregex_reset64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_reset64(URegularExpression  *regexp,\n               int64_t               index,\n               UErrorCode            *status)"
  },
  {
    "label": "uregex_setRegion()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setRegion(URegularExpression   *regexp,\n                 int32_t               regionStart,\n                 int32_t               regionLimit,\n                 UErrorCode           *status)"
  },
  {
    "label": "uregex_setRegion64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setRegion64(URegularExpression *regexp,\n                 int64_t               regionStart,\n                 int64_t               regionLimit,\n                 UErrorCode           *status)"
  },
  {
    "label": "uregex_setRegionAndStart()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setRegionAndStart(URegularExpression *regexp,\n                 int64_t               regionStart,\n                 int64_t               regionLimit,\n                 int64_t               startIndex,\n                 UErrorCode           *status)"
  },
  {
    "label": "uregex_regionStart()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_regionStart(const  URegularExpression   *regexp,\n                          UErrorCode           *status)"
  },
  {
    "label": "uregex_regionStart64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_regionStart64(const  URegularExpression   *regexp,\n                            UErrorCode           *status)"
  },
  {
    "label": "uregex_regionEnd()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_regionEnd(const  URegularExpression   *regexp,\n                        UErrorCode           *status)"
  },
  {
    "label": "uregex_regionEnd64()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_regionEnd64(const  URegularExpression   *regexp,\n                          UErrorCode           *status)"
  },
  {
    "label": "uregex_hasTransparentBounds()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_hasTransparentBounds(const  URegularExpression   *regexp,\n                                   UErrorCode           *status)"
  },
  {
    "label": "uregex_useTransparentBounds()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_useTransparentBounds(URegularExpression   *regexp, \n                            UBool                b,\n                            UErrorCode           *status)"
  },
  {
    "label": "uregex_hasAnchoringBounds()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_hasAnchoringBounds(const  URegularExpression   *regexp,\n                                 UErrorCode           *status)"
  },
  {
    "label": "uregex_useAnchoringBounds()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_useAnchoringBounds(URegularExpression   *regexp,\n                          UBool                 b,\n                          UErrorCode           *status)"
  },
  {
    "label": "uregex_hitEnd()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_hitEnd(const  URegularExpression   *regexp,\n                     UErrorCode           *status)"
  },
  {
    "label": "uregex_requireEnd()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_requireEnd(const  URegularExpression   *regexp,\n                         UErrorCode           *status)"
  },
  {
    "label": "uregex_replaceAll()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_replaceAll(URegularExpression    *regexp,\n                  const UChar           *replacementText,\n                  int32_t                replacementLength,\n                  UChar                 *destBuf,\n                  int32_t                destCapacity,\n                  UErrorCode            *status)"
  },
  {
    "label": "uregex_replaceAllUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_replaceAllUText(URegularExpression *regexp,\n                       UText              *replacement,\n                       UText              *dest,\n                       UErrorCode         *status)"
  },
  {
    "label": "uregex_replaceFirst()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_replaceFirst(URegularExpression  *regexp,\n                    const UChar         *replacementText,\n                    int32_t              replacementLength,\n                    UChar               *destBuf,\n                    int32_t              destCapacity,\n                    UErrorCode          *status)"
  },
  {
    "label": "uregex_replaceFirstUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_replaceFirstUText(URegularExpression *regexp,\n                         UText              *replacement,\n                         UText              *dest,\n                         UErrorCode         *status)"
  },
  {
    "label": "uregex_appendReplacement()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_appendReplacement(URegularExpression    *regexp,\n                         const UChar           *replacementText,\n                         int32_t                replacementLength,\n                         UChar                **destBuf,\n                         int32_t               *destCapacity,\n                         UErrorCode            *status)"
  },
  {
    "label": "uregex_appendReplacementUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_appendReplacementUText(URegularExpression    *regexp,\n                              UText                 *replacementText,\n                              UText                 *dest,\n                              UErrorCode            *status)"
  },
  {
    "label": "uregex_appendTail()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_appendTail(URegularExpression    *regexp,\n                  UChar                **destBuf,\n                  int32_t               *destCapacity,\n                  UErrorCode            *status)"
  },
  {
    "label": "uregex_appendTailUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_appendTailUText(URegularExpression    *regexp,\n                       UText                 *dest,\n                       UErrorCode            *status)"
  },
  {
    "label": "uregex_split()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_split(   URegularExpression      *regexp,\n                  UChar                 *destBuf,\n                  int32_t                destCapacity,\n                  int32_t               *requiredCapacity,\n                  UChar                 *destFields[],\n                  int32_t                destFieldsCapacity,\n                  UErrorCode            *status)"
  },
  {
    "label": "uregex_split()",
    "kind": "Method",
    "detail": "Function (with)",
    "insertText": "uregex_split()"
  },
  {
    "label": "uregex_splitUText()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_splitUText(URegularExpression    *regexp,\n                  UText                 *destFields[],\n                  int32_t                destFieldsCapacity,\n                  UErrorCode            *status)"
  },
  {
    "label": "uregex_setTimeLimit()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setTimeLimit(URegularExpression      *regexp,\n                    int32_t                  limit,\n                    UErrorCode              *status)"
  },
  {
    "label": "uregex_getTimeLimit()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_getTimeLimit(const URegularExpression      *regexp,\n                          UErrorCode              *status)"
  },
  {
    "label": "uregex_setStackLimit()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setStackLimit(URegularExpression      *regexp,\n                     int32_t                  limit,\n                     UErrorCode              *status)"
  },
  {
    "label": "uregex_getStackLimit()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_getStackLimit(const URegularExpression      *regexp,\n                           UErrorCode              *status)"
  },
  {
    "label": "URegexMatchCallback()",
    "kind": "Method",
    "detail": "Function (U_CALLCONV)",
    "insertText": "URegexMatchCallback(\n                   const void *context,\n                   int32_t     steps)"
  },
  {
    "label": "uregex_setMatchCallback()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setMatchCallback(URegularExpression      *regexp,\n                        URegexMatchCallback     *callback,\n                        const void              *context,\n                        UErrorCode              *status)"
  },
  {
    "label": "uregex_getMatchCallback()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_getMatchCallback(const URegularExpression    *regexp,\n                        URegexMatchCallback        **callback,\n                        const void                 **context,\n                        UErrorCode                  *status)"
  },
  {
    "label": "URegexFindProgressCallback()",
    "kind": "Method",
    "detail": "Function (U_CALLCONV)",
    "insertText": "URegexFindProgressCallback(\n                   const void *context,\n                   int64_t     matchIndex)"
  },
  {
    "label": "uregex_setFindProgressCallback()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_setFindProgressCallback(URegularExpression              *regexp,\n                                URegexFindProgressCallback      *callback,\n                                const void                      *context,\n                                UErrorCode                      *status)"
  },
  {
    "label": "uregex_getFindProgressCallback()",
    "kind": "Method",
    "detail": "Function (U_EXPORT2)",
    "insertText": "uregex_getFindProgressCallback(const URegularExpression          *regexp,\n                                URegexFindProgressCallback        **callback,\n                                const void                        **context,\n                                UErrorCode                        *status)"
  }
]