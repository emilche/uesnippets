[
  {
    "label": "URegularExpression",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "URegularExpression"
  },
  {
    "label": "URegexpFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "URegexpFlag"
  },
  {
    "label": "uregex_open()",
    "kind": "Method",
    "detail": "Function (# ifndef UREGEX_H # define UREGEX_H # include \" unicode / utext . h \" # include \" unicode / utypes . h \" # if ! UCONFIG_NO_REGULAR_EXPRESSIONS # include \" unicode / localpointer . h \" # include \" unicode / parseerr . h \" struct URegularExpression ; typedef struct URegularExpression URegularExpression ; typedef enum URegexpFlag { # ifndef UREGEX_CANON_EQ = 1 2 8,# endif UREGEX_CASE_INSENSITIVE = 2,UREGEX_COMMENTS = 4,UREGEX_DOTALL = 3 2,UREGEX_LITERAL = 1 6,UREGEX_MULTILINE = 8,UREGEX_UNIX_LINES = 1,UREGEX_UWORD = 2 5 6,UREGEX_ERROR_ON_UNKNOWN_ESCAPES = 5 1 2 } URegexpFlag ; U_STABLE URegularExpression* U_EXPORT2)",
    "insertText": "uregex_open(const UChar *pattern, int32_t patternLength, uint32_t flags, UParseError *pe, UErrorCode *status)"
  },
  {
    "label": "uregex_openUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE URegularExpression* U_EXPORT2)",
    "insertText": "uregex_openUText(UText *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)"
  },
  {
    "label": "uregex_openC()",
    "kind": "Method",
    "detail": "Function (# if ! UCONFIG_NO_CONVERSION U_STABLE URegularExpression* U_EXPORT2)",
    "insertText": "uregex_openC(const char *pattern, uint32_t flags, UParseError *pe, UErrorCode *status)"
  },
  {
    "label": "uregex_close()",
    "kind": "Method",
    "detail": "Function (# endif U_STABLE void U_EXPORT2)",
    "insertText": "uregex_close(URegularExpression *regexp)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalURegularExpressionPointer, URegularExpression, uregex_close)"
  },
  {
    "label": "uregex_clone()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE URegularExpression* U_EXPORT2)",
    "insertText": "uregex_clone(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_pattern()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "uregex_pattern(const URegularExpression *regexp, int32_t *patLength, UErrorCode *status)"
  },
  {
    "label": "uregex_patternUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "uregex_patternUText(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_flags()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_flags(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_setText()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setText(URegularExpression *regexp, const UChar *text, int32_t textLength, UErrorCode *status)"
  },
  {
    "label": "uregex_setUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setUText(URegularExpression *regexp, UText *text, UErrorCode *status)"
  },
  {
    "label": "uregex_getText()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "uregex_getText(URegularExpression *regexp, int32_t *textLength, UErrorCode *status)"
  },
  {
    "label": "uregex_getUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "uregex_getUText(URegularExpression *regexp, UText *dest, UErrorCode *status)"
  },
  {
    "label": "uregex_refreshUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_refreshUText(URegularExpression *regexp, UText *text, UErrorCode *status)"
  },
  {
    "label": "uregex_matches()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_matches(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)"
  },
  {
    "label": "uregex_matches64()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_matches64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)"
  },
  {
    "label": "uregex_lookingAt()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_lookingAt(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)"
  },
  {
    "label": "uregex_lookingAt64()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_lookingAt64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)"
  },
  {
    "label": "uregex_find()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_find(URegularExpression *regexp, int32_t startIndex, UErrorCode *status)"
  },
  {
    "label": "uregex_find64()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_find64(URegularExpression *regexp, int64_t startIndex, UErrorCode *status)"
  },
  {
    "label": "uregex_findNext()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_findNext(URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_groupCount()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_groupCount(URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_groupNumberFromName()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_groupNumberFromName(URegularExpression *regexp, const UChar *groupName, int32_t nameLength, UErrorCode *status)"
  },
  {
    "label": "uregex_groupNumberFromCName()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_groupNumberFromCName(URegularExpression *regexp, const char *groupName, int32_t nameLength, UErrorCode *status)"
  },
  {
    "label": "uregex_group()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_group(URegularExpression *regexp, int32_t groupNum, UChar *dest, int32_t destCapacity, UErrorCode *status)"
  },
  {
    "label": "uregex_groupUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "uregex_groupUText(URegularExpression *regexp, int32_t groupNum, UText *dest, int64_t *groupLength, UErrorCode *status)"
  },
  {
    "label": "uregex_start()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_start(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)"
  },
  {
    "label": "uregex_start64()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "uregex_start64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)"
  },
  {
    "label": "uregex_end()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_end(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)"
  },
  {
    "label": "uregex_end64()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "uregex_end64(URegularExpression *regexp, int32_t groupNum, UErrorCode *status)"
  },
  {
    "label": "uregex_reset()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_reset(URegularExpression *regexp, int32_t index, UErrorCode *status)"
  },
  {
    "label": "uregex_reset64()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_reset64(URegularExpression *regexp, int64_t index, UErrorCode *status)"
  },
  {
    "label": "uregex_setRegion()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setRegion(URegularExpression *regexp, int32_t regionStart, int32_t regionLimit, UErrorCode *status)"
  },
  {
    "label": "uregex_setRegion64()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setRegion64(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, UErrorCode *status)"
  },
  {
    "label": "uregex_setRegionAndStart()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setRegionAndStart(URegularExpression *regexp, int64_t regionStart, int64_t regionLimit, int64_t startIndex, UErrorCode *status)"
  },
  {
    "label": "uregex_regionStart()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_regionStart(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_regionStart64()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "uregex_regionStart64(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_regionEnd()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_regionEnd(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_regionEnd64()",
    "kind": "Method",
    "detail": "Function (U_STABLE int64_t U_EXPORT2)",
    "insertText": "uregex_regionEnd64(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_hasTransparentBounds()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_hasTransparentBounds(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_useTransparentBounds()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_useTransparentBounds(URegularExpression *regexp, UBool b, UErrorCode *status)"
  },
  {
    "label": "uregex_hasAnchoringBounds()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_hasAnchoringBounds(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_useAnchoringBounds()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_useAnchoringBounds(URegularExpression *regexp, UBool b, UErrorCode *status)"
  },
  {
    "label": "uregex_hitEnd()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_hitEnd(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_requireEnd()",
    "kind": "Method",
    "detail": "Function (U_STABLE UBool U_EXPORT2)",
    "insertText": "uregex_requireEnd(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_replaceAll()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_replaceAll(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)"
  },
  {
    "label": "uregex_replaceAllUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "uregex_replaceAllUText(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)"
  },
  {
    "label": "uregex_replaceFirst()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_replaceFirst(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar *destBuf, int32_t destCapacity, UErrorCode *status)"
  },
  {
    "label": "uregex_replaceFirstUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "uregex_replaceFirstUText(URegularExpression *regexp, UText *replacement, UText *dest, UErrorCode *status)"
  },
  {
    "label": "uregex_appendReplacement()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_appendReplacement(URegularExpression *regexp, const UChar *replacementText, int32_t replacementLength, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)"
  },
  {
    "label": "uregex_appendReplacementUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_appendReplacementUText(URegularExpression *regexp, UText *replacementText, UText *dest, UErrorCode *status)"
  },
  {
    "label": "uregex_appendTail()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_appendTail(URegularExpression *regexp, UChar **destBuf, int32_t *destCapacity, UErrorCode *status)"
  },
  {
    "label": "uregex_appendTailUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE UText* U_EXPORT2)",
    "insertText": "uregex_appendTailUText(URegularExpression *regexp, UText *dest, UErrorCode *status)"
  },
  {
    "label": "uregex_split()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_split(URegularExpression *regexp, UChar *destBuf, int32_t destCapacity, int32_t *requiredCapacity, UChar *destFields[], int32_t destFieldsCapacity, UErrorCode *status)"
  },
  {
    "label": "uregex_splitUText()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_splitUText(URegularExpression *regexp, UText *destFields[], int32_t destFieldsCapacity, UErrorCode *status)"
  },
  {
    "label": "uregex_setTimeLimit()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setTimeLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)"
  },
  {
    "label": "uregex_getTimeLimit()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_getTimeLimit(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "uregex_setStackLimit()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setStackLimit(URegularExpression *regexp, int32_t limit, UErrorCode *status)"
  },
  {
    "label": "uregex_getStackLimit()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "uregex_getStackLimit(const URegularExpression *regexp, UErrorCode *status)"
  },
  {
    "label": "URegexMatchCallback()",
    "kind": "Method",
    "detail": "Function (U_CDECL_BEGIN typedef UBool U_CALLCONV)",
    "insertText": "URegexMatchCallback(const void *context, int32_t steps)"
  },
  {
    "label": "uregex_setMatchCallback()",
    "kind": "Method",
    "detail": "Function (U_CDECL_END U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setMatchCallback(URegularExpression *regexp, URegexMatchCallback *callback, const void *context, UErrorCode *status)"
  },
  {
    "label": "uregex_getMatchCallback()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_getMatchCallback(const URegularExpression *regexp, URegexMatchCallback **callback, const void **context, UErrorCode *status)"
  },
  {
    "label": "URegexFindProgressCallback()",
    "kind": "Method",
    "detail": "Function (U_CDECL_BEGIN typedef UBool U_CALLCONV)",
    "insertText": "URegexFindProgressCallback(const void *context, int64_t matchIndex)"
  },
  {
    "label": "uregex_setFindProgressCallback()",
    "kind": "Method",
    "detail": "Function (U_CDECL_END U_STABLE void U_EXPORT2)",
    "insertText": "uregex_setFindProgressCallback(URegularExpression *regexp, URegexFindProgressCallback *callback, const void *context, UErrorCode *status)"
  },
  {
    "label": "uregex_getFindProgressCallback()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "uregex_getFindProgressCallback(const URegularExpression *regexp, URegexFindProgressCallback **callback, const void **context, UErrorCode *status)"
  }
]