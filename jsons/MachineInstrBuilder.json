[
  {
    "label": "MCInstrDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrDesc"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "MachineInstrBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstrBuilder"
  },
  {
    "label": "MIBundleBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MIBundleBuilder"
  },
  {
    "label": "MachineInstrBuilder()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEINSTRBUILDER_H # define LLVM_CODEGEN_MACHINEINSTRBUILDER_H # include \" llvm / CodeGen / MachineFunction . h \" # include \" llvm / CodeGen / MachineInstrBundle . h \" # include \" llvm / Support / ErrorHandling . h \" namespace llvm { class MCInstrDesc ; class MDNode ; namespace RegState { enum { Define = 0 x2,Implicit = 0 x4,Kill = 0 x8,Dead = 0 x10,Undef = 0 x20,EarlyClobber = 0 x40,Debug = 0 x80,InternalRead = 0 x100,DefineNoRead = Define | Undef,ImplicitDefine = Implicit | Define,ImplicitKill = Implicit | Kill } ; } class MachineInstrBuilder { MachineFunction* MF ; MachineInstr* MI ; public :)",
    "insertText": "MachineInstrBuilder() : MF(nullptr), MI(nullptr)"
  },
  {
    "label": "MachineInstrBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MachineInstrBuilder(MachineFunction &F, MachineInstr *I) : MF(&F), MI(I)"
  },
  {
    "label": "MachineInstr()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "MachineInstr()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((flags & 0x1) == 0 && \"Passing in 'true' to addReg is forbidden! Use enums instead.\")"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateReg(RegNo, flags & RegState::Define, flags & RegState::Implicit, flags & RegState::Kill, flags & RegState::Dead, flags & RegState::Undef, flags & RegState::EarlyClobber, SubReg, flags & RegState::Debug, flags & RegState::InternalRead))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateImm(Val))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateCImm(Val))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateFPImm(Val))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateMBB(MBB, TargetFlags))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateFI(Idx))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateCPI(Idx, Offset, TargetFlags))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateTargetIndex(Idx, Offset, TargetFlags))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateJTI(Idx, TargetFlags))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateGA(GV, Offset, TargetFlags))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateES(FnName, TargetFlags))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateBA(BA, Offset, TargetFlags))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateRegMask(Mask))"
  },
  {
    "label": "addMemOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addMemOperand(*MF, MMO)"
  },
  {
    "label": "setMemRefs()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "setMemRefs(b, e)"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MO)"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateMetadata(MD))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((MI->isDebugValue() ? static_cast<bool>(MI->getDebugVariable()) : true) && \"first MDNode argument of a DBG_VALUE not a variable\")"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateCFIIndex(CFIIndex))"
  },
  {
    "label": "addOperand()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "addOperand(*MF, MachineOperand::CreateMCSymbol(Sym, TargetFlags))"
  },
  {
    "label": "setFlags()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "setFlags(Flags)"
  },
  {
    "label": "setFlag()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "setFlag(Flag)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"Unhandled operand type in addDisp()\")"
  },
  {
    "label": "copyImplicitOps()",
    "kind": "Method",
    "detail": "Function (} } } const MachineInstrBuilder&)",
    "insertText": "copyImplicitOps(const MachineInstr *OtherMI)"
  },
  {
    "label": "copyImplicitOps()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "copyImplicitOps(*MF, OtherMI)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineFunction &MF, DebugLoc DL, const MCInstrDesc &MCID, unsigned DestReg)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock &BB, MachineBasicBlock::iterator I, DebugLoc DL, const MCInstrDesc &MCID, unsigned DestReg)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (MachineFunction& MF =* BB .)",
    "insertText": "getParent()"
  },
  {
    "label": "CreateMachineInstr()",
    "kind": "Method",
    "detail": "Function (MachineInstr* MI = MF .)",
    "insertText": "CreateMachineInstr(MCID, DL)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (BB .)",
    "insertText": "insert(I, MI)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock &BB, MachineBasicBlock::instr_iterator I, DebugLoc DL, const MCInstrDesc &MCID, unsigned DestReg)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock &BB, MachineInstr *I, DebugLoc DL, const MCInstrDesc &MCID, unsigned DestReg)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::instr_iterator MII = I ; return)",
    "insertText": "BuildMI(BB, MII, DL, MCID, DestReg)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock &BB, MachineBasicBlock::iterator I, DebugLoc DL, const MCInstrDesc &MCID)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock &BB, MachineBasicBlock::instr_iterator I, DebugLoc DL, const MCInstrDesc &MCID)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock &BB, MachineInstr *I, DebugLoc DL, const MCInstrDesc &MCID)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::instr_iterator MII = I ; return)",
    "insertText": "BuildMI(BB, MII, DL, MCID)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock *BB, DebugLoc DL, const MCInstrDesc &MCID)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock *BB, DebugLoc DL, const MCInstrDesc &MCID, unsigned DestReg)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} MachineInstrBuilder)",
    "insertText": "BuildMI(MachineFunction &MF, DebugLoc DL, const MCInstrDesc &MCID, bool IsIndirect, unsigned Reg, unsigned Offset, const MDNode *Variable, const MDNode *Expr)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isa<DILocalVariable>(Variable) && \"not a variable\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(cast<DIExpression>(Expr)->isValid() && \"not an expression\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(cast<DILocalVariable>(Variable)->isValidLocationForIntrinsic(DL) && \"Expected inlined-at fields to agree\")"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (} } MachineInstrBuilder)",
    "insertText": "BuildMI(MachineBasicBlock &BB, MachineBasicBlock::iterator I, DebugLoc DL, const MCInstrDesc &MCID, bool IsIndirect, unsigned Reg, unsigned Offset, const MDNode *Variable, const MDNode *Expr)"
  },
  {
    "label": "BuildMI()",
    "kind": "Method",
    "detail": "Function (MachineInstr* MI =)",
    "insertText": "BuildMI(MF, DL, MCID, IsIndirect, Reg, Offset, Variable, Expr)"
  },
  {
    "label": "getDefRegState()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getDefRegState(bool B)"
  },
  {
    "label": "MIBundleBuilder()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MIBundleBuilder(MachineBasicBlock &BB, MachineBasicBlock::iterator B, MachineBasicBlock::iterator E) : MBB(BB), Begin(B.getInstrIterator()), End(E.getInstrIterator())"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(B != E && \"No instructions to bundle\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (+ + B ;)",
    "insertText": "while(B != E)"
  },
  {
    "label": "bundleWithPred()",
    "kind": "Method",
    "detail": "Function (MachineInstr* MI = B ; + + B ; MI ->)",
    "insertText": "bundleWithPred()"
  },
  {
    "label": "MIBundleBuilder()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "MIBundleBuilder(MachineInstr *MI) : MBB(*MI->getParent()), Begin(MI), End(getBundleEnd(MI))"
  },
  {
    "label": "getMBB()",
    "kind": "Method",
    "detail": "Function (} MachineBasicBlock&)",
    "insertText": "getMBB()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Begin = MI ; return* this ; })",
    "insertText": "if(I == End)"
  },
  {
    "label": "setFlag()",
    "kind": "Method",
    "detail": "Function (MI ->)",
    "insertText": "setFlag(MachineInstr::BundledSucc)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (} MIBundleBuilder&)",
    "insertText": "append(MachineInstr *MI)"
  }
]