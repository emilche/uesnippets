[
  {
    "label": "MCInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInst"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrInfo"
  },
  {
    "label": "MCRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCRegisterInfo"
  },
  {
    "label": "MCSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSubtargetInfo"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "Style",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Style"
  },
  {
    "label": "MCInstPrinter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstPrinter"
  },
  {
    "label": "dumpBytes()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCINSTPRINTER_H # define LLVM_MC_MCINSTPRINTER_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / Support / DataTypes . h \" # include \" llvm / Support / Format . h \" namespace llvm { class MCInst ; class raw_ostream ; class MCAsmInfo ; class MCInstrInfo ; class MCRegisterInfo ; class MCSubtargetInfo ; class StringRef ; void)",
    "insertText": "dumpBytes(ArrayRef<uint8_t> Bytes, raw_ostream &OS)"
  },
  {
    "label": "printAnnotation()",
    "kind": "Method",
    "detail": "Function (namespace HexStyle { enum Style { C,Asm } ; } class MCInstPrinter { protected : raw_ostream* CommentStream ; const MCAsmInfo& MAI ; const MCInstrInfo& MII ; const MCRegisterInfo& MRI ; bool UseMarkup ; bool PrintImmHex ; HexStyle::Style PrintHexStyle ; void)",
    "insertText": "printAnnotation(raw_ostream &OS, StringRef Annot)"
  },
  {
    "label": "MCInstPrinter()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "MCInstPrinter(const MCAsmInfo &mai, const MCInstrInfo &mii, const MCRegisterInfo &mri) : CommentStream(nullptr), MAI(mai), MII(mii), MRI(mri), UseMarkup(0), PrintImmHex(0), PrintHexStyle(HexStyle::C)"
  },
  {
    "label": "MCInstPrinter()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "MCInstPrinter()"
  },
  {
    "label": "setCommentStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCommentStream(raw_ostream &OS)"
  },
  {
    "label": "printInst()",
    "kind": "Method",
    "detail": "Function (CommentStream =& OS ; } void)",
    "insertText": "printInst(const MCInst *MI, raw_ostream &OS, StringRef Annot, const MCSubtargetInfo &STI)"
  },
  {
    "label": "getOpcodeName()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getOpcodeName(unsigned Opcode)"
  },
  {
    "label": "printRegName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printRegName(raw_ostream &OS, unsigned RegNo)"
  },
  {
    "label": "getUseMarkup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getUseMarkup()"
  },
  {
    "label": "markup()",
    "kind": "Method",
    "detail": "Function (UseMarkup = Value ; } StringRef)",
    "insertText": "markup(StringRef s)"
  },
  {
    "label": "markup()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "markup(StringRef a, StringRef b)"
  },
  {
    "label": "getPrintImmHex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getPrintImmHex()"
  },
  {
    "label": "getPrintHexStyle()",
    "kind": "Method",
    "detail": "Function (PrintImmHex = Value ; } HexStyle::Style)",
    "insertText": "getPrintHexStyle()"
  },
  {
    "label": "formatImm()",
    "kind": "Method",
    "detail": "Function (PrintHexStyle = Value ; } format_object<int64_t>)",
    "insertText": "formatImm(int64_t Value)"
  },
  {
    "label": "formatDec()",
    "kind": "Method",
    "detail": "Function (} format_object<int64_t>)",
    "insertText": "formatDec(int64_t Value)"
  }
]