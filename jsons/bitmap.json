[
  {
    "label": "MI_BITMAP_FIELD_BITS()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef MI_BITMAP_H # define MI_BITMAP_H # define)",
    "insertText": "MI_BITMAP_FIELD_BITS(8*MI_INTPTR_SIZE) #define MI_BITMAP_FIELD_FULL (~((uintptr_t)0)) typedef _Atomic(uintptr_t)"
  },
  {
    "label": "mi_bitmap_index_create()",
    "kind": "Method",
    "detail": "Function (typedef mi_bitmap_field_t* mi_bitmap_t ; typedef size_t mi_bitmap_index_t ; mi_bitmap_index_t)",
    "insertText": "mi_bitmap_index_create(size_t idx, size_t bitidx)"
  },
  {
    "label": "mi_assert_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mi_assert_internal(bitidx < MI_BITMAP_FIELD_BITS)"
  },
  {
    "label": "mi_bitmap_index_create_from_bit()",
    "kind": "Method",
    "detail": "Function (} mi_bitmap_index_t)",
    "insertText": "mi_bitmap_index_create_from_bit(size_t full_bitidx)"
  },
  {
    "label": "mi_bitmap_index_field()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "mi_bitmap_index_field(mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "mi_bitmap_index_bit_in_field()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "mi_bitmap_index_bit_in_field(mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "mi_bitmap_index_bit()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "mi_bitmap_index_bit(mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_try_find_from_claim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_try_find_from_claim(mi_bitmap_t bitmap, const size_t bitmap_fields, const size_t start_field_idx, const size_t count, mi_bitmap_index_t* bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_unclaim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_unclaim(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_claim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_claim(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx, bool* any_zero)"
  },
  {
    "label": "_mi_bitmap_is_claimed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_is_claimed(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_is_any_claimed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_is_any_claimed(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_try_find_from_claim_across()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_try_find_from_claim_across(mi_bitmap_t bitmap, const size_t bitmap_fields, const size_t start_field_idx, const size_t count, mi_bitmap_index_t* bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_unclaim_across()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_unclaim_across(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_claim_across()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_claim_across(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx, bool* pany_zero)"
  },
  {
    "label": "_mi_bitmap_is_claimed_across()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_is_claimed_across(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx)"
  },
  {
    "label": "_mi_bitmap_is_any_claimed_across()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_bitmap_is_any_claimed_across(mi_bitmap_t bitmap, size_t bitmap_fields, size_t count, mi_bitmap_index_t bitmap_idx)"
  }
]