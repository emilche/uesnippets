[
  {
    "label": "FSlateAccessibleWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleWidget"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSlateAccessibleMessageHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleMessageHandler"
  },
  {
    "label": "FSlateWidgetAccessibleEventArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateWidgetAccessibleEventArgs"
  },
  {
    "label": "FSlateAccessibleTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateAccessibleTask"
  },
  {
    "label": "FWidgetAndParent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetAndParent"
  },
  {
    "label": "FSlateAccessibleMessageHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_ACCESSIBILITY # include \" GenericPlatform / Accessibility / GenericAccessibleInterfaces . h \" # include \" Misc / Variant . h \" class FSlateAccessibleWidget ; class SWidget ; class SWindow ; # define ACCESSIBILITY_DEBUG_RESPONSIVENESS 0&& ! UE_BUILD_SHIPPING class FSlateAccessibleMessageHandler : public FGenericAccessibleMessageHandler { public :)",
    "insertText": "FSlateAccessibleMessageHandler()"
  },
  {
    "label": "OnActivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActivate()"
  },
  {
    "label": "OnDeactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeactivate()"
  },
  {
    "label": "GetAccessibleWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetAccessibleWindow(const TSharedRef<FGenericWindow>& InWindow)"
  },
  {
    "label": "GetAccessibleWindowId()",
    "kind": "Method",
    "detail": "Function (AccessibleWidgetId)",
    "insertText": "GetAccessibleWindowId(const TSharedRef<FGenericWindow>& InWindow)"
  },
  {
    "label": "GetAccessibleWidgetFromId()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IAccessibleWidget>)",
    "insertText": "GetAccessibleWidgetFromId(AccessibleWidgetId Id)"
  },
  {
    "label": "RunInThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunInThread(const TFunction<void()>& InFunction, bool bWaitForCompletion = true, ENamedThreads::Type InThread = ENamedThreads::GameThread)"
  },
  {
    "label": "MakeAccessibleAnnouncement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeAccessibleAnnouncement(const FString& AnnouncementString)"
  },
  {
    "label": "OnWidgetRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWidgetRemoved(SWidget* Widget)"
  },
  {
    "label": "FSlateWidgetAccessibleEventArgs()",
    "kind": "Method",
    "detail": "Function (struct FSlateWidgetAccessibleEventArgs {)",
    "insertText": "FSlateWidgetAccessibleEventArgs(TSharedRef<SWidget> InWidget, EAccessibleEvent InEvent, FVariant InOldValue = FVariant(), FVariant InNewValue = FVariant(), FAccessibleUserIndex InSlateUserIndex = 0) : Widget(InWidget) , Event(InEvent) , OldValue(InOldValue) , NewValue(InNewValue) , SlateUserIndex(InSlateUserIndex)"
  },
  {
    "label": "OnWidgetEventRaised()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget> Widget ; EAccessibleEvent Event ; FVariant OldValue ; FVariant NewValue ; FAccessibleUserIndex SlateUserIndex ; } ; void)",
    "insertText": "OnWidgetEventRaised(const FSlateWidgetAccessibleEventArgs& Args)"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "ProcessAccessibleTasks()",
    "kind": "Method",
    "detail": "Function (bDirty = true ; } void)",
    "insertText": "ProcessAccessibleTasks()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "HandleAccessibleWidgetFocusChangeEvent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleAccessibleWidgetFocusChangeEvent(const TSharedRef<IAccessibleWidget>& FocusWidget, bool bIsWidgetGainingFocus, FAccessibleUserIndex UserIndex)"
  },
  {
    "label": "FSlateAccessibleTask()",
    "kind": "Method",
    "detail": "Function (class FSlateAccessibleTask { public :)",
    "insertText": "FSlateAccessibleTask(const TFunction<void()>& InTask, FEvent* InCompletionEvent = nullptr) : Task(InTask) , CompletionEvent(InCompletionEvent)"
  },
  {
    "label": "DoTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoTask()"
  },
  {
    "label": "Task()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Task()"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (CompletionEvent ->)",
    "insertText": "Trigger()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } private : TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "EnqueueAccessibleTask()",
    "kind": "Method",
    "detail": "Function (FEvent* CompletionEvent ; } ; void)",
    "insertText": "EnqueueAccessibleTask(const FSlateAccessibleTask& InAccessibleTask)"
  },
  {
    "label": "FWidgetAndParent()",
    "kind": "Method",
    "detail": "Function (struct FWidgetAndParent {)",
    "insertText": "FWidgetAndParent(TWeakPtr<SWidget> InWidget, TSharedRef<FSlateAccessibleWidget> InParent) : Widget(InWidget), Parent(InParent)"
  }
]