[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "TensorCwiseNullaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorCwiseNullaryOp"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorCwiseUnaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorCwiseUnaryOp"
  },
  {
    "label": "TensorCwiseBinaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorCwiseBinaryOp"
  },
  {
    "label": "TensorCwiseTernaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorCwiseTernaryOp"
  },
  {
    "label": "TensorSelectOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorSelectOp"
  },
  {
    "label": "TensorCwiseNullaryOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_EXPR_H # define EIGEN_CXX11_TENSOR_TENSOR_EXPR_H namespace Eigen { namespace internal { template<NullaryOp,XprType> struct traits<TensorCwiseNullaryOp<NullaryOp,XprType>> : traits<XprType> { typedef traits<XprType> XprTraits ; typedef XprType::Scalar Scalar ; typedef XprType::Nested XprTypeNested ; typedef remove_reference<XprTypeNested>::type _XprTypeNested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef XprTraits::PointerType PointerType ; enum { Flags = 0 } ; } ; } template<NullaryOp,XprType> class TensorCwiseNullaryOp : public TensorBase<TensorCwiseNullaryOp<NullaryOp,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorCwiseNullaryOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef TensorCwiseNullaryOp<NullaryOp,XprType> Nested ; typedef Eigen::internal::traits<TensorCwiseNullaryOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorCwiseNullaryOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorCwiseNullaryOp(const XprType& xpr, const NullaryOp& func = NullaryOp()) : m_xpr(xpr), m_functor(func)"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<XprType::Nested>::type&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "TensorCwiseUnaryOp()",
    "kind": "Method",
    "detail": "Function (typedef traits<XprType> XprTraits ; typedef XprType::Nested XprTypeNested ; typedef remove_reference<XprTypeNested>::type _XprTypeNested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef TypeConversion<Scalar,XprTraits::PointerType>::type PointerType ; } ; template<UnaryOp,XprType> struct eval<TensorCwiseUnaryOp<UnaryOp,XprType>,Eigen::Dense> { typedef const TensorCwiseUnaryOp<UnaryOp,XprType>& type ; } ; template<UnaryOp,XprType> struct nested<TensorCwiseUnaryOp<UnaryOp,XprType>,1,eval<TensorCwiseUnaryOp<UnaryOp,XprType>>::type> { typedef TensorCwiseUnaryOp<UnaryOp,XprType> type ; } ; } template<UnaryOp,XprType> class TensorCwiseUnaryOp : public TensorBase<TensorCwiseUnaryOp<UnaryOp,XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorCwiseUnaryOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef Scalar CoeffReturnType ; typedef Eigen::internal::nested<TensorCwiseUnaryOp>::type Nested ; typedef Eigen::internal::traits<TensorCwiseUnaryOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorCwiseUnaryOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorCwiseUnaryOp(const XprType& xpr, const UnaryOp& func = UnaryOp()) : m_xpr(xpr), m_functor(func)"
  },
  {
    "label": "functor()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const UnaryOp&)",
    "insertText": "functor()"
  },
  {
    "label": "TensorCwiseBinaryOp()",
    "kind": "Method",
    "detail": "Function (typedef traits<LhsXprType> XprTraits ; typedef promote_storage_type<traits<LhsXprType>::StorageKind,traits<RhsXprType>::StorageKind>::ret StorageKind ; typedef promote_index_type<traits<LhsXprType>::Index,traits<RhsXprType>::Index>::type Index ; typedef LhsXprType::Nested LhsNested ; typedef RhsXprType::Nested RhsNested ; typedef remove_reference<LhsNested>::type _LhsNested ; typedef remove_reference<RhsNested>::type _RhsNested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef TypeConversion<Scalar,conditional<Pointer_type_promotion<LhsXprType::Scalar,Scalar>::val,traits<LhsXprType>::PointerType,traits<RhsXprType>::PointerType>::type>::type PointerType ; enum { Flags = 0 } ; } ; template<BinaryOp,LhsXprType,RhsXprType> struct eval<TensorCwiseBinaryOp<BinaryOp,LhsXprType,RhsXprType>,Eigen::Dense> { typedef const TensorCwiseBinaryOp<BinaryOp,LhsXprType,RhsXprType>& type ; } ; template<BinaryOp,LhsXprType,RhsXprType> struct nested<TensorCwiseBinaryOp<BinaryOp,LhsXprType,RhsXprType>,1,eval<TensorCwiseBinaryOp<BinaryOp,LhsXprType,RhsXprType>>::type> { typedef TensorCwiseBinaryOp<BinaryOp,LhsXprType,RhsXprType> type ; } ; } template<BinaryOp,LhsXprType,RhsXprType> class TensorCwiseBinaryOp : public TensorBase<TensorCwiseBinaryOp<BinaryOp,LhsXprType,RhsXprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorCwiseBinaryOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef Scalar CoeffReturnType ; typedef Eigen::internal::nested<TensorCwiseBinaryOp>::type Nested ; typedef Eigen::internal::traits<TensorCwiseBinaryOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorCwiseBinaryOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorCwiseBinaryOp(const LhsXprType& lhs, const RhsXprType& rhs, const BinaryOp& func = BinaryOp()) : m_lhs_xpr(lhs), m_rhs_xpr(rhs), m_functor(func)"
  },
  {
    "label": "TensorCwiseTernaryOp()",
    "kind": "Method",
    "detail": "Function (typedef traits<Arg1XprType> XprTraits ; typedef traits<Arg1XprType>::StorageKind StorageKind ; typedef traits<Arg1XprType>::Index Index ; typedef Arg1XprType::Nested Arg1Nested ; typedef Arg2XprType::Nested Arg2Nested ; typedef Arg3XprType::Nested Arg3Nested ; typedef remove_reference<Arg1Nested>::type _Arg1Nested ; typedef remove_reference<Arg2Nested>::type _Arg2Nested ; typedef remove_reference<Arg3Nested>::type _Arg3Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef TypeConversion<Scalar,conditional<Pointer_type_promotion<Arg2XprType::Scalar,Scalar>::val,traits<Arg2XprType>::PointerType,traits<Arg3XprType>::PointerType>::type>::type PointerType ; enum { Flags = 0 } ; } ; template<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType> struct eval<TensorCwiseTernaryOp<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType>,Eigen::Dense> { typedef const TensorCwiseTernaryOp<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType>& type ; } ; template<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType> struct nested<TensorCwiseTernaryOp<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType>,1,eval<TensorCwiseTernaryOp<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType>>::type> { typedef TensorCwiseTernaryOp<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType> type ; } ; } template<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType> class TensorCwiseTernaryOp : public TensorBase<TensorCwiseTernaryOp<TernaryOp,Arg1XprType,Arg2XprType,Arg3XprType>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorCwiseTernaryOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef Scalar CoeffReturnType ; typedef Eigen::internal::nested<TensorCwiseTernaryOp>::type Nested ; typedef Eigen::internal::traits<TensorCwiseTernaryOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorCwiseTernaryOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorCwiseTernaryOp(const Arg1XprType& arg1, const Arg2XprType& arg2, const Arg3XprType& arg3, const TernaryOp& func = TernaryOp()) : m_arg1_xpr(arg1), m_arg2_xpr(arg2), m_arg3_xpr(arg3), m_functor(func)"
  },
  {
    "label": "ifExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const IfXprType&)",
    "insertText": "ifExpression()"
  }
]