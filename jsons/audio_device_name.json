[
  {
    "label": "AudioDeviceName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AudioDeviceName"
  },
  {
    "label": "AudioDeviceName()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_DEVICE_AUDIO_DEVICE_NAME_H_ # define MODULES_AUDIO_DEVICE_AUDIO_DEVICE_NAME_H_ # include<deque> # include<string> # include \" absl / strings / string_view . h \" namespace webrtc { struct AudioDeviceName { const char kDefaultDeviceId [ ] ;)",
    "insertText": "AudioDeviceName()"
  },
  {
    "label": "AudioDeviceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioDeviceName(absl::string_view device_name, absl::string_view unique_id)"
  },
  {
    "label": "AudioDeviceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioDeviceName(const AudioDeviceName& other)"
  },
  {
    "label": "AudioDeviceName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioDeviceName(AudioDeviceName&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDeviceName&)",
    "insertText": "operator(const AudioDeviceName&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioDeviceName&)",
    "insertText": "operator(AudioDeviceName&&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  }
]