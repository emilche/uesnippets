[
  {
    "label": "SocketFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocketFactory"
  },
  {
    "label": "ProxyBinding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProxyBinding"
  },
  {
    "label": "ProxyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProxyServer"
  },
  {
    "label": "SocksProxyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SocksProxyServer"
  },
  {
    "label": "ProxyBinding()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_PROXY_SERVER_H_ # define RTC_BASE_PROXY_SERVER_H_ # include<memory> # include<vector> # include \" absl / memory / memory . h \" # include \" rtc_base / memory / fifo_buffer . h \" # include \" rtc_base / server_socket_adapters . h \" # include \" rtc_base / socket . h \" # include \" rtc_base / socket_address . h \" namespace rtc { class SocketFactory ; class ProxyBinding : public sigslot::has_slots<> { public :)",
    "insertText": "ProxyBinding(AsyncProxyServerSocket* in_socket, Socket* out_socket)"
  },
  {
    "label": "ProxyBinding()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProxyBinding()"
  },
  {
    "label": "ProxyBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProxyBinding(const ProxyBinding&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProxyBinding&)",
    "insertText": "operator(const ProxyBinding&)"
  },
  {
    "label": "OnConnectRequest()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<ProxyBinding*> SignalDestroyed ; private : void)",
    "insertText": "OnConnectRequest(AsyncProxyServerSocket* socket, const SocketAddress& addr)"
  },
  {
    "label": "OnInternalRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInternalRead(Socket* socket)"
  },
  {
    "label": "OnInternalWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInternalWrite(Socket* socket)"
  },
  {
    "label": "OnInternalClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInternalClose(Socket* socket, int err)"
  },
  {
    "label": "OnExternalConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalConnect(Socket* socket)"
  },
  {
    "label": "OnExternalRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalRead(Socket* socket)"
  },
  {
    "label": "OnExternalWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalWrite(Socket* socket)"
  },
  {
    "label": "OnExternalClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExternalClose(Socket* socket, int err)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Read(Socket* socket, FifoBuffer* buffer)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(Socket* socket, FifoBuffer* buffer)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "ProxyServer()",
    "kind": "Method",
    "detail": "Function (const int kBufferSize = 4 0 9 6 ; std::unique_ptr<AsyncProxyServerSocket> int_socket_ ; std::unique_ptr<Socket> ext_socket_ ; bool connected_ ; FifoBuffer out_buffer_ ; FifoBuffer in_buffer_ ; } ; class ProxyServer : public sigslot::has_slots<> { public :)",
    "insertText": "ProxyServer(SocketFactory* int_factory, const SocketAddress& int_addr, SocketFactory* ext_factory, const SocketAddress& ext_ip)"
  },
  {
    "label": "ProxyServer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProxyServer()"
  },
  {
    "label": "ProxyServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProxyServer(const ProxyServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProxyServer&)",
    "insertText": "operator(const ProxyServer&)"
  },
  {
    "label": "GetServerAddress()",
    "kind": "Method",
    "detail": "Function (SocketAddress)",
    "insertText": "GetServerAddress()"
  },
  {
    "label": "OnAcceptEvent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnAcceptEvent(Socket* socket)"
  },
  {
    "label": "WrapSocket()",
    "kind": "Method",
    "detail": "Function (AsyncProxyServerSocket*)",
    "insertText": "WrapSocket(Socket* socket)"
  },
  {
    "label": "SocksProxyServer()",
    "kind": "Method",
    "detail": "Function (private : SocketFactory* ext_factory_ ; SocketAddress ext_ip_ ; std::unique_ptr<Socket> server_socket_ ; std::vector<std::unique_ptr<ProxyBinding>> bindings_ ; } ; class SocksProxyServer : public ProxyServer { public :)",
    "insertText": "SocksProxyServer(SocketFactory* int_factory, const SocketAddress& int_addr, SocketFactory* ext_factory, const SocketAddress& ext_ip) : ProxyServer(int_factory, int_addr, ext_factory, ext_ip)"
  },
  {
    "label": "SocksProxyServer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SocksProxyServer(const SocksProxyServer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SocksProxyServer&)",
    "insertText": "operator(const SocksProxyServer&)"
  }
]