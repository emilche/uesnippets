[
  {
    "label": "TCircle2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCircle2"
  },
  {
    "label": "TCircle3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCircle3"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" VectorUtil . h \" # include \" BoxTypes . h \" # include \" OrientedBoxTypes . h \" # include \" FrameTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TCircle2 { TVector2<RealType> Center = TVector2<)",
    "insertText": "RealType(0, 0)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "Radius(RealType)"
  },
  {
    "label": "TCircle2()",
    "kind": "Method",
    "detail": "Function (bool bIsReversed = false ;)",
    "insertText": "TCircle2()"
  },
  {
    "label": "TCircle2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCircle2(const RealType& RadiusIn)"
  },
  {
    "label": "TCircle2()",
    "kind": "Method",
    "detail": "Function (Radius = RadiusIn ; })",
    "insertText": "TCircle2(const TVector2<RealType>& CenterIn, const RealType& RadiusIn)"
  },
  {
    "label": "GetCircumference()",
    "kind": "Method",
    "detail": "Function (Center = CenterIn ; Radius = RadiusIn ; } RealType)",
    "insertText": "GetCircumference()"
  },
  {
    "label": "GetDiameter()",
    "kind": "Method",
    "detail": "Function (Radius = NewCircumference / TMathUtil<RealType>::TwoPi ; } RealType)",
    "insertText": "GetDiameter()"
  },
  {
    "label": "SetDiameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDiameter(RealType NewDiameter)"
  },
  {
    "label": "NewDiameter()",
    "kind": "Method",
    "detail": "Function (Radius =)",
    "insertText": "NewDiameter(RealType)"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "GetArea()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (Radius = TMathUtil<RealType)",
    "insertText": "Sqrt(NewArea / TMathUtil<RealType>::Pi)"
  },
  {
    "label": "GetCurvature()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "GetCurvature()"
  },
  {
    "label": "GetSignedCurvature()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "GetSignedCurvature()"
  },
  {
    "label": "GetPointFromAngleD()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "GetPointFromAngleD(RealType AngleDeg)"
  },
  {
    "label": "GetPointFromAngleR()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "GetPointFromAngleR(RealType AngleRad)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (RealType c = TMathUtil<RealType)",
    "insertText": "Cos(AngleRad), s = TMathUtil<RealType>::Sin(AngleRad)"
  },
  {
    "label": "GetPointFromUnitParameter()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "GetPointFromUnitParameter(RealType UnitParam)"
  },
  {
    "label": "AngleRad()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "AngleRad((bIsReversed) ? (-UnitParam) : (UnitParam))"
  },
  {
    "label": "IsInside()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInside(const TVector2<RealType>& Point)"
  },
  {
    "label": "IsInsideOrOn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInsideOrOn(const TVector2<RealType>& Point)"
  },
  {
    "label": "SignedDistance()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "SignedDistance(const TVector2<RealType>& Point)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Distance(const TVector2<RealType>& Point)"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (} TAxisAlignedBox2<RealType>)",
    "insertText": "GetBoundingBox()"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (TVector2<)",
    "insertText": "RealType(Center.X + Radius, Center.Y + Radius)"
  },
  {
    "label": "GetBoundingPolygonRadius()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "GetBoundingPolygonRadius(int NumSides)"
  },
  {
    "label": "DeltaAngle()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "DeltaAngle(TMathUtil<RealType>::TwoPi / (RealType)NumSides) / (RealType)"
  },
  {
    "label": "TCircle3()",
    "kind": "Method",
    "detail": "Function (bool bIsReversed = false ;)",
    "insertText": "TCircle3()"
  },
  {
    "label": "TCircle3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCircle3(const RealType& RadiusIn)"
  },
  {
    "label": "TCircle3()",
    "kind": "Method",
    "detail": "Function (Radius = RadiusIn ; })",
    "insertText": "TCircle3(const TVector<RealType>& CenterIn, const RealType& RadiusIn)"
  },
  {
    "label": "TCircle3()",
    "kind": "Method",
    "detail": "Function (Frame . Origin = CenterIn ; Radius = RadiusIn ; })",
    "insertText": "TCircle3(const TFrame3<RealType>& FrameIn, const RealType& RadiusIn)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (Frame = FrameIn ; Radius = RadiusIn ; } const TVector<RealType>&)",
    "insertText": "GetCenter()"
  },
  {
    "label": "ClosestPoint()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "ClosestPoint(const TVector<RealType>& QueryPoint)"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (const TVector<RealType>& Center = Frame . Origin ; TVector<RealType> Normal = Frame .)",
    "insertText": "GetAxis(2)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (TVector<RealType> PointDelta = QueryPoint - Center ; TVector<RealType> DeltaInPlane = PointDelta - Normal .)",
    "insertText": "Dot(PointDelta)"
  },
  {
    "label": "Length()",
    "kind": "Method",
    "detail": "Function (RealType OriginDist = DeltaInPlane .)",
    "insertText": "Length()"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} else { return Frame . Origin + Radius* Frame .)",
    "insertText": "GetAxis(0)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} } RealType)",
    "insertText": "DistanceSquared(const TVector<RealType>& Point)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Distance(const TVector<RealType>& Point)"
  }
]