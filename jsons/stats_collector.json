[
  {
    "label": "StatsReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsReporter"
  },
  {
    "label": "StatsCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatsCollector"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DeferredTraceEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeferredTraceEvent"
  },
  {
    "label": "DeferredTraceEventMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeferredTraceEventMap"
  },
  {
    "label": "Scope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scope"
  },
  {
    "label": "FOR_ALL_PCSCAN_SCANNER_SCOPES()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_STATS_COLLECTOR_H_ # define BASE_ALLOCATOR_PARTITION_ALLOCATOR_STARSCAN_STATS_COLLECTOR_H_ # include<array> # include<atomic> # include<functional> # include<mutex> # include<string> # include<type_traits> # include<unordered_map> # include<utility> # include \" base / allocator / partition_allocator / partition_alloc_base / threading / platform_thread . h \" # include \" base / allocator / partition_allocator / partition_alloc_base / time / time . h \" # include \" base / allocator / partition_allocator / starscan / metadata_allocator . h \" # include \" base / allocator / partition_allocator / starscan / starscan_fwd . h \" namespace partition_alloc { class StatsReporter ; namespace internal { # define)",
    "insertText": "FOR_ALL_PCSCAN_SCANNER_SCOPES(V) \\ V(Clear) \\ V(Scan) \\ V(Sweep) \\ V(Overall) #define FOR_ALL_PCSCAN_MUTATOR_SCOPES(V) \\ V(Clear) \\ V(ScanStack) \\ V(Scan) \\ V(Overall)"
  },
  {
    "label": "DECLARE_ENUM()",
    "kind": "Method",
    "detail": "Function (public : enum class ScannerId { # define)",
    "insertText": "DECLARE_ENUM(name) k##name, FOR_ALL_PCSCAN_SCANNER_SCOPES(DECLARE_ENUM)"
  },
  {
    "label": "DECLARE_ENUM()",
    "kind": "Method",
    "detail": "Function (enum class MutatorId { # define)",
    "insertText": "DECLARE_ENUM(name) k##name, FOR_ALL_PCSCAN_MUTATOR_SCOPES(DECLARE_ENUM)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (template<Context context> using IdType = std::conditional_t<context = = Context::kMutator,MutatorId,ScannerId> ; struct DeferredTraceEvent { base::TimeTicks start_time ; base::TimeTicks end_time ; } ; template<Context context> class DeferredTraceEventMap final { public : using IdType = StatsCollector::IdType<context> ; using PerThreadEvents = std::array<DeferredTraceEvent,static_cast<)",
    "insertText": "size_t(IdType::kNumIds)"
  },
  {
    "label": "RegisterBeginEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (using UnderlyingMap = std::unordered_map<internal::base::PlatformThreadId,PerThreadEvents,std::hash<internal::base::PlatformThreadId>,std::equal_to<>,MetadataAllocator<std::pair<const internal::base::PlatformThreadId,PerThreadEvents>>> ; void)",
    "insertText": "RegisterBeginEventFromCurrentThread(IdType id)"
  },
  {
    "label": "RegisterEndEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEndEventFromCurrentThread(IdType id)"
  },
  {
    "label": "get_underlying_map_unsafe()",
    "kind": "Method",
    "detail": "Function (const UnderlyingMap&)",
    "insertText": "get_underlying_map_unsafe()"
  },
  {
    "label": "RegisterBeginEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (stats_ .)",
    "insertText": "RegisterBeginEventFromCurrentThread(type)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Scope(const Scope&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Scope&)",
    "insertText": "operator(const Scope&)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Scope()"
  },
  {
    "label": "RegisterEndEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (stats_ .)",
    "insertText": "RegisterEndEventFromCurrentThread(type_)"
  },
  {
    "label": "StatsCollector()",
    "kind": "Method",
    "detail": "Function (} private : StatsCollector& stats_ ; IdType<context> type_ ; } ; using ScannerScope = Scope<Context::kScanner> ; using MutatorScope = Scope<Context::kMutator> ;)",
    "insertText": "StatsCollector(const char* process_name, size_t quarantine_last_size)"
  },
  {
    "label": "StatsCollector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatsCollector(const StatsCollector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StatsCollector&)",
    "insertText": "operator(const StatsCollector&)"
  },
  {
    "label": "StatsCollector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StatsCollector()"
  },
  {
    "label": "IncreaseSurvivedQuarantineSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncreaseSurvivedQuarantineSize(size_t size)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (survived_quarantine_size_ .)",
    "insertText": "fetch_add(size, std::memory_order_relaxed)"
  },
  {
    "label": "survived_quarantine_size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "survived_quarantine_size()"
  },
  {
    "label": "IncreaseSweptSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncreaseSweptSize(size_t size)"
  },
  {
    "label": "swept_size()",
    "kind": "Method",
    "detail": "Function (swept_size_ + = size ; } size_t)",
    "insertText": "swept_size()"
  },
  {
    "label": "GetOverallTime()",
    "kind": "Method",
    "detail": "Function (discarded_quarantine_size_ + = size ; } base::TimeDelta)",
    "insertText": "GetOverallTime()"
  },
  {
    "label": "ReportTracesAndHists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportTracesAndHists(partition_alloc::StatsReporter& reporter)"
  },
  {
    "label": "ToUMAString()",
    "kind": "Method",
    "detail": "Function (private : using MetadataString = std::basic_string<char,std::char_traits<char>,MetadataAllocator<char>> ; MetadataString)",
    "insertText": "ToUMAString(ScannerId id)"
  },
  {
    "label": "ToUMAString()",
    "kind": "Method",
    "detail": "Function (MetadataString)",
    "insertText": "ToUMAString(MutatorId id)"
  },
  {
    "label": "RegisterBeginEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterBeginEventFromCurrentThread(MutatorId id)"
  },
  {
    "label": "RegisterBeginEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (mutator_trace_events_ .)",
    "insertText": "RegisterBeginEventFromCurrentThread(id)"
  },
  {
    "label": "RegisterEndEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterEndEventFromCurrentThread(MutatorId id)"
  },
  {
    "label": "RegisterEndEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (mutator_trace_events_ .)",
    "insertText": "RegisterEndEventFromCurrentThread(id)"
  },
  {
    "label": "RegisterBeginEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterBeginEventFromCurrentThread(ScannerId id)"
  },
  {
    "label": "RegisterEndEventFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterEndEventFromCurrentThread(ScannerId id)"
  },
  {
    "label": "GetTimeImpl()",
    "kind": "Method",
    "detail": "Function (} template<Context context> base::TimeDelta)",
    "insertText": "GetTimeImpl(const DeferredTraceEventMap<context>& event_map, IdType<context> id)"
  },
  {
    "label": "ReportTracesAndHistsImpl()",
    "kind": "Method",
    "detail": "Function (template<Context context> void)",
    "insertText": "ReportTracesAndHistsImpl(partition_alloc::StatsReporter& reporter, const DeferredTraceEventMap<context>& event_map)"
  },
  {
    "label": "ReportSurvivalRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportSurvivalRate(partition_alloc::StatsReporter& reporter)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (std::lock_guard<std::mutex>)",
    "insertText": "lock(mutex_)"
  },
  {
    "label": "CurrentId()",
    "kind": "Method",
    "detail": "Function (const auto tid = base::)",
    "insertText": "CurrentId()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (const auto now = base::)",
    "insertText": "Now()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (auto& event_array = events_ [ tid ] ; auto& event = event_array [ static_cast<)",
    "insertText": "size_t(id)"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(event.start_time.is_null())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(event.end_time.is_null())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(!event.start_time.is_null())"
  },
  {
    "label": "PA_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PA_DCHECK(process_name_)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (const MetadataString process_name = process_name_ ;)",
    "insertText": "switch(id)"
  }
]