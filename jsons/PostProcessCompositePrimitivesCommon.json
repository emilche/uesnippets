[
  {
    "label": "FCompositePrimitiveShaderBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositePrimitiveShaderBase"
  },
  {
    "label": "FSampleCountDimension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSampleCountDimension"
  },
  {
    "label": "FMSAADontResolve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMSAADontResolve"
  },
  {
    "label": "FCompositePrimitiveInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompositePrimitiveInputs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SHADER_PERMUTATION_RANGE_INT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ScreenPass . h \" # include \" OverridePassSequence . h \" # include \" DataDrivenShaderPlatformInfo . h \" # include \" PostProcess / LensDistortion . h \" # if UE_ENABLE_DEBUG_DRAWING class FCompositePrimitiveShaderBase : public FGlobalShader { public : const uint32 kMSAASampleCountMax = 8 ; class FSampleCountDimension :)",
    "insertText": "SHADER_PERMUTATION_RANGE_INT(\"MSAA_SAMPLE_COUNT\", 1, kMSAASampleCountMax + 1)"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FMSAADontResolve :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"MSAA_DONT_RESOLVE\")"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<FSampleCountDimension,FMSAADontResolve> ; bool)",
    "insertText": "ShouldCompilePermutation(const FPermutationDomain& PermutationVector, const EShaderPlatform Platform)"
  },
  {
    "label": "FSampleCountDimension()",
    "kind": "Method",
    "detail": "Function (const int32 SampleCount = PermutationVector . Get<)",
    "insertText": "FSampleCountDimension()"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "PermutationVector()",
    "kind": "Method",
    "detail": "Function (const FPermutationDomain)",
    "insertText": "PermutationVector(Parameters.PermutationId)"
  },
  {
    "label": "FCompositePrimitiveShaderBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCompositePrimitiveShaderBase()"
  },
  {
    "label": "FCompositePrimitiveShaderBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompositePrimitiveShaderBase(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "CreateCompositePrimitiveView()",
    "kind": "Method",
    "detail": "Function (} } ; struct FCompositePrimitiveInputs { enum class EBasePassType : uint32 { Deferred,Mobile,MAX } ; EBasePassType BasePassType = EBasePassType::MAX ; FScreenPassRenderTarget OverrideOutput ; FScreenPassRenderTarget OverrideDepthOutput ; FScreenPassTexture SceneColor ; FScreenPassTexture SceneDepth ; FLensDistortionLUT LensDistortionLUT ; bool bUseMetalMSAAHDRDecode = false ; } ; const FViewInfo*)",
    "insertText": "CreateCompositePrimitiveView(const FViewInfo& ParentView, FIntRect ViewRect, uint32 NumMSAASamples)"
  },
  {
    "label": "CreateCompositeDepthTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "CreateCompositeDepthTexture(FRDGBuilder& GraphBuilder, FIntPoint Extent, uint32 NumMSAASamples)"
  },
  {
    "label": "TemporalUpscaleDepthPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TemporalUpscaleDepthPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FScreenPassTexture& InSceneColor, FScreenPassTexture& InOutSceneDepth, FVector2f& SceneDepthJitter)"
  },
  {
    "label": "PopulateDepthPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateDepthPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FScreenPassTexture& InSceneColor, const FScreenPassTexture& InSceneDepth, FRDGTextureRef OutPopColor, FRDGTextureRef OutPopDepth, const FVector2f& SceneDepthJitter, uint32 NumMSAASamples, bool bForceDrawColor = false, bool bUseMetalPlatformHDRDecode = false)"
  }
]