[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStreamedAudioChunkSeekTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamedAudioChunkSeekTable"
  },
  {
    "label": "ISeekTableImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISeekTableImpl"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Containers / Array . h \" # include \" Templates / PimplPtr . h \" # include \" StreamedAudioChunkSeekTable . generated . h \" class FArchive ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (ConstantSamplesPerEntry = 0,VariableSamplesPerEntry,} ; class FStreamedAudioChunkSeekTable { public : bool)",
    "insertText": "Parse(const uint8* InMemory, uint32 InSize, uint32& InOutOffset, FStreamedAudioChunkSeekTable& OutTable)"
  },
  {
    "label": "CalcSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CalcSize(int32 NumEntries, EChunkSeekTableMode InMode = EChunkSeekTableMode::ConstantSamplesPerEntry)"
  },
  {
    "label": "ISeekTableImpl()",
    "kind": "Method",
    "detail": "Function (struct ISeekTableImpl { ~)",
    "insertText": "ISeekTableImpl()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "FindOffset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindOffset(uint32 InTimeInAudioFrames)"
  },
  {
    "label": "FindTime()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindTime(uint32 InOffset)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(uint32 InTimeInAudioFrames, uint32 InOffset)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "FStreamedAudioChunkSeekTable()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FStreamedAudioChunkSeekTable(EChunkSeekTableMode InMode = EChunkSeekTableMode::ConstantSamplesPerEntry)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Impl ->)",
    "insertText": "Add(InTimeInAudioFrames,InOffset)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetMagic()",
    "kind": "Method",
    "detail": "Function (private : uint32)",
    "insertText": "GetMagic()"
  },
  {
    "label": "CreateImpl()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<ISeekTableImpl>)",
    "insertText": "CreateImpl(EChunkSeekTableMode InMode)"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(EChunkSeekTableMode InMode)"
  }
]