[
  {
    "label": "FDatasmithElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithElementImpl"
  },
  {
    "label": "FDatasmithKeyValuePropertyImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithKeyValuePropertyImpl"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDatasmithActorElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithActorElementImpl"
  },
  {
    "label": "FDatasmithMeshElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMeshElementImpl"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FDatasmithMaterialIDElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialIDElementImpl"
  },
  {
    "label": "FDatasmithMeshActorElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMeshActorElementImpl"
  },
  {
    "label": "FDatasmithHierarchicalInstancedStaticMeshActorElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithHierarchicalInstancedStaticMeshActorElementImpl"
  },
  {
    "label": "FDatasmithLightActorElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithLightActorElementImpl"
  },
  {
    "label": "FDatasmithPointLightElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithPointLightElementImpl"
  },
  {
    "label": "FDatasmithSpotLightElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithSpotLightElementImpl"
  },
  {
    "label": "FDatasmithDirectionalLightElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithDirectionalLightElementImpl"
  },
  {
    "label": "FDatasmithAreaLightElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithAreaLightElementImpl"
  },
  {
    "label": "FDatasmithLightmassPortalElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithLightmassPortalElementImpl"
  },
  {
    "label": "FDatasmithPostProcessElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithPostProcessElementImpl"
  },
  {
    "label": "FDatasmithPostProcessVolumeElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithPostProcessVolumeElementImpl"
  },
  {
    "label": "FDatasmithCameraActorElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithCameraActorElementImpl"
  },
  {
    "label": "DATASMITHCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DATASMITHCORE_API"
  },
  {
    "label": "FDatasmithEnvironmentElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithEnvironmentElementImpl"
  },
  {
    "label": "FDatasmithTextureElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithTextureElementImpl"
  },
  {
    "label": "FDatasmithShaderElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithShaderElementImpl"
  },
  {
    "label": "FDatasmithBaseMaterialElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithBaseMaterialElementImpl"
  },
  {
    "label": "FDatasmithMaterialElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialElementImpl"
  },
  {
    "label": "FDatasmithMaterialIntanceElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithMaterialIntanceElementImpl"
  },
  {
    "label": "FDatasmithDecalMaterialElementImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithDecalMaterialElementImpl"
  },
  {
    "label": "FDatasmithCompositeSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithCompositeSurface"
  },
  {
    "label": "FDatasmithCompositeTextureImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDatasmithCompositeTextureImpl"
  },
  {
    "label": "FDatasmithElementImpl()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DatasmithDefinitions . h \" # include \" DatasmithSceneFactory . h \" # include \" DatasmithSceneGraphSharedState . h \" # include \" DatasmithUtils . h \" # include \" DirectLinkParameterStore . h \" # include \" IDatasmithSceneElements . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / PackageName . h \" # include \" Templates / SharedPointer . h \" template<T,S = T> using TReflected = DirectLink::TStoreKey<T,S> ; template<InterfaceType> class FDatasmithElementImpl : public InterfaceType { public :)",
    "insertText": "FDatasmithElementImpl(const TCHAR* InName, EDatasmithElementType InType, uint64 InSubType = 0)"
  },
  {
    "label": "FDatasmithElementImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDatasmithElementImpl()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsA(EDatasmithElementType InType)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetName(const TCHAR* InName)"
  },
  {
    "label": "SanitizeObjectName()",
    "kind": "Method",
    "detail": "Function (Name =)",
    "insertText": "SanitizeObjectName(InName)"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetLabel()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FString& Tmp = Label .)",
    "insertText": "Get()"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLabel(const TCHAR* InLabel)"
  },
  {
    "label": "SanitizeObjectName()",
    "kind": "Method",
    "detail": "Function (Label =)",
    "insertText": "SanitizeObjectName(InLabel)"
  },
  {
    "label": "CalculateElementHash()",
    "kind": "Method",
    "detail": "Function (} FMD5Hash)",
    "insertText": "CalculateElementHash(bool)"
  },
  {
    "label": "GetStore()",
    "kind": "Method",
    "detail": "Function (} const DirectLink::FParameterStore&)",
    "insertText": "GetStore()"
  },
  {
    "label": "GetElementType()",
    "kind": "Method",
    "detail": "Function (} EDatasmithElementType)",
    "insertText": "GetElementType()"
  },
  {
    "label": "GetSubType()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetSubType()"
  },
  {
    "label": "FDatasmithElementImpl()",
    "kind": "Method",
    "detail": "Function (} protected : FMD5Hash ElementHash ; DirectLink::FParameterStore Store ; TReflected<EDatasmithElementType,uint64> Type ; TReflected<uint64> Subtype ; TReflected<FString> Name ; TReflected<FString> Label ; } ; template<InterfaceType> FDatasmithElementImpl<InterfaceType)",
    "insertText": "FDatasmithElementImpl(const TCHAR* InName, EDatasmithElementType InType, uint64 InSubType) : Type(InType) , Subtype(InSubType)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (FDatasmithElementImpl<InterfaceType)",
    "insertText": "SetName(InName)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Type, \"Type\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Subtype, \"Subtype\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Name, \"Name\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Label, \"Label\")"
  },
  {
    "label": "FDatasmithKeyValuePropertyImpl()",
    "kind": "Method",
    "detail": "Function (} class FDatasmithKeyValuePropertyImpl : public FDatasmithElementImpl<IDatasmithKeyValueProperty> { public :)",
    "insertText": "FDatasmithKeyValuePropertyImpl(const TCHAR* InName)"
  },
  {
    "label": "GetPropertyType()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } EDatasmithKeyValuePropertyType)",
    "insertText": "GetPropertyType()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetValue()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const TCHAR* InValue)"
  },
  {
    "label": "FormatValue()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithKeyValueProperty> NullPropertyPtr ; protected : void)",
    "insertText": "FormatValue()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : TReflected<EDatasmithKeyValuePropertyType,uint8> PropertyType ; TReflected<FString> Value ; } ; enum class EActorFlags : uint8 { IsAComponent = 0 x01,IsASelector = 0 x02,IsVisible = 0 x04,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EActorFlags)"
  },
  {
    "label": "UPDATE_BITFLAGS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UPDATE_BITFLAGS(Flags, bValue, EnumValue)"
  },
  {
    "label": "FDatasmithActorElementImpl()",
    "kind": "Method",
    "detail": "Function (public : using FDatasmithElementImpl<InterfaceType>::Store ;)",
    "insertText": "FDatasmithActorElementImpl(const TCHAR* InName, EDatasmithElementType InType)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTranslation(double InX, double InY, double InZ, bool bKeepChildrenRelative)"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslation(FVector( InX, InY, InZ ), bKeepChildrenRelative)"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTranslation(const FVector& Value, bool bKeepChildrenRelative)"
  },
  {
    "label": "ConvertChildsToRelative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertChildsToRelative()"
  },
  {
    "label": "SetInternalTranslation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetInternalTranslation(Value)"
  },
  {
    "label": "ConvertChildsToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertChildsToWorld()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (} } FVector)",
    "insertText": "GetScale()"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScale(double InX, double InY, double InZ, bool bKeepChildrenRelative)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(FVector( InX, InY, InZ ), bKeepChildrenRelative)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetScale(const FVector& Value, bool bKeepChildrenRelative)"
  },
  {
    "label": "SetInternalScale()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetInternalScale(Value)"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (} } FQuat)",
    "insertText": "GetRotation()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotation(FQuat( InX, InY, InZ, InW ), bKeepChildrenRelative)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRotation(const FQuat& Value, bool bKeepChildrenRelative)"
  },
  {
    "label": "SetInternalRotation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetInternalRotation(Value)"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (} } FTransform)",
    "insertText": "GetRelativeTransform()"
  },
  {
    "label": "GetLayer()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetLayer()"
  },
  {
    "label": "SetLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLayer(const TCHAR* InLayer)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (Layer = InLayer ; } void)",
    "insertText": "AddTag(const TCHAR* InTag)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Tags .)",
    "insertText": "Get().Add(InTag)"
  },
  {
    "label": "ResetTags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetTags()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Tags .)",
    "insertText": "Get().Reset()"
  },
  {
    "label": "GetTagsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTagsCount()"
  },
  {
    "label": "GetTag()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetTag(int32 TagIndex)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(const TSharedPtr< IDatasmithActorElement >& InChild, EDatasmithActorAttachmentRule AttachementRule = EDatasmithActorAttachmentRule::KeepWorldTransform)"
  },
  {
    "label": "GetChildrenCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChildrenCount()"
  },
  {
    "label": "GetChild()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithActorElement>)",
    "insertText": "GetChild(int32 InIndex)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RemoveChild(const TSharedPtr< IDatasmithActorElement >& InChild)"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Edit().Remove(InChild)"
  },
  {
    "label": "FDatasmithActorElementImpl()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "FDatasmithActorElementImpl(InChild.Get() )->Parent.Edit().Reset()"
  },
  {
    "label": "GetParentActor()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<IDatasmithActorElement>&)",
    "insertText": "GetParentActor()"
  },
  {
    "label": "SetIsAComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsAComponent(bool Value)"
  },
  {
    "label": "UPDATE_BITFLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_BITFLAGS(Flags, Value, EActorFlags::IsAComponent)"
  },
  {
    "label": "IsAComponent()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAComponent()"
  },
  {
    "label": "SetVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVisibility(bool bInVisibility)"
  },
  {
    "label": "UPDATE_BITFLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_BITFLAGS(Flags, bInVisibility, EActorFlags::IsVisible)"
  },
  {
    "label": "GetVisibility()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetVisibility()"
  },
  {
    "label": "SetCastShadow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCastShadow(bool bInCastShadow)"
  },
  {
    "label": "GetCastShadow()",
    "kind": "Method",
    "detail": "Function (bCastShadow = bInCastShadow ; } bool)",
    "insertText": "GetCastShadow()"
  },
  {
    "label": "GetMobility()",
    "kind": "Method",
    "detail": "Function (Mobility = InMobility ; } EDatasmithActorMobilityType)",
    "insertText": "GetMobility()"
  },
  {
    "label": "SetInternalRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInternalRotation(const FQuat& Value)"
  },
  {
    "label": "SetInternalScale()",
    "kind": "Method",
    "detail": "Function (Rotation = Value ; } void)",
    "insertText": "SetInternalScale(const FVector& Value)"
  },
  {
    "label": "SetInternalTranslation()",
    "kind": "Method",
    "detail": "Function (Scale = Value ; } void)",
    "insertText": "SetInternalTranslation(const FVector& Value)"
  },
  {
    "label": "FDatasmithActorElementImpl()",
    "kind": "Method",
    "detail": "Function (Translation = Value ; } private : TSharedPtr<IDatasmithActorElement> NullActorPtr ; TReflected<FVector> Translation ; TReflected<FVector> Scale ; TReflected<FQuat> Rotation ; TReflected<FString> Layer ; TReflected<TArray<FString>> Tags ; TDatasmithReferenceArrayProxy<IDatasmithActorElement> Children ; TDatasmithReferenceProxy<IDatasmithActorElement> Parent ; TReflected<EActorFlags,uint8> Flags ; TReflected<bool> bCastShadow ; TReflected<EDatasmithActorMobilityType,uint8> Mobility ; } ; template<InterfaceType> TSharedPtr<IDatasmithActorElement> FDatasmithActorElementImpl<InterfaceType>::NullActorPtr ; template<T> FDatasmithActorElementImpl<T)",
    "insertText": "FDatasmithActorElementImpl(const TCHAR* InName, EDatasmithElementType ChildType) : FDatasmithElementImpl<T>(InName, EDatasmithElementType::Actor | ChildType) , Translation(FVector::ZeroVector) , Scale(FVector::OneVector) , Rotation(FQuat::Identity) , Flags(EActorFlags::IsVisible) , bCastShadow(true) , Mobility(EDatasmithActorMobilityType::Static)"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RegisterReferenceProxy(Children, \"Children\")"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RegisterReferenceProxy(Parent, \"Parent\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Translation, \"Translation\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Scale, \"Scale\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Rotation, \"Rotation\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Layer, \"Layer\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Tags, \"Tags\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Flags, \"Flags\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(bCastShadow, \"CastShadow\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Mobility, \"Mobility\")"
  },
  {
    "label": "ActorTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ActorTransform(GetRotation(), GetTranslation(), GetScale())"
  },
  {
    "label": "ParentTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ParentTransform(Parent.Inner->GetRotation(), Parent.Inner->GetTranslation(), Parent.Inner->GetScale())"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} return ActorTransform ; } template<T> void FDatasmithActorElementImpl<T)",
    "insertText": "AddChild(const TSharedPtr< IDatasmithActorElement >& InChild, EDatasmithActorAttachmentRule AttachementRule)"
  },
  {
    "label": "RelativeTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "RelativeTransform(InChild->GetRotation(), InChild->GetTranslation(), InChild->GetScale())"
  },
  {
    "label": "ParentTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ParentTransform(GetRotation(), GetTranslation(), GetScale())"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (FTransform WorldTransform = RelativeTransform* ParentTransform ; InChild ->)",
    "insertText": "SetRotation(WorldTransform.GetRotation())"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (InChild ->)",
    "insertText": "SetTranslation(WorldTransform.GetTranslation())"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (InChild ->)",
    "insertText": "SetScale(WorldTransform.GetScale3D())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Children .)",
    "insertText": "Add(InChild)"
  },
  {
    "label": "FDatasmithActorElementImpl()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "FDatasmithActorElementImpl(InChild.Get() )->Parent.Inner = this->AsShared()"
  },
  {
    "label": "ThisWorldTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ThisWorldTransform(GetRotation(), GetTranslation(), GetScale())"
  },
  {
    "label": "FDatasmithActorElementImpl()",
    "kind": "Method",
    "detail": "Function (continue ; } FDatasmithActorElementImpl* ChildImpl = static_cast<)",
    "insertText": "FDatasmithActorElementImpl(Child.Get())"
  },
  {
    "label": "ChildWorldTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ChildWorldTransform(Child->GetRotation(), Child->GetTranslation(), Child->GetScale())"
  },
  {
    "label": "GetRelativeTransform()",
    "kind": "Method",
    "detail": "Function (FTransform ChildRelativeTransform = ChildWorldTransform .)",
    "insertText": "GetRelativeTransform(ThisWorldTransform)"
  },
  {
    "label": "SetInternalRotation()",
    "kind": "Method",
    "detail": "Function (ChildImpl ->)",
    "insertText": "SetInternalRotation(ChildRelativeTransform.GetRotation())"
  },
  {
    "label": "SetInternalTranslation()",
    "kind": "Method",
    "detail": "Function (ChildImpl ->)",
    "insertText": "SetInternalTranslation(ChildRelativeTransform.GetTranslation())"
  },
  {
    "label": "SetInternalScale()",
    "kind": "Method",
    "detail": "Function (ChildImpl ->)",
    "insertText": "SetInternalScale(ChildRelativeTransform.GetScale3D())"
  },
  {
    "label": "ChildRelativeTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ChildRelativeTransform(Child->GetRotation(), Child->GetTranslation(), Child->GetScale())"
  },
  {
    "label": "SetInternalRotation()",
    "kind": "Method",
    "detail": "Function (FTransform ChildWorldTransform = ChildRelativeTransform* ThisWorldTransform ; ChildImpl ->)",
    "insertText": "SetInternalRotation(ChildWorldTransform.GetRotation())"
  },
  {
    "label": "SetInternalTranslation()",
    "kind": "Method",
    "detail": "Function (ChildImpl ->)",
    "insertText": "SetInternalTranslation(ChildWorldTransform.GetTranslation())"
  },
  {
    "label": "SetInternalScale()",
    "kind": "Method",
    "detail": "Function (ChildImpl ->)",
    "insertText": "SetInternalScale(ChildWorldTransform.GetScale3D())"
  },
  {
    "label": "FDatasmithMeshElementImpl()",
    "kind": "Method",
    "detail": "Function (} } class FDatasmithMeshElementImpl : public FDatasmithElementImpl<IDatasmithMeshElement> { public :)",
    "insertText": "FDatasmithMeshElementImpl(const TCHAR* InName)"
  },
  {
    "label": "CalculateElementHash()",
    "kind": "Method",
    "detail": "Function (FMD5Hash)",
    "insertText": "CalculateElementHash(bool bForce)"
  },
  {
    "label": "GetFile()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetFile()"
  },
  {
    "label": "SetFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFile(const TCHAR* InFile)"
  },
  {
    "label": "GetFileHash()",
    "kind": "Method",
    "detail": "Function (File = InFile ; } ; FMD5Hash)",
    "insertText": "GetFileHash()"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (FileHash = Hash ; } void)",
    "insertText": "SetDimensions(float InArea, float InWidth, float InHeight, float InDepth)"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (Area = InArea ; Width = InWidth ; Height = InHeight ; Depth = InDepth ; } ; FVector3f)",
    "insertText": "GetDimensions()"
  },
  {
    "label": "GetLightmapSourceUV()",
    "kind": "Method",
    "detail": "Function (LightmapCoordinateIndex = UVChannel ; } int32)",
    "insertText": "GetLightmapSourceUV()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (LightmapSourceUV = UVChannel ; } void)",
    "insertText": "SetMaterial(const TCHAR* MaterialPathName, int32 SlotId)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetMaterial(int32 SlotId)"
  },
  {
    "label": "GetMaterialSlotCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaterialSlotCount()"
  },
  {
    "label": "GetMaterialSlotAt()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IDatasmithMaterialIDElement>)",
    "insertText": "GetMaterialSlotAt(int32 Index)"
  },
  {
    "label": "GetLODCount()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "GetLODCount()"
  },
  {
    "label": "FDatasmithClothElementImpl()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FDatasmithClothElementImpl(const TCHAR* InName)"
  },
  {
    "label": "FDatasmithMaterialIDElementImpl()",
    "kind": "Method",
    "detail": "Function (File = InFile ; } private : TReflected<FString> File ; } ; class FDatasmithMaterialIDElementImpl : public FDatasmithElementImpl<IDatasmithMaterialIDElement> { public :)",
    "insertText": "FDatasmithMaterialIDElementImpl(const TCHAR* InName)"
  },
  {
    "label": "IsValidObjectPath()",
    "kind": "Method",
    "detail": "Function (FString Unsanitized = InName ; Name =)",
    "insertText": "IsValidObjectPath(Unsanitized) ? Unsanitized : FDatasmithUtils::SanitizeObjectName(Unsanitized)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetId()"
  },
  {
    "label": "FDatasmithMeshActorElementImpl()",
    "kind": "Method",
    "detail": "Function (Id = InId ; } private : TReflected<int32> Id ; } ; template<InterfaceType = IDatasmithMeshActorElement> class FDatasmithMeshActorElementImpl : public FDatasmithActorElementImpl<InterfaceType> { public : using FDatasmithElementImpl<InterfaceType>::Store ;)",
    "insertText": "FDatasmithMeshActorElementImpl(const TCHAR* InName)"
  },
  {
    "label": "AddMaterialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaterialOverride(const TCHAR* InMaterialName, int32 Id)"
  },
  {
    "label": "AddMaterialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaterialOverride(const TSharedPtr< IDatasmithMaterialIDElement >& Material)"
  },
  {
    "label": "GetMaterialOverridesCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaterialOverridesCount()"
  },
  {
    "label": "GetMaterialOverride()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithMaterialIDElement>)",
    "insertText": "GetMaterialOverride(int32 i)"
  },
  {
    "label": "RemoveMaterialOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMaterialOverride(const TSharedPtr< IDatasmithMaterialIDElement >& Material)"
  },
  {
    "label": "ResetMaterialOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMaterialOverrides()"
  },
  {
    "label": "GetStaticMeshPathName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetStaticMeshPathName()"
  },
  {
    "label": "SetStaticMeshPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStaticMeshPathName(const TCHAR* InStaticMeshName)"
  },
  {
    "label": "FDatasmithMeshActorElementImpl()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FDatasmithMeshActorElementImpl(const TCHAR* InName, EDatasmithElementType ElementType)"
  },
  {
    "label": "FDatasmithMeshActorElementImpl()",
    "kind": "Method",
    "detail": "Function (private : TReflected<FString> StaticMeshPathName ; TDatasmithReferenceArrayProxy<IDatasmithMaterialIDElement> Materials ; } ; template<InterfaceType> FDatasmithMeshActorElementImpl<InterfaceType)",
    "insertText": "FDatasmithMeshActorElementImpl(const TCHAR* InName) : FDatasmithMeshActorElementImpl< InterfaceType >(InName, EDatasmithElementType::None)"
  },
  {
    "label": "FDatasmithMeshActorElementImpl()",
    "kind": "Method",
    "detail": "Function (} template<InterfaceType> FDatasmithMeshActorElementImpl<InterfaceType)",
    "insertText": "FDatasmithMeshActorElementImpl(const TCHAR* InName, EDatasmithElementType ElementType) : FDatasmithActorElementImpl< InterfaceType >(InName, EDatasmithElementType::StaticMeshActor | ElementType)"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RegisterReferenceProxy(Materials, \"Materials\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(StaticMeshPathName, \"StaticMeshPathName\")"
  },
  {
    "label": "SanitizeObjectName()",
    "kind": "Method",
    "detail": "Function (FString MaterialName =)",
    "insertText": "SanitizeObjectName(InMaterialName)"
  },
  {
    "label": "SetId()",
    "kind": "Method",
    "detail": "Function (MaterialIDElement ->)",
    "insertText": "SetId(Id)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Add(MaterialIDElement)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Add(Material)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Remove(Material)"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Edit().Reset()"
  },
  {
    "label": "FDatasmithHierarchicalInstancedStaticMeshActorElementImpl()",
    "kind": "Method",
    "detail": "Function (StaticMeshPathName = InStaticMeshName ; } class FDatasmithHierarchicalInstancedStaticMeshActorElementImpl : public FDatasmithMeshActorElementImpl<IDatasmithHierarchicalInstancedStaticMeshActorElement> { public :)",
    "insertText": "FDatasmithHierarchicalInstancedStaticMeshActorElementImpl(const TCHAR* InName)"
  },
  {
    "label": "FDatasmithHierarchicalInstancedStaticMeshActorElementImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDatasmithHierarchicalInstancedStaticMeshActorElementImpl()"
  },
  {
    "label": "GetInstancesCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInstancesCount()"
  },
  {
    "label": "ReserveSpaceForInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveSpaceForInstances(int32 NumIntances)"
  },
  {
    "label": "AddInstance()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddInstance(const FTransform& Transform)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetInstance(int32 InstanceIndex)"
  },
  {
    "label": "RemoveInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInstance(int32 InstanceIndex)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (private : TReflected<TArray<FTransform>> Instances ; } ; enum class LightActorFlags : uint8 { LightNone = 0 x00,LightEnabled = 0 x01,LightUseTemperature = 0 x02,LightUseIes = 0 x04,LightUseIesBrightness = 0 x08,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(LightActorFlags)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (template<InterfaceType = IDatasmithLightActorElement> class FDatasmithLightActorElementImpl : public FDatasmithActorElementImpl<InterfaceType> { public : using FDatasmithElementImpl<InterfaceType>::Store ; bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool bInIsEnabled)"
  },
  {
    "label": "UPDATE_BITFLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_BITFLAGS(LightFLags, bInIsEnabled, LightActorFlags::LightEnabled)"
  },
  {
    "label": "GetIntensity()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetIntensity()"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (Intensity = InIntensity ; } FLinearColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColor(FLinearColor InColor)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Color =)",
    "insertText": "FVector(InColor.R, InColor.G, InColor.B)"
  },
  {
    "label": "GetTemperature()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTemperature()"
  },
  {
    "label": "GetUseTemperature()",
    "kind": "Method",
    "detail": "Function (Temperature = InTemperature ; } bool)",
    "insertText": "GetUseTemperature()"
  },
  {
    "label": "SetUseTemperature()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUseTemperature(bool bInUseTemperature)"
  },
  {
    "label": "UPDATE_BITFLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_BITFLAGS(LightFLags, bInUseTemperature, LightActorFlags::LightUseTemperature)"
  },
  {
    "label": "GetIesFile()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetIesFile()"
  },
  {
    "label": "SetIesFile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIesFile(const TCHAR* InIesFile)"
  },
  {
    "label": "GetUseIes()",
    "kind": "Method",
    "detail": "Function (IesFile = InIesFile ; } bool)",
    "insertText": "GetUseIes()"
  },
  {
    "label": "SetUseIes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUseIes(bool bInUseIes)"
  },
  {
    "label": "UPDATE_BITFLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_BITFLAGS(LightFLags, bInUseIes, LightActorFlags::LightUseIes)"
  },
  {
    "label": "GetIesBrightnessScale()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetIesBrightnessScale()"
  },
  {
    "label": "GetUseIesBrightness()",
    "kind": "Method",
    "detail": "Function (IesBrightnessScale = InIesBrightnessScale ; } bool)",
    "insertText": "GetUseIesBrightness()"
  },
  {
    "label": "SetUseIesBrightness()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUseIesBrightness(bool bInUseIesBrightness)"
  },
  {
    "label": "UPDATE_BITFLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UPDATE_BITFLAGS(LightFLags, bInUseIesBrightness, LightActorFlags::LightUseIesBrightness)"
  },
  {
    "label": "GetIesRotation()",
    "kind": "Method",
    "detail": "Function (} FQuat)",
    "insertText": "GetIesRotation()"
  },
  {
    "label": "GetLightFunctionMaterial()",
    "kind": "Method",
    "detail": "Function (IesRotation = InIesRotation ; } TSharedPtr<IDatasmithMaterialIDElement>&)",
    "insertText": "GetLightFunctionMaterial()"
  },
  {
    "label": "SetLightFunctionMaterial()",
    "kind": "Method",
    "detail": "Function (LightFunctionMaterial = InMaterial ; } void)",
    "insertText": "SetLightFunctionMaterial(const TCHAR* InMaterialName)"
  },
  {
    "label": "CreateMaterialId()",
    "kind": "Method",
    "detail": "Function (LightFunctionMaterial . Inner =)",
    "insertText": "CreateMaterialId(*MaterialName)"
  },
  {
    "label": "GetIesTexturePathName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetIesTexturePathName()"
  },
  {
    "label": "SetIesTexturePathName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIesTexturePathName(const TCHAR* InTextureName)"
  },
  {
    "label": "FDatasmithLightActorElementImpl()",
    "kind": "Method",
    "detail": "Function (IesTexturePathName = InTextureName ; } protected :)",
    "insertText": "FDatasmithLightActorElementImpl(const TCHAR* InName, EDatasmithElementType ChildType)"
  },
  {
    "label": "FDatasmithLightActorElementImpl()",
    "kind": "Method",
    "detail": "Function (private : TReflected<double> Intensity ; TReflected<FVector> Color ; TReflected<double> Temperature ; TReflected<FString> IesFile ; TReflected<FString> IesTexturePathName ; TReflected<double> IesBrightnessScale ; TReflected<FQuat> IesRotation ; TReflected<LightActorFlags,uint8> LightFLags ; TDatasmithReferenceProxy<IDatasmithMaterialIDElement> LightFunctionMaterial ; } ; template<InterfaceType> FDatasmithLightActorElementImpl<InterfaceType)",
    "insertText": "FDatasmithLightActorElementImpl(const TCHAR* InName, EDatasmithElementType ChildType) : FDatasmithActorElementImpl< InterfaceType >( InName, EDatasmithElementType::Light | ChildType ) , Intensity(1.0) , Color(FVector::OneVector) , Temperature(6500.0) , IesBrightnessScale(1.0) , IesRotation(FQuat::Identity) , LightFLags(LightActorFlags::LightEnabled)"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RegisterReferenceProxy(LightFunctionMaterial, \"LightFunctionMaterial\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Intensity, \"Intensity\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Color, \"Color\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Temperature, \"Temperature\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(IesFile, \"IesFile\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(IesTexturePathName, \"IesTexturePathName\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(IesBrightnessScale, \"IesBrightnessScale\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(IesRotation, \"IesRotation\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(LightFLags, \"LightFLags\")"
  },
  {
    "label": "FDatasmithPointLightElementImpl()",
    "kind": "Method",
    "detail": "Function (} template<InterfaceType = IDatasmithPointLightElement> class FDatasmithPointLightElementImpl : public FDatasmithLightActorElementImpl<InterfaceType> { using FDatasmithElementImpl<InterfaceType>::Store ; public :)",
    "insertText": "FDatasmithPointLightElementImpl(const TCHAR* InName) : FDatasmithPointLightElementImpl( InName, EDatasmithElementType::None)"
  },
  {
    "label": "SetIntensityUnits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIntensityUnits(EDatasmithLightUnits InUnits)"
  },
  {
    "label": "GetIntensityUnits()",
    "kind": "Method",
    "detail": "Function (Units = InUnits ; } EDatasmithLightUnits)",
    "insertText": "GetIntensityUnits()"
  },
  {
    "label": "GetSourceRadius()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSourceRadius()"
  },
  {
    "label": "GetSourceLength()",
    "kind": "Method",
    "detail": "Function (SourceRadius = InSourceRadius ; } float)",
    "insertText": "GetSourceLength()"
  },
  {
    "label": "GetAttenuationRadius()",
    "kind": "Method",
    "detail": "Function (SourceLength = InSourceLength ; } float)",
    "insertText": "GetAttenuationRadius()"
  },
  {
    "label": "FDatasmithPointLightElementImpl()",
    "kind": "Method",
    "detail": "Function (AttenuationRadius = InAttenuationRadius ; } protected :)",
    "insertText": "FDatasmithPointLightElementImpl(const TCHAR* InName, EDatasmithElementType ChildType) : FDatasmithLightActorElementImpl< InterfaceType >( InName, EDatasmithElementType::PointLight | ChildType ) , Units(EDatasmithLightUnits::Unitless) , SourceRadius(-1) , SourceLength(-1) , AttenuationRadius(-1)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Units, \"Units\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(SourceRadius, \"SourceRadius\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(SourceLength, \"SourceLength\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(AttenuationRadius, \"AttenuationRadius\")"
  },
  {
    "label": "FDatasmithSpotLightElementImpl()",
    "kind": "Method",
    "detail": "Function (} private : TReflected<EDatasmithLightUnits,uint8> Units ; TReflected<float> SourceRadius ; TReflected<float> SourceLength ; TReflected<float> AttenuationRadius ; } ; template<InterfaceType = IDatasmithSpotLightElement> class FDatasmithSpotLightElementImpl : public FDatasmithPointLightElementImpl<InterfaceType> { public : using FDatasmithElementImpl<InterfaceType>::Store ;)",
    "insertText": "FDatasmithSpotLightElementImpl(const TCHAR* InName) : FDatasmithSpotLightElementImpl( InName, EDatasmithElementType::None)"
  },
  {
    "label": "GetInnerConeAngle()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetInnerConeAngle()"
  },
  {
    "label": "GetOuterConeAngle()",
    "kind": "Method",
    "detail": "Function (InnerConeAngle = InInnerConeAngle ; } float)",
    "insertText": "GetOuterConeAngle()"
  },
  {
    "label": "FDatasmithSpotLightElementImpl()",
    "kind": "Method",
    "detail": "Function (OuterConeAngle = InOuterConeAngle ; } protected :)",
    "insertText": "FDatasmithSpotLightElementImpl(const TCHAR* InName, EDatasmithElementType ChildType) : FDatasmithPointLightElementImpl< InterfaceType >( InName, EDatasmithElementType::SpotLight | ChildType ) , InnerConeAngle(45.f) , OuterConeAngle(60.f)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(InnerConeAngle, \"InnerConeAngle\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(OuterConeAngle, \"OuterConeAngle\")"
  },
  {
    "label": "FDatasmithDirectionalLightElementImpl()",
    "kind": "Method",
    "detail": "Function (} private : TReflected<float> InnerConeAngle ; TReflected<float> OuterConeAngle ; } ; class FDatasmithDirectionalLightElementImpl : public FDatasmithLightActorElementImpl<IDatasmithDirectionalLightElement> { public :)",
    "insertText": "FDatasmithDirectionalLightElementImpl(const TCHAR* InName) : FDatasmithLightActorElementImpl< IDatasmithDirectionalLightElement >( InName, EDatasmithElementType::DirectionalLight)"
  },
  {
    "label": "FDatasmithAreaLightElementImpl()",
    "kind": "Method",
    "detail": "Function (} } ; class FDatasmithAreaLightElementImpl : public FDatasmithSpotLightElementImpl<IDatasmithAreaLightElement> { public :)",
    "insertText": "FDatasmithAreaLightElementImpl(const TCHAR* InName) : FDatasmithSpotLightElementImpl< IDatasmithAreaLightElement >( InName, EDatasmithElementType::AreaLight ) , LightShape( EDatasmithLightShape::Rectangle ) , LightType( EDatasmithAreaLightType::Point ) , Width( 0.f ) , Length( 0.f)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(LightShape, \"LightShape\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(LightType, \"LightType\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Width, \"Width\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(Length, \"Length\")"
  },
  {
    "label": "GetLightShape()",
    "kind": "Method",
    "detail": "Function (} EDatasmithLightShape)",
    "insertText": "GetLightShape()"
  },
  {
    "label": "GetLightType()",
    "kind": "Method",
    "detail": "Function (LightShape = InShape ; } EDatasmithAreaLightType)",
    "insertText": "GetLightType()"
  },
  {
    "label": "SetWidth()",
    "kind": "Method",
    "detail": "Function (LightType = InLightType ; } void)",
    "insertText": "SetWidth(float InWidth)"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (Width = InWidth ; } float)",
    "insertText": "GetWidth()"
  },
  {
    "label": "GetLength()",
    "kind": "Method",
    "detail": "Function (Length = InLength ; } float)",
    "insertText": "GetLength()"
  },
  {
    "label": "FDatasmithPostProcessElementImpl()",
    "kind": "Method",
    "detail": "Function (} } ; class FDatasmithPostProcessElementImpl : public FDatasmithElementImpl<IDatasmithPostProcessElement> { public :)",
    "insertText": "FDatasmithPostProcessElementImpl()"
  },
  {
    "label": "GetColorFilter()",
    "kind": "Method",
    "detail": "Function (Temperature = InTemperature ; } FLinearColor)",
    "insertText": "GetColorFilter()"
  },
  {
    "label": "GetVignette()",
    "kind": "Method",
    "detail": "Function (ColorFilter = InColorFilter ; } float)",
    "insertText": "GetVignette()"
  },
  {
    "label": "GetDof()",
    "kind": "Method",
    "detail": "Function (Vignette = InVignette ; } float)",
    "insertText": "GetDof()"
  },
  {
    "label": "GetSaturation()",
    "kind": "Method",
    "detail": "Function (MotionBlur = InMotionBlur ; } float)",
    "insertText": "GetSaturation()"
  },
  {
    "label": "GetCameraISO()",
    "kind": "Method",
    "detail": "Function (Saturation = InSaturation ; } float)",
    "insertText": "GetCameraISO()"
  },
  {
    "label": "GetCameraShutterSpeed()",
    "kind": "Method",
    "detail": "Function (CameraISO = InCameraISO ; } float)",
    "insertText": "GetCameraShutterSpeed()"
  },
  {
    "label": "GetDepthOfFieldFstop()",
    "kind": "Method",
    "detail": "Function (CameraShutterSpeed = InCameraShutterSpeed ; } float)",
    "insertText": "GetDepthOfFieldFstop()"
  },
  {
    "label": "FDatasmithPostProcessVolumeElementImpl()",
    "kind": "Method",
    "detail": "Function (Fstop = InFstop ; } private : TReflected<float> Temperature ; TReflected<FLinearColor> ColorFilter ; TReflected<float> Vignette ; TReflected<float> Dof ; TReflected<float> MotionBlur ; TReflected<float> Saturation ; TReflected<float> CameraISO ; TReflected<float> CameraShutterSpeed ; TReflected<float> Fstop ; } ; class FDatasmithPostProcessVolumeElementImpl : public FDatasmithActorElementImpl<IDatasmithPostProcessVolumeElement> { public :)",
    "insertText": "FDatasmithPostProcessVolumeElementImpl(const TCHAR* InName)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IDatasmithPostProcessElement>)",
    "insertText": "GetSettings()"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSettings(const TSharedRef< IDatasmithPostProcessElement >& InSettings)"
  },
  {
    "label": "GetEnabled()",
    "kind": "Method",
    "detail": "Function (Settings . Inner = InSettings ; } bool)",
    "insertText": "GetEnabled()"
  },
  {
    "label": "GetUnbound()",
    "kind": "Method",
    "detail": "Function (bEnabled = bInEnabled ; } bool)",
    "insertText": "GetUnbound()"
  },
  {
    "label": "FDatasmithCameraActorElementImpl()",
    "kind": "Method",
    "detail": "Function (bUnbound = bInUnbound ; } private : TDatasmithReferenceProxy<IDatasmithPostProcessElement> Settings ; TReflected<bool> bEnabled ; TReflected<bool> bUnbound ; } ; class FDatasmithCameraActorElementImpl : public FDatasmithActorElementImpl<IDatasmithCameraActorElement> { public :)",
    "insertText": "FDatasmithCameraActorElementImpl(const TCHAR* InName)"
  },
  {
    "label": "GetSensorWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSensorWidth()"
  },
  {
    "label": "SetSensorWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSensorWidth(float InSensorWidth)"
  },
  {
    "label": "GetSensorAspectRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSensorAspectRatio()"
  },
  {
    "label": "SetSensorAspectRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSensorAspectRatio(float InSensorAspectRatio)"
  },
  {
    "label": "GetEnableDepthOfField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableDepthOfField()"
  },
  {
    "label": "GetFocusDistance()",
    "kind": "Method",
    "detail": "Function (bEnableDepthOfField = bInEnableDepthOfField ; } float)",
    "insertText": "GetFocusDistance()"
  },
  {
    "label": "SetFocusDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocusDistance(float InFocusDistance)"
  },
  {
    "label": "GetFStop()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFStop()"
  },
  {
    "label": "SetFStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFStop(float InFStop)"
  },
  {
    "label": "GetFocalLength()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFocalLength()"
  },
  {
    "label": "SetFocalLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocalLength(float InFocalLength)"
  },
  {
    "label": "GetPostProcess()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithPostProcessElement>&)",
    "insertText": "GetPostProcess()"
  },
  {
    "label": "SetPostProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPostProcess(const TSharedPtr< IDatasmithPostProcessElement >& InPostProcess)"
  },
  {
    "label": "GetLookAtActor()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetLookAtActor()"
  },
  {
    "label": "SetLookAtActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLookAtActor(const TCHAR* InActorName)"
  },
  {
    "label": "GetLookAtAllowRoll()",
    "kind": "Method",
    "detail": "Function (ActorName = InActorName ; } bool)",
    "insertText": "GetLookAtAllowRoll()"
  },
  {
    "label": "FDatasmithCustomActorElementImpl()",
    "kind": "Method",
    "detail": "Function (bLookAtAllowRoll = bAllow ; } private : TDatasmithReferenceProxy<IDatasmithPostProcessElement> PostProcess ; TReflected<float> SensorWidth ; TReflected<float> SensorAspectRatio ; TReflected<bool> bEnableDepthOfField ; TReflected<float> FocusDistance ; TReflected<float> FStop ; TReflected<float> FocalLength ; TReflected<FString> ActorName ; TReflected<bool> bLookAtAllowRoll ; } ; template<InterfaceType = IDatasmithCustomActorElement> class FDatasmithCustomActorElementImpl : public FDatasmithActorElementImpl<InterfaceType> { public : using FDatasmithElementImpl<InterfaceType>::Store ;)",
    "insertText": "FDatasmithCustomActorElementImpl(const TCHAR* InName, EDatasmithElementType InChildType = EDatasmithElementType::None) : FDatasmithActorElementImpl< InterfaceType >(InName, EDatasmithElementType::CustomActor | InChildType)"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "RegisterReferenceProxy(Properties, \"Properties\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(ClassOrPathName, \"ClassOrPathName\")"
  },
  {
    "label": "GetClassOrPathName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetClassOrPathName()"
  },
  {
    "label": "SetClassOrPathName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetClassOrPathName(const TCHAR* InClassOrPathName)"
  },
  {
    "label": "GetPropertiesCount()",
    "kind": "Method",
    "detail": "Function (ClassOrPathName = InClassOrPathName ; } int32)",
    "insertText": "GetPropertiesCount()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<IDatasmithKeyValueProperty>&)",
    "insertText": "GetProperty(int32 Index)"
  },
  {
    "label": "GetPropertyByName()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<IDatasmithKeyValueProperty>&)",
    "insertText": "GetPropertyByName(const TCHAR* InName)"
  },
  {
    "label": "View()",
    "kind": "Method",
    "detail": "Function (const int32 Index = Properties .)",
    "insertText": "View().IndexOfByPredicate([InName](const TSharedPtr<IDatasmithKeyValueProperty>& Property){ return Property.IsValid() && FCString::Stricmp(Property->GetName(), InName) == 0; })"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddProperty(const TSharedPtr< IDatasmithKeyValueProperty >& InProperty)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Properties .)",
    "insertText": "Add(InProperty)"
  },
  {
    "label": "RemoveProperty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveProperty(const TSharedPtr< IDatasmithKeyValueProperty >& Property)"
  },
  {
    "label": "Edit()",
    "kind": "Method",
    "detail": "Function (Properties .)",
    "insertText": "Edit().RemoveSingleSwap( Property)"
  },
  {
    "label": "AddPropertyInternal()",
    "kind": "Method",
    "detail": "Function (} protected : int32)",
    "insertText": "AddPropertyInternal(const TCHAR* InKey, EDatasmithKeyValuePropertyType InType, const TCHAR* InValue)"
  },
  {
    "label": "View()",
    "kind": "Method",
    "detail": "Function (const int32 Index = Properties .)",
    "insertText": "View().IndexOfByPredicate([InKey](const TSharedPtr<IDatasmithKeyValueProperty>& Property){ return Property.IsValid() && FCString::Stricmp(Property->GetName(), InKey) == 0; })"
  },
  {
    "label": "FDatasmithKeyValuePropertyImpl()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithKeyValueProperty> Property = MakeShared<)",
    "insertText": "FDatasmithKeyValuePropertyImpl(InKey)"
  },
  {
    "label": "SetPropertyType()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "SetPropertyType(InType)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (Property ->)",
    "insertText": "SetValue(InValue)"
  },
  {
    "label": "FDatasmithLandscapeElementImpl()",
    "kind": "Method",
    "detail": "Function (} return INDEX_NONE ; } private : TReflected<FString> ClassOrPathName ; TDatasmithReferenceArrayProxy<IDatasmithKeyValueProperty> Properties ; } ; class FDatasmithLandscapeElementImpl final : public FDatasmithActorElementImpl<IDatasmithLandscapeElement> { public :)",
    "insertText": "FDatasmithLandscapeElementImpl(const TCHAR* InName) : FDatasmithActorElementImpl(InName, EDatasmithElementType::Landscape)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(100.f, 100.f, 100.f, true)"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReferenceProxy(Material, \"Material\")"
  },
  {
    "label": "RegisterReferenceProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReferenceProxy(Heightmap, \"Heightmap\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(HeightmapFilePath, \"HeightmapFilePath\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(MaterialPathName, \"MaterialPathName\")"
  },
  {
    "label": "SetHeightmap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHeightmap(const TCHAR* InFilePath)"
  },
  {
    "label": "GetHeightmap()",
    "kind": "Method",
    "detail": "Function (HeightmapFilePath = InFilePath ; } const TCHAR*)",
    "insertText": "GetHeightmap()"
  },
  {
    "label": "SetMaterial()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaterial(const TCHAR* InMaterialPathName)"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (MaterialPathName = InMaterialPathName ; } const TCHAR*)",
    "insertText": "GetMaterial()"
  },
  {
    "label": "FDatasmithClothActorElementImpl()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FDatasmithClothActorElementImpl(const TCHAR* InName)"
  },
  {
    "label": "SetCloth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCloth(const TCHAR* InCloth)"
  },
  {
    "label": "GetCloth()",
    "kind": "Method",
    "detail": "Function (Cloth = InCloth ; } const TCHAR*)",
    "insertText": "GetCloth()"
  },
  {
    "label": "FDatasmithEnvironmentElementImpl()",
    "kind": "Method",
    "detail": "Function (} private : TReflected<FString> Cloth ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS class FDatasmithEnvironmentElementImpl : public FDatasmithLightActorElementImpl<IDatasmithEnvironmentElement> { public :)",
    "insertText": "FDatasmithEnvironmentElementImpl(const TCHAR* InName)"
  },
  {
    "label": "GetEnvironmentComp()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetEnvironmentComp()"
  },
  {
    "label": "SetEnvironmentComp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnvironmentComp(const TSharedPtr<IDatasmithCompositeTexture>& InEnvironmentComp)"
  },
  {
    "label": "GetIsIlluminationMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsIlluminationMap()"
  },
  {
    "label": "SetIsIlluminationMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIlluminationMap(bool bInIsIlluminationMap)"
  },
  {
    "label": "FDatasmithTextureElementImpl()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<IDatasmithCompositeTexture> EnvironmentComp ; TReflected<bool> bIsIlluminationMap ; } ; class FDatasmithTextureElementImpl : public FDatasmithElementImpl<IDatasmithTextureElement> { public :)",
    "insertText": "FDatasmithTextureElementImpl(const TCHAR* InName)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(const uint8* InData, uint32 InDataSize, EDatasmithTextureFormat InFormat)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetData(uint32& OutDataSize, EDatasmithTextureFormat& OutFormat)"
  },
  {
    "label": "GetTextureMode()",
    "kind": "Method",
    "detail": "Function (FileHash = Hash ; } EDatasmithTextureMode)",
    "insertText": "GetTextureMode()"
  },
  {
    "label": "SetTextureMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureMode(EDatasmithTextureMode InMode)"
  },
  {
    "label": "GetTextureFilter()",
    "kind": "Method",
    "detail": "Function (EDatasmithTextureFilter)",
    "insertText": "GetTextureFilter()"
  },
  {
    "label": "SetTextureFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureFilter(EDatasmithTextureFilter InFilter)"
  },
  {
    "label": "GetTextureAddressX()",
    "kind": "Method",
    "detail": "Function (EDatasmithTextureAddress)",
    "insertText": "GetTextureAddressX()"
  },
  {
    "label": "SetTextureAddressX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureAddressX(EDatasmithTextureAddress InMode)"
  },
  {
    "label": "GetTextureAddressY()",
    "kind": "Method",
    "detail": "Function (EDatasmithTextureAddress)",
    "insertText": "GetTextureAddressY()"
  },
  {
    "label": "SetTextureAddressY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureAddressY(EDatasmithTextureAddress InMode)"
  },
  {
    "label": "GetAllowResize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowResize()"
  },
  {
    "label": "SetAllowResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllowResize(bool bInAllowResize)"
  },
  {
    "label": "GetRGBCurve()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetRGBCurve()"
  },
  {
    "label": "SetRGBCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRGBCurve(float InRGBCurve)"
  },
  {
    "label": "GetSRGB()",
    "kind": "Method",
    "detail": "Function (EDatasmithColorSpace)",
    "insertText": "GetSRGB()"
  },
  {
    "label": "SetSRGB()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSRGB(EDatasmithColorSpace Option)"
  },
  {
    "label": "FDatasmithShaderElementImpl()",
    "kind": "Method",
    "detail": "Function (private : TReflected<FString> File ; TReflected<FMD5Hash> FileHash ; TReflected<float> RGBCurve ; TReflected<EDatasmithColorSpace,uint8> ColorSpace ; TReflected<EDatasmithTextureMode,uint8> TextureMode ; TReflected<EDatasmithTextureFilter,uint8> TextureFilter ; TReflected<EDatasmithTextureAddress,uint8> TextureAddressX ; TReflected<EDatasmithTextureAddress,uint8> TextureAddressY ; TReflected<bool> bAllowResize ; const uint8* Data ; uint32 DataSize ; TReflected<EDatasmithTextureFormat,uint8> TextureFormat ; } ; class FDatasmithShaderElementImpl : public FDatasmithElementImpl<IDatasmithShaderElement> { public :)",
    "insertText": "FDatasmithShaderElementImpl(const TCHAR* InName)"
  },
  {
    "label": "GetIOR()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetIOR()"
  },
  {
    "label": "GetIORk()",
    "kind": "Method",
    "detail": "Function (IOR = InValue ; } double)",
    "insertText": "GetIORk()"
  },
  {
    "label": "GetIORRefra()",
    "kind": "Method",
    "detail": "Function (IORk = InValue ; } double)",
    "insertText": "GetIORRefra()"
  },
  {
    "label": "GetBumpAmount()",
    "kind": "Method",
    "detail": "Function (IORRefra = Value ; } double)",
    "insertText": "GetBumpAmount()"
  },
  {
    "label": "GetTwoSided()",
    "kind": "Method",
    "detail": "Function (BumpAmount = InValue ; } bool)",
    "insertText": "GetTwoSided()"
  },
  {
    "label": "GetDiffuseColor()",
    "kind": "Method",
    "detail": "Function (bTwoSided = InValue ; } FLinearColor)",
    "insertText": "GetDiffuseColor()"
  },
  {
    "label": "GetDiffuseTexture()",
    "kind": "Method",
    "detail": "Function (DiffuseColor = InValue ; } const TCHAR*)",
    "insertText": "GetDiffuseTexture()"
  },
  {
    "label": "GetDiffTextureSampler()",
    "kind": "Method",
    "detail": "Function (DiffuseTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetDiffTextureSampler()"
  },
  {
    "label": "GetDiffuseComp()",
    "kind": "Method",
    "detail": "Function (DiffSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetDiffuseComp()"
  },
  {
    "label": "GetReflectanceColor()",
    "kind": "Method",
    "detail": "Function (DiffuseComp = InValue ; } FLinearColor)",
    "insertText": "GetReflectanceColor()"
  },
  {
    "label": "GetReflectanceTexture()",
    "kind": "Method",
    "detail": "Function (ReflectanceColor = InValue ; } const TCHAR*)",
    "insertText": "GetReflectanceTexture()"
  },
  {
    "label": "GetRefleTextureSampler()",
    "kind": "Method",
    "detail": "Function (ReflectanceTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetRefleTextureSampler()"
  },
  {
    "label": "GetRefleComp()",
    "kind": "Method",
    "detail": "Function (RefleSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetRefleComp()"
  },
  {
    "label": "GetRoughness()",
    "kind": "Method",
    "detail": "Function (RefleComp = InValue ; } double)",
    "insertText": "GetRoughness()"
  },
  {
    "label": "GetRoughnessTexture()",
    "kind": "Method",
    "detail": "Function (Roughness = InValue ; } const TCHAR*)",
    "insertText": "GetRoughnessTexture()"
  },
  {
    "label": "GetRoughnessComp()",
    "kind": "Method",
    "detail": "Function (RoughnessTexture = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetRoughnessComp()"
  },
  {
    "label": "GetRoughTextureSampler()",
    "kind": "Method",
    "detail": "Function (RoughnessComp = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetRoughTextureSampler()"
  },
  {
    "label": "GetNormalTexture()",
    "kind": "Method",
    "detail": "Function (RoughSampler = InValue ; } const TCHAR*)",
    "insertText": "GetNormalTexture()"
  },
  {
    "label": "GetNormalTextureSampler()",
    "kind": "Method",
    "detail": "Function (NormalTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetNormalTextureSampler()"
  },
  {
    "label": "GetNormalComp()",
    "kind": "Method",
    "detail": "Function (NormalSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetNormalComp()"
  },
  {
    "label": "GetBumpTexture()",
    "kind": "Method",
    "detail": "Function (NormalComp = InValue ; } const TCHAR*)",
    "insertText": "GetBumpTexture()"
  },
  {
    "label": "GetBumpTextureSampler()",
    "kind": "Method",
    "detail": "Function (BumpTexture = Value ; } FDatasmithTextureSampler)",
    "insertText": "GetBumpTextureSampler()"
  },
  {
    "label": "GetBumpComp()",
    "kind": "Method",
    "detail": "Function (BumpSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetBumpComp()"
  },
  {
    "label": "GetTransparencyColor()",
    "kind": "Method",
    "detail": "Function (BumpComp = InValue ; } FLinearColor)",
    "insertText": "GetTransparencyColor()"
  },
  {
    "label": "GetTransparencyTexture()",
    "kind": "Method",
    "detail": "Function (TransparencyColor = InValue ; } const TCHAR*)",
    "insertText": "GetTransparencyTexture()"
  },
  {
    "label": "GetTransTextureSampler()",
    "kind": "Method",
    "detail": "Function (TransparencyTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetTransTextureSampler()"
  },
  {
    "label": "GetTransComp()",
    "kind": "Method",
    "detail": "Function (TransSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetTransComp()"
  },
  {
    "label": "GetMaskTexture()",
    "kind": "Method",
    "detail": "Function (TransComp = InValue ; } const TCHAR*)",
    "insertText": "GetMaskTexture()"
  },
  {
    "label": "GetMaskTextureSampler()",
    "kind": "Method",
    "detail": "Function (MaskTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetMaskTextureSampler()"
  },
  {
    "label": "GetMaskComp()",
    "kind": "Method",
    "detail": "Function (MaskSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetMaskComp()"
  },
  {
    "label": "GetMetal()",
    "kind": "Method",
    "detail": "Function (MaskComp = InValue ; } double)",
    "insertText": "GetMetal()"
  },
  {
    "label": "GetMetalTexture()",
    "kind": "Method",
    "detail": "Function (Metal = InValue ; } const TCHAR*)",
    "insertText": "GetMetalTexture()"
  },
  {
    "label": "GetMetalTextureSampler()",
    "kind": "Method",
    "detail": "Function (MetalTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetMetalTextureSampler()"
  },
  {
    "label": "GetMetalComp()",
    "kind": "Method",
    "detail": "Function (MetalSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetMetalComp()"
  },
  {
    "label": "GetEmitTexture()",
    "kind": "Method",
    "detail": "Function (MetalComp = Value ; } const TCHAR*)",
    "insertText": "GetEmitTexture()"
  },
  {
    "label": "GetEmitTextureSampler()",
    "kind": "Method",
    "detail": "Function (EmitTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetEmitTextureSampler()"
  },
  {
    "label": "GetEmitColor()",
    "kind": "Method",
    "detail": "Function (EmitSampler = InValue ; } FLinearColor)",
    "insertText": "GetEmitColor()"
  },
  {
    "label": "GetEmitTemperature()",
    "kind": "Method",
    "detail": "Function (EmitColor = InValue ; } double)",
    "insertText": "GetEmitTemperature()"
  },
  {
    "label": "GetEmitPower()",
    "kind": "Method",
    "detail": "Function (EmitTemperature = InValue ; } double)",
    "insertText": "GetEmitPower()"
  },
  {
    "label": "GetEmitComp()",
    "kind": "Method",
    "detail": "Function (EmitPower = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetEmitComp()"
  },
  {
    "label": "GetLightOnly()",
    "kind": "Method",
    "detail": "Function (EmitComp = InValue ; } bool)",
    "insertText": "GetLightOnly()"
  },
  {
    "label": "GetWeightColor()",
    "kind": "Method",
    "detail": "Function (bLightOnly = InValue ; } FLinearColor)",
    "insertText": "GetWeightColor()"
  },
  {
    "label": "GetWeightTexture()",
    "kind": "Method",
    "detail": "Function (WeightColor = InValue ; } const TCHAR*)",
    "insertText": "GetWeightTexture()"
  },
  {
    "label": "GetWeightTextureSampler()",
    "kind": "Method",
    "detail": "Function (WeightTexture = InValue ; } FDatasmithTextureSampler)",
    "insertText": "GetWeightTextureSampler()"
  },
  {
    "label": "GetWeightComp()",
    "kind": "Method",
    "detail": "Function (WeightSampler = InValue ; } TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetWeightComp()"
  },
  {
    "label": "GetWeightValue()",
    "kind": "Method",
    "detail": "Function (WeightComp = InValue ; } double)",
    "insertText": "GetWeightValue()"
  },
  {
    "label": "GetBlendMode()",
    "kind": "Method",
    "detail": "Function (WeightValue = InValue ; } EDatasmithBlendMode)",
    "insertText": "GetBlendMode()"
  },
  {
    "label": "GetIsStackedLayer()",
    "kind": "Method",
    "detail": "Function (BlendMode = InValue ; } bool)",
    "insertText": "GetIsStackedLayer()"
  },
  {
    "label": "GetShaderUsage()",
    "kind": "Method",
    "detail": "Function (bIsStackedLayer = InValue ; } const EDatasmithShaderUsage)",
    "insertText": "GetShaderUsage()"
  },
  {
    "label": "GetUseEmissiveForDynamicAreaLighting()",
    "kind": "Method",
    "detail": "Function (ShaderUsage = InShaderUsage ; } ; const bool)",
    "insertText": "GetUseEmissiveForDynamicAreaLighting()"
  },
  {
    "label": "FDatasmithBaseMaterialElementImpl()",
    "kind": "Method",
    "detail": "Function (bUseEmissiveForDynamicAreaLighting = InUseEmissiveForDynamicAreaLighting ; } ; private : double IOR ; double IORk ; double IORRefra ; double BumpAmount ; bool bTwoSided ; FLinearColor DiffuseColor ; FString DiffuseTexture ; FDatasmithTextureSampler DiffSampler ; TSharedPtr<IDatasmithCompositeTexture> DiffuseComp ; FLinearColor ReflectanceColor ; FString ReflectanceTexture ; FDatasmithTextureSampler RefleSampler ; TSharedPtr<IDatasmithCompositeTexture> RefleComp ; double Roughness ; FString RoughnessTexture ; FDatasmithTextureSampler RoughSampler ; TSharedPtr<IDatasmithCompositeTexture> RoughnessComp ; FString NormalTexture ; FDatasmithTextureSampler NormalSampler ; TSharedPtr<IDatasmithCompositeTexture> NormalComp ; FString BumpTexture ; FDatasmithTextureSampler BumpSampler ; TSharedPtr<IDatasmithCompositeTexture> BumpComp ; FLinearColor TransparencyColor ; FString TransparencyTexture ; FDatasmithTextureSampler TransSampler ; TSharedPtr<IDatasmithCompositeTexture> TransComp ; FString MaskTexture ; FDatasmithTextureSampler MaskSampler ; TSharedPtr<IDatasmithCompositeTexture> MaskComp ; FString DisplaceTexture ; FDatasmithTextureSampler DisplaceSampler ; double Displace ; double DisplaceSubDivision ; TSharedPtr<IDatasmithCompositeTexture> DisplaceComp ; double Metal ; FString MetalTexture ; FDatasmithTextureSampler MetalSampler ; TSharedPtr<IDatasmithCompositeTexture> MetalComp ; FString EmitTexture ; FDatasmithTextureSampler EmitSampler ; FLinearColor EmitColor ; double EmitTemperature ; double EmitPower ; TSharedPtr<IDatasmithCompositeTexture> EmitComp ; bool bLightOnly ; FLinearColor WeightColor ; FString WeightTexture ; FDatasmithTextureSampler WeightSampler ; TSharedPtr<IDatasmithCompositeTexture> WeightComp ; double WeightValue ; EDatasmithBlendMode BlendMode ; bool bIsStackedLayer ; EDatasmithShaderUsage ShaderUsage ; bool bUseEmissiveForDynamicAreaLighting ; } ; template<InterfaceType> class FDatasmithBaseMaterialElementImpl : public FDatasmithElementImpl<InterfaceType> { public :)",
    "insertText": "FDatasmithBaseMaterialElementImpl(const TCHAR* InName, EDatasmithElementType ChildType)"
  },
  {
    "label": "FDatasmithBaseMaterialElementImpl()",
    "kind": "Method",
    "detail": "Function (} ; template<T> FDatasmithBaseMaterialElementImpl<T)",
    "insertText": "FDatasmithBaseMaterialElementImpl(const TCHAR* InName, EDatasmithElementType ChildType) : FDatasmithElementImpl<T>(InName, EDatasmithElementType::BaseMaterial | ChildType)"
  },
  {
    "label": "FDatasmithMaterialElementImpl()",
    "kind": "Method",
    "detail": "Function (} class FDatasmithMaterialElementImpl : public FDatasmithBaseMaterialElementImpl<IDatasmithMaterialElement> { public :)",
    "insertText": "FDatasmithMaterialElementImpl(const TCHAR* InName)"
  },
  {
    "label": "IsSingleShaderMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSingleShaderMaterial()"
  },
  {
    "label": "IsClearCoatMaterial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClearCoatMaterial()"
  },
  {
    "label": "AddShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddShader(const TSharedPtr< IDatasmithShaderElement >& InShader)"
  },
  {
    "label": "GetShadersCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetShadersCount()"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithShaderElement>&)",
    "insertText": "GetShader(int32 InIndex)"
  },
  {
    "label": "FDatasmithMaterialIntanceElementImpl()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<IDatasmithShaderElement>> Shaders ; } ; class FDatasmithMaterialIntanceElementImpl : public FDatasmithBaseMaterialElementImpl<IDatasmithMaterialInstanceElement> { public :)",
    "insertText": "FDatasmithMaterialIntanceElementImpl(const TCHAR* InName)"
  },
  {
    "label": "GetMaterialType()",
    "kind": "Method",
    "detail": "Function (EDatasmithReferenceMaterialType)",
    "insertText": "GetMaterialType()"
  },
  {
    "label": "GetQuality()",
    "kind": "Method",
    "detail": "Function (MaterialType = InType ; } EDatasmithReferenceMaterialQuality)",
    "insertText": "GetQuality()"
  },
  {
    "label": "GetCustomMaterialPathName()",
    "kind": "Method",
    "detail": "Function (Quality = InQuality ; } const TCHAR*)",
    "insertText": "GetCustomMaterialPathName()"
  },
  {
    "label": "SetCustomMaterialPathName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCustomMaterialPathName(const TCHAR* InPathName)"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<IDatasmithKeyValueProperty>&)",
    "insertText": "GetProperty(int32 InIndex)"
  },
  {
    "label": "FDatasmithDecalMaterialElementImpl()",
    "kind": "Method",
    "detail": "Function (private : TDatasmithReferenceArrayProxy<IDatasmithKeyValueProperty> Properties ; TReflected<EDatasmithReferenceMaterialType,uint8> MaterialType ; TReflected<EDatasmithReferenceMaterialQuality,uint8> Quality ; TReflected<FString> CustomMaterialPathName ; } ; class FDatasmithDecalMaterialElementImpl : public FDatasmithBaseMaterialElementImpl<IDatasmithDecalMaterialElement> { public :)",
    "insertText": "FDatasmithDecalMaterialElementImpl(const TCHAR* InName) : FDatasmithBaseMaterialElementImpl(InName, EDatasmithElementType::DecalMaterial)"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(DiffuseTexturePathName, \"DiffuseTexturePathName\")"
  },
  {
    "label": "RegisterParameter()",
    "kind": "Method",
    "detail": "Function (Store .)",
    "insertText": "RegisterParameter(NormalTexturePathName, \"NormalTexturePathName\")"
  },
  {
    "label": "GetDiffuseTexturePathName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDiffuseTexturePathName()"
  },
  {
    "label": "SetDiffuseTexturePathName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDiffuseTexturePathName(const TCHAR* InPathName)"
  },
  {
    "label": "GetNormalTexturePathName()",
    "kind": "Method",
    "detail": "Function (DiffuseTexturePathName = InPathName ; } const TCHAR*)",
    "insertText": "GetNormalTexturePathName()"
  },
  {
    "label": "SetNormalTexturePathName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNormalTexturePathName(const TCHAR* InPathName)"
  },
  {
    "label": "FDatasmithCompositeSurface()",
    "kind": "Method",
    "detail": "Function (NormalTexturePathName = InPathName ; } private : TReflected<FString> DiffuseTexturePathName ; TReflected<FString> NormalTexturePathName ; } ; class FDatasmithCompositeSurface { public :)",
    "insertText": "FDatasmithCompositeSurface(const TSharedPtr<IDatasmithCompositeTexture>& SubComp)"
  },
  {
    "label": "FDatasmithCompositeSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDatasmithCompositeSurface(const TCHAR* InTexture, FDatasmithTextureSampler InTexUV)"
  },
  {
    "label": "FDatasmithCompositeSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDatasmithCompositeSurface(const FLinearColor& InColor)"
  },
  {
    "label": "GetUseTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseTexture()"
  },
  {
    "label": "GetUseColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseColor()"
  },
  {
    "label": "GetUseComposite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseComposite()"
  },
  {
    "label": "GetParamTextureSampler()",
    "kind": "Method",
    "detail": "Function (FDatasmithTextureSampler&)",
    "insertText": "GetParamTextureSampler()"
  },
  {
    "label": "GetParamTexture()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetParamTexture()"
  },
  {
    "label": "SetParamTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParamTexture(const TCHAR* InTexture)"
  },
  {
    "label": "GetParamColor()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetParamColor()"
  },
  {
    "label": "GetParamSubComposite()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetParamSubComposite()"
  },
  {
    "label": "FDatasmithCompositeTextureImpl()",
    "kind": "Method",
    "detail": "Function (private : FDatasmithTextureSampler ParamSampler ; FString ParamTextures ; FLinearColor ParamColor ; TSharedPtr<IDatasmithCompositeTexture> ParamSubComposite ; bool bParamUseTexture ; } ; class FDatasmithCompositeTextureImpl : public IDatasmithCompositeTexture { public :)",
    "insertText": "FDatasmithCompositeTextureImpl()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetMode()",
    "kind": "Method",
    "detail": "Function (EDatasmithCompMode)",
    "insertText": "GetMode()"
  },
  {
    "label": "GetParamSurfacesCount()",
    "kind": "Method",
    "detail": "Function (CompMode = InMode ; } int32)",
    "insertText": "GetParamSurfacesCount()"
  },
  {
    "label": "GetUseTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetUseTexture(int32 InIndex)"
  },
  {
    "label": "GetParamTexture()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetParamTexture(int32 InIndex)"
  },
  {
    "label": "SetParamTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParamTexture(int32 InIndex, const TCHAR* InTexture)"
  },
  {
    "label": "GetParamTextureSampler()",
    "kind": "Method",
    "detail": "Function (FDatasmithTextureSampler&)",
    "insertText": "GetParamTextureSampler(int32 InIndex)"
  },
  {
    "label": "GetUseColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseColor(int32 InIndex)"
  },
  {
    "label": "GetParamColor()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetParamColor(int32 InIndex)"
  },
  {
    "label": "GetUseComposite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseComposite(int32 InIndex)"
  },
  {
    "label": "GetParamVal1Count()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetParamVal1Count()"
  },
  {
    "label": "GetParamVal1()",
    "kind": "Method",
    "detail": "Function (} ParamVal)",
    "insertText": "GetParamVal1(int32 InIndex)"
  },
  {
    "label": "AddParamVal1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParamVal1(ParamVal InParamVal)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParamVal1 .)",
    "insertText": "Add(ParamValImpl( InParamVal.Key, InParamVal.Value ))"
  },
  {
    "label": "GetParamVal2Count()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetParamVal2Count()"
  },
  {
    "label": "GetParamVal2()",
    "kind": "Method",
    "detail": "Function (} ParamVal)",
    "insertText": "GetParamVal2(int32 InIndex)"
  },
  {
    "label": "AddParamVal2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddParamVal2(ParamVal InParamVal)"
  },
  {
    "label": "GetParamMaskSurfacesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetParamMaskSurfacesCount()"
  },
  {
    "label": "GetParamMask()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetParamMask(int32 InIndex)"
  },
  {
    "label": "GetParamMaskColor()",
    "kind": "Method",
    "detail": "Function (const FLinearColor&)",
    "insertText": "GetParamMaskColor(int32 i)"
  },
  {
    "label": "GetMaskUseComposite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetMaskUseComposite(int32 InIndex)"
  },
  {
    "label": "AddMaskSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaskSurface(const TCHAR* InMask, const FDatasmithTextureSampler InMaskSampler)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParamMaskSurfaces .)",
    "insertText": "Add(FDatasmithCompositeSurface( InMask, InMaskSampler ))"
  },
  {
    "label": "AddMaskSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMaskSurface(const FLinearColor& InColor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParamMaskSurfaces .)",
    "insertText": "Add(FDatasmithCompositeSurface( InColor ))"
  },
  {
    "label": "GetParamMaskTextureSampler()",
    "kind": "Method",
    "detail": "Function (} FDatasmithTextureSampler)",
    "insertText": "GetParamMaskTextureSampler(int32 InIndex)"
  },
  {
    "label": "GetParamSubComposite()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetParamSubComposite(int32 InIndex)"
  },
  {
    "label": "AddSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSurface(const TSharedPtr<IDatasmithCompositeTexture>& SubComp)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParamSurfaces .)",
    "insertText": "Add(FDatasmithCompositeSurface( SubComp ))"
  },
  {
    "label": "GetParamMaskSubComposite()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithCompositeTexture>&)",
    "insertText": "GetParamMaskSubComposite(int32 InIndex)"
  },
  {
    "label": "AddMaskSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaskSurface(const TSharedPtr<IDatasmithCompositeTexture>& InMaskSubComp)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParamMaskSurfaces .)",
    "insertText": "Add(FDatasmithCompositeSurface( InMaskSubComp ))"
  },
  {
    "label": "GetBaseTextureName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetBaseTextureName()"
  },
  {
    "label": "AddSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSurface(const TCHAR* InTexture, FDatasmithTextureSampler InTexUV)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParamSurfaces .)",
    "insertText": "Add(FDatasmithCompositeSurface( InTexture, InTexUV ))"
  },
  {
    "label": "AddSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSurface(const FLinearColor& InColor)"
  },
  {
    "label": "ClearSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearSurface()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ParamSurfaces .)",
    "insertText": "Empty()"
  },
  {
    "label": "FDatasmithMetaDataElementImpl()",
    "kind": "Method",
    "detail": "Function (} private : TArray<FDatasmithCompositeSurface> ParamSurfaces ; TArray<FDatasmithCompositeSurface> ParamMaskSurfaces ; typedef TPair<float,FString> ParamValImpl ; TArray<ParamValImpl> ParamVal1 ; TArray<ParamValImpl> ParamVal2 ; EDatasmithCompMode CompMode ; FString BaseTexName ; FString BaseColName ; FString BaseValName ; FString BaseCompName ; } ; class FDatasmithMetaDataElementImpl : public FDatasmithElementImpl<IDatasmithMetaDataElement> { public :)",
    "insertText": "FDatasmithMetaDataElementImpl(const TCHAR* InName)"
  },
  {
    "label": "GetAssociatedElement()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IDatasmithElement>&)",
    "insertText": "GetAssociatedElement()"
  },
  {
    "label": "GetProperty()",
    "kind": "Method",
    "detail": "Function (} const TSharedPtr<IDatasmithKeyValueProperty>&)",
    "insertText": "GetProperty(int32 i)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddProperty(const TSharedPtr< IDatasmithKeyValueProperty >& Property)"
  },
  {
    "label": "RemoveProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveProperty(const TSharedPtr<IDatasmithKeyValueProperty>& Property)"
  },
  {
    "label": "ResetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetProperties()"
  },
  {
    "label": "FDatasmithDecalActorElementImpl()",
    "kind": "Method",
    "detail": "Function (private : TDatasmithReferenceProxy<IDatasmithElement> AssociatedElement ; TDatasmithReferenceArrayProxy<IDatasmithKeyValueProperty> Properties ; } ; class FDatasmithDecalActorElementImpl : public FDatasmithCustomActorElementImpl<IDatasmithDecalActorElement> { public :)",
    "insertText": "FDatasmithDecalActorElementImpl(const TCHAR* InName)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDimensions(const FVector& InDimensions)"
  },
  {
    "label": "GetDecalMaterialPathName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDecalMaterialPathName()"
  },
  {
    "label": "SetDecalMaterialPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDecalMaterialPathName(const TCHAR* InMaterialPathName)"
  },
  {
    "label": "GetSortOrder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSortOrder()"
  },
  {
    "label": "SetSortOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSortOrder(int32 InSortOrder)"
  },
  {
    "label": "FDatasmithSceneImpl()",
    "kind": "Method",
    "detail": "Function (private : int32 SortOrderPropertyIndex ; int32 DimensionsPropertyIndex ; int32 MaterialPropertyIndex ; } ; PRAGMA_DISABLE_DEPRECATION_WARNINGS class FDatasmithSceneImpl : public FDatasmithElementImpl<IDatasmithScene> PRAGMA_ENABLE_DEPRECATION_WARNINGS { public :)",
    "insertText": "FDatasmithSceneImpl(const TCHAR* InName)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetHost()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetHost()"
  },
  {
    "label": "SetHost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHost(const TCHAR* InHostname)"
  },
  {
    "label": "GetExporterVersion()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetExporterVersion()"
  },
  {
    "label": "SetExporterVersion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExporterVersion(const TCHAR* InVersion)"
  },
  {
    "label": "GetExporterSDKVersion()",
    "kind": "Method",
    "detail": "Function (ExporterVersion = InVersion ; } const TCHAR*)",
    "insertText": "GetExporterSDKVersion()"
  },
  {
    "label": "SetExporterSDKVersion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetExporterSDKVersion(const TCHAR* InVersion)"
  },
  {
    "label": "GetVendor()",
    "kind": "Method",
    "detail": "Function (ExporterSDKVersion = InVersion ; } const TCHAR*)",
    "insertText": "GetVendor()"
  },
  {
    "label": "SetVendor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVendor(const TCHAR* InVendor)"
  },
  {
    "label": "GetProductName()",
    "kind": "Method",
    "detail": "Function (Vendor = InVendor ; } const TCHAR*)",
    "insertText": "GetProductName()"
  },
  {
    "label": "SetProductName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProductName(const TCHAR* InProductName)"
  },
  {
    "label": "GetProductVersion()",
    "kind": "Method",
    "detail": "Function (ProductName = InProductName ; } const TCHAR*)",
    "insertText": "GetProductVersion()"
  },
  {
    "label": "SetProductVersion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetProductVersion(const TCHAR* InProductVersion)"
  },
  {
    "label": "GetResourcePath()",
    "kind": "Method",
    "detail": "Function (ProductVersion = InProductVersion ; } const TCHAR*)",
    "insertText": "GetResourcePath()"
  },
  {
    "label": "SetResourcePath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetResourcePath(const TCHAR* InResourcePath)"
  },
  {
    "label": "GetUserID()",
    "kind": "Method",
    "detail": "Function (ResourcePath = InResourcePath ; } const TCHAR*)",
    "insertText": "GetUserID()"
  },
  {
    "label": "SetUserID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUserID(const TCHAR* InUserID)"
  },
  {
    "label": "GetUserOS()",
    "kind": "Method",
    "detail": "Function (UserID = InUserID ; } const TCHAR*)",
    "insertText": "GetUserOS()"
  },
  {
    "label": "SetUserOS()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUserOS(const TCHAR* InUserOS)"
  },
  {
    "label": "GetGeolocation()",
    "kind": "Method",
    "detail": "Function (UserOS = InUserOS ; } FVector)",
    "insertText": "GetGeolocation()"
  },
  {
    "label": "SetGeolocationLongitude()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeolocationLongitude(double InLongitude)"
  },
  {
    "label": "SetGeolocationElevation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGeolocationElevation(double InElevation)"
  },
  {
    "label": "GetExportDuration()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetExportDuration()"
  },
  {
    "label": "AddMesh()",
    "kind": "Method",
    "detail": "Function (ExportDuration = InExportDuration ; } void)",
    "insertText": "AddMesh(const TSharedPtr< IDatasmithMeshElement >& InMesh)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Meshes .)",
    "insertText": "Add(InMesh)"
  },
  {
    "label": "GetMeshesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMeshesCount()"
  },
  {
    "label": "GetMesh()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithMeshElement>)",
    "insertText": "GetMesh(int32 InIndex)"
  },
  {
    "label": "RemoveMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMesh(const TSharedPtr< IDatasmithMeshElement >& InMesh)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Meshes .)",
    "insertText": "Remove(InMesh)"
  },
  {
    "label": "RemoveMeshAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveMeshAt(int32 InIndex)"
  },
  {
    "label": "EmptyMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyMeshes()"
  },
  {
    "label": "AddActor()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "AddActor(const TSharedPtr< IDatasmithActorElement >& InActor)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Actors .)",
    "insertText": "Add(InActor)"
  },
  {
    "label": "GetActorsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetActorsCount()"
  },
  {
    "label": "GetActor()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithActorElement>)",
    "insertText": "GetActor(int32 InIndex)"
  },
  {
    "label": "RemoveActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActor(const TSharedPtr< IDatasmithActorElement >& InActor, EDatasmithActorRemovalRule RemoveRule)"
  },
  {
    "label": "RemoveActorAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorAt(int32 InIndex, EDatasmithActorRemovalRule RemoveRule)"
  },
  {
    "label": "AddMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMaterial(const TSharedPtr< IDatasmithBaseMaterialElement >& InMaterial)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Add(InMaterial)"
  },
  {
    "label": "GetMaterialsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaterialsCount()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithBaseMaterialElement>)",
    "insertText": "GetMaterial(int32 InIndex)"
  },
  {
    "label": "RemoveMaterial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMaterial(const TSharedPtr< IDatasmithBaseMaterialElement >& InMaterial)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Materials .)",
    "insertText": "Remove(InMaterial)"
  },
  {
    "label": "RemoveMaterialAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveMaterialAt(int32 InIndex)"
  },
  {
    "label": "EmptyMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyMaterials()"
  },
  {
    "label": "AddTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTexture(const TSharedPtr< IDatasmithTextureElement >& InTexture)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Textures .)",
    "insertText": "Add(InTexture)"
  },
  {
    "label": "GetTexturesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTexturesCount()"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithTextureElement>)",
    "insertText": "GetTexture(int32 InIndex)"
  },
  {
    "label": "RemoveTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTexture(const TSharedPtr< IDatasmithTextureElement >& InTexture)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Textures .)",
    "insertText": "Remove(InTexture)"
  },
  {
    "label": "RemoveTextureAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveTextureAt(int32 InIndex)"
  },
  {
    "label": "EmptyTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyTextures()"
  },
  {
    "label": "GetUsePhysicalSky()",
    "kind": "Method",
    "detail": "Function (bUseSky = bInUsePhysicalSky ; } bool)",
    "insertText": "GetUsePhysicalSky()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaData .)",
    "insertText": "Add(InMetaData)"
  },
  {
    "label": "GetElementToMetaDataCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementToMetaDataCache().Add(InMetaData->GetAssociatedElement(), InMetaData)"
  },
  {
    "label": "GetMetaDataCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMetaDataCount()"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithMetaDataElement>)",
    "insertText": "GetMetaData(int32 InIndex)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IDatasmithMetaDataElement>)",
    "insertText": "GetMetaData(const TSharedPtr<IDatasmithElement>& Element)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(const TSharedPtr<IDatasmithMetaDataElement>& Element)"
  },
  {
    "label": "RemoveMetaDataAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaDataAt(int32 InIndex)"
  },
  {
    "label": "AddLevelSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelSequence(const TSharedRef< IDatasmithLevelSequenceElement >& InSequence)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LevelSequences .)",
    "insertText": "Add(InSequence)"
  },
  {
    "label": "GetLevelSequencesCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLevelSequencesCount()"
  },
  {
    "label": "GetLevelSequence()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithLevelSequenceElement>)",
    "insertText": "GetLevelSequence(int32 InIndex)"
  },
  {
    "label": "RemoveLevelSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelSequence(const TSharedRef< IDatasmithLevelSequenceElement >& InSequence)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (LevelSequences .)",
    "insertText": "Remove(InSequence)"
  },
  {
    "label": "RemoveLevelSequenceAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveLevelSequenceAt(int32 InIndex)"
  },
  {
    "label": "AddLevelVariantSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelVariantSets(const TSharedPtr< IDatasmithLevelVariantSetsElement >& InLevelVariantSets)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (LevelVariantSets .)",
    "insertText": "Add(InLevelVariantSets)"
  },
  {
    "label": "GetLevelVariantSetsCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetLevelVariantSetsCount()"
  },
  {
    "label": "GetLevelVariantSets()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDatasmithLevelVariantSetsElement>)",
    "insertText": "GetLevelVariantSets(int32 InIndex)"
  },
  {
    "label": "RemoveLevelVariantSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelVariantSets(const TSharedPtr< IDatasmithLevelVariantSetsElement >& InLevelVariantSets)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (LevelVariantSets .)",
    "insertText": "Remove(InLevelVariantSets)"
  },
  {
    "label": "RemoveLevelVariantSetsAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveLevelVariantSetsAt(int32 InIndex)"
  },
  {
    "label": "AttachActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachActor(const TSharedPtr< IDatasmithActorElement >& NewParent, const TSharedPtr< IDatasmithActorElement >& Child, EDatasmithActorAttachmentRule AttachmentRule)"
  },
  {
    "label": "AttachActorToSceneRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachActorToSceneRoot(const TSharedPtr< IDatasmithActorElement >& Child, EDatasmithActorAttachmentRule AttachmentRule)"
  },
  {
    "label": "GetElementToMetaDataCache()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS TDatasmithReferenceArrayProxy<IDatasmithBaseMaterialElement> Materials ; TDatasmithReferenceArrayProxy<IDatasmithTextureElement> Textures ; TDatasmithReferenceArrayProxy<IDatasmithMetaDataElement> MetaData ; TDatasmithReferenceArrayProxy<IDatasmithLevelSequenceElement> LevelSequences ; TDatasmithReferenceArrayProxy<IDatasmithLevelVariantSetsElement> LevelVariantSets ; TDatasmithReferenceProxy<IDatasmithPostProcessElement> PostProcess ; TReflected<FString> Hostname ; TReflected<FString> ExporterVersion ; TReflected<FString> ExporterSDKVersion ; TReflected<FString> Vendor ; TReflected<FString> ProductName ; TReflected<FString> ProductVersion ; TReflected<FString> UserID ; TReflected<FString> UserOS ; TReflected<FVector> Geolocation ; TReflected<FString> ResourcePath ; TReflected<uint32> ExportDuration ; TReflected<bool> bUseSky ; TMap<TSharedPtr<IDatasmithElement>,TSharedPtr<IDatasmithMetaDataElement>> ElementToMetaDataMap ; TMap<TSharedPtr<IDatasmithElement>,TSharedPtr<IDatasmithMetaDataElement>>&)",
    "insertText": "GetElementToMetaDataCache()"
  }
]