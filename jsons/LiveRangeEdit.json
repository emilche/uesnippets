[
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "MachineBlockFrequencyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBlockFrequencyInfo"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "VirtRegMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtRegMap"
  },
  {
    "label": "LiveRangeEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRangeEdit"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "Remat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Remat"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_LIVERANGEEDIT_H # define LLVM_CODEGEN_LIVERANGEEDIT_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / SetVector . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / CodeGen / LiveInterval . h \" # include \" llvm / CodeGen / MachineRegisterInfo . h \" # include \" llvm / Target / TargetMachine . h \" # include \" llvm / Target / TargetSubtargetInfo . h \" namespace llvm { class AliasAnalysis ; class LiveIntervals ; class MachineBlockFrequencyInfo ; class MachineLoopInfo ; class VirtRegMap ; class LiveRangeEdit : private MachineRegisterInfo::Delegate { public : class Delegate { void)",
    "insertText": "anchor()"
  },
  {
    "label": "LRE_WillEraseInstruction()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "LRE_WillEraseInstruction(MachineInstr *MI)"
  },
  {
    "label": "LRE_CanEraseVirtReg()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LRE_CanEraseVirtReg(unsigned)"
  },
  {
    "label": "LRE_DidCloneVirtReg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LRE_DidCloneVirtReg(unsigned New, unsigned Old)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "scanRemattable()",
    "kind": "Method",
    "detail": "Function (} } ; private : LiveInterval* Parent ; SmallVectorImpl<unsigned>& NewRegs ; MachineRegisterInfo& MRI ; LiveIntervals& LIS ; VirtRegMap* VRM ; const TargetInstrInfo& TII ; Delegate* const TheDelegate ; const unsigned FirstNew ; bool ScannedRemattable ; SmallPtrSet<const VNInfo*,4> Remattable ; SmallPtrSet<const VNInfo*,4> Rematted ; void)",
    "insertText": "scanRemattable(AliasAnalysis *aa)"
  },
  {
    "label": "allUsesAvailableAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "allUsesAvailableAt(const MachineInstr *OrigMI, SlotIndex OrigIdx, SlotIndex UseIdx)"
  },
  {
    "label": "foldAsLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "foldAsLoad(LiveInterval *LI, SmallVectorImpl<MachineInstr*> &Dead)"
  },
  {
    "label": "eliminateDeadDef()",
    "kind": "Method",
    "detail": "Function (typedef SetVector<LiveInterval*,SmallVector<LiveInterval*,8>,SmallPtrSet<LiveInterval*,8>> ToShrinkSet ; void)",
    "insertText": "eliminateDeadDef(MachineInstr *MI, ToShrinkSet &ToShrink)"
  },
  {
    "label": "MRI_NoteNewVirtualRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MRI_NoteNewVirtualRegister(unsigned VReg)"
  },
  {
    "label": "useIsKill()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "useIsKill(const LiveInterval &LI, const MachineOperand &MO)"
  },
  {
    "label": "LiveRangeEdit()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LiveRangeEdit(LiveInterval *parent, SmallVectorImpl<unsigned> &newRegs, MachineFunction &MF, LiveIntervals &lis, VirtRegMap *vrm, Delegate *delegate = nullptr) : Parent(parent), NewRegs(newRegs), MRI(MF.getRegInfo()), LIS(lis), VRM(vrm), TII(*MF.getSubtarget().getInstrInfo()), TheDelegate(delegate), FirstNew(newRegs.size()), ScannedRemattable(false)"
  },
  {
    "label": "setDelegate()",
    "kind": "Method",
    "detail": "Function (MRI .)",
    "insertText": "setDelegate(this)"
  },
  {
    "label": "LiveRangeEdit()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "LiveRangeEdit()"
  },
  {
    "label": "resetDelegate()",
    "kind": "Method",
    "detail": "Function (MRI .)",
    "insertText": "resetDelegate(this)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (} LiveInterval&)",
    "insertText": "getParent()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Parent && \"No parent LiveInterval\")"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} typedef SmallVectorImpl<unsigned>::const_iterator iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "get(unsigned idx)"
  },
  {
    "label": "createEmptyIntervalFrom()",
    "kind": "Method",
    "detail": "Function (} LiveInterval&)",
    "insertText": "createEmptyIntervalFrom(unsigned OldReg)"
  },
  {
    "label": "createFrom()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "createFrom(unsigned OldReg)"
  },
  {
    "label": "createEmptyInterval()",
    "kind": "Method",
    "detail": "Function (LiveInterval&)",
    "insertText": "createEmptyInterval()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "create()"
  },
  {
    "label": "anyRematerializable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "anyRematerializable(AliasAnalysis*)"
  },
  {
    "label": "checkRematerializable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkRematerializable(VNInfo *VNI, const MachineInstr *DefMI, AliasAnalysis*)"
  },
  {
    "label": "Remat()",
    "kind": "Method",
    "detail": "Function (struct Remat { VNInfo* ParentVNI ; MachineInstr* OrigMI ;)",
    "insertText": "Remat(VNInfo *ParentVNI) : ParentVNI(ParentVNI), OrigMI(nullptr)"
  },
  {
    "label": "canRematerializeAt()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "canRematerializeAt(Remat &RM, SlotIndex UseIdx, bool cheapAsAMove)"
  },
  {
    "label": "rematerializeAt()",
    "kind": "Method",
    "detail": "Function (SlotIndex)",
    "insertText": "rematerializeAt(MachineBasicBlock &MBB, MachineBasicBlock::iterator MI, unsigned DestReg, const Remat &RM, const TargetRegisterInfo&, bool Late = false)"
  },
  {
    "label": "markRematerialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "markRematerialized(const VNInfo *ParentVNI)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (Rematted .)",
    "insertText": "insert(ParentVNI)"
  },
  {
    "label": "didRematerialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "didRematerialize(const VNInfo *ParentVNI)"
  },
  {
    "label": "eraseVirtReg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "eraseVirtReg(unsigned Reg)"
  },
  {
    "label": "eliminateDeadDefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eliminateDeadDefs(SmallVectorImpl<MachineInstr*> &Dead, ArrayRef<unsigned> RegsBeingSpilled = None)"
  },
  {
    "label": "calculateRegClassAndHint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calculateRegClassAndHint(MachineFunction&, const MachineLoopInfo&, const MachineBlockFrequencyInfo&)"
  }
]