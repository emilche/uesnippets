[
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "MachineBlockFrequencyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineBlockFrequencyInfo"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "VirtRegMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtRegMap"
  },
  {
    "label": "LiveRangeEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRangeEdit"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "Remat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Remat"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "anchor()"
  },
  {
    "label": "scanRemattable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scanRemattable(AliasAnalysis *aa)"
  },
  {
    "label": "foldAsLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "foldAsLoad(LiveInterval *LI, SmallVectorImpl<MachineInstr*> &Dead)"
  },
  {
    "label": "eliminateDeadDef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eliminateDeadDef(MachineInstr *MI, ToShrinkSet &ToShrink)"
  },
  {
    "label": "createFrom()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "createFrom(unsigned OldReg)"
  },
  {
    "label": "anyRematerializable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "anyRematerializable(AliasAnalysis*)"
  },
  {
    "label": "checkRematerializable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "checkRematerializable(VNInfo *VNI, const MachineInstr *DefMI,\n                             AliasAnalysis*)"
  },
  {
    "label": "canRematerializeAt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canRematerializeAt(Remat &RM,\n                          SlotIndex UseIdx,\n                          bool cheapAsAMove)"
  },
  {
    "label": "rematerializeAt()",
    "kind": "Method",
    "detail": "Function (SlotIndex)",
    "insertText": "rematerializeAt(MachineBasicBlock &MBB,\n                            MachineBasicBlock::iterator MI,\n                            unsigned DestReg,\n                            const Remat &RM,\n                            const TargetRegisterInfo&,\n                            bool Late = false)"
  },
  {
    "label": "eraseVirtReg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eraseVirtReg(unsigned Reg)"
  },
  {
    "label": "eliminateDeadDefs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eliminateDeadDefs(SmallVectorImpl<MachineInstr*> &Dead,\n                         ArrayRef<unsigned> RegsBeingSpilled = None)"
  },
  {
    "label": "calculateRegClassAndHint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calculateRegClassAndHint(MachineFunction&,\n                                const MachineLoopInfo&,\n                                const MachineBlockFrequencyInfo&)"
  }
]