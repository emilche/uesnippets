[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "HbrFVarEdit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrFVarEdit"
  },
  {
    "label": "HbrFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrFace"
  },
  {
    "label": "HbrVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrVertex"
  },
  {
    "label": "HbrFVarData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HbrFVarData"
  },
  {
    "label": "HbrFVarData()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_HBRFVARDATA_H # define OPENSUBDIV3_HBRFVARDATA_H # include<cstring> # include<cmath> # include \" . . / version . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { template<class T> class HbrFVarEdit ; template<class T> class HbrFace ; template<class T> class HbrVertex ; template<class T> class HbrFVarData { private :)",
    "insertText": "HbrFVarData() : faceid(0), initialized(0)"
  },
  {
    "label": "HbrFVarData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "HbrFVarData()"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize()"
  },
  {
    "label": "HbrFVarData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HbrFVarData(const HbrFVarData &)"
  },
  {
    "label": "SetFaceID()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "SetFaceID(int id)"
  },
  {
    "label": "GetFaceID()",
    "kind": "Method",
    "detail": "Function (faceid = id ; } int)",
    "insertText": "GetFaceID()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (initialized = 0 ; faceid = 0 ; } bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (initialized = 1 ; } float*)",
    "insertText": "GetData(int item)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(data + startindex, 0, width * sizeof(float))"
  },
  {
    "label": "ClearAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAll(int width)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (initialized = 1 ;)",
    "insertText": "memset(data, 0, width * sizeof(float))"
  },
  {
    "label": "SetWithWeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWithWeight(const HbrFVarData& fvvi, int startindex, int width, float weight)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float* dst = data + startindex ; const float* src = fvvi . data + startindex ;)",
    "insertText": "for(int i = 0; i < width; ++i)"
  },
  {
    "label": "AddWithWeight()",
    "kind": "Method",
    "detail": "Function (* dst + + = weight** src + + ; } } void)",
    "insertText": "AddWithWeight(const HbrFVarData& fvvi, int startindex, int width, float weight)"
  },
  {
    "label": "AddWithWeightAll()",
    "kind": "Method",
    "detail": "Function (* dst + + + = weight** src + + ; } } void)",
    "insertText": "AddWithWeightAll(const HbrFVarData& fvvi, int width, float weight)"
  },
  {
    "label": "CompareAll()",
    "kind": "Method",
    "detail": "Function (* dst + + + = weight** src + + ; } } bool)",
    "insertText": "CompareAll(int width, const float *values, float tolerance=0.0f)"
  },
  {
    "label": "SetAllData()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "SetAllData(int width, const float *values)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (initialized = 1 ;)",
    "insertText": "memcpy(data, values, width * sizeof(float))"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Compare(const HbrFVarData& fvvi, int startindex, int width, float tolerance=0.0f)"
  },
  {
    "label": "ApplyFVarEdit()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "ApplyFVarEdit(const HbrFVarEdit<T>& edit)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (float* dst = data + edit .)",
    "insertText": "GetIndex() + edit.GetOffset()"
  },
  {
    "label": "GetEdit()",
    "kind": "Method",
    "detail": "Function (const float* src = edit .)",
    "insertText": "GetEdit()"
  }
]