[
  {
    "label": "FakePacketTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakePacketTransport"
  },
  {
    "label": "FakePacketTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_FAKE_PACKET_TRANSPORT_H_ # define P2P_BASE_FAKE_PACKET_TRANSPORT_H_ # include<map> # include<string> # include \" p2p / base / packet_transport_internal . h \" # include \" rtc_base / copy_on_write_buffer . h \" namespace rtc { class FakePacketTransport : public PacketTransportInternal { public :)",
    "insertText": "FakePacketTransport(const std::string& transport_name) : transport_name_(transport_name)"
  },
  {
    "label": "FakePacketTransport()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FakePacketTransport()"
  },
  {
    "label": "SetWritable()",
    "kind": "Method",
    "detail": "Function (dest_ -> dest_ = nullptr ; } } void)",
    "insertText": "SetWritable(bool writable)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_writable(writable)"
  },
  {
    "label": "SetReceiving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReceiving(bool receiving)"
  },
  {
    "label": "set_receiving()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_receiving(receiving)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDestination(FakePacketTransport* dest, bool asymmetric)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (dest_ = dest ;)",
    "insertText": "set_writable(true)"
  },
  {
    "label": "SetDestination()",
    "kind": "Method",
    "detail": "Function (dest ->)",
    "insertText": "SetDestination(this, true)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (} } else { dest_ = nullptr ;)",
    "insertText": "set_writable(false)"
  },
  {
    "label": "transport_name()",
    "kind": "Method",
    "detail": "Function (} } const std::string&)",
    "insertText": "transport_name()"
  },
  {
    "label": "SendPacketInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendPacketInternal(packet)"
  },
  {
    "label": "sent_packet()",
    "kind": "Method",
    "detail": "Function (SentPacket)",
    "insertText": "sent_packet(options.packet_id, TimeMillis())"
  },
  {
    "label": "SignalSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalSentPacket(this, sent_packet)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "SetOption(Socket::Option opt, int value)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (options_ [ opt ] = value ; return 0 ; } bool)",
    "insertText": "GetOption(Socket::Option opt, int* value)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto it = options_ .)",
    "insertText": "find(opt)"
  },
  {
    "label": "last_sent_packet()",
    "kind": "Method",
    "detail": "Function (error_ = error ; } const CopyOnWriteBuffer*)",
    "insertText": "last_sent_packet()"
  },
  {
    "label": "SignalNetworkRouteChanged()",
    "kind": "Method",
    "detail": "Function (network_route_ = network_route ;)",
    "insertText": "SignalNetworkRouteChanged(network_route)"
  },
  {
    "label": "set_writable()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "set_writable(bool writable)"
  },
  {
    "label": "SignalReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalReadyToSend(this)"
  },
  {
    "label": "SignalWritableState()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SignalWritableState(this)"
  },
  {
    "label": "set_receiving()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_receiving(bool receiving)"
  },
  {
    "label": "SendPacketInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendPacketInternal(const CopyOnWriteBuffer& packet)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (last_sent_packet_ = packet ;)",
    "insertText": "if(dest_)"
  },
  {
    "label": "SignalReadPacket()",
    "kind": "Method",
    "detail": "Function (dest_ ->)",
    "insertText": "SignalReadPacket(dest_, packet.data<char>(), packet.size(), TimeMicros(), 0)"
  }
]