[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "FCultureEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCultureEntry"
  },
  {
    "label": "INTERNATIONALIZATIONSETTINGS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INTERNATIONALIZATIONSETTINGS_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCultureEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" Framework / SlateDelegates . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / CulturePointer . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateConstants . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STreeView . h \" class FText ; class ITableRow ; struct FCultureEntry { FCulturePtr Culture ; TArray<TSharedPtr<FCultureEntry>> Children ; bool IsSelectable ; bool AutoExpand = false ;)",
    "insertText": "FCultureEntry(const FCulturePtr& InCulture, const bool InIsSelectable = true) : Culture(InCulture) , IsSelectable(InIsSelectable)"
  },
  {
    "label": "FCultureEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCultureEntry(const FCultureEntry& Source) : Culture(Source.Culture) , IsSelectable(Source.IsSelectable)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Reserve(Source.Children.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "Add(MakeShareable( new FCultureEntry(*Child) ))"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (} } } ; class SCulturePicker : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FIsCulturePickable, FCulturePtr)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (typedef TSlateDelegates<FCulturePtr>::FOnSelectionChanged FOnSelectionChanged ; enum class ECultureDisplayFormat { ActiveCultureDisplayName,NativeCultureDisplayName,ActiveAndNativeCultureDisplayName,NativeAndActiveCultureDisplayName,} ; enum class ECulturesViewMode { Hierarchical,Flat,} ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCulturePicker ) : _DisplayNameFormat(ECultureDisplayFormat::ActiveCultureDisplayName) , _ViewMode(ECulturesViewMode::Hierarchical) , _CanSelectNone(false)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnSelectionChanged, OnSelectionChanged ) SLATE_EVENT( FIsCulturePickable, IsCulturePickable ) SLATE_ARGUMENT( FCulturePtr, InitialSelection ) SLATE_ARGUMENT(ECultureDisplayFormat, DisplayNameFormat) SLATE_ARGUMENT(ECulturesViewMode, ViewMode) SLATE_ARGUMENT(bool, CanSelectNone) SLATE_END_ARGS() SCulturePicker() : DisplayNameFormat(ECultureDisplayFormat::ActiveCultureDisplayName) , CanSelectNone(false) , SuppressSelectionCallback(false)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "RequestTreeRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestTreeRefresh()"
  },
  {
    "label": "FindEntryForCulture()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FCultureEntry>)",
    "insertText": "FindEntryForCulture(FCulturePtr Culture)"
  },
  {
    "label": "FindEntryForCultureImpl()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCultureEntry>)",
    "insertText": "FindEntryForCultureImpl(FCulturePtr Culture, const TArray<TSharedPtr<FCultureEntry>>& Entries)"
  },
  {
    "label": "AutoExpandEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoExpandEntries()"
  },
  {
    "label": "AutoExpandEntriesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoExpandEntriesImpl(const TArray<TSharedPtr<FCultureEntry>>& Entries)"
  },
  {
    "label": "BuildStockEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildStockEntries()"
  },
  {
    "label": "RebuildEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildEntries()"
  },
  {
    "label": "OnFilterStringChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterStringChanged(const FText& InFilterString)"
  },
  {
    "label": "OnGenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRow(TSharedPtr<FCultureEntry> Entry, const TSharedRef<STableViewBase>& Table)"
  },
  {
    "label": "OnGetChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildren(TSharedPtr<FCultureEntry> Entry, TArray< TSharedPtr<FCultureEntry> >& Children)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged(TSharedPtr<FCultureEntry> Entry, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "GetCultureDisplayName()",
    "kind": "Method",
    "detail": "Function (private : FString)",
    "insertText": "GetCultureDisplayName(const FCultureRef& Culture, const bool bIsRootItem)"
  }
]