[
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BaseScopedCommandsExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseScopedCommandsExecutor"
  },
  {
    "label": "ScopedReenqueueExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedReenqueueExecutor"
  },
  {
    "label": "which",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "which"
  },
  {
    "label": "YieldSortKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "YieldSortKey"
  },
  {
    "label": "BindToCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToCurrentThread()"
  },
  {
    "label": "UnbindFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindFromCurrentThread()"
  },
  {
    "label": "RemoveTaskSource()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "RemoveTaskSource(const TaskSource& task_source)"
  },
  {
    "label": "InvalidateAndHandoffAllTaskSourcesToOtherThreadGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAndHandoffAllTaskSourcesToOtherThreadGroup(\n      ThreadGroup* destination_thread_group)"
  },
  {
    "label": "ShouldYield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldYield(TaskSourceSortKey sort_key)"
  },
  {
    "label": "CurrentThreadHasGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CurrentThreadHasGroup()"
  },
  {
    "label": "ScheduleReleaseTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleReleaseTaskSource(RegisteredTaskSource task_source)"
  },
  {
    "label": "BaseScopedCommandsExecutor()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "BaseScopedCommandsExecutor()"
  },
  {
    "label": "ScopedReenqueueExecutor()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "ScopedReenqueueExecutor()"
  },
  {
    "label": "SchedulePushTaskSourceAndWakeUpWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SchedulePushTaskSourceAndWakeUpWorkers(\n        TransactionWithRegisteredTaskSource transaction_with_task_source,\n        ThreadGroup* destination_thread_group)"
  },
  {
    "label": "GetScopedWindowsThreadEnvironment()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<win::ScopedWindowsThreadEnvironment>)",
    "insertText": "GetScopedWindowsThreadEnvironment(WorkerEnvironment environment)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "EXCLUSIVE_LOCKS_REQUIRED()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "UpdateSortKeyImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSortKeyImpl(BaseScopedCommandsExecutor* executor,\n                         TaskSource::Transaction transaction)"
  },
  {
    "label": "PushTaskSourceAndWakeUpWorkersImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTaskSourceAndWakeUpWorkersImpl(\n      BaseScopedCommandsExecutor* executor,\n      TransactionWithRegisteredTaskSource transaction_with_task_source)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (priority_queue_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]