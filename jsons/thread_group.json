[
  {
    "label": "TaskTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTracker"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "BaseScopedCommandsExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseScopedCommandsExecutor"
  },
  {
    "label": "ScopedReenqueueExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedReenqueueExecutor"
  },
  {
    "label": "YieldSortKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "YieldSortKey"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_THREAD_GROUP_H_ # define BASE_TASK_THREAD_POOL_THREAD_GROUP_H_ # include<memory> # include<vector> # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / common / checked_lock . h \" # include \" base / task / thread_pool / priority_queue . h \" # include \" base / task / thread_pool / task . h \" # include \" base / task / thread_pool / task_source . h \" # include \" base / task / thread_pool / tracked_ref . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (namespace internal { class TaskTracker ; class BASE_EXPORT ThreadGroup { public : class BASE_EXPORT Delegate { public : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "GetThreadGroupForTraits()",
    "kind": "Method",
    "detail": "Function (ThreadGroup*)",
    "insertText": "GetThreadGroupForTraits(const TaskTraits& traits)"
  },
  {
    "label": "ThreadGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadGroup(const ThreadGroup&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadGroup&)",
    "insertText": "operator(const ThreadGroup&)"
  },
  {
    "label": "ThreadGroup()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadGroup()"
  },
  {
    "label": "BindToCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToCurrentThread()"
  },
  {
    "label": "UnbindFromCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindFromCurrentThread()"
  },
  {
    "label": "IsBoundToCurrentThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBoundToCurrentThread()"
  },
  {
    "label": "RemoveTaskSource()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "RemoveTaskSource(const TaskSource& task_source)"
  },
  {
    "label": "UpdateSortKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSortKey(TaskSource::Transaction transaction)"
  },
  {
    "label": "PushTaskSourceAndWakeUpWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTaskSourceAndWakeUpWorkers(TransactionWithRegisteredTaskSource transaction_with_task_source)"
  },
  {
    "label": "InvalidateAndHandoffAllTaskSourcesToOtherThreadGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAndHandoffAllTaskSourcesToOtherThreadGroup(ThreadGroup* destination_thread_group)"
  },
  {
    "label": "ShouldYield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldYield(TaskSourceSortKey sort_key)"
  },
  {
    "label": "JoinForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinForTesting()"
  },
  {
    "label": "GetMaxConcurrentNonBlockedTasksDeprecated()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxConcurrentNonBlockedTasksDeprecated()"
  },
  {
    "label": "DidUpdateCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DidUpdateCanRunPolicy()"
  },
  {
    "label": "OnShutdownStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdownStarted()"
  },
  {
    "label": "CurrentThreadHasGroup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CurrentThreadHasGroup()"
  },
  {
    "label": "BaseScopedCommandsExecutor()",
    "kind": "Method",
    "detail": "Function (protected : class BaseScopedCommandsExecutor { public :)",
    "insertText": "BaseScopedCommandsExecutor(const BaseScopedCommandsExecutor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BaseScopedCommandsExecutor&)",
    "insertText": "operator(const BaseScopedCommandsExecutor&)"
  },
  {
    "label": "ScheduleReleaseTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleReleaseTaskSource(RegisteredTaskSource task_source)"
  },
  {
    "label": "BaseScopedCommandsExecutor()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "BaseScopedCommandsExecutor()"
  },
  {
    "label": "ScopedReenqueueExecutor()",
    "kind": "Method",
    "detail": "Function (private : std::vector<RegisteredTaskSource> task_sources_to_release_ ; } ; class ScopedReenqueueExecutor { public :)",
    "insertText": "ScopedReenqueueExecutor()"
  },
  {
    "label": "ScopedReenqueueExecutor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedReenqueueExecutor(const ScopedReenqueueExecutor&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedReenqueueExecutor&)",
    "insertText": "operator(const ScopedReenqueueExecutor&)"
  },
  {
    "label": "SchedulePushTaskSourceAndWakeUpWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SchedulePushTaskSourceAndWakeUpWorkers(TransactionWithRegisteredTaskSource transaction_with_task_source, ThreadGroup* destination_thread_group)"
  },
  {
    "label": "ThreadGroup()",
    "kind": "Method",
    "detail": "Function (private : absl::optional<TransactionWithRegisteredTaskSource> transaction_with_task_source_ ; raw_ptr<ThreadGroup> destination_thread_group_ = nullptr ; } ;)",
    "insertText": "ThreadGroup(TrackedRef<TaskTracker> task_tracker, TrackedRef<Delegate> delegate, ThreadGroup* predecessor_thread_group = nullptr)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) static std::unique_ptr<win::ScopedWindowsThreadEnvironment> GetScopedWindowsThreadEnvironment(WorkerEnvironment environment)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (# endif const TrackedRef<TaskTracker> task_tracker_ ; const TrackedRef<Delegate> delegate_ ; void)",
    "insertText": "Start()"
  },
  {
    "label": "GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequired()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumAdditionalWorkersForBestEffortTaskSourcesLockRequired() const EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "GetNumAdditionalWorkersForForegroundTaskSourcesLockRequired()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetNumAdditionalWorkersForForegroundTaskSourcesLockRequired() const EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "EnsureEnoughWorkersLockRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureEnoughWorkersLockRequired(BaseScopedCommandsExecutor* executor) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "ReEnqueueTaskSourceLockRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReEnqueueTaskSourceLockRequired(BaseScopedCommandsExecutor* workers_executor, ScopedReenqueueExecutor* reenqueue_executor, TransactionWithRegisteredTaskSource transaction_with_task_source) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "TakeRegisteredTaskSource()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "TakeRegisteredTaskSource(BaseScopedCommandsExecutor* executor) EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "UpdateSortKeyImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSortKeyImpl(BaseScopedCommandsExecutor* executor, TaskSource::Transaction transaction)"
  },
  {
    "label": "PushTaskSourceAndWakeUpWorkersImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTaskSourceAndWakeUpWorkersImpl(BaseScopedCommandsExecutor* executor, TransactionWithRegisteredTaskSource transaction_with_task_source)"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (CheckedLock lock_ ; bool disable_fair_scheduling_)",
    "insertText": "GUARDED_BY(lock_)"
  }
]