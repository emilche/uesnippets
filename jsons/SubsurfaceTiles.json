[
  {
    "label": "FSubsurfaceTiles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubsurfaceTiles"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSubsurfaceTilePassVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubsurfaceTilePassVS"
  },
  {
    "label": "FSubsurfaceTileFallbackScreenPassVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubsurfaceTileFallbackScreenPassVS"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RendererInterface . h \" # include \" RenderGraphResources . h \" # include \" GlobalShader . h \" # include \" ShaderParameterStruct . h \" # include \" ScreenPass . h \" # include \" SceneRendering . h \" struct FSubsurfaceTiles { enum class ETileType : uint8 { AFIS,SEPARABLE,All,Count } ; const uint32 TileTypeCount =)",
    "insertText": "uint32(ETileType::Count)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint BufferResolution =)",
    "insertText": "FIntPoint(0, 0)"
  },
  {
    "label": "GetIndirectDrawArgOffset()",
    "kind": "Method",
    "detail": "Function (bool bRectPrimitive = false ; FRDGBufferSRVRef TileDataSRV [ TileTypeCount ] = { nullptr,nullptr } ; FRDGBufferRef TileDataBuffer [ TileTypeCount ] = { nullptr,nullptr } ; FRDGBufferSRVRef TileTypeCountSRV = nullptr ; FRDGBufferRef TileTypeCountBuffer = nullptr ; FRDGBufferRef TileIndirectDispatchBuffer = nullptr ; FRDGBufferRef TileIndirectDrawBuffer = nullptr ; FRDGBufferRef TileIndirectRayDispatchBuffer = nullptr ; FRDGBufferRef TilePerThreadIndirectDispatchBuffer = nullptr ; uint32)",
    "insertText": "GetIndirectDrawArgOffset(ETileType Type)"
  },
  {
    "label": "GetIndirectDispatchArgOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetIndirectDispatchArgOffset(ETileType Type)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTileBuffer()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "GetTileBuffer(ETileType Type)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 Index =)",
    "insertText": "uint32(Type)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "ToString(FSubsurfaceTiles::ETileType Type)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FSubsurfaceTilePassVS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FSubsurfaceTilePassVS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FSubsurfaceTilePassVS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(FIntPoint, ViewMin) SHADER_PARAMETER(FIntPoint, ViewMax) SHADER_PARAMETER(int32, bRectPrimitive) SHADER_PARAMETER(uint32, TileType) SHADER_PARAMETER(FVector2f, ExtentInverse) SHADER_PARAMETER(uint32, OutputFlag) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer, TileDataBuffer) RDG_BUFFER_ACCESS(TileIndirectBuffer, ERHIAccess::IndirectArgs) END_SHADER_PARAMETER_STRUCT() static bool ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (} ; class FSubsurfaceTileFallbackScreenPassVS : public FGlobalShader { public :)",
    "insertText": "DECLARE_GLOBAL_SHADER(FSubsurfaceTileFallbackScreenPassVS)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "FSubsurfaceTileFallbackScreenPassVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubsurfaceTileFallbackScreenPassVS()"
  },
  {
    "label": "FSubsurfaceTileFallbackScreenPassVS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSubsurfaceTileFallbackScreenPassVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer) : FGlobalShader(Initializer)"
  },
  {
    "label": "GetSubsurfaceTileParameters()",
    "kind": "Method",
    "detail": "Function (} } ; FSubsurfaceTilePassVS::FParameters)",
    "insertText": "GetSubsurfaceTileParameters(const FScreenPassTextureViewport& TileViewport, const FSubsurfaceTiles& InTile, FSubsurfaceTiles::ETileType TileType)"
  },
  {
    "label": "AddSubsurfaceTiledScreenPass()",
    "kind": "Method",
    "detail": "Function (template<FSubsurfacePassPS,FSubsurfacePassVS> void)",
    "insertText": "AddSubsurfaceTiledScreenPass(FRDGBuilder& GraphBuilder, FRDGEventName&& Name, const FViewInfo& View, typename FSubsurfacePassPS::FParameters* PassParameters, TShaderMapRef<FSubsurfacePassVS>& VertexShader, TShaderMapRef<FSubsurfacePassPS>& PixelShader, FRHIBlendState* BlendState, FRHIDepthStencilState* DepthStencilState, const FScreenPassTextureViewport SceneViewport, FSubsurfaceTiles::ETileType TileType, const bool bShouldFallbackToFullScreenPass = false)"
  },
  {
    "label": "FallBackVertexShader()",
    "kind": "Method",
    "detail": "Function (TShaderMapRef<FSubsurfaceTileFallbackScreenPassVS>)",
    "insertText": "FallBackVertexShader(View.ShaderMap)"
  },
  {
    "label": "AddDrawScreenPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDrawScreenPass(GraphBuilder, Forward<FRDGEventName>(Name), View, SceneViewport, SceneViewport, FallBackVertexShader, PixelShader, BlendState, DepthStencilState, PassParameters)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} else { GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(Name), PassParameters, ERDGPassFlags::Raster, [PassParameters, VertexShader, PixelShader, DepthStencilState, BlendState, Viewport = SceneViewport, TileType](FRDGAsyncTask, FRHICommandList& RHICmdList) { typename FSubsurfacePassVS::FParameters ParametersVS = PassParameters->TileParameters; FGraphicsPipelineStateInitializer GraphicsPSOInit; RHICmdList.ApplyCachedRenderTargets(GraphicsPSOInit); GraphicsPSOInit.BlendState = BlendState; GraphicsPSOInit.RasterizerState = TStaticRasterizerState<>::GetRHI(); GraphicsPSOInit.DepthStencilState = DepthStencilState; GraphicsPSOInit.BoundShaderState.VertexDeclarationRHI = GFilterVertexDeclaration.VertexDeclarationRHI; GraphicsPSOInit.BoundShaderState.VertexShaderRHI = VertexShader.GetVertexShader(); GraphicsPSOInit.BoundShaderState.PixelShaderRHI = PixelShader.GetPixelShader(); GraphicsPSOInit.PrimitiveType = PassParameters->TileParameters.bRectPrimitive > 0 ? PT_RectList : PT_TriangleList; SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit, 0); SetShaderParameters(RHICmdList, VertexShader, VertexShader.GetVertexShader(), ParametersVS); SetShaderParameters(RHICmdList, PixelShader, PixelShader.GetPixelShader(), *PassParameters); RHICmdList.SetViewport(0.0f, 0.0f, 0.0f, Viewport.Extent.X, Viewport.Extent.Y, 1.0f); RHICmdList.SetStreamSource(0, nullptr, 0); RHICmdList.DrawPrimitiveIndirect(PassParameters->TileParameters.TileIndirectBuffer->GetRHI(), FSubsurfaceTiles::GetIndirectDrawArgOffset(TileType)); })"
  },
  {
    "label": "AddConditionalClearBlackUAVPass()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddConditionalClearBlackUAVPass(FRDGBuilder& GraphBuilder, FRDGEventName&& PassName, FRDGTextureRef Texture, const FScreenPassTextureViewport& ScreenPassViewport, FRDGBufferRef ConditionBuffer, uint32 Offset)"
  }
]