[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UAnimBoneCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionSettings"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UPoseWatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatch"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UAnimBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprintGeneratedClass"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "SCreateAnimationAssetDlg",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCreateAnimationAssetDlg"
  },
  {
    "label": "FAnimationCompressionSelectionDialogConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationCompressionSelectionDialogConfig"
  },
  {
    "label": "SAnimationCompressionSelectionDialog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAnimationCompressionSelectionDialog"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" Templates / SubclassOf . h \" # include \" Modules / ModuleManager . h \" # include \" Misc / PackageName . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWindow . h \" # include \" Animation / Skeleton . h \" # include \" Animation / AnimationAsset . h \" # include \" IContentBrowserSingleton . h \" # include \" ContentBrowserModule . h \" # include \" IAssetTools . h \" # include \" AssetToolsModule . h \" # include \" Engine / SkeletalMesh . h \" # include \" UObject / SoftObjectPtr . h \" class FMenuBuilder ; class UAnimBlueprint ; class UAnimBoneCompressionSettings ; class UAnimSequence ; class UEdGraph ; class UPoseWatch ; class UEdGraphNode ; class UAnimBlueprintGeneratedClass ; class UAnimGraphNode_Base ; class SCreateAnimationAssetDlg : public SWindow { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SCreateAnimationAssetDlg)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FText, DefaultAssetPath) SLATE_END_ARGS() SCreateAnimationAssetDlg() : UserResponse(EAppReturnType::Cancel)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "ShowModal()",
    "kind": "Method",
    "detail": "Function (public : EAppReturnType::Type)",
    "insertText": "ShowModal()"
  },
  {
    "label": "GetAssetPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetPath()"
  },
  {
    "label": "GetAssetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetName()"
  },
  {
    "label": "GetFullAssetPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullAssetPath()"
  },
  {
    "label": "OnPathChange()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPathChange(const FString& NewPath)"
  },
  {
    "label": "OnNameChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNameChange(const FText& NewName, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnButtonClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonClick(EAppReturnType::Type ButtonID)"
  },
  {
    "label": "ValidatePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidatePackage()"
  },
  {
    "label": "FAnimationCompressionSelectionDialogConfig()",
    "kind": "Method",
    "detail": "Function (EAppReturnType::Type UserResponse ; FText AssetPath ; FText AssetName ; FText LastUsedAssetPath ; } ; struct FAnimationCompressionSelectionDialogConfig { FText DialogTitleOverride ; FVector2D WindowSizeOverride ; UAnimBoneCompressionSettings* DefaultSelectedAsset ;)",
    "insertText": "FAnimationCompressionSelectionDialogConfig() : WindowSizeOverride(ForceInitToZero) , DefaultSelectedAsset(nullptr)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; class SAnimationCompressionSelectionDialog : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnAssetSelected, const FAssetData&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SAnimationCompressionSelectionDialog)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() UNREALED_API SAnimationCompressionSelectionDialog()"
  },
  {
    "label": "SAnimationCompressionSelectionDialog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SAnimationCompressionSelectionDialog()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const FAnimationCompressionSelectionDialogConfig& InConfig)"
  },
  {
    "label": "SetOnAssetSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnAssetSelected(const FOnAssetSelected& InHandler)"
  },
  {
    "label": "DoSelectAsset()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DoSelectAsset(const FAssetData& SelectedAsset)"
  },
  {
    "label": "OnConfirmClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnConfirmClicked()"
  },
  {
    "label": "OnCancelClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnCancelClicked()"
  },
  {
    "label": "CloseDialog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDialog()"
  },
  {
    "label": "OnAssetSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetSelected(const FAssetData& AssetData)"
  },
  {
    "label": "OnAssetsActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetsActivated(const TArray<FAssetData>& SelectedAssets, EAssetTypeActivationMethod::Type ActivationType)"
  },
  {
    "label": "IsConfirmButtonEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConfirmButtonEnabled()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> AssetPicker ; TArray<FAssetData> CurrentlySelectedAssets ; bool bValidAssetChosen ; FOnAssetSelected OnAssetSelectedHandler ; FGetCurrentSelectionDelegate GetCurrentSelectionDelegate ; } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FAnimAssetCreated, TArray<class UObject*>)"
  },
  {
    "label": "CreateModalAnimationCompressionSelectionDialog()",
    "kind": "Method",
    "detail": "Function (namespace AnimationEditorUtils { FAssetData)",
    "insertText": "CreateModalAnimationCompressionSelectionDialog(const FAnimationCompressionSelectionDialogConfig& InConfig)"
  },
  {
    "label": "CreateAnimationAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateAnimationAssets(const TArray<TSoftObjectPtr<UObject>>& SkeletonsOrSkeletalMeshes, TSubclassOf<UAnimationAsset> AssetClass, const FString& InPrefix, FAnimAssetCreated AssetCreated, UObject* NameBaseObject = nullptr, bool bDoNotShowNameDialog = false, bool bAllowReplaceExisting = false)"
  },
  {
    "label": "CreateNewAnimBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewAnimBlueprint(TArray<TWeakObjectPtr<UObject>> SkeletonsOrSkeletalMeshes, FAnimAssetCreated AssetCreated, bool bInContentBrowser)"
  },
  {
    "label": "CreateNewAnimBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewAnimBlueprint(TArray<TSoftObjectPtr<UObject>> SkeletonsOrSkeletalMeshes, FAnimAssetCreated AssetCreated, bool bInContentBrowser)"
  },
  {
    "label": "FillCreateAssetMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillCreateAssetMenu(FMenuBuilder& MenuBuilder, const TArray<TSoftObjectPtr<UObject>>& SkeletonsOrSkeletalMeshes, FAnimAssetCreated AssetCreated, bool bInContentBrowser=true)"
  },
  {
    "label": "CreateUniqueAssetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUniqueAssetName(const FString& InBasePackageName, const FString& InSuffix, FString& OutPackageName, FString& OutAssetName)"
  },
  {
    "label": "ApplyCompressionAlgorithm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyCompressionAlgorithm(TArray<UAnimSequence*>& AnimSequencePtrs, UAnimBoneCompressionSettings* OverrideSettings)"
  },
  {
    "label": "CreateAnimationAsset()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "CreateAnimationAsset(UObject* SkeletonOrSkeletalMesh, const FString& AssetPath, const FString& InPrefix)"
  },
  {
    "label": "USkeleton()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh* SkeletalMesh = nullptr ; USkeleton* Skeleton = Cast<)",
    "insertText": "USkeleton(SkeletonOrSkeletalMesh)"
  },
  {
    "label": "USkeletalMesh()",
    "kind": "Method",
    "detail": "Function (SkeletalMesh = CastChecked<)",
    "insertText": "USkeletalMesh(SkeletonOrSkeletalMesh)"
  },
  {
    "label": "GetSkeleton()",
    "kind": "Method",
    "detail": "Function (Skeleton = SkeletalMesh ->)",
    "insertText": "GetSkeleton()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Skeleton)"
  },
  {
    "label": "CreateUniqueAssetName()",
    "kind": "Method",
    "detail": "Function (FString Name ; FString PackageName ;)",
    "insertText": "CreateUniqueAssetName(AssetPath, InPrefix, PackageName, Name)"
  },
  {
    "label": "FAssetToolsModule()",
    "kind": "Method",
    "detail": "Function (FAssetToolsModule& AssetToolsModule = FModuleManager::GetModuleChecked<)",
    "insertText": "FAssetToolsModule(\"AssetTools\")"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* NewAsset = Cast<)",
    "insertText": "T(AssetToolsModule.Get().CreateAsset(Name, FPackageName::GetLongPackagePath(PackageName), T::StaticClass(), NULL))"
  },
  {
    "label": "SetSkeleton()",
    "kind": "Method",
    "detail": "Function (NewAsset ->)",
    "insertText": "SetSkeleton(Skeleton)"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (NewAsset ->)",
    "insertText": "SetPreviewMesh(SkeletalMesh)"
  },
  {
    "label": "MarkPackageDirty()",
    "kind": "Method",
    "detail": "Function (} NewAsset ->)",
    "insertText": "MarkPackageDirty()"
  },
  {
    "label": "RegenerateSubGraphArrays()",
    "kind": "Method",
    "detail": "Function (} return NewAsset ; } return nullptr ; } void)",
    "insertText": "RegenerateSubGraphArrays(UAnimBlueprint* Blueprint)"
  },
  {
    "label": "RegenerateGraphSubGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateGraphSubGraphs(UAnimBlueprint* OwningBlueprint, UEdGraph* GraphToFix)"
  },
  {
    "label": "RemoveDuplicateSubGraphs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDuplicateSubGraphs(UEdGraph* GraphToClean)"
  },
  {
    "label": "FindChildGraphsFromNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindChildGraphsFromNodes(UEdGraph* GraphToSearch, TArray<UEdGraph*>& ChildGraphs)"
  },
  {
    "label": "IsAnimGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnimGraph(UEdGraph* Graph)"
  },
  {
    "label": "GetPoseWatchNodeLinkID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPoseWatchNodeLinkID(UPoseWatch* PoseWatch, OUT UAnimBlueprintGeneratedClass*& AnimBPGenClass)"
  },
  {
    "label": "SetPoseWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPoseWatch(UPoseWatch* PoseWatch, UAnimBlueprint* AnimBlueprintIfKnown = nullptr)"
  },
  {
    "label": "FindPoseWatchForNode()",
    "kind": "Method",
    "detail": "Function (UPoseWatch*)",
    "insertText": "FindPoseWatchForNode(const UEdGraphNode* Node, UAnimBlueprint* AnimBlueprintIfKnown=nullptr)"
  },
  {
    "label": "MakePoseWatchForNode()",
    "kind": "Method",
    "detail": "Function (UPoseWatch*)",
    "insertText": "MakePoseWatchForNode(UAnimBlueprint* AnimBlueprint, UEdGraphNode* Node)"
  },
  {
    "label": "RemovePoseWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseWatch(UPoseWatch* PoseWatch, UAnimBlueprint* AnimBlueprintIfKnown=nullptr)"
  },
  {
    "label": "RemovePoseWatchFromNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseWatchFromNode(UEdGraphNode* Node, UAnimBlueprint* AnimBlueprint)"
  },
  {
    "label": "RemovePoseWatchesFromGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePoseWatchesFromGraph(UAnimBlueprint* AnimBlueprint, class UEdGraph* Graph)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnPoseWatchesChanged, UAnimBlueprint* , UEdGraphNode*)"
  },
  {
    "label": "OnPoseWatchesChanged()",
    "kind": "Method",
    "detail": "Function (FOnPoseWatchesChanged&)",
    "insertText": "OnPoseWatchesChanged()"
  },
  {
    "label": "SetupDebugLinkedAnimInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDebugLinkedAnimInstances(UAnimBlueprint* InAnimBlueprint, UObject* InRootObjectBeingDebugged)"
  },
  {
    "label": "ExecuteNewAnimAsset()",
    "kind": "Method",
    "detail": "Function (template<TFactory,T> void)",
    "insertText": "ExecuteNewAnimAsset(TArray<TSoftObjectPtr<UObject>> SkeletonsOrSkeletalMeshes, const FString InSuffix, FAnimAssetCreated AssetCreated, bool bInContentBrowser, bool bAllowReplaceExisting)"
  },
  {
    "label": "USkeleton()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh* SkeletalMesh = nullptr ; USkeleton* Skeleton = Cast<)",
    "insertText": "USkeleton(SkeletonsOrSkeletalMeshes[0].LoadSynchronous())"
  },
  {
    "label": "USkeletalMesh()",
    "kind": "Method",
    "detail": "Function (SkeletalMesh = CastChecked<)",
    "insertText": "USkeletalMesh(SkeletonsOrSkeletalMeshes[0].LoadSynchronous())"
  },
  {
    "label": "CreateUniqueAssetName()",
    "kind": "Method",
    "detail": "Function (FString Name ; FString PackageName ;)",
    "insertText": "CreateUniqueAssetName(Skeleton->GetOutermost()->GetName(), InSuffix, PackageName, Name)"
  },
  {
    "label": "TFactory()",
    "kind": "Method",
    "detail": "Function (TFactory* Factory = NewObject<)",
    "insertText": "TFactory()"
  },
  {
    "label": "FContentBrowserModule()",
    "kind": "Method",
    "detail": "Function (Factory -> TargetSkeleton = Skeleton ; Factory -> PreviewSkeletalMesh = SkeletalMesh ; FContentBrowserModule& ContentBrowserModule = FModuleManager::LoadModuleChecked<)",
    "insertText": "FContentBrowserModule(\"ContentBrowser\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ContentBrowserModule .)",
    "insertText": "Get().CreateNewAsset(Name, FPackageName::GetLongPackagePath(PackageName), T::StaticClass(), Factory)"
  },
  {
    "label": "FindPackage()",
    "kind": "Method",
    "detail": "Function (UObject* Parent =)",
    "insertText": "FindPackage(NULL, *PackageName)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (UObject* NewAsset = FindObject<)",
    "insertText": "UObject(Parent, *Name, false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*> NewAssets ; NewAssets .)",
    "insertText": "Add(NewAsset)"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (ObjectToDelete ->)",
    "insertText": "ClearFlags(RF_Standalone | RF_Public)"
  },
  {
    "label": "RemoveFromRoot()",
    "kind": "Method",
    "detail": "Function (ObjectToDelete ->)",
    "insertText": "RemoveFromRoot()"
  },
  {
    "label": "MarkAsGarbage()",
    "kind": "Method",
    "detail": "Function (ObjectToDelete ->)",
    "insertText": "MarkAsGarbage()"
  },
  {
    "label": "CollectGarbage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CollectGarbage(GARBAGE_COLLECTION_KEEPFLAGS)"
  },
  {
    "label": "CreateAnimationAssets()",
    "kind": "Method",
    "detail": "Function (} } } } } else { UObject* NameBaseObject = nullptr ; const bool bDoNotShowNameDialog = false ;)",
    "insertText": "CreateAnimationAssets(SkeletonsOrSkeletalMeshes, T::StaticClass(), InSuffix, AssetCreated, NameBaseObject, bDoNotShowNameDialog, bAllowReplaceExisting)"
  }
]