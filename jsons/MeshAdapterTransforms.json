[
  {
    "label": "TriangleMeshType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangleMeshType"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" FrameTypes . h \" # include \" MathUtil . h \" # include \" VectorTypes . h \" # include \" Async / ParallelFor . h \" namespace MeshAdapterTransforms { using namespace UE::Geometry ; using FFrame3d = UE::Geometry::FFrame3d ; template<class TriangleMeshType> void)",
    "insertText": "Translate(TriangleMeshType& Mesh, const FVector3d& Translation)"
  },
  {
    "label": "MaxVertexID()",
    "kind": "Method",
    "detail": "Function (int NumVertices = Mesh .)",
    "insertText": "MaxVertexID()"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumVertices, [&](int vid) { if (Mesh.IsVertex(vid)) { Mesh.SetVertex(vid, Mesh.GetVertex(vid) + Translation); } })"
  },
  {
    "label": "WorldToFrameCoords()",
    "kind": "Method",
    "detail": "Function (} template<class TriangleMeshType> void)",
    "insertText": "WorldToFrameCoords(TriangleMeshType& Mesh, const FFrame3d& Frame)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumVertices, [&](int vid) { if (Mesh.IsVertex(vid)) { FVector3d Position = Mesh.GetVertex(vid); Mesh.SetVertex(vid, Frame.ToFramePoint(Position)); } })"
  },
  {
    "label": "MaxNormalID()",
    "kind": "Method",
    "detail": "Function (int NumNormals = Mesh .)",
    "insertText": "MaxNormalID()"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumNormals, [&](int elemid) { if (Mesh.IsNormal(elemid)) { FVector3f Normal = Mesh.GetNormal(elemid); Mesh.SetNormal(elemid, (FVector3f)Frame.ToFrameVector((FVector3d)Normal)); } })"
  },
  {
    "label": "FrameCoordsToWorld()",
    "kind": "Method",
    "detail": "Function (} } template<class TriangleMeshType> void)",
    "insertText": "FrameCoordsToWorld(TriangleMeshType& Mesh, const FFrame3d& Frame)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumVertices, [&](int vid) { if (Mesh.IsVertex(vid)) { FVector3d Position = Mesh.GetVertex(vid); Mesh.SetVertex(vid, Frame.FromFramePoint(Position)); } })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumNormals, [&](int elemid) { if (Mesh.IsNormal(elemid)) { FVector3f Normal = Mesh.GetNormal(elemid); Mesh.SetNormal(elemid, (FVector3f)Frame.FromFrameVector((FVector3d)Normal)); } })"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (} } template<class TriangleMeshType> void)",
    "insertText": "ApplyTransform(TriangleMeshType& Mesh, const FTransformSRT3d& Transform)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumVertices, [&](int vid) { if (Mesh.IsVertex(vid)) { FVector3d Position = Mesh.GetVertex(vid); Position = Transform.TransformPosition(Position); Mesh.SetVertex(vid, Position); } })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumNormals, [&](int elemid) { if (Mesh.IsNormal(elemid)) { FVector3f Normal = Mesh.GetNormal(elemid); Mesh.SetNormal(elemid, (FVector3f)Transform.TransformNormal((FVector3d)Normal)); } })"
  },
  {
    "label": "ApplyTransformInverse()",
    "kind": "Method",
    "detail": "Function (} } template<class TriangleMeshType> void)",
    "insertText": "ApplyTransformInverse(TriangleMeshType& Mesh, const FTransformSRT3d& Transform)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumVertices, [&](int vid) { if (Mesh.IsVertex(vid)) { FVector3d Position = Mesh.GetVertex(vid); Position = Transform.InverseTransformPosition(Position); Mesh.SetVertex(vid, Position); } })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumNormals, [&](int elemid) { if (Mesh.IsNormal(elemid)) { FVector3f Normal = Mesh.GetNormal(elemid); Mesh.SetNormal(elemid, (FVector3f)Transform.InverseTransformNormal((FVector3d)Normal)); } })"
  },
  {
    "label": "ApplyTransform()",
    "kind": "Method",
    "detail": "Function (} } template<class TriangleMeshType> void)",
    "insertText": "ApplyTransform(TriangleMeshType& Mesh, TFunctionRef<FVector3d(const FVector3d&)> PositionTransform, TFunctionRef<FVector3f(const FVector3f&)> NormalTransform)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumVertices, [&](int vid) { if (Mesh.IsVertex(vid)) { FVector3d Position = Mesh.GetVertex(vid); Position = PositionTransform(Position); Mesh.SetVertex(vid, Position); } })"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumNormals, [&](int elemid) { if (Mesh.IsNormal(elemid)) { FVector3f Normal = Mesh.GetNormal(elemid); Normal = NormalTransform(Normal); Mesh.SetNormal(elemid, UE::Geometry::Normalized(Normal)); } })"
  }
]