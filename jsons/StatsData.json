[
  {
    "label": "FStatHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatHelper"
  },
  {
    "label": "FStatDataImp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatDataImp"
  },
  {
    "label": "FStatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatData"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ChaosPerfTest . h \" # include \" Chaos / Box . h \" # include \" Chaos / ParticleHandle . h \" # if UE_BUILD_SHIPPING # define)",
    "insertText": "CHAOS_COLLISION_STAT(X) #define CHAOS_COLLISION_STAT_DISABLED(X) X #else #define CHAOS_COLLISION_STAT(X)"
  },
  {
    "label": "CHAOS_COLLISION_STAT_DISABLED()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CHAOS_COLLISION_STAT_DISABLED(X)"
  },
  {
    "label": "FStatHelper()",
    "kind": "Method",
    "detail": "Function (namespace CollisionStats { int32 BucketSizes2 [ ] = { 0,1,4,8,1 6,3 2,6 4,1 2 8,5 1 2,MAX_int32 } ; template<bool bGatherStats> struct FStatHelper { int32 MaxCount ;)",
    "insertText": "FStatHelper()"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Record(int32 Count)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "UE_ARRAY_COUNT()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct FStatHelper<true> { int32 BucketCount [)",
    "insertText": "UE_ARRAY_COUNT(BucketSizes2)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(BucketCount, 0, sizeof(BucketCount))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + BucketCount [ BucketIdx ] ; } })",
    "insertText": "if(Count > MaxCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString OutLog ; int32 MaxBucketCount = 0 ;)",
    "insertText": "for(int32 Count : BucketCount)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (MaxBucketCount = Count ; } } const float CountPerChar = static_cast<)",
    "insertText": "float(MaxBucketCount)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 NumChars = static_cast<)",
    "insertText": "int32(static_cast<float>(BucketCount[Idx]) / CountPerChar)"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (OutLog + =)",
    "insertText": "Printf(TEXT(\"\\t[%4d - %4d) (%4d) |\"), BucketSizes2[Idx - 1], BucketSizes2[Idx], BucketCount[Idx])"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (} else { OutLog + =)",
    "insertText": "Printf(TEXT(\"\\t[%4d - inf) (%4d) |\"), BucketSizes2[Idx - 1], BucketCount[Idx])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Count = 0; Count < NumChars; ++Count)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (OutLog + =)",
    "insertText": "TEXT(\"-\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} OutLog + =)",
    "insertText": "TEXT(\"\\n\")"
  },
  {
    "label": "FStatDataImp()",
    "kind": "Method",
    "detail": "Function (} return OutLog ; } } ; struct FStatDataImp {)",
    "insertText": "FStatDataImp() : CountNP(0), RejectedNP(0), SimulatedParticles(0), NumPotentials(0)"
  },
  {
    "label": "IncrementSimulatedParticles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncrementSimulatedParticles()"
  },
  {
    "label": "RecordBoundsData()",
    "kind": "Method",
    "detail": "Function (+ + SimulatedParticles ; } void)",
    "insertText": "RecordBoundsData(const FAABB3& Box1)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (BoundsDistribution .)",
    "insertText": "Record(static_cast<int32>(Box1.Extents().GetMax()))"
  },
  {
    "label": "RecordBroadphasePotentials()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordBroadphasePotentials(int32 Num)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (NumPotentials = Num ; BroadphasePotentials .)",
    "insertText": "Record(Num)"
  },
  {
    "label": "IncrementCountNP()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IncrementCountNP(int32 Count = 1)"
  },
  {
    "label": "IncrementRejectedNP()",
    "kind": "Method",
    "detail": "Function (CountNP + = Count ; } void)",
    "insertText": "IncrementRejectedNP()"
  },
  {
    "label": "FinalizeData()",
    "kind": "Method",
    "detail": "Function (+ + RejectedNP ; } void)",
    "insertText": "FinalizeData()"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (NarrowPhasePerformed .)",
    "insertText": "Record(CountNP)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (const int32 NPSkipped = NumPotentials - CountNP ; NarrowPhaseSkipped .)",
    "insertText": "Record(NPSkipped)"
  },
  {
    "label": "Record()",
    "kind": "Method",
    "detail": "Function (NarrowPhaseRejected .)",
    "insertText": "Record(RejectedNP)"
  },
  {
    "label": "Print()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Print()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (FString OutLog ; # if CHAOS_PARTICLEHANDLE_TODO const float NumParticles = InParticles .)",
    "insertText": "Size()"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (OutLog =)",
    "insertText": "Printf(TEXT(\"ComputeConstraints stats:\\n\" \"Total Particles:%d\\nSimulated Particles:%d (%.2f%%)\\n\" \"Max candidates per instance:%d (%.2f%%)\\n\" \"Max candidates skipped per instance (NP skipped):%d (%.2f%%)\\n\" \"Max narrow phase tests per instance:%d (%.2f%%)\\n\" \"Max narrow phase rejected per instance (NP rejected):%d (%.2f%%)\\n\" \"Constraints generated:%d\\n\" ), InParticles.Size(), SimulatedParticles, SimulatedParticles / NumParticles * 100.f, BroadphasePotentials.MaxCount, BroadphasePotentials.MaxCount / NumParticles * 100.f, NarrowPhaseSkipped.MaxCount, NarrowPhaseSkipped.MaxCount / NumParticles * 100.f, NarrowPhasePerformed.MaxCount, NarrowPhasePerformed.MaxCount / NumParticles * 100.f, NarrowPhaseRejected.MaxCount, NarrowPhaseRejected.MaxCount / NumParticles * 100.f, Constraints.Num())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (OutLog + =)",
    "insertText": "Printf(TEXT(\"Potentials per instance distribution:\\n\"))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (OutLog + =)",
    "insertText": "Printf(TEXT(\"\\nCandidates skipped per instance (NP skipped) distribution:\\n\"))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (OutLog + =)",
    "insertText": "Printf(TEXT(\"\\nNarrow phase performed per instance distribution:\\n\"))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (OutLog + =)",
    "insertText": "Printf(TEXT(\"\\nNarrow phase candidates rejected per instance distribution:\\n\"))"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (OutLog + =)",
    "insertText": "Printf(TEXT(\"\\nBounds distribution:\\n\"))"
  },
  {
    "label": "FStatData()",
    "kind": "Method",
    "detail": "Function (bool bPendingHierarchyDump ; bPendingHierarchyDump = false ; # endif } int32 CountNP ; int32 RejectedNP ; int32 SimulatedParticles ; int32 NumPotentials ; FStatHelper<true> BroadphasePotentials ; FStatHelper<true> NarrowPhaseSkipped ; FStatHelper<true> NarrowPhasePerformed ; FStatHelper<true> NarrowPhaseRejected ; FStatHelper<true> BoundsDistribution ; } ; struct FStatData {)",
    "insertText": "FStatData(bool bGatherStats) : StatImp(nullptr)"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (bGatherStats) { StatImp = new FStatDataImp(); } })"
  },
  {
    "label": "FStatData()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStatData()"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { delete StatImp; } })"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ return StatImp != nullptr; }) CHAOS_COLLISION_STAT_DISABLED({ return false; }) } FORCEINLINE void IncrementSimulatedParticles()"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { StatImp->IncrementSimulatedParticles(); } })"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { StatImp->RecordBoundsData(Box1); } })"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { StatImp->RecordBroadphasePotentials(Num); } })"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { StatImp->IncrementCountNP(Count); } }) } FORCEINLINE void IncrementRejectedNP()"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { StatImp->IncrementRejectedNP(); } })"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { StatImp->FinalizeData(); } })"
  },
  {
    "label": "CHAOS_COLLISION_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_COLLISION_STAT({ if (IsEnabled()) { StatImp->Print(); } })"
  }
]