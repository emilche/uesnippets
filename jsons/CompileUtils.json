[
  {
    "label": "SimpleCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimpleCompiler"
  },
  {
    "label": "SimpleCompiler()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_COMPILEUTILS_H # define LLVM_EXECUTIONENGINE_ORC_COMPILEUTILS_H # include \" llvm / ExecutionEngine / ObjectMemoryBuffer . h \" # include \" llvm / IR / LegacyPassManager . h \" # include \" llvm / MC / MCContext . h \" # include \" llvm / Object / ObjectFile . h \" # include \" llvm / Target / TargetMachine . h \" namespace llvm { namespace orc { class SimpleCompiler { public :)",
    "insertText": "SimpleCompiler(TargetMachine &TM) : TM(TM)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} object::OwningBinary<object::ObjectFile>)",
    "insertText": "operator()(Module &M)"
  },
  {
    "label": "ObjStream()",
    "kind": "Method",
    "detail": "Function (SmallVector<char,0> ObjBufferSV ; raw_svector_ostream)",
    "insertText": "ObjStream(ObjBufferSV)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (legacy::PassManager PM ; MCContext* Ctx ;)",
    "insertText": "if(TM.addPassesToEmitMC(PM, Ctx, ObjStream)) llvm_unreachable(\"Target does not support MC emission.\")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PM .)",
    "insertText": "run(M)"
  },
  {
    "label": "flush()",
    "kind": "Method",
    "detail": "Function (ObjStream .)",
    "insertText": "flush()"
  },
  {
    "label": "ObjBuffer()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MemoryBuffer>)",
    "insertText": "ObjBuffer(new ObjectMemoryBuffer(std::move(ObjBufferSV)))"
  },
  {
    "label": "createObjectFile()",
    "kind": "Method",
    "detail": "Function (ErrorOr<std::unique_ptr<object::ObjectFile>> Obj = object::)",
    "insertText": "createObjectFile(ObjBuffer->getMemBufferRef())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef object::OwningBinary<object::ObjectFile> OwningObj ;)",
    "insertText": "if(Obj) return OwningObj(std::move(*Obj), std::move(ObjBuffer))"
  }
]