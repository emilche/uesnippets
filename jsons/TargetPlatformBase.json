[
  {
    "label": "IDeviceManagerCustomPlatformWidgetCreator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDeviceManagerCustomPlatformWidgetCreator"
  },
  {
    "label": "IPlugin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlugin"
  },
  {
    "label": "FDataDrivenPlatformInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDataDrivenPlatformInfo"
  },
  {
    "label": "FAudioFormatSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioFormatSettings"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "FTargetPlatformMerged",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetPlatformMerged"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "UTextureLODSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureLODSettings"
  },
  {
    "label": "FStaticMeshLODSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshLODSettings"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "AddDevice(const FString& DeviceName, bool bDefault)"
  },
  {
    "label": "DisplayName()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "DisplayName()"
  },
  {
    "label": "IsEnabledForPlugin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabledForPlugin(const IPlugin& Plugin)"
  },
  {
    "label": "UsesForwardShading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesForwardShading()"
  },
  {
    "label": "UsesDBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesDBuffer()"
  },
  {
    "label": "VelocityEncodeDepth()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VelocityEncodeDepth()"
  },
  {
    "label": "UsesSelectiveBasePassOutputs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesSelectiveBasePassOutputs()"
  },
  {
    "label": "UsesDistanceFields()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesDistanceFields()"
  },
  {
    "label": "UsesRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesRayTracing()"
  },
  {
    "label": "GetRayTracingMode()",
    "kind": "Method",
    "detail": "Function (ERayTracingRuntimeMode)",
    "insertText": "GetRayTracingMode()"
  },
  {
    "label": "GetSupportedHardwareMask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSupportedHardwareMask()"
  },
  {
    "label": "GetStaticMeshOfflineBVHMode()",
    "kind": "Method",
    "detail": "Function (EOfflineBVHMode)",
    "insertText": "GetStaticMeshOfflineBVHMode()"
  },
  {
    "label": "GetStaticMeshOfflineBVHCompression()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStaticMeshOfflineBVHCompression()"
  },
  {
    "label": "ForcesSimpleSkyDiffuse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ForcesSimpleSkyDiffuse()"
  },
  {
    "label": "GetDownSampleMeshDistanceFieldDivider()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDownSampleMeshDistanceFieldDivider()"
  },
  {
    "label": "GetHeightFogModeForOpaque()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeightFogModeForOpaque()"
  },
  {
    "label": "UsesMobileAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesMobileAmbientOcclusion()"
  },
  {
    "label": "UsesMobileDBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesMobileDBuffer()"
  },
  {
    "label": "UsesASTCHDR()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesASTCHDR()"
  },
  {
    "label": "GetRayTracingShaderFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRayTracingShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray)"
  },
  {
    "label": "GetReflectionCaptureFormats()",
    "kind": "Method",
    "detail": "Function (# if WITH_ENGINE void)",
    "insertText": "GetReflectionCaptureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutFormats .)",
    "insertText": "Add(FName(TEXT(\"FullHDR\")))"
  },
  {
    "label": "FinalizeVirtualTextureLayerFormat()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "FinalizeVirtualTextureLayerFormat(FName Format)"
  },
  {
    "label": "AddDependencySCArrayHelper()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddDependencySCArrayHelper(TArray<FString>& OutDependencies, const FString& DependencyRelativePath)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IPlatformFile& PlatformFile =)",
    "insertText": "Get().GetPlatformFile()"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString DependencyAbsolutePath = PlatformFile .)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(*(FPaths::EngineDir() / DependencyRelativePath))"
  },
  {
    "label": "NormalizeDirectoryName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NormalizeDirectoryName(DependencyAbsolutePath)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutDependencies .)",
    "insertText": "AddUnique(DependencyAbsolutePath)"
  },
  {
    "label": "IsSdkInstalled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSdkInstalled(bool bProjectHasCode, FString& OutDocumentationPath)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 bReadyToBuild = ETargetPlatformReadyStatus::Ready ;)",
    "insertText": "if(!IsSdkInstalled(bProjectHasCode, OutTutorialPath))"
  },
  {
    "label": "RequiresTempTarget()",
    "kind": "Method",
    "detail": "Function (bReadyToBuild | = ETargetPlatformReadyStatus::SDKNotFound ; } return bReadyToBuild ; } bool)",
    "insertText": "RequiresTempTarget(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FText& OutReason)"
  },
  {
    "label": "SupportsValueForType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsValueForType(FName SupportedType, FName RequiredSupportedValue)"
  },
  {
    "label": "GetAllPossibleShaderFormats()",
    "kind": "Method",
    "detail": "Function (TArray<FName> AllPossibleShaderFormats ;)",
    "insertText": "GetAllPossibleShaderFormats(AllPossibleShaderFormats)"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "SupportsVariants()"
  },
  {
    "label": "SendLowerCaseFilePaths()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SendLowerCaseFilePaths()"
  },
  {
    "label": "AllowsDevelopmentObjects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowsDevelopmentObjects()"
  },
  {
    "label": "GetBuildProjectSettingKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBuildProjectSettingKeys(FString& OutSection, TArray<FString>& InBoolKeys, TArray<FString>& InIntKeys, TArray<FString>& InStringKeys)"
  },
  {
    "label": "GetPlatformOrdinal()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPlatformOrdinal()"
  },
  {
    "label": "ShouldExpandTo32Bit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExpandTo32Bit(const uint16* Indices, const int32 NumIndices)"
  },
  {
    "label": "AllowObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowObject(const class UObject* Object)"
  },
  {
    "label": "NAME_MeshBuilder()",
    "kind": "Method",
    "detail": "Function (const FName)",
    "insertText": "NAME_MeshBuilder(TEXT(\"MeshBuilder\"))"
  },
  {
    "label": "GetTextureFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTextureFormatModuleHints(TArray<FName>& OutModuleNames)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"TextureFormatUncompressed\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"TextureFormatDXT\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(TEXT(\"TextureFormatIntelISPCTexComp\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString TextureCompressionFormat ;)",
    "insertText": "if(GetConfigSystem()->GetString(TEXT(\"AlternateTextureCompression\"), TEXT(\"TextureCompressionFormat\"), TextureCompressionFormat, GEngineIni))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutModuleNames .)",
    "insertText": "Add(*TextureCompressionFormat)"
  },
  {
    "label": "GetTextureSizeLimits()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetTextureSizeLimits(uint64 & OutMaximumSurfaceBytes, uint64 & OutMaximumPackageBytes)"
  },
  {
    "label": "GetWaveFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetWaveFormat(const class USoundWave* Wave)"
  },
  {
    "label": "GetAllWaveFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllWaveFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetWaveFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWaveFormatModuleHints(TArray<FName>& OutModuleNames)"
  },
  {
    "label": "CopyFileToTarget()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CopyFileToTarget(const FString& TargetAddress, const FString& HostFilename, const FString& TargetFilename, const TMap<FString,FString>& CustomPlatformData)"
  },
  {
    "label": "GetExtraPackagesToCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetExtraPackagesToCook(TArray<FName>& PackageNames)"
  },
  {
    "label": "InitializeHostPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitializeHostPlatform()"
  },
  {
    "label": "GetAudioFormatSettings()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* PlatformInfo ; int32 PlatformOrdinal ; const Audio::FAudioFormatSettings&)",
    "insertText": "GetAudioFormatSettings()"
  },
  {
    "label": "AppendAnalyticsEventConfigBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigBool(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigInt(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigFloat(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigString(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "AppendAnalyticsEventConfigArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendAnalyticsEventConfigArray(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray, const TCHAR* ConfigSection, const TCHAR* ConfigKey, const FString& IniFileName, const TCHAR* AnalyticsKeyNameOverride = nullptr)"
  },
  {
    "label": "HasDefaultBuildSettings()",
    "kind": "Method",
    "detail": "Function (private : TPimplPtr<Audio::FAudioFormatSettings> AudioFormatSettings ; bool)",
    "insertText": "HasDefaultBuildSettings()"
  },
  {
    "label": "DoProjectSettingsMatchDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoProjectSettingsMatchDefault(const FString& InPlatformName, const FString& InSection, const TArray<FString>* InBoolKeys, const TArray<FString>* InIntKeys, const TArray<FString>* InStringKeys)"
  },
  {
    "label": "IsUsable()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsUsable()"
  },
  {
    "label": "TTargetPlatformBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTargetPlatformBase() : TTargetPlatformBase( new PlatformInfo::FTargetPlatformInfo( TPlatformProperties::IniPlatformName(), TPlatformProperties::HasEditorOnlyData() ? EBuildTargetType::Editor : TPlatformProperties::IsServerOnly() ? EBuildTargetType::Server : TPlatformProperties::IsClientOnly() ? EBuildTargetType::Client : EBuildTargetType::Game, TEXT(\"\")))"
  },
  {
    "label": "HasEditorOnlyData()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "HasEditorOnlyData()"
  },
  {
    "label": "IsLittleEndian()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLittleEndian()"
  },
  {
    "label": "IsServerOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsServerOnly()"
  },
  {
    "label": "IsClientOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsClientOnly()"
  },
  {
    "label": "PlatformName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "PlatformName()"
  },
  {
    "label": "IniPlatformName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "IniPlatformName()"
  },
  {
    "label": "CookingDeviceProfileName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "CookingDeviceProfileName()"
  },
  {
    "label": "RequiresCookedData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresCookedData()"
  },
  {
    "label": "RequiresOriginalReleaseVersionForPatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresOriginalReleaseVersionForPatch()"
  },
  {
    "label": "HasSecurePackageFormat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSecurePackageFormat()"
  },
  {
    "label": "RequiresUserCredentials()",
    "kind": "Method",
    "detail": "Function (} EPlatformAuthentication)",
    "insertText": "RequiresUserCredentials()"
  },
  {
    "label": "GetRuntimePlatformType()",
    "kind": "Method",
    "detail": "Function (} EBuildTargetType)",
    "insertText": "GetRuntimePlatformType()"
  },
  {
    "label": "SupportsFeature()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsFeature(ETargetPlatformFeatures Feature)"
  },
  {
    "label": "GetZlibReplacementFormat()",
    "kind": "Method",
    "detail": "Function (} return false ; } FName)",
    "insertText": "GetZlibReplacementFormat()"
  },
  {
    "label": "GetMemoryMappingAlignment()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetMemoryMappingAlignment()"
  },
  {
    "label": "GetPhysicsFormat()",
    "kind": "Method",
    "detail": "Function (} return false ; } # if WITH_ENGINE FName)",
    "insertText": "GetPhysicsFormat(class UBodySetup* Body)"
  },
  {
    "label": "TNonDesktopTargetPlatformBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TNonDesktopTargetPlatformBase(bool bInIsClientOnly, const TCHAR* CookFlavor=nullptr, const TCHAR* OverrideIniPlatformName=nullptr) : TTargetPlatformBase<TPlatformProperties>(new PlatformInfo::FTargetPlatformInfo( OverrideIniPlatformName ? FString(OverrideIniPlatformName) : FString(TPlatformProperties::IniPlatformName()), bInIsClientOnly ? EBuildTargetType::Client : EBuildTargetType::Game, CookFlavor)) , bIsClientOnly(bInIsClientOnly)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddDevice(const FString& DeviceId, const FString& DeviceUserFriendlyName, const FString& Username, const FString& Password, bool bDefault)"
  },
  {
    "label": "CheckRequirements()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CheckRequirements(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FString& OutTutorialPath, FString& OutDocumentationPath, FText& CustomizedLogMessage)"
  },
  {
    "label": "GetTargetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (} const PlatformInfo::FTargetPlatformInfo&)",
    "insertText": "GetTargetPlatformInfo()"
  },
  {
    "label": "GetPlatformInfo()",
    "kind": "Method",
    "detail": "Function (} const FDataDrivenPlatformInfo&)",
    "insertText": "GetPlatformInfo()"
  },
  {
    "label": "GetConfigSystem()",
    "kind": "Method",
    "detail": "Function (} FConfigCacheIni*)",
    "insertText": "GetConfigSystem()"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableDeviceCheck(bool OnOff)"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "EnableDeviceCheck(OnOff)"
  },
  {
    "label": "GetAllDevices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllDevices(TArray<ITargetDevicePtr>& OutDevices)"
  },
  {
    "label": "GetAllDevices()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetAllDevices(OutDevices)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GenerateStreamingInstallManifest(const TMultiMap<FString, int32>& PakchunkMap, const TSet<int32>& PakchunkIndicesInUse)"
  },
  {
    "label": "GetDefaultDevice()",
    "kind": "Method",
    "detail": "Function (} ITargetDevicePtr)",
    "insertText": "GetDefaultDevice()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (} ITargetDevicePtr)",
    "insertText": "GetDevice(const FTargetDeviceId& DeviceId)"
  },
  {
    "label": "AllowsEditorObjects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowsEditorObjects()"
  },
  {
    "label": "IsRunningPlatform()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRunningPlatform()"
  },
  {
    "label": "CanSupportRemoteShaderCompile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanSupportRemoteShaderCompile()"
  },
  {
    "label": "GetShaderCompilerDependencies()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderCompilerDependencies(TArray<FString>& OutDependencies)"
  },
  {
    "label": "GetShaderCompilerDependencies()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetShaderCompilerDependencies(OutDependencies)"
  },
  {
    "label": "SupportsAutoSDK()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsAutoSDK()"
  },
  {
    "label": "SupportsBuildTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsBuildTarget(EBuildTargetType TargetType)"
  },
  {
    "label": "UsesBasePassVelocity()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesBasePassVelocity()"
  },
  {
    "label": "GetAllPossibleShaderFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllPossibleShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetAllPossibleShaderFormats()",
    "kind": "Method",
    "detail": "Function (TargetPlatformSettings ->)",
    "insertText": "GetAllPossibleShaderFormats(OutFormats)"
  },
  {
    "label": "GetAllTargetedShaderFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllTargetedShaderFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetAllTargetedShaderFormats()",
    "kind": "Method",
    "detail": "Function (TargetPlatformSettings ->)",
    "insertText": "GetAllTargetedShaderFormats(OutFormats)"
  },
  {
    "label": "GetRayTracingShaderFormats()",
    "kind": "Method",
    "detail": "Function (TargetPlatformSettings ->)",
    "insertText": "GetRayTracingShaderFormats(OutFormats)"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetPlatformSpecificProjectAnalytics(AnalyticsParamArray)"
  },
  {
    "label": "GetReflectionCaptureFormats()",
    "kind": "Method",
    "detail": "Function (TargetPlatformSettings ->)",
    "insertText": "GetReflectionCaptureFormats(OutFormats)"
  },
  {
    "label": "GetShaderFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderFormatModuleHints(TArray<FName>& OutModuleNames)"
  },
  {
    "label": "GetShaderFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (TargetPlatformSettings ->)",
    "insertText": "GetShaderFormatModuleHints(OutModuleNames)"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTextureFormats(const class UTexture* Texture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetTextureFormats(Texture, OutFormats)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetAllTextureFormats(OutFormats)"
  },
  {
    "label": "GetTextureSizeLimits()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetTextureSizeLimits(OutMaximumSurfaceBytes,OutMaximumPackageBytes)"
  },
  {
    "label": "GetTextureFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetTextureFormatModuleHints(OutModuleNames)"
  },
  {
    "label": "SupportsLQCompressionTextureFormat()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsLQCompressionTextureFormat()"
  },
  {
    "label": "GetAllWaveFormats()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetAllWaveFormats(OutFormats)"
  },
  {
    "label": "GetWaveFormatModuleHints()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetWaveFormatModuleHints(OutModuleNames)"
  },
  {
    "label": "AllowAudioVisualData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowAudioVisualData()"
  },
  {
    "label": "GetTextureLODSettings()",
    "kind": "Method",
    "detail": "Function (} const class UTextureLODSettings&)",
    "insertText": "GetTextureLODSettings()"
  },
  {
    "label": "RegisterTextureLODSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterTextureLODSettings(const class UTextureLODSettings* InTextureLODSettings)"
  },
  {
    "label": "RegisterTextureLODSettings()",
    "kind": "Method",
    "detail": "Function (TargetPlatformSettings ->)",
    "insertText": "RegisterTextureLODSettings(InTextureLODSettings)"
  },
  {
    "label": "GetStaticMeshLODSettings()",
    "kind": "Method",
    "detail": "Function (} const class FStaticMeshLODSettings&)",
    "insertText": "GetStaticMeshLODSettings()"
  },
  {
    "label": "GetMeshBuilderModuleName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetMeshBuilderModuleName()"
  },
  {
    "label": "PackageBuild()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "PackageBuild(const FString& InPackgeDirectory)"
  },
  {
    "label": "GetVariantPriority()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetVariantPriority()"
  },
  {
    "label": "GetBuildProjectSettingKeys()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetBuildProjectSettingKeys(OutSection, InBoolKeys, InIntKeys, InStringKeys)"
  },
  {
    "label": "GetCustomWidgetCreator()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IDeviceManagerCustomPlatformWidgetCreator>)",
    "insertText": "GetCustomWidgetCreator()"
  },
  {
    "label": "CopyFileToTarget()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CopyFileToTarget(const FString& DeviceId, const FString& HostFilename, const FString& TargetFilename, const TMap<FString, FString>& CustomPlatformData)"
  },
  {
    "label": "InitializeForCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeForCook()"
  },
  {
    "label": "GetExtraPackagesToCook()",
    "kind": "Method",
    "detail": "Function (TargetPlatformControls ->)",
    "insertText": "GetExtraPackagesToCook(PackageNames)"
  },
  {
    "label": "FTargetPlatformMerged()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "FTargetPlatformMerged()"
  }
]