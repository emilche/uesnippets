[
  {
    "label": "aseq_negate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "aseq_negate"
  },
  {
    "label": "aseq_reverse_first_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "aseq_reverse_first_type"
  },
  {
    "label": "aseq_reverse_first_type_aux",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "aseq_reverse_first_type_aux"
  },
  {
    "label": "cleanup_seq_incr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cleanup_seq_incr"
  },
  {
    "label": "ArithmeticSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArithmeticSequence"
  },
  {
    "label": "make_size_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_size_type"
  },
  {
    "label": "IndexedViewCompatibleType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IndexedViewCompatibleType"
  },
  {
    "label": "get_compile_time_incr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "get_compile_time_incr"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ARITHMETIC_SEQUENCE_H # define EIGEN_ARITHMETIC_SEQUENCE_H namespace Eigen { namespace internal { #)",
    "insertText": "if(!EIGEN_HAS_CXX11) || !((!EIGEN_COMP_GNUC) || EIGEN_COMP_GNUC>=48)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct aseq_negate<Index> { typedef Index type ; } ; template<int N> struct aseq_negate<FixedInt<N>> { typedef FixedInt<- N> type ; } ; template<> struct aseq_negate<FixedInt<DynamicIndex>> { } ; template<FirstType,SizeType,IncrType,bool FirstIsSymbolic = symbolic::is_symbolic<FirstType>::value,bool SizeIsSymbolic = symbolic::is_symbolic<SizeType>::value> struct aseq_reverse_first_type { typedef Index type ; } ; template<FirstType,SizeType,IncrType> struct aseq_reverse_first_type<FirstType,SizeType,IncrType,true,true> { typedef symbolic::AddExpr<FirstType,symbolic::ProductExpr<symbolic::AddExpr<SizeType,symbolic::ValueExpr<FixedInt<- 1>>>,symbolic::ValueExpr<IncrType>>> type ; } ; template<SizeType,IncrType,EnableIf = void> struct aseq_reverse_first_type_aux { typedef Index type ; } ; template<SizeType,IncrType> struct aseq_reverse_first_type_aux<SizeType,IncrType,internal::enable_if<)",
    "insertText": "bool((SizeType::value+IncrType::value)|0x1)"
  },
  {
    "label": "FixedInt()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FixedInt(SizeType::value-1)"
  },
  {
    "label": "seqN()",
    "kind": "Method",
    "detail": "Function (} ; template<FirstType,SizeType,IncrType> struct aseq_reverse_first_type<FirstType,SizeType,IncrType,true,false> { typedef aseq_reverse_first_type_aux<SizeType,IncrType>::type Aux ; typedef symbolic::AddExpr<FirstType,symbolic::ValueExpr<Aux>> type ; } ; template<FirstType,SizeType,IncrType> struct aseq_reverse_first_type<FirstType,SizeType,IncrType,false,true> { typedef symbolic::AddExpr<symbolic::ProductExpr<symbolic::AddExpr<SizeType,symbolic::ValueExpr<FixedInt<- 1>>>,symbolic::ValueExpr<IncrType>>,symbolic::ValueExpr<>> type ; } ; # endif template<T> struct cleanup_seq_incr { typedef cleanup_index_type<T,DynamicIndex>::type type ; } ; } template<FirstType = Index,SizeType = Index,IncrType = internal::FixedInt<1>> class ArithmeticSequence ; template<FirstType,SizeType,IncrType> ArithmeticSequence<internal::cleanup_index_type<FirstType>::type,internal::cleanup_index_type<SizeType>::type,internal::cleanup_seq_incr<IncrType>::type>)",
    "insertText": "seqN(FirstType first, SizeType size, IncrType incr)"
  },
  {
    "label": "ArithmeticSequence()",
    "kind": "Method",
    "detail": "Function (template<FirstType,SizeType,IncrType> class ArithmeticSequence { public :)",
    "insertText": "ArithmeticSequence(FirstType first, SizeType size) : m_first(first), m_size(size)"
  },
  {
    "label": "ArithmeticSequence()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ArithmeticSequence(FirstType first, SizeType size, IncrType incr) : m_first(first), m_size(size), m_incr(incr)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} enum { SizeAtCompileTime = internal::get_fixed_value<SizeType>::value,IncrAtCompileTime = internal::get_fixed_value<IncrType,DynamicIndex>::value } ; Index)",
    "insertText": "size()"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (} # else protected : typedef internal::aseq_negate<IncrType>::type ReverseIncrType ; typedef internal::aseq_reverse_first_type<FirstType,SizeType,IncrType>::type ReverseFirstType ; public : ArithmeticSequence<ReverseFirstType,SizeType,ReverseIncrType>)",
    "insertText": "reverse()"
  },
  {
    "label": "seqN()",
    "kind": "Method",
    "detail": "Function (} template<FirstType,SizeType> ArithmeticSequence<internal::cleanup_index_type<FirstType>::type,internal::cleanup_index_type<SizeType>::type>)",
    "insertText": "seqN(FirstType first, SizeType size)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_PARSED_BY_DOXYGEN template<FirstType,LastType,IncrType> auto)",
    "insertText": "seq(FirstType f, LastType l, IncrType incr)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (template<FirstType,LastType> auto)",
    "insertText": "seq(FirstType f, LastType l)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (# else # if EIGEN_HAS_CXX11 template<FirstType,LastType> auto)",
    "insertText": "seq(FirstType f, LastType l) -> decltype(seqN(typename internal::cleanup_index_type<FirstType>::type(f), ( typename internal::cleanup_index_type<LastType>::type(l) - typename internal::cleanup_index_type<FirstType>::type(f)+fix<1>())))"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} template<FirstType,LastType,IncrType> auto)",
    "insertText": "seq(FirstType f, LastType l, IncrType incr) -> decltype(seqN(typename internal::cleanup_index_type<FirstType>::type(f), ( typename internal::cleanup_index_type<LastType>::type(l) - typename internal::cleanup_index_type<FirstType>::type(f)+typename internal::cleanup_seq_incr<IncrType>::type(incr) ) / typename internal::cleanup_seq_incr<IncrType>::type(incr), typename internal::cleanup_seq_incr<IncrType>::type(incr)))"
  },
  {
    "label": "seqN()",
    "kind": "Method",
    "detail": "Function (typedef internal::cleanup_seq_incr<IncrType>::type CleanedIncrType ; return)",
    "insertText": "seqN(typename internal::cleanup_index_type<FirstType>::type(f), ( typename internal::cleanup_index_type<LastType>::type(l) -typename internal::cleanup_index_type<FirstType>::type(f)+CleanedIncrType(incr)) / CleanedIncrType(incr), CleanedIncrType(incr))"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} # else template<FirstType,LastType>)",
    "insertText": "enable_if(symbolic::is_symbolic<FirstType>::value || symbolic::is_symbolic<LastType>::value), ArithmeticSequence<typename internal::cleanup_index_type<FirstType>::type,Index> >::type seq(FirstType f, LastType l)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} template<FirstTypeDerived,LastType> internal::enable_if<! symbolic::is_symbolic<LastType>::value,ArithmeticSequence<FirstTypeDerived,symbolic::AddExpr<symbolic::AddExpr<symbolic::NegateExpr<FirstTypeDerived>,symbolic::ValueExpr<>>,symbolic::ValueExpr<internal::FixedInt<1>>>>>::type)",
    "insertText": "seq(const symbolic::BaseExpr<FirstTypeDerived> &f, LastType l)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} template<FirstType,LastTypeDerived> internal::enable_if<! symbolic::is_symbolic<FirstType>::value,ArithmeticSequence<internal::cleanup_index_type<FirstType>::type,symbolic::AddExpr<symbolic::AddExpr<LastTypeDerived,symbolic::ValueExpr<>>,symbolic::ValueExpr<internal::FixedInt<1>>>>>::type)",
    "insertText": "seq(FirstType f, const symbolic::BaseExpr<LastTypeDerived> &l)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} template<FirstTypeDerived,LastTypeDerived> ArithmeticSequence<FirstTypeDerived,symbolic::AddExpr<symbolic::AddExpr<LastTypeDerived,symbolic::NegateExpr<FirstTypeDerived>>,symbolic::ValueExpr<internal::FixedInt<1>>>>)",
    "insertText": "seq(const symbolic::BaseExpr<FirstTypeDerived> &f, const symbolic::BaseExpr<LastTypeDerived> &l)"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (} template<FirstType,LastType,IncrType>)",
    "insertText": "enable_if(symbolic::is_symbolic<FirstType>::value || symbolic::is_symbolic<LastType>::value), ArithmeticSequence<typename internal::cleanup_index_type<FirstType>::type,Index,typename internal::cleanup_seq_incr<IncrType>::type> >::type seq(FirstType f, LastType l, IncrType incr)"
  },
  {
    "label": "seqN()",
    "kind": "Method",
    "detail": "Function (typedef internal::cleanup_seq_incr<IncrType>::type CleanedIncrType ; return)",
    "insertText": "seqN(typename internal::cleanup_index_type<FirstType>::type(f), Index((typename internal::cleanup_index_type<LastType>::type(l)-typename internal::cleanup_index_type<FirstType>::type(f)+CleanedIncrType(incr))/CleanedIncrType(incr)), incr)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} template<FirstTypeDerived,LastType,IncrType> internal::enable_if<! symbolic::is_symbolic<LastType>::value,ArithmeticSequence<FirstTypeDerived,symbolic::QuotientExpr<symbolic::AddExpr<symbolic::AddExpr<symbolic::NegateExpr<FirstTypeDerived>,symbolic::ValueExpr<>>,symbolic::ValueExpr<internal::cleanup_seq_incr<IncrType>::type>>,symbolic::ValueExpr<internal::cleanup_seq_incr<IncrType>::type>>,internal::cleanup_seq_incr<IncrType>::type>>::type)",
    "insertText": "seq(const symbolic::BaseExpr<FirstTypeDerived> &f, LastType l, IncrType incr)"
  },
  {
    "label": "seqN()",
    "kind": "Method",
    "detail": "Function (typedef internal::cleanup_seq_incr<IncrType>::type CleanedIncrType ; return)",
    "insertText": "seqN(f.derived(),(typename internal::cleanup_index_type<LastType>::type(l)-f.derived()+CleanedIncrType(incr))/CleanedIncrType(incr), incr)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} template<FirstType,LastTypeDerived,IncrType> internal::enable_if<! symbolic::is_symbolic<FirstType>::value,ArithmeticSequence<internal::cleanup_index_type<FirstType>::type,symbolic::QuotientExpr<symbolic::AddExpr<symbolic::AddExpr<LastTypeDerived,symbolic::ValueExpr<>>,symbolic::ValueExpr<internal::cleanup_seq_incr<IncrType>::type>>,symbolic::ValueExpr<internal::cleanup_seq_incr<IncrType>::type>>,internal::cleanup_seq_incr<IncrType>::type>>::type)",
    "insertText": "seq(FirstType f, const symbolic::BaseExpr<LastTypeDerived> &l, IncrType incr)"
  },
  {
    "label": "seqN()",
    "kind": "Method",
    "detail": "Function (typedef internal::cleanup_seq_incr<IncrType>::type CleanedIncrType ; return)",
    "insertText": "seqN(typename internal::cleanup_index_type<FirstType>::type(f), (l.derived()-typename internal::cleanup_index_type<FirstType>::type(f)+CleanedIncrType(incr))/CleanedIncrType(incr), incr)"
  },
  {
    "label": "seq()",
    "kind": "Method",
    "detail": "Function (} template<FirstTypeDerived,LastTypeDerived,IncrType> ArithmeticSequence<FirstTypeDerived,symbolic::QuotientExpr<symbolic::AddExpr<symbolic::AddExpr<LastTypeDerived,symbolic::NegateExpr<FirstTypeDerived>>,symbolic::ValueExpr<internal::cleanup_seq_incr<IncrType>::type>>,symbolic::ValueExpr<internal::cleanup_seq_incr<IncrType>::type>>,internal::cleanup_seq_incr<IncrType>::type>)",
    "insertText": "seq(const symbolic::BaseExpr<FirstTypeDerived> &f, const symbolic::BaseExpr<LastTypeDerived> &l, IncrType incr)"
  },
  {
    "label": "seqN()",
    "kind": "Method",
    "detail": "Function (typedef internal::cleanup_seq_incr<IncrType>::type CleanedIncrType ; return)",
    "insertText": "seqN(f.derived(),(l.derived()-f.derived()+CleanedIncrType(incr))/CleanedIncrType(incr), incr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # endif # endif # if EIGEN_HAS_CXX11 | |)",
    "insertText": "defined(EIGEN_PARSED_BY_DOXYGEN) template<typename SizeType,typename IncrType> auto lastN(SizeType size, IncrType incr) -> decltype(seqN(Eigen::last-(size-fix<1>())*incr, size, incr))"
  },
  {
    "label": "lastN()",
    "kind": "Method",
    "detail": "Function (} template<SizeType> auto)",
    "insertText": "lastN(SizeType size) -> decltype(seqN(Eigen::last+fix<1>()-size, size))"
  },
  {
    "label": "makeIndexedViewCompatible()",
    "kind": "Method",
    "detail": "Function (} # endif namespace internal { template<T> struct make_size_type { typedef internal::conditional<symbolic::is_symbolic<T>::value,Index,T>::type type ; } ; template<FirstType,SizeType,IncrType,int XprSize> struct IndexedViewCompatibleType<ArithmeticSequence<FirstType,SizeType,IncrType>,XprSize> { typedef ArithmeticSequence<Index,make_size_type<SizeType>::type,IncrType> type ; } ; template<FirstType,SizeType,IncrType> ArithmeticSequence<Index,make_size_type<SizeType>::type,IncrType>)",
    "insertText": "makeIndexedViewCompatible(const ArithmeticSequence<FirstType,SizeType,IncrType>& ids, Index size,SpecializedType)"
  }
]