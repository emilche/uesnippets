[
  {
    "label": "DScheme",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DScheme"
  },
  {
    "label": "DDScheme",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DDScheme"
  },
  {
    "label": "BiasedGradientScheme",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BiasedGradientScheme"
  },
  {
    "label": "TemporalIntegrationScheme",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TemporalIntegrationScheme"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1"
  },
  {
    "label": "D1Vec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1Vec"
  },
  {
    "label": "D1Vec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1Vec"
  },
  {
    "label": "D1Vec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1Vec"
  },
  {
    "label": "D1Vec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1Vec"
  },
  {
    "label": "D1Vec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D1Vec"
  },
  {
    "label": "D2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D2"
  },
  {
    "label": "D2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D2"
  },
  {
    "label": "D2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D2"
  },
  {
    "label": "D2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "D2"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "zero(0)"
  },
  {
    "label": "simdSum()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "simdSum(const simd::Float4& v)"
  },
  {
    "label": "_mm_cvtss_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtss_f32(temp)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (simd::Float4)",
    "insertText": "zero(0.0)"
  },
  {
    "label": "simdSum()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "simdSum(v)"
  },
  {
    "label": "inX()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inX(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inY()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inY(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inZ()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inZ(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inX()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inX(const Stencil& S)"
  },
  {
    "label": "inY()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inY(const Stencil& S)"
  },
  {
    "label": "inZ()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inZ(const Stencil& S)"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "difference()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "difference(V[0], V[1], V[2], V[3], V[4], V[5])"
  },
  {
    "label": "inX()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inX(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inY()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inY(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inZ()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inZ(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inXandY()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inXandY(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inXandZ()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inXandZ(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inYandZ()",
    "kind": "Method",
    "detail": "Function (Accessor::ValueType)",
    "insertText": "inYandZ(const Accessor& grid, const Coord& ijk)"
  },
  {
    "label": "inX()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inX(const Stencil& S)"
  },
  {
    "label": "inY()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inY(const Stencil& S)"
  },
  {
    "label": "inZ()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inZ(const Stencil& S)"
  },
  {
    "label": "inXandY()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inXandY(const Stencil& S)"
  },
  {
    "label": "inXandZ()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inXandZ(const Stencil& S)"
  },
  {
    "label": "inYandZ()",
    "kind": "Method",
    "detail": "Function (Stencil::ValueType)",
    "insertText": "inYandZ(const Stencil& S)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueT(0.75*tmp1 - 0.15*tmp2 + 1./60*tmp3)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueT(0.75*tmp1 - 0.15*tmp2 + 1./60*tmp3)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueT(0.75*tmp1 - 0.15*tmp2 + 1./60*tmp3)"
  }
]