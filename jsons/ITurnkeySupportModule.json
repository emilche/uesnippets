[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTurnkeySdkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTurnkeySdkInfo"
  },
  {
    "label": "Version",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Version"
  },
  {
    "label": "ITurnkeySupportModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITurnkeySupportModule"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Modules / ModuleManager . h \" # include \" Modules / ModuleManager . h \" # ifndef UE_WITH_TURNKEY_SUPPORT # define UE_WITH_TURNKEY_SUPPORT 1 # endif # if UE_WITH_TURNKEY_SUPPORT class SWidget ; enum class ETurnkeyPlatformSdkStatus : uint8 { Unknown,Querying,Valid,OutOfDate,NoSdk,Error,} ; enum class ETurnkeyDeviceStatus : uint8 { Unknown,InvalidPrerequisites,SoftwareValid,SoftwareInvalid,} ; enum class ETurnkeyDeviceAutoSoftwareUpdateMode : uint8 { Unknown,Disabled,Enabled,} ; struct FTurnkeySdkInfo { struct Version { FString Min,Max,Current ; } ; ETurnkeyPlatformSdkStatus Status = ETurnkeyPlatformSdkStatus::Unknown ; ETurnkeyDeviceStatus DeviceStatus = ETurnkeyDeviceStatus::Unknown ; ETurnkeyDeviceAutoSoftwareUpdateMode DeviceAutoSoftwareUpdates = ETurnkeyDeviceAutoSoftwareUpdateMode::Unknown ; FText SdkErrorInformation ; TMap<FString,Version> SDKVersions ; bool bCanInstallFullSdk ; bool bCanInstallAutoSdk ; bool bHasBestSdk ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnQuickLaunchSelected, FString)"
  },
  {
    "label": "MakeTurnkeyMenu()",
    "kind": "Method",
    "detail": "Function (class ITurnkeySupportModule : public IModuleInterface { public : void)",
    "insertText": "MakeTurnkeyMenu(struct FToolMenuSection& MenuSection)"
  },
  {
    "label": "MakeQuickLaunchItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeQuickLaunchItems(class UToolMenu* Menu, FOnQuickLaunchSelected ExternalOnClickDelegate)"
  },
  {
    "label": "MakeSimulatorItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeSimulatorItems(class UToolMenu* Menu, FOnQuickLaunchSelected ExternalOnClickDelegate)"
  },
  {
    "label": "RepeatQuickLaunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepeatQuickLaunch(FString DeviceId)"
  },
  {
    "label": "UpdateSdkInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSdkInfo()"
  },
  {
    "label": "UpdateSdkInfoForDevices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSdkInfoForDevices(TArray<FString> DeviceIds)"
  },
  {
    "label": "GetSdkInfo()",
    "kind": "Method",
    "detail": "Function (FTurnkeySdkInfo)",
    "insertText": "GetSdkInfo(FName PlatformName, bool bBlockIfQuerying = true)"
  },
  {
    "label": "GetSdkInfoForDeviceId()",
    "kind": "Method",
    "detail": "Function (FTurnkeySdkInfo)",
    "insertText": "GetSdkInfoForDeviceId(const FString& DeviceId)"
  },
  {
    "label": "ClearDeviceStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDeviceStatus(FName PlatformName=NAME_None)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : ITurnkeySupportModule&)",
    "insertText": "Get()"
  },
  {
    "label": "ITurnkeySupportModule()",
    "kind": "Method",
    "detail": "Function (const FName TurnkeySupportModuleName = \" TurnkeySupport \" ; return FModuleManager::LoadModuleChecked<)",
    "insertText": "ITurnkeySupportModule(TurnkeySupportModuleName)"
  },
  {
    "label": "ITurnkeySupportModule()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "ITurnkeySupportModule()"
  }
]