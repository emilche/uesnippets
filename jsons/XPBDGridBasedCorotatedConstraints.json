[
  {
    "label": "FXPBDGridBasedCorotatedConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDGridBasedCorotatedConstraints"
  },
  {
    "label": "FXPBDGridBasedCorotatedConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSpringConstraintsBase . h \" # include \" Chaos / XPBDCorotatedConstraints . h \" # include \" ChaosStats . h \" # include \" Chaos / ImplicitQRSVD . h \" # include \" Chaos / GraphColoring . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / MPMTransfer . h \" # include \" Misc / FileHelper . h \" # include \" HAL / PlatformFileManager . h \" # include \" Misc / Paths . h \" namespace Chaos::Softs { template<T,ParticleType> class FXPBDGridBasedCorotatedConstraints : public FXPBDCorotatedConstraints<T,ParticleType> { typedef FXPBDCorotatedConstraints<T,ParticleType> Base ; using Base::MeshConstraints ; using Base::LambdaArray ; using Base::Measure ; using Base::DmInverse ; using Base::Mu ; using Base::Init ; using Base::Lambda ; public :)",
    "insertText": "FXPBDGridBasedCorotatedConstraints(const ParticleType& InParticles, const TArray<TVector<int32, 4>>& InMesh, const T GridDx = (T).1, const bool bRecordMetricIn = true, const T MaxDtIn = (T).1, const T MinDtIn = (T).01, const T CFLCoeffIn = (T).4, const T& EMesh = (T)1000.0, const T& NuMesh = (T).3 ) : Base(InParticles, InMesh, GridDx, EMesh, NuMesh), MaxDt(MaxDtIn), MinDt(MinDtIn), CFLCoeff(CFLCoeffIn), MPMGrid(GridDx), MPMTransfer(MPMGrid, InParticles.Size()), PreviousColoring(nullptr)"
  },
  {
    "label": "UpdateGridFromPositions()",
    "kind": "Method",
    "detail": "Function (MPMGrid .)",
    "insertText": "UpdateGridFromPositions(InParticles)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (LambdaArray .)",
    "insertText": "Init((T)0., 2 * MeshConstraints.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (DmInverse .)",
    "insertText": "Init((T)0., 9 * MeshConstraints.Num())"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Measure .)",
    "insertText": "Init((T)0., MeshConstraints.Num())"
  },
  {
    "label": "NuMesh()",
    "kind": "Method",
    "detail": "Function (Lambda = EMesh*)",
    "insertText": "NuMesh(((T)1. + NuMesh) * ((T)1. - (T)2. * NuMesh))"
  },
  {
    "label": "EMesh()",
    "kind": "Method",
    "detail": "Function (Mu =)",
    "insertText": "EMesh((T)2. * ((T)1. + NuMesh))"
  },
  {
    "label": "DsInit()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> Dm =)",
    "insertText": "DsInit(e, InParticles)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> DmInv = Dm .)",
    "insertText": "Inverse()"
  },
  {
    "label": "DmInverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DmInverse(3 * 3) * e + 3 * r + c] = DmInv.GetAt(r, c)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (} } Measure [ e ] = Dm .)",
    "insertText": "Determinant() / (T)"
  },
  {
    "label": "ComputeGraphColoringAllDynamic()",
    "kind": "Method",
    "detail": "Function (Measure [ e ] = - Measure [ e ] ; } } ElementsPerColor =)",
    "insertText": "ComputeGraphColoringAllDynamic(MeshConstraints, InParticles)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InParticles, (T)0.)"
  },
  {
    "label": "WriteGridNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteGridNodes()"
  },
  {
    "label": "ProjectDir()",
    "kind": "Method",
    "detail": "Function (FString file =)",
    "insertText": "ProjectDir()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (file .)",
    "insertText": "Append(TEXT(\"/HoudiniOutput/GridData.geo\"))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<TVector<T,3>> ActivatedGridNodes ;)",
    "insertText": "for(int32 i = 0; i < MPMGrid.Size(); i++)"
  },
  {
    "label": "Node()",
    "kind": "Method",
    "detail": "Function (TVector<T,3> GridNode = MPMGrid .)",
    "insertText": "Node(i)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ActivatedGridNodes .)",
    "insertText": "Emplace(GridNode)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } int32 Np = ActivatedGridNodes .)",
    "insertText": "Num()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IPlatformFile& FileManager =)",
    "insertText": "Get().GetPlatformFile()"
  },
  {
    "label": "SaveStringToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStringToFile(FString(TEXT(\"PGEOMETRY V5\\r\\n\")), *file)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString HeaderInfo =)",
    "insertText": "FString(TEXT(\"NPoints \")) + FString::FromInt(Np) + FString(TEXT(\" NPrims \")) + FString::FromInt(0) + FString(TEXT(\"\\r\\n\"))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (FString MoreHeader =)",
    "insertText": "FString(TEXT(\"NPointGroups 0 NPrimGroups 0\\r\\nNPointAttrib 0 NVertexAttrib 0 NPrimAttrib 0 NAttrib 0\\r\\n\"))"
  },
  {
    "label": "SaveStringToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStringToFile(HeaderInfo, *file, FFileHelper::EEncodingOptions::AutoDetect, &IFileManager::Get(), EFileWrite::FILEWRITE_Append)"
  },
  {
    "label": "SaveStringToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStringToFile(MoreHeader, *file, FFileHelper::EEncodingOptions::AutoDetect, &IFileManager::Get(), EFileWrite::FILEWRITE_Append)"
  },
  {
    "label": "SanitizeFloat()",
    "kind": "Method",
    "detail": "Function (FString ParticleInfo =)",
    "insertText": "SanitizeFloat(ActivatedGridNodes[i][0]) + FString(TEXT(\" \")) + FString::SanitizeFloat(ActivatedGridNodes[i][1]) + FString(TEXT(\" \")) + FString::SanitizeFloat(ActivatedGridNodes[i][2]) + FString(TEXT(\" \")) + FString::FromInt(1) + FString(TEXT(\"\\r\\n\"))"
  },
  {
    "label": "SaveStringToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStringToFile(ParticleInfo, *file, FFileHelper::EEncodingOptions::AutoDetect, &IFileManager::Get(), EFileWrite::FILEWRITE_Append)"
  },
  {
    "label": "SaveStringToFile()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SaveStringToFile(FString(TEXT(\"beginExtra\\n\")), *file, FFileHelper::EEncodingOptions::AutoDetect, &IFileManager::Get(), EFileWrite::FILEWRITE_Append)"
  },
  {
    "label": "SaveStringToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveStringToFile(FString(TEXT(\"endExtra\\n\")), *file, FFileHelper::EEncodingOptions::AutoDetect, &IFileManager::Get(), EFileWrite::FILEWRITE_Append)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const ParticleType& InParticles, const T Dt)"
  },
  {
    "label": "Lambdas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lambdas(T)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotatedUpdateGrid)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotatedInitialP2G)"
  },
  {
    "label": "InitialP2G()",
    "kind": "Method",
    "detail": "Function (MPMTransfer .)",
    "insertText": "InitialP2G(InParticles, GridData)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotatedMetaDataComputation)"
  },
  {
    "label": "ComputeElementMetaData()",
    "kind": "Method",
    "detail": "Function (MPMTransfer .)",
    "insertText": "ComputeElementMetaData(MeshConstraints)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotatedSubcoloring)"
  },
  {
    "label": "ComputeGridBasedGraphSubColoringPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGridBasedGraphSubColoringPointer(ElementsPerColor, MPMTransfer.Grid, MPMTransfer.Grid.Size(), PreviousColoring, MPMTransfer.ElementGridNodesSet, ElementsPerSubColors)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotatedComputeGridPositions)"
  },
  {
    "label": "ComputeGridPositions()",
    "kind": "Method",
    "detail": "Function (MPMTransfer .)",
    "insertText": "ComputeGridPositions(GridData, Dt, GridPositions)"
  },
  {
    "label": "TimeStepPostprocessing()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "TimeStepPostprocessing(ParticleType& InParticles, const T Dt)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotatedGrid::FinalG2P)"
  },
  {
    "label": "FinalG2P()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalG2P(InParticles)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotated::GridPositions2GridData)"
  },
  {
    "label": "GridPositionsToGridData()",
    "kind": "Method",
    "detail": "Function (MPMTransfer .)",
    "insertText": "GridPositionsToGridData(GridPositions, Dt, GridData)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(STAT_ChaosXPBDGridBasedCorotated::ComputeAArray)"
  },
  {
    "label": "ComputeAArray()",
    "kind": "Method",
    "detail": "Function (MPMTransfer .)",
    "insertText": "ComputeAArray(GridData, InParticles)"
  },
  {
    "label": "ComputeCFLDt()",
    "kind": "Method",
    "detail": "Function (} } T)",
    "insertText": "ComputeCFLDt(const ParticleType& InParticles)"
  },
  {
    "label": "VMax()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "VMax(T)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (T VMag = InParticles .)",
    "insertText": "V(p).Size()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VMax = VMag ; } })",
    "insertText": "if(VMax > 1e5)"
  },
  {
    "label": "SparseG2P()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> XPosFromGrid = MPMTransfer .)",
    "insertText": "SparseG2P(GridPositions, ElementIndex)"
  },
  {
    "label": "C1()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "C1(T)"
  },
  {
    "label": "GetPolarGradient()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> PolarGradient =)",
    "insertText": "GetPolarGradient(XPosFromGrid, ElementIndex, C1)"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "AlphaTilde(T)1. / (Dt * Dt * Mu * Measure[ElementIndex])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T DeltaLambda = - C1 - AlphaTilde* LambdaArray [ 2* ElementIndex + 0 ] ; T Denom = AlphaTilde ;)",
    "insertText": "for(int32 k = 0; k < MPMTransfer.ElementGridNodeIncidentElements[ElementIndex].Num(); k++)"
  },
  {
    "label": "GridData()",
    "kind": "Method",
    "detail": "Function (T Mass =)",
    "insertText": "GridData(MPMTransfer.NTransfer + 1)"
  },
  {
    "label": "ApplyDet()",
    "kind": "Method",
    "detail": "Function (GridPositions [ CurrentNode ] [ alpha ] + = DeltaLambda* GridGradient [ k ] [ alpha ] / Mass ; } } } } void)",
    "insertText": "ApplyDet(ParticleType& Particles, const T Dt, const int32 ElementIndex)"
  },
  {
    "label": "C2()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "C2(T)"
  },
  {
    "label": "GetDetGradient()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>> DetGradient =)",
    "insertText": "GetDetGradient(XPosFromGrid, ElementIndex, C2)"
  },
  {
    "label": "AlphaTilde()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "AlphaTilde(T)2. / (Dt * Dt * Lambda * Measure[ElementIndex])"
  },
  {
    "label": "ApplyInParallel()",
    "kind": "Method",
    "detail": "Function (GridPositions [ CurrentNode ] [ alpha ] + = DeltaLambda* GridGradient [ k ] [ alpha ] / Mass ; } } } } void)",
    "insertText": "ApplyInParallel(ParticleType& Particles, const T Dt)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(ElementsPerSubColors[color][subcolor].Num(), [&](const int32 ColorIndex) { const int32 ElementIndex = ElementsPerSubColors[color][subcolor][ColorIndex]; ApplyPolar(Particles, Dt, ElementIndex); ApplyDet(Particles, Dt, ElementIndex); }, ElementsPerSubColors[color][subcolor].Num() < 30)"
  },
  {
    "label": "Ds()",
    "kind": "Method",
    "detail": "Function (} } } private : PMatrix<T,3,3>)",
    "insertText": "Ds(const TVec4<TVector<T, 3>>& LocalPositions)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Result((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "SetAt(c, i, LocalPositions[i+1][c] - LocalPositions[0][c])"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } PMatrix<T,3,3>)",
    "insertText": "F(const TVec4<TVector<T, 3>>& LocalPositions, const int32 ElementIndex)"
  },
  {
    "label": "GetPolarGradient()",
    "kind": "Method",
    "detail": "Function (} TVec4<TVector<T,3>>)",
    "insertText": "GetPolarGradient(const TVec4<TVector<T, 3>>& LocalPositions, const int32 ElementIndex, T& Constraint, const T Tol = T(1e-4))"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> Fe =)",
    "insertText": "F(LocalPositions, ElementIndex)"
  },
  {
    "label": "Re()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "Re((T)0.), Se((T)0.)"
  },
  {
    "label": "PolarDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PolarDecomposition(Fe, Re, Se)"
  },
  {
    "label": "Square()",
    "kind": "Method",
    "detail": "Function (C1 + =)",
    "insertText": "Square((Fe - Re).GetAt(i, j))"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} } C1 =)",
    "insertText": "Sqrt(C1)"
  },
  {
    "label": "Constraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Constraint(T)"
  },
  {
    "label": "ElementDmInv()",
    "kind": "Method",
    "detail": "Function (} Constraint = C1 ; PMatrix<T,3,3> DmInvT =)",
    "insertText": "ElementDmInv(ElementIndex).GetTransposed()"
  },
  {
    "label": "dRdF()",
    "kind": "Method",
    "detail": "Function (TVector<T,8 1>)",
    "insertText": "dRdF((T)0.)"
  },
  {
    "label": "dRdFCorotated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dRdFCorotated(Fe, dRdF)"
  },
  {
    "label": "dC1()",
    "kind": "Method",
    "detail": "Function (TVec4<TVector<T,3>>)",
    "insertText": "dC1(TVector<T, 3>((T)0.))"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (dC1 [ 0 ] [)",
    "insertText": "alpha(DmInvT * Re).GetAt(alpha, l) - (DmInvT * Fe).GetAt(alpha, l)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int ie = 0; ie < 3; ie++)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (dC1 [ ie + 1 ] [)",
    "insertText": "alpha(DmInvT * Fe).GetAt(alpha, ie) - (DmInvT * Re).GetAt(alpha, ie)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (dC1 [ ie + 1 ] [)",
    "insertText": "alpha(Fe.GetAt(m, n) - Re.GetAt(m, n)) * dRdF[9 * (alpha * 3 + j) + m * 3 + n] * DmInvT.GetAt(j, ie)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "for(int alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (dC1 [ 0 ] [)",
    "insertText": "alpha(Fe.GetAt(m, n) - Re.GetAt(m, n)) * dRdF[9 * (alpha * 3 + j) + m * 3 + n] * DmInvT.GetAt(j, l)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "if(C1 != 0)"
  },
  {
    "label": "GetDetGradient()",
    "kind": "Method",
    "detail": "Function (dC1 [ i ] [ j ] / = C1 ; } } } return dC1 ; } TVec4<TVector<T,3>>)",
    "insertText": "GetDetGradient(const TVec4<TVector<T, 3>>& LocalPositions, const int32 ElementIndex, T& Constraint, const T Tol = T(1e-4))"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (T J = Fe .)",
    "insertText": "Determinant()"
  },
  {
    "label": "dC2()",
    "kind": "Method",
    "detail": "Function (} Constraint = J - 1 ; TVec4<TVector<T,3>>)",
    "insertText": "dC2(TVector<T, 3>((T)0.))"
  },
  {
    "label": "JFinvT()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3>)",
    "insertText": "JFinvT((T)0.)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 0, Fe.GetAt(1, 1) * Fe.GetAt(2, 2) - Fe.GetAt(2, 1) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 1, Fe.GetAt(2, 0) * Fe.GetAt(1, 2) - Fe.GetAt(1, 0) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(0, 2, Fe.GetAt(1, 0) * Fe.GetAt(2, 1) - Fe.GetAt(2, 0) * Fe.GetAt(1, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 0, Fe.GetAt(2, 1) * Fe.GetAt(0, 2) - Fe.GetAt(0, 1) * Fe.GetAt(2, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 1, Fe.GetAt(0, 0) * Fe.GetAt(2, 2) - Fe.GetAt(2, 0) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(1, 2, Fe.GetAt(2, 0) * Fe.GetAt(0, 1) - Fe.GetAt(0, 0) * Fe.GetAt(2, 1))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 0, Fe.GetAt(0, 1) * Fe.GetAt(1, 2) - Fe.GetAt(1, 1) * Fe.GetAt(0, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 1, Fe.GetAt(1, 0) * Fe.GetAt(0, 2) - Fe.GetAt(0, 0) * Fe.GetAt(1, 2))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (JFinvT .)",
    "insertText": "SetAt(2, 2, Fe.GetAt(0, 0) * Fe.GetAt(1, 1) - Fe.GetAt(1, 0) * Fe.GetAt(0, 1))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PMatrix<T,3,3> JinvTDmInvT = DmInvT* JFinvT ;)",
    "insertText": "for(int32 ie = 0; ie < 3; ie++)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (dC2 [ ie + 1 ] [ alpha ] = JinvTDmInvT .)",
    "insertText": "GetAt(alpha, ie)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(int32 alpha = 0; alpha < 3; alpha++)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (dC2 [ 0 ] [ alpha ] - = JinvTDmInvT .)",
    "insertText": "GetAt(alpha, l)"
  },
  {
    "label": "FinalG2P()",
    "kind": "Method",
    "detail": "Function (} } return dC2 ; } void)",
    "insertText": "FinalG2P(ParticleType& Particles)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Particles.Size(), [&](const int32 p) { Particles.P(p) = TVec3<T>((T)0.); for (int32 ii = 0; ii < int32(MPMGrid.NPerDir); ii++) { T Nii = MPMGrid.Nijk(MPMTransfer.Weights[p][0], ii); for (int32 jj = 0; jj < int32(MPMGrid.NPerDir); jj++) { T Njj = MPMGrid.Nijk(MPMTransfer.Weights[p][1], jj); for (int32 kk = 0; kk < int32(MPMGrid.NPerDir); kk++) { T Nkk = MPMGrid.Nijk(MPMTransfer.Weights[p][2], kk); TVector<int32, 3> LocIndex = { ii, jj, kk }; TVector<int32, 3> GlobIndex = MPMGrid.Loc2GlobIndex(MPMTransfer.Indices[p], LocIndex); int32 GlobIndexFlat = MPMGrid.FlatIndex(GlobIndex); Particles.P(p) += Nii * Njj * Nkk * GridPositions[GlobIndexFlat]; } } } }, Particles.Size() < 50)"
  }
]