[
  {
    "label": "FMemoryLayoutUtil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryLayoutUtil"
  },
  {
    "label": "FLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLayout"
  },
  {
    "label": "FOffsetAndSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOffsetAndSize"
  },
  {
    "label": "FSizeAndAlignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSizeAndAlignment"
  },
  {
    "label": "GetTotalSizeIncludingAlignment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMathUtility . h \" # include \" Templates / AlignmentTemplates . h \" struct FMemoryLayoutUtil { struct FLayout { SIZE_T CurrentOffset = 0 ; SIZE_T MaxAlignment = 1 ; } ; struct FOffsetAndSize { SIZE_T Offset ; SIZE_T Size ; } ; struct FSizeAndAlignment { SIZE_T Size = 0 ; SIZE_T Alignment = 0 ; } ; SIZE_T)",
    "insertText": "GetTotalSizeIncludingAlignment(const FLayout& Layout)"
  },
  {
    "label": "AddToLayout()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToLayout(FLayout& Layout, FOffsetAndSize& OutOffsetAndSize, SIZE_T ItemSize, SIZE_T ItemAlignment, SIZE_T ItemCount)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const SIZE_T CurrentAlignedOffset =)",
    "insertText": "Align(Layout.CurrentOffset, ItemAlignment)"
  },
  {
    "label": "SIZE_T()",
    "kind": "Method",
    "detail": "Function (const SIZE_T TotalItemSize = ItemSize* ItemCount ; OutOffsetAndSize . Offset = CurrentAlignedOffset ; OutOffsetAndSize . Size = TotalItemSize ; Layout . CurrentOffset = CurrentAlignedOffset + TotalItemSize ; Layout . MaxAlignment = FMath::Max<)",
    "insertText": "SIZE_T(ItemAlignment, Layout.MaxAlignment)"
  },
  {
    "label": "AddToLayout()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "AddToLayout(FLayout& Layout, FOffsetAndSize& OutOffsetAndSize, SIZE_T Count)"
  },
  {
    "label": "AddToLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToLayout(Layout, OutOffsetAndSize, sizeof(T), alignof(T), Count)"
  }
]