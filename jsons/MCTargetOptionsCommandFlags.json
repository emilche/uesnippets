[
  {
    "label": "AsmInstrumentation()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCTARGETOPTIONSCOMMANDFLAGS_H # define LLVM_MC_MCTARGETOPTIONSCOMMANDFLAGS_H # include \" llvm / MC / MCTargetOptions . h \" # include \" llvm / Support / CommandLine . h \" using namespace llvm ; cl::opt<MCTargetOptions::AsmInstrumentation>)",
    "insertText": "AsmInstrumentation(\"asm-instrumentation\", cl::desc(\"Instrumentation of inline assembly and \" \"assembly source files\"), cl::init(MCTargetOptions::AsmInstrumentationNone), cl::values(clEnumValN(MCTargetOptions::AsmInstrumentationNone, \"none\", \"no instrumentation at all\"), clEnumValN(MCTargetOptions::AsmInstrumentationAddress, \"address\", \"instrument instructions with memory arguments\"), clEnumValEnd))"
  },
  {
    "label": "RelaxAll()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "RelaxAll(\"mc-relax-all\", cl::desc(\"When used with filetype=obj, \" \"relax all fixups in the emitted object file\"))"
  },
  {
    "label": "DwarfVersion()",
    "kind": "Method",
    "detail": "Function (cl::opt<int>)",
    "insertText": "DwarfVersion(\"dwarf-version\", cl::desc(\"Dwarf version\"), cl::init(0))"
  },
  {
    "label": "ShowMCInst()",
    "kind": "Method",
    "detail": "Function (cl::opt<bool>)",
    "insertText": "ShowMCInst(\"asm-show-inst\", cl::desc(\"Emit internal instruction representation to \" \"assembly file\"))"
  },
  {
    "label": "ABIName()",
    "kind": "Method",
    "detail": "Function (cl::opt<std::string>)",
    "insertText": "ABIName(\"target-abi\", cl::Hidden, cl::desc(\"The name of the ABI to be targeted from the backend.\"), cl::init(\"\"))"
  },
  {
    "label": "InitMCTargetOptionsFromFlags()",
    "kind": "Method",
    "detail": "Function (MCTargetOptions)",
    "insertText": "InitMCTargetOptionsFromFlags()"
  },
  {
    "label": "SanitizeAddress()",
    "kind": "Method",
    "detail": "Function (MCTargetOptions Options ; Options .)",
    "insertText": "SanitizeAddress(AsmInstrumentation == MCTargetOptions::AsmInstrumentationAddress)"
  }
]