[
  {
    "label": "TGeneralPolygon2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TGeneralPolygon2"
  },
  {
    "label": "TPolygon2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPolygon2"
  },
  {
    "label": "FDelaunay2Connectivity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelaunay2Connectivity"
  },
  {
    "label": "FDelaunay2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDelaunay2"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BoxTypes . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreMinimal . h \" # include \" Curve / GeneralPolygon2 . h \" # include \" HAL / PlatformCrt . h \" # include \" IndexTypes . h \" # include \" IndexTypes . h \" # include \" LineTypes . h \" # include \" Math / RandomStream . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" MathUtil . h \" # include \" PlaneTypes . h \" # include \" Polygon2 . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" VectorTypes . h \" namespace UE { namespace Geometry { template<T> class TGeneralPolygon2 ; template<T> class TPolygon2 ; using namespace UE::Math ; struct FDelaunay2Connectivity ; class FDelaunay2 { public : enum class EResult { Success,NotComputed,EmptyInput,Collinear,MissingEdges,Unknown } ; enum class EFillMode { Solid,PositiveWinding,NonZeroWinding,NegativeWinding,OddWinding } ; FRandomStream RandomStream ; bool bKeepFastEdgeAdjacencyData = false ; bool bValidateEdges = true ; bool bAutomaticallyFixEdgesToDuplicateVertices = false ; bool)",
    "insertText": "Triangulate(TArrayView<const TVector2<double>> Vertices, TArrayView<const FIndex2i> Edges = TArrayView<const FIndex2i>())"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Triangulate(TArrayView<const TVector2<float>> Vertices, TArrayView<const FIndex2i> Edges = TArrayView<const FIndex2i>())"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (template<RealType> bool)",
    "insertText": "Triangulate(const TPolygon2<RealType>& Polygon, TArray<FIndex3i>* TrianglesOut = nullptr)"
  },
  {
    "label": "VertexCount()",
    "kind": "Method",
    "detail": "Function (int32 NumVertices = Polygon .)",
    "insertText": "VertexCount()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<FIndex2i> Edges ; Edges .)",
    "insertText": "Reserve(NumVertices - 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Edges .)",
    "insertText": "Add(FIndex2i(Last, Idx))"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (} bool bSuccess =)",
    "insertText": "Triangulate(Polygon.GetVertices(), Edges)"
  },
  {
    "label": "GetFilledTriangles()",
    "kind": "Method",
    "detail": "Function (* TrianglesOut =)",
    "insertText": "GetFilledTriangles(Edges, EFillMode::Solid)"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (} return bSuccess ; } template<RealType> bool)",
    "insertText": "Triangulate(const TGeneralPolygon2<RealType>& GeneralPolygon, TArray<FIndex3i>* TrianglesOut = nullptr, TArray<TVector2<RealType>>* VerticesOut = nullptr, bool bFallbackToGeneralizedWinding = false)"
  },
  {
    "label": "AllEdges()",
    "kind": "Method",
    "detail": "Function (TArray<TVector2<RealType>> AllVertices ; TArray<FIndex2i> AllEdges ; auto AppendVertices = [& AllVertices,&)",
    "insertText": "AllEdges(const TArray<TVector2<RealType>>& Vertices)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (AllVertices .)",
    "insertText": "Append(Vertices)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (AllEdges .)",
    "insertText": "Reserve(AllEdges.Num() + Vertices.Num() - 1)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 NumVertices = Vertices .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AllEdges .)",
    "insertText": "Add(FIndex2i(StartIdx + Last, StartIdx + Idx))"
  },
  {
    "label": "AppendVertices()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "AppendVertices(GeneralPolygon.GetOuter().GetVertices())"
  },
  {
    "label": "AppendVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendVertices(GeneralPolygon.GetHoles()[HoleIdx].GetVertices())"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (} bool bSuccess =)",
    "insertText": "Triangulate(AllVertices, AllEdges)"
  },
  {
    "label": "OuterIsClockwise()",
    "kind": "Method",
    "detail": "Function (EFillMode FillMode = GeneralPolygon .)",
    "insertText": "OuterIsClockwise()"
  },
  {
    "label": "GetFilledTriangles()",
    "kind": "Method",
    "detail": "Function (* TrianglesOut =)",
    "insertText": "GetFilledTriangles(AllEdges, FillMode)"
  },
  {
    "label": "GetFilledTrianglesGeneralizedWinding()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "GetFilledTrianglesGeneralizedWinding(*TrianglesOut, AllVertices, AllEdges, FillMode)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(VerticesOut)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* VerticesOut =)",
    "insertText": "MoveTemp(AllVertices)"
  },
  {
    "label": "ConstrainEdges()",
    "kind": "Method",
    "detail": "Function (} return bSuccess ; } bool)",
    "insertText": "ConstrainEdges(TArrayView<const TVector2<double>> Vertices, TArrayView<const FIndex2i> Edges)"
  },
  {
    "label": "ConstrainEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConstrainEdges(TArrayView<const TVector2<float>> Vertices, TArrayView<const FIndex2i> Edges)"
  },
  {
    "label": "GetTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<FIndex3i>)",
    "insertText": "GetTriangles()"
  },
  {
    "label": "GetTrianglesAndAdjacency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTrianglesAndAdjacency(TArray<FIndex3i>& Triangles, TArray<FIndex3i>& Adjacency)"
  },
  {
    "label": "GetFilledTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<FIndex3i>)",
    "insertText": "GetFilledTriangles(TArrayView<const FIndex2i> Edges, EFillMode FillMode = EFillMode::PositiveWinding)"
  },
  {
    "label": "GetFilledTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<FIndex3i> Triangles ;)",
    "insertText": "GetFilledTriangles(Triangles, Edges, FillMode)"
  },
  {
    "label": "GetFilledTrianglesGeneralizedWinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFilledTrianglesGeneralizedWinding(TArray<FIndex3i>& TrianglesOut, TArrayView<const TVector2<double>> Vertices, TArrayView<const FIndex2i> Edges, EFillMode FillMode = EFillMode::PositiveWinding)"
  },
  {
    "label": "GetFilledTrianglesGeneralizedWinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFilledTrianglesGeneralizedWinding(TArray<FIndex3i>& TrianglesOut, TArrayView<const TVector2<float>> Vertices, TArrayView<const FIndex2i> Edges, EFillMode FillMode = EFillMode::PositiveWinding)"
  },
  {
    "label": "GetFilledTriangles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFilledTriangles(TArray<FIndex3i>& TrianglesOut, TArrayView<const FIndex2i> BoundaryEdges, TArrayView<const FIndex2i> HoleEdges)"
  },
  {
    "label": "IsConstrained()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstrained()"
  },
  {
    "label": "IsDelaunay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDelaunay(TArrayView<const FVector2d> Vertices, TArrayView<const FIndex2i> SkipEdges = TArrayView<const FIndex2i>())"
  },
  {
    "label": "HasEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEdges(TArrayView<const FIndex2i> Edges)"
  },
  {
    "label": "FixDuplicatesOnEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixDuplicatesOnEdge(FIndex2i& Edge)"
  },
  {
    "label": "HasEdge()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEdge(const FIndex2i& Edge, bool bRemapDuplicates)"
  },
  {
    "label": "HasDuplicates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDuplicates()"
  },
  {
    "label": "RemapIfDuplicate()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemapIfDuplicate(int32 Index)"
  },
  {
    "label": "GetVoronoiCells()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FVector2d>>)",
    "insertText": "GetVoronoiCells(TArrayView<const FVector2d> Vertices, bool bIncludeBoundary = false, FAxisAlignedBox2d ClipBounds = FAxisAlignedBox2d::Empty(), double ExpandBounds = 0.0)"
  },
  {
    "label": "GetVoronoiCells()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<FVector2f>>)",
    "insertText": "GetVoronoiCells(TArrayView<const FVector2f> Vertices, bool bIncludeBoundary = false, FAxisAlignedBox2f ClipBounds = FAxisAlignedBox2f::Empty(), float ExpandBounds = 0.0f)"
  },
  {
    "label": "ComputeVoronoiCells()",
    "kind": "Method",
    "detail": "Function (template<RealType> TArray<TArray<TVector2<RealType>>>)",
    "insertText": "ComputeVoronoiCells(TArrayView<const TVector2<RealType>> Sites, bool bIncludeBoundary = false, TAxisAlignedBox2<RealType> ClipBounds = FAxisAlignedBox2f::Empty(), RealType ExpandBounds = (RealType)0)"
  },
  {
    "label": "Triangulate()",
    "kind": "Method",
    "detail": "Function (FDelaunay2 Delaunay ; Delaunay .)",
    "insertText": "Triangulate(Sites)"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (} EResult)",
    "insertText": "GetResult()"
  },
  {
    "label": "ValidateEdgesResult()",
    "kind": "Method",
    "detail": "Function (} private : EResult Result = EResult::NotComputed ; bool)",
    "insertText": "ValidateEdgesResult(TArrayView<const FIndex2i> Edges)"
  }
]