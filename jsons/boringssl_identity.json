[
  {
    "label": "BoringSSLIdentity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BoringSSLIdentity"
  },
  {
    "label": "CreateWithExpiration()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_BORINGSSL_IDENTITY_H_ # define RTC_BASE_BORINGSSL_IDENTITY_H_ # include<openssl / ossl_typ . h> # include<ctime> # include<memory> # include<string> # include \" absl / strings / string_view . h \" # include \" rtc_base / boringssl_certificate . h \" # include \" rtc_base / openssl_key_pair . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_identity . h \" namespace rtc { class BoringSSLIdentity final : public SSLIdentity { public : std::unique_ptr<BoringSSLIdentity>)",
    "insertText": "CreateWithExpiration(absl::string_view common_name, const KeyParams& key_params, time_t certificate_lifetime)"
  },
  {
    "label": "CreateForTest()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<BoringSSLIdentity>)",
    "insertText": "CreateForTest(const SSLIdentityParams& params)"
  },
  {
    "label": "CreateFromPEMStrings()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateFromPEMStrings(absl::string_view private_key, absl::string_view certificate)"
  },
  {
    "label": "CreateFromPEMChainStrings()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CreateFromPEMChainStrings(absl::string_view private_key, absl::string_view certificate_chain)"
  },
  {
    "label": "BoringSSLIdentity()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BoringSSLIdentity()"
  },
  {
    "label": "BoringSSLIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoringSSLIdentity(const BoringSSLIdentity&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BoringSSLIdentity&)",
    "insertText": "operator(const BoringSSLIdentity&)"
  },
  {
    "label": "certificate()",
    "kind": "Method",
    "detail": "Function (const BoringSSLCertificate&)",
    "insertText": "certificate()"
  },
  {
    "label": "cert_chain()",
    "kind": "Method",
    "detail": "Function (const SSLCertChain&)",
    "insertText": "cert_chain()"
  },
  {
    "label": "ConfigureIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConfigureIdentity(SSL_CTX* ctx)"
  },
  {
    "label": "PrivateKeyToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PrivateKeyToPEMString()"
  },
  {
    "label": "PublicKeyToPEMString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "PublicKeyToPEMString()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const BoringSSLIdentity& other)"
  },
  {
    "label": "BoringSSLIdentity()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "BoringSSLIdentity(std::unique_ptr<OpenSSLKeyPair> key_pair, std::unique_ptr<BoringSSLCertificate> certificate)"
  },
  {
    "label": "BoringSSLIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoringSSLIdentity(std::unique_ptr<OpenSSLKeyPair> key_pair, std::unique_ptr<SSLCertChain> cert_chain)"
  },
  {
    "label": "CloneInternal()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLIdentity>)",
    "insertText": "CloneInternal()"
  },
  {
    "label": "CreateInternal()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<BoringSSLIdentity>)",
    "insertText": "CreateInternal(const SSLIdentityParams& params)"
  }
]