[
  {
    "label": "blocked_range2d",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "blocked_range2d"
  },
  {
    "label": "blocked_range2d()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_blocked_range2d_H # define __TBB_blocked_range2d_H # include \" tbb_stddef . h \" # include \" blocked_range . h \" namespace tbb { template<RowValue,ColValue = RowValue> class blocked_range2d { public : typedef blocked_range<RowValue> row_range_type ; typedef blocked_range<ColValue> col_range_type ; private : row_range_type my_rows ; col_range_type my_cols ; public :)",
    "insertText": "blocked_range2d(RowValue row_begin, RowValue row_end, typename row_range_type::size_type row_grainsize, ColValue col_begin, ColValue col_end, typename col_range_type::size_type col_grainsize ) : my_rows(row_begin,row_end,row_grainsize), my_cols(col_begin,col_end,col_grainsize)"
  },
  {
    "label": "blocked_range2d()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "blocked_range2d(RowValue row_begin, RowValue row_end, ColValue col_begin, ColValue col_end ) : my_rows(row_begin,row_end), my_cols(col_begin,col_end)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "is_divisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_divisible()"
  },
  {
    "label": "blocked_range2d()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "blocked_range2d(blocked_range2d& r, split ) : my_rows(r.my_rows), my_cols(r.my_cols)"
  },
  {
    "label": "do_split()",
    "kind": "Method",
    "detail": "Function (split split_obj ;)",
    "insertText": "do_split(r, split_obj)"
  },
  {
    "label": "blocked_range2d()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_USE_PROPORTIONAL_SPLIT_IN_BLOCKED_RANGES const bool is_splittable_in_proportion = true ;)",
    "insertText": "blocked_range2d(blocked_range2d& r, proportional_split& proportion ) : my_rows(r.my_rows), my_cols(r.my_cols)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} # endif const row_range_type&)",
    "insertText": "rows()"
  },
  {
    "label": "do_split()",
    "kind": "Method",
    "detail": "Function (my_cols . my_begin =)",
    "insertText": "do_split(r.my_cols, split_obj)"
  },
  {
    "label": "do_split()",
    "kind": "Method",
    "detail": "Function (} else { my_rows . my_begin =)",
    "insertText": "do_split(r.my_rows, split_obj)"
  }
]