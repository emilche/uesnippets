[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FJsonValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValue"
  },
  {
    "label": "FJsonValueString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValueString"
  },
  {
    "label": "FJsonValueNumber",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValueNumber"
  },
  {
    "label": "FJsonValueNumberString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValueNumberString"
  },
  {
    "label": "FJsonValueBoolean",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValueBoolean"
  },
  {
    "label": "FJsonValueArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValueArray"
  },
  {
    "label": "FJsonValueObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValueObject"
  },
  {
    "label": "FJsonValueNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonValueNull"
  },
  {
    "label": "AsNumber()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Misc / CString . h \" # include \" Serialization / JsonTypes . h \" # include \" Templates / SharedPointer . h \" class FJsonObject ; class FJsonValue { public : double)",
    "insertText": "AsNumber()"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "AsString()"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsBool()"
  },
  {
    "label": "AsArray()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedPtr<FJsonValue>>&)",
    "insertText": "AsArray()"
  },
  {
    "label": "AsObject()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FJsonObject>&)",
    "insertText": "AsObject()"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(double& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(int8& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(int16& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(int32& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(int64& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(uint8& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(uint16& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(uint32& OutNumber)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetNumber(uint64& OutNumber)"
  },
  {
    "label": "TryGetString()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetString(FString& OutString)"
  },
  {
    "label": "AsArgumentType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AsArgumentType(FString & Value)"
  },
  {
    "label": "AsArgumentType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AsArgumentType(bool & Value)"
  },
  {
    "label": "AsArgumentType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AsArgumentType(TArray< TSharedPtr<FJsonValue> >& Value)"
  },
  {
    "label": "AsArgumentType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AsArgumentType(TSharedPtr<FJsonObject> & Value)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetMemoryFootprint()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} EJson Type ; TSharedPtr<FJsonValue>)",
    "insertText": "Duplicate(const TSharedPtr<const FJsonValue>& Src)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonValue>)",
    "insertText": "Duplicate(const TSharedPtr<FJsonValue>& Src)"
  },
  {
    "label": "CompareEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareEqual(const FJsonValue& Lhs, const FJsonValue& Rhs)"
  },
  {
    "label": "FJsonValue()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FJsonValue() : Type(EJson::None)"
  },
  {
    "label": "FJsonValue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FJsonValue()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetType()"
  },
  {
    "label": "ErrorMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ErrorMessage(const FString& InType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FJsonValue& Lhs, const FJsonValue& Rhs)"
  },
  {
    "label": "FJsonValueString()",
    "kind": "Method",
    "detail": "Function (} } ; class FJsonValueString : public FJsonValue { public :)",
    "insertText": "FJsonValueString(const FString& InString) : Value(InString)"
  },
  {
    "label": "FJsonValueString()",
    "kind": "Method",
    "detail": "Function (Type = EJson::String ; })",
    "insertText": "FJsonValueString(FString&& InString) : Value(MoveTemp(InString))"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (OutString = Value ; return true ; } bool)",
    "insertText": "TryGetNumber(double& OutDouble)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (OutDouble =)",
    "insertText": "Atod(*Value)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(OutValue, *Value)"
  },
  {
    "label": "ToBool()",
    "kind": "Method",
    "detail": "Function (OutBool = Value .)",
    "insertText": "ToBool()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "FJsonValueNumber()",
    "kind": "Method",
    "detail": "Function (} } ; class FJsonValueNumber : public FJsonValue { public :)",
    "insertText": "FJsonValueNumber(double InNumber) : Value(InNumber)"
  },
  {
    "label": "TryGetBool()",
    "kind": "Method",
    "detail": "Function (OutNumber = Value ; return true ; } bool)",
    "insertText": "TryGetBool(bool& OutBool)"
  },
  {
    "label": "OutBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutBool(Value != 0.0)"
  },
  {
    "label": "SanitizeFloat()",
    "kind": "Method",
    "detail": "Function (OutString =)",
    "insertText": "SanitizeFloat(Value, 0)"
  },
  {
    "label": "FJsonValueNumberString()",
    "kind": "Method",
    "detail": "Function (} } ; class FJsonValueNumberString : public FJsonValue { public :)",
    "insertText": "FJsonValueNumberString(const FString& InString) : Value(InString)"
  },
  {
    "label": "FJsonValueNumberString()",
    "kind": "Method",
    "detail": "Function (Type = EJson::Number ; })",
    "insertText": "FJsonValueNumberString(FString&& InString) : Value(MoveTemp(InString))"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(float &OutDouble)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(int8& OutValue)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(int16& OutValue)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(int32& OutValue)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(int64& OutValue)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(uint8& OutValue)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(uint16& OutValue)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(uint32& OutValue)"
  },
  {
    "label": "TryGetNumber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryGetNumber(uint64& OutValue)"
  },
  {
    "label": "FJsonValueBoolean()",
    "kind": "Method",
    "detail": "Function (} } ; class FJsonValueBoolean : public FJsonValue { public :)",
    "insertText": "FJsonValueBoolean(bool InBool) : Value(InBool)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (OutString = Value ?)",
    "insertText": "TEXT(\"true\") : TEXT(\"false\")"
  },
  {
    "label": "FJsonValueArray()",
    "kind": "Method",
    "detail": "Function (} } ; class FJsonValueArray : public FJsonValue { public :)",
    "insertText": "FJsonValueArray(const TArray< TSharedPtr<FJsonValue> >& InArray) : Value(InArray)"
  },
  {
    "label": "FJsonValueArray()",
    "kind": "Method",
    "detail": "Function (Type = EJson::Array ; })",
    "insertText": "FJsonValueArray(TArray< TSharedPtr<FJsonValue> >&& InArray) : Value(MoveTemp(InArray))"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (Type = EJson::Array ; } bool)",
    "insertText": "TryGetArray(const TArray< TSharedPtr<FJsonValue> >*& OutArray)"
  },
  {
    "label": "TryGetArray()",
    "kind": "Method",
    "detail": "Function (OutArray =& Value ; return true ; } bool)",
    "insertText": "TryGetArray(TArray< TSharedPtr<FJsonValue> >*& OutArray)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (SizeBytes + = Element .)",
    "insertText": "IsValid() ? Element->GetMemoryFootprint()"
  },
  {
    "label": "FJsonValueObject()",
    "kind": "Method",
    "detail": "Function (} return SizeBytes ; } } ; class FJsonValueObject : public FJsonValue { public :)",
    "insertText": "FJsonValueObject(TSharedPtr<FJsonObject> InObject) : Value(MoveTemp(InObject))"
  },
  {
    "label": "TryGetObject()",
    "kind": "Method",
    "detail": "Function (Type = EJson::Object ; } bool)",
    "insertText": "TryGetObject(const TSharedPtr<FJsonObject>*& OutObject)"
  },
  {
    "label": "TryGetObject()",
    "kind": "Method",
    "detail": "Function (OutObject =& Value ; return true ; } bool)",
    "insertText": "TryGetObject(TSharedPtr<FJsonObject>*& OutObject)"
  },
  {
    "label": "FJsonValueNull()",
    "kind": "Method",
    "detail": "Function (} ; class FJsonValueNull : public FJsonValue { public :)",
    "insertText": "FJsonValueNull()"
  },
  {
    "label": "ToSimpleJsonVariant()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE::Json { template<T,= std::enable_if<! std::is_same_v<T,FJsonValue>>> JsonSimpleValueVariant)",
    "insertText": "ToSimpleJsonVariant(const T& InSimpleValue)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using InSimpleValueType = std::decay_t<)",
    "insertText": "decltype(InSimpleValue)"
  },
  {
    "label": "JsonSimpleValueVariant()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "JsonSimpleValueVariant(TInPlaceType<JsonNumberValueVariants>(), JsonNumberValueVariants(TInPlaceType<T>(), InSimpleValue))"
  },
  {
    "label": "ToSimpleJsonVariant()",
    "kind": "Method",
    "detail": "Function (} } JsonSimpleValueVariant)",
    "insertText": "ToSimpleJsonVariant(const FJsonValue& InJsonValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InJsonValue.Type == EJson::Number)"
  },
  {
    "label": "ToSimpleJsonVariant()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "ToSimpleJsonVariant(FMath::RoundToInt64(JsonNumber_v))"
  },
  {
    "label": "JsonSimpleValueVariant()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "JsonSimpleValueVariant(TInPlaceType<FString>(), InJsonValue.AsString())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const JsonNumberValueVariants& Lhs, const FString& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FString& Lhs, const JsonNumberValueVariants& Rhs)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(const JsonNumberValueVariants& InNumberVariant)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const JsonNumberValueVariants& Lhs, const JsonNumberValueVariants& Rhs)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const bool bLhsIsFloat = Lhs . IsType<)",
    "insertText": "float() || Lhs.IsType<double>()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const bool bRhsIsFloat = Rhs . IsType<)",
    "insertText": "float() || Rhs.IsType<double>()"
  },
  {
    "label": "CastToInt64Functor()",
    "kind": "Method",
    "detail": "Function (} else { auto)",
    "insertText": "CastToInt64Functor(auto& StoredNumber)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} ; const int64 LhsValue)",
    "insertText": "Visit(CastToInt64Functor, Lhs)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (const int64 RhsValue)",
    "insertText": "Visit(CastToInt64Functor, Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const JsonSimpleValueVariant& Lhs, const JsonSimpleValueVariant& Rhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Rhs.IsType<FString>())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} else { return Rhs . Get<)",
    "insertText": "FString().Equals(TEXT(\"false\"), ESearchCase::IgnoreCase) || Rhs.Get<FString>().Equals(TEXT(\"0\"), ESearchCase::IgnoreCase)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "Visit([&Lhs](const auto& RhsStoredNumber) { using RhsStoredNumberType = std::decay_t<decltype(RhsStoredNumber)>; if constexpr (std::is_same_v<RhsStoredNumberType, float> || std::is_same_v<RhsStoredNumberType, double>) { if (!FString::SanitizeFloat(RhsStoredNumber, 0).Contains(TEXT(\".\"))) { const int64 RhsStoredNumberAsInt = FMath::RoundToInt64(RhsStoredNumber); if (Lhs.Get<bool>()) { return RhsStoredNumberAsInt == 1; } else { return RhsStoredNumberAsInt == 0; } } else { return false; } } else { if (Lhs.Get<bool>()) { return RhsStoredNumber == 1; } else { return RhsStoredNumber == 0; } } }, Rhs.Get<JsonNumberValueVariants>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(Lhs.IsType<JsonNumberValueVariants>())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Rhs.IsType<bool>())"
  }
]