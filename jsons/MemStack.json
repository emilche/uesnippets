[
  {
    "label": "EMemZeroed",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemZeroed"
  },
  {
    "label": "EMemOned",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemOned"
  },
  {
    "label": "FPageAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPageAllocator"
  },
  {
    "label": "FMemStackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemStackBase"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMemMark",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemMark"
  },
  {
    "label": "FTaggedMemory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTaggedMemory"
  },
  {
    "label": "CORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CORE_API"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TMemStackAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMemStackAllocator"
  },
  {
    "label": "ForElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForElementType"
  },
  {
    "label": "TAllocatorTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAllocatorTraits"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / LockFreeFixedSizeAllocator . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" HAL / MemoryBase . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" HAL / ThreadSingleton . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Misc / NoopCounter . h \" # include \" Templates / AlignmentTemplates . h \" # include \" Templates / UnrealTemplate . h \" enum EMemZeroed { MEM_Zeroed = 1 } ; enum EMemOned { MEM_Oned = 1 } ; class FPageAllocator { public : enum { PageSize = 6 4* 1 0 2 4,SmallPageSize = 1 0 2 4 - 1 6 } ; # if UE_BUILD_SHIPPING typedef TLockFreeFixedSizeAllocator<PageSize,PLATFORM_CACHE_LINE_SIZE,FNoopCounter> TPageAllocator ; # else typedef TLockFreeFixedSizeAllocator<PageSize,PLATFORM_CACHE_LINE_SIZE,FThreadSafeCounter> TPageAllocator ; # endif FPageAllocator&)",
    "insertText": "Get()"
  },
  {
    "label": "FPageAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPageAllocator()"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Mem)"
  },
  {
    "label": "AllocSmall()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "AllocSmall()"
  },
  {
    "label": "FreeSmall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeSmall(void* Mem)"
  },
  {
    "label": "BytesUsed()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "BytesUsed()"
  },
  {
    "label": "BytesFree()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "BytesFree()"
  },
  {
    "label": "LatchProtectedMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LatchProtectedMode()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (private : FPageAllocator* Instance ; FPageAllocator&)",
    "insertText": "Construct()"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (# if STATS void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "FMemStackBase()",
    "kind": "Method",
    "detail": "Function (# endif TPageAllocator TheAllocator ; } ; class FMemStackBase { public : enum class EPageSize : uint8 { Small,Large } ;)",
    "insertText": "FMemStackBase(EPageSize PageSize = EPageSize::Small)"
  },
  {
    "label": "FMemStackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMemStackBase(const FMemStackBase&)"
  },
  {
    "label": "FMemStackBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMemStackBase(FMemStackBase&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FMemStackBase&)",
    "insertText": "operator(FMemStackBase&& Other)"
  },
  {
    "label": "FMemStackBase()",
    "kind": "Method",
    "detail": "Function (Top = Other . Top ; End = Other . End ; TopChunk = Other . TopChunk ; TopMark = Other . TopMark ; NumMarks = Other . NumMarks ; bShouldEnforceAllocMarks = Other . bShouldEnforceAllocMarks ; Other . Top = nullptr ; Other . End = nullptr ; Other . TopChunk = nullptr ; Other . NumMarks = 0 ; Other . bShouldEnforceAllocMarks = false ; return* this ; } ~)",
    "insertText": "FMemStackBase()"
  },
  {
    "label": "FreeChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeChunks(nullptr)"
  },
  {
    "label": "PushBytes()",
    "kind": "Method",
    "detail": "Function (} uint8*)",
    "insertText": "PushBytes(size_t AllocSize, size_t Alignment)"
  },
  {
    "label": "CanFitInPage()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanFitInPage(size_t AllocSize, size_t Alignment)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const uint8* Result =)",
    "insertText": "Align(Top, Alignment)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (const uint8* NewTop = Result + AllocSize ; return NewTop<= End ; } void*)",
    "insertText": "Alloc(size_t AllocSize, size_t Alignment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8* NewTop = Result + AllocSize ;)",
    "insertText": "if(NewTop <= End)"
  },
  {
    "label": "AllocateNewChunk()",
    "kind": "Method",
    "detail": "Function (Top = NewTop ; } else {)",
    "insertText": "AllocateNewChunk(AllocSize + Alignment)"
  },
  {
    "label": "GetTop()",
    "kind": "Method",
    "detail": "Function (NewTop = Result + AllocSize ; Top = NewTop ; } return Result ; } uint8*)",
    "insertText": "GetTop()"
  },
  {
    "label": "GetNumMarks()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumMarks()"
  },
  {
    "label": "ContainsPointer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsPointer(const void* Pointer)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (class FMemMark ; void* operator)",
    "insertText": "new(size_t Size, FMemStackBase& Mem, int32 Count)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size, std::align_val_t Align, FMemStackBase& Mem, int32 Count)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size, FMemStackBase& Mem, EMemZeroed Tag, int32 Count)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size, std::align_val_t Align, FMemStackBase& Mem, EMemZeroed Tag, int32 Count)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size, FMemStackBase& Mem, EMemOned Tag, int32 Count)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void* operator)",
    "insertText": "new(size_t Size, std::align_val_t Align, FMemStackBase& Mem, EMemOned Tag, int32 Count)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (struct FTaggedMemory { FTaggedMemory* Next ; int32 DataSize ; uint8*)",
    "insertText": "Data()"
  },
  {
    "label": "AllocateNewChunk()",
    "kind": "Method",
    "detail": "Function (} } ; private : void)",
    "insertText": "AllocateNewChunk(int32 MinSize)"
  },
  {
    "label": "FreeChunks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeChunks(FTaggedMemory* NewTopChunk)"
  },
  {
    "label": "FMemStack()",
    "kind": "Method",
    "detail": "Function (uint8* Top ; uint8* End ; FTaggedMemory* TopChunk ; class FMemMark* TopMark ; int32 NumMarks ; EPageSize PageSize ; protected : bool bShouldEnforceAllocMarks ; } ; class FMemStack : public TThreadSingleton<FMemStack>,public FMemStackBase { public :)",
    "insertText": "FMemStack()"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (bShouldEnforceAllocMarks = true ; } } ; template<class T> T*)",
    "insertText": "New(FMemStackBase& Mem, int32 Count = 1, int32 Align = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "NewZeroed()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewZeroed(FMemStackBase& Mem, int32 Count = 1, int32 Align = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "PushBytes()",
    "kind": "Method",
    "detail": "Function (uint8* Result = Mem .)",
    "insertText": "PushBytes(Count*sizeof(T), Align)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Result, Count*sizeof(T))"
  },
  {
    "label": "NewOned()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "NewOned(FMemStackBase& Mem, int32 Count = 1, int32 Align = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Result, 0xff, Count*sizeof(T))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Size, FMemStackBase& Mem, int32 Count = 1)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (const size_t SizeInBytes = Size* Count ;)",
    "insertText": "checkSlow(SizeInBytes <= (size_t)TNumericLimits<int32>::Max())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Size, std::align_val_t Align, FMemStackBase& Mem, int32 Count = 1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} void* operator)",
    "insertText": "new(size_t Size, FMemStackBase& Mem, EMemZeroed Tag, int32 Count = 1)"
  },
  {
    "label": "PushBytes()",
    "kind": "Method",
    "detail": "Function (uint8* Result = Mem .)",
    "insertText": "PushBytes(SizeInBytes, __STDCPP_DEFAULT_NEW_ALIGNMENT__)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(Result, SizeInBytes)"
  },
  {
    "label": "PushBytes()",
    "kind": "Method",
    "detail": "Function (uint8* Result = Mem .)",
    "insertText": "PushBytes(SizeInBytes, (size_t)Align)"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(Result, 0xff, SizeInBytes)"
  },
  {
    "label": "ForElementType()",
    "kind": "Method",
    "detail": "Function (} template<uint32 Alignment = DEFAULT_ALIGNMENT> class TMemStackAllocator { public : using SizeType = int32 ; enum { NeedsElementType = true } ; enum { RequireRangeCheck = true } ; template<ElementType> class ForElementType { public :)",
    "insertText": "ForElementType(): Data(nullptr)"
  },
  {
    "label": "MoveToEmpty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MoveToEmpty(ForElementType& Other)"
  },
  {
    "label": "GetAllocation()",
    "kind": "Method",
    "detail": "Function (Data = Other . Data ; Other . Data = nullptr ; } ElementType*)",
    "insertText": "GetAllocation()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (void* OldData = Data ;)",
    "insertText": "if(NewMax)"
  },
  {
    "label": "OnInvalidMemStackAllocatorNum()",
    "kind": "Method",
    "detail": "Function (UE::Core::)",
    "insertText": "OnInvalidMemStackAllocatorNum(NewMax, NumBytesPerElement)"
  },
  {
    "label": "Data()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Data(ElementType*)FMemStack::Get().PushBytes( (int32)(NewMax * NumBytesPerElement), FMath::Max(Alignment,(uint32)alignof(ElementType)))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (const SizeType NumCopiedElements =)",
    "insertText": "Min(NewMax,CurrentNum)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data,OldData,NumCopiedElements * NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackReserve()",
    "kind": "Method",
    "detail": "Function (} } } SizeType)",
    "insertText": "CalculateSlackReserve(SizeType NewMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackShrink()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackShrink(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "CalculateSlackGrow()",
    "kind": "Method",
    "detail": "Function (} SizeType)",
    "insertText": "CalculateSlackGrow(SizeType NewMax, SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(SizeType CurrentMax, SIZE_T NumBytesPerElement)"
  },
  {
    "label": "FMemMark()",
    "kind": "Method",
    "detail": "Function (Mem . TopMark = this ; Mem . NumMarks + + ; } ~)",
    "insertText": "FMemMark()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bPopped = true ; - - Mem . NumMarks ;)",
    "insertText": "if(SavedChunk != Mem.TopChunk)"
  },
  {
    "label": "FreeChunks()",
    "kind": "Method",
    "detail": "Function (Mem .)",
    "insertText": "FreeChunks(SavedChunk)"
  }
]