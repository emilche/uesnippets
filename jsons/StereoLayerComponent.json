[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "EStereoLayerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStereoLayerType"
  },
  {
    "label": "EStereoLayerShape",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStereoLayerShape"
  },
  {
    "label": "UEditorFlagCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEditorFlagCollector"
  },
  {
    "label": "UStereoLayerShape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStereoLayerShape"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "UStereoLayerShapeQuad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStereoLayerShapeQuad"
  },
  {
    "label": "UStereoLayerShapeCylinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStereoLayerShapeCylinder"
  },
  {
    "label": "UStereoLayerShapeCubemap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStereoLayerShapeCubemap"
  },
  {
    "label": "FEquirectProps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEquirectProps"
  },
  {
    "label": "UStereoLayerShapeEquirect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStereoLayerShapeEquirect"
  },
  {
    "label": "UStereoLayerComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStereoLayerComponent"
  },
  {
    "label": "FStereoLayerComponentVisualizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStereoLayerComponentVisualizer"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Components / SceneComponent . h \" # include \" IStereoLayers . h \" # include \" StereoLayerComponent . generated . h \" class UTexture ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SLT_WorldLocked)",
    "insertText": "UMETA(DisplayName = \"World Locked\"), SLT_TrackerLocked UMETA(DisplayName = \"Tracker Locked\"), SLT_FaceLocked UMETA(DisplayName = \"Face Locked\")"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (SLSH_QuadLayer)",
    "insertText": "UMETA(DisplayName = \"Quad Layer\"), SLSH_CylinderLayer UMETA(DisplayName = \"Cylinder Layer\"), SLSH_CubemapLayer UMETA(DisplayName = \"Cubemap Layer\"), SLSH_EquirectLayer UMETA(DisplayName = \"Equirect Layer\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION() static TArray<FName> GetFlagNames()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(EditInlineNew, Abstract, BlueprintType, CollapseCategories, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API virtual void ApplyShape(IStereoLayers::FLayerDesc& LayerDesc)"
  },
  {
    "label": "DrawShapeVisualization()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "DrawShapeVisualization(const class FSceneView* View, class FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "MarkStereoLayerDirty()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "MarkStereoLayerDirty()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(meta = (DisplayName = \"Quad Layer\"), MinimalAPI)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(meta = (DisplayName = \"Cylinder Layer\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UStereoLayerShapeCylinder() : Radius(100) , OverlayArc(100) , Height(50)"
  },
  {
    "label": "ApplyShape()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyShape(IStereoLayers::FLayerDesc& LayerDesc)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(meta = (DisplayName = \"Cubemap Layer\"), MinimalAPI)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadOnly, export, Category = \"StereoLayer | Equirect Layer Properties\")"
  },
  {
    "label": "FEquirectProps()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FEquirectProps() : LeftUVRect(FBox2D(FVector2D(0.0f, 0.0f), FVector2D(1.0f, 1.0f))) , RightUVRect(FBox2D(FVector2D(0.0f, 0.0f), FVector2D(1.0f, 1.0f))) , LeftScale(FVector2D(1.0f, 1.0f)) , RightScale(FVector2D(1.0f, 1.0f)) , LeftBias(FVector2D(0.0f, 0.0f)) , RightBias(FVector2D(0.0f, 0.0f)) , Radius(0.0f)"
  },
  {
    "label": "FEquirectProps()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEquirectProps(FBox2D InLeftUVRect, FBox2D InRightUVRect, FVector2D InLeftScale, FVector2D InRightScale, FVector2D InLeftBias, FVector2D InRightBias, float Radius) : LeftUVRect(InLeftUVRect) , RightUVRect(InRightUVRect) , LeftScale(InLeftScale) , RightScale(InRightScale) , LeftBias(InLeftBias) , RightBias(InRightBias) , Radius(Radius)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FEquirectProps& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const class UStereoLayerShapeEquirect& Other)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(meta = (DisplayName = \"Equirect Layer\"), MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UStereoLayerShapeEquirect() : LeftUVRect(FBox2D(FVector2D(0.0f, 0.0f), FVector2D(1.0f, 1.0f))) , RightUVRect(FBox2D(FVector2D(0.0f, 0.0f), FVector2D(1.0f, 1.0f))) , LeftScale(FVector2D(1.0f, 1.0f)) , RightScale(FVector2D(1.0f, 1.0f)) , LeftBias(FVector2D(0.0f, 0.0f)) , RightBias(FVector2D(0.0f, 0.0f)) , Radius(0.0)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "UCLASS(ClassGroup=\"HeadMountedDisplay\", hidecategories=(Object,LOD,Lighting,TextureStreaming), editinlinenew, meta=(DisplayName=\"Stereo Layer\", BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  }
]