[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ScopedMockLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedMockLog"
  },
  {
    "label": "ForwardingSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ForwardingSink"
  },
  {
    "label": "ScopedMockLog()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_LOG_SCOPED_MOCK_LOG_H_ # define ABSL_LOG_SCOPED_MOCK_LOG_H_ # include<atomic> # include<string> # include \" gmock / gmock . h \" # include \" absl / base / config . h \" # include \" absl / base / log_severity . h \" # include \" absl / log / log_entry . h \" # include \" absl / log / log_sink . h \" namespace absl { ABSL_NAMESPACE_BEGIN enum class MockLogDefault { kIgnoreUnexpected,kDisallowUnexpected } ; class ScopedMockLog final { public :)",
    "insertText": "ScopedMockLog(MockLogDefault default_exp = MockLogDefault::kIgnoreUnexpected)"
  },
  {
    "label": "ScopedMockLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedMockLog(const ScopedMockLog&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedMockLog&)",
    "insertText": "operator(const ScopedMockLog&)"
  },
  {
    "label": "ScopedMockLog()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedMockLog()"
  },
  {
    "label": "StartCapturingLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCapturingLogs()"
  },
  {
    "label": "StopCapturingLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCapturingLogs()"
  },
  {
    "label": "UseAsLocalSink()",
    "kind": "Method",
    "detail": "Function (absl::LogSink&)",
    "insertText": "UseAsLocalSink()"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Log, (absl::LogSeverity severity, const std::string& file_path, const std::string& message))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Send, (const absl::LogEntry&))"
  },
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MOCK_METHOD(void, Flush, ())"
  },
  {
    "label": "ForwardingSink()",
    "kind": "Method",
    "detail": "Function (private : class ForwardingSink final : public absl::LogSink { public :)",
    "insertText": "ForwardingSink(ScopedMockLog* sml) : sml_(sml)"
  },
  {
    "label": "ForwardingSink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ForwardingSink(const ForwardingSink&)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(const absl::LogEntry& entry)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (sml_ ->)",
    "insertText": "Send(entry)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Flush()"
  }
]