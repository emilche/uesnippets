[
  {
    "label": "svd_precondition_2x2_block_to_be_real",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "svd_precondition_2x2_block_to_be_real"
  },
  {
    "label": "qr_preconditioner_should_do_anything",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "qr_preconditioner_should_do_anything"
  },
  {
    "label": "qr_preconditioner_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "qr_preconditioner_impl"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "JacobiSVD",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JacobiSVD"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "ret()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_JACOBISVD_H # define EIGEN_JACOBISVD_H namespace Eigen { namespace internal { template<MatrixType,int QRPreconditioner,bool IsComplex = NumTraits<MatrixType::Scalar>::IsComplex> struct svd_precondition_2x2_block_to_be_real { } ; enum { PreconditionIfMoreColsThanRows,PreconditionIfMoreRowsThanCols } ; template<MatrixType,int QRPreconditioner,int Case> struct qr_preconditioner_should_do_anything { enum { a = MatrixType::RowsAtCompileTime ! = Dynamic&& MatrixType::ColsAtCompileTime ! = Dynamic&& MatrixType::ColsAtCompileTime<= MatrixType::RowsAtCompileTime,b = MatrixType::RowsAtCompileTime ! = Dynamic&& MatrixType::ColsAtCompileTime ! = Dynamic&& MatrixType::RowsAtCompileTime<= MatrixType::ColsAtCompileTime,)",
    "insertText": "ret((QRPreconditioner == NoQRPreconditioner) || (Case == PreconditionIfMoreColsThanRows && bool(a)) || (Case == PreconditionIfMoreRowsThanCols && bool(b)))"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType,int QRPreconditioner,int Case,bool DoAnything = qr_preconditioner_should_do_anything<MatrixType,QRPreconditioner,Case>::ret> struct qr_preconditioner_impl { } ; template<MatrixType,int QRPreconditioner,int Case> class qr_preconditioner_impl<MatrixType,QRPreconditioner,Case,false> { public : void)",
    "insertText": "allocate(const JacobiSVD<MatrixType, QRPreconditioner>&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "run(JacobiSVD<MatrixType, QRPreconditioner>&, const MatrixType&)"
  },
  {
    "label": "QRType()",
    "kind": "Method",
    "detail": "Function (m_qr . ~)",
    "insertText": "QRType()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&m_qr) QRType(svd.rows(), svd.cols())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(svd.m_computeFullU) m_workspace.resize(svd.rows())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "run(JacobiSVD<MatrixType, FullPivHouseholderQRPreconditioner>& svd, const MatrixType& matrix)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (svd . m_workMatrix = m_qr .)",
    "insertText": "matrixQR().block(0,0,matrix.cols(),matrix.cols()).template triangularView<Upper>()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&m_qr) QRType(svd.cols(), svd.rows())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} m_adjoint .)",
    "insertText": "resize(svd.cols(), svd.rows())"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (m_adjoint = matrix .)",
    "insertText": "adjoint()"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "compute(m_adjoint)"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (svd . m_workMatrix = m_qr .)",
    "insertText": "matrixQR().block(0,0,matrix.rows(),matrix.rows()).template triangularView<Upper>().adjoint()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "run(JacobiSVD<MatrixType, ColPivHouseholderQRPreconditioner>& svd, const MatrixType& matrix)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (svd . m_matrixU .)",
    "insertText": "setIdentity(matrix.rows(), matrix.cols())"
  },
  {
    "label": "householderQ()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "householderQ().applyThisOnTheLeft(svd.m_matrixU, m_workspace)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(svd.computeV()) svd.m_matrixV = m_qr.colsPermutation()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(svd.m_computeFullV) m_workspace.resize(svd.cols())"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (svd . m_matrixV .)",
    "insertText": "setIdentity(matrix.cols(), matrix.rows())"
  },
  {
    "label": "householderQ()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "householderQ().applyThisOnTheLeft(svd.m_matrixV, m_workspace)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(svd.computeU()) svd.m_matrixU = m_qr.colsPermutation()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "run(JacobiSVD<MatrixType, HouseholderQRPreconditioner>& svd, const MatrixType& matrix)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(svd.computeV()) svd.m_matrixV.setIdentity(matrix.cols(), matrix.cols())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(svd.computeU()) svd.m_matrixU.setIdentity(matrix.rows(), matrix.rows())"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ; Scalar z ; JacobiRotation<Scalar> rot ; RealScalar n =)",
    "insertText": "sqrt(numext::abs2(work_matrix.coeff(p,p)) + numext::abs2(work_matrix.coeff(q,p)))"
  },
  {
    "label": "considerAsZero()",
    "kind": "Method",
    "detail": "Function (const RealScalar)",
    "insertText": "considerAsZero(std::numeric_limits<RealScalar>::min)()"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (const RealScalar precision = NumTraits<Scalar)",
    "insertText": "epsilon()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (work_matrix .)",
    "insertText": "coeffRef(p,p) = work_matrix.coeffRef(q,p) = Scalar(0)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (z =)",
    "insertText": "abs(work_matrix.coeff(p,q)) / work_matrix.coeff(p,q)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (work_matrix .)",
    "insertText": "row(p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(abs(numext::imag(work_matrix.coeff(q,q)))>considerAsZero)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (z =)",
    "insertText": "abs(work_matrix.coeff(q,q)) / work_matrix.coeff(q,q)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (work_matrix .)",
    "insertText": "row(q)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (} } else { rot .)",
    "insertText": "c() = conj(work_matrix.coeff(p,p))"
  },
  {
    "label": "s()",
    "kind": "Method",
    "detail": "Function (rot .)",
    "insertText": "s() = work_matrix.coeff(q,p)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (work_matrix .)",
    "insertText": "applyOnTheLeft(p,q,rot)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (work_matrix .)",
    "insertText": "col(q)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (} } maxDiagEntry = numext::maxi<)",
    "insertText": "RealScalar(maxDiagEntry,numext::maxi<RealScalar>(abs(work_matrix.coeff(p,p)), abs(work_matrix.coeff(q,q))))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar threshold = numext::maxi<)",
    "insertText": "RealScalar(considerAsZero, precision * maxDiagEntry)"
  },
  {
    "label": "EIGEN_SIZE_MIN_PREFER_DYNAMIC()",
    "kind": "Method",
    "detail": "Function (} } ; template<_MatrixType,int QRPreconditioner> struct traits<JacobiSVD<_MatrixType,QRPreconditioner>> : traits<_MatrixType> { typedef _MatrixType MatrixType ; } ; } template<_MatrixType,int QRPreconditioner> class JacobiSVD : public SVDBase<JacobiSVD<_MatrixType,QRPreconditioner>> { typedef SVDBase<JacobiSVD> Base ; public : typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef NumTraits<MatrixType::Scalar>::Real RealScalar ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,DiagSizeAtCompileTime =)",
    "insertText": "EIGEN_SIZE_MIN_PREFER_DYNAMIC(RowsAtCompileTime,ColsAtCompileTime), MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime, MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime, MaxDiagSizeAtCompileTime = EIGEN_SIZE_MIN_PREFER_FIXED(MaxRowsAtCompileTime,MaxColsAtCompileTime)"
  },
  {
    "label": "JacobiSVD()",
    "kind": "Method",
    "detail": "Function (typedef Base::MatrixUType MatrixUType ; typedef Base::MatrixVType MatrixVType ; typedef Base::SingularValuesType SingularValuesType ; typedef internal::plain_row_type<MatrixType>::type RowType ; typedef internal::plain_col_type<MatrixType>::type ColType ; typedef Matrix<Scalar,DiagSizeAtCompileTime,DiagSizeAtCompileTime,MatrixOptions,MaxDiagSizeAtCompileTime,MaxDiagSizeAtCompileTime> WorkMatrixType ;)",
    "insertText": "JacobiSVD()"
  },
  {
    "label": "JacobiSVD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "JacobiSVD(Index rows, Index cols, unsigned int computationOptions = 0)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocate(rows, cols, computationOptions)"
  },
  {
    "label": "JacobiSVD()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "JacobiSVD(const MatrixType& matrix, unsigned int computationOptions = 0)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix, computationOptions)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} JacobiSVD&)",
    "insertText": "compute(const MatrixType& matrix, unsigned int computationOptions)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (JacobiSVD&)",
    "insertText": "compute(const MatrixType& matrix)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} using Base::computeU ; using Base::computeV ; using Base::rows ; using Base::cols ; using Base::rank ; private : void)",
    "insertText": "allocate(Index rows, Index cols, unsigned int computationOptions)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (protected : using Base::m_matrixU ; using Base::m_matrixV ; using Base::m_singularValues ; using Base::m_info ; using Base::m_isInitialized ; using Base::m_isAllocated ; using Base::m_usePrescribedThreshold ; using Base::m_computeFullU ; using Base::m_computeThinU ; using Base::m_computeFullV ; using Base::m_computeThinV ; using Base::m_computationOptions ; using Base::m_nonzeroSingularValues ; using Base::m_rows ; using Base::m_cols ; using Base::m_diagSize ; using Base::m_prescribedThreshold ; WorkMatrixType m_workMatrix ; template<__MatrixType,int _QRPreconditioner,bool _IsComplex> struct internal::svd_precondition_2x2_block_to_be_real ; template<__MatrixType,int _QRPreconditioner,int _Case,bool _DoAnything> struct internal::qr_preconditioner_impl ; internal::qr_preconditioner_impl<MatrixType,QRPreconditioner,internal::PreconditionIfMoreColsThanRows> m_qr_precond_morecols ; internal::qr_preconditioner_impl<MatrixType,QRPreconditioner,internal::PreconditionIfMoreRowsThanCols> m_qr_precond_morerows ; MatrixType m_scaledMatrix ; } ; template<MatrixType,int QRPreconditioner> void JacobiSVD<MatrixType,QRPreconditioner)",
    "insertText": "allocate(Eigen::Index rows, Eigen::Index cols, unsigned int computationOptions)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows >= 0 && cols >= 0)"
  },
  {
    "label": "m_computeThinU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_computeThinU(computationOptions & ComputeThinU)"
  },
  {
    "label": "m_computeFullV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_computeFullV(computationOptions & ComputeFullV)"
  },
  {
    "label": "m_computeThinV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_computeThinV(computationOptions & ComputeThinV)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(!(m_computeFullU && m_computeThinU) && \"JacobiSVD: you can't ask for both full and thin U\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(!(m_computeFullV && m_computeThinV) && \"JacobiSVD: you can't ask for both full and thin V\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(EIGEN_IMPLIES(m_computeThinU || m_computeThinV, MatrixType::ColsAtCompileTime==Dynamic) && \"JacobiSVD: thin U and V are only available when your matrix has a dynamic number of columns.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(!(m_computeThinU || m_computeThinV) && \"JacobiSVD: can't compute thin U or thin V with the FullPivHouseholderQR preconditioner. \" \"Use the ColPivHouseholderQR preconditioner instead.\")"
  },
  {
    "label": "m_diagSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "m_diagSize(std::min)(m_rows, m_cols)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_singularValues .)",
    "insertText": "resize(m_diagSize)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_workMatrix .)",
    "insertText": "resize(m_diagSize, m_diagSize)"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (using std::abs ;)",
    "insertText": "allocate(matrix.rows(), matrix.cols(), computationOptions)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar precision =)",
    "insertText": "RealScalar(2) * NumTraits<Scalar>::epsilon()"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (RealScalar scale = matrix .)",
    "insertText": "cwiseAbs().template maxCoeff<PropagateNaN>()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; m_info = InvalidInput ; return* this ; })",
    "insertText": "if(scale==RealScalar(0)) scale = RealScalar(1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (m_scaledMatrix = matrix / scale ; m_qr_precond_morecols .)",
    "insertText": "run(*this, m_scaledMatrix)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} else { m_workMatrix = matrix .)",
    "insertText": "block(0,0,m_diagSize,m_diagSize)"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (} RealScalar maxDiagEntry = m_workMatrix .)",
    "insertText": "cwiseAbs().diagonal().maxCoeff()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (bool finished = false ;)",
    "insertText": "while(!finished)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (finished = true ;)",
    "insertText": "for(Index p = 1; p < m_diagSize; ++p)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (finished = false ;)",
    "insertText": "if(internal::svd_precondition_2x2_block_to_be_real<MatrixType, QRPreconditioner>::run(m_workMatrix, *this, p, q, maxDiagEntry))"
  },
  {
    "label": "real_2x2_jacobi_svd()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<RealScalar> j_left,j_right ;)",
    "insertText": "real_2x2_jacobi_svd(m_workMatrix, p, q, &j_left, &j_right)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (m_workMatrix .)",
    "insertText": "applyOnTheLeft(p,q,j_left)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (m_workMatrix .)",
    "insertText": "applyOnTheRight(p,q,j_right)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (maxDiagEntry = numext::maxi<)",
    "insertText": "RealScalar(maxDiagEntry,numext::maxi<RealScalar>(abs(m_workMatrix.coeff(p,p)), abs(m_workMatrix.coeff(q,q))))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "for(Index i = 0; i < m_diagSize; ++i)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (RealScalar a =)",
    "insertText": "abs(m_workMatrix.coeff(i,i))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_singularValues .)",
    "insertText": "coeffRef(i) = abs(a)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (} else { RealScalar a =)",
    "insertText": "real(m_workMatrix.coeff(i,i))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } m_singularValues* = scale ; m_nonzeroSingularValues = m_diagSize ;)",
    "insertText": "for(Index i = 0; i < m_diagSize; i++)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (Index pos ; RealScalar maxRemainingSingularValue = m_singularValues .)",
    "insertText": "tail(m_diagSize-i).maxCoeff(&pos)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_nonzeroSingularValues = i ; break ; })",
    "insertText": "if(pos)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (pos + = i ;)",
    "insertText": "swap(m_singularValues.coeffRef(i), m_singularValues.coeffRef(pos))"
  },
  {
    "label": "jacobiSvd()",
    "kind": "Method",
    "detail": "Function (} } m_isInitialized = true ; return* this ; } template<Derived> JacobiSVD<MatrixBase<Derived>::PlainObject> MatrixBase<Derived)",
    "insertText": "jacobiSvd(unsigned int computationOptions)"
  }
]