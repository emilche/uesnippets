[
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "common_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "common_iterator"
  },
  {
    "label": "__proxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__proxy"
  },
  {
    "label": "__postfix_proxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__postfix_proxy"
  },
  {
    "label": "_I2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_I2"
  },
  {
    "label": "_S2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_S2"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "incrementable_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "incrementable_traits"
  },
  {
    "label": "__arrow_type_or_void",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__arrow_type_or_void"
  },
  {
    "label": "iterator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iterator_traits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ITERATOR_COMMON_ITERATOR_H # define _LIBCPP___ITERATOR_COMMON_ITERATOR_H # include<__assert> # include<__config> # include<__iterator / concepts . h> # include<__iterator / incrementable_traits . h> # include<__iterator / iter_move . h> # include<__iterator / iter_swap . h> # include<__iterator / iterator_traits . h> # include<__iterator / readable_traits . h> # include<concepts> # include<variant> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (template<input_or_output_iterator _Iter,sentinel_for<_Iter> _Sent>)",
    "insertText": "requires(!same_as<_Iter, _Sent> && copyable<_Iter>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct __proxy { const iter_value_t<_Iter>*)",
    "insertText": "operator()"
  },
  {
    "label": "common_iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "common_iterator(_Iter __i) : __hold_(in_place_type<_Iter>, _VSTD::move(__i))"
  },
  {
    "label": "common_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "common_iterator(_Sent __s) : __hold_(in_place_type<_Sent>, _VSTD::move(__s))"
  },
  {
    "label": "common_iterator()",
    "kind": "Method",
    "detail": "Function (} template<class _I2,class _S2> requires convertible_to<const _I2&,_Iter>&& convertible_to<const _S2&,_Sent>)",
    "insertText": "common_iterator(const common_iterator<_I2, _S2>& __other) : __hold_([&]() -> variant<_Iter, _Sent> { _LIBCPP_ASSERT(!__other.__hold_.valueless_by_exception(), \"Attempted to construct from a valueless common_iterator\"); if (__other.__hold_.index() == 0) return variant<_Iter, _Sent>{in_place_index<0>, _VSTD::__unchecked_get<0>(__other.__hold_)}; return variant<_Iter, _Sent>{in_place_index<1>, _VSTD::__unchecked_get<1>(__other.__hold_)}; }())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _I2,class _S2> requires convertible_to<const _I2&,_Iter>&& convertible_to<const _S2&,_Sent>&& assignable_from<_Iter&,const _I2&>&& assignable_from<_Sent&,const _S2&> common_iterator&)",
    "insertText": "operator(const common_iterator<_I2, _S2>& __other)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__other.__hold_.valueless_by_exception(), \"Attempted to assign from a valueless common_iterator\")"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (auto __idx = __hold_ .)",
    "insertText": "index()"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(holds_alternative<_Iter>(__hold_), \"Attempted to dereference a non-dereferenceable common_iterator\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "decltype(auto) operator*()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<class _I2 = _Iter>)",
    "insertText": "decltype(auto) operator->() const requires indirectly_readable<const _I2> && (requires(const _I2& __i) { __i.operator->(); } || is_reference_v<iter_reference_t<_I2>> || constructible_from<iter_value_t<_I2>, iter_reference_t<_I2>>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(is_reference_v<iter_reference_t<_Iter>>)"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (auto&& __tmp =* _VSTD::__unchecked_get<)",
    "insertText": "_Iter(__hold_)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(holds_alternative<_Iter>(__hold_), \"Attempted to increment a non-dereferenceable common_iterator\")"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (auto __tmp =* this ; + +* this ; return __tmp ; } else if)",
    "insertText": "constexpr(requires (_Iter& __i) { { *__i++ } -> __can_reference; } || !__can_use_postfix_proxy<_Iter>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} else { auto __p = __postfix_proxy {** this } ; + +* this ; return __p ; } } template<class _I2,sentinel_for<_Iter> _S2> requires sentinel_for<_Sent,_I2> bool)",
    "insertText": "operator(const common_iterator& __x, const common_iterator<_I2, _S2>& __y)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__x.__hold_.valueless_by_exception(), \"Attempted to compare a valueless common_iterator\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__y.__hold_.valueless_by_exception(), \"Attempted to compare a valueless common_iterator\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__x.__hold_.valueless_by_exception(), \"Attempted to subtract from a valueless common_iterator\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__y.__hold_.valueless_by_exception(), \"Attempted to subtract a valueless common_iterator\")"
  },
  {
    "label": "iter_move()",
    "kind": "Method",
    "detail": "Function (} iter_rvalue_reference_t<_Iter>)",
    "insertText": "iter_move(const common_iterator& __i) noexcept(noexcept(ranges::iter_move(declval<const _Iter&>())))"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(holds_alternative<_Iter>(__i.__hold_), \"Attempted to iter_move a non-dereferenceable common_iterator\")"
  },
  {
    "label": "iter_swap()",
    "kind": "Method",
    "detail": "Function (} template<indirectly_swappable<_Iter> _I2,class _S2> void)",
    "insertText": "iter_swap(const common_iterator& __x, const common_iterator<_I2, _S2>& __y) noexcept(noexcept(ranges::iter_swap(declval<const _Iter&>(), declval<const _I2&>())))"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(holds_alternative<_Iter>(__x.__hold_), \"Attempted to iter_swap a non-dereferenceable common_iterator\")"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(holds_alternative<_I2>(__y.__hold_), \"Attempted to iter_swap a non-dereferenceable common_iterator\")"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Iter,class _Sent> struct incrementable_traits<common_iterator<_Iter,_Sent>> { using difference_type = iter_difference_t<_Iter> ; } ; template<class _Iter> concept __denotes_forward_iter = requires { iterator_traits<_Iter>::iterator_category ; }&& derived_from<iterator_traits<_Iter>::iterator_category,forward_iterator_tag> ; template<class _Iter,class _Sent> concept __common_iter_has_ptr_op =)",
    "insertText": "requires(const common_iterator<_Iter, _Sent>& __a)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} ; template<class,class> struct __arrow_type_or_void { using type = void ; } ; template<class _Iter,class _Sent> requires __common_iter_has_ptr_op<_Iter,_Sent> struct __arrow_type_or_void<_Iter,_Sent> { using type =)",
    "insertText": "decltype(declval<const common_iterator<_Iter, _Sent>&>().operator->())"
  }
]