[
  {
    "label": "atomic_backoff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "atomic_backoff"
  },
  {
    "label": "endianness",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "endianness"
  },
  {
    "label": "machine_load_store",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store"
  },
  {
    "label": "machine_load_store_seq_cst",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_seq_cst"
  },
  {
    "label": "machine_load_store_relaxed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "machine_load_store_relaxed"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "__TBB_machine_type_with_alignment_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__TBB_machine_type_with_alignment_"
  },
  {
    "label": "type_with_alignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type_with_alignment"
  },
  {
    "label": "work_around_alignment_bug",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "work_around_alignment_bug"
  },
  {
    "label": "reverse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "reverse"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_machine_H # define __TBB_machine_H # include \" tbb_stddef . h \" namespace tbb { namespace internal { \\ const int64_t anyvalue = 2 3 0 5 8 4 3 0 0 9 2 1 3 6 9 3 9 5 1 LL ; \\ return __TBB_machine_cmpswp8 # #)",
    "insertText": "M(const_cast<volatile void *>(ptr),anyvalue,anyvalue)"
  },
  {
    "label": "managed()",
    "kind": "Method",
    "detail": "Function (\\ } \\ # define __TBB_ENDIAN_UNSUPPORTED - 1 # define __TBB_ENDIAN_LITTLE 0 # define __TBB_ENDIAN_BIG 1 # define __TBB_ENDIAN_DETECT 2 # if _WIN32 | | _WIN64 # ifdef _MANAGED # pragma)",
    "insertText": "managed(push, off) #endif #if __MINGW64__ || __MINGW32__ extern \"C\" __declspec(dllimport) int __stdcall SwitchToThread( void)"
  },
  {
    "label": "__TBB_Yield()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TBB_Yield() SwitchToThread() #if (TBB_USE_GCC_BUILTINS && __TBB_GCC_BUILTIN_ATOMICS_PRESENT) #include \"machine/gcc_generic.h\" #elif __MINGW64__ #include \"machine/linux_intel64.h\" #elif __MINGW32__ #include \"machine/linux_ia32.h\" #endif #elif (TBB_USE_ICC_BUILTINS && __TBB_ICC_BUILTIN_ATOMICS_PRESENT) #include \"machine/icc_generic.h\" #elif defined(_M_IX86) && !defined(__TBB_WIN32_USE_CL_BUILTINS) #include \"machine/windows_ia32.h\" #elif defined(_M_X64) #include \"machine/windows_intel64.h\" #elif defined(_M_ARM) || defined(_M_ARM64) || defined(__TBB_WIN32_USE_CL_BUILTINS) #include \"machine/msvc_armv7.h\" #endif #ifdef _MANAGED #pragma managed(pop) #endif #elif __TBB_DEFINE_MIC #include \"machine/mic_common.h\" #if (TBB_USE_ICC_BUILTINS && __TBB_ICC_BUILTIN_ATOMICS_PRESENT) #include \"machine/icc_generic.h\" #else #include \"machine/linux_intel64.h\" #endif #elif __linux__ || __FreeBSD__ || __NetBSD__ || __OpenBSD__ #if (TBB_USE_GCC_BUILTINS && __TBB_GCC_BUILTIN_ATOMICS_PRESENT) #include \"machine/gcc_generic.h\" #elif (TBB_USE_ICC_BUILTINS && __TBB_ICC_BUILTIN_ATOMICS_PRESENT) #include \"machine/icc_generic.h\" #elif __i386__ #include \"machine/linux_ia32.h\" #elif __x86_64__ #include \"machine/linux_intel64.h\" #elif __ia64__ #include \"machine/linux_ia64.h\" #elif __powerpc__ #include \"machine/mac_ppc.h\" #elif __ARM_ARCH_7A__ || __aarch64__ #include \"machine/gcc_arm.h\" #elif __TBB_GCC_BUILTIN_ATOMICS_PRESENT #include \"machine/gcc_generic.h\" #endif #include \"machine/linux_common.h\" #elif __APPLE__ #if (TBB_USE_ICC_BUILTINS && __TBB_ICC_BUILTIN_ATOMICS_PRESENT) #include \"machine/icc_generic.h\" #elif __TBB_x86_32 #include \"machine/linux_ia32.h\" #elif __TBB_x86_64 #include \"machine/linux_intel64.h\" #elif __POWERPC__ #include \"machine/mac_ppc.h\" #endif #include \"machine/macos_common.h\" #elif _AIX #include \"machine/ibm_aix51.h\" #elif __sun || __SUNPRO_CC #define __asm__ asm #define __volatile__ volatile #if __i386 || __i386__ #include \"machine/linux_ia32.h\" #elif __x86_64__ #include \"machine/linux_intel64.h\" #elif __sparc #include \"machine/sunos_sparc.h\" #endif #include <sched.h> #define __TBB_Yield() sched_yield() #endif #ifndef __TBB_64BIT_ATOMICS #define __TBB_64BIT_ATOMICS 1 #endif #if __TBB_USE_FENCED_ATOMICS #define __TBB_machine_cmpswp1 __TBB_machine_cmpswp1full_fence #define __TBB_machine_cmpswp2 __TBB_machine_cmpswp2full_fence #define __TBB_machine_cmpswp4 __TBB_machine_cmpswp4full_fence #define __TBB_machine_cmpswp8 __TBB_machine_cmpswp8full_fence #if __TBB_WORDSIZE==8 #define __TBB_machine_fetchadd8 __TBB_machine_fetchadd8full_fence #define __TBB_machine_fetchstore8 __TBB_machine_fetchstore8full_fence #define __TBB_FetchAndAddWrelease(P,V) __TBB_machine_fetchadd8release(P,V) #define __TBB_FetchAndIncrementWacquire(P) __TBB_machine_fetchadd8acquire(P,1) #define __TBB_FetchAndDecrementWrelease(P) __TBB_machine_fetchadd8release(P,(-1)) #else #define __TBB_machine_fetchadd4 __TBB_machine_fetchadd4full_fence #define __TBB_machine_fetchstore4 __TBB_machine_fetchstore4full_fence #define __TBB_FetchAndAddWrelease(P,V) __TBB_machine_fetchadd4release(P,V) #define __TBB_FetchAndIncrementWacquire(P) __TBB_machine_fetchadd4acquire(P,1) #define __TBB_FetchAndDecrementWrelease(P) __TBB_machine_fetchadd4release(P,(-1)) #endif #else #define __TBB_FetchAndAddWrelease(P,V) __TBB_FetchAndAddW(P,V) #define __TBB_FetchAndIncrementWacquire(P) __TBB_FetchAndAddW(P,1) #define __TBB_FetchAndDecrementWrelease(P) __TBB_FetchAndAddW(P,(-1)) #endif #if __TBB_WORDSIZE==4 #define __TBB_CompareAndSwapW(P,V,C) __TBB_machine_cmpswp4(P,V,C) #define __TBB_FetchAndAddW(P,V) __TBB_machine_fetchadd4(P,V) #define __TBB_FetchAndStoreW(P,V) __TBB_machine_fetchstore4(P,V) #elif __TBB_WORDSIZE==8 #if __TBB_USE_GENERIC_DWORD_LOAD_STORE || __TBB_USE_GENERIC_DWORD_FETCH_ADD || __TBB_USE_GENERIC_DWORD_FETCH_STORE #error These macros should only be used on 32-bit platforms. #endif #define __TBB_CompareAndSwapW(P,V,C) __TBB_machine_cmpswp8(P,V,C) #define __TBB_FetchAndAddW(P,V) __TBB_machine_fetchadd8(P,V) #define __TBB_FetchAndStoreW(P,V) __TBB_machine_fetchstore8(P,V) #else #error Unsupported machine word size. #endif #ifndef __TBB_Pause inline void __TBB_Pause(int32_t)"
  },
  {
    "label": "__TBB_Yield()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_Yield()"
  },
  {
    "label": "atomic_fence()",
    "kind": "Method",
    "detail": "Function (} # endif namespace tbb { void)",
    "insertText": "atomic_fence()"
  },
  {
    "label": "__TBB_full_memory_fence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_full_memory_fence()"
  },
  {
    "label": "atomic_backoff()",
    "kind": "Method",
    "detail": "Function (} namespace internal { class atomic_backoff : no_copy { const int32_t LOOPS_BEFORE_YIELD = 1 6 ; int32_t count ; public :)",
    "insertText": "atomic_backoff() : count(1)"
  },
  {
    "label": "atomic_backoff()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "atomic_backoff(bool ) : count(1)"
  },
  {
    "label": "pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pause()"
  },
  {
    "label": "__TBB_Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_Pause(count)"
  },
  {
    "label": "bounded_pause()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "bounded_pause()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (count* = 2 ; return true ; } else { return false ; } } void)",
    "insertText": "reset()"
  },
  {
    "label": "spin_wait_while_eq()",
    "kind": "Method",
    "detail": "Function (count = 1 ; } } ; template<T,U> void)",
    "insertText": "spin_wait_while_eq(const volatile T& location, U value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (atomic_backoff backoff ;)",
    "insertText": "while(location==value ) backoff.pause()"
  },
  {
    "label": "spin_wait_until_eq()",
    "kind": "Method",
    "detail": "Function (} template<T,U> void)",
    "insertText": "spin_wait_until_eq(const volatile T& location, const U value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (atomic_backoff backoff ;)",
    "insertText": "while(location!=value ) backoff.pause()"
  },
  {
    "label": "spin_wait_while()",
    "kind": "Method",
    "detail": "Function (} template<predicate_type> void)",
    "insertText": "spin_wait_while(predicate_type condition)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (atomic_backoff backoff ;)",
    "insertText": "while(condition() ) backoff.pause()"
  },
  {
    "label": "__TBB_MaskedCompareAndSwap()",
    "kind": "Method",
    "detail": "Function (} # ifndef __TBB_ENDIANNESS # define __TBB_ENDIANNESS __TBB_ENDIAN_DETECT # endif # if __TBB_USE_GENERIC_PART_WORD_CAS&& __TBB_ENDIANNESS = = __TBB_ENDIAN_UNSUPPORTED # error Generic implementation of part - word CAS may not be used with __TBB_ENDIAN_UNSUPPORTED # endif # if __TBB_ENDIANNESS ! = __TBB_ENDIAN_UNSUPPORTED template<T> T)",
    "insertText": "__TBB_MaskedCompareAndSwap(volatile T * const ptr, const T value, const T comparand)"
  },
  {
    "label": "is_big_endian()",
    "kind": "Method",
    "detail": "Function (struct endianness { bool)",
    "insertText": "is_big_endian()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if __TBB_ENDIANNESS = = __TBB_ENDIAN_DETECT const uint32_t probe = 0 x03020100 ;)",
    "insertText": "return(((const char*)(&probe))[0]==0x03)"
  },
  {
    "label": "byte_offset()",
    "kind": "Method",
    "detail": "Function (# elif __TBB_ENDIANNESS = = __TBB_ENDIAN_BIG | | __TBB_ENDIANNESS = = __TBB_ENDIAN_LITTLE return __TBB_ENDIANNESS = = __TBB_ENDIAN_BIG ; # else # error Unexpected value of __TBB_ENDIANNESS # endif } } ; const uint32_t)",
    "insertText": "byte_offset(uint32_t) ((uintptr_t)ptr & 0x3)"
  },
  {
    "label": "aligned_ptr()",
    "kind": "Method",
    "detail": "Function (volatile uint32_t* const)",
    "insertText": "aligned_ptr(uint32_t*)((uintptr_t)ptr - byte_offset)"
  },
  {
    "label": "bits_to_shift()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "bits_to_shift(endianness::is_big_endian() ? (4 - sizeof(T) - (byte_offset)) : byte_offset)"
  },
  {
    "label": "mask()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "mask(((uint32_t)1<<(sizeof(T)*8)) - 1)"
  },
  {
    "label": "shifted_comparand()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "shifted_comparand((uint32_t)comparand << bits_to_shift)"
  },
  {
    "label": "shifted_value()",
    "kind": "Method",
    "detail": "Function (const uint32_t)",
    "insertText": "shifted_value((uint32_t)value << bits_to_shift)"
  },
  {
    "label": "big_result()",
    "kind": "Method",
    "detail": "Function (const uint32_t surroundings =* aligned_ptr& ~ mask ; const uint32_t big_comparand = surroundings | shifted_comparand ; const uint32_t big_value = surroundings | shifted_value ; const uint32_t)",
    "insertText": "big_result(uint32_t)__TBB_machine_cmpswp4( aligned_ptr, big_value, big_comparand)"
  },
  {
    "label": "__TBB_CompareAndSwapGeneric()",
    "kind": "Method",
    "detail": "Function (} else continue ; } } # endif template<size_t S,T> T)",
    "insertText": "__TBB_CompareAndSwapGeneric(volatile void *ptr, T value, T comparand)"
  },
  {
    "label": "int8_t()",
    "kind": "Method",
    "detail": "Function (template<> int8_t __TBB_CompareAndSwapGeneric<1,)",
    "insertText": "int8_t(volatile void *ptr, int8_t value, int8_t comparand)"
  },
  {
    "label": "int8_t()",
    "kind": "Method",
    "detail": "Function (# if __TBB_USE_GENERIC_PART_WORD_CAS return __TBB_MaskedCompareAndSwap<)",
    "insertText": "int8_t((volatile int8_t *)ptr,value,comparand)"
  },
  {
    "label": "__TBB_machine_cmpswp1()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__TBB_machine_cmpswp1(ptr,value,comparand)"
  },
  {
    "label": "int16_t()",
    "kind": "Method",
    "detail": "Function (# endif } template<> int16_t __TBB_CompareAndSwapGeneric<2,)",
    "insertText": "int16_t(volatile void *ptr, int16_t value, int16_t comparand)"
  },
  {
    "label": "int16_t()",
    "kind": "Method",
    "detail": "Function (# if __TBB_USE_GENERIC_PART_WORD_CAS return __TBB_MaskedCompareAndSwap<)",
    "insertText": "int16_t((volatile int16_t *)ptr,value,comparand)"
  },
  {
    "label": "__TBB_machine_cmpswp2()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "__TBB_machine_cmpswp2(ptr,value,comparand)"
  },
  {
    "label": "int32_t()",
    "kind": "Method",
    "detail": "Function (# endif } template<> int32_t __TBB_CompareAndSwapGeneric<4,)",
    "insertText": "int32_t(volatile void *ptr, int32_t value, int32_t comparand)"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_64BIT_ATOMICS template<> int64_t __TBB_CompareAndSwapGeneric<8,)",
    "insertText": "int64_t(volatile void *ptr, int64_t value, int64_t comparand)"
  },
  {
    "label": "__TBB_FetchAndAddGeneric()",
    "kind": "Method",
    "detail": "Function (} # endif template<size_t S,T> T)",
    "insertText": "__TBB_FetchAndAddGeneric(volatile void *ptr, T addend)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (T result ;)",
    "insertText": "for(atomic_backoff b;;b.pause())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (result =* reinterpret_cast<volatile)",
    "insertText": "T(ptr)"
  },
  {
    "label": "__TBB_FetchAndStoreGeneric()",
    "kind": "Method",
    "detail": "Function (} return result ; } template<size_t S,T> T)",
    "insertText": "__TBB_FetchAndStoreGeneric(volatile void *ptr, T value)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE()",
    "kind": "Method",
    "detail": "Function (} return result ; } # if __TBB_USE_GENERIC_PART_WORD_CAS # define __TBB_machine_cmpswp1 tbb::internal::__TBB_CompareAndSwapGeneric<1,int8_t> # define __TBB_machine_cmpswp2 tbb::internal::__TBB_CompareAndSwapGeneric<2,int16_t> # endif # if __TBB_USE_GENERIC_FETCH_ADD | | __TBB_USE_GENERIC_PART_WORD_FETCH_ADD # define __TBB_machine_fetchadd1 tbb::internal::__TBB_FetchAndAddGeneric<1,int8_t> # define __TBB_machine_fetchadd2 tbb::internal::__TBB_FetchAndAddGeneric<2,int16_t> # endif # if __TBB_USE_GENERIC_FETCH_ADD # define __TBB_machine_fetchadd4 tbb::internal::__TBB_FetchAndAddGeneric<4,int32_t> # endif # if __TBB_USE_GENERIC_FETCH_ADD | | __TBB_USE_GENERIC_DWORD_FETCH_ADD # define __TBB_machine_fetchadd8 tbb::internal::__TBB_FetchAndAddGeneric<8,int64_t> # endif # if __TBB_USE_GENERIC_FETCH_STORE | | __TBB_USE_GENERIC_PART_WORD_FETCH_STORE # define __TBB_machine_fetchstore1 tbb::internal::__TBB_FetchAndStoreGeneric<1,int8_t> # define __TBB_machine_fetchstore2 tbb::internal::__TBB_FetchAndStoreGeneric<2,int16_t> # endif # if __TBB_USE_GENERIC_FETCH_STORE # define __TBB_machine_fetchstore4 tbb::internal::__TBB_FetchAndStoreGeneric<4,int32_t> # endif # if __TBB_USE_GENERIC_FETCH_STORE | | __TBB_USE_GENERIC_DWORD_FETCH_STORE # define __TBB_machine_fetchstore8 tbb::internal::__TBB_FetchAndStoreGeneric<8,int64_t> # endif # if __TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE # define)",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE(S) \\ atomic_selector<S>::word atomic_selector<S>::fetch_store ( volatile void* location, word value)"
  },
  {
    "label": "S()",
    "kind": "Method",
    "detail": "Function (\\ return __TBB_machine_fetchstore # #)",
    "insertText": "S(location, value)"
  },
  {
    "label": "__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "__TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE(1) __TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE(2) __TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE(4) __TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE(8) #undef __TBB_MACHINE_DEFINE_ATOMIC_SELECTOR_FETCH_STORE #endif #if __TBB_USE_GENERIC_DWORD_LOAD_STORE #if ! __TBB_USE_FENCED_ATOMICS #define __TBB_machine_cmpswp8full_fence __TBB_machine_cmpswp8 #endif __TBB_MACHINE_DEFINE_LOAD8_GENERIC_FENCED(full_fence) __TBB_MACHINE_DEFINE_STORE8_GENERIC_FENCED(full_fence)"
  },
  {
    "label": "load_with_acquire()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "load_with_acquire(const volatile T& location)"
  },
  {
    "label": "__TBB_acquire_consistency_helper()",
    "kind": "Method",
    "detail": "Function (T to_return = location ;)",
    "insertText": "__TBB_acquire_consistency_helper()"
  },
  {
    "label": "__TBB_release_consistency_helper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_release_consistency_helper()"
  },
  {
    "label": "store_with_release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_with_release(volatile T& location, T value)"
  },
  {
    "label": "__TBB_machine_store8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_machine_store8((volatile void*)&location, (int64_t)value)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # endif # if __TBB_USE_GENERIC_SEQUENTIAL_CONSISTENCY_LOAD_STORE template<T,size_t S> struct machine_load_store_seq_cst { T)",
    "insertText": "load(const volatile T& location)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_USE_FETCHSTORE_AS_FULL_FENCED_STORE void)",
    "insertText": "store(volatile T &location, T value)"
  },
  {
    "label": "fetch_store()",
    "kind": "Method",
    "detail": "Function (atomic_selector<S)",
    "insertText": "fetch_store((volatile void*)&location, (typename atomic_selector<S>::word)value)"
  },
  {
    "label": "store_with_release()",
    "kind": "Method",
    "detail": "Function (machine_load_store<T,S)",
    "insertText": "store_with_release(location, value)"
  },
  {
    "label": "__TBB_machine_cmpswp8()",
    "kind": "Method",
    "detail": "Function (const int64_t anyvalue = 2 3 0 5 8 4 3 0 0 9 2 1 3 6 9 3 9 5 1 LL ; return)",
    "insertText": "__TBB_machine_cmpswp8((volatile void*)const_cast<volatile T*>(&location), anyvalue, anyvalue)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (# if __TBB_GCC_VERSION> = 4 0 7 0 2 # pragma GCC diagnostic push # pragma GCC diagnostic ignored \" - Wmaybe - uninitialized \" # endif int64_t)",
    "insertText": "result(volatile int64_t&)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (# if __TBB_GCC_VERSION> = 4 0 7 0 2 # pragma GCC diagnostic pop # endif)",
    "insertText": "while(__TBB_machine_cmpswp8((volatile void*)&location, (int64_t)value, result) != result ) result = (volatile int64_t&)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store(volatile T& location, T value)"
  },
  {
    "label": "__TBB_load_with_acquire()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # endif # undef __TBB_WORDSIZE template<T> T)",
    "insertText": "__TBB_load_with_acquire(const volatile T &location)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (} template<T,V> void)",
    "insertText": "__TBB_store_with_release(volatile T& location, V value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (machine_load_store<T,)",
    "insertText": "sizeof(T)>::store_with_release( location, T(value))"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_store_with_release(volatile size_t& location, size_t value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (machine_load_store<size_t,)",
    "insertText": "sizeof(size_t)>::store_with_release( location, value)"
  },
  {
    "label": "__TBB_load_full_fence()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "__TBB_load_full_fence(const volatile T &location)"
  },
  {
    "label": "__TBB_store_full_fence()",
    "kind": "Method",
    "detail": "Function (} template<T,V> void)",
    "insertText": "__TBB_store_full_fence(volatile T& location, V value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (machine_load_store_seq_cst<T,)",
    "insertText": "sizeof(T)>::store( location, T(value))"
  },
  {
    "label": "__TBB_store_full_fence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_store_full_fence(volatile size_t& location, size_t value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (machine_load_store_seq_cst<size_t,)",
    "insertText": "sizeof(size_t)>::store( location, value)"
  },
  {
    "label": "__TBB_load_relaxed()",
    "kind": "Method",
    "detail": "Function (} template<T> T)",
    "insertText": "__TBB_load_relaxed(const volatile T& location)"
  },
  {
    "label": "__TBB_store_relaxed()",
    "kind": "Method",
    "detail": "Function (} template<T,V> void)",
    "insertText": "__TBB_store_relaxed(volatile T& location, V value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (machine_load_store_relaxed<T,)",
    "insertText": "sizeof(T)>::store( const_cast<T&>(location), T(value))"
  },
  {
    "label": "__TBB_store_relaxed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_store_relaxed(volatile size_t& location, size_t value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (machine_load_store_relaxed<size_t,)",
    "insertText": "sizeof(size_t)>::store( const_cast<size_t&>(location), value)"
  },
  {
    "label": "__TBB_DefineTypeWithAlignment()",
    "kind": "Method",
    "detail": "Function (} # ifndef __TBB_TypeWithAlignmentAtLeastAsStrict # if __TBB_ALIGNAS_PRESENT # define)",
    "insertText": "__TBB_DefineTypeWithAlignment(PowerOf2) \\ struct alignas(PowerOf2)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (\\ uint32_t member [ PowerOf2 /)",
    "insertText": "sizeof(uint32_t)"
  },
  {
    "label": "__TBB_alignof()",
    "kind": "Method",
    "detail": "Function (\\ } ; # define)",
    "insertText": "__TBB_alignof(T) alignof(T) #elif __TBB_ATTRIBUTE_ALIGNED_PRESENT #define __TBB_DefineTypeWithAlignment(PowerOf2)"
  },
  {
    "label": "__attribute__()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "__attribute__((aligned(PowerOf2)))"
  },
  {
    "label": "__TBB_alignof()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "__TBB_alignof(T) __alignof__(T) #elif __TBB_DECLSPEC_ALIGN_PRESENT #define __TBB_DefineTypeWithAlignment(PowerOf2) \\ __declspec(align(PowerOf2))"
  },
  {
    "label": "__TBB_alignof()",
    "kind": "Method",
    "detail": "Function (\\ } ; # define)",
    "insertText": "__TBB_alignof(T) __alignof(T) #else #error Must define __TBB_TypeWithAlignmentAtLeastAsStrict(T) #endif __TBB_DefineTypeWithAlignment(8) __TBB_DefineTypeWithAlignment(16) __TBB_DefineTypeWithAlignment(32) __TBB_DefineTypeWithAlignment(64)"
  },
  {
    "label": "__TBB_alignof()",
    "kind": "Method",
    "detail": "Function (template<size_t N> struct type_with_alignment ; template<> struct type_with_alignment<1> { char member ; } ; template<> struct type_with_alignment<2> { uint16_t member ; } ; template<> struct type_with_alignment<4> { uint32_t member ; } ; template<> struct type_with_alignment<8> { __TBB_machine_type_with_alignment_8 member ; } ; template<> struct type_with_alignment<1 6> { __TBB_machine_type_with_alignment_16 member ; } ; template<> struct type_with_alignment<3 2> { __TBB_machine_type_with_alignment_32 member ; } ; template<> struct type_with_alignment<6 4> { __TBB_machine_type_with_alignment_64 member ; } ; # if __TBB_ALIGNOF_NOT_INSTANTIATED_TYPES_BROKEN template<size_t Size,T> struct work_around_alignment_bug { const size_t alignment =)",
    "insertText": "__TBB_alignof(T)"
  },
  {
    "label": "__TBB_TypeWithAlignmentAtLeastAsStrict()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "__TBB_TypeWithAlignmentAtLeastAsStrict(T) tbb::internal::type_with_alignment<tbb::internal::work_around_alignment_bug<sizeof(T),T>::alignment> #else #define __TBB_TypeWithAlignmentAtLeastAsStrict(T) tbb::internal::type_with_alignment<__TBB_alignof(T)"
  },
  {
    "label": "__TBB_Log2()",
    "kind": "Method",
    "detail": "Function (const T byte_table [ 2 5 6 ] ; } ; template<T> const T reverse<T>::byte_table [ 2 5 6 ] = { 0 x00,0 x80,0 x40,0 xC0,0 x20,0 xA0,0 x60,0 xE0,0 x10,0 x90,0 x50,0 xD0,0 x30,0 xB0,0 x70,0 xF0,0 x08,0 x88,0 x48,0 xC8,0 x28,0 xA8,0 x68,0 xE8,0 x18,0 x98,0 x58,0 xD8,0 x38,0 xB8,0 x78,0 xF8,0 x04,0 x84,0 x44,0 xC4,0 x24,0 xA4,0 x64,0 xE4,0 x14,0 x94,0 x54,0 xD4,0 x34,0 xB4,0 x74,0 xF4,0 x0C,0 x8C,0 x4C,0 xCC,0 x2C,0 xAC,0 x6C,0 xEC,0 x1C,0 x9C,0 x5C,0 xDC,0 x3C,0 xBC,0 x7C,0 xFC,0 x02,0 x82,0 x42,0 xC2,0 x22,0 xA2,0 x62,0 xE2,0 x12,0 x92,0 x52,0 xD2,0 x32,0 xB2,0 x72,0 xF2,0 x0A,0 x8A,0 x4A,0 xCA,0 x2A,0 xAA,0 x6A,0 xEA,0 x1A,0 x9A,0 x5A,0 xDA,0 x3A,0 xBA,0 x7A,0 xFA,0 x06,0 x86,0 x46,0 xC6,0 x26,0 xA6,0 x66,0 xE6,0 x16,0 x96,0 x56,0 xD6,0 x36,0 xB6,0 x76,0 xF6,0 x0E,0 x8E,0 x4E,0 xCE,0 x2E,0 xAE,0 x6E,0 xEE,0 x1E,0 x9E,0 x5E,0 xDE,0 x3E,0 xBE,0 x7E,0 xFE,0 x01,0 x81,0 x41,0 xC1,0 x21,0 xA1,0 x61,0 xE1,0 x11,0 x91,0 x51,0 xD1,0 x31,0 xB1,0 x71,0 xF1,0 x09,0 x89,0 x49,0 xC9,0 x29,0 xA9,0 x69,0 xE9,0 x19,0 x99,0 x59,0 xD9,0 x39,0 xB9,0 x79,0 xF9,0 x05,0 x85,0 x45,0 xC5,0 x25,0 xA5,0 x65,0 xE5,0 x15,0 x95,0 x55,0 xD5,0 x35,0 xB5,0 x75,0 xF5,0 x0D,0 x8D,0 x4D,0 xCD,0 x2D,0 xAD,0 x6D,0 xED,0 x1D,0 x9D,0 x5D,0 xDD,0 x3D,0 xBD,0 x7D,0 xFD,0 x03,0 x83,0 x43,0 xC3,0 x23,0 xA3,0 x63,0 xE3,0 x13,0 x93,0 x53,0 xD3,0 x33,0 xB3,0 x73,0 xF3,0 x0B,0 x8B,0 x4B,0 xCB,0 x2B,0 xAB,0 x6B,0 xEB,0 x1B,0 x9B,0 x5B,0 xDB,0 x3B,0 xBB,0 x7B,0 xFB,0 x07,0 x87,0 x47,0 xC7,0 x27,0 xA7,0 x67,0 xE7,0 x17,0 x97,0 x57,0 xD7,0 x37,0 xB7,0 x77,0 xF7,0 x0F,0 x8F,0 x4F,0 xCF,0 x2F,0 xAF,0 x6F,0 xEF,0 x1F,0 x9F,0 x5F,0 xDF,0 x3F,0 xBF,0 x7F,0 xFF } ; } } using tbb::internal::__TBB_load_with_acquire ; using tbb::internal::__TBB_store_with_release ; # define __TBB_load_acquire __TBB_load_with_acquire # define __TBB_store_release __TBB_store_with_release # ifndef __TBB_Log2 intptr_t)",
    "insertText": "__TBB_Log2(uintptr_t x)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (intptr_t result = 0 ; # if !)",
    "insertText": "defined(_M_ARM)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x = tmp_ ; result + = 3 2 ; } # endif)",
    "insertText": "if(uintptr_t tmp = x>>16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x = tmp ; result + = 1 6 ; })",
    "insertText": "if(uintptr_t tmp = x>>8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x = tmp ; result + = 8 ; })",
    "insertText": "if(uintptr_t tmp = x>>4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (x = tmp ; result + = 4 ; })",
    "insertText": "if(uintptr_t tmp = x>>2)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (x = tmp ; result + = 2 ; })",
    "insertText": "return(x&2)"
  },
  {
    "label": "__TBB_AtomicOR()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef __TBB_AtomicOR void)",
    "insertText": "__TBB_AtomicOR(volatile void *operand, uintptr_t addend)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "tmp(volatile uintptr_t *)"
  },
  {
    "label": "__TBB_CompareAndSwapW()",
    "kind": "Method",
    "detail": "Function (uintptr_t result =)",
    "insertText": "__TBB_CompareAndSwapW(operand, tmp|addend, tmp)"
  },
  {
    "label": "__TBB_AtomicAND()",
    "kind": "Method",
    "detail": "Function (} } # endif # ifndef __TBB_AtomicAND void)",
    "insertText": "__TBB_AtomicAND(volatile void *operand, uintptr_t addend)"
  },
  {
    "label": "__TBB_CompareAndSwapW()",
    "kind": "Method",
    "detail": "Function (uintptr_t result =)",
    "insertText": "__TBB_CompareAndSwapW(operand, tmp&addend, tmp)"
  },
  {
    "label": "__TBB_cl_evict()",
    "kind": "Method",
    "detail": "Function (} } # endif # if __TBB_PREFETCHING # ifndef __TBB_cl_prefetch # error This platform does not define cache management primitives required for __TBB_PREFETCHING # endif # ifndef __TBB_cl_evict # define)",
    "insertText": "__TBB_cl_evict(p)"
  },
  {
    "label": "__TBB_TryLockByte()",
    "kind": "Method",
    "detail": "Function (# endif typedef __TBB_atomic __TBB_Flag __TBB_atomic_flag ; # ifndef __TBB_TryLockByte bool)",
    "insertText": "__TBB_TryLockByte(__TBB_atomic_flag &flag)"
  },
  {
    "label": "__TBB_LockByte()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef __TBB_LockByte __TBB_Flag)",
    "insertText": "__TBB_LockByte(__TBB_atomic_flag& flag)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (tbb::internal::atomic_backoff backoff ;)",
    "insertText": "while(!__TBB_TryLockByte(flag) ) backoff.pause()"
  },
  {
    "label": "__TBB_machine_try_lock_elided_cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_machine_try_lock_elided_cancel()"
  },
  {
    "label": "__TBB_TryLockByteElided()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "__TBB_TryLockByteElided(__TBB_atomic_flag& flag)"
  },
  {
    "label": "__TBB_machine_try_lock_elided()",
    "kind": "Method",
    "detail": "Function (bool res =)",
    "insertText": "__TBB_machine_try_lock_elided(&flag)"
  },
  {
    "label": "spin_wait_while_eq()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "spin_wait_while_eq(flag, 1)"
  },
  {
    "label": "__TBB_TryLockByteElidedCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_TryLockByteElidedCancel()"
  },
  {
    "label": "__TBB_UnlockByteElided()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "__TBB_UnlockByteElided(__TBB_atomic_flag& flag)"
  },
  {
    "label": "__TBB_machine_unlock_elided()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_machine_unlock_elided(&flag)"
  },
  {
    "label": "__TBB_ReverseByte()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef __TBB_ReverseByte unsigned char)",
    "insertText": "__TBB_ReverseByte(unsigned char src)"
  },
  {
    "label": "original()",
    "kind": "Method",
    "detail": "Function (T dst ; unsigned char*)",
    "insertText": "original(unsigned char *)"
  },
  {
    "label": "reversed()",
    "kind": "Method",
    "detail": "Function (unsigned char*)",
    "insertText": "reversed(unsigned char *)"
  }
]