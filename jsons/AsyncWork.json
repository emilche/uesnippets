[
  {
    "label": "ExampleAutoDeleteAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExampleAutoDeleteAsyncTask"
  },
  {
    "label": "FAutoDeleteAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoDeleteAsyncTask"
  },
  {
    "label": "FAutoDeleteAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoDeleteAsyncTask"
  },
  {
    "label": "ExampleAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExampleAsyncTask"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "FAsyncTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTaskBase"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FNonAbandonableTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNonAbandonableTask"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (stuff)",
    "insertText": "DoWork()"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(StatId, true)"
  },
  {
    "label": "DestroyEvent()",
    "kind": "Method",
    "detail": "Function (stuff)",
    "insertText": "DestroyEvent()"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(StatId, true)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(StatId, true)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(StatId)"
  },
  {
    "label": "CheckIdle()",
    "kind": "Method",
    "detail": "Function (bug)",
    "insertText": "CheckIdle()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsDone()"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(StatId)"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Reschedule(QueuedPool, QueuedWorkPriority)"
  }
]