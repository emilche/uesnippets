[
  {
    "label": "FAutoDeleteAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoDeleteAsyncTask"
  },
  {
    "label": "FAsyncTaskBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTaskBase"
  },
  {
    "label": "FAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTask"
  },
  {
    "label": "FNonAbandonableTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNonAbandonableTask"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Compression . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Stats / Stats . h \" # include \" HAL / Event . h \" # include \" HAL / PlatformProcess . h \" # include \" Async / InheritedContext . h \" # include \" Misc / IQueuedWork . h \" # include \" Misc / QueuedThreadPool . h \" # include \" Async / Fundamental / Scheduler . h \" template<TTask> class FAutoDeleteAsyncTask : private UE::FInheritedContextBase,private IQueuedWork { TTask Task ; void)",
    "insertText": "Start(bool bForceSynchronous, FQueuedThreadPool* InQueuedPool, EQueuedWorkPriority InPriority = EQueuedWorkPriority::Normal)"
  },
  {
    "label": "CaptureInheritedContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureInheritedContext()"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryBarrier()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FQueuedThreadPool* QueuedPool = InQueuedPool ;)",
    "insertText": "if(bForceSynchronous)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (QueuedPool = 0 ; })",
    "insertText": "if(QueuedPool)"
  },
  {
    "label": "AddQueuedWork()",
    "kind": "Method",
    "detail": "Function (QueuedPool ->)",
    "insertText": "AddQueuedWork(this, InPriority)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DoWork()"
  },
  {
    "label": "RestoreInheritedContext()",
    "kind": "Method",
    "detail": "Function (UE::FInheritedContextScope InheritedContextScope =)",
    "insertText": "RestoreInheritedContext()"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(Task.GetStatId(), true)"
  },
  {
    "label": "DoThreadedWork()",
    "kind": "Method",
    "detail": "Function (delete this ; } void)",
    "insertText": "DoThreadedWork()"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Abandon(void)"
  },
  {
    "label": "Abandon()",
    "kind": "Method",
    "detail": "Function (Task .)",
    "insertText": "Abandon()"
  },
  {
    "label": "FAutoDeleteAsyncTask()",
    "kind": "Method",
    "detail": "Function (} } public : template<. . . T>)",
    "insertText": "FAutoDeleteAsyncTask(T&&... Args) : Task(Forward<T>(Args)...)"
  },
  {
    "label": "StartSynchronousTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartSynchronousTask()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(true, nullptr)"
  },
  {
    "label": "StartBackgroundTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartBackgroundTask(FQueuedThreadPool* InQueuedPool = GThreadPool, EQueuedWorkPriority InPriority = EQueuedWorkPriority::Normal)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(false, InQueuedPool, InPriority)"
  },
  {
    "label": "DestroyEvent()",
    "kind": "Method",
    "detail": "Function (} } ; class FAsyncTaskBase : private UE::FInheritedContextBase,private IQueuedWork { FThreadSafeCounter WorkNotFinishedCounter ; FEvent* DoneEvent = nullptr ; FQueuedThreadPool* QueuedPool = nullptr ; EQueuedWorkPriority Priority = EQueuedWorkPriority::Normal ; EQueuedWorkFlags Flags = EQueuedWorkFlags::None ; int64 RequiredMemory = - 1 ; const TCHAR* DebugName = nullptr ; TStatId StatId ; void)",
    "insertText": "DestroyEvent()"
  },
  {
    "label": "ReturnSynchEventToPool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnSynchEventToPool(DoneEvent)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(StatId, true)"
  },
  {
    "label": "DECLARE_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_SCOPE_CYCLE_COUNTER(TEXT( \"FAsyncTask::Start\" ), STAT_FAsyncTask_Start, STATGROUP_ThreadPoolAsyncTasks)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (WorkNotFinishedCounter .)",
    "insertText": "Increment()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} DoneEvent ->)",
    "insertText": "Reset()"
  },
  {
    "label": "AddQueuedWork()",
    "kind": "Method",
    "detail": "Function (QueuedPool ->)",
    "insertText": "AddQueuedWork(this, InQueuedWorkPriority)"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (WorkNotFinishedCounter .)",
    "insertText": "Decrement()"
  },
  {
    "label": "FinishThreadedWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FinishThreadedWork()"
  },
  {
    "label": "DECLARE_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_SCOPE_CYCLE_COUNTER(TEXT( \"FAsyncTask::FinishThreadedWork\" ), STAT_FAsyncTask_FinishThreadedWork, STATGROUP_ThreadPoolAsyncTasks)"
  },
  {
    "label": "SyncCompletion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SyncCompletion(bool bIsLatencySensitive)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE(FAsyncTask::SyncCompletion)"
  },
  {
    "label": "Scope()",
    "kind": "Method",
    "detail": "Function (FScopeCycleCounter)",
    "insertText": "Scope(StatId)"
  },
  {
    "label": "DECLARE_SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_SCOPE_CYCLE_COUNTER(TEXT(\"FAsyncTask::SyncCompletion\"), STAT_FAsyncTask_SyncCompletion, STATGROUP_ThreadPoolAsyncTasks)"
  },
  {
    "label": "CheckIdle()",
    "kind": "Method",
    "detail": "Function (QueuedPool = 0 ; })",
    "insertText": "CheckIdle()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Init(TStatId InStatId)"
  },
  {
    "label": "DoTaskWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoTaskWork()"
  },
  {
    "label": "TryAbandonTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAbandonTask()"
  },
  {
    "label": "FAsyncTaskBase()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FAsyncTaskBase()"
  },
  {
    "label": "GetRequiredMemory()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetRequiredMemory()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(true, GThreadPool, InQueuedWorkPriority, InQueuedWorkFlags, InRequiredMemory, InDebugName)"
  },
  {
    "label": "StartBackgroundTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartBackgroundTask(FQueuedThreadPool* InQueuedPool = GThreadPool, EQueuedWorkPriority InQueuedWorkPriority = EQueuedWorkPriority::Normal, EQueuedWorkFlags InQueuedWorkFlags = EQueuedWorkFlags::None, int64 InRequiredMemory = -1, const TCHAR * InDebugName = nullptr)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(false, InQueuedPool, InQueuedWorkPriority, InQueuedWorkFlags, InRequiredMemory, InDebugName)"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnsureCompletion(bool bDoWorkOnThisThreadIfNotStarted = true, bool bIsLatencySensitive = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool DoSyncCompletion = true ;)",
    "insertText": "if(bDoWorkOnThisThreadIfNotStarted)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (QueuedPool = 0 ; } } else)",
    "insertText": "if(WorkNotFinishedCounter.GetValue())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(DoSyncCompletion)"
  },
  {
    "label": "SyncCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncCompletion(bIsLatencySensitive)"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Reschedule(FQueuedThreadPool* InQueuedPool = GThreadPool, EQueuedWorkPriority InQueuedWorkPriority = EQueuedWorkPriority::Normal)"
  },
  {
    "label": "WaitCompletionWithTimeout()",
    "kind": "Method",
    "detail": "Function (QueuedPool = 0 ; return true ; } } return false ; } bool)",
    "insertText": "WaitCompletionWithTimeout(float TimeLimitSeconds)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Ms =)",
    "insertText": "uint32(TimeLimitSeconds * 1000.0f)"
  },
  {
    "label": "SetPriority()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetPriority(EQueuedWorkPriority QueuedWorkPriority)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (} EQueuedWorkPriority)",
    "insertText": "GetPriority()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Task.GetStatId())"
  },
  {
    "label": "FAsyncTask()",
    "kind": "Method",
    "detail": "Function (} template<Arg0Type,. . . ArgTypes>)",
    "insertText": "FAsyncTask(Arg0Type&& Arg0, ArgTypes&&... Args) : Task(Forward<Arg0Type>(Arg0), Forward<ArgTypes>(Args)...)"
  },
  {
    "label": "GetTask()",
    "kind": "Method",
    "detail": "Function (} TTask&)",
    "insertText": "GetTask()"
  },
  {
    "label": "CanAbandon()",
    "kind": "Method",
    "detail": "Function (} } ; class FNonAbandonableTask { public : bool)",
    "insertText": "CanAbandon()"
  }
]