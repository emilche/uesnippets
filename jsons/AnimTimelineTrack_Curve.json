[
  {
    "label": "SBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBorder"
  },
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FRichCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRichCurve"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SCurveBoundsOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveBoundsOverlay"
  },
  {
    "label": "FAnimTimelineTrack_Curve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimTimelineTrack_Curve"
  },
  {
    "label": "ANIMTIMELINE_DECLARE_TRACK()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimTimeline / AnimTimelineTrack . h \" # include \" Animation / Skeleton . h \" # include \" EditorUndoClient . h \" # include \" AnimTimeline / AnimModel . h \" # include \" Animation / AnimData / CurveIdentifier . h \" class SBorder ; class FCurveEditor ; struct FRichCurve ; class SHorizontalBox ; class SCurveBoundsOverlay ; class FAnimTimelineTrack_Curve : public FAnimTimelineTrack,public FSelfRegisteringEditorUndoClient {)",
    "insertText": "ANIMTIMELINE_DECLARE_TRACK(FAnimTimelineTrack_Curve, FAnimTimelineTrack)"
  },
  {
    "label": "FAnimTimelineTrack_Curve()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimTimelineTrack_Curve(const FText& InCurveName, const FText& InFullCurveName, const FLinearColor& InColor, const FLinearColor& InBackgroundColor, const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "FAnimTimelineTrack_Curve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimTimelineTrack_Curve(const FRichCurve* InCurve, const FName& InName, int32 InCurveIndex, ERawCurveTrackTypes InType, const FText& InCurveName, const FText& InFullCurveName, const FLinearColor& InColor, const FLinearColor& InBackgroundColor, const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "FAnimTimelineTrack_Curve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimTimelineTrack_Curve(const TArray<const FRichCurve*>& InCurves, const FText& InCurveName, const FText& InFullCurveName, const FLinearColor& InColor, const FLinearColor& InBackgroundColor, const TSharedRef<FAnimModel>& InModel)"
  },
  {
    "label": "GenerateContainerWidgetForTimeline()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateContainerWidgetForTimeline()"
  },
  {
    "label": "GenerateContainerWidgetForOutliner()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateContainerWidgetForOutliner(const TSharedRef<SAnimOutlinerItem>& InRow)"
  },
  {
    "label": "SupportsSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSelection()"
  },
  {
    "label": "SupportsCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsCopy()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostUndoRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndoRedo()"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "GetCurves()",
    "kind": "Method",
    "detail": "Function (} const TArray<const FRichCurve*>&)",
    "insertText": "GetCurves()"
  },
  {
    "label": "CanEditCurve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEditCurve(int32 InCurveIndex)"
  },
  {
    "label": "HandleCurveChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleCurveChanged()"
  },
  {
    "label": "MakeTimelineWidgetContainer()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "MakeTimelineWidgetContainer()"
  },
  {
    "label": "MakeCurveWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeCurveWidget()"
  },
  {
    "label": "BuildCurveTrackMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildCurveTrackMenu()"
  },
  {
    "label": "AddCurveTrackButton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCurveTrackButton(TSharedPtr<SHorizontalBox> InnerHorizontalBox)"
  },
  {
    "label": "ShowCurves()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowCurves()"
  },
  {
    "label": "HandleDoubleClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDoubleClicked(const FGeometry& InGeometry, const FPointerEvent& InPointerEvent)"
  },
  {
    "label": "HandleMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleMouseButtonUp(const FGeometry& InGeometry, const FPointerEvent& InPointerEvent)"
  },
  {
    "label": "HendleEditCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HendleEditCurve()"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit()"
  }
]