[
  {
    "label": "BitstreamCursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitstreamCursor"
  },
  {
    "label": "BitstreamUseTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitstreamUseTracker"
  },
  {
    "label": "ExtendResult",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ExtendResult"
  },
  {
    "label": "AutoTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AutoTrack"
  },
  {
    "label": "ScopeTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ScopeTrack"
  },
  {
    "label": "BitstreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitstreamReader"
  },
  {
    "label": "BlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BlockInfo"
  },
  {
    "label": "BitstreamEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitstreamEntry"
  },
  {
    "label": "Block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Block"
  },
  {
    "label": "extendRange()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_BITCODE_BITSTREAMREADER_H # define LLVM_BITCODE_BITSTREAMREADER_H # include \" llvm / Bitcode / BitCodes . h \" # include \" llvm / Support / Endian . h \" # include \" llvm / Support / StreamingMemoryObject . h \" # include<climits> # include<string> # include<vector> namespace llvm { class BitstreamCursor ; class BitstreamUseTracker { private : typedef std::pair<uint64_t,uint64_t> UseRange ; SmallVector<UseRange,8> Ranges ; enum ExtendResult { Exclusive,ExtendedBegin,ExtendedEnd,ExtendedBoth,Included } ; ExtendResult)",
    "insertText": "extendRange(UseRange &R, UseRange &NewRange)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "contains(const UseRange &UR)"
  },
  {
    "label": "considerMergeRight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "considerMergeRight(size_t idx)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (public : struct AutoTrack { BitstreamUseTracker* BT ; uint64_t begin ; void)",
    "insertText": "end(uint64_t end)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "track(BT, begin, end)"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (} } ; AutoTrack)",
    "insertText": "start(BitstreamUseTracker *BT, uint64_t begin)"
  },
  {
    "label": "ScopeTrack()",
    "kind": "Method",
    "detail": "Function (AutoTrack AT ; AT . BT = BT ; AT . begin = begin ; return AT ; } struct ScopeTrack { BitstreamCursor* BC ; uint64_t begin ; ~)",
    "insertText": "ScopeTrack()"
  },
  {
    "label": "scope_track()",
    "kind": "Method",
    "detail": "Function (} ; ScopeTrack)",
    "insertText": "scope_track(BitstreamCursor *BC)"
  },
  {
    "label": "track()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "track(BitstreamUseTracker *BT, uint64_t begin, uint64_t end)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(uint64_t begin, uint64_t end)"
  },
  {
    "label": "isDense()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDense(uint64_t endBitoffset)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (} ; class BitstreamReader { public : struct BlockInfo { unsigned BlockID ; std::vector<IntrusiveRefCntPtr<BitCodeAbbrev>> Abbrevs ; std::string Name ; std::vector<std::pair<unsigned,std::string>> RecordNames ; } ; private : std::unique_ptr<MemoryObject> BitcodeBytes ; std::vector<BlockInfo> BlockInfoRecords ; bool IgnoreBlockInfoNames ;)",
    "insertText": "BitstreamReader(const BitstreamReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const BitstreamReader&)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "BitstreamReader() : IgnoreBlockInfoNames(true)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitstreamReader(const unsigned char *Start, const unsigned char *End) : IgnoreBlockInfoNames(true)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Start, End)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (} BitstreamUseTracker* Tracker = nullptr ;)",
    "insertText": "BitstreamReader(std::unique_ptr<MemoryObject> BitcodeBytes) : BitcodeBytes(std::move(BitcodeBytes)), IgnoreBlockInfoNames(true)"
  },
  {
    "label": "BitstreamReader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitstreamReader(BitstreamReader &&Other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "move(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BitstreamReader&)",
    "insertText": "operator(BitstreamReader &&Other)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (BitcodeBytes =)",
    "insertText": "move(Other.BitcodeBytes)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(BlockInfoRecords, Other.BlockInfoRecords)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (IgnoreBlockInfoNames = Other . IgnoreBlockInfoNames ; return* this ; } void)",
    "insertText": "init(const unsigned char *Start, const unsigned char *End)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(((End-Start) & 3) == 0 &&\"Bitcode stream not a multiple of 4 bytes\")"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (BitcodeBytes .)",
    "insertText": "reset(getNonStreamedMemoryObject(Start, End))"
  },
  {
    "label": "getBitcodeBytes()",
    "kind": "Method",
    "detail": "Function (} MemoryObject&)",
    "insertText": "getBitcodeBytes()"
  },
  {
    "label": "isIgnoringBlockInfoNames()",
    "kind": "Method",
    "detail": "Function (IgnoreBlockInfoNames = false ; } bool)",
    "insertText": "isIgnoringBlockInfoNames()"
  },
  {
    "label": "getBlockInfo()",
    "kind": "Method",
    "detail": "Function (} const BlockInfo*)",
    "insertText": "getBlockInfo(unsigned BlockID)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (BlockInfoRecords .)",
    "insertText": "emplace_back()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (BlockInfoRecords .)",
    "insertText": "back()"
  },
  {
    "label": "takeBlockInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "takeBlockInfo(BitstreamReader &&Other)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!hasBlockInfoRecords())"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (BlockInfoRecords =)",
    "insertText": "move(Other.BlockInfoRecords)"
  },
  {
    "label": "getError()",
    "kind": "Method",
    "detail": "Function (} } ; struct BitstreamEntry { enum { Error,EndBlock,SubBlock,Record } Kind ; unsigned ID ; BitstreamEntry)",
    "insertText": "getError()"
  },
  {
    "label": "getEndBlock()",
    "kind": "Method",
    "detail": "Function (BitstreamEntry E ; E . Kind = Error ; return E ; } BitstreamEntry)",
    "insertText": "getEndBlock()"
  },
  {
    "label": "getSubBlock()",
    "kind": "Method",
    "detail": "Function (BitstreamEntry E ; E . Kind = EndBlock ; return E ; } BitstreamEntry)",
    "insertText": "getSubBlock(unsigned ID)"
  },
  {
    "label": "getRecord()",
    "kind": "Method",
    "detail": "Function (BitstreamEntry E ; E . Kind = SubBlock ; E . ID = ID ; return E ; } BitstreamEntry)",
    "insertText": "getRecord(unsigned AbbrevID)"
  },
  {
    "label": "Block()",
    "kind": "Method",
    "detail": "Function (BitstreamEntry E ; E . Kind = Record ; E . ID = AbbrevID ; return E ; } } ; class BitstreamCursor { BitstreamReader* BitStream ; size_t NextChar ; size_t Size ; typedef size_t word_t ; word_t CurWord ; unsigned BitsInCurWord ; unsigned CurCodeSize ; std::vector<IntrusiveRefCntPtr<BitCodeAbbrev>> CurAbbrevs ; struct Block { unsigned PrevCodeSize ; std::vector<IntrusiveRefCntPtr<BitCodeAbbrev>> PrevAbbrevs ;)",
    "insertText": "Block(unsigned PCS) : PrevCodeSize(PCS)"
  },
  {
    "label": "AddRecordElements()",
    "kind": "Method",
    "detail": "Function (} } ; SmallVector<Block,8> BlockScope ; template<T> void)",
    "insertText": "AddRecordElements(BitCodeAbbrevOp::Encoding enc, uint64_t encData, unsigned NumElts, SmallVectorImpl<T> &Vals)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : const size_t MaxChunkSize =)",
    "insertText": "sizeof(word_t)"
  },
  {
    "label": "BitstreamCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitstreamCursor()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(nullptr)"
  },
  {
    "label": "BitstreamCursor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BitstreamCursor(BitstreamReader &R)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(&R)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(BitstreamReader *R)"
  },
  {
    "label": "freeState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "freeState()"
  },
  {
    "label": "canSkipToPos()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canSkipToPos(size_t pos)"
  },
  {
    "label": "AtEndOfStream()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AtEndOfStream()"
  },
  {
    "label": "fillCurWord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fillCurWord()"
  },
  {
    "label": "ReadCode()",
    "kind": "Method",
    "detail": "Function (unsigned Code =)",
    "insertText": "ReadCode()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Code == bitc::ENTER_SUBBLOCK) return BitstreamEntry::getSubBlock(ReadSubBlockID())"
  },
  {
    "label": "ReadAbbrevRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadAbbrevRecord()"
  },
  {
    "label": "getRecord()",
    "kind": "Method",
    "detail": "Function (continue ; } return)",
    "insertText": "getRecord(Code)"
  },
  {
    "label": "advanceSkippingSubblocks()",
    "kind": "Method",
    "detail": "Function (} } BitstreamEntry)",
    "insertText": "advanceSkippingSubblocks(unsigned Flags = 0, unsigned *pCount = nullptr)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (BitstreamEntry Entry =)",
    "insertText": "advance(Flags)"
  },
  {
    "label": "JumpToBit()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "JumpToBit(uint64_t BitNo)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t ByteNo =)",
    "insertText": "size_t(BitNo/8) & ~(sizeof(word_t)-1)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned WordBitNo =)",
    "insertText": "unsigned(BitNo & (sizeof(word_t)*8-1))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(canSkipToPos(ByteNo) && \"Invalid location\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextChar = ByteNo ; BitsInCurWord = 0 ;)",
    "insertText": "if(WordBitNo) Read(WordBitNo)"
  },
  {
    "label": "getBitcodeBytes()",
    "kind": "Method",
    "detail": "Function (0 } ; uint64_t BytesRead = BitStream ->)",
    "insertText": "getBitcodeBytes().readBytes(Array, sizeof(Array), NextChar)"
  },
  {
    "label": "unaligned()",
    "kind": "Method",
    "detail": "Function (Size = NextChar ; return ; } CurWord = support::endian::read<word_t,support::little,)",
    "insertText": "unaligned(Array)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (NextChar + = BytesRead ; BitsInCurWord = BytesRead* 8 ; } word_t)",
    "insertText": "Read(unsigned NumBits)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (const unsigned BitsInWord = MaxChunkSize ;)",
    "insertText": "assert(NumBits && NumBits <= BitsInWord && \"Cannot return zero or more than BitsInWord bits!\")"
  },
  {
    "label": "scope_track()",
    "kind": "Method",
    "detail": "Function (auto T =)",
    "insertText": "scope_track(this)"
  },
  {
    "label": "CurWord()",
    "kind": "Method",
    "detail": "Function (word_t R =)",
    "insertText": "CurWord(~word_t(0) >> (BitsInWord - NumBits))"
  },
  {
    "label": "CurWord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurWord(NumBits & Mask)"
  },
  {
    "label": "CurWord()",
    "kind": "Method",
    "detail": "Function (word_t R2 =)",
    "insertText": "CurWord(~word_t(0) >> (BitsInWord - BitsLeft))"
  },
  {
    "label": "CurWord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurWord(BitsLeft & Mask)"
  },
  {
    "label": "R2()",
    "kind": "Method",
    "detail": "Function (BitsInCurWord - = BitsLeft ; R | =)",
    "insertText": "R2(NumBits - BitsLeft)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (uint32_t Piece =)",
    "insertText": "Read(NumBits)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32_t Result = 0 ; unsigned NextBit = 0 ;)",
    "insertText": "while(1)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(Piece & ((1U << (NumBits-1))-1))"
  },
  {
    "label": "ReadVBR64()",
    "kind": "Method",
    "detail": "Function (} } uint64_t)",
    "insertText": "ReadVBR64(unsigned NumBits)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (Result | =)",
    "insertText": "uint64_t(Piece & ((1U << (NumBits-1))-1))"
  },
  {
    "label": "SkipToFourByteBoundary()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "SkipToFourByteBoundary()"
  },
  {
    "label": "PeekCode()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "PeekCode()"
  },
  {
    "label": "GetCurrentBitNo()",
    "kind": "Method",
    "detail": "Function (auto BitPos =)",
    "insertText": "GetCurrentBitNo()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (unsigned result =)",
    "insertText": "Read(CurCodeSize)"
  },
  {
    "label": "JumpToBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToBit(BitPos)"
  },
  {
    "label": "SkipBlock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SkipBlock()"
  },
  {
    "label": "ReadVBR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadVBR(bitc::CodeLenWidth)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (unsigned NumFourBytes =)",
    "insertText": "Read(bitc::BlockSizeWidth)"
  },
  {
    "label": "JumpToBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToBit(SkipTo)"
  },
  {
    "label": "ReadBlockEnd()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBlockEnd()"
  },
  {
    "label": "popBlockScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "popBlockScope()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (CurAbbrevs =)",
    "insertText": "move(BlockScope.back().PrevAbbrevs)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (BlockScope .)",
    "insertText": "pop_back()"
  },
  {
    "label": "getAbbrev()",
    "kind": "Method",
    "detail": "Function (} public : const BitCodeAbbrev*)",
    "insertText": "getAbbrev(unsigned AbbrevID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned AbbrevNo = AbbrevID - bitc::FIRST_APPLICATION_ABBREV ;)",
    "insertText": "if(AbbrevNo >= CurAbbrevs.size()) report_fatal_error(\"Invalid abbrev number\")"
  },
  {
    "label": "skipRecord()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "skipRecord(unsigned AbbrevID)"
  },
  {
    "label": "readRecord()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "readRecord(unsigned AbbrevID, SmallVectorImpl<uint64_t> &Vals, StringRef *Blob = nullptr, SmallVectorImpl<uint8_t> *Uint8Vals = nullptr)"
  },
  {
    "label": "peekRecord()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "peekRecord(unsigned AbbrevID)"
  },
  {
    "label": "ReadBlockInfoBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadBlockInfoBlock(unsigned *pCount = nullptr)"
  }
]