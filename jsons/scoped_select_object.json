[
  {
    "label": "ScopedSelectObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedSelectObject"
  },
  {
    "label": "ScopedSelectObject()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_SCOPED_SELECT_OBJECT_H_ # define BASE_WIN_SCOPED_SELECT_OBJECT_H_ # include<windows . h> # include \" base / check . h \" namespace base { namespace win { class ScopedSelectObject { public :)",
    "insertText": "ScopedSelectObject(HDC hdc, HGDIOBJ object) : hdc_(hdc), oldobj_(SelectObject(hdc, object))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(hdc_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(object)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(oldobj_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(oldobj_ != HGDI_ERROR)"
  },
  {
    "label": "ScopedSelectObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedSelectObject(const ScopedSelectObject&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedSelectObject&)",
    "insertText": "operator(const ScopedSelectObject&)"
  },
  {
    "label": "ScopedSelectObject()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedSelectObject()"
  },
  {
    "label": "SelectObject()",
    "kind": "Method",
    "detail": "Function (HGDIOBJ object =)",
    "insertText": "SelectObject(hdc_, oldobj_)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK((GetObjectType(oldobj_) != OBJ_REGION && object) || (GetObjectType(oldobj_) == OBJ_REGION && object != HGDI_ERROR))"
  }
]