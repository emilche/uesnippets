[
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_ctx"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_ctx"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_ctx"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_ctx"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "X509V3_CONF_METHOD_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509V3_CONF_METHOD_st"
  },
  {
    "label": "v3_ext_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_ctx"
  },
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "BASIC_CONSTRAINTS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASIC_CONSTRAINTS_st"
  },
  {
    "label": "PKEY_USAGE_PERIOD_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PKEY_USAGE_PERIOD_st"
  },
  {
    "label": "otherName_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "otherName_st"
  },
  {
    "label": "EDIPartyName_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EDIPartyName_st"
  },
  {
    "label": "GENERAL_NAME_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GENERAL_NAME_st"
  },
  {
    "label": "ACCESS_DESCRIPTION_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ACCESS_DESCRIPTION_st"
  },
  {
    "label": "DIST_POINT_NAME_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DIST_POINT_NAME_st"
  },
  {
    "label": "DIST_POINT_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DIST_POINT_st"
  },
  {
    "label": "AUTHORITY_KEYID_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AUTHORITY_KEYID_st"
  },
  {
    "label": "SXNET_ID_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SXNET_ID_st"
  },
  {
    "label": "SXNET_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SXNET_st"
  },
  {
    "label": "NOTICEREF_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NOTICEREF_st"
  },
  {
    "label": "USERNOTICE_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "USERNOTICE_st"
  },
  {
    "label": "POLICYQUALINFO_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICYQUALINFO_st"
  },
  {
    "label": "POLICYINFO_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICYINFO_st"
  },
  {
    "label": "POLICY_MAPPING_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICY_MAPPING_st"
  },
  {
    "label": "GENERAL_SUBTREE_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GENERAL_SUBTREE_st"
  },
  {
    "label": "NAME_CONSTRAINTS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NAME_CONSTRAINTS_st"
  },
  {
    "label": "POLICY_CONSTRAINTS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICY_CONSTRAINTS_st"
  },
  {
    "label": "PROXY_POLICY_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PROXY_POLICY_st"
  },
  {
    "label": "PROXY_CERT_INFO_EXTENSION_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PROXY_CERT_INFO_EXTENSION_st"
  },
  {
    "label": "ISSUING_DIST_POINT_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISSUING_DIST_POINT_st"
  },
  {
    "label": "x509_purpose_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x509_purpose_st"
  },
  {
    "label": "x509_purpose_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x509_purpose_st"
  },
  {
    "label": "ASRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASRange_st"
  },
  {
    "label": "ASIdOrRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASIdOrRange_st"
  },
  {
    "label": "ASIdentifierChoice_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASIdentifierChoice_st"
  },
  {
    "label": "ASIdentifiers_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASIdentifiers_st"
  },
  {
    "label": "IPAddressRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressRange_st"
  },
  {
    "label": "IPAddressOrRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressOrRange_st"
  },
  {
    "label": "IPAddressChoice_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressChoice_st"
  },
  {
    "label": "IPAddressFamily_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressFamily_st"
  },
  {
    "label": "NamingAuthority_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NamingAuthority_st"
  },
  {
    "label": "ProfessionInfo_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProfessionInfo_st"
  },
  {
    "label": "Admissions_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Admissions_st"
  },
  {
    "label": "AdmissionSyntax_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdmissionSyntax_st"
  },
  {
    "label": "SXNET_add_id_asc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SXNET_add_id_asc(SXNET **psx, const char *zone, const char *user, int userlen)"
  },
  {
    "label": "SXNET_add_id_ulong()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, const char *user,\n                       int userlen)"
  },
  {
    "label": "SXNET_add_id_INTEGER()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *izone, const char *user,\n                         int userlen)"
  },
  {
    "label": "GENERAL_NAME_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)"
  },
  {
    "label": "GENERAL_NAME_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen)"
  },
  {
    "label": "OTHERNAME_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)"
  },
  {
    "label": "GENERAL_NAME_set0_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)"
  },
  {
    "label": "GENERAL_NAME_set0_othername()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_set0_othername(GENERAL_NAME *gen,\n                                ASN1_OBJECT *oid, ASN1_TYPE *value)"
  },
  {
    "label": "GENERAL_NAME_get0_otherName()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_get0_otherName(const GENERAL_NAME *gen,\n                                ASN1_OBJECT **poid, ASN1_TYPE **pvalue)"
  },
  {
    "label": "i2a_ACCESS_DESCRIPTION()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "i2a_ACCESS_DESCRIPTION(BIO *bp, const ACCESS_DESCRIPTION *a)"
  },
  {
    "label": "DIST_POINT_set_dpname()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DIST_POINT_set_dpname(DIST_POINT_NAME *dpn, X509_NAME *iname)"
  },
  {
    "label": "NAME_CONSTRAINTS_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NAME_CONSTRAINTS_check(X509 *x, NAME_CONSTRAINTS *nc)"
  },
  {
    "label": "NAME_CONSTRAINTS_check_CN()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NAME_CONSTRAINTS_check_CN(X509 *x, NAME_CONSTRAINTS *nc)"
  },
  {
    "label": "X509V3_conf_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_conf_free(CONF_VALUE *val)"
  },
  {
    "label": "X509V3_EXT_add_nconf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,\n                         X509 *cert)"
  },
  {
    "label": "X509V3_EXT_REQ_add_nconf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,\n                             X509_REQ *req)"
  },
  {
    "label": "X509V3_EXT_CRL_add_nconf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section,\n                             X509_CRL *crl)"
  },
  {
    "label": "X509V3_get_value_bool()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_get_value_bool(const CONF_VALUE *value, int *asn1_bool)"
  },
  {
    "label": "X509V3_get_value_int()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_get_value_int(const CONF_VALUE *value, ASN1_INTEGER **aint)"
  },
  {
    "label": "X509V3_set_nconf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf)"
  },
  {
    "label": "X509V3_string_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_string_free(X509V3_CTX *ctx, char *str)"
  },
  {
    "label": "X509V3_set_ctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subject,\n                    X509_REQ *req, X509_CRL *crl, int flags)"
  },
  {
    "label": "X509V3_EXT_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add(X509V3_EXT_METHOD *ext)"
  },
  {
    "label": "X509V3_EXT_add_list()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist)"
  },
  {
    "label": "X509V3_EXT_add_alias()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_alias(int nid_to, int nid_from)"
  },
  {
    "label": "X509V3_EXT_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_EXT_cleanup(void)"
  },
  {
    "label": "X509V3_add_standard_extensions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add_standard_extensions(void)"
  },
  {
    "label": "X509V3_EXT_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag,\n                     int indent)"
  },
  {
    "label": "X509V3_EXT_print_fp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_print_fp(FILE *out, X509_EXTENSION *ext, int flag, int indent)"
  },
  {
    "label": "X509_check_ca()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_ca(X509 *x)"
  },
  {
    "label": "X509_check_purpose()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_purpose(X509 *x, int id, int ca)"
  },
  {
    "label": "X509_supported_extension()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_supported_extension(X509_EXTENSION *ex)"
  },
  {
    "label": "X509_PURPOSE_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_set(int *p, int purpose)"
  },
  {
    "label": "X509_check_issued()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_issued(X509 *issuer, X509 *subject)"
  },
  {
    "label": "X509_check_akid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid)"
  },
  {
    "label": "X509_set_proxy_flag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_set_proxy_flag(X509 *x)"
  },
  {
    "label": "X509_set_proxy_pathlen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_set_proxy_pathlen(X509 *x, long l)"
  },
  {
    "label": "X509_get_proxy_pathlen()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "X509_get_proxy_pathlen(X509 *x)"
  },
  {
    "label": "X509_get_extension_flags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "X509_get_extension_flags(X509 *x)"
  },
  {
    "label": "X509_get_key_usage()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "X509_get_key_usage(X509 *x)"
  },
  {
    "label": "X509_get_extended_key_usage()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "X509_get_extended_key_usage(X509 *x)"
  },
  {
    "label": "X509_PURPOSE_get_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_count(void)"
  },
  {
    "label": "X509_PURPOSE_get_by_sname()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_by_sname(const char *sname)"
  },
  {
    "label": "X509_PURPOSE_get_by_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_by_id(int id)"
  },
  {
    "label": "X509_PURPOSE_get_trust()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_trust(const X509_PURPOSE *xp)"
  },
  {
    "label": "X509_PURPOSE_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_PURPOSE_cleanup(void)"
  },
  {
    "label": "X509_PURPOSE_get_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_id(const X509_PURPOSE *)"
  },
  {
    "label": "X509_check_host()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_host(X509 *x, const char *chk, size_t chklen,\n                    unsigned int flags, char **peername)"
  },
  {
    "label": "X509_check_email()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_email(X509 *x, const char *chk, size_t chklen,\n                     unsigned int flags)"
  },
  {
    "label": "X509_check_ip()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen,\n                  unsigned int flags)"
  },
  {
    "label": "X509_check_ip_asc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags)"
  },
  {
    "label": "X509_POLICY_NODE_print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent)"
  },
  {
    "label": "X509v3_asid_add_inherit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_add_inherit(ASIdentifiers *asid, int which)"
  },
  {
    "label": "X509v3_asid_add_id_or_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_add_id_or_range(ASIdentifiers *asid, int which,\n                                ASN1_INTEGER *min, ASN1_INTEGER *max)"
  },
  {
    "label": "X509v3_addr_add_inherit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_add_inherit(IPAddrBlocks *addr,\n                            const unsigned afi, const unsigned *safi)"
  },
  {
    "label": "X509v3_addr_add_prefix()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_add_prefix(IPAddrBlocks *addr,\n                           const unsigned afi, const unsigned *safi,\n                           unsigned char *a, const int prefixlen)"
  },
  {
    "label": "X509v3_addr_add_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_add_range(IPAddrBlocks *addr,\n                          const unsigned afi, const unsigned *safi,\n                          unsigned char *min, unsigned char *max)"
  },
  {
    "label": "X509v3_addr_get_afi()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "X509v3_addr_get_afi(const IPAddressFamily *f)"
  },
  {
    "label": "X509v3_addr_get_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_get_range(IPAddressOrRange *aor, const unsigned afi,\n                          unsigned char *min, unsigned char *max,\n                          const int length)"
  },
  {
    "label": "X509v3_asid_is_canonical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_is_canonical(ASIdentifiers *asid)"
  },
  {
    "label": "X509v3_addr_is_canonical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_is_canonical(IPAddrBlocks *addr)"
  },
  {
    "label": "X509v3_asid_canonize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_canonize(ASIdentifiers *asid)"
  },
  {
    "label": "X509v3_addr_canonize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_canonize(IPAddrBlocks *addr)"
  },
  {
    "label": "X509v3_asid_inherits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_inherits(ASIdentifiers *asid)"
  },
  {
    "label": "X509v3_addr_inherits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_inherits(IPAddrBlocks *addr)"
  },
  {
    "label": "X509v3_asid_subset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_subset(ASIdentifiers *a, ASIdentifiers *b)"
  },
  {
    "label": "X509v3_addr_subset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_subset(IPAddrBlocks *a, IPAddrBlocks *b)"
  },
  {
    "label": "X509v3_asid_validate_path()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_validate_path(X509_STORE_CTX *)"
  },
  {
    "label": "X509v3_addr_validate_path()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_validate_path(X509_STORE_CTX *)"
  },
  {
    "label": "NAMING_AUTHORITY_set0_authorityId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY *n,\n    ASN1_OBJECT* namingAuthorityId)"
  },
  {
    "label": "NAMING_AUTHORITY_set0_authorityURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY *n,\n    ASN1_IA5STRING* namingAuthorityUrl)"
  },
  {
    "label": "NAMING_AUTHORITY_set0_authorityText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY *n,\n    ASN1_STRING* namingAuthorityText)"
  },
  {
    "label": "ADMISSION_SYNTAX_set0_admissionAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSION_SYNTAX_set0_admissionAuthority(\n    ADMISSION_SYNTAX *as, GENERAL_NAME *aa)"
  },
  {
    "label": "ADMISSIONS_set0_admissionAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSIONS_set0_admissionAuthority(ADMISSIONS *a, GENERAL_NAME *aa)"
  },
  {
    "label": "ADMISSIONS_set0_namingAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSIONS_set0_namingAuthority(ADMISSIONS *a, NAMING_AUTHORITY *na)"
  },
  {
    "label": "ADMISSIONS_set0_professionInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSIONS_set0_professionInfos(ADMISSIONS *a, PROFESSION_INFOS *pi)"
  },
  {
    "label": "PROFESSION_INFO_set0_addProfessionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_addProfessionInfo(\n    PROFESSION_INFO *pi, ASN1_OCTET_STRING *aos)"
  },
  {
    "label": "PROFESSION_INFO_set0_namingAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_namingAuthority(\n    PROFESSION_INFO *pi, NAMING_AUTHORITY *na)"
  },
  {
    "label": "PROFESSION_INFO_set0_registrationNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_registrationNumber(\n    PROFESSION_INFO *pi, ASN1_PRINTABLESTRING *rn)"
  }
]