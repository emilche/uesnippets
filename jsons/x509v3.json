[
  {
    "label": "v3_ext_method",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_method"
  },
  {
    "label": "v3_ext_ctx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "v3_ext_ctx"
  },
  {
    "label": "X509V3_CONF_METHOD_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "X509V3_CONF_METHOD_st"
  },
  {
    "label": "BASIC_CONSTRAINTS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASIC_CONSTRAINTS_st"
  },
  {
    "label": "PKEY_USAGE_PERIOD_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PKEY_USAGE_PERIOD_st"
  },
  {
    "label": "otherName_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "otherName_st"
  },
  {
    "label": "EDIPartyName_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EDIPartyName_st"
  },
  {
    "label": "GENERAL_NAME_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GENERAL_NAME_st"
  },
  {
    "label": "ACCESS_DESCRIPTION_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ACCESS_DESCRIPTION_st"
  },
  {
    "label": "DIST_POINT_NAME_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DIST_POINT_NAME_st"
  },
  {
    "label": "DIST_POINT_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DIST_POINT_st"
  },
  {
    "label": "AUTHORITY_KEYID_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AUTHORITY_KEYID_st"
  },
  {
    "label": "SXNET_ID_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SXNET_ID_st"
  },
  {
    "label": "SXNET_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SXNET_st"
  },
  {
    "label": "NOTICEREF_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NOTICEREF_st"
  },
  {
    "label": "USERNOTICE_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "USERNOTICE_st"
  },
  {
    "label": "POLICYQUALINFO_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICYQUALINFO_st"
  },
  {
    "label": "POLICYINFO_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICYINFO_st"
  },
  {
    "label": "POLICY_MAPPING_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICY_MAPPING_st"
  },
  {
    "label": "GENERAL_SUBTREE_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GENERAL_SUBTREE_st"
  },
  {
    "label": "NAME_CONSTRAINTS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NAME_CONSTRAINTS_st"
  },
  {
    "label": "POLICY_CONSTRAINTS_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "POLICY_CONSTRAINTS_st"
  },
  {
    "label": "PROXY_POLICY_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PROXY_POLICY_st"
  },
  {
    "label": "PROXY_CERT_INFO_EXTENSION_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PROXY_CERT_INFO_EXTENSION_st"
  },
  {
    "label": "ISSUING_DIST_POINT_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISSUING_DIST_POINT_st"
  },
  {
    "label": "x509_purpose_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "x509_purpose_st"
  },
  {
    "label": "ASRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASRange_st"
  },
  {
    "label": "ASIdOrRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASIdOrRange_st"
  },
  {
    "label": "ASIdentifierChoice_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASIdentifierChoice_st"
  },
  {
    "label": "ASIdentifiers_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ASIdentifiers_st"
  },
  {
    "label": "IPAddressRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressRange_st"
  },
  {
    "label": "IPAddressOrRange_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressOrRange_st"
  },
  {
    "label": "IPAddressChoice_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressChoice_st"
  },
  {
    "label": "IPAddressFamily_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IPAddressFamily_st"
  },
  {
    "label": "NamingAuthority_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NamingAuthority_st"
  },
  {
    "label": "ProfessionInfo_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProfessionInfo_st"
  },
  {
    "label": "Admissions_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Admissions_st"
  },
  {
    "label": "AdmissionSyntax_st",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AdmissionSyntax_st"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef HEADER_X509V3_H # define HEADER_X509V3_H # include<openssl / bio . h> # include<openssl / x509 . h> # include<openssl / conf . h> # include<openssl / x509v3err . h> # ifdef __cplusplus \" C \" { # endif struct v3_ext_method ; struct v3_ext_ctx ; typedef)",
    "insertText": "void(*X509V3_EXT_NEW)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*X509V3_EXT_FREE) (void *)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*X509V3_EXT_D2I)(void *, const unsigned char **, long)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509V3_EXT_I2D) (void *, unsigned char **)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "STACK_OF(CONF_VALUE) * (*X509V3_EXT_I2V) (const struct v3_ext_method *method, void *ext, STACK_OF(CONF_VALUE) *extlist)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*X509V3_EXT_V2I)(const struct v3_ext_method *method, struct v3_ext_ctx *ctx, STACK_OF(CONF_VALUE) *values)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "char(*X509V3_EXT_I2S)(const struct v3_ext_method *method, void *ext)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*X509V3_EXT_S2I)(const struct v3_ext_method *method, struct v3_ext_ctx *ctx, const char *str)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "int(*X509V3_EXT_I2R) (const struct v3_ext_method *method, void *ext, BIO *out, int indent)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*X509V3_EXT_R2I)(const struct v3_ext_method *method, struct v3_ext_ctx *ctx, const char *str)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (struct v3_ext_method { int ext_nid ; int ext_flags ; ASN1_ITEM_EXP* it ; X509V3_EXT_NEW ext_new ; X509V3_EXT_FREE ext_free ; X509V3_EXT_D2I d2i ; X509V3_EXT_I2D i2d ; X509V3_EXT_I2S i2s ; X509V3_EXT_S2I s2i ; X509V3_EXT_I2V i2v ; X509V3_EXT_V2I v2i ; X509V3_EXT_I2R i2r ; X509V3_EXT_R2I r2i ; void* usr_data ; } ; typedef struct X509V3_CONF_METHOD_st {)",
    "insertText": "char(*get_string) (void *db, const char *section, const char *value)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(CONF_VALUE) *(*get_section) (void *db, const char *section)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*free_string) (void *db, char *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*free_section) (void *db, STACK_OF(CONF_VALUE) *section)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (} X509V3_CONF_METHOD ; struct v3_ext_ctx { # define CTX_TEST 0 x1 # define X509V3_CTX_REPLACE 0 x2 int flags ; X509* issuer_cert ; X509* subject_cert ; X509_REQ* subject_req ; X509_CRL* crl ; X509V3_CONF_METHOD* db_meth ; void* db ; } ; typedef struct v3_ext_method X509V3_EXT_METHOD ;)",
    "insertText": "DEFINE_STACK_OF(X509V3_EXT_METHOD)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef struct BASIC_CONSTRAINTS_st { int ca ; ASN1_INTEGER* pathlen ; } BASIC_CONSTRAINTS ; typedef struct PKEY_USAGE_PERIOD_st { ASN1_GENERALIZEDTIME* notBefore ; ASN1_GENERALIZEDTIME* notAfter ; } PKEY_USAGE_PERIOD ; typedef struct otherName_st { ASN1_OBJECT* type_id ; ASN1_TYPE* value ; } OTHERNAME ; typedef struct EDIPartyName_st { ASN1_STRING* nameAssigner ; ASN1_STRING* partyName ; } EDIPARTYNAME ; typedef struct GENERAL_NAME_st { # define GEN_OTHERNAME 0 # define GEN_EMAIL 1 # define GEN_DNS 2 # define GEN_X400 3 # define GEN_DIRNAME 4 # define GEN_EDIPARTY 5 # define GEN_URI 6 # define GEN_IPADD 7 # define GEN_RID 8 int type ; union { char* ptr ; OTHERNAME* otherName ; ASN1_IA5STRING* rfc822Name ; ASN1_IA5STRING* dNSName ; ASN1_STRING* x400Address ; X509_NAME* directoryName ; EDIPARTYNAME* ediPartyName ; ASN1_IA5STRING* uniformResourceIdentifier ; ASN1_OCTET_STRING* iPAddress ; ASN1_OBJECT* registeredID ; ASN1_OCTET_STRING* ip ; X509_NAME* dirn ; ASN1_IA5STRING* ia5 ; ASN1_OBJECT* rid ; ASN1_TYPE* other ; } d ; } GENERAL_NAME ; typedef struct ACCESS_DESCRIPTION_st { ASN1_OBJECT* method ; GENERAL_NAME* location ; } ACCESS_DESCRIPTION ; typedef)",
    "insertText": "STACK_OF(ACCESS_DESCRIPTION)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "STACK_OF(ASN1_OBJECT)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "STACK_OF(ASN1_INTEGER)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(GENERAL_NAME) typedef STACK_OF(GENERAL_NAME)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(GENERAL_NAMES) DEFINE_STACK_OF(ACCESS_DESCRIPTION)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (int type ; union { GENERAL_NAMES* fullname ;)",
    "insertText": "STACK_OF(X509_NAME_ENTRY)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (} name ; X509_NAME* dpname ; } DIST_POINT_NAME ; # define CRLDP_ALL_REASONS 0 x807f # define CRL_REASON_NONE - 1 # define CRL_REASON_UNSPECIFIED 0 # define CRL_REASON_KEY_COMPROMISE 1 # define CRL_REASON_CA_COMPROMISE 2 # define CRL_REASON_AFFILIATION_CHANGED 3 # define CRL_REASON_SUPERSEDED 4 # define CRL_REASON_CESSATION_OF_OPERATION 5 # define CRL_REASON_CERTIFICATE_HOLD 6 # define CRL_REASON_REMOVE_FROM_CRL 8 # define CRL_REASON_PRIVILEGE_WITHDRAWN 9 # define CRL_REASON_AA_COMPROMISE 1 0 struct DIST_POINT_st { DIST_POINT_NAME* distpoint ; ASN1_BIT_STRING* reasons ; GENERAL_NAMES* CRLissuer ; int dp_reasons ; } ; typedef)",
    "insertText": "STACK_OF(DIST_POINT)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(DIST_POINT)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING* keyid ; GENERAL_NAMES* issuer ; ASN1_INTEGER* serial ; } ; typedef struct SXNET_ID_st { ASN1_INTEGER* zone ; ASN1_OCTET_STRING* user ; } SXNETID ;)",
    "insertText": "DEFINE_STACK_OF(SXNETID)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_INTEGER* version ;)",
    "insertText": "STACK_OF(SXNETID)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (} NOTICEREF ; typedef struct USERNOTICE_st { NOTICEREF* noticeref ; ASN1_STRING* exptext ; } USERNOTICE ; typedef struct POLICYQUALINFO_st { ASN1_OBJECT* pqualid ; union { ASN1_IA5STRING* cpsuri ; USERNOTICE* usernotice ; ASN1_TYPE* other ; } d ; } POLICYQUALINFO ;)",
    "insertText": "DEFINE_STACK_OF(POLICYQUALINFO)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT* policyid ;)",
    "insertText": "STACK_OF(POLICYQUALINFO)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (} POLICYINFO ; typedef)",
    "insertText": "STACK_OF(POLICYINFO)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(POLICYINFO)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_OBJECT* issuerDomainPolicy ; ASN1_OBJECT* subjectDomainPolicy ; } POLICY_MAPPING ;)",
    "insertText": "DEFINE_STACK_OF(POLICY_MAPPING) typedef STACK_OF(POLICY_MAPPING)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (typedef struct GENERAL_SUBTREE_st { GENERAL_NAME* base ; ASN1_INTEGER* minimum ; ASN1_INTEGER* maximum ; } GENERAL_SUBTREE ;)",
    "insertText": "DEFINE_STACK_OF(GENERAL_SUBTREE)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(GENERAL_SUBTREE)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (} ; typedef struct POLICY_CONSTRAINTS_st { ASN1_INTEGER* requireExplicitPolicy ; ASN1_INTEGER* inhibitPolicyMapping ; } POLICY_CONSTRAINTS ; typedef struct PROXY_POLICY_st { ASN1_OBJECT* policyLanguage ; ASN1_OCTET_STRING* policy ; } PROXY_POLICY ; typedef struct PROXY_CERT_INFO_EXTENSION_st { ASN1_INTEGER* pcPathLengthConstraint ; PROXY_POLICY* proxyPolicy ; } PROXY_CERT_INFO_EXTENSION ;)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(PROXY_POLICY) DECLARE_ASN1_FUNCTIONS(PROXY_CERT_INFO_EXTENSION)"
  },
  {
    "label": "X509V3_conf_err()",
    "kind": "Method",
    "detail": "Function (db = NULL)",
    "insertText": "X509V3_conf_err(val) ERR_add_error_data(6, \\ \"section:\", (val)->section, \\ \",name:\", (val)->name, \",value:\", (val)->value) # define X509V3_set_ctx_test(ctx) \\ X509V3_set_ctx(ctx, NULL, NULL, NULL, NULL, CTX_TEST) # define X509V3_set_ctx_nodb(ctx) (ctx)"
  },
  {
    "label": "EXT_BITSTRING()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EXT_BITSTRING(nid, table)"
  },
  {
    "label": "ASN1_ITEM_ref()",
    "kind": "Method",
    "detail": "Function (nid,0,)",
    "insertText": "ASN1_ITEM_ref(ASN1_BIT_STRING), \\ 0,0,0,0, \\ 0,0, \\ (X509V3_EXT_I2V)i2v_ASN1_BIT_STRING, \\ (X509V3_EXT_V2I)v2i_ASN1_BIT_STRING, \\ NULL, NULL, \\ table} # define EXT_IA5STRING(nid)"
  },
  {
    "label": "ASN1_ITEM_ref()",
    "kind": "Method",
    "detail": "Function (nid,0,)",
    "insertText": "ASN1_ITEM_ref(ASN1_IA5STRING), \\ 0,0,0,0, \\ (X509V3_EXT_I2S)i2s_ASN1_IA5STRING, \\ (X509V3_EXT_S2I)"
  },
  {
    "label": "NS_ANY_CA()",
    "kind": "Method",
    "detail": "Function (- 1,0,0,0,0,0,0,0,0,0,0,0,0,0 } # define EXFLAG_BCONS 0 x1 # define EXFLAG_KUSAGE 0 x2 # define EXFLAG_XKUSAGE 0 x4 # define EXFLAG_NSCERT 0 x8 # define EXFLAG_CA 0 x10 # define EXFLAG_SI 0 x20 # define EXFLAG_V1 0 x40 # define EXFLAG_INVALID 0 x80 # define EXFLAG_SET 0 x100 # define EXFLAG_CRITICAL 0 x200 # define EXFLAG_PROXY 0 x400 # define EXFLAG_INVALID_POLICY 0 x800 # define EXFLAG_FRESHEST 0 x1000 # define EXFLAG_SS 0 x2000 # define EXFLAG_NO_FINGERPRINT 0 x100000 # define KU_DIGITAL_SIGNATURE 0 x0080 # define KU_NON_REPUDIATION 0 x0040 # define KU_KEY_ENCIPHERMENT 0 x0020 # define KU_DATA_ENCIPHERMENT 0 x0010 # define KU_KEY_AGREEMENT 0 x0008 # define KU_KEY_CERT_SIGN 0 x0004 # define KU_CRL_SIGN 0 x0002 # define KU_ENCIPHER_ONLY 0 x0001 # define KU_DECIPHER_ONLY 0 x8000 # define NS_SSL_CLIENT 0 x80 # define NS_SSL_SERVER 0 x40 # define NS_SMIME 0 x20 # define NS_OBJSIGN 0 x10 # define NS_SSL_CA 0 x04 # define NS_SMIME_CA 0 x02 # define NS_OBJSIGN_CA 0 x01 # define)",
    "insertText": "NS_ANY_CA(NS_SSL_CA|NS_SMIME_CA|NS_OBJSIGN_CA)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int purpose ; int trust ; int flags ;)",
    "insertText": "int(*check_purpose) (const struct x509_purpose_st *, const X509 *, int)"
  },
  {
    "label": "X509V3_EXT_UNKNOWN_MASK()",
    "kind": "Method",
    "detail": "Function (char* name ; char* sname ; void* usr_data ; } X509_PURPOSE ; # define X509_PURPOSE_SSL_CLIENT 1 # define X509_PURPOSE_SSL_SERVER 2 # define X509_PURPOSE_NS_SSL_SERVER 3 # define X509_PURPOSE_SMIME_SIGN 4 # define X509_PURPOSE_SMIME_ENCRYPT 5 # define X509_PURPOSE_CRL_SIGN 6 # define X509_PURPOSE_ANY 7 # define X509_PURPOSE_OCSP_HELPER 8 # define X509_PURPOSE_TIMESTAMP_SIGN 9 # define X509_PURPOSE_MIN 1 # define X509_PURPOSE_MAX 9 # define)",
    "insertText": "X509V3_EXT_UNKNOWN_MASK(0xfL << 16) # define X509V3_EXT_DEFAULT 0 # define X509V3_EXT_ERROR_UNKNOWN (1L << 16) # define X509V3_EXT_PARSE_UNKNOWN (2L << 16) # define X509V3_EXT_DUMP_UNKNOWN (3L << 16) # define X509V3_ADD_OP_MASK 0xfL # define X509V3_ADD_DEFAULT 0L # define X509V3_ADD_APPEND 1L # define X509V3_ADD_REPLACE 2L # define X509V3_ADD_REPLACE_EXISTING 3L # define X509V3_ADD_KEEP_EXISTING 4L # define X509V3_ADD_DELETE 5L # define X509V3_ADD_SILENT 0x10 DEFINE_STACK_OF(X509_PURPOSE) DECLARE_ASN1_FUNCTIONS(BASIC_CONSTRAINTS) DECLARE_ASN1_FUNCTIONS(SXNET) DECLARE_ASN1_FUNCTIONS(SXNETID) int SXNET_add_id_asc(SXNET **psx, const char *zone, const char *user, int userlen)"
  },
  {
    "label": "SXNET_add_id_ulong()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SXNET_add_id_ulong(SXNET **psx, unsigned long lzone, const char *user, int userlen)"
  },
  {
    "label": "SXNET_add_id_INTEGER()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SXNET_add_id_INTEGER(SXNET **psx, ASN1_INTEGER *izone, const char *user, int userlen)"
  },
  {
    "label": "SXNET_get_id_asc()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "SXNET_get_id_asc(SXNET *sx, const char *zone)"
  },
  {
    "label": "SXNET_get_id_ulong()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "SXNET_get_id_ulong(SXNET *sx, unsigned long lzone)"
  },
  {
    "label": "SXNET_get_id_INTEGER()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "SXNET_get_id_INTEGER(SXNET *sx, ASN1_INTEGER *zone)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(AUTHORITY_KEYID) DECLARE_ASN1_FUNCTIONS(PKEY_USAGE_PERIOD) DECLARE_ASN1_FUNCTIONS(GENERAL_NAME) GENERAL_NAME *GENERAL_NAME_dup(GENERAL_NAME *a)"
  },
  {
    "label": "GENERAL_NAME_cmp()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_cmp(GENERAL_NAME *a, GENERAL_NAME *b)"
  },
  {
    "label": "v2i_ASN1_BIT_STRING()",
    "kind": "Method",
    "detail": "Function (ASN1_BIT_STRING*)",
    "insertText": "v2i_ASN1_BIT_STRING(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(CONF_VALUE) *i2v_ASN1_BIT_STRING(X509V3_EXT_METHOD *method, ASN1_BIT_STRING *bits, STACK_OF(CONF_VALUE) *extlist)"
  },
  {
    "label": "i2s_ASN1_IA5STRING()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "i2s_ASN1_IA5STRING(X509V3_EXT_METHOD *method, ASN1_IA5STRING *ia5)"
  },
  {
    "label": "s2i_ASN1_IA5STRING()",
    "kind": "Method",
    "detail": "Function (ASN1_IA5STRING*)",
    "insertText": "s2i_ASN1_IA5STRING(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(CONF_VALUE) *i2v_GENERAL_NAME(X509V3_EXT_METHOD *method, GENERAL_NAME *gen, STACK_OF(CONF_VALUE) *ret)"
  },
  {
    "label": "GENERAL_NAME_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_print(BIO *out, GENERAL_NAME *gen)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(GENERAL_NAMES) STACK_OF(CONF_VALUE) *i2v_GENERAL_NAMES(X509V3_EXT_METHOD *method, GENERAL_NAMES *gen, STACK_OF(CONF_VALUE) *extlist)"
  },
  {
    "label": "v2i_GENERAL_NAMES()",
    "kind": "Method",
    "detail": "Function (GENERAL_NAMES*)",
    "insertText": "v2i_GENERAL_NAMES(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *nval)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(OTHERNAME) DECLARE_ASN1_FUNCTIONS(EDIPARTYNAME) int OTHERNAME_cmp(OTHERNAME *a, OTHERNAME *b)"
  },
  {
    "label": "GENERAL_NAME_set0_value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERAL_NAME_set0_value(GENERAL_NAME *a, int type, void *value)"
  },
  {
    "label": "GENERAL_NAME_get0_value()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GENERAL_NAME_get0_value(const GENERAL_NAME *a, int *ptype)"
  },
  {
    "label": "GENERAL_NAME_set0_othername()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_set0_othername(GENERAL_NAME *gen, ASN1_OBJECT *oid, ASN1_TYPE *value)"
  },
  {
    "label": "GENERAL_NAME_get0_otherName()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GENERAL_NAME_get0_otherName(const GENERAL_NAME *gen, ASN1_OBJECT **poid, ASN1_TYPE **pvalue)"
  },
  {
    "label": "i2s_ASN1_OCTET_STRING()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "i2s_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method, const ASN1_OCTET_STRING *ia5)"
  },
  {
    "label": "s2i_ASN1_OCTET_STRING()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "s2i_ASN1_OCTET_STRING(X509V3_EXT_METHOD *method, X509V3_CTX *ctx, const char *str)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(EXTENDED_KEY_USAGE) int i2a_ACCESS_DESCRIPTION(BIO *bp, const ACCESS_DESCRIPTION *a)"
  },
  {
    "label": "DECLARE_ASN1_ALLOC_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_ALLOC_FUNCTIONS(TLS_FEATURE) DECLARE_ASN1_FUNCTIONS(CERTIFICATEPOLICIES) DECLARE_ASN1_FUNCTIONS(POLICYINFO) DECLARE_ASN1_FUNCTIONS(POLICYQUALINFO) DECLARE_ASN1_FUNCTIONS(USERNOTICE) DECLARE_ASN1_FUNCTIONS(NOTICEREF) DECLARE_ASN1_FUNCTIONS(CRL_DIST_POINTS) DECLARE_ASN1_FUNCTIONS(DIST_POINT) DECLARE_ASN1_FUNCTIONS(DIST_POINT_NAME) DECLARE_ASN1_FUNCTIONS(ISSUING_DIST_POINT) int DIST_POINT_set_dpname(DIST_POINT_NAME *dpn, X509_NAME *iname)"
  },
  {
    "label": "NAME_CONSTRAINTS_check()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NAME_CONSTRAINTS_check(X509 *x, NAME_CONSTRAINTS *nc)"
  },
  {
    "label": "NAME_CONSTRAINTS_check_CN()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NAME_CONSTRAINTS_check_CN(X509 *x, NAME_CONSTRAINTS *nc)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(ACCESS_DESCRIPTION) DECLARE_ASN1_FUNCTIONS(AUTHORITY_INFO_ACCESS) DECLARE_ASN1_ITEM(POLICY_MAPPING) DECLARE_ASN1_ALLOC_FUNCTIONS(POLICY_MAPPING) DECLARE_ASN1_ITEM(POLICY_MAPPINGS) DECLARE_ASN1_ITEM(GENERAL_SUBTREE) DECLARE_ASN1_ALLOC_FUNCTIONS(GENERAL_SUBTREE) DECLARE_ASN1_ITEM(NAME_CONSTRAINTS) DECLARE_ASN1_ALLOC_FUNCTIONS(NAME_CONSTRAINTS) DECLARE_ASN1_ALLOC_FUNCTIONS(POLICY_CONSTRAINTS) DECLARE_ASN1_ITEM(POLICY_CONSTRAINTS) GENERAL_NAME *a2i_GENERAL_NAME(GENERAL_NAME *out, const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, int gen_type, const char *value, int is_nc)"
  },
  {
    "label": "v2i_GENERAL_NAME()",
    "kind": "Method",
    "detail": "Function (# ifdef HEADER_CONF_H GENERAL_NAME*)",
    "insertText": "v2i_GENERAL_NAME(const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, CONF_VALUE *cnf)"
  },
  {
    "label": "v2i_GENERAL_NAME_ex()",
    "kind": "Method",
    "detail": "Function (GENERAL_NAME*)",
    "insertText": "v2i_GENERAL_NAME_ex(GENERAL_NAME *out, const X509V3_EXT_METHOD *method, X509V3_CTX *ctx, CONF_VALUE *cnf, int is_nc)"
  },
  {
    "label": "X509V3_conf_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_conf_free(CONF_VALUE *val)"
  },
  {
    "label": "X509V3_EXT_nconf_nid()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509V3_EXT_nconf_nid(CONF *conf, X509V3_CTX *ctx, int ext_nid, const char *value)"
  },
  {
    "label": "X509V3_EXT_nconf()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509V3_EXT_nconf(CONF *conf, X509V3_CTX *ctx, const char *name, const char *value)"
  },
  {
    "label": "X509V3_EXT_add_nconf_sk()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_nconf_sk(CONF *conf, X509V3_CTX *ctx, const char *section, STACK_OF(X509_EXTENSION) **sk)"
  },
  {
    "label": "X509V3_EXT_add_nconf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section, X509 *cert)"
  },
  {
    "label": "X509V3_EXT_REQ_add_nconf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_REQ_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section, X509_REQ *req)"
  },
  {
    "label": "X509V3_EXT_CRL_add_nconf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_CRL_add_nconf(CONF *conf, X509V3_CTX *ctx, const char *section, X509_CRL *crl)"
  },
  {
    "label": "X509V3_EXT_conf_nid()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509V3_EXT_conf_nid(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx, int ext_nid, const char *value)"
  },
  {
    "label": "X509V3_EXT_conf()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509V3_EXT_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx, const char *name, const char *value)"
  },
  {
    "label": "X509V3_EXT_add_conf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx, const char *section, X509 *cert)"
  },
  {
    "label": "X509V3_EXT_REQ_add_conf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_REQ_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx, const char *section, X509_REQ *req)"
  },
  {
    "label": "X509V3_EXT_CRL_add_conf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_CRL_add_conf(LHASH_OF(CONF_VALUE) *conf, X509V3_CTX *ctx, const char *section, X509_CRL *crl)"
  },
  {
    "label": "X509V3_add_value_bool_nf()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add_value_bool_nf(const char *name, int asn1_bool, STACK_OF(CONF_VALUE) **extlist)"
  },
  {
    "label": "X509V3_get_value_bool()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_get_value_bool(const CONF_VALUE *value, int *asn1_bool)"
  },
  {
    "label": "X509V3_get_value_int()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_get_value_int(const CONF_VALUE *value, ASN1_INTEGER **aint)"
  },
  {
    "label": "X509V3_set_nconf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_set_nconf(X509V3_CTX *ctx, CONF *conf)"
  },
  {
    "label": "X509V3_set_conf_lhash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_set_conf_lhash(X509V3_CTX *ctx, LHASH_OF(CONF_VALUE) *lhash)"
  },
  {
    "label": "X509V3_get_string()",
    "kind": "Method",
    "detail": "Function (# endif char*)",
    "insertText": "X509V3_get_string(X509V3_CTX *ctx, const char *name, const char *section)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(CONF_VALUE) *X509V3_get_section(X509V3_CTX *ctx, const char *section)"
  },
  {
    "label": "X509V3_string_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_string_free(X509V3_CTX *ctx, char *str)"
  },
  {
    "label": "X509V3_section_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_section_free(X509V3_CTX *ctx, STACK_OF(CONF_VALUE) *section)"
  },
  {
    "label": "X509V3_set_ctx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_set_ctx(X509V3_CTX *ctx, X509 *issuer, X509 *subject, X509_REQ *req, X509_CRL *crl, int flags)"
  },
  {
    "label": "X509V3_add_value()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add_value(const char *name, const char *value, STACK_OF(CONF_VALUE) **extlist)"
  },
  {
    "label": "X509V3_add_value_uchar()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add_value_uchar(const char *name, const unsigned char *value, STACK_OF(CONF_VALUE) **extlist)"
  },
  {
    "label": "X509V3_add_value_bool()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add_value_bool(const char *name, int asn1_bool, STACK_OF(CONF_VALUE) **extlist)"
  },
  {
    "label": "X509V3_add_value_int()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add_value_int(const char *name, const ASN1_INTEGER *aint, STACK_OF(CONF_VALUE) **extlist)"
  },
  {
    "label": "i2s_ASN1_INTEGER()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "i2s_ASN1_INTEGER(X509V3_EXT_METHOD *meth, const ASN1_INTEGER *aint)"
  },
  {
    "label": "s2i_ASN1_INTEGER()",
    "kind": "Method",
    "detail": "Function (ASN1_INTEGER*)",
    "insertText": "s2i_ASN1_INTEGER(X509V3_EXT_METHOD *meth, const char *value)"
  },
  {
    "label": "i2s_ASN1_ENUMERATED()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "i2s_ASN1_ENUMERATED(X509V3_EXT_METHOD *meth, const ASN1_ENUMERATED *aint)"
  },
  {
    "label": "i2s_ASN1_ENUMERATED_TABLE()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "i2s_ASN1_ENUMERATED_TABLE(X509V3_EXT_METHOD *meth, const ASN1_ENUMERATED *aint)"
  },
  {
    "label": "X509V3_EXT_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add(X509V3_EXT_METHOD *ext)"
  },
  {
    "label": "X509V3_EXT_add_list()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_list(X509V3_EXT_METHOD *extlist)"
  },
  {
    "label": "X509V3_EXT_add_alias()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_add_alias(int nid_to, int nid_from)"
  },
  {
    "label": "X509V3_EXT_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509V3_EXT_cleanup(void)"
  },
  {
    "label": "X509V3_EXT_get()",
    "kind": "Method",
    "detail": "Function (const X509V3_EXT_METHOD*)",
    "insertText": "X509V3_EXT_get(X509_EXTENSION *ext)"
  },
  {
    "label": "X509V3_EXT_get_nid()",
    "kind": "Method",
    "detail": "Function (const X509V3_EXT_METHOD*)",
    "insertText": "X509V3_EXT_get_nid(int nid)"
  },
  {
    "label": "X509V3_add_standard_extensions()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add_standard_extensions(void)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(CONF_VALUE) *X509V3_parse_list(const char *line)"
  },
  {
    "label": "X509V3_EXT_d2i()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509V3_EXT_d2i(X509_EXTENSION *ext)"
  },
  {
    "label": "X509V3_get_d2i()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "X509V3_get_d2i(const STACK_OF(X509_EXTENSION) *x, int nid, int *crit, int *idx)"
  },
  {
    "label": "X509V3_EXT_i2d()",
    "kind": "Method",
    "detail": "Function (X509_EXTENSION*)",
    "insertText": "X509V3_EXT_i2d(int ext_nid, int crit, void *ext_struc)"
  },
  {
    "label": "X509V3_add1_i2d()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_add1_i2d(STACK_OF(X509_EXTENSION) **x, int nid, void *value, int crit, unsigned long flags)"
  },
  {
    "label": "X509V3_EXT_val_prn()",
    "kind": "Method",
    "detail": "Function (# if OPENSSL_API_COMPAT<0 x10100000L # define hex_to_string OPENSSL_buf2hexstr # define string_to_hex OPENSSL_hexstr2buf # endif void)",
    "insertText": "X509V3_EXT_val_prn(BIO *out, STACK_OF(CONF_VALUE) *val, int indent, int ml)"
  },
  {
    "label": "X509V3_EXT_print()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_EXT_print(BIO *out, X509_EXTENSION *ext, unsigned long flag, int indent)"
  },
  {
    "label": "X509V3_EXT_print_fp()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSSL_NO_STDIO int)",
    "insertText": "X509V3_EXT_print_fp(FILE *out, X509_EXTENSION *ext, int flag, int indent)"
  },
  {
    "label": "X509V3_extensions_print()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "X509V3_extensions_print(BIO *out, const char *title, const STACK_OF(X509_EXTENSION) *exts, unsigned long flag, int indent)"
  },
  {
    "label": "X509_check_ca()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_ca(X509 *x)"
  },
  {
    "label": "X509_check_purpose()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_purpose(X509 *x, int id, int ca)"
  },
  {
    "label": "X509_supported_extension()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_supported_extension(X509_EXTENSION *ex)"
  },
  {
    "label": "X509_PURPOSE_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_set(int *p, int purpose)"
  },
  {
    "label": "X509_check_issued()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_issued(X509 *issuer, X509 *subject)"
  },
  {
    "label": "X509_check_akid()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_akid(X509 *issuer, AUTHORITY_KEYID *akid)"
  },
  {
    "label": "X509_set_proxy_flag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_set_proxy_flag(X509 *x)"
  },
  {
    "label": "X509_set_proxy_pathlen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_set_proxy_pathlen(X509 *x, long l)"
  },
  {
    "label": "X509_get_proxy_pathlen()",
    "kind": "Method",
    "detail": "Function (long)",
    "insertText": "X509_get_proxy_pathlen(X509 *x)"
  },
  {
    "label": "X509_get_extension_flags()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "X509_get_extension_flags(X509 *x)"
  },
  {
    "label": "X509_get_key_usage()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "X509_get_key_usage(X509 *x)"
  },
  {
    "label": "X509_get_extended_key_usage()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "X509_get_extended_key_usage(X509 *x)"
  },
  {
    "label": "X509_get0_subject_key_id()",
    "kind": "Method",
    "detail": "Function (const ASN1_OCTET_STRING*)",
    "insertText": "X509_get0_subject_key_id(X509 *x)"
  },
  {
    "label": "X509_get0_authority_key_id()",
    "kind": "Method",
    "detail": "Function (const ASN1_OCTET_STRING*)",
    "insertText": "X509_get0_authority_key_id(X509 *x)"
  },
  {
    "label": "X509_get0_authority_issuer()",
    "kind": "Method",
    "detail": "Function (const GENERAL_NAMES*)",
    "insertText": "X509_get0_authority_issuer(X509 *x)"
  },
  {
    "label": "X509_get0_authority_serial()",
    "kind": "Method",
    "detail": "Function (const ASN1_INTEGER*)",
    "insertText": "X509_get0_authority_serial(X509 *x)"
  },
  {
    "label": "X509_PURPOSE_get_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_count(void)"
  },
  {
    "label": "X509_PURPOSE_get0()",
    "kind": "Method",
    "detail": "Function (X509_PURPOSE*)",
    "insertText": "X509_PURPOSE_get0(int idx)"
  },
  {
    "label": "X509_PURPOSE_get_by_sname()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_by_sname(const char *sname)"
  },
  {
    "label": "X509_PURPOSE_get_by_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_by_id(int id)"
  },
  {
    "label": "X509_PURPOSE_add()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_add(int id, int trust, int flags, int (*ck) (const X509_PURPOSE *, const X509 *, int), const char *name, const char *sname, void *arg)"
  },
  {
    "label": "X509_PURPOSE_get0_name()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "X509_PURPOSE_get0_name(const X509_PURPOSE *xp)"
  },
  {
    "label": "X509_PURPOSE_get0_sname()",
    "kind": "Method",
    "detail": "Function (char*)",
    "insertText": "X509_PURPOSE_get0_sname(const X509_PURPOSE *xp)"
  },
  {
    "label": "X509_PURPOSE_get_trust()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_trust(const X509_PURPOSE *xp)"
  },
  {
    "label": "X509_PURPOSE_cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_PURPOSE_cleanup(void)"
  },
  {
    "label": "X509_PURPOSE_get_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_PURPOSE_get_id(const X509_PURPOSE *)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(OPENSSL_STRING) *X509_get1_email(X509 *x)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(OPENSSL_STRING) *X509_REQ_get1_email(X509_REQ *x)"
  },
  {
    "label": "X509_email_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_email_free(STACK_OF(OPENSSL_STRING) *sk)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STACK_OF(OPENSSL_STRING) *X509_get1_ocsp(X509 *x)"
  },
  {
    "label": "X509_check_host()",
    "kind": "Method",
    "detail": "Function (# define X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT 0 x1 # define X509_CHECK_FLAG_NO_WILDCARDS 0 x2 # define X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS 0 x4 # define X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS 0 x8 # define X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS 0 x10 # define X509_CHECK_FLAG_NEVER_CHECK_SUBJECT 0 x20 # define _X509_CHECK_FLAG_DOT_SUBDOMAINS 0 x8000 int)",
    "insertText": "X509_check_host(X509 *x, const char *chk, size_t chklen, unsigned int flags, char **peername)"
  },
  {
    "label": "X509_check_email()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_email(X509 *x, const char *chk, size_t chklen, unsigned int flags)"
  },
  {
    "label": "X509_check_ip()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_ip(X509 *x, const unsigned char *chk, size_t chklen, unsigned int flags)"
  },
  {
    "label": "X509_check_ip_asc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509_check_ip_asc(X509 *x, const char *ipasc, unsigned int flags)"
  },
  {
    "label": "a2i_IPADDRESS()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "a2i_IPADDRESS(const char *ipasc)"
  },
  {
    "label": "a2i_IPADDRESS_NC()",
    "kind": "Method",
    "detail": "Function (ASN1_OCTET_STRING*)",
    "insertText": "a2i_IPADDRESS_NC(const char *ipasc)"
  },
  {
    "label": "X509V3_NAME_from_section()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509V3_NAME_from_section(X509_NAME *nm, STACK_OF(CONF_VALUE) *dn_sk, unsigned long chtype)"
  },
  {
    "label": "X509_POLICY_NODE_print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X509_POLICY_NODE_print(BIO *out, X509_POLICY_NODE *node, int indent)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(X509_POLICY_NODE)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_INTEGER* min,* max ; } ASRange ; # define ASIdOrRange_id 0 # define ASIdOrRange_range 1 typedef struct ASIdOrRange_st { int type ; union { ASN1_INTEGER* id ; ASRange* range ; } u ; } ASIdOrRange ; typedef)",
    "insertText": "STACK_OF(ASIdOrRange)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(ASIdOrRange)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (int type ; union { ASN1_NULL* inherit ; ASIdOrRanges* asIdsOrRanges ; } u ; } ASIdentifierChoice ; typedef struct ASIdentifiers_st { ASIdentifierChoice* asnum,* rdi ; } ASIdentifiers ;)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(ASRange) DECLARE_ASN1_FUNCTIONS(ASIdOrRange) DECLARE_ASN1_FUNCTIONS(ASIdentifierChoice) DECLARE_ASN1_FUNCTIONS(ASIdentifiers)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (ASN1_BIT_STRING* min,* max ; } IPAddressRange ; # define IPAddressOrRange_addressPrefix 0 # define IPAddressOrRange_addressRange 1 typedef struct IPAddressOrRange_st { int type ; union { ASN1_BIT_STRING* addressPrefix ; IPAddressRange* addressRange ; } u ; } IPAddressOrRange ; typedef)",
    "insertText": "STACK_OF(IPAddressOrRange)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(IPAddressOrRange)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (int type ; union { ASN1_NULL* inherit ; IPAddressOrRanges* addressesOrRanges ; } u ; } IPAddressChoice ; typedef struct IPAddressFamily_st { ASN1_OCTET_STRING* addressFamily ; IPAddressChoice* ipAddressChoice ; } IPAddressFamily ; typedef)",
    "insertText": "STACK_OF(IPAddressFamily)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_STACK_OF(IPAddressFamily) DECLARE_ASN1_FUNCTIONS(IPAddressRange) DECLARE_ASN1_FUNCTIONS(IPAddressOrRange) DECLARE_ASN1_FUNCTIONS(IPAddressChoice) DECLARE_ASN1_FUNCTIONS(IPAddressFamily) # define V3_ASID_ASNUM 0 # define V3_ASID_RDI 1 # define IANA_AFI_IPV4 1 # define IANA_AFI_IPV6 2 int X509v3_asid_add_inherit(ASIdentifiers *asid, int which)"
  },
  {
    "label": "X509v3_asid_add_id_or_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_add_id_or_range(ASIdentifiers *asid, int which, ASN1_INTEGER *min, ASN1_INTEGER *max)"
  },
  {
    "label": "X509v3_addr_add_inherit()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_add_inherit(IPAddrBlocks *addr, const unsigned afi, const unsigned *safi)"
  },
  {
    "label": "X509v3_addr_add_prefix()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_add_prefix(IPAddrBlocks *addr, const unsigned afi, const unsigned *safi, unsigned char *a, const int prefixlen)"
  },
  {
    "label": "X509v3_addr_add_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_add_range(IPAddrBlocks *addr, const unsigned afi, const unsigned *safi, unsigned char *min, unsigned char *max)"
  },
  {
    "label": "X509v3_addr_get_afi()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "X509v3_addr_get_afi(const IPAddressFamily *f)"
  },
  {
    "label": "X509v3_addr_get_range()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_get_range(IPAddressOrRange *aor, const unsigned afi, unsigned char *min, unsigned char *max, const int length)"
  },
  {
    "label": "X509v3_asid_is_canonical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_is_canonical(ASIdentifiers *asid)"
  },
  {
    "label": "X509v3_addr_is_canonical()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_is_canonical(IPAddrBlocks *addr)"
  },
  {
    "label": "X509v3_asid_canonize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_canonize(ASIdentifiers *asid)"
  },
  {
    "label": "X509v3_addr_canonize()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_canonize(IPAddrBlocks *addr)"
  },
  {
    "label": "X509v3_asid_inherits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_inherits(ASIdentifiers *asid)"
  },
  {
    "label": "X509v3_addr_inherits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_inherits(IPAddrBlocks *addr)"
  },
  {
    "label": "X509v3_asid_subset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_subset(ASIdentifiers *a, ASIdentifiers *b)"
  },
  {
    "label": "X509v3_addr_subset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_subset(IPAddrBlocks *a, IPAddrBlocks *b)"
  },
  {
    "label": "X509v3_asid_validate_path()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_validate_path(X509_STORE_CTX *)"
  },
  {
    "label": "X509v3_addr_validate_path()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_validate_path(X509_STORE_CTX *)"
  },
  {
    "label": "X509v3_asid_validate_resource_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_asid_validate_resource_set(STACK_OF(X509) *chain, ASIdentifiers *ext, int allow_inheritance)"
  },
  {
    "label": "X509v3_addr_validate_resource_set()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "X509v3_addr_validate_resource_set(STACK_OF(X509) *chain, IPAddrBlocks *ext, int allow_inheritance)"
  },
  {
    "label": "DEFINE_STACK_OF()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DEFINE_STACK_OF(ASN1_STRING)"
  },
  {
    "label": "DECLARE_ASN1_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (typedef struct ProfessionInfo_st PROFESSION_INFO ; typedef struct Admissions_st ADMISSIONS ; typedef struct AdmissionSyntax_st ADMISSION_SYNTAX ;)",
    "insertText": "DECLARE_ASN1_FUNCTIONS(NAMING_AUTHORITY) DECLARE_ASN1_FUNCTIONS(PROFESSION_INFO) DECLARE_ASN1_FUNCTIONS(ADMISSIONS) DECLARE_ASN1_FUNCTIONS(ADMISSION_SYNTAX) DEFINE_STACK_OF(ADMISSIONS) DEFINE_STACK_OF(PROFESSION_INFO) typedef STACK_OF(PROFESSION_INFO)"
  },
  {
    "label": "NAMING_AUTHORITY_get0_authorityId()",
    "kind": "Method",
    "detail": "Function (const ASN1_OBJECT*)",
    "insertText": "NAMING_AUTHORITY_get0_authorityId(const NAMING_AUTHORITY *n)"
  },
  {
    "label": "NAMING_AUTHORITY_get0_authorityURL()",
    "kind": "Method",
    "detail": "Function (const ASN1_IA5STRING*)",
    "insertText": "NAMING_AUTHORITY_get0_authorityURL(const NAMING_AUTHORITY *n)"
  },
  {
    "label": "NAMING_AUTHORITY_get0_authorityText()",
    "kind": "Method",
    "detail": "Function (const ASN1_STRING*)",
    "insertText": "NAMING_AUTHORITY_get0_authorityText(const NAMING_AUTHORITY *n)"
  },
  {
    "label": "NAMING_AUTHORITY_set0_authorityId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NAMING_AUTHORITY_set0_authorityId(NAMING_AUTHORITY *n, ASN1_OBJECT* namingAuthorityId)"
  },
  {
    "label": "NAMING_AUTHORITY_set0_authorityURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NAMING_AUTHORITY_set0_authorityURL(NAMING_AUTHORITY *n, ASN1_IA5STRING* namingAuthorityUrl)"
  },
  {
    "label": "NAMING_AUTHORITY_set0_authorityText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NAMING_AUTHORITY_set0_authorityText(NAMING_AUTHORITY *n, ASN1_STRING* namingAuthorityText)"
  },
  {
    "label": "ADMISSION_SYNTAX_get0_admissionAuthority()",
    "kind": "Method",
    "detail": "Function (const GENERAL_NAME*)",
    "insertText": "ADMISSION_SYNTAX_get0_admissionAuthority(const ADMISSION_SYNTAX *as)"
  },
  {
    "label": "ADMISSION_SYNTAX_set0_admissionAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSION_SYNTAX_set0_admissionAuthority(ADMISSION_SYNTAX *as, GENERAL_NAME *aa)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(ADMISSIONS) *ADMISSION_SYNTAX_get0_contentsOfAdmissions( const ADMISSION_SYNTAX *as)"
  },
  {
    "label": "ADMISSION_SYNTAX_set0_contentsOfAdmissions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSION_SYNTAX_set0_contentsOfAdmissions(ADMISSION_SYNTAX *as, STACK_OF(ADMISSIONS) *a)"
  },
  {
    "label": "ADMISSIONS_get0_admissionAuthority()",
    "kind": "Method",
    "detail": "Function (const GENERAL_NAME*)",
    "insertText": "ADMISSIONS_get0_admissionAuthority(const ADMISSIONS *a)"
  },
  {
    "label": "ADMISSIONS_set0_admissionAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSIONS_set0_admissionAuthority(ADMISSIONS *a, GENERAL_NAME *aa)"
  },
  {
    "label": "ADMISSIONS_get0_namingAuthority()",
    "kind": "Method",
    "detail": "Function (const NAMING_AUTHORITY*)",
    "insertText": "ADMISSIONS_get0_namingAuthority(const ADMISSIONS *a)"
  },
  {
    "label": "ADMISSIONS_set0_namingAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSIONS_set0_namingAuthority(ADMISSIONS *a, NAMING_AUTHORITY *na)"
  },
  {
    "label": "ADMISSIONS_get0_professionInfos()",
    "kind": "Method",
    "detail": "Function (const PROFESSION_INFOS*)",
    "insertText": "ADMISSIONS_get0_professionInfos(const ADMISSIONS *a)"
  },
  {
    "label": "ADMISSIONS_set0_professionInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ADMISSIONS_set0_professionInfos(ADMISSIONS *a, PROFESSION_INFOS *pi)"
  },
  {
    "label": "PROFESSION_INFO_get0_addProfessionInfo()",
    "kind": "Method",
    "detail": "Function (const ASN1_OCTET_STRING*)",
    "insertText": "PROFESSION_INFO_get0_addProfessionInfo(const PROFESSION_INFO *pi)"
  },
  {
    "label": "PROFESSION_INFO_set0_addProfessionInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_addProfessionInfo(PROFESSION_INFO *pi, ASN1_OCTET_STRING *aos)"
  },
  {
    "label": "PROFESSION_INFO_get0_namingAuthority()",
    "kind": "Method",
    "detail": "Function (const NAMING_AUTHORITY*)",
    "insertText": "PROFESSION_INFO_get0_namingAuthority(const PROFESSION_INFO *pi)"
  },
  {
    "label": "PROFESSION_INFO_set0_namingAuthority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_namingAuthority(PROFESSION_INFO *pi, NAMING_AUTHORITY *na)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(ASN1_STRING) *PROFESSION_INFO_get0_professionItems( const PROFESSION_INFO *pi)"
  },
  {
    "label": "PROFESSION_INFO_set0_professionItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_professionItems(PROFESSION_INFO *pi, STACK_OF(ASN1_STRING) *as)"
  },
  {
    "label": "STACK_OF()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STACK_OF(ASN1_OBJECT) *PROFESSION_INFO_get0_professionOIDs( const PROFESSION_INFO *pi)"
  },
  {
    "label": "PROFESSION_INFO_set0_professionOIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_professionOIDs(PROFESSION_INFO *pi, STACK_OF(ASN1_OBJECT) *po)"
  },
  {
    "label": "PROFESSION_INFO_get0_registrationNumber()",
    "kind": "Method",
    "detail": "Function (const ASN1_PRINTABLESTRING*)",
    "insertText": "PROFESSION_INFO_get0_registrationNumber(const PROFESSION_INFO *pi)"
  },
  {
    "label": "PROFESSION_INFO_set0_registrationNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PROFESSION_INFO_set0_registrationNumber(PROFESSION_INFO *pi, ASN1_PRINTABLESTRING *rn)"
  }
]