[
  {
    "label": "FMemStackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemStackBase"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FStructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FComponentBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentBounds"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FValueComponentTypeDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueComponentTypeDescription"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FValueTypeDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueTypeDescription"
  },
  {
    "label": "FType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FType"
  },
  {
    "label": "FStructField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructField"
  },
  {
    "label": "FStructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructType"
  },
  {
    "label": "types",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "types"
  },
  {
    "label": "types",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "types"
  },
  {
    "label": "FStructFieldInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructFieldInitializer"
  },
  {
    "label": "FStructTypeInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructTypeInitializer"
  },
  {
    "label": "FStructTypeRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructTypeRegistry"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "type"
  },
  {
    "label": "TValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TValue"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMemoryImageValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageValue"
  },
  {
    "label": "shader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "shader"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValue"
  },
  {
    "label": "GetValueComponentTypeDescription()",
    "kind": "Method",
    "detail": "Function (FValueComponentTypeDescription)",
    "insertText": "GetValueComponentTypeDescription(EValueComponentType Type)"
  },
  {
    "label": "CombineComponentTypes()",
    "kind": "Method",
    "detail": "Function (EValueComponentType)",
    "insertText": "CombineComponentTypes(EValueComponentType Lhs, EValueComponentType Rhs)"
  },
  {
    "label": "FindValueType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FindValueType(FName Name)"
  },
  {
    "label": "MakeValueType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeValueType(EValueComponentType ComponentType, int32 NumComponents)"
  },
  {
    "label": "MakeValueType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeValueType(EValueType BaseType, int32 NumComponents)"
  },
  {
    "label": "MakeValueTypeWithRequestedNumComponents()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeValueTypeWithRequestedNumComponents(EValueType BaseType, int8 RequestedNumComponents)"
  },
  {
    "label": "MakeNonLWCType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeNonLWCType(EValueType Type)"
  },
  {
    "label": "MakeConcreteType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeConcreteType(EValueType Type)"
  },
  {
    "label": "MakeDerivativeType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeDerivativeType(EValueType Type)"
  },
  {
    "label": "IsVoid()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsVoid()"
  },
  {
    "label": "CombineTypes()",
    "kind": "Method",
    "detail": "Function (FType)",
    "insertText": "CombineTypes(const FType& Lhs, const FType& Rhs, bool bMergeMatrixTypes = false)"
  },
  {
    "label": "FStructTypeRegistry()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FStructTypeRegistry(FMemStackBase& InAllocator)"
  },
  {
    "label": "FValueComponent()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FValueComponent()"
  },
  {
    "label": "FromMemoryImage()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "FromMemoryImage(EValueType Type, const void* Data, uint32* OutSizeInBytes = nullptr)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FType& Type)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FValue& Value)"
  },
  {
    "label": "Neg()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Neg(const FValue& Value)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Abs(const FValue& Value)"
  },
  {
    "label": "Saturate()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Saturate(const FValue& Value)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Floor(const FValue& Value)"
  },
  {
    "label": "Ceil()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Ceil(const FValue& Value)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Round(const FValue& Value)"
  },
  {
    "label": "Trunc()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Trunc(const FValue& Value)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sign(const FValue& Value)"
  },
  {
    "label": "Frac()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Frac(const FValue& Value)"
  },
  {
    "label": "Fractional()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Fractional(const FValue& Value)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sqrt(const FValue& Value)"
  },
  {
    "label": "Rcp()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Rcp(const FValue& Value)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Exp(const FValue& Value)"
  },
  {
    "label": "Exp2()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Exp2(const FValue& Value)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Log(const FValue& Value)"
  },
  {
    "label": "Log2()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Log2(const FValue& Value)"
  },
  {
    "label": "Log10()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Log10(const FValue& Value)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sin(const FValue& Value)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Cos(const FValue& Value)"
  },
  {
    "label": "Tan()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Tan(const FValue& Value)"
  },
  {
    "label": "Asin()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Asin(const FValue& Value)"
  },
  {
    "label": "Acos()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Acos(const FValue& Value)"
  },
  {
    "label": "Atan()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Atan(const FValue& Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Add(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sub(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Mul()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Mul(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Div(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Less()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Less(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Greater()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Greater(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "LessEqual(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "GreaterEqual()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "GreaterEqual(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Min(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Max(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Clamp(const FValue& Value, const FValue& Low, const FValue& High)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Fmod(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Modulo()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Modulo(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Atan2(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Dot(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Cross(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Append(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Cast(const FValue& Value, EValueType Type)"
  },
  {
    "label": "NegInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "NegInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AbsInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AbsInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SaturateInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SaturateInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "FloorInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FloorInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "CeilInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "CeilInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "RoundInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "RoundInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "TruncInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "TruncInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SignInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SignInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "FracInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FracInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "FractionalInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FractionalInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SqrtInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SqrtInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "RcpInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "RcpInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "ExpInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "ExpInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "Exp2InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Exp2InPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "LogInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "LogInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "Log2InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Log2InPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "Log10InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Log10InPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SinInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SinInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "CosInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "CosInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "TanInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "TanInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AsinInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AsinInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AcosInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AcosInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AtanInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AtanInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AddInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AddInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "SubInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SubInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "MulInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MulInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "DivInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "DivInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "MinInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MinInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "MaxInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MaxInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "FmodInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FmodInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "ModuloInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "ModuloInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "Atan2InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Atan2InPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "AppendInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AppendInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (UE::Shader)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(UE::Shader::EValueType)"
  }
]