[
  {
    "label": "FMemStackBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemStackBase"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FStructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructType"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FComponentBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentBounds"
  },
  {
    "label": "FValueComponentTypeDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueComponentTypeDescription"
  },
  {
    "label": "FValueTypeDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValueTypeDescription"
  },
  {
    "label": "FType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FType"
  },
  {
    "label": "FStructField",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructField"
  },
  {
    "label": "FStructFieldInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructFieldInitializer"
  },
  {
    "label": "FStructTypeInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructTypeInitializer"
  },
  {
    "label": "FStructTypeRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructTypeRegistry"
  },
  {
    "label": "TValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TValue"
  },
  {
    "label": "FMemoryImageValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryImageValue"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FValue"
  },
  {
    "label": "MinBound()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringView . h \" # include \" Serialization / MemoryLayout . h \" class FMemStackBase ; class UTexture ; namespace UE::Shader { struct FStructType ; enum class EComponentBound : uint8 { NegDoubleMax,NegFloatMax,IntMin,NegOne,Zero,One,IntMax,FloatMax,DoubleMax,} ; EComponentBound)",
    "insertText": "MinBound(EComponentBound Lhs, EComponentBound Rhs)"
  },
  {
    "label": "MaxBound()",
    "kind": "Method",
    "detail": "Function (} EComponentBound)",
    "insertText": "MaxBound(EComponentBound Lhs, EComponentBound Rhs)"
  },
  {
    "label": "FComponentBounds()",
    "kind": "Method",
    "detail": "Function (} struct FComponentBounds {)",
    "insertText": "FComponentBounds()"
  },
  {
    "label": "FComponentBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComponentBounds(EComponentBound InMin, EComponentBound InMax) : Min(InMin), Max(InMax)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EComponentBound Min = EComponentBound::NegDoubleMax ; EComponentBound Max = EComponentBound::DoubleMax ; } ; bool)",
    "insertText": "operator(const FComponentBounds& Lhs, const FComponentBounds& Rhs)"
  },
  {
    "label": "MinBound()",
    "kind": "Method",
    "detail": "Function (} FComponentBounds)",
    "insertText": "MinBound(FComponentBounds Lhs, FComponentBounds Rhs)"
  },
  {
    "label": "MaxBound()",
    "kind": "Method",
    "detail": "Function (} FComponentBounds)",
    "insertText": "MaxBound(FComponentBounds Lhs, FComponentBounds Rhs)"
  },
  {
    "label": "IsWithinBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWithinBounds(FComponentBounds Lhs, FComponentBounds Rhs)"
  },
  {
    "label": "NumValueComponentTypes()",
    "kind": "Method",
    "detail": "Function (} enum class EValueComponentType : uint8 { Void,Float,Double,Int,Bool,Numeric,Num,} ; int32)",
    "insertText": "NumValueComponentTypes(int32)"
  },
  {
    "label": "FValueComponentTypeDescription()",
    "kind": "Method",
    "detail": "Function (struct FValueComponentTypeDescription {)",
    "insertText": "FValueComponentTypeDescription()"
  },
  {
    "label": "FValueComponentTypeDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValueComponentTypeDescription(const TCHAR* InName, uint32_t InSizeInBytes, EComponentBound InMin, EComponentBound InMax) : Name(InName), SizeInBytes(InSizeInBytes), Bounds(InMin, InMax)"
  },
  {
    "label": "GetValueComponentTypeDescription()",
    "kind": "Method",
    "detail": "Function (} const TCHAR* Name = nullptr ; uint32_t SizeInBytes = 0 u ; FComponentBounds Bounds ; } ; FValueComponentTypeDescription)",
    "insertText": "GetValueComponentTypeDescription(EValueComponentType Type)"
  },
  {
    "label": "GetComponentTypeName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetComponentTypeName(EValueComponentType Type)"
  },
  {
    "label": "GetComponentTypeSizeInBytes()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetComponentTypeSizeInBytes(EValueComponentType Type)"
  },
  {
    "label": "IsNumericType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericType(EValueComponentType Type)"
  },
  {
    "label": "CombineComponentTypes()",
    "kind": "Method",
    "detail": "Function (} EValueComponentType)",
    "insertText": "CombineComponentTypes(EValueComponentType Lhs, EValueComponentType Rhs)"
  },
  {
    "label": "MakeNonLWCType()",
    "kind": "Method",
    "detail": "Function (EValueComponentType)",
    "insertText": "MakeNonLWCType(EValueComponentType Type)"
  },
  {
    "label": "GetValueTypeDescription()",
    "kind": "Method",
    "detail": "Function (struct FValueTypeDescription { const TCHAR* Name ; EValueType ValueType ; EValueComponentType ComponentType ; int8 NumComponents ; int8 ComponentSizeInBytes ; } ; const FValueTypeDescription&)",
    "insertText": "GetValueTypeDescription(EValueType Type)"
  },
  {
    "label": "FindValueType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FindValueType(FName Name)"
  },
  {
    "label": "IsLWCType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLWCType(EValueType Type)"
  },
  {
    "label": "IsGenericType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGenericType(EValueType Type)"
  },
  {
    "label": "MakeValueType()",
    "kind": "Method",
    "detail": "Function (} EValueType)",
    "insertText": "MakeValueType(EValueComponentType ComponentType, int32 NumComponents)"
  },
  {
    "label": "MakeValueType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeValueType(EValueType BaseType, int32 NumComponents)"
  },
  {
    "label": "MakeValueTypeWithRequestedNumComponents()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeValueTypeWithRequestedNumComponents(EValueType BaseType, int8 RequestedNumComponents)"
  },
  {
    "label": "MakeNonLWCType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeNonLWCType(EValueType Type)"
  },
  {
    "label": "MakeConcreteType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeConcreteType(EValueType Type)"
  },
  {
    "label": "MakeDerivativeType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MakeDerivativeType(EValueType Type)"
  },
  {
    "label": "IsNumericType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNumericType(EValueType Type)"
  },
  {
    "label": "IsNumericScalarType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericScalarType(EValueType Type)"
  },
  {
    "label": "GetValueTypeDescription()",
    "kind": "Method",
    "detail": "Function (const FValueTypeDescription TypeDesc =)",
    "insertText": "GetValueTypeDescription(Type)"
  },
  {
    "label": "IsNumericVectorType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericVectorType(EValueType Type)"
  },
  {
    "label": "IsNumericMatrixType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericMatrixType(EValueType Type)"
  },
  {
    "label": "FType()",
    "kind": "Method",
    "detail": "Function (} struct FType {)",
    "insertText": "FType() : ValueType(EValueType::Void)"
  },
  {
    "label": "FType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FType(EValueType InValueType) : ValueType(InValueType)"
  },
  {
    "label": "FType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FType(const FStructType* InStruct) : StructType(InStruct), ValueType(InStruct ? EValueType::Struct : EValueType::Void)"
  },
  {
    "label": "FType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FType(FName InObjectType) : ObjectType(InObjectType), ValueType(!InObjectType.IsNone() ? EValueType::Object : EValueType::Void)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetDerivativeType()",
    "kind": "Method",
    "detail": "Function (FType)",
    "insertText": "GetDerivativeType()"
  },
  {
    "label": "GetNonLWCType()",
    "kind": "Method",
    "detail": "Function (FType)",
    "insertText": "GetNonLWCType()"
  },
  {
    "label": "GetConcreteType()",
    "kind": "Method",
    "detail": "Function (} FType)",
    "insertText": "GetConcreteType()"
  },
  {
    "label": "IsVoid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVoid()"
  },
  {
    "label": "IsNumeric()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumeric()"
  },
  {
    "label": "IsNumericScalar()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericScalar()"
  },
  {
    "label": "IsNumericVector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericVector()"
  },
  {
    "label": "IsNumericMatrix()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericMatrix()"
  },
  {
    "label": "IsNumericLWC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNumericLWC()"
  },
  {
    "label": "GetNumComponents()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumComponents()"
  },
  {
    "label": "GetNumFlatFields()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumFlatFields()"
  },
  {
    "label": "GetComponentType()",
    "kind": "Method",
    "detail": "Function (EValueComponentType)",
    "insertText": "GetComponentType(int32 Index)"
  },
  {
    "label": "GetFlatFieldType()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "GetFlatFieldType(int32 Index)"
  },
  {
    "label": "EValueType()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "EValueType()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FStructType* StructType = nullptr ; FName ObjectType ; EValueType ValueType ; } ; bool)",
    "insertText": "operator(const FType& Lhs, const FType& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FType& Lhs, const EValueType& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const EValueType& Lhs, const FType& Rhs)"
  },
  {
    "label": "CombineTypes()",
    "kind": "Method",
    "detail": "Function (} FType)",
    "insertText": "CombineTypes(const FType& Lhs, const FType& Rhs, bool bMergeMatrixTypes = false)"
  },
  {
    "label": "IsExternal()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStructType { uint64 Hash ; const TCHAR* Name ; const FStructType* DerivativeType = nullptr ; TArrayView<const FStructField> Fields ; TArrayView<const EValueComponentType> ComponentTypes ; TArrayView<const EValueType> FlatFieldTypes ; bool)",
    "insertText": "IsExternal()"
  },
  {
    "label": "FindFieldByName()",
    "kind": "Method",
    "detail": "Function (} const FStructField*)",
    "insertText": "FindFieldByName(const TCHAR* InName)"
  },
  {
    "label": "FStructFieldInitializer()",
    "kind": "Method",
    "detail": "Function (} ; struct FStructFieldInitializer {)",
    "insertText": "FStructFieldInitializer()"
  },
  {
    "label": "FStructFieldInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructFieldInitializer(const FStringView& InName, const FType& InType) : Name(InName), Type(InType)"
  },
  {
    "label": "FStructTypeRegistry()",
    "kind": "Method",
    "detail": "Function (} FStringView Name ; FType Type ; } ; struct FStructTypeInitializer { FStringView Name ; TArrayView<const FStructFieldInitializer> Fields ; bool bIsDerivativeType = false ; } ; class FStructTypeRegistry { public :)",
    "insertText": "FStructTypeRegistry(FMemStackBase& InAllocator)"
  },
  {
    "label": "EmitDeclarationsCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmitDeclarationsCode(FStringBuilderBase& OutCode)"
  },
  {
    "label": "NewType()",
    "kind": "Method",
    "detail": "Function (const FStructType*)",
    "insertText": "NewType(const FStructTypeInitializer& Initializer)"
  },
  {
    "label": "NewExternalType()",
    "kind": "Method",
    "detail": "Function (const FStructType*)",
    "insertText": "NewExternalType(FStringView Name)"
  },
  {
    "label": "FindType()",
    "kind": "Method",
    "detail": "Function (const FStructType*)",
    "insertText": "FindType(uint64 Hash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FMemStackBase* Allocator ; TMap<uint64,const FStructType*> Types ; } ; template<T> struct TValue { T&)",
    "insertText": "operator(int32 i)"
  },
  {
    "label": "FValueComponent()",
    "kind": "Method",
    "detail": "Function (uint8 Bytes [ MaxSize ] ; uint32 Size ; } ; union FValueComponent {)",
    "insertText": "FValueComponent() : Packed(0u)"
  },
  {
    "label": "FValueComponent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValueComponent(float InValue) : Packed(0u)"
  },
  {
    "label": "FValueComponent()",
    "kind": "Method",
    "detail": "Function (Float = InValue ; })",
    "insertText": "FValueComponent(double InValue) : Packed(0u)"
  },
  {
    "label": "FValueComponent()",
    "kind": "Method",
    "detail": "Function (Int = InValue ; })",
    "insertText": "FValueComponent(bool InValue) : Packed(0u)"
  },
  {
    "label": "AsBool()",
    "kind": "Method",
    "detail": "Function (Bool = InValue ? 1 : 0 ; } bool)",
    "insertText": "AsBool()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint64 Packed ; double Double ; float Float ; int32 Int ; uint8 Bool ; } ;)",
    "insertText": "static_assert(sizeof(FValueComponent) == sizeof(uint64), \"bad packing\")"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (struct FValue {)",
    "insertText": "FValue()"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValue(const FType& InType) : Type(InType)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "AddDefaulted(InType.GetNumComponents())"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(EValueComponentType InComponentType, int8 InNumComponents) : Type(MakeValueType(InComponentType, InNumComponents))"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "AddDefaulted(InNumComponents)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(float v) : Type(EValueType::Float1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(v)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(float X, float Y) : Type(EValueType::Float2)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(X)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Y)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(float X, float Y, float Z) : Type(EValueType::Float3)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Z)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(float X, float Y, float Z, float W) : Type(EValueType::Float4)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(W)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(double v) : Type(EValueType::Double1)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(double X, double Y) : Type(EValueType::Double2)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(double X, double Y, double Z) : Type(EValueType::Double3)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(double X, double Y, double Z, double W) : Type(EValueType::Double4)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(const FLinearColor& Value) : Type(EValueType::Float4)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.R)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.G)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.B)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.A)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(const FVector2f& Value) : Type(EValueType::Float2)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.X)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.Y)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(const FVector3f& Value) : Type(EValueType::Float3)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.Z)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(const FVector3d& Value) : Type(EValueType::Double3)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(const FVector4f& Value) : Type(EValueType::Float4)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Component .)",
    "insertText": "Add(Value.W)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(const FVector4d& Value) : Type(EValueType::Double4)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(bool v) : Type(EValueType::Bool1)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(bool X, bool Y, bool Z, bool W) : Type(EValueType::Bool4)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(int32 v) : Type(EValueType::Int1)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} const FType&)",
    "insertText": "GetType()"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (} FValueComponent)",
    "insertText": "GetComponent(int32 Index)"
  },
  {
    "label": "ComponentIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "ComponentIndex(Type.IsNumericScalar() && Index >= 0 && Index < 4)"
  },
  {
    "label": "FromMemoryImage()",
    "kind": "Method",
    "detail": "Function (} FValue)",
    "insertText": "FromMemoryImage(EValueType Type, const void* Data, uint32* OutSizeInBytes = nullptr)"
  },
  {
    "label": "AsMemoryImage()",
    "kind": "Method",
    "detail": "Function (FMemoryImageValue)",
    "insertText": "AsMemoryImage()"
  },
  {
    "label": "AsFloat()",
    "kind": "Method",
    "detail": "Function (FFloatValue)",
    "insertText": "AsFloat()"
  },
  {
    "label": "AsDouble()",
    "kind": "Method",
    "detail": "Function (FDoubleValue)",
    "insertText": "AsDouble()"
  },
  {
    "label": "AsInt()",
    "kind": "Method",
    "detail": "Function (FIntValue)",
    "insertText": "AsInt()"
  },
  {
    "label": "AsLinearColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "AsLinearColor()"
  },
  {
    "label": "AsVector4d()",
    "kind": "Method",
    "detail": "Function (FVector4d)",
    "insertText": "AsVector4d()"
  },
  {
    "label": "AsFloatScalar()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "AsFloatScalar()"
  },
  {
    "label": "AsBoolScalar()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsBoolScalar()"
  },
  {
    "label": "IsZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsZero()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ToString(EValueStringFormat Format, FStringBuilderBase& OutString)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FType Type ; TArray<FValueComponent,TInlineAllocator<1 6>> Component ; } ; bool)",
    "insertText": "operator(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FType& Type)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FValue& Value)"
  },
  {
    "label": "Neg()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Neg(const FValue& Value)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Abs(const FValue& Value)"
  },
  {
    "label": "Saturate()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Saturate(const FValue& Value)"
  },
  {
    "label": "Floor()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Floor(const FValue& Value)"
  },
  {
    "label": "Ceil()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Ceil(const FValue& Value)"
  },
  {
    "label": "Round()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Round(const FValue& Value)"
  },
  {
    "label": "Trunc()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Trunc(const FValue& Value)"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sign(const FValue& Value)"
  },
  {
    "label": "Frac()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Frac(const FValue& Value)"
  },
  {
    "label": "Fractional()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Fractional(const FValue& Value)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sqrt(const FValue& Value)"
  },
  {
    "label": "Rcp()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Rcp(const FValue& Value)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Exp(const FValue& Value)"
  },
  {
    "label": "Exp2()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Exp2(const FValue& Value)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Log(const FValue& Value)"
  },
  {
    "label": "Log2()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Log2(const FValue& Value)"
  },
  {
    "label": "Log10()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Log10(const FValue& Value)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sin(const FValue& Value)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Cos(const FValue& Value)"
  },
  {
    "label": "Tan()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Tan(const FValue& Value)"
  },
  {
    "label": "Asin()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Asin(const FValue& Value)"
  },
  {
    "label": "Acos()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Acos(const FValue& Value)"
  },
  {
    "label": "Atan()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Atan(const FValue& Value)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Add(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Sub()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Sub(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Mul()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Mul(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Div()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Div(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Less()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Less(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Greater()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Greater(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "LessEqual()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "LessEqual(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "GreaterEqual()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "GreaterEqual(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Min(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Max(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Clamp(const FValue& Value, const FValue& Low, const FValue& High)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Fmod(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Modulo()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Modulo(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Atan2(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Dot(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Cross()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Cross(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Append(const FValue& Lhs, const FValue& Rhs)"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Cast(const FValue& Value, EValueType Type)"
  },
  {
    "label": "NegInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "NegInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AbsInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AbsInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SaturateInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SaturateInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "FloorInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FloorInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "CeilInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "CeilInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "RoundInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "RoundInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "TruncInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "TruncInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SignInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SignInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "FracInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FracInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "FractionalInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FractionalInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SqrtInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SqrtInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "RcpInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "RcpInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "ExpInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "ExpInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "Exp2InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Exp2InPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "LogInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "LogInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "Log2InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Log2InPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "Log10InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Log10InPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "SinInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SinInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "CosInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "CosInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "TanInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "TanInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AsinInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AsinInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AcosInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AcosInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AtanInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AtanInPlace(EValueType Type, TArrayView<FValueComponent> Component)"
  },
  {
    "label": "AddInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AddInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "SubInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "SubInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "MulInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MulInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "DivInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "DivInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "MinInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MinInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "MaxInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "MaxInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "FmodInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "FmodInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "ModuloInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "ModuloInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "Atan2InPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "Atan2InPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "AppendInPlace()",
    "kind": "Method",
    "detail": "Function (EValueType)",
    "insertText": "AppendInPlace(EValueType LhsType, EValueType RhsType, TArrayView<FValueComponent> Component, int32& OutComponentsConsumed)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(UE::Shader::EValueType)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(UE::Shader::EValueComponentType)"
  }
]