[
  {
    "label": "SendAudioStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendAudioStream"
  },
  {
    "label": "Scenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scenario"
  },
  {
    "label": "AudioStreamPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioStreamPair"
  },
  {
    "label": "ReceiveAudioStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveAudioStream"
  },
  {
    "label": "SendAudioStream()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_AUDIO_STREAM_H_ # define TEST_SCENARIO_AUDIO_STREAM_H_ # include<memory> # include<string> # include<vector> # include \" test / scenario / call_client . h \" # include \" test / scenario / column_printer . h \" # include \" test / scenario / network_node . h \" # include \" test / scenario / scenario_config . h \" namespace webrtc { namespace test { class SendAudioStream { public : ~)",
    "insertText": "SendAudioStream()"
  },
  {
    "label": "SendAudioStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendAudioStream(const SendAudioStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SendAudioStream&)",
    "insertText": "operator(const SendAudioStream&)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "SetMuted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMuted(bool mute)"
  },
  {
    "label": "StatsPrinter()",
    "kind": "Method",
    "detail": "Function (ColumnPrinter)",
    "insertText": "StatsPrinter()"
  },
  {
    "label": "SendAudioStream()",
    "kind": "Method",
    "detail": "Function (private : class Scenario ; class AudioStreamPair ; class ReceiveAudioStream ;)",
    "insertText": "SendAudioStream(CallClient* sender, AudioStreamConfig config, rtc::scoped_refptr<AudioEncoderFactory> encoder_factory, Transport* send_transport)"
  },
  {
    "label": "ReceiveAudioStream()",
    "kind": "Method",
    "detail": "Function (AudioSendStream* send_stream_ = nullptr ; CallClient* const sender_ ; const AudioStreamConfig config_ ; uint32_t ssrc_ ; } ; class ReceiveAudioStream { public : ~)",
    "insertText": "ReceiveAudioStream()"
  },
  {
    "label": "ReceiveAudioStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveAudioStream(const ReceiveAudioStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReceiveAudioStream&)",
    "insertText": "operator(const ReceiveAudioStream&)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (AudioReceiveStreamInterface::Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "ReceiveAudioStream()",
    "kind": "Method",
    "detail": "Function (private : class Scenario ; class AudioStreamPair ;)",
    "insertText": "ReceiveAudioStream(CallClient* receiver, AudioStreamConfig config, SendAudioStream* send_stream, rtc::scoped_refptr<AudioDecoderFactory> decoder_factory, Transport* feedback_transport)"
  },
  {
    "label": "AudioStreamPair()",
    "kind": "Method",
    "detail": "Function (AudioReceiveStreamInterface* receive_stream_ = nullptr ; CallClient* const receiver_ ; const AudioStreamConfig config_ ; } ; class AudioStreamPair { public : ~)",
    "insertText": "AudioStreamPair()"
  },
  {
    "label": "AudioStreamPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioStreamPair(const AudioStreamPair&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioStreamPair&)",
    "insertText": "operator(const AudioStreamPair&)"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (SendAudioStream*)",
    "insertText": "send()"
  }
]