[
  {
    "label": "packetwise_redux_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "packetwise_redux_traits"
  },
  {
    "label": "packetwise_redux_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "packetwise_redux_impl"
  },
  {
    "label": "redux_vec_unroller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "redux_vec_unroller"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PARTIALREDUX_H # define EIGEN_PARTIALREDUX_H namespace Eigen { namespace internal { template<Func,Evaluator> struct packetwise_redux_traits { enum { OuterSize =)",
    "insertText": "int(Evaluator::IsRowMajor) ? Evaluator::RowsAtCompileTime : Evaluator::ColsAtCompileTime, Cost = OuterSize == Dynamic ? HugeCost : OuterSize * Evaluator::CoeffReadCost + (OuterSize-1)"
  },
  {
    "label": "packetwise_redux_empty_value()",
    "kind": "Method",
    "detail": "Function (} ; template<PacketType,Func> EIGEN_DEVICE_FUNC PacketType)",
    "insertText": "packetwise_redux_empty_value(const Func&)"
  },
  {
    "label": "zero()",
    "kind": "Method",
    "detail": "Function (const unpacket_traits<PacketType>::type)",
    "insertText": "zero(0)"
  },
  {
    "label": "packetwise_redux_empty_value()",
    "kind": "Method",
    "detail": "Function (} template<PacketType,Scalar> EIGEN_DEVICE_FUNC PacketType)",
    "insertText": "packetwise_redux_empty_value(const scalar_product_op<Scalar,Scalar>&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Func,Evaluator,int Unrolling = packetwise_redux_traits<Func,Evaluator>::Unrolling> struct packetwise_redux_impl ; template<Func,Evaluator> struct packetwise_redux_impl<Func,Evaluator,CompleteUnrolling> { typedef redux_novec_unroller<Func,Evaluator,0,Evaluator::SizeAtCompileTime> Base ; typedef Evaluator::Scalar Scalar ; template<PacketType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketType)",
    "insertText": "run(const Evaluator &eval, const Func& func, Index)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Func,Evaluator,int Start> struct redux_vec_unroller<Func,Evaluator,Start,0> { template<PacketType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketType)",
    "insertText": "run(const Evaluator &, const Func& f)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Func,Evaluator> struct packetwise_redux_impl<Func,Evaluator,NoUnrolling> { typedef Evaluator::Scalar Scalar ; typedef redux_traits<Func,Evaluator>::PacketType PacketScalar ; template<PacketType> EIGEN_DEVICE_FUNC PacketType)",
    "insertText": "run(const Evaluator &eval, const Func& func, Index size)"
  },
  {
    "label": "size4()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "size4(size-1)&(~3)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (PacketType p = eval . template packetByOuterInner<Unaligned,)",
    "insertText": "PacketType(0,0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index i = 1 ;)",
    "insertText": "for(; i<size4; i+=4) p = func.packetOp(p, func.packetOp( func.packetOp(eval.template packetByOuterInner<Unaligned,PacketType>(i+0,0),eval.template packetByOuterInner<Unaligned,PacketType>(i+1,0)), func.packetOp(eval.template packetByOuterInner<Unaligned,PacketType>(i+2,0),eval.template packetByOuterInner<Unaligned,PacketType>(i+3,0))))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (typedef MemberOp::template Cost<)",
    "insertText": "int(TraversalSize)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { CoeffReadCost = TraversalSize = = Dynamic ? HugeCost : TraversalSize = = 0 ? 1 :)",
    "insertText": "int(TraversalSize) * int(evaluator<ArgType>::CoeffReadCost) + int(CostOpType::value), _ArgFlags = evaluator<ArgType>::Flags, _Vectorizable = bool(int(_ArgFlags)&PacketAccessBit) && bool(MemberOp::Vectorizable) && (Direction==int(Vertical) ? bool(_ArgFlags&RowMajorBit) : (_ArgFlags&RowMajorBit)==0) && (TraversalSize!=0), Flags = (traits<XprType>::Flags&RowMajorBit) | (evaluator<ArgType>::Flags&(HereditaryBits&(~RowMajorBit))) | (_Vectorizable ? PacketAccessBit : 0)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC)",
    "insertText": "evaluator(const XprType xpr) : m_arg(xpr.nestedExpression()), m_functor(xpr.functor())"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(TraversalSize==Dynamic ? HugeCost : (TraversalSize==0 ? 1 : int(CostOpType::value)))"
  },
  {
    "label": "EIGEN_INTERNAL_CHECK_COST_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_INTERNAL_CHECK_COST_VALUE(CoeffReadCost)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::CoeffReturnType CoeffReturnType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "coeff(Index i, Index j)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Scalar)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode,PacketType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketType)",
    "insertText": "packet(Index i, Index j)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode,PacketType> EIGEN_STRONG_INLINE EIGEN_DEVICE_FUNC PacketType)",
    "insertText": "packet(Index idx)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { PacketSize = internal::unpacket_traits<PacketType>::size } ; typedef Block<const ArgTypeNestedCleaned,Direction = = Vertical ?)",
    "insertText": "int(ArgType::RowsAtCompileTime) : int(PacketSize), Direction==Vertical ? int(PacketSize) : int(ArgType::ColsAtCompileTime)"
  },
  {
    "label": "panel()",
    "kind": "Method",
    "detail": "Function (PanelType)",
    "insertText": "panel(m_arg, Direction==Vertical ? 0 : idx, Direction==Vertical ? idx : 0, Direction==Vertical ? m_arg.rows() : Index(PacketSize), Direction==Vertical ? Index(PacketSize) : m_arg.cols())"
  },
  {
    "label": "panel_eval()",
    "kind": "Method",
    "detail": "Function (typedef internal::redux_evaluator<PanelType> PanelEvaluator ; PanelEvaluator)",
    "insertText": "panel_eval(panel)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (typedef MemberOp::BinaryOp BinaryOp ; PacketType p = internal::packetwise_redux_impl<BinaryOp,PanelEvaluator>::template run<)",
    "insertText": "PacketType(panel_eval,m_functor.binaryFunc(),m_arg.outerSize())"
  }
]