[
  {
    "label": "FBoneIndexBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneIndexBase"
  },
  {
    "label": "RealBoneIndexType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RealBoneIndexType"
  },
  {
    "label": "FBoneIndexWithOperators",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneIndexWithOperators"
  },
  {
    "label": "FCompactPoseBoneIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPoseBoneIndex"
  },
  {
    "label": "FMeshPoseBoneIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshPoseBoneIndex"
  },
  {
    "label": "FSkeletonPoseBoneIndex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonPoseBoneIndex"
  },
  {
    "label": "TCompactPoseBoneIndexMapKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCompactPoseBoneIndexMapKeyFuncs"
  },
  {
    "label": "FBoneIndexBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" typedef uint16 FBoneIndexType ; struct FBoneIndexBase {)",
    "insertText": "FBoneIndexBase() : BoneIndex(INDEX_NONE)"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetInt()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FBoneIndexBase& Index)"
  },
  {
    "label": "GetIntFromComp()",
    "kind": "Method",
    "detail": "Function (} protected : int32 BoneIndex ; } ; int32)",
    "insertText": "GetIntFromComp(const int32 InComp)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class RealBoneIndexType> struct FBoneIndexWithOperators : public FBoneIndexBase { bool)",
    "insertText": "operator(const RealBoneIndexType& Lhs, const RealBoneIndexType& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const RealBoneIndexType& Lhs, const int32 Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # if ! PLATFORM_COMPILER_HAS_GENERATED_COMPARISON_OPERATORS bool)",
    "insertText": "operator(const int32 Lhs, const RealBoneIndexType& Rhs)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (+ + BoneIndex ;)",
    "insertText": "return((RealBoneIndexType*)this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RealBoneIndexType&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const RealBoneIndexType&)",
    "insertText": "operator(const RealBoneIndexType& Rhs)"
  },
  {
    "label": "FCompactPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneIndex = Rhs . BoneIndex ; return Rhs ; } } ; struct FCompactPoseBoneIndex : public FBoneIndexWithOperators<FCompactPoseBoneIndex> { public :)",
    "insertText": "FCompactPoseBoneIndex(int32 InBoneIndex)"
  },
  {
    "label": "FMeshPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneIndex = InBoneIndex ; } } ; struct FMeshPoseBoneIndex : public FBoneIndexWithOperators<FMeshPoseBoneIndex> { public :)",
    "insertText": "FMeshPoseBoneIndex(int32 InBoneIndex)"
  },
  {
    "label": "FSkeletonPoseBoneIndex()",
    "kind": "Method",
    "detail": "Function (BoneIndex = InBoneIndex ; } } ; struct FSkeletonPoseBoneIndex : public FBoneIndexWithOperators<FSkeletonPoseBoneIndex> { public :)",
    "insertText": "FSkeletonPoseBoneIndex(int32 InBoneIndex)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (BoneIndex = InBoneIndex ; } } ; template<ValueType> struct TCompactPoseBoneIndexMapKeyFuncs : public TDefaultMapKeyFuncs<const FCompactPoseBoneIndex,ValueType,false> { FCompactPoseBoneIndex)",
    "insertText": "GetSetKey(TPair<FCompactPoseBoneIndex, ValueType> const& Element)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(FCompactPoseBoneIndex const& A, FCompactPoseBoneIndex const& B)"
  }
]