[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FConvexVolume",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexVolume"
  },
  {
    "label": "EModeTools",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EModeTools"
  },
  {
    "label": "FModeTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModeTool"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "ULegacyEdModeSelectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULegacyEdModeSelectInterface"
  },
  {
    "label": "ILegacyEdModeSelectInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyEdModeSelectInterface"
  },
  {
    "label": "ULegacyEdModeWidgetInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULegacyEdModeWidgetInterface"
  },
  {
    "label": "ILegacyEdModeWidgetInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyEdModeWidgetInterface"
  },
  {
    "label": "ULegacyEdModeToolInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULegacyEdModeToolInterface"
  },
  {
    "label": "ILegacyEdModeToolInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyEdModeToolInterface"
  },
  {
    "label": "ULegacyEdModeDrawHelperInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULegacyEdModeDrawHelperInterface"
  },
  {
    "label": "ILegacyEdModeDrawHelperInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyEdModeDrawHelperInterface"
  },
  {
    "label": "ULegacyEdModeViewportInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULegacyEdModeViewportInterface"
  },
  {
    "label": "ILegacyEdModeViewportInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILegacyEdModeViewportInterface"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UnrealWidgetFwd . h \" # include \" Engine / EngineBaseTypes . h \" # include \" InputCoreTypes . h \" # include \" Math / Axis . h \" # include \" Math / Vector . h \" # include \" UObject / Interface . h \" # include \" Editor . h \" # include \" LegacyEdModeInterfaces . generated . h \" class FEditorViewportClient ; struct FConvexVolume ; enum EModeTools : int8 ; class FModeTool ; class FSceneView ; class FPrimitiveDrawInterface ; class FViewport ; class HHitProxy ; struct FViewportClick ; class FCanvas ; class UTexture2D ;)",
    "insertText": "UINTERFACE(NotBlueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ILegacyEdModeSelectInterface {)",
    "insertText": "GENERATED_BODY() public: virtual bool BoxSelect(FBox& InBox, bool InSelect = true)"
  },
  {
    "label": "FrustumSelect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FrustumSelect(const FConvexVolume& InFrustum, FEditorViewportClient* InViewportClient, bool InSelect = true)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ILegacyEdModeWidgetInterface {)",
    "insertText": "GENERATED_BODY() public: virtual bool AllowWidgetMove()"
  },
  {
    "label": "CanCycleWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCycleWidgetMode()"
  },
  {
    "label": "ShowModeWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShowModeWidgets()"
  },
  {
    "label": "GetWidgetAxisToDraw()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetWidgetAxisToDraw(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "ShouldDrawWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDrawWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget()"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode CheckMode)"
  },
  {
    "label": "GetWidgetNormalFromCurrentAxis()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetNormalFromCurrentAxis(void* InData)"
  },
  {
    "label": "SetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWidgetAxis(EAxisList::Type InAxis)"
  },
  {
    "label": "GetCurrentWidgetAxis()",
    "kind": "Method",
    "detail": "Function (EAxisList::Type)",
    "insertText": "GetCurrentWidgetAxis()"
  },
  {
    "label": "UsesPropertyWidgets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesPropertyWidgets()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "GetCustomInputCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomInputCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "DrawHUD()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawHUD(FEditorViewportClient* ViewportClient, FViewport* Viewport, const FSceneView* View, FCanvas* Canvas)"
  },
  {
    "label": "GetVertexTexture()",
    "kind": "Method",
    "detail": "Function (} UTexture2D*)",
    "insertText": "GetVertexTexture()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ILegacyEdModeToolInterface {)",
    "insertText": "GENERATED_BODY() public: virtual void SetCurrentTool(EModeTools InID)"
  },
  {
    "label": "SetCurrentTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTool(FModeTool* InModeTool)"
  },
  {
    "label": "FindTool()",
    "kind": "Method",
    "detail": "Function (FModeTool*)",
    "insertText": "FindTool(EModeTools InID)"
  },
  {
    "label": "GetTools()",
    "kind": "Method",
    "detail": "Function (const TArray<FModeTool*>&)",
    "insertText": "GetTools()"
  },
  {
    "label": "GetCurrentTool()",
    "kind": "Method",
    "detail": "Function (FModeTool*)",
    "insertText": "GetCurrentTool()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ILegacyEdModeDrawHelperInterface {)",
    "insertText": "GENERATED_BODY() public: virtual void Draw(const FSceneView* View, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (class ILegacyEdModeViewportInterface {)",
    "insertText": "GENERATED_BODY() public: virtual bool MouseEnter(FEditorViewportClient* ViewportClient, FViewport* Viewport, int32 x, int32 y)"
  },
  {
    "label": "AllowsViewportDragTool()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowsViewportDragTool()"
  }
]