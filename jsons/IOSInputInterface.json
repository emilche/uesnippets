[
  {
    "label": "TouchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TouchType"
  },
  {
    "label": "TouchInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TouchInput"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDeferredIOSEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredIOSEvent"
  },
  {
    "label": "FIOSInputInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIOSInputInterface"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GenericPlatform / IInputInterface . h \" # if ! PLATFORM_TVOS # import<CoreMotion / CoreMotion . h> # endif # import<GameController / GameController . h> # include \" Misc / CoreMisc . h \" # include \" Math / Quat . h \" # include \" Math / Vector . h \" # include \" Math / Color . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" AppleControllerInterface . h \" # define KEYCODE_ENTER 1 0 0 0 # define KEYCODE_BACKSPACE 1 0 0 1 # define KEYCODE_ESCAPE 1 0 0 2 enum TouchType { TouchBegan,TouchMoved,TouchEnded,ForceChanged,FirstMove,} ; struct TouchInput { int Handle ; TouchType Type ; FVector2D LastPosition ; FVector2D Position ; float Force ; } ; enum class EIOSEventType : int32 { Invalid = 0,LeftMouseDown = 1,LeftMouseUp = 2,RightMouseDown = 3,RightMouseUp = 4,KeyDown = 1 0,KeyUp = 1 1,MiddleMouseDown = 2 5,MiddleMouseUp = 2 6,ThumbDown = 5 0,ThumbUp = 7 0,} ; struct FDeferredIOSEvent { EIOSEventType type ; uint32 keycode ; } ; class FIOSInputInterface : public FAppleControllerInterface,FSelfRegisteringExec { public : TSharedRef<FIOSInputInterface>)",
    "insertText": "Create(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FIOSInputInterface>)",
    "insertText": "Get()"
  },
  {
    "label": "FIOSInputInterface()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FIOSInputInterface()"
  },
  {
    "label": "SendControllerEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SendControllerEvents()"
  },
  {
    "label": "SetForceFeedbackChannelValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value)"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues &values)"
  },
  {
    "label": "QueueTouchInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueTouchInput(const TArray<TouchInput>& InTouchEvents)"
  },
  {
    "label": "QueueKeyInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueKeyInput(int32 Key, int32 Char)"
  },
  {
    "label": "SetGamepadsAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGamepadsAllowed(bool bAllowed)"
  },
  {
    "label": "SetGamepadsBlockDeviceFeedback()",
    "kind": "Method",
    "detail": "Function (bAllowControllers = bAllowed ; } void)",
    "insertText": "SetGamepadsBlockDeviceFeedback(bool bBlock)"
  },
  {
    "label": "EnableMotionData()",
    "kind": "Method",
    "detail": "Function (bControllersBlockDeviceFeedback = bBlock ; } void)",
    "insertText": "EnableMotionData(bool bEnable)"
  },
  {
    "label": "IsMotionDataEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMotionDataEnabled()"
  },
  {
    "label": "SetKeyboardInhibited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyboardInhibited(bool bInhibited)"
  },
  {
    "label": "IsKeyboardInhibited()",
    "kind": "Method",
    "detail": "Function (bKeyboardInhibited = bInhibited ; } bool)",
    "insertText": "IsKeyboardInhibited()"
  },
  {
    "label": "Exec_Runtime()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "Exec_Runtime(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "FIOSInputInterface()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FIOSInputInterface(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "HandleMouseConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMouseConnection(GCMouse* Mouse)"
  },
  {
    "label": "HandleMouseDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMouseDisconnect(GCMouse* Mouse)"
  },
  {
    "label": "HandleKeyboardConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeyboardConnection(GCKeyboard* Keyboard)"
  },
  {
    "label": "HandleKeyboardDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleKeyboardDisconnect(GCKeyboard* Keyboard)"
  },
  {
    "label": "GetMovementData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMovementData(FVector& Attitude, FVector& RotationRate, FVector& Gravity, FVector& Acceleration)"
  },
  {
    "label": "CalibrateMotion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalibrateMotion(uint32 PlayerIndex)"
  },
  {
    "label": "ProcessTouchesAndKeys()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessTouchesAndKeys(uint32 ControllerId, const TArray<TouchInput>& InTouchInputStack, const TArray<int32>& InKeyInputStack)"
  },
  {
    "label": "ProcessDeferredEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeferredEvents()"
  },
  {
    "label": "ProcessEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEvent(const FDeferredIOSEvent& Event)"
  }
]