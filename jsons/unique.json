[
  {
    "label": "_AlgPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_AlgPolicy"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_BinaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryPredicate"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_UNIQUE_H # define _LIBCPP___ALGORITHM_UNIQUE_H # include<__algorithm / adjacent_find . h> # include<__algorithm / comp . h> # include<__algorithm / iterator_operations . h> # include<__config> # include<__iterator / iterator_traits . h> # include<__utility / move . h> # include<__utility / pair . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _AlgPolicy, class _Iter, class _Sent, class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 std::pair<_Iter, _Iter> __unique(_Iter __first, _Sent __last, _BinaryPredicate&& __pred)"
  },
  {
    "label": "__adjacent_find()",
    "kind": "Method",
    "detail": "Function (__first =)",
    "insertText": "__adjacent_find(__first, __last, __pred)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (_Iter __i = __first ;)",
    "insertText": "for(++__i; ++__i != __last;) if (!__pred(*__first, *__i)) *++__first = _IterOps<_AlgPolicy>::__iter_move(__i)"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (+ + __first ; return std::pair<_Iter,)",
    "insertText": "_Iter(std::move(__first), std::move(__i))"
  },
  {
    "label": "_Iter()",
    "kind": "Method",
    "detail": "Function (} return std::pair<_Iter,)",
    "insertText": "_Iter(__first, __first)"
  },
  {
    "label": "unique()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _BinaryPredicate> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "unique(_ForwardIterator __first, _ForwardIterator __last, _BinaryPredicate __pred)"
  },
  {
    "label": "unique()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX17 _ForwardIterator)",
    "insertText": "unique(_ForwardIterator __first, _ForwardIterator __last)"
  },
  {
    "label": "unique()",
    "kind": "Method",
    "detail": "Function (typedef iterator_traits<_ForwardIterator>::value_type __v ; return)",
    "insertText": "unique(__first, __last, __equal_to<__v>())"
  }
]