[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EigenConvolutionKernel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EigenConvolutionKernel"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "EigenConvolutionKernel()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_CONVOLUTION_SYCL_H # define EIGEN_CXX11_TENSOR_TENSOR_CONVOLUTION_SYCL_H namespace Eigen { enum class convolution_type { CONV1D,CONV2D,CONV3D } ; template<Evaluator,CoeffReturnType,KernelType,Index,InputDims,Kernel_accessor,Buffer_accessor,convolution_type Conv_Dim> struct EigenConvolutionKernel ; template<Evaluator,CoeffReturnType,KernelType,Index,InputDims,Kernel_accessor,Buffer_accessor> struct EigenConvolutionKernel<Evaluator,CoeffReturnType,KernelType,Index,InputDims,Kernel_accessor,Buffer_accessor,convolution_type::CONV1D> { typedef cl::sycl::accessor<CoeffReturnType,1,cl::sycl::access::mode::read_write,cl::sycl::access::target::local> Local_accessor ; Local_accessor local_acc ; Evaluator device_evaluator ; Kernel_accessor kernel_filter ; Buffer_accessor buffer_acc ; internal::IndexMapper<Index,InputDims,1,Evaluator::Layout> indexMapper ; const size_t kernelSize ; const cl::sycl::range<2> input_range ;)",
    "insertText": "EigenConvolutionKernel(Local_accessor local_acc_, Evaluator device_evaluator_, Kernel_accessor kernel_filter_, Buffer_accessor buffer_acc_, internal::IndexMapper<Index, InputDims, 1, Evaluator::Layout> indexMapper_, const size_t kernelSize_, const cl::sycl::range<2> input_range_) : local_acc(local_acc_), device_evaluator(device_evaluator_), kernel_filter(kernel_filter_), buffer_acc(buffer_acc_), indexMapper(indexMapper_), kernelSize(kernelSize_), input_range(input_range_)"
  },
  {
    "label": "boundary_check()",
    "kind": "Method",
    "detail": "Function (} template<BooleanDim2> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "boundary_check(const BooleanDim2 boolean_check)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(cl::sycl::nd_item<2> itemID)"
  },
  {
    "label": "get_pointer()",
    "kind": "Method",
    "detail": "Function (auto buffer_ptr = buffer_acc .)",
    "insertText": "get_pointer()"
  },
  {
    "label": "num_input()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "num_input(itemID.get_local_range()[0] + kernelSize - 1)"
  },
  {
    "label": "get_local_id()",
    "kind": "Method",
    "detail": "Function (const size_t plane_kernel_offset = itemID .)",
    "insertText": "get_local_id(1)"
  },
  {
    "label": "get_group()",
    "kind": "Method",
    "detail": "Function (const size_t input_offset = itemID .)",
    "insertText": "get_group(0) * itemID.get_local_range()"
  },
  {
    "label": "mapGpuInputPlaneToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const size_t plane_tensor_offset = indexMapper .)",
    "insertText": "mapGpuInputPlaneToTensorInputOffset(itemID.get_global_id(1))"
  },
  {
    "label": "mapGpuInputKernelToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const size_t local_index = i + plane_kernel_offset ; const size_t tensor_index = plane_tensor_offset + indexMapper .)",
    "insertText": "mapGpuInputKernelToTensorInputOffset(i + input_offset)"
  },
  {
    "label": "local_index()",
    "kind": "Method",
    "detail": "Function (local_acc [)",
    "insertText": "local_index(((i + input_offset) < (input_range[0] + kernelSize - 1)) && itemID.get_global_id(1) < input_range[1]) ? device_evaluator.coeff(tensor_index) : CoeffReturnType(0)"
  },
  {
    "label": "barrier()",
    "kind": "Method",
    "detail": "Function (} itemID .)",
    "insertText": "barrier(cl::sycl::access::fence_space::local_space)"
  },
  {
    "label": "get_group()",
    "kind": "Method",
    "detail": "Function (const size_t first_output_start = itemID .)",
    "insertText": "get_group(0) * (itemID.get_local_range()[0])"
  },
  {
    "label": "CoeffReturnType()",
    "kind": "Method",
    "detail": "Function (CoeffReturnType result = static_cast<)",
    "insertText": "CoeffReturnType(0)"
  },
  {
    "label": "get_local_id()",
    "kind": "Method",
    "detail": "Function (const size_t index = plane_kernel_offset + itemID .)",
    "insertText": "get_local_id(0)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(local_acc[k + index] * kernel_ptr[k])"
  },
  {
    "label": "mapGpuOutputPlaneToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (} const size_t tensor_index = indexMapper .)",
    "insertText": "mapGpuOutputPlaneToTensorOutputOffset(itemID.get_global_id(1)) + indexMapper.mapGpuOutputKernelToTensorOutputOffset(itemID.get_local_id(0) + first_output_start)"
  },
  {
    "label": "EigenConvolutionKernel()",
    "kind": "Method",
    "detail": "Function (buffer_ptr [ tensor_index ] = result ; } } } ; template<Evaluator,CoeffReturnType,KernelType,Index,InputDims,Kernel_accessor,Buffer_accessor> struct EigenConvolutionKernel<Evaluator,CoeffReturnType,KernelType,Index,InputDims,Kernel_accessor,Buffer_accessor,convolution_type::CONV2D> { typedef cl::sycl::accessor<CoeffReturnType,1,cl::sycl::access::mode::read_write,cl::sycl::access::target::local> Local_accessor ; Local_accessor local_acc ; Evaluator device_evaluator ; Kernel_accessor kernel_filter ; Buffer_accessor buffer_acc ; internal::IndexMapper<Index,InputDims,2,Evaluator::Layout> indexMapper ; const cl::sycl::range<2> kernel_size ; const cl::sycl::range<3> input_range ;)",
    "insertText": "EigenConvolutionKernel(Local_accessor local_acc_, Evaluator device_evaluator_, Kernel_accessor kernel_filter_, Buffer_accessor buffer_acc_, internal::IndexMapper<Index, InputDims, 2, Evaluator::Layout> indexMapper_, const cl::sycl::range<2> kernel_size_, const cl::sycl::range<3> input_range_) : local_acc(local_acc_), device_evaluator(device_evaluator_), kernel_filter(kernel_filter_), buffer_acc(buffer_acc_), indexMapper(indexMapper_), kernel_size(kernel_size_), input_range(input_range_)"
  },
  {
    "label": "boundary_check()",
    "kind": "Method",
    "detail": "Function (} template<BooleanDim3> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool)",
    "insertText": "boundary_check(const BooleanDim3 boolean_check)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(cl::sycl::nd_item<3> itemID)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (const auto num_input = cl::)",
    "insertText": "range(cl::sycl::range<2>(itemID.get_local_range()[0], itemID.get_local_range()[1]) + kernel_size - 1)"
  },
  {
    "label": "mapGpuInputPlaneToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const size_t plane_input_offset = indexMapper .)",
    "insertText": "mapGpuInputPlaneToTensorInputOffset(itemID.get_global_id(2))"
  },
  {
    "label": "get_local_id()",
    "kind": "Method",
    "detail": "Function (const size_t plane_kernel_offset = itemID .)",
    "insertText": "get_local_id(2)"
  },
  {
    "label": "get_group()",
    "kind": "Method",
    "detail": "Function (const auto input_offset = cl::sycl::range<2> { itemID .)",
    "insertText": "get_group(0) * itemID.get_local_range()[0], itemID.get_group(1) * itemID.get_local_range()"
  },
  {
    "label": "get_global_id()",
    "kind": "Method",
    "detail": "Function (bool in_range_dim2 = itemID .)",
    "insertText": "get_global_id(2)"
  },
  {
    "label": "num_input()",
    "kind": "Method",
    "detail": "Function (const size_t local_input_offset =)",
    "insertText": "num_input(j + plane_kernel_offset)"
  },
  {
    "label": "in_range_dim1()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "in_range_dim1((j + input_offset[1]) < (input_range[1] + kernel_size[1] - 1))"
  },
  {
    "label": "mapGpuInputKernelToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const size_t local_index = i + local_input_offset ; const size_t tensor_index = plane_input_offset + indexMapper .)",
    "insertText": "mapGpuInputKernelToTensorInputOffset(i + input_offset[0], j + input_offset[1])"
  },
  {
    "label": "local_index()",
    "kind": "Method",
    "detail": "Function (local_acc [)",
    "insertText": "local_index(((i + input_offset[0]) < (input_range[0] + kernel_size[0] - 1)) && in_range_dim1 && in_range_dim2) ? device_evaluator.coeff(tensor_index) : CoeffReturnType(0)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (size_t kernel_offset = kernel_size [ 0 ]* j ; const size_t)",
    "insertText": "index(num_input[0] * (plane_kernel_offset + j + itemID.get_local_id(1))) + itemID.get_local_id(0)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(local_acc[i + index] * kernel_ptr[i + kernel_offset])"
  },
  {
    "label": "mapGpuOutputPlaneToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (} } const size_t tensor_index = indexMapper .)",
    "insertText": "mapGpuOutputPlaneToTensorOutputOffset(itemID.get_global_id(2)) + indexMapper.mapGpuOutputKernelToTensorOutputOffset(itemID.get_local_id(0) + output_offset[0], itemID.get_local_id(1) + output_offset[1])"
  },
  {
    "label": "EigenConvolutionKernel()",
    "kind": "Method",
    "detail": "Function (buffer_ptr [ tensor_index ] = result ; } } } ; template<Evaluator,CoeffReturnType,KernelType,Index,InputDims,Kernel_accessor,Buffer_accessor> struct EigenConvolutionKernel<Evaluator,CoeffReturnType,KernelType,Index,InputDims,Kernel_accessor,Buffer_accessor,convolution_type::CONV3D> { typedef cl::sycl::accessor<CoeffReturnType,1,cl::sycl::access::mode::read_write,cl::sycl::access::target::local> Local_accessor ; Local_accessor local_acc ; Evaluator device_evaluator ; Kernel_accessor kernel_filter ; Buffer_accessor buffer_acc ; internal::IndexMapper<Index,InputDims,3,Evaluator::Layout> indexMapper ; const cl::sycl::range<3> kernel_size ; const cl::sycl::range<3> input_range ; const size_t numP ;)",
    "insertText": "EigenConvolutionKernel(Local_accessor local_acc_, Evaluator device_evaluator_, Kernel_accessor kernel_filter_, Buffer_accessor buffer_acc_, internal::IndexMapper<Index, InputDims, 3, Evaluator::Layout> indexMapper_, const cl::sycl::range<3> kernel_size_, const cl::sycl::range<3> input_range_, const size_t numP_) : local_acc(local_acc_), device_evaluator(device_evaluator_), kernel_filter(kernel_filter_), buffer_acc(buffer_acc_), indexMapper(indexMapper_), kernel_size(kernel_size_), input_range(input_range_), numP(numP_)"
  },
  {
    "label": "get_local_range()",
    "kind": "Method",
    "detail": "Function (const auto num_input = cl::sycl::range<3> { itemID .)",
    "insertText": "get_local_range()"
  },
  {
    "label": "get_group()",
    "kind": "Method",
    "detail": "Function (const auto input_offset = cl::sycl::range<3> { itemID .)",
    "insertText": "get_group().get_id() * itemID.get_local_range()"
  },
  {
    "label": "get_group()",
    "kind": "Method",
    "detail": "Function (const auto output_offset = cl::sycl::range<3> { itemID .)",
    "insertText": "get_group().get_id() * itemID.get_local_range() + itemID.get_local_id()"
  },
  {
    "label": "mapGpuInputPlaneToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const size_t plane_input_offset = indexMapper .)",
    "insertText": "mapGpuInputPlaneToTensorInputOffset(p)"
  },
  {
    "label": "cond_k_dim()",
    "kind": "Method",
    "detail": "Function (size_t local_index_dim2 = num_input [ 0 ]* num_input [ 1 ]* k ; bool)",
    "insertText": "cond_k_dim(k + input_offset[2] < (input_range[2] + kernel_size[2] - 1))"
  },
  {
    "label": "cond_k_dim()",
    "kind": "Method",
    "detail": "Function (bool cond_j_dim =)",
    "insertText": "cond_k_dim(j + input_offset[1] < (input_range[1] + kernel_size[1] - 1))"
  },
  {
    "label": "local_index_dim1()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "local_index_dim1(num_input[0] * j)"
  },
  {
    "label": "cond_j_dim()",
    "kind": "Method",
    "detail": "Function (bool conds =)",
    "insertText": "cond_j_dim(i + input_offset[0] < (input_range[0] + kernel_size[0] - 1))"
  },
  {
    "label": "mapGpuInputKernelToTensorInputOffset()",
    "kind": "Method",
    "detail": "Function (const size_t local_index = local_index_dim1 + i ; const size_t tensor_index = plane_input_offset + indexMapper .)",
    "insertText": "mapGpuInputKernelToTensorInputOffset(i + input_offset[0], j + input_offset[1], k + input_offset[2])"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (local_acc [ local_index ] = conds ? device_evaluator .)",
    "insertText": "coeff(tensor_index) : CoeffReturnType(0)"
  },
  {
    "label": "kernel_size()",
    "kind": "Method",
    "detail": "Function (const size_t kernel_index = i +)",
    "insertText": "kernel_size(j + kernel_size[1] * k)"
  },
  {
    "label": "local_index()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "local_index((i + itemID.get_local_id(0)) + num_input[0] * ((j + itemID.get_local_id(1)) + num_input[1] * (k + itemID.get_local_id(2))))"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(local_acc[local_index] * kernel_ptr[kernel_index])"
  },
  {
    "label": "mapGpuOutputPlaneToTensorOutputOffset()",
    "kind": "Method",
    "detail": "Function (} } } const size_t tensor_index = indexMapper .)",
    "insertText": "mapGpuOutputPlaneToTensorOutputOffset(p) + indexMapper.mapGpuOutputKernelToTensorOutputOffset(output_offset[0], output_offset[1], output_offset[2])"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} } } ; template<Indices,InputArgType,KernelArgType> struct TensorEvaluator<const TensorConvolutionOp<Indices,InputArgType,KernelArgType>,Eigen::SyclDevice> { typedef TensorConvolutionOp<Indices,InputArgType,KernelArgType> XprType ; const int NumDims = internal::array_size<TensorEvaluator<InputArgType,Eigen::SyclDevice>::Dimensions>::value ; const int NumKernelDims = internal::array_size<Indices>::value ; typedef XprType::Index Index ; typedef DSizes<Index,NumDims> Dimensions ; typedef TensorEvaluator<KernelArgType,Eigen::SyclDevice>::Dimensions KernelDimensions ; typedef const Eigen::SyclDevice Device ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef PacketType<CoeffReturnType,Eigen::SyclDevice>::type PacketReturnType ; typedef InputArgType::Scalar Scalar ; const int PacketSize = PacketType<CoeffReturnType,Device>::size ; typedef StorageMemory<CoeffReturnType,Eigen::SyclDevice> Storage ; typedef Storage::Type EvaluatorPointerType ; typedef StorageMemory<const CoeffReturnType,Eigen::SyclDevice> KernelStorage ; enum { IsAligned = TensorEvaluator<InputArgType,Eigen::SyclDevice>::IsAligned& TensorEvaluator<KernelArgType,Eigen::SyclDevice>::IsAligned,PacketAccess = false,BlockAccess = false,PreferBlockAccess = false,Layout = TensorEvaluator<InputArgType,Eigen::SyclDevice>::Layout,CoordAccess = false,RawAccess = false } ; typedef internal::TensorBlockNotImplemented TensorBlock ;)",
    "insertText": "TensorEvaluator(const XprType &op, const Eigen::SyclDevice &device) : m_inputImpl(op.inputExpression(), device), m_kernelArg(op.kernelExpression()), m_kernelImpl(op.kernelExpression(), device), m_indices(op.indices()), m_buf(NULL), m_kernel(NULL), m_local_kernel(false), m_device(device)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((static_cast<int>(TensorEvaluator<InputArgType, Eigen::SyclDevice>::Layout) == static_cast<int>(TensorEvaluator<KernelArgType, Eigen::SyclDevice>::Layout)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const TensorEvaluator<InputArgType,Eigen::SyclDevice>::Dimensions& input_dims = m_inputImpl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (const Index index = op .)",
    "insertText": "indices()"
  },
  {
    "label": "preloadKernel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "preloadKernel()"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_inputImpl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "executeEval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "executeEval(data)"
  },
  {
    "label": "executeEval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "executeEval(m_buf)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_inputImpl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "deallocate_temp()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate_temp(m_buf)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_buf = NULL ; })",
    "insertText": "if(m_local_kernel)"
  },
  {
    "label": "deallocate_temp()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "deallocate_temp(m_kernel)"
  },
  {
    "label": "device()",
    "kind": "Method",
    "detail": "Function (m_local_kernel = false ; } m_kernel = NULL ; } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Device&)",
    "insertText": "device()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (KernelStorage::Type in_place = m_kernelImpl .)",
    "insertText": "data()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (m_kernel = in_place ; m_local_kernel = false ; } else { ptrdiff_t kernel_sz = m_kernelImpl .)",
    "insertText": "dimensions().TotalSize() * sizeof(Scalar)"
  },
  {
    "label": "local()",
    "kind": "Method",
    "detail": "Function (EvaluatorPointerType)",
    "insertText": "local(EvaluatorPointerType)m_device.get((Scalar *)m_device.allocate_temp(kernel_sz))"
  },
  {
    "label": "evalToTmp()",
    "kind": "Method",
    "detail": "Function (typedef TensorEvalToOp<const KernelArgType> EvalTo ; EvalTo)",
    "insertText": "evalToTmp(m_device.get(local), m_kernelArg)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (const bool PacketAccess = internal::IsVectorizable<Eigen::SyclDevice,KernelArgType>::value ; internal::TensorExecutor<const EvalTo,Eigen::SyclDevice,PacketAccess)",
    "insertText": "run(evalToTmp, m_device)"
  },
  {
    "label": "executeEval()",
    "kind": "Method",
    "detail": "Function (m_kernel = local ; m_local_kernel = true ; } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "executeEval(EvaluatorPointerType data)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (typedef TensorEvaluator<InputArgType,Eigen::SyclDevice> InputEvaluator ; typedef InputEvaluator::Dimensions InputDims ;)",
    "insertText": "switch(NumKernelDims)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const size_t numP =)",
    "insertText": "dimensions().TotalSize()"
  },
  {
    "label": "parallel_for_setup()",
    "kind": "Method",
    "detail": "Function (m_device .)",
    "insertText": "parallel_for_setup(input_dim, global_range, local_range)"
  },
  {
    "label": "local_memory_size()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "local_memory_size(local_range[0] + kernel_size - 1) * (local_range[1])"
  },
  {
    "label": "gpu_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "gpu_assert(static_cast<unsigned long>(local_memory_size) <= m_device.sharedMemPerBlock())"
  },
  {
    "label": "indexMapper()",
    "kind": "Method",
    "detail": "Function (internal::IndexMapper<Index,InputDims,1,Layout>)",
    "insertText": "indexMapper(m_inputImpl.dimensions(), kernel_dims, indices)"
  },
  {
    "label": "ConvKernel()",
    "kind": "Method",
    "detail": "Function (typedef EigenConvolutionKernel<InputEvaluator,CoeffReturnType,Scalar,Index,InputDims,KernelStorage::Type,EvaluatorPointerType,convolution_type::CONV1D> ConvKernel ; m_device . template binary_kernel_launcher<CoeffReturnType,)",
    "insertText": "ConvKernel(m_inputImpl, m_kernel, data, cl::sycl::nd_range<2>(global_range, local_range), local_memory_size, indexMapper, kernel_size, cl::sycl::range<2>(input_dim[0], input_dim[1]))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (break ; } case 2 : { auto kernel_index = std::array<size_t,2> { static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor) ? 0 : 1, static_cast<int>(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (auto kernel_size = cl::)",
    "insertText": "range(size_t)m_kernelImpl.dimensions()[kernel_index[0]], (size_t)m_kernelImpl.dimensions()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const size_t numP =)",
    "insertText": "dimensions().TotalSize() / (numX * numY)"
  },
  {
    "label": "local_memory_size()",
    "kind": "Method",
    "detail": "Function (const size_t)",
    "insertText": "local_memory_size(local_range[0] + kernel_size[0] - 1) * (local_range[1] + kernel_size[1] - 1)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const array<Index,2> indices { { m_indices [ kernel_index [ 0 ] ],m_indices [ kernel_index [ 1 ] ] } } ; const array<Index,2> kernel_dims { { m_kernelImpl .)",
    "insertText": "dimensions()[kernel_index[0]], m_kernelImpl.dimensions()"
  },
  {
    "label": "ConvKernel()",
    "kind": "Method",
    "detail": "Function (typedef EigenConvolutionKernel<InputEvaluator,CoeffReturnType,Scalar,Index,InputDims,KernelStorage::Type,EvaluatorPointerType,convolution_type::CONV2D> ConvKernel ; m_device . template binary_kernel_launcher<CoeffReturnType,)",
    "insertText": "ConvKernel(m_inputImpl, m_kernel, data, cl::sycl::nd_range<3>(global_range, local_range), local_memory_size, indexMapper, kernel_size, cl::sycl::range<3>{input_dim[0], input_dim[1], input_dim[2]})"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (break ; } case 3 : { auto kernel_index = std::array<size_t,3> { static_cast<)",
    "insertText": "int(Layout) == static_cast<int>(ColMajor) ? 0 : 2, static_cast<int>(Layout) == static_cast<int>(ColMajor) ? 1 : 1, static_cast<int>(Layout) == static_cast<int>(ColMajor)"
  },
  {
    "label": "range()",
    "kind": "Method",
    "detail": "Function (auto kernel_size = cl::)",
    "insertText": "range(size_t)m_kernelImpl.dimensions()[kernel_index[0]], (size_t)m_kernelImpl.dimensions()[kernel_index[1]], (size_t)m_kernelImpl.dimensions()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (auto input_dim = std::array<size_t,3> { numX,numY,numZ } ; const size_t numP =)",
    "insertText": "dimensions().TotalSize() / (numX * numY * numZ)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const array<Index,3> indices { { m_indices [ kernel_index [ 0 ] ],m_indices [ kernel_index [ 1 ] ],m_indices [ kernel_index [ 2 ] ] } } ; const array<Index,3> kernel_dims { { m_kernelImpl .)",
    "insertText": "dimensions()[kernel_index[0]], m_kernelImpl.dimensions()[kernel_index[1]], m_kernelImpl.dimensions()"
  },
  {
    "label": "local_memory_range()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "local_memory_range(local_range + kernel_size - 1)"
  },
  {
    "label": "ConvKernel()",
    "kind": "Method",
    "detail": "Function (typedef EigenConvolutionKernel<InputEvaluator,CoeffReturnType,Scalar,Index,InputDims,KernelStorage::Type,EvaluatorPointerType,convolution_type::CONV3D> ConvKernel ; m_device . template binary_kernel_launcher<CoeffReturnType,)",
    "insertText": "ConvKernel(m_inputImpl, m_kernel, data, cl::sycl::nd_range<3>(global_range, local_range), local_memory_size, indexMapper, kernel_size, cl::sycl::range<3>(input_dim[0], input_dim[1], input_dim[2]), numP)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (break ; } default : {)",
    "insertText": "EIGEN_STATIC_ASSERT((NumKernelDims >= 1 && NumKernelDims <= 3), THIS_METHOD_IS_ONLY_FOR_OBJECTS_OF_A_SPECIFIC_SIZE)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} } } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_buf != NULL)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index < m_dimensions.TotalSize())"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (const double convolve_compute_cost = TensorOpCost::AddCost<)",
    "insertText": "Scalar() + TensorOpCost::MulCost<Scalar>()"
  },
  {
    "label": "NumDims()",
    "kind": "Method",
    "detail": "Function (const double firstIndex_compute_cost =)",
    "insertText": "NumDims(2 * TensorOpCost::AddCost<Index>() + 2 * TensorOpCost::MulCost<Index>() + TensorOpCost::DivCost<Index>())"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "bind(cl::sycl::handler &cgh)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_kernelImpl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : TensorEvaluator&)",
    "insertText": "operator(const TensorEvaluator &)"
  }
]