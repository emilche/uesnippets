[
  {
    "label": "FSeparatorSize",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSeparatorSize"
  },
  {
    "label": "FSeparatorSizes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSeparatorSizes"
  },
  {
    "label": "FSeparatorBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSeparatorBuilder"
  },
  {
    "label": "FSeparatorTemplates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSeparatorTemplates"
  },
  {
    "label": "FSeparatorSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ToolElementRegistry . h \" # include \" Styling / SlateTypes . h \" # include \" Styles / SlateBrushTemplates . h \" # include \" Styling / StyleColors . h \" # include \" Widgets / Layout / SSeparator . h \" class FSeparatorSize { float Magnitude ;)",
    "insertText": "FSeparatorSize(float InMagnitude): Magnitude(InMagnitude)"
  },
  {
    "label": "ToFloat()",
    "kind": "Method",
    "detail": "Function (} public : float)",
    "insertText": "ToFloat()"
  },
  {
    "label": "ToSSeparatorSharedRef()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SSeparator>)",
    "insertText": "ToSSeparatorSharedRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SSeparator>)",
    "insertText": "operator()"
  },
  {
    "label": "InitializeSize()",
    "kind": "Method",
    "detail": "Function (FSeparatorBuilder&)",
    "insertText": "InitializeSize(const FSeparatorSize& NewSize)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (FSeparatorBuilder&)",
    "insertText": "SetColor(const EStyleColor& NewColor)"
  },
  {
    "label": "BindVisibility()",
    "kind": "Method",
    "detail": "Function (FSeparatorBuilder&)",
    "insertText": "BindVisibility(TAttribute<EVisibility> NewVisibility)"
  },
  {
    "label": "FSeparatorBuilder()",
    "kind": "Method",
    "detail": "Function (Visibility = NewVisibility ; return* this ; } private : struct FSeparatorTemplates ;)",
    "insertText": "FSeparatorBuilder(EStyleColor InColor = EStyleColor::Background, EOrientation InOrientation = Orient_Horizontal, FSeparatorSize InSize = FSeparatorSizes::Small, const FSlateBrush* InImage = FSlateBrushTemplates::ThinLineHorizontal())"
  },
  {
    "label": "ThinLineHorizontal()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush* Image =)",
    "insertText": "ThinLineHorizontal()"
  }
]