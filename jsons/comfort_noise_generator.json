[
  {
    "label": "ComfortNoiseGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComfortNoiseGenerator"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_COMFORT_NOISE_GENERATOR_H_ # define MODULES_AUDIO_PROCESSING_AEC3_COMFORT_NOISE_GENERATOR_H_ # include<stdint . h> # include<array> # include<memory> # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / aec_state . h \" # include \" modules / audio_processing / aec3 / fft_data . h \" # include \" rtc_base / system / arch . h \" namespace webrtc { namespace aec3 { # if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY) void EstimateComfortNoise_SSE2(const std::array<float, kFftLengthBy2Plus1>& N2, uint32_t* seed, FftData* lower_band_noise, FftData* upper_band_noise)"
  },
  {
    "label": "EstimateComfortNoise()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "EstimateComfortNoise(const std::array<float, kFftLengthBy2Plus1>& N2, uint32_t* seed, FftData* lower_band_noise, FftData* upper_band_noise)"
  },
  {
    "label": "ComfortNoiseGenerator()",
    "kind": "Method",
    "detail": "Function (} class ComfortNoiseGenerator { public :)",
    "insertText": "ComfortNoiseGenerator(const EchoCanceller3Config& config, Aec3Optimization optimization, size_t num_capture_channels)"
  },
  {
    "label": "ComfortNoiseGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComfortNoiseGenerator()"
  },
  {
    "label": "ComfortNoiseGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComfortNoiseGenerator(const ComfortNoiseGenerator&)"
  },
  {
    "label": "Compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compute(bool saturated_capture, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> capture_spectrum, rtc::ArrayView<FftData> lower_band_noise, rtc::ArrayView<FftData> upper_band_noise)"
  },
  {
    "label": "NoiseSpectrum()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const std::array<float,kFftLengthBy2Plus1>>)",
    "insertText": "NoiseSpectrum()"
  }
]