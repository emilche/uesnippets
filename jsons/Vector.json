[
  {
    "label": "Vector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vector"
  },
  {
    "label": "VectorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorIterator"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "VectorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VectorView"
  },
  {
    "label": "VectorIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_VECTOR_H_ # define BASE_WIN_VECTOR_H_ # include<ivectorchangedeventargs . h> # include<windows . foundation . collections . h> # include<wrl / implements . h> # include<algorithm> # include<iterator> # include<utility> # include<vector> # include \" base / base_export . h \" # include \" base / check_op . h \" # include \" base / containers / flat_map . h \" # include \" base / ranges / algorithm . h \" # include \" base / win / winrt_foundation_helpers . h \" namespace base { namespace win { template<T> class Vector ; namespace internal { template<T> using VectorComplex = ABI::Windows::Foundation::Collections::IVector<T>::T_complex ; template<T> using VectorLogical = LogicalType<VectorComplex<T>> ; template<T> using VectorAbi = AbiType<VectorComplex<T>> ; template<T> using VectorStorage = StorageType<VectorComplex<T>> ; template<T> class VectorIterator : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRtClassicComMix | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IIterator<VectorLogical<T>>> { public : using LogicalT = VectorLogical<T> ; using AbiT = VectorAbi<T> ;)",
    "insertText": "VectorIterator(Microsoft::WRL::ComPtr< ABI::Windows::Foundation::Collections::IVectorView<LogicalT>> view) : view_(std::move(view))"
  },
  {
    "label": "get_Current()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_Current(AbiT* current)"
  },
  {
    "label": "get_HasCurrent()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_HasCurrent(boolean* has_current)"
  },
  {
    "label": "get_Size()",
    "kind": "Method",
    "detail": "Function (* has_current = FALSE ; unsigned size ; HRESULT hr = view_ ->)",
    "insertText": "get_Size(&size)"
  },
  {
    "label": "MoveNext()",
    "kind": "Method",
    "detail": "Function (* has_current = TRUE ; } } return hr ; } IFACEMETHODIMP)",
    "insertText": "MoveNext(boolean* has_current)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (current_index_ + + ;)",
    "insertText": "if(current_index_ < size)"
  },
  {
    "label": "VectorChangedEventArgs()",
    "kind": "Method",
    "detail": "Function (} private : Microsoft::WRL::ComPtr<ABI::Windows::Foundation::Collections::IVectorView<LogicalT>> view_ ; unsigned current_index_ = 0 ; } ; class BASE_EXPORT VectorChangedEventArgs : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRtClassicComMix | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IVectorChangedEventArgs> { public :)",
    "insertText": "VectorChangedEventArgs(ABI::Windows::Foundation::Collections::CollectionChange change, unsigned int index) : change_(change), index_(index)"
  },
  {
    "label": "VectorChangedEventArgs()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "VectorChangedEventArgs()"
  },
  {
    "label": "VectorView()",
    "kind": "Method",
    "detail": "Function (private : const ABI::Windows::Foundation::Collections::CollectionChange change_ ; const unsigned int index_ ; } ; template<T> class VectorView : public Microsoft::WRL::RuntimeClass<Microsoft::WRL::RuntimeClassFlags<Microsoft::WRL::WinRtClassicComMix | Microsoft::WRL::InhibitRoOriginateError>,ABI::Windows::Foundation::Collections::IVectorView<VectorLogical<T>>,ABI::Windows::Foundation::Collections::VectorChangedEventHandler<VectorLogical<T>>> { public : using LogicalT = VectorLogical<T> ; using AbiT = VectorAbi<T> ;)",
    "insertText": "VectorView(Microsoft::WRL::ComPtr<Vector<LogicalT>> vector) : vector_(std::move(vector))"
  },
  {
    "label": "add_VectorChanged()",
    "kind": "Method",
    "detail": "Function (vector_ ->)",
    "insertText": "add_VectorChanged(this, &vector_changed_token_)"
  },
  {
    "label": "VectorView()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "VectorView()"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "GetAt(unsigned index, AbiT* item)"
  },
  {
    "label": "get_Size()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "get_Size(unsigned* size)"
  },
  {
    "label": "IndexOf()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "IndexOf(AbiT value, unsigned* index, boolean* found)"
  },
  {
    "label": "GetMany()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "GetMany(unsigned start_index, unsigned capacity, AbiT* value, unsigned* actual)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "Invoke(ABI::Windows::Foundation::Collections::IObservableVector<LogicalT>* sender, ABI::Windows::Foundation::Collections::IVectorChangedEventArgs* e)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(vector_.Get(), sender)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "Reset()"
  },
  {
    "label": "remove_VectorChanged()",
    "kind": "Method",
    "detail": "Function (sender ->)",
    "insertText": "remove_VectorChanged(vector_changed_token_)"
  },
  {
    "label": "Vector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Vector(const std::vector<StorageT>& vector) : vector_(vector)"
  },
  {
    "label": "Vector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Vector(std::vector<StorageT>&& vector) : vector_(std::move(vector))"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (* size = vector_ .)",
    "insertText": "size()"
  },
  {
    "label": "find_if()",
    "kind": "Method",
    "detail": "Function (auto iter = base::)",
    "insertText": "find_if(vector_, [&value](const StorageT& elem) { return internal::IsEqual(elem, value); })"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (* index = iter ! = vector_ .)",
    "insertText": "end() ? std::distance(vector_.begin(), iter)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (* found = iter ! = vector_ .)",
    "insertText": "end()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (vector_ [ index ] =)",
    "insertText": "move(item)"
  },
  {
    "label": "NotifyVectorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyVectorChanged(ABI::Windows::Foundation::Collections::CollectionChange_ItemChanged, index)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "insert(std::next(vector_.begin(), index), std::move(item))"
  },
  {
    "label": "NotifyVectorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyVectorChanged(ABI::Windows::Foundation::Collections::CollectionChange_ItemInserted, index)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "erase(std::next(vector_.begin(), index))"
  },
  {
    "label": "NotifyVectorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyVectorChanged(ABI::Windows::Foundation::Collections::CollectionChange_ItemRemoved, index)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "push_back(std::move(item))"
  },
  {
    "label": "NotifyVectorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyVectorChanged(ABI::Windows::Foundation::Collections::CollectionChange_ItemInserted, vector_.size() - 1)"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "pop_back()"
  },
  {
    "label": "NotifyVectorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyVectorChanged(ABI::Windows::Foundation::Collections::CollectionChange_ItemRemoved, vector_.size())"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "clear()"
  },
  {
    "label": "NotifyVectorChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyVectorChanged(ABI::Windows::Foundation::Collections::CollectionChange_Reset, 0)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (* actual = std::min<)",
    "insertText": "unsigned(vector_.size() - start_index, capacity)"
  },
  {
    "label": "ReplaceAll()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "ReplaceAll(unsigned count, AbiT* value)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (vector_ .)",
    "insertText": "assign(value, std::next(value, count))"
  },
  {
    "label": "emplace_hint()",
    "kind": "Method",
    "detail": "Function (token -> value = handler_id_ + + ; handlers_ .)",
    "insertText": "emplace_hint(handlers_.end(), token->value, handler)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (handlers_ .)",
    "insertText": "erase(token.value)"
  },
  {
    "label": "VectorChangedEventArgs()",
    "kind": "Method",
    "detail": "Function (auto args = Microsoft::WRL::Make<)",
    "insertText": "VectorChangedEventArgs(change, index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (auto handlers = handlers_ ;)",
    "insertText": "for(auto& handler : handlers) handler.second->Invoke(this, args.Get())"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} IFACEMETHODIMP)",
    "insertText": "First(ABI::Windows::Foundation::Collections::IIterator<LogicalT>** first)"
  },
  {
    "label": "GetView()",
    "kind": "Method",
    "detail": "Function (Microsoft::WRL::ComPtr<ABI::Windows::Foundation::Collections::IVectorView<LogicalT>> view ; HRESULT hr =)",
    "insertText": "GetView(&view)"
  },
  {
    "label": "vector_for_testing()",
    "kind": "Method",
    "detail": "Function (} else { return hr ; } } const std::vector<AbiT>&)",
    "insertText": "vector_for_testing()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(handlers_.empty())"
  }
]