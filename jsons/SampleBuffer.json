[
  {
    "label": "SampleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SampleType"
  },
  {
    "label": "TSampleBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSampleBuffer"
  },
  {
    "label": "OtherSampleType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherSampleType"
  },
  {
    "label": "TSampleBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / BufferVectorOperations . h \" # include \" DSP / FloatArrayMath . h \" namespace Audio { typedef int16 DefaultUSoundWaveSampleType ; template<class SampleType = DefaultUSoundWaveSampleType> class TSampleBuffer { private : TArray<SampleType> RawPCMData ; int32 NumSamples ; int32 NumFrames ; int32 NumChannels ; int32 SampleRate ; float SampleDuration ; public : template<class> class TSampleBuffer ;)",
    "insertText": "TSampleBuffer() : NumSamples(0) , NumFrames(0) , NumChannels(0) , SampleRate(0) , SampleDuration(0.0f)"
  },
  {
    "label": "TSampleBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSampleBuffer(const TSampleBuffer& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NumSamples = Other . NumSamples ; NumFrames = Other . NumFrames ; NumChannels = Other . NumChannels ; SampleRate = Other . SampleRate ; SampleDuration = Other . SampleDuration ; RawPCMData .)",
    "insertText": "Reset(NumSamples)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (RawPCMData .)",
    "insertText": "AddUninitialized(NumSamples)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(RawPCMData.GetData(), Other.RawPCMData.GetData(), NumSamples * sizeof(SampleType))"
  },
  {
    "label": "TSampleBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSampleBuffer(const FAlignedFloatBuffer& InData, int32 InNumChannels, int32 InSampleRate)"
  },
  {
    "label": "TSampleBuffer()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "TSampleBuffer(InData.GetData(), InData.Num(), InNumChannels, InSampleRate)"
  },
  {
    "label": "TSampleBuffer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSampleBuffer(const float* InBufferPtr, int32 InNumSamples, int32 InNumChannels, int32 InSampleRate)"
  },
  {
    "label": "SampleDuration()",
    "kind": "Method",
    "detail": "Function (NumSamples = InNumSamples ; NumFrames = NumSamples / InNumChannels ; NumChannels = InNumChannels ; SampleRate = InSampleRate ;)",
    "insertText": "SampleDuration((float)NumFrames)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(RawPCMData.GetData(), InBufferPtr, NumSamples * sizeof(float))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<SampleType, int16>)"
  },
  {
    "label": "SampleIndex()",
    "kind": "Method",
    "detail": "Function (RawPCMData [)",
    "insertText": "SampleIndex(int16)(FMath::Clamp(InBufferPtr[SampleIndex], -1.0f, 1.0f) * 32767.0f)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(int32 SampleIndex = 0; SampleIndex < NumSamples; SampleIndex++)"
  },
  {
    "label": "SampleIndex()",
    "kind": "Method",
    "detail": "Function (RawPCMData [)",
    "insertText": "SampleIndex(SampleType)(InBufferPtr[SampleIndex])"
  },
  {
    "label": "TSampleBuffer()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "TSampleBuffer(const int16* InBufferPtr, int32 InNumSamples, int32 InNumChannels, int32 InSampleRate)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(RawPCMData.GetData(), InBufferPtr, NumSamples * sizeof(int16))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<SampleType, float>)"
  },
  {
    "label": "ArrayPcm16ToFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayPcm16ToFloat(MakeArrayView(InBufferPtr, NumSamples), RawPCMData)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } TSampleBuffer&)",
    "insertText": "operator(const TSampleBuffer& Other)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<SampleType, int16> && std::is_same_v<OtherSampleType, float>)"
  },
  {
    "label": "ArrayFloatToPcm16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFloatToPcm16(MakeArrayView(Other.RawPCMData), MakeArrayView(RawPCMData))"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<SampleType, float> && std::is_same_v<OtherSampleType, int16>)"
  },
  {
    "label": "ArrayPcm16ToFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayPcm16ToFloat(MakeArrayView(Other.RawPCMData), MakeArrayView(RawPCMData))"
  },
  {
    "label": "SampleIndex()",
    "kind": "Method",
    "detail": "Function (RawPCMData [)",
    "insertText": "SampleIndex(SampleType)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } void)",
    "insertText": "CopyFrom(const TArray<SampleType>& InArray, int32 InNumChannels, int32 InSampleRate)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (NumSamples = InArray .)",
    "insertText": "Num()"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (RawPCMData .)",
    "insertText": "AddZeroed(NumSamples)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(RawPCMData.GetData(), InArray.GetData(), NumSamples * sizeof(SampleType))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} template<class OtherSampleType> void)",
    "insertText": "Append(const OtherSampleType* InputBuffer, int32 InNumSamples)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = RawPCMData .)",
    "insertText": "AddUninitialized(InNumSamples)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&RawPCMData[StartIndex], InputBuffer, InNumSamples * sizeof(SampleType))"
  },
  {
    "label": "ArrayFloatToPcm16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayFloatToPcm16(MakeArrayView(InputBuffer, InNumSamples), MakeArrayView(&RawPCMData[StartIndex], InNumSamples))"
  },
  {
    "label": "ArrayPcm16ToFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayPcm16ToFloat(MakeArrayView(InputBuffer, InNumSamples), MakeArrayView(&RawPCMData[StartIndex], InNumSamples))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32 SampleIndex = 0; SampleIndex < InNumSamples; SampleIndex++)"
  },
  {
    "label": "SampleDuration()",
    "kind": "Method",
    "detail": "Function (RawPCMData [ StartIndex + SampleIndex ] = InputBuffer [ SampleIndex ] ; } } } NumSamples + = InNumSamples ; NumFrames = NumSamples / NumChannels ;)",
    "insertText": "SampleDuration(float)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} template<class OtherSampleType> void)",
    "insertText": "Append(const OtherSampleType* InputBuffer, int32 InNumSamples, int32 InNumChannels, int32 InSampleRate)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (NumChannels = InNumChannels ; SampleRate = InSampleRate ;)",
    "insertText": "Append(InputBuffer, InNumSamples)"
  },
  {
    "label": "TSampleBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TSampleBuffer()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (NumSamples = 0 ; NumFrames = 0 ; NumChannels = 0 ; SampleRate = 0 . 0 f ; SampleDuration = 0 . 0 f ; } const SampleType*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetArrayView()",
    "kind": "Method",
    "detail": "Function (} TArrayView<SampleType>)",
    "insertText": "GetArrayView()"
  },
  {
    "label": "GetNumSamples()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumSamples()"
  },
  {
    "label": "Memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memset(TempBuffer.Get(), 0, InNumChannels * NumFrames * sizeof(SampleType))"
  },
  {
    "label": "InNumChannels()",
    "kind": "Method",
    "detail": "Function (const int32 DstSampleIndex = FrameIndex*)",
    "insertText": "InNumChannels(ChannelIndex % InNumChannels)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(RawPCMData.GetData(), TempBuffer.Get(), NumSamples * sizeof(SampleType))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clamp(float Ceiling = 1.0f)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (float ClampMin = Ceiling* - 1 . 0 f ;)",
    "insertText": "for(int32 SampleIndex = 0; SampleIndex < RawPCMData.Num(); SampleIndex++)"
  },
  {
    "label": "SampleType()",
    "kind": "Method",
    "detail": "Function (RawPCMData [ SampleIndex ] = static_cast<)",
    "insertText": "SampleType(FMath::Clamp<float>(RawPCMData[SampleIndex], ClampMin, Ceiling))"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Ceiling =)",
    "insertText": "Clamp(Ceiling, 0.0f, 1.0f)"
  },
  {
    "label": "int16()",
    "kind": "Method",
    "detail": "Function (int16 ClampMax = static_cast<)",
    "insertText": "int16(Ceiling * 32767.0f)"
  },
  {
    "label": "int16()",
    "kind": "Method",
    "detail": "Function (int16 ClampMin = static_cast<)",
    "insertText": "int16(Ceiling * -32767.0f)"
  },
  {
    "label": "int16()",
    "kind": "Method",
    "detail": "Function (RawPCMData [ SampleIndex ] = FMath::Clamp<)",
    "insertText": "int16(RawPCMData[SampleIndex], ClampMin, ClampMax)"
  },
  {
    "label": "SampleType()",
    "kind": "Method",
    "detail": "Function (RawPCMData [ SampleIndex ] = static_cast<)",
    "insertText": "SampleType(FMath::Clamp<SampleType>(RawPCMData[SampleIndex], ClampMin, Ceiling))"
  },
  {
    "label": "ZeroPad()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ZeroPad(int32 NumFramesToAppend = 0)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (NumFramesToAppend =)",
    "insertText": "RoundUpToPowerOfTwo(NumFrames)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} RawPCMData .)",
    "insertText": "AddZeroed(NumFramesToAppend * NumChannels)"
  },
  {
    "label": "SetNumFrames()",
    "kind": "Method",
    "detail": "Function (NumFrames + = NumFramesToAppend ; NumSamples = NumFrames* NumChannels ; } void)",
    "insertText": "SetNumFrames(int32 InNumFrames)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (RawPCMData .)",
    "insertText": "SetNum(InNumFrames * NumChannels)"
  },
  {
    "label": "GetAudioFrameAtFractionalIndex()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetAudioFrameAtFractionalIndex(float InIndex, TArray<SampleType>& OutFrame)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (InIndex =)",
    "insertText": "Fmod(InIndex, static_cast<float>(NumFrames))"
  },
  {
    "label": "GetAudioFrameAtFractionalIndexInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAudioFrameAtFractionalIndexInternal(InIndex, OutFrame)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (InPhase =)",
    "insertText": "Fmod(InPhase, 1.0f)"
  },
  {
    "label": "GetAudioFrameAtFractionalIndexInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAudioFrameAtFractionalIndexInternal(InPhase * NumFrames, OutFrame)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (InTimeSec - = SampleDuration ; })",
    "insertText": "check(InTimeSec >= 0.0f && InTimeSec <= SampleDuration)"
  },
  {
    "label": "GetAudioFrameAtFractionalIndexInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAudioFrameAtFractionalIndexInternal(NumSamples * (InTimeSec / SampleDuration), OutFrame)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (const float Alpha =)",
    "insertText": "Fmod(InIndex, 1.0f)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (const int32 WholeThisIndex =)",
    "insertText": "FloorToInt(InIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 WholeNextIndex = WholeThisIndex + 1 ;)",
    "insertText": "if(WholeNextIndex == NumFrames)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (WholeNextIndex = 0 ; } OutFrame .)",
    "insertText": "SetNumUninitialized(NumChannels)"
  },
  {
    "label": "RawPCMData()",
    "kind": "Method",
    "detail": "Function (SampleA =)",
    "insertText": "RawPCMData(WholeThisIndex * NumChannels)"
  },
  {
    "label": "RawPCMData()",
    "kind": "Method",
    "detail": "Function (SampleB =)",
    "insertText": "RawPCMData(WholeNextIndex * NumChannels)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (OutFrame [ i ] =)",
    "insertText": "Lerp(SampleA, SampleB, Alpha)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} else { SampleA = static_cast<)",
    "insertText": "float(RawPCMData[(WholeThisIndex * NumChannels) + i])"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (SampleB = static_cast<)",
    "insertText": "float(RawPCMData[(WholeNextIndex * NumChannels) + i])"
  },
  {
    "label": "SampleType()",
    "kind": "Method",
    "detail": "Function (OutFrame [ i ] = static_cast<)",
    "insertText": "SampleType(FMath::Lerp(SampleA, SampleB, Alpha))"
  }
]