[
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "TTopologicalLink()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADEntity . h \" # include \" Math / Point . h \" # include \" Topo / TopologicalEntity . h \" # include \" UI / Message . h \" namespace UE::CADKernel { class FTopologicalEdge ; class FTopologicalVertex ; template<EntityType> class TTopologicalLink : public FTopologicalEntity { FEntity ; protected : EntityType ; EntityType* ActiveEntity ; TArray<EntityType*> TwinEntities ;)",
    "insertText": "TTopologicalLink() : ActiveEntity(nullptr)"
  },
  {
    "label": "TTopologicalLink()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TTopologicalLink(EntityType& Entity) : ActiveEntity(&Entity)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TwinEntities .)",
    "insertText": "Add(&Entity)"
  },
  {
    "label": "TTopologicalLink()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "TTopologicalLink()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef CADKERNEL_DEV)",
    "insertText": "if(Ar.IsSaving())"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdent(Ar, &ActiveEntity, false)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeIdents(Ar, TwinEntities, false)"
  },
  {
    "label": "GetActiveEntity()",
    "kind": "Method",
    "detail": "Function (ActiveEntity = nullptr ; } const EntityType*)",
    "insertText": "GetActiveEntity()"
  },
  {
    "label": "GetTwinEntities()",
    "kind": "Method",
    "detail": "Function (} const TArray<EntityType*>&)",
    "insertText": "GetTwinEntities()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "bool()> CheckEntityIsATwin = [&]()"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (ActiveEntity =& NewActiveEntity ; } void)",
    "insertText": "RemoveEntity(TSharedPtr<EntityType>& Entity)"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (EntityType* EntityPtr =* Entity ;)",
    "insertText": "RemoveEntity(*EntityPtr)"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveEntity(EntityType& Entity)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (TwinEntities .)",
    "insertText": "Remove(&Entity)"
  },
  {
    "label": "HeapTop()",
    "kind": "Method",
    "detail": "Function (ActiveEntity = TwinEntities .)",
    "insertText": "HeapTop()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(TwinEntities.Num() == 0)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function (ActiveEntity = nullptr ;)",
    "insertText": "Delete()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} } # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity& Info)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (# endif EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TwinEntities .)",
    "insertText": "Add(Entity)"
  },
  {
    "label": "AddEntity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEntity(EntityType& Entity)"
  },
  {
    "label": "AddEntity()",
    "kind": "Method",
    "detail": "Function (} template<LinkableType> void)",
    "insertText": "AddEntity(const LinkableType* Entity)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TwinEntities .)",
    "insertText": "Add((EntityType*)Entity)"
  },
  {
    "label": "AddEntities()",
    "kind": "Method",
    "detail": "Function (} template<ArrayType> void)",
    "insertText": "AddEntities(const ArrayType& Entities)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (TwinEntities .)",
    "insertText": "Insert(Entities, TwinEntities.Num())"
  },
  {
    "label": "CleanLink()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CleanLink()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<EntityType*> NewTwinsEntities ; NewTwinsEntities .)",
    "insertText": "Reserve(TwinEntities.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(NewTwinsEntities.Num() != TwinEntities.Num())"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(NewTwinsEntities, TwinEntities)"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (Entity ->)",
    "insertText": "ResetMarkers()"
  }
]