[
  {
    "label": "SameInternalConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameInternalConfig"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "ValueConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueConverter"
  },
  {
    "label": "SameConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameConfiguration"
  },
  {
    "label": "ValueOn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueOn"
  },
  {
    "label": "ValueOff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueOff"
  },
  {
    "label": "ValueAll",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueAll"
  },
  {
    "label": "ChildOn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildOn"
  },
  {
    "label": "ChildOff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildOff"
  },
  {
    "label": "ChildAll",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildAll"
  },
  {
    "label": "templates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "templates"
  },
  {
    "label": "ChildIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildIter"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "DenseIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseIter"
  },
  {
    "label": "ArrayT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArrayT"
  },
  {
    "label": "MyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyArray"
  },
  {
    "label": "ArrayT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArrayT"
  },
  {
    "label": "MyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyArray"
  },
  {
    "label": "IteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorBase"
  },
  {
    "label": "IteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorBase"
  },
  {
    "label": "IteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorBase"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "VoxelizeActiveTiles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VoxelizeActiveTiles"
  },
  {
    "label": "DeepCopy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeepCopy"
  },
  {
    "label": "TopologyCopy1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TopologyCopy1"
  },
  {
    "label": "TopologyCopy2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TopologyCopy2"
  },
  {
    "label": "TopologyUnion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TopologyUnion"
  },
  {
    "label": "TopologyDifference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TopologyDifference"
  },
  {
    "label": "TopologyIntersection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TopologyIntersection"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "SameInternalConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameInternalConfig"
  },
  {
    "label": "SameInternalConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameInternalConfig"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "A"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "A"
  },
  {
    "label": "InternalNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InternalNode"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "B"
  },
  {
    "label": "InternalNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "InternalNode(const ValueType& offValue)"
  },
  {
    "label": "InternalNode()",
    "kind": "Method",
    "detail": "Function (tiles)",
    "insertText": "InternalNode(const Coord& origin, const ValueType& fillValue, bool active = false)"
  },
  {
    "label": "InternalNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "InternalNode(const InternalNode<OtherChildNodeType, Log2Dim>& other)"
  },
  {
    "label": "InternalNode()",
    "kind": "Method",
    "detail": "Function (OtherChildNodeType>)",
    "insertText": "InternalNode(const InternalNode<OtherChildNodeType, Log2Dim>& other,\n                 const ValueType& background, TopologyCopy)"
  },
  {
    "label": "InternalNode()",
    "kind": "Method",
    "detail": "Function (OtherChildNodeType>)",
    "insertText": "InternalNode(const InternalNode<OtherChildNodeType, Log2Dim>& other,\n                 const ValueType& offValue, const ValueType& onValue, TopologyCopy)"
  },
  {
    "label": "cbeginChildOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginChildOn()"
  },
  {
    "label": "cbeginChildOff()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginChildOff()"
  },
  {
    "label": "cbeginChildAll()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginChildAll()"
  },
  {
    "label": "cbeginValueOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginValueOn()"
  },
  {
    "label": "cbeginValueOff()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginValueOff()"
  },
  {
    "label": "cbeginValueAll()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginValueAll()"
  },
  {
    "label": "getNodeLog2Dims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNodeLog2Dims(std::vector<Index>& dims)"
  },
  {
    "label": "coordToOffset()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "coordToOffset(const Coord& xyz)"
  },
  {
    "label": "offsetToLocalCoord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "offsetToLocalCoord(Index n, Coord& xyz)"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setActiveState(const Coord& xyz, bool on)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnly(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOn(const Coord& xyz)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOn(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(const Coord& xyz)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValue(const Coord& xyz, const ModifyOp& op)"
  },
  {
    "label": "modifyValueAndActiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValueAndActiveState(const Coord& xyz, const ModifyOp& op)"
  },
  {
    "label": "setValueAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueAndCache(const Coord& xyz, const ValueType& value, AccessorT&)"
  },
  {
    "label": "setValueOnlyAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnlyAndCache(const Coord& xyz, const ValueType& value, AccessorT&)"
  },
  {
    "label": "modifyValueAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValueAndCache(const Coord& xyz, const ModifyOp& op, AccessorT&)"
  },
  {
    "label": "modifyValueAndActiveStateAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValueAndActiveStateAndCache(const Coord& xyz, const ModifyOp& op, AccessorT&)"
  },
  {
    "label": "setValueOffAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOffAndCache(const Coord& xyz, const ValueType& value, AccessorT&)"
  },
  {
    "label": "setActiveStateAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setActiveStateAndCache(const Coord& xyz, bool on, AccessorT&)"
  },
  {
    "label": "setValuesOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValuesOn()"
  },
  {
    "label": "readTopology()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readTopology(std::istream&, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream&, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream&, const CoordBBox&, bool fromHalf = false)"
  },
  {
    "label": "negate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "negate()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "denseFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "denseFill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "voxelizeActiveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "voxelizeActiveTiles(bool threaded = true)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(InternalNode& other, const ValueType& background, const ValueType& otherBackground)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(const ValueType& tileValue, bool tileActive)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyUnion(const InternalNode<OtherChildNodeType, Log2Dim>& other, const bool preserveTiles = false)"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyIntersection(const InternalNode<OtherChildNodeType, Log2Dim>& other,\n                              const ValueType& background)"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyDifference(const InternalNode<OtherChildNodeType, Log2Dim>& other,\n                            const ValueType& background)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine(InternalNode& other, CombineOp&)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine(const ValueType& value, bool valueIsActive, CombineOp&)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const InternalNode& other0, const OtherNodeType& other1, CombineOp&)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const ValueType& value, const OtherNodeType& other, bool valIsActive, CombineOp&)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const InternalNode& other, const OtherValueType&, bool valIsActive, CombineOp&)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(VisitorOp&)"
  },
  {
    "label": "visit2Node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit2Node(OtherNodeType& other, VisitorOp&)"
  },
  {
    "label": "visit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit2(IterT& otherIter, VisitorOp&, bool otherIsLHS = false)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clip(const CoordBBox&, const ValueType& background)"
  },
  {
    "label": "addLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLeaf(LeafNodeType* leaf)"
  },
  {
    "label": "addLeafAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLeafAndCache(LeafNodeType* leaf, AccessorT&)"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addChild(ChildNodeType* child)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTile(Index level, const Coord& xyz, const ValueType& value, bool state)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTile(Index offset, const ValueType& value, bool state)"
  },
  {
    "label": "addTileAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTileAndCache(Index level, const Coord& xyz, const ValueType&, bool state, AccessorT&)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(value_type nodePtr)"
  },
  {
    "label": "getNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNodes(ArrayT& array)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(value_type nodePtr)"
  },
  {
    "label": "stealNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stealNodes(ArrayT& array, const ValueType& value, bool state)"
  },
  {
    "label": "resetBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetBackground(const ValueType& oldBackground, const ValueType& newBackground)"
  },
  {
    "label": "makeChildNodeEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "makeChildNodeEmpty(Index n, const ValueType& value)"
  },
  {
    "label": "setChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setChildNode(  Index i, ChildNodeType* child)"
  },
  {
    "label": "resetChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resetChildNode(Index i, ChildNodeType* child)"
  },
  {
    "label": "doVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit(NodeT&, VisitorOp&)"
  },
  {
    "label": "doVisit2Node()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit2Node(NodeT&, OtherNodeT&, VisitorOp&)"
  },
  {
    "label": "doVisit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit2(NodeT&, OtherChildAllIterT&, VisitorOp&, bool otherIsLHS)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (VoxelizeActiveTiles)",
    "insertText": "tmp(*this)"
  },
  {
    "label": "oldChildMask()",
    "kind": "Method",
    "detail": "Function (NodeMaskType)",
    "insertText": "oldChildMask(t->mChildMask)"
  },
  {
    "label": "swappedOp()",
    "kind": "Method",
    "detail": "Function (CombineOp>)",
    "insertText": "swappedOp(op)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_UNREACHABLE_CODE_WARNING_BEGIN)",
    "insertText": "for(ChildOnIter iter = this->beginChildOn()"
  }
]