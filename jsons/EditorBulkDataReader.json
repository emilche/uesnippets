[
  {
    "label": "DataAccessWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataAccessWrapper"
  },
  {
    "label": "FEditorBulkDataReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorBulkDataReader"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "DataAccessWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Serialization / BufferReader . h \" # include \" Serialization / EditorBulkData . h \" # if WITH_EDITORONLY_DATA namespace UE::Serialization { namespace Private { class DataAccessWrapper { protected :)",
    "insertText": "DataAccessWrapper(FEditorBulkData& InBulkData) : Payload(InBulkData.GetPayload().Get())"
  },
  {
    "label": "DataAccessWrapper()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DataAccessWrapper()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetData()"
  },
  {
    "label": "GetDataLength()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetDataLength()"
  },
  {
    "label": "FEditorBulkDataReader()",
    "kind": "Method",
    "detail": "Function (} private : FSharedBuffer Payload ; } ; } class FEditorBulkDataReader : protected Private::DataAccessWrapper,public FBufferReaderBase { public :)",
    "insertText": "FEditorBulkDataReader(FEditorBulkData& InBulkData, bool bIsPersistent = false) : DataAccessWrapper(InBulkData) , FBufferReaderBase(GetData(), GetDataLength(), false, bIsPersistent)"
  },
  {
    "label": "FEditorBulkDataReader()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FEditorBulkDataReader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} using FArchive::operator<<; FArchive&)",
    "insertText": "operator(class FName& Name)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FString StringName ;* this<<StringName ; Name =)",
    "insertText": "FName(*StringName)"
  }
]