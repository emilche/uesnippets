[
  {
    "label": "Time",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Time"
  },
  {
    "label": "TimeDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeDelta"
  },
  {
    "label": "ProcStatsFields",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProcStatsFields"
  },
  {
    "label": "GetProcPidDir()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_INTERNAL_LINUX_H_ # define BASE_PROCESS_INTERNAL_LINUX_H_ # include<stddef . h> # include<stdint . h> # include<unistd . h> # include<string> # include<vector> # include \" base / files / dir_reader_posix . h \" # include \" base / files / file_path . h \" # include \" base / process / process_handle . h \" # include \" base / strings / string_number_conversions . h \" # include \" base / threading / platform_thread . h \" namespace base { class Time ; class TimeDelta ; namespace internal { const char kProcDir [ ] ; const char kStatFile [ ] ; base::FilePath)",
    "insertText": "GetProcPidDir(pid_t pid)"
  },
  {
    "label": "ReadProcFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadProcFile(const FilePath& file, std::string* buffer)"
  },
  {
    "label": "ProcDirSlotToPid()",
    "kind": "Method",
    "detail": "Function (pid_t)",
    "insertText": "ProcDirSlotToPid(const char* d_name)"
  },
  {
    "label": "ReadProcStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadProcStats(pid_t pid, std::string* buffer)"
  },
  {
    "label": "ParseProcStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseProcStats(const std::string& stats_data, std::vector<std::string>* proc_stats)"
  },
  {
    "label": "GetProcStatsFieldAsInt64()",
    "kind": "Method",
    "detail": "Function (enum ProcStatsFields { VM_COMM = 1,VM_STATE = 2,VM_PPID = 3,VM_PGRP = 4,VM_MINFLT = 9,VM_MAJFLT = 1 1,VM_UTIME = 1 3,VM_STIME = 1 4,VM_NUMTHREADS = 1 9,VM_STARTTIME = 2 1,VM_VSIZE = 2 2,VM_RSS = 2 3,} ; int64_t)",
    "insertText": "GetProcStatsFieldAsInt64(const std::vector<std::string>& proc_stats, ProcStatsFields field_num)"
  },
  {
    "label": "GetProcStatsFieldAsSizeT()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetProcStatsFieldAsSizeT(const std::vector<std::string>& proc_stats, ProcStatsFields field_num)"
  },
  {
    "label": "ReadStatsFilendGetFieldAsInt64()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ReadStatsFilendGetFieldAsInt64(const FilePath& stat_file, ProcStatsFields field_num)"
  },
  {
    "label": "ReadProcStatsAndGetFieldAsInt64()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ReadProcStatsAndGetFieldAsInt64(pid_t pid, ProcStatsFields field_num)"
  },
  {
    "label": "ReadProcSelfStatsAndGetFieldAsInt64()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "ReadProcSelfStatsAndGetFieldAsInt64(ProcStatsFields field_num)"
  },
  {
    "label": "ReadProcStatsAndGetFieldAsSizeT()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadProcStatsAndGetFieldAsSizeT(pid_t pid, ProcStatsFields field_num)"
  },
  {
    "label": "GetBootTime()",
    "kind": "Method",
    "detail": "Function (Time)",
    "insertText": "GetBootTime()"
  },
  {
    "label": "GetUserCpuTimeSinceBoot()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "GetUserCpuTimeSinceBoot()"
  },
  {
    "label": "ClockTicksToTimeDelta()",
    "kind": "Method",
    "detail": "Function (TimeDelta)",
    "insertText": "ClockTicksToTimeDelta(int64_t clock_ticks)"
  },
  {
    "label": "ForEachProcessTask()",
    "kind": "Method",
    "detail": "Function (template<Lambda> void)",
    "insertText": "ForEachProcessTask(base::ProcessHandle process, Lambda&& lambda)"
  },
  {
    "label": "GetProcPidDir()",
    "kind": "Method",
    "detail": "Function (FilePath fd_path =)",
    "insertText": "GetProcPidDir(process).Append(\"task\")"
  },
  {
    "label": "dir_reader()",
    "kind": "Method",
    "detail": "Function (DirReaderPosix)",
    "insertText": "dir_reader(fd_path.value().c_str())"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (const char* tid_str = dir_reader .)",
    "insertText": "name()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PlatformThreadId tid ;)",
    "insertText": "if(!StringToInt(tid_str, &tid))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (FilePath task_path = fd_path .)",
    "insertText": "Append(tid_str)"
  },
  {
    "label": "lambda()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "lambda(tid, task_path)"
  }
]