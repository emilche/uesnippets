[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDynamicsProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicsProcessor"
  },
  {
    "label": "FKneePoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKneePoint"
  },
  {
    "label": "FDynamicsProcessor()",
    "kind": "Method",
    "detail": "Function (SIGNALPROCESSING_API)",
    "insertText": "FDynamicsProcessor()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const float InSampleRate, const int32 InNumChannels = 2)"
  },
  {
    "label": "SetLookaheadMsec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLookaheadMsec(const float InLookAheadMsec)"
  },
  {
    "label": "SetAttackTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttackTime(const float InAttackTimeMsec)"
  },
  {
    "label": "SetReleaseTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReleaseTime(const float InReleaseTimeMsec)"
  },
  {
    "label": "SetThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreshold(const float InThresholdDb)"
  },
  {
    "label": "SetRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRatio(const float InCompressionRatio)"
  },
  {
    "label": "SetKneeBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKneeBandwidth(const float InKneeBandwidthDb)"
  },
  {
    "label": "SetInputGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInputGain(const float InInputGainDb)"
  },
  {
    "label": "SetKeyAudition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyAudition(const bool InAuditionEnabled)"
  },
  {
    "label": "SetKeyGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyGain(const float InKeyGain)"
  },
  {
    "label": "SetKeyHighshelfCutoffFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyHighshelfCutoffFrequency(const float InCutoffFreq)"
  },
  {
    "label": "SetKeyHighshelfEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyHighshelfEnabled(const bool bInEnabled)"
  },
  {
    "label": "SetKeyHighshelfGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyHighshelfGain(const float InGainDb)"
  },
  {
    "label": "SetKeyLowshelfCutoffFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyLowshelfCutoffFrequency(const float InCutoffFreq)"
  },
  {
    "label": "SetKeyLowshelfEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyLowshelfEnabled(const bool bInEnabled)"
  },
  {
    "label": "SetKeyLowshelfGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyLowshelfGain(const float InGainDb)"
  },
  {
    "label": "SetKeyNumChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyNumChannels(const int32 InNumChannels)"
  },
  {
    "label": "SetNumChannels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumChannels(const int32 InNumChannels)"
  },
  {
    "label": "SetOutputGain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputGain(const float InOutputGainDb)"
  },
  {
    "label": "SetChannelLinkMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelLinkMode(const EDynamicsProcessorChannelLinkMode InLinkMode)"
  },
  {
    "label": "SetAnalogMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAnalogMode(const bool bInIsAnalogMode)"
  },
  {
    "label": "SetPeakMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPeakMode(const EPeakMode::Type InEnvelopeFollowerModeType)"
  },
  {
    "label": "SetProcessingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProcessingMode(const EDynamicsProcessingMode::Type ProcessingMode)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* InFrame, float* OutFrame, const float* InKeyFrame)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* InFrame, float* OutFrame, const float* InKeyFrame, float* OutGain)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* InBuffer, const int32 InNumSamples, float* OutBuffer, const float* InKeyBuffer = nullptr, float* OutEnvelope = nullptr)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudio(const float* const* const InBuffers, const int32 InNumFrames, float* const* OutBuffers, const float* const* const InKeyBuffers, float* const* OutEnvelopes)"
  },
  {
    "label": "ComputeGain()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ComputeGain(const float InEnvFollowerDb)"
  },
  {
    "label": "ComputeGains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGains(float* InEnvFollowerDbOutGain, const int32 InNumSamples)"
  },
  {
    "label": "ProcessKeyFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessKeyFrame(const float* InKeyFrame, float* OutFrame, bool bKeyIsInput)"
  },
  {
    "label": "ProcessAudioDeinterleaveInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioDeinterleaveInternal(const float* const* const InBuffers, const int32 InNumFrames, float* const* OutBuffers, const float* const* const InKeyBuffers, float* const* OutEnvelopes)"
  },
  {
    "label": "CalculateSlope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateSlope()"
  },
  {
    "label": "CalculateKnee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateKnee()"
  }
]