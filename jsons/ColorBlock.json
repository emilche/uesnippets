[
  {
    "label": "Image",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Image"
  },
  {
    "label": "ColorBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ColorBlock"
  },
  {
    "label": "ColorBlock()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_IMAGE_COLORBLOCK_H # define NV_IMAGE_COLORBLOCK_H # include<nvmath / Color . h> namespace nv { class Image ; struct ColorBlock {)",
    "insertText": "ColorBlock()"
  },
  {
    "label": "ColorBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ColorBlock(const uint * linearImage)"
  },
  {
    "label": "ColorBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ColorBlock(const ColorBlock & block)"
  },
  {
    "label": "ColorBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ColorBlock(const Image * img, uint x, uint y)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const Image * img, uint x, uint y)"
  },
  {
    "label": "swizzleDXT5n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swizzleDXT5n()"
  },
  {
    "label": "splatX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splatX()"
  },
  {
    "label": "splatY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splatY()"
  },
  {
    "label": "isSingleColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSingleColor()"
  },
  {
    "label": "countUniqueColors()",
    "kind": "Method",
    "detail": "Function (uint)",
    "insertText": "countUniqueColors()"
  },
  {
    "label": "averageColor()",
    "kind": "Method",
    "detail": "Function (Color32)",
    "insertText": "averageColor()"
  },
  {
    "label": "hasAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasAlpha()"
  },
  {
    "label": "diameterRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "diameterRange(Color32 * start, Color32 * end)"
  },
  {
    "label": "luminanceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "luminanceRange(Color32 * start, Color32 * end)"
  },
  {
    "label": "boundsRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boundsRange(Color32 * start, Color32 * end)"
  },
  {
    "label": "boundsRangeAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boundsRangeAlpha(Color32 * start, Color32 * end)"
  },
  {
    "label": "sortColorsByAbsoluteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sortColorsByAbsoluteValue()"
  },
  {
    "label": "computeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeRange(const Vector3 & axis, Color32 * start, Color32 * end)"
  },
  {
    "label": "sortColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sortColors(const Vector3 & axis)"
  },
  {
    "label": "volume()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "volume()"
  },
  {
    "label": "colors()",
    "kind": "Method",
    "detail": "Function (const Color32*)",
    "insertText": "colors()"
  },
  {
    "label": "color()",
    "kind": "Method",
    "detail": "Function (Color32)",
    "insertText": "color(uint i)"
  },
  {
    "label": "color()",
    "kind": "Method",
    "detail": "Function (Color32)",
    "insertText": "color(uint x, uint y)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(i < 16)"
  },
  {
    "label": "nvDebugCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvDebugCheck(x < 4 && y < 4)"
  }
]