[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EUnifiedMappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUnifiedMappingType"
  },
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "EUnifiedMappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUnifiedMappingType"
  },
  {
    "label": "ETextureUse6",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureUse6"
  },
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "ETextureUse6",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureUse6"
  },
  {
    "label": "EWrapMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWrapMode"
  },
  {
    "label": "EWrapMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWrapMode"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "EAlignMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAlignMode"
  },
  {
    "label": "EAlignMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAlignMode"
  },
  {
    "label": "ECoordinates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECoordinates"
  },
  {
    "label": "ECoordinates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECoordinates"
  },
  {
    "label": "property",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "property"
  },
  {
    "label": "property",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "property"
  },
  {
    "label": "EAlphaSource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAlphaSource"
  },
  {
    "label": "EAlphaSource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAlphaSource"
  },
  {
    "label": "EMappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMappingType"
  },
  {
    "label": "EMappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMappingType"
  },
  {
    "label": "EPlanarMappingNormal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlanarMappingNormal"
  },
  {
    "label": "EPlanarMappingNormal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlanarMappingNormal"
  },
  {
    "label": "ETextureUse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureUse"
  },
  {
    "label": "ETextureUse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureUse"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetSwapUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSwapUV(bool pSwapUV)"
  },
  {
    "label": "SetPremultiplyAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPremultiplyAlpha(bool pPremultiplyAlpha)"
  },
  {
    "label": "SetAlphaSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlphaSource(EAlphaSource pAlphaSource)"
  },
  {
    "label": "SetCropping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCropping(int pLeft, int pTop, int pRight, int pBottom)"
  },
  {
    "label": "SetMappingType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMappingType(EMappingType pMappingType)"
  },
  {
    "label": "SetPlanarMappingNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlanarMappingNormal(EPlanarMappingNormal pPlanarMappingNormal)"
  },
  {
    "label": "SetTextureUse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextureUse(ETextureUse pTextureUse)"
  },
  {
    "label": "SetWrapMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapMode(EWrapMode pWrapU, EWrapMode pWrapV)"
  },
  {
    "label": "SetBlendMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendMode(EBlendMode pBlendMode)"
  },
  {
    "label": "SetDefaultAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultAlpha(double pAlpha)"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslation(double pU,double pV)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotation(double pU, double pV, double pW = 0.0)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(double pU,double pV)"
  },
  {
    "label": "SetUVTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUVTranslation(FbxVector2& pT)"
  },
  {
    "label": "SetUVScaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUVScaling(FbxVector2& pS)"
  },
  {
    "label": "GetTextureType()",
    "kind": "Method",
    "detail": "Function (FbxString)",
    "insertText": "GetTextureType()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "MB()",
    "kind": "Method",
    "detail": "Function (in)",
    "insertText": "MB(always set to None)"
  }
]