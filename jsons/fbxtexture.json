[
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "EUnifiedMappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EUnifiedMappingType"
  },
  {
    "label": "ETextureUse6",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureUse6"
  },
  {
    "label": "EWrapMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWrapMode"
  },
  {
    "label": "EBlendMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EBlendMode"
  },
  {
    "label": "EAlignMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAlignMode"
  },
  {
    "label": "ECoordinates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECoordinates"
  },
  {
    "label": "EAlphaSource",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAlphaSource"
  },
  {
    "label": "EMappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMappingType"
  },
  {
    "label": "EPlanarMappingNormal",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPlanarMappingNormal"
  },
  {
    "label": "ETextureUse",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ETextureUse"
  },
  {
    "label": "FBXSDK_OBJECT_DECLARE()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_SCENE_SHADING_TEXTURE_H_ # define _FBXSDK_SCENE_SHADING_TEXTURE_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / fbxobject . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FBXSDK_DLL FbxTexture : public FbxObject {)",
    "insertText": "FBXSDK_OBJECT_DECLARE(FbxTexture, FbxObject)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (public : enum EUnifiedMappingType { eUMT_UV,eUMT_XY,eUMT_YZ,eUMT_XZ,eUMT_SPHERICAL,eUMT_CYLINDRICAL,eUMT_ENVIRONMENT,eUMT_PROJECTION,eUMT_BOX,eUMT_FACE,eUMT_NO_MAPPING,} ; enum ETextureUse6 { eTEXTURE_USE_6_STANDARD,eTEXTURE_USE_6_SPHERICAL_REFLEXION_MAP,eTEXTURE_USE_6_SPHERE_REFLEXION_MAP,eTEXTURE_USE_6_SHADOW_MAP,eTEXTURE_USE_6_LIGHT_MAP,eTEXTURE_USE_6_BUMP_NORMAL_MAP } ; enum EWrapMode { eRepeat,eClamp } ; enum EBlendMode { eTranslucent,eAdditive,eModulate,eModulate2,eOver } ; enum EAlignMode { eLeft,eRight,eTop,eBottom } ; enum ECoordinates { eU,eV,eW } ; FbxPropertyT<ETextureUse6> TextureTypeUse ; FbxPropertyT<FbxDouble> Alpha ; FbxPropertyT<EUnifiedMappingType> CurrentMappingType ; FbxPropertyT<EWrapMode> WrapModeU ; FbxPropertyT<EWrapMode> WrapModeV ; FbxPropertyT<FbxBool> UVSwap ; FbxPropertyT<FbxBool> PremultiplyAlpha ; FbxPropertyT<FbxDouble3> Translation ; FbxPropertyT<FbxDouble3> Rotation ; FbxPropertyT<FbxDouble3> Scaling ; FbxPropertyT<FbxDouble3> RotationPivot ; FbxPropertyT<FbxDouble3> ScalingPivot ; FbxPropertyT<EBlendMode> CurrentTextureBlendMode ; FbxPropertyT<FbxString> UVSet ; const char* sVectorSpace ; const char* sVectorSpaceWorld ; const char* sVectorSpaceObject ; const char* sVectorSpaceTangent ; const char* sVectorEncoding ; const char* sVectorEncodingFP ; const char* sVectorEncodingSE ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetSwapUV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSwapUV(bool pSwapUV)"
  },
  {
    "label": "GetSwapUV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSwapUV()"
  },
  {
    "label": "SetPremultiplyAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPremultiplyAlpha(bool pPremultiplyAlpha)"
  },
  {
    "label": "GetPremultiplyAlpha()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPremultiplyAlpha()"
  },
  {
    "label": "SetAlphaSource()",
    "kind": "Method",
    "detail": "Function (enum EAlphaSource { eNone,eRGBIntensity,eBlack } ; void)",
    "insertText": "SetAlphaSource(EAlphaSource pAlphaSource)"
  },
  {
    "label": "GetAlphaSource()",
    "kind": "Method",
    "detail": "Function (EAlphaSource)",
    "insertText": "GetAlphaSource()"
  },
  {
    "label": "SetCropping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCropping(int pLeft, int pTop, int pRight, int pBottom)"
  },
  {
    "label": "GetCroppingLeft()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCroppingLeft()"
  },
  {
    "label": "GetCroppingTop()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCroppingTop()"
  },
  {
    "label": "GetCroppingRight()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCroppingRight()"
  },
  {
    "label": "GetCroppingBottom()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetCroppingBottom()"
  },
  {
    "label": "SetMappingType()",
    "kind": "Method",
    "detail": "Function (enum EMappingType { eNull,ePlanar,eSpherical,eCylindrical,eBox,eFace,eUV,eEnvironment } ; void)",
    "insertText": "SetMappingType(EMappingType pMappingType)"
  },
  {
    "label": "GetMappingType()",
    "kind": "Method",
    "detail": "Function (EMappingType)",
    "insertText": "GetMappingType()"
  },
  {
    "label": "SetPlanarMappingNormal()",
    "kind": "Method",
    "detail": "Function (enum EPlanarMappingNormal { ePlanarNormalX,ePlanarNormalY,ePlanarNormalZ } ; void)",
    "insertText": "SetPlanarMappingNormal(EPlanarMappingNormal pPlanarMappingNormal)"
  },
  {
    "label": "GetPlanarMappingNormal()",
    "kind": "Method",
    "detail": "Function (EPlanarMappingNormal)",
    "insertText": "GetPlanarMappingNormal()"
  },
  {
    "label": "SetTextureUse()",
    "kind": "Method",
    "detail": "Function (enum ETextureUse { eStandard,eShadowMap,eLightMap,eSphericalReflectionMap,eSphereReflectionMap,eBumpNormalMap } ; void)",
    "insertText": "SetTextureUse(ETextureUse pTextureUse)"
  },
  {
    "label": "GetTextureUse()",
    "kind": "Method",
    "detail": "Function (ETextureUse)",
    "insertText": "GetTextureUse()"
  },
  {
    "label": "SetWrapMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapMode(EWrapMode pWrapU, EWrapMode pWrapV)"
  },
  {
    "label": "GetWrapModeU()",
    "kind": "Method",
    "detail": "Function (EWrapMode)",
    "insertText": "GetWrapModeU()"
  },
  {
    "label": "GetWrapModeV()",
    "kind": "Method",
    "detail": "Function (EWrapMode)",
    "insertText": "GetWrapModeV()"
  },
  {
    "label": "SetBlendMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendMode(EBlendMode pBlendMode)"
  },
  {
    "label": "GetBlendMode()",
    "kind": "Method",
    "detail": "Function (EBlendMode)",
    "insertText": "GetBlendMode()"
  },
  {
    "label": "SetDefaultT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultT(const FbxVector4& pT)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Translation .)",
    "insertText": "Set(pT)"
  },
  {
    "label": "GetDefaultT()",
    "kind": "Method",
    "detail": "Function (} FbxVector4&)",
    "insertText": "GetDefaultT(FbxVector4& pT)"
  },
  {
    "label": "SetDefaultR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultR(const FbxVector4& pR)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Rotation .)",
    "insertText": "Set(FbxDouble3(pR[0],pR[1],pR[2]))"
  },
  {
    "label": "GetDefaultR()",
    "kind": "Method",
    "detail": "Function (} FbxVector4&)",
    "insertText": "GetDefaultR(FbxVector4& pR)"
  },
  {
    "label": "SetDefaultS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultS(const FbxVector4& pS)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Scaling .)",
    "insertText": "Set(FbxDouble3(pS[0],pS[1],pS[2]))"
  },
  {
    "label": "GetDefaultS()",
    "kind": "Method",
    "detail": "Function (} FbxVector4&)",
    "insertText": "GetDefaultS(FbxVector4& pS)"
  },
  {
    "label": "SetDefaultAlpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultAlpha(double pAlpha)"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslation(double pU,double pV)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRotation(double pU, double pV, double pW = 0.0)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(double pU,double pV)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS FbxObject&)",
    "insertText": "Copy(const FbxObject& pObject)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FbxTexture const& pTexture)"
  },
  {
    "label": "SetUVTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUVTranslation(FbxVector2& pT)"
  },
  {
    "label": "GetUVTranslation()",
    "kind": "Method",
    "detail": "Function (FbxVector2&)",
    "insertText": "GetUVTranslation()"
  },
  {
    "label": "SetUVScaling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUVScaling(FbxVector2& pS)"
  },
  {
    "label": "GetUVScaling()",
    "kind": "Method",
    "detail": "Function (FbxVector2&)",
    "insertText": "GetUVScaling()"
  },
  {
    "label": "GetTextureType()",
    "kind": "Method",
    "detail": "Function (FbxString)",
    "insertText": "GetTextureType()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct(const FbxObject* pFrom)"
  },
  {
    "label": "ConstructProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructProperties(bool pForceSet)"
  },
  {
    "label": "PropertyNotify()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PropertyNotify(EPropertyNotifyType pType, FbxProperty& pProperty)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "FbxTypeOf()",
    "kind": "Method",
    "detail": "Function (int mCropping [ 4 ] ; EAlphaSource mAlphaSource ; EMappingType mMappingType ; EPlanarMappingNormal mPlanarMappingNormal ; FbxVector2 mUVScaling ; FbxVector2 mUVTranslation ; # endif } ; EFbxType)",
    "insertText": "FbxTypeOf(const FbxTexture::EUnifiedMappingType&)"
  }
]