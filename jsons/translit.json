[
  {
    "label": "UnicodeFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeFilter"
  },
  {
    "label": "UnicodeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnicodeSet"
  },
  {
    "label": "TransliteratorParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransliteratorParser"
  },
  {
    "label": "NormalizationTransliterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NormalizationTransliterator"
  },
  {
    "label": "TransliteratorIDParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransliteratorIDParser"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "TransliteratorAlias",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransliteratorAlias"
  },
  {
    "label": "integerToken()",
    "kind": "Method",
    "detail": "Function (# ifndef TRANSLIT_H # define TRANSLIT_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_TRANSLITERATION # include \" unicode / uobject . h \" # include \" unicode / unistr . h \" # include \" unicode / parseerr . h \" # include \" unicode / utrans . h \" # include \" unicode / strenum . h \" U_NAMESPACE_BEGIN class UnicodeFilter ; class UnicodeSet ; class TransliteratorParser ; class NormalizationTransliterator ; class TransliteratorIDParser ; class U_I18N_API Transliterator : public UObject { private : UnicodeString ID ; UnicodeFilter* filter ; int32_t maximumContextLength ; public : union Token { int32_t integer ; void* pointer ; } ; # ifndef Token)",
    "insertText": "integerToken(int32_t)"
  },
  {
    "label": "pointerToken()",
    "kind": "Method",
    "detail": "Function (Token)",
    "insertText": "pointerToken(void*)"
  },
  {
    "label": "Transliterator()",
    "kind": "Method",
    "detail": "Function (# endif typedef)",
    "insertText": "Transliterator(U_EXPORT2 *Factory)(const UnicodeString& ID, Token context)"
  },
  {
    "label": "Transliterator()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "Transliterator(const UnicodeString& ID, UnicodeFilter* adoptedFilter)"
  },
  {
    "label": "Transliterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transliterator(const Transliterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Transliterator&)",
    "insertText": "operator(const Transliterator&)"
  },
  {
    "label": "createBasicInstance()",
    "kind": "Method",
    "detail": "Function (Transliterator*)",
    "insertText": "createBasicInstance(const UnicodeString& id, const UnicodeString* canon)"
  },
  {
    "label": "Transliterator()",
    "kind": "Method",
    "detail": "Function (class TransliteratorParser ; class TransliteratorIDParser ; class TransliteratorAlias ; public : ~)",
    "insertText": "Transliterator()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (Transliterator*)",
    "insertText": "clone()"
  },
  {
    "label": "transliterate()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "transliterate(Replaceable& text, int32_t start, int32_t limit)"
  },
  {
    "label": "transliterate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transliterate(Replaceable& text)"
  },
  {
    "label": "transliterate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transliterate(Replaceable& text, UTransPosition& index, const UnicodeString& insertion, UErrorCode& status)"
  },
  {
    "label": "transliterate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transliterate(Replaceable& text, UTransPosition& index, UChar32 insertion, UErrorCode& status)"
  },
  {
    "label": "transliterate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transliterate(Replaceable& text, UTransPosition& index, UErrorCode& status)"
  },
  {
    "label": "finishTransliteration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finishTransliteration(Replaceable& text, UTransPosition& index)"
  },
  {
    "label": "_transliterate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "_transliterate(Replaceable& text, UTransPosition& index, const UnicodeString* insertion, UErrorCode &status)"
  },
  {
    "label": "handleTransliterate()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "handleTransliterate(Replaceable& text, UTransPosition& pos, UBool incremental)"
  },
  {
    "label": "filteredTransliterate()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "filteredTransliterate(Replaceable& text, UTransPosition& index, UBool incremental)"
  },
  {
    "label": "filteredTransliterate()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "filteredTransliterate(Replaceable& text, UTransPosition& index, UBool incremental, UBool rollback)"
  },
  {
    "label": "getMaximumContextLength()",
    "kind": "Method",
    "detail": "Function (public : int32_t)",
    "insertText": "getMaximumContextLength(void)"
  },
  {
    "label": "setMaximumContextLength()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "setMaximumContextLength(int32_t maxContextLength)"
  },
  {
    "label": "getID()",
    "kind": "Method",
    "detail": "Function (public : const UnicodeString&)",
    "insertText": "getID(void)"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "getDisplayName(const UnicodeString& ID, UnicodeString& result)"
  },
  {
    "label": "getDisplayName()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "getDisplayName(const UnicodeString& ID, const Locale& inLocale, UnicodeString& result)"
  },
  {
    "label": "getFilter()",
    "kind": "Method",
    "detail": "Function (const UnicodeFilter*)",
    "insertText": "getFilter(void)"
  },
  {
    "label": "orphanFilter()",
    "kind": "Method",
    "detail": "Function (UnicodeFilter*)",
    "insertText": "orphanFilter(void)"
  },
  {
    "label": "adoptFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "adoptFilter(UnicodeFilter* adoptedFilter)"
  },
  {
    "label": "createInverse()",
    "kind": "Method",
    "detail": "Function (Transliterator*)",
    "insertText": "createInverse(UErrorCode& status)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (Transliterator* U_EXPORT2)",
    "insertText": "createInstance(const UnicodeString& ID, UTransDirection dir, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "createInstance()",
    "kind": "Method",
    "detail": "Function (Transliterator* U_EXPORT2)",
    "insertText": "createInstance(const UnicodeString& ID, UTransDirection dir, UErrorCode& status)"
  },
  {
    "label": "createFromRules()",
    "kind": "Method",
    "detail": "Function (Transliterator* U_EXPORT2)",
    "insertText": "createFromRules(const UnicodeString& ID, const UnicodeString& rules, UTransDirection dir, UParseError& parseError, UErrorCode& status)"
  },
  {
    "label": "toRules()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "toRules(UnicodeString& result, UBool escapeUnprintable)"
  },
  {
    "label": "countElements()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "countElements()"
  },
  {
    "label": "getElement()",
    "kind": "Method",
    "detail": "Function (const Transliterator&)",
    "insertText": "getElement(int32_t index, UErrorCode& ec)"
  },
  {
    "label": "getSourceSet()",
    "kind": "Method",
    "detail": "Function (UnicodeSet&)",
    "insertText": "getSourceSet(UnicodeSet& result)"
  },
  {
    "label": "handleGetSourceSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handleGetSourceSet(UnicodeSet& result)"
  },
  {
    "label": "getTargetSet()",
    "kind": "Method",
    "detail": "Function (UnicodeSet&)",
    "insertText": "getTargetSet(UnicodeSet& result)"
  },
  {
    "label": "registerFactory()",
    "kind": "Method",
    "detail": "Function (public : void U_EXPORT2)",
    "insertText": "registerFactory(const UnicodeString& id, Factory factory, Token context)"
  },
  {
    "label": "registerInstance()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "registerInstance(Transliterator* adoptedObj)"
  },
  {
    "label": "registerAlias()",
    "kind": "Method",
    "detail": "Function (void U_EXPORT2)",
    "insertText": "registerAlias(const UnicodeString& aliasID, const UnicodeString& realID)"
  },
  {
    "label": "_registerFactory()",
    "kind": "Method",
    "detail": "Function (protected : # ifndef void)",
    "insertText": "_registerFactory(const UnicodeString& id, Factory factory, Token context)"
  },
  {
    "label": "_registerInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_registerInstance(Transliterator* adoptedObj)"
  },
  {
    "label": "_registerAlias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_registerAlias(const UnicodeString& aliasID, const UnicodeString& realID)"
  },
  {
    "label": "_registerSpecialInverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_registerSpecialInverse(const UnicodeString& target, const UnicodeString& inverseTarget, UBool bidirectional)"
  },
  {
    "label": "unregister()",
    "kind": "Method",
    "detail": "Function (# endif public : void U_EXPORT2)",
    "insertText": "unregister(const UnicodeString& ID)"
  },
  {
    "label": "getAvailableIDs()",
    "kind": "Method",
    "detail": "Function (public : StringEnumeration* U_EXPORT2)",
    "insertText": "getAvailableIDs(UErrorCode& ec)"
  },
  {
    "label": "countAvailableSources()",
    "kind": "Method",
    "detail": "Function (int32_t U_EXPORT2)",
    "insertText": "countAvailableSources(void)"
  },
  {
    "label": "getAvailableSource()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "getAvailableSource(int32_t index, UnicodeString& result)"
  },
  {
    "label": "countAvailableTargets()",
    "kind": "Method",
    "detail": "Function (int32_t U_EXPORT2)",
    "insertText": "countAvailableTargets(const UnicodeString& source)"
  },
  {
    "label": "getAvailableTarget()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "getAvailableTarget(int32_t index, const UnicodeString& source, UnicodeString& result)"
  },
  {
    "label": "countAvailableVariants()",
    "kind": "Method",
    "detail": "Function (int32_t U_EXPORT2)",
    "insertText": "countAvailableVariants(const UnicodeString& source, const UnicodeString& target)"
  },
  {
    "label": "getAvailableVariant()",
    "kind": "Method",
    "detail": "Function (UnicodeString& U_EXPORT2)",
    "insertText": "getAvailableVariant(int32_t index, const UnicodeString& source, const UnicodeString& target, UnicodeString& result)"
  },
  {
    "label": "_countAvailableSources()",
    "kind": "Method",
    "detail": "Function (protected : # ifndef int32_t)",
    "insertText": "_countAvailableSources(void)"
  },
  {
    "label": "_getAvailableSource()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "_getAvailableSource(int32_t index, UnicodeString& result)"
  },
  {
    "label": "_countAvailableTargets()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "_countAvailableTargets(const UnicodeString& source)"
  },
  {
    "label": "_getAvailableTarget()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "_getAvailableTarget(int32_t index, const UnicodeString& source, UnicodeString& result)"
  },
  {
    "label": "_countAvailableVariants()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "_countAvailableVariants(const UnicodeString& source, const UnicodeString& target)"
  },
  {
    "label": "_getAvailableVariant()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "_getAvailableVariant(int32_t index, const UnicodeString& source, const UnicodeString& target, UnicodeString& result)"
  },
  {
    "label": "setID()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "setID(const UnicodeString& id)"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (public : UClassID U_EXPORT2)",
    "insertText": "getStaticClassID(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID(void)"
  },
  {
    "label": "initializeRegistry()",
    "kind": "Method",
    "detail": "Function (private : UBool)",
    "insertText": "initializeRegistry(UErrorCode &status)"
  },
  {
    "label": "countAvailableIDs()",
    "kind": "Method",
    "detail": "Function (public : # ifndef int32_t U_EXPORT2)",
    "insertText": "countAvailableIDs(void)"
  },
  {
    "label": "getAvailableID()",
    "kind": "Method",
    "detail": "Function (const UnicodeString& U_EXPORT2)",
    "insertText": "getAvailableID(int32_t index)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ID = id ; ID .)",
    "insertText": "append((char16_t)0)"
  },
  {
    "label": "truncate()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "truncate(ID.length()-1)"
  },
  {
    "label": "integerToken()",
    "kind": "Method",
    "detail": "Function (} # ifndef Transliterator::Token)",
    "insertText": "integerToken(int32_t i)"
  },
  {
    "label": "pointerToken()",
    "kind": "Method",
    "detail": "Function (Token t ; t . integer = i ; return t ; } Transliterator::Token)",
    "insertText": "pointerToken(void* p)"
  }
]