[
  {
    "label": "FGrainDelay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrainDelay"
  },
  {
    "label": "FGrain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGrain"
  },
  {
    "label": "FGrainDelay()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DSP / GrainEnvelope . h \" # include \" DSP / DynamicsProcessor . h \" # include \" DSP / TapDelayPitchShifter . h \" namespace Audio { namespace GrainDelay { class FGrainDelay { public :)",
    "insertText": "FGrainDelay(const float InSampleRate, const float InMaxDelaySeconds = 2.0f)"
  },
  {
    "label": "FGrainDelay()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FGrainDelay()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetGrainDelayClamped()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGrainDelayClamped(const float InDelay)"
  },
  {
    "label": "GetGrainDurationClamped()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGrainDurationClamped(const float InDuration)"
  },
  {
    "label": "GetGrainDelayRatioClamped()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGrainDelayRatioClamped(const float InGrainDelayRatio)"
  },
  {
    "label": "GetGrainPitchShiftClamped()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGrainPitchShiftClamped(const float InPitchShift)"
  },
  {
    "label": "GetGrainPitchShiftFrameRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGrainPitchShiftFrameRatio(const float InPitchShift)"
  },
  {
    "label": "SetMaxGrains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxGrains(const int32 InMaxGrains)"
  },
  {
    "label": "SetGrainEnvelope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainEnvelope(const Audio::Grain::EEnvelope InGrainEnvelope)"
  },
  {
    "label": "SetFeedbackAmount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFeedbackAmount(float InFeedbackAmount)"
  },
  {
    "label": "SetGrainBasePitchShiftRatio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGrainBasePitchShiftRatio(const float InPitchRatioBase)"
  },
  {
    "label": "SpawnGrain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnGrain(const float InDelay, const float InDuration, const float InPitchShiftRatioOffset)"
  },
  {
    "label": "SynthesizeAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SynthesizeAudio(const int32 StartFrame, const int32 EndFrame, const float* InAudioBuffer, float* OutAudioBuffer)"
  },
  {
    "label": "SynthesizeFrame()",
    "kind": "Method",
    "detail": "Function (private : float)",
    "insertText": "SynthesizeFrame(const Audio::FDelay& InDelayLine)"
  },
  {
    "label": "InitDynamicsProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitDynamicsProcessor()"
  },
  {
    "label": "SetGrainPitchShiftRatio()",
    "kind": "Method",
    "detail": "Function (struct FGrain { float DelayTapPositionMilliseconds = 0 . 0 f ; float NumFramesRendered = 0 . 0 f ; float DurationFrames = 0 . 0 f ; float PitchShiftRatioOffset = 1 . 0 f ; FTapDelayPitchShifter PitchShifter ; void)",
    "insertText": "SetGrainPitchShiftRatio(const float InPitchShiftRatioBase, const float InSampleRate)"
  },
  {
    "label": "SetDelayLength()",
    "kind": "Method",
    "detail": "Function (const float DurationMilliseconds = 1 0 0 0 . 0 f* DurationFrames / InSampleRate ; PitchShifter .)",
    "insertText": "SetDelayLength(DurationMilliseconds)"
  },
  {
    "label": "SetPitchShiftRatio()",
    "kind": "Method",
    "detail": "Function (PitchShifter .)",
    "insertText": "SetPitchShiftRatio(InPitchShiftRatioBase * PitchShiftRatioOffset)"
  }
]