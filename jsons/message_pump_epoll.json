[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "MessagePumpLibevent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibevent"
  },
  {
    "label": "MessagePumpLibeventTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessagePumpLibeventTest"
  },
  {
    "label": "EpollEventEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EpollEventEntry"
  },
  {
    "label": "RunState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RunState"
  },
  {
    "label": "WatchFileDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WatchFileDescriptor(int fd,\n                           bool persistent,\n                           int mode,\n                           FdWatchController* controller,\n                           FdWatcher* watcher)"
  },
  {
    "label": "EpollEventEntry()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "EpollEventEntry(int fd)"
  },
  {
    "label": "ComputeActiveEvents()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ComputeActiveEvents()"
  },
  {
    "label": "AddEpollEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEpollEvent(EpollEventEntry& entry)"
  },
  {
    "label": "UpdateEpollEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEpollEvent(EpollEventEntry& entry)"
  },
  {
    "label": "UnregisterInterest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterInterest(const scoped_refptr<Interest>& interest)"
  },
  {
    "label": "WaitForEpollEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForEpollEvent(TimeDelta timeout)"
  },
  {
    "label": "OnEpollEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEpollEvent(const epoll_event& e)"
  },
  {
    "label": "HandleEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEvent(int fd,\n                   bool can_read,\n                   bool can_write,\n                   FdWatchController* controller)"
  },
  {
    "label": "HandleWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleWakeUp()"
  }
]