[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneRendererBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRendererBase"
  },
  {
    "label": "FRDGBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRDGBuilder"
  },
  {
    "label": "FSceneUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneUniformBuffer"
  },
  {
    "label": "FScenePreUpdateChangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePreUpdateChangeSet"
  },
  {
    "label": "FScenePostUpdateChangeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScenePostUpdateChangeSet"
  },
  {
    "label": "FSceneExtensionRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneExtensionRegistry"
  },
  {
    "label": "ISceneExtensionUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneExtensionUpdater"
  },
  {
    "label": "ISceneExtensionRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneExtensionRenderer"
  },
  {
    "label": "ISceneExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneExtension"
  },
  {
    "label": "ISceneExtensionFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneExtensionFactory"
  },
  {
    "label": "FSceneExtensions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneExtensions"
  },
  {
    "label": "FSceneExtensionsUpdaters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneExtensionsUpdaters"
  },
  {
    "label": "FSceneExtensionsRenderers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneExtensionsRenderers"
  },
  {
    "label": "TSceneExtensionRegistration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSceneExtensionRegistration"
  },
  {
    "label": "ShouldCreateExtension()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RendererInterface . h \" # include \" Tasks / Task . h \" class FScene ; class FSceneRendererBase ; class FRDGBuilder ; class FSceneUniformBuffer ; class FScenePreUpdateChangeSet ; class FScenePostUpdateChangeSet ; class FSceneExtensionRegistry ; class ISceneExtensionUpdater ; class ISceneExtensionRenderer ; class ISceneExtension { public : bool)",
    "insertText": "ShouldCreateExtension(FScene& Scene)"
  },
  {
    "label": "InitExtension()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitExtension(FScene& InScene)"
  },
  {
    "label": "CreateUpdater()",
    "kind": "Method",
    "detail": "Function (ISceneExtensionUpdater*)",
    "insertText": "CreateUpdater()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin(FScene& InScene)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "End()"
  },
  {
    "label": "PreSceneUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePreUpdateChangeSet& ChangeSet, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "PostSceneUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostSceneUpdate(FRDGBuilder& GraphBuilder, const FScenePostUpdateChangeSet& ChangeSet)"
  },
  {
    "label": "PostGPUSceneUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostGPUSceneUpdate(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "ISceneExtensionRenderer()",
    "kind": "Method",
    "detail": "Function (} } ; class ISceneExtensionRenderer { public : ~)",
    "insertText": "ISceneExtensionRenderer()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin(FSceneRendererBase& InRenderer)"
  },
  {
    "label": "UpdateSceneUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSceneUniformBuffer(FRDGBuilder& GraphBuilder, FSceneUniformBuffer& SceneUniforms)"
  },
  {
    "label": "PreRender()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreRender(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRender(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "ISceneExtensionFactory()",
    "kind": "Method",
    "detail": "Function (} } ; class ISceneExtensionFactory { class FSceneExtensionRegistry ; public : ~)",
    "insertText": "ISceneExtensionFactory()"
  },
  {
    "label": "CreateInstance()",
    "kind": "Method",
    "detail": "Function (} ISceneExtension*)",
    "insertText": "CreateInstance(FScene& Scene)"
  },
  {
    "label": "GetExtensionID()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetExtensionID()"
  },
  {
    "label": "InitRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRegistry()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Register(ISceneExtensionFactory& Factory)"
  },
  {
    "label": "CreateExtensions()",
    "kind": "Method",
    "detail": "Function (TSparseArray<ISceneExtension*>)",
    "insertText": "CreateExtensions(FScene& Scene)"
  },
  {
    "label": "FSceneExtensions()",
    "kind": "Method",
    "detail": "Function (TArray<ISceneExtensionFactory*> Factories ; FSceneExtensionRegistry* GlobalRegistry ; } ; class FSceneExtensions { public : using FUpdaterList = TSparseArray<ISceneExtensionUpdater*,SceneRenderingSparseArrayAllocator> ; using FRendererList = TSparseArray<ISceneExtensionRenderer*,SceneRenderingSparseArrayAllocator> ; ~)",
    "insertText": "FSceneExtensions()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FScene& Scene)"
  },
  {
    "label": "CreateUpdaters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUpdaters(FUpdaterList& OutUpdaters)"
  },
  {
    "label": "CreateRenderers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateRenderers(FRendererList& OutRenderers)"
  },
  {
    "label": "GetExtensionPtr()",
    "kind": "Method",
    "detail": "Function (template<TDerivedExtension> TDerivedExtension*)",
    "insertText": "GetExtensionPtr()"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (} template<TDerivedExtension> TDerivedExtension&)",
    "insertText": "GetExtension()"
  },
  {
    "label": "TDerivedExtension()",
    "kind": "Method",
    "detail": "Function (TDerivedExtension* Extension = this -> GetExtensionPtr<)",
    "insertText": "TDerivedExtension()"
  },
  {
    "label": "ForEachExtension()",
    "kind": "Method",
    "detail": "Function (} template<TFunc> void)",
    "insertText": "ForEachExtension(const TFunc& F)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "F(Ext)"
  },
  {
    "label": "FSceneExtensionsUpdaters()",
    "kind": "Method",
    "detail": "Function (} } private : TSparseArray<ISceneExtension*> Extensions ; } ; class FSceneExtensionsUpdaters { class FSceneExtensions ; public :)",
    "insertText": "FSceneExtensionsUpdaters()"
  },
  {
    "label": "FSceneExtensionsUpdaters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneExtensionsUpdaters(FScene& InScene)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Begin(InScene)"
  },
  {
    "label": "IsUpdating()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUpdating()"
  },
  {
    "label": "GetUpdaterPtr()",
    "kind": "Method",
    "detail": "Function (} template<TUpdater> const TUpdater*)",
    "insertText": "GetUpdaterPtr()"
  },
  {
    "label": "GetUpdater()",
    "kind": "Method",
    "detail": "Function (} template<TUpdater> TUpdater&)",
    "insertText": "GetUpdater()"
  },
  {
    "label": "TUpdater()",
    "kind": "Method",
    "detail": "Function (auto Updater = GetUpdaterPtr<)",
    "insertText": "TUpdater()"
  },
  {
    "label": "PreSceneUpdate()",
    "kind": "Method",
    "detail": "Function (Updater ->)",
    "insertText": "PreSceneUpdate(GraphBuilder, ChangeSet, SceneUniforms)"
  },
  {
    "label": "PostSceneUpdate()",
    "kind": "Method",
    "detail": "Function (Updater ->)",
    "insertText": "PostSceneUpdate(GraphBuilder, ChangeSet)"
  },
  {
    "label": "PostGPUSceneUpdate()",
    "kind": "Method",
    "detail": "Function (Updater ->)",
    "insertText": "PostGPUSceneUpdate(GraphBuilder, SceneUniforms)"
  },
  {
    "label": "FSceneExtensionsRenderers()",
    "kind": "Method",
    "detail": "Function (} } private : FScene* Scene = nullptr ; FSceneExtensions::FUpdaterList Updaters ; } ; class FSceneExtensionsRenderers { class FSceneExtensions ; public :)",
    "insertText": "FSceneExtensionsRenderers()"
  },
  {
    "label": "FSceneExtensionsRenderers()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneExtensionsRenderers(FSceneRendererBase& InSceneRenderer)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Begin(InSceneRenderer)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin(FSceneRendererBase& InSceneRenderer)"
  },
  {
    "label": "IsRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRendering()"
  },
  {
    "label": "GetRendererPtr()",
    "kind": "Method",
    "detail": "Function (} template<TRenderer> const TRenderer*)",
    "insertText": "GetRendererPtr()"
  },
  {
    "label": "GetRenderer()",
    "kind": "Method",
    "detail": "Function (} template<TRenderer> TRenderer&)",
    "insertText": "GetRenderer()"
  },
  {
    "label": "TRenderer()",
    "kind": "Method",
    "detail": "Function (auto Renderer = GetRendererPtr<)",
    "insertText": "TRenderer()"
  },
  {
    "label": "UpdateSceneUniformBuffer()",
    "kind": "Method",
    "detail": "Function (Renderer ->)",
    "insertText": "UpdateSceneUniformBuffer(GraphBuilder, SceneUniforms)"
  },
  {
    "label": "PreRender()",
    "kind": "Method",
    "detail": "Function (Renderer ->)",
    "insertText": "PreRender(GraphBuilder)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (Renderer ->)",
    "insertText": "PostRender(GraphBuilder)"
  },
  {
    "label": "TSceneExtensionRegistration()",
    "kind": "Method",
    "detail": "Function (} } private : FSceneRendererBase* SceneRenderer = nullptr ; FSceneExtensions::FRendererList Renderers ; } ; template<TDerivedExtension> class TSceneExtensionRegistration : public ISceneExtensionFactory { public :)",
    "insertText": "TSceneExtensionRegistration()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().Register(*this)"
  },
  {
    "label": "DECLARE_SCENE_EXTENSION()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "DECLARE_SCENE_EXTENSION(ModuleExport, ClassName) \\ public: \\ ModuleExport static int32 GetExtensionID()"
  }
]