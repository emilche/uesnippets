[
  {
    "label": "VariadicFunction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariadicFunction"
  },
  {
    "label": "VariadicFunction1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariadicFunction1"
  },
  {
    "label": "VariadicFunction2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariadicFunction2"
  },
  {
    "label": "VariadicFunction3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariadicFunction3"
  },
  {
    "label": "LLVM_COMMA_JOIN1()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_VARIADICFUNCTION_H # define LLVM_ADT_VARIADICFUNCTION_H # include \" llvm / ADT / ArrayRef . h \" namespace llvm { # define)",
    "insertText": "LLVM_COMMA_JOIN1(x) x ## 0 #define LLVM_COMMA_JOIN2(x) LLVM_COMMA_JOIN1(x), x ## 1 #define LLVM_COMMA_JOIN3(x) LLVM_COMMA_JOIN2(x), x ## 2 #define LLVM_COMMA_JOIN4(x) LLVM_COMMA_JOIN3(x), x ## 3 #define LLVM_COMMA_JOIN5(x) LLVM_COMMA_JOIN4(x), x ## 4 #define LLVM_COMMA_JOIN6(x) LLVM_COMMA_JOIN5(x), x ## 5 #define LLVM_COMMA_JOIN7(x) LLVM_COMMA_JOIN6(x), x ## 6 #define LLVM_COMMA_JOIN8(x) LLVM_COMMA_JOIN7(x), x ## 7 #define LLVM_COMMA_JOIN9(x) LLVM_COMMA_JOIN8(x), x ## 8 #define LLVM_COMMA_JOIN10(x) LLVM_COMMA_JOIN9(x), x ## 9 #define LLVM_COMMA_JOIN11(x) LLVM_COMMA_JOIN10(x), x ## 10 #define LLVM_COMMA_JOIN12(x) LLVM_COMMA_JOIN11(x), x ## 11 #define LLVM_COMMA_JOIN13(x) LLVM_COMMA_JOIN12(x), x ## 12 #define LLVM_COMMA_JOIN14(x) LLVM_COMMA_JOIN13(x), x ## 13 #define LLVM_COMMA_JOIN15(x) LLVM_COMMA_JOIN14(x), x ## 14 #define LLVM_COMMA_JOIN16(x) LLVM_COMMA_JOIN15(x), x ## 15 #define LLVM_COMMA_JOIN17(x) LLVM_COMMA_JOIN16(x), x ## 16 #define LLVM_COMMA_JOIN18(x) LLVM_COMMA_JOIN17(x), x ## 17 #define LLVM_COMMA_JOIN19(x) LLVM_COMMA_JOIN18(x), x ## 18 #define LLVM_COMMA_JOIN20(x) LLVM_COMMA_JOIN19(x), x ## 19 #define LLVM_COMMA_JOIN21(x) LLVM_COMMA_JOIN20(x), x ## 20 #define LLVM_COMMA_JOIN22(x) LLVM_COMMA_JOIN21(x), x ## 21 #define LLVM_COMMA_JOIN23(x) LLVM_COMMA_JOIN22(x), x ## 22 #define LLVM_COMMA_JOIN24(x) LLVM_COMMA_JOIN23(x), x ## 23 #define LLVM_COMMA_JOIN25(x) LLVM_COMMA_JOIN24(x), x ## 24 #define LLVM_COMMA_JOIN26(x) LLVM_COMMA_JOIN25(x), x ## 25 #define LLVM_COMMA_JOIN27(x) LLVM_COMMA_JOIN26(x), x ## 26 #define LLVM_COMMA_JOIN28(x) LLVM_COMMA_JOIN27(x), x ## 27 #define LLVM_COMMA_JOIN29(x) LLVM_COMMA_JOIN28(x), x ## 28 #define LLVM_COMMA_JOIN30(x) LLVM_COMMA_JOIN29(x), x ## 29 #define LLVM_COMMA_JOIN31(x) LLVM_COMMA_JOIN30(x), x ## 30 #define LLVM_COMMA_JOIN32(x) LLVM_COMMA_JOIN31(x), x ## 31 template <typename ResultT, typename ArgT, ResultT (*Func)(ArrayRef<const ArgT *>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ResultT)",
    "insertText": "operator()()"
  },
  {
    "label": "LLVM_DEFINE_OVERLOAD()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "LLVM_DEFINE_OVERLOAD(N) \\ ResultT operator()(LLVM_COMMA_JOIN ## N(const ArgT &A))"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (\\ const ArgT* const Args [ ] = { LLVM_COMMA_JOIN # #)",
    "insertText": "N(&A)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "Func(makeArrayRef(Args))"
  },
  {
    "label": "LLVM_DEFINE_OVERLOAD()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "LLVM_DEFINE_OVERLOAD(1) LLVM_DEFINE_OVERLOAD(2) LLVM_DEFINE_OVERLOAD(3) LLVM_DEFINE_OVERLOAD(4) LLVM_DEFINE_OVERLOAD(5) LLVM_DEFINE_OVERLOAD(6) LLVM_DEFINE_OVERLOAD(7) LLVM_DEFINE_OVERLOAD(8) LLVM_DEFINE_OVERLOAD(9) LLVM_DEFINE_OVERLOAD(10) LLVM_DEFINE_OVERLOAD(11) LLVM_DEFINE_OVERLOAD(12) LLVM_DEFINE_OVERLOAD(13) LLVM_DEFINE_OVERLOAD(14) LLVM_DEFINE_OVERLOAD(15) LLVM_DEFINE_OVERLOAD(16) LLVM_DEFINE_OVERLOAD(17) LLVM_DEFINE_OVERLOAD(18) LLVM_DEFINE_OVERLOAD(19) LLVM_DEFINE_OVERLOAD(20) LLVM_DEFINE_OVERLOAD(21) LLVM_DEFINE_OVERLOAD(22) LLVM_DEFINE_OVERLOAD(23) LLVM_DEFINE_OVERLOAD(24) LLVM_DEFINE_OVERLOAD(25) LLVM_DEFINE_OVERLOAD(26) LLVM_DEFINE_OVERLOAD(27) LLVM_DEFINE_OVERLOAD(28) LLVM_DEFINE_OVERLOAD(29) LLVM_DEFINE_OVERLOAD(30) LLVM_DEFINE_OVERLOAD(31) LLVM_DEFINE_OVERLOAD(32)"
  },
  {
    "label": "ResultT()",
    "kind": "Method",
    "detail": "Function (template<ResultT,Param0T,ArgT,)",
    "insertText": "ResultT(*Func)(Param0T, ArrayRef<const ArgT *>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ResultT)",
    "insertText": "operator()(Param0T P0)"
  },
  {
    "label": "LLVM_DEFINE_OVERLOAD()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "LLVM_DEFINE_OVERLOAD(N) \\ ResultT operator()(Param0T P0, LLVM_COMMA_JOIN ## N(const ArgT &A))"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "Func(P0, makeArrayRef(Args))"
  },
  {
    "label": "ResultT()",
    "kind": "Method",
    "detail": "Function (template<ResultT,Param0T,Param1T,ArgT,)",
    "insertText": "ResultT(*Func)(Param0T, Param1T, ArrayRef<const ArgT *>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ResultT)",
    "insertText": "operator()(Param0T P0, Param1T P1)"
  },
  {
    "label": "LLVM_DEFINE_OVERLOAD()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "LLVM_DEFINE_OVERLOAD(N) \\ ResultT operator()(Param0T P0, Param1T P1, \\ LLVM_COMMA_JOIN ## N(const ArgT &A))"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "Func(P0, P1, makeArrayRef(Args))"
  },
  {
    "label": "ResultT()",
    "kind": "Method",
    "detail": "Function (template<ResultT,Param0T,Param1T,Param2T,ArgT,)",
    "insertText": "ResultT(*Func)(Param0T, Param1T, Param2T, ArrayRef<const ArgT *>)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ResultT)",
    "insertText": "operator()(Param0T P0, Param1T P1, Param2T P2)"
  },
  {
    "label": "LLVM_DEFINE_OVERLOAD()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "LLVM_DEFINE_OVERLOAD(N) \\ ResultT operator()(Param0T P0, Param1T P1, Param2T P2, \\ LLVM_COMMA_JOIN ## N(const ArgT &A))"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "Func(P0, P1, P2, makeArrayRef(Args))"
  }
]