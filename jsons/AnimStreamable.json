[
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAnimCompress",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCompress"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FAnimStreamableChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimStreamableChunk"
  },
  {
    "label": "FStreamableAnimPlatformData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamableAnimPlatformData"
  },
  {
    "label": "UAnimStreamable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimStreamable"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "FTrackToSkeletonMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrackToSkeletonMap"
  },
  {
    "label": "UAnimBoneCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionSettings"
  },
  {
    "label": "UAnimCurveCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCurveCompressionSettings"
  },
  {
    "label": "UVariableFrameStrippingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVariableFrameStrippingSettings"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "FAnimStreamableChunk()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Serialization / BulkData . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimCompress . h \" # include \" Animation / AnimCompressionTypes . h \" # include \" Animation / AnimSequenceBase . h \" # include \" AnimStreamable . generated . h \" class UAnimSequence ; class UAnimCompress ; struct FCompactPose ; class FAnimStreamableChunk { public :)",
    "insertText": "FAnimStreamableChunk() : StartTime(0.f), SequenceLength(0.f), CompressedAnimSequence(nullptr)"
  },
  {
    "label": "FAnimStreamableChunk()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAnimStreamableChunk()"
  },
  {
    "label": "GetMemorySize()",
    "kind": "Method",
    "detail": "Function (delete CompressedAnimSequence ; CompressedAnimSequence = nullptr ; } } float StartTime ; float SequenceLength ; int32 NumFrames ; FCompressedAnimSequence* CompressedAnimSequence ; FByteBulkData BulkData ; SIZE_T)",
    "insertText": "GetMemorySize()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const SIZE_T ClassSize =)",
    "insertText": "sizeof(FAnimStreamableChunk)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SIZE_T CurrentSize = ClassSize ;)",
    "insertText": "if(CompressedAnimSequence)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} return CurrentSize ; } void)",
    "insertText": "Serialize(FArchive& Ar, UAnimStreamable* Owner, int32 ChunkIndex)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} ; class FStreamableAnimPlatformData { public : TArray<FAnimStreamableChunk> Chunks ; void)",
    "insertText": "Serialize(FArchive& Ar, class UAnimStreamable* Owner)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SIZE_T ChunkSize = 0 ;)",
    "insertText": "for(const FAnimStreamableChunk& Chunk : Chunks)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "sizeof(FStreamableAnimPlatformData)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(config=Engine, hidecategories=UObject, MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY(AssetRegistrySearchable)"
  },
  {
    "label": "HasRunningPlatformData()",
    "kind": "Method",
    "detail": "Function (TMap<const ITargetPlatform*,FStreamableAnimPlatformData*> StreamableAnimPlatformData ; FStreamableAnimPlatformData* RunningAnimPlatformData ; # else FStreamableAnimPlatformData RunningAnimPlatformData ; # endif bool)",
    "insertText": "HasRunningPlatformData()"
  },
  {
    "label": "GetRunningPlatformData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return RunningAnimPlatformData ! = nullptr ; # else return true ; # endif } FStreamableAnimPlatformData&)",
    "insertText": "GetRunningPlatformData()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "check(RunningAnimPlatformData)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "HandleAssetPlayerTickedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAssetPlayerTickedInternal(FAnimAssetTickContext &Context, const float PreviousTime, const float MoveDelta, const FAnimTickRecord &Instance, struct FAnimNotifyQueue& NotifyQueue)"
  },
  {
    "label": "GetAnimationPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationPose(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "GetNumberOfSampledKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfSampledKeys()"
  },
  {
    "label": "GetStreamingAnimPlatformData()",
    "kind": "Method",
    "detail": "Function (# endif FStreamableAnimPlatformData&)",
    "insertText": "GetStreamingAnimPlatformData(const ITargetPlatform* Platform)"
  },
  {
    "label": "GetChunkSizeSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetChunkSizeSeconds(const ITargetPlatform* Platform)"
  },
  {
    "label": "RequestCompressedData()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "RequestCompressedData(const ITargetPlatform* Platform=nullptr)"
  },
  {
    "label": "UpdateRawData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRawData()"
  },
  {
    "label": "GetBaseDDCKey()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBaseDDCKey(uint32 NumChunks, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "RequestCompressedDataForChunk()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS void)",
    "insertText": "RequestCompressedDataForChunk(const FString& ChunkDDCKey, FAnimStreamableChunk& Chunk, const int32 ChunkIndex, const uint32 FrameStart, const uint32 FrameEnd, TSharedRef<FAnimCompressContext> CompressContext, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetChunkIndexForTime()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS # endif bool bUseRawDataOnly ; int32)",
    "insertText": "GetChunkIndexForTime(const TArray<FAnimStreamableChunk>& Chunks, const float CurrentTime)"
  }
]