[
  {
    "label": "FVirtualTextureSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureSystem"
  },
  {
    "label": "FVirtualTextureSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTextureSpace"
  },
  {
    "label": "FVirtualTexturePhysicalSpace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualTexturePhysicalSpace"
  },
  {
    "label": "FMappedTexturePage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMappedTexturePage"
  },
  {
    "label": "FTexturePageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTexturePageMap"
  },
  {
    "label": "EPageListHead",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPageListHead"
  },
  {
    "label": "FPageEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageEntry"
  },
  {
    "label": "FTexturePage()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VirtualTextureShared . h \" # include \" Containers / BinaryHeap . h \" # include \" Containers / HashTable . h \" class FVirtualTextureSystem ; class FVirtualTextureSpace ; class FVirtualTexturePhysicalSpace ; union FTexturePage {)",
    "insertText": "FTexturePage() : Packed(~0u)"
  },
  {
    "label": "FTexturePage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTexturePage(uint8 InLogSize, uint32 InAddress) : vAddress(InAddress), vLogSize(InLogSize)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} uint32 Packed ; struct { uint32 vAddress : 2 4 ; uint32 vLogSize : 8 ; } ; } ;)",
    "insertText": "static_assert(sizeof(FTexturePage) == sizeof(uint32), \"Bad packing\")"
  },
  {
    "label": "FPhysicalSpaceIDAndAddress()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPhysicalSpaceIDAndAddress(uint16 InPhysicalSpaceID, uint16 InAddress) : PhysicalSpaceID(InPhysicalSpaceID), pAddress(InAddress)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32 Packed ; struct { uint16 PhysicalSpaceID ; uint16 pAddress ; } ; } ; bool)",
    "insertText": "operator(const FPhysicalSpaceIDAndAddress& Lhs, const FPhysicalSpaceIDAndAddress& Rhs)"
  },
  {
    "label": "FTexturePageMap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTexturePageMap()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(uint32 InSize, uint32 InLayerIndex, uint32 InDimensions)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "FindPageAddress()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "FindPageAddress(uint8 vLogSize, uint32 vAddress)"
  },
  {
    "label": "FindPagePhysicalSpaceIDAndAddress()",
    "kind": "Method",
    "detail": "Function (FPhysicalSpaceIDAndAddress)",
    "insertText": "FindPagePhysicalSpaceIDAndAddress(const FTexturePage& CheckPage, uint16 Hash)"
  },
  {
    "label": "FindPagePhysicalSpaceIDAndAddress()",
    "kind": "Method",
    "detail": "Function (FPhysicalSpaceIDAndAddress)",
    "insertText": "FindPagePhysicalSpaceIDAndAddress(uint8 vLogSize, uint32 vAddress)"
  },
  {
    "label": "FindNearestPageAddress()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindNearestPageAddress(uint8 vLogSize, uint32 vAddress)"
  },
  {
    "label": "FindNearestPageLevel()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindNearestPageLevel(uint8 vLogSize, uint32 vAddress)"
  },
  {
    "label": "UnmapPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapPage(FVirtualTextureSystem* System, FVirtualTextureSpace* Space, uint8 vLogSize, uint32 vAddress, bool bMapAncestorPage)"
  },
  {
    "label": "MapPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapPage(FVirtualTextureSpace* Space, FVirtualTexturePhysicalSpace* PhysicalSpace, uint32 PackedProducerHandle, uint8 MaxLevel, uint8 vLogSize, uint32 vAddress, uint8 Local_vLevel, uint16 pAddress)"
  },
  {
    "label": "GetMappedPagesInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMappedPagesInRange(uint32 vAddress, uint32 Width, uint32 Height, TArray<FMappedTexturePage>& OutMappedPages)"
  },
  {
    "label": "RefreshEntirePageTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshEntirePageTable(FVirtualTextureSystem* System, TArray< FPageTableUpdate >* Output)"
  },
  {
    "label": "ExpandPageTableUpdatePainters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandPageTableUpdatePainters(FVirtualTextureSystem* System, FPageTableUpdate Update, TArray< FPageTableUpdate >* Output)"
  },
  {
    "label": "ExpandPageTableUpdateMasked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandPageTableUpdateMasked(FVirtualTextureSystem* System, FPageTableUpdate Update, TArray< FPageTableUpdate >* Output)"
  },
  {
    "label": "InvalidateUnmappedRootPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateUnmappedRootPage(FVirtualTextureSpace* Space, FVirtualTexturePhysicalSpace* PhysicalSpace, uint32 PackedProducerHandle, uint8 MaxLevel, uint8 vLogSize, uint32 vAddress, uint8 Local_vLevel)"
  },
  {
    "label": "BuildSortedKeys()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BuildSortedKeys()"
  },
  {
    "label": "ReleaseUnmappedPages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUnmappedPages()"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "LowerBound(uint32 Min, uint32 Max, uint32 SearchKey, uint32 Mask)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "UpperBound(uint32 Min, uint32 Max, uint32 SearchKey, uint32 Mask)"
  },
  {
    "label": "EqualRange()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "EqualRange(uint32 Min, uint32 Max, uint32 SearchKey, uint32 Mask)"
  },
  {
    "label": "FindPageIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindPageIndex(uint8 vLogSize, uint32 vAddress)"
  },
  {
    "label": "FindNearestPageIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FindNearestPageIndex(uint8 vLogSize, uint32 vAddress, uint8 MaxLevel)"
  },
  {
    "label": "RemovePageFromList()",
    "kind": "Method",
    "detail": "Function (uint32 LayerIndex ; uint32 vDimensions ; enum EPageListHead { PageListHead_Free,PageListHead_Mapped,PageListHead_Unmapped,PageListHead_Count,} ; struct FPageEntry { FTexturePage Page ; uint32 NextIndex ; uint32 PrevIndex ; union { uint64 Packed ; struct { uint32 PackedProducerHandle ; uint32 pAddress : 1 6 ; uint32 PhysicalSpaceID : 8 ; uint32 MaxLevel : 4 ; uint32 Local_vLevel : 4 ; } ; } ; } ; void)",
    "insertText": "RemovePageFromList(uint32 Index)"
  },
  {
    "label": "AddPageToList()",
    "kind": "Method",
    "detail": "Function (FPageEntry& Page = Pages [ Index ] ; Pages [ Page . PrevIndex ] . NextIndex = Page . NextIndex ; Pages [ Page . NextIndex ] . PrevIndex = Page . PrevIndex ; Page . NextIndex = Page . PrevIndex = Index ; } void)",
    "insertText": "AddPageToList(uint32 HeadIndex, uint32 Index)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FPageEntry& Head = Pages [ HeadIndex ] ; FPageEntry& Page = Pages [ Index ] ;)",
    "insertText": "check(Index >= PageListHead_Count)"
  },
  {
    "label": "AcquirePage()",
    "kind": "Method",
    "detail": "Function (Page . NextIndex = HeadIndex ; Page . PrevIndex = Head . PrevIndex ; Pages [ Head . PrevIndex ] . NextIndex = Index ; Head . PrevIndex = Index ; } uint32)",
    "insertText": "AcquirePage()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FPageEntry& FreeHead = Pages [ PageListHead_Free ] ; uint32 Index = FreeHead . NextIndex ;)",
    "insertText": "if(Index != 0u)"
  },
  {
    "label": "RemovePageFromList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePageFromList(Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FPageEntry& Entry = Pages [ PageIndex ] ;)",
    "insertText": "if(Entry.Page == CheckPage)"
  },
  {
    "label": "FPhysicalSpaceIDAndAddress()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "FPhysicalSpaceIDAndAddress()"
  }
]