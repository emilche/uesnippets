[
  {
    "label": "FEntityManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntityManager"
  },
  {
    "label": "FComponentTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentTypeID"
  },
  {
    "label": "TComponentTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TComponentTypeID"
  },
  {
    "label": "FComponentMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentMask"
  },
  {
    "label": "FMovieSceneEntityID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEntityID"
  },
  {
    "label": "FEntityHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntityHandle"
  },
  {
    "label": "ComponentMaskDWORDSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / BitArray . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Guid . h \" # include \" Templates / TypeHash . h \" # include<initializer_list> namespace UE { namespace MovieScene { class FEntityManager ; struct FComponentTypeID ; template<T> struct TComponentTypeID ; int32 MaximumNumComponentsSupported = 2 5 6 ; int32)",
    "insertText": "ComponentMaskDWORDSize(MaximumNumComponentsSupported + 31)"
  },
  {
    "label": "FComponentMask()",
    "kind": "Method",
    "detail": "Function (using FComponentMaskAllocator = TFixedAllocator<ComponentMaskDWORDSize> ; using FComponentMaskIterator = TConstSetBitIterator<FComponentMaskAllocator> ; struct FComponentMask {)",
    "insertText": "FComponentMask()"
  },
  {
    "label": "FComponentMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FComponentMask(bool bValue, int32 InNum) : Bits(bValue, InNum)"
  },
  {
    "label": "FComponentMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FComponentMask(std::initializer_list<FComponentTypeID> InComponentTypes)"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAll(InComponentTypes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FBitReference)",
    "insertText": "operator(FComponentTypeID ComponentType)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (FComponentMaskIterator)",
    "insertText": "Iterate()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FComponentMask& Mask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FComponentMask& A, const FComponentMask& B)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (} FComponentMask&)",
    "insertText": "CombineWithBitwiseOR(const FComponentMask& Other, EBitwiseOperatorFlags InFlags)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "CombineWithBitwiseOR(Other.Bits, InFlags)"
  },
  {
    "label": "CombineWithBitwiseXOR()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "CombineWithBitwiseXOR(Other.Bits, InFlags)"
  },
  {
    "label": "CombineWithBitwiseAND()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "CombineWithBitwiseAND(Other.Bits, InFlags)"
  },
  {
    "label": "BitwiseAND()",
    "kind": "Method",
    "detail": "Function (FComponentMask Result ; Result . Bits = TBitArray<FComponentMaskAllocator)",
    "insertText": "BitwiseAND(A.Bits, B.Bits, InFlags)"
  },
  {
    "label": "BitwiseOR()",
    "kind": "Method",
    "detail": "Function (FComponentMask Result ; Result . Bits = TBitArray<FComponentMaskAllocator)",
    "insertText": "BitwiseOR(A.Bits, B.Bits, InFlags)"
  },
  {
    "label": "BitwiseXOR()",
    "kind": "Method",
    "detail": "Function (FComponentMask Result ; Result . Bits = TBitArray<FComponentMaskAllocator)",
    "insertText": "BitwiseXOR(A.Bits, B.Bits, InFlags)"
  },
  {
    "label": "BitwiseNOT()",
    "kind": "Method",
    "detail": "Function (FComponentMask Result = A ; Result . Bits .)",
    "insertText": "BitwiseNOT()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(FComponentTypeID InComponentType)"
  },
  {
    "label": "ContainsAll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsAll(const FComponentMask& InComponentMask)"
  },
  {
    "label": "ContainsAny()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsAny(const FComponentMask& InComponentMask)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FComponentTypeID InComponentType)"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAll(std::initializer_list<FComponentTypeID> InComponentTypes)"
  },
  {
    "label": "SetAllLenient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllLenient(std::initializer_list<FComponentTypeID> InComponentTypes)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FComponentTypeID InComponentType)"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (FComponentTypeID)",
    "insertText": "First()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "Reset()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Find(bool bValue)"
  },
  {
    "label": "NumComponents()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumComponents()"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PadToNum(int32 Num, bool bPadValue)"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "PadToNum(Num, bPadValue)"
  },
  {
    "label": "FComponentTypeID()",
    "kind": "Method",
    "detail": "Function (} private : TBitArray<FComponentMaskAllocator> Bits ; } ; struct FComponentTypeID {)",
    "insertText": "FComponentTypeID() : Value(INVALID)"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} FComponentTypeID)",
    "insertText": "Invalid()"
  },
  {
    "label": "FromBitIndex()",
    "kind": "Method",
    "detail": "Function (} FComponentTypeID)",
    "insertText": "FromBitIndex(int32 BitIndex)"
  },
  {
    "label": "ReinterpretCast()",
    "kind": "Method",
    "detail": "Function (} template<T> TComponentTypeID<T>)",
    "insertText": "ReinterpretCast()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "BitIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "BitIndex()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (FComponentMask Mask ; Mask .)",
    "insertText": "Set(A)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Mask .)",
    "insertText": "Set(B)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (} const uint16 INVALID =)",
    "insertText": "uint16(-1)"
  },
  {
    "label": "TComponentTypeID()",
    "kind": "Method",
    "detail": "Function (uint16 Value ; } ; template<T> struct TComponentTypeID : public FComponentTypeID { typedef T Type ;)",
    "insertText": "TComponentTypeID()"
  },
  {
    "label": "TComponentTypeID()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TComponentTypeID(uint16 InValue) : FComponentTypeID(InValue)"
  },
  {
    "label": "FMovieSceneEntityID()",
    "kind": "Method",
    "detail": "Function (} } ; struct FMovieSceneEntityID {)",
    "insertText": "FMovieSceneEntityID() : Value(INVALID)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FMovieSceneEntityID A, FMovieSceneEntityID B)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEntityID)",
    "insertText": "Max()"
  },
  {
    "label": "FromIndex()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEntityID)",
    "insertText": "FromIndex(int32 Index)"
  },
  {
    "label": "AsIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "AsIndex()"
  },
  {
    "label": "FEntityHandle()",
    "kind": "Method",
    "detail": "Function (uint16 Value ; } ; struct FEntityHandle {)",
    "insertText": "FEntityHandle() : HandleGeneration(0)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid(const FEntityManager&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(FEntityHandle A, FEntityHandle B)"
  },
  {
    "label": "GetEntityID()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEntityID)",
    "insertText": "GetEntityID()"
  },
  {
    "label": "PadToNum()",
    "kind": "Method",
    "detail": "Function (Bits .)",
    "insertText": "PadToNum(BitIndex + 1, false)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32 FirstBit = Bits .)",
    "insertText": "Find(true)"
  }
]