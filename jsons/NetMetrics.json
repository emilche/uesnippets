[
  {
    "label": "FNetMetric",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetMetric"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetMetrics"
  },
  {
    "label": "FNetMetric()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Containers / Map . h \" # include \" UObject / NameTypes . h \" # include \" Misc / AssertionMacros . h \" # include<type_traits> namespace UE::Net { struct FNetMetric { public : enum class EDataType { None,Unsigned,Signed,Double,} ; public :)",
    "insertText": "FNetMetric() : Double(0.0) , DataType(EDataType::None)"
  },
  {
    "label": "FNetMetric()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "FNetMetric(T InValue)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (DataType = EDataType::Signed ; Signed = InValue ; } else if)",
    "insertText": "constexpr(std::is_integral_v<T> && std::is_unsigned_v<T>)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (DataType = EDataType::Unsigned ; Unsigned = InValue ; } else if)",
    "insertText": "constexpr(std::is_floating_point_v<T>)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (DataType = EDataType::Double ; Double = InValue ; } } template<T> void)",
    "insertText": "Set(T InValue)"
  },
  {
    "label": "FNetMetric()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FNetMetric(InValue)"
  },
  {
    "label": "GetDataType()",
    "kind": "Method",
    "detail": "Function (} EDataType)",
    "insertText": "GetDataType()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Metrics .)",
    "insertText": "Emplace(InName, MoveTemp(InMetric))"
  },
  {
    "label": "AddMetric()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMetric(FName InName, const FNetMetric& InMetric)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Metrics .)",
    "insertText": "Add(InName, InMetric)"
  },
  {
    "label": "GetMetrics()",
    "kind": "Method",
    "detail": "Function (} const TMap<FName,FNetMetric>&)",
    "insertText": "GetMetrics()"
  }
]