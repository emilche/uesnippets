[
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_MIN_ELEMENT_H # define _LIBCPP___ALGORITHM_MIN_ELEMENT_H # include<__algorithm / comp . h> # include<__algorithm / comp_ref_type . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__iterator / iterator_traits . h> # include<__type_traits / is_callable . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD template <class _Comp, class _Iter, class _Sent, class _Proj> inline _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 _Iter __min_element(_Iter __first, _Sent __last, _Comp __comp, _Proj& __proj)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (_Iter __i = __first ;)",
    "insertText": "while(++__i != __last) if (std::__invoke(__comp, std::__invoke(__proj, *__i), std::__invoke(__proj, *__first)))"
  },
  {
    "label": "__identity()",
    "kind": "Method",
    "detail": "Function (auto __proj =)",
    "insertText": "__identity()"
  },
  {
    "label": "min_element()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator,class _Compare> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 _ForwardIterator)",
    "insertText": "min_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)"
  },
  {
    "label": "_Comp_ref()",
    "kind": "Method",
    "detail": "Function (typedef __comp_ref_type<_Compare>::type _Comp_ref ; return std::__min_element<)",
    "insertText": "_Comp_ref(std::move(__first), std::move(__last), __comp)"
  },
  {
    "label": "min_element()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 _ForwardIterator)",
    "insertText": "min_element(_ForwardIterator __first, _ForwardIterator __last)"
  }
]