[
  {
    "label": "PacketArrivalTimeMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketArrivalTimeMap"
  },
  {
    "label": "PacketArrivalTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketArrivalTime"
  },
  {
    "label": "kMaxNumberOfPackets()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_REMOTE_BITRATE_ESTIMATOR_PACKET_ARRIVAL_MAP_H_ # define MODULES_REMOTE_BITRATE_ESTIMATOR_PACKET_ARRIVAL_MAP_H_ # include<algorithm> # include<cstddef> # include<cstdint> # include<memory> # include \" api / units / timestamp . h \" # include \" rtc_base / checks . h \" namespace webrtc { class PacketArrivalTimeMap { public : struct PacketArrivalTime { Timestamp arrival_time ; int64_t sequence_number ; } ; int)",
    "insertText": "kMaxNumberOfPackets(1 << 15)"
  },
  {
    "label": "PacketArrivalTimeMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketArrivalTimeMap()"
  },
  {
    "label": "PacketArrivalTimeMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketArrivalTimeMap(const PacketArrivalTimeMap&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PacketArrivalTimeMap&)",
    "insertText": "operator(const PacketArrivalTimeMap&)"
  },
  {
    "label": "has_received()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "has_received(int64_t sequence_number)"
  },
  {
    "label": "begin_sequence_number()",
    "kind": "Method",
    "detail": "Function (} int64_t)",
    "insertText": "begin_sequence_number()"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(sequence_number, begin_sequence_number())"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(sequence_number, end_sequence_number())"
  },
  {
    "label": "FindNextAtOrAfter()",
    "kind": "Method",
    "detail": "Function (} PacketArrivalTime)",
    "insertText": "FindNextAtOrAfter(int64_t sequence_number)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Timestamp t = arrival_times_ [)",
    "insertText": "Index(sequence_number)"
  },
  {
    "label": "EraseTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EraseTo(int64_t sequence_number)"
  },
  {
    "label": "AddPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacket(int64_t sequence_number, Timestamp arrival_time)"
  },
  {
    "label": "RemoveOldPackets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveOldPackets(int64_t sequence_number, Timestamp arrival_time_limit)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (private : int kMinCapacity = 1 2 8 ; int)",
    "insertText": "Index(int64_t sequence_number)"
  },
  {
    "label": "TrimLeadingNotReceivedEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimLeadingNotReceivedEntries()"
  },
  {
    "label": "AdjustToSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustToSize(int new_size)"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reallocate(int new_capacity)"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "capacity()"
  }
]