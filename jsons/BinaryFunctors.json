[
  {
    "label": "binary_op_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "binary_op_base"
  },
  {
    "label": "scalar_sum_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_sum_op"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "scalar_product_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_product_op"
  },
  {
    "label": "scalar_conj_product_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_conj_product_op"
  },
  {
    "label": "scalar_min_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_min_op"
  },
  {
    "label": "scalar_max_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_max_op"
  },
  {
    "label": "scalar_cmp_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_cmp_op"
  },
  {
    "label": "result_of",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "result_of"
  },
  {
    "label": "scalar_hypot_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_hypot_op"
  },
  {
    "label": "scalar_pow_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_pow_op"
  },
  {
    "label": "scalar_difference_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_difference_op"
  },
  {
    "label": "scalar_quotient_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_quotient_op"
  },
  {
    "label": "scalar_boolean_and_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_boolean_and_op"
  },
  {
    "label": "scalar_boolean_or_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_boolean_or_op"
  },
  {
    "label": "scalar_boolean_xor_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_boolean_xor_op"
  },
  {
    "label": "scalar_absolute_difference_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "scalar_absolute_difference_op"
  },
  {
    "label": "bind1st_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bind1st_op"
  },
  {
    "label": "bind2nd_op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bind2nd_op"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BINARY_FUNCTORS_H # define EIGEN_BINARY_FUNCTORS_H namespace Eigen { namespace internal { template<Arg1,Arg2> struct binary_op_base { typedef Arg1 first_argument_type ; typedef Arg2 second_argument_type ; } ; template<LhsScalar,RhsScalar> struct scalar_sum_op : binary_op_base<LhsScalar,RhsScalar> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_sum_op>::ReturnType result_type ; # ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_sum_op) #else scalar_sum_op()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EIGEN_SCALAR_BINARY_OP_PLUGIN } # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type)",
    "insertText": "operator() (const LhsScalar& a, const RhsScalar& b)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type)",
    "insertText": "predux(const Packet& a)"
  },
  {
    "label": "Cost()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsScalar,RhsScalar> struct functor_traits<scalar_sum_op<LhsScalar,RhsScalar>> { enum {)",
    "insertText": "Cost(int(NumTraits<LhsScalar>::AddCost) + int(NumTraits<RhsScalar>::AddCost))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool scalar_sum_op<bool,bool)",
    "insertText": "operator() (const bool& a, const bool& b)"
  },
  {
    "label": "Cost()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsScalar,RhsScalar> struct functor_traits<scalar_product_op<LhsScalar,RhsScalar>> { enum {)",
    "insertText": "Cost(int(NumTraits<LhsScalar>::MulCost) + int(NumTraits<RhsScalar>::MulCost))"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Packet)",
    "insertText": "packetOp(const Packet& a, const Packet& b)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsScalar,RhsScalar> struct functor_traits<scalar_conj_product_op<LhsScalar,RhsScalar>> { enum { Cost = NumTraits<LhsScalar>::MulCost,PacketAccess = internal::is_same<LhsScalar,RhsScalar>::value&& packet_traits<LhsScalar>::HasMul } ; } ; template<LhsScalar,RhsScalar,int NaNPropagation> struct scalar_min_op : binary_op_base<LhsScalar,RhsScalar> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_min_op>::ReturnType result_type ;)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_min_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b)"
  },
  {
    "label": "Cost()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsScalar,RhsScalar,int NaNPropagation> struct functor_traits<scalar_min_op<LhsScalar,RhsScalar,NaNPropagation>> { enum {)",
    "insertText": "Cost(NumTraits<LhsScalar>::AddCost+NumTraits<RhsScalar>::AddCost)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} ; template<LhsScalar,RhsScalar,int NaNPropagation> struct scalar_max_op : binary_op_base<LhsScalar,RhsScalar> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_max_op>::ReturnType result_type ;)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_max_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE result_type operator() (const LhsScalar& a, const RhsScalar& b)"
  },
  {
    "label": "Cmp()",
    "kind": "Method",
    "detail": "Function (} ; template<ComparisonName Cmp,LhsScalar,RhsScalar> struct result_of<scalar_cmp_op<LhsScalar,RhsScalar,)",
    "insertText": "Cmp(LhsScalar,RhsScalar)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (typedef bool type ; } ; template<LhsScalar,RhsScalar> struct scalar_cmp_op<LhsScalar,RhsScalar,cmp_EQ> : binary_op_base<LhsScalar,RhsScalar> { typedef bool result_type ;)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_cmp_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator()(const LhsScalar& a, const RhsScalar& b)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar> struct functor_traits<scalar_hypot_op<Scalar,Scalar>> { enum { Cost = 3* NumTraits<Scalar>::AddCost + 2* NumTraits<Scalar>::MulCost + 2* scalar_div_cost<Scalar,false>::value,PacketAccess = false } ; } ; template<Scalar,Exponent> struct scalar_pow_op : binary_op_base<Scalar,Exponent> { typedef ScalarBinaryOpTraits<Scalar,Exponent,scalar_pow_op>::ReturnType result_type ; # ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_pow_op) #else scalar_pow_op()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (typedef Scalar LhsScalar ; typedef Exponent RhsScalar ; EIGEN_SCALAR_BINARY_OP_PLUGIN } # endif EIGEN_DEVICE_FUNC result_type)",
    "insertText": "operator() (const Scalar& a, const Exponent& b)"
  },
  {
    "label": "PacketAccess()",
    "kind": "Method",
    "detail": "Function (} } ; template<Scalar,Exponent> struct functor_traits<scalar_pow_op<Scalar,Exponent>> { enum { Cost = 5* NumTraits<Scalar>::MulCost,)",
    "insertText": "PacketAccess(!NumTraits<Scalar>::IsComplex && !NumTraits<Scalar>::IsInteger && packet_traits<Scalar>::HasExp && packet_traits<Scalar>::HasLog && packet_traits<Scalar>::HasRound && packet_traits<Scalar>::HasCmp && !is_same<Scalar, half>::value && !is_same<Scalar, bfloat16>::value)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} ; template<LhsScalar,RhsScalar> struct scalar_difference_op : binary_op_base<LhsScalar,RhsScalar> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_difference_op>::ReturnType result_type ; # ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_difference_op) #else scalar_difference_op()"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} ; template<LhsScalar,RhsScalar> struct scalar_quotient_op : binary_op_base<LhsScalar,RhsScalar> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_quotient_op>::ReturnType result_type ; # ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_quotient_op) #else scalar_quotient_op()"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<LhsScalar,RhsScalar> struct functor_traits<scalar_quotient_op<LhsScalar,RhsScalar>> { typedef scalar_quotient_op<LhsScalar,RhsScalar>::result_type result_type ; enum { PacketAccess = is_same<LhsScalar,RhsScalar>::value&& packet_traits<LhsScalar>::HasDiv&& packet_traits<RhsScalar>::HasDiv,Cost = scalar_div_cost<result_type,PacketAccess>::value } ; } ; struct scalar_boolean_and_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_boolean_and_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct functor_traits<scalar_boolean_and_op> { enum { Cost = NumTraits<bool>::AddCost,PacketAccess = true } ; } ; struct scalar_boolean_or_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_boolean_or_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct functor_traits<scalar_boolean_or_op> { enum { Cost = NumTraits<bool>::AddCost,PacketAccess = true } ; } ; struct scalar_boolean_xor_op {)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_boolean_xor_op) EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE bool operator() (const bool& a, const bool& b)"
  },
  {
    "label": "EIGEN_EMPTY_STRUCT_CTOR()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct functor_traits<scalar_boolean_xor_op> { enum { Cost = NumTraits<bool>::AddCost,PacketAccess = true } ; } ; template<LhsScalar,RhsScalar> struct scalar_absolute_difference_op : binary_op_base<LhsScalar,RhsScalar> { typedef ScalarBinaryOpTraits<LhsScalar,RhsScalar,scalar_absolute_difference_op>::ReturnType result_type ; # ifndef EIGEN_SCALAR_BINARY_OP_PLUGIN)",
    "insertText": "EIGEN_EMPTY_STRUCT_CTOR(scalar_absolute_difference_op) #else scalar_absolute_difference_op()"
  },
  {
    "label": "bind1st_op()",
    "kind": "Method",
    "detail": "Function (} ; template<BinaryOp> struct bind1st_op : BinaryOp { typedef BinaryOp::first_argument_type first_argument_type ; typedef BinaryOp::second_argument_type second_argument_type ; typedef BinaryOp::result_type result_type ; EIGEN_DEVICE_FUNC)",
    "insertText": "bind1st_op(const first_argument_type &val) : m_value(val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type)",
    "insertText": "operator() (const second_argument_type& b)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet)",
    "insertText": "packetOp(const Packet& b)"
  },
  {
    "label": "bind2nd_op()",
    "kind": "Method",
    "detail": "Function (} first_argument_type m_value ; } ; template<BinaryOp> struct functor_traits<bind1st_op<BinaryOp>> : functor_traits<BinaryOp> { } ; template<BinaryOp> struct bind2nd_op : BinaryOp { typedef BinaryOp::first_argument_type first_argument_type ; typedef BinaryOp::second_argument_type second_argument_type ; typedef BinaryOp::result_type result_type ; EIGEN_DEVICE_FUNC)",
    "insertText": "bind2nd_op(const second_argument_type &val) : m_value(val)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const result_type)",
    "insertText": "operator() (const first_argument_type& a)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} template<Packet> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Packet)",
    "insertText": "packetOp(const Packet& a)"
  }
]