[
  {
    "label": "VartypeToNativeType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VartypeToNativeType"
  },
  {
    "label": "VariantUtil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariantUtil"
  },
  {
    "label": "VarTypeIsConvertibleTo()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_WIN_VARIANT_UTIL_H_ # define BASE_WIN_VARIANT_UTIL_H_ # include \" base / logging . h \" namespace base { namespace win { namespace internal { bool)",
    "insertText": "VarTypeIsConvertibleTo(VARTYPE self, VARTYPE other)"
  },
  {
    "label": "IsConvertibleTo()",
    "kind": "Method",
    "detail": "Function (} template<VARTYPE ElementVartype> struct VartypeToNativeType final { } ; template<> struct VartypeToNativeType<VT_BOOL> final { using Type = VARIANT_BOOL ; VARIANT_BOOL VARIANT::* kMemberOffset =& VARIANT::boolVal ; } ; template<> struct VartypeToNativeType<VT_I1> final { using Type = int8_t ; CHAR VARIANT::* kMemberOffset =& VARIANT::cVal ; } ; template<> struct VartypeToNativeType<VT_UI1> final { using Type = uint8_t ; BYTE VARIANT::* kMemberOffset =& VARIANT::bVal ; } ; template<> struct VartypeToNativeType<VT_I2> final { using Type = int16_t ; SHORT VARIANT::* kMemberOffset =& VARIANT::iVal ; } ; template<> struct VartypeToNativeType<VT_UI2> final { using Type = uint16_t ; USHORT VARIANT::* kMemberOffset =& VARIANT::uiVal ; } ; template<> struct VartypeToNativeType<VT_I4> final { using Type = int32_t ; LONG VARIANT::* kMemberOffset =& VARIANT::lVal ; } ; template<> struct VartypeToNativeType<VT_UI4> final { using Type = uint32_t ; ULONG VARIANT::* kMemberOffset =& VARIANT::ulVal ; } ; template<> struct VartypeToNativeType<VT_I8> final { using Type = int64_t ; LONGLONG VARIANT::* kMemberOffset =& VARIANT::llVal ; } ; template<> struct VartypeToNativeType<VT_UI8> final { using Type = uint64_t ; ULONGLONG VARIANT::* kMemberOffset =& VARIANT::ullVal ; } ; template<> struct VartypeToNativeType<VT_R4> final { using Type = float ; FLOAT VARIANT::* kMemberOffset =& VARIANT::fltVal ; } ; template<> struct VartypeToNativeType<VT_R8> final { using Type = double ; DOUBLE VARIANT::* kMemberOffset =& VARIANT::dblVal ; } ; template<> struct VartypeToNativeType<VT_DATE> final { using Type = DATE ; DATE VARIANT::* kMemberOffset =& VARIANT::date ; } ; template<> struct VartypeToNativeType<VT_BSTR> final { using Type = BSTR ; BSTR VARIANT::* kMemberOffset =& VARIANT::bstrVal ; } ; template<> struct VartypeToNativeType<VT_UNKNOWN> final { using Type = IUnknown* ; IUnknown* VARIANT::* kMemberOffset =& VARIANT::punkVal ; } ; template<> struct VartypeToNativeType<VT_DISPATCH> final { using Type = IDispatch* ; IDispatch* VARIANT::* kMemberOffset =& VARIANT::pdispVal ; } ; template<VARTYPE ElementVartype> struct VariantUtil final { using Type = VartypeToNativeType<ElementVartype>::Type ; bool)",
    "insertText": "IsConvertibleTo(VARTYPE vartype)"
  },
  {
    "label": "IsConvertibleFrom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsConvertibleFrom(VARTYPE vartype)"
  },
  {
    "label": "RawGet()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "RawGet(const VARIANT& var)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsConvertibleFrom(V_VT(&var)))"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(IsConvertibleTo(V_VT(var)))"
  }
]