[
  {
    "label": "TSegment2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSegment2"
  },
  {
    "label": "TSegment3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSegment3"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMath . h \" # include \" VectorTypes . h \" # include \" BoxTypes . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<T> struct TSegment2 { public : TVector2<T> Center = TVector2<T)",
    "insertText": "Zero()"
  },
  {
    "label": "UnitX()",
    "kind": "Method",
    "detail": "Function (TVector2<T> Direction = TVector2<T)",
    "insertText": "UnitX()"
  },
  {
    "label": "Extent()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Extent(T)"
  },
  {
    "label": "TSegment2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSegment2()"
  },
  {
    "label": "TSegment2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSegment2(const TVector2<T>& Point0, const TVector2<T>& Point1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Center =)",
    "insertText": "T(.5) * (Point0 + Point1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Direction = Point1 - Point0 ; Extent =)",
    "insertText": "T(.5) * Normalize(Direction)"
  },
  {
    "label": "TSegment2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSegment2(const TVector2<T>& CenterIn, const TVector2<T>& DirectionIn, T ExtentIn)"
  },
  {
    "label": "SetStartPoint()",
    "kind": "Method",
    "detail": "Function (Center = CenterIn ; Direction = DirectionIn ; Extent = ExtentIn ; } void)",
    "insertText": "SetStartPoint(const TVector2<T>& Point)"
  },
  {
    "label": "update_from_endpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update_from_endpoints(Point, EndPoint())"
  },
  {
    "label": "SetEndPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEndPoint(const TVector2<T>& Point)"
  },
  {
    "label": "update_from_endpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update_from_endpoints(StartPoint(), Point)"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reverse()"
  },
  {
    "label": "update_from_endpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update_from_endpoints(EndPoint(), StartPoint())"
  },
  {
    "label": "StartPoint()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "StartPoint()"
  },
  {
    "label": "GetPointFromIndex()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "GetPointFromIndex(int i)"
  },
  {
    "label": "PointAt()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "PointAt(T DistanceParameter)"
  },
  {
    "label": "ConvertToUnitRange()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "ConvertToUnitRange(T DistanceParameter)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistanceSquared(const TVector2<T>& Point)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (T DistParameter ; return)",
    "insertText": "DistanceSquared(Point, DistParameter)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistanceSquared(const TVector2<T>& Point, T& DistParameterOut)"
  },
  {
    "label": "DistParameterOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DistParameterOut(Point - Center).Dot(Direction)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (DistParameterOut = Extent ; return UE::)",
    "insertText": "DistanceSquared(Point, EndPoint())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(DistParameterOut <= -Extent)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (DistParameterOut = - Extent ; return UE::)",
    "insertText": "DistanceSquared(Point, StartPoint())"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} TVector2<T> ProjectedPt = Center + DistParameterOut* Direction ; return UE::)",
    "insertText": "DistanceSquared(ProjectedPt, Point)"
  },
  {
    "label": "NearestPoint()",
    "kind": "Method",
    "detail": "Function (} TVector2<T>)",
    "insertText": "NearestPoint(const TVector2<T>& QueryPoint)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "t(QueryPoint - Center).Dot(Direction)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(t <= -Extent)"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (} return Center + t* Direction ; } T)",
    "insertText": "Project(const TVector2<T>& QueryPoint)"
  },
  {
    "label": "ProjectUnitRange()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "ProjectUnitRange(const TVector2<T>& QueryPoint)"
  },
  {
    "label": "ProjT()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "ProjT(QueryPoint - Center).Dot(Direction)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "Alpha((ProjT / Extent) + (T)1) * (T)"
  },
  {
    "label": "GetSide()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetSide(const TVector2<T>& QueryPoint, T Tolerance = 0)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (TVector2<T> StartPt = Center - Extent* Direction ; TVector2<T> AQ = QueryPoint - StartPt ; double Dist =)",
    "insertText": "DotPerp(AQ, Direction)"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (TVector2<T> EndPt = Center + Extent* Direction ; TVector2<T> StartPt = Center - Extent* Direction ; T det = -)",
    "insertText": "Orient(EndPt, StartPt, QueryPoint)"
  },
  {
    "label": "Intersects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Intersects(const TSegment2<T>& OtherSegment, T DotThresh = TMathUtil<T>::Epsilon, T IntervalThresh = 0)"
  },
  {
    "label": "IsPointCount()",
    "kind": "Method",
    "detail": "Function (bool bIsPoint = Extent = = 0 ; bool bIsPointOther = OtherSegment . Extent = = 0 ; int)",
    "insertText": "IsPointCount(int)bIsPoint + (int)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(IsPointCount == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T DistSq ;)",
    "insertText": "if(bIsPoint)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (DistSq = OtherSegment .)",
    "insertText": "DistanceSquared(Center)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} else { DistSq =)",
    "insertText": "DistanceSquared(OtherSegment.Center)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (} return DistSq<= IntervalThresh* IntervalThresh ; } TVector2<T> diff = OtherSegment . Center - Center ; T D0DotPerpD1 =)",
    "insertText": "DotPerp(Direction, OtherSegment.Direction)"
  },
  {
    "label": "invD0DotPerpD1()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "invD0DotPerpD1((T)1)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (T diffDotPerpD0 =)",
    "insertText": "DotPerp(diff, Direction)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (T diffDotPerpD1 =)",
    "insertText": "DotPerp(diff, OtherSegment.Direction)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (T s = diffDotPerpD1* invD0DotPerpD1 ; T s2 = diffDotPerpD0* invD0DotPerpD1 ; return TMathUtil<T)",
    "insertText": "Abs(s) <= (Extent + IntervalThresh) && TMathUtil<T>::Abs(s2) <= (OtherSegment.Extent + IntervalThresh)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Normalize(diff)"
  },
  {
    "label": "Dot()",
    "kind": "Method",
    "detail": "Function (diff = OtherSegment . Center - Center ; T t1 = Direction .)",
    "insertText": "Dot(diff)"
  },
  {
    "label": "extents()",
    "kind": "Method",
    "detail": "Function (T tmin = t1 - OtherSegment . Extent ; T tmax = t1 + OtherSegment . Extent ; TInterval1<T>)",
    "insertText": "extents(-Extent, Extent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T vx = EndPt . X - StartPt . X,vy = EndPt . Y - StartPt . Y ; T len2 = vx* vx + vy* vy ; T dx = QueryPt . X - StartPt . X,dy = QueryPt . Y - StartPt . Y ;)",
    "insertText": "if(len2 < Tolerance)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (dx = QueryPt . X - EndPt . X ; dy = QueryPt . Y - EndPt . Y ; return dx* dx + dy* dy ; } dx = QueryPt .)",
    "insertText": "X(StartPt.X + ((t * vx) / len2))"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (dy = QueryPt .)",
    "insertText": "Y(StartPt.Y + ((t * vy) / len2))"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (TVector2<T> AB = EndPt - StartPt ; T DotPerpResult =)",
    "insertText": "DotPerp(QueryPt - StartPt, AB)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (} T LengthSquared = AB .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "Orient()",
    "kind": "Method",
    "detail": "Function (T det = -)",
    "insertText": "Orient(StartPt, EndPt, QueryPt)"
  },
  {
    "label": "IsOnSegment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOnSegment(const TVector2<T>& A, const TVector2<T>& B, const TVector2<T>& QueryPt, T Tolerance = (T)0)"
  },
  {
    "label": "SquaredLength()",
    "kind": "Method",
    "detail": "Function (const TVector2<T> AB = B - A ; T SquaredLength = AB .)",
    "insertText": "SquaredLength()"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} T DotTolerance =)",
    "insertText": "Sqrt(SquaredLength)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const TVector2<T> AQ = QueryPt - A ;)",
    "insertText": "if(FMath::Abs(DotPerp(AB, AQ)) > DotTolerance)"
  },
  {
    "label": "update_from_endpoints()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "update_from_endpoints(const TVector2<T>& p0, const TVector2<T>& p1)"
  },
  {
    "label": "Center()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Center(p0 + p1)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (Direction = p1 - p0 ; Extent = 0 . 5*)",
    "insertText": "Normalize(Direction)"
  },
  {
    "label": "TSegment3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSegment3()"
  },
  {
    "label": "TSegment3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSegment3(const TVector<T>& Point0, const TVector<T>& Point1)"
  },
  {
    "label": "TSegment3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSegment3(const TVector<T>& CenterIn, const TVector<T>& DirectionIn, T ExtentIn)"
  },
  {
    "label": "SetStartPoint()",
    "kind": "Method",
    "detail": "Function (Center = CenterIn ; Direction = DirectionIn ; Extent = ExtentIn ; } void)",
    "insertText": "SetStartPoint(const TVector<T>& Point)"
  },
  {
    "label": "SetEndPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEndPoint(const TVector<T>& Point)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistanceSquared(const TVector<T>& Point)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "DistanceSquared(const TVector<T>& Point, T& DistParameterOut)"
  },
  {
    "label": "NearestPoint()",
    "kind": "Method",
    "detail": "Function (} TVector<T>)",
    "insertText": "NearestPoint(const TVector<T>& QueryPoint)"
  },
  {
    "label": "Project()",
    "kind": "Method",
    "detail": "Function (} return Center + t* Direction ; } T)",
    "insertText": "Project(const TVector<T>& QueryPoint)"
  },
  {
    "label": "ProjectUnitRange()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "ProjectUnitRange(const TVector<T>& QueryPoint)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} TAxisAlignedBox3<T>)",
    "insertText": "GetBounds()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TAxisAlignedBox3<T> Result ;)",
    "insertText": "for(int32 j = 0; j < 3; ++j)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (T LowValue = Center [ j ] - Extent* Direction [ j ] ; T HighValue = Center [ j ] + Extent* Direction [ j ] ; Result . Min [ j ] = TMathUtil<T)",
    "insertText": "Min(LowValue, HighValue)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Result . Max [ j ] = TMathUtil<T)",
    "insertText": "Max(LowValue, HighValue)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (} return Result ; } TAxisAlignedBox3<T>)",
    "insertText": "GetBounds(T SegmentRadius)"
  },
  {
    "label": "Expand()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Expand(SegmentRadius)"
  }
]