[
  {
    "label": "FLinearCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinearCurve"
  },
  {
    "label": "FLinearCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Math / Vector2D . h \" namespace Audio { class FLinearCurve { public :)",
    "insertText": "FLinearCurve()"
  },
  {
    "label": "FLinearCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLinearCurve(const TArray<FVector2D>& InCurve)"
  },
  {
    "label": "FLinearCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLinearCurve(TArray<FVector2D>&& InCurve)"
  },
  {
    "label": "SetCurvePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurvePoints(const TArray<FVector2D>& InPoints)"
  },
  {
    "label": "SetCurvePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurvePoints(TArray<FVector2D>&& InPoints)"
  },
  {
    "label": "ClearPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPoints()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPoint(const FVector2D& InPoint)"
  },
  {
    "label": "AddPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPoints(const TArray<FVector2D>& InPoints)"
  },
  {
    "label": "GetCurvePoints()",
    "kind": "Method",
    "detail": "Function (const TArray<FVector2D>&)",
    "insertText": "GetCurvePoints()"
  },
  {
    "label": "Eval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Eval(float InDomain, float& OutValue)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Sort()"
  }
]