[
  {
    "label": "FAnalyzerNRTParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyzerNRTParameters"
  },
  {
    "label": "IAnalyzerNRTSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerNRTSettings"
  },
  {
    "label": "IAnalyzerNRTResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerNRTResult"
  },
  {
    "label": "IAnalyzerNRTWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerNRTWorker"
  },
  {
    "label": "IAnalyzerNRTFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzerNRTFactory"
  },
  {
    "label": "FAnalyzerNRTParameters()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Features / IModularFeature . h \" # include \" Serialization / BitReader . h \" # include \" Serialization / BitWriter . h \" namespace Audio { struct FAnalyzerNRTParameters { public : float SampleRate ; int32 NumChannels ;)",
    "insertText": "FAnalyzerNRTParameters(float InSampleRate=0.0f, int32 InNumChannels=0) : SampleRate(InSampleRate) , NumChannels(InNumChannels)"
  },
  {
    "label": "IAnalyzerNRTSettings()",
    "kind": "Method",
    "detail": "Function (} } ; class IAnalyzerNRTSettings { public : ~)",
    "insertText": "IAnalyzerNRTSettings()"
  },
  {
    "label": "IAnalyzerNRTResult()",
    "kind": "Method",
    "detail": "Function (} ; } ; class IAnalyzerNRTResult { public : ~)",
    "insertText": "IAnalyzerNRTResult()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Serialize(FArchive& Archive)"
  },
  {
    "label": "CopyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFrom(IAnalyzerNRTResult* SourceResult)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (FBitWriter SerializedResult ; SourceResult ->)",
    "insertText": "Serialize(SerializedResult)"
  },
  {
    "label": "FBitReader()",
    "kind": "Method",
    "detail": "Function (FBitReader DeserializedResult =)",
    "insertText": "FBitReader(SerializedResult.GetData(), SerializedResult.GetNumBytes() * 8)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(DeserializedResult)"
  },
  {
    "label": "GetDurationInSeconds()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDurationInSeconds()"
  },
  {
    "label": "IAnalyzerNRTWorker()",
    "kind": "Method",
    "detail": "Function (} ; class IAnalyzerNRTWorker { public : ~)",
    "insertText": "IAnalyzerNRTWorker()"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Analyze(TArrayView<const float> InAudio, IAnalyzerNRTResult* OutResult)"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize(IAnalyzerNRTResult* OutResult)"
  },
  {
    "label": "IAnalyzerNRTFactory()",
    "kind": "Method",
    "detail": "Function (} ; class IAnalyzerNRTFactory : public IModularFeature { public : ~)",
    "insertText": "IAnalyzerNRTFactory()"
  },
  {
    "label": "GetModularFeatureName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetModularFeatureName()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (FName AudioExtFeatureName =)",
    "insertText": "FName(TEXT(\"AudioAnalyzerNRTPlugin\"))"
  },
  {
    "label": "GetTitle()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTitle()"
  },
  {
    "label": "NewResult()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IAnalyzerNRTResult>)",
    "insertText": "NewResult()"
  },
  {
    "label": "NewResultShared()",
    "kind": "Method",
    "detail": "Function (template<ESPMode Mode = ESPMode::ThreadSafe> TSharedPtr<IAnalyzerNRTResult,Mode>)",
    "insertText": "NewResultShared()"
  },
  {
    "label": "NewWorker()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<IAnalyzerNRTWorker>)",
    "insertText": "NewWorker(const FAnalyzerNRTParameters& InParams, const IAnalyzerNRTSettings* InSettings)"
  }
]