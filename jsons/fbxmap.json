[
  {
    "label": "FbxObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxObject"
  },
  {
    "label": "FbxLessCompare",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FbxLessCompare"
  },
  {
    "label": "FbxMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxMap"
  },
  {
    "label": "KeyValuePair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "KeyValuePair"
  },
  {
    "label": "Key",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Key"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Compare"
  },
  {
    "label": "FbxSimpleMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxSimpleMap"
  },
  {
    "label": "FbxObjectMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxObjectMap"
  },
  {
    "label": "FbxObjectStringMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxObjectStringMap"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_BASE_MAP_H_ # define _FBXSDK_CORE_BASE_MAP_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxstring . h> # include<fbxsdk / core / base / fbxredblacktree . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxObject ; template<Type> struct FbxLessCompare { int)",
    "insertText": "operator()(const Type& pLeft, const Type& pRight)"
  },
  {
    "label": "KeyValuePair()",
    "kind": "Method",
    "detail": "Function (} } ; template<Key,Type,Compare = FbxLessCompare<Key>,Allocator = FbxBaseAllocator> class FbxMap { protected : class KeyValuePair : private FbxPair<const Key,Type> { # ifndef DOXYGEN_SHOULD_SKIP_THIS public : typedef const Key KeyType ; typedef const Key ConstKeyType ; typedef Type ValueType ; typedef const Type ConstValueType ;)",
    "insertText": "KeyValuePair(const Key& pFirst, const Type& pSecond) : FbxPair<const Key, Type>(pFirst, pSecond)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} ConstKeyType&)",
    "insertText": "GetKey()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (mTree .)",
    "insertText": "Reserve(pRecordCount)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetSize()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} FbxPair<RecordType*,bool>)",
    "insertText": "Insert(const KeyType& pKey, const ValueType& pValue)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Remove(const KeyType& pKey)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Empty()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "Begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "End()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} const RecordType*)",
    "insertText": "Find(const KeyType& pKey)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (} const RecordType*)",
    "insertText": "UpperBound(const KeyType& pKey)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueType&)",
    "insertText": "operator(const KeyType& pKey)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (RecordType* lRecord =)",
    "insertText": "Find(pKey)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (lRecord =)",
    "insertText": "Insert(pKey, ValueType())"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} return lRecord ->)",
    "insertText": "GetValue()"
  },
  {
    "label": "Minimum()",
    "kind": "Method",
    "detail": "Function (} const RecordType*)",
    "insertText": "Minimum()"
  },
  {
    "label": "Maximum()",
    "kind": "Method",
    "detail": "Function (} const RecordType*)",
    "insertText": "Maximum()"
  },
  {
    "label": "FbxMap()",
    "kind": "Method",
    "detail": "Function (} # ifndef DOXYGEN_SHOULD_SKIP_THIS)",
    "insertText": "FbxMap()"
  },
  {
    "label": "FbxMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxMap(const FbxMap& pMap) : mTree(pMap.mTree)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} private : StorageType mTree ; # endif } ; template<class Key,class Type,class Compare> class FbxSimpleMap { public : typedef FbxMap<Key,Type,Compare>::RecordType* Iterator ; void)",
    "insertText": "Add(const Key& pKey, const Type& pValue)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (mMap .)",
    "insertText": "Insert(pKey, pValue)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "Find(const Key& pKey)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "Find(const Type& pValue)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (Iterator lIterator =)",
    "insertText": "GetFirst()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } void)",
    "insertText": "Remove(Iterator pIterator)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "GetNext(Iterator pIterator)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int pSize)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (mMap .)",
    "insertText": "Reserve(pSize)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetCount()"
  },
  {
    "label": "FbxSimpleMap()",
    "kind": "Method",
    "detail": "Function (} # ifndef DOXYGEN_SHOULD_SKIP_THIS)",
    "insertText": "FbxSimpleMap()"
  },
  {
    "label": "FbxObjectMap()",
    "kind": "Method",
    "detail": "Function (} private : FbxMap<Key,Type,Compare> mMap ; # endif } ; template<class Type,class Compare> class FbxObjectMap : public FbxSimpleMap<Type,FbxObject*,Compare> { public :)",
    "insertText": "FbxObjectMap()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} FbxObject*)",
    "insertText": "Get(typename FbxSimpleMap<Type, FbxObject*, Compare>::Iterator pIterator)"
  },
  {
    "label": "FbxObjectStringMap()",
    "kind": "Method",
    "detail": "Function (} } ; class FbxObjectStringMap : public FbxObjectMap<FbxString,FbxStringCompare> { public :)",
    "insertText": "FbxObjectStringMap()"
  },
  {
    "label": "FbxMapFree()",
    "kind": "Method",
    "detail": "Function (} } ; template<K,V,C,A> void)",
    "insertText": "FbxMapFree(FbxMap<K, V, C, A>& pMap)"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(i->GetValue())"
  },
  {
    "label": "FbxMapDelete()",
    "kind": "Method",
    "detail": "Function (} template<K,V,C,A> void)",
    "insertText": "FbxMapDelete(FbxMap<K, V, C, A>& pMap)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(i->GetValue())"
  },
  {
    "label": "FbxMapDestroy()",
    "kind": "Method",
    "detail": "Function (} template<K,V,C,A> void)",
    "insertText": "FbxMapDestroy(FbxMap<K, V, C, A>& pMap)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (i ->)",
    "insertText": "GetValue()->Destroy()"
  }
]