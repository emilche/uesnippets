[
  {
    "label": "INotificationWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INotificationWidget"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "SNotificationItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationItem"
  },
  {
    "label": "ECompletionState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECompletionState"
  },
  {
    "label": "FNotificationButtonInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationButtonInfo"
  },
  {
    "label": "FNotificationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNotificationInfo"
  },
  {
    "label": "SNotificationList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationList"
  },
  {
    "label": "SNotificationExtendable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNotificationExtendable"
  },
  {
    "label": "FSlateNotificationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateNotificationManager"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Types / SlateStructs . h \" # include \" Layout / Visibility . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Widgets / Input / SCheckBox . h \" class INotificationWidget ; class SVerticalBox ; class SWindow ; class SNotificationItem : public SCompoundWidget { public : enum ECompletionState { CS_None,CS_Pending,CS_Success,CS_Fail,} ; void)",
    "insertText": "SetText(const TAttribute< FText >& InText)"
  },
  {
    "label": "SetSubText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubText(const TAttribute<FText>& InSubText)"
  },
  {
    "label": "SetHyperlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHyperlink(const FSimpleDelegate& InHyperlink, const TAttribute< FText >& InHyperlinkText = TAttribute< FText >())"
  },
  {
    "label": "SetExpireDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExpireDuration(float ExpireDuration)"
  },
  {
    "label": "SetFadeInDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFadeInDuration(float FadeInDuration)"
  },
  {
    "label": "SetFadeOutDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFadeOutDuration(float FadeOutDuration)"
  },
  {
    "label": "GetCompletionState()",
    "kind": "Method",
    "detail": "Function (ECompletionState)",
    "insertText": "GetCompletionState()"
  },
  {
    "label": "SetCompletionState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCompletionState(ECompletionState State)"
  },
  {
    "label": "ExpireAndFadeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpireAndFadeout()"
  },
  {
    "label": "Fadeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fadeout()"
  },
  {
    "label": "Pulse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pulse(const FLinearColor& GlowColor)"
  },
  {
    "label": "EVisibility()",
    "kind": "Method",
    "detail": "Function (} ; struct FNotificationButtonInfo { using FVisibilityDelegate = TDelegate<)",
    "insertText": "EVisibility(SNotificationItem::ECompletionState)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (using FIsEnabledDelegate = TDelegate<)",
    "insertText": "bool(SNotificationItem::ECompletionState)"
  },
  {
    "label": "FNotificationButtonInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNotificationButtonInfo(const TAttribute<FText>& InText, const TAttribute<FText>& InToolTip, FSimpleDelegate InCallback, SNotificationItem::ECompletionState VisibleInState = SNotificationItem::CS_Pending ) : Text( InText ) , ToolTip( InToolTip ) , Callback( MoveTemp(InCallback) ) , VisibilityCallback() , IsEnabledCallback() , VisibilityOnNone( VisibleInState == SNotificationItem::CS_None ? EVisibility::Visible : EVisibility::Collapsed ) , VisibilityOnPending( VisibleInState == SNotificationItem::CS_Pending ? EVisibility::Visible : EVisibility::Collapsed ) , VisibilityOnSuccess( VisibleInState == SNotificationItem::CS_Success ? EVisibility::Visible : EVisibility::Collapsed ) , VisibilityOnFail( VisibleInState == SNotificationItem::CS_Fail ? EVisibility::Visible : EVisibility::Collapsed)"
  },
  {
    "label": "FNotificationButtonInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNotificationButtonInfo(const TAttribute<FText>& InText, const TAttribute<FText>& InToolTip, FSimpleDelegate InCallback, FVisibilityDelegate InVisibilityCallback, FIsEnabledDelegate InIsEnabledCallback = FIsEnabledDelegate() ) : Text( InText ) , ToolTip( InToolTip ) , Callback( MoveTemp(InCallback) ) , VisibilityCallback( MoveTemp(InVisibilityCallback) ) , IsEnabledCallback( MoveTemp(InIsEnabledCallback) ) , VisibilityOnNone( VisibilityCallback.IsBound() ? EVisibility::Collapsed : EVisibility::Visible ) , VisibilityOnPending( VisibilityCallback.IsBound() ? EVisibility::Collapsed : EVisibility::Visible ) , VisibilityOnSuccess( VisibilityCallback.IsBound() ? EVisibility::Collapsed : EVisibility::Visible ) , VisibilityOnFail( VisibilityCallback.IsBound() ? EVisibility::Collapsed : EVisibility::Visible)"
  },
  {
    "label": "FNotificationInfo()",
    "kind": "Method",
    "detail": "Function (} TAttribute<FText> Text ; TAttribute<FText> ToolTip ; FSimpleDelegate Callback ; FVisibilityDelegate VisibilityCallback ; FIsEnabledDelegate IsEnabledCallback ; EVisibility VisibilityOnNone ; EVisibility VisibilityOnPending ; EVisibility VisibilityOnSuccess ; EVisibility VisibilityOnFail ; } ; struct FNotificationInfo {)",
    "insertText": "FNotificationInfo(const FText& InText) : ContentWidget(), Text(InText), SubText(), ButtonDetails(), Image(nullptr), FadeInDuration(0.5f), FadeOutDuration(2.0f), ExpireDuration(1.0f), bUseThrobber(true), bUseSuccessFailIcons(true), bUseLargeFont(true), WidthOverride(320.0f), bFireAndForget(true), CheckBoxState(ECheckBoxState::Unchecked), CheckBoxStateChanged(), CheckBoxText(), Hyperlink(), HyperlinkText( NSLOCTEXT(\"EditorNotification\", \"DefaultHyperlinkText\", \"Show Log\") ), bAllowThrottleWhenFrameRateIsLow(true)"
  },
  {
    "label": "FNotificationInfo()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FNotificationInfo(TSharedPtr<INotificationWidget> InContentWidget) : ContentWidget(InContentWidget), Text(), SubText(), ButtonDetails(), Image(nullptr), FadeInDuration(0.5f), FadeOutDuration(2.0f), ExpireDuration(1.0f), bUseThrobber(false), bUseSuccessFailIcons(false), bUseLargeFont(false), WidthOverride(320.0f), bFireAndForget(true), CheckBoxState(ECheckBoxState::Unchecked), CheckBoxStateChanged(), CheckBoxText(), Hyperlink(), HyperlinkText(), bAllowThrottleWhenFrameRateIsLow(true)"
  },
  {
    "label": "ShowCopyToClipboadHyperlink()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ShowCopyToClipboadHyperlink()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<INotificationWidget> ContentWidget ; TAttribute<FText> Text ; TAttribute<FText> SubText ; TArray<FNotificationButtonInfo> ButtonDetails ; const FSlateBrush* Image ; float FadeInDuration ; float FadeOutDuration ; float ExpireDuration ; bool bUseThrobber ; bool bUseSuccessFailIcons ; bool bUseLargeFont ; FOptionalSize WidthOverride ; bool bFireAndForget ; TAttribute<ECheckBoxState> CheckBoxState ; FOnCheckStateChanged CheckBoxStateChanged ; TAttribute<FText> CheckBoxText ; FSimpleDelegate Hyperlink ; TAttribute<FText> HyperlinkText ; TSharedPtr<SWindow> ForWindow ; bool bAllowThrottleWhenFrameRateIsLow ; } ; class SNotificationList : public SCompoundWidget { class SNotificationExtendable ; class FSlateNotificationManager ; public :)",
    "insertText": "SLATE_BEGIN_ARGS(SNotificationList)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "AddNotification()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SNotificationItem>)",
    "insertText": "AddNotification(const FNotificationInfo& Info)"
  },
  {
    "label": "NotificationItemFadedOut()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "NotificationItemFadedOut(const TSharedRef<SNotificationItem>& NotificationItem)"
  }
]