[
  {
    "label": "TIoPriorityQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIoPriorityQueue"
  },
  {
    "label": "TInternalQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TInternalQueue"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TInternalQueue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" Algo / IsSorted . h \" # include \" Containers / AllowShrinking . h \" template<T> class TIoPriorityQueue { private : struct TInternalQueue {)",
    "insertText": "TInternalQueue(int32 InPriority) : Priority(InPriority)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Remove(T* Item)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T* Prev = Item -> Prev ; T* Next = Item -> Next ; Item -> Prev = nullptr ; Item -> Next = nullptr ;)",
    "insertText": "if(Prev && Next)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Prev -> Next = Next ; Next -> Prev = Prev ; return false ; })",
    "insertText": "if(Prev)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Prev -> Next = Next ; } else { Head = Next ; })",
    "insertText": "if(Next)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Next -> Prev = Prev ; } else { Tail = Prev ; })",
    "insertText": "if(!Head)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Current = Next ; Next = Current ? Current -> Next : nullptr ; return* this ; } TIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "Tmp()",
    "kind": "Method",
    "detail": "Function (TIterator)",
    "insertText": "Tmp(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Current = Next ; Next = Current ? Current -> Next : nullptr ; return Tmp ; } T&)",
    "insertText": "operator()"
  },
  {
    "label": "RemoveQueueByPriority()",
    "kind": "Method",
    "detail": "Function (Outer .)",
    "insertText": "RemoveQueueByPriority(InternalQueue->Priority)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} Current = reinterpret_cast<)",
    "insertText": "T(-1)"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "TIterator(TIoPriorityQueue<T>& InOuter, int32 InPriority) : Outer(InOuter)"
  },
  {
    "label": "FindQueueByPriority()",
    "kind": "Method",
    "detail": "Function (InternalQueue = Outer .)",
    "insertText": "FindQueueByPriority(InPriority)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (Current = InternalQueue -> Head ; Next = Current -> Next ; } else { Current = Next = nullptr ; } } TIoPriorityQueue<T>& Outer ; TInternalQueue* InternalQueue ; T* Current ; T* Next ; } ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "GetMaxPriority()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxPriority()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Push(T* Item, int32 Priority)"
  },
  {
    "label": "FindOrAddQueueByPriority()",
    "kind": "Method",
    "detail": "Function (Item -> Priority = Priority ; TInternalQueue& Queue =)",
    "insertText": "FindOrAddQueueByPriority(Priority)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Queue . Head = Queue . Tail = Item ; } else { Item -> Prev = Queue . Tail ; Queue . Tail -> Next = Item ; Queue . Tail = Item ; } } T*)",
    "insertText": "Pop()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TInternalQueue* QueueWithHighestPriority = InternalQueues [ QueueIndex ] ;)",
    "insertText": "check(QueueWithHighestPriority)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (T* Item = QueueWithHighestPriority -> Head ;)",
    "insertText": "check(Item)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (Next -> Prev = nullptr ; QueueWithHighestPriority -> Head = Next ; } else {)",
    "insertText": "check(Item == QueueWithHighestPriority->Tail)"
  },
  {
    "label": "RemoveQueueAtIndex()",
    "kind": "Method",
    "detail": "Function (QueueWithHighestPriority -> Head = QueueWithHighestPriority -> Tail = nullptr ;)",
    "insertText": "RemoveQueueAtIndex(QueueIndex)"
  },
  {
    "label": "CreateIterator()",
    "kind": "Method",
    "detail": "Function (} Item -> Prev = Item -> Next = nullptr ; return Item ; } TIterator)",
    "insertText": "CreateIterator(int32 Priority)"
  },
  {
    "label": "FindQueueByPriority()",
    "kind": "Method",
    "detail": "Function (Item -> Prev = nullptr ; Item -> Next = nullptr ; Prev -> Next = Next ; Next -> Prev = Prev ; return ; } int32 QueueIndex ; TInternalQueue* InternalQueue =)",
    "insertText": "FindQueueByPriority(Item->Priority, QueueIndex)"
  },
  {
    "label": "Reprioritize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Reprioritize(T* Item, int32 NewPriority)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(Item)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Push(Item, NewPriority)"
  },
  {
    "label": "MergeInto()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MergeInto(TIoPriorityQueue<T>& Other, int32 Priority)"
  },
  {
    "label": "FindQueueByPriority()",
    "kind": "Method",
    "detail": "Function (int32 QueueIndex ; TInternalQueue* Queue =)",
    "insertText": "FindQueueByPriority(Priority, QueueIndex)"
  },
  {
    "label": "FindQueueByPriority()",
    "kind": "Method",
    "detail": "Function (} private : TInternalQueue*)",
    "insertText": "FindQueueByPriority(int32 Priority)"
  },
  {
    "label": "LowerBoundBy()",
    "kind": "Method",
    "detail": "Function (int32 Index =)",
    "insertText": "LowerBoundBy(InternalQueues, Priority, &TInternalQueue::Priority)"
  },
  {
    "label": "FindOrAddQueueByPriority()",
    "kind": "Method",
    "detail": "Function (OutIndex = Index ; return InternalQueues [ Index ] ; } return nullptr ; } TInternalQueue&)",
    "insertText": "FindOrAddQueueByPriority(int32 Priority)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (InternalQueues .)",
    "insertText": "Insert(AllocInternalQueue(Priority), Index)"
  },
  {
    "label": "RemoveQueueByPriority()",
    "kind": "Method",
    "detail": "Function (} return* InternalQueues [ Index ] ; } void)",
    "insertText": "RemoveQueueByPriority(int32 Priority)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 QueueIndex ;)",
    "insertText": "if(TInternalQueue* InternalQueue = FindQueueByPriority(Priority, QueueIndex))"
  },
  {
    "label": "RemoveQueueAtIndex()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveQueueAtIndex(int32 Index)"
  },
  {
    "label": "FreeInternalQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeInternalQueue(InternalQueues[Index])"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (InternalQueues .)",
    "insertText": "RemoveAt(Index, EAllowShrinking::No)"
  },
  {
    "label": "AllocInternalQueue()",
    "kind": "Method",
    "detail": "Function (} TInternalQueue*)",
    "insertText": "AllocInternalQueue(int32 Priority)"
  },
  {
    "label": "TInternalQueue()",
    "kind": "Method",
    "detail": "Function (FirstFreeQueue = FromPool -> NextFree ; FromPool -> NextFree = nullptr ; FromPool -> Priority = Priority ; return FromPool ; } return new)",
    "insertText": "TInternalQueue(Priority)"
  },
  {
    "label": "FreeInternalQueue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FreeInternalQueue(TInternalQueue* InternalQueue)"
  }
]