[
  {
    "label": "FbxSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxSet"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_BASE_SET_H_ # define _FBXSDK_CORE_BASE_SET_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / base / fbxredblacktree . h> # include<fbxsdk / core / base / fbxmap . h> # include<fbxsdk / fbxsdk_nsbegin . h> template<Type,Compare = FbxLessCompare<Type>,Allocator = FbxBaseAllocator> class FbxSet { protected : class Value { # ifndef DOXYGEN_SHOULD_SKIP_THIS public : typedef const Type KeyType ; typedef const Type ConstKeyType ; typedef const Type ValueType ; typedef const Type ConstValueType ;)",
    "insertText": "Value(const Type& pValue) : mValue(pValue)"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} KeyType&)",
    "insertText": "GetKey()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (# endif } ; typedef FbxRedBlackTree<Value,Compare,Allocator> StorageType ; public : typedef Type ValueType ; typedef StorageType::RecordType RecordType ; typedef StorageType::IteratorType Iterator ; typedef StorageType::ConstIteratorType ConstIterator ; void)",
    "insertText": "Reserve(unsigned int pRecordCount)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (mTree .)",
    "insertText": "Reserve(pRecordCount)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "GetSize()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} FbxPair<RecordType*,bool>)",
    "insertText": "Insert(const ValueType& pValue)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Remove(const ValueType& pValue)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Empty()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "Begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} Iterator)",
    "insertText": "End()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} const RecordType*)",
    "insertText": "Find(const ValueType& pValue)"
  },
  {
    "label": "Minimum()",
    "kind": "Method",
    "detail": "Function (} const RecordType*)",
    "insertText": "Minimum()"
  },
  {
    "label": "Maximum()",
    "kind": "Method",
    "detail": "Function (} const RecordType*)",
    "insertText": "Maximum()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FbxSet<Type, Compare, Allocator>& pOther)"
  },
  {
    "label": "Intersect()",
    "kind": "Method",
    "detail": "Function (} FbxSet)",
    "insertText": "Intersect(const FbxSet& pOther)"
  },
  {
    "label": "Union()",
    "kind": "Method",
    "detail": "Function (} return lReturn ; } FbxSet)",
    "insertText": "Union(const FbxSet& pOther)"
  },
  {
    "label": "lReturn()",
    "kind": "Method",
    "detail": "Function (FbxSet)",
    "insertText": "lReturn(*this)"
  },
  {
    "label": "FbxSet()",
    "kind": "Method",
    "detail": "Function (} return lReturn ; } # ifndef DOXYGEN_SHOULD_SKIP_THIS)",
    "insertText": "FbxSet()"
  },
  {
    "label": "FbxSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxSet(const FbxSet& pSet) : mTree(pSet.mTree)"
  }
]