[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_NAME_H # define INCLUDED_IMF_NAME_H # include \" ImfExport . h \" # include \" ImfNamespace . h \" # include<cstring> # if)",
    "insertText": "defined(_MSC_VER) # pragma warning(push, 0) # pragma warning(disable : 4996)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "Name()"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Name(const char text[])"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Name(const Name&)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Name(Name&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Name&)",
    "insertText": "operator(const Name&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Name&)",
    "insertText": "operator(Name&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Name&)",
    "insertText": "operator(const char text[])"
  },
  {
    "label": "text()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "text()"
  },
  {
    "label": "strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strncpy(_text, text, MAX_LENGTH)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = text ; _text [ MAX_LENGTH ] = 0 ; } bool)",
    "insertText": "operator(const Name& x, const Name& y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Name& x, const char text[])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const char text[], const Name& y)"
  }
]