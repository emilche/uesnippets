[
  {
    "label": "Toggle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Toggle"
  },
  {
    "label": "OptimizationToggles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OptimizationToggles"
  },
  {
    "label": "Toggle()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef LLVM_HLSL_DXC_OPT_TOGGLES_H # define LLVM_HLSL_DXC_OPT_TOGGLES_H # include \" llvm / ADT / StringRef . h \" # include<map> # include<set> # include<string> namespace hlsl { namespace options { struct Toggle { llvm::StringRef Name ; bool Default = false ;)",
    "insertText": "Toggle(llvm::StringRef Name, bool Default) : Name(Name), Default(Default)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } ; enum { DEFAULT_ON = 1,DEFAULT_OFF = 0,} ; const Toggle TOGGLE_GVN = { \" gvn \",DEFAULT_ON } ; const Toggle TOGGLE_LICM = { \" licm \",DEFAULT_ON } ; const Toggle TOGGLE_SINK = { \" sink \",DEFAULT_ON } ; const Toggle TOGGLE_LIFETIME_MARKERS = { \" lifetime - markers \",DEFAULT_ON } ; const Toggle TOGGLE_PARTIAL_LIFETIME_MARKERS = { \" partial - lifetime - markers \",DEFAULT_OFF } ; const Toggle TOGGLE_STRUCTURIZE_LOOP_EXITS_FOR_UNROLL = { \" structurize - loop - exits - for - unroll \",DEFAULT_ON } ; const Toggle TOGGLE_DEBUG_NOPS = { \" debug - nops \",DEFAULT_ON } ; const Toggle TOGGLE_STRUCTURIZE_RETURNS = { \" structurize - returns \",DEFAULT_OFF } ; struct OptimizationToggles { std::map<std::string,bool> Toggles ; std::map<std::string,std::string> Selects ; void)",
    "insertText": "Set(Toggle Opt, bool Value)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (Toggles [ Opt . Name ] = Value ; } bool)",
    "insertText": "IsSet(Toggle Opt)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled(Toggle Opt)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto It = Toggles .)",
    "insertText": "find(Opt.Name)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (const bool Found = It ! = Toggles .)",
    "insertText": "end()"
  }
]