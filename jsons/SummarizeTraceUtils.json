[
  {
    "label": "IAnalysisSession",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalysisSession"
  },
  {
    "label": "IAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAnalyzer"
  },
  {
    "label": "FIncrementalVariance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIncrementalVariance"
  },
  {
    "label": "FSummarizeCpuScopeAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSummarizeCpuScopeAnalyzer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopeEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeEvent"
  },
  {
    "label": "FScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScope"
  },
  {
    "label": "FSummarizeCpuProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSummarizeCpuProfilerProvider"
  },
  {
    "label": "FScopeEnter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeEnter"
  },
  {
    "label": "FScopeTreeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeTreeInfo"
  },
  {
    "label": "FThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThread"
  },
  {
    "label": "FMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetadata"
  },
  {
    "label": "FSummarizeScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSummarizeScope"
  },
  {
    "label": "FSummarizeCpuScopeDurationAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSummarizeCpuScopeDurationAnalyzer"
  },
  {
    "label": "FSummarizeBookmark",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSummarizeBookmark"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" TraceServices / Model / Threads . h \" # include \" TraceServices / Model / TimingProfiler . h \" namespace TraceServices { class IAnalysisSession ; } namespace UE::Trace { class IAnalyzer ; })",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(LogSummarizeTrace, Log, All)"
  },
  {
    "label": "FIncrementalVariance()",
    "kind": "Method",
    "detail": "Function (class FIncrementalVariance { public :)",
    "insertText": "FIncrementalVariance() : Count(0) , Mean(0.0) , VarianceAccumulator(0.0)"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetCount()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Increment(const double InSample)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(const FIncrementalVariance& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FSummarizeCpuScopeAnalyzer()",
    "kind": "Method",
    "detail": "Function (private : uint64 Count ; double Mean ; double VarianceAccumulator ; } ; class FSummarizeCpuScopeAnalyzer { public : enum class EScopeEventType : uint32 { Enter,Exit } ; struct FScopeEvent { EScopeEventType ScopeEventType ; uint32 ScopeId ; uint32 ThreadId ; double Timestamp ; } ; struct FScope { uint32 ScopeId ; uint32 ThreadId ; double EnterTimestamp ; double ExitTimestamp ; } ; public : ~)",
    "insertText": "FSummarizeCpuScopeAnalyzer()"
  },
  {
    "label": "OnCpuScopeDiscovered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCpuScopeDiscovered(uint32 ScopeId)"
  },
  {
    "label": "OnCpuScopeName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCpuScopeName(uint32 ScopeId, const FStringView& ScopeName)"
  },
  {
    "label": "OnCpuScopeEnter()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnCpuScopeEnter(const FScopeEvent& ScopeEnter, const FString* ScopeName)"
  },
  {
    "label": "OnCpuScopeExit()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnCpuScopeExit(const FScope& Scope, const FString* ScopeName)"
  },
  {
    "label": "OnCpuScopeTree()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnCpuScopeTree(uint32 ThreadId, const TArray64<FSummarizeCpuScopeAnalyzer::FScopeEvent>& ScopeEvents, const TFunction<const FString* (uint32)>& ScopeLookupNameFn)"
  },
  {
    "label": "OnCpuScopeAnalysisEnd()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnCpuScopeAnalysisEnd()"
  },
  {
    "label": "CoroutineSpecId()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "CoroutineSpecId(1u << 31u)"
  },
  {
    "label": "CoroutineUnknownSpecId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CoroutineUnknownSpecId(1u << 31u)"
  },
  {
    "label": "FSummarizeCpuProfilerProvider()",
    "kind": "Method",
    "detail": "Function (} ; class FSummarizeCpuProfilerProvider : public TraceServices::IEditableThreadProvider,public TraceServices::IEditableTimingProfilerProvider { public :)",
    "insertText": "FSummarizeCpuProfilerProvider()"
  },
  {
    "label": "AddCpuScopeAnalyzer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCpuScopeAnalyzer(TSharedPtr<FSummarizeCpuScopeAnalyzer> Analyzer)"
  },
  {
    "label": "AnalysisComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalysisComplete()"
  },
  {
    "label": "FThread()",
    "kind": "Method",
    "detail": "Function (bHasNamelessScopes = false ; } } ; struct FThread : public TraceServices::IEditableTimeline<TraceServices::FTimingProfilerEvent> {)",
    "insertText": "FThread(uint32 InThreadId, FSummarizeCpuProfilerProvider* InProvider) : ThreadId(InThreadId) , Provider(InProvider)"
  },
  {
    "label": "AppendBeginEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendBeginEvent(double StartTime, const TraceServices::FTimingProfilerEvent& Event)"
  },
  {
    "label": "AppendEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendEndEvent(double EndTime)"
  },
  {
    "label": "AddThread()",
    "kind": "Method",
    "detail": "Function (uint32 ThreadId ; FSummarizeCpuProfilerProvider* Provider ; TArray<FScopeEnter> ScopeStack ; FScopeTreeInfo ScopeTreeInfo ; TArray<FScopeTreeInfo> DelayedScopeTreeInfo ; } ; private : void)",
    "insertText": "AddThread(uint32 Id, const TCHAR* Name, EThreadPriority Priority)"
  },
  {
    "label": "AddCpuTimer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddCpuTimer(FStringView Name, const TCHAR* File, uint32 Line)"
  },
  {
    "label": "SetTimerNameAndLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimerNameAndLocation(uint32 TimerId, FStringView Name, const TCHAR* File, uint32 Line)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddMetadata(uint32 MasterTimerId, TArray<uint8>&& Metadata)"
  },
  {
    "label": "GetMetadata()",
    "kind": "Method",
    "detail": "Function (TArrayView<const uint8>)",
    "insertText": "GetMetadata(uint32 TimerId)"
  },
  {
    "label": "GetCpuThreadEditableTimeline()",
    "kind": "Method",
    "detail": "Function (TraceServices::IEditableTimeline<TraceServices::FTimingProfilerEvent>&)",
    "insertText": "GetCpuThreadEditableTimeline(uint32 ThreadId)"
  },
  {
    "label": "AppendBeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendBeginEvent(const FSummarizeCpuScopeAnalyzer::FScopeEvent& ScopeEvent)"
  },
  {
    "label": "AppendEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendEndEvent(const FSummarizeCpuScopeAnalyzer::FScope& ScopeEvent, const FString* ScopeName)"
  },
  {
    "label": "OnCpuScopeTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCpuScopeTree(uint32 ThreadId, const FScopeTreeInfo& ScopeTreeInfo)"
  },
  {
    "label": "LookupScopeName()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "LookupScopeName(uint32 ScopeId)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (private : TMap<uint32,TUniquePtr<FThread>> Threads ; TArray<TOptional<FString>> ScopeNames ; TArray<TSharedPtr<FSummarizeCpuScopeAnalyzer>> ScopeAnalyzers ; TFunction<const)",
    "insertText": "FString(uint32 ScopeId)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (struct FMetadata { TArray<uint8> Payload ; uint32 TimerId ; } ; TArray<FMetadata> Metadatas ; } ; struct FSummarizeScope { FString Name ; FIncrementalVariance DurationVariance ; double TotalDurationSeconds = 0 . 0 ; double FirstStartSeconds = 0 . 0 ; double FirstFinishSeconds = 0 . 0 ; double FirstDurationSeconds = 0 . 0 ; double LastStartSeconds = 0 . 0 ; double LastFinishSeconds = 0 . 0 ; double LastDurationSeconds = 0 . 0 ; double MinDurationSeconds = TNumericLimits<double)",
    "insertText": "Max()"
  },
  {
    "label": "AddDuration()",
    "kind": "Method",
    "detail": "Function (TArray<double> EndTimeArray ; TArray<double> BeginTimeArray ; void)",
    "insertText": "AddDuration(double StartSeconds, double FinishSeconds)"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(const FSummarizeScope& Other)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetValue(const FStringView& Statistic)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSummarizeScope& Scope)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetTypeHash(const FSummarizeScope& Scope)"
  },
  {
    "label": "FSummarizeCpuScopeDurationAnalyzer()",
    "kind": "Method",
    "detail": "Function (} class FSummarizeCpuScopeDurationAnalyzer : public FSummarizeCpuScopeAnalyzer { public :)",
    "insertText": "FSummarizeCpuScopeDurationAnalyzer(TFunction<void(const TArray<FSummarizeScope>&)> InPublishFn)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : TMap<uint32,FSummarizeScope> Scopes ; TFunction<)",
    "insertText": "void(const TArray<FSummarizeScope>&)"
  },
  {
    "label": "AddTimestamp()",
    "kind": "Method",
    "detail": "Function (} ; struct FSummarizeBookmark { FString Name ; uint64 Count = 0 ; double FirstSeconds = 0 . 0 ; double LastSeconds = 0 . 0 ; void)",
    "insertText": "AddTimestamp(double Seconds)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSummarizeBookmark& Bookmark)"
  },
  {
    "label": "IsCsvSafeString()",
    "kind": "Method",
    "detail": "Function (} namespace CsvUtils { bool)",
    "insertText": "IsCsvSafeString(const FString& String)"
  },
  {
    "label": "WriteAsUTF8String()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAsUTF8String(IFileHandle* Handle, const FString& String)"
  }
]