[
  {
    "label": "FScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeLock"
  },
  {
    "label": "FScopeUnlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopeUnlock"
  },
  {
    "label": "TScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScopeLock"
  },
  {
    "label": "TConditionalScopeLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConditionalScopeLock"
  },
  {
    "label": "TScopeUnlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScopeUnlock"
  },
  {
    "label": "FScopeLock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / CriticalSection . h \" class FScopeLock { public : UE_NODISCARD_CTOR)",
    "insertText": "FScopeLock(FCriticalSection* InSynchObject ) : SynchObject(InSynchObject)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (SynchObject ->)",
    "insertText": "Lock()"
  },
  {
    "label": "FScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopeLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "FScopeLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeLock(const FScopeLock& InScopeLock)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopeLock&)",
    "insertText": "operator(FScopeLock& InScopeLock)"
  },
  {
    "label": "FScopeUnlock()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopeUnlock()"
  },
  {
    "label": "FScopeUnlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopeUnlock(const FScopeUnlock& InScopeLock)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScopeUnlock&)",
    "insertText": "operator(FScopeUnlock& InScopeLock)"
  },
  {
    "label": "TScopeLock()",
    "kind": "Method",
    "detail": "Function (UE_NODISCARD_CTOR)",
    "insertText": "TScopeLock(MutexType& InMutex) : Mutex(&InMutex)"
  },
  {
    "label": "TScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopeLock()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (Mutex = nullptr ; } } private : MutexType* Mutex ; } ; template<MutexType> class TConditionalScopeLock { public :)",
    "insertText": "UE_NONCOPYABLE(TConditionalScopeLock)"
  },
  {
    "label": "TConditionalScopeLock()",
    "kind": "Method",
    "detail": "Function (UE_NODISCARD_CTOR)",
    "insertText": "TConditionalScopeLock(MutexType& InMutex, bool bShouldLock) : Mutex(bShouldLock ? &InMutex : nullptr)"
  },
  {
    "label": "TConditionalScopeLock()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TConditionalScopeLock()"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (Mutex = nullptr ; } } private : MutexType* Mutex ; } ; template<MutexType> class TScopeUnlock { public :)",
    "insertText": "UE_NONCOPYABLE(TScopeUnlock)"
  },
  {
    "label": "TScopeUnlock()",
    "kind": "Method",
    "detail": "Function (UE_NODISCARD_CTOR)",
    "insertText": "TScopeUnlock(MutexType& InMutex) : Mutex(&InMutex)"
  },
  {
    "label": "TScopeUnlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopeUnlock()"
  }
]