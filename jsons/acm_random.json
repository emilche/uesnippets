[
  {
    "label": "ACMRandom",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ACMRandom"
  },
  {
    "label": "ACMRandom()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_ACM_RANDOM_H_ # define VPX_TEST_ACM_RANDOM_H_ # include<assert . h> # include<limits> # include \" third_party / googletest / src / include / gtest / gtest . h \" # include \" vpx / vpx_integer . h \" namespace libvpx_test { class ACMRandom { public :)",
    "insertText": "ACMRandom() : random_(DeterministicSeed())"
  },
  {
    "label": "ACMRandom()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACMRandom(int seed) : random_(seed)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(int seed)"
  },
  {
    "label": "Reseed()",
    "kind": "Method",
    "detail": "Function (random_ .)",
    "insertText": "Reseed(seed)"
  },
  {
    "label": "Rand16()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "Rand16()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (const uint32_t value = random_ .)",
    "insertText": "Generate(testing::internal::Random::kMaxRange)"
  },
  {
    "label": "Rand20Signed()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Rand20Signed()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (const uint32_t value = random_ .)",
    "insertText": "Generate(1048576)"
  },
  {
    "label": "Rand16Signed()",
    "kind": "Method",
    "detail": "Function (} int16_t)",
    "insertText": "Rand16Signed()"
  },
  {
    "label": "Rand13Signed()",
    "kind": "Method",
    "detail": "Function (} int16_t)",
    "insertText": "Rand13Signed()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (const uint32_t value = random_ .)",
    "insertText": "Generate(8192)"
  },
  {
    "label": "Rand9Signed()",
    "kind": "Method",
    "detail": "Function (} int16_t)",
    "insertText": "Rand9Signed()"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (const uint32_t value = random_ .)",
    "insertText": "Generate(512)"
  },
  {
    "label": "Rand8()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "Rand8()"
  },
  {
    "label": "Rand8Extremes()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "Rand8Extremes()"
  },
  {
    "label": "RandRange()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "RandRange(const uint32_t range)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(range <= testing::internal::Random::kMaxRange)"
  },
  {
    "label": "PseudoUniform()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "PseudoUniform(int range)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "operator()(int n)"
  },
  {
    "label": "DeterministicSeed()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "DeterministicSeed()"
  }
]