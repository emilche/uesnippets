[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "VCMEncodedFrame()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_ENCODED_FRAME_H_ # define MODULES_VIDEO_CODING_ENCODED_FRAME_H_ # include<vector> # include \" api / video / encoded_image . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" modules / video_coding / include / video_coding_defines . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class RTC_EXPORT VCMEncodedFrame : public EncodedImage { public :)",
    "insertText": "VCMEncodedFrame()"
  },
  {
    "label": "VCMEncodedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VCMEncodedFrame(const VCMEncodedFrame&)"
  },
  {
    "label": "SetRenderTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderTime(const int64_t renderTimeMs)"
  },
  {
    "label": "PlayoutDelay()",
    "kind": "Method",
    "detail": "Function (_renderTimeMs = renderTimeMs ; } VideoPlayoutDelay)",
    "insertText": "PlayoutDelay()"
  },
  {
    "label": "EncodedImage()",
    "kind": "Method",
    "detail": "Function (playout_delay_ = playout_delay ; } const webrtc::EncodedImage&)",
    "insertText": "EncodedImage()"
  },
  {
    "label": "RenderTimeMs()",
    "kind": "Method",
    "detail": "Function (} using EncodedImage::ColorSpace ; using EncodedImage::data ; using EncodedImage::GetEncodedData ; using EncodedImage::NtpTimeMs ; using EncodedImage::PacketInfos ; using EncodedImage::set_size ; using EncodedImage::SetColorSpace ; using EncodedImage::SetEncodedData ; using EncodedImage::SetPacketInfos ; using EncodedImage::SetSpatialIndex ; using EncodedImage::SetSpatialLayerFrameSize ; using EncodedImage::SetTimestamp ; using EncodedImage::size ; using EncodedImage::SpatialIndex ; using EncodedImage::SpatialLayerFrameSize ; using EncodedImage::Timestamp ; int64_t)",
    "insertText": "RenderTimeMs()"
  },
  {
    "label": "rotation()",
    "kind": "Method",
    "detail": "Function (_frameType = frame_type ; } VideoRotation)",
    "insertText": "rotation()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (_codecSpecificInfo =* codec_specific ; } protected : void)",
    "insertText": "Reset()"
  },
  {
    "label": "CopyCodecSpecific()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCodecSpecific(const RTPVideoHeader* header)"
  }
]