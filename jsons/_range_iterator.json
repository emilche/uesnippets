[
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_range_iterator_H # define __TBB_range_iterator_H # include \" . . / tbb_stddef . h \" # if __TBB_CPP11_STD_BEGIN_END_PRESENT&& __TBB_CPP11_AUTO_PRESENT&& __TBB_CPP11_DECLTYPE_PRESENT # include<iterator> # endif namespace tbb { namespace internal { # if __TBB_CPP11_STD_BEGIN_END_PRESENT&& __TBB_CPP11_AUTO_PRESENT&& __TBB_CPP11_DECLTYPE_PRESENT using std::begin ; using std::end ; template<Container> auto)",
    "insertText": "first(Container& c)-> decltype(begin(c))"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} template<Container> auto)",
    "insertText": "first(const Container& c)-> decltype(begin(c))"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (} template<Container> auto)",
    "insertText": "last(Container& c)-> decltype(begin(c))"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (} template<Container> auto)",
    "insertText": "last(const Container& c)-> decltype(begin(c))"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} # else template<Container> Container::iterator)",
    "insertText": "first(Container& c)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} template<Container> Container::const_iterator)",
    "insertText": "first(const Container& c)"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (} template<Container> Container::iterator)",
    "insertText": "last(Container& c)"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (} template<Container> Container::const_iterator)",
    "insertText": "last(const Container& c)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} # endif template<T,size_t size> T*)",
    "insertText": "first(T (&arr) [size])"
  }
]