[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEnvQueryTestScoringPreview",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnvQueryTestScoringPreview"
  },
  {
    "label": "UEnvQueryTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnvQueryTest"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" EnvironmentQuery / Items / EnvQueryItemType . h \" # include \" EnvironmentQuery / EnvQueryContext . h \" # include \" EnvironmentQuery / EnvQueryTypes . h \" # include \" DataProviders / AIDataProvider . h \" # include \" EnvironmentQuery / EnvQueryNode . h \" # include \" EnvQueryTest . generated . h \" class AActor ; # if WITH_EDITOR struct FPropertyChangedEvent ; # endif)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Absolute,RelativeToScores } ; namespace EnvQueryTestVersion { const int32 Initial = 0 ; const int32 DataProviders = 1 ; const int32 ReferenceValueFix = 2 ; const int32 Latest = ReferenceValueFix ; } # if WITH_EDITORONLY_DATA struct FEnvQueryTestScoringPreview { enum { DefaultSamplesCount = 2 1 } ; TArray<float> Samples ; float FilterLow ; float FilterHigh ; float ClampMin ; float ClampMax ; uint32 bShowFilterLow : 1 ; uint32 bShowFilterHigh : 1 ; uint32 bShowClampMin : 1 ; uint32 bShowClampMax : 1 ; } ; # endif)",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "SetWorkOnFloatValues()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UEnvQueryItemType> ValidItemType ; # if WITH_EDITORONLY_DATA FEnvQueryTestScoringPreview PreviewData ; # endif void)",
    "insertText": "SetWorkOnFloatValues(bool bWorkOnFloats)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RunTest(FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "IsSupportedItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSupportedItem(TSubclassOf<UEnvQueryItemType> ItemType)"
  },
  {
    "label": "IsContextPerItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsContextPerItem(TSubclassOf<UEnvQueryContext> CheckContext)"
  },
  {
    "label": "GetItemLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetItemLocation(FEnvQueryInstance& QueryInstance, int32 ItemIndex)"
  },
  {
    "label": "GetItemRotation()",
    "kind": "Method",
    "detail": "Function (} FRotator)",
    "insertText": "GetItemRotation(FEnvQueryInstance& QueryInstance, int32 ItemIndex)"
  },
  {
    "label": "GetItemActor()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetItemActor(FEnvQueryInstance& QueryInstance, int32 ItemIndex)"
  },
  {
    "label": "NormalizeItemScores()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NormalizeItemScores(FEnvQueryInstance& QueryInstance)"
  },
  {
    "label": "IsFiltering()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFiltering()"
  },
  {
    "label": "DescribeFloatTestParams()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "DescribeFloatTestParams()"
  },
  {
    "label": "DescribeBoolTestParams()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "DescribeBoolTestParams(const FString& ConditionDesc)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "UpdateNodeVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNodeVersion()"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "UpdatePreviewData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdatePreviewData()"
  }
]