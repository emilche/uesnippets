[
  {
    "label": "FD3D12Adapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Adapter"
  },
  {
    "label": "FD3D12Resource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Resource"
  },
  {
    "label": "EShaderVisibility",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderVisibility"
  },
  {
    "label": "ERTRootSignatureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERTRootSignatureType"
  },
  {
    "label": "FShaderRegisterCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderRegisterCounts"
  },
  {
    "label": "FD3D12QuantizedBoundShaderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12QuantizedBoundShaderState"
  },
  {
    "label": "FD3D12LockedKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12LockedKey"
  },
  {
    "label": "FD3D12ResourceLocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceLocation"
  },
  {
    "label": "ClassType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClassType"
  },
  {
    "label": "FD3D12RenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RenderTargetView"
  },
  {
    "label": "FD3D12DepthStencilView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DepthStencilView"
  },
  {
    "label": "FD3D12BoundRenderTargets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BoundRenderTargets"
  },
  {
    "label": "CResourceState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CResourceState"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "FThreadsafeQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadsafeQueue"
  },
  {
    "label": "FD3D12View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12View"
  },
  {
    "label": "FD3D12ViewSubset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ViewSubset"
  },
  {
    "label": "TView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TView"
  },
  {
    "label": "FD3D12ScopeLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ScopeLock"
  },
  {
    "label": "FD3D12ScopeNoLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ScopeNoLock"
  },
  {
    "label": "VerifyD3D12Result()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Queue . h \" # include \" D3D12RHICommon . h \" # include \" D3D12Queue . h \" # include \" DXGIUtilities . h \" # include \" RenderUtils . h \" # include \" ShaderCore . h \" namespace D3D12RHI { void)",
    "insertText": "VerifyD3D12Result(HRESULT Result, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, ID3D12Device* Device, FString Message = FString())"
  },
  {
    "label": "VerifyD3D12CreateTextureResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyD3D12CreateTextureResult(HRESULT D3DResult, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, const D3D12_RESOURCE_DESC& TextureDesc, ID3D12Device* Device)"
  },
  {
    "label": "VERIFYD3D12RESULT_LAMBDA()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "VERIFYD3D12RESULT_LAMBDA(x, Device, Lambda)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HRESULT hres = x ;)",
    "insertText": "if(FAILED(hres))"
  },
  {
    "label": "VERIFYD3D12RESULT_EX()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D12RESULT_EX(x, Device)"
  },
  {
    "label": "VERIFYD3D12RESULT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D12RESULT(x)"
  },
  {
    "label": "VERIFYD3D12CREATETEXTURERESULT()",
    "kind": "Method",
    "detail": "Function (} } # define)",
    "insertText": "VERIFYD3D12CREATETEXTURERESULT(x, Desc, Device)"
  },
  {
    "label": "VerifyComRefCount()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "VerifyComRefCount(IUnknown* Object, int32 ExpectedRefs, const TCHAR* Code, const TCHAR* Filename, int32 Line)"
  },
  {
    "label": "checkComRefCount()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "checkComRefCount(Obj,ExpectedRefs) VerifyComRefCount(Obj,ExpectedRefs,TEXT(#Obj),TEXT(__FILE__),__LINE__) void LogPageFaultData(class FD3D12Adapter* InAdapter, FD3D12Device* InDevice, D3D12_GPU_VIRTUAL_ADDRESS InPageFaultAddress)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} using namespace D3D12RHI ; class FD3D12Resource ; void)",
    "insertText": "SetName(ID3D12Object* const Object, const TCHAR* const Name)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(FD3D12Resource* const Resource, const TCHAR* const Name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (enum EShaderVisibility { SV_Vertex,SV_Pixel,SV_Geometry,# if PLATFORM_SUPPORTS_MESH_SHADERS SV_Mesh,SV_Amplification,# endif SV_All,SV_ShaderVisibilityCount } ; enum ERTRootSignatureType { RS_Raster,RS_RayTracingGlobal,RS_RayTracingLocal,RS_WorkGraphGlobal,RS_WorkGraphLocal,} ; struct FShaderRegisterCounts { uint8 SamplerCount ; uint8 ConstantBufferCount ; uint8 ShaderResourceCount ; uint8 UnorderedAccessCount ; bool)",
    "insertText": "operator(const FShaderRegisterCounts& RHS)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Counts.SamplerCount)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Counts.ConstantBufferCount))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Counts.ShaderResourceCount))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(Counts.UnorderedAccessCount))"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(State.ShaderBindingLayout)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(State.RegisterCounts[Index]))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (} Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(State.RootSignatureType))"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(State.Flags))"
  },
  {
    "label": "GetD3D12CubeFace()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "GetD3D12CubeFace(ECubeFace Face)"
  },
  {
    "label": "FD3D12LockedKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12LockedKey(FD3D12Resource* source, uint32 subres = 0) : SourceObject((void*)source) , Subresource(subres)"
  },
  {
    "label": "FD3D12LockedKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FD3D12LockedKey(class FD3D12ResourceLocation* source, uint32 subres = 0) : SourceObject((void*)source) , Subresource(subres)"
  },
  {
    "label": "FD3D12LockedKey()",
    "kind": "Method",
    "detail": "Function (} template<class ClassType>)",
    "insertText": "FD3D12LockedKey(ClassType* source, uint32 subres = 0) : SourceObject((void*)source) , Subresource(subres)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FD3D12LockedKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FD3D12LockedKey& K)"
  },
  {
    "label": "FD3D12BoundRenderTargets()",
    "kind": "Method",
    "detail": "Function (} } ; class FD3D12RenderTargetView ; class FD3D12DepthStencilView ; class FD3D12BoundRenderTargets { public :)",
    "insertText": "FD3D12BoundRenderTargets(FD3D12RenderTargetView** RTArray, uint32 NumActiveRTs, FD3D12DepthStencilView* DSView)"
  },
  {
    "label": "FD3D12BoundRenderTargets()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FD3D12BoundRenderTargets()"
  },
  {
    "label": "ConvertToResourceStateString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToResourceStateString(uint32 ResourceState)"
  },
  {
    "label": "LogResourceBarriers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogResourceBarriers(TConstArrayView<D3D12_RESOURCE_BARRIER> Barriers, ID3D12CommandList *const pCommandList)"
  },
  {
    "label": "D3D12_RESOURCE_STATES()",
    "kind": "Method",
    "detail": "Function (# define D3D12_RESOURCE_STATE_TBD)",
    "insertText": "D3D12_RESOURCE_STATES(-1 ^ (1 << 31)) #define D3D12_RESOURCE_STATE_CORRUPT D3D12_RESOURCE_STATES(-2 ^ (1 << 31)) static bool IsValidD3D12ResourceState(D3D12_RESOURCE_STATES InState)"
  },
  {
    "label": "IsDirectQueueExclusiveD3D12State()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirectQueueExclusiveD3D12State(D3D12_RESOURCE_STATES InState)"
  },
  {
    "label": "GetD3D12ResourceState()",
    "kind": "Method",
    "detail": "Function (} D3D12_RESOURCE_STATES)",
    "insertText": "GetD3D12ResourceState(ERHIAccess InRHIAccess, ED3D12QueueType QueueType)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (class CResourceState { public : void)",
    "insertText": "Initialize(uint32 SubresourceCount)"
  },
  {
    "label": "AreAllSubresourcesSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllSubresourcesSame()"
  },
  {
    "label": "CheckResourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckResourceState(D3D12_RESOURCE_STATES State)"
  },
  {
    "label": "CheckResourceStateInitalized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckResourceStateInitalized()"
  },
  {
    "label": "GetSubresourceState()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_STATES)",
    "insertText": "GetSubresourceState(uint32 SubresourceIndex)"
  },
  {
    "label": "CheckAllSubresourceSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAllSubresourceSame()"
  },
  {
    "label": "SetResourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourceState(D3D12_RESOURCE_STATES State)"
  },
  {
    "label": "SetSubresourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubresourceState(uint32 SubresourceIndex, D3D12_RESOURCE_STATES State)"
  },
  {
    "label": "GetUAVHiddenResourceState()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_STATES)",
    "insertText": "GetUAVHiddenResourceState()"
  },
  {
    "label": "SetUAVHiddenResourceState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUAVHiddenResourceState(D3D12_RESOURCE_STATES InUAVHiddenResourceState)"
  },
  {
    "label": "UAVHiddenResourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UAVHiddenResourceState(uint32)"
  },
  {
    "label": "SetHasInternalTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasInternalTransition()"
  },
  {
    "label": "HasInternalTransition()",
    "kind": "Method",
    "detail": "Function (bHasInternalTransition = 1 ; } bool)",
    "insertText": "HasInternalTransition()"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Enqueue(Item)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (Size + + ; } bool)",
    "insertText": "Dequeue(Type& Result)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (Size - - ; return Items .)",
    "insertText": "Dequeue(Result)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (} template<CompareFunc> bool)",
    "insertText": "Dequeue(Type& Result, const CompareFunc& Func)"
  },
  {
    "label": "BatchDequeue()",
    "kind": "Method",
    "detail": "Function (Size - - ; return true ; } } return false ; } template<ResultType,CompareFunc> bool)",
    "insertText": "BatchDequeue(TArray<ResultType>& Result, const CompareFunc& Func, uint32 MaxItems)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 i = 0 ; Type Item ;)",
    "insertText": "while(Items.Peek(Item) && i <= MaxItems)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (Items .)",
    "insertText": "Dequeue(Item)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (Size - - ; Result .)",
    "insertText": "Emplace(Item)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (i + + ; } else { break ; } } return i> 0 ; } bool)",
    "insertText": "Peek(Type& Result)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Type Result ;)",
    "insertText": "while(Items.Dequeue(Result))"
  },
  {
    "label": "IsCPUWritable()",
    "kind": "Method",
    "detail": "Function (} } } ; bool)",
    "insertText": "IsCPUWritable(D3D12_HEAP_TYPE HeapType, const D3D12_HEAP_PROPERTIES *pCustomHeapProperties = nullptr)"
  },
  {
    "label": "IsGPUOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGPUOnly(D3D12_HEAP_TYPE HeapType, const D3D12_HEAP_PROPERTIES *pCustomHeapProperties = nullptr)"
  },
  {
    "label": "IsCPUAccessible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCPUAccessible(D3D12_HEAP_TYPE HeapType, const D3D12_HEAP_PROPERTIES* pCustomHeapProperties = nullptr)"
  },
  {
    "label": "DetermineInitialResourceState()",
    "kind": "Method",
    "detail": "Function (} D3D12_RESOURCE_STATES)",
    "insertText": "DetermineInitialResourceState(D3D12_HEAP_TYPE HeapType, const D3D12_HEAP_PROPERTIES *pCustomHeapProperties = nullptr)"
  },
  {
    "label": "Get4KTileShape()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Get4KTileShape(D3D12_TILE_SHAPE* pTileShape, DXGI_FORMAT DXGIFormat, EPixelFormat UEFormat, D3D12_RESOURCE_DIMENSION Dimension, uint32 SampleCount)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (uint32 BPU = GPixelFormats [ UEFormat ] . BlockBytes* 8 ;)",
    "insertText": "switch(Dimension)"
  },
  {
    "label": "WidthInTexels()",
    "kind": "Method",
    "detail": "Function (pTileShape ->)",
    "insertText": "WidthInTexels(BPU == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> HeightInTexels = 1 ; pTileShape -> DepthInTexels = 1 ; } break ; case D3D12_RESOURCE_DIMENSION_TEXTURE2D : { pTileShape -> DepthInTexels = 1 ;)",
    "insertText": "if(UE::DXGIUtilities::IsBlockCompressedFormat(DXGIFormat))"
  },
  {
    "label": "GetWidthAlignment()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels = 1 6* UE::)",
    "insertText": "GetWidthAlignment(DXGIFormat)"
  },
  {
    "label": "GetHeightAlignment()",
    "kind": "Method",
    "detail": "Function (pTileShape -> HeightInTexels = 1 6* UE::)",
    "insertText": "GetHeightAlignment(DXGIFormat)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels* = 2 ; } } else {)",
    "insertText": "if(BPU <= 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels = 6 4 ; pTileShape -> HeightInTexels = 6 4 ; } else)",
    "insertText": "if(BPU <= 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels = 6 4 ; pTileShape -> HeightInTexels = 3 2 ; } else)",
    "insertText": "if(BPU <= 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels = 3 2 ; pTileShape -> HeightInTexels = 3 2 ; } else)",
    "insertText": "if(BPU <= 64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels = 3 2 ; pTileShape -> HeightInTexels = 1 6 ; } else)",
    "insertText": "if(BPU <= 128)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels = 1 6 ; pTileShape -> HeightInTexels = 1 6 ; } else {)",
    "insertText": "check(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SampleCount <= 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SampleCount <= 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels / = 2 ; pTileShape -> HeightInTexels / = 1 ; } else)",
    "insertText": "if(SampleCount <= 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels / = 2 ; pTileShape -> HeightInTexels / = 2 ; } else)",
    "insertText": "if(SampleCount <= 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> WidthInTexels / = 4 ; pTileShape -> HeightInTexels / = 2 ; } else)",
    "insertText": "if(SampleCount <= 16)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(UE::DXGIUtilities::GetWidthAlignment(DXGIFormat) == 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pTileShape -> DepthInTexels = 4 ;)",
    "insertText": "if(BPU == 64)"
  },
  {
    "label": "AssertResourceState()",
    "kind": "Method",
    "detail": "Function (} } break ; } } # define ASSERT_RESOURCE_STATES 0 # if ASSERT_RESOURCE_STATES class FD3D12View ; class FD3D12ViewSubset ; template<class TView> bool)",
    "insertText": "AssertResourceState(ID3D12CommandList* pCommandList, FD3D12View* pView, const D3D12_RESOURCE_STATES& State)"
  },
  {
    "label": "AssertResourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertResourceState(ID3D12CommandList* pCommandList, FD3D12Resource* pResource, const D3D12_RESOURCE_STATES& State, uint32 Subresource)"
  },
  {
    "label": "AssertResourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertResourceState(ID3D12CommandList* pCommandList, FD3D12Resource* pResource, const D3D12_RESOURCE_STATES& State, const FD3D12ViewSubset& ViewSubset)"
  },
  {
    "label": "TranslatePrimitiveTopologyType()",
    "kind": "Method",
    "detail": "Function (# endif D3D12_PRIMITIVE_TOPOLOGY_TYPE)",
    "insertText": "TranslatePrimitiveTopologyType(EPrimitiveTopologyType TopologyType)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (# endif default :)",
    "insertText": "ensure(0)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# endif case D3D_PRIMITIVE_TOPOLOGY_UNDEFINED : return D3D12_PRIMITIVE_TOPOLOGY_TYPE_UNDEFINED ; default : return D3D12_PRIMITIVE_TOPOLOGY_TYPE_PATCH ; } } # pragma)",
    "insertText": "warning(pop) FORCEINLINE_DEBUGGABLE uint32 GetMaxMSAAQuality(uint32 SampleCount)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (CS ->)",
    "insertText": "Lock()"
  },
  {
    "label": "FD3D12ScopeLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D12ScopeLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (CS ->)",
    "insertText": "Unlock()"
  },
  {
    "label": "FD3D12ScopeNoLock()",
    "kind": "Method",
    "detail": "Function (} private : FCriticalSection* CS ; } ; struct FD3D12ScopeNoLock { public :)",
    "insertText": "FD3D12ScopeNoLock(FCriticalSection* CritSec)"
  },
  {
    "label": "FD3D12ScopeNoLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FD3D12ScopeNoLock()"
  }
]