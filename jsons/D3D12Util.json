[
  {
    "label": "FD3D12Adapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Adapter"
  },
  {
    "label": "FD3D12Resource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Resource"
  },
  {
    "label": "EShaderVisibility",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderVisibility"
  },
  {
    "label": "ERTRootSignatureType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERTRootSignatureType"
  },
  {
    "label": "FShaderRegisterCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderRegisterCounts"
  },
  {
    "label": "FD3D12QuantizedBoundShaderState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12QuantizedBoundShaderState"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "FD3D12LockedKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12LockedKey"
  },
  {
    "label": "FD3D12ResourceLocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ResourceLocation"
  },
  {
    "label": "ClassType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ClassType"
  },
  {
    "label": "FD3D12RenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12RenderTargetView"
  },
  {
    "label": "FD3D12DepthStencilView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12DepthStencilView"
  },
  {
    "label": "FD3D12BoundRenderTargets",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BoundRenderTargets"
  },
  {
    "label": "CResourceState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CResourceState"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "FThreadsafeQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadsafeQueue"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "FD3D12View",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12View"
  },
  {
    "label": "FD3D12ViewSubset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12ViewSubset"
  },
  {
    "label": "TView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TView"
  },
  {
    "label": "FD3D12ScopeLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ScopeLock"
  },
  {
    "label": "FD3D12ScopeNoLock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FD3D12ScopeNoLock"
  },
  {
    "label": "VerifyD3D12CreateTextureResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyD3D12CreateTextureResult(HRESULT D3DResult, const ANSICHAR* Code, const ANSICHAR* Filename, uint32 Line, const D3D12_RESOURCE_DESC& TextureDesc, ID3D12Device* Device)"
  },
  {
    "label": "VerifyComRefCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyComRefCount(IUnknown* Object, int32 ExpectedRefs, const TCHAR* Code, const TCHAR* Filename, int32 Line)"
  },
  {
    "label": "LogPageFaultData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogPageFaultData(class FD3D12Adapter* InAdapter, FD3D12Device* InDevice, D3D12_GPU_VIRTUAL_ADDRESS InPageFaultAddress)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(ID3D12Object* const Object, const TCHAR* const Name)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetName(FD3D12Resource* const Resource, const TCHAR* const Name)"
  },
  {
    "label": "InitShaderRegisterCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitShaderRegisterCounts(D3D12_RESOURCE_BINDING_TIER ResourceBindingTier, const FShaderCodePackedResourceCounts& Counts, FShaderRegisterCounts& Shader, bool bAllowUAVs = false)"
  },
  {
    "label": "PointerHash()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PointerHash(SourceObject)"
  },
  {
    "label": "FD3D12BoundRenderTargets()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FD3D12BoundRenderTargets(FD3D12RenderTargetView** RTArray, uint32 NumActiveRTs, FD3D12DepthStencilView* DSView)"
  },
  {
    "label": "LogExecuteCommandLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogExecuteCommandLists(uint32 NumCommandLists, ID3D12CommandList *const *ppCommandLists)"
  },
  {
    "label": "ConvertToResourceStateString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToResourceStateString(uint32 ResourceState)"
  },
  {
    "label": "LogResourceBarriers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogResourceBarriers(TConstArrayView<D3D12_RESOURCE_BARRIER> Barriers, ID3D12CommandList *const pCommandList)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "EnumHasAnyFlags(InState, D3D12_RESOURCE_STATE_RENDER_TARGET | D3D12_RESOURCE_STATE_DEPTH_WRITE | D3D12_RESOURCE_STATE_DEPTH_READ | D3D12_RESOURCE_STATE_PIXEL_SHADER_RESOURCE)"
  },
  {
    "label": "GetD3D12ResourceState()",
    "kind": "Method",
    "detail": "Function (D3D12_RESOURCE_STATES)",
    "insertText": "GetD3D12ResourceState(ERHIAccess InRHIAccess, ED3D12QueueType QueueType)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(uint32 SubresourceCount)"
  },
  {
    "label": "CheckAllSubresourceSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAllSubresourceSame()"
  },
  {
    "label": "SetResourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourceState(D3D12_RESOURCE_STATES State)"
  },
  {
    "label": "SetSubresourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubresourceState(uint32 SubresourceIndex, D3D12_RESOURCE_STATES State)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "AssertResourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertResourceState(ID3D12CommandList* pCommandList, FD3D12View* pView, const D3D12_RESOURCE_STATES& State)"
  },
  {
    "label": "AssertResourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertResourceState(ID3D12CommandList* pCommandList, FD3D12Resource* pResource, const D3D12_RESOURCE_STATES& State, uint32 Subresource)"
  },
  {
    "label": "AssertResourceState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AssertResourceState(ID3D12CommandList* pCommandList, FD3D12Resource* pResource, const D3D12_RESOURCE_STATES& State, const FD3D12ViewSubset& ViewSubset)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ensure(0)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "ensure(0)"
  }
]