[
  {
    "label": "FNavigationDirtyElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyElement"
  },
  {
    "label": "UNavArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNavArea"
  },
  {
    "label": "FNavigationDataHandler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDataHandler"
  },
  {
    "label": "FNavigationDataHandler()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NavigationOctreeController . h \" # include \" NavigationDirtyAreasController . h \" struct FNavigationDirtyElement ; class UNavArea ; struct FNavigationDataHandler { FNavigationOctreeController& OctreeController ; FNavigationDirtyAreasController& DirtyAreasController ;)",
    "insertText": "FNavigationDataHandler(FNavigationOctreeController& InOctreeController, FNavigationDirtyAreasController& InDirtyAreasController)"
  },
  {
    "label": "ConstructNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructNavOctree(const FVector& Origin, const double Radius, const ENavDataGatheringModeConfig DataGatheringMode, const float GatheringNavModifiersWarningLimitTime)"
  },
  {
    "label": "RemoveFromNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromNavOctree(const FOctreeElementId2& ElementId, int32 UpdateFlags)"
  },
  {
    "label": "RegisterElementWithNavOctree()",
    "kind": "Method",
    "detail": "Function (FSetElementId)",
    "insertText": "RegisterElementWithNavOctree(const TSharedRef<const FNavigationElement>& ElementRef, int32 UpdateFlags)"
  },
  {
    "label": "AddElementToNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElementToNavOctree(const FNavigationDirtyElement& DirtyElement)"
  },
  {
    "label": "UnregisterElementWithNavOctree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterElementWithNavOctree(const TSharedRef<const FNavigationElement>& ElementRef, int32 UpdateFlags)"
  },
  {
    "label": "UpdateNavOctreeElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNavOctreeElement(FNavigationElementHandle ElementHandle, const TSharedRef<const FNavigationElement>& UpdatedElement, int32 UpdateFlags)"
  },
  {
    "label": "UpdateNavOctreeElementBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNavOctreeElementBounds(FNavigationElementHandle Element, const FBox& NewBounds, const TConstArrayView<FBox> DirtyAreas)"
  },
  {
    "label": "FindElementsInNavOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindElementsInNavOctree(const FBox& QueryBox, const FNavigationOctreeFilter& Filter, TArray<FNavigationOctreeElement>& Elements)"
  },
  {
    "label": "ReplaceAreaInOctreeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceAreaInOctreeData(FNavigationElementHandle Element, TSubclassOf<UNavArea> OldArea, TSubclassOf<UNavArea> NewArea, bool bReplaceChildClasses)"
  },
  {
    "label": "AddLevelCollisionToOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelCollisionToOctree(ULevel& Level)"
  },
  {
    "label": "RemoveLevelCollisionFromOctree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelCollisionFromOctree(ULevel& Level)"
  },
  {
    "label": "ProcessPendingOctreeUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPendingOctreeUpdates()"
  },
  {
    "label": "DemandLazyDataGathering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DemandLazyDataGathering(FNavigationRelevantData& ElementData)"
  },
  {
    "label": "UpdateNavOctreeParentChain()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateNavOctreeParentChain(const TSharedRef<const FNavigationElement>& Element, bool bSkipElementOwnerUpdate = false)"
  }
]