[
  {
    "label": "FVisualLoggerBinaryFileDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisualLoggerBinaryFileDevice"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" VisualLogger / VisualLoggerTypes . h \" # if ENABLE_VISUAL_LOG # define VISLOG_FILENAME_EXT)",
    "insertText": "TEXT(\"bvlog\")"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (public : FVisualLoggerBinaryFileDevice&)",
    "insertText": "Get()"
  },
  {
    "label": "FVisualLoggerBinaryFileDevice()",
    "kind": "Method",
    "detail": "Function (FVisualLoggerBinaryFileDevice GDevice ; return GDevice ; })",
    "insertText": "FVisualLoggerBinaryFileDevice()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup(bool bReleaseMemory = false)"
  },
  {
    "label": "StartRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartRecordingToFile(double TimeStamp)"
  },
  {
    "label": "StopRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopRecordingToFile(double TimeStamp)"
  },
  {
    "label": "DiscardRecordingToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardRecordingToFile()"
  },
  {
    "label": "SetFileName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileName(const FString& InFileName)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const class UObject* LogOwner, FName OwnerName, FName OwnerClassName, const FVisualLogEntry& LogEntry)"
  },
  {
    "label": "GetRecordedLogs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRecordedLogs(TArray<FVisualLogEntryItem>& RecordedLogs)"
  },
  {
    "label": "HasFlags()",
    "kind": "Method",
    "detail": "Function (RecordedLogs = FrameCache ; } bool)",
    "insertText": "HasFlags(int32 InFlags)"
  }
]