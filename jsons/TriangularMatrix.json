[
  {
    "label": "triangular_solve_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solve_retval"
  },
  {
    "label": "TriangularBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangularBase"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "TriangularViewImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangularViewImpl"
  },
  {
    "label": "TriangularView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TriangularView"
  },
  {
    "label": "evaluator_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator_traits"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "Triangular2Triangular",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Triangular2Triangular"
  },
  {
    "label": "Triangular2Dense",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Triangular2Dense"
  },
  {
    "label": "Dense2Triangular",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dense2Triangular"
  },
  {
    "label": "triangular_assignment_loop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_assignment_loop"
  },
  {
    "label": "triangular_dense_assignment_kernel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "triangular_dense_assignment_kernel"
  },
  {
    "label": "AssignmentKind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssignmentKind"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "SizeAtCompileTime()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULARMATRIX_H # define EIGEN_TRIANGULARMATRIX_H namespace Eigen { namespace internal { template<int Side,TriangularType,Rhs> struct triangular_solve_retval ; } template<Derived> class TriangularBase : public EigenBase<Derived> { public : enum { Mode = internal::traits<Derived>::Mode,RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime,MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime,)",
    "insertText": "SizeAtCompileTime(internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime, internal::traits<Derived>::ColsAtCompileTime>::ret), MaxSizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::MaxRowsAtCompileTime, internal::traits<Derived>::MaxColsAtCompileTime>::ret)"
  },
  {
    "label": "TriangularBase()",
    "kind": "Method",
    "detail": "Function (typedef internal::traits<Derived>::Scalar Scalar ; typedef internal::traits<Derived>::StorageKind StorageKind ; typedef internal::traits<Derived>::StorageIndex StorageIndex ; typedef internal::traits<Derived>::FullMatrixType DenseMatrixType ; typedef DenseMatrixType DenseType ; typedef Derived const& Nested ; EIGEN_DEVICE_FUNC)",
    "insertText": "TriangularBase()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(!((int(Mode) & int(UnitDiag)) && (int(Mode) & int(ZeroDiag))))"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "outerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerStride()"
  },
  {
    "label": "innerStride()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "innerStride()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(Index rows, Index cols)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(rows)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows==this->rows() && cols==this->cols())"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "copyCoeff()",
    "kind": "Method",
    "detail": "Function (} template<Other> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "copyCoeff(Index row, Index col, Other& other)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived().coeffRef(row, col) = other.coeff(row, col)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "operator()(Index row, Index col)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN EIGEN_DEVICE_FUNC const Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} # endif template<DenseDerived> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalTo(MatrixBase<DenseDerived> &other)"
  },
  {
    "label": "evalToLazy()",
    "kind": "Method",
    "detail": "Function (template<DenseDerived> EIGEN_DEVICE_FUNC void)",
    "insertText": "evalToLazy(MatrixBase<DenseDerived> &other)"
  },
  {
    "label": "toDenseMatrix()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC DenseMatrixType)",
    "insertText": "toDenseMatrix()"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (DenseMatrixType)",
    "insertText": "res(rows(), cols())"
  },
  {
    "label": "evalToLazy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalToLazy(res)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(row)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(col)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(col>=0 && col<cols() && row>=0 && row<rows())"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (const int mode =)",
    "insertText": "int(Mode)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(mode)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((mode==Upper && col>=row) || (mode==Lower && col<=row) || ((mode==StrictlyUpper || mode==UnitUpper) && col>row) || ((mode==StrictlyLower || mode==UnitLower) && col<row))"
  },
  {
    "label": "check_coordinates_internal()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_INTERNAL_DEBUGGING void)",
    "insertText": "check_coordinates_internal(Index row, Index col)"
  },
  {
    "label": "check_coordinates_internal()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "check_coordinates_internal(Index , Index)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (} # endif } ; namespace internal { template<MatrixType,unsigned int _Mode> struct traits<TriangularView<MatrixType,_Mode>> : traits<MatrixType> { typedef ref_selector<MatrixType>::non_const_type MatrixTypeNested ; typedef remove_reference<MatrixTypeNested>::type MatrixTypeNestedNonRef ; typedef remove_all<MatrixTypeNested>::type MatrixTypeNestedCleaned ; typedef MatrixType::PlainObject FullMatrixType ; typedef MatrixType ExpressionType ; enum { Mode = _Mode,FlagsLvalueBit = is_lvalue<MatrixType>::value ? LvalueBit : 0,)",
    "insertText": "Flags(MatrixTypeNestedCleaned::Flags & (HereditaryBits | FlagsLvalueBit) & (~(PacketAccessBit | DirectAccessBit | LinearAccessBit)))"
  },
  {
    "label": "TransposeMode()",
    "kind": "Method",
    "detail": "Function (} ; } template<_MatrixType,unsigned int _Mode,StorageKind> class TriangularViewImpl ; template<_MatrixType,unsigned int _Mode> class TriangularView : public TriangularViewImpl<_MatrixType,_Mode,internal::traits<_MatrixType>::StorageKind> { public : typedef TriangularViewImpl<_MatrixType,_Mode,internal::traits<_MatrixType>::StorageKind> Base ; typedef internal::traits<TriangularView>::Scalar Scalar ; typedef _MatrixType MatrixType ; protected : typedef internal::traits<TriangularView>::MatrixTypeNested MatrixTypeNested ; typedef internal::traits<TriangularView>::MatrixTypeNestedNonRef MatrixTypeNestedNonRef ; typedef internal::remove_all<MatrixType::ConjugateReturnType>::type MatrixConjugateReturnType ; typedef TriangularView<internal::add_const<MatrixType>::type,_Mode> ConstTriangularView ; public : typedef internal::traits<TriangularView>::StorageKind StorageKind ; typedef internal::traits<TriangularView>::MatrixTypeNestedCleaned NestedExpression ; enum { Mode = _Mode,Flags = internal::traits<TriangularView>::Flags,)",
    "insertText": "TransposeMode(Mode & Upper ? Lower : 0) | (Mode & Lower ? Upper : 0) | (Mode & (UnitDiag)) | (Mode & (ZeroDiag))"
  },
  {
    "label": "TriangularView()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC)",
    "insertText": "TriangularView(MatrixType& matrix) : m_matrix(matrix)"
  },
  {
    "label": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "EIGEN_INHERIT_ASSIGNMENT_OPERATORS(TriangularView) EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR inline Index rows()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const NestedExpression&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "conjugateIf()",
    "kind": "Method",
    "detail": "Function (} template<bool Cond> EIGEN_DEVICE_FUNC internal::conditional<Cond,ConjugateReturnType,ConstTriangularView>::type)",
    "insertText": "conjugateIf()"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<Cond,ConjugateReturnType,ConstTriangularView>::type ReturnType ; return)",
    "insertText": "ReturnType(m_matrix.template conjugateIf<Cond>())"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (} typedef TriangularView<const MatrixType::AdjointReturnType,TransposeMode> AdjointReturnType ; EIGEN_DEVICE_FUNC const AdjointReturnType)",
    "insertText": "adjoint()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} typedef TriangularView<MatrixType::TransposeReturnType,TransposeMode> TransposeReturnType ; EIGEN_DEVICE_FUNC TransposeReturnType)",
    "insertText": "transpose()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(MatrixType) typename MatrixType::TransposeReturnType tmp(m_matrix)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} template<Other> EIGEN_DEVICE_FUNC const Solve<TriangularView,Other>)",
    "insertText": "solve(const MatrixBase<Other>& other)"
  },
  {
    "label": "selfadjointView()",
    "kind": "Method",
    "detail": "Function (} # else using Base::solve ; # endif EIGEN_DEVICE_FUNC SelfAdjointView<MatrixTypeNestedNonRef,Mode>)",
    "insertText": "selfadjointView()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((Mode&(UnitDiag|ZeroDiag))==0,PROGRAMMING_ERROR)"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "determinant()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Other> EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "operator(const DenseBase<Other>& other)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.derived(), internal::add_assign_op<Scalar,typename Other::Scalar>())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.derived(), internal::sub_assign_op<Scalar,typename Other::Scalar>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "operator(const typename internal::traits<MatrixType>::Scalar& other)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "fill(const Scalar& value)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConstant(value)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "setConstant(const Scalar& value)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "setZero()"
  },
  {
    "label": "setOnes()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "setOnes()"
  },
  {
    "label": "check_coordinates_internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "check_coordinates_internal(row, col)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(TriangularViewType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "operator(const TriangularBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "operator(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PARSED_BY_DOXYGEN EIGEN_DEVICE_FUNC TriangularViewType&)",
    "insertText": "operator(const TriangularViewImpl& other)"
  },
  {
    "label": "lazyAssign()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEPRECATED EIGEN_DEVICE_FUNC void)",
    "insertText": "lazyAssign(const TriangularBase<OtherDerived>& other)"
  },
  {
    "label": "lazyAssign()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEPRECATED EIGEN_DEVICE_FUNC void)",
    "insertText": "lazyAssign(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif template<OtherDerived> EIGEN_DEVICE_FUNC const Product<TriangularViewType,OtherDerived>)",
    "insertText": "operator(const MatrixBase<OtherDerived>& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC const Product<OtherDerived,TriangularViewType>)",
    "insertText": "operator(const MatrixBase<OtherDerived>& lhs, const TriangularViewImpl& rhs)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (template<int Side,OtherDerived> EIGEN_DEVICE_FUNC void)",
    "insertText": "solveInPlace(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC # ifdef EIGEN_PARSED_BY_DOXYGEN void)",
    "insertText": "swap(TriangularBase<OtherDerived> &other) #else void swap(TriangularBase<OtherDerived> const & other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_LVALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_LVALUE(OtherDerived)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.const_cast_derived(), internal::swap_assign_op<Scalar>())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEPRECATED EIGEN_DEVICE_FUNC void)",
    "insertText": "swap(MatrixBase<OtherDerived> const & other)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} template<RhsType,DstType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "_solve_impl(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "solveInPlace(dst)"
  },
  {
    "label": "_assignProduct()",
    "kind": "Method",
    "detail": "Function (} template<ProductType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TriangularViewType&)",
    "insertText": "_assignProduct(const ProductType& prod, const Scalar& alpha, bool beta)"
  },
  {
    "label": "EIGEN_DEFAULT_COPY_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "EIGEN_DEFAULT_COPY_CONSTRUCTOR(TriangularViewImpl) EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(TriangularViewImpl)"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.derived(), internal::assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.template triangularView<Mode>())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Mode == int(OtherDerived::Mode))"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived())"
  },
  {
    "label": "call_assignment_no_alias()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment_no_alias(derived(), other.derived())"
  },
  {
    "label": "evalToLazy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "evalToLazy(other.derived())"
  },
  {
    "label": "triangularView()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<unsigned int Mode> EIGEN_DEVICE_FUNC MatrixBase<Derived>::template TriangularViewReturnType<Mode>::Type MatrixBase<Derived)",
    "insertText": "triangularView()"
  },
  {
    "label": "isUpperTriangular()",
    "kind": "Method",
    "detail": "Function (} template<Derived> bool MatrixBase<Derived)",
    "insertText": "isUpperTriangular(const RealScalar& prec)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar maxAbsOnUpperPart = static_cast<)",
    "insertText": "RealScalar(-1)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (Index maxi =)",
    "insertText": "mini(j, rows()-1)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (RealScalar absValue =)",
    "insertText": "abs(coeff(i,j))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } RealScalar threshold = maxAbsOnUpperPart* prec ;)",
    "insertText": "for(Index j = 0; j < cols(); ++j) for(Index i = j+1; i < rows(); ++i) if(numext::abs(coeff(i, j)) > threshold)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} RealScalar threshold = maxAbsOnLowerPart* prec ;)",
    "insertText": "for(Index j = 1; j < cols(); ++j)"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (} return true ; } namespace internal { template<MatrixType,unsigned int Mode> struct evaluator_traits<TriangularView<MatrixType,Mode>> { typedef storage_kind_to_evaluator_kind<MatrixType::StorageKind>::Kind Kind ; typedef glue_shapes<evaluator_traits<MatrixType>::Shape,TriangularShape>::type Shape ; } ; template<MatrixType,unsigned int Mode> struct unary_evaluator<TriangularView<MatrixType,Mode>,IndexBased> : evaluator<internal::remove_all<MatrixType>::type> { typedef TriangularView<MatrixType,Mode> XprType ; typedef evaluator<internal::remove_all<MatrixType>::type> Base ; EIGEN_DEVICE_FUNC)",
    "insertText": "unary_evaluator(const XprType &xpr) : Base(xpr.nestedExpression())"
  },
  {
    "label": "triangular_dense_assignment_kernel()",
    "kind": "Method",
    "detail": "Function (} } ; struct Triangular2Triangular { } ; struct Triangular2Dense { } ; struct Dense2Triangular { } ; template<Kernel,unsigned int Mode,int UnrollCount,bool ClearOpposite> struct triangular_assignment_loop ; template<int UpLo,int Mode,int SetOpposite,DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,int Version = Specialized> class triangular_dense_assignment_kernel : public generic_dense_assignment_kernel<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,Version> { protected : typedef generic_dense_assignment_kernel<DstEvaluatorTypeT,SrcEvaluatorTypeT,Functor,Version> Base ; typedef Base::DstXprType DstXprType ; typedef Base::SrcXprType SrcXprType ; using Base::m_dst ; using Base::m_src ; using Base::m_functor ; public : typedef Base::DstEvaluatorType DstEvaluatorType ; typedef Base::SrcEvaluatorType SrcEvaluatorType ; typedef Base::Scalar Scalar ; typedef Base::AssignmentTraits AssignmentTraits ; EIGEN_DEVICE_FUNC)",
    "insertText": "triangular_dense_assignment_kernel(DstEvaluatorType &dst, const SrcEvaluatorType &src, const Functor &func, DstXprType& dstExpr) : Base(dst, src, func, dstExpr)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_INTERNAL_DEBUGGING EIGEN_DEVICE_FUNC void)",
    "insertText": "assignCoeff(Index row, Index col)"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(row!=col)"
  },
  {
    "label": "assignCoeff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assignCoeff(row,col)"
  },
  {
    "label": "assignDiagonalCoeff()",
    "kind": "Method",
    "detail": "Function (} # else using Base::assignCoeff ; # endif EIGEN_DEVICE_FUNC void)",
    "insertText": "assignDiagonalCoeff(Index id)"
  },
  {
    "label": "assignOppositeCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "assignOppositeCoeff(Index row, Index col)"
  },
  {
    "label": "call_triangular_assignment_loop()",
    "kind": "Method",
    "detail": "Function (} } ; template<int Mode,bool SetOpposite,DstXprType,SrcXprType,Functor> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_triangular_assignment_loop(DstXprType& dst, const SrcXprType& src, const Functor &func)"
  },
  {
    "label": "srcEvaluator()",
    "kind": "Method",
    "detail": "Function (typedef evaluator<DstXprType> DstEvaluatorType ; typedef evaluator<SrcXprType> SrcEvaluatorType ; SrcEvaluatorType)",
    "insertText": "srcEvaluator(src)"
  },
  {
    "label": "dstEvaluator()",
    "kind": "Method",
    "detail": "Function (DstEvaluatorType)",
    "insertText": "dstEvaluator(dst)"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (typedef triangular_dense_assignment_kernel<)",
    "insertText": "Mode(Lower|Upper),Mode&(UnitDiag|ZeroDiag|SelfAdjoint)"
  },
  {
    "label": "kernel()",
    "kind": "Method",
    "detail": "Function (Kernel)",
    "insertText": "kernel(dstEvaluator, srcEvaluator, func, dst.const_cast_derived())"
  },
  {
    "label": "SizeAtCompileTime()",
    "kind": "Method",
    "detail": "Function (enum { unroll = DstXprType::SizeAtCompileTime ! = Dynamic&& SrcEvaluatorType::CoeffReadCost<HugeCost&&)",
    "insertText": "SizeAtCompileTime(int(DstEvaluatorType::CoeffReadCost) + int(SrcEvaluatorType::CoeffReadCost))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (triangular_assignment_loop<Kernel,Mode,unroll ?)",
    "insertText": "int(DstXprType::SizeAtCompileTime) : Dynamic, SetOpposite>::run(kernel)"
  },
  {
    "label": "call_triangular_assignment_loop()",
    "kind": "Method",
    "detail": "Function (} template<int Mode,bool SetOpposite,DstXprType,SrcXprType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "call_triangular_assignment_loop(DstXprType& dst, const SrcXprType& src)"
  },
  {
    "label": "SetOpposite()",
    "kind": "Method",
    "detail": "Function (call_triangular_assignment_loop<Mode,)",
    "insertText": "SetOpposite(dst, src, internal::assign_op<typename DstXprType::Scalar,typename SrcXprType::Scalar>())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<> struct AssignmentKind<TriangularShape,TriangularShape> { typedef Triangular2Triangular Kind ; } ; template<> struct AssignmentKind<DenseShape,TriangularShape> { typedef Triangular2Dense Kind ; } ; template<> struct AssignmentKind<TriangularShape,DenseShape> { typedef Dense2Triangular Kind ; } ; template<DstXprType,SrcXprType,Functor> struct Assignment<DstXprType,SrcXprType,Functor,Triangular2Triangular> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const Functor &func)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(int(DstXprType::Mode) == int(SrcXprType::Mode))"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (call_triangular_assignment_loop<DstXprType::Mode,)",
    "insertText": "false(dst, src, func)"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (call_triangular_assignment_loop<)",
    "insertText": "Mode(int(SrcXprType::Mode) & int(SelfAdjoint)) == 0>(dst, src, func)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} } ; template<Kernel,unsigned int Mode,int UnrollCount,bool SetOpposite> struct triangular_assignment_loop { typedef Kernel::DstEvaluatorType DstEvaluatorType ; typedef DstEvaluatorType::XprType DstXprType ; enum {)",
    "insertText": "col(UnrollCount-1) / DstXprType::RowsAtCompileTime, row = (UnrollCount-1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (typedef Kernel::Scalar Scalar ; EIGEN_DEVICE_FUNC void)",
    "insertText": "run(Kernel &kernel)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (triangular_assignment_loop<Kernel,Mode,UnrollCount - 1,SetOpposite)",
    "insertText": "run(kernel)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Kernel,unsigned int Mode,bool SetOpposite> struct triangular_assignment_loop<Kernel,Mode,0,SetOpposite> { EIGEN_DEVICE_FUNC void)",
    "insertText": "run(Kernel &)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (Index maxi =)",
    "insertText": "mini(j, kernel.rows())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "if(((Mode&Lower) && SetOpposite) || (Mode&Upper))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else i = maxi ;)",
    "insertText": "if(i<kernel.rows()) kernel.assignDiagonalCoeff(i++)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "derived().resize(this->rows(), this->cols())"
  },
  {
    "label": "Mode()",
    "kind": "Method",
    "detail": "Function (internal::call_triangular_assignment_loop<)",
    "insertText": "Mode(int(Derived::Mode) & int(SelfAdjoint)) == 0 >(other.derived(), derived().nestedExpression())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<DstXprType,Lhs,Rhs,Scalar> struct Assignment<DstXprType,Product<Lhs,Rhs,DefaultProduct>,internal::assign_op<Scalar,Product<Lhs,Rhs,DefaultProduct>::Scalar>,Dense2Triangular> { typedef Product<Lhs,Rhs,DefaultProduct> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "_assignProduct()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "_assignProduct(src, Scalar(1), false)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,Lhs,Rhs,Scalar> struct Assignment<DstXprType,Product<Lhs,Rhs,DefaultProduct>,internal::add_assign_op<Scalar,Product<Lhs,Rhs,DefaultProduct>::Scalar>,Dense2Triangular> { typedef Product<Lhs,Rhs,DefaultProduct> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::add_assign_op<Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "_assignProduct()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "_assignProduct(src, Scalar(1), true)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<DstXprType,Lhs,Rhs,Scalar> struct Assignment<DstXprType,Product<Lhs,Rhs,DefaultProduct>,internal::sub_assign_op<Scalar,Product<Lhs,Rhs,DefaultProduct>::Scalar>,Dense2Triangular> { typedef Product<Lhs,Rhs,DefaultProduct> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::sub_assign_op<Scalar,typename SrcXprType::Scalar> &)"
  },
  {
    "label": "_assignProduct()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "_assignProduct(src, Scalar(-1), true)"
  }
]