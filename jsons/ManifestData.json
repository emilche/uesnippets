[
  {
    "label": "FBuildPatchAppManifest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuildPatchAppManifest"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FManifestHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManifestHeader"
  },
  {
    "label": "FManifestMeta",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManifestMeta"
  },
  {
    "label": "FChunkDataList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChunkDataList"
  },
  {
    "label": "FFileManifest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileManifest"
  },
  {
    "label": "FFileManifestList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileManifestList"
  },
  {
    "label": "FCustomFields",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomFields"
  },
  {
    "label": "FManifestData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManifestData"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / SecureHash . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / EnumRange . h \" # include \" Serialization / Archive . h \" # include \" Data / ChunkData . h \" # include \" BuildPatchFeatureLevel . h \" class FBuildPatchAppManifest ; namespace BuildPatchServices { enum class EManifestStorageFlags : uint8 { None = 0,Compressed = 1,Encrypted = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EManifestStorageFlags)"
  },
  {
    "label": "GetChunkSubdir()",
    "kind": "Method",
    "detail": "Function (namespace ManifestVersionHelpers { const TCHAR*)",
    "insertText": "GetChunkSubdir(EFeatureLevel FeatureLevel)"
  },
  {
    "label": "GetFileSubdir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetFileSubdir(EFeatureLevel FeatureLevel)"
  },
  {
    "label": "FManifestHeader()",
    "kind": "Method",
    "detail": "Function (} struct FManifestHeader {)",
    "insertText": "FManifestHeader()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FManifestHeader& Header)"
  },
  {
    "label": "FManifestMeta()",
    "kind": "Method",
    "detail": "Function (EFeatureLevel Version ; uint32 HeaderSize ; uint32 DataSizeCompressed ; uint32 DataSizeUncompressed ; EManifestStorageFlags StoredAs ; FSHAHash SHAHash ; } ; struct FManifestMeta {)",
    "insertText": "FManifestMeta()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FManifestMeta& Meta)"
  },
  {
    "label": "FChunkDataList()",
    "kind": "Method",
    "detail": "Function (EFeatureLevel FeatureLevel ; bool bIsFileData ; uint32 AppID ; FString AppName ; FString BuildVersion ; FString LaunchExe ; FString LaunchCommand ; TSet<FString> PrereqIds ; FString PrereqName ; FString PrereqPath ; FString PrereqArgs ; FString BuildId ; } ; struct FChunkDataList {)",
    "insertText": "FChunkDataList()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FChunkDataList& ChunkDataList)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (TArray<FChunkInfo> ChunkList ; } ; enum class EFileMetaFlags : uint8 { None = 0,ReadOnly = 1,Compressed = 1<<1,UnixExecutable = 1<<2 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EFileMetaFlags)"
  },
  {
    "label": "FFileManifest()",
    "kind": "Method",
    "detail": "Function (struct FFileManifest {)",
    "insertText": "FFileManifest()"
  },
  {
    "label": "FFileManifestList()",
    "kind": "Method",
    "detail": "Function (FString Filename ; FString SymlinkTarget ; FSHAHash FileHash ; EFileMetaFlags FileMetaFlags ; TArray<FString> InstallTags ; TArray<FChunkPart> ChunkParts ; uint64 FileSize ; } ; struct FFileManifestList {)",
    "insertText": "FFileManifestList()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FFileManifestList& FileManifestList)"
  },
  {
    "label": "OnPostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostLoad()"
  },
  {
    "label": "FCustomFields()",
    "kind": "Method",
    "detail": "Function (TArray<FFileManifest> FileList ; } ; struct FCustomFields {)",
    "insertText": "FCustomFields()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FCustomFields& CustomFields)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FString> Fields ; } ; class FManifestData { public : void)",
    "insertText": "Init()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar, FBuildPatchAppManifest& AppManifest, BuildPatchServices::EFeatureLevel SaveFormat = BuildPatchServices::EFeatureLevel::Latest)"
  },
  {
    "label": "ENUM_RANGE_BY_FIRST_AND_LAST()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "ENUM_RANGE_BY_FIRST_AND_LAST(BuildPatchServices::EFeatureLevel, BuildPatchServices::EFeatureLevel::Original, BuildPatchServices::EFeatureLevel::Latest)"
  }
]