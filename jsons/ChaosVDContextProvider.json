[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FChaosVDContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDContext"
  },
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "FChaosVDScopedTLSBufferAccessor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDScopedTLSBufferAccessor"
  },
  {
    "label": "FChaosVDScopeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDScopeContext"
  },
  {
    "label": "FChaosCVDScopedDataChannelOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosCVDScopedDataChannelOverride"
  },
  {
    "label": "FChaosVDContextWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChaosVDContextWrapper"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosVDOptionalDataChannel . h \" # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" HAL / ThreadSingleton . h \" # include \" Templates / SharedPointer . h \" # if WITH_CHAOS_VISUAL_DEBUGGER # include \" ChaosVDRuntimeModule . h \" enum class EChaosVDContextType : int32 { Any,Solver,Query,SubTraceQuery,} ; enum class EChaosVDContextAttributes : int32 { None = 0,Resimulated = 1<<0 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EChaosVDContextAttributes)"
  },
  {
    "label": "SetDataChannel()",
    "kind": "Method",
    "detail": "Function (int32 OwnerID = INDEX_NONE ; int32 Id = INDEX_NONE ; int32 Type = INDEX_NONE ; int32 Attributes = 0 ; void)",
    "insertText": "SetDataChannel(const TSharedRef<Chaos::VisualDebugger::FChaosVDOptionalDataChannel>& NewDataChannel)"
  },
  {
    "label": "IsDataChannelEnabled()",
    "kind": "Method",
    "detail": "Function (CurrentDataChannel = NewDataChannel ; } bool)",
    "insertText": "IsDataChannelEnabled()"
  },
  {
    "label": "FChaosVDThreadContext()",
    "kind": "Method",
    "detail": "Function (} private : TSharedRef<Chaos::VisualDebugger::FChaosVDOptionalDataChannel> CurrentDataChannel = CVDDC_Default ; } ; class FChaosVDThreadContext : public TThreadSingleton<FChaosVDThreadContext> { public : ~)",
    "insertText": "FChaosVDThreadContext()"
  },
  {
    "label": "RemoveRecordingStopCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRecordingStopCallback(RecordingStoppedHandle)"
  },
  {
    "label": "GetCurrentContext()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "GetCurrentContext(FChaosVDContext& OutContext)"
  },
  {
    "label": "GetCurrentContext()",
    "kind": "Method",
    "detail": "Function (const FChaosVDContext*)",
    "insertText": "GetCurrentContext(EChaosVDContextType Type)"
  },
  {
    "label": "GetCurrentContext()",
    "kind": "Method",
    "detail": "Function (const FChaosVDContext*)",
    "insertText": "GetCurrentContext()"
  },
  {
    "label": "PushContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushContext(const FChaosVDContext& InContext)"
  },
  {
    "label": "PopContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopContext()"
  },
  {
    "label": "GetTLSDataBufferRef()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FChaosVDContext,TInlineAllocator<1 6>> LocalContextStack ; TArray<uint8>&)",
    "insertText": "GetTLSDataBufferRef()"
  },
  {
    "label": "RegisterRecordingStopCallback()",
    "kind": "Method",
    "detail": "Function (RecordingStoppedHandle =)",
    "insertText": "RegisterRecordingStopCallback(FChaosVDRecordingStateChangedDelegate::FDelegate::CreateLambda([this](){ CVDDataBuffer.Empty(); }))"
  },
  {
    "label": "IsContextEnabledAndValid()",
    "kind": "Method",
    "detail": "Function (} return CVDDataBuffer ; } FDelegateHandle RecordingStoppedHandle ; int32 BufferAccessCounter = 0 ; TArray<uint8> CVDDataBuffer ; struct FChaosVDScopedTLSBufferAccessor ; } ; namespace Chaos::VisualDebugger::Utils { bool)",
    "insertText": "IsContextEnabledAndValid(const FChaosVDContext* Context)"
  },
  {
    "label": "FChaosVDScopeContext()",
    "kind": "Method",
    "detail": "Function (} } struct FChaosVDScopeContext {)",
    "insertText": "FChaosVDScopeContext(const FChaosVDContext& InCVDContext)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PushContext(InCVDContext)"
  },
  {
    "label": "FChaosVDScopeContext()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChaosVDScopeContext()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PopContext()"
  },
  {
    "label": "FChaosCVDScopedDataChannelOverride()",
    "kind": "Method",
    "detail": "Function (} } ; struct FChaosCVDScopedDataChannelOverride {)",
    "insertText": "FChaosCVDScopedDataChannelOverride(const TSharedRef<Chaos::VisualDebugger::FChaosVDOptionalDataChannel>& NewDataChannel)"
  },
  {
    "label": "SetDataChannel()",
    "kind": "Method",
    "detail": "Function (FChaosVDContext NewContext =* CVDContextData ; NewContext .)",
    "insertText": "SetDataChannel(NewDataChannel)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().PushContext(MoveTemp(NewContext))"
  },
  {
    "label": "FChaosCVDScopedDataChannelOverride()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FChaosCVDScopedDataChannelOverride()"
  },
  {
    "label": "FChaosVDScopedTLSBufferAccessor()",
    "kind": "Method",
    "detail": "Function (} } ; struct FChaosVDScopedTLSBufferAccessor {)",
    "insertText": "FChaosVDScopedTLSBufferAccessor() : BufferRef(FChaosVDThreadContext::Get().GetTLSDataBufferRef())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (uint32 MaxTraceChunkSize = TNumericLimits<uint16)",
    "insertText": "Max()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (BufferRef .)",
    "insertText": "Reserve(MaxTraceChunkSize)"
  },
  {
    "label": "FChaosVDScopedTLSBufferAccessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FChaosVDScopedTLSBufferAccessor()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (BufferRef .)",
    "insertText": "Reset(MaxTraceChunkSize)"
  },
  {
    "label": "CVD_GET_CURRENT_CONTEXT()",
    "kind": "Method",
    "detail": "Function (} TArray<uint8>& BufferRef ; } ; # ifndef CVD_GET_CURRENT_CONTEXT # define)",
    "insertText": "CVD_GET_CURRENT_CONTEXT(OutContext) \\ FChaosVDThreadContext::Get().GetCurrentContext(OutContext)"
  },
  {
    "label": "CVD_GET_WRAPPED_CURRENT_CONTEXT()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef CVD_GET_WRAPPED_CURRENT_CONTEXT # define)",
    "insertText": "CVD_GET_WRAPPED_CURRENT_CONTEXT(OutWrappedContext)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "Get().GetCurrentContext(CurrentContext)"
  },
  {
    "label": "FChaosVDContextWrapper()",
    "kind": "Method",
    "detail": "Function (\\ OutWrappedContext =)",
    "insertText": "FChaosVDContextWrapper(CurrentContext)"
  },
  {
    "label": "CVD_SCOPE_CONTEXT()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef CVD_SCOPE_CONTEXT # define)",
    "insertText": "CVD_SCOPE_CONTEXT(InContext) \\ FChaosVDScopeContext CVDScope(InContext)"
  },
  {
    "label": "CVD_SCOPED_DATA_CHANNEL_OVERRIDE()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef CVD_SCOPED_DATA_CHANNEL_OVERRIDE # define)",
    "insertText": "CVD_SCOPED_DATA_CHANNEL_OVERRIDE(DataChannel) \\ FChaosCVDScopedDataChannelOverride CVDDC_Scope_Override##DataChannel(DataChannel)"
  },
  {
    "label": "CVD_GET_CURRENT_CONTEXT()",
    "kind": "Method",
    "detail": "Function (# endif # else # ifndef CVD_GET_CURRENT_CONTEXT # define)",
    "insertText": "CVD_GET_CURRENT_CONTEXT(OutContext) #endif #ifndef CVD_SCOPE_CONTEXT #define CVD_SCOPE_CONTEXT(InContext) #endif #ifndef CVD_GET_WRAPPED_CURRENT_CONTEXT #define CVD_GET_WRAPPED_CURRENT_CONTEXT(OutWrappedContext) #endif #ifndef CVD_SCOPED_CONTEXT_DATA_CHANNEL_OVERRIDE #define CVD_SCOPED_CONTEXT_DATA_CHANNEL_OVERRIDE(DataChannel)"
  },
  {
    "label": "FChaosVDContextWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChaosVDContextWrapper()"
  },
  {
    "label": "FChaosVDContextWrapper()",
    "kind": "Method",
    "detail": "Function (} # if WITH_CHAOS_VISUAL_DEBUGGER)",
    "insertText": "FChaosVDContextWrapper(const FChaosVDContext& InContext) : Context(InContext)"
  }
]