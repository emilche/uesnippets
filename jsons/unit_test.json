[
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "timezone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timezone"
  },
  {
    "label": "LibYUVColorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibYUVColorTest"
  },
  {
    "label": "LibYUVConvertTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibYUVConvertTest"
  },
  {
    "label": "LibYUVScaleTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibYUVScaleTest"
  },
  {
    "label": "LibYUVRotateTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibYUVRotateTest"
  },
  {
    "label": "LibYUVPlanarTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibYUVPlanarTest"
  },
  {
    "label": "LibYUVBaseTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibYUVBaseTest"
  },
  {
    "label": "LibYUVCompareTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibYUVCompareTest"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef UNIT_TEST_UNIT_TEST_H_ # define UNIT_TEST_UNIT_TEST_H_ # ifdef _WIN32 # include<windows . h> # else # include<sys / time . h> # endif # include<gtest / gtest . h> # include \" libyuv / basic_types . h \" # ifndef SIMD_ALIGNED # if)",
    "insertText": "defined(_MSC_VER) && !defined(__CLR_VER) #define SIMD_ALIGNED(var) __declspec(align(16)) var #elif defined(__GNUC__) && !defined(__pnacl__) #define SIMD_ALIGNED(var) var __attribute__((aligned(16))) #else #define SIMD_ALIGNED(var) var #endif #endif static __inline int Abs(int v)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "printf(\"Warning - size too large to test. Skipping\\n\")"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (\\ uint8_t* var = reinterpret_cast<)",
    "insertText": "uint8_t(\\ (intptr_t)(var##_mem + (((size) + 4095 + 63) & ~4095) - (size)) & ~63) #define free_aligned_buffer_page_end(var) \\ free(var##_mem)"
  },
  {
    "label": "get_time()",
    "kind": "Method",
    "detail": "Function (\\ var = 0 # ifdef WIN32 double)",
    "insertText": "get_time()"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER t,f ;)",
    "insertText": "QueryPerformanceCounter(&t)"
  },
  {
    "label": "QueryPerformanceFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryPerformanceFrequency(&f)"
  },
  {
    "label": "gettimeofday()",
    "kind": "Method",
    "detail": "Function (struct timeval t ; struct timezone tzp ;)",
    "insertText": "gettimeofday(&t, &tzp)"
  },
  {
    "label": "fastrand()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "fastrand()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (fastrand_seed = fastrand_seed* 2 1 4 0 1 3 u + 2 5 3 1 0 1 1 u ; return static_cast<)",
    "insertText": "int((fastrand_seed >> 16) & 0xffff)"
  },
  {
    "label": "MemRandomize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MemRandomize(uint8_t* dst, int64_t len)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64_t i ;)",
    "insertText": "for(i = 0; i < len - 1; i += 2)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (dst [ 0 ] = static_cast<)",
    "insertText": "uint8_t(r)"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (dst [ 1 ] = static_cast<)",
    "insertText": "uint8_t(r >> 8)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (dst + = 2 ; })",
    "insertText": "for(; i < len; ++i)"
  },
  {
    "label": "LibYUVColorTest()",
    "kind": "Method",
    "detail": "Function (} } class LibYUVColorTest : public::testing::Test { protected :)",
    "insertText": "LibYUVColorTest()"
  },
  {
    "label": "LibYUVConvertTest()",
    "kind": "Method",
    "detail": "Function (int benchmark_iterations_ ; int benchmark_width_ ; int benchmark_height_ ; int benchmark_pixels_div1280_ ; int disable_cpu_flags_ ; int benchmark_cpu_info_ ; } ; class LibYUVConvertTest : public::testing::Test { protected :)",
    "insertText": "LibYUVConvertTest()"
  },
  {
    "label": "LibYUVScaleTest()",
    "kind": "Method",
    "detail": "Function (int benchmark_iterations_ ; int benchmark_width_ ; int benchmark_height_ ; int benchmark_pixels_div1280_ ; int disable_cpu_flags_ ; int benchmark_cpu_info_ ; } ; class LibYUVScaleTest : public::testing::Test { protected :)",
    "insertText": "LibYUVScaleTest()"
  },
  {
    "label": "LibYUVRotateTest()",
    "kind": "Method",
    "detail": "Function (int benchmark_iterations_ ; int benchmark_width_ ; int benchmark_height_ ; int benchmark_pixels_div1280_ ; int disable_cpu_flags_ ; int benchmark_cpu_info_ ; } ; class LibYUVRotateTest : public::testing::Test { protected :)",
    "insertText": "LibYUVRotateTest()"
  },
  {
    "label": "LibYUVPlanarTest()",
    "kind": "Method",
    "detail": "Function (int benchmark_iterations_ ; int benchmark_width_ ; int benchmark_height_ ; int benchmark_pixels_div1280_ ; int disable_cpu_flags_ ; int benchmark_cpu_info_ ; } ; class LibYUVPlanarTest : public::testing::Test { protected :)",
    "insertText": "LibYUVPlanarTest()"
  },
  {
    "label": "LibYUVBaseTest()",
    "kind": "Method",
    "detail": "Function (int benchmark_iterations_ ; int benchmark_width_ ; int benchmark_height_ ; int benchmark_pixels_div1280_ ; int disable_cpu_flags_ ; int benchmark_cpu_info_ ; } ; class LibYUVBaseTest : public::testing::Test { protected :)",
    "insertText": "LibYUVBaseTest()"
  },
  {
    "label": "LibYUVCompareTest()",
    "kind": "Method",
    "detail": "Function (int benchmark_iterations_ ; int benchmark_width_ ; int benchmark_height_ ; int benchmark_pixels_div1280_ ; int disable_cpu_flags_ ; int benchmark_cpu_info_ ; } ; class LibYUVCompareTest : public::testing::Test { protected :)",
    "insertText": "LibYUVCompareTest()"
  }
]