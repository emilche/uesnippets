[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "SPropertyEditorText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorText"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Fonts / SlateFontInfo . h \" # include \" Framework / Text / CharRangeList . h \" # include \" Input / Reply . h \" # include \" Misc / Attribute . h \" # include \" Styling / AppStyle . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Types / SlateEnums . h \" # include \" UserInterface / PropertyEditor / PropertyEditorConstants . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FText ; class SEditableTextBox ; class SMultiLineEditableTextBox ; struct FFocusEvent ; struct FGeometry ; class SPropertyEditorText : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyEditorText ) : _Font( FAppStyle::GetFontStyle( PropertyEditorConstants::PropertyFontStyle ))"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FSlateFontInfo, Font ) SLATE_END_ARGS() static bool Supports( const TSharedRef< class FPropertyEditor >& InPropertyEditor)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef< class FPropertyEditor >& InPropertyEditor)"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDesiredWidth(float& OutMinDesiredWidth, float& OutMaxDesiredWidth)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnTextCommitted(const FText& NewText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnVerifyTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyTextChanged(const FText& Text, FText& OutError)"
  },
  {
    "label": "CanEdit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEdit()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FText, FPropertyValidatorFunc, const FString&)"
  }
]