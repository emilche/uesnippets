[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SMultiLineEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiLineEditableTextBox"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "SPropertyEditorText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorText"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "Supports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Supports( const TSharedRef< class FPropertyEditor >& InPropertyEditor )"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct( const FArguments& InArgs, const TSharedRef< class FPropertyEditor >& InPropertyEditor )"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDesiredWidth( float& OutMinDesiredWidth, float& OutMaxDesiredWidth )"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted( const FText& NewText, ETextCommit::Type CommitInfo )"
  },
  {
    "label": "OnVerifyTextChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyTextChanged(const FText& Text, FText& OutError)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FText, FPropertyValidatorFunc, const FString&)"
  }
]