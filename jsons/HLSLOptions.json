[
  {
    "label": "OptTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OptTable"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "DxcDllSupport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcDllSupport"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "HlslFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "HlslFlags"
  },
  {
    "label": "ID",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ID"
  },
  {
    "label": "DxcDefines",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcDefines"
  },
  {
    "label": "RewriterOpts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RewriterOpts"
  },
  {
    "label": "DxcOpts",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxcOpts"
  },
  {
    "label": "MainArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MainArgs"
  },
  {
    "label": "StringRefWide",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRefWide"
  },
  {
    "label": "DriverOption()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef LLVM_HLSL_OPTIONS_H # define LLVM_HLSL_OPTIONS_H # include \" dxc / Support / DxcOptToggles . h \" # include \" dxc / Support / HLSLVersion . h \" # include \" dxc / Support / SPIRVOptions . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / Option / ArgList . h \" # include \" dxc / Support / WinIncludes . h \" # include \" dxc / dxcapi . h \" # include<map> # include<set> namespace llvm { namespace opt { class OptTable ; class raw_ostream ; } } namespace dxc { class DxcDllSupport ; } namespace hlsl { enum class SerializeDxilFlags : uint32_t ; namespace options { enum HlslFlags {)",
    "insertText": "DriverOption(1 << 13), NoArgumentUnused = (1 << 14), CoreOption = (1 << 15), ISenseOption = (1 << 16), RewriteOption = (1 << 17)"
  },
  {
    "label": "OPTION()",
    "kind": "Method",
    "detail": "Function (enum ID { OPT_INVALID = 0,# define)",
    "insertText": "OPTION(PREFIX, NAME, ID, KIND, GROUP, ALIAS, ALIASARGS, FLAGS, PARAM, \\ HELPTEXT, METAVAR)"
  },
  {
    "label": "getHlslOptTable()",
    "kind": "Method",
    "detail": "Function (const llvm::opt::OptTable*)",
    "insertText": "getHlslOptTable()"
  },
  {
    "label": "initHlslOptTable()",
    "kind": "Method",
    "detail": "Function (std::error_code)",
    "insertText": "initHlslOptTable()"
  },
  {
    "label": "cleanupHlslOptTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cleanupHlslOptTable()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (const unsigned CompilerFlags = HlslFlags::CoreOption ; const unsigned DxcFlags = HlslFlags::CoreOption | HlslFlags::DriverOption ; const unsigned DxrFlags = HlslFlags::RewriteOption | HlslFlags::DriverOption ; const unsigned ISenseFlags = HlslFlags::CoreOption | HlslFlags::ISenseOption ; class DxcDefines { public : void)",
    "insertText": "push_back(llvm::StringRef value)"
  },
  {
    "label": "DxcDefines()",
    "kind": "Method",
    "detail": "Function (LPWSTR DefineValues = nullptr ; llvm::SmallVector<llvm::StringRef,8> DefineStrings ; llvm::SmallVector<DxcDefine,8> DefineVector ; ~)",
    "insertText": "DxcDefines()"
  },
  {
    "label": "DxcDefines()",
    "kind": "Method",
    "detail": "Function (delete [ ] DefineValues ; })",
    "insertText": "DxcDefines(const DxcDefines &)"
  },
  {
    "label": "BuildDefines()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildDefines()"
  },
  {
    "label": "ComputeNumberOfWCharsNeededForDefines()",
    "kind": "Method",
    "detail": "Function (UINT32)",
    "insertText": "ComputeNumberOfWCharsNeededForDefines()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const DxcDefine*)",
    "insertText": "data()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "InputArgList()",
    "kind": "Method",
    "detail": "Function (} } ; struct RewriterOpts { bool Unchanged = false ; bool SkipFunctionBody = false ; bool SkipStatic = false ; bool GlobalExternByDefault = false ; bool KeepUserMacro = false ; bool ExtractEntryUniforms = false ; bool RemoveUnusedGlobals = false ; bool RemoveUnusedFunctions = false ; bool WithLineDirective = false ; bool DeclGlobalCB = false ; } ; enum class ValidatorSelection : int { Auto,Internal,External,Invalid = - 1 } ; class DxcOpts { public : DxcDefines Defines ; llvm::opt::InputArgList Args = llvm::)",
    "insertText": "InputArgList(nullptr, nullptr)"
  },
  {
    "label": "IsRootSignatureProfile()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef AssemblyCode ; llvm::StringRef DebugFile ; llvm::StringRef EntryPoint ; llvm::StringRef ExternalFn ; llvm::StringRef ExternalLib ; llvm::StringRef ExtractPrivateFile ; llvm::StringRef ForceRootSigVer ; llvm::StringRef InputFile ; llvm::StringRef OutputHeader ; llvm::StringRef OutputObject ; llvm::StringRef OutputWarningsFile ; llvm::StringRef OutputReflectionFile ; llvm::StringRef OutputRootSigFile ; llvm::StringRef OutputShaderHashFile ; llvm::StringRef OutputFileForDependencies ; std::string Preprocess ; llvm::StringRef TargetProfile ; llvm::StringRef VariableName ; llvm::StringRef PrivateSource ; llvm::StringRef RootSignatureSource ; llvm::StringRef VerifyRootSignatureSource ; llvm::StringRef RootSignatureDefine ; llvm::StringRef FloatDenormalMode ; std::vector<std::string> Exports ; std::vector<std::string> PreciseOutputs ; llvm::StringRef DefaultLinkage ; llvm::StringRef ImportBindingTable ; llvm::StringRef BindingTableDefine ; unsigned DefaultTextCodePage = DXC_CP_UTF8 ; bool AllResourcesBound = false ; bool IgnoreOptSemDefs = false ; bool AstDump = false ; bool AstDumpImplicit = false ; bool ColorCodeAssembly = false ; bool CodeGenHighLevel = false ; bool AllowPreserveValues = false ; bool DebugInfo = false ; bool DebugNameForBinary = false ; bool DebugNameForSource = false ; bool DumpBin = false ; bool DumpDependencies = false ; bool WriteDependencies = false ; bool Link = false ; bool WarningAsError = false ; bool IEEEStrict = false ; bool IgnoreLineDirectives = false ; bool DefaultColMajor = false ; bool DefaultRowMajor = false ; bool DisableValidation = false ; unsigned OptLevel = 0 ; bool DisableOptimizations = false ; bool AvoidFlowControl = false ; bool PreferFlowControl = false ; bool EnableStrictMode = false ; bool EnableDX9CompatMode = false ; bool EnableFXCCompatMode = false ; LangStd HLSLVersion = LangStd::vUnset ; bool Enable16BitTypes = false ; bool OptDump = false ; bool OutputWarnings = true ; bool ShowHelp = false ; bool ShowHelpHidden = false ; bool ShowOptionNames = false ; bool ShowVersion = false ; bool UseColor = false ; bool UseHexLiterals = false ; bool UseInstructionByteOffsets = false ; bool UseInstructionNumbers = false ; bool NotUseLegacyCBufLoad = false ; bool PackPrefixStable = false ; bool PackOptimized = false ; bool DisplayIncludeProcess = false ; bool RecompileFromBinary = false ; bool StripDebug = false ; bool EmbedDebug = false ; bool SourceInDebugModule = false ; bool SourceOnlyDebug = false ; bool PdbInPrivate = false ; bool StripRootSignature = false ; bool StripPrivate = false ; bool StripReflection = false ; bool KeepReflectionInDxil = false ; bool StripReflectionFromDxil = false ; bool ExtractRootSignature = false ; bool DisassembleColorCoded = false ; bool DisassembleInstNumbers = false ; bool DisassembleByteOffset = false ; bool DisaseembleHex = false ; bool LegacyMacroExpansion = false ; bool LegacyResourceReservation = false ; unsigned long AutoBindingSpace = UINT_MAX ; bool ExportShadersOnly = false ; bool ResMayAlias = false ; unsigned long ValVerMajor = UINT_MAX,ValVerMinor = UINT_MAX ; ValidatorSelection SelectValidator = ValidatorSelection::Auto ; unsigned ScanLimit = 0 ; bool ForceZeroStoreLifetimes = false ; bool EnableLifetimeMarkers = false ; bool ForceDisableLocTracking = false ; bool NewInlining = false ; bool TimeReport = false ; std::string TimeTrace = \" \" ; bool VerifyDiagnostics = false ; OptimizationToggles OptToggles ; std::set<std::string> IgnoreSemDefs ; std::map<std::string,std::string> OverrideSemDefs ; bool PrintBeforeAll ; std::set<std::string> PrintBefore ; bool PrintAfterAll ; std::set<std::string> PrintAfter ; bool EnablePayloadQualifiers = false ; bool HandleExceptions = false ; RewriterOpts RWOpt ; std::vector<std::string> Warnings ; bool)",
    "insertText": "IsRootSignatureProfile()"
  },
  {
    "label": "IsLibraryProfile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLibraryProfile()"
  },
  {
    "label": "GenerateFullDebugInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateFullDebugInfo()"
  },
  {
    "label": "GeneratePDB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GeneratePDB()"
  },
  {
    "label": "EmbedDebugInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmbedDebugInfo()"
  },
  {
    "label": "EmbedPDBName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EmbedPDBName()"
  },
  {
    "label": "DebugFileIsDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DebugFileIsDirectory()"
  },
  {
    "label": "GetPDBName()",
    "kind": "Method",
    "detail": "Function (llvm::StringRef)",
    "insertText": "GetPDBName()"
  },
  {
    "label": "MainArgs()",
    "kind": "Method",
    "detail": "Function (# ifdef ENABLE_SPIRV_CODEGEN bool GenSPIRV ; clang::spirv::SpirvCodeGenOptions SpirvOptions ; # endif } ; class MainArgs { public : llvm::SmallVector<std::string,8> Utf8StringVector ; llvm::SmallVector<const char*,8> Utf8CharPtrVector ;)",
    "insertText": "MainArgs()"
  },
  {
    "label": "MainArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MainArgs(int argc, const wchar_t **argv, int skipArgCount = 1)"
  },
  {
    "label": "MainArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MainArgs(int argc, const char **argv, int skipArgCount = 1)"
  },
  {
    "label": "MainArgs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MainArgs(llvm::ArrayRef<llvm::StringRef> args)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MainArgs&)",
    "insertText": "operator(const MainArgs &other)"
  },
  {
    "label": "getArrayRef()",
    "kind": "Method",
    "detail": "Function (llvm::ArrayRef<const char*>)",
    "insertText": "getArrayRef()"
  },
  {
    "label": "StringRefWide()",
    "kind": "Method",
    "detail": "Function (} } ; class StringRefWide { private : std::wstring m_value ; public :)",
    "insertText": "StringRefWide(llvm::StringRef value)"
  },
  {
    "label": "LPCWSTR()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "LPCWSTR()"
  },
  {
    "label": "ReadDxcOpts()",
    "kind": "Method",
    "detail": "Function (} } ; int)",
    "insertText": "ReadDxcOpts(const llvm::opt::OptTable *optionTable, unsigned flagsToInclude, const MainArgs &argStrings, DxcOpts &opts, llvm::raw_ostream &errors)"
  },
  {
    "label": "SetupDxcDllSupport()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetupDxcDllSupport(const DxcOpts &opts, dxc::DxcDllSupport &dxcSupport, llvm::raw_ostream &errors)"
  },
  {
    "label": "CopyArgsToWStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyArgsToWStrings(const llvm::opt::InputArgList &inArgs, unsigned flagsToInclude, std::vector<std::wstring> &outArgs)"
  },
  {
    "label": "ComputeSerializeDxilFlags()",
    "kind": "Method",
    "detail": "Function (SerializeDxilFlags)",
    "insertText": "ComputeSerializeDxilFlags(const options::DxcOpts &opts)"
  }
]