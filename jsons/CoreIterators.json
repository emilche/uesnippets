[
  {
    "label": "inner_iterator_selector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "inner_iterator_selector"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COREITERATORS_H # define EIGEN_COREITERATORS_H namespace Eigen { namespace internal { template<XprType,EvaluatorKind> class inner_iterator_selector ; } template<XprType> class InnerIterator { protected : typedef internal::inner_iterator_selector<XprType,internal::evaluator_traits<XprType>::Kind> IteratorType ; typedef internal::evaluator<XprType> EvaluatorType ; typedef internal::traits<XprType>::Scalar Scalar ; public :)",
    "insertText": "InnerIterator(const XprType &xpr, const Index &outerId) : m_eval(xpr), m_iter(m_eval, outerId, xpr.innerSize())"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Scalar)",
    "insertText": "value()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE InnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_iter .)",
    "insertText": "operator(i)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (InnerIterator)",
    "insertText": "result(*this)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (result + = i ; return result ; } EIGEN_STRONG_INLINE Index)",
    "insertText": "index()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "col()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE operator)",
    "insertText": "bool()"
  },
  {
    "label": "IsRowMajor()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { template<XprType> class inner_iterator_selector<XprType,IndexBased> { protected : typedef evaluator<XprType> EvaluatorType ; typedef traits<XprType>::Scalar Scalar ; enum {)",
    "insertText": "IsRowMajor(XprType::Flags&RowMajorBit)"
  },
  {
    "label": "inner_iterator_selector()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_STRONG_INLINE)",
    "insertText": "inner_iterator_selector(const EvaluatorType &eval, const Index &outerId, const Index &innerSize) : m_eval(eval), m_inner(0), m_outer(outerId), m_end(innerSize)"
  }
]