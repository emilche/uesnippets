[
  {
    "label": "FKeyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandle"
  },
  {
    "label": "FKeyHandleMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandleMap"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FKeyHandleLookupTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandleLookupTable"
  },
  {
    "label": "FKeyHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / ArrayView . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Class . h \" # include \" KeyHandle . generated . h \" struct FKeyHandle {)",
    "insertText": "FKeyHandle()"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "Invalid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FKeyHandle& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FKeyHandle& Handle)"
  },
  {
    "label": "FKeyHandle()",
    "kind": "Method",
    "detail": "Function (Ar<<Handle . Index ; return Ar ; } private :)",
    "insertText": "FKeyHandle(uint32 SpecificIndex)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (uint32 Index ; } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: FKeyHandleMap()"
  },
  {
    "label": "FKeyHandleMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKeyHandleMap(const FKeyHandleMap& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FKeyHandleMap& Other)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(TArrayView<const FKeyHandle> InKeyHandles)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(const FKeyHandle& InHandle, int32 InIndex)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty(int32 ExpectedNumElements = 0)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const FKeyHandle& InHandle)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(int32 NumElements)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32*)",
    "insertText": "Find(const FKeyHandle& InHandle)"
  },
  {
    "label": "FindKey()",
    "kind": "Method",
    "detail": "Function (} const FKeyHandle*)",
    "insertText": "FindKey(int32 KeyIndex)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "CreateConstIterator()",
    "kind": "Method",
    "detail": "Function (} TArray<FKeyHandle>::TConstIterator)",
    "insertText": "CreateConstIterator()"
  },
  {
    "label": "GetMap()",
    "kind": "Method",
    "detail": "Function (} const TMap<FKeyHandle,int32>&)",
    "insertText": "GetMap()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar,FKeyHandleMap& P)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (P .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "EnsureIndexHasAHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureIndexHasAHandle(int32 KeyIndex)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API int32 GetIndex(FKeyHandle KeyHandle)"
  },
  {
    "label": "FindOrAddKeyHandle()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "FindOrAddKeyHandle(int32 Index)"
  },
  {
    "label": "MoveHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveHandle(int32 OldIndex, int32 NewIndex)"
  },
  {
    "label": "AllocateHandle()",
    "kind": "Method",
    "detail": "Function (FKeyHandle)",
    "insertText": "AllocateHandle(int32 Index)"
  },
  {
    "label": "DeallocateHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateHandle(int32 Index)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FKeyHandleLookupTable& P)"
  }
]