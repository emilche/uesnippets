[
  {
    "label": "VideoStreamEncoderResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamEncoderResourceManager"
  },
  {
    "label": "InitialFrameDropper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InitialFrameDropper"
  },
  {
    "label": "VideoStreamEncoderResourceManager()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_ADAPTATION_VIDEO_STREAM_ENCODER_RESOURCE_MANAGER_H_ # define VIDEO_ADAPTATION_VIDEO_STREAM_ENCODER_RESOURCE_MANAGER_H_ # include<atomic> # include<map> # include<memory> # include<string> # include<unordered_map> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / adaptation / resource . h \" # include \" api / field_trials_view . h \" # include \" api / rtp_parameters . h \" # include \" api / scoped_refptr . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / video / video_adaptation_counters . h \" # include \" api / video / video_adaptation_reason . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_source_interface . h \" # include \" api / video_codecs / video_codec . h \" # include \" api / video_codecs / video_encoder . h \" # include \" call / adaptation / resource_adaptation_processor_interface . h \" # include \" call / adaptation / video_stream_adapter . h \" # include \" call / adaptation / video_stream_input_state_provider . h \" # include \" rtc_base / experiments / quality_scaler_settings . h \" # include \" rtc_base / ref_count . h \" # include \" rtc_base / strings / string_builder . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" video / adaptation / balanced_constraint . h \" # include \" video / adaptation / bandwidth_quality_scaler_resource . h \" # include \" video / adaptation / bitrate_constraint . h \" # include \" video / adaptation / encode_usage_resource . h \" # include \" video / adaptation / overuse_frame_detector . h \" # include \" video / adaptation / pixel_limit_resource . h \" # include \" video / adaptation / quality_rampup_experiment_helper . h \" # include \" video / adaptation / quality_scaler_resource . h \" # include \" video / adaptation / video_stream_encoder_resource . h \" # include \" video / config / video_encoder_config . h \" # include \" video / video_stream_encoder_observer . h \" namespace webrtc { const int kDefaultInputPixelsWidth ; const int kDefaultInputPixelsHeight ; class VideoStreamEncoderResourceManager : public VideoSourceRestrictionsListener,public ResourceLimitationsListener,public QualityRampUpExperimentListener { public :)",
    "insertText": "VideoStreamEncoderResourceManager(VideoStreamInputStateProvider* input_state_provider, VideoStreamEncoderObserver* encoder_stats_observer, Clock* clock, bool experiment_cpu_load_estimator, std::unique_ptr<OveruseFrameDetector> overuse_detector, DegradationPreferenceProvider* degradation_preference_provider, const FieldTrialsView& field_trials)"
  },
  {
    "label": "VideoStreamEncoderResourceManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoStreamEncoderResourceManager()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(TaskQueueBase* encoder_queue)"
  },
  {
    "label": "SetAdaptationProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdaptationProcessor(ResourceAdaptationProcessorInterface* adaptation_processor, VideoStreamAdapter* stream_adapter)"
  },
  {
    "label": "SetDegradationPreferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDegradationPreferences(DegradationPreference degradation_preference)"
  },
  {
    "label": "degradation_preference()",
    "kind": "Method",
    "detail": "Function (DegradationPreference)",
    "insertText": "degradation_preference()"
  },
  {
    "label": "ConfigureEncodeUsageResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureEncodeUsageResource()"
  },
  {
    "label": "MaybeInitializePixelLimitResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeInitializePixelLimitResource()"
  },
  {
    "label": "StopManagedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopManagedResources()"
  },
  {
    "label": "SetEncoderSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSettings(EncoderSettings encoder_settings)"
  },
  {
    "label": "SetStartBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartBitrate(DataRate start_bitrate)"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(DataRate target_bitrate)"
  },
  {
    "label": "SetEncoderRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderRates(const VideoEncoder::RateControlParameters& encoder_rates)"
  },
  {
    "label": "ConfigureQualityScaler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureQualityScaler(const VideoEncoder::EncoderInfo& encoder_info)"
  },
  {
    "label": "ConfigureBandwidthQualityScaler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureBandwidthQualityScaler(const VideoEncoder::EncoderInfo& encoder_info)"
  },
  {
    "label": "OnFrameDroppedDueToSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDroppedDueToSize()"
  },
  {
    "label": "OnMaybeEncodeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaybeEncodeFrame()"
  },
  {
    "label": "OnEncodeStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeStarted(const VideoFrame& cropped_frame, int64_t time_when_first_seen_us)"
  },
  {
    "label": "OnEncodeCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeCompleted(const EncodedImage& encoded_image, int64_t time_sent_in_us, absl::optional<int> encode_duration_us, DataSize frame_size)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(EncodedImageCallback::DropReason reason)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResource(rtc::scoped_refptr<Resource> resource, VideoAdaptationReason reason)"
  },
  {
    "label": "RemoveResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "AdaptationConstraints()",
    "kind": "Method",
    "detail": "Function (std::vector<AdaptationConstraint*>)",
    "insertText": "AdaptationConstraints()"
  },
  {
    "label": "DropInitialFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropInitialFrames()"
  },
  {
    "label": "SingleActiveStreamPixels()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "SingleActiveStreamPixels()"
  },
  {
    "label": "UseBandwidthAllocationBps()",
    "kind": "Method",
    "detail": "Function (absl::optional<uint32_t>)",
    "insertText": "UseBandwidthAllocationBps()"
  },
  {
    "label": "OnVideoSourceRestrictionsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVideoSourceRestrictionsUpdated(VideoSourceRestrictions restrictions, const VideoAdaptationCounters& adaptation_counters, rtc::scoped_refptr<Resource> reason, const VideoSourceRestrictions& unfiltered_restrictions)"
  },
  {
    "label": "OnResourceLimitationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResourceLimitationChanged(rtc::scoped_refptr<Resource> resource, const std::map<rtc::scoped_refptr<Resource>, VideoAdaptationCounters>& resource_limitations)"
  },
  {
    "label": "OnQualityRampUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnQualityRampUp()"
  },
  {
    "label": "IsSimulcastOrMultipleSpatialLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulcastOrMultipleSpatialLayers(const VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "GetReasonFromResource()",
    "kind": "Method",
    "detail": "Function (private : class InitialFrameDropper ; VideoAdaptationReason)",
    "insertText": "GetReasonFromResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "GetCpuOveruseOptions()",
    "kind": "Method",
    "detail": "Function (CpuOveruseOptions)",
    "insertText": "GetCpuOveruseOptions()"
  },
  {
    "label": "LastFrameSizeOrDefault()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "LastFrameSizeOrDefault()"
  },
  {
    "label": "MaybeUpdateTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateTargetFrameRate()"
  },
  {
    "label": "UpdateQualityScalerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQualityScalerSettings(absl::optional<VideoEncoder::QpThresholds> qp_thresholds)"
  },
  {
    "label": "UpdateBandwidthQualityScalerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBandwidthQualityScalerSettings(bool bandwidth_quality_scaling_allowed, const std::vector<VideoEncoder::ResolutionBitrateLimits>& resolution_bitrate_limits)"
  },
  {
    "label": "UpdateStatsAdaptationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatsAdaptationSettings()"
  },
  {
    "label": "ActiveCountsToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ActiveCountsToString(const std::map<VideoAdaptationReason, VideoAdaptationCounters>& active_counts)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const FieldTrialsView& field_trials_ ; DegradationPreferenceProvider* const degradation_preference_provider_ ; std::unique_ptr<BitrateConstraint> bitrate_constraint_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  }
]