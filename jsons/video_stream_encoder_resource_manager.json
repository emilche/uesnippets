[
  {
    "label": "VideoStreamEncoderResourceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamEncoderResourceManager"
  },
  {
    "label": "InitialFrameDropper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InitialFrameDropper"
  },
  {
    "label": "VideoStreamEncoderResourceManager()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "VideoStreamEncoderResourceManager(\n      VideoStreamInputStateProvider* input_state_provider,\n      VideoStreamEncoderObserver* encoder_stats_observer,\n      Clock* clock,\n      bool experiment_cpu_load_estimator,\n      std::unique_ptr<OveruseFrameDetector> overuse_detector,\n      DegradationPreferenceProvider* degradation_preference_provider,\n      const FieldTrialsView& field_trials)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(TaskQueueBase* encoder_queue)"
  },
  {
    "label": "SetAdaptationProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdaptationProcessor(\n      ResourceAdaptationProcessorInterface* adaptation_processor,\n      VideoStreamAdapter* stream_adapter)"
  },
  {
    "label": "SetDegradationPreferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDegradationPreferences(DegradationPreference degradation_preference)"
  },
  {
    "label": "ConfigureEncodeUsageResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureEncodeUsageResource()"
  },
  {
    "label": "MaybeInitializePixelLimitResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeInitializePixelLimitResource()"
  },
  {
    "label": "StopManagedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopManagedResources()"
  },
  {
    "label": "SetEncoderSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderSettings(EncoderSettings encoder_settings)"
  },
  {
    "label": "SetStartBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartBitrate(DataRate start_bitrate)"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(DataRate target_bitrate)"
  },
  {
    "label": "SetEncoderRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoderRates(\n      const VideoEncoder::RateControlParameters& encoder_rates)"
  },
  {
    "label": "ConfigureQualityScaler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureQualityScaler(const VideoEncoder::EncoderInfo& encoder_info)"
  },
  {
    "label": "ConfigureBandwidthQualityScaler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConfigureBandwidthQualityScaler(\n      const VideoEncoder::EncoderInfo& encoder_info)"
  },
  {
    "label": "OnFrameDroppedDueToSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDroppedDueToSize()"
  },
  {
    "label": "OnMaybeEncodeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaybeEncodeFrame()"
  },
  {
    "label": "OnEncodeStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeStarted(const VideoFrame& cropped_frame,\n                       int64_t time_when_first_seen_us)"
  },
  {
    "label": "OnEncodeCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeCompleted(const EncodedImage& encoded_image,\n                         int64_t time_sent_in_us,\n                         absl::optional<int> encode_duration_us,\n                         DataSize frame_size)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(EncodedImageCallback::DropReason reason)"
  },
  {
    "label": "AddResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddResource(rtc::scoped_refptr<Resource> resource,\n                   VideoAdaptationReason reason)"
  },
  {
    "label": "RemoveResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "IsSimulcastOrMultipleSpatialLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSimulcastOrMultipleSpatialLayers(\n      const VideoEncoderConfig& encoder_config)"
  },
  {
    "label": "MaybeUpdateTargetFrameRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeUpdateTargetFrameRate()"
  },
  {
    "label": "UpdateQualityScalerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateQualityScalerSettings(\n      absl::optional<VideoEncoder::QpThresholds> qp_thresholds)"
  },
  {
    "label": "UpdateBandwidthQualityScalerSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBandwidthQualityScalerSettings(\n      bool bandwidth_quality_scaling_allowed,\n      const std::vector<VideoEncoder::ResolutionBitrateLimits>&\n          resolution_bitrate_limits)"
  },
  {
    "label": "ActiveCountsToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ActiveCountsToString(\n      const std::map<VideoAdaptationReason, VideoAdaptationCounters>&\n          active_counts)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bitrate_constraint_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (balanced_constraint_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (input_state_provider_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (stream_adapter_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (degradation_preference_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (video_source_restrictions_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (current_adaptation_counters_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (clock_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (experiment_cpu_load_estimator_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (initial_frame_dropper_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (quality_scaling_experiment_enabled_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (pixel_limit_resource_experiment_enabled_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (encoder_target_bitrate_bps_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (encoder_rates_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (quality_rampup_experiment_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (encoder_settings_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (resources_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue_)"
  }
]