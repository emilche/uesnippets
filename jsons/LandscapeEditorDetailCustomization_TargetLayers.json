[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "SDragAndDropVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDragAndDropVerticalBox"
  },
  {
    "label": "FLandscapeEditorDetailCustomization_TargetLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorDetailCustomization_TargetLayers"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_TargetLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLandscapeEditorCustomNodeBuilder_TargetLayers"
  },
  {
    "label": "FEdModeLandscape",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdModeLandscape"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "SLandscapeEditorSelectableBorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLandscapeEditorSelectableBorder"
  },
  {
    "label": "FTargetLayerDragDropOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetLayerDragDropOp"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IDetailCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "ShouldShowTargetLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowTargetLayers()"
  },
  {
    "label": "GetPaintingRestrictionVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPaintingRestrictionVisibility()"
  },
  {
    "label": "GetVisibilityMaskTipVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetVisibilityMaskTipVisibility()"
  },
  {
    "label": "GetPopulateTargetLayersInfoTipVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetPopulateTargetLayersInfoTipVisibility()"
  },
  {
    "label": "GetFilteredTargetLayersListInfoTipVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFilteredTargetLayersListInfoTipVisibility()"
  },
  {
    "label": "FLandscapeEditorCustomNodeBuilder_TargetLayers()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FLandscapeEditorCustomNodeBuilder_TargetLayers(TSharedRef<FAssetThumbnailPool> ThumbnailPool, TSharedRef<IPropertyHandle> InTargetDisplayOrderPropertyHandle, TSharedRef<IPropertyHandle> InTargetShowUnusedLayersPropertyHandle)"
  },
  {
    "label": "PrepareTargetLayerList()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FLandscapeTargetListInfo>>)",
    "insertText": "PrepareTargetLayerList(bool bInSort, bool bInFilter)"
  },
  {
    "label": "GenerateRow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GenerateRow(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetTargetLayerIsSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTargetLayerIsSelected(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnTargetSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetSelectionChanged(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnTargetLayerContextMenuOpening()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "OnTargetLayerContextMenuOpening(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnExportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExportLayer(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnImportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnImportLayer(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnReimportLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReimportLayer(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnHeightmapLayerContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHeightmapLayerContextMenu(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnFillLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFillLayer(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "FillEmptyLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillEmptyLayers(ULandscapeInfo* LandscapeInfo, ULandscapeLayerInfoObject* LandscapeInfoObject)"
  },
  {
    "label": "OnClearLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClearLayer(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnRebuildMICs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRebuildMICs(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "ShouldFilterLayerInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFilterLayerInfo(const struct FAssetData& AssetData, FName LayerName)"
  },
  {
    "label": "OnTargetLayerSetObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetLayerSetObject(const FAssetData& AssetData, const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetTargetLayerInfoSelectorVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTargetLayerInfoSelectorVisibility(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetTargetLayerCreateEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTargetLayerCreateEnabled(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetTargetLayerMakePublicVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTargetLayerMakePublicVisibility(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetTargetLayerDeleteVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTargetLayerDeleteVisibility(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnGetTargetLayerCreateMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnGetTargetLayerCreateMenu(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnTargetLayerCreateClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTargetLayerCreateClicked(const TSharedRef<FLandscapeTargetListInfo> Target, bool bNoWeightBlend)"
  },
  {
    "label": "OnTargetLayerMakePublicClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTargetLayerMakePublicClicked(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnTargetLayerDeleteClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTargetLayerDeleteClicked(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetLayerUsageDebugColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetLayerUsageDebugColor(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetDebugModeLayerUsageVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDebugModeLayerUsageVisibility(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetDebugModeLayerUsageVisibility_Invert()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDebugModeLayerUsageVisibility_Invert(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "GetDebugModeColorChannelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDebugModeColorChannelVisibility(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "DebugModeColorChannelIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "DebugModeColorChannelIsChecked(const TSharedRef<FLandscapeTargetListInfo> Target, int32 Channel)"
  },
  {
    "label": "OnDebugModeColorChannelChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDebugModeColorChannelChanged(ECheckBoxState NewCheckedState, const TSharedRef<FLandscapeTargetListInfo> Target, int32 Channel)"
  },
  {
    "label": "GetTargetTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetTargetTextColor(const TSharedRef<FLandscapeTargetListInfo> InTarget)"
  },
  {
    "label": "GetLayersSubstractiveBlendVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLayersSubstractiveBlendVisibility(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "IsLayersSubstractiveBlendChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "IsLayersSubstractiveBlendChecked(const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "OnLayersSubstractiveBlendChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLayersSubstractiveBlendChanged(ECheckBoxState NewCheckedState, const TSharedRef<FLandscapeTargetListInfo> Target)"
  },
  {
    "label": "HandleDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, int32 SlotIndex, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "HandleCanAcceptDrop()",
    "kind": "Method",
    "detail": "Function (TOptional<SDragAndDropVerticalBox::EItemDropZone>)",
    "insertText": "HandleCanAcceptDrop(const FDragDropEvent& DragDropEvent, SDragAndDropVerticalBox::EItemDropZone DropZone, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "HandleAcceptDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleAcceptDrop(FDragDropEvent const& DragDropEvent, SDragAndDropVerticalBox::EItemDropZone DropZone, int32 SlotIndex, SVerticalBox::FSlot* Slot)"
  },
  {
    "label": "HandleCreateLayersFromMaterials()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleCreateLayersFromMaterials()"
  },
  {
    "label": "HandleCreateLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCreateLayer()"
  },
  {
    "label": "GetTargetLayerDisplayOrderButtonMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetTargetLayerDisplayOrderButtonMenuContent()"
  },
  {
    "label": "SetSelectedDisplayOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedDisplayOrder(ELandscapeLayerDisplayMode InDisplayOrder)"
  },
  {
    "label": "GetTargetLayerShowUnusedButtonMenuContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetTargetLayerShowUnusedButtonMenuContent()"
  },
  {
    "label": "ShowUnusedLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowUnusedLayers(bool Result)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& InFilterText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTargetLayerDragDropOp>)",
    "insertText": "New(int32 InSlotIndexBeingDragged, SVerticalBox::FSlot* InSlotBeingDragged, TSharedPtr<SWidget> InWidgetToShow)"
  }
]