[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "from_chars_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "from_chars_result"
  },
  {
    "label": "from_chars()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STRINGS_CHARCONV_H_ # define ABSL_STRINGS_CHARCONV_H_ # include<system_error> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN enum class chars_format { scientific = 1,fixed = 2,hex = 4,general = fixed | scientific,} ; struct from_chars_result { const char* ptr ; std::errc ec ; } ; absl::from_chars_result)",
    "insertText": "from_chars(const char* first, const char* last, double& value, chars_format fmt = chars_format::general)"
  },
  {
    "label": "from_chars()",
    "kind": "Method",
    "detail": "Function (absl::from_chars_result)",
    "insertText": "from_chars(const char* first, const char* last, float& value, chars_format fmt = chars_format::general)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (chars_format)",
    "insertText": "operator(chars_format lhs, chars_format rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} chars_format)",
    "insertText": "operator(chars_format arg)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} chars_format&)",
    "insertText": "operator(chars_format& lhs, chars_format rhs)"
  }
]