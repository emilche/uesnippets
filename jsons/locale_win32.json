[
  {
    "label": "__lconv_storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__lconv_storage"
  },
  {
    "label": "locale_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "locale_t"
  },
  {
    "label": "tm",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tm"
  },
  {
    "label": "_NCAT()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP_SUPPORT_WIN32_LOCALE_WIN32_H # define _LIBCPP_SUPPORT_WIN32_LOCALE_WIN32_H # include<__config> # include<cstddef> # include<locale . h> # include<stdio . h> # define _X_ALL LC_ALL # define _X_COLLATE LC_COLLATE # define _X_CTYPE LC_CTYPE # define _X_MONETARY LC_MONETARY # define _X_NUMERIC LC_NUMERIC # define _X_TIME LC_TIME # define _X_MAX LC_MAX # define _X_MESSAGES 6 # define)",
    "insertText": "_NCAT(_X_MESSAGES + 1) #define _CATMASK(n) ((1 << (n)) >> 1) #define _M_COLLATE _CATMASK(_X_COLLATE) #define _M_CTYPE _CATMASK(_X_CTYPE) #define _M_MONETARY _CATMASK(_X_MONETARY) #define _M_NUMERIC _CATMASK(_X_NUMERIC) #define _M_TIME _CATMASK(_X_TIME) #define _M_MESSAGES _CATMASK(_X_MESSAGES) #define _M_ALL (_CATMASK(_NCAT) - 1) #define LC_COLLATE_MASK _M_COLLATE #define LC_CTYPE_MASK _M_CTYPE #define LC_MONETARY_MASK _M_MONETARY #define LC_NUMERIC_MASK _M_NUMERIC #define LC_TIME_MASK _M_TIME #define LC_MESSAGES_MASK _M_MESSAGES #define LC_ALL_MASK ( LC_COLLATE_MASK \\ | LC_CTYPE_MASK \\ | LC_MESSAGES_MASK \\ | LC_MONETARY_MASK \\ | LC_NUMERIC_MASK \\ | LC_TIME_MASK)"
  },
  {
    "label": "__lconv_storage()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "__lconv_storage(const lconv *__lc_input)"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc =* __lc_input ; __decimal_point = __lc_input -> decimal_point ; __thousands_sep = __lc_input -> thousands_sep ; __grouping = __lc_input -> grouping ; __int_curr_symbol = __lc_input -> int_curr_symbol ; __currency_symbol = __lc_input -> currency_symbol ; __mon_decimal_point = __lc_input -> mon_decimal_point ; __mon_thousands_sep = __lc_input -> mon_thousands_sep ; __mon_grouping = __lc_input -> mon_grouping ; __positive_sign = __lc_input -> positive_sign ; __negative_sign = __lc_input -> negative_sign ; __lc . decimal_point = const_cast<)",
    "insertText": "char(__decimal_point.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . thousands_sep = const_cast<)",
    "insertText": "char(__thousands_sep.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . grouping = const_cast<)",
    "insertText": "char(__grouping.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . int_curr_symbol = const_cast<)",
    "insertText": "char(__int_curr_symbol.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . currency_symbol = const_cast<)",
    "insertText": "char(__currency_symbol.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . mon_decimal_point = const_cast<)",
    "insertText": "char(__mon_decimal_point.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . mon_thousands_sep = const_cast<)",
    "insertText": "char(__mon_thousands_sep.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . mon_grouping = const_cast<)",
    "insertText": "char(__mon_grouping.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . positive_sign = const_cast<)",
    "insertText": "char(__positive_sign.c_str())"
  },
  {
    "label": "char()",
    "kind": "Method",
    "detail": "Function (__lc . negative_sign = const_cast<)",
    "insertText": "char(__negative_sign.c_str())"
  },
  {
    "label": "__get()",
    "kind": "Method",
    "detail": "Function (} lconv*)",
    "insertText": "__get()"
  },
  {
    "label": "locale_t()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "locale_t(std::nullptr_t) : __locale(nullptr), __locale_str(nullptr), __lc(nullptr)"
  },
  {
    "label": "locale_t()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "locale_t(_locale_t __xlocale, const char* __xlocale_str) : __locale(__xlocale), __locale_str(__xlocale_str), __lc(nullptr)"
  },
  {
    "label": "locale_t()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "locale_t(const locale_t &__l) : __locale(__l.__locale), __locale_str(__l.__locale_str), __lc(nullptr)"
  },
  {
    "label": "locale_t()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "locale_t()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete __lc ; } locale_t&)",
    "insertText": "operator(const locale_t &__l)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (__locale = __l . __locale ; __locale_str = __l . __locale_str ; return* this ; } bool)",
    "insertText": "operator(const locale_t& __left, const locale_t& __right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const locale_t& __left, int __right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const locale_t& __left, long long __right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const locale_t& __left, std::nullptr_t __right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(int __left, const locale_t& __right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(std::nullptr_t __left, const locale_t& __right)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "__lconv_storage()",
    "kind": "Method",
    "detail": "Function (delete __lc ; __lc = new)",
    "insertText": "__lconv_storage(__input_lc)"
  },
  {
    "label": "newlocale()",
    "kind": "Method",
    "detail": "Function (} private : _locale_t __locale ; const char* __locale_str ; __lconv_storage* __lc = nullptr ; } ; # define freelocale _free_locale locale_t)",
    "insertText": "newlocale(int __mask, const char * __locale, locale_t __base)"
  },
  {
    "label": "localeconv_l()",
    "kind": "Method",
    "detail": "Function (lconv*)",
    "insertText": "localeconv_l(locale_t & __loc)"
  },
  {
    "label": "mbrlen_l()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "mbrlen_l(const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps, locale_t __loc)"
  },
  {
    "label": "mbsrtowcs_l()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "mbsrtowcs_l(wchar_t *__restrict __dst, const char **__restrict __src, size_t __len, mbstate_t *__restrict __ps, locale_t __loc)"
  },
  {
    "label": "wcrtomb_l()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "wcrtomb_l(char *__restrict __s, wchar_t __wc, mbstate_t *__restrict __ps, locale_t __loc)"
  },
  {
    "label": "mbrtowc_l()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "mbrtowc_l(wchar_t *__restrict __pwc, const char *__restrict __s, size_t __n, mbstate_t *__restrict __ps, locale_t __loc)"
  },
  {
    "label": "mbsnrtowcs_l()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "mbsnrtowcs_l(wchar_t *__restrict __dst, const char **__restrict __src, size_t __nms, size_t __len, mbstate_t *__restrict __ps, locale_t __loc)"
  },
  {
    "label": "wcsnrtombs_l()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "wcsnrtombs_l(char *__restrict __dst, const wchar_t **__restrict __src, size_t __nwc, size_t __len, mbstate_t *__restrict __ps, locale_t __loc)"
  },
  {
    "label": "btowc_l()",
    "kind": "Method",
    "detail": "Function (wint_t)",
    "insertText": "btowc_l(int __c, locale_t __loc)"
  },
  {
    "label": "wctob_l()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "wctob_l(wint_t __c, locale_t __loc)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decltype(MB_CUR_MAX) MB_CUR_MAX_L( locale_t __l)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# define mbtowc_l _mbtowc_l # define strtoll_l _strtoi64_l # define strtoull_l _strtoui64_l # define strtod_l _strtod_l # if)",
    "insertText": "defined(_LIBCPP_MSVCRT) #define strtof_l _strtof_l #define strtold_l _strtold_l #else _LIBCPP_FUNC_VIS float strtof_l(const char*, char**, locale_t)"
  },
  {
    "label": "strtold_l()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS long double)",
    "insertText": "strtold_l(const char*, char**, locale_t)"
  },
  {
    "label": "islower_l()",
    "kind": "Method",
    "detail": "Function (# endif _LIBCPP_HIDE_FROM_ABI int)",
    "insertText": "islower_l(int __c, _locale_t __loc)"
  },
  {
    "label": "isupper_l()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI int)",
    "insertText": "isupper_l(int __c, _locale_t __loc)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # define isdigit_l _isdigit_l # define isxdigit_l _isxdigit_l # define strcoll_l _strcoll_l # define strxfrm_l _strxfrm_l # define wcscoll_l _wcscoll_l # define wcsxfrm_l _wcsxfrm_l # define toupper_l _toupper_l # define tolower_l _tolower_l # define iswspace_l _iswspace_l # define iswprint_l _iswprint_l # define iswcntrl_l _iswcntrl_l # define iswupper_l _iswupper_l # define iswlower_l _iswlower_l # define iswalpha_l _iswalpha_l # define iswdigit_l _iswdigit_l # define iswpunct_l _iswpunct_l # define iswxdigit_l _iswxdigit_l # define towupper_l _towupper_l # define towlower_l _towlower_l # if)",
    "insertText": "defined(__MINGW32__) && __MSVCRT_VERSION__ < 0x0800 _LIBCPP_FUNC_VIS size_t strftime_l(char *ret, size_t n, const char *format, const struct tm *tm, locale_t loc)"
  },
  {
    "label": "sscanf_l()",
    "kind": "Method",
    "detail": "Function (# else # define strftime_l _strftime_l # endif # define)",
    "insertText": "sscanf_l(__s, __l, __f, ...) _sscanf_l( __s, __f, __l, __VA_ARGS__ ) #define sprintf_l( __s, __l, __f, ... ) _sprintf_l( __s, __f, __l, __VA_ARGS__ ) #define vsprintf_l( __s, __l, __f, ... ) _vsprintf_l( __s, __f, __l, __VA_ARGS__ ) #define vsnprintf_l( __s, __n, __l, __f, ... ) _vsnprintf_l( __s, __n, __f, __l, __VA_ARGS__ ) _LIBCPP_FUNC_VIS int snprintf_l(char *__ret, size_t __n, locale_t __loc, const char *__format, ...)"
  },
  {
    "label": "asprintf_l()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS int)",
    "insertText": "asprintf_l(char **__ret, locale_t __loc, const char *__format, ...)"
  },
  {
    "label": "vasprintf_l()",
    "kind": "Method",
    "detail": "Function (_LIBCPP_FUNC_VIS int)",
    "insertText": "vasprintf_l(char **__ret, locale_t __loc, const char *__format, va_list __ap)"
  },
  {
    "label": "isblank_l()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "isblank_l(int __c, locale_t)"
  },
  {
    "label": "iswblank_l()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "iswblank_l(wint_t __c, locale_t)"
  }
]