[
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FInBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInBunch"
  },
  {
    "label": "FNetFieldExportGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetFieldExportGroup"
  },
  {
    "label": "FOutBunch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutBunch"
  },
  {
    "label": "UNetConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetConnection"
  },
  {
    "label": "FObjectKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectKey"
  },
  {
    "label": "FSubObjectRegistry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubObjectRegistry"
  },
  {
    "label": "FNetConditionGroupManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConditionGroupManager"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UActorChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorChannel"
  },
  {
    "label": "FObjectReplicator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectReplicator"
  },
  {
    "label": "FPacketRepKeyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPacketRepKeyInfo"
  },
  {
    "label": "FQueuedBunchObjectReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedBunchObjectReference"
  },
  {
    "label": "SUBOBJECT_TRANSITION_VALIDATION()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Misc / NetworkGuid . h \" # include \" Engine / Channel . h \" # include \" Net / DataReplication . h \" # include \" Containers / StaticBitArray . h \" # include \" ActorChannel . generated . h \" # ifndef NET_ENABLE_SUBOBJECT_REPKEYS # define NET_ENABLE_SUBOBJECT_REPKEYS 1 # endif # ifndef SUBOBJECT_TRANSITION_VALIDATION # define)",
    "insertText": "SUBOBJECT_TRANSITION_VALIDATION(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "SkipReplicatorCreation()",
    "kind": "Method",
    "detail": "Function (class AActor ; class FInBunch ; class FNetFieldExportGroup ; class FOutBunch ; class UNetConnection ; struct FObjectKey ; namespace UE::Net { struct FSubObjectRegistry ; class FNetConditionGroupManager ; } enum class ESetChannelActorFlags : uint32 { None = 0,)",
    "insertText": "SkipReplicatorCreation(1 << 0), SkipMarkActive = (1 << 1)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(ESetChannelActorFlags)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(transient, customConstructor, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetSkipRoleSwap()",
    "kind": "Method",
    "detail": "Function (FNetworkGUID ActorNetGUID ; float CustomTimeDilation ; double RelevantTime ; double LastUpdateTime ; uint32 SpawnAcked : 1 ; uint32 bForceCompareProperties : 1 ; uint32 bIsReplicatingActor : 1 ; uint32 bClearRecentActorRefs : 1 ; uint32 bHoldQueuedExportBunchesAndGUIDs : 1 ; # if ! UE_BUILD_SHIPPING uint32 bBlockChannelFailure : 1 ; # endif private : uint32 bSkipRoleSwap : 1 ; uint32 bActorIsPendingKill : 1 ; uint32 bSuppressQueuedBunchWarningsDueToHitches : 1 ; uint32 bIsForcedSerializeFromRPC : 1 ; uint16 ChannelSubObjectDirtyCount = 0 ; public : bool)",
    "insertText": "GetSkipRoleSwap()"
  },
  {
    "label": "GetCreatedSubObjects()",
    "kind": "Method",
    "detail": "Function (const TArray<TObjectPtr<UObject>>&)",
    "insertText": "GetCreatedSubObjects()"
  },
  {
    "label": "UActorChannel()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return CreateSubObjects ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } TArray<FNetworkGUID> QueuedMustBeMappedGuidsInLastBunch ; TArray<class FOutBunch*> QueuedExportBunches ; EChannelCloseReason QueuedCloseReason ;)",
    "insertText": "UActorChannel(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UActorChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UActorChannel()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Init(UNetConnection* InConnection, int32 InChIndex, EChannelCreateFlags CreateFlags)"
  },
  {
    "label": "SetClosingFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClosingFlag()"
  },
  {
    "label": "ReceivedBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedBunch(FInBunch& Bunch)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "CanStopTicking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStopTicking()"
  },
  {
    "label": "ProcessBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessBunch(FInBunch & Bunch)"
  },
  {
    "label": "ProcessQueuedBunches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessQueuedBunches()"
  },
  {
    "label": "ReceivedNak()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivedNak(int32 NakPacketId)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Close(EChannelCloseReason Reason)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Describe()"
  },
  {
    "label": "BreakAndReleaseReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakAndReleaseReferences()"
  },
  {
    "label": "ReleaseReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseReferences(bool bKeepReplicators)"
  },
  {
    "label": "GetActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetActor()"
  },
  {
    "label": "IsActorReadyForReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorReadyForReplication()"
  },
  {
    "label": "SetChannelActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChannelActor(AActor* InActor, ESetChannelActorFlags Flags)"
  },
  {
    "label": "NotifyActorChannelOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorChannelOpen(AActor* InActor, FInBunch& InBunch)"
  },
  {
    "label": "GetAdditionalRequiredBunches()",
    "kind": "Method",
    "detail": "Function (TArray<FOutBunch*>)",
    "insertText": "GetAdditionalRequiredBunches(const FOutBunch& OutgoingBunch, EChannelGetAdditionalRequiredBunchesFlags Flags)"
  },
  {
    "label": "AppendMustBeMappedGuids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendMustBeMappedGuids(FOutBunch* Bunch)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "QueueRemoteFunctionBunch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueRemoteFunctionBunch(UObject* CallTarget, UFunction* Func, FOutBunch &Bunch)"
  },
  {
    "label": "PrepareForRemoteFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForRemoteFunction(UObject* TargetObj)"
  },
  {
    "label": "ReadyForDormancy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyForDormancy(bool debug=false)"
  },
  {
    "label": "StartBecomingDormant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartBecomingDormant()"
  },
  {
    "label": "CleanupReplicators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupReplicators(const bool bKeepReplicators = false)"
  },
  {
    "label": "WriteContentBlockHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteContentBlockHeader(UObject* Obj, FNetBitWriter &Bunch, const bool bHasRepLayout)"
  },
  {
    "label": "WriteContentBlockPayload()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteContentBlockPayload(UObject* Obj, FNetBitWriter &Bunch, const bool bHasRepLayout, FNetBitWriter& Payload)"
  },
  {
    "label": "ReadContentBlockHeader()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ReadContentBlockHeader(FInBunch& Bunch, bool& bObjectDeleted, bool& bOutHasRepLayout)"
  },
  {
    "label": "ReadContentBlockPayload()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "ReadContentBlockPayload(FInBunch &Bunch, FNetBitReader& OutPayload, bool& bOutHasRepLayout)"
  },
  {
    "label": "WriteFieldHeaderAndPayload()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "WriteFieldHeaderAndPayload(FNetBitWriter& Bunch, const FClassNetCache* ClassCache, const FFieldNetCache* FieldCache, FNetFieldExportGroup* NetFieldExportGroup, FNetBitWriter& Payload, bool bIgnoreInternalAck=false)"
  },
  {
    "label": "ReadFieldHeaderAndPayload()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadFieldHeaderAndPayload(UObject* Object, const FClassNetCache* ClassCache, FNetFieldExportGroup* NetFieldExportGroup, FNetBitReader& Bunch, const FFieldNetCache** OutField, FNetBitReader& OutPayload)"
  },
  {
    "label": "GetNetFieldExportGroupForClassNetCache()",
    "kind": "Method",
    "detail": "Function (FNetFieldExportGroup*)",
    "insertText": "GetNetFieldExportGroupForClassNetCache(UClass* ObjectClass)"
  },
  {
    "label": "GetOrCreateNetFieldExportGroupForClassNetCache()",
    "kind": "Method",
    "detail": "Function (FNetFieldExportGroup*)",
    "insertText": "GetOrCreateNetFieldExportGroupForClassNetCache(const UObject* Object)"
  },
  {
    "label": "GetActorReplicationData()",
    "kind": "Method",
    "detail": "Function (FObjectReplicator&)",
    "insertText": "GetActorReplicationData()"
  },
  {
    "label": "SetCurrentSubObjectOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSubObjectOwner(AActor* SubObjectOwner)"
  },
  {
    "label": "SetCurrentSubObjectOwner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSubObjectOwner(UActorComponent* SubObjectOwner)"
  },
  {
    "label": "CanIgnoreDeprecatedReplicateSubObjects()",
    "kind": "Method",
    "detail": "Function (# if SUBOBJECT_TRANSITION_VALIDATION bool)",
    "insertText": "CanIgnoreDeprecatedReplicateSubObjects()"
  },
  {
    "label": "ReplicateSubobject()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ReplicateSubobject(UObject* Obj, FOutBunch& Bunch, FReplicationFlags RepFlags)"
  },
  {
    "label": "ReplicateSubobject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicateSubobject(UActorComponent* ActorChannel, FOutBunch& Bunch, FReplicationFlags RepFlags)"
  },
  {
    "label": "ReplicateSubobjectCustom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplicateSubobjectCustom(UObject* Obj, FOutBunch& Bunch, const FReplicationFlags& RepFlags)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool WroteSomething = false ;)",
    "insertText": "for(auto It = ObjectList.CreateIterator(); It; ++It)"
  },
  {
    "label": "ReplicateSubobject()",
    "kind": "Method",
    "detail": "Function (Type* Obj =* It ; WroteSomething | =)",
    "insertText": "ReplicateSubobject(Obj, Bunch, RepFlags)"
  },
  {
    "label": "SetForcedSerializeFromRPC()",
    "kind": "Method",
    "detail": "Function (} return WroteSomething ; } void)",
    "insertText": "SetForcedSerializeFromRPC(bool bInFromRPC)"
  },
  {
    "label": "FPacketRepKeyInfo()",
    "kind": "Method",
    "detail": "Function (bIsForcedSerializeFromRPC = bInFromRPC ; } # if NET_ENABLE_SUBOBJECT_REPKEYS const int32 SubobjectRepKeyBufferSize = 6 4 ; struct FPacketRepKeyInfo {)",
    "insertText": "FPacketRepKeyInfo() : PacketID(INDEX_NONE)"
  },
  {
    "label": "KeyNeedsToReplicate()",
    "kind": "Method",
    "detail": "Function (} int32 PacketID ; TArray<int32> ObjKeys ; } ; TMap<int32,int32> SubobjectRepKeyMap ; TMap<int32,FPacketRepKeyInfo> SubobjectNakMap ; TArray<int32> PendingObjKeys ; bool)",
    "insertText": "KeyNeedsToReplicate(int32 ObjID, int32 RepKey)"
  },
  {
    "label": "AddedToChannelPool()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AddedToChannelPool()"
  },
  {
    "label": "CanSubObjectReplicateToClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSubObjectReplicateToClient(const APlayerController* PlayerController, ELifetimeCondition NetCondition, FObjectKey SubObjectKey, const TStaticBitArray<COND_Max>& ConditionMap, const UE::Net::FNetConditionGroupManager& ConditionGroupManager)"
  },
  {
    "label": "FindReplicator()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<FObjectReplicator>*)",
    "insertText": "FindReplicator(UObject* Obj)"
  },
  {
    "label": "CreateReplicator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FObjectReplicator>&)",
    "insertText": "CreateReplicator(UObject* Obj)"
  },
  {
    "label": "FindOrCreateReplicator()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FObjectReplicator>&)",
    "insertText": "FindOrCreateReplicator(UObject* Obj, bool* bOutCreated=nullptr)"
  },
  {
    "label": "ObjectHasReplicator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ObjectHasReplicator(const TWeakObjectPtr<UObject>& Obj)"
  },
  {
    "label": "MoveMappedObjectToUnmapped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveMappedObjectToUnmapped(const UObject* Object)"
  },
  {
    "label": "DestroyActorAndComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyActorAndComponents()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanUp(const bool bForDestroy, EChannelCloseReason CloseReason)"
  },
  {
    "label": "BecomeDormant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BecomeDormant()"
  },
  {
    "label": "DoSubObjectReplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSubObjectReplication(FOutBunch& Bunch, FReplicationFlags& OutRepFlags)"
  },
  {
    "label": "WriteContentBlockForSubObjectDelete()",
    "kind": "Method",
    "detail": "Function (enum class ESubObjectDeleteFlag : uint8 { Destroyed,TearOff,ForceDelete,} ; void)",
    "insertText": "WriteContentBlockForSubObjectDelete(FOutBunch& Bunch, FNetworkGUID& GuidToDelete, ESubObjectDeleteFlag DeleteFlag)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ToString(UActorChannel::ESubObjectDeleteFlag DeleteFlag)"
  },
  {
    "label": "ReplicateRegisteredSubObjects()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ReplicateRegisteredSubObjects(FOutBunch& Bunch, FReplicationFlags RepFlags)"
  },
  {
    "label": "WriteSubObjectInBunch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteSubObjectInBunch(UObject* Obj, FOutBunch& Bunch, FReplicationFlags RepFlags)"
  },
  {
    "label": "WriteComponentSubObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteComponentSubObjects(UActorComponent* Component, FOutBunch& Bunch, FReplicationFlags RepFlags, const TStaticBitArray<COND_Max>& ConditionMap)"
  },
  {
    "label": "WriteSubObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WriteSubObjects(UObject* SubObjectOwner, const UE::Net::FSubObjectRegistry& SubObjectList, FOutBunch& Bunch, FReplicationFlags RepFlags, const TStaticBitArray<COND_Max>& ConditionMap)"
  },
  {
    "label": "ValidateReplicatedSubObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateReplicatedSubObjects()"
  },
  {
    "label": "TestLegacyReplicateSubObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestLegacyReplicateSubObjects(UActorComponent* ReplicatedComponent, FOutBunch& Bunch, FReplicationFlags RepFlags)"
  },
  {
    "label": "TestLegacyReplicateSubObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestLegacyReplicateSubObjects(FOutBunch& Bunch, FReplicationFlags RepFlags)"
  },
  {
    "label": "UpdateDeletedSubObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateDeletedSubObjects(FOutBunch& Bunch)"
  },
  {
    "label": "ShouldProcessAllQueuedBunches()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return CreateSubObjects ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } bool)",
    "insertText": "ShouldProcessAllQueuedBunches(float CurrentTimeSeconds)"
  }
]