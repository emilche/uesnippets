[
  {
    "label": "FScratchBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScratchBuffer"
  },
  {
    "label": "CHAOS_SCRATCHBUFFER_CHECKSENTINEL()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Containers / Array . h \" # include \" Templates / AlignmentTemplates . h \" # include<type_traits> # define)",
    "insertText": "CHAOS_SCRATCHBUFFER_CHECKSENTINEL(DO_CHECK)"
  },
  {
    "label": "FScratchBuffer()",
    "kind": "Method",
    "detail": "Function (namespace Private { class FScratchBuffer { private : const size_t SentinelValue = 0 xA1B2C3D4A1B2C3D4ll ; public :)",
    "insertText": "FScratchBuffer() : BufferNext(nullptr) , BufferBegin(nullptr) , BufferEnd(nullptr)"
  },
  {
    "label": "FScratchBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScratchBuffer()"
  },
  {
    "label": "DestroyBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyBuffer()"
  },
  {
    "label": "BufferSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "BufferSize()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const size_t InMaxBytes)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBuffer(InMaxBytes)"
  },
  {
    "label": "AllocUninitialized()",
    "kind": "Method",
    "detail": "Function (} BufferNext = BufferBegin ; } template<T> T*)",
    "insertText": "AllocUninitialized()"
  },
  {
    "label": "AllocAligned()",
    "kind": "Method",
    "detail": "Function (void* Address =)",
    "insertText": "AllocAligned(sizeof(T), alignof(T))"
  },
  {
    "label": "AllocArrayUninitialized()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "AllocArrayUninitialized(const int32 Num)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (const size_t AlignedSize =)",
    "insertText": "Align(sizeof(T), alignof(T))"
  },
  {
    "label": "AllocAligned()",
    "kind": "Method",
    "detail": "Function (void* Address =)",
    "insertText": "AllocAligned(Num * AlignedSize, alignof(T))"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . TArgs> T*)",
    "insertText": "Alloc(TArgs... Args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Object = AllocUninitialized<)",
    "insertText": "T()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Object) T(Args...)"
  },
  {
    "label": "AllocArray()",
    "kind": "Method",
    "detail": "Function (} return Object ; } template<T,. . . TArgs> T*)",
    "insertText": "AllocArray(const int32 Num, TArgs... Args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* Objects = AllocArrayUninitialized<)",
    "insertText": "T(Num)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&Objects[Index]) T(Args...)"
  },
  {
    "label": "AllocAligned()",
    "kind": "Method",
    "detail": "Function (} } return Objects ; } private : void*)",
    "insertText": "AllocAligned(const size_t InSize, const size_t InAlign)"
  },
  {
    "label": "Align()",
    "kind": "Method",
    "detail": "Function (uint8* const Address =)",
    "insertText": "Align(BufferNext, InAlign)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8* const NewBufferNext = Address + InSize ;)",
    "insertText": "if(NewBufferNext <= BufferEnd)"
  },
  {
    "label": "CreateBuffer()",
    "kind": "Method",
    "detail": "Function (BufferNext = NewBufferNext ; return Address ; } return nullptr ; } void)",
    "insertText": "CreateBuffer(const int32 InMaxBytes)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (BufferBegin = new uint8 [ InMaxBytes +)",
    "insertText": "sizeof(SentinelValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(BufferBegin != nullptr)"
  },
  {
    "label": "InitSentinel()",
    "kind": "Method",
    "detail": "Function (BufferEnd = BufferBegin + InMaxBytes ; })",
    "insertText": "InitSentinel()"
  },
  {
    "label": "Sentinel()",
    "kind": "Method",
    "detail": "Function (delete [ ] BufferBegin ; } BufferBegin = nullptr ; BufferEnd = nullptr ; BufferNext = nullptr ; } size_t*)",
    "insertText": "Sentinel()"
  },
  {
    "label": "CheckSentinel()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CheckSentinel()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if CHAOS_SCRATCHBUFFER_CHECKSENTINEL)",
    "insertText": "if(Sentinel() != nullptr)"
  }
]