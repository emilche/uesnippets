[
  {
    "label": "FAnimNode_MirrorBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_MirrorBase"
  },
  {
    "label": "FMirrorAnimNodeReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMirrorAnimNodeReference"
  },
  {
    "label": "UMirrorAnimLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMirrorAnimLibrary"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreMinimal . h \" # include \" Animation / AnimExecutionContext . h \" # include \" Kismet / BlueprintFunctionLibrary . h \" # include \" Animation / AnimNodeReference . h \" # include \" MirrorAnimLibrary . generated . h \" struct FAnimNode_MirrorBase ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UFUNCTION(BlueprintCallable, Category = \"Animation|Mirroring\", meta=(BlueprintThreadSafe, ExpandEnumAsExecs = \"Result\")) static ANIMGRAPHRUNTIME_API FMirrorAnimNodeReference ConvertToMirrorNode(const FAnimNodeReference& Node, EAnimNodeReferenceConversionResult& Result)"
  },
  {
    "label": "ConvertToMirrorNode()",
    "kind": "Method",
    "detail": "Function (EAnimNodeReferenceConversionResult ConversionResult ; MirrorNode =)",
    "insertText": "ConvertToMirrorNode(Node, ConversionResult)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Result(ConversionResult == EAnimNodeReferenceConversionResult::Succeeded)"
  }
]