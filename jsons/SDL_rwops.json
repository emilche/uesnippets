[
  {
    "label": "SDL_RWops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_RWops"
  },
  {
    "label": "SDL_RWops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_RWops"
  },
  {
    "label": "SDL_RWops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_RWops"
  },
  {
    "label": "SDL_RWops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_RWops"
  },
  {
    "label": "SDL_RWops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_RWops"
  },
  {
    "label": "SDL_RWops",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_RWops"
  },
  {
    "label": "based",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "based"
  },
  {
    "label": "based",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "based"
  },
  {
    "label": "SDL_RWFromFile()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWFromFile(const char *file,\n                                                  const char *mode)"
  },
  {
    "label": "SDL_RWFromFP()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWFromFP(FILE * fp, SDL_bool autoclose)"
  },
  {
    "label": "SDL_RWFromFP()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWFromFP(void * fp,\n                                                SDL_bool autoclose)"
  },
  {
    "label": "SDL_RWFromMem()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWFromMem(void *mem, int size)"
  },
  {
    "label": "SDL_RWFromConstMem()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWFromConstMem(const void *mem,\n                                                      int size)"
  },
  {
    "label": "SDL_AllocRW()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_AllocRW(void)"
  },
  {
    "label": "SDL_FreeRW()",
    "kind": "Method",
    "detail": "Function (by)",
    "insertText": "SDL_FreeRW()"
  },
  {
    "label": "SDL_FreeRW()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_FreeRW(SDL_RWops * area)"
  },
  {
    "label": "SDL_RWsize()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWsize(SDL_RWops *context)"
  },
  {
    "label": "SDL_RWseek()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWseek(SDL_RWops *context,\n                                          Sint64 offset, int whence)"
  },
  {
    "label": "SDL_RWtell()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWtell(SDL_RWops *context)"
  },
  {
    "label": "SDL_RWread()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWread(SDL_RWops *context,\n                                          void *ptr, size_t size,\n                                          size_t maxnum)"
  },
  {
    "label": "SDL_RWwrite()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWwrite(SDL_RWops *context,\n                                           const void *ptr, size_t size,\n                                           size_t num)"
  },
  {
    "label": "SDL_RWclose()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_RWclose(SDL_RWops *context)"
  },
  {
    "label": "SDL_LoadFile_RW()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_LoadFile_RW(SDL_RWops *src,\n                                              size_t *datasize,\n                                              int freesrc)"
  },
  {
    "label": "SDL_LoadFile()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_LoadFile(const char *file, size_t *datasize)"
  },
  {
    "label": "SDL_ReadU8()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ReadU8(SDL_RWops * src)"
  },
  {
    "label": "SDL_ReadLE16()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ReadLE16(SDL_RWops * src)"
  },
  {
    "label": "SDL_ReadBE16()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ReadBE16(SDL_RWops * src)"
  },
  {
    "label": "SDL_ReadLE32()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ReadLE32(SDL_RWops * src)"
  },
  {
    "label": "SDL_ReadBE32()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ReadBE32(SDL_RWops * src)"
  },
  {
    "label": "SDL_ReadLE64()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ReadLE64(SDL_RWops * src)"
  },
  {
    "label": "SDL_ReadBE64()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ReadBE64(SDL_RWops * src)"
  },
  {
    "label": "SDL_WriteU8()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_WriteU8(SDL_RWops * dst, Uint8 value)"
  },
  {
    "label": "SDL_WriteLE16()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_WriteLE16(SDL_RWops * dst, Uint16 value)"
  },
  {
    "label": "SDL_WriteBE16()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_WriteBE16(SDL_RWops * dst, Uint16 value)"
  },
  {
    "label": "SDL_WriteLE32()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_WriteLE32(SDL_RWops * dst, Uint32 value)"
  },
  {
    "label": "SDL_WriteBE32()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_WriteBE32(SDL_RWops * dst, Uint32 value)"
  },
  {
    "label": "SDL_WriteLE64()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_WriteLE64(SDL_RWops * dst, Uint64 value)"
  },
  {
    "label": "SDL_WriteBE64()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_WriteBE64(SDL_RWops * dst, Uint64 value)"
  }
]