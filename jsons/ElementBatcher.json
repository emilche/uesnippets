[
  {
    "label": "FSlateBatchData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateBatchData"
  },
  {
    "label": "FSlateDrawElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateDrawElement"
  },
  {
    "label": "FSlateRenderBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderBatch"
  },
  {
    "label": "FSlateRenderingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderingPolicy"
  },
  {
    "label": "FSlateShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResource"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FShaderParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderParams"
  },
  {
    "label": "FSlateCachedElementData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedElementData"
  },
  {
    "label": "FSlateCachedElementList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedElementList"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSlateElementBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementBatch"
  },
  {
    "label": "FBatchKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchKey"
  },
  {
    "label": "FSlateElementBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementBatcher"
  },
  {
    "label": "FShapedTextBuildContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapedTextBuildContext"
  },
  {
    "label": "FShapedGlyphSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapedGlyphSequence"
  },
  {
    "label": "FFontOutlineSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFontOutlineSettings"
  },
  {
    "label": "FSlateFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontCache"
  },
  {
    "label": "FMiddleEllipsisOverflowData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMiddleEllipsisOverflowData"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Rendering / RenderingCommon . h \" # include \" Rendering / SlateRendererTypes . h \" # include \" Layout / Clipping . h \" # include \" Stats / Stats . h \" # include \" SlateGlobals . h \" # include \" Styling / SlateTypes . h \" # include \" Containers / StaticArray . h \" class FSlateBatchData ; class FSlateDrawElement ; class FSlateRenderBatch ; class FSlateRenderingPolicy ; class FSlateShaderResource ; class FSlateWindowElementList ; struct FShaderParams ; struct FSlateCachedElementData ; struct FSlateCachedElementList ; enum class ETextOverflowDirection : uint8 ;)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"Add Elements Time\"), STAT_SlateAddElements, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Elements\"), STAT_SlateElements, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Elements (Box)\"), STAT_SlateElements_Box, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Elements (Border)\"), STAT_SlateElements_Border, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Elements (Text)\"), STAT_SlateElements_Text, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Elements (ShapedText)\"), STAT_SlateElements_ShapedText, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Elements (Line)\"), STAT_SlateElements_Line, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Elements (Other)\"), STAT_SlateElements_Other, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"Invalidation: Recached Elements\"), STAT_SlateInvalidation_RecachedElements, STATGROUP_Slate, SLATECORE_API)"
  },
  {
    "label": "FSlateElementBatch()",
    "kind": "Method",
    "detail": "Function (int32 GSlateFeathering ; class FSlateElementBatch { public :)",
    "insertText": "FSlateElementBatch(const FSlateShaderResource* InShaderResource, const FShaderParams& InShaderParams, ESlateShader ShaderType, ESlateDrawPrimitive PrimitiveType, ESlateDrawEffect InDrawEffects, ESlateBatchDrawFlag InBatchFlags, const FSlateDrawElement& InDrawElement, int32 InstanceCount = 0, uint32 InstanceOffset = 0, ISlateUpdatableInstanceBuffer* InstanceData = nullptr)"
  },
  {
    "label": "FSlateElementBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlateElementBatch(TWeakPtr<ICustomSlateElement, ESPMode::ThreadSafe> InCustomDrawer, const FSlateDrawElement& InDrawElement)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FSlateElementBatch& Other)"
  },
  {
    "label": "FBatchKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBatchKey(const FShaderParams& InShaderParams, ESlateShader InShaderType, ESlateDrawPrimitive InDrawPrimitiveType, ESlateDrawEffect InDrawEffects, ESlateBatchDrawFlag InDrawFlags, const FClipStateHandle InClipStateHandle, int32 InInstanceCount, uint32 InInstanceOffset, ISlateUpdatableInstanceBuffer* InInstanceBuffer) : ShaderParams(InShaderParams) , DrawFlags(InDrawFlags) , ShaderType(InShaderType) , DrawPrimitiveType(InDrawPrimitiveType) , DrawEffects(InDrawEffects) , ClipStateHandle(InClipStateHandle) , InstanceCount(InInstanceCount) , InstanceOffset(InInstanceOffset) , InstanceData(InInstanceBuffer) , SceneIndex(-1)"
  },
  {
    "label": "FBatchKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBatchKey(TWeakPtr<ICustomSlateElement, ESPMode::ThreadSafe> InCustomDrawer, const FClipStateHandle InClipStateHandle) : CustomDrawer(InCustomDrawer) , ShaderParams() , DrawFlags(ESlateBatchDrawFlag::None) , ShaderType(ESlateShader::Default) , DrawPrimitiveType(ESlateDrawPrimitive::TriangleList) , DrawEffects(ESlateDrawEffect::None) , ClipStateHandle(InClipStateHandle) , InstanceCount(0) , InstanceOffset(0) , SceneIndex(-1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FBatchKey& Other)"
  },
  {
    "label": "FSlateBatchData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateBatchData()"
  },
  {
    "label": "ResetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetData()"
  },
  {
    "label": "GetRenderBatches()",
    "kind": "Method",
    "detail": "Function (const TArray<FSlateRenderBatch>&)",
    "insertText": "GetRenderBatches()"
  },
  {
    "label": "GetFirstRenderBatchIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFirstRenderBatchIndex()"
  },
  {
    "label": "MergeRenderBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeRenderBatches()"
  },
  {
    "label": "AddRenderBatch()",
    "kind": "Method",
    "detail": "Function (FSlateRenderBatch&)",
    "insertText": "AddRenderBatch(int32 InLayer, const FShaderParams& InShaderParams, const FSlateShaderResource* InResource, ESlateDrawPrimitive InPrimitiveType, ESlateShader InShaderType, ESlateDrawEffect InDrawEffects, ESlateBatchDrawFlag InDrawFlags, int8 SceneIndex)"
  },
  {
    "label": "FillBuffersFromNewBatch()",
    "kind": "Method",
    "detail": "Function (public : FSlateElementBatcher ; private : void)",
    "insertText": "FillBuffersFromNewBatch(FSlateRenderBatch& Batch, FSlateVertexArray& FinalVertices, FSlateIndexArray& FinalIndices)"
  },
  {
    "label": "CombineBatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineBatches(FSlateRenderBatch& FirstBatch, FSlateRenderBatch& SecondBatch, FSlateVertexArray& FinalVertices, FSlateIndexArray& FinalIndices)"
  },
  {
    "label": "FSlateElementBatcher()",
    "kind": "Method",
    "detail": "Function (private : TArray<FSlateRenderBatch> RenderBatches ; FSlateVertexArray UncachedSourceBatchVertices ; FSlateIndexArray UncachedSourceBatchIndices ; FSlateVertexArray FinalVertexData ; FSlateIndexArray FinalIndexData ; int32 MaxNumFinalVertices = 0 ; int32 MaxNumFinalIndices = 0 ; int32 FirstRenderBatchIndex ; int32 NumLayers ; int32 NumBatches ; bool bIsStencilBufferRequired ; } ; class FSlateElementBatcher { public :)",
    "insertText": "FSlateElementBatcher(TSharedRef<FSlateRenderingPolicy> InRenderingPolicy)"
  },
  {
    "label": "FSlateElementBatcher()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateElementBatcher()"
  },
  {
    "label": "AddElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElements(FSlateWindowElementList& ElementList)"
  },
  {
    "label": "RequiresVsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresVsync()"
  },
  {
    "label": "SetSkipDefaultUpdatePostBuffers()",
    "kind": "Method",
    "detail": "Function (ResourceUpdatingPostBuffers = InResourceUpdatingPostBuffers ; } void)",
    "insertText": "SetSkipDefaultUpdatePostBuffers(ESlatePostRT InSkipDefaultUpdatePostBuffers)"
  },
  {
    "label": "SetCompositeHDRViewports()",
    "kind": "Method",
    "detail": "Function (SkipDefaultUpdatePostBuffers = InSkipDefaultUpdatePostBuffers ; } void)",
    "insertText": "SetCompositeHDRViewports(bool bInCompositeHDRViewports)"
  },
  {
    "label": "ResetBatches()",
    "kind": "Method",
    "detail": "Function (bCompositeHDRViewports = bInCompositeHDRViewports ; } void)",
    "insertText": "ResetBatches()"
  },
  {
    "label": "AddElementsInternal()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddElementsInternal(const FSlateDrawElementMap& DrawElements, FVector2f ViewportSize)"
  },
  {
    "label": "AddCachedElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCachedElements(FSlateCachedElementData& CachedElementData, FVector2f ViewportSize)"
  },
  {
    "label": "GenerateIndexedVertexBatches()",
    "kind": "Method",
    "detail": "Function (template<ElementType,ElementAdder,ElementBatchParamCreator,ElementBatchReserver> void)",
    "insertText": "GenerateIndexedVertexBatches(const FSlateDrawElementArray<ElementType>& DrawElements , ElementAdder&& InElementAdder , ElementBatchParamCreator&& InElementBatchParamCreator , ElementBatchReserver&& InElementBatchReserver)"
  },
  {
    "label": "AddDebugQuadElement()",
    "kind": "Method",
    "detail": "Function (template<ESlateVertexRounding Rounding> void)",
    "insertText": "AddDebugQuadElement(const FSlateBoxElement& DrawElement)"
  },
  {
    "label": "AddBoxElements()",
    "kind": "Method",
    "detail": "Function (template<ElementType> void)",
    "insertText": "AddBoxElements(const FSlateDrawElementArray<ElementType>& DrawElement)"
  },
  {
    "label": "AddTextElement()",
    "kind": "Method",
    "detail": "Function (template<ESlateVertexRounding Rounding> void)",
    "insertText": "AddTextElement(const FSlateTextElement& DrawElement)"
  },
  {
    "label": "AddShapedTextElement()",
    "kind": "Method",
    "detail": "Function (template<ESlateVertexRounding Rounding> void)",
    "insertText": "AddShapedTextElement(const FSlateShapedTextElement& DrawElement)"
  },
  {
    "label": "AddGradientElement()",
    "kind": "Method",
    "detail": "Function (template<ESlateVertexRounding Rounding> void)",
    "insertText": "AddGradientElement(const FSlateGradientElement& DrawElement)"
  },
  {
    "label": "AddSplineElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSplineElement(const FSlateSplineElement& DrawElement)"
  },
  {
    "label": "AddLineElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLineElements(const FSlateDrawElementArray<FSlateLineElement>& DrawElements)"
  },
  {
    "label": "AddViewportElement()",
    "kind": "Method",
    "detail": "Function (template<ESlateVertexRounding Rounding> void)",
    "insertText": "AddViewportElement(const FSlateViewportElement& DrawElement)"
  },
  {
    "label": "AddBorderElement()",
    "kind": "Method",
    "detail": "Function (template<ESlateVertexRounding Rounding> void)",
    "insertText": "AddBorderElement(const FSlateBoxElement& DrawElement)"
  },
  {
    "label": "AddCustomElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomElement(const FSlateCustomDrawerElement& DrawElement)"
  },
  {
    "label": "AddCustomVerts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomVerts(const FSlateCustomVertsElement& DrawElement)"
  },
  {
    "label": "AddPostProcessPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPostProcessPass(const FSlatePostProcessElement& DrawElement, FVector2f WindowSize)"
  },
  {
    "label": "CreateRenderBatch()",
    "kind": "Method",
    "detail": "Function (FSlateRenderBatch&)",
    "insertText": "CreateRenderBatch(int32 Layer, const FShaderParams& ShaderParams, const FSlateShaderResource* InResource, ESlateDrawPrimitive PrimitiveType, ESlateShader ShaderType, ESlateDrawEffect DrawEffects, ESlateBatchDrawFlag DrawFlags, int8 SceneIndex, const FSlateClippingState* ClippingState)"
  },
  {
    "label": "CreateRenderBatch()",
    "kind": "Method",
    "detail": "Function (} FSlateRenderBatch&)",
    "insertText": "CreateRenderBatch(int32 Layer, const FShaderParams& ShaderParams, const FSlateShaderResource* InResource, ESlateDrawPrimitive PrimitiveType, ESlateShader ShaderType, ESlateDrawEffect DrawEffects, ESlateBatchDrawFlag DrawFlags, const FSlateDrawElement& DrawElement)"
  },
  {
    "label": "CreateRenderBatch()",
    "kind": "Method",
    "detail": "Function (} FSlateRenderBatch&)",
    "insertText": "CreateRenderBatch(FSlateBatchData* SlateBatchData, int32 Layer, const FShaderParams& ShaderParams, const FSlateShaderResource* InResource, ESlateDrawPrimitive PrimitiveType, ESlateShader ShaderType, ESlateDrawEffect DrawEffects, ESlateBatchDrawFlag DrawFlags, int8 SceneIndex, const FSlateClippingState* ClippingState)"
  },
  {
    "label": "CreateRenderBatch()",
    "kind": "Method",
    "detail": "Function (FSlateRenderBatch&)",
    "insertText": "CreateRenderBatch(FSlateBatchData* SlateBatchData, int32 Layer, const FShaderParams& ShaderParams, const FSlateShaderResource* InResource, ESlateDrawPrimitive PrimitiveType, ESlateShader ShaderType, ESlateDrawEffect DrawEffects, ESlateBatchDrawFlag DrawFlags, const FSlateDrawElement& DrawElement)"
  },
  {
    "label": "ResolveClippingState()",
    "kind": "Method",
    "detail": "Function (const FSlateClippingState*)",
    "insertText": "ResolveClippingState(const FSlateDrawElement& DrawElement)"
  },
  {
    "label": "BuildShapedTextSequence()",
    "kind": "Method",
    "detail": "Function (struct FShapedTextBuildContext { const class FShapedGlyphSequence* ShapedGlyphSequence ; const class FShapedGlyphSequence* OverflowGlyphSequence ; const UObject* FontMaterial ; const struct FFontOutlineSettings* OutlineSettings ; const FSlateDrawElement* DrawElement ; class FSlateFontCache* FontCache ; const FSlateRenderTransform* RenderTransform ; float TextBaseline ; float MaxHeight ; float StartLineX ; float StartLineY ; float LocalClipBoundingBoxLeft = 0 ; float LocalClipBoundingBoxRight = 0 ; int32 MaxGlyphCountToRender = - 1 ; int32 LayerId ; FColor FontTint ; ETextOverflowDirection OverflowDirection ; ETextOverflowPolicy OverflowPolicy ; bool bEnableCulling : 1 ; bool bForceEllipsis : 1 ; } ; template<ESlateVertexRounding Rounding> int32)",
    "insertText": "BuildShapedTextSequence(const FShapedTextBuildContext& Context)"
  },
  {
    "label": "FMiddleEllipsisOverflowData()",
    "kind": "Method",
    "detail": "Function (private : struct FMiddleEllipsisOverflowData {)",
    "insertText": "FMiddleEllipsisOverflowData() : SkipIndexStart(INDEX_NONE) , SkipIndexEnd(INDEX_NONE) , LineX(0.f) , LineY(0.f) , EllipsisLineX(0.f) , EllipsisLineY(0.f)"
  },
  {
    "label": "CalculateMiddleEllipsisSkipIndexAndOffset()",
    "kind": "Method",
    "detail": "Function (} int32 SkipIndexStart ; int32 SkipIndexEnd ; float LineX ; float LineY ; float EllipsisLineX ; float EllipsisLineY ; } ; void)",
    "insertText": "CalculateMiddleEllipsisSkipIndexAndOffset(const FShapedTextBuildContext& InContext, ETextOverflowDirection InOverflowDirection, FMiddleEllipsisOverflowData& OutMiddleEllipsisData)"
  }
]