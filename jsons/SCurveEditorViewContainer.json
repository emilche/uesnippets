[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "ITimeSliderController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimeSliderController"
  },
  {
    "label": "SCurveEditorView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorView"
  },
  {
    "label": "SRetainerWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRetainerWidget"
  },
  {
    "label": "FCurveEditorToolID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorToolID"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" HAL / Platform . h \" # include \" ICurveEditorDragOperation . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Margin . h \" # include \" Math / Vector2D . h \" # include \" Misc / Optional . h \" # include \" Templates / SharedPointer . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SBoxPanel . h \" class FCurveEditor ; class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; class ITimeSliderController ; class SCurveEditorView ; class SRetainerWidget ; struct FCurveEditorToolID ; struct FFocusEvent ; struct FGeometry ; struct FKeyEvent ; struct FPointerEvent ; class SCurveEditorViewContainer : public SVerticalBox {)",
    "insertText": "SLATE_BEGIN_ARGS(SCurveEditorViewContainer) : _MinimumPanelHeight(300.0f)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(TSharedPtr<ITimeSliderController>, ExternalTimeSliderController) SLATE_ARGUMENT(float, MinimumPanelHeight) SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<FCurveEditor> InCurveEditor)"
  },
  {
    "label": "GetViews()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TSharedPtr<SCurveEditorView>>)",
    "insertText": "GetViews()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ComputeVolatility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeVolatility()"
  },
  {
    "label": "OnPreviewMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPreviewMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "GetSlotPadding()",
    "kind": "Method",
    "detail": "Function (private : FMargin)",
    "insertText": "GetSlotPadding(int32 SlotIndex)"
  },
  {
    "label": "OnCurveEditorToolChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurveEditorToolChanged(FCurveEditorToolID InToolId)"
  },
  {
    "label": "ExpandInputBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandInputBounds(float NewWidth)"
  },
  {
    "label": "IsScrubTimeKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScrubTimeKeyEvent(const FKeyEvent& InKeyEvent)"
  }
]