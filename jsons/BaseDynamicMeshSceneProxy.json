[
  {
    "label": "FDynamicPrimitiveUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicPrimitiveUniformBuffer"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FCardRepresentationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCardRepresentationData"
  },
  {
    "label": "FBaseDynamicMeshSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseDynamicMeshSceneProxy"
  },
  {
    "label": "FDistanceFieldVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldVolumeData"
  },
  {
    "label": "FBaseDynamicMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PrimitiveSceneProxy . h \" # include \" MeshRenderBufferSet . h \" # include \" PrimitiveViewRelevance . h \" # include \" DynamicMeshBuilder . h \" # include \" Components / BaseDynamicMeshComponent . h \" # include \" RayTracingGeometry . h \" # include \" Templates / PimplPtr . h \" # include \" Util / ProgressCancel . h \" # include \" DistanceFieldAtlas . h \" # include \" PhysicsEngine / AggregateGeom . h \" using UE::Geometry::FDynamicMesh3 ; using UE::Geometry::FDynamicMeshAttributeSet ; using UE::Geometry::FDynamicMeshUVOverlay ; using UE::Geometry::FDynamicMeshNormalOverlay ; using UE::Geometry::FDynamicMeshColorOverlay ; using UE::Geometry::FDynamicMeshMaterialAttribute ; class FDynamicPrimitiveUniformBuffer ; class FMaterialRenderProxy ; class UMaterialInterface ; class FCardRepresentationData ; class FBaseDynamicMeshSceneProxy : public FPrimitiveSceneProxy { using FIndex2i = UE::Geometry::FIndex2i ; using FIndex3i = UE::Geometry::FIndex3i ; public : UBaseDynamicMeshComponent* ParentBaseComponent ; FMeshRenderBufferSetConversionUtil MeshRenderBufferSetConverter ; protected : TSet<FMeshRenderBufferSet*> AllocatedBufferSets ; FCriticalSection AllocatedSetsLock ; bool bEnableRaytracing = false ; bool bEnableViewModeOverrides = true ; bool bPreferStaticDrawPath = false ; public :)",
    "insertText": "FBaseDynamicMeshSceneProxy(UBaseDynamicMeshComponent* Component)"
  },
  {
    "label": "FBaseDynamicMeshSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBaseDynamicMeshSceneProxy()"
  },
  {
    "label": "GetActiveRenderBufferSets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetActiveRenderBufferSets(TArray<FMeshRenderBufferSet*>& Buffers)"
  },
  {
    "label": "AllocateNewRenderBufferSet()",
    "kind": "Method",
    "detail": "Function (FMeshRenderBufferSet*)",
    "insertText": "AllocateNewRenderBufferSet()"
  },
  {
    "label": "ReleaseRenderBufferSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRenderBufferSet(FMeshRenderBufferSet* BufferSet)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (template<TriangleEnumerable> void)",
    "insertText": "InitializeBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const FDynamicMeshUVOverlay* UVOverlay, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bTrackTriangles = false)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (MeshRenderBufferSetConverter .)",
    "insertText": "InitializeBuffersFromOverlays(RenderBuffers, Mesh, NumTriangles, Enumerable, UVOverlay, NormalOverlay, ColorOverlay, TangentsFunc, bTrackTriangles)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (} template<TriangleEnumerable,UVOverlayListAllocator> void)",
    "insertText": "InitializeBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const TArray<const FDynamicMeshUVOverlay*, UVOverlayListAllocator>& UVOverlays, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bTrackTriangles = false)"
  },
  {
    "label": "InitializeBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (MeshRenderBufferSetConverter .)",
    "insertText": "InitializeBuffersFromOverlays(RenderBuffers, Mesh, NumTriangles, Enumerable, UVOverlays, NormalOverlay, ColorOverlay, TangentsFunc, bTrackTriangles)"
  },
  {
    "label": "UpdateSecondaryTriangleBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateSecondaryTriangleBuffer(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, bool bDuplicate)"
  },
  {
    "label": "UpdateSecondaryTriangleBuffer()",
    "kind": "Method",
    "detail": "Function (MeshRenderBufferSetConverter .)",
    "insertText": "UpdateSecondaryTriangleBuffer(RenderBuffers, Mesh, bDuplicate)"
  },
  {
    "label": "RecomputeRenderBufferTriangleIndexSets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecomputeRenderBufferTriangleIndexSets(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh)"
  },
  {
    "label": "RecomputeRenderBufferTriangleIndexSets()",
    "kind": "Method",
    "detail": "Function (MeshRenderBufferSetConverter .)",
    "insertText": "RecomputeRenderBufferTriangleIndexSets(RenderBuffers, Mesh)"
  },
  {
    "label": "UpdateVertexBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (} template<TriangleEnumerable> void)",
    "insertText": "UpdateVertexBuffersFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int NumTriangles, TriangleEnumerable Enumerable, const FDynamicMeshNormalOverlay* NormalOverlay, const FDynamicMeshColorOverlay* ColorOverlay, TFunctionRef<void(int, int, int, const FVector3f&, FVector3f&, FVector3f&)> TangentsFunc, bool bUpdatePositions = true, bool bUpdateNormals = false, bool bUpdateColors = false)"
  },
  {
    "label": "UpdateVertexBuffersFromOverlays()",
    "kind": "Method",
    "detail": "Function (MeshRenderBufferSetConverter .)",
    "insertText": "UpdateVertexBuffersFromOverlays(RenderBuffers, Mesh, NumTriangles, Enumerable, NormalOverlay, ColorOverlay, TangentsFunc, bUpdatePositions, bUpdateNormals, bUpdateColors)"
  },
  {
    "label": "UpdateVertexUVBufferFromOverlays()",
    "kind": "Method",
    "detail": "Function (} template<TriangleEnumerable,UVOverlayListAllocator> void)",
    "insertText": "UpdateVertexUVBufferFromOverlays(FMeshRenderBufferSet* RenderBuffers, const FDynamicMesh3* Mesh, int32 NumTriangles, TriangleEnumerable Enumerable, const TArray<const FDynamicMeshUVOverlay*, UVOverlayListAllocator>& UVOverlays)"
  },
  {
    "label": "UpdateVertexUVBufferFromOverlays()",
    "kind": "Method",
    "detail": "Function (MeshRenderBufferSetConverter .)",
    "insertText": "UpdateVertexUVBufferFromOverlays(RenderBuffers, Mesh, NumTriangles, Enumerable, UVOverlays)"
  },
  {
    "label": "GetNumMaterials()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumMaterials()"
  },
  {
    "label": "GetMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetMaterial(int32 k)"
  },
  {
    "label": "SetVerifyUsedMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVerifyUsedMaterials(const bool bState)"
  },
  {
    "label": "UpdatedReferencedMaterials()",
    "kind": "Method",
    "detail": "Function (bVerifyUsedMaterials = bState ; } void)",
    "insertText": "UpdatedReferencedMaterials()"
  },
  {
    "label": "GetEngineVertexColorMaterialProxy()",
    "kind": "Method",
    "detail": "Function (FMaterialRenderProxy*)",
    "insertText": "GetEngineVertexColorMaterialProxy(FMeshElementCollector& Collector, const FEngineShowFlags& EngineShowFlags, bool bProxyIsSelected, bool bIsHovered)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetCollisionDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GetCollisionDynamicMeshElements(TArray<FMeshRenderBufferSet*>& Buffers, const FEngineShowFlags& EngineShowFlags, bool bDrawCollisionView, bool bDrawSimpleCollision, bool bDrawComplexCollision, bool bProxyIsSelected, const TArray<const FSceneView*>& Views, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "DrawStaticElements()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DrawStaticElements(FStaticPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "AllowStaticDrawPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowStaticDrawPath(const FSceneView* View)"
  },
  {
    "label": "DrawBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBatch(FMeshElementCollector& Collector, const FMeshRenderBufferSet& RenderBuffers, const FDynamicMeshIndexBuffer32& IndexBuffer, FMaterialRenderProxy* UseMaterial, bool bWireframe, ESceneDepthPriorityGroup DepthPriority, int ViewIndex, FDynamicPrimitiveUniformBuffer& DynamicPrimitiveUniformBuffer)"
  },
  {
    "label": "IsRayTracingRelevant()",
    "kind": "Method",
    "detail": "Function (# if RHI_RAYTRACING bool)",
    "insertText": "IsRayTracingRelevant()"
  },
  {
    "label": "HasRayTracingRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRayTracingRepresentation()"
  },
  {
    "label": "GetDynamicRayTracingInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicRayTracingInstances(FRayTracingInstanceCollector& Collector)"
  },
  {
    "label": "DrawRayTracingBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawRayTracingBatch(FRayTracingInstanceCollector& Collector, const FMeshRenderBufferSet& RenderBuffers, const FDynamicMeshIndexBuffer32& IndexBuffer, FRayTracingGeometry& RayTracingGeometry, FMaterialRenderProxy* UseMaterialProxy, ESceneDepthPriorityGroup DepthPriority, FDynamicPrimitiveUniformBuffer& DynamicPrimitiveUniformBuffer)"
  },
  {
    "label": "GetMeshCardRepresentation()",
    "kind": "Method",
    "detail": "Function (# endif public : const FCardRepresentationData*)",
    "insertText": "GetMeshCardRepresentation()"
  },
  {
    "label": "UpdateLumenCardsFromBounds()",
    "kind": "Method",
    "detail": "Function (protected : TPimplPtr<FCardRepresentationData> MeshCards ; bool bMeshCardsValid = false ; void)",
    "insertText": "UpdateLumenCardsFromBounds()"
  },
  {
    "label": "GetDistanceFieldAtlasData()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GetDistanceFieldAtlasData(const class FDistanceFieldVolumeData*& OutDistanceFieldData, float& SelfShadowBias)"
  },
  {
    "label": "GetDistanceFieldInstanceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDistanceFieldInstanceData(TArray<FRenderTransform>& InstanceLocalToPrimitiveTransforms)"
  },
  {
    "label": "HasDistanceFieldRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDistanceFieldRepresentation()"
  },
  {
    "label": "HasDynamicIndirectShadowCasterRepresentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDynamicIndirectShadowCasterRepresentation()"
  },
  {
    "label": "ComputeDistanceFieldForMesh()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<FDistanceFieldVolumeData> DistanceField ; bool bDistanceFieldValid = false ; public : TUniquePtr<FDistanceFieldVolumeData>)",
    "insertText": "ComputeDistanceFieldForMesh(const FDynamicMesh3& Mesh, FProgressCancel& Progress, float DistanceFieldResolutionScale = 1.0, bool bGenerateAsIfTwoSided = false)"
  },
  {
    "label": "SetNewDistanceField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNewDistanceField(TSharedPtr<FDistanceFieldVolumeData> NewDistanceField, bool bInInitialize)"
  },
  {
    "label": "SetCollisionData()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetCollisionData()"
  },
  {
    "label": "IsCollisionView()",
    "kind": "Method",
    "detail": "Function (# if UE_ENABLE_DEBUG_DRAWING private : bool bOwnerIsNull = true ; bool bHasCollisionData = false ; bool bHasComplexMeshData = false ; ECollisionTraceFlag CollisionTraceFlag ; FCollisionResponseContainer CollisionResponse ; FKAggregateGeom CachedAggGeom ; FCriticalSection CachedCollisionLock ; # endif bool)",
    "insertText": "IsCollisionView(const FEngineShowFlags& EngineShowFlags, bool& bDrawSimpleCollision, bool& bDrawComplexCollision)"
  }
]