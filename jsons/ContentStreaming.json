[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FSoundSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundSource"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FSoundWaveData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveData"
  },
  {
    "label": "FSoundWaveProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundWaveProxy"
  },
  {
    "label": "ICompressedAudioInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICompressedAudioInfo"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FRenderAssetStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderAssetStreamingManager"
  },
  {
    "label": "FWaveInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWaveInstance"
  },
  {
    "label": "UAnimStreamable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimStreamable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCompressedAnimSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedAnimSequence"
  },
  {
    "label": "UStreamableSparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableSparseVolumeTexture"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UStreamableRenderAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableRenderAsset"
  },
  {
    "label": "FAudioStreamCacheMemoryHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioStreamCacheMemoryHandle"
  },
  {
    "label": "FCoarseMeshStreamingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCoarseMeshStreamingManager"
  },
  {
    "label": "ERemoveStreamingViews",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERemoveStreamingViews"
  },
  {
    "label": "FStreamingViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingViewInfo"
  },
  {
    "label": "FAudioChunkHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioChunkHandle"
  },
  {
    "label": "IAudioStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IAudioStreamingManager"
  },
  {
    "label": "FCachedAudioStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedAudioStreamingManager"
  },
  {
    "label": "IStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IStreamingManager"
  },
  {
    "label": "FStreamingManagerCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingManagerCollection"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FSecondaryLocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSecondaryLocation"
  },
  {
    "label": "IRenderAssetStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IRenderAssetStreamingManager"
  },
  {
    "label": "FDummyAudioStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDummyAudioStreamingManager"
  },
  {
    "label": "IAnimationStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IAnimationStreamingManager"
  },
  {
    "label": "FVirtualTextureChunkStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualTextureChunkStreamingManager"
  },
  {
    "label": "FlushResourceStreaming()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" CoreMinimal . h \" # include \" RenderedTextureStats . h \" # include \" Serialization / BulkData . h \" # include \" UObject / ObjectKey . h \" # include \" UObject / WeakObjectPtr . h \" class AActor ; class FSoundSource ; class UPrimitiveComponent ; class FCanvas ; class FViewport ; class FSoundWaveData ; class FSoundWaveProxy ; class ICompressedAudioInfo ; class UTexture2D ; struct FRenderAssetStreamingManager ; struct FWaveInstance ; class UAnimStreamable ; enum class EStreamableRenderAssetType : uint8 ; struct FCompressedAnimSequence ; class UStreamableSparseVolumeTexture ; using FSoundWaveProxyPtr = TSharedPtr<FSoundWaveProxy,ESPMode::ThreadSafe> ; class UPrimitiveComponent ; class AActor ; class UTexture2D ; class UStaticMesh ; class USkeletalMesh ; class UStreamableRenderAsset ; class FSoundSource ; class FAudioStreamCacheMemoryHandle ; struct FWaveInstance ; struct FRenderAssetStreamingManager ; namespace Nanite { class FCoarseMeshStreamingManager ; } void)",
    "insertText": "FlushResourceStreaming()"
  },
  {
    "label": "FStreamingViewInfo()",
    "kind": "Method",
    "detail": "Function (enum ERemoveStreamingViews { RemoveStreamingViews_Normal,RemoveStreamingViews_All } ; struct FStreamingViewInfo {)",
    "insertText": "FStreamingViewInfo(const FVector& InViewOrigin, float InScreenSize, float InFOVScreenSize, float InBoostFactor, bool bInOverrideLocation, float InDuration, TWeakObjectPtr<AActor> InActorToBoost ) : ViewOrigin( InViewOrigin ) , ScreenSize( InScreenSize ) , FOVScreenSize( InFOVScreenSize ) , BoostFactor( InBoostFactor ) , Duration( InDuration ) , bOverrideLocation( bInOverrideLocation ) , ActorToBoost( InActorToBoost)"
  },
  {
    "label": "FAudioChunkHandle()",
    "kind": "Method",
    "detail": "Function (} FVector ViewOrigin ; float ScreenSize ; float FOVScreenSize ; float BoostFactor ; float Duration ; bool bOverrideLocation ; TWeakObjectPtr<AActor> ActorToBoost ; } ; class FAudioChunkHandle { public :)",
    "insertText": "FAudioChunkHandle()"
  },
  {
    "label": "FAudioChunkHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioChunkHandle(const FAudioChunkHandle& Other)"
  },
  {
    "label": "FAudioChunkHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAudioChunkHandle(FAudioChunkHandle&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAudioChunkHandle&)",
    "insertText": "operator(const FAudioChunkHandle& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAudioChunkHandle&)",
    "insertText": "operator(FAudioChunkHandle&& Other)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const uint8*)",
    "insertText": "GetData()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Num()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsStale()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "IsStale()"
  },
  {
    "label": "FAudioChunkHandle()",
    "kind": "Method",
    "detail": "Function (# endif private :)",
    "insertText": "FAudioChunkHandle(const uint8* InData, uint32 NumBytes, const FSoundWaveProxyPtr& InSoundWave, const FName& SoundWaveName, uint32 InChunkIndex, uint64 InCacheLookupID)"
  },
  {
    "label": "IStreamingManager()",
    "kind": "Method",
    "detail": "Function (const uint8* CachedData ; int32 CachedDataNumBytes ; FName CorrespondingWaveName ; FGuid CorrespondingWaveGuid ; int32 ChunkIndex ; # if WITH_EDITOR TWeakPtr<FSoundWaveData,ESPMode::ThreadSafe> CorrespondingWave ; uint32 ChunkRevision ; # endif struct IAudioStreamingManager ; struct FCachedAudioStreamingManager ; } ; struct IStreamingManager {)",
    "insertText": "IStreamingManager() : NumWantingResources(0) , NumWantingResourcesCounter(0)"
  },
  {
    "label": "IStreamingManager()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IStreamingManager()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} struct FStreamingManagerCollection&)",
    "insertText": "Get()"
  },
  {
    "label": "Get_Concurrent()",
    "kind": "Method",
    "detail": "Function (struct FStreamingManagerCollection*)",
    "insertText": "Get_Concurrent()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "HasShutdown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasShutdown()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime, bool bProcessEverything = false)"
  },
  {
    "label": "UpdateResourceStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceStreaming(float DeltaTime, bool bProcessEverything = false)"
  },
  {
    "label": "StreamAllResources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StreamAllResources(float TimeLimit = 0.0f)"
  },
  {
    "label": "BlockTillAllRequestsFinished()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BlockTillAllRequestsFinished(float TimeLimit = 0.0f, bool bLogResults = false)"
  },
  {
    "label": "CancelForcedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelForcedResources()"
  },
  {
    "label": "NotifyLevelChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelChange()"
  },
  {
    "label": "RemoveStreamingViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStreamingViews(ERemoveStreamingViews RemovalType)"
  },
  {
    "label": "AddViewInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewInformation(const FVector& ViewOrigin, float ScreenSize, float FOVScreenSize, float BoostFactor = 1.0f, bool bOverrideLocation = false, float Duration = 0.0f, TWeakObjectPtr<AActor> InActorToBoost = NULL)"
  },
  {
    "label": "AddViewLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewLocation(const FVector& Location, float BoostFactor = 1.0f, bool bOverrideLocation = false, float Duration = 0.0f)"
  },
  {
    "label": "AddViewLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewLocation(Location, BoostFactor, bOverrideLocation, Duration)"
  },
  {
    "label": "SetDisregardWorldResourcesForFrames()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisregardWorldResourcesForFrames(int32 NumFrames)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "RemoveLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevel(class ULevel* Level)"
  },
  {
    "label": "NotifyLevelOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyLevelOffset(class ULevel* Level, const FVector& Offset)"
  },
  {
    "label": "NotifyActorDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyActorDestroyed(AActor* Actor)"
  },
  {
    "label": "NotifyPrimitiveDetached()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPrimitiveDetached(const UPrimitiveComponent* Primitive)"
  },
  {
    "label": "NotifyPrimitiveUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPrimitiveUpdated(const UPrimitiveComponent* Primitive)"
  },
  {
    "label": "NotifyPrimitiveUpdated_Concurrent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyPrimitiveUpdated_Concurrent(const UPrimitiveComponent* Primitive)"
  },
  {
    "label": "GetNumViews()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumViews()"
  },
  {
    "label": "GetViewInformation()",
    "kind": "Method",
    "detail": "Function (} const FStreamingViewInfo&)",
    "insertText": "GetViewInformation(int32 ViewIndex)"
  },
  {
    "label": "OnAudioStreamingParamsChanged()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR void)",
    "insertText": "OnAudioStreamingParamsChanged()"
  },
  {
    "label": "SetupViewInfos()",
    "kind": "Method",
    "detail": "Function (} ; # endif protected : void)",
    "insertText": "SetupViewInfos(float DeltaTime)"
  },
  {
    "label": "AddViewInfoToArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewInfoToArray(TArray<FStreamingViewInfo> &ViewInfos, const FVector& ViewOrigin, float ScreenSize, float FOVScreenSize, float BoostFactor, bool bOverrideLocation, float Duration, TWeakObjectPtr<AActor> InActorToBoost)"
  },
  {
    "label": "RemoveViewInfoFromArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewInfoFromArray(TArray<FStreamingViewInfo> &ViewInfos, const FVector& ViewOrigin)"
  },
  {
    "label": "FSecondaryLocation()",
    "kind": "Method",
    "detail": "Function (struct FSecondaryLocation {)",
    "insertText": "FSecondaryLocation(const FVector& InLocation, float InBoostFactor, bool bInOverrideLocation, float InDuration ) : Location( InLocation ) , BoostFactor( InBoostFactor ) , Duration( InDuration ) , bOverrideLocation( bInOverrideLocation)"
  },
  {
    "label": "UpdateIndividualRenderAsset()",
    "kind": "Method",
    "detail": "Function (} FVector Location ; float BoostFactor ; float Duration ; bool bOverrideLocation ; } ; TArray<FStreamingViewInfo> CurrentViewInfos ; TArray<FStreamingViewInfo> PendingViewInfos ; TArray<FStreamingViewInfo> LastingViewInfos ; TArray<FSecondaryLocation> SecondaryLocations ; bool bPendingRemoveViews ; int32 NumWantingResources ; int32 NumWantingResourcesCounter ; } ; struct IRenderAssetStreamingManager : public IStreamingManager { void)",
    "insertText": "UpdateIndividualRenderAsset(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "FastForceFullyResident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FastForceFullyResident(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "BoostTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoostTextures(AActor* Actor, float BoostFactor)"
  },
  {
    "label": "StreamOutRenderAssetData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamOutRenderAssetData(int64 RequiredMemorySize)"
  },
  {
    "label": "AddStreamingRenderAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStreamingRenderAsset(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "RemoveStreamingRenderAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStreamingRenderAsset(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "IsFullyStreamedIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullyStreamedIn(UStreamableRenderAsset* RenderAsset)"
  },
  {
    "label": "GetMemoryOverBudget()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMemoryOverBudget()"
  },
  {
    "label": "GetPoolSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetPoolSize()"
  },
  {
    "label": "GetRequiredPoolSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetRequiredPoolSize()"
  },
  {
    "label": "GetMaxEverRequired()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMaxEverRequired()"
  },
  {
    "label": "GetCachedMips()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCachedMips()"
  },
  {
    "label": "ResetMaxEverRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMaxEverRequired()"
  },
  {
    "label": "PauseRenderAssetStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseRenderAssetStreaming(bool bInShouldPause)"
  },
  {
    "label": "GetObjectReferenceBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetObjectReferenceBounds(const UObject* RefObject, TArray<FBox>& AssetBoxes)"
  },
  {
    "label": "GetAssetComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetComponents(const UStreamableRenderAsset* RenderAsset, TArray<const UPrimitiveComponent*>& OutComps, TFunction<bool(const UPrimitiveComponent*)> ShouldChoose = [](const UPrimitiveComponent*) { return true; })"
  },
  {
    "label": "UpdateIndividualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateIndividualTexture(UTexture2D* Texture)"
  },
  {
    "label": "StreamOutTextureData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StreamOutTextureData(int64 RequiredMemorySize)"
  },
  {
    "label": "AddStreamingTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStreamingTexture(UTexture2D* Texture)"
  },
  {
    "label": "RemoveStreamingTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStreamingTexture(UTexture2D* Texture)"
  },
  {
    "label": "PauseTextureStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseTextureStreaming(bool bInShouldPause)"
  },
  {
    "label": "MarkMountedStateDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkMountedStateDirty(FIoFilenameHash FilenameHash)"
  },
  {
    "label": "AddRenderedTextureStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRenderedTextureStats(TMap<FString, FRenderedTextureStats>& InOutRenderedTextureAssets)"
  },
  {
    "label": "AddForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (} ; enum class EAudioChunkLoadResult : uint8 { Completed,AlreadyLoaded,Interrupted,ChunkOutOfBounds,CacheBlown } ; struct IAudioStreamingManager : public IStreamingManager { void)",
    "insertText": "AddForceInlineSoundWave(const FSoundWaveProxyPtr& SoundWave)"
  },
  {
    "label": "RemoveForceInlineSoundWave()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RemoveForceInlineSoundWave(const FSoundWaveProxyPtr& SoundWave)"
  },
  {
    "label": "RequestChunk()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "RequestChunk(const FSoundWaveProxyPtr& SoundWave, uint32 ChunkIndex, TFunction<void(EAudioChunkLoadResult)> OnLoadCompleted = [](EAudioChunkLoadResult) {}, ENamedThreads::Type ThreadToCallOnLoadCompletedOn = ENamedThreads::AnyThread, bool bForImmediatePlayback = false)"
  },
  {
    "label": "GetLoadedChunk()",
    "kind": "Method",
    "detail": "Function (FAudioChunkHandle)",
    "insertText": "GetLoadedChunk(const FSoundWaveProxyPtr& SoundWave, uint32 ChunkIndex, bool bBlockForLoad = false, bool bForImmediatePlayback = false)"
  },
  {
    "label": "TrimMemory()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "TrimMemory(uint64 NumBytesToFree)"
  },
  {
    "label": "RenderStatAudioStreaming()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStatAudioStreaming(UWorld* World, FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "GenerateMemoryReport()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateMemoryReport()"
  },
  {
    "label": "SetProfilingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProfilingMode(bool bEnabled)"
  },
  {
    "label": "BuildChunkHandle()",
    "kind": "Method",
    "detail": "Function (protected : FAudioChunkHandle ; FAudioStreamCacheMemoryHandle ; FAudioChunkHandle)",
    "insertText": "BuildChunkHandle(const uint8* InData, uint32 NumBytes, const FSoundWaveProxyPtr& InSoundWave, const FName& SoundWaveName, uint32 InChunkIndex, uint64 CacheLookupID)"
  },
  {
    "label": "AddReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferenceToChunk(const FAudioChunkHandle& InHandle)"
  },
  {
    "label": "RemoveReferenceToChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReferenceToChunk(const FAudioChunkHandle& InHandle)"
  },
  {
    "label": "AddMemoryCountedFeature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMemoryCountedFeature(const FAudioStreamCacheMemoryHandle& Feature)"
  },
  {
    "label": "RemoveMemoryCountedFeature()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RemoveMemoryCountedFeature(const FAudioStreamCacheMemoryHandle& Feature)"
  },
  {
    "label": "LogWarning()",
    "kind": "Method",
    "detail": "Function (} ; private : void)",
    "insertText": "LogWarning()"
  },
  {
    "label": "AddLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddLevel(class ULevel* Level)"
  },
  {
    "label": "AddStreamingAnim()",
    "kind": "Method",
    "detail": "Function (} } ; struct IAnimationStreamingManager : public IStreamingManager { void)",
    "insertText": "AddStreamingAnim(UAnimStreamable* Anim)"
  },
  {
    "label": "RemoveStreamingAnim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveStreamingAnim(UAnimStreamable* Anim)"
  },
  {
    "label": "GetMemorySizeForAnim()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetMemorySizeForAnim(const UAnimStreamable* Anim)"
  },
  {
    "label": "GetLoadedChunk()",
    "kind": "Method",
    "detail": "Function (const FCompressedAnimSequence*)",
    "insertText": "GetLoadedChunk(const UAnimStreamable* Anim, uint32 ChunkIndex, bool bRequestNextChunk)"
  },
  {
    "label": "FStreamingManagerCollection()",
    "kind": "Method",
    "detail": "Function (} ; struct FStreamingManagerCollection : public IStreamingManager {)",
    "insertText": "FStreamingManagerCollection()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime, bool bProcessEverything=false)"
  },
  {
    "label": "UpdateResourceStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateResourceStreaming(float DeltaTime, bool bProcessEverything=false)"
  },
  {
    "label": "StreamAllResources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "StreamAllResources(float TimeLimit=0.0f)"
  },
  {
    "label": "GetNumWantingResources()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumWantingResources()"
  },
  {
    "label": "GetNumWantingResourcesID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumWantingResourcesID()"
  },
  {
    "label": "IsStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamingEnabled()"
  },
  {
    "label": "IsTextureStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextureStreamingEnabled()"
  },
  {
    "label": "IsRenderAssetStreamingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRenderAssetStreamingEnabled(EStreamableRenderAssetType FilteredAssetType)"
  },
  {
    "label": "GetTextureStreamingManager()",
    "kind": "Method",
    "detail": "Function (IRenderAssetStreamingManager&)",
    "insertText": "GetTextureStreamingManager()"
  },
  {
    "label": "GetRenderAssetStreamingManager()",
    "kind": "Method",
    "detail": "Function (IRenderAssetStreamingManager&)",
    "insertText": "GetRenderAssetStreamingManager()"
  },
  {
    "label": "GetAudioStreamingManager()",
    "kind": "Method",
    "detail": "Function (IAudioStreamingManager&)",
    "insertText": "GetAudioStreamingManager()"
  },
  {
    "label": "GetAnimationStreamingManager()",
    "kind": "Method",
    "detail": "Function (IAnimationStreamingManager&)",
    "insertText": "GetAnimationStreamingManager()"
  },
  {
    "label": "GetVirtualTextureStreamingManager()",
    "kind": "Method",
    "detail": "Function (struct FVirtualTextureChunkStreamingManager&)",
    "insertText": "GetVirtualTextureStreamingManager()"
  },
  {
    "label": "GetNaniteCoarseMeshStreamingManager()",
    "kind": "Method",
    "detail": "Function (Nanite::FCoarseMeshStreamingManager*)",
    "insertText": "GetNaniteCoarseMeshStreamingManager()"
  },
  {
    "label": "AddStreamingManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStreamingManager(IStreamingManager* StreamingManager)"
  },
  {
    "label": "RemoveStreamingManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveStreamingManager(IStreamingManager* StreamingManager)"
  },
  {
    "label": "SetNumIterationsForNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumIterationsForNextFrame(int32 NumIterations)"
  },
  {
    "label": "DisableResourceStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableResourceStreaming()"
  },
  {
    "label": "EnableResourceStreaming()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableResourceStreaming()"
  },
  {
    "label": "PropagateLightingScenarioChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateLightingScenarioChange()"
  },
  {
    "label": "AddOrRemoveTextureStreamingManagerIfNeeded()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "AddOrRemoveTextureStreamingManagerIfNeeded(bool bIsInit=false)"
  }
]