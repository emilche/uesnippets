[
  {
    "label": "RtpHeaderParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpHeaderParser"
  },
  {
    "label": "Packet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Packet"
  },
  {
    "label": "RtcEventLogSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogSource"
  },
  {
    "label": "CreateFromFile()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TOOLS_RTC_EVENT_LOG_SOURCE_H_ # define MODULES_AUDIO_CODING_NETEQ_TOOLS_RTC_EVENT_LOG_SOURCE_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" logging / rtc_event_log / rtc_event_log_parser . h \" # include \" modules / audio_coding / neteq / tools / packet_source . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" namespace webrtc { class RtpHeaderParser ; namespace test { class Packet ; class RtcEventLogSource : public PacketSource { public : std::unique_ptr<RtcEventLogSource>)",
    "insertText": "CreateFromFile(absl::string_view file_name, absl::optional<uint32_t> ssrc_filter)"
  },
  {
    "label": "CreateFromString()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<RtcEventLogSource>)",
    "insertText": "CreateFromString(absl::string_view file_contents, absl::optional<uint32_t> ssrc_filter)"
  },
  {
    "label": "RtcEventLogSource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RtcEventLogSource()"
  },
  {
    "label": "RtcEventLogSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcEventLogSource(const RtcEventLogSource&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtcEventLogSource&)",
    "insertText": "operator(const RtcEventLogSource&)"
  },
  {
    "label": "NextPacket()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<Packet>)",
    "insertText": "NextPacket()"
  },
  {
    "label": "NextAudioOutputEventMs()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "NextAudioOutputEventMs()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const ParsedRtcEventLog& parsed_log, absl::optional<uint32_t> ssrc_filter)"
  }
]