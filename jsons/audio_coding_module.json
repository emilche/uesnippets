[
  {
    "label": "AudioDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioDecoder"
  },
  {
    "label": "AudioEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoder"
  },
  {
    "label": "AudioFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioFrame"
  },
  {
    "label": "RTPHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTPHeader"
  },
  {
    "label": "AudioPacketizationCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioPacketizationCallback"
  },
  {
    "label": "AudioCodingModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioCodingModule"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "AudioPacketizationCallback()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_INCLUDE_AUDIO_CODING_MODULE_H_ # define MODULES_AUDIO_CODING_INCLUDE_AUDIO_CODING_MODULE_H_ # include<memory> # include<string> # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_decoder_factory . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / function_view . h \" # include \" api / neteq / neteq . h \" # include \" api / neteq / neteq_factory . h \" # include \" modules / audio_coding / include / audio_coding_module_typedefs . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class AudioDecoder ; class AudioEncoder ; class AudioFrame ; struct RTPHeader ; class AudioPacketizationCallback { public : ~)",
    "insertText": "AudioPacketizationCallback()"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "SendData(AudioFrameType frame_type, uint8_t payload_type, uint32_t timestamp, const uint8_t* payload_data, size_t payload_len_bytes, int64_t absolute_capture_timestamp_ms)"
  },
  {
    "label": "SendData()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "SendData(AudioFrameType frame_type, uint8_t payload_type, uint32_t timestamp, const uint8_t* payload_data, size_t payload_len_bytes)"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} public : struct Config {)",
    "insertText": "Config(rtc::scoped_refptr<AudioDecoderFactory> decoder_factory = nullptr)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Config(const Config&)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Config()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (NetEq::Config neteq_config ; Clock* clock ; rtc::scoped_refptr<AudioDecoderFactory> decoder_factory ; NetEqFactory* neteq_factory = nullptr ; } ; AudioCodingModule*)",
    "insertText": "Create(const Config& config)"
  },
  {
    "label": "AudioCodingModule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioCodingModule()"
  },
  {
    "label": "ModifyEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyEncoder(rtc::FunctionView<void(std::unique_ptr<AudioEncoder>*)> modifier)"
  },
  {
    "label": "SetEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEncoder(std::unique_ptr<AudioEncoder> new_encoder)"
  },
  {
    "label": "ModifyEncoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyEncoder([&](std::unique_ptr<AudioEncoder>* encoder) { *encoder = std::move(new_encoder); })"
  },
  {
    "label": "RegisterTransportCallback()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "RegisterTransportCallback(AudioPacketizationCallback* transport)"
  },
  {
    "label": "Add10MsData()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Add10MsData(const AudioFrame& audio_frame)"
  },
  {
    "label": "SetPacketLossRate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetPacketLossRate(int packet_loss_rate)"
  },
  {
    "label": "InitializeReceiver()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "InitializeReceiver()"
  },
  {
    "label": "SetReceiveCodecs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiveCodecs(const std::map<int, SdpAudioFormat>& codecs)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "IncomingPacket(const uint8_t* incoming_payload, size_t payload_len_bytes, const RTPHeader& rtp_header)"
  },
  {
    "label": "PlayoutData10Ms()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PlayoutData10Ms(int32_t desired_freq_hz, AudioFrame* audio_frame, bool* muted)"
  },
  {
    "label": "GetNetworkStatistics()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "GetNetworkStatistics(NetworkStatistics* network_statistics)"
  },
  {
    "label": "GetANAStats()",
    "kind": "Method",
    "detail": "Function (ANAStats)",
    "insertText": "GetANAStats()"
  },
  {
    "label": "GetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetBitrate()"
  }
]