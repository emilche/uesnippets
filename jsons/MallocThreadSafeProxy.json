[
  {
    "label": "FMallocThreadSafeProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMallocThreadSafeProxy"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FMallocThreadSafeProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / MemoryBase . h \" # include \" Misc / ScopeLock . h \" class FMallocThreadSafeProxy : public FMalloc { private : FMalloc* UsedMalloc ; FCriticalSection SynchronizationObject ; public :)",
    "insertText": "FMallocThreadSafeProxy(FMalloc* InMalloc) : UsedMalloc( InMalloc)"
  },
  {
    "label": "InitializeStatsMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeStatsMetadata()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Malloc(SIZE_T Size, uint32 Alignment)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ScopeLock(&SynchronizationObject)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Realloc(void* Ptr, SIZE_T NewSize, uint32 Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(void* Ptr)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "Free(Ptr)"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetAllocatorStats(FGenericMemoryStats& out_Stats)"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "GetAllocatorStats(out_Stats)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "DumpAllocatorStats(Ar)"
  },
  {
    "label": "ValidateHeap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ValidateHeap()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&SynchronizationObject)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (} # if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetAllocationSize()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "GetAllocationSize(void *Original, SIZE_T &SizeOut)"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Trim(bool bTrimThreadCaches)"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "Trim(bTrimThreadCaches)"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "OnMallocInitialized()",
    "kind": "Method",
    "detail": "Function (UsedMalloc ->)",
    "insertText": "OnMallocInitialized()"
  },
  {
    "label": "OnPreFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreFork()"
  },
  {
    "label": "OnPostFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostFork()"
  }
]