[
  {
    "label": "BuildFieldSamplePoints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Field / FieldSystem . h \" # include \" Chaos / Array . h \" # include \" Chaos / ConstraintHandle . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / Defines . h \" # include \" Chaos / PBDRigidClusteringAlgo . h \" # include \" Chaos / Particles . h \" # include<limits> # include \" GeometryCollectionPhysicsProxy . h \" namespace Chaos { template<PhysicsProxy> bool)",
    "insertText": "BuildFieldSamplePoints(PhysicsProxy* LocalProxy, Chaos::FPBDRigidsSolver* RigidSolver, const FFieldSystemCommand& FieldCommand, FFieldExecutionDatas& ExecutionDatas, EFieldResolutionType& PrevResolutionType, EFieldFilterType& PrevFilterType, EFieldObjectType& PrevObjectType, EFieldPositionType& PrevPositionType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EFieldFilterType FilterType = EFieldFilterType::Field_Filter_Max ; EFieldObjectType ObjectType = EFieldObjectType::Field_Object_Max ; EFieldPositionType PositionType = EFieldPositionType::Field_Position_Max ;)",
    "insertText": "if(FieldCommand.HasMetaData(FFieldSystemMetaData::EMetaType::ECommandData_Filter))"
  },
  {
    "label": "FFieldSystemMetaDataFilter()",
    "kind": "Method",
    "detail": "Function (const FFieldSystemMetaDataFilter* MetaDataFilter = FieldCommand . GetMetaDataAs<)",
    "insertText": "FFieldSystemMetaDataFilter(FFieldSystemMetaData::EMetaType::ECommandData_Filter)"
  },
  {
    "label": "ParticleHandles()",
    "kind": "Method",
    "detail": "Function (FilterType = MetaDataFilter -> FilterType ; ObjectType = MetaDataFilter -> ObjectType ; PositionType = MetaDataFilter -> PositionType ; } TArray<Chaos::FGeometryParticleHandle*>& FilteredHandles = ExecutionDatas .)",
    "insertText": "ParticleHandles(uint8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "if(FilterType != EFieldFilterType::Field_Filter_Max)"
  },
  {
    "label": "GetFilteredParticleHandles()",
    "kind": "Method",
    "detail": "Function (LocalProxy ->)",
    "insertText": "GetFilteredParticleHandles(FilteredHandles, RigidSolver, FilterType, ObjectType)"
  },
  {
    "label": "GetRelevantParticleHandles()",
    "kind": "Method",
    "detail": "Function (} else { LocalProxy ->)",
    "insertText": "GetRelevantParticleHandles(FilteredHandles, RigidSolver, ResolutionType)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} PrevResolutionType = ResolutionType ; PrevFilterType = FilterType ; PrevObjectType = ObjectType ; PrevPositionType = PositionType ; ExecutionDatas . SamplePositions .)",
    "insertText": "SetNum(FilteredHandles.Num(), EAllowShrinking::No)"
  },
  {
    "label": "InsideHandles()",
    "kind": "Method",
    "detail": "Function (auto FillExecutionDatas = [& ExecutionDatas,& FieldCommand,&)",
    "insertText": "InsideHandles(FVec3 SamplePosition, Chaos::FGeometryParticleHandle* ParticleHandle, int32& HandleIndex)"
  },
  {
    "label": "ParentWorldTM()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3)",
    "insertText": "ParentWorldTM(ParentHandle->GetP(), ParentHandle->GetQ())"
  },
  {
    "label": "ChildToParent()",
    "kind": "Method",
    "detail": "Function (const FRigidTransform3 ChildFrame = ClusterHandle ->)",
    "insertText": "ChildToParent()"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (SamplePosition = ChildFrame .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(FieldCommand.BoundingBox.IsInside(SamplePosition))"
  },
  {
    "label": "FFieldContextIndex()",
    "kind": "Method",
    "detail": "Function (ExecutionDatas . SamplePositions [ HandleIndex ] = SamplePosition ; ExecutionDatas . SampleIndices [ HandleIndex ] =)",
    "insertText": "FFieldContextIndex(HandleIndex, HandleIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InsideHandles [ HandleIndex ] = ParticleHandle ; + + HandleIndex ; } } ; int32 HandleIndex = 0 ;)",
    "insertText": "if(PositionType == EFieldPositionType::Field_Position_CenterOfMass)"
  },
  {
    "label": "GetCoMWorldPosition()",
    "kind": "Method",
    "detail": "Function (const FVec3 SamplePosition =)",
    "insertText": "GetCoMWorldPosition(RigidHandle)"
  },
  {
    "label": "FillExecutionDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillExecutionDatas(SamplePosition, RigidHandle, HandleIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(int32 Idx = 0; Idx < FilteredHandles.Num(); ++Idx)"
  },
  {
    "label": "GetX()",
    "kind": "Method",
    "detail": "Function (const FVec3& SamplePosition = FilteredHandle ->)",
    "insertText": "GetX()"
  },
  {
    "label": "FillExecutionDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillExecutionDatas(SamplePosition, FilteredHandle, HandleIndex)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} } } ExecutionDatas . SamplePositions .)",
    "insertText": "SetNum(HandleIndex, EAllowShrinking::No)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} return InsideHandles .)",
    "insertText": "Num()"
  },
  {
    "label": "InitDynamicStateResults()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitDynamicStateResults(const TArray<Chaos::FGeometryParticleHandle*>& ParticleHandles, FFieldContext& FieldContext, TArray<int32>& LocalResults)"
  },
  {
    "label": "InitState()",
    "kind": "Method",
    "detail": "Function (const Chaos::EObjectStateType)",
    "insertText": "InitState(ParticleHandles[Index.Sample]->ObjectState() != Chaos::EObjectStateType::Uninitialized) ? ParticleHandles[Index.Sample]->ObjectState()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (LocalResults [ Index . Result ] = static_cast<)",
    "insertText": "int32(InitState)"
  },
  {
    "label": "InitActivateDisabledResults()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitActivateDisabledResults(const TArray<Chaos::FGeometryParticleHandle*>& ParticleHandles, FFieldContext& FieldContext, TArray<int32>& LocalResults)"
  },
  {
    "label": "CastToRigidParticle()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidParticleHandle* RigidHandle = ParticleHandles [ Index . Sample ] ->)",
    "insertText": "CastToRigidParticle()"
  },
  {
    "label": "Disabled()",
    "kind": "Method",
    "detail": "Function (LocalResults [ Index . Result ] = RigidHandle ->)",
    "insertText": "Disabled()"
  },
  {
    "label": "SetParticleDynamicState()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetParticleDynamicState(Chaos::FPBDRigidsSolver* RigidSolver, const Chaos::EObjectStateType FieldState, Chaos::FPBDRigidParticleHandle* RigidHandle)"
  },
  {
    "label": "bIsGC()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bIsGC(RigidHandle->GetParticleType() == Chaos::EParticleType::GeometryCollection) || (RigidHandle->GetParticleType() == Chaos::EParticleType::Clustered && !RigidHandle->CastToClustered()->InternalCluster())"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (RigidSolver ->)",
    "insertText": "GetEvolution()->SetParticleObjectState(RigidHandle, FieldState)"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (} else { RigidHandle ->)",
    "insertText": "SetObjectStateLowLevel(FieldState)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (RigidSolver ->)",
    "insertText": "GetEvolution()->GetIslandManager().AddParticle(RigidHandle)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (RigidSolver ->)",
    "insertText": "GetEvolution()->GetParticles().EnableParticle(RigidHandle)"
  },
  {
    "label": "ReportDynamicStateResult()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "ReportDynamicStateResult(Chaos::FPBDRigidsSolver* RigidSolver, const Chaos::EObjectStateType FieldState, Chaos::FPBDRigidParticleHandle* RigidHandle, const bool HasInitialLinearVelocity, const Chaos::FVec3& InitialLinearVelocity, const bool HasInitialAngularVelocity, const Chaos::FVec3& InitialAngularVelocity)"
  },
  {
    "label": "ObjectState()",
    "kind": "Method",
    "detail": "Function (const Chaos::EObjectStateType HandleState = RigidHandle ->)",
    "insertText": "ObjectState()"
  },
  {
    "label": "bHasStateChanged()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "bHasStateChanged((FieldState != Chaos::EObjectStateType::Dynamic) || (FieldState == Chaos::EObjectStateType::Dynamic && RigidHandle->M() > FLT_EPSILON)) && (HandleState != FieldState)"
  },
  {
    "label": "SetParticleDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleDynamicState(RigidSolver, FieldState, RigidHandle)"
  },
  {
    "label": "SetVf()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetVf(Chaos::FVec3f(0))"
  },
  {
    "label": "SetWf()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetWf(Chaos::FVec3f(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FieldState == Chaos::EObjectStateType::Dynamic)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetV(InitialLinearVelocity)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(HasInitialAngularVelocity)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetW(InitialAngularVelocity)"
  },
  {
    "label": "UpdateSolverParticlesState()",
    "kind": "Method",
    "detail": "Function (} } } return bHasStateChanged ; } void)",
    "insertText": "UpdateSolverParticlesState(Chaos::FPBDRigidsSolver* RigidSolver, const TFieldArrayView<FFieldContextIndex>& UpdatedParticleIndices, const TArray<Chaos::FGeometryParticleHandle*>& Particles)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSet<FPBDRigidClusteredParticleHandle*> TopParentClusters ;)",
    "insertText": "for(const FFieldContextIndex& ParticleIndex: UpdatedParticleIndices)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FPBDRigidClusteredParticleHandle* TopParent = ClusteredHandle ;)",
    "insertText": "while(FPBDRigidClusteredParticleHandle* DirectParent = TopParent->Parent())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TopParent = DirectParent ; } TopParentClusters .)",
    "insertText": "Add(TopParent)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (} } const FRigidClustering& Clustering = RigidSolver ->)",
    "insertText": "GetEvolution()->GetRigidClustering()"
  },
  {
    "label": "UpdateKinematicProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateKinematicProperties(TopParentClusteredHandle, Clustering.GetChildrenMap(), *RigidSolver->GetEvolution())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(TopParentClusteredHandle->ObjectState() == EObjectStateType::Dynamic)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (RigidSolver ->)",
    "insertText": "GetEvolution()->SetParticleKinematicTarget(TopParentClusteredHandle, FKinematicTarget())"
  },
  {
    "label": "UpdateMaterialSleepingThreshold()",
    "kind": "Method",
    "detail": "Function (} } } } } } void)",
    "insertText": "UpdateMaterialSleepingThreshold(Chaos::FPBDRigidsSolver* RigidSolver, Chaos::FPBDRigidParticleHandle* RigidHandle, const Chaos::FReal ResultThreshold)"
  },
  {
    "label": "FChaosPhysicsMaterial()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<Chaos::FChaosPhysicsMaterial> NewMaterial = MakeUnique<)",
    "insertText": "FChaosPhysicsMaterial()"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (NewMaterial -> SleepingLinearThreshold = ResultThreshold ; NewMaterial -> SleepingAngularThreshold = ResultThreshold ; RigidSolver ->)",
    "insertText": "GetEvolution()->SetPhysicsMaterial(RigidHandle, MakeSerializable(NewMaterial))"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (RigidSolver ->)",
    "insertText": "GetEvolution()->SetPerParticlePhysicsMaterial(RigidHandle, NewMaterial)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (} else { const TUniquePtr<Chaos::FChaosPhysicsMaterial>& InstanceMaterial = RigidSolver ->)",
    "insertText": "GetEvolution()->GetPerParticlePhysicsMaterial(RigidHandle)"
  },
  {
    "label": "UpdateMaterialDisableThreshold()",
    "kind": "Method",
    "detail": "Function (InstanceMaterial -> SleepingLinearThreshold = ResultThreshold ; InstanceMaterial -> SleepingAngularThreshold = ResultThreshold ; } } } void)",
    "insertText": "UpdateMaterialDisableThreshold(Chaos::FPBDRigidsSolver* RigidSolver, Chaos::FPBDRigidParticleHandle* RigidHandle, const Chaos::FReal ResultThreshold)"
  },
  {
    "label": "FieldIntegerParameterUpdate()",
    "kind": "Method",
    "detail": "Function (InstanceMaterial -> DisabledLinearThreshold = ResultThreshold ; InstanceMaterial -> DisabledAngularThreshold = ResultThreshold ; } } } void)",
    "insertText": "FieldIntegerParameterUpdate(Chaos::FPBDRigidsSolver* RigidSolver, const FFieldSystemCommand& FieldCommand, TArray<Chaos::FGeometryParticleHandle*>& ParticleHandles, FFieldContext& FieldContext, Chaos::FPBDPositionConstraints& PositionTarget, TMap<int32, int32>& TargetedParticles, TArray<int32>& FinalResults)"
  },
  {
    "label": "ResultsView()",
    "kind": "Method",
    "detail": "Function (TFieldArrayView<int32>)",
    "insertText": "ResultsView(FinalResults, 0, FinalResults.Num())"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_DynamicState)"
  },
  {
    "label": "InitDynamicStateResults()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "InitDynamicStateResults(ParticleHandles, FieldContext, FinalResults)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (static_cast<const FFieldNode<)",
    "insertText": "int32(FieldCommand.RootNode.Get())->Evaluate(FieldContext, ResultsView)"
  },
  {
    "label": "GetEvaluatedSamples()",
    "kind": "Method",
    "detail": "Function (bool bHasStateChanged = false ; const TFieldArrayView<FFieldContextIndex>& EvaluatedSamples = FieldContext .)",
    "insertText": "GetEvaluatedSamples()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const int32 CurrResult = ResultsView [ Index . Result ] ;)",
    "insertText": "check(CurrResult < std::numeric_limits<int8>::max())"
  },
  {
    "label": "int8()",
    "kind": "Method",
    "detail": "Function (const int8 ResultState = static_cast<)",
    "insertText": "int8(CurrResult)"
  },
  {
    "label": "ReportDynamicStateResult()",
    "kind": "Method",
    "detail": "Function (bHasStateChanged | =)",
    "insertText": "ReportDynamicStateResult(RigidSolver, static_cast<Chaos::EObjectStateType>(ResultState), RigidHandle, false, Chaos::FVec3(0), false, Chaos::FVec3(0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(bHasStateChanged)"
  },
  {
    "label": "UpdateSolverParticlesState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSolverParticlesState(RigidSolver, EvaluatedSamples, ParticleHandles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_ActivateDisabled)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_ActivateDisabled)"
  },
  {
    "label": "InitActivateDisabledResults()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "InitActivateDisabledResults(ParticleHandles, FieldContext, FinalResults)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (RigidSolver ->)",
    "insertText": "GetEvolution()->EnableParticle(RigidHandle)"
  },
  {
    "label": "SetParticleDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParticleDynamicState(RigidSolver, Chaos::EObjectStateType::Dynamic, RigidHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_CollisionGroup)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_CollisionGroup)"
  },
  {
    "label": "CastToClustered()",
    "kind": "Method",
    "detail": "Function (Chaos::FPBDRigidClusteredParticleHandle* RigidHandle = ParticleHandles [ Index . Sample ] ->)",
    "insertText": "CastToClustered()"
  },
  {
    "label": "SetCollisionGroup()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetCollisionGroup(ResultsView[Index.Result])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_PositionStatic)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_PositionStatic)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (const int32 ConstraintIndex = TargetedParticles [ Index . Sample ] ; PositionTarget .)",
    "insertText": "Replace(ConstraintIndex, ParticleHandles[Index.Sample]->GetX())"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (} else { const int32 ConstraintIndex = PositionTarget .)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (PositionTarget .)",
    "insertText": "AddConstraint(RigidHandle, RigidHandle->GetX())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TargetedParticles .)",
    "insertText": "Add(Index.Sample, ConstraintIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_DynamicConstraint)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_DynamicConstraint)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "UE_LOG(LogChaos, Error, TEXT(\"Dynamic constraint target currently not supported by chaos\"))"
  },
  {
    "label": "FieldScalarParameterUpdate()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "FieldScalarParameterUpdate(Chaos::FPBDRigidsSolver* RigidSolver, const FFieldSystemCommand& FieldCommand, TArray<Chaos::FGeometryParticleHandle*>& ParticleHandles, FFieldContext& FieldContext, Chaos::FPBDPositionConstraints& PositionTarget, TMap<int32, int32>& TargetedParticles, TArray<float>& FinalResults)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_ExternalClusterStrain)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (static_cast<const FFieldNode<)",
    "insertText": "float(FieldCommand.RootNode.Get())->Evaluate(FieldContext, ResultsView)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const float ExternalStrainValue = ResultsView [ Index . Result ] ;)",
    "insertText": "if(ExternalStrainValue > 0)"
  },
  {
    "label": "GetExternalStrain()",
    "kind": "Method",
    "detail": "Function (const FRealSingle CurrentExternalStrains = ClusteredParticle ->)",
    "insertText": "GetExternalStrain()"
  },
  {
    "label": "SetExternalStrain()",
    "kind": "Method",
    "detail": "Function (RigidClustering .)",
    "insertText": "SetExternalStrain(ClusteredParticle, FMath::Max(CurrentExternalStrains, ExternalStrainValue))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_Kill)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_Kill)"
  },
  {
    "label": "GetEvolution()",
    "kind": "Method",
    "detail": "Function (RigidSolver ->)",
    "insertText": "GetEvolution()->DisableParticle(RigidHandle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_SleepingThreshold)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_SleepingThreshold)"
  },
  {
    "label": "UpdateMaterialSleepingThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterialSleepingThreshold(RigidSolver, RigidHandle, ResultsView[Index.Result])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_DisableThreshold)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_DisableThreshold)"
  },
  {
    "label": "UpdateMaterialDisableThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaterialDisableThreshold(RigidSolver, RigidHandle, ResultsView[Index.Result])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_InternalClusterStrain)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_InternalClusterStrain)"
  },
  {
    "label": "SetInternalStrain()",
    "kind": "Method",
    "detail": "Function (RigidClustering .)",
    "insertText": "SetInternalStrain(RigidHandle, RigidHandle->GetInternalStrains() + ResultsView[Index.Result])"
  },
  {
    "label": "FieldVectorParameterUpdate()",
    "kind": "Method",
    "detail": "Function (} } } } } void)",
    "insertText": "FieldVectorParameterUpdate(Chaos::FPBDRigidsSolver* RigidSolver, const FFieldSystemCommand& FieldCommand, TArray<Chaos::FGeometryParticleHandle*>& ParticleHandles, FFieldContext& FieldContext, Chaos::FPBDPositionConstraints& PositionTarget, TMap<int32, int32>& TargetedParticles, TArray<FVector>& FinalResults)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_LinearVelocity)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function ({ static_cast<const FFieldNode<)",
    "insertText": "FVector(FieldCommand.RootNode.Get())->Evaluate(FieldContext, ResultsView)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetV(RigidHandle->GetV() + ResultsView[Index.Result])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_LinearImpulse)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ForceUpdateField_LinearImpulse)"
  },
  {
    "label": "LinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (const FVec3 CurrentImpulseVelocity = RigidHandle ->)",
    "insertText": "LinearImpulseVelocity()"
  },
  {
    "label": "SetLinearImpulseVelocity()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetLinearImpulseVelocity(CurrentImpulseVelocity + (ResultsView[Index.Result] * RigidHandle->InvM()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_AngularVelociy)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_AngularVelocity)"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetW(RigidHandle->GetW() + ResultsView[Index.Result])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_PositionTarget)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_PositionTarget)"
  },
  {
    "label": "Replace()",
    "kind": "Method",
    "detail": "Function (const int32 ConstraintIndex = TargetedParticles [ Index . Sample ] ; PositionTarget .)",
    "insertText": "Replace(ConstraintIndex, ResultsView[Index.Result])"
  },
  {
    "label": "AddConstraint()",
    "kind": "Method",
    "detail": "Function (PositionTarget .)",
    "insertText": "AddConstraint(RigidHandle, ResultsView[Index.Result])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_PositionAnimated)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ParamUpdateField_PositionAnimated)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "UE_LOG(LogChaos, Error, TEXT(\"Position Animated target currently not supported by chaos\"))"
  },
  {
    "label": "FieldVectorForceUpdate()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "FieldVectorForceUpdate(Chaos::FPBDRigidsSolver* RigidSolver, const FFieldSystemCommand& FieldCommand, TArray<Chaos::FGeometryParticleHandle*>& ParticleHandles, FFieldContext& FieldContext, TArray<FVector>& FinalResults)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ForceUpdateField_LinearForce)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "for(const FFieldContextIndex& Index : FieldContext.GetEvaluatedSamples())"
  },
  {
    "label": "SetObjectStateLowLevel()",
    "kind": "Method",
    "detail": "Function (RigidHandle ->)",
    "insertText": "SetObjectStateLowLevel(Chaos::EObjectStateType::Dynamic)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (} RigidHandle ->)",
    "insertText": "AddForce(ResultsView[Index.Result])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(FieldCommand.PhysicsType == EFieldPhysicsType::Field_AngularTorque)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ForceUpdateField_AngularTorque)"
  },
  {
    "label": "AddTorque()",
    "kind": "Method",
    "detail": "Function (} RigidHandle ->)",
    "insertText": "AddTorque(ResultsView[Index.Result])"
  },
  {
    "label": "IsParameterFieldValid()",
    "kind": "Method",
    "detail": "Function (} } } } } } bool)",
    "insertText": "IsParameterFieldValid(const FFieldSystemCommand& FieldCommand)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FieldCommand.RootNode->Type() == FFieldNodeBase::EFieldType::EField_Float)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(FieldCommand.RootNode->Type() == FFieldNodeBase::EFieldType::EField_FVector)"
  },
  {
    "label": "IsForceFieldValid()",
    "kind": "Method",
    "detail": "Function (} return false ; } bool)",
    "insertText": "IsForceFieldValid(const FFieldSystemCommand& FieldCommand)"
  }
]