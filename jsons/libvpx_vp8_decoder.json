[
  {
    "label": "LibvpxVp8Decoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibvpxVp8Decoder"
  },
  {
    "label": "DeblockParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeblockParams"
  },
  {
    "label": "QpSmoother",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "QpSmoother"
  },
  {
    "label": "LibvpxVp8Decoder()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP8_LIBVPX_VP8_DECODER_H_ # define MODULES_VIDEO_CODING_CODECS_VP8_LIBVPX_VP8_DECODER_H_ # include<memory> # include \" absl / types / optional . h \" # include \" api / video / encoded_image . h \" # include \" api / video_codecs / video_decoder . h \" # include \" common_video / include / video_frame_buffer_pool . h \" # include \" modules / video_coding / codecs / vp8 / include / vp8 . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" vpx / vp8dx . h \" # include \" vpx / vpx_decoder . h \" namespace webrtc { class LibvpxVp8Decoder : public VideoDecoder { public :)",
    "insertText": "LibvpxVp8Decoder()"
  },
  {
    "label": "Configure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Configure(const Settings& settings)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Decode(const EncodedImage& input_image, bool missing_frames, int64_t)"
  },
  {
    "label": "RegisterDecodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RegisterDecodeCompleteCallback(DecodedImageCallback* callback)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Release()"
  },
  {
    "label": "GetDecoderInfo()",
    "kind": "Method",
    "detail": "Function (DecoderInfo)",
    "insertText": "GetDecoderInfo()"
  },
  {
    "label": "ImplementationName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "ImplementationName()"
  },
  {
    "label": "DeblockParams()",
    "kind": "Method",
    "detail": "Function (struct DeblockParams {)",
    "insertText": "DeblockParams() : max_level(6), degrade_qp(1), min_qp(0)"
  },
  {
    "label": "DeblockParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DeblockParams(int max_level, int degrade_qp, int min_qp) : max_level(max_level), degrade_qp(degrade_qp), min_qp(min_qp)"
  },
  {
    "label": "ReturnFrame()",
    "kind": "Method",
    "detail": "Function (} int max_level ; int degrade_qp ; int min_qp ; } ; private : class QpSmoother ; int)",
    "insertText": "ReturnFrame(const vpx_image_t* img, uint32_t timeStamp, int qp, const webrtc::ColorSpace* explicit_color_space)"
  }
]