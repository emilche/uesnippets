[
  {
    "label": "FVulkanSamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanSamplerState"
  },
  {
    "label": "FVulkanDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDynamicRHI"
  },
  {
    "label": "FVulkanDescriptorSetCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetCache"
  },
  {
    "label": "FVulkanDescriptorPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPool"
  },
  {
    "label": "FVulkanDescriptorPoolsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPoolsManager"
  },
  {
    "label": "FVulkanBindlessDescriptorManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanBindlessDescriptorManager"
  },
  {
    "label": "FVulkanCommandListContextImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContextImmediate"
  },
  {
    "label": "FVulkanTransientHeapCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTransientHeapCache"
  },
  {
    "label": "FVulkanDeviceExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDeviceExtension"
  },
  {
    "label": "FVulkanOcclusionQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanOcclusionQueryPool"
  },
  {
    "label": "FVulkanRenderPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderPassManager"
  },
  {
    "label": "FVulkanRayTracingCompactionRequestHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRayTracingCompactionRequestHandler"
  },
  {
    "label": "FOptionalVulkanDeviceExtensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalVulkanDeviceExtensions"
  },
  {
    "label": "FOptionalVulkanDeviceExtensionProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalVulkanDeviceExtensionProperties"
  },
  {
    "label": "FVulkanPhysicalDeviceFeatures",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPhysicalDeviceFeatures"
  },
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FDeferredDeletionQueue2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeferredDeletionQueue2"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEntry"
  },
  {
    "label": "FVulkanPipelineStateCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPipelineStateCacheManager"
  },
  {
    "label": "FVulkanRHIGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRHIGraphicsPipelineState"
  },
  {
    "label": "FVulkanComputePipeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanComputePipeline"
  },
  {
    "label": "FVulkanCommandListContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandListContext"
  },
  {
    "label": "VULKAN_SET_DEBUG_NAME()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VulkanMemory . h \" # include \" VulkanResources . h \" # include \" GPUProfiler . h \" class FVulkanSamplerState ; class FVulkanDynamicRHI ; class FVulkanDescriptorSetCache ; class FVulkanDescriptorPool ; class FVulkanDescriptorPoolsManager ; class FVulkanBindlessDescriptorManager ; class FVulkanCommandListContextImmediate ; class FVulkanTransientHeapCache ; class FVulkanDeviceExtension ; class FVulkanOcclusionQueryPool ; class FVulkanRenderPassManager ; class FVulkanRayTracingCompactionRequestHandler ; # define VULKAN_USE_DEBUG_NAMES 0 # if VULKAN_USE_DEBUG_NAMES # define)",
    "insertText": "VULKAN_SET_DEBUG_NAME(Device, Type, Handle, Format, ...) (Device).VulkanSetObjectName(Type, (uint64)Handle, *FString::Printf(Format, __VA_ARGS__)) #else #define VULKAN_SET_DEBUG_NAME(Device, Type, Handle, Format, ...)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0)"
  },
  {
    "label": "FOptionalVulkanDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (union { struct { uint64 HasEXTValidationCache : 1 ; uint64 HasMemoryPriority : 1 ; uint64 HasMemoryBudget : 1 ; uint64 HasEXTASTCDecodeMode : 1 ; uint64 HasEXTFragmentDensityMap : 1 ; uint64 HasEXTFragmentDensityMap2 : 1 ; uint64 HasKHRFragmentShadingRate : 1 ; uint64 HasKHRFragmentShaderBarycentric : 1 ; uint64 HasEXTFullscreenExclusive : 1 ; uint64 HasImageAtomicInt64 : 1 ; uint64 HasAccelerationStructure : 1 ; uint64 HasRayTracingPipeline : 1 ; uint64 HasRayQuery : 1 ; uint64 HasDeferredHostOperations : 1 ; uint64 HasEXTCalibratedTimestamps : 1 ; uint64 HasEXTDescriptorBuffer : 1 ; uint64 HasEXTDeviceFault : 1 ; uint64 HasEXTLoadStoreOpNone : 1 ; uint64 HasEXTMeshShader : 1 ; uint64 HasAMDBufferMarker : 1 ; uint64 HasNVDiagnosticCheckpoints : 1 ; uint64 HasNVDeviceDiagnosticConfig : 1 ; uint64 HasANDROIDExternalMemoryHardwareBuffer : 1 ; uint64 HasKHRMultiview : 1 ; uint64 HasKHR16bitStorage : 1 ; uint64 HasKHRSamplerYcbcrConversion : 1 ; uint64 HasKHRRenderPass2 : 1 ; uint64 HasKHRImageFormatList : 1 ; uint64 HasKHRShaderAtomicInt64 : 1 ; uint64 HasEXTScalarBlockLayout : 1 ; uint64 HasBufferDeviceAddress : 1 ; uint64 HasSPIRV_14 : 1 ; uint64 HasShaderFloatControls : 1 ; uint64 HasKHRShaderFloat16 : 1 ; uint64 HasEXTDescriptorIndexing : 1 ; uint64 HasEXTShaderViewportIndexLayer : 1 ; uint64 HasSeparateDepthStencilLayouts : 1 ; uint64 HasEXTHostQueryReset : 1 ; uint64 HasQcomRenderPassShaderResolve : 1 ; uint64 HasKHRDepthStencilResolve : 1 ; uint64 HasEXTTextureCompressionASTCHDR : 1 ; uint64 HasKHRMaintenance4 : 1 ; uint64 HasKHRSynchronization2 : 1 ; uint64 HasEXTSubgroupSizeControl : 1 ; uint64 HasEXTPipelineCreationCacheControl : 1 ; } ; uint64 Packed ; } ;)",
    "insertText": "FOptionalVulkanDeviceExtensions()"
  },
  {
    "label": "HasGPUCrashDumpExtensions()",
    "kind": "Method",
    "detail": "Function (Packed = 0 ; } bool)",
    "insertText": "HasGPUCrashDumpExtensions()"
  },
  {
    "label": "FOptionalVulkanDeviceExtensionProperties()",
    "kind": "Method",
    "detail": "Function (} } ; struct FOptionalVulkanDeviceExtensionProperties {)",
    "insertText": "FOptionalVulkanDeviceExtensionProperties()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(*this)"
  },
  {
    "label": "FVulkanPhysicalDeviceFeatures()",
    "kind": "Method",
    "detail": "Function (} VkPhysicalDeviceDescriptorBufferPropertiesEXT DescriptorBufferProps ; VkPhysicalDeviceSubgroupSizeControlPropertiesEXT SubgroupSizeControlProperties ; VkPhysicalDeviceAccelerationStructurePropertiesKHR AccelerationStructureProps ; VkPhysicalDeviceRayTracingPipelinePropertiesKHR RayTracingPipelineProps ; VkPhysicalDeviceFragmentShadingRateFeaturesKHR FragmentShadingRateFeatures ; VkPhysicalDeviceFragmentDensityMapFeaturesEXT FragmentDensityMapFeatures ; VkPhysicalDeviceFragmentDensityMap2FeaturesEXT FragmentDensityMap2Features ; VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR FragmentShaderBarycentricProps ; VkPhysicalDeviceComputeShaderDerivativesFeaturesNV ComputeShaderDerivativesFeatures ; VkPhysicalDeviceMeshShaderPropertiesEXT MeshShaderProperties ; } ; class FVulkanPhysicalDeviceFeatures { public :)",
    "insertText": "FVulkanPhysicalDeviceFeatures()"
  },
  {
    "label": "Query()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Query(VkPhysicalDevice PhysicalDevice, uint32 APIVersion)"
  },
  {
    "label": "FDeferredDeletionQueue2()",
    "kind": "Method",
    "detail": "Function (VkPhysicalDeviceFeatures Core_1_0 ; VkPhysicalDeviceVulkan11Features Core_1_1 ; private : VkPhysicalDeviceVulkan12Features Core_1_2 ; VkPhysicalDeviceVulkan13Features Core_1_3 ; class FVulkanDevice ; } ; namespace VulkanRHI { class FDeferredDeletionQueue2 : public VulkanRHI::FDeviceChild { public :)",
    "insertText": "FDeferredDeletionQueue2(FVulkanDevice* InDevice)"
  },
  {
    "label": "FDeferredDeletionQueue2()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDeferredDeletionQueue2()"
  },
  {
    "label": "EnqueueResource()",
    "kind": "Method",
    "detail": "Function (enum class EType { RenderPass,Buffer,BufferView,Image,ImageView,Pipeline,PipelineLayout,Framebuffer,DescriptorSetLayout,Sampler,Semaphore,ShaderModule,Event,ResourceAllocation,DeviceMemoryAllocation,BufferSuballocation,AccelerationStructure,BindlessHandle,} ; template<T> void)",
    "insertText": "EnqueueResource(EType Type, T Handle)"
  },
  {
    "label": "EnqueueGenericResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueGenericResource(Type, (uint64)Handle)"
  },
  {
    "label": "EnqueueBindlessHandle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnqueueBindlessHandle(FRHIDescriptorHandle DescriptorHandle)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "Type(uint64)DescriptorHandle.GetRawType()"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "Index(uint64)DescriptorHandle.GetIndex()"
  },
  {
    "label": "AsUInt64()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "AsUInt64(Type << 32)"
  },
  {
    "label": "EnqueueResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueResource(EType::BindlessHandle, AsUInt64)"
  },
  {
    "label": "EnqueueResourceAllocation()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EnqueueResourceAllocation(FVulkanAllocation& Allocation)"
  },
  {
    "label": "EnqueueDeviceAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueDeviceAllocation(FDeviceMemoryAllocation* DeviceMemoryAllocation)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources(bool bDeleteImmediately = false)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources(true)"
  },
  {
    "label": "OnCmdBufferDeleted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCmdBufferDeleted(FVulkanCmdBuffer* CmdBuffer)"
  },
  {
    "label": "EnqueueGenericResource()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "EnqueueGenericResource(EType Type, uint64 Handle)"
  },
  {
    "label": "FVulkanDevice()",
    "kind": "Method",
    "detail": "Function (struct FEntry { EType StructureType ; uint32 FrameNumber ; uint64 FenceCounter ; FVulkanCmdBuffer* CmdBuffer ; uint64 Handle ; FVulkanAllocation Allocation ; FDeviceMemoryAllocation* DeviceMemoryAllocation ; } ; FCriticalSection CS ; TArray<FEntry> Entries ; } ; } class FVulkanDevice { public :)",
    "insertText": "FVulkanDevice(FVulkanDynamicRHI* InRHI, VkPhysicalDevice Gpu)"
  },
  {
    "label": "FVulkanDevice()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanDevice()"
  },
  {
    "label": "InitGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGPU()"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDevice(TArray<const ANSICHAR*>& DeviceLayers, FVulkanDeviceExtensionArray& UEExtensions)"
  },
  {
    "label": "ChooseVariableRateShadingMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChooseVariableRateShadingMethod()"
  },
  {
    "label": "PrepareForDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareForDestroy()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "WaitUntilIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilIdle()"
  },
  {
    "label": "GetVendorId()",
    "kind": "Method",
    "detail": "Function (EGpuVendorId)",
    "insertText": "GetVendorId()"
  },
  {
    "label": "CleanUpRayTracing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpRayTracing()"
  },
  {
    "label": "GetValidationCache()",
    "kind": "Method",
    "detail": "Function (# if VULKAN_SUPPORTS_VALIDATION_CACHE VkValidationCacheEXT)",
    "insertText": "GetValidationCache()"
  },
  {
    "label": "SupportsBindless()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsBindless()"
  },
  {
    "label": "GetTimestampValidBitsMask()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTimestampValidBitsMask()"
  },
  {
    "label": "GetInstanceHandle()",
    "kind": "Method",
    "detail": "Function (VkDevice)",
    "insertText": "GetInstanceHandle()"
  },
  {
    "label": "GetFormatProperties()",
    "kind": "Method",
    "detail": "Function (} const VkFormatProperties&)",
    "insertText": "GetFormatProperties(VkFormat InFormat)"
  },
  {
    "label": "GetDeviceMemoryManager()",
    "kind": "Method",
    "detail": "Function (VulkanRHI::FDeviceMemoryManager&)",
    "insertText": "GetDeviceMemoryManager()"
  },
  {
    "label": "GetMemoryManager()",
    "kind": "Method",
    "detail": "Function (} VulkanRHI::FMemoryManager&)",
    "insertText": "GetMemoryManager()"
  },
  {
    "label": "GetCmdBeginDebugLabel()",
    "kind": "Method",
    "detail": "Function (# if VULKAN_ENABLE_DRAW_MARKERS PFN_vkCmdBeginDebugUtilsLabelEXT)",
    "insertText": "GetCmdBeginDebugLabel()"
  },
  {
    "label": "SubmitCommandsAndFlushGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitCommandsAndFlushGPU()"
  },
  {
    "label": "AcquireOcclusionQueryPool()",
    "kind": "Method",
    "detail": "Function (FVulkanOcclusionQueryPool*)",
    "insertText": "AcquireOcclusionQueryPool(FVulkanCommandBufferManager* CommandBufferManager, uint32 NumQueries)"
  },
  {
    "label": "ReleaseUnusedOcclusionQueryPools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUnusedOcclusionQueryPools()"
  },
  {
    "label": "GetPipelineStateCache()",
    "kind": "Method",
    "detail": "Function (class FVulkanPipelineStateCacheManager*)",
    "insertText": "GetPipelineStateCache()"
  },
  {
    "label": "NotifyDeletedComputePipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyDeletedComputePipeline(class FVulkanComputePipeline* Pipeline)"
  },
  {
    "label": "AcquireDeferredContext()",
    "kind": "Method",
    "detail": "Function (FVulkanCommandListContext*)",
    "insertText": "AcquireDeferredContext()"
  },
  {
    "label": "ReleaseDeferredContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDeferredContext(FVulkanCommandListContext* InContext)"
  },
  {
    "label": "VulkanSetObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VulkanSetObjectName(VkObjectType Type, uint64_t Handle, const TCHAR* Name)"
  },
  {
    "label": "GetOptionalExtensions()",
    "kind": "Method",
    "detail": "Function (const FOptionalVulkanDeviceExtensions&)",
    "insertText": "GetOptionalExtensions()"
  },
  {
    "label": "SetupPresentQueue()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "SetupPresentQueue(VkSurfaceKHR Surface)"
  },
  {
    "label": "GetQueueFamilyProps()",
    "kind": "Method",
    "detail": "Function (const TArray<VkQueueFamilyProperties>&)",
    "insertText": "GetQueueFamilyProps()"
  },
  {
    "label": "GetDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (const TArray<const ANSICHAR*>&)",
    "insertText": "GetDeviceExtensions()"
  },
  {
    "label": "MapBufferFormatSupport()",
    "kind": "Method",
    "detail": "Function (# endif private : void)",
    "insertText": "MapBufferFormatSupport(FPixelFormatInfo& PixelFormatInfo, EPixelFormat UEFormat, VkFormat VulkanFormat)"
  },
  {
    "label": "MapImageFormatSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapImageFormatSupport(FPixelFormatInfo& PixelFormatInfo, const TArrayView<const VkFormat>& PrioritizedFormats, EPixelFormatCapabilities RequiredCapabilities)"
  },
  {
    "label": "MapFormatSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapFormatSupport(EPixelFormat UEFormat, std::initializer_list<VkFormat> PrioritizedFormats, const VkComponentMapping& ComponentMapping, EPixelFormatCapabilities RequiredCapabilities, int32 BlockBytes)"
  },
  {
    "label": "MapFormatSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapFormatSupport(EPixelFormat UEFormat, std::initializer_list<VkFormat> PrioritizedFormats, const VkComponentMapping& ComponentMapping)"
  },
  {
    "label": "MapFormatSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapFormatSupport(EPixelFormat UEFormat, std::initializer_list<VkFormat> PrioritizedFormats, const VkComponentMapping& ComponentMapping, int32 BlockBytes)"
  },
  {
    "label": "MapFormatSupport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapFormatSupport(EPixelFormat UEFormat, std::initializer_list<VkFormat> PrioritizedFormats, const VkComponentMapping& ComponentMapping, EPixelFormatCapabilities RequiredCapabilities)"
  },
  {
    "label": "SubmitCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitCommands(FVulkanCommandListContext* Context)"
  },
  {
    "label": "VkExtent2D()",
    "kind": "Method",
    "detail": "Function (VkDevice Device ; VulkanRHI::FDeviceMemoryManager DeviceMemoryManager ; VulkanRHI::FMemoryManager MemoryManager ; VulkanRHI::FDeferredDeletionQueue2 DeferredDeletionQueue ; VulkanRHI::FStagingManager StagingManager ; VulkanRHI::FFenceManager FenceManager ; FVulkanRenderPassManager* RenderPassManager ; FVulkanTransientHeapCache* TransientHeapCache = nullptr ; FVulkanDescriptorSetCache* DescriptorSetCache = nullptr ; FVulkanDescriptorPoolsManager* DescriptorPoolsManager = nullptr ; FVulkanBindlessDescriptorManager* BindlessDescriptorManager = nullptr ; FVulkanShaderFactory ShaderFactory ; FVulkanSamplerState* DefaultSampler ; FVulkanTexture* DefaultTexture ; VkPhysicalDevice Gpu ; VkPhysicalDeviceProperties GpuProps ; TArray<VkPhysicalDeviceFragmentShadingRateKHR> FragmentShadingRates ; TStaticArray<)",
    "insertText": "VkExtent2D(EVRSShadingRate::VRSSR_Last+1)"
  },
  {
    "label": "SetupDeviceLayers()",
    "kind": "Method",
    "detail": "Function (VkPhysicalDeviceIDPropertiesKHR GpuIdProps ; VkPhysicalDeviceSubgroupProperties GpuSubgroupProps ; FVulkanRayTracingCompactionRequestHandler* RayTracingCompactionRequestHandler = nullptr ; FVulkanPhysicalDeviceFeatures PhysicalDeviceFeatures ; TArray<VkQueueFamilyProperties> QueueFamilyProps ; VkFormatProperties FormatProperties [ VK_FORMAT_RANGE_SIZE ] ; TMap<VkFormat,VkFormatProperties> ExtensionFormatProperties ; TArray<FVulkanOcclusionQueryPool*> UsedOcclusionQueryPools ; TArray<FVulkanOcclusionQueryPool*> FreeOcclusionQueryPools ; uint64 TimestampValidBitsMask = 0 ; FVulkanQueue* GfxQueue ; FVulkanQueue* ComputeQueue ; FVulkanQueue* TransferQueue ; FVulkanQueue* PresentQueue ; bool bAsyncComputeQueue = false ; bool bPresentOnComputeQueue = false ; EGpuVendorId VendorId = EGpuVendorId::NotQueried ; # if VULKAN_SUPPORTS_GPU_CRASH_DUMPS struct { VkBuffer Buffer = VK_NULL_HANDLE ; VulkanRHI::FDeviceMemoryAllocation* Allocation = nullptr ; } CrashMarker ; # endif VkComponentMapping PixelFormatComponentMapping [ PF_MAX ] ; TMap<uint32,FSamplerStateRHIRef> SamplerMap ; FVulkanCommandListContextImmediate* ImmediateContext ; FVulkanCommandListContext* ComputeContext ; TArray<FVulkanCommandListContext*> CommandContexts ; FVulkanDynamicRHI* RHI = nullptr ; bool bDebugMarkersFound = false ; TArray<const ANSICHAR*>)",
    "insertText": "SetupDeviceLayers(VkPhysicalDevice Gpu, FVulkanDeviceExtensionArray& UEExtensions)"
  },
  {
    "label": "SetupFormats()",
    "kind": "Method",
    "detail": "Function (FOptionalVulkanDeviceExtensions OptionalDeviceExtensions ; FOptionalVulkanDeviceExtensionProperties OptionalDeviceExtensionProperties ; TArray<const ANSICHAR*> DeviceExtensions ; void)",
    "insertText": "SetupFormats()"
  },
  {
    "label": "SetupDrawMarkers()",
    "kind": "Method",
    "detail": "Function (# if VULKAN_SUPPORTS_VALIDATION_CACHE VkValidationCacheEXT ValidationCache = VK_NULL_HANDLE ; # endif # if VULKAN_ENABLE_DRAW_MARKERS struct { PFN_vkSetDebugUtilsObjectNameEXT SetDebugName = nullptr ; PFN_vkCmdBeginDebugUtilsLabelEXT CmdBeginDebugLabel = nullptr ; PFN_vkCmdEndDebugUtilsLabelEXT CmdEndDebugLabel = nullptr ; } DebugMarkers ; class FVulkanCommandListContext ; # endif void)",
    "insertText": "SetupDrawMarkers()"
  }
]