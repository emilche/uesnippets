[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "circular_deque",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "circular_deque"
  },
  {
    "label": "circular_deque_const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "circular_deque_const_iterator"
  },
  {
    "label": "circular_deque",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "circular_deque"
  },
  {
    "label": "circular_deque_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "circular_deque_iterator"
  },
  {
    "label": "circular_deque",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "circular_deque"
  },
  {
    "label": "circular_deque",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "circular_deque"
  },
  {
    "label": "InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIterator"
  },
  {
    "label": "assumes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "assumes"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIterator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(size_t count, const T& value)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(InputIterator first, InputIterator last)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(std::initializer_list<T> value)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserve(size_t)"
  },
  {
    "label": "shrink_to_fit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrink_to_fit()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size_t)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(size_t count, const T& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(const_iterator pos, size_type count, const T& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(const_iterator pos,\n//               InputIterator first, InputIterator last)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert(const_iterator pos, const T& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert(const_iterator pos, T&& value)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "emplace(const_iterator pos, Args&&... args)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(const_iterator pos)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(const_iterator first, const_iterator last)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_front(const T&)"
  },
  {
    "label": "push_front()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_front(T&&)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(const T&)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(T&&)"
  },
  {
    "label": "pop_front()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pop_front()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pop_back()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(circular_deque&)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "at(i)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, begin_)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(this, begin_)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(this, begin_)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, end_)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(this, end_)"
  },
  {
    "label": "const_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_iterator(this, end_)"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "rend()"
  },
  {
    "label": "insert_cur()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert_cur(this, pos.index_)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "emplace(pos, value)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "begin()"
  },
  {
    "label": "insert_begin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert_begin(this, pos.index_)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "erase(pos, pos + 1)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, first.index_)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, last.index_)"
  },
  {
    "label": "move_src()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "move_src(this, last.index_)"
  },
  {
    "label": "move_dest()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "move_dest(this, first.index_)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator(this, first.index_)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "back()"
  },
  {
    "label": "new_buffer()",
    "kind": "Method",
    "detail": "Function (VectorBuffer)",
    "insertText": "new_buffer(new_capacity + 1)"
  }
]