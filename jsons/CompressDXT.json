[
  {
    "label": "Image",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Image"
  },
  {
    "label": "FloatImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FloatImage"
  },
  {
    "label": "FastCompressor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FastCompressor"
  },
  {
    "label": "SlowCompressor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SlowCompressor"
  },
  {
    "label": "FastCompressor()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_TT_COMPRESSDXT_H # define NV_TT_COMPRESSDXT_H # include<nvimage / nvimage . h> # include \" nvtt . h \" namespace nv { class Image ; class FloatImage ; class FastCompressor { public :)",
    "insertText": "FastCompressor()"
  },
  {
    "label": "setImage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setImage(const Image * image, nvtt::AlphaMode alphaMode)"
  },
  {
    "label": "compressDXT1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT1(const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT1a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT1a(const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT3(const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT5()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT5(const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT5n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT5n(const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "SlowCompressor()",
    "kind": "Method",
    "detail": "Function (private : const Image* m_image ; nvtt::AlphaMode m_alphaMode ; } ; class SlowCompressor { public :)",
    "insertText": "SlowCompressor()"
  },
  {
    "label": "compressDXT1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT1(const nvtt::CompressionOptions::Private & compressionOptions, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT1a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT1a(const nvtt::CompressionOptions::Private & compressionOptions, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT3(const nvtt::CompressionOptions::Private & compressionOptions, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT5()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT5(const nvtt::CompressionOptions::Private & compressionOptions, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressDXT5n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressDXT5n(const nvtt::CompressionOptions::Private & compressionOptions, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressBC4()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressBC4(const nvtt::CompressionOptions::Private & compressionOptions, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "compressBC5()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compressBC5(const nvtt::CompressionOptions::Private & compressionOptions, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (private : const Image* m_image ; nvtt::AlphaMode m_alphaMode ; } ; # if)",
    "insertText": "defined(HAVE_S3QUANT) void s3CompressDXT1(const Image * image, const nvtt::OutputOptions::Private & outputOptions)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(HAVE_ATITC) void atiCompressDXT1(const Image * image, const nvtt::OutputOptions::Private & outputOptions)"
  }
]