[
  {
    "label": "IObjectTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IObjectTableRow"
  },
  {
    "label": "UListViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UListViewBase"
  },
  {
    "label": "SObjectTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SObjectTableRow"
  },
  {
    "label": "GetOwningListView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Slate / SObjectWidget . h \" # include \" Blueprint / IUserObjectListEntry . h \" # include \" Types / ReflectionMetadata . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" class IObjectTableRow : public ITableRow { public : UListViewBase*)",
    "insertText": "GetOwningListView()"
  },
  {
    "label": "GetUserWidget()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "GetUserWidget()"
  },
  {
    "label": "ObjectRowFromUserWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const IObjectTableRow>)",
    "insertText": "ObjectRowFromUserWidget(const UUserWidget* RowUserWidget)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<const IObjectTableRow>* ObjectRow = ObjectRowsByUserWidget .)",
    "insertText": "Find(RowUserWidget)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } protected : TMap<TWeakObjectPtr<const UUserWidget>,TWeakPtr<const IObjectTableRow>> ObjectRowsByUserWidget ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnRowHovered, UUserWidget&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class UListViewBase ; template<ItemType> class SObjectTableRow : public SObjectWidget,public IObjectTableRow { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SObjectTableRow<ItemType>) :_bAllowDragging(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, bAllowDragging) SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_EVENT(FOnRowHovered, OnHovered) SLATE_EVENT(FOnRowHovered, OnUnhovered) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView, UUserWidget& InWidgetObject, UListViewBase* InOwnerListView = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget> ContentWidget ;)",
    "insertText": "if(ensureMsgf(InWidgetObject.Implements<UUserListEntry>(), TEXT(\"Any UserWidget generated as a table row must implement the IUserListEntry interface\")))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ObjectRowsByUserWidget .)",
    "insertText": "Add(&InWidgetObject, SharedThis(this))"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (OwnerListView = InOwnerListView ; OwnerTablePtr = StaticCastSharedRef<SListView<)",
    "insertText": "ItemType(InOwnerTableView)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (bAllowDragging = InArgs . _bAllowDragging ; OnHovered = InArgs . _OnHovered ; OnUnhovered = InArgs . _OnUnhovered ; ContentWidget = InArgs . _Content . Widget ; } else { ContentWidget =)",
    "insertText": "SNew(STextBlock) .Text(NSLOCTEXT(\"SObjectTableRow\", \"InvalidWidgetClass\", \"Any UserWidget generated as a table row must implement the IUserListEntry interface\"))"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Construct(SObjectWidget::FArguments() .Content() [ ContentWidget.ToSharedRef() ], &InWidgetObject)"
  },
  {
    "label": "RegisterActiveTimer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterActiveTimer(0.f, FWidgetActiveTimerDelegate::CreateSP(this, &SObjectTableRow::DetectItemSelectionChanged))"
  },
  {
    "label": "SObjectTableRow()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SObjectTableRow()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ObjectRowsByUserWidget .)",
    "insertText": "Remove(WidgetObject)"
  },
  {
    "label": "DetectItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } EActiveTimerReturnType)",
    "insertText": "DetectItemSelectionChanged(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ITypedTableView<ItemType>> OwnerTable = OwnerTablePtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "GetItemForThis()",
    "kind": "Method",
    "detail": "Function (const TObjectPtrWrapTypeOf<ItemType>* MyItemPtr = OwnerTable ?)",
    "insertText": "GetItemForThis(OwnerTable.ToSharedRef())"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (bIsAppearingSelected = ! bIsAppearingSelected ;)",
    "insertText": "OnItemSelectionChanged(bIsAppearingSelected)"
  },
  {
    "label": "NotifyItemExpansionChanged()",
    "kind": "Method",
    "detail": "Function (} } return EActiveTimerReturnType::Continue ; } void)",
    "insertText": "NotifyItemExpansionChanged(bool bIsExpanded)"
  },
  {
    "label": "UpdateItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateItemExpansion(*WidgetObject, bIsExpanded)"
  },
  {
    "label": "InitializeRow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InitializeRow()"
  },
  {
    "label": "InitializeObjectRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeObjectRow()"
  },
  {
    "label": "ResetRow()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetRow()"
  },
  {
    "label": "ResetObjectRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetObjectRow()"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (} } TSharedRef<SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "SetIndexInList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIndexInList(int32 InIndexInList)"
  },
  {
    "label": "GetIndexInList()",
    "kind": "Method",
    "detail": "Function (IndexInList = InIndexInList ; } int32)",
    "insertText": "GetIndexInList()"
  },
  {
    "label": "GetIndentLevel()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndentLevel()"
  },
  {
    "label": "DoesItemHaveChildren()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "DoesItemHaveChildren()"
  },
  {
    "label": "Private_OnExpanderArrowShiftClicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Private_OnExpanderArrowShiftClicked()"
  },
  {
    "label": "GetSelectionMode()",
    "kind": "Method",
    "detail": "Function (} ESelectionMode::Type)",
    "insertText": "GetSelectionMode()"
  },
  {
    "label": "GetRowSizeForColumn()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetRowSizeForColumn(const FName& InColumnName)"
  },
  {
    "label": "ToggleExpansion()",
    "kind": "Method",
    "detail": "Function (} return false ; } void)",
    "insertText": "ToggleExpansion()"
  },
  {
    "label": "Private_SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SetItemExpansion(*MyItemPtr, !OwnerTable->Private_IsItemExpanded(*MyItemPtr))"
  },
  {
    "label": "IsItemSelected()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "IsItemSelected()"
  },
  {
    "label": "GetWiresNeededByDepth()",
    "kind": "Method",
    "detail": "Function (} return false ; } TBitArray<>)",
    "insertText": "GetWiresNeededByDepth()"
  },
  {
    "label": "IsLastChild()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLastChild()"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(MyGeometry, MouseEvent)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnHovered .)",
    "insertText": "ExecuteIfBound(*WidgetObject)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} } FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "Private_OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_OnItemDoubleClicked(*MyItemPtr)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "Unhandled()"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (bProcessingSelectionTouch = true ; return)",
    "insertText": "Handled() .DetectDrag(SharedThis(this), EKeys::LeftMouseButton)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "OnTouchEnded(MyGeometry, InTouchEvent)"
  },
  {
    "label": "Private_IsItemSelected()",
    "kind": "Method",
    "detail": "Function (const bool bIsSelected = OwnerTable ->)",
    "insertText": "Private_IsItemSelected(*MyItemPtr)"
  },
  {
    "label": "Private_ClearSelection()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_ClearSelection()"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (} OwnerTable ->)",
    "insertText": "Private_SetItemSelection(*MyItemPtr, true, true)"
  },
  {
    "label": "Private_SignalSelectionChanged()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SignalSelectionChanged(ESelectInfo::OnMouseClick)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (Reply =)",
    "insertText": "Handled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SelectionMode == ESelectionMode::SingleToggle || SelectionMode == ESelectionMode::Multi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(OwnerTable->Private_OnItemClicked(*MyItemPtr))"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (} } } return Reply ; } FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (bProcessingSelectionTouch = false ; return OwnerTable ?)",
    "insertText": "Handled().CaptureMouse(OwnerTable->AsWidget()) : FReply::Unhandled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(HasMouseCapture() && bChangedSelectionOnMouseDown)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "OnDragDetected(MyGeometry, MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (bChangedSelectionOnMouseDown = false ; FReply Reply =)",
    "insertText": "OnMouseButtonDown(MyGeometry, MouseEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const ItemType& MyItem =* MyItemPtr ;)",
    "insertText": "if(!OwnerTable->Private_IsItemSelected(MyItem))"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (} OwnerTable ->)",
    "insertText": "Private_SetItemSelection(MyItem, true, true)"
  },
  {
    "label": "Handled()",
    "kind": "Method",
    "detail": "Function (bChangedSelectionOnMouseDown = true ; } } Reply =)",
    "insertText": "Handled() .DetectDrag(SharedThis(this), EKeys::LeftMouseButton) .CaptureMouse(SharedThis(this))"
  },
  {
    "label": "SetUserFocus()",
    "kind": "Method",
    "detail": "Function (Reply .)",
    "insertText": "SetUserFocus(OwnerTable->AsWidget(), EFocusCause::Mouse)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} } } } } return Reply ; } FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "OnMouseButtonUp(MyGeometry, MouseEvent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSignalSelectionChanged = bChangedSelectionOnMouseDown ;)",
    "insertText": "if(!bChangedSelectionOnMouseDown && IsItemSelectable() && MyGeometry.IsUnderLocation(MouseEvent.GetScreenSpacePosition()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSignalSelectionChanged = true ; } else)",
    "insertText": "if(SelectionMode == ESelectionMode::Multi && OwnerTable->Private_GetNumSelectedItems() > 1 && OwnerTable->Private_IsItemSelected(*MyItemPtr))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSignalSelectionChanged = true ; } })",
    "insertText": "if(bSignalSelectionChanged)"
  },
  {
    "label": "ReleaseMouseCapture()",
    "kind": "Method",
    "detail": "Function (} Reply = Reply .)",
    "insertText": "ReleaseMouseCapture()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SelectionMode != ESelectionMode::None && MouseEvent.GetEffectingButton() == EKeys::RightMouseButton)"
  },
  {
    "label": "ItemType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STableViewBase> OwnerTableViewBase = StaticCastSharedPtr<SListView<)",
    "insertText": "ItemType(OwnerTable)"
  },
  {
    "label": "Private_OnItemRightClicked()",
    "kind": "Method",
    "detail": "Function (} OwnerTable ->)",
    "insertText": "Private_OnItemRightClicked(*MyItemPtr, MouseEvent)"
  },
  {
    "label": "InitObjectRowInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitObjectRowInternal(*WidgetObject, *MyItemPtr)"
  },
  {
    "label": "Private_SetItemSelection()",
    "kind": "Method",
    "detail": "Function (OwnerTable ->)",
    "insertText": "Private_SetItemSelection(*MyItemPtr, false, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsAppearingSelected = false ;)",
    "insertText": "if(WidgetObject)"
  },
  {
    "label": "ReleaseEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseEntry(*WidgetObject)"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnItemSelectionChanged(bool bIsItemSelected)"
  },
  {
    "label": "UpdateItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateItemSelection(*WidgetObject, bIsItemSelected)"
  },
  {
    "label": "IsItemSelectable()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsItemSelectable()"
  },
  {
    "label": "IUserListEntry()",
    "kind": "Method",
    "detail": "Function (IUserListEntry* NativeListEntryImpl = Cast<)",
    "insertText": "IUserListEntry(WidgetObject)"
  },
  {
    "label": "GetItemForThis()",
    "kind": "Method",
    "detail": "Function (} const TObjectPtrWrapTypeOf<ItemType>*)",
    "insertText": "GetItemForThis(const TSharedRef<ITypedTableView<ItemType>>& OwnerTable)"
  },
  {
    "label": "Private_ItemFromWidget()",
    "kind": "Method",
    "detail": "Function (const TObjectPtrWrapTypeOf<ItemType>* MyItemPtr = OwnerTable ->)",
    "insertText": "Private_ItemFromWidget(this)"
  },
  {
    "label": "InitObjectRowInternal()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } FOnRowHovered OnHovered ; FOnRowHovered OnUnhovered ; TWeakObjectPtr<UListViewBase> OwnerListView ; TWeakPtr<ITypedTableView<ItemType>> OwnerTablePtr ; private : void)",
    "insertText": "InitObjectRowInternal(UUserWidget& ListEntryWidget, ItemType ListItemObject)"
  },
  {
    "label": "InitObjectRowInternal()",
    "kind": "Method",
    "detail": "Function (} int32 IndexInList = INDEX_NONE ; bool bChangedSelectionOnMouseDown = false ; bool bIsAppearingSelected = false ; bool bProcessingSelectionTouch = false ; bool bAllowDragging ; } ; template<> void SObjectTableRow<UObject*)",
    "insertText": "InitObjectRowInternal(UUserWidget& ListEntryWidget, UObject* ListItemObject)"
  },
  {
    "label": "SetListItemObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetListItemObject(*WidgetObject, ListItemObject)"
  }
]