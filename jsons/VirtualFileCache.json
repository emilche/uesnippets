[
  {
    "label": "FVirtualFileCacheSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualFileCacheSettings"
  },
  {
    "label": "IVirtualFileCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IVirtualFileCache"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IO / IoDispatcher . h \" uint64 VFS_DEFAULT_BLOCK_SIZE = 8 1 9 2 ull ; uint64 VFS_BLOCK_FILE_SIZE = 2* 1 0 2 4 ull* 1 0 2 4 ull* 1 0 2 4 ull ; using VFCKey = FSHAHash ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FChunkEvictedDelegate, VFCKey)"
  },
  {
    "label": "IVirtualFileCache()",
    "kind": "Method",
    "detail": "Function (struct FVirtualFileCacheSettings { uint64 BlockSize = VFS_DEFAULT_BLOCK_SIZE ; uint64 BlockFileSize = VFS_BLOCK_FILE_SIZE ; uint64 NumBlockFiles = 1 ; FString OverrideDefaultDirectory ; bool bMultiThreaded = true ; uint64 RecentWriteLRUSize = 0 ; } ; struct IVirtualFileCache { ~)",
    "insertText": "IVirtualFileCache()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FVirtualFileCacheSettings& Context = {})"
  },
  {
    "label": "WriteData()",
    "kind": "Method",
    "detail": "Function (FIoStatus)",
    "insertText": "WriteData(VFCKey Id, const uint8* Data, uint64 DataSize)"
  },
  {
    "label": "ReadData()",
    "kind": "Method",
    "detail": "Function (TFuture<TArray<uint8>>)",
    "insertText": "ReadData(VFCKey Id, int64 ReadOffset = 0, int64 ReadSizeOrZero = 0)"
  },
  {
    "label": "DoesChunkExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesChunkExist(const VFCKey& Id)"
  },
  {
    "label": "EraseData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EraseData(VFCKey Id)"
  },
  {
    "label": "GetSizeForChunk()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<uint64>)",
    "insertText": "GetSizeForChunk(const VFCKey& Id)"
  },
  {
    "label": "CurrentFragmentation()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "CurrentFragmentation()"
  },
  {
    "label": "Defragment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Defragment()"
  },
  {
    "label": "GetTotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTotalSize()"
  },
  {
    "label": "GetUsedSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetUsedSize()"
  },
  {
    "label": "GetTotalMemCacheHits()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTotalMemCacheHits()"
  },
  {
    "label": "GetTotalMemCacheMisses()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetTotalMemCacheMisses()"
  },
  {
    "label": "CreateVirtualFileCache()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IVirtualFileCache,ESPMode::ThreadSafe>)",
    "insertText": "CreateVirtualFileCache()"
  }
]