[
  {
    "label": "FCounterAggregator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCounterAggregator"
  },
  {
    "label": "FCounterAggregator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Insights / TimingProfiler / ViewModels / StatsAggregator . h \" # include \" Insights / TimingProfiler / ViewModels / StatsNode . h \" namespace UE::Insights::TimingProfiler { class FCounterAggregator : public FStatsAggregator { public :)",
    "insertText": "FCounterAggregator() : FStatsAggregator(TEXT(\"Counters\"))"
  },
  {
    "label": "FCounterAggregator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FCounterAggregator()"
  },
  {
    "label": "ApplyResultsTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyResultsTo(const TMap<uint32, FStatsNodePtr>& StatsNodesIdMap)"
  },
  {
    "label": "ResetResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetResults()"
  },
  {
    "label": "CreateWorker()",
    "kind": "Method",
    "detail": "Function (protected : IStatsAggregationWorker*)",
    "insertText": "CreateWorker(TSharedPtr<const TraceServices::IAnalysisSession> InSession)"
  }
]