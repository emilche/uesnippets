[
  {
    "label": "DeltaAlgorithm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DeltaAlgorithm"
  },
  {
    "label": "GetTestResult()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_DELTAALGORITHM_H # define LLVM_ADT_DELTAALGORITHM_H # include<set> # include<vector> namespace llvm { class DeltaAlgorithm { public : typedef unsigned change_ty ; typedef std::set<change_ty> changeset_ty ; typedef std::vector<changeset_ty> changesetlist_ty ; private : std::set<changeset_ty> FailedTestsCache ; bool)",
    "insertText": "GetTestResult(const changeset_ty &Changes)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Split(const changeset_ty &S, changesetlist_ty &Res)"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (changeset_ty)",
    "insertText": "Delta(const changeset_ty &Changes, const changesetlist_ty &Sets)"
  },
  {
    "label": "Search()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Search(const changeset_ty &Changes, const changesetlist_ty &Sets, changeset_ty &Res)"
  },
  {
    "label": "UpdatedSearchState()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "UpdatedSearchState(const changeset_ty &Changes, const changesetlist_ty &Sets)"
  },
  {
    "label": "ExecuteOneTest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExecuteOneTest(const changeset_ty &S)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeltaAlgorithm&)",
    "insertText": "operator(const DeltaAlgorithm&)"
  },
  {
    "label": "DeltaAlgorithm()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "DeltaAlgorithm()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (changeset_ty)",
    "insertText": "Run(const changeset_ty &Changes)"
  }
]