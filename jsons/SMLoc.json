[
  {
    "label": "SMLoc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMLoc"
  },
  {
    "label": "SMRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMRange"
  },
  {
    "label": "SMLoc()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_SMLOC_H # define LLVM_SUPPORT_SMLOC_H # include<cassert> namespace llvm { class SMLoc { const char* Ptr ; public :)",
    "insertText": "SMLoc() : Ptr(nullptr)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "SMRange()",
    "kind": "Method",
    "detail": "Function (SMLoc L ; L . Ptr = Ptr ; return L ; } } ; class SMRange { public : SMLoc Start,End ;)",
    "insertText": "SMRange()"
  },
  {
    "label": "SMRange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SMRange(SMLoc St, SMLoc En) : Start(St), End(En)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Start.isValid() == End.isValid() && \"Start and end should either both be valid or both be invalid!\")"
  }
]