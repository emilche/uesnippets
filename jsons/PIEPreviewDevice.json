[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FPIEPreviewDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPIEPreviewDevice"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "DetermineScreenOrientationRequirements()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Margin . h \" # include \" PIEPreviewDeviceSpecification . h \" namespace ERHIFeatureLevel { enum Type : int ; } class FPIEPreviewDevice { private : TSharedPtr<FPIEPreviewDeviceSpecifications> DeviceSpecs ; int32 WindowWidth = 0 ; int32 WindowHeight = 0 ; int32 WindowTitleBarSize = 0 ; FMargin ViewportMargin ; bool bAllowRotation = true ; bool bDeviceFlipped = false ; float ResolutionScaleFactor = 1 . 0 f ; float DPIScaleFactor = 1 . 0 f ; bool bShowBezel = true ; bool bIgnoreContentScaleFactor = false ; class UTexture2D* BezelTexture = nullptr ; private : void)",
    "insertText": "DetermineScreenOrientationRequirements(bool& bNeedPortrait, bool& bNeedLandscape)"
  },
  {
    "label": "GetPreviewDeviceFeatureLevel()",
    "kind": "Method",
    "detail": "Function (ERHIFeatureLevel::Type)",
    "insertText": "GetPreviewDeviceFeatureLevel()"
  },
  {
    "label": "ApplyRHIOverrides()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ApplyRHIOverrides()"
  },
  {
    "label": "ComputeViewportSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeViewportSize(const bool bClampWindowSize)"
  },
  {
    "label": "FPIEPreviewDevice()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPIEPreviewDevice()"
  },
  {
    "label": "SetupDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupDevice(const int32 InWindowTitleBarSize)"
  },
  {
    "label": "ShutdownDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownDevice()"
  },
  {
    "label": "ApplyRHIPrerequisitesOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRHIPrerequisitesOverrides()"
  },
  {
    "label": "GetDeviceSpecs()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FPIEPreviewDeviceSpecifications>)",
    "insertText": "GetDeviceSpecs()"
  },
  {
    "label": "GetViewportMargin()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetViewportMargin()"
  },
  {
    "label": "GetWindowWidth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowWidth()"
  },
  {
    "label": "GetWindowHeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowHeight()"
  },
  {
    "label": "GetWindowClientWidth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowClientWidth()"
  },
  {
    "label": "GetWindowClientHeight()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowClientHeight()"
  },
  {
    "label": "IsDeviceFlipped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDeviceFlipped()"
  },
  {
    "label": "SwitchOrientation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwitchOrientation(const bool bClampWindowSize)"
  },
  {
    "label": "ScaleResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleResolution(const float ScreenFactor, const float DPIFactor, const bool bClampWindowSize)"
  },
  {
    "label": "SetBezelVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBezelVisibility(const bool bBezelVisible, const bool bClampWindowSize)"
  },
  {
    "label": "GetBezelVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBezelVisibility()"
  },
  {
    "label": "GetResolutionScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetResolutionScale()"
  },
  {
    "label": "GetDeviceDefaultResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceDefaultResolution(int32& ScreenWidth, int32& ScreenHeight)"
  },
  {
    "label": "IsRotationAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRotationAllowed()"
  },
  {
    "label": "SetIgnoreMobileContentScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreMobileContentScaleFactor(bool bIgnore)"
  },
  {
    "label": "GetIgnoreMobileContentScaleFactor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIgnoreMobileContentScaleFactor()"
  },
  {
    "label": "ComputeDeviceResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeDeviceResolution(int32& ScreenWidth, int32& ScreenHeight)"
  },
  {
    "label": "ComputeContentScaledResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeContentScaledResolution(int32& ScreenWidth, int32& ScreenHeight)"
  },
  {
    "label": "GetProfile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetProfile()"
  },
  {
    "label": "GetSelectorPropertyValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSelectorPropertyValue(const FName& PropertyType, FString& PropertyValueOUT)"
  },
  {
    "label": "GetBezelTexture()",
    "kind": "Method",
    "detail": "Function (UTexture2D*)",
    "insertText": "GetBezelTexture()"
  },
  {
    "label": "ComputeViewportSize()",
    "kind": "Method",
    "detail": "Function (bDeviceFlipped = ! bDeviceFlipped ;)",
    "insertText": "ComputeViewportSize(bClampWindowSize)"
  }
]