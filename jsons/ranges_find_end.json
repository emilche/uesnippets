[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Pred",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Pred"
  },
  {
    "label": "_Proj1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj1"
  },
  {
    "label": "_Proj2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj2"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_FIND_END_H # define _LIBCPP___ALGORITHM_RANGES_FIND_END_H # include<__algorithm / find_end . h> # include<__algorithm / iterator_operations . h> # include<__algorithm / ranges_iterator_concept . h> # include<__config> # include<__functional / identity . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / indirectly_comparable . h> # include<__iterator / iterator_traits . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / subrange . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __find_end { struct __fn { template<forward_iterator _Iter1,sentinel_for<_Iter1> _Sent1,forward_iterator _Iter2,sentinel_for<_Iter2> _Sent2,class _Pred = ranges::equal_to,class _Proj1 = identity,class _Proj2 = identity> requires indirectly_comparable<_Iter1,_Iter2,_Pred,_Proj1,_Proj2> _LIBCPP_HIDE_FROM_ABI subrange<_Iter1>)",
    "insertText": "operator()(_Iter1 __first1, _Sent1 __last1, _Iter2 __first2, _Sent2 __last2, _Pred __pred = {}, _Proj1 __proj1 = {}, _Proj2 __proj2 = {})"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__find_end_impl<)",
    "insertText": "_RangeAlgPolicy(__first1, __last1, __first2, __last2, __pred, __proj1, __proj2, __iterator_concept<_Iter1>(), __iterator_concept<_Iter2>())"
  },
  {
    "label": "_RangeAlgPolicy()",
    "kind": "Method",
    "detail": "Function (auto __ret = std::__find_end_impl<)",
    "insertText": "_RangeAlgPolicy(ranges::begin(__range1), ranges::end(__range1), ranges::begin(__range2), ranges::end(__range2), __pred, __proj1, __proj2, __iterator_concept<iterator_t<_Range1>>(), __iterator_concept<iterator_t<_Range2>>())"
  }
]