[
  {
    "label": "jpeg_comp_master",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_comp_master"
  },
  {
    "label": "jpeg_c_main_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_c_main_controller"
  },
  {
    "label": "jpeg_c_prep_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_c_prep_controller"
  },
  {
    "label": "jpeg_c_coef_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_c_coef_controller"
  },
  {
    "label": "jpeg_color_converter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_color_converter"
  },
  {
    "label": "jpeg_downsampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_downsampler"
  },
  {
    "label": "jpeg_forward_dct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_forward_dct"
  },
  {
    "label": "jpeg_entropy_encoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_entropy_encoder"
  },
  {
    "label": "jpeg_marker_writer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_marker_writer"
  },
  {
    "label": "jpeg_decomp_master",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_decomp_master"
  },
  {
    "label": "jpeg_input_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_input_controller"
  },
  {
    "label": "jpeg_d_main_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_d_main_controller"
  },
  {
    "label": "jpeg_d_coef_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_d_coef_controller"
  },
  {
    "label": "jpeg_d_post_controller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_d_post_controller"
  },
  {
    "label": "jpeg_marker_reader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_marker_reader"
  },
  {
    "label": "jpeg_entropy_decoder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_entropy_decoder"
  },
  {
    "label": "jpeg_inverse_dct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_inverse_dct"
  },
  {
    "label": "jpeg_upsampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_upsampler"
  },
  {
    "label": "jpeg_color_deconverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_color_deconverter"
  },
  {
    "label": "jpeg_color_quantizer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "jpeg_color_quantizer"
  },
  {
    "label": "LEFT_SHIFT()",
    "kind": "Method",
    "detail": "Function (typedef enum { JBUF_PASS_THRU,JBUF_SAVE_SOURCE,JBUF_CRANK_DEST,JBUF_SAVE_AND_PASS } J_BUF_MODE ; # define CSTATE_START 1 0 0 # define CSTATE_SCANNING 1 0 1 # define CSTATE_RAW_OK 1 0 2 # define CSTATE_WRCOEFS 1 0 3 # define DSTATE_START 2 0 0 # define DSTATE_INHEADER 2 0 1 # define DSTATE_READY 2 0 2 # define DSTATE_PRELOAD 2 0 3 # define DSTATE_PRESCAN 2 0 4 # define DSTATE_SCANNING 2 0 5 # define DSTATE_RAW_OK 2 0 6 # define DSTATE_BUFIMAGE 2 0 7 # define DSTATE_BUFPOST 2 0 8 # define DSTATE_RDCOEFS 2 0 9 # define DSTATE_STOPPING 2 1 0 typedef long JLONG ; # ifdef __UINTPTR_TYPE__ typedef __UINTPTR_TYPE__ JUINTPTR ; # else typedef size_t JUINTPTR ; # endif # define)",
    "insertText": "LEFT_SHIFT(a, b) ((JLONG)((unsigned long)(a) << (b)))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*prepare_for_pass) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*pass_startup) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*finish_pass) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (boolean call_pass_startup ; boolean is_last_pass ; } ; struct jpeg_c_main_controller {)",
    "insertText": "void(*start_pass) (j_compress_ptr cinfo, J_BUF_MODE pass_mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*process_data) (j_compress_ptr cinfo, JSAMPARRAY input_buf, JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*pre_process_data) (j_compress_ptr cinfo, JSAMPARRAY input_buf, JDIMENSION *in_row_ctr, JDIMENSION in_rows_avail, JSAMPIMAGE output_buf, JDIMENSION *out_row_group_ctr, JDIMENSION out_row_groups_avail)"
  },
  {
    "label": "boolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boolean(*compress_data) (j_compress_ptr cinfo, JSAMPIMAGE input_buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct jpeg_color_converter {)",
    "insertText": "void(*start_pass) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*color_convert) (j_compress_ptr cinfo, JSAMPARRAY input_buf, JSAMPIMAGE output_buf, JDIMENSION output_row, int num_rows)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*downsample) (j_compress_ptr cinfo, JSAMPIMAGE input_buf, JDIMENSION in_row_index, JSAMPIMAGE output_buf, JDIMENSION out_row_group_index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*forward_DCT) (j_compress_ptr cinfo, jpeg_component_info *compptr, JSAMPARRAY sample_data, JBLOCKROW coef_blocks, JDIMENSION start_row, JDIMENSION start_col, JDIMENSION num_blocks)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct jpeg_entropy_encoder {)",
    "insertText": "void(*start_pass) (j_compress_ptr cinfo, boolean gather_statistics)"
  },
  {
    "label": "boolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boolean(*encode_mcu) (j_compress_ptr cinfo, JBLOCKROW *MCU_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct jpeg_marker_writer {)",
    "insertText": "void(*write_file_header) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*write_frame_header) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*write_scan_header) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*write_file_trailer) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*write_tables_only) (j_compress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*write_marker_header) (j_compress_ptr cinfo, int marker, unsigned int datalen)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*write_marker_byte) (j_compress_ptr cinfo, int val)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct jpeg_decomp_master {)",
    "insertText": "void(*prepare_for_output_pass) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*finish_output_pass) (j_decompress_ptr cinfo)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (boolean is_dummy_pass ; JDIMENSION first_iMCU_col ; JDIMENSION last_iMCU_col ; JDIMENSION first_MCU_col [ MAX_COMPONENTS ] ; JDIMENSION last_MCU_col [ MAX_COMPONENTS ] ; boolean jinit_upsampler_no_alloc ; JDIMENSION last_good_iMCU_row ; } ; struct jpeg_input_controller {)",
    "insertText": "int(*consume_input) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*reset_input_controller) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*start_input_pass) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*finish_input_pass) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (boolean has_multiple_scans ; boolean eoi_reached ; } ; struct jpeg_d_main_controller {)",
    "insertText": "void(*start_pass) (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*process_data) (j_decompress_ptr cinfo, JSAMPARRAY output_buf, JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*consume_data) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*start_output_pass) (j_decompress_ptr cinfo)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*decompress_data) (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*post_process_data) (j_decompress_ptr cinfo, JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr, JDIMENSION in_row_groups_avail, JSAMPARRAY output_buf, JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct jpeg_marker_reader {)",
    "insertText": "void(*reset_marker_reader) (j_decompress_ptr cinfo)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*read_markers) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (jpeg_marker_parser_method read_restart_marker ; boolean saw_SOI ; boolean saw_SOF ; int next_restart_num ; unsigned int discarded_bytes ; } ; struct jpeg_entropy_decoder {)",
    "insertText": "void(*start_pass) (j_decompress_ptr cinfo)"
  },
  {
    "label": "boolean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "boolean(*decode_mcu) (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (boolean insufficient_data ; } ; typedef)",
    "insertText": "void(*inverse_DCT_method_ptr) (j_decompress_ptr cinfo, jpeg_component_info *compptr, JCOEFPTR coef_block, JSAMPARRAY output_buf, JDIMENSION output_col)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*upsample) (j_decompress_ptr cinfo, JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr, JDIMENSION in_row_groups_avail, JSAMPARRAY output_buf, JDIMENSION *out_row_ctr, JDIMENSION out_rows_avail)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*color_convert) (j_decompress_ptr cinfo, JSAMPIMAGE input_buf, JDIMENSION input_row, JSAMPARRAY output_buf, int num_rows)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; struct jpeg_color_quantizer {)",
    "insertText": "void(*start_pass) (j_decompress_ptr cinfo, boolean is_pre_scan)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*color_quantize) (j_decompress_ptr cinfo, JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*finish_pass) (j_decompress_ptr cinfo)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*new_color_map) (j_decompress_ptr cinfo)"
  },
  {
    "label": "MAX()",
    "kind": "Method",
    "detail": "Function (} ; # undef MAX # define)",
    "insertText": "MAX(a, b) ((a) > (b) ? (a) : (b)) #undef MIN #define MIN(a, b) ((a) < (b) ? (a) : (b))"
  },
  {
    "label": "RIGHT_SHIFT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RIGHT_SHIFT(x, shft) \\ ((shift_temp = (x)) < 0 ? \\ (shift_temp >> (shft)) | ((~((JLONG)0)) << (32 - (shft))) : \\ (shift_temp >> (shft))) #else #define SHIFT_TEMPS #define RIGHT_SHIFT(x, shft) ((x) >> (shft)) #endif EXTERN(void) jinit_compress_master(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_c_master_control(j_compress_ptr cinfo, boolean transcode_only)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_c_main_controller(j_compress_ptr cinfo, boolean need_full_buffer)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_c_prep_controller(j_compress_ptr cinfo, boolean need_full_buffer)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_c_coef_controller(j_compress_ptr cinfo, boolean need_full_buffer)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_color_converter(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_downsampler(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_forward_dct(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_huff_encoder(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_phuff_encoder(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_arith_encoder(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_marker_writer(j_compress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_master_decompress(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_d_main_controller(j_decompress_ptr cinfo, boolean need_full_buffer)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_d_coef_controller(j_decompress_ptr cinfo, boolean need_full_buffer)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_d_post_controller(j_decompress_ptr cinfo, boolean need_full_buffer)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_input_controller(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_marker_reader(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_huff_decoder(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_phuff_decoder(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_arith_decoder(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_inverse_dct(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_upsampler(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_color_deconverter(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_1pass_quantizer(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_2pass_quantizer(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_merged_upsampler(j_decompress_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jinit_memory_mgr(j_common_ptr cinfo)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(long) jdiv_round_up(long a, long b)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(long) jround_up(long a, long b)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jcopy_sample_rows(JSAMPARRAY input_array, int source_row, JSAMPARRAY output_array, int dest_row, int num_rows, JDIMENSION num_cols)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jcopy_block_row(JBLOCKROW input_row, JBLOCKROW output_row, JDIMENSION num_blocks)"
  },
  {
    "label": "EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXTERN(void) jzero_far(void *target, size_t bytestozero)"
  }
]