[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "DxilModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DxilModule"
  },
  {
    "label": "DxcBindingTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DxcBindingTable"
  },
  {
    "label": "Entry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Entry"
  },
  {
    "label": "ParseBindingTable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" dxc / DXIL / DxilConstants . h \" # include \" llvm / ADT / StringRef . h \" # include<map> # include<string> namespace llvm { class raw_ostream ; class Module ; } namespace hlsl { class DxilModule ; } namespace hlsl { struct DxcBindingTable { typedef std::pair<std::string,hlsl::DXIL::ResourceClass> Key ; struct Entry { unsigned index = UINT_MAX ; unsigned space = UINT_MAX ; } ; std::map<Key,Entry> entries ; } ; bool)",
    "insertText": "ParseBindingTable(llvm::StringRef fileName, llvm::StringRef content, llvm::raw_ostream &errors, DxcBindingTable *outTable)"
  },
  {
    "label": "WriteBindingTableToMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBindingTableToMetadata(llvm::Module &M, const DxcBindingTable &table)"
  },
  {
    "label": "ApplyBindingTableFromMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyBindingTableFromMetadata(hlsl::DxilModule &DM)"
  }
]