[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___RANGES_EMPTY_H # define _LIBCPP___RANGES_EMPTY_H # include<__concepts / class_or_enum . h> # include<__config> # include<__iterator / concepts . h> # include<__ranges / access . h> # include<__ranges / size . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "requires()",
    "kind": "Method",
    "detail": "Function (namespace __empty { template<class _Tp> concept __member_empty = __workaround_52970<_Tp>&&)",
    "insertText": "requires(_Tp&& __t)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(__t.empty())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "size(__t)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bool(ranges::begin(__t) == ranges::end(__t))"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (forward_iterator)",
    "insertText": "begin(__t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct __fn { template<__member_empty _Tp> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(bool(__t.empty())))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<__can_invoke_size _Tp> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(ranges::size(__t)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<__can_compare_begin_end _Tp> [ [ nodiscard ] ] _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "operator()(_Tp&& __t) const noexcept(noexcept(bool(ranges::begin(__t) == ranges::end(__t))))"
  }
]