[
  {
    "label": "HORDE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HORDE_API"
  },
  {
    "label": "FStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackEntry"
  },
  {
    "label": "FChunkNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IO / IoHash . h \" # include \" . . / BlobType . h \" # include \" . . / BlobHandle . h \" # include \" . . / BlobWriter . h \" # include \" . . / . . / SharedBufferView . h \" # include \" Hash / Blake3 . h \" # include \" Hash / BuzHash . h \" struct FChunkingOptions { const FChunkingOptions Default ; int32 MinChunkSize = 4* 1 0 2 4 ; int32 TargetChunkSize = 6 4* 1 0 2 4 ; int32 MaxChunkSize = 1 2 8* 1 0 2 4 ; } ; class FChunkNode { public : const FBlobType LeafBlobType ; const FBlobType InteriorBlobType ; TArray<FBlobHandleWithHash> Children ; FSharedBufferView Data ;)",
    "insertText": "FChunkNode()"
  },
  {
    "label": "FChunkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChunkNode(TArray<FBlobHandleWithHash> InChildren, FSharedBufferView InData)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (FChunkNode)",
    "insertText": "Read(FBlob Blob)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (FBlobHandleWithHash)",
    "insertText": "Write(FBlobWriter& Writer)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (FBlobHandleWithHash)",
    "insertText": "Write(FBlobWriter& Writer, const TArrayView<const FBlobHandleWithHash>& Children, FMemoryView Data)"
  },
  {
    "label": "FChunkNodeReader()",
    "kind": "Method",
    "detail": "Function (} ; class FChunkNodeReader { public :)",
    "insertText": "FChunkNodeReader(FBlob Blob)"
  },
  {
    "label": "FChunkNodeReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChunkNodeReader(const FBlobHandle& Handle)"
  },
  {
    "label": "FChunkNodeReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChunkNodeReader()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (FMemoryView)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance(int32 Length)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "FStackEntry()",
    "kind": "Method",
    "detail": "Function (private : struct FStackEntry { FBlob Blob ; size_t Position ;)",
    "insertText": "FStackEntry(FBlob InBlob) : Blob(MoveTemp(InBlob)) , Position(0)"
  },
  {
    "label": "FChunkNodeWriter()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FStackEntry> Stack ; } ; class FChunkNodeWriter { public :)",
    "insertText": "FChunkNodeWriter(FBlobWriter& InWriter, const FChunkingOptions& InOptions = FChunkingOptions::Default)"
  },
  {
    "label": "FChunkNodeWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FChunkNodeWriter()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(FMemoryView Data)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (FBlobHandleWithHash)",
    "insertText": "Flush(FIoHash& OutStreamHash)"
  },
  {
    "label": "WriteNode()",
    "kind": "Method",
    "detail": "Function (private : FBlobWriter& Writer ; const FChunkingOptions& Options ; FBuzHash RollingHash ; uint32 Threshold ; int32 NodeLength ; FBlake3 StreamHasher ; TArray<FBlobHandleWithHash> Nodes ; void)",
    "insertText": "WriteNode()"
  }
]