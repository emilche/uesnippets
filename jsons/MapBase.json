[
  {
    "label": "MapBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapBase"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MAPBASE_H # define EIGEN_MAPBASE_H # define)",
    "insertText": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) \\ EIGEN_STATIC_ASSERT((int(internal::evaluator<Derived>::Flags) & LinearAccessBit) || Derived::IsVectorAtCompileTime, \\ YOU_ARE_TRYING_TO_USE_AN_INDEX_BASED_ACCESSOR_ON_AN_EXPRESSION_THAT_DOES_NOT_SUPPORT_THAT)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (template<Derived> class MapBase<Derived,ReadOnlyAccessors> : public internal::dense_xpr_base<Derived>::type { public : typedef internal::dense_xpr_base<Derived>::type Base ; enum { RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,InnerStrideAtCompileTime = internal::traits<Derived>::InnerStrideAtCompileTime,SizeAtCompileTime = Base::SizeAtCompileTime } ; typedef internal::traits<Derived>::StorageKind StorageKind ; typedef internal::traits<Derived>::Scalar Scalar ; typedef internal::packet_traits<Scalar>::type PacketScalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef internal::conditional<)",
    "insertText": "bool(internal::is_lvalue<Derived>::value)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (using Base::derived ; using Base::MaxRowsAtCompileTime ; using Base::MaxColsAtCompileTime ; using Base::MaxSizeAtCompileTime ; using Base::IsVectorAtCompileTime ; using Base::Flags ; using Base::IsRowMajor ; using Base::rows ; using Base::cols ; using Base::size ; using Base::coeff ; using Base::coeffRef ; using Base::lazyAssign ; using Base::eval ; using Base::innerStride ; using Base::outerStride ; using Base::rowStride ; using Base::colStride ; using Base::operator = ; typedef Base::CoeffReturnType CoeffReturnType ; EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar*)",
    "insertText": "data()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar&)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) return m_data[index * innerStride()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar&)",
    "insertText": "coeffRef(Index rowId, Index colId)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) return this->m_data[index * innerStride()"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> PacketScalar)",
    "insertText": "packet(Index rowId, Index colId)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode> PacketScalar)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) return internal::ploadt<PacketScalar, LoadMode>(m_data + index * innerStride())"
  },
  {
    "label": "MapBase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "MapBase(PointerType dataPtr) : m_data(dataPtr), m_rows(RowsAtCompileTime), m_cols(ColsAtCompileTime)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_FIXED_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_FIXED_SIZE(Derived) checkSanity<Derived>()"
  },
  {
    "label": "MapBase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "MapBase(PointerType dataPtr, Index vecSize) : m_data(dataPtr), m_rows(RowsAtCompileTime == Dynamic ? vecSize : Index(RowsAtCompileTime)), m_cols(ColsAtCompileTime == Dynamic ? vecSize : Index(ColsAtCompileTime))"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(Derived) eigen_assert(vecSize >= 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(dataPtr == 0 || SizeAtCompileTime == Dynamic || SizeAtCompileTime == vecSize)"
  },
  {
    "label": "MapBase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "MapBase(PointerType dataPtr, Index rows, Index cols) : m_data(dataPtr), m_rows(rows), m_cols(cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((dataPtr == 0) || ( rows >= 0 && (RowsAtCompileTime == Dynamic || RowsAtCompileTime == rows) && cols >= 0 && (ColsAtCompileTime == Dynamic || ColsAtCompileTime == cols)))"
  },
  {
    "label": "EIGEN_DEFAULT_COPY_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_MAPBASE_PLUGIN # include EIGEN_MAPBASE_PLUGIN # endif protected :)",
    "insertText": "EIGEN_DEFAULT_COPY_CONSTRUCTOR(MapBase) EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MapBase) template<typename T> EIGEN_DEVICE_FUNC void checkSanity(typename internal::enable_if<(internal::traits<T>::Alignment>0),void*>::type = 0)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (# if EIGEN_MAX_ALIGN_BYTES> 0 const Index minInnerStride = InnerStrideAtCompileTime = = Dynamic ? 1 :)",
    "insertText": "Index(InnerStrideAtCompileTime)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(minInnerStride)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(( ((internal::UIntPtr(m_data) % internal::traits<Derived>::Alignment) == 0) || (cols() * rows() * minInnerStride * sizeof(Scalar)) < internal::traits<Derived>::Alignment ) && \"data is not aligned\")"
  },
  {
    "label": "checkSanity()",
    "kind": "Method",
    "detail": "Function (# endif } template<T> EIGEN_DEVICE_FUNC void)",
    "insertText": "checkSanity(typename internal::enable_if<internal::traits<T>::Alignment==0,void*>::type = 0)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> void)",
    "insertText": "writePacket(Index row, Index col, const PacketScalar& val)"
  },
  {
    "label": "StoreMode()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<Scalar,PacketScalar,)",
    "insertText": "StoreMode(this->m_data + (col * colStride() + row * rowStride()), val)"
  },
  {
    "label": "writePacket()",
    "kind": "Method",
    "detail": "Function (} template<int StoreMode> void)",
    "insertText": "writePacket(Index index, const PacketScalar& val)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_INDEX_BASED_ACCESS(Derived) internal::pstoret<Scalar, PacketScalar, StoreMode> (this->m_data + index * innerStride(), val)"
  },
  {
    "label": "MapBase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "MapBase(PointerType dataPtr) : Base(dataPtr)"
  },
  {
    "label": "MapBase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "MapBase(PointerType dataPtr, Index vecSize) : Base(dataPtr, vecSize)"
  },
  {
    "label": "MapBase()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC)",
    "insertText": "MapBase(PointerType dataPtr, Index rows, Index cols) : Base(dataPtr, rows, cols)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "operator(const MapBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReadOnlyMapBase::)",
    "insertText": "operator(other)"
  },
  {
    "label": "EIGEN_DEFAULT_COPY_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} using ReadOnlyMapBase::Base::operator = ; protected :)",
    "insertText": "EIGEN_DEFAULT_COPY_CONSTRUCTOR(MapBase) EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MapBase)"
  }
]