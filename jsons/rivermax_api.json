[
  {
    "label": "in_addr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "in_addr"
  },
  {
    "label": "sockaddr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sockaddr"
  },
  {
    "label": "rmx_get_version_numbers()",
    "kind": "Method",
    "detail": "Function (# ifndef SRC_RIVERMAX_API_H_ # define SRC_RIVERMAX_API_H_ # include \" rivermax_defs . h \" # include \" rivermax_deprecated . h \" # ifdef __cplusplus \" C \" { # endif __export const rmx_version*)",
    "insertText": "rmx_get_version_numbers(void)"
  },
  {
    "label": "rmx_get_version_string()",
    "kind": "Method",
    "detail": "Function (__export const char*)",
    "insertText": "rmx_get_version_string(void)"
  },
  {
    "label": "rmx_mark_cpu_for_affinity()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE void)",
    "insertText": "rmx_mark_cpu_for_affinity(uint64_t *bitmask, size_t core_number)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t bits_in_dword =)",
    "insertText": "sizeof(*bitmask)"
  },
  {
    "label": "dword_index()",
    "kind": "Method",
    "detail": "Function (size_t dword_index = core_number / bits_in_dword ; size_t in_dword_offset = core_number % bits_in_dword ; bitmask [)",
    "insertText": "dword_index(1ULL << in_dword_offset)"
  },
  {
    "label": "rmx_set_cpu_affinity()",
    "kind": "Method",
    "detail": "Function (} } __export rmx_status)",
    "insertText": "rmx_set_cpu_affinity(const uint64_t *bitmask, size_t core_count)"
  },
  {
    "label": "rmx_enable_system_signal_handling()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_enable_system_signal_handling(void)"
  },
  {
    "label": "_rmx_init()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "_rmx_init(const rmx_version *policy)"
  },
  {
    "label": "rmx_init()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE rmx_status)",
    "insertText": "rmx_init(void)"
  },
  {
    "label": "_rmx_init()",
    "kind": "Method",
    "detail": "Function (const rmx_version policy = { RMX_VERSION_MAJOR,RMX_VERSION_MINOR,RMX_VERSION_PATCH } ; return)",
    "insertText": "_rmx_init(&policy)"
  },
  {
    "label": "rmx_cleanup()",
    "kind": "Method",
    "detail": "Function (} __export rmx_status)",
    "insertText": "rmx_cleanup(void)"
  },
  {
    "label": "rmx_get_device_list()",
    "kind": "Method",
    "detail": "Function (__export size_t)",
    "insertText": "rmx_get_device_list(rmx_device_list **list)"
  },
  {
    "label": "rmx_free_device_list()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_free_device_list(rmx_device_list *list)"
  },
  {
    "label": "rmx_get_device_count()",
    "kind": "Method",
    "detail": "Function (__export size_t)",
    "insertText": "rmx_get_device_count(const rmx_device_list *list)"
  },
  {
    "label": "rmx_get_device()",
    "kind": "Method",
    "detail": "Function (__export const rmx_device*)",
    "insertText": "rmx_get_device(const rmx_device_list *list, size_t index)"
  },
  {
    "label": "rmx_get_device_interface_name()",
    "kind": "Method",
    "detail": "Function (__export const char*)",
    "insertText": "rmx_get_device_interface_name(const rmx_device *device)"
  },
  {
    "label": "rmx_get_device_ip_count()",
    "kind": "Method",
    "detail": "Function (__export size_t)",
    "insertText": "rmx_get_device_ip_count(const rmx_device *device)"
  },
  {
    "label": "rmx_get_device_ip_address()",
    "kind": "Method",
    "detail": "Function (__export const rmx_ip_addr*)",
    "insertText": "rmx_get_device_ip_address(const rmx_device *device, size_t index)"
  },
  {
    "label": "rmx_get_device_mac_address()",
    "kind": "Method",
    "detail": "Function (__export const uint8_t*)",
    "insertText": "rmx_get_device_mac_address(const rmx_device *device)"
  },
  {
    "label": "rmx_get_device_id()",
    "kind": "Method",
    "detail": "Function (__export uint32_t)",
    "insertText": "rmx_get_device_id(const rmx_device *device)"
  },
  {
    "label": "rmx_get_device_serial_number()",
    "kind": "Method",
    "detail": "Function (__export const char*)",
    "insertText": "rmx_get_device_serial_number(const rmx_device *device)"
  },
  {
    "label": "rmx_retrieve_device_iface()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_retrieve_device_iface(rmx_device_iface *device_iface, const rmx_ip_addr *ip)"
  },
  {
    "label": "rmx_retrieve_device_iface_ipv4()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE rmx_status)",
    "insertText": "rmx_retrieve_device_iface_ipv4(rmx_device_iface *device_iface, const struct in_addr *ip)"
  },
  {
    "label": "rmx_retrieve_device_iface()",
    "kind": "Method",
    "detail": "Function (rmx_ip_addr ip_addr ; ip_addr . family = AF_INET ; ip_addr . addr . ipv4 =* ip ; return)",
    "insertText": "rmx_retrieve_device_iface(device_iface, &ip_addr)"
  },
  {
    "label": "rmx_clear_device_capabilities_enquiry()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE void)",
    "insertText": "rmx_clear_device_capabilities_enquiry(rmx_device_capabilities *caps)"
  },
  {
    "label": "attributes()",
    "kind": "Method",
    "detail": "Function (rmx_attribs_metadata*)",
    "insertText": "attributes(rmx_attribs_metadata*)(void*)"
  },
  {
    "label": "rmx_mark_device_capability_for_enquiry()",
    "kind": "Method",
    "detail": "Function (attributes -> bitmap = 0 ULL ; } } __RMX_INLINE void)",
    "insertText": "rmx_mark_device_capability_for_enquiry(rmx_device_capabilities *caps, rmx_device_capability capability)"
  },
  {
    "label": "bitmap()",
    "kind": "Method",
    "detail": "Function (attributes ->)",
    "insertText": "bitmap(1ULL << capability)"
  },
  {
    "label": "rmx_enquire_device_capabilities()",
    "kind": "Method",
    "detail": "Function (} } __export rmx_status)",
    "insertText": "rmx_enquire_device_capabilities(const rmx_device_iface *device_iface, rmx_device_capabilities *caps)"
  },
  {
    "label": "rmx_is_device_capability_supported()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE bool)",
    "insertText": "rmx_is_device_capability_supported(const rmx_device_capabilities *caps, rmx_device_capability capability)"
  },
  {
    "label": "rmx_clear_device_config_attributes()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE void)",
    "insertText": "rmx_clear_device_config_attributes(rmx_device_config *config)"
  },
  {
    "label": "rmx_set_device_config_attribute()",
    "kind": "Method",
    "detail": "Function (attributes -> bitmap = 0 ULL ; } } __RMX_INLINE void)",
    "insertText": "rmx_set_device_config_attribute(rmx_device_config *config, rmx_device_config_attribute attribute)"
  },
  {
    "label": "bitmap()",
    "kind": "Method",
    "detail": "Function (attributes ->)",
    "insertText": "bitmap(1ULL << attribute)"
  },
  {
    "label": "rmx_apply_device_config()",
    "kind": "Method",
    "detail": "Function (} } __export rmx_status)",
    "insertText": "rmx_apply_device_config(const rmx_device_iface *device_iface, rmx_device_config *config)"
  },
  {
    "label": "rmx_revert_device_config()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_revert_device_config(const rmx_device_iface *device_iface, rmx_device_config *config)"
  },
  {
    "label": "rmx_init_user_clock()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_init_user_clock(rmx_user_clock_params *params)"
  },
  {
    "label": "rmx_set_user_clock_handler()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_set_user_clock_handler(rmx_user_clock_params *params, rmx_user_clock_handler handler)"
  },
  {
    "label": "rmx_set_user_clock_context()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_set_user_clock_context(rmx_user_clock_params *params, void *ctx)"
  },
  {
    "label": "rmx_use_user_clock()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_use_user_clock(const rmx_user_clock_params *params)"
  },
  {
    "label": "rmx_init_ptp_clock()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_init_ptp_clock(rmx_ptp_clock_params *params)"
  },
  {
    "label": "rmx_set_ptp_clock_device()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_set_ptp_clock_device(rmx_ptp_clock_params *params, const rmx_device_iface *device_iface)"
  },
  {
    "label": "rmx_use_ptp_clock()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_use_ptp_clock(const rmx_ptp_clock_params *params)"
  },
  {
    "label": "rmx_get_time()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_get_time(rmx_time_type type, uint64_t *time)"
  },
  {
    "label": "rmx_init_event_channel()",
    "kind": "Method",
    "detail": "Function (# ifdef __linux__ typedef int rmx_event_channel_handle ; # else typedef HANDLE rmx_event_channel_handle ; # endif __export void)",
    "insertText": "rmx_init_event_channel(rmx_event_channel_params *params, rmx_stream_id id)"
  },
  {
    "label": "rmx_set_event_channel_handle()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_set_event_channel_handle(rmx_event_channel_params *params, rmx_event_channel_handle *handle)"
  },
  {
    "label": "rmx_establish_event_channel()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_establish_event_channel(rmx_event_channel_params *params)"
  },
  {
    "label": "rmx_init_notification()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_init_notification(rmx_notification_params *params, rmx_stream_id id)"
  },
  {
    "label": "rmx_set_notification_overlapped()",
    "kind": "Method",
    "detail": "Function (# ifndef __linux__ __export void)",
    "insertText": "rmx_set_notification_overlapped(rmx_notification_params *params, OVERLAPPED *overlapped)"
  },
  {
    "label": "rmx_request_notification()",
    "kind": "Method",
    "detail": "Function (# endif __export rmx_status)",
    "insertText": "rmx_request_notification(rmx_notification_params *params)"
  },
  {
    "label": "rmx_init_mem_registry()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_init_mem_registry(rmx_mem_reg_params *params, const rmx_device_iface *device_iface)"
  },
  {
    "label": "rmx_set_mem_registry_option()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_set_mem_registry_option(rmx_mem_reg_params *params, rmx_mem_reg_params_option option)"
  },
  {
    "label": "rmx_register_memory()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_register_memory(rmx_mem_region *mem, const rmx_mem_reg_params *params)"
  },
  {
    "label": "rmx_deregister_memory()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_deregister_memory(const rmx_mem_region *mem, const rmx_device_iface *device_iface)"
  },
  {
    "label": "rmx_input_init_stream()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_init_stream(rmx_input_stream_params *params, rmx_input_stream_params_type type)"
  },
  {
    "label": "rmx_input_set_mem_capacity_in_packets()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_mem_capacity_in_packets(rmx_input_stream_params *params, size_t count)"
  },
  {
    "label": "rmx_input_set_stream_nic_address()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_stream_nic_address(rmx_input_stream_params *params, const struct sockaddr *nic_address)"
  },
  {
    "label": "rmx_input_enable_stream_option()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_enable_stream_option(rmx_input_stream_params *params, rmx_input_option option)"
  },
  {
    "label": "rmx_input_set_mem_sub_block_count()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_mem_sub_block_count(rmx_input_stream_params *params, size_t count)"
  },
  {
    "label": "rmx_input_set_entry_size_range()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_entry_size_range(rmx_input_stream_params *params, size_t sub_block_id, size_t min_size, size_t max_size)"
  },
  {
    "label": "rmx_input_set_entry_uniform_size()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE void)",
    "insertText": "rmx_input_set_entry_uniform_size(rmx_input_stream_params *params, size_t sub_block_id, size_t size)"
  },
  {
    "label": "rmx_input_set_entry_size_range()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rmx_input_set_entry_size_range(params, sub_block_id, size, size)"
  },
  {
    "label": "rmx_input_determine_mem_layout()",
    "kind": "Method",
    "detail": "Function (} __export rmx_status)",
    "insertText": "rmx_input_determine_mem_layout(rmx_input_stream_params *params)"
  },
  {
    "label": "rmx_input_get_mem_capacity_in_packets()",
    "kind": "Method",
    "detail": "Function (__export size_t)",
    "insertText": "rmx_input_get_mem_capacity_in_packets(const rmx_input_stream_params *params)"
  },
  {
    "label": "rmx_input_get_mem_block_buffer()",
    "kind": "Method",
    "detail": "Function (__export rmx_mem_region*)",
    "insertText": "rmx_input_get_mem_block_buffer(rmx_input_stream_params *params, size_t sub_block_id)"
  },
  {
    "label": "rmx_input_get_stride_size()",
    "kind": "Method",
    "detail": "Function (__export size_t)",
    "insertText": "rmx_input_get_stride_size(const rmx_input_stream_params *params, size_t sub_block_id)"
  },
  {
    "label": "rmx_input_set_timestamp_format()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_timestamp_format(rmx_input_stream_params *params, rmx_input_timestamp_format format)"
  },
  {
    "label": "rmx_input_create_stream()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_input_create_stream(rmx_input_stream_params *params, rmx_stream_id *id)"
  },
  {
    "label": "rmx_input_destroy_stream()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_input_destroy_stream(rmx_stream_id id)"
  },
  {
    "label": "rmx_input_init_flow()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_init_flow(rmx_input_flow *flow)"
  },
  {
    "label": "rmx_input_set_flow_local_addr()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_flow_local_addr(rmx_input_flow *flow, const struct sockaddr *local)"
  },
  {
    "label": "rmx_input_set_flow_remote_addr()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_flow_remote_addr(rmx_input_flow *flow, const struct sockaddr *remote)"
  },
  {
    "label": "rmx_input_set_flow_tag()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_set_flow_tag(rmx_input_flow *flow, uint32_t tag)"
  },
  {
    "label": "rmx_input_attach_flow()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_input_attach_flow(rmx_stream_id id, const rmx_input_flow *flow)"
  },
  {
    "label": "rmx_input_detach_flow()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_input_detach_flow(rmx_stream_id id, const rmx_input_flow *flow)"
  },
  {
    "label": "rmx_input_set_completion_moderation()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_input_set_completion_moderation(rmx_stream_id id, size_t min_count, size_t max_count, int timeout_usec)"
  },
  {
    "label": "rmx_input_init_chunk_handle()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_input_init_chunk_handle(rmx_input_chunk_handle *handle, rmx_stream_id id)"
  },
  {
    "label": "rmx_input_get_next_chunk()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_input_get_next_chunk(rmx_input_chunk_handle *handle)"
  },
  {
    "label": "rmx_input_get_chunk_completion()",
    "kind": "Method",
    "detail": "Function (__export const rmx_input_completion*)",
    "insertText": "rmx_input_get_chunk_completion(rmx_input_chunk_handle *handle)"
  },
  {
    "label": "rmx_input_get_completion_ptr()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE const void*)",
    "insertText": "rmx_input_get_completion_ptr(const rmx_input_completion *completion, size_t sub_block_id)"
  },
  {
    "label": "rmx_input_get_completion_chunk_size()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE size_t)",
    "insertText": "rmx_input_get_completion_chunk_size(const rmx_input_completion *completion)"
  },
  {
    "label": "rmx_input_get_completion_seqn_first()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE uint32_t)",
    "insertText": "rmx_input_get_completion_seqn_first(const rmx_input_completion *completion)"
  },
  {
    "label": "rmx_input_get_completion_flag()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE bool)",
    "insertText": "rmx_input_get_completion_flag(const rmx_input_completion *completion, rmx_input_completion_flag flag)"
  },
  {
    "label": "rmx_input_get_completion_timestamp_first()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE uint64_t)",
    "insertText": "rmx_input_get_completion_timestamp_first(const rmx_input_completion *completion)"
  },
  {
    "label": "rmx_input_get_completion_timestamp_last()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE uint64_t)",
    "insertText": "rmx_input_get_completion_timestamp_last(const rmx_input_completion *completion)"
  },
  {
    "label": "rmx_input_get_packet_info()",
    "kind": "Method",
    "detail": "Function (} __export const rmx_input_packet_info*)",
    "insertText": "rmx_input_get_packet_info(rmx_input_chunk_handle *handle, size_t packet_id)"
  },
  {
    "label": "rmx_input_get_packet_size()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE size_t)",
    "insertText": "rmx_input_get_packet_size(const rmx_input_packet_info *info, size_t sub_block_id)"
  },
  {
    "label": "rmx_input_get_packet_flow_tag()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE uint32_t)",
    "insertText": "rmx_input_get_packet_flow_tag(const rmx_input_packet_info *info)"
  },
  {
    "label": "rmx_input_get_packet_timestamp()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE uint64_t)",
    "insertText": "rmx_input_get_packet_timestamp(const rmx_input_packet_info *info)"
  },
  {
    "label": "rmx_output_media_init()",
    "kind": "Method",
    "detail": "Function (} __export void)",
    "insertText": "rmx_output_media_init(rmx_output_media_stream_params *params)"
  },
  {
    "label": "rmx_output_media_set_sdp()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_sdp(rmx_output_media_stream_params *params, const char *sdp)"
  },
  {
    "label": "rmx_output_media_set_idx_in_sdp()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_idx_in_sdp(rmx_output_media_stream_params *params, size_t media_block_idx)"
  },
  {
    "label": "rmx_output_media_set_packets_per_frame()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_packets_per_frame(rmx_output_media_stream_params *params, size_t count)"
  },
  {
    "label": "rmx_output_media_set_source_ports()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_source_ports(rmx_output_media_stream_params *params, const uint16_t *ports, size_t count)"
  },
  {
    "label": "rmx_output_media_set_pcp()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_pcp(rmx_output_media_stream_params *params, uint8_t pcp)"
  },
  {
    "label": "rmx_output_media_set_dscp()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_dscp(rmx_output_media_stream_params *params, uint8_t dscp)"
  },
  {
    "label": "rmx_output_media_set_ecn()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_ecn(rmx_output_media_stream_params *params, uint8_t ecn)"
  },
  {
    "label": "rmx_output_media_init_mem_blocks()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_init_mem_blocks(rmx_output_media_mem_block *mem_blocks, size_t count)"
  },
  {
    "label": "rmx_output_media_set_chunk_count()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_chunk_count(rmx_output_media_mem_block *mem_block, size_t count)"
  },
  {
    "label": "rmx_output_media_set_sub_block_count()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_sub_block_count(rmx_output_media_mem_block *mem_block, size_t count)"
  },
  {
    "label": "rmx_output_media_get_sub_block()",
    "kind": "Method",
    "detail": "Function (__export rmx_mem_region*)",
    "insertText": "rmx_output_media_get_sub_block(rmx_output_media_mem_block *mem_block, size_t sub_block_id)"
  },
  {
    "label": "rmx_output_media_get_dup_sub_block()",
    "kind": "Method",
    "detail": "Function (__export rmx_mem_multi_key_region*)",
    "insertText": "rmx_output_media_get_dup_sub_block(rmx_output_media_mem_block *mem_block, size_t sub_block_id)"
  },
  {
    "label": "rmx_output_media_set_packet_layout()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_packet_layout(rmx_output_media_mem_block *mem_block, size_t sub_block_id, const uint16_t *packet_sizes)"
  },
  {
    "label": "rmx_output_media_assign_mem_blocks()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_assign_mem_blocks(rmx_output_media_stream_params *params, rmx_output_media_mem_block *mem_blocks, size_t count)"
  },
  {
    "label": "rmx_output_media_set_packets_per_chunk()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_packets_per_chunk(rmx_output_media_stream_params *params, size_t packets_per_chunk)"
  },
  {
    "label": "rmx_output_media_set_stride_size()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_stride_size(rmx_output_media_stream_params *params, size_t sub_block_id, const size_t stride_size)"
  },
  {
    "label": "rmx_output_media_create_stream()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_media_create_stream(rmx_output_media_stream_params *params, rmx_stream_id *id)"
  },
  {
    "label": "rmx_output_media_destroy_stream()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_media_destroy_stream(rmx_stream_id id)"
  },
  {
    "label": "rmx_output_media_init_context()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_init_context(rmx_output_media_context *context, rmx_stream_id id)"
  },
  {
    "label": "rmx_output_media_set_context_block()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_context_block(rmx_output_media_context *context, size_t id)"
  },
  {
    "label": "rmx_output_media_get_local_address()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_media_get_local_address(const rmx_output_media_context *context, struct sockaddr *address)"
  },
  {
    "label": "rmx_output_media_get_remote_address()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_media_get_remote_address(const rmx_output_media_context *context, struct sockaddr *address)"
  },
  {
    "label": "rmx_output_media_init_chunk_handle()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_init_chunk_handle(rmx_output_media_chunk_handle *handle, rmx_stream_id id)"
  },
  {
    "label": "rmx_output_media_set_chunk_packet_count()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_media_set_chunk_packet_count(rmx_output_media_chunk_handle *handle, size_t packets_in_chunk)"
  },
  {
    "label": "rmx_output_media_get_next_chunk()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_media_get_next_chunk(rmx_output_media_chunk_handle *handle)"
  },
  {
    "label": "rmx_output_media_get_chunk_strides()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE void*)",
    "insertText": "rmx_output_media_get_chunk_strides(rmx_output_media_chunk_handle *handle, size_t sub_block_id)"
  },
  {
    "label": "rmx_output_media_get_chunk_packet_sizes()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE uint16_t*)",
    "insertText": "rmx_output_media_get_chunk_packet_sizes(rmx_output_media_chunk_handle *handle, size_t sub_block_id)"
  },
  {
    "label": "rmx_output_media_set_chunk_option()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE void)",
    "insertText": "rmx_output_media_set_chunk_option(const rmx_output_media_chunk_handle *handle, rmx_output_commit_option option)"
  },
  {
    "label": "metadata()",
    "kind": "Method",
    "detail": "Function (rmx_output_media_chunk_handle_metadata*)",
    "insertText": "metadata((rmx_output_media_chunk_handle_metadata*)(void*)(handle))"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (metadata ->)",
    "insertText": "flags(1ULL << option)"
  },
  {
    "label": "rmx_output_media_clear_chunk_option()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE void)",
    "insertText": "rmx_output_media_clear_chunk_option(const rmx_output_media_chunk_handle *handle, rmx_output_commit_option option)"
  },
  {
    "label": "metadata()",
    "kind": "Method",
    "detail": "Function (rmx_output_media_chunk_handle_metadata*)",
    "insertText": "metadata(rmx_output_media_chunk_handle_metadata*)(void*)(handle)"
  },
  {
    "label": "rmx_output_media_clear_chunk_all_options()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE void)",
    "insertText": "rmx_output_media_clear_chunk_all_options(const rmx_output_media_chunk_handle *handle)"
  },
  {
    "label": "rmx_output_media_commit_chunk()",
    "kind": "Method",
    "detail": "Function (metadata -> flags = 0 ; } __export rmx_status)",
    "insertText": "rmx_output_media_commit_chunk(const rmx_output_media_chunk_handle *handle, uint64_t time)"
  },
  {
    "label": "rmx_output_media_cancel_unsent_chunks()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_media_cancel_unsent_chunks(const rmx_output_media_chunk_handle *handle)"
  },
  {
    "label": "rmx_output_media_skip_chunks()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_media_skip_chunks(const rmx_output_media_chunk_handle *handle, size_t chunks_count)"
  },
  {
    "label": "rmx_output_gen_init_stream()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_init_stream(rmx_output_gen_stream_params *params)"
  },
  {
    "label": "rmx_output_gen_set_packets_per_chunk()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_packets_per_chunk(rmx_output_gen_stream_params *params, size_t max_packet_count)"
  },
  {
    "label": "rmx_output_gen_set_local_addr()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_local_addr(rmx_output_gen_stream_params *params, const struct sockaddr *addr)"
  },
  {
    "label": "rmx_output_gen_set_remote_addr()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_remote_addr(rmx_output_gen_stream_params *params, const struct sockaddr *addr)"
  },
  {
    "label": "rmx_output_gen_set_max_sub_blocks()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_max_sub_blocks(rmx_output_gen_stream_params *params, size_t sub_blocks_per_packet)"
  },
  {
    "label": "rmx_output_gen_set_pcp()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_pcp(rmx_output_gen_stream_params *params, uint8_t pcp)"
  },
  {
    "label": "rmx_output_gen_set_dscp()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_dscp(rmx_output_gen_stream_params *params, uint8_t dscp)"
  },
  {
    "label": "rmx_output_gen_set_ecn()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_ecn(rmx_output_gen_stream_params *params, uint8_t ecn)"
  },
  {
    "label": "rmx_output_gen_set_rate()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_rate(rmx_output_gen_stream_params *params, const rmx_output_gen_rate *rate)"
  },
  {
    "label": "rmx_output_gen_create_stream()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_gen_create_stream(rmx_output_gen_stream_params *params, rmx_stream_id *id)"
  },
  {
    "label": "rmx_output_gen_destroy_stream()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_gen_destroy_stream(rmx_stream_id id)"
  },
  {
    "label": "rmx_output_gen_init_rate()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_init_rate(rmx_output_gen_rate *rate, uint64_t bps)"
  },
  {
    "label": "rmx_output_gen_set_rate_max_burst()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_rate_max_burst(rmx_output_gen_rate *rate, size_t packet_count)"
  },
  {
    "label": "rmx_output_gen_set_rate_typical_packet_size()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_rate_typical_packet_size(rmx_output_gen_rate *rate, size_t size_in_bytes)"
  },
  {
    "label": "rmx_output_gen_update_rate()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_gen_update_rate(rmx_stream_id id, const rmx_output_gen_rate *rate)"
  },
  {
    "label": "rmx_output_gen_init_chunk_handle()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_init_chunk_handle(rmx_output_gen_chunk_handle *handle, rmx_stream_id id)"
  },
  {
    "label": "rmx_output_gen_get_next_chunk()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_gen_get_next_chunk(rmx_output_gen_chunk_handle *handle)"
  },
  {
    "label": "rmx_output_gen_set_chunk_remote_addr()",
    "kind": "Method",
    "detail": "Function (__export void)",
    "insertText": "rmx_output_gen_set_chunk_remote_addr(rmx_output_gen_chunk_handle *handle, const struct sockaddr *addr)"
  },
  {
    "label": "rmx_output_gen_set_chunk_option()",
    "kind": "Method",
    "detail": "Function (__RMX_INLINE void)",
    "insertText": "rmx_output_gen_set_chunk_option(rmx_output_gen_chunk_handle *handle, rmx_output_commit_option option)"
  },
  {
    "label": "metadata()",
    "kind": "Method",
    "detail": "Function (rmx_output_gen_chunk_handle_metadata*)",
    "insertText": "metadata((rmx_output_gen_chunk_handle_metadata*)(void*)(handle))"
  },
  {
    "label": "rmx_output_gen_clear_chunk_option()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE void)",
    "insertText": "rmx_output_gen_clear_chunk_option(rmx_output_gen_chunk_handle *handle, rmx_output_commit_option option)"
  },
  {
    "label": "metadata()",
    "kind": "Method",
    "detail": "Function (rmx_output_gen_chunk_handle_metadata*)",
    "insertText": "metadata(rmx_output_gen_chunk_handle_metadata*)(void*)(handle)"
  },
  {
    "label": "rmx_output_gen_clear_chunk_all_options()",
    "kind": "Method",
    "detail": "Function (} __RMX_INLINE void)",
    "insertText": "rmx_output_gen_clear_chunk_all_options(rmx_output_gen_chunk_handle *handle)"
  },
  {
    "label": "rmx_output_gen_append_packet_to_chunk()",
    "kind": "Method",
    "detail": "Function (metadata -> flags = 0 ; } __export rmx_status)",
    "insertText": "rmx_output_gen_append_packet_to_chunk(rmx_output_gen_chunk_handle *handle, const rmx_mem_region *sub_blocks, size_t count)"
  },
  {
    "label": "rmx_output_gen_commit_chunk()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_gen_commit_chunk(rmx_output_gen_chunk_handle *handle, uint64_t time)"
  },
  {
    "label": "rmx_output_get_chunk_count()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_get_chunk_count(rmx_stream_id id, size_t *count)"
  },
  {
    "label": "rmx_output_update_dscp()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_update_dscp(rmx_stream_id id, uint8_t dscp)"
  },
  {
    "label": "rmx_output_update_ecn()",
    "kind": "Method",
    "detail": "Function (__export rmx_status)",
    "insertText": "rmx_output_update_ecn(rmx_stream_id id, uint8_t ecn)"
  }
]