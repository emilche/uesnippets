[
  {
    "label": "UBTService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBTService"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BehaviorTree / BTAuxiliaryNode . h \" # include \" BTService . generated . h \")",
    "insertText": "UCLASS(Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() AIMODULE_API virtual FString GetStaticDescription()"
  },
  {
    "label": "NotifyParentActivation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyParentActivation(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "GetStaticTickIntervalDescription()",
    "kind": "Method",
    "detail": "Function (protected : FString)",
    "insertText": "GetStaticTickIntervalDescription()"
  },
  {
    "label": "GetStaticServiceDescription()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStaticServiceDescription()"
  },
  {
    "label": "TickNode()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "TickNode(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory, float DeltaSeconds)"
  },
  {
    "label": "OnSearchStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchStart(FBehaviorTreeSearchData& SearchData)"
  },
  {
    "label": "GetNodeIconName()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FName)",
    "insertText": "GetNodeIconName()"
  },
  {
    "label": "ScheduleNextTick()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ScheduleNextTick(UBehaviorTreeComponent& OwnerComp, uint8* NodeMemory)"
  },
  {
    "label": "InitNotifyFlags()",
    "kind": "Method",
    "detail": "Function (template<TickNode,OnBecomeRelevant,OnCeaseRelevant,OnSearchStart> void)",
    "insertText": "InitNotifyFlags(TickNode, OnBecomeRelevant, OnCeaseRelevant, OnSearchStart)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyTick = ! std::is_same_v<)",
    "insertText": "decltype(&UBTService::TickNode)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyBecomeRelevant = ! std::is_same_v<)",
    "insertText": "decltype(&UBTService::OnBecomeRelevant)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyCeaseRelevant = ! std::is_same_v<)",
    "insertText": "decltype(&UBTService::OnCeaseRelevant)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (bNotifyOnSearch = ! std::is_same_v<)",
    "insertText": "decltype(&UBTService::OnSearchStart)"
  },
  {
    "label": "INIT_SERVICE_NODE_NOTIFY_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "INIT_SERVICE_NODE_NOTIFY_FLAGS()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (\\ using NodeType = TRemovePointer<)",
    "insertText": "decltype(this)"
  },
  {
    "label": "InitNotifyFlags()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "InitNotifyFlags(&NodeType::TickNode, \\ &NodeType::OnBecomeRelevant, \\ &NodeType::OnCeaseRelevant, \\ &NodeType::OnSearchStart)"
  }
]