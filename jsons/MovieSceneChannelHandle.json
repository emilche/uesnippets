[
  {
    "label": "FMovieSceneChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannel"
  },
  {
    "label": "FMovieSceneChannelMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelMetaData"
  },
  {
    "label": "FMovieSceneChannelProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelProxy"
  },
  {
    "label": "TMovieSceneChannelHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelHandle"
  },
  {
    "label": "TMovieSceneChannelTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneChannelTraits"
  },
  {
    "label": "FMovieSceneChannelHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelHandle"
  },
  {
    "label": "FMovieSceneChannelHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" struct FMovieSceneChannel ; struct FMovieSceneChannelMetaData ; struct FMovieSceneChannelProxy ; template<> struct TMovieSceneChannelHandle ; template<> struct TMovieSceneChannelTraits ; struct FMovieSceneChannelHandle {)",
    "insertText": "FMovieSceneChannelHandle()"
  },
  {
    "label": "FMovieSceneChannelHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneChannelHandle(TWeakPtr<FMovieSceneChannelProxy> InWeakChannelProxy, FName InChannelTypeName, int32 InChannelIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FMovieSceneChannelHandle& A, const FMovieSceneChannelHandle& B)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelProxy* ProxyA = A . WeakChannelProxy .)",
    "insertText": "Pin().Get()"
  },
  {
    "label": "TrackChannelTypeName()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType> void)",
    "insertText": "TrackChannelTypeName()"
  },
  {
    "label": "TrackChannelTypeNameInternal()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "TrackChannelTypeNameInternal(ChannelType::StaticStruct())"
  },
  {
    "label": "Cast()",
    "kind": "Method",
    "detail": "Function (# endif } public : template<OtherChannelType> TMovieSceneChannelHandle<OtherChannelType>)",
    "insertText": "Cast()"
  },
  {
    "label": "GetChannelTypeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetChannelTypeName()"
  },
  {
    "label": "GetChannelIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChannelIndex()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannel*)",
    "insertText": "Get()"
  },
  {
    "label": "GetChannelProxy()",
    "kind": "Method",
    "detail": "Function (FMovieSceneChannelProxy*)",
    "insertText": "GetChannelProxy()"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR const FMovieSceneChannelMetaData*)",
    "insertText": "GetMetaData()"
  },
  {
    "label": "GetExtendedEditorData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetExtendedEditorData()"
  },
  {
    "label": "TrackChannelTypeNameInternal()",
    "kind": "Method",
    "detail": "Function (# endif private : # if DO_CHECK void)",
    "insertText": "TrackChannelTypeNameInternal(UStruct* ChannelType)"
  },
  {
    "label": "GetChannelTypeByName()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "GetChannelTypeByName(FName ChannelName)"
  },
  {
    "label": "IsCastValidInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCastValidInternal(UStruct* OtherType)"
  },
  {
    "label": "IsCastValid()",
    "kind": "Method",
    "detail": "Function (template<OtherChannelType> bool)",
    "insertText": "IsCastValid()"
  },
  {
    "label": "TMovieSceneChannelHandle()",
    "kind": "Method",
    "detail": "Function (} # endif private : TWeakPtr<FMovieSceneChannelProxy> WeakChannelProxy ; FName ChannelTypeName ; int32 ChannelIndex ; } ; template<ChannelType> struct TMovieSceneChannelHandle ; template<> struct TMovieSceneChannelHandle<FMovieSceneChannel> : FMovieSceneChannelHandle { protected :)",
    "insertText": "TMovieSceneChannelHandle()"
  },
  {
    "label": "TMovieSceneChannelHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMovieSceneChannelHandle(TWeakPtr<FMovieSceneChannelProxy> InWeakChannelProxy, FName InName, int32 InChannelIndex) : FMovieSceneChannelHandle(InWeakChannelProxy, InName, InChannelIndex)"
  },
  {
    "label": "TMovieSceneChannelHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMovieSceneChannelHandle(TWeakPtr<FMovieSceneChannelProxy> InWeakChannelProxy, int32 InChannelIndex) : TMovieSceneChannelHandle<typename ChannelType::Super>(InWeakChannelProxy, ChannelType::StaticStruct()->GetFName(), InChannelIndex)"
  },
  {
    "label": "TMovieSceneChannelHandle()",
    "kind": "Method",
    "detail": "Function (} # endif protected :)",
    "insertText": "TMovieSceneChannelHandle(TWeakPtr<FMovieSceneChannelProxy> InWeakChannelProxy, FName InChannelTypeName, int32 InChannelIndex) : TMovieSceneChannelHandle<typename ChannelType::Super>(InWeakChannelProxy, InChannelTypeName, InChannelIndex)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "checkf(IsCastValid<OtherChannelType>(), TEXT(\"Invalid cast between unrelated channel types\"))"
  },
  {
    "label": "OtherChannelType()",
    "kind": "Method",
    "detail": "Function (# endif return TMovieSceneChannelHandle<)",
    "insertText": "OtherChannelType(WeakChannelProxy, ChannelTypeName, ChannelIndex)"
  }
]