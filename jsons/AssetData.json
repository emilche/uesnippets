[
  {
    "label": "FAssetBundleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetBundleData"
  },
  {
    "label": "FCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomVersion"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetRegistryVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAssetPathParts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetPathParts"
  },
  {
    "label": "when",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "when"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "redirectors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "redirectors"
  },
  {
    "label": "redirectors",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "redirectors"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "if",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "if"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "from"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Archive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Archive"
  },
  {
    "label": "Archive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Archive"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FPackageCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageCustomVersion"
  },
  {
    "label": "FPackageCustomVersionsHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageCustomVersionsHandle"
  },
  {
    "label": "FPackageCustomVersionRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageCustomVersionRegistry"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FAssetPackageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetPackageData"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "for"
  },
  {
    "label": "FReferenceViewerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceViewerParams"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAssetData, Log, All)"
  },
  {
    "label": "SerializeVersion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeVersion(FArchive& Ar, FAssetRegistryVersion::Type& Version)"
  },
  {
    "label": "SplitIntoOuterPathAndAssetName()",
    "kind": "Method",
    "detail": "Function (FAssetPathParts)",
    "insertText": "SplitIntoOuterPathAndAssetName(FStringView InObjectPath)"
  },
  {
    "label": "ConcatenateOuterPathAndObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcatenateOuterPathAndObjectName(FStringBuilderBase& Builder, FName OuterPath, FName ObjectName)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"CL_\")"
  },
  {
    "label": "SetTagsAndAssetBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTagsAndAssetBundles(FAssetDataTagMap&& Tags)"
  },
  {
    "label": "SetChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChunkIDs(FChunkArray&& InChunkIDs)"
  },
  {
    "label": "SetChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChunkIDs(const FChunkArrayView& InChunkIDs)"
  },
  {
    "label": "AddChunkID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChunkID(int32 ChunkID)"
  },
  {
    "label": "ClearChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChunkIDs()"
  },
  {
    "label": "GetChunkArrayRegistryAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetChunkArrayRegistryAllocatedSize()"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FAssetData(const UObject* InAsset, FAssetData::ECreationFlags InCreationFlags = ECreationFlags::None)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (COREUOBJECT_API)",
    "insertText": "FAssetData(const UObject* InAsset, FAssetData::ECreationFlags InCreationFlags, EAssetRegistryTagsCaller Caller)"
  },
  {
    "label": "DetectIsUAssetByNames()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DetectIsUAssetByNames(PackageNameStrBuilder, AssetNameStrBuilder)"
  },
  {
    "label": "GetSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetSoftObjectPath()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FString(Builder)"
  },
  {
    "label": "IsUAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUAsset(UObject* Object)"
  },
  {
    "label": "IsTopLevelAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTopLevelAsset(UObject* Object)"
  },
  {
    "label": "IsRedirectorClassName()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsRedirectorClassName(AssetClassPath)"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fn(TPair<FName, FAssetTagValueRef>)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FAssetData()"
  },
  {
    "label": "TryNetworkRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryNetworkRead(FCbFieldView Field, bool bReadPackageName, FName InPackageName)"
  },
  {
    "label": "IsRedirectorClassName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRedirectorClassName(FTopLevelAssetPath ClassPathName)"
  },
  {
    "label": "TryConvertShortClassNameToPathName()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "TryConvertShortClassNameToPathName(FName InClassName, ELogVerbosity::Type FailureMessageVerbosity = ELogVerbosity::Warning)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(const FCbFieldView& Field)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPackageCustomVersionsHandle)",
    "insertText": "FindOrAdd(TConstArrayView<FCustomVersion> InCustomVersions)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPackageCustomVersionsHandle)",
    "insertText": "FindOrAdd(TConstArrayView<FPackageCustomVersion> InCustomVersions)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPackageCustomVersionsHandle)",
    "insertText": "FindOrAdd(TArray<FPackageCustomVersion>&& InCustomVersions)"
  },
  {
    "label": "SerializeForCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCache(FArchive& Ar)"
  },
  {
    "label": "SerializeForCacheOldVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCacheOldVersion(FArchive& Ar, FAssetRegistryVersion::Type Version)"
  },
  {
    "label": "SetPackageSavedHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageSavedHash(const FIoHash& InHash)"
  },
  {
    "label": "TryNetworkRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryNetworkRead(FCbFieldView Field)"
  },
  {
    "label": "SerializeForCacheInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCacheInternal(FArchive& Ar, FAssetPackageData& PackageData, FAssetRegistryVersion::Type Version)"
  }
]