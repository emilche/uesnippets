[
  {
    "label": "FAssetBundleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetBundleData"
  },
  {
    "label": "FCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomVersion"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetRegistryVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryVersion"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAssetPathParts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetPathParts"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Archive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Archive"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FPackageCustomVersion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageCustomVersion"
  },
  {
    "label": "FPackageCustomVersionsHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageCustomVersionsHandle"
  },
  {
    "label": "FPackageCustomVersionRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageCustomVersionRegistry"
  },
  {
    "label": "FAssetPackageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetPackageData"
  },
  {
    "label": "FReferenceViewerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceViewerParams"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetBundleData . h \" # include \" AssetRegistry / AssetDataTagMap . h \" # include \" AssetRegistry / AssetIdentifier . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Containers / VersePathFwd . h \" # include \" HAL / PlatformMath . h \" # include \" HAL / UnrealMemory . h \" # include \" IO / IoChunkId . h \" # include \" IO / IoHash . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" Misc / PackageName . h \" # include \" Misc / PackagePath . h \" # include \" Misc / SecureHash . h \" # include \" Misc / StringBuilder . h \" # include \" Serialization / Archive . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / Tuple . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / Class . h \" # include \" UObject / LinkerInstancingContext . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectRedirector . h \" # include \" UObject / ObjectVersion . h \" # include \" UObject / Package . h \" # include \" UObject / PrimaryAssetId . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" CoreMinimal . h \" # endif struct FAssetBundleData ; struct FCustomVersion ; class FCbWriter ; class FCbFieldView ; enum class EAssetRegistryTagsCaller : uint8 ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAssetData, Log, All)"
  },
  {
    "label": "SerializeVersion()",
    "kind": "Method",
    "detail": "Function (const FName GAssetBundleDataName ; struct FAssetRegistryVersion { enum Type { PreVersioning = 0,HardSoftDependencies,AddAssetRegistryState,ChangedAssetData,RemovedMD5Hash,AddedHardManage,AddedCookedMD5Hash,AddedDependencyFlags,FixedTags,WorkspaceDomain,PackageImportedClasses,PackageFileSummaryVersionChange,ObjectResourceOptionalVersionChange,AddedChunkHashes,ClassPaths,RemoveAssetPathFNames,AddedHeader,AssetPackageDataHasExtension,VersionPlusOne,LatestVersion = VersionPlusOne - 1 } ; const FGuid GUID ; bool)",
    "insertText": "SerializeVersion(FArchive& Ar, FAssetRegistryVersion::Type& Version)"
  },
  {
    "label": "FAssetRegistryVersion()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FAssetRegistryVersion()"
  },
  {
    "label": "SplitIntoOuterPathAndAssetName()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE::AssetRegistry { using FChunkArrayRegistryHandle = FSetElementId ; } namespace UE::AssetRegistry::Private { struct FAssetPathParts { FStringView OuterPath ; FStringView InnermostName ; } ; FAssetPathParts)",
    "insertText": "SplitIntoOuterPathAndAssetName(FStringView InObjectPath)"
  },
  {
    "label": "ConcatenateOuterPathAndObjectName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConcatenateOuterPathAndObjectName(FStringBuilderBase& Builder, FName OuterPath, FName ObjectName)"
  },
  {
    "label": "GetCollectionTagPrefix()",
    "kind": "Method",
    "detail": "Function (} enum class EResolveClass : uint8 { No,Yes,} ; struct FAssetData { public : const TCHAR*)",
    "insertText": "GetCollectionTagPrefix()"
  },
  {
    "label": "SetTagsAndAssetBundles()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SetTagsAndAssetBundles(FAssetDataTagMap&& Tags)"
  },
  {
    "label": "GetChunkIDs()",
    "kind": "Method",
    "detail": "Function (using FChunkArray = TArray<int32,TInlineAllocator<2>> ; using FChunkArrayView = TConstArrayView<int32> ; FChunkArrayView)",
    "insertText": "GetChunkIDs()"
  },
  {
    "label": "SetChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChunkIDs(FChunkArray&& InChunkIDs)"
  },
  {
    "label": "SetChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChunkIDs(const FChunkArrayView& InChunkIDs)"
  },
  {
    "label": "AddChunkID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddChunkID(int32 ChunkID)"
  },
  {
    "label": "ClearChunkIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChunkIDs()"
  },
  {
    "label": "HasSameChunkIDs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSameChunkIDs(const FAssetData& OtherAssetData)"
  },
  {
    "label": "GetChunkArrayRegistryAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetChunkArrayRegistryAllocatedSize()"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (public : PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FAssetData()"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetData(FAssetData&&)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetData(const FAssetData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetData&)",
    "insertText": "operator(FAssetData&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAssetData&)",
    "insertText": "operator(const FAssetData&)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetData(FName InPackageName, FName InPackagePath, FName InAssetName, FTopLevelAssetPath InAssetClassPathName, FAssetDataTagMap InTags = FAssetDataTagMap(), TArrayView<const int32> InChunkIDs = TArrayView<const int32>(), uint32 InPackageFlags = 0)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetData(const FString& InLongPackageName, const FString& InObjectPath, FTopLevelAssetPath InAssetClassPathName, FAssetDataTagMap InTags = FAssetDataTagMap(), TArrayView<const int32> InChunkIDs = TArrayView<const int32>(), uint32 InPackageFlags = 0)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetData(const UObject* InAsset, FAssetData::ECreationFlags InCreationFlags = ECreationFlags::None)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetData(const UObject* InAsset, FAssetData::ECreationFlags InCreationFlags, EAssetRegistryTagsCaller Caller)"
  },
  {
    "label": "FAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetData(const UObject* InAsset, bool bAllowBlueprintClass) : FAssetData(InAsset, bAllowBlueprintClass ? ECreationFlags::AllowBlueprintClass : ECreationFlags::None)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FAssetData& Other)"
  },
  {
    "label": "LexicalLess()",
    "kind": "Method",
    "detail": "Function (} return Other . PackageName .)",
    "insertText": "LexicalLess(PackageName)"
  },
  {
    "label": "LexicalLess()",
    "kind": "Method",
    "detail": "Function (} return PackageName .)",
    "insertText": "LexicalLess(Other.PackageName)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsUAsset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUAsset()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<FName::StringBufferSize> PackageNameStrBuilder ; PackageName .)",
    "insertText": "ToString(PackageNameStrBuilder)"
  },
  {
    "label": "GetSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (} FSoftObjectPath)",
    "insertText": "GetSoftObjectPath()"
  },
  {
    "label": "ToSoftObjectPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "ToSoftObjectPath()"
  },
  {
    "label": "GetObjectPathString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetObjectPathString()"
  },
  {
    "label": "AppendObjectPath()",
    "kind": "Method",
    "detail": "Function (TStringBuilder<FName::StringBufferSize> Builder ;)",
    "insertText": "AppendObjectPath(Builder)"
  },
  {
    "label": "IsUAsset()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUAsset(UObject* Object)"
  },
  {
    "label": "IsTopLevelAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTopLevelAsset()"
  },
  {
    "label": "IsTopLevelAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTopLevelAsset(UObject* Object)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shrink()"
  },
  {
    "label": "GetOptionalOuterPathName()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA FName)",
    "insertText": "GetOptionalOuterPathName()"
  },
  {
    "label": "GetFullName()",
    "kind": "Method",
    "detail": "Function (OptionalOuterPath = InName ; } # endif FString)",
    "insertText": "GetFullName()"
  },
  {
    "label": "GetFullName()",
    "kind": "Method",
    "detail": "Function (FString FullName ;)",
    "insertText": "GetFullName(FullName)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutFullName .)",
    "insertText": "Reset()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (OutFullName + = AssetClassPath .)",
    "insertText": "ToString()"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (OutFullName .)",
    "insertText": "AppendChar(TEXT(' '))"
  },
  {
    "label": "AppendObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendObjectPath(OutFullName)"
  },
  {
    "label": "GetFullName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFullName(FStringBuilderBase& OutFullNameBuilder)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (AssetClassPath .)",
    "insertText": "AppendString(OutFullNameBuilder)"
  },
  {
    "label": "AppendObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendObjectPath(OutFullNameBuilder)"
  },
  {
    "label": "GetExportTextName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetExportTextName()"
  },
  {
    "label": "GetExportTextName()",
    "kind": "Method",
    "detail": "Function (FString ExportTextName ;)",
    "insertText": "GetExportTextName(ExportTextName)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutExportTextName .)",
    "insertText": "Append(AssetClassPath.ToString())"
  },
  {
    "label": "AppendChar()",
    "kind": "Method",
    "detail": "Function (OutExportTextName .)",
    "insertText": "AppendChar(TEXT('\\''))"
  },
  {
    "label": "AppendObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendObjectPath(OutExportTextName)"
  },
  {
    "label": "GetExportTextName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetExportTextName(FStringBuilderBase& OutExportTextNameBuilder)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (AssetClassPath .)",
    "insertText": "AppendString(OutExportTextNameBuilder)"
  },
  {
    "label": "AppendObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendObjectPath(OutExportTextNameBuilder)"
  },
  {
    "label": "GetVersePath()",
    "kind": "Method",
    "detail": "Function (} UE::Core::FVersePath)",
    "insertText": "GetVersePath()"
  },
  {
    "label": "IsRedirector()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRedirector()"
  },
  {
    "label": "IsRedirector()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRedirector(UObject* Object)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} UClass*)",
    "insertText": "GetClass(EResolveClass ResolveClass = EResolveClass::No)"
  },
  {
    "label": "IsInstanceOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstanceOf(const UClass* BaseClass, EResolveClass ResolveClass = EResolveClass::No)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (UClass* ClassPointer =)",
    "insertText": "GetClass(ResolveClass)"
  },
  {
    "label": "IsInstanceOf()",
    "kind": "Method",
    "detail": "Function (} template<BaseClass> bool)",
    "insertText": "IsInstanceOf(EResolveClass ResolveClass = EResolveClass::No)"
  },
  {
    "label": "AppendObjectPath()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendObjectPath(FStringBuilderBase& Builder)"
  },
  {
    "label": "ConcatenateOuterPathAndObjectName()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::)",
    "insertText": "ConcatenateOuterPathAndObjectName(Builder, OptionalOuterPath, AssetName)"
  },
  {
    "label": "AppendObjectPath()",
    "kind": "Method",
    "detail": "Function (} else # endif { Builder<<PackageName<<' . '<<AssetName ; } } void)",
    "insertText": "AppendObjectPath(FString& String)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (String .)",
    "insertText": "Append(FString(Builder))"
  },
  {
    "label": "GetPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (} FPrimaryAssetId)",
    "insertText": "GetPrimaryAssetId()"
  },
  {
    "label": "FastGetAsset()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FastGetAsset(bool bLoad = false, TSet<FName> LoadTags = {})"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FoundPackage = nullptr ; })",
    "insertText": "if(FoundPackage == nullptr && bLoad)"
  },
  {
    "label": "InstancingContext()",
    "kind": "Method",
    "detail": "Function (FLinkerInstancingContext)",
    "insertText": "InstancingContext(MoveTemp(LoadTags))"
  },
  {
    "label": "LoadPackage()",
    "kind": "Method",
    "detail": "Function (FoundPackage =)",
    "insertText": "LoadPackage(nullptr, *PackageName.ToString(), LOAD_None, nullptr, &InstancingContext)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!FoundPackage)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (} else # endif { return FindObjectFast<)",
    "insertText": "UObject(FoundPackage, AssetName)"
  },
  {
    "label": "GetAsset()",
    "kind": "Method",
    "detail": "Function (} } UObject*)",
    "insertText": "GetAsset(TSet<FName> LoadTags = {})"
  },
  {
    "label": "HasAnyPackageFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyPackageFlags(uint32 FlagsToCheck)"
  },
  {
    "label": "HasAllPackageFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllPackageFlags(uint32 FlagsToCheck)"
  },
  {
    "label": "GetPackage()",
    "kind": "Method",
    "detail": "Function (} UPackage*)",
    "insertText": "GetPackage()"
  },
  {
    "label": "FullyLoad()",
    "kind": "Method",
    "detail": "Function (Package ->)",
    "insertText": "FullyLoad()"
  },
  {
    "label": "LoadPackage()",
    "kind": "Method",
    "detail": "Function (} else { Package =)",
    "insertText": "LoadPackage(NULL, *PackageName.ToString(), LOAD_None)"
  },
  {
    "label": "FindTag()",
    "kind": "Method",
    "detail": "Function (} return Package ; } bool)",
    "insertText": "FindTag(const FName InTagName)"
  },
  {
    "label": "GetTagValue()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> bool)",
    "insertText": "GetTagValue(FName Tag, ValueType& OutValue)"
  },
  {
    "label": "EnumerateTags()",
    "kind": "Method",
    "detail": "Function (template<Func> void)",
    "insertText": "EnumerateTags(Func Fn)"
  },
  {
    "label": "ForEach()",
    "kind": "Method",
    "detail": "Function (TagsAndValues .)",
    "insertText": "ForEach(Fn)"
  },
  {
    "label": "GetTagValueRef()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> ValueType)",
    "insertText": "GetTagValueRef(const FName Tag)"
  },
  {
    "label": "IsAssetLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetLoaded()"
  },
  {
    "label": "PrintAssetData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintAssetData()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_LOG(LogAssetData, Log, TEXT(\" PackageFlags: %d\"), PackageFlags)"
  },
  {
    "label": "GetFirstAssetDataOfClass()",
    "kind": "Method",
    "detail": "Function (} FAssetData)",
    "insertText": "GetFirstAssetDataOfClass(const TArray<FAssetData>& Assets, const UClass* DesiredClass)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FAssetData& Data = Assets [ AssetIdx ] ;)",
    "insertText": "if(Data.IsInstanceOf(DesiredClass))"
  },
  {
    "label": "GetFirstAsset()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetFirstAsset(const TArray<FAssetData>& Assets)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (UClass* DesiredClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "GetFirstAssetDataOfClass()",
    "kind": "Method",
    "detail": "Function (UObject* Asset =)",
    "insertText": "GetFirstAssetDataOfClass(Assets, DesiredClass).GetAsset()"
  },
  {
    "label": "SerializeForCache()",
    "kind": "Method",
    "detail": "Function (} template<class Archive> void)",
    "insertText": "SerializeForCache(Archive&& Ar)"
  },
  {
    "label": "SerializeForCacheWithTagsAndBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCacheWithTagsAndBundles(Ar, [](FArchive& Ar, FAssetData& Ad, FAssetRegistryVersion::Type) { static_cast<Archive&>(Ar).SerializeTagsAndBundles(Ad); })"
  },
  {
    "label": "SerializeForCacheOldVersion()",
    "kind": "Method",
    "detail": "Function (} template<class Archive> void)",
    "insertText": "SerializeForCacheOldVersion(Archive&& Ar, FAssetRegistryVersion::Type Version = FAssetRegistryVersion::LatestVersion)"
  },
  {
    "label": "SerializeForCacheOldVersionWithTagsAndBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCacheOldVersionWithTagsAndBundles(Ar, Version, [](FArchive& Ar, FAssetData& Ad, FAssetRegistryVersion::Type Version) { static_cast<Archive&>(Ar).SerializeTagsAndBundlesOldVersion(Ad, Version); })"
  },
  {
    "label": "NetworkWrite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NetworkWrite(FCbWriter& Writer, bool bWritePackageName)"
  },
  {
    "label": "TryNetworkRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryNetworkRead(FCbFieldView Field, bool bReadPackageName, FName InPackageName)"
  },
  {
    "label": "SerializeForCacheInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SerializeForCacheInternal(FArchive& Ar, FAssetRegistryVersion::Type Version, void (*SerializeTagsAndBundles)(FArchive& , FAssetData&, FAssetRegistryVersion::Type))"
  },
  {
    "label": "SerializeForCacheWithTagsAndBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCacheWithTagsAndBundles(FArchive& Ar, void (*SerializeTagsAndBundles)(FArchive&, FAssetData&, FAssetRegistryVersion::Type))"
  },
  {
    "label": "SerializeForCacheOldVersionWithTagsAndBundles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCacheOldVersionWithTagsAndBundles(FArchive& Ar, FAssetRegistryVersion::Type Version, void (*SerializeTagsAndBundles)(FArchive&, FAssetData&, FAssetRegistryVersion::Type))"
  },
  {
    "label": "DetectIsUAssetByNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DetectIsUAssetByNames(FStringView PackageName, FStringView ObjectPathName)"
  },
  {
    "label": "FindLastChar()",
    "kind": "Method",
    "detail": "Function (FStringView PackageBaseName ; { int32 IndexOfLastSlash = INDEX_NONE ; PackageName .)",
    "insertText": "FindLastChar(TEXT('/'), IndexOfLastSlash)"
  },
  {
    "label": "Mid()",
    "kind": "Method",
    "detail": "Function (PackageBaseName = PackageName .)",
    "insertText": "Mid(IndexOfLastSlash + 1)"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} return PackageBaseName .)",
    "insertText": "Equals(ObjectPathName, ESearchCase::IgnoreCase)"
  },
  {
    "label": "IsRedirectorClassName()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsRedirectorClassName(FTopLevelAssetPath ClassPathName)"
  },
  {
    "label": "TryConvertShortClassNameToPathName()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "TryConvertShortClassNameToPathName(FName InClassName, ELogVerbosity::Type FailureMessageVerbosity = ELogVerbosity::Warning)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FAssetData& AssetData)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FAssetData::ECreationFlags)"
  },
  {
    "label": "FindTag()",
    "kind": "Method",
    "detail": "Function (const FAssetDataTagMapSharedView::FFindTagResult FoundValue = TagsAndValues .)",
    "insertText": "FindTag(Tag)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(&OutValue, sizeof(ValueType))"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(OutValue, *FoundValue.GetValue())"
  },
  {
    "label": "AsString()",
    "kind": "Method",
    "detail": "Function (OutValue = FoundValue .)",
    "insertText": "AsString()"
  },
  {
    "label": "AsText()",
    "kind": "Method",
    "detail": "Function (OutValue = FoundValue .)",
    "insertText": "AsText()"
  },
  {
    "label": "AsName()",
    "kind": "Method",
    "detail": "Function (OutValue = FoundValue .)",
    "insertText": "AsName()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (ValueType TmpValue ;)",
    "insertText": "Memzero(&TmpValue, sizeof(ValueType))"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(TmpValue, *FoundValue.GetValue())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} return TmpValue ; } template<> FString FAssetData::GetTagValueRef<)",
    "insertText": "FString(FName Tag)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (} template<> FText FAssetData::GetTagValueRef<)",
    "insertText": "FText(FName Tag)"
  },
  {
    "label": "GetTagValue()",
    "kind": "Method",
    "detail": "Function (FText TmpValue ;)",
    "insertText": "GetTagValue(Tag, TmpValue)"
  },
  {
    "label": "FAssetRegistryExportPath()",
    "kind": "Method",
    "detail": "Function (} template<> FAssetRegistryExportPath FAssetData::GetTagValueRef<)",
    "insertText": "FAssetRegistryExportPath(FName Tag)"
  },
  {
    "label": "FPackageCustomVersion()",
    "kind": "Method",
    "detail": "Function (} namespace UE::AssetRegistry { struct FPackageCustomVersion { FGuid Key ; int32 Version = 0 ;)",
    "insertText": "FPackageCustomVersion()"
  },
  {
    "label": "FPackageCustomVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageCustomVersion(const FGuid& InKey, const int32 InVersion) : Key(InKey) , Version(InVersion)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPackageCustomVersion& RHS)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} FCbWriter&)",
    "insertText": "Write(FCbWriter& Writer)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(const FCbFieldView& Field, FPackageCustomVersion& Value)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryRead(const FCbFieldView& Field)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; class FPackageCustomVersionsHandle { public : TConstArrayView<FPackageCustomVersion>)",
    "insertText": "Get()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPackageCustomVersionsHandle)",
    "insertText": "FindOrAdd(TConstArrayView<FPackageCustomVersion> InCustomVersions)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FPackageCustomVersionsHandle)",
    "insertText": "FindOrAdd(TArray<FPackageCustomVersion>&& InCustomVersions)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackageCustomVersionsHandle& Handle)"
  },
  {
    "label": "FAssetPackageData()",
    "kind": "Method",
    "detail": "Function (FMD5Hash CookedHash ; TMap<FIoChunkId,FIoHash> ChunkHashes ; TArray<FName> ImportedClasses ; int64 DiskSize ; FPackageFileVersion FileVersionUE ; int32 FileVersionLicenseeUE ; private : UE::AssetRegistry::FPackageCustomVersionsHandle CustomVersions ; uint32 Flags ; public : EPackageExtension Extension ; public :)",
    "insertText": "FAssetPackageData() : DiskSize(0) , FileVersionLicenseeUE(-1) , Flags(0) , Extension(EPackageExtension::Unspecified)"
  },
  {
    "label": "GetCustomVersions()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<UE::AssetRegistry::FPackageCustomVersion>)",
    "insertText": "GetCustomVersions()"
  },
  {
    "label": "SetCustomVersions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCustomVersions(TConstArrayView<FCustomVersion> InCustomVersions)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (CustomVersions = UE::AssetRegistry::)",
    "insertText": "FindOrAdd(InCustomVersions)"
  },
  {
    "label": "SetCustomVersions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCustomVersions(TConstArrayView<UE::AssetRegistry::FPackageCustomVersion> InCustomVersions)"
  },
  {
    "label": "SetCustomVersions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCustomVersions(TArray<UE::AssetRegistry::FPackageCustomVersion>&& InCustomVersions)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (CustomVersions = UE::AssetRegistry::)",
    "insertText": "FindOrAdd(MoveTemp(InCustomVersions))"
  },
  {
    "label": "IsLicenseeVersion()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLicenseeVersion()"
  },
  {
    "label": "SetIsLicenseeVersion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsLicenseeVersion(bool bValue)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Flags & ~FLAG_LICENSEE_VERSION) | (bValue ? FLAG_LICENSEE_VERSION : 0)"
  },
  {
    "label": "HasVirtualizedPayloads()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVirtualizedPayloads()"
  },
  {
    "label": "SetHasVirtualizedPayloads()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasVirtualizedPayloads(bool bValue)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flags(Flags & ~FLAG_HAS_VIRTUALIZED_PAYLOADS) | (bValue ? FLAG_HAS_VIRTUALIZED_PAYLOADS : 0)"
  },
  {
    "label": "SerializeForCache()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeForCache(FArchive& Ar)"
  },
  {
    "label": "SerializeForCacheOldVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeForCacheOldVersion(FArchive& Ar, FAssetRegistryVersion::Type Version)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetPackageSavedHash()",
    "kind": "Method",
    "detail": "Function (} FIoHash)",
    "insertText": "GetPackageSavedHash()"
  },
  {
    "label": "SetPackageSavedHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageSavedHash(const FIoHash& InHash)"
  },
  {
    "label": "NetworkWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkWrite(FCbWriter& Writer)"
  },
  {
    "label": "TryNetworkRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryNetworkRead(FCbFieldView Field)"
  },
  {
    "label": "SerializeForCacheInternal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SerializeForCacheInternal(FArchive& Ar, FAssetPackageData& PackageData, FAssetRegistryVersion::Type Version)"
  },
  {
    "label": "FReferenceViewerParams()",
    "kind": "Method",
    "detail": "Function (enum { FLAG_LICENSEE_VERSION = 1<<0,FLAG_HAS_VIRTUALIZED_PAYLOADS = 1<<1 } ; } ; PRAGMA_ENABLE_DEPRECATION_WARNINGS # if WITH_EDITORONLY_DATA PRAGMA_DISABLE_DEPRECATION_WARNINGS struct FReferenceViewerParams {)",
    "insertText": "FReferenceViewerParams() : bShowReferencers(true) , bShowDependencies(true) , FixAndHideSearchDepthLimit(0) , FixAndHideSearchBreadthLimit(0) , bShowCollectionFilter(true) , bShowPluginFilter(true) , bShowShowReferencesOptions(true) , bShowShowSearchableNames(true) , bShowShowNativePackages(true) , bShowShowCodePackages(true) , bShowShowFilteredPackagesOnly(true) , bShowCompactMode(true)"
  }
]