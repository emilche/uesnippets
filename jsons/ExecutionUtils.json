[
  {
    "label": "ConstantArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantArray"
  },
  {
    "label": "GlobalVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalVariable"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "CtorDtorIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CtorDtorIterator"
  },
  {
    "label": "Element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Element"
  },
  {
    "label": "CtorDtorRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CtorDtorRunner"
  },
  {
    "label": "LocalCXXRuntimeOverrides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocalCXXRuntimeOverrides"
  },
  {
    "label": "Element()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_EXECUTIONENGINE_ORC_EXECUTIONUTILS_H # define LLVM_EXECUTIONENGINE_ORC_EXECUTIONUTILS_H # include \" JITSymbol . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / ADT / StringMap . h \" # include \" llvm / ExecutionEngine / RuntimeDyld . h \" # include<vector> namespace llvm { class ConstantArray ; class GlobalVariable ; class Function ; class Module ; class Value ; namespace orc { class CtorDtorIterator { public : struct Element {)",
    "insertText": "Element(unsigned Priority, const Function *Func, const Value *Data) : Priority(Priority), Func(Func), Data(Data)"
  },
  {
    "label": "CtorDtorIterator()",
    "kind": "Method",
    "detail": "Function (} unsigned Priority ; const Function* Func ; const Value* Data ; } ;)",
    "insertText": "CtorDtorIterator(const GlobalVariable *GV, bool End)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const CtorDtorIterator &Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CtorDtorIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CtorDtorIterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "getConstructors()",
    "kind": "Method",
    "detail": "Function (private : const ConstantArray* InitList ; unsigned I ; } ; iterator_range<CtorDtorIterator>)",
    "insertText": "getConstructors(const Module &M)"
  },
  {
    "label": "getDestructors()",
    "kind": "Method",
    "detail": "Function (iterator_range<CtorDtorIterator>)",
    "insertText": "getDestructors(const Module &M)"
  },
  {
    "label": "CtorDtorRunner()",
    "kind": "Method",
    "detail": "Function (template<JITLayerT> class CtorDtorRunner { public :)",
    "insertText": "CtorDtorRunner(std::vector<std::string> CtorDtorNames, typename JITLayerT::ModuleSetHandleT H) : CtorDtorNames(std::move(CtorDtorNames)), H(H)"
  },
  {
    "label": "runViaLayer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "runViaLayer(JITLayerT &JITLayer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*CtorDtorTy)()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool Error = false ;)",
    "insertText": "for(const auto &CtorDtorName : CtorDtorNames) if (auto CtorDtorSym = JITLayer.findSymbolIn(H, CtorDtorName, false))"
  },
  {
    "label": "CtorDtorTy()",
    "kind": "Method",
    "detail": "Function (CtorDtorTy CtorDtor = reinterpret_cast<)",
    "insertText": "CtorDtorTy(static_cast<uintptr_t>(CtorDtorSym.getAddress()))"
  },
  {
    "label": "CtorDtor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CtorDtor()"
  },
  {
    "label": "LocalCXXRuntimeOverrides()",
    "kind": "Method",
    "detail": "Function (} else Error = true ; return ! Error ; } private : std::vector<std::string> CtorDtorNames ; JITLayerT::ModuleSetHandleT H ; } ; class LocalCXXRuntimeOverrides { public : template<MangleFtorT>)",
    "insertText": "LocalCXXRuntimeOverrides(const MangleFtorT &Mangle)"
  },
  {
    "label": "addOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOverride(Mangle(\"__dso_handle\"), toTargetAddress(&DSOHandleOverride))"
  },
  {
    "label": "addOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOverride(Mangle(\"__cxa_atexit\"), toTargetAddress(&CXAAtExitOverride))"
  },
  {
    "label": "searchOverrides()",
    "kind": "Method",
    "detail": "Function (} RuntimeDyld::SymbolInfo)",
    "insertText": "searchOverrides(const std::string &Name)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto I = CXXRuntimeOverrides .)",
    "insertText": "find(Name)"
  },
  {
    "label": "toTargetAddress()",
    "kind": "Method",
    "detail": "Function (private : template<PtrTy> TargetAddress)",
    "insertText": "toTargetAddress(PtrTy* P)"
  },
  {
    "label": "addOverride()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addOverride(const std::string &Name, TargetAddress Addr)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (CXXRuntimeOverrides .)",
    "insertText": "insert(std::make_pair(Name, Addr))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} StringMap<TargetAddress> CXXRuntimeOverrides ; typedef)",
    "insertText": "void(*DestructorPtr)(void*)"
  },
  {
    "label": "CXAAtExitOverride()",
    "kind": "Method",
    "detail": "Function (typedef std::pair<DestructorPtr,void*> CXXDestructorDataPair ; typedef std::vector<CXXDestructorDataPair> CXXDestructorDataPairList ; CXXDestructorDataPairList DSOHandleOverride ; int)",
    "insertText": "CXAAtExitOverride(DestructorPtr Destructor, void *Arg, void *DSOHandle)"
  }
]