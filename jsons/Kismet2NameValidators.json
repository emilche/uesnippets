[
  {
    "label": "INameValidatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INameValidatorInterface"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "FNameValidatorFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNameValidatorFactory"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FKismetNameValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKismetNameValidator"
  },
  {
    "label": "FStringSetNameValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStringSetNameValidator"
  },
  {
    "label": "FAnimStateTransitionNodeSharedRulesNameValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimStateTransitionNodeSharedRulesNameValidator"
  },
  {
    "label": "UAnimStateTransitionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimStateTransitionNode"
  },
  {
    "label": "FAnimStateTransitionNodeSharedCrossfadeNameValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimStateTransitionNodeSharedCrossfadeNameValidator"
  },
  {
    "label": "FDummyNameValidator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDummyNameValidator"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class INameValidatorInterface ; class UBlueprint ; # define UE_BLUEPRINT_INVALID_NAME_CHARACTERS)",
    "insertText": "TEXT(\".\")"
  },
  {
    "label": "MakeValidator()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<class INameValidatorInterface>)",
    "insertText": "MakeValidator(class UEdGraphNode* Node)"
  },
  {
    "label": "INameValidatorInterface()",
    "kind": "Method",
    "detail": "Function (} ; enum class EValidatorResult { Ok,AlreadyInUse,EmptyName,ExistingName,TooLong,ContainsInvalidCharacters,LocallyInUse } ; class INameValidatorInterface { public : ~)",
    "insertText": "INameValidatorInterface()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} EValidatorResult)",
    "insertText": "IsValid(const FName& Name, bool bOriginal = false)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (EValidatorResult)",
    "insertText": "IsValid(const FString& Name, bool bOriginal = false)"
  },
  {
    "label": "GetErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetErrorText(const FString& Name, EValidatorResult ErrorCode)"
  },
  {
    "label": "GetErrorString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetErrorString(const FString& Name, EValidatorResult ErrorCode)"
  },
  {
    "label": "FindValidString()",
    "kind": "Method",
    "detail": "Function (} EValidatorResult)",
    "insertText": "FindValidString(FString& InOutName)"
  },
  {
    "label": "BlueprintObjectNameIsUnique()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BlueprintObjectNameIsUnique(class UBlueprint* Blueprint, const FName& Name)"
  },
  {
    "label": "FKismetNameValidator()",
    "kind": "Method",
    "detail": "Function (} ; class FKismetNameValidator : public INameValidatorInterface { public :)",
    "insertText": "FKismetNameValidator(const class UBlueprint* Blueprint, FName InExistingName = NAME_None, const UStruct* InScope = nullptr)"
  },
  {
    "label": "FKismetNameValidator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FKismetNameValidator()"
  },
  {
    "label": "GetMaximumNameLength()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaximumNameLength()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (private : TSet<FName> Names ; const UBlueprint* BlueprintObject ; FName ExistingName ; const UStruct* Scope ; } ; class FStringSetNameValidator : public INameValidatorInterface { public : EValidatorResult)",
    "insertText": "IsValid(const FString& Name, bool bOriginal)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (EValidatorResult)",
    "insertText": "IsValid(const FName& Name, bool bOriginal)"
  },
  {
    "label": "FStringSetNameValidator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStringSetNameValidator(const FString& InExistingName) : ExistingName(InExistingName)"
  },
  {
    "label": "FAnimStateTransitionNodeSharedRulesNameValidator()",
    "kind": "Method",
    "detail": "Function (} protected : TSet<FString> Names ; FString ExistingName ; } ; class FAnimStateTransitionNodeSharedRulesNameValidator : public FStringSetNameValidator { public :)",
    "insertText": "FAnimStateTransitionNodeSharedRulesNameValidator(class UAnimStateTransitionNode* InStateTransitionNode)"
  },
  {
    "label": "FAnimStateTransitionNodeSharedCrossfadeNameValidator()",
    "kind": "Method",
    "detail": "Function (} ; class FAnimStateTransitionNodeSharedCrossfadeNameValidator : public FStringSetNameValidator { public :)",
    "insertText": "FAnimStateTransitionNodeSharedCrossfadeNameValidator(class UAnimStateTransitionNode* InStateTransitionNode)"
  },
  {
    "label": "FDummyNameValidator()",
    "kind": "Method",
    "detail": "Function (} ; class FDummyNameValidator : public INameValidatorInterface { public :)",
    "insertText": "FDummyNameValidator(EValidatorResult InReturnValue) : ReturnValue(InReturnValue)"
  }
]