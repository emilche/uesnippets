[
  {
    "label": "FHLSLSyntaxHighlighterMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHLSLSyntaxHighlighterMarshaller"
  },
  {
    "label": "FSyntaxTextStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSyntaxTextStyle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSyntaxTextStyle()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreMinimal . h \" # include \" Framework / Text / SyntaxHighlighterTextLayoutMarshaller . h \" # include \" Framework / Text / SyntaxTokenizer . h \" # include \" Framework / Text / TextLayout . h \" # include \" HAL / Platform . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" class FHLSLSyntaxHighlighterMarshaller : public FSyntaxHighlighterTextLayoutMarshaller { public : struct FSyntaxTextStyle {)",
    "insertText": "FSyntaxTextStyle(const FTextBlockStyle& InNormalTextStyle, const FTextBlockStyle& InOperatorTextStyle, const FTextBlockStyle& InKeywordTextStyle, const FTextBlockStyle& InStringTextStyle, const FTextBlockStyle& InNumberTextStyle, const FTextBlockStyle& InCommentTextStyle, const FTextBlockStyle& InPreProcessorKeywordTextStyle, const FTextBlockStyle& InErrorTextStyle ) : NormalTextStyle(InNormalTextStyle), OperatorTextStyle(InOperatorTextStyle), KeywordTextStyle(InKeywordTextStyle), StringTextStyle(InStringTextStyle), NumberTextStyle(InNumberTextStyle), CommentTextStyle(InCommentTextStyle), PreProcessorKeywordTextStyle(InPreProcessorKeywordTextStyle), ErrorTextStyle(InErrorTextStyle)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FTextBlockStyle NormalTextStyle ; FTextBlockStyle OperatorTextStyle ; FTextBlockStyle KeywordTextStyle ; FTextBlockStyle StringTextStyle ; FTextBlockStyle NumberTextStyle ; FTextBlockStyle CommentTextStyle ; FTextBlockStyle PreProcessorKeywordTextStyle ; FTextBlockStyle ErrorTextStyle ; } ; TSharedRef<FHLSLSyntaxHighlighterMarshaller>)",
    "insertText": "Create(const FSyntaxTextStyle& InSyntaxTextStyle)"
  },
  {
    "label": "CreateTokenizer()",
    "kind": "Method",
    "detail": "Function (protected : enum class EParseState : uint8 { None,LookingForString,LookingForCharacter,LookingForSingleLineComment,LookingForMultiLineComment,} ; TSharedPtr<ISyntaxTokenizer>)",
    "insertText": "CreateTokenizer()"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseTokens(const FString& SourceString, FTextLayout& TargetTextLayout, TArray<ISyntaxTokenizer::FTokenizedLine> TokenizedLines)"
  },
  {
    "label": "ProcessTokenizedLine()",
    "kind": "Method",
    "detail": "Function (FTextLayout::FNewLineData)",
    "insertText": "ProcessTokenizedLine(const ISyntaxTokenizer::FTokenizedLine& TokenizedLine, const int32& LineNumber, const FString& SourceString, EParseState& CurrentParseState)"
  },
  {
    "label": "FHLSLSyntaxHighlighterMarshaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FHLSLSyntaxHighlighterMarshaller(TSharedPtr<ISyntaxTokenizer> InTokenizer, const FSyntaxTextStyle& InSyntaxTextStyle)"
  }
]