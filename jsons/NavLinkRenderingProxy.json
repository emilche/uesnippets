[
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "FMeshElementCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshElementCollector"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FNavLinkRenderingProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNavLinkRenderingProxy"
  },
  {
    "label": "INavLinkHostInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INavLinkHostInterface"
  },
  {
    "label": "FNavLinkDrawing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLinkDrawing"
  },
  {
    "label": "FNavLinkSegmentDrawing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavLinkSegmentDrawing"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" CoreMinimal . h \" # endif # include \" NavAreas / NavArea . h \" # include \" PrimitiveViewRelevance . h \" # include \" PrimitiveSceneProxy . h \" # include \" AI / Navigation / NavLinkDefinition . h \" class FMaterialRenderProxy ; class FMeshElementCollector ; class FPrimitiveDrawInterface ; class UPrimitiveComponent ; class FNavLinkRenderingProxy : public FPrimitiveSceneProxy { private : AActor* LinkOwnerActor ; class INavLinkHostInterface* LinkOwnerHost ; public : SIZE_T)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "FNavLinkDrawing()",
    "kind": "Method",
    "detail": "Function (struct FNavLinkDrawing {)",
    "insertText": "FNavLinkDrawing()"
  },
  {
    "label": "FNavLinkDrawing()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavLinkDrawing(const FTransform& InLocalToWorld, const FNavigationLink& Link) : Left(InLocalToWorld.TransformPosition(Link.Left)) , Right(InLocalToWorld.TransformPosition(Link.Right)) , Direction(Link.Direction) , Color(UNavArea::GetColor(Link.GetAreaClass())) , SnapRadius(Link.SnapRadius) , SnapHeight(Link.bUseSnapHeight ? Link.SnapHeight : -1.0f) , SupportedAgentsBits(Link.SupportedAgents.PackedBits)"
  },
  {
    "label": "FNavLinkSegmentDrawing()",
    "kind": "Method",
    "detail": "Function (} FVector Left ; FVector Right ; ENavLinkDirection::Type Direction ; FColor Color ; float SnapRadius ; float SnapHeight ; uint32 SupportedAgentsBits ; } ; struct FNavLinkSegmentDrawing {)",
    "insertText": "FNavLinkSegmentDrawing()"
  },
  {
    "label": "FNavLinkSegmentDrawing()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNavLinkSegmentDrawing(const FTransform& InLocalToWorld, const FNavigationSegmentLink& Link) : LeftStart(InLocalToWorld.TransformPosition(Link.LeftStart)) , LeftEnd(InLocalToWorld.TransformPosition(Link.LeftEnd)) , RightStart(InLocalToWorld.TransformPosition(Link.RightStart)) , RightEnd(InLocalToWorld.TransformPosition(Link.RightEnd)) , Direction(Link.Direction) , Color(UNavArea::GetColor(Link.GetAreaClass())) , SnapRadius(Link.SnapRadius) , SnapHeight(Link.bUseSnapHeight ? Link.SnapHeight : -1.0f) , SupportedAgentsBits(Link.SupportedAgents.PackedBits)"
  },
  {
    "label": "FNavLinkRenderingProxy()",
    "kind": "Method",
    "detail": "Function (} FVector LeftStart,LeftEnd ; FVector RightStart,RightEnd ; ENavLinkDirection::Type Direction ; FColor Color ; float SnapRadius ; float SnapHeight ; uint32 SupportedAgentsBits ; } ; private : TArray<FNavLinkDrawing> OffMeshPointLinks ; TArray<FNavLinkSegmentDrawing> OffMeshSegmentLinks ; public :)",
    "insertText": "FNavLinkRenderingProxy(const UPrimitiveComponent* InComponent)"
  },
  {
    "label": "GetDynamicMeshElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDynamicMeshElements(const TArray<const FSceneView*>& Views, const FSceneViewFamily& ViewFamily, uint32 VisibilityMap, FMeshElementCollector& Collector)"
  },
  {
    "label": "GetViewRelevance()",
    "kind": "Method",
    "detail": "Function (FPrimitiveViewRelevance)",
    "insertText": "GetViewRelevance(const FSceneView* View)"
  },
  {
    "label": "GetMemoryFootprint()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMemoryFootprint(void)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetAllocatedSize(void)"
  },
  {
    "label": "StorePointLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StorePointLinks(const FTransform& LocalToWorld, const TArray<FNavigationLink>& LinksArray)"
  },
  {
    "label": "StoreSegmentLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreSegmentLinks(const FTransform& LocalToWorld, const TArray<FNavigationSegmentLink>& LinksArray)"
  },
  {
    "label": "GetLinkMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLinkMeshes(const TArray<FNavLinkDrawing>& OffMeshPointLinks, const TArray<FNavLinkSegmentDrawing>& OffMeshSegmentLinks, TArray<float>& StepHeights, FMaterialRenderProxy* const MeshColorInstance, int32 ViewIndex, FMeshElementCollector& Collector, uint32 AgentMask)"
  },
  {
    "label": "DrawLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLinks(FPrimitiveDrawInterface* PDI, TArray<FNavLinkDrawing>& OffMeshPointLinks, TArray<FNavLinkSegmentDrawing>& OffMeshSegmentLinks, TArray<float>& StepHeights, FMaterialRenderProxy* const MeshColorInstance, uint32 AgentMask)"
  }
]