[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCaptureLostEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaptureLostEvent"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FMarqueeOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarqueeOperation"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNodeInfoContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeInfoContext"
  },
  {
    "label": "FOverlayBrushInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlayBrushInfo"
  },
  {
    "label": "FOverlayWidgetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlayWidgetInfo"
  },
  {
    "label": "FGraphInformationPopupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphInformationPopupInfo"
  },
  {
    "label": "FZoomLevelsContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZoomLevelsContainer"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "SNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNode"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "DiffHighlightInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DiffHighlightInfo"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "SelectSingleNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSingleNode(SelectedItemType Node)"
  },
  {
    "label": "ClearSelectionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionSet()"
  },
  {
    "label": "SetSelectionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionSet(FGraphPanelSelectionSet& NewSet)"
  },
  {
    "label": "SetNodeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeSelection(SelectedItemType Node, bool bSelect)"
  },
  {
    "label": "StartDraggingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDraggingNode(SelectedItemType NodeBeingDragged, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ClickedOnNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClickedOnNode(SelectedItemType Node, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"FGraphSelectionManager\")"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "ArrangedChildren()",
    "kind": "Method",
    "detail": "Function (FArrangedChildren)",
    "insertText": "ArrangedChildren( EVisibility::Visible )"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (existing)",
    "insertText": "for( int32 ChildIndex = 0; ChildIndex < Children.Num()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FVector2D(0.0f, 0.0f)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FString()"
  },
  {
    "label": "GetDesiredSize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetDesiredSize()"
  },
  {
    "label": "GetSnapGridSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSnapGridSize()"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit(bool bOnlySelection)"
  },
  {
    "label": "GetBoundsForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoundsForSelectedNodes(/*out*/ class FSlateRect& Rect, float Padding = 0.0f)"
  },
  {
    "label": "RequestDeferredPan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDeferredPan(const FVector2D& TargetPosition)"
  },
  {
    "label": "FinalizeNodeMovements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeNodeMovements()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct()"
  },
  {
    "label": "ZoomToTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToTarget(const FVector2D& TopLeft, const FVector2D& BottomRight)"
  },
  {
    "label": "UpdateViewOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewOffset(const FGeometry& MyGeometry, const FVector2D& TargetPosition)"
  },
  {
    "label": "ComputeEdgePanAmount()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeEdgePanAmount(const FGeometry& MyGeometry, const FVector2D& MouseEvent)"
  },
  {
    "label": "OnBeginNodeInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginNodeInteraction(const TSharedRef<SNode>& InNodeToDrag, const FVector2D& GrabOffset)"
  },
  {
    "label": "OnEndNodeInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndNodeInteraction(const TSharedRef<SNode>& InNodeToDrag)"
  },
  {
    "label": "ApplyMarqueeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMarqueeSelection(const FMarqueeOperation& InMarquee, const FGraphPanelSelectionSet& CurrentSelection, TSet<TObjectPtr<UObject>>& OutNewSelection)"
  },
  {
    "label": "SelectAndCenterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAndCenterObject(const UObject* ObjectToSelect, bool bCenter)"
  },
  {
    "label": "CenterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterObject(const UObject* ObjectToCenter)"
  },
  {
    "label": "AddGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGraphNode(const TSharedRef<SNode>& NodeToAdd)"
  },
  {
    "label": "RemoveAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllNodes()"
  },
  {
    "label": "PopulateVisibleChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateVisibleChildren(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "GetBoundsForNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoundsForNodes(bool bSelectionSetOnly, /*out*/ FVector2D& MinCorner, /*out*/ FVector2D& MaxCorner, float Padding = 0.0f)"
  },
  {
    "label": "ScrollToLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScrollToLocation(const FGeometry& MyGeometry, FVector2D DesiredCenterPosition, const float InDeltaTime)"
  },
  {
    "label": "ZoomToLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomToLocation(const FVector2D& CurrentSizeWithoutZoom, const FVector2D& DesiredSize, bool bDoneScrolling)"
  },
  {
    "label": "ChangeZoomLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeZoomLevel(int32 ZoomLevelDelta, const FVector2D& WidgetSpaceZoomOrigin, bool bOverrideZoomLimiting)"
  },
  {
    "label": "PostChangedZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostChangedZoom()"
  },
  {
    "label": "RequestZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestZoomToFit()"
  },
  {
    "label": "CancelZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelZoomToFit()"
  },
  {
    "label": "HandleZoomToFit()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "HandleZoomToFit(double InCurrentTime, float InDeltaTime)"
  }
]