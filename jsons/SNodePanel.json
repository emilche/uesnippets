[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCaptureLostEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaptureLostEvent"
  },
  {
    "label": "FDiffSingleResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDiffSingleResult"
  },
  {
    "label": "FFocusEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusEvent"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FMarqueeOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMarqueeOperation"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FNodeInfoContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeInfoContext"
  },
  {
    "label": "FOverlayBrushInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlayBrushInfo"
  },
  {
    "label": "FOverlayWidgetInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverlayWidgetInfo"
  },
  {
    "label": "FGraphInformationPopupInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphInformationPopupInfo"
  },
  {
    "label": "FZoomLevelsContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FZoomLevelsContainer"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "SNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNode"
  },
  {
    "label": "DiffHighlightInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DiffHighlightInfo"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FOverlayBrushInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / CurveSequence . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" DiffResults . h \" # include \" Framework / Commands / InputChord . h \" # include \" GraphEditor . h \" # include \" HAL / PlatformCrt . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / ArrangedChildren . h \" # include \" Layout / ArrangedWidget . h \" # include \" Layout / BasicLayoutWidgetSlot . h \" # include \" Layout / Children . h \" # include \" Layout / ChildrenBase . h \" # include \" Layout / Geometry . h \" # include \" Layout / LayoutUtils . h \" # include \" Layout / Margin . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Visibility . h \" # include \" MarqueeOperation . h \" # include \" Math / Color . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" Misc / Guid . h \" # include \" SlotBase . h \" # include \" Styling / AppStyle . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / PaintArgs . h \" # include \" Types / SlateEnums . h \" # include \" Types / WidgetMouseEventsDelegate . h \" # include \" UObject / GCObject . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SPanel . h \" # include \" Widgets / SWidget . h \" class FActiveTimerHandle ; class FReferenceCollector ; class FScopedTransaction ; class FSlateWindowElementList ; class FWidgetStyle ; class UObject ; struct FCaptureLostEvent ; struct FDiffSingleResult ; struct FFocusEvent ; struct FKeyEvent ; struct FMarqueeOperation ; struct FPointerEvent ; struct FSlateBrush ; struct Rect ; typedef class UObject* SelectedItemType ; namespace EGraphRenderingLOD { enum Type { LowestDetail,LowDetail,MediumDetail,DefaultDetail,FullyZoomedIn,} ; } struct FNodeInfoContext { public : bool bSelected ; } ; struct FOverlayBrushInfo { public : const FSlateBrush* Brush ; FVector2D AnimationEnvelope ; FVector2D OverlayOffset ; public :)",
    "insertText": "FOverlayBrushInfo() : Brush(NULL) , AnimationEnvelope(0.0f, 0.0f) , OverlayOffset(0.f, 0.f)"
  },
  {
    "label": "FOverlayBrushInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOverlayBrushInfo(const FSlateBrush* InBrush) : Brush(InBrush) , AnimationEnvelope(0.0f, 0.0f) , OverlayOffset(0.f, 0.f)"
  },
  {
    "label": "FOverlayBrushInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOverlayBrushInfo(const FSlateBrush* InBrush, float HorizontalBounce) : Brush(InBrush) , AnimationEnvelope(HorizontalBounce, 0.0f) , OverlayOffset(0.f, 0.f)"
  },
  {
    "label": "FOverlayWidgetInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FOverlayWidgetInfo { public : TSharedPtr<SWidget> Widget ; FVector2D OverlayOffset ; public :)",
    "insertText": "FOverlayWidgetInfo() : Widget(nullptr) , OverlayOffset(0.f, 0.f)"
  },
  {
    "label": "FOverlayWidgetInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOverlayWidgetInfo(TSharedPtr<SWidget> InWidget) : Widget(InWidget) , OverlayOffset(0.f, 0.f)"
  },
  {
    "label": "FGraphInformationPopupInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGraphInformationPopupInfo { public : const FSlateBrush* Icon ; FLinearColor BackgroundColor ; FString Message ; public :)",
    "insertText": "FGraphInformationPopupInfo(const FSlateBrush* InIcon, FLinearColor InBackgroundColor, const FString& InMessage) : Icon(InIcon) , BackgroundColor(InBackgroundColor) , Message(InMessage)"
  },
  {
    "label": "GetZoomAmount()",
    "kind": "Method",
    "detail": "Function (} } ; struct FZoomLevelsContainer { float)",
    "insertText": "GetZoomAmount(int32 InZoomLevel)"
  },
  {
    "label": "GetNearestZoomLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNearestZoomLevel(float InZoomAmount)"
  },
  {
    "label": "GetZoomText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetZoomText(int32 InZoomLevel)"
  },
  {
    "label": "GetNumZoomLevels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumZoomLevels()"
  },
  {
    "label": "GetDefaultZoomLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDefaultZoomLevel()"
  },
  {
    "label": "GetLOD()",
    "kind": "Method",
    "detail": "Function (EGraphRenderingLOD::Type)",
    "insertText": "GetLOD(int32 InZoomLevel)"
  },
  {
    "label": "FZoomLevelsContainer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FZoomLevelsContainer(void)"
  },
  {
    "label": "GetSelectedNodes()",
    "kind": "Method",
    "detail": "Function (} ; } ; struct FGraphSelectionManager : public FGCObject { TSet<TObjectPtr<class UObject>> SelectedNodes ; SGraphEditor::FOnSelectionChanged OnSelectionChanged ; public : const FGraphPanelSelectionSet&)",
    "insertText": "GetSelectedNodes()"
  },
  {
    "label": "SelectSingleNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSingleNode(SelectedItemType Node)"
  },
  {
    "label": "ClearSelectionSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionSet()"
  },
  {
    "label": "AreAnyNodesSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAnyNodesSelected()"
  },
  {
    "label": "SetSelectionSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSelectionSet(FGraphPanelSelectionSet& NewSet)"
  },
  {
    "label": "SetNodeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNodeSelection(SelectedItemType Node, bool bSelect)"
  },
  {
    "label": "IsNodeSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeSelected(SelectedItemType Node)"
  },
  {
    "label": "StartDraggingNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartDraggingNode(SelectedItemType NodeBeingDragged, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ClickedOnNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClickedOnNode(SelectedItemType Node, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "FNodeSlot()",
    "kind": "Method",
    "detail": "Function (} } ; namespace ENodeZone { enum Type { TopLeft,TopCenter,TopRight,Left,Center,Right,BottomLeft,BottomCenter,BottomRight,Count } ; } class SNodePanel : public SPanel { public : class SNode : public SPanel { public : class FNodeSlot : public TSlotBase<FNodeSlot>,public TAlignmentWidgetSlotMixin<FNodeSlot> { public : SNode ;)",
    "insertText": "FNodeSlot() : FNodeSlot(ENodeZone::TopLeft)"
  },
  {
    "label": "FNodeSlot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNodeSlot(ENodeZone::Type InZone) : TSlotBase<FNodeSlot>() , TAlignmentWidgetSlotMixin<FNodeSlot>(HAlign_Fill, VAlign_Fill) , Zone(InZone) , SlotPadding(0.0f) , Offset(FVector2D::ZeroVector) , AllowScale(true)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS_OneMixin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_BEGIN_ARGS_OneMixin(FNodeSlot, TSlotBase<FNodeSlot>, TAlignmentWidgetSlotMixin<FNodeSlot>) SLATE_ATTRIBUTE(FMargin, Padding) SLATE_ATTRIBUTE(FVector2D, SlotOffset) SLATE_ATTRIBUTE(FVector2D, SlotSize) SLATE_ATTRIBUTE(bool, AllowScaling) SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "GetZoneType()",
    "kind": "Method",
    "detail": "Function (AllowScale = InAllowScale ; return* this ; } public : ENodeZone::Type)",
    "insertText": "GetZoneType()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (SlotPadding =)",
    "insertText": "MoveTemp(InPadding)"
  },
  {
    "label": "GetPadding()",
    "kind": "Method",
    "detail": "Function (} FMargin)",
    "insertText": "GetPadding()"
  },
  {
    "label": "SetSlotOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSlotOffset(TAttribute<FVector2D> InOffset)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Offset =)",
    "insertText": "MoveTemp(InOffset)"
  },
  {
    "label": "GetSlotOffset()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetSlotOffset()"
  },
  {
    "label": "SetSlotSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSlotSize(TAttribute<FVector2D> InSize)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Size =)",
    "insertText": "MoveTemp(InSize)"
  },
  {
    "label": "GetSlotSize()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetSlotSize()"
  },
  {
    "label": "SetAllowScaling()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAllowScaling(TAttribute<bool> InAllowScaling)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (AllowScale =)",
    "insertText": "MoveTemp(InAllowScaling)"
  },
  {
    "label": "GetAllowScaling()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetAllowScaling()"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (} private : ENodeZone::Type Zone ; TAttribute<FMargin> SlotPadding ; TAttribute<FVector2D> Offset ; TAttribute<FVector2D> Size ; TAttribute<bool> AllowScale ; } ; typedef TSet<TWeakPtr<SNodePanel::SNode>> FNodeSet ; FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "GetWidget()",
    "kind": "Method",
    "detail": "Function (const FNodeSlot& CenterZone = Children [ ChildIndex ] ; const EVisibility ChildVisibility = CenterZone .)",
    "insertText": "GetWidget()->GetVisibility()"
  },
  {
    "label": "GetRelativeLayoutScale()",
    "kind": "Method",
    "detail": "Function (} } } return FVector2D::ZeroVector ; } float)",
    "insertText": "GetRelativeLayoutScale(int32 ChildIndex, float LayoutScaleMultiplier)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FNodeSlot& ThisSlot = Children [ ChildIndex ] ;)",
    "insertText": "if(!ThisSlot.AllowScale.Get())"
  },
  {
    "label": "GetParentPanel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SNodePanel> ParentPanel =)",
    "insertText": "GetParentPanel()"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (} } return 1 . 0 f ; } void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "SlotPadding()",
    "kind": "Method",
    "detail": "Function (const FMargin)",
    "insertText": "SlotPadding(CurChild.SlotPadding.Get())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector2D Size ;)",
    "insertText": "if(CurChild.Size.IsSet())"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Size = CurChild . Size .)",
    "insertText": "Get()"
  },
  {
    "label": "Orient_Horizontal()",
    "kind": "Method",
    "detail": "Function (} else { AlignmentArrangeResult XResult = AlignChild<)",
    "insertText": "Orient_Horizontal(AllottedGeometry.GetLocalSize().X, CurChild, SlotPadding)"
  },
  {
    "label": "Orient_Vertical()",
    "kind": "Method",
    "detail": "Function (AlignmentArrangeResult YResult = AlignChild<)",
    "insertText": "Orient_Vertical(AllottedGeometry.GetLocalSize().Y, CurChild, SlotPadding)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (Size =)",
    "insertText": "FVector2D(XResult.Size, YResult.Size)"
  },
  {
    "label": "MakeChild()",
    "kind": "Method",
    "detail": "Function (} const FArrangedWidget ChildGeom = AllottedGeometry .)",
    "insertText": "MakeChild(CurChild.GetWidget(), CurChild.Offset.Get(), Size, GetRelativeLayoutScale(ChildIndex, AllottedGeometry.Scale))"
  },
  {
    "label": "AddWidget()",
    "kind": "Method",
    "detail": "Function (ArrangedChildren .)",
    "insertText": "AddWidget(ChildVisibility, ChildGeom)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (} } } int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ArrangedChildren()",
    "kind": "Method",
    "detail": "Function (FArrangedChildren)",
    "insertText": "ArrangedChildren(EVisibility::Visible)"
  },
  {
    "label": "ArrangeChildren()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "ArrangeChildren(AllottedGeometry, ArrangedChildren)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} int32 MaxLayerId = LayerId ;)",
    "insertText": "for(int32 ChildIndex = 0; ChildIndex < ArrangedChildren.Num(); ++ChildIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FArrangedWidget& CurWidget = ArrangedChildren [ ChildIndex ] ;)",
    "insertText": "if(!IsChildWidgetCulled(MyCullingRect, CurWidget))"
  },
  {
    "label": "Paint()",
    "kind": "Method",
    "detail": "Function (const int32 CurWidgetsMaxLayerId = CurWidget . Widget ->)",
    "insertText": "Paint(Args.WithNewParent(this), CurWidget.Geometry, MyCullingRect, OutDrawElements, LayerId, InWidgetStyle, ShouldBeEnabled(bParentEnabled))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxLayerId =)",
    "insertText": "Max(MaxLayerId, CurWidgetsMaxLayerId)"
  },
  {
    "label": "GetOrAddSlot()",
    "kind": "Method",
    "detail": "Function (} else { } } return MaxLayerId ; } using FScopedWidgetSlotArguments = TPanelChildren<FNodeSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "GetOrAddSlot(const ENodeZone::Type SlotId)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 InsertIndex = INDEX_NONE ;)",
    "insertText": "for(int32 ChildIndex = 0; ChildIndex < Children.Num(); ++ChildIndex)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Children .)",
    "insertText": "RemoveAt(ChildIndex)"
  },
  {
    "label": "FNodeSlot()",
    "kind": "Method",
    "detail": "Function (InsertIndex = ChildIndex ; } } return FScopedWidgetSlotArguments { MakeUnique<)",
    "insertText": "FNodeSlot(SlotId)"
  },
  {
    "label": "GetSlot()",
    "kind": "Method",
    "detail": "Function (} FNodeSlot*)",
    "insertText": "GetSlot(const ENodeZone::Type SlotId)"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (Result =& Children [ ChildIndex ] ; break ; } } return Result ; } void)",
    "insertText": "RemoveSlot(const ENodeZone::Type SlotId)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (break ; } } } void)",
    "insertText": "MoveTo(const FVector2D& NewPosition, FNodeSet& NodeFilter, bool bMarkDirty = true)"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetPosition()"
  },
  {
    "label": "GetNodeComment()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetNodeComment()"
  },
  {
    "label": "GetObjectBeingDisplayed()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetObjectBeingDisplayed()"
  },
  {
    "label": "GetDiffHighlights()",
    "kind": "Method",
    "detail": "Function (} struct DiffHighlightInfo { const FSlateBrush* Brush ; const FLinearColor Tint ; } ; TArray<SNodePanel::SNode::DiffHighlightInfo>)",
    "insertText": "GetDiffHighlights(const FDiffSingleResult& DiffResult)"
  },
  {
    "label": "GetDiffHighlightBrushes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDiffHighlightBrushes(const FSlateBrush*& BackgroundOut, const FSlateBrush*& ForegroundOut)"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (BackgroundOut =)",
    "insertText": "GetBrush(TEXT(\"Graph.Node.DiffHighlight\"))"
  },
  {
    "label": "GetOverlayBrushes()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetOverlayBrushes(bool bSelected, const FVector2D WidgetSize, TArray<FOverlayBrushInfo>& Brushes)"
  },
  {
    "label": "GetOverlayWidgets()",
    "kind": "Method",
    "detail": "Function (} TArray<FOverlayWidgetInfo>)",
    "insertText": "GetOverlayWidgets(bool bSelected, const FVector2D& WidgetSize)"
  },
  {
    "label": "GetNodeInfoPopups()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetNodeInfoPopups(FNodeInfoContext* Context, TArray<FGraphInformationPopupInfo>& Popups)"
  },
  {
    "label": "RequiresSecondPassLayout()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresSecondPassLayout()"
  },
  {
    "label": "ShouldAllowCulling()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldAllowCulling()"
  },
  {
    "label": "GetDesiredSizeForMarquee()",
    "kind": "Method",
    "detail": "Function (} FVector2D)",
    "insertText": "GetDesiredSizeForMarquee()"
  },
  {
    "label": "GetSortDepth()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSortDepth()"
  },
  {
    "label": "SetParentPanel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetParentPanel(const TSharedPtr<SNodePanel>& InParent)"
  },
  {
    "label": "SNode()",
    "kind": "Method",
    "detail": "Function (ParentPanelPtr = InParent ; } protected :)",
    "insertText": "SNode() : BorderImage( FCoreStyle::Get().GetBrush( \"NoBorder\" ) ) , BorderBackgroundColor( FAppStyle::GetColor(\"Graph.ForegroundColor\")) , DesiredSizeScale(FVector2D(1,1)) , Children(this)"
  },
  {
    "label": "SNodePanel()",
    "kind": "Method",
    "detail": "Function (} TPanelChildren<FNodeSlot> Children ; TWeakPtr<SNodePanel> ParentPanelPtr ; } ;)",
    "insertText": "SNodePanel()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost(const FCaptureLostEvent& CaptureLostEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "Contains(UObject* Node)"
  },
  {
    "label": "GetZoomAmount()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetZoomAmount()"
  },
  {
    "label": "GetZoomText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetZoomText()"
  },
  {
    "label": "GetZoomTextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetZoomTextColorAndOpacity()"
  },
  {
    "label": "GetViewOffset()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetViewOffset()"
  },
  {
    "label": "GetZoomTargetRect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetZoomTargetRect(FVector2D& TopLeft, FVector2D& BottomRight)"
  },
  {
    "label": "GetViewBookmarkId()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetViewBookmarkId()"
  },
  {
    "label": "RestoreViewSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreViewSettings(const FVector2D& InViewOffset, float InZoomAmount, const FGuid& InBookmarkGuid = FGuid())"
  },
  {
    "label": "GetSnapGridSize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSnapGridSize()"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit(bool bOnlySelection)"
  },
  {
    "label": "GetBoundsForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoundsForSelectedNodes(class FSlateRect& Rect, float Padding = 0.0f)"
  },
  {
    "label": "GetPastePosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetPastePosition()"
  },
  {
    "label": "RequestDeferredPan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDeferredPan(const FVector2D& TargetPosition)"
  },
  {
    "label": "HasDeferredObjectFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDeferredObjectFocus()"
  },
  {
    "label": "HasDeferredZoomDestination()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDeferredZoomDestination()"
  },
  {
    "label": "FinalizeNodeMovements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeNodeMovements()"
  },
  {
    "label": "GetCurrentLOD()",
    "kind": "Method",
    "detail": "Function (EGraphRenderingLOD::Type)",
    "insertText": "GetCurrentLOD()"
  },
  {
    "label": "GetAllChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetAllChildren()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Construct()"
  },
  {
    "label": "ZoomToTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToTarget(const FVector2D& TopLeft, const FVector2D& BottomRight)"
  },
  {
    "label": "UpdateViewOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateViewOffset(const FGeometry& MyGeometry, const FVector2D& TargetPosition)"
  },
  {
    "label": "ComputeEdgePanAmount()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeEdgePanAmount(const FGeometry& MyGeometry, const FVector2D& MouseEvent)"
  },
  {
    "label": "GraphCoordToPanelCoord()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GraphCoordToPanelCoord(const FVector2D& GraphSpaceCoordinate)"
  },
  {
    "label": "PanelRectToGraphRect()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "PanelRectToGraphRect(const FSlateRect& PanelSpaceRect)"
  },
  {
    "label": "OnBeginNodeInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginNodeInteraction(const TSharedRef<SNode>& InNodeToDrag, const FVector2D& GrabOffset)"
  },
  {
    "label": "OnEndNodeInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndNodeInteraction(const TSharedRef<SNode>& InNodeToDrag)"
  },
  {
    "label": "FindNodesAffectedByMarquee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindNodesAffectedByMarquee(FGraphPanelSelectionSet& OutAffectedNodes)"
  },
  {
    "label": "ApplyMarqueeSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMarqueeSelection(const FMarqueeOperation& InMarquee, const FGraphPanelSelectionSet& CurrentSelection, TSet<TObjectPtr<UObject>>& OutNewSelection)"
  },
  {
    "label": "SelectAndCenterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAndCenterObject(const UObject* ObjectToSelect, bool bCenter)"
  },
  {
    "label": "CenterObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CenterObject(const UObject* ObjectToCenter)"
  },
  {
    "label": "AddGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGraphNode(const TSharedRef<SNode>& NodeToAdd)"
  },
  {
    "label": "RemoveAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllNodes()"
  },
  {
    "label": "PopulateVisibleChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateVisibleChildren(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "ArrangeChildNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrangeChildNodes(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "PaintBackgroundAsLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintBackgroundAsLines(const FSlateBrush* BackgroundImage, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "PaintSurroundSunkenShadow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintSurroundSunkenShadow(const FSlateBrush* ShadowImage, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 DrawLayerId)"
  },
  {
    "label": "PaintMarquee()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintMarquee(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 DrawLayerId)"
  },
  {
    "label": "PaintSoftwareCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintSoftwareCursor(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 DrawLayerId)"
  },
  {
    "label": "PaintComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintComment(const FString& CommentText, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 DrawLayerId, const FLinearColor& CommentTinting, float& HeightAboveNode, const FWidgetStyle& InWidgetStyle)"
  },
  {
    "label": "IsNodeCulled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeCulled(const TSharedRef<SNode>& Node, const FGeometry& AllottedGeometry)"
  },
  {
    "label": "OnSummonContextMenu()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<SWidget>)",
    "insertText": "OnSummonContextMenu(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnHandleLeftMouseRelease()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnHandleLeftMouseRelease(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetBoundsForNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoundsForNodes(bool bSelectionSetOnly, FVector2D& MinCorner, FVector2D& MaxCorner, float Padding = 0.0f)"
  },
  {
    "label": "ScrollToLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScrollToLocation(const FGeometry& MyGeometry, FVector2D DesiredCenterPosition, const float InDeltaTime)"
  },
  {
    "label": "ZoomToLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomToLocation(const FVector2D& CurrentSizeWithoutZoom, const FVector2D& DesiredSize, bool bDoneScrolling)"
  },
  {
    "label": "ChangeZoomLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeZoomLevel(int32 ZoomLevelDelta, const FVector2D& WidgetSpaceZoomOrigin, bool bOverrideZoomLimiting)"
  },
  {
    "label": "PostChangedZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostChangedZoom()"
  },
  {
    "label": "RequestZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestZoomToFit()"
  },
  {
    "label": "CancelZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelZoomToFit()"
  },
  {
    "label": "SetZoomLevelsContainer()",
    "kind": "Method",
    "detail": "Function (public : template<T> void)",
    "insertText": "SetZoomLevelsContainer()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (ZoomLevels = MakeUnique<)",
    "insertText": "T()"
  },
  {
    "label": "GetZoomAmount()",
    "kind": "Method",
    "detail": "Function (OldZoomAmount = ZoomLevels ->)",
    "insertText": "GetZoomAmount(ZoomLevel)"
  },
  {
    "label": "GetNearestZoomLevel()",
    "kind": "Method",
    "detail": "Function (ZoomLevel = PreviousZoomLevel = ZoomLevels ->)",
    "insertText": "GetNearestZoomLevel(OldZoomAmount)"
  },
  {
    "label": "HandleZoomToFit()",
    "kind": "Method",
    "detail": "Function (} protected : TUniquePtr<FZoomLevelsContainer> ZoomLevels ; FVector2D ViewOffset ; FVector2D OldViewOffset ; int32 ZoomLevel ; int32 PreviousZoomLevel ; float OldZoomAmount ; bool bIsPanning ; bool bIsZoomingWithTrackpad ; TSlotlessChildren<SNode> Children ; TSlotlessChildren<SNode> VisibleChildren ; TWeakPtr<SNode> NodeUnderMousePtr ; FVector2D NodeGrabOffset ; float TotalMouseDelta ; float TotalMouseDeltaXY ; FVector2D ZoomStartOffset ; float TotalGestureMagnify ; public : FGraphSelectionManager SelectionManager ; protected : FMarqueeOperation Marquee ; TAttribute<bool> IsEditable ; TMap<UObject*,TSharedRef<SNode>> NodeToWidgetLookup ; TSet<const UObject*> DeferredSelectionTargetObjects ; const UObject* DeferredMovementTargetObject ; bool bDeferredZoomToSelection ; bool bDeferredZoomToNodeExtents ; float ZoomPadding ; bool bAllowContinousZoomInterpolation ; bool bTeleportInsteadOfScrollingWhenZoomingToFit ; FCurveSequence ZoomLevelGraphFade ; FCurveSequence ZoomLevelFade ; FVector2D PastePosition ; FVector2D DeferredPanPosition ; bool bRequestDeferredPan ; FVector2D SoftwareCursorPosition ; bool bShowSoftwareCursor ; EGraphRenderingLOD::Type CurrentLOD ; SGraphEditor::FOnSpawnNodeByShortcut OnSpawnNodeByShortcut ; FInputChord LastKeyChordDetected ; TSharedPtr<FScopedTransaction> ScopedTransactionPtr ; FGeometry CachedGeometry ; bool bVisualUpdatePending ; TMap<TWeakPtr<SNode>,FVector2D> OriginalNodePositions ; SGraphEditor::FOnNodeSingleClicked OnNodeSingleClicked ; private : EActiveTimerReturnType)",
    "insertText": "HandleZoomToFit(double InCurrentTime, float InDeltaTime)"
  }
]