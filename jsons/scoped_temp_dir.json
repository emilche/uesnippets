[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedTempDir()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_SCOPED_TEMP_DIR_H_ # define BASE_FILES_SCOPED_TEMP_DIR_H_ # include \" base / base_export . h \" # include \" base / files / file_path . h \" namespace base { class BASE_EXPORT ScopedTempDir { public :)",
    "insertText": "ScopedTempDir()"
  },
  {
    "label": "ScopedTempDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedTempDir(ScopedTempDir&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedTempDir&)",
    "insertText": "operator(ScopedTempDir&&)"
  },
  {
    "label": "CreateUniqueTempDir()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "CreateUniqueTempDir()"
  },
  {
    "label": "CreateUniqueTempDirUnderPath()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "CreateUniqueTempDirUnderPath(const FilePath& path)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Set(const FilePath& path)"
  },
  {
    "label": "Delete()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "Delete()"
  },
  {
    "label": "Take()",
    "kind": "Method",
    "detail": "Function (FilePath)",
    "insertText": "Take()"
  },
  {
    "label": "GetPath()",
    "kind": "Method",
    "detail": "Function (const FilePath&)",
    "insertText": "GetPath()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTempDirPrefix()",
    "kind": "Method",
    "detail": "Function (const FilePath::CharType*)",
    "insertText": "GetTempDirPrefix()"
  }
]