[
  {
    "label": "SDL_mutex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_mutex"
  },
  {
    "label": "SDL_semaphore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_semaphore"
  },
  {
    "label": "SDL_cond",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_cond"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_mutex_h_ # define SDL_mutex_h_ # include \" SDL_stdinc . h \" # include \" SDL_error . h \" # if)",
    "insertText": "defined(SDL_THREAD_SAFETY_ANALYSIS) && \\ defined(__clang__) && (!defined(SWIG)) #define SDL_THREAD_ANNOTATION_ATTRIBUTE__(x) __attribute__((x)) #else #define SDL_THREAD_ANNOTATION_ATTRIBUTE__(x) #endif #define SDL_CAPABILITY(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(capability(x)) #define SDL_SCOPED_CAPABILITY \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(scoped_lockable) #define SDL_GUARDED_BY(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(guarded_by(x)) #define SDL_PT_GUARDED_BY(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(pt_guarded_by(x)) #define SDL_ACQUIRED_BEFORE(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_before(x)) #define SDL_ACQUIRED_AFTER(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquired_after(x)) #define SDL_REQUIRES(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_capability(x)) #define SDL_REQUIRES_SHARED(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(requires_shared_capability(x)) #define SDL_ACQUIRE(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_capability(x)) #define SDL_ACQUIRE_SHARED(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(acquire_shared_capability(x)) #define SDL_RELEASE(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_capability(x)) #define SDL_RELEASE_SHARED(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_shared_capability(x)) #define SDL_RELEASE_GENERIC(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(release_generic_capability(x)) #define SDL_TRY_ACQUIRE(x, y) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_capability(x, y)) #define SDL_TRY_ACQUIRE_SHARED(x, y) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(try_acquire_shared_capability(x, y)) #define SDL_EXCLUDES(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(locks_excluded(x)) #define SDL_ASSERT_CAPABILITY(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_capability(x)) #define SDL_ASSERT_SHARED_CAPABILITY(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(assert_shared_capability(x)) #define SDL_RETURN_CAPABILITY(x) \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(lock_returned(x)) #define SDL_NO_THREAD_SAFETY_ANALYSIS \\ SDL_THREAD_ANNOTATION_ATTRIBUTE__(no_thread_safety_analysis)"
  },
  {
    "label": "SDL_MUTEX_MAXWAIT()",
    "kind": "Method",
    "detail": "Function (# endif # define SDL_MUTEX_TIMEDOUT 1 # define)",
    "insertText": "SDL_MUTEX_MAXWAIT(~(Uint32)0)"
  },
  {
    "label": "SDL_CreateMutex()",
    "kind": "Method",
    "detail": "Function (typedef struct SDL_mutex SDL_mutex ; DECLSPEC SDL_mutex* SDLCALL)",
    "insertText": "SDL_CreateMutex(void)"
  },
  {
    "label": "SDL_LockMutex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_LockMutex(SDL_mutex * mutex) SDL_ACQUIRE(mutex)"
  },
  {
    "label": "SDL_mutexP()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_mutexP(m) SDL_LockMutex(m) extern DECLSPEC int SDLCALL SDL_TryLockMutex(SDL_mutex * mutex) SDL_TRY_ACQUIRE(0, mutex)"
  },
  {
    "label": "SDL_UnlockMutex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_UnlockMutex(SDL_mutex * mutex) SDL_RELEASE(mutex)"
  },
  {
    "label": "SDL_mutexV()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_mutexV(m) SDL_UnlockMutex(m) extern DECLSPEC void SDLCALL SDL_DestroyMutex(SDL_mutex * mutex)"
  },
  {
    "label": "SDL_CreateSemaphore()",
    "kind": "Method",
    "detail": "Function (struct SDL_semaphore ; typedef struct SDL_semaphore SDL_sem ; DECLSPEC SDL_sem* SDLCALL)",
    "insertText": "SDL_CreateSemaphore(Uint32 initial_value)"
  },
  {
    "label": "SDL_DestroySemaphore()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_DestroySemaphore(SDL_sem * sem)"
  },
  {
    "label": "SDL_SemWait()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_SemWait(SDL_sem * sem)"
  },
  {
    "label": "SDL_SemTryWait()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_SemTryWait(SDL_sem * sem)"
  },
  {
    "label": "SDL_SemWaitTimeout()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_SemWaitTimeout(SDL_sem *sem, Uint32 timeout)"
  },
  {
    "label": "SDL_SemPost()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_SemPost(SDL_sem * sem)"
  },
  {
    "label": "SDL_SemValue()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint32 SDLCALL)",
    "insertText": "SDL_SemValue(SDL_sem * sem)"
  },
  {
    "label": "SDL_CreateCond()",
    "kind": "Method",
    "detail": "Function (struct SDL_cond ; typedef struct SDL_cond SDL_cond ; DECLSPEC SDL_cond* SDLCALL)",
    "insertText": "SDL_CreateCond(void)"
  },
  {
    "label": "SDL_DestroyCond()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_DestroyCond(SDL_cond * cond)"
  },
  {
    "label": "SDL_CondSignal()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_CondSignal(SDL_cond * cond)"
  },
  {
    "label": "SDL_CondBroadcast()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_CondBroadcast(SDL_cond * cond)"
  },
  {
    "label": "SDL_CondWait()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_CondWait(SDL_cond * cond, SDL_mutex * mutex)"
  },
  {
    "label": "SDL_CondWaitTimeout()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_CondWaitTimeout(SDL_cond * cond, SDL_mutex * mutex, Uint32 ms)"
  }
]