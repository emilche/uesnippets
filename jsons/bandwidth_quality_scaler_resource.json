[
  {
    "label": "BandwidthQualityScalerResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BandwidthQualityScalerResource"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_ADAPTATION_BANDWIDTH_QUALITY_SCALER_RESOURCE_H_ # define VIDEO_ADAPTATION_BANDWIDTH_QUALITY_SCALER_RESOURCE_H_ # include<memory> # include<queue> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" api / video / video_adaptation_reason . h \" # include \" api / video_codecs / video_encoder . h \" # include \" call / adaptation / degradation_preference_provider . h \" # include \" call / adaptation / resource_adaptation_processor_interface . h \" # include \" modules / video_coding / utility / bandwidth_quality_scaler . h \" # include \" video / adaptation / video_stream_encoder_resource . h \" namespace webrtc { class BandwidthQualityScalerResource : public VideoStreamEncoderResource,public BandwidthQualityScalerUsageHandlerInterface { public : rtc::scoped_refptr<BandwidthQualityScalerResource>)",
    "insertText": "Create()"
  },
  {
    "label": "BandwidthQualityScalerResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BandwidthQualityScalerResource()"
  },
  {
    "label": "is_started()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_started()"
  },
  {
    "label": "OnEncodeCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeCompleted(const EncodedImage& encoded_image, int64_t time_sent_in_us, int64_t encoded_image_size_bytes)"
  },
  {
    "label": "StartCheckForOveruse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCheckForOveruse(const std::vector<VideoEncoder::ResolutionBitrateLimits>& resolution_bitrate_limits)"
  },
  {
    "label": "StopCheckForOveruse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCheckForOveruse()"
  },
  {
    "label": "OnReportUsageBandwidthHigh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportUsageBandwidthHigh()"
  },
  {
    "label": "OnReportUsageBandwidthLow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReportUsageBandwidthLow()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<BandwidthQualityScaler> bandwidth_quality_scaler_)",
    "insertText": "RTC_GUARDED_BY(encoder_queue())"
  }
]