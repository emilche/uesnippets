[
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "APawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APawn"
  },
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "UBrainComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrainComponent"
  },
  {
    "label": "FAIMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIMessage"
  },
  {
    "label": "FAIMessageObserver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAIMessageObserver"
  },
  {
    "label": "EStatus",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStatus"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / WeakObjectPtr . h \" # include \" Components / ActorComponent . h \" # include \" EngineDefines . h \" # include \" AITypes . h \" # include \" AIResourceInterface . h \" # include \" BrainComponent . generated . h \" class AAIController ; class AController ; class APawn ; class UBlackboardComponent ; class UBrainComponent ; struct FAIMessage ; struct FAIMessageObserver ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnAIMessage, UBrainComponent*, const FAIMessage&)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogBrain, Warning, All)"
  },
  {
    "label": "FAIMessage()",
    "kind": "Method",
    "detail": "Function (struct FAIMessage { enum EStatus { Failure,Success,} ; FName MessageName ; FWeakObjectPtr Sender ; FAIRequestID RequestID ; TEnumAsByte<EStatus> Status ; uint8 MessageFlags ;)",
    "insertText": "FAIMessage() : MessageName(NAME_None), Sender(NULL), RequestID(0), Status(FAIMessage::Success), MessageFlags(0)"
  },
  {
    "label": "FAIMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAIMessage(FName InMessage, UObject* InSender) : MessageName(InMessage), Sender(InSender), RequestID(0), Status(FAIMessage::Success), MessageFlags(0)"
  },
  {
    "label": "FAIMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAIMessage(FName InMessage, UObject* InSender, FAIRequestID InID, EStatus InStatus) : MessageName(InMessage), Sender(InSender), RequestID(InID), Status(InStatus), MessageFlags(0)"
  },
  {
    "label": "FAIMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAIMessage(FName InMessage, UObject* InSender, FAIRequestID InID, bool bSuccess) : MessageName(InMessage), Sender(InSender), RequestID(InID), Status(bSuccess ? Success : Failure), MessageFlags(0)"
  },
  {
    "label": "FAIMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAIMessage(FName InMessage, UObject* InSender, EStatus InStatus) : MessageName(InMessage), Sender(InSender), RequestID(0), Status(InStatus), MessageFlags(0)"
  },
  {
    "label": "FAIMessage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAIMessage(FName InMessage, UObject* InSender, bool bSuccess) : MessageName(InMessage), Sender(InSender), RequestID(0), Status(bSuccess ? Success : Failure), MessageFlags(0)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFlags(uint8 Flags)"
  },
  {
    "label": "SetFlag()",
    "kind": "Method",
    "detail": "Function (MessageFlags = Flags ; } void)",
    "insertText": "SetFlag(uint8 Flag)"
  },
  {
    "label": "ClearFlag()",
    "kind": "Method",
    "detail": "Function (MessageFlags | = Flag ; } void)",
    "insertText": "ClearFlag(uint8 Flag)"
  },
  {
    "label": "HasFlag()",
    "kind": "Method",
    "detail": "Function (MessageFlags& = ~ Flag ; } bool)",
    "insertText": "HasFlag(uint8 Flag)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Send(AController* Controller, const FAIMessage& Message)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(APawn* Pawn, const FAIMessage& Message)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Send(UBrainComponent* BrainComp, const FAIMessage& Message)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Broadcast(UObject* WorldContextObject, const FAIMessage& Message)"
  },
  {
    "label": "FAIMessageObserver()",
    "kind": "Method",
    "detail": "Function (} ; typedef TSharedPtr<struct FAIMessageObserver> FAIMessageObserverHandle ; struct FAIMessageObserver : public TSharedFromThis<FAIMessageObserver> { public :)",
    "insertText": "FAIMessageObserver()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAIMessageObserverHandle)",
    "insertText": "Create(AController* Controller, FName MessageType, FOnAIMessage const& Delegate)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAIMessageObserverHandle)",
    "insertText": "Create(AController* Controller, FName MessageType, FAIRequestID MessageID, FOnAIMessage const& Delegate)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAIMessageObserverHandle)",
    "insertText": "Create(APawn* Pawn, FName MessageType, FOnAIMessage const& Delegate)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAIMessageObserverHandle)",
    "insertText": "Create(APawn* Pawn, FName MessageType, FAIRequestID MessageID, FOnAIMessage const& Delegate)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAIMessageObserverHandle)",
    "insertText": "Create(UBrainComponent* BrainComp, FName MessageType, FOnAIMessage const& Delegate)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FAIMessageObserverHandle)",
    "insertText": "Create(UBrainComponent* BrainComp, FName MessageType, FAIRequestID MessageID, FOnAIMessage const& Delegate)"
  },
  {
    "label": "OnMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMessage(const FAIMessage& Message)"
  },
  {
    "label": "DescribeObservedMessage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "DescribeObservedMessage()"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister()"
  },
  {
    "label": "FAIMessageObserver()",
    "kind": "Method",
    "detail": "Function (FName MessageType ; FAIRequestID MessageID ; bool bFilterByID ; FOnAIMessage ObserverDelegate ; TWeakObjectPtr<UBrainComponent> Owner ;)",
    "insertText": "FAIMessageObserver(const FAIMessageObserver&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FAIMessageObserver&)",
    "insertText": "operator(const FAIMessageObserver&)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(ClassGroup = AI, BlueprintType, hidecategories = (Sockets, Collision), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UPROPERTY(transient)"
  },
  {
    "label": "GetDebugInfoString()",
    "kind": "Method",
    "detail": "Function (TArray<FAIMessage> MessagesToProcess ; public : FString)",
    "insertText": "GetDebugInfoString()"
  },
  {
    "label": "RequestLogicRestartOnUnlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestLogicRestartOnUnlock()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "PauseLogic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PauseLogic(const FString& Reason)"
  },
  {
    "label": "ResumeLogic()",
    "kind": "Method",
    "detail": "Function (} EAILogicResuming::Type)",
    "insertText": "ResumeLogic(const FString& Reason)"
  },
  {
    "label": "DescribeSelfToVisLog()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "DescribeSelfToVisLog(struct FVisualLogEntry* Snapshot)"
  },
  {
    "label": "LockResource()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "LockResource(EAIRequestPriority::Type LockSource)"
  },
  {
    "label": "ClearResourceLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResourceLock(EAIRequestPriority::Type LockSource)"
  },
  {
    "label": "ForceUnlockResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceUnlockResource()"
  },
  {
    "label": "IsResourceLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResourceLocked()"
  },
  {
    "label": "HandleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMessage(const FAIMessage& Message)"
  },
  {
    "label": "InitializeComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeComponent()"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "CacheBlackboardComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBlackboardComponent(UBlackboardComponent* BBComp)"
  },
  {
    "label": "GetBlackboardComponent()",
    "kind": "Method",
    "detail": "Function (UBlackboardComponent*)",
    "insertText": "GetBlackboardComponent()"
  }
]