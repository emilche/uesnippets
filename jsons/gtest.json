[
  {
    "label": "AssertHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssertHelper"
  },
  {
    "label": "DefaultGlobalTestPartResultReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultGlobalTestPartResultReporter"
  },
  {
    "label": "ExecDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExecDeathTest"
  },
  {
    "label": "NoExecDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoExecDeathTest"
  },
  {
    "label": "FinalSuccessChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FinalSuccessChecker"
  },
  {
    "label": "GTestFlagSaver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTestFlagSaver"
  },
  {
    "label": "StreamingListenerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamingListenerTest"
  },
  {
    "label": "TestResultAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestResultAccessor"
  },
  {
    "label": "TestEventListenersAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEventListenersAccessor"
  },
  {
    "label": "TestEventRepeater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEventRepeater"
  },
  {
    "label": "UnitTestRecordPropertyTestHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestRecordPropertyTestHelper"
  },
  {
    "label": "WindowsDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowsDeathTest"
  },
  {
    "label": "FuchsiaDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuchsiaDeathTest"
  },
  {
    "label": "UnitTestImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestImpl"
  },
  {
    "label": "Test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Test"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "UnitTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTest"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "Setup_should_be_spelled_SetUp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Setup_should_be_spelled_SetUp"
  },
  {
    "label": "TestProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestProperty"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "Environment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Environment"
  },
  {
    "label": "TestEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEventListener"
  },
  {
    "label": "EmptyTestEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmptyTestEventListener"
  },
  {
    "label": "ScopedTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTrace"
  },
  {
    "label": "faketype",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "faketype"
  },
  {
    "label": "EqHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EqHelper"
  },
  {
    "label": "AssertHelperData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssertHelperData"
  },
  {
    "label": "WithParamInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WithParamInterface"
  },
  {
    "label": "TestClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestClass"
  },
  {
    "label": "TestWithParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestWithParam"
  },
  {
    "label": "FactoryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FactoryImpl"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_H_ # include<cstddef> # include<limits> # include<memory> # include<ostream> # include<type_traits> # include<vector> # include \" gtest / gtest - assertion - result . h \" # include \" gtest / gtest - death - test . h \" # include \" gtest / gtest - matchers . h \" # include \" gtest / gtest - message . h \" # include \" gtest / gtest - param - test . h \" # include \" gtest / gtest - printers . h \" # include \" gtest / gtest - test - part . h \" # include \" gtest / gtest - typed - test . h \" # include \" gtest / gtest_pred_impl . h \" # include \" gtest / gtest_prod . h \" # include \" gtest / internal / gtest - internal . h \" # include \" gtest / internal / gtest - string . h \")",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\ ) GTEST_DECLARE_bool_(also_run_disabled_tests)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(break_on_failure)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(catch_exceptions)"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_string_(color)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(fail_fast)"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_string_(filter)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(install_failure_signal_handler)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(list_tests)"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_string_(output)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(brief)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(print_time)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(print_utf8)"
  },
  {
    "label": "GTEST_DECLARE_int32_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_int32_(random_seed)"
  },
  {
    "label": "GTEST_DECLARE_int32_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_int32_(repeat)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(recreate_environments_when_repeating)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(show_internal_stack_frames)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(shuffle)"
  },
  {
    "label": "GTEST_DECLARE_int32_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_int32_(stack_trace_depth)"
  },
  {
    "label": "GTEST_DECLARE_bool_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_bool_(throw_on_failure)"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_DECLARE_string_(stream_result_to)"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (# if GTEST_USE_OWN_FLAGFILE_FLAG_)",
    "insertText": "GTEST_DECLARE_string_(flagfile)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# endif namespace testing { # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) #pragma warning(disable : 4805) #pragma warning(disable : 4100)"
  },
  {
    "label": "GetUnitTestImpl()",
    "kind": "Method",
    "detail": "Function (namespace internal { class AssertHelper ; class DefaultGlobalTestPartResultReporter ; class ExecDeathTest ; class NoExecDeathTest ; class FinalSuccessChecker ; class GTestFlagSaver ; class StreamingListenerTest ; class TestResultAccessor ; class TestEventListenersAccessor ; class TestEventRepeater ; class UnitTestRecordPropertyTestHelper ; class WindowsDeathTest ; class FuchsiaDeathTest ; class UnitTestImpl*)",
    "insertText": "GetUnitTestImpl()"
  },
  {
    "label": "ReportFailureInUnknownLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFailureInUnknownLocation(TestPartResult::Type result_type, const std::string& message)"
  },
  {
    "label": "GetIgnoredParameterizedTestSuites()",
    "kind": "Method",
    "detail": "Function (std::set<std::string>*)",
    "insertText": "GetIgnoredParameterizedTestSuites()"
  },
  {
    "label": "Test()",
    "kind": "Method",
    "detail": "Function (} class Test ; class TestSuite ; # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ using TestCase = TestSuite ; # endif class TestInfo ; class UnitTest ; class GTEST_API_ Test { public : class TestInfo ; ~)",
    "insertText": "Test()"
  },
  {
    "label": "SetUpTestSuite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUpTestSuite()"
  },
  {
    "label": "TearDownTestSuite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TearDownTestSuite()"
  },
  {
    "label": "TearDownTestCase()",
    "kind": "Method",
    "detail": "Function (} # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ void)",
    "insertText": "TearDownTestCase()"
  },
  {
    "label": "SetUpTestCase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUpTestCase()"
  },
  {
    "label": "HasFatalFailure()",
    "kind": "Method",
    "detail": "Function (} # endif bool)",
    "insertText": "HasFatalFailure()"
  },
  {
    "label": "HasNonfatalFailure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNonfatalFailure()"
  },
  {
    "label": "IsSkipped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkipped()"
  },
  {
    "label": "HasFailure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFailure()"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RecordProperty(const std::string& key, const std::string& value)"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProperty(const std::string& key, int value)"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUp()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "HasSameFixtureClass()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasSameFixtureClass()"
  },
  {
    "label": "TestBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestBody()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "DeleteSelf_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelf_()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (delete this ; } const std::unique_ptr<GTEST_FLAG_SAVER_> gtest_flag_saver_ ; struct Setup_should_be_spelled_SetUp { } ; Setup_should_be_spelled_SetUp*)",
    "insertText": "Setup()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Test&)",
    "insertText": "operator(const Test&)"
  },
  {
    "label": "TestProperty()",
    "kind": "Method",
    "detail": "Function (} ; typedef internal::TimeInMillis TimeInMillis ; class TestProperty { public :)",
    "insertText": "TestProperty(const std::string& a_key, const std::string& a_value) : key_(a_key), value_(a_value)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "key()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "value()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValue(const std::string& new_value)"
  },
  {
    "label": "TestResult()",
    "kind": "Method",
    "detail": "Function (value_ = new_value ; } private : std::string key_ ; std::string value_ ; } ; class GTEST_API_ TestResult { public :)",
    "insertText": "TestResult()"
  },
  {
    "label": "total_part_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "total_part_count()"
  },
  {
    "label": "test_property_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "test_property_count()"
  },
  {
    "label": "Passed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Passed()"
  },
  {
    "label": "Skipped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Skipped()"
  },
  {
    "label": "Failed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Failed()"
  },
  {
    "label": "elapsed_time()",
    "kind": "Method",
    "detail": "Function (TimeInMillis)",
    "insertText": "elapsed_time()"
  },
  {
    "label": "GetTestProperty()",
    "kind": "Method",
    "detail": "Function (const TestProperty&)",
    "insertText": "GetTestProperty(int i)"
  },
  {
    "label": "test_part_results()",
    "kind": "Method",
    "detail": "Function (private : class TestInfo ; class TestSuite ; class UnitTest ; class internal::DefaultGlobalTestPartResultReporter ; class internal::ExecDeathTest ; class internal::TestResultAccessor ; class internal::UnitTestImpl ; class internal::WindowsDeathTest ; class internal::FuchsiaDeathTest ; const std::vector<TestPartResult>&)",
    "insertText": "test_part_results()"
  },
  {
    "label": "set_elapsed_time()",
    "kind": "Method",
    "detail": "Function (start_timestamp_ = start ; } void)",
    "insertText": "set_elapsed_time(TimeInMillis elapsed)"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (elapsed_time_ = elapsed ; } void)",
    "insertText": "RecordProperty(const std::string& xml_element, const TestProperty& test_property)"
  },
  {
    "label": "ValidateTestProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTestProperty(const std::string& xml_element, const TestProperty& test_property)"
  },
  {
    "label": "AddTestPartResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestPartResult(const TestPartResult& test_part_result)"
  },
  {
    "label": "death_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "death_test_count()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "TestResult()",
    "kind": "Method",
    "detail": "Function (internal::Mutex test_properties_mutex_ ; std::vector<TestPartResult> test_part_results_ ; std::vector<TestProperty> test_properties_ ; int death_test_count_ ; TimeInMillis start_timestamp_ ; TimeInMillis elapsed_time_ ;)",
    "insertText": "TestResult(const TestResult&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestResult&)",
    "insertText": "operator(const TestResult&)"
  },
  {
    "label": "TestInfo()",
    "kind": "Method",
    "detail": "Function (} ; class GTEST_API_ TestInfo { public : ~)",
    "insertText": "TestInfo()"
  },
  {
    "label": "test_suite_name()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "test_suite_name()"
  },
  {
    "label": "test_case_name()",
    "kind": "Method",
    "detail": "Function (} # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ const char*)",
    "insertText": "test_case_name()"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} # endif const char*)",
    "insertText": "name()"
  },
  {
    "label": "type_param()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "type_param()"
  },
  {
    "label": "line()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "line()"
  },
  {
    "label": "TestInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestInfo(const std::string& test_suite_name, const std::string& name, const char* a_type_param, const char* a_value_param, internal::CodeLocation a_code_location, internal::TypeId fixture_class_id, internal::TestFactoryBase* factory)"
  },
  {
    "label": "increment_death_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "increment_death_test_count()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Skip()"
  },
  {
    "label": "ClearTestResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTestResult(TestInfo* test_info)"
  },
  {
    "label": "TestInfo()",
    "kind": "Method",
    "detail": "Function (} const std::string test_suite_name_ ; const std::string name_ ; const std::unique_ptr<const::std::string> type_param_ ; const std::unique_ptr<const::std::string> value_param_ ; internal::CodeLocation location_ ; const internal::TypeId fixture_class_id_ ; bool should_run_ ; bool is_disabled_ ; bool matches_filter_ ; bool is_in_another_shard_ ; internal::TestFactoryBase* const factory_ ; TestResult result_ ;)",
    "insertText": "TestInfo(const TestInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestInfo&)",
    "insertText": "operator(const TestInfo&)"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (} ; class GTEST_API_ TestSuite { public :)",
    "insertText": "TestSuite(const char* name, const char* a_type_param, internal::SetUpTestSuiteFunc set_up_tc, internal::TearDownTestSuiteFunc tear_down_tc)"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestSuite()"
  },
  {
    "label": "skipped_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "skipped_test_count()"
  },
  {
    "label": "failed_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "failed_test_count()"
  },
  {
    "label": "reportable_disabled_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "reportable_disabled_test_count()"
  },
  {
    "label": "disabled_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "disabled_test_count()"
  },
  {
    "label": "reportable_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "reportable_test_count()"
  },
  {
    "label": "test_to_run_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "test_to_run_count()"
  },
  {
    "label": "total_test_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "total_test_count()"
  },
  {
    "label": "ad_hoc_test_result()",
    "kind": "Method",
    "detail": "Function (const TestResult&)",
    "insertText": "ad_hoc_test_result()"
  },
  {
    "label": "set_should_run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_should_run(bool should)"
  },
  {
    "label": "AddTestInfo()",
    "kind": "Method",
    "detail": "Function (should_run_ = should ; } void)",
    "insertText": "AddTestInfo(TestInfo* test_info)"
  },
  {
    "label": "ClearResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResult()"
  },
  {
    "label": "ClearTestSuiteResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTestSuiteResult(TestSuite* test_suite)"
  },
  {
    "label": "RunSetUpTestSuite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunSetUpTestSuite()"
  },
  {
    "label": "RunTearDownTestSuite()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RunTearDownTestSuite()"
  },
  {
    "label": "TestPassed()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "TestPassed(const TestInfo* test_info)"
  },
  {
    "label": "TestSkipped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestSkipped(const TestInfo* test_info)"
  },
  {
    "label": "TestFailed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestFailed(const TestInfo* test_info)"
  },
  {
    "label": "TestReportableDisabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestReportableDisabled(const TestInfo* test_info)"
  },
  {
    "label": "TestDisabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestDisabled(const TestInfo* test_info)"
  },
  {
    "label": "ShouldRunTest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldRunTest(const TestInfo* test_info)"
  },
  {
    "label": "ShuffleTests()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShuffleTests(internal::Random* random)"
  },
  {
    "label": "UnshuffleTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnshuffleTests()"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (std::string name_ ; const std::unique_ptr<const::std::string> type_param_ ; std::vector<TestInfo*> test_info_list_ ; std::vector<int> test_indices_ ; internal::SetUpTestSuiteFunc set_up_tc_ ; internal::TearDownTestSuiteFunc tear_down_tc_ ; bool should_run_ ; TimeInMillis start_timestamp_ ; TimeInMillis elapsed_time_ ; TestResult ad_hoc_test_result_ ;)",
    "insertText": "TestSuite(const TestSuite&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestSuite&)",
    "insertText": "operator(const TestSuite&)"
  },
  {
    "label": "Environment()",
    "kind": "Method",
    "detail": "Function (} ; class Environment { public : ~)",
    "insertText": "Environment()"
  },
  {
    "label": "TestEventListener()",
    "kind": "Method",
    "detail": "Function (} } ; # endif class TestEventListener { public : ~)",
    "insertText": "TestEventListener()"
  },
  {
    "label": "OnTestProgramStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestProgramStart(const UnitTest& unit_test)"
  },
  {
    "label": "OnTestIterationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestIterationStart(const UnitTest& unit_test, int iteration)"
  },
  {
    "label": "OnEnvironmentsSetUpStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnvironmentsSetUpStart(const UnitTest& unit_test)"
  },
  {
    "label": "OnEnvironmentsSetUpEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnvironmentsSetUpEnd(const UnitTest& unit_test)"
  },
  {
    "label": "OnTestSuiteStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestSuiteStart(const TestSuite&)"
  },
  {
    "label": "OnTestCaseStart()",
    "kind": "Method",
    "detail": "Function (} # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ void)",
    "insertText": "OnTestCaseStart(const TestCase&)"
  },
  {
    "label": "OnTestStart()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "OnTestStart(const TestInfo& test_info)"
  },
  {
    "label": "OnTestDisabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestDisabled(const TestInfo&)"
  },
  {
    "label": "OnTestPartResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestPartResult(const TestPartResult& test_part_result)"
  },
  {
    "label": "OnTestEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestEnd(const TestInfo& test_info)"
  },
  {
    "label": "OnTestSuiteEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestSuiteEnd(const TestSuite&)"
  },
  {
    "label": "OnTestCaseEnd()",
    "kind": "Method",
    "detail": "Function (} # ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ void)",
    "insertText": "OnTestCaseEnd(const TestCase&)"
  },
  {
    "label": "OnEnvironmentsTearDownStart()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "OnEnvironmentsTearDownStart(const UnitTest& unit_test)"
  },
  {
    "label": "OnEnvironmentsTearDownEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnvironmentsTearDownEnd(const UnitTest& unit_test)"
  },
  {
    "label": "OnTestIterationEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestIterationEnd(const UnitTest& unit_test, int iteration)"
  },
  {
    "label": "OnTestProgramEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTestProgramEnd(const UnitTest& unit_test)"
  },
  {
    "label": "OnTestProgramStart()",
    "kind": "Method",
    "detail": "Function (} ; class EmptyTestEventListener : public TestEventListener { public : void)",
    "insertText": "OnTestProgramStart(const UnitTest&)"
  },
  {
    "label": "OnTestIterationStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestIterationStart(const UnitTest& , int)"
  },
  {
    "label": "OnEnvironmentsSetUpStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEnvironmentsSetUpStart(const UnitTest&)"
  },
  {
    "label": "OnEnvironmentsSetUpEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEnvironmentsSetUpEnd(const UnitTest&)"
  },
  {
    "label": "OnTestStart()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "OnTestStart(const TestInfo&)"
  },
  {
    "label": "OnTestPartResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestPartResult(const TestPartResult&)"
  },
  {
    "label": "OnTestEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestEnd(const TestInfo&)"
  },
  {
    "label": "OnEnvironmentsTearDownStart()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "OnEnvironmentsTearDownStart(const UnitTest&)"
  },
  {
    "label": "OnEnvironmentsTearDownEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnEnvironmentsTearDownEnd(const UnitTest&)"
  },
  {
    "label": "OnTestIterationEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestIterationEnd(const UnitTest& , int)"
  },
  {
    "label": "OnTestProgramEnd()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTestProgramEnd(const UnitTest&)"
  },
  {
    "label": "TestEventListeners()",
    "kind": "Method",
    "detail": "Function (} } ; class GTEST_API_ TestEventListeners { public :)",
    "insertText": "TestEventListeners()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(TestEventListener* listener)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (TestEventListener*)",
    "insertText": "Release(TestEventListener* listener)"
  },
  {
    "label": "default_result_printer()",
    "kind": "Method",
    "detail": "Function (TestEventListener*)",
    "insertText": "default_result_printer()"
  },
  {
    "label": "SetDefaultResultPrinter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultResultPrinter(TestEventListener* listener)"
  },
  {
    "label": "SetDefaultXmlGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultXmlGenerator(TestEventListener* listener)"
  },
  {
    "label": "EventForwardingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EventForwardingEnabled()"
  },
  {
    "label": "SuppressEventForwarding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressEventForwarding()"
  },
  {
    "label": "TestEventListeners()",
    "kind": "Method",
    "detail": "Function (internal::TestEventRepeater* repeater_ ; TestEventListener* default_result_printer_ ; TestEventListener* default_xml_generator_ ;)",
    "insertText": "TestEventListeners(const TestEventListeners&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestEventListeners&)",
    "insertText": "operator(const TestEventListeners&)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (} ; class GTEST_API_ UnitTest { public : UnitTest*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "original_working_dir()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "original_working_dir()"
  },
  {
    "label": "current_test_suite()",
    "kind": "Method",
    "detail": "Function (const TestSuite*)",
    "insertText": "current_test_suite() const GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "current_test_case()",
    "kind": "Method",
    "detail": "Function (# ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ const TestCase*)",
    "insertText": "current_test_case() const GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "current_test_info()",
    "kind": "Method",
    "detail": "Function (# endif const TestInfo*)",
    "insertText": "current_test_info() const GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "random_seed()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "random_seed()"
  },
  {
    "label": "parameterized_test_registry()",
    "kind": "Method",
    "detail": "Function (internal::ParameterizedTestSuiteRegistry&)",
    "insertText": "parameterized_test_registry() GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "successful_test_suite_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "successful_test_suite_count()"
  },
  {
    "label": "failed_test_suite_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "failed_test_suite_count()"
  },
  {
    "label": "total_test_suite_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "total_test_suite_count()"
  },
  {
    "label": "test_suite_to_run_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "test_suite_to_run_count()"
  },
  {
    "label": "successful_test_case_count()",
    "kind": "Method",
    "detail": "Function (# ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ int)",
    "insertText": "successful_test_case_count()"
  },
  {
    "label": "failed_test_case_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "failed_test_case_count()"
  },
  {
    "label": "total_test_case_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "total_test_case_count()"
  },
  {
    "label": "test_case_to_run_count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "test_case_to_run_count()"
  },
  {
    "label": "successful_test_count()",
    "kind": "Method",
    "detail": "Function (# endif int)",
    "insertText": "successful_test_count()"
  },
  {
    "label": "start_timestamp()",
    "kind": "Method",
    "detail": "Function (TimeInMillis)",
    "insertText": "start_timestamp()"
  },
  {
    "label": "GetTestSuite()",
    "kind": "Method",
    "detail": "Function (const TestSuite*)",
    "insertText": "GetTestSuite(int i)"
  },
  {
    "label": "GetTestCase()",
    "kind": "Method",
    "detail": "Function (# ifndef GTEST_REMOVE_LEGACY_TEST_CASEAPI_ const TestCase*)",
    "insertText": "GetTestCase(int i)"
  },
  {
    "label": "listeners()",
    "kind": "Method",
    "detail": "Function (TestEventListeners&)",
    "insertText": "listeners()"
  },
  {
    "label": "AddEnvironment()",
    "kind": "Method",
    "detail": "Function (private : Environment*)",
    "insertText": "AddEnvironment(Environment* env)"
  },
  {
    "label": "AddTestPartResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestPartResult(TestPartResult::Type result_type, const char* file_name, int line_number, const std::string& message, const std::string& os_stack_trace) GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "GetMutableTestSuite()",
    "kind": "Method",
    "detail": "Function (TestSuite*)",
    "insertText": "GetMutableTestSuite(int i)"
  },
  {
    "label": "impl()",
    "kind": "Method",
    "detail": "Function (internal::UnitTestImpl*)",
    "insertText": "impl()"
  },
  {
    "label": "UnitTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnitTest()"
  },
  {
    "label": "PushGTestTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushGTestTrace(const internal::TraceInfo& trace) GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "PopGTestTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopGTestTrace() GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "UnitTest()",
    "kind": "Method",
    "detail": "Function (internal::Mutex mutex_ ; internal::UnitTestImpl* impl_ ;)",
    "insertText": "UnitTest(const UnitTest&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnitTest&)",
    "insertText": "operator(const UnitTest&)"
  },
  {
    "label": "AddGlobalTestEnvironment()",
    "kind": "Method",
    "detail": "Function (} ; Environment*)",
    "insertText": "AddGlobalTestEnvironment(Environment* env)"
  },
  {
    "label": "InitGoogleTest()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ void)",
    "insertText": "InitGoogleTest(int* argc, char** argv)"
  },
  {
    "label": "InitGoogleTest()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "InitGoogleTest(int* argc, wchar_t** argv)"
  },
  {
    "label": "InitGoogleTest()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ void)",
    "insertText": "InitGoogleTest()"
  },
  {
    "label": "CmpHelperEQFailure()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<T1,T2> AssertionResult)",
    "insertText": "CmpHelperEQFailure(const char* lhs_expression, const char* rhs_expression, const T1& lhs, const T2& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct faketype { } ; bool)",
    "insertText": "operator(faketype, faketype)"
  },
  {
    "label": "CmpHelperEQFailure()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "CmpHelperEQFailure(lhs_expression, rhs_expression, lhs, rhs)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} class EqHelper { public : template<T1,T2,std::enable_if<! std::is_integral<T1>::value | | ! std::is_pointer<T2>::value>::type* = nullptr> AssertionResult)",
    "insertText": "Compare(const char* lhs_expression, const char* rhs_expression, const T1& lhs, const T2& rhs)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} AssertionResult)",
    "insertText": "Compare(const char* lhs_expression, const char* rhs_expression, BiggestInt lhs, BiggestInt rhs)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (} template<T> AssertionResult)",
    "insertText": "Compare(const char* lhs_expression, const char* rhs_expression, std::nullptr_t , T* rhs)"
  },
  {
    "label": "CmpHelperOpFailure()",
    "kind": "Method",
    "detail": "Function (} } ; template<T1,T2> AssertionResult)",
    "insertText": "CmpHelperOpFailure(const char* expr1, const char* expr2, const T1& val1, const T2& val2, const char* op)"
  },
  {
    "label": "GTEST_IMPL_CMP_HELPER_()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "GTEST_IMPL_CMP_HELPER_(op_name, op) \\ template <typename T1, typename T2> \\ AssertionResult CmpHelper##op_name(const char* expr1, const char* expr2, \\ const T1& val1, const T2& val2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(val1 op val2)"
  },
  {
    "label": "AssertionSuccess()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "AssertionSuccess()"
  },
  {
    "label": "CmpHelperOpFailure()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ return)",
    "insertText": "CmpHelperOpFailure(expr1, expr2, val1, val2, #op)"
  },
  {
    "label": "GTEST_IMPL_CMP_HELPER_()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "GTEST_IMPL_CMP_HELPER_(NE, !=) GTEST_IMPL_CMP_HELPER_(LE, <=) GTEST_IMPL_CMP_HELPER_(LT, <) GTEST_IMPL_CMP_HELPER_(GE, >=) GTEST_IMPL_CMP_HELPER_(GT, >) #undef GTEST_IMPL_CMP_HELPER_ GTEST_API_ AssertionResult CmpHelperSTREQ(const char* s1_expression, const char* s2_expression, const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTRCASEEQ()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "CmpHelperSTRCASEEQ(const char* s1_expression, const char* s2_expression, const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTRNE()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "CmpHelperSTRNE(const char* s1_expression, const char* s2_expression, const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTRCASENE()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "CmpHelperSTRCASENE(const char* s1_expression, const char* s2_expression, const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTREQ()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "CmpHelperSTREQ(const char* s1_expression, const char* s2_expression, const wchar_t* s1, const wchar_t* s2)"
  },
  {
    "label": "CmpHelperSTRNE()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "CmpHelperSTRNE(const char* s1_expression, const char* s2_expression, const wchar_t* s1, const wchar_t* s2)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr, const char* haystack_expr, const char* needle, const char* haystack)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr, const char* haystack_expr, const wchar_t* needle, const wchar_t* haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr, const char* haystack_expr, const char* needle, const char* haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr, const char* haystack_expr, const wchar_t* needle, const wchar_t* haystack)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr, const char* haystack_expr, const ::std::string& needle, const ::std::string& haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr, const char* haystack_expr, const ::std::string& needle, const ::std::string& haystack)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (# if GTEST_HAS_STD_WSTRING GTEST_API_ AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr, const char* haystack_expr, const ::std::wstring& needle, const ::std::wstring& haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr, const char* haystack_expr, const ::std::wstring& needle, const ::std::wstring& haystack)"
  },
  {
    "label": "CmpHelperFloatingPointEQ()",
    "kind": "Method",
    "detail": "Function (# endif namespace internal { template<RawType> AssertionResult)",
    "insertText": "CmpHelperFloatingPointEQ(const char* lhs_expression, const char* rhs_expression, RawType lhs_value, RawType rhs_value)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (const FloatingPoint<RawType>)",
    "insertText": "lhs(lhs_value), rhs(rhs_value)"
  },
  {
    "label": "setprecision()",
    "kind": "Method",
    "detail": "Function (}::std::stringstream lhs_ss ; lhs_ss<<)",
    "insertText": "setprecision(std::numeric_limits<RawType>::digits10 + 2)"
  },
  {
    "label": "DoubleNearPredFormat()",
    "kind": "Method",
    "detail": "Function (} GTEST_API_ AssertionResult)",
    "insertText": "DoubleNearPredFormat(const char* expr1, const char* expr2, const char* abs_error_expr, double val1, double val2, double abs_error)"
  },
  {
    "label": "AssertHelper()",
    "kind": "Method",
    "detail": "Function (class GTEST_API_ AssertHelper { public :)",
    "insertText": "AssertHelper(TestPartResult::Type type, const char* file, int line, const char* message)"
  },
  {
    "label": "AssertHelper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AssertHelper()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const Message& message)"
  },
  {
    "label": "AssertHelperData()",
    "kind": "Method",
    "detail": "Function (private : struct AssertHelperData {)",
    "insertText": "AssertHelperData(TestPartResult::Type t, const char* srcfile, int line_num, const char* msg) : type(t), file(srcfile), line(line_num), message(msg)"
  },
  {
    "label": "AssertHelperData()",
    "kind": "Method",
    "detail": "Function (} TestPartResult::Type const type ; const char* const file ; int const line ; std::string const message ; private :)",
    "insertText": "AssertHelperData(const AssertHelperData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AssertHelperData&)",
    "insertText": "operator(const AssertHelperData&)"
  },
  {
    "label": "AssertHelper()",
    "kind": "Method",
    "detail": "Function (} ; AssertHelperData* const data_ ;)",
    "insertText": "AssertHelper(const AssertHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AssertHelper&)",
    "insertText": "operator(const AssertHelper&)"
  },
  {
    "label": "WithParamInterface()",
    "kind": "Method",
    "detail": "Function (} ; } template<T> class WithParamInterface { public : typedef T ParamType ; ~)",
    "insertText": "WithParamInterface()"
  },
  {
    "label": "GetParam()",
    "kind": "Method",
    "detail": "Function (} const ParamType&)",
    "insertText": "GetParam()"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(parameter_ != nullptr) << \"GetParam()"
  },
  {
    "label": "GTEST_SKIP()",
    "kind": "Method",
    "detail": "Function (parameter_ = parameter ; } const ParamType* parameter_ ; template<class TestClass> class internal::ParameterizedTestFactory ; } ; template<T> const T* WithParamInterface<T>::parameter_ = nullptr ; template<T> class TestWithParam : public Test,public WithParamInterface<T> { } ; # define)",
    "insertText": "GTEST_SKIP() GTEST_SKIP_(\"\") #define ADD_FAILURE() GTEST_NONFATAL_FAILURE_(\"Failed\") #define ADD_FAILURE_AT(file, line) \\ GTEST_MESSAGE_AT_(file, line, \"Failed\", \\ ::testing::TestPartResult::kNonFatalFailure) #define GTEST_FAIL() GTEST_FATAL_FAILURE_(\"Failed\") #define GTEST_FAIL_AT(file, line) \\ GTEST_MESSAGE_AT_(file, line, \"Failed\", \\ ::testing::TestPartResult::kFatalFailure) #if !GTEST_DONT_DEFINE_FAIL #define FAIL() GTEST_FAIL() #endif #define GTEST_SUCCEED() GTEST_SUCCESS_(\"Succeeded\") #if !GTEST_DONT_DEFINE_SUCCEED #define SUCCEED() GTEST_SUCCEED() #endif #define EXPECT_THROW(statement, expected_exception) \\ GTEST_TEST_THROW_(statement, expected_exception, GTEST_NONFATAL_FAILURE_) #define EXPECT_NO_THROW(statement) \\ GTEST_TEST_NO_THROW_(statement, GTEST_NONFATAL_FAILURE_) #define EXPECT_ANY_THROW(statement) \\ GTEST_TEST_ANY_THROW_(statement, GTEST_NONFATAL_FAILURE_) #define ASSERT_THROW(statement, expected_exception) \\ GTEST_TEST_THROW_(statement, expected_exception, GTEST_FATAL_FAILURE_) #define ASSERT_NO_THROW(statement) \\ GTEST_TEST_NO_THROW_(statement, GTEST_FATAL_FAILURE_) #define ASSERT_ANY_THROW(statement) \\ GTEST_TEST_ANY_THROW_(statement, GTEST_FATAL_FAILURE_) #define GTEST_EXPECT_TRUE(condition) \\ GTEST_TEST_BOOLEAN_(condition, #condition, false, true, \\ GTEST_NONFATAL_FAILURE_) #define GTEST_EXPECT_FALSE(condition) \\ GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\ GTEST_NONFATAL_FAILURE_) #define GTEST_ASSERT_TRUE(condition) \\ GTEST_TEST_BOOLEAN_(condition, #condition, false, true, GTEST_FATAL_FAILURE_) #define GTEST_ASSERT_FALSE(condition) \\ GTEST_TEST_BOOLEAN_(!(condition), #condition, true, false, \\ GTEST_FATAL_FAILURE_) #if !GTEST_DONT_DEFINE_EXPECT_TRUE #define EXPECT_TRUE(condition) GTEST_EXPECT_TRUE(condition) #endif #if !GTEST_DONT_DEFINE_EXPECT_FALSE #define EXPECT_FALSE(condition) GTEST_EXPECT_FALSE(condition) #endif #if !GTEST_DONT_DEFINE_ASSERT_TRUE #define ASSERT_TRUE(condition) GTEST_ASSERT_TRUE(condition) #endif #if !GTEST_DONT_DEFINE_ASSERT_FALSE #define ASSERT_FALSE(condition) GTEST_ASSERT_FALSE(condition) #endif #define EXPECT_EQ(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::EqHelper::Compare, val1, val2) #define EXPECT_NE(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2) #define EXPECT_LE(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2) #define EXPECT_LT(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2) #define EXPECT_GE(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2) #define EXPECT_GT(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2) #define GTEST_ASSERT_EQ(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::EqHelper::Compare, val1, val2) #define GTEST_ASSERT_NE(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperNE, val1, val2) #define GTEST_ASSERT_LE(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLE, val1, val2) #define GTEST_ASSERT_LT(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperLT, val1, val2) #define GTEST_ASSERT_GE(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGE, val1, val2) #define GTEST_ASSERT_GT(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperGT, val1, val2) #if !GTEST_DONT_DEFINE_ASSERT_EQ #define ASSERT_EQ(val1, val2) GTEST_ASSERT_EQ(val1, val2) #endif #if !GTEST_DONT_DEFINE_ASSERT_NE #define ASSERT_NE(val1, val2) GTEST_ASSERT_NE(val1, val2) #endif #if !GTEST_DONT_DEFINE_ASSERT_LE #define ASSERT_LE(val1, val2) GTEST_ASSERT_LE(val1, val2) #endif #if !GTEST_DONT_DEFINE_ASSERT_LT #define ASSERT_LT(val1, val2) GTEST_ASSERT_LT(val1, val2) #endif #if !GTEST_DONT_DEFINE_ASSERT_GE #define ASSERT_GE(val1, val2) GTEST_ASSERT_GE(val1, val2) #endif #if !GTEST_DONT_DEFINE_ASSERT_GT #define ASSERT_GT(val1, val2) GTEST_ASSERT_GT(val1, val2) #endif #define EXPECT_STREQ(s1, s2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2) #define EXPECT_STRNE(s1, s2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2) #define EXPECT_STRCASEEQ(s1, s2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2) #define EXPECT_STRCASENE(s1, s2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2) #define ASSERT_STREQ(s1, s2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTREQ, s1, s2) #define ASSERT_STRNE(s1, s2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRNE, s1, s2) #define ASSERT_STRCASEEQ(s1, s2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASEEQ, s1, s2) #define ASSERT_STRCASENE(s1, s2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperSTRCASENE, s1, s2) #define EXPECT_FLOAT_EQ(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\ val1, val2) #define EXPECT_DOUBLE_EQ(val1, val2) \\ EXPECT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\ val1, val2) #define ASSERT_FLOAT_EQ(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<float>, \\ val1, val2) #define ASSERT_DOUBLE_EQ(val1, val2) \\ ASSERT_PRED_FORMAT2(::testing::internal::CmpHelperFloatingPointEQ<double>, \\ val1, val2) #define EXPECT_NEAR(val1, val2, abs_error) \\ EXPECT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, val1, val2, \\ abs_error) #define ASSERT_NEAR(val1, val2, abs_error) \\ ASSERT_PRED_FORMAT3(::testing::internal::DoubleNearPredFormat, val1, val2, \\ abs_error) GTEST_API_ AssertionResult FloatLE(const char* expr1, const char* expr2, float val1, float val2)"
  },
  {
    "label": "DoubleLE()",
    "kind": "Method",
    "detail": "Function (GTEST_API_ AssertionResult)",
    "insertText": "DoubleLE(const char* expr1, const char* expr2, double val1, double val2)"
  },
  {
    "label": "EXPECT_HRESULT_SUCCEEDED()",
    "kind": "Method",
    "detail": "Function (# if GTEST_OS_WINDOWS # define)",
    "insertText": "EXPECT_HRESULT_SUCCEEDED(expr) \\ EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr)) #define ASSERT_HRESULT_SUCCEEDED(expr) \\ ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTSuccess, (expr)) #define EXPECT_HRESULT_FAILED(expr) \\ EXPECT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr)) #define ASSERT_HRESULT_FAILED(expr) \\ ASSERT_PRED_FORMAT1(::testing::internal::IsHRESULTFailure, (expr)) #endif #define ASSERT_NO_FATAL_FAILURE(statement) \\ GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_FATAL_FAILURE_) #define EXPECT_NO_FATAL_FAILURE(statement) \\ GTEST_TEST_NO_FATAL_FAILURE_(statement, GTEST_NONFATAL_FAILURE_)"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (public : template<T>)",
    "insertText": "ScopedTrace(const char* file, int line, const T& message)"
  },
  {
    "label": "PushTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTrace(file, line, (Message() << message).GetString())"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTrace(const char* file, int line, const char* message)"
  },
  {
    "label": "PushTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTrace(file, line, message ? message : \"(null)\")"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ScopedTrace(const char* file, int line, const std::string& message)"
  },
  {
    "label": "PushTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTrace(file, line, message)"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedTrace()"
  },
  {
    "label": "PushTrace()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PushTrace(const char* file, int line, std::string message)"
  },
  {
    "label": "ScopedTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedTrace(const ScopedTrace&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedTrace&)",
    "insertText": "operator(const ScopedTrace&)"
  },
  {
    "label": "SCOPED_TRACE()",
    "kind": "Method",
    "detail": "Function (} GTEST_ATTRIBUTE_UNUSED_ ; # define)",
    "insertText": "SCOPED_TRACE(message) \\ ::testing::ScopedTrace GTEST_CONCAT_TOKEN_(gtest_trace_, __LINE__)( \\ __FILE__, __LINE__, (message)) template <typename T1, typename T2> constexpr bool StaticAssertTypeEq()"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER # pragma)",
    "insertText": "warning(pop) #endif template <int&... ExplicitParameterBarrier, typename Factory> TestInfo* RegisterTest(const char* test_suite_name, const char* test_name, const char* type_param, const char* value_param, const char* file, int line, Factory factory)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (using TestT = std::remove_pointer<)",
    "insertText": "decltype(factory())"
  },
  {
    "label": "FactoryImpl()",
    "kind": "Method",
    "detail": "Function (class FactoryImpl : public internal::TestFactoryBase { public :)",
    "insertText": "FactoryImpl(Factory f) : factory_(std::move(f))"
  },
  {
    "label": "CreateTest()",
    "kind": "Method",
    "detail": "Function (} Test*)",
    "insertText": "CreateTest()"
  },
  {
    "label": "MakeAndRegisterTestInfo()",
    "kind": "Method",
    "detail": "Function (} private : Factory factory_ ; } ; return)",
    "insertText": "MakeAndRegisterTestInfo(test_suite_name, test_name, type_param, value_param, internal::CodeLocation(file, line), internal::GetTypeId<TestT>(), internal::SuiteApiResolver<TestT>::GetSetUpCaseOrSuite(file, line), internal::SuiteApiResolver<TestT>::GetTearDownCaseOrSuite(file, line), new FactoryImpl{std::move(factory)})"
  },
  {
    "label": "RUN_ALL_TESTS()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "RUN_ALL_TESTS()"
  }
]