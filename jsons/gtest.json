[
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "AssertHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssertHelper"
  },
  {
    "label": "DefaultGlobalTestPartResultReporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultGlobalTestPartResultReporter"
  },
  {
    "label": "ExecDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExecDeathTest"
  },
  {
    "label": "NoExecDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoExecDeathTest"
  },
  {
    "label": "FinalSuccessChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FinalSuccessChecker"
  },
  {
    "label": "GTestFlagSaver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTestFlagSaver"
  },
  {
    "label": "StreamingListenerTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamingListenerTest"
  },
  {
    "label": "TestResultAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestResultAccessor"
  },
  {
    "label": "TestEventListenersAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEventListenersAccessor"
  },
  {
    "label": "TestEventRepeater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEventRepeater"
  },
  {
    "label": "UnitTestRecordPropertyTestHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestRecordPropertyTestHelper"
  },
  {
    "label": "WindowsDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WindowsDeathTest"
  },
  {
    "label": "FuchsiaDeathTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuchsiaDeathTest"
  },
  {
    "label": "UnitTestImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTestImpl"
  },
  {
    "label": "Test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Test"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "UnitTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTest"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "FooTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FooTest"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "Setup_should_be_spelled_SetUp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Setup_should_be_spelled_SetUp"
  },
  {
    "label": "TestProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestProperty"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "UnitTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnitTest"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "TestResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestResult"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "Test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Test"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "bool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "bool"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "Test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Test"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "Environment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Environment"
  },
  {
    "label": "Setup_should_be_spelled_SetUp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Setup_should_be_spelled_SetUp"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "TestEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestEventListener"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "EmptyTestEventListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EmptyTestEventListener"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "TestSuite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSuite"
  },
  {
    "label": "TestInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestInfo"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "ScopedTrace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedTrace"
  },
  {
    "label": "Test",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Test"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "faketype",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "faketype"
  },
  {
    "label": "EqHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EqHelper"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "so",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "so"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "AssertHelperData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AssertHelperData"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "FooTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FooTest"
  },
  {
    "label": "WithParamInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WithParamInterface"
  },
  {
    "label": "TestClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestClass"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "TestWithParam",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestWithParam"
  },
  {
    "label": "in",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "in"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "template",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "template"
  },
  {
    "label": "Foo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Foo"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "FooTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FooTest"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "from"
  },
  {
    "label": "MyFixture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MyFixture"
  },
  {
    "label": "MyTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MyTest"
  },
  {
    "label": "FactoryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FactoryImpl"
  },
  {
    "label": "GTEST_DECLARE_string_()",
    "kind": "Method",
    "detail": "Function (GTEST_USE_OWN_FLAGFILE_FLAG_)",
    "insertText": "GTEST_DECLARE_string_(flagfile)"
  },
  {
    "label": "ReportFailureInUnknownLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportFailureInUnknownLocation(TestPartResult::Type result_type,\n                                    const std::string& message)"
  },
  {
    "label": "HasFatalFailure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFatalFailure()"
  },
  {
    "label": "HasNonfatalFailure()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNonfatalFailure()"
  },
  {
    "label": "IsSkipped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSkipped()"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProperty(const std::string& key, const std::string& value)"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProperty(const std::string& key, int value)"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUp()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "HasSameFixtureClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSameFixtureClass()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProperty(const std::string& xml_element,\n                      const TestProperty& test_property)"
  },
  {
    "label": "ValidateTestProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateTestProperty(const std::string& xml_element,\n                                   const TestProperty& test_property)"
  },
  {
    "label": "AddTestPartResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestPartResult(const TestPartResult& test_part_result)"
  },
  {
    "label": "ClearTestPartResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTestPartResults()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "test_suite_name()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "test_suite_name()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Skip()"
  },
  {
    "label": "TestSuite()",
    "kind": "Method",
    "detail": "Function (suite)",
    "insertText": "TestSuite(const char* name, const char* a_type_param,\n            internal::SetUpTestSuiteFunc set_up_tc,\n            internal::TearDownTestSuiteFunc tear_down_tc)"
  },
  {
    "label": "AddTestInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTestInfo(TestInfo* test_info)"
  },
  {
    "label": "ClearResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResult()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Skip()"
  },
  {
    "label": "ShuffleTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuffleTests(internal::Random* random)"
  },
  {
    "label": "UnshuffleTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnshuffleTests()"
  },
  {
    "label": "TestEventListeners()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "TestEventListeners()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(TestEventListener* listener)"
  },
  {
    "label": "SetDefaultResultPrinter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultResultPrinter(TestEventListener* listener)"
  },
  {
    "label": "SetDefaultXmlGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultXmlGenerator(TestEventListener* listener)"
  },
  {
    "label": "SuppressEventForwarding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SuppressEventForwarding()"
  },
  {
    "label": "GTEST_LOCK_EXCLUDED_()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "GTEST_LOCK_EXCLUDED_()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "GTEST_LOCK_EXCLUDED_()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "GTEST_LOCK_EXCLUDED_(mutex_)"
  },
  {
    "label": "RecordProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordProperty(const std::string& key, const std::string& value)"
  },
  {
    "label": "InitGoogleTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGoogleTest(int* argc, char** argv)"
  },
  {
    "label": "InitGoogleTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGoogleTest(int* argc, wchar_t** argv)"
  },
  {
    "label": "InitGoogleTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitGoogleTest()"
  },
  {
    "label": "AssertionSuccess()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AssertionSuccess()"
  },
  {
    "label": "CmpHelperEQFailure()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CmpHelperEQFailure(lhs_expression, rhs_expression, lhs, rhs)"
  },
  {
    "label": "CmpHelperEQ()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs)"
  },
  {
    "label": "CmpHelperEQ()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CmpHelperEQ(lhs_expression, rhs_expression, lhs, rhs)"
  },
  {
    "label": "AssertionSuccess()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AssertionSuccess()"
  },
  {
    "label": "CmpHelperOpFailure()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CmpHelperOpFailure(expr1, expr2, val1, val2, #op)"
  },
  {
    "label": "CmpHelperSTREQ()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "CmpHelperSTREQ(const char* s1_expression,\n                                          const char* s2_expression,\n                                          const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTRCASEEQ()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "CmpHelperSTRCASEEQ(const char* s1_expression,\n                                              const char* s2_expression,\n                                              const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTRNE()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "CmpHelperSTRNE(const char* s1_expression,\n                                          const char* s2_expression,\n                                          const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTRCASENE()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "CmpHelperSTRCASENE(const char* s1_expression,\n                                              const char* s2_expression,\n                                              const char* s1, const char* s2)"
  },
  {
    "label": "CmpHelperSTREQ()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "CmpHelperSTREQ(const char* s1_expression,\n                                          const char* s2_expression,\n                                          const wchar_t* s1, const wchar_t* s2)"
  },
  {
    "label": "CmpHelperSTRNE()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "CmpHelperSTRNE(const char* s1_expression,\n                                          const char* s2_expression,\n                                          const wchar_t* s1, const wchar_t* s2)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr,\n                                       const char* haystack_expr,\n                                       const char* needle,\n                                       const char* haystack)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr,\n                                       const char* haystack_expr,\n                                       const wchar_t* needle,\n                                       const wchar_t* haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr,\n                                          const char* haystack_expr,\n                                          const char* needle,\n                                          const char* haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr,\n                                          const char* haystack_expr,\n                                          const wchar_t* needle,\n                                          const wchar_t* haystack)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr,\n                                       const char* haystack_expr,\n                                       const ::std::string& needle,\n                                       const ::std::string& haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr,\n                                          const char* haystack_expr,\n                                          const ::std::string& needle,\n                                          const ::std::string& haystack)"
  },
  {
    "label": "IsSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsSubstring(const char* needle_expr,\n                                       const char* haystack_expr,\n                                       const ::std::wstring& needle,\n                                       const ::std::wstring& haystack)"
  },
  {
    "label": "IsNotSubstring()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "IsNotSubstring(const char* needle_expr,\n                                          const char* haystack_expr,\n                                          const ::std::wstring& needle,\n                                          const ::std::wstring& haystack)"
  },
  {
    "label": "AssertionSuccess()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AssertionSuccess()"
  },
  {
    "label": "DoubleNearPredFormat()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "DoubleNearPredFormat(const char* expr1,\n                                                const char* expr2,\n                                                const char* abs_error_expr,\n                                                double val1, double val2,\n                                                double abs_error)"
  },
  {
    "label": "FloatLE()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "FloatLE(const char* expr1, const char* expr2,\n                                   float val1, float val2)"
  },
  {
    "label": "DoubleLE()",
    "kind": "Method",
    "detail": "Function (AssertionResult)",
    "insertText": "DoubleLE(const char* expr1, const char* expr2,\n                                    double val1, double val2)"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (testing::ScopedTrace)",
    "insertText": "trace(\"file.cc\", 123, \"message\")"
  },
  {
    "label": "PushTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTrace(const char* file, int line, std::string message)"
  },
  {
    "label": "TempDir()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "TempDir()"
  },
  {
    "label": "MyTest()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "MyTest(v)"
  },
  {
    "label": "RUN_ALL_TESTS()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "RUN_ALL_TESTS()"
  },
  {
    "label": "factory_()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "factory_()"
  }
]