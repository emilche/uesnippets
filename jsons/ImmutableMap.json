[
  {
    "label": "ImutKeyValueInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImutKeyValueInfo"
  },
  {
    "label": "ImmutableMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableMap"
  },
  {
    "label": "Factory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Factory"
  },
  {
    "label": "CBWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CBWrapper"
  },
  {
    "label": "CBWrapperRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CBWrapperRef"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "ImmutableMapRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ImmutableMapRef"
  },
  {
    "label": "KeyOfValue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_IMMUTABLEMAP_H # define LLVM_ADT_IMMUTABLEMAP_H # include \" llvm / ADT / ImmutableSet . h \" namespace llvm { template<T,S> struct ImutKeyValueInfo { typedef const std::pair<T,S> value_type ; typedef const value_type& value_type_ref ; typedef const T key_type ; typedef const T& key_type_ref ; typedef const S data_type ; typedef const S& data_type_ref ; key_type_ref)",
    "insertText": "KeyOfValue(value_type_ref V)"
  },
  {
    "label": "isLess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isLess(key_type_ref L, key_type_ref R)"
  },
  {
    "label": "isDataEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDataEqual(data_type_ref L, data_type_ref R)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID& ID, value_type_ref V)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (ImutContainerInfo<T)",
    "insertText": "Profile(ID, V.first)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (ImutContainerInfo<S)",
    "insertText": "Profile(ID, V.second)"
  },
  {
    "label": "ImmutableMap()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyT,ValT,ValInfo = ImutKeyValueInfo<KeyT,ValT>> class ImmutableMap { public : typedef ValInfo::value_type value_type ; typedef ValInfo::value_type_ref value_type_ref ; typedef ValInfo::key_type key_type ; typedef ValInfo::key_type_ref key_type_ref ; typedef ValInfo::data_type data_type ; typedef ValInfo::data_type_ref data_type_ref ; typedef ImutAVLTree<ValInfo> TreeTy ; protected : TreeTy* Root ; public :)",
    "insertText": "ImmutableMap(const TreeTy* R) : Root(const_cast<TreeTy*>(R))"
  },
  {
    "label": "retain()",
    "kind": "Method",
    "detail": "Function (Root ->)",
    "insertText": "retain()"
  },
  {
    "label": "ImmutableMap()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ImmutableMap(const ImmutableMap &X) : Root(X.Root)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ImmutableMap&)",
    "insertText": "operator(const ImmutableMap &X)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Root)"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (Root ->)",
    "insertText": "release()"
  },
  {
    "label": "ImmutableMap()",
    "kind": "Method",
    "detail": "Function (} Root = X . Root ; } return* this ; } ~)",
    "insertText": "ImmutableMap()"
  },
  {
    "label": "Factory()",
    "kind": "Method",
    "detail": "Function (} } class Factory { TreeTy::Factory F ; const bool Canonicalize ; public :)",
    "insertText": "Factory(bool canonicalize = true) : Canonicalize(canonicalize)"
  },
  {
    "label": "Factory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Factory(BumpPtrAllocator& Alloc, bool canonicalize = true) : F(Alloc), Canonicalize(canonicalize)"
  },
  {
    "label": "getEmptyMap()",
    "kind": "Method",
    "detail": "Function (} ImmutableMap)",
    "insertText": "getEmptyMap()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} ImmutableMap)",
    "insertText": "add(ImmutableMap Old, key_type_ref K, data_type_ref D)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (TreeTy* T = F .)",
    "insertText": "add(Old.Root, std::pair<key_type,data_type>(K,D))"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} ImmutableMap)",
    "insertText": "remove(ImmutableMap Old, key_type_ref K)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (TreeTy* T = F .)",
    "insertText": "remove(Old.Root,K)"
  },
  {
    "label": "getTreeFactory()",
    "kind": "Method",
    "detail": "Function (} TreeTy::Factory*)",
    "insertText": "getTreeFactory()"
  },
  {
    "label": "Factory()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "Factory(const Factory& RHS)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const Factory& RHS)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "contains(key_type_ref K)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ImmutableMap &RHS)"
  },
  {
    "label": "getRoot()",
    "kind": "Method",
    "detail": "Function (} TreeTy*)",
    "insertText": "getRoot()"
  },
  {
    "label": "getRootWithoutRetain()",
    "kind": "Method",
    "detail": "Function (} return Root ; } TreeTy*)",
    "insertText": "getRootWithoutRetain()"
  },
  {
    "label": "manualRelease()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "manualRelease()"
  },
  {
    "label": "isEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEmpty()"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "C(V.first,V.second)"
  },
  {
    "label": "CBWrapperRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<Callback> struct CBWrapperRef { Callback& C ;)",
    "insertText": "CBWrapperRef(Callback& c) : C(c)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(value_type_ref V)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} } ; public : template<Callback> void)",
    "insertText": "foreach(Callback& C)"
  },
  {
    "label": "CB()",
    "kind": "Method",
    "detail": "Function (CBWrapperRef<Callback>)",
    "insertText": "CB(C)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (Root ->)",
    "insertText": "foreach(CB)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (} } template<Callback> void)",
    "insertText": "foreach()"
  },
  {
    "label": "verify()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "verify()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (} class iterator : public ImutAVLValueIterator<ImmutableMap> {)",
    "insertText": "iterator()"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "iterator(TreeTy *Tree) : iterator::ImutAVLValueIterator(Tree)"
  },
  {
    "label": "getKey()",
    "kind": "Method",
    "detail": "Function (} class ImmutableMap ; public : key_type_ref)",
    "insertText": "getKey()"
  },
  {
    "label": "getData()",
    "kind": "Method",
    "detail": "Function (} data_type_ref)",
    "insertText": "getData()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} } ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (} data_type*)",
    "insertText": "lookup(key_type_ref K)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (TreeTy* T = Root ->)",
    "insertText": "find(K)"
  },
  {
    "label": "getMaxElement()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } value_type*)",
    "insertText": "getMaxElement()"
  },
  {
    "label": "getHeight()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHeight()"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID& ID, const ImmutableMap& M)"
  },
  {
    "label": "AddPointer()",
    "kind": "Method",
    "detail": "Function (ID .)",
    "insertText": "AddPointer(M.Root)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID& ID)"
  },
  {
    "label": "ImmutableMapRef()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyT,ValT,ValInfo = ImutKeyValueInfo<KeyT,ValT>> class ImmutableMapRef { public : typedef ValInfo::value_type value_type ; typedef ValInfo::value_type_ref value_type_ref ; typedef ValInfo::key_type key_type ; typedef ValInfo::key_type_ref key_type_ref ; typedef ValInfo::data_type data_type ; typedef ValInfo::data_type_ref data_type_ref ; typedef ImutAVLTree<ValInfo> TreeTy ; typedef TreeTy::Factory FactoryTy ; protected : TreeTy* Root ; FactoryTy* Factory ; public :)",
    "insertText": "ImmutableMapRef(const TreeTy* R, FactoryTy *F) : Root(const_cast<TreeTy*>(R)), Factory(F)"
  },
  {
    "label": "ImmutableMapRef()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ImmutableMapRef(const ImmutableMap<KeyT, ValT> &X, typename ImmutableMap<KeyT, ValT>::Factory &F) : Root(X.getRootWithoutRetain()), Factory(F.getTreeFactory())"
  },
  {
    "label": "ImmutableMapRef()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "ImmutableMapRef(const ImmutableMapRef &X) : Root(X.Root), Factory(X.Factory)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ImmutableMapRef&)",
    "insertText": "operator(const ImmutableMapRef &X)"
  },
  {
    "label": "ImmutableMapRef()",
    "kind": "Method",
    "detail": "Function (Root = X . Root ; Factory = X . Factory ; } return* this ; } ~)",
    "insertText": "ImmutableMapRef()"
  },
  {
    "label": "getEmptyMap()",
    "kind": "Method",
    "detail": "Function (} ImmutableMapRef)",
    "insertText": "getEmptyMap(FactoryTy *F)"
  },
  {
    "label": "manualRetain()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "manualRetain()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (} ImmutableMapRef)",
    "insertText": "add(key_type_ref K, data_type_ref D)"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (TreeTy* NewT = Factory ->)",
    "insertText": "add(Root, std::pair<key_type, data_type>(K, D))"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (} ImmutableMapRef)",
    "insertText": "remove(key_type_ref K)"
  },
  {
    "label": "remove()",
    "kind": "Method",
    "detail": "Function (TreeTy* NewT = Factory ->)",
    "insertText": "remove(Root, K)"
  },
  {
    "label": "asImmutableMap()",
    "kind": "Method",
    "detail": "Function (} ImmutableMap<KeyT,ValT>)",
    "insertText": "asImmutableMap()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ImmutableMapRef &RHS)"
  },
  {
    "label": "Profile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Profile(FoldingSetNodeID& ID, const ImmutableMapRef &M)"
  }
]