[
  {
    "label": "FEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvent"
  },
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FProcHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcHandle"
  },
  {
    "label": "FWindowsPlatformProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowsPlatformProcess"
  },
  {
    "label": "FWindowsSemaphore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWindowsSemaphore"
  },
  {
    "label": "FProcEnumInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProcEnumInfo"
  },
  {
    "label": "FProcEnumerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProcEnumerator"
  },
  {
    "label": "FProcHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" GenericPlatform / GenericPlatformProcess . h \" # include \" Windows / WindowsSystemIncludes . h \" class FEvent ; class FRunnableThread ; struct FProcHandle : public TProcHandle<Windows::HANDLE,nullptr> { public :)",
    "insertText": "FProcHandle() : TProcHandle()"
  },
  {
    "label": "FProcHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProcHandle(HandleType Other ) : TProcHandle( Other)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} } ; struct FWindowsPlatformProcess : public FGenericPlatformProcess { struct FWindowsSemaphore : public FSemaphore { void)",
    "insertText": "Lock()"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLock(uint64 NanosecondsToWait)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "GetSemaphore()",
    "kind": "Method",
    "detail": "Function (Windows::HANDLE)",
    "insertText": "GetSemaphore()"
  },
  {
    "label": "FWindowsSemaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWindowsSemaphore(const TCHAR* InName, Windows::HANDLE InSemaphore)"
  },
  {
    "label": "FWindowsSemaphore()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FWindowsSemaphore()"
  },
  {
    "label": "FProcEnumerator()",
    "kind": "Method",
    "detail": "Function (protected : Windows::HANDLE Semaphore ; } ; struct FProcEnumInfo ; class FProcEnumerator { public :)",
    "insertText": "FProcEnumerator()"
  },
  {
    "label": "FProcEnumerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProcEnumerator(const FProcEnumerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FProcEnumerator&)",
    "insertText": "operator(const FProcEnumerator&)"
  },
  {
    "label": "GetCurrent()",
    "kind": "Method",
    "detail": "Function (FProcEnumInfo)",
    "insertText": "GetCurrent()"
  },
  {
    "label": "MoveNext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveNext()"
  },
  {
    "label": "FProcEnumInfo()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FProcEnumInfo()"
  },
  {
    "label": "GetPID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPID()"
  },
  {
    "label": "GetParentPID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetParentPID()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetName()"
  },
  {
    "label": "GetFullPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullPath()"
  },
  {
    "label": "FProcEnumInfo()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FProcEnumInfo(const Windows::PROCESSENTRY32& InInfo)"
  },
  {
    "label": "SetProcessAffinity()",
    "kind": "Method",
    "detail": "Function (Windows::PROCESSENTRY32* Info ; } ; public : bool)",
    "insertText": "SetProcessAffinity(uint32 NumCoresForAffinity, bool bPhysicalCoresOnly)"
  },
  {
    "label": "IsProcessAffinitySet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcessAffinitySet()"
  },
  {
    "label": "GetDllHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetDllHandle(const TCHAR* Filename)"
  },
  {
    "label": "FreeDllHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDllHandle(void* DllHandle)"
  },
  {
    "label": "GetDllExport()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetDllExport(void* DllHandle, const TCHAR* ProcName)"
  },
  {
    "label": "AddDllDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDllDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetDllDirectories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDllDirectories(TArray<FString>& OutDllDirectories)"
  },
  {
    "label": "PushDllDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDllDirectory(const TCHAR* Directory)"
  },
  {
    "label": "PopDllDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopDllDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetCurrentProcessId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentProcessId()"
  },
  {
    "label": "GetCurrentCoreNumber()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCurrentCoreNumber()"
  },
  {
    "label": "SetThreadAffinityMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadAffinityMask(uint64 AffinityMask)"
  },
  {
    "label": "SetThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadName(const TCHAR* ThreadName)"
  },
  {
    "label": "BaseDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "BaseDir()"
  },
  {
    "label": "UserDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserDir()"
  },
  {
    "label": "UserTempDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserTempDir()"
  },
  {
    "label": "UserSettingsDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserSettingsDir()"
  },
  {
    "label": "UserSettingsDirMediumIntegrity()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserSettingsDirMediumIntegrity()"
  },
  {
    "label": "ApplicationSettingsDir()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ApplicationSettingsDir()"
  },
  {
    "label": "GetApplicationSettingsDir()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationSettingsDir(const ApplicationSettingsContext& Settings)"
  },
  {
    "label": "ComputerName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ComputerName()"
  },
  {
    "label": "UserName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "UserName(bool bOnlyAlphaNumeric = true)"
  },
  {
    "label": "SetCurrentWorkingDirectoryToBaseDir()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentWorkingDirectoryToBaseDir()"
  },
  {
    "label": "GetCurrentWorkingDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetCurrentWorkingDirectory()"
  },
  {
    "label": "ShaderWorkingDir()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "ShaderWorkingDir()"
  },
  {
    "label": "ExecutablePath()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutablePath()"
  },
  {
    "label": "ExecutableName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ExecutableName(bool bRemoveExtension = true)"
  },
  {
    "label": "GenerateApplicationPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateApplicationPath(const FString& AppName, EBuildConfiguration BuildConfiguration)"
  },
  {
    "label": "GetModuleExtension()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetModuleExtension()"
  },
  {
    "label": "GetBinariesSubdirectory()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetBinariesSubdirectory()"
  },
  {
    "label": "GetModulesDirectory()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "GetModulesDirectory()"
  },
  {
    "label": "CanLaunchURL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLaunchURL(const TCHAR* URL)"
  },
  {
    "label": "LaunchURL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LaunchURL(const TCHAR* URL, const TCHAR* Parms, FString* Error)"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild = nullptr)"
  },
  {
    "label": "CreateProc()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateProc(const TCHAR* URL, const TCHAR* Parms, bool bLaunchDetached, bool bLaunchHidden, bool bLaunchReallyHidden, uint32* OutProcessID, int32 PriorityModifier, const TCHAR* OptionalWorkingDirectory, void* PipeWriteChild, void* PipeReadChild, void* PipeStdErrChild)"
  },
  {
    "label": "SetProcPriority()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProcPriority(FProcHandle & InProcHandle, int32 PriorityModifier)"
  },
  {
    "label": "OpenProcess()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "OpenProcess(uint32 ProcessID)"
  },
  {
    "label": "IsProcRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProcRunning(FProcHandle & ProcessHandle)"
  },
  {
    "label": "WaitForProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForProc(FProcHandle & ProcessHandle)"
  },
  {
    "label": "CloseProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseProc(FProcHandle & ProcessHandle)"
  },
  {
    "label": "TerminateProc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateProc(FProcHandle & ProcessHandle, bool KillTree = false)"
  },
  {
    "label": "TerminateProcTreeWithPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateProcTreeWithPredicate(FProcHandle& ProcessHandle, TFunctionRef<bool(uint32 ProcessId, const TCHAR* ApplicationName)> Predicate)"
  },
  {
    "label": "GetProcReturnCode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetProcReturnCode(FProcHandle & ProcHandle, int32* ReturnCode)"
  },
  {
    "label": "GetApplicationMemoryUsage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetApplicationMemoryUsage(uint32 ProcessId, SIZE_T* OutMemoryUsage)"
  },
  {
    "label": "GetPerFrameProcessorUsage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPerFrameProcessorUsage(uint32 ProcessId, float& ProcessUsageFraction, float& IdleUsageFraction)"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning(uint32 ProcessId)"
  },
  {
    "label": "IsApplicationRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsApplicationRunning(const TCHAR* ProcName)"
  },
  {
    "label": "GetApplicationName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetApplicationName(uint32 ProcessId)"
  },
  {
    "label": "ExecProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode, FString* OutStdOut, FString* OutStdErr, const TCHAR* OptionalWorkingDirectory = NULL, bool bShouldEndWithParentProcess = false)"
  },
  {
    "label": "ExecElevatedProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExecElevatedProcess(const TCHAR* URL, const TCHAR* Params, int32* OutReturnCode)"
  },
  {
    "label": "CreateElevatedProcess()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "CreateElevatedProcess(const TCHAR* URL, const TCHAR* Params)"
  },
  {
    "label": "LaunchFileInDefaultExternalApplication()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchFileInDefaultExternalApplication(const TCHAR* FileName, const TCHAR* Parms = NULL, ELaunchVerb::Type Verb = ELaunchVerb::Open, bool bPromptToOpenOnFailure = true)"
  },
  {
    "label": "ExploreFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExploreFolder(const TCHAR* FilePath)"
  },
  {
    "label": "ResolveNetworkPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveNetworkPath(FString InUNCPath, FString& OutPath)"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(float Seconds)"
  },
  {
    "label": "SleepNoStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepNoStats(float Seconds)"
  },
  {
    "label": "SleepInfinite()",
    "kind": "Method",
    "detail": "Function ([ [ noreturn ] ] void)",
    "insertText": "SleepInfinite()"
  },
  {
    "label": "YieldThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YieldThread()"
  },
  {
    "label": "CreateRunnableThread()",
    "kind": "Method",
    "detail": "Function (class FRunnableThread*)",
    "insertText": "CreateRunnableThread()"
  },
  {
    "label": "ClosePipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClosePipe(void* ReadPipe, void* WritePipe)"
  },
  {
    "label": "CreatePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePipe(void*& ReadPipe, void*& WritePipe, bool bWritePipeLocal = false)"
  },
  {
    "label": "ReadPipe()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ReadPipe(void* ReadPipe)"
  },
  {
    "label": "ReadPipeToArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPipeToArray(void* ReadPipe, TArray<uint8> & Output)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const FString& Message, FString* OutWritten = nullptr)"
  },
  {
    "label": "WritePipe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritePipe(void* WritePipe, const uint8* Data, const int32 DataLength, int32* OutDataLength = nullptr)"
  },
  {
    "label": "NewInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (FSemaphore*)",
    "insertText": "NewInterprocessSynchObject(const FString& Name, bool bCreate, uint32 MaxLocks = 1)"
  },
  {
    "label": "NewInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (FSemaphore*)",
    "insertText": "NewInterprocessSynchObject(const TCHAR* Name, bool bCreate, uint32 MaxLocks = 1)"
  },
  {
    "label": "DeleteInterprocessSynchObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteInterprocessSynchObject(FSemaphore * Object)"
  },
  {
    "label": "Daemonize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Daemonize()"
  },
  {
    "label": "SetupGameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupGameThread()"
  },
  {
    "label": "SetupAudioThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupAudioThread()"
  },
  {
    "label": "TeardownAudioThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TeardownAudioThread()"
  },
  {
    "label": "IsFirstInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFirstInstance()"
  },
  {
    "label": "CeaseBeingFirstInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CeaseBeingFirstInstance()"
  },
  {
    "label": "TryGetMemoryUsage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetMemoryUsage(FProcHandle& ProcessHandle, FPlatformProcessMemoryStats& OutStats)"
  },
  {
    "label": "ShouldExpectLowIntegrityLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldExpectLowIntegrityLevel()"
  },
  {
    "label": "ReadFromPipes()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ReadFromPipes(FString* OutStrings[], Windows::HANDLE InPipes[], int32 PipeCount)"
  },
  {
    "label": "LoadLibraryWithSearchPaths()",
    "kind": "Method",
    "detail": "Function (private : TArray<FString> DllDirectoryStack ; TArray<FString> DllDirectories ; TMap<FName,TArray<FString>> SearchPathDllCache ; void*)",
    "insertText": "LoadLibraryWithSearchPaths(const FString& FileName, const TArray<FString>& SearchPaths)"
  },
  {
    "label": "ResolveImport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveImport(const FString& Name, const TArray<FString>& SearchPaths, FString& OutFileName)"
  },
  {
    "label": "ResolveMissingImportsRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveMissingImportsRecursive(const FString& FileName, const TArray<FString>& SearchPaths, TArray<FString>& ImportFileNames, TSet<FString>& VisitedImportNames)"
  }
]