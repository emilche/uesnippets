[
  {
    "label": "RtcEventLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLog"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RtcEventLogNull",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventLogNull"
  },
  {
    "label": "RtcEventLog()",
    "kind": "Method",
    "detail": "Function (# ifndef API_RTC_EVENT_LOG_RTC_EVENT_LOG_H_ # define API_RTC_EVENT_LOG_RTC_EVENT_LOG_H_ # include<cstddef> # include<cstdint> # include<functional> # include<memory> # include \" api / rtc_event_log / rtc_event . h \" # include \" api / rtc_event_log_output . h \" # include \" api / task_queue / task_queue_factory . h \" namespace webrtc { class RtcEventLog { public : enum : size_t { kUnlimitedOutput = 0 } ; enum : int64_t { kImmediateOutput = 0 } ; enum class EncodingType { Legacy,NewFormat,ProtoFree } ; ~)",
    "insertText": "RtcEventLog()"
  },
  {
    "label": "StartLogging()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartLogging(std::unique_ptr<RtcEventLogOutput> output, int64_t output_period_ms)"
  },
  {
    "label": "StopLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLogging()"
  },
  {
    "label": "StopLogging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopLogging(std::function<void()> callback)"
  },
  {
    "label": "callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "callback()"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Log(std::unique_ptr<RtcEvent> event)"
  }
]