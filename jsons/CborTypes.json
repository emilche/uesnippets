[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCborReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCborReader"
  },
  {
    "label": "FCborWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCborWriter"
  },
  {
    "label": "FCborHeader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCborHeader"
  },
  {
    "label": "FCborContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCborContext"
  },
  {
    "label": "ScopedCborArchiveEndianness",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCborArchiveEndianness"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / EnumClassFlags . h \" enum class ECborCode : uint8 { None = 0,Uint = 0<<5,Int = 1<<5,ByteString = 2<<5,TextString = 3<<5,Array = 4<<5,Map = 5<<5,Tag = 6<<5,Prim = 7<<5,Value_1Byte = 0 x18,Value_2Bytes = 0 x19,Value_4Bytes = 0 x1A,Value_8Bytes = 0 x1B,Unused_28 = 0 x1C,Unused_29 = 0 x1D,Unused_30 = 0 x1E,Indefinite = 0 x1F,False = 0 x14,True = 0 x15,Null = 0 x16,Undefined = 0 x17,Break = 0 xFF,Dummy = 0 x1C,StreamEnd = 0 x3C,ErrorReservedItem = 0 x1D,ErrorStreamFailure = 0 x1E,ErrorBreak = 0 x3D,ErrorMapContainer = 0 x3E,ErrorNoHalfFloat = 0 x5D,ErrorContext = 0 x5E,ErrorStringNesting = 0 x7D,ErrorStringLength = 0 x7E,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ECborCode)"
  },
  {
    "label": "FCborHeader()",
    "kind": "Method",
    "detail": "Function (class FCborReader ; class FCborWriter ; class FCborHeader { public :)",
    "insertText": "FCborHeader(uint8 InHeader = 0) : Header(InHeader)"
  },
  {
    "label": "FCborHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCborHeader(ECborCode InHeader) : Header((uint8)InHeader)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(ECborCode Code)"
  },
  {
    "label": "Header()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Header(uint8)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(uint8 Code)"
  },
  {
    "label": "Raw()",
    "kind": "Method",
    "detail": "Function (Header = Code ; } uint8)",
    "insertText": "Raw()"
  },
  {
    "label": "MajorType()",
    "kind": "Method",
    "detail": "Function (} ECborCode)",
    "insertText": "MajorType()"
  },
  {
    "label": "AdditionalValue()",
    "kind": "Method",
    "detail": "Function (} ECborCode)",
    "insertText": "AdditionalValue()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FCborHeader& InHeader)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FCborContext()",
    "kind": "Method",
    "detail": "Function (* this =)",
    "insertText": "FCborContext()"
  },
  {
    "label": "RawCode()",
    "kind": "Method",
    "detail": "Function (} ECborCode)",
    "insertText": "RawCode()"
  },
  {
    "label": "IsDummy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDummy()"
  },
  {
    "label": "IsError()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsError()"
  },
  {
    "label": "IsBreak()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBreak()"
  },
  {
    "label": "IsString()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsString()"
  },
  {
    "label": "IsContainer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsContainer()"
  },
  {
    "label": "IsIndefiniteContainer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsIndefiniteContainer()"
  },
  {
    "label": "IsFiniteContainer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFiniteContainer()"
  },
  {
    "label": "AsBreak()",
    "kind": "Method",
    "detail": "Function (} ECborCode)",
    "insertText": "AsBreak()"
  },
  {
    "label": "AsLength()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "AsLength()"
  },
  {
    "label": "AsCString()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "AsCString()"
  },
  {
    "label": "AsByteArray()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const uint8>)",
    "insertText": "AsByteArray()"
  },
  {
    "label": "FCborContext()",
    "kind": "Method",
    "detail": "Function (} private : class FCborReader ; class FCborWriter ;)",
    "insertText": "FCborContext(ECborCode Code) : Header(Code) , IntValue(0)"
  },
  {
    "label": "ScopedCborArchiveEndianness()",
    "kind": "Method",
    "detail": "Function (} FCborHeader Header ; union { int64 IntValue ; uint64 UIntValue ; bool BoolValue ; float FloatValue ; double DoubleValue ; uint64 Length ; } ; TArray<char> RawTextValue ; } ; enum class ECborEndianness { Platform,BigEndian,LittleEndian,StandardCompliant = BigEndian,} ; class ScopedCborArchiveEndianness { public :)",
    "insertText": "ScopedCborArchiveEndianness(FArchive& InArchive, ECborEndianness Endianness) : Archive(InArchive), bOldByteSwappingState(InArchive.IsByteSwapping())"
  },
  {
    "label": "SetByteSwapping()",
    "kind": "Method",
    "detail": "Function (bool bLittleEndianPlatform = PLATFORM_LITTLE_ENDIAN ! = 0 ; Archive .)",
    "insertText": "SetByteSwapping(Endianness != ECborEndianness::Platform && ((Endianness == ECborEndianness::BigEndian && bLittleEndianPlatform) || (Endianness == ECborEndianness::LittleEndian && !bLittleEndianPlatform)))"
  },
  {
    "label": "ScopedCborArchiveEndianness()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ScopedCborArchiveEndianness()"
  },
  {
    "label": "SetByteSwapping()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetByteSwapping(bOldByteSwappingState)"
  }
]