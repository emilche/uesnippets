[
  {
    "label": "TBVHLeafTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBVHLeafTraits"
  },
  {
    "label": "CComplexBVHLeaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CComplexBVHLeaf"
  },
  {
    "label": "TBVHNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBVHNode"
  },
  {
    "label": "OBJECT_ARRAY",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OBJECT_ARRAY"
  },
  {
    "label": "LEAF_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEAF_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TBoundingVolumeHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBoundingVolumeHierarchy"
  },
  {
    "label": "T_INTERSECTION",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_INTERSECTION"
  },
  {
    "label": "Requires()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Requires(typename T::TPayloadType)"
  },
  {
    "label": "TBVHNode()",
    "kind": "Method",
    "detail": "Function (} ; namespace Chaos { template<T,int d> struct TBVHNode {)",
    "insertText": "TBVHNode()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TVector<T,d> MMin,MMax ; int32 MAxis ; TArray<int32> MChildren ; int32 LeafIndex ; } ; template<T,int d> FArchive&)",
    "insertText": "operator(FArchive& Ar, TBVHNode<T,d>& LeafNode)"
  },
  {
    "label": "TBoundingVolumeHierarchy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBoundingVolumeHierarchy(const OBJECT_ARRAY& Objects, const int32 MaxLevels = DefaultMaxLevels, const bool bUseVelocity = DefaultUseVelocity, const T Dt = DefaultDt)"
  },
  {
    "label": "TBoundingVolumeHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBoundingVolumeHierarchy(const OBJECT_ARRAY& Objects, const TArray<uint32>& ActiveIndices, const int32 MaxLevels = DefaultMaxLevels, const bool bUseVelocity = DefaultUseVelocity, const T Dt = DefaultDt)"
  },
  {
    "label": "TBoundingVolumeHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBoundingVolumeHierarchy(const TBoundingVolumeHierarchy<OBJECT_ARRAY, LEAF_TYPE, T, d>& Other)"
  },
  {
    "label": "TBoundingVolumeHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBoundingVolumeHierarchy(TBoundingVolumeHierarchy<OBJECT_ARRAY, LEAF_TYPE, T, d>&& Other) : MObjects(Other.MObjects), MGlobalObjects(MoveTemp(Other.MGlobalObjects)), MWorldSpaceBoxes(MoveTemp(Other.MWorldSpaceBoxes)), MMaxLevels(Other.MMaxLevels), Elements(MoveTemp(Other.Elements)), Leafs(MoveTemp(Other.Leafs))"
  },
  {
    "label": "DeepAssign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeepAssign(const ISpatialAcceleration<int32, T, d>& Other)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (* this = static_cast<const TBoundingVolumeHierarchy<OBJECT_ARRAY,LEAF_TYPE,T,)",
    "insertText": "d(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TBoundingVolumeHierarchy&)",
    "insertText": "operator(const TBoundingVolumeHierarchy<OBJECT_ARRAY, LEAF_TYPE, T, d>& Other)"
  },
  {
    "label": "DeepAssign()",
    "kind": "Method",
    "detail": "Function (ISpatialAcceleration<int32,T,d)",
    "insertText": "DeepAssign(Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MObjects = Other . MObjects ; MGlobalObjects = Other . MGlobalObjects ; MWorldSpaceBoxes = Other . MWorldSpaceBoxes ; MMaxLevels = Other . MMaxLevels ; Elements = Other . Elements ; Leafs = Other . Leafs ; return* this ; } TBoundingVolumeHierarchy&)",
    "insertText": "operator(TBoundingVolumeHierarchy<OBJECT_ARRAY, LEAF_TYPE, T, d>&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MObjects = Other . MObjects ; MGlobalObjects =)",
    "insertText": "MoveTemp(Other.MGlobalObjects)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MWorldSpaceBoxes =)",
    "insertText": "MoveTemp(Other.MWorldSpaceBoxes)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (MMaxLevels = Other . MMaxLevels ; Elements =)",
    "insertText": "MoveTemp(Other.Elements)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Leafs =)",
    "insertText": "MoveTemp(Other.Leafs)"
  },
  {
    "label": "UpdateHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchy(const TArray<uint32>& ActiveIndices, const bool AllowMultipleSplitting = DefaultAllowMultipleSplitting, const bool bUseVelocity = DefaultUseVelocity, const T Dt = DefaultDt)"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reinitialize(bool bUseVelocity, T Dt)"
  },
  {
    "label": "UpdateHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchy(DefaultAllowMultipleSplitting, bUseVelocity, Dt)"
  },
  {
    "label": "Reinitialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reinitialize(const TArray<uint32>& ActiveIndices, bool bUseVelocity, T Dt)"
  },
  {
    "label": "UpdateHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchy(ActiveIndices, DefaultAllowMultipleSplitting, bUseVelocity, Dt)"
  },
  {
    "label": "FindAllIntersectionsImp()",
    "kind": "Method",
    "detail": "Function (} template<class T_INTERSECTION> TArray<int32>)",
    "insertText": "FindAllIntersectionsImp(const T_INTERSECTION& Intersection)"
  },
  {
    "label": "FindAllIntersectionsHelper()",
    "kind": "Method",
    "detail": "Function (TArray<int32> IntersectionList =)",
    "insertText": "FindAllIntersectionsHelper(Elements[0], Intersection)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (IntersectionList .)",
    "insertText": "Append(MGlobalObjects)"
  },
  {
    "label": "VisitAllIntersectionsRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAllIntersectionsRecursive(Elements[0], LocalBounds, Visitor)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (} } TArray<int32>)",
    "insertText": "FindAllIntersections(const FAABB3& Box)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "FindAllIntersections(const TSpatialRay<T,d>& Ray)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "FindAllIntersections(const TVector<T, d>& Point)"
  },
  {
    "label": "FindAllIntersections()",
    "kind": "Method",
    "detail": "Function (} TArray<int32>)",
    "insertText": "FindAllIntersections(const TGeometryParticles<T, d>& InParticles, const int32 i)"
  },
  {
    "label": "GlobalObjects()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GlobalObjects()"
  },
  {
    "label": "DebugDraw()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "DebugDraw(ISpacialDebugDrawInterface<T>* InInterface)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "PrintTree()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "PrintTree(FString Prefix, const TBVHNode<T,d>* MyNode)"
  },
  {
    "label": "PrintTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintTree(Prefix + \" \", &Elements[Child])"
  },
  {
    "label": "VisitAllIntersectionsRecursive()",
    "kind": "Method",
    "detail": "Function (} } template<TVisitor> void)",
    "insertText": "VisitAllIntersectionsRecursive(const TBVHNode<T, d>& MyNode, const FAABB3& ObjectBox, const TVisitor& Visitor)"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (TAABB<T,d>)",
    "insertText": "Box(MyNode.MMin, MyNode.MMax)"
  },
  {
    "label": "Visitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visitor(Leafs[MyNode.LeafIndex])"
  },
  {
    "label": "VisitAllIntersectionsRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitAllIntersectionsRecursive(Elements[MyNode.MChildren[Child]], ObjectBox, Visitor)"
  },
  {
    "label": "FindAllIntersectionsHelper()",
    "kind": "Method",
    "detail": "Function (} } TArray<int32>)",
    "insertText": "FindAllIntersectionsHelper(const TBVHNode<T,d>& MyNode, const TVector<T, d>& Point)"
  },
  {
    "label": "FindAllIntersectionsHelper()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "FindAllIntersectionsHelper(const TBVHNode<T,d>& MyNode, const TAABB<T, d>& ObjectBox)"
  },
  {
    "label": "FindAllIntersectionsHelper()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "FindAllIntersectionsHelper(const TBVHNode<T, d>& MyNode, const TSpatialRay<T, d>& Ray)"
  },
  {
    "label": "FindAllIntersectionsHelperRecursive()",
    "kind": "Method",
    "detail": "Function (template<QUERY_OBJECT> void)",
    "insertText": "FindAllIntersectionsHelperRecursive(const TBVHNode<T,d>& MyNode, const QUERY_OBJECT& ObjectBox, TArray<int32>& AccumulateElements)"
  },
  {
    "label": "UpdateHierarchyImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchyImp(const TArray<int32>& AllObjects, const bool bAllowMultipleSplitting, const bool bUseVelocity, const T Dt)"
  },
  {
    "label": "GenerateNextLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateNextLevel(const TVector<T, d>& GlobalMin, const TVector<T, d>& GlobalMax, const TArray<int32>& Objects, const int32 Axis, const int32 Level, const bool AllowMultipleSplitting)"
  },
  {
    "label": "GenerateNextLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateNextLevel(const TVector<T, d>& GlobalMin, const TVector<T, d>& GlobalMax, const TArray<int32>& Objects, const int32 Level)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OBJECT_ARRAY const* MObjects ; TArray<int32> MGlobalObjects ; TMap<int32,TAABB<T,d>> MWorldSpaceBoxes ; TArray<int32> MScratchAllObjects ; int32 MMaxLevels ; TArray<TBVHNode<T,d>> Elements ; TArray<LEAF_TYPE> Leafs ; FCriticalSection CriticalSection ; } ; template<class OBJECT_ARRAY,class LEAF_TYPE,class T,int d> FArchive&)",
    "insertText": "operator(FArchive& Ar, TBoundingVolumeHierarchy<OBJECT_ARRAY, LEAF_TYPE, T, d>& BVH)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (BVH .)",
    "insertText": "Serialize(Ar)"
  }
]