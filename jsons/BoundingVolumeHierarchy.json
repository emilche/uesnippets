[
  {
    "label": "TBVHLeafTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBVHLeafTraits"
  },
  {
    "label": "TBVHLeafTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBVHLeafTraits"
  },
  {
    "label": "TBVHLeafTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBVHLeafTraits"
  },
  {
    "label": "CComplexBVHLeaf",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CComplexBVHLeaf"
  },
  {
    "label": "TBVHNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBVHNode"
  },
  {
    "label": "OBJECT_ARRAY",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OBJECT_ARRAY"
  },
  {
    "label": "LEAF_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEAF_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TBoundingVolumeHierarchy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBoundingVolumeHierarchy"
  },
  {
    "label": "T_INTERSECTION",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T_INTERSECTION"
  },
  {
    "label": "OBJECT_ARRAY",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OBJECT_ARRAY"
  },
  {
    "label": "LEAF_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEAF_TYPE"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TBoundingVolumeHierarchy()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "TBoundingVolumeHierarchy(const OBJECT_ARRAY& Objects, const int32 MaxLevels = DefaultMaxLevels, const bool bUseVelocity = DefaultUseVelocity, const T Dt = DefaultDt)"
  },
  {
    "label": "TBoundingVolumeHierarchy()",
    "kind": "Method",
    "detail": "Function (CHAOS_API)",
    "insertText": "TBoundingVolumeHierarchy(const OBJECT_ARRAY& Objects, const TArray<uint32>& ActiveIndices, const int32 MaxLevels = DefaultMaxLevels, const bool bUseVelocity = DefaultUseVelocity, const T Dt = DefaultDt)"
  },
  {
    "label": "UpdateHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchy(const bool AllowMultipleSplitting = DefaultAllowMultipleSplitting, const bool bUseVelocity = DefaultUseVelocity, const T Dt = DefaultDt)"
  },
  {
    "label": "UpdateHierarchy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchy(const TArray<uint32>& ActiveIndices, const bool AllowMultipleSplitting = DefaultAllowMultipleSplitting, const bool bUseVelocity = DefaultUseVelocity, const T Dt = DefaultDt)"
  },
  {
    "label": "FindAllIntersectionsImp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FindAllIntersectionsImp(Box)"
  },
  {
    "label": "FindAllIntersectionsImp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FindAllIntersectionsImp(Ray)"
  },
  {
    "label": "FindAllIntersectionsImp()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FindAllIntersectionsImp(Point)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Box()",
    "kind": "Method",
    "detail": "Function (d>)",
    "insertText": "Box(MyNode.MMin, MyNode.MMax)"
  },
  {
    "label": "UpdateHierarchyImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHierarchyImp(const TArray<int32>& AllObjects, const bool bAllowMultipleSplitting, const bool bUseVelocity, const T Dt)"
  },
  {
    "label": "GenerateNextLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateNextLevel(const TVector<T, d>& GlobalMin, const TVector<T, d>& GlobalMax, const TArray<int32>& Objects, const int32 Axis, const int32 Level, const bool AllowMultipleSplitting)"
  },
  {
    "label": "GenerateNextLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateNextLevel(const TVector<T, d>& GlobalMin, const TVector<T, d>& GlobalMax, const TArray<int32>& Objects, const int32 Level)"
  }
]