[
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "FQueuedThreadPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FQueuedThreadPool"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnimCompressContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimCompressContext"
  },
  {
    "label": "FAnimSequenceDecompressionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSequenceDecompressionContext"
  },
  {
    "label": "FCompactPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactPose"
  },
  {
    "label": "FAnimSequenceCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSequenceCompilingManager"
  },
  {
    "label": "FScopedCompressionGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedCompressionGuard"
  },
  {
    "label": "FAnimationSequenceAsyncCacheTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationSequenceAsyncCacheTask"
  },
  {
    "label": "FDecompressionTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDecompressionTools"
  },
  {
    "label": "FAnimSequenceTrackContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSequenceTrackContainer"
  },
  {
    "label": "FRawAnimSequenceTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawAnimSequenceTrack"
  },
  {
    "label": "FTranslationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslationTrack"
  },
  {
    "label": "FRotationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRotationTrack"
  },
  {
    "label": "FScaleTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScaleTrack"
  },
  {
    "label": "FCurveTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveTrack"
  },
  {
    "label": "FCompressedTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedTrack"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FRequestAnimCompressionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestAnimCompressionParams"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UAnimBoneCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBoneCompressionSettings"
  },
  {
    "label": "UAnimCurveCompressionSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCurveCompressionSettings"
  },
  {
    "label": "UVariableFrameStrippingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVariableFrameStrippingSettings"
  },
  {
    "label": "EAdditiveAnimationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveAnimationType"
  },
  {
    "label": "EAdditiveBasePoseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAdditiveBasePoseType"
  },
  {
    "label": "UAssetImportData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetImportData"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FDataValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDataValidationContext"
  },
  {
    "label": "FAnimNotifyQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNotifyQueue"
  },
  {
    "label": "FAnimationPoseData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationPoseData"
  },
  {
    "label": "FSmartName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSmartName"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "UAnimationAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationAsset"
  },
  {
    "label": "FScopedAnimSequenceRawDataCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedAnimSequenceRawDataCache"
  },
  {
    "label": "UAnimationBlueprintLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationBlueprintLibrary"
  },
  {
    "label": "FCustomAttributeCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCustomAttributeCustomization"
  },
  {
    "label": "FAnimSequenceDeterminismHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSequenceDeterminismHelper"
  },
  {
    "label": "FAnimSequenceTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSequenceTestBase"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "FAnimDataControllerTestBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimDataControllerTestBase"
  },
  {
    "label": "FAnimSequenceDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSequenceDetails"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Misc / Guid . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimSequenceBase . h \" # include \" Animation / AnimCompressionTypes . h \" # include \" CustomAttributes . h \" # include \" Containers / ArrayView . h \" # include \" Animation / CustomAttributes . h \" # include \" Animation / AnimData / AnimDataNotifications . h \" # include \" Animation / AttributeCurve . h \" # include \" UObject / PerPlatformProperties . h \" # include \" IO / IoHash . h \" # if WITH_EDITOR # include \" AnimData / IAnimationDataModel . h \" # endif # include \" AnimSequence . generated . h \" typedef TArray<FTransform> FTransformArrayA2 ; class USkeletalMesh ; class FQueuedThreadPool ; enum class EQueuedWorkPriority : uint8 ; struct FAnimCompressContext ; struct FAnimSequenceDecompressionContext ; struct FCompactPose ; namespace UE { namespace Anim { class FAnimSequenceCompilingManager ; namespace Compression { struct FScopedCompressionGuard ; } class FAnimationSequenceAsyncCacheTask ; } } namespace UE::AnimNext { class FDecompressionTools ; } int32 GPerformFrameStripping ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(int32 NumNode)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (AnimationTracks .)",
    "insertText": "Empty(NumNode)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (AnimationTracks .)",
    "insertText": "AddZeroed(NumNode)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(TArray<FName> InTrackNames)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TrackNames =)",
    "insertText": "MoveTemp(InTrackNames)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumNode = TrackNames .)",
    "insertText": "Num()"
  },
  {
    "label": "GetNum()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNum()"
  },
  {
    "label": "IsValidCurveTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidCurveTrack()"
  },
  {
    "label": "CompressCurveWeights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompressCurveWeights()"
  },
  {
    "label": "FCompressedTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCompressedTrack()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Mins [ ElementIndex ] = 0 ; })",
    "insertText": "for(int32 ElementIndex = 0; ElementIndex < 3; ElementIndex++)"
  },
  {
    "label": "FRequestAnimCompressionParams()",
    "kind": "Method",
    "detail": "Function (struct FRequestAnimCompressionParams { bool bAsyncCompression ; bool bPerformFrameStripping ; bool bPerformFrameStrippingOnOddNumberedFrames ; TSharedPtr<FAnimCompressContext> CompressContext ;)",
    "insertText": "FRequestAnimCompressionParams(bool bInAsyncCompression, bool bInAllowAlternateCompressor = false, bool bInOutput = false, const ITargetPlatform* = nullptr)"
  },
  {
    "label": "FRequestAnimCompressionParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRequestAnimCompressionParams(bool bInAsyncCompression, TSharedPtr<FAnimCompressContext> InCompressContext)"
  },
  {
    "label": "InitFrameStrippingFromCVar()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFrameStrippingFromCVar()"
  },
  {
    "label": "InitFrameStrippingFromPlatform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFrameStrippingFromPlatform()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} const ITargetPlatform* TargetPlatform ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (UseProjectSetting,StripAnimDataOnDedicatedServer,DoNotStripAnimDataOnDedicatedServer } ;)",
    "insertText": "UCLASS(config=Engine, hidecategories=(UObject, Length), BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() #if WITH_EDITORONLY_DATA UPROPERTY(AssetRegistrySearchable, meta = (DisplayName = \"Import File Framerate\"))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "BeginCacheForCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCacheForCookedPlatformData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "IsCachedCookedPlatformDataLoaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCachedCookedPlatformDataLoaded(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "WillNeverCacheCookedPlatformDataAgain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillNeverCacheCookedPlatformDataAgain()"
  },
  {
    "label": "ClearAllCachedCookedPlatformData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllCachedCookedPlatformData()"
  },
  {
    "label": "IsDataValid()",
    "kind": "Method",
    "detail": "Function (EDataValidationResult)",
    "insertText": "IsDataValid(class FDataValidationContext& Context)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsReadyForFinishDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForFinishDestroy()"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* This, FReferenceCollector& Collector)"
  },
  {
    "label": "IsValidAdditive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidAdditive()"
  },
  {
    "label": "GetUniqueMarkerNames()",
    "kind": "Method",
    "detail": "Function (TArray<FName>*)",
    "insertText": "GetUniqueMarkerNames()"
  },
  {
    "label": "ReplaceReferredAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceReferredAnimations(const TMap<UAnimationAsset*, UAnimationAsset*>& ReplacementMap)"
  },
  {
    "label": "OnSetSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetSkeleton(USkeleton* NewSkeleton)"
  },
  {
    "label": "HandleAssetPlayerTickedInternal()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "HandleAssetPlayerTickedInternal(FAnimAssetTickContext &Context, const float PreviousTime, const float MoveDelta, const FAnimTickRecord &Instance, struct FAnimNotifyQueue& NotifyQueue)"
  },
  {
    "label": "HasRootMotion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootMotion()"
  },
  {
    "label": "GetAdditiveAnimType()",
    "kind": "Method",
    "detail": "Function (EAdditiveAnimationType)",
    "insertText": "GetAdditiveAnimType()"
  },
  {
    "label": "GetSamplingFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetSamplingFrameRate()"
  },
  {
    "label": "ExtractRootMotion()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootMotion(float StartTime, float DeltaTime, bool bAllowLooping)"
  },
  {
    "label": "ExtractRootMotionFromRange()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootMotionFromRange(float StartTrackPosition, float EndTrackPosition)"
  },
  {
    "label": "ExtractRootTrackTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ExtractRootTrackTransform(float Time, const FBoneContainer* RequiredBones)"
  },
  {
    "label": "GetAnimationPose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAnimationPose(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "GetBonePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonePose(struct FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext, bool bForceUseRawData = false)"
  },
  {
    "label": "GetCompressedTrackToSkeletonMapTable()",
    "kind": "Method",
    "detail": "Function (const TArray<FTrackToSkeletonMap>&)",
    "insertText": "GetCompressedTrackToSkeletonMapTable()"
  },
  {
    "label": "GetCompressedCurveIndexedNames()",
    "kind": "Method",
    "detail": "Function (const TArray<FAnimCompressedCurveIndexedName>&)",
    "insertText": "GetCompressedCurveIndexedNames()"
  },
  {
    "label": "GetRetargetTransforms()",
    "kind": "Method",
    "detail": "Function (# endif public : const TArray<FTransform>&)",
    "insertText": "GetRetargetTransforms()"
  },
  {
    "label": "GetRetargetTransformsSourceName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetRetargetTransformsSourceName()"
  },
  {
    "label": "RetargetBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetargetBoneTransform(FTransform& BoneTransform, const int32 SkeletonBoneIndex, const FCompactPoseBoneIndex& BoneIndex, const FBoneContainer& RequiredBones, const bool bIsBakedAdditive)"
  },
  {
    "label": "GetBonePose_Additive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonePose_Additive(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "GetAdditiveBasePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAdditiveBasePose(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneTransform(FTransform& OutAtom, FSkeletonPoseBoneIndex BoneIndex, double Time, bool bUseRawData, TOptional<EAnimInterpolationType> InterpolationOverride=TOptional<EAnimInterpolationType>())"
  },
  {
    "label": "GetBoneTransform()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetBoneTransform(FTransform& OutAtom, FSkeletonPoseBoneIndex BoneIndex, FAnimSequenceDecompressionContext& DecompContext, bool bUseRawData)"
  },
  {
    "label": "GetUncompressedRawSize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR int64)",
    "insertText": "GetUncompressedRawSize()"
  },
  {
    "label": "GetApproxRawSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetApproxRawSize()"
  },
  {
    "label": "GetApproxBoneCompressedSize()",
    "kind": "Method",
    "detail": "Function (# endif int32)",
    "insertText": "GetApproxBoneCompressedSize()"
  },
  {
    "label": "GetApproxCompressedSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetApproxCompressedSize()"
  },
  {
    "label": "WaitOnExistingCompression()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitOnExistingCompression(const bool bWantResults=true)"
  },
  {
    "label": "ClearCompressedBoneData()",
    "kind": "Method",
    "detail": "Function (# endif protected : void)",
    "insertText": "ClearCompressedBoneData()"
  },
  {
    "label": "ClearCompressedCurveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCompressedCurveData()"
  },
  {
    "label": "SerializeCompressedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeCompressedData(FArchive& Ar, bool bDDCData)"
  },
  {
    "label": "OnAnimModelLoaded()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "OnAnimModelLoaded()"
  },
  {
    "label": "IsCompressedDataValid()",
    "kind": "Method",
    "detail": "Function (# endif public : bool)",
    "insertText": "IsCompressedDataValid()"
  },
  {
    "label": "IsCurveCompressedDataValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurveCompressedDataValid()"
  },
  {
    "label": "AddKeyToSequence()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddKeyToSequence(float Time, const FName& BoneName, const FTransform& AdditiveTransform)"
  },
  {
    "label": "DoesNeedRecompress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesNeedRecompress()"
  },
  {
    "label": "CreateAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAnimation(class USkeletalMesh* Mesh)"
  },
  {
    "label": "CreateAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAnimation(class USkeletalMeshComponent* MeshComponent)"
  },
  {
    "label": "CreateAnimation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAnimation(class UAnimSequence* Sequence)"
  },
  {
    "label": "IsValidToPlay()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToPlay()"
  },
  {
    "label": "FindSyncMarkerPropertyData()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "FindSyncMarkerPropertyData(int32 SyncMarkerIndex, FArrayProperty*& ArrayProperty)"
  },
  {
    "label": "GetMarkerUpdateCounter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMarkerUpdateCounter()"
  },
  {
    "label": "RemoveSyncMarkers()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "RemoveSyncMarkers(const TArray<FName>& MarkersToRemove)"
  },
  {
    "label": "RenameSyncMarkers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameSyncMarkers(FName InOldName, FName InNewName)"
  },
  {
    "label": "GetCurrentTimeFromMarkers()",
    "kind": "Method",
    "detail": "Function (# endif float)",
    "insertText": "GetCurrentTimeFromMarkers(FMarkerPair& PrevMarker, FMarkerPair& NextMarker, float PositionBetweenMarkers)"
  },
  {
    "label": "AdvanceMarkerPhaseAsLeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceMarkerPhaseAsLeader(bool bLooping, float MoveDelta, const TArray<FName>& ValidMarkerNames, float& CurrentTime, FMarkerPair& PrevMarker, FMarkerPair& NextMarker, TArray<FPassedMarker>& MarkersPassed, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "AdvanceMarkerPhaseAsFollower()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceMarkerPhaseAsFollower(const FMarkerTickContext& Context, float DeltaRemaining, bool bLooping, float& CurrentTime, FMarkerPair& PreviousMarker, FMarkerPair& NextMarker, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "GetMarkerIndicesForTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMarkerIndicesForTime(float CurrentTime, bool bLooping, const TArray<FName>& ValidMarkerNames, FMarkerPair& OutPrevMarker, FMarkerPair& OutNextMarker)"
  },
  {
    "label": "GetMarkerSyncPositionFromMarkerIndicies()",
    "kind": "Method",
    "detail": "Function (} FMarkerSyncAnimPosition)",
    "insertText": "GetMarkerSyncPositionFromMarkerIndicies(int32 PrevMarker, int32 NextMarker, float CurrentTime, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "GetMarkerIndicesForPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMarkerIndicesForPosition(const FMarkerSyncAnimPosition& SyncPosition, bool bLooping, FMarkerPair& OutPrevMarker, FMarkerPair& OutNextMarker, float& CurrentTime, const UMirrorDataTable* MirrorTable)"
  },
  {
    "label": "GetFirstMatchingPosFromMarkerSyncPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFirstMatchingPosFromMarkerSyncPos(const FMarkerSyncAnimPosition& InMarkerSyncGroupPosition)"
  },
  {
    "label": "GetNextMatchingPosFromMarkerSyncPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNextMatchingPosFromMarkerSyncPos(const FMarkerSyncAnimPosition& InMarkerSyncGroupPosition, const float& StartingPosition)"
  },
  {
    "label": "GetPrevMatchingPosFromMarkerSyncPos()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPrevMatchingPosFromMarkerSyncPos(const FMarkerSyncAnimPosition& InMarkerSyncGroupPosition, const float& StartingPosition)"
  },
  {
    "label": "EnableRootMotionSettingFromMontage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRootMotionSettingFromMontage(bool bInEnableRootMotion, const ERootMotionRootLock::Type InRootMotionRootLock)"
  },
  {
    "label": "GetEnableRootMotionSettingFromMontage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableRootMotionSettingFromMontage()"
  },
  {
    "label": "GetAdditiveBasePose()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR class UAnimSequence*)",
    "insertText": "GetAdditiveBasePose()"
  },
  {
    "label": "DoesSequenceContainZeroScale()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesSequenceContainZeroScale()"
  },
  {
    "label": "FlagDependentAnimationsAsRawDataOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlagDependentAnimationsAsRawDataOnly()"
  },
  {
    "label": "UpdateDependentStreamingAnimations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDependentStreamingAnimations()"
  },
  {
    "label": "ResetAnimation()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return RawDataGuid ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } void)",
    "insertText": "ResetAnimation()"
  },
  {
    "label": "GetBonePose_AdditiveMeshRotationOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBonePose_AdditiveMeshRotationOnly(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext)"
  },
  {
    "label": "CanEvaluateRawAnimationData()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanEvaluateRawAnimationData()"
  },
  {
    "label": "RemapTracksToNewSkeleton()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "RemapTracksToNewSkeleton(USkeleton* NewSkeleton, bool bConvertSpaces)"
  },
  {
    "label": "GetSpaceBasedAnimationData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSpaceBasedAnimationData(TArray< TArray<FTransform> > & AnimationDataInComponentSpace)"
  },
  {
    "label": "RefreshSyncMarkerDataFromAuthored()",
    "kind": "Method",
    "detail": "Function (# endif public : void)",
    "insertText": "RefreshSyncMarkerDataFromAuthored()"
  },
  {
    "label": "ValidateCurrentPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateCurrentPosition(const FMarkerSyncAnimPosition& Position, bool bPlayingForwards, bool bLooping, float&CurrentTime, FMarkerPair& PreviousMarker, FMarkerPair& NextMarker, const UMirrorDataTable* MirrorTable = nullptr)"
  },
  {
    "label": "UseRawDataForPoseExtraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseRawDataForPoseExtraction(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "EvaluateAttributes()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "EvaluateAttributes(FAnimationPoseData& OutAnimationPoseData, const FAnimExtractContext& ExtractionContext, bool bUseRawData)"
  },
  {
    "label": "SynchronousAnimatedBoneAttributesCompression()",
    "kind": "Method",
    "detail": "Function (protected : # if WITH_EDITOR void)",
    "insertText": "SynchronousAnimatedBoneAttributesCompression()"
  },
  {
    "label": "MoveAttributesToModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAttributesToModel()"
  },
  {
    "label": "OnModelModified()",
    "kind": "Method",
    "detail": "Function (# endif protected : # if WITH_EDITOR void)",
    "insertText": "OnModelModified(const EAnimDataModelNotifyType& NotifyType, IAnimationDataModel* Model, const FAnimDataModelNotifPayload& Payload)"
  },
  {
    "label": "PopulateModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateModel()"
  },
  {
    "label": "EnsureValidRawDataGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureValidRawDataGuid()"
  },
  {
    "label": "CalculateNumberOfSampledKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CalculateNumberOfSampledKeys()"
  },
  {
    "label": "DeleteBoneAnimationData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteBoneAnimationData()"
  },
  {
    "label": "DeleteDeprecatedRawAnimationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteDeprecatedRawAnimationData()"
  },
  {
    "label": "DeleteNotifyTrackData()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DeleteNotifyTrackData()"
  },
  {
    "label": "CreateDerivedDataKeyHash()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FIoHash)",
    "insertText": "CreateDerivedDataKeyHash(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "CreateDerivedDataKeyString()",
    "kind": "Method",
    "detail": "Function (private : FString)",
    "insertText": "CreateDerivedDataKeyString(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "BeginCacheDerivedData()",
    "kind": "Method",
    "detail": "Function (protected : FIoHash)",
    "insertText": "BeginCacheDerivedData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "PollCacheDerivedData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PollCacheDerivedData(const FIoHash& KeyHash)"
  },
  {
    "label": "EndCacheDerivedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCacheDerivedData(const FIoHash& KeyHash)"
  },
  {
    "label": "TryCancelAsyncTasks()",
    "kind": "Method",
    "detail": "Function (FIoHash DataKeyHash ; TMap<FIoHash,TUniquePtr<FCompressedAnimSequence>> DataByPlatformKeyHash ; TMap<FIoHash,TPimplPtr<UE::Anim::FAnimationSequenceAsyncCacheTask>> CacheTasksByKeyHash ; protected : bool)",
    "insertText": "TryCancelAsyncTasks()"
  },
  {
    "label": "WaitForAsyncTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForAsyncTasks(float TimeLimitSeconds)"
  },
  {
    "label": "FinishAsyncTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAsyncTasks()"
  },
  {
    "label": "Reschedule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reschedule(FQueuedThreadPool* InThreadPool, EQueuedWorkPriority InPriority)"
  },
  {
    "label": "IsAsyncTaskComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncTaskComplete()"
  },
  {
    "label": "IsCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiling()"
  },
  {
    "label": "BeginCacheDerivedDataForCurrentPlatform()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BeginCacheDerivedDataForCurrentPlatform()"
  },
  {
    "label": "CacheDerivedDataForCurrentPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheDerivedDataForCurrentPlatform()"
  },
  {
    "label": "CacheDerivedData()",
    "kind": "Method",
    "detail": "Function (FCompressedAnimSequence&)",
    "insertText": "CacheDerivedData(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetTargetSamplingFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetTargetSamplingFrameRate(const ITargetPlatform* InPlatform)"
  }
]