[
  {
    "label": "SSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencer"
  },
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "FSequencerEditTool_Selection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerEditTool_Selection"
  },
  {
    "label": "FSequencerEditTool_Selection()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Tools / SequencerEditTool . h \" class SSequencer ; namespace UE { namespace Sequencer { class STrackAreaView ; } } class FSequencerEditTool_Selection : public FSequencerEditTool { public : const FName Identifier ;)",
    "insertText": "FSequencerEditTool_Selection(FSequencer& InSequencer, UE::Sequencer::STrackAreaView& InTrackArea)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "OnPaint(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(SWidget& OwnerWidget, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseCaptureLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCaptureLost()"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "CanDeactivate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeactivate()"
  },
  {
    "label": "GetDragHotspot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<UE::Sequencer::ITrackAreaHotspot>)",
    "insertText": "GetDragHotspot()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(SWidget& OwnerWidget, const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "UpdateCursor()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateCursor(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "IsScrubTimeKeyEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScrubTimeKeyEvent(const FKeyEvent& InKeyEvent)"
  }
]