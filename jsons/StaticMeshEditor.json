[
  {
    "label": "IDecomposeMeshToHullsAsync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDecomposeMeshToHullsAsync"
  },
  {
    "label": "FStaticMeshDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshDetails"
  },
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "SConvexDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SConvexDecomposition"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SStaticMeshEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SStaticMeshEditorViewport"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UStaticMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshSocket"
  },
  {
    "label": "FViewportTabContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewportTabContent"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FTabSpawnerEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTabSpawnerEntry"
  },
  {
    "label": "FStaticMeshEditorModeUILayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshEditorModeUILayer"
  },
  {
    "label": "FStaticMeshEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshEditor"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "IDetailCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCustomization"
  },
  {
    "label": "FReimportParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReimportParameters"
  },
  {
    "label": "FKBoxElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKBoxElem"
  },
  {
    "label": "FEditorViewportTabContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportTabContent"
  },
  {
    "label": "ISocketManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISocketManager"
  },
  {
    "label": "FStaticMeshEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" Toolkits / IToolkitHost . h \" # include \" Misc / NotifyHook . h \" # include \" EditorUndoClient . h \" # include \" IStaticMeshEditor . h \" # include \" ISocketManager . h \" # include \" TickableEditorObject . h \" # include \" SEditorViewport . h \" # include \" AdvancedPreviewSceneModule . h \" # include \" AssetEditorViewportLayout . h \" # ifndef USE_ASYNC_DECOMP # define USE_ASYNC_DECOMP 1 # endif # if USE_ASYNC_DECOMP class IDecomposeMeshToHullsAsync ; # endif class FStaticMeshDetails ; class FEditorViewportClient ; class IDetailsView ; class SConvexDecomposition ; class SDockTab ; class SStaticMeshEditorViewport ; class UStaticMesh ; class UStaticMeshComponent ; class UStaticMeshSocket ; class FViewportTabContent ; struct FPropertyChangedEvent ; struct FTabSpawnerEntry ; class FStaticMeshEditorModeUILayer ; class FStaticMeshEditor : public IStaticMeshEditor,public FGCObject,public FEditorUndoClient,public FNotifyHook,public FTickableEditorObject { public :)",
    "insertText": "FStaticMeshEditor() : StaticMesh(nullptr) , MinPrimSize(0.5f) , OverlapNudge(10.0f) , CurrentViewedUVChannel(0) , SecondaryToolbarEntry(nullptr) , bDrawNormals(false) , bDrawTangents(false) , bDrawBinormals(false) , bDrawPivots(false) , bDrawVertices(false) , bDrawGrids(false) , bDrawBounds(false) , bDrawSimpleCollisions(false) , bDrawComplexCollisions(false) , bDrawSockets(false) , bDrawWireframes(false) , bDrawVertexColors(false) , bDrawAdditionalData(true)"
  },
  {
    "label": "FStaticMeshEditor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStaticMeshEditor()"
  },
  {
    "label": "InitEditorForStaticMesh()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitEditorForStaticMesh(UStaticMesh* ObjectToEdit)"
  },
  {
    "label": "PostInitAssetEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitAssetEditor()"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "UnregisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "OnToolkitHostingStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolkitHostingStarted(const TSharedRef<IToolkit>& Toolkit)"
  },
  {
    "label": "OnToolkitHostingFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolkitHostingFinished(const TSharedRef<IToolkit>& Toolkit)"
  },
  {
    "label": "InitStaticMeshEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitStaticMeshEditor(const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, UStaticMesh* ObjectToEdit)"
  },
  {
    "label": "MakeStaticMeshDetails()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class IDetailCustomization>)",
    "insertText": "MakeStaticMeshDetails()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetDocumentationLink()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocumentationLink()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (} FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "GetStaticMesh()",
    "kind": "Method",
    "detail": "Function (UStaticMesh*)",
    "insertText": "GetStaticMesh()"
  },
  {
    "label": "GetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (UStaticMeshSocket*)",
    "insertText": "GetSelectedSocket()"
  },
  {
    "label": "SetSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedSocket(UStaticMeshSocket* InSelectedSocket)"
  },
  {
    "label": "DuplicateSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelectedSocket()"
  },
  {
    "label": "RequestRenameSelectedSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRenameSelectedSocket()"
  },
  {
    "label": "IsPrimValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrimValid(const FPrimData& InPrimData)"
  },
  {
    "label": "HasSelectedPrims()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSelectedPrims()"
  },
  {
    "label": "AddSelectedPrim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedPrim(const FPrimData& InPrimData, bool bClearSelection)"
  },
  {
    "label": "RemoveSelectedPrim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSelectedPrim(const FPrimData& InPrimData)"
  },
  {
    "label": "RemoveInvalidPrims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInvalidPrims()"
  },
  {
    "label": "IsSelectedPrim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectedPrim(const FPrimData& InPrimData)"
  },
  {
    "label": "ClearSelectedPrims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectedPrims()"
  },
  {
    "label": "DuplicateSelectedPrims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelectedPrims(const FVector* InOffset)"
  },
  {
    "label": "CopySelectedPrims()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CopySelectedPrims()"
  },
  {
    "label": "PasteCopiedPrims()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PasteCopiedPrims()"
  },
  {
    "label": "TranslateSelectedPrims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslateSelectedPrims(const FVector& InDrag)"
  },
  {
    "label": "RotateSelectedPrims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RotateSelectedPrims(const FRotator& InRot)"
  },
  {
    "label": "ScaleSelectedPrims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleSelectedPrims(const FVector& InScale)"
  },
  {
    "label": "CalcSelectedPrimsAABB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CalcSelectedPrimsAABB(FBox &OutBox)"
  },
  {
    "label": "GetLastSelectedPrimTransform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLastSelectedPrimTransform(FTransform& OutTransform)"
  },
  {
    "label": "GetPrimTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "GetPrimTransform(const FPrimData& InPrimData)"
  },
  {
    "label": "SetPrimTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrimTransform(const FPrimData& InPrimData, const FTransform& InPrimTransform)"
  },
  {
    "label": "OverlapsExistingPrim()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OverlapsExistingPrim(const FPrimData& InPrimData)"
  },
  {
    "label": "GetNumTriangles()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTriangles(int32 LODLevel = 0)"
  },
  {
    "label": "GetNumVertices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumVertices(int32 LODLevel = 0)"
  },
  {
    "label": "GetNumUVChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUVChannels(int32 LODLevel = 0)"
  },
  {
    "label": "GetCurrentUVChannel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentUVChannel()"
  },
  {
    "label": "GetCurrentLODLevel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentLODLevel()"
  },
  {
    "label": "GetCurrentLODIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentLODIndex()"
  },
  {
    "label": "GetCustomData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCustomData(const int32 Key)"
  },
  {
    "label": "SetCustomData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomData(const int32 Key, const int32 CustomData)"
  },
  {
    "label": "RefreshTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshTool()"
  },
  {
    "label": "RefreshViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshViewport()"
  },
  {
    "label": "DoDecomp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoDecomp(uint32 InHullCount, int32 InMaxHullVerts, uint32 InHullPrecision)"
  },
  {
    "label": "GetSelectedEdges()",
    "kind": "Method",
    "detail": "Function (TSet<int32>&)",
    "insertText": "GetSelectedEdges()"
  },
  {
    "label": "GetViewportClient()",
    "kind": "Method",
    "detail": "Function (FEditorViewportClient&)",
    "insertText": "GetViewportClient()"
  },
  {
    "label": "SetSecondaryToolbarDisplayName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSecondaryToolbarDisplayName(FText DisplayName)"
  },
  {
    "label": "ExtendMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendMenu()"
  },
  {
    "label": "RegisterOnPostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnPostUndo(const FOnPostUndo& Delegate)"
  },
  {
    "label": "UnregisterOnPostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnPostUndo(SWidget* Widget)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, FProperty* PropertyThatChanged)"
  },
  {
    "label": "GetViewMode()",
    "kind": "Method",
    "detail": "Function (EViewModeIndex)",
    "insertText": "GetViewMode()"
  },
  {
    "label": "RegisterOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnSelectedLODChanged(const FOnSelectedLODChanged &Delegate, bool UnregisterOnRefresh)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OnSelectedLODChanged .)",
    "insertText": "Add(Delegate)"
  },
  {
    "label": "UnRegisterOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UnRegisterOnSelectedLODChanged(void* Thing)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (OnSelectedLODChanged .)",
    "insertText": "RemoveAll(Thing)"
  },
  {
    "label": "BroadcastOnSelectedLODChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastOnSelectedLODChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnSelectedLODChanged .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "AddViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddViewportOverlayWidget(TSharedRef<SWidget> InOverlaidWidget, int32 ZOrder = INDEX_NONE)"
  },
  {
    "label": "RemoveViewportOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewportOverlayWidget(TSharedRef<SWidget> InViewportOverlayWidget)"
  },
  {
    "label": "CreateEditorModeManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEditorModeManager()"
  },
  {
    "label": "SpawnTab_Viewport()",
    "kind": "Method",
    "detail": "Function (const FName ViewportTabId ; const FName PropertiesTabId ; const FName SocketManagerTabId ; const FName CollisionTabId ; const FName PreviewSceneSettingsTabId ; const FName SecondaryToolbarTabId ; private : TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Viewport(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_Properties()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Properties(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_SocketManager()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_SocketManager(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_Collision()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Collision(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_PreviewSceneSettings()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_PreviewSceneSettings(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_SecondaryToolbar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_SecondaryToolbar(const FSpawnTabArgs& Args)"
  },
  {
    "label": "ToggleShowNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowNormals()"
  },
  {
    "label": "IsShowNormalsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowNormalsChecked()"
  },
  {
    "label": "ToggleShowTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowTangents()"
  },
  {
    "label": "IsShowTangentsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowTangentsChecked()"
  },
  {
    "label": "ToggleShowBinormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowBinormals()"
  },
  {
    "label": "IsShowBinormalsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowBinormalsChecked()"
  },
  {
    "label": "ToggleShowPivots()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowPivots()"
  },
  {
    "label": "IsShowPivotsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowPivotsChecked()"
  },
  {
    "label": "ToggleShowVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowVertices()"
  },
  {
    "label": "IsShowVerticesChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowVerticesChecked()"
  },
  {
    "label": "ToggleShowGrids()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowGrids()"
  },
  {
    "label": "IsShowGridsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowGridsChecked()"
  },
  {
    "label": "ToggleShowBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowBounds()"
  },
  {
    "label": "IsShowBoundsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowBoundsChecked()"
  },
  {
    "label": "ToggleShowSimpleCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowSimpleCollisions()"
  },
  {
    "label": "IsShowSimpleCollisionsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowSimpleCollisionsChecked()"
  },
  {
    "label": "ToggleShowComplexCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowComplexCollisions()"
  },
  {
    "label": "IsShowComplexCollisionsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowComplexCollisionsChecked()"
  },
  {
    "label": "ToggleShowSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowSockets()"
  },
  {
    "label": "IsShowSocketsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowSocketsChecked()"
  },
  {
    "label": "ToggleShowWireframes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowWireframes()"
  },
  {
    "label": "IsShowWireframesChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowWireframesChecked()"
  },
  {
    "label": "ToggleShowVertexColors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowVertexColors()"
  },
  {
    "label": "IsShowVertexColorsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowVertexColorsChecked()"
  },
  {
    "label": "ResetCamera()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCamera()"
  },
  {
    "label": "ToggleDrawAdditionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleDrawAdditionalData()"
  },
  {
    "label": "IsDrawAdditionalDataChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDrawAdditionalDataChecked()"
  },
  {
    "label": "BakeMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BakeMaterials()"
  },
  {
    "label": "GetStaticMeshViewport()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<class SStaticMeshEditorViewport>)",
    "insertText": "GetStaticMeshViewport()"
  },
  {
    "label": "OnEditorLayoutChanged()",
    "kind": "Method",
    "detail": "Function (FAdvancedPreviewSceneModule::FOnPreviewSceneChanged OnPreviewSceneChangedDelegate ; void)",
    "insertText": "OnEditorLayoutChanged()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "ExtendToolBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendToolBar()"
  },
  {
    "label": "BuildSubTools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSubTools()"
  },
  {
    "label": "UpdateLODStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLODStats(int32 CurrentLOD)"
  },
  {
    "label": "ComboBoxSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComboBoxSelectionChanged(TSharedPtr<FString> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "FReimportParameters()",
    "kind": "Method",
    "detail": "Function (struct FReimportParameters {)",
    "insertText": "FReimportParameters(bool bInWithNewFile, bool bInWithDialog) : bWithNewFile(bInWithNewFile) , bWithDialog(bInWithDialog)"
  },
  {
    "label": "HandleReimportMesh()",
    "kind": "Method",
    "detail": "Function (} bool bWithNewFile = false ; bool bWithDialog = false ; } ; void)",
    "insertText": "HandleReimportMesh(const FReimportParameters ReimportParameters)"
  },
  {
    "label": "HandleReimportAllMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReimportAllMesh(const FReimportParameters ReimportParameters)"
  },
  {
    "label": "SetEditorMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorMesh(UStaticMesh* InStaticMesh, bool bResetCamera = true)"
  },
  {
    "label": "GenerateKDop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateKDop(const FVector* Directions, uint32 NumDirections)"
  },
  {
    "label": "OnCollisionBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollisionBox()"
  },
  {
    "label": "OnCollisionSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollisionSphere()"
  },
  {
    "label": "OnCollisionSphyl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollisionSphyl()"
  },
  {
    "label": "CreateBoxVertsFromBoxCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateBoxVertsFromBoxCollision(const struct FKBoxElem& BoxElem, TArray<FVector>& Verts, float Scale)"
  },
  {
    "label": "OnConvertBoxToConvexCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertBoxToConvexCollision(void)"
  },
  {
    "label": "OnCopyCollisionFromSelectedStaticMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopyCollisionFromSelectedStaticMesh(void)"
  },
  {
    "label": "CanCopyCollisionFromSelectedStaticMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyCollisionFromSelectedStaticMesh()"
  },
  {
    "label": "GetFirstSelectedStaticMeshInContentBrowser()",
    "kind": "Method",
    "detail": "Function (UStaticMesh*)",
    "insertText": "GetFirstSelectedStaticMeshInContentBrowser()"
  },
  {
    "label": "OnRemoveCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveCollision(void)"
  },
  {
    "label": "CanRemoveCollision()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveCollision()"
  },
  {
    "label": "OnChangeMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangeMesh()"
  },
  {
    "label": "CanChangeMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangeMesh()"
  },
  {
    "label": "OnSaveGeneratedLODs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSaveGeneratedLODs()"
  },
  {
    "label": "GenerateUVChannelComboList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateUVChannelComboList(UToolMenu* InMenu)"
  },
  {
    "label": "DeleteSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelected()"
  },
  {
    "label": "CanDeleteSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteSelected()"
  },
  {
    "label": "InitSocketManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSocketManager()"
  },
  {
    "label": "DeleteSelectedSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedSockets()"
  },
  {
    "label": "DeleteSelectedPrims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedPrims()"
  },
  {
    "label": "DuplicateSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateSelected()"
  },
  {
    "label": "CanDuplicateSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateSelected()"
  },
  {
    "label": "CopySelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelected()"
  },
  {
    "label": "CanCopySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopySelected()"
  },
  {
    "label": "PasteCopied()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteCopied()"
  },
  {
    "label": "CanPasteCopied()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteCopied()"
  },
  {
    "label": "CanRenameSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameSelected()"
  },
  {
    "label": "ExecuteFindInExplorer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteFindInExplorer()"
  },
  {
    "label": "CanExecuteSourceCommands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteSourceCommands()"
  },
  {
    "label": "OnObjectReimported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectReimported(UObject* InObject)"
  },
  {
    "label": "OnConvexDecomposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvexDecomposition()"
  },
  {
    "label": "OnRequestClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnRequestClose(EAssetEditorCloseReason InCloseReason)"
  },
  {
    "label": "SetupReadOnlyMenuProfiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupReadOnlyMenuProfiles(FReadOnlyAssetEditorCustomization& OutReadOnlyCustomization)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "UndoAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndoAction()"
  },
  {
    "label": "RedoAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedoAction()"
  },
  {
    "label": "OnMeshChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMeshChanged()"
  },
  {
    "label": "OnSocketSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketSelectionChanged()"
  },
  {
    "label": "OnPostReimport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostReimport(UObject* InObject, bool bSuccess)"
  },
  {
    "label": "SetCurrentViewedUVChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentViewedUVChannel(int32 InNewUVChannel)"
  },
  {
    "label": "GetUVChannelCheckState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetUVChannelCheckState(int32 TestUVChannel)"
  },
  {
    "label": "CanRemoveUVChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveUVChannel()"
  },
  {
    "label": "RemoveCurrentUVChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCurrentUVChannel()"
  },
  {
    "label": "AddSecondaryToolbarExtender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSecondaryToolbarExtender(TSharedPtr<FExtender> Extender)"
  },
  {
    "label": "RemoveSecondaryToolbarExtender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSecondaryToolbarExtender(TSharedPtr<FExtender> Extender)"
  },
  {
    "label": "GenerateSecondaryToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateSecondaryToolbar()"
  }
]