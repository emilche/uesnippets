[
  {
    "label": "redux_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "redux_traits"
  },
  {
    "label": "redux_novec_unroller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "redux_novec_unroller"
  },
  {
    "label": "redux_vec_unroller",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "redux_vec_unroller"
  },
  {
    "label": "redux_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "redux_impl"
  },
  {
    "label": "redux_evaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "redux_evaluator"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_REDUX_H # define EIGEN_REDUX_H namespace Eigen { namespace internal { template<Func,Evaluator> struct redux_traits { public : typedef find_best_packet<Evaluator::Scalar,Evaluator::SizeAtCompileTime>::type PacketType ; enum { PacketSize = unpacket_traits<PacketType>::size,InnerMaxSize =)",
    "insertText": "int(Evaluator::IsRowMajor) ? Evaluator::MaxColsAtCompileTime : Evaluator::MaxRowsAtCompileTime, OuterMaxSize = int(Evaluator::IsRowMajor) ? Evaluator::MaxRowsAtCompileTime : Evaluator::MaxColsAtCompileTime, SliceVectorizedWork = int(InnerMaxSize)==Dynamic ? Dynamic : int(OuterMaxSize)==Dynamic ? (int(InnerMaxSize)>=int(PacketSize) ? Dynamic : 0) : (int(InnerMaxSize)/int(PacketSize)) * int(OuterMaxSize)"
  },
  {
    "label": "MightVectorize()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "MightVectorize(int(Evaluator::Flags)&ActualPacketAccessBit) && (functor_traits<Func>::PacketAccess), MayLinearVectorize = bool(MightVectorize) && (int(Evaluator::Flags)&LinearAccessBit), MaySliceVectorize = bool(MightVectorize) && (int(SliceVectorizedWork)==Dynamic || int(SliceVectorizedWork)>=3)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (public : enum { Traversal =)",
    "insertText": "int(MayLinearVectorize) ? int(LinearVectorizedTraversal) : int(MaySliceVectorize) ? int(SliceVectorizedTraversal) : int(DefaultTraversal)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (public : enum { Cost = Evaluator::SizeAtCompileTime = = Dynamic ? HugeCost :)",
    "insertText": "int(Evaluator::SizeAtCompileTime) * int(Evaluator::CoeffReadCost) + (Evaluator::SizeAtCompileTime-1) * functor_traits<Func>::Cost, UnrollingLimit = EIGEN_UNROLLING_LIMIT * (int(Traversal) == int(DefaultTraversal) ? 1 : int(PacketSize))"
  },
  {
    "label": "debug()",
    "kind": "Method",
    "detail": "Function (public : enum { Unrolling = Cost<= UnrollingLimit ? CompleteUnrolling : NoUnrolling } ; # ifdef EIGEN_DEBUG_ASSIGN void)",
    "insertText": "debug()"
  },
  {
    "label": "typeid()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" Xpr : \"<<)",
    "insertText": "typeid(typename Evaluator::XprType).name()"
  },
  {
    "label": "setf()",
    "kind": "Method",
    "detail": "Function (std::cerr .)",
    "insertText": "setf(std::ios::hex, std::ios::basefield)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(Evaluator::Flags) std::cerr.unsetf(std::ios::hex)"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(InnerMaxSize) EIGEN_DEBUG_VAR(OuterMaxSize) EIGEN_DEBUG_VAR(SliceVectorizedWork) EIGEN_DEBUG_VAR(PacketSize) EIGEN_DEBUG_VAR(MightVectorize) EIGEN_DEBUG_VAR(MayLinearVectorize) EIGEN_DEBUG_VAR(MaySliceVectorize) std::cerr << \"Traversal\" << \" = \" << Traversal << \" (\" << demangle_traversal(Traversal) << \")"
  },
  {
    "label": "EIGEN_DEBUG_VAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DEBUG_VAR(UnrollingLimit) std::cerr << \"Unrolling\" << \" = \" << Unrolling << \" (\" << demangle_unrolling(Unrolling) << \")"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (std::cerr<<std::endl ; } # endif } ; template<Func,Evaluator,int Start,int Length> struct redux_novec_unroller { enum { HalfLength = Length / 2 } ; typedef Evaluator::Scalar Scalar ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "run(const Evaluator &eval, const Func& func)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Func,Evaluator,int Start> struct redux_novec_unroller<Func,Evaluator,Start,1> { enum { outer = Start / Evaluator::InnerSizeAtCompileTime,inner = Start % Evaluator::InnerSizeAtCompileTime } ; typedef Evaluator::Scalar Scalar ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "run(const Evaluator &eval, const Func&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Func,Evaluator,int Start> struct redux_novec_unroller<Func,Evaluator,Start,0> { typedef Evaluator::Scalar Scalar ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "run(const Evaluator&, const Func&)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (enum { PacketSize = unpacket_traits<PacketType>::size,HalfLength = Length / 2 } ; return func .)",
    "insertText": "packetOp(redux_vec_unroller<Func, Evaluator, Start, HalfLength>::template run<PacketType>(eval,func), redux_vec_unroller<Func, Evaluator, Start+HalfLength, Length-HalfLength>::template run<PacketType>(eval,func))"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (enum { PacketSize = unpacket_traits<PacketType>::size,index = Start* PacketSize,outer = index /)",
    "insertText": "int(Evaluator::InnerSizeAtCompileTime), inner = index % int(Evaluator::InnerSizeAtCompileTime)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<Func,Evaluator,int Traversal = redux_traits<Func,Evaluator>::Traversal,int Unrolling = redux_traits<Func,Evaluator>::Unrolling> struct redux_impl ; template<Func,Evaluator> struct redux_impl<Func,Evaluator,DefaultTraversal,NoUnrolling> { typedef Evaluator::Scalar Scalar ; template<XprType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "run(const Evaluator &eval, const Func& func, const XprType& xpr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(xpr.rows()>0 && xpr.cols()>0 && \"you are using an empty matrix\")"
  },
  {
    "label": "coeffByOuterInner()",
    "kind": "Method",
    "detail": "Function (Scalar res ; res = eval .)",
    "insertText": "coeffByOuterInner(0, 0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const Index size = xpr .)",
    "insertText": "size()"
  },
  {
    "label": "alignment0()",
    "kind": "Method",
    "detail": "Function (const Index packetSize = redux_traits<Func,Evaluator>::PacketSize ; const int packetAlignment = unpacket_traits<PacketScalar>::alignment ; enum {)",
    "insertText": "alignment0(bool(Evaluator::Flags & DirectAccessBit) && bool(packet_traits<Scalar>::AlignedOnScalar)) ? int(packetAlignment) : int(Unaligned), alignment = EIGEN_PLAIN_ENUM_MAX(alignment0, Evaluator::Alignment)"
  },
  {
    "label": "first_default_aligned()",
    "kind": "Method",
    "detail": "Function (const Index alignedStart =)",
    "insertText": "first_default_aligned(xpr)"
  },
  {
    "label": "alignedSize2()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "alignedSize2((size-alignedStart)/(2*packetSize))*(2*packetSize)"
  },
  {
    "label": "alignedSize()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "alignedSize((size-alignedStart)/(packetSize))*(packetSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index alignedEnd2 = alignedStart + alignedSize2 ; const Index alignedEnd = alignedStart + alignedSize ; Scalar res ;)",
    "insertText": "if(alignedSize)"
  },
  {
    "label": "PacketScalar()",
    "kind": "Method",
    "detail": "Function (PacketScalar packet_res0 = eval . template packet<alignment,)",
    "insertText": "PacketScalar(alignedStart)"
  },
  {
    "label": "PacketScalar()",
    "kind": "Method",
    "detail": "Function (PacketScalar packet_res1 = eval . template packet<alignment,)",
    "insertText": "PacketScalar(alignedStart+packetSize)"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (packet_res0 = func .)",
    "insertText": "packetOp(packet_res0, eval.template packet<alignment,PacketScalar>(index))"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (packet_res1 = func .)",
    "insertText": "packetOp(packet_res1, eval.template packet<alignment,PacketScalar>(index+packetSize))"
  },
  {
    "label": "packetOp()",
    "kind": "Method",
    "detail": "Function (} packet_res0 = func .)",
    "insertText": "packetOp(packet_res0,packet_res1)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (} res = func .)",
    "insertText": "predux(packet_res0)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} else { res = eval .)",
    "insertText": "coeff(0)"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (const Index innerSize = xpr .)",
    "insertText": "innerSize()"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (const Index outerSize = xpr .)",
    "insertText": "outerSize()"
  },
  {
    "label": "packetedInnerSize()",
    "kind": "Method",
    "detail": "Function (enum { packetSize = redux_traits<Func,Evaluator>::PacketSize } ; const Index)",
    "insertText": "packetedInnerSize((innerSize)/packetSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar res ;)",
    "insertText": "if(packetedInnerSize)"
  },
  {
    "label": "PacketType()",
    "kind": "Method",
    "detail": "Function (PacketType packet_res = eval . template packet<Unaligned,)",
    "insertText": "PacketType(0,0)"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (res = func .)",
    "insertText": "predux(packet_res)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} else { res = redux_impl<Func,Evaluator,DefaultTraversal,NoUnrolling)",
    "insertText": "run(eval, func, xpr)"
  },
  {
    "label": "VectorizedSize()",
    "kind": "Method",
    "detail": "Function (} return res ; } } ; template<Func,Evaluator> struct redux_impl<Func,Evaluator,LinearVectorizedTraversal,CompleteUnrolling> { typedef Evaluator::Scalar Scalar ; typedef redux_traits<Func,Evaluator>::PacketType PacketType ; enum { PacketSize = redux_traits<Func,Evaluator>::PacketSize,Size = Evaluator::SizeAtCompileTime,)",
    "insertText": "VectorizedSize(int(Size) / int(PacketSize)) * int(PacketSize)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<XprType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Scalar)",
    "insertText": "run(const Evaluator &eval, const Func& func, const XprType &xpr)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(xpr) eigen_assert(xpr.rows()>0 && xpr.cols()>0 && \"you are using an empty matrix\")"
  },
  {
    "label": "predux()",
    "kind": "Method",
    "detail": "Function (Scalar res = func .)",
    "insertText": "predux(redux_vec_unroller<Func, Evaluator, 0, Size / PacketSize>::template run<PacketType>(eval,func))"
  },
  {
    "label": "redux_evaluator()",
    "kind": "Method",
    "detail": "Function (} } } ; template<_XprType> class redux_evaluator : public internal::evaluator<_XprType> { typedef internal::evaluator<_XprType> Base ; public : typedef _XprType XprType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "redux_evaluator(const XprType &xpr) : Base(xpr)"
  },
  {
    "label": "coeffByOuterInner()",
    "kind": "Method",
    "detail": "Function (} typedef XprType::Scalar Scalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef XprType::PacketScalar PacketScalar ; enum { MaxRowsAtCompileTime = XprType::MaxRowsAtCompileTime,MaxColsAtCompileTime = XprType::MaxColsAtCompileTime,Flags = Base::Flags& ~ DirectAccessBit,IsRowMajor = XprType::IsRowMajor,SizeAtCompileTime = XprType::SizeAtCompileTime,InnerSizeAtCompileTime = XprType::InnerSizeAtCompileTime } ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeffByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "packetByOuterInner()",
    "kind": "Method",
    "detail": "Function (} template<int LoadMode,PacketType> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketType)",
    "insertText": "packetByOuterInner(Index outer, Index inner)"
  },
  {
    "label": "redux()",
    "kind": "Method",
    "detail": "Function (} } ; } template<Derived> template<Func> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::traits<Derived>::Scalar DenseBase<Derived)",
    "insertText": "redux(const Func& func)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(this->rows()>0 && this->cols()>0 && \"you are using an empty matrix\")"
  },
  {
    "label": "thisEval()",
    "kind": "Method",
    "detail": "Function (typedef internal::redux_evaluator<Derived> ThisEvaluator ; ThisEvaluator)",
    "insertText": "thisEval(derived())"
  },
  {
    "label": "minCoeff()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<int NaNPropagation> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::traits<Derived>::Scalar DenseBase<Derived)",
    "insertText": "minCoeff()"
  },
  {
    "label": "maxCoeff()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<int NaNPropagation> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::traits<Derived>::Scalar DenseBase<Derived)",
    "insertText": "maxCoeff()"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::traits<Derived>::Scalar DenseBase<Derived)",
    "insertText": "sum()"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (} } template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::traits<Derived>::Scalar DenseBase<Derived)",
    "insertText": "mean()"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifdef __INTEL_COMPILER # pragma warning push # pragma)",
    "insertText": "warning(disable : 2259 ) #endif return Scalar(derived().redux(Eigen::internal::scalar_sum_op<Scalar,Scalar>())) / Scalar(this->size())"
  },
  {
    "label": "prod()",
    "kind": "Method",
    "detail": "Function (# ifdef __INTEL_COMPILER # pragma warning pop # endif } template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::traits<Derived>::Scalar DenseBase<Derived)",
    "insertText": "prod()"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (} template<Derived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::traits<Derived>::Scalar MatrixBase<Derived)",
    "insertText": "trace()"
  }
]