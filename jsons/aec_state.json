[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "AecState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AecState"
  },
  {
    "label": "InitialState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InitialState"
  },
  {
    "label": "FilterDelay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilterDelay"
  },
  {
    "label": "FilteringQualityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilteringQualityAnalyzer"
  },
  {
    "label": "SaturationDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SaturationDetector"
  },
  {
    "label": "AecState()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_AEC_STATE_H_ # define MODULES_AUDIO_PROCESSING_AEC3_AEC_STATE_H_ # include<stddef . h> # include<array> # include<atomic> # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / audio / echo_canceller3_config . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / delay_estimate . h \" # include \" modules / audio_processing / aec3 / echo_audibility . h \" # include \" modules / audio_processing / aec3 / echo_path_variability . h \" # include \" modules / audio_processing / aec3 / erl_estimator . h \" # include \" modules / audio_processing / aec3 / erle_estimator . h \" # include \" modules / audio_processing / aec3 / filter_analyzer . h \" # include \" modules / audio_processing / aec3 / render_buffer . h \" # include \" modules / audio_processing / aec3 / reverb_model_estimator . h \" # include \" modules / audio_processing / aec3 / subtractor_output . h \" # include \" modules / audio_processing / aec3 / subtractor_output_analyzer . h \" # include \" modules / audio_processing / aec3 / transparent_mode . h \" namespace webrtc { class ApmDataDumper ; class AecState { public :)",
    "insertText": "AecState(const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "AecState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AecState()"
  },
  {
    "label": "UsableLinearEstimate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsableLinearEstimate()"
  },
  {
    "label": "UseLinearFilterOutput()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UseLinearFilterOutput()"
  },
  {
    "label": "ActiveRender()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ActiveRender()"
  },
  {
    "label": "UseStationarityProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseStationarityProperties()"
  },
  {
    "label": "ErleUnbounded()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const std::array<float,kFftLengthBy2Plus1>>)",
    "insertText": "ErleUnbounded()"
  },
  {
    "label": "FullBandErleLog2()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FullBandErleLog2()"
  },
  {
    "label": "Erl()",
    "kind": "Method",
    "detail": "Function (} const std::array<float,kFftLengthBy2Plus1>&)",
    "insertText": "Erl()"
  },
  {
    "label": "ErlTimeDomain()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "ErlTimeDomain()"
  },
  {
    "label": "MinDirectPathFilterDelay()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "MinDirectPathFilterDelay()"
  },
  {
    "label": "SaturatedCapture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SaturatedCapture()"
  },
  {
    "label": "UpdateCaptureSaturation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateCaptureSaturation(bool capture_signal_saturation)"
  },
  {
    "label": "TransparentModeActive()",
    "kind": "Method",
    "detail": "Function (capture_signal_saturation_ = capture_signal_saturation ; } bool)",
    "insertText": "TransparentModeActive()"
  },
  {
    "label": "HandleEchoPathChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleEchoPathChange(const EchoPathVariability& echo_path_variability)"
  },
  {
    "label": "ReverbDecay()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "ReverbDecay(bool mild)"
  },
  {
    "label": "GetReverbFrequencyResponse()",
    "kind": "Method",
    "detail": "Function (} rtc::ArrayView<const float>)",
    "insertText": "GetReverbFrequencyResponse()"
  },
  {
    "label": "TransitionTriggered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TransitionTriggered()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Update(const absl::optional<DelayEstimate>& external_delay, rtc::ArrayView<const std::vector<std::array<float, kFftLengthBy2Plus1>>> adaptive_filter_frequency_responses, rtc::ArrayView<const std::vector<float>> adaptive_filter_impulse_responses, const RenderBuffer& render_buffer, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> E2_refined, rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> Y2, rtc::ArrayView<const SubtractorOutput> subtractor_output)"
  },
  {
    "label": "FilterLengthBlocks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "FilterLengthBlocks()"
  },
  {
    "label": "InitialState()",
    "kind": "Method",
    "detail": "Function (} private : std::atomic<int> instance_count_ ; std::unique_ptr<ApmDataDumper> data_dumper_ ; const EchoCanceller3Config config_ ; const size_t num_capture_channels_ ; const bool deactivate_initial_state_reset_at_echo_path_change_ ; const bool full_reset_at_echo_path_change_ ; const bool subtractor_analyzer_reset_at_echo_path_change_ ; class InitialState { public :)",
    "insertText": "InitialState(const EchoCanceller3Config& config)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(bool active_render, bool saturated_capture)"
  },
  {
    "label": "InitialStateActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitialStateActive()"
  },
  {
    "label": "ExternalDelayReported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExternalDelayReported()"
  },
  {
    "label": "FilteringQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (private : const int delay_headroom_blocks_ ; bool external_delay_reported_ = false ; std::vector<int> filter_delays_blocks_ ; int min_filter_delay_ ; absl::optional<DelayEstimate> external_delay_ ; } delay_state_ ; std::unique_ptr<TransparentMode> transparent_state_ ; class FilteringQualityAnalyzer { public :)",
    "insertText": "FilteringQualityAnalyzer(const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "LinearFilterUsable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LinearFilterUsable()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(bool active_render, bool transparent_mode, bool saturated_capture, const absl::optional<DelayEstimate>& external_delay, bool any_filter_converged)"
  },
  {
    "label": "SaturatedEcho()",
    "kind": "Method",
    "detail": "Function (private : const bool use_linear_filter_ ; bool overall_usable_linear_estimates_ = false ; size_t filter_update_blocks_since_reset_ = 0 ; size_t filter_update_blocks_since_start_ = 0 ; bool convergence_seen_ = false ; std::vector<bool> usable_linear_filter_estimates_ ; } filter_quality_state_ ; class SaturationDetector { public : bool)",
    "insertText": "SaturatedEcho()"
  }
]