[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "AecState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AecState"
  },
  {
    "label": "InitialState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InitialState"
  },
  {
    "label": "FilterDelay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilterDelay"
  },
  {
    "label": "FilteringQualityAnalyzer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilteringQualityAnalyzer"
  },
  {
    "label": "SaturationDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SaturationDetector"
  },
  {
    "label": "AecState()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "AecState(const EchoCanceller3Config& config, size_t num_capture_channels)"
  },
  {
    "label": "HandleEchoPathChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleEchoPathChange(const EchoPathVariability& echo_path_variability)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(\n      const absl::optional<DelayEstimate>& external_delay,\n      rtc::ArrayView<const std::vector<std::array<float, kFftLengthBy2Plus1>>>\n          adaptive_filter_frequency_responses,\n      rtc::ArrayView<const std::vector<float>>\n          adaptive_filter_impulse_responses,\n      const RenderBuffer& render_buffer,\n      rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> E2_refined,\n      rtc::ArrayView<const std::array<float, kFftLengthBy2Plus1>> Y2,\n      rtc::ArrayView<const SubtractorOutput> subtractor_output)"
  },
  {
    "label": "InitialState()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "InitialState(const EchoCanceller3Config& config)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(bool active_render, bool saturated_capture)"
  },
  {
    "label": "FilterDelay()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FilterDelay(const EchoCanceller3Config& config,\n                size_t num_capture_channels)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(\n        rtc::ArrayView<const int> analyzer_filter_delay_estimates_blocks,\n        const absl::optional<DelayEstimate>& external_delay,\n        size_t blocks_with_proper_filter_adaptation)"
  },
  {
    "label": "FilteringQualityAnalyzer()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FilteringQualityAnalyzer(const EchoCanceller3Config& config,\n                             size_t num_capture_channels)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(bool active_render,\n                bool transparent_mode,\n                bool saturated_capture,\n                const absl::optional<DelayEstimate>& external_delay,\n                bool any_filter_converged)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const Block& x,\n                bool saturated_capture,\n                bool usable_linear_estimate,\n                rtc::ArrayView<const SubtractorOutput> subtractor_output,\n                float echo_path_gain)"
  }
]