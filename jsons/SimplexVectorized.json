[
  {
    "label": "VectorLineSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Math / VectorRegister . h \" # include \" Chaos / VectorUtility . h \" namespace Chaos { template<T,bool CalculatExtraInformation> T)",
    "insertText": "VectorLineSimplexFindOrigin(T* RESTRICT Simplex, int32& RESTRICT NumVerts, T& RESTRICT OutBarycentric, T* RESTRICT A, T* RESTRICT B)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T& X0 = Simplex [ 0 ] ; const T& X1 = Simplex [ 1 ] ; const T X0ToX1 =)",
    "insertText": "VectorSubtract(X1, X0)"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (const T X0ToOrigin =)",
    "insertText": "VectorNegate(X0)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T Dot =)",
    "insertText": "VectorDot3(X0ToOrigin, X0ToX1)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsX0 =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), Dot)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T OutBarycentricIfX0OrX1 = TMakeVectorRegisterConstant<)",
    "insertText": "T(1, 0, 0, 0)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T X0ToX1Squared =)",
    "insertText": "VectorDot3(X0ToX1, X0ToX1)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T DotBigger =)",
    "insertText": "VectorCompareGE(Dot, X0ToX1Squared)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T MinLimt = TMakeVectorRegisterConstant<)",
    "insertText": "T(std::numeric_limits<FRealSingle>::min() , std::numeric_limits<FRealSingle>::min(), std::numeric_limits<FRealSingle>::min(), std::numeric_limits<FRealSingle>::min())"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T X0ToX1SquaredSmall =)",
    "insertText": "VectorCompareGE(MinLimt, X0ToX1Squared)"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (const T IsX1 =)",
    "insertText": "VectorBitwiseOr(DotBigger, X0ToX1SquaredSmall)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (Simplex [ 0 ] =)",
    "insertText": "VectorSelect(IsX1, Simplex[1], Simplex[0])"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (A [ 0 ] =)",
    "insertText": "VectorSelect(IsX1, A[1], A[0])"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (B [ 0 ] =)",
    "insertText": "VectorSelect(IsX1, B[1], B[0])"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (} T Ratio =)",
    "insertText": "VectorDivide(Dot, X0ToX1Squared)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (Ratio =)",
    "insertText": "VectorMax(Ratio, TVectorZero<T>())"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (Ratio =)",
    "insertText": "VectorMin(Ratio, TMakeVectorRegisterConstant<T>(1, 1, 1, 1))"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (T Closest =)",
    "insertText": "VectorMultiplyAdd(Ratio, X0ToX1, X0)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T OneMinusRatio =)",
    "insertText": "VectorSubtract(TMakeVectorRegisterConstant<T>(1, 1, 1, 1), Ratio)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (const T OutBarycentricOtherwise =)",
    "insertText": "VectorUnpackLo(OneMinusRatio, Ratio)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (Closest =)",
    "insertText": "VectorSelect(IsX0, X0, VectorSelect(IsX1, X1, Closest))"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (const T IsX0OrX1 =)",
    "insertText": "VectorBitwiseOr(IsX0, IsX1)"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (NumVerts =)",
    "insertText": "VectorMaskBits(IsX0OrX1)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (OutBarycentric =)",
    "insertText": "VectorSelect(IsX0OrX1, OutBarycentricIfX0OrX1, OutBarycentricOtherwise)"
  },
  {
    "label": "TriangleSimplexFindOriginFast()",
    "kind": "Method",
    "detail": "Function (} return Closest ; } template<T,bool CalculatExtraInformation> T)",
    "insertText": "TriangleSimplexFindOriginFast(T* RESTRICT Simplex, int32& RESTRICT NumVerts, T& RESTRICT OutBarycentric, T* RESTRICT As, T* RESTRICT Bs)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T& A = Simplex [ 0 ] ; const T& B = Simplex [ 1 ] ; const T& C = Simplex [ 2 ] ; const T AB =)",
    "insertText": "VectorSubtract(B, A)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T AC =)",
    "insertText": "VectorSubtract(C, A)"
  },
  {
    "label": "VectorCrossNoFMA()",
    "kind": "Method",
    "detail": "Function (const T TriNormal =)",
    "insertText": "VectorCrossNoFMA(AB, AC)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T TriNormal2 =)",
    "insertText": "VectorDot3(TriNormal, TriNormal)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T MinDouble = TMakeVectorRegisterConstant<)",
    "insertText": "T(std::numeric_limits<float>::min(), std::numeric_limits<float>::min(), std::numeric_limits<float>::min(), std::numeric_limits<float>::min())"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (const T AMin =)",
    "insertText": "VectorMultiply(A, MinDouble)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T Eps2 =)",
    "insertText": "VectorDot3(AMin, AMin)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T Eps2GENormal2 =)",
    "insertText": "VectorCompareGE(Eps2, TriNormal2)"
  },
  {
    "label": "CalculatExtraInformation()",
    "kind": "Method",
    "detail": "Function (NumVerts = 2 ; return VectorLineSimplexFindOrigin<T,)",
    "insertText": "CalculatExtraInformation(Simplex, NumVerts, OutBarycentric, As, Bs)"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (} const T AO =)",
    "insertText": "VectorNegate(A)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T d1 =)",
    "insertText": "VectorDot3(AB, AO)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T d2 =)",
    "insertText": "VectorDot3(AC, AO)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD1SEZero =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), d1)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD2SEZero =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), d2)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const T IsA =)",
    "insertText": "VectorBitwiseAnd(IsD1SEZero, IsD2SEZero)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NumVerts = 1 ;)",
    "insertText": "if(CalculatExtraInformation)"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (} return A ; } const T BO =)",
    "insertText": "VectorNegate(B)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T d3 =)",
    "insertText": "VectorDot3(AB, BO)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T d4 =)",
    "insertText": "VectorDot3(AC, BO)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD3GEZero =)",
    "insertText": "VectorCompareGE(d3, TVectorZero<T>())"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD3GED4 =)",
    "insertText": "VectorCompareGE(d3, d4)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const T IsB =)",
    "insertText": "VectorBitwiseAnd(IsD3GEZero, IsD3GED4)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (As [ 0 ] = As [ 1 ] ; Bs [ 0 ] = Bs [ 1 ] ; } return B ; } const T d1d4 =)",
    "insertText": "VectorMultiply(d1, d4)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const T vc =)",
    "insertText": "VectorNegateMultiplyAdd(d3, d2, d1d4)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T NormalizationDenominatorAB =)",
    "insertText": "VectorSubtract(d1, d3)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsZeroGEvc =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), vc)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD1GEZero =)",
    "insertText": "VectorCompareGE(d1, TVectorZero<T>())"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsZeroGED3 =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), d3)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (const T IsNDABGTZero =)",
    "insertText": "VectorCompareGT(NormalizationDenominatorAB, TVectorZero<T>())"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const T IsAB =)",
    "insertText": "VectorBitwiseAnd(VectorBitwiseAnd(IsZeroGEvc, IsD1GEZero), VectorBitwiseAnd(IsZeroGED3, IsNDABGTZero))"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (NumVerts = 2 ; const T v =)",
    "insertText": "VectorDivide(d1, NormalizationDenominatorAB)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T OneMinusV =)",
    "insertText": "VectorSubtract(TMakeVectorRegisterConstant<T>(1, 1, 1, 1), v)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (OutBarycentric =)",
    "insertText": "VectorUnpackLo(OneMinusV, v)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "VectorMultiplyAdd(v, AB, A)"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (} const T CO =)",
    "insertText": "VectorNegate(C)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T d5 =)",
    "insertText": "VectorDot3(AB, CO)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T d6 =)",
    "insertText": "VectorDot3(AC, CO)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD6GEZero =)",
    "insertText": "VectorCompareGE(d6, TVectorZero<T>())"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD6GED5 =)",
    "insertText": "VectorCompareGE(d6, d5)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const T IsC =)",
    "insertText": "VectorBitwiseAnd(IsD6GEZero, IsD6GED5)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (As [ 0 ] = As [ 2 ] ; Bs [ 0 ] = Bs [ 2 ] ; } return C ; } const T d5d2 =)",
    "insertText": "VectorMultiply(d5, d2)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const T vb =)",
    "insertText": "VectorNegateMultiplyAdd(d1, d6, d5d2)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T NormalizationDenominatorAC =)",
    "insertText": "VectorSubtract(d2, d6)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsZeroGEvb =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), vb)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD2GEZero =)",
    "insertText": "VectorCompareGE(d2, TVectorZero<T>())"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsZeroGED6 =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), d6)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (const T IsNDACGTZero =)",
    "insertText": "VectorCompareGT(NormalizationDenominatorAC, TVectorZero<T>())"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const T IsAC =)",
    "insertText": "VectorBitwiseAnd(VectorBitwiseAnd(IsZeroGEvb, IsD2GEZero), VectorBitwiseAnd(IsZeroGED6, IsNDACGTZero))"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (const T w =)",
    "insertText": "VectorDivide(d2, NormalizationDenominatorAC)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (NumVerts = 2 ; const T OneMinusW =)",
    "insertText": "VectorSubtract(TMakeVectorRegisterConstant<T>(1, 1, 1, 1), w)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (OutBarycentric =)",
    "insertText": "VectorUnpackLo(OneMinusW, w)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (As [ 1 ] = As [ 2 ] ; Bs [ 1 ] = Bs [ 2 ] ; } return)",
    "insertText": "VectorMultiplyAdd(w, AC, A)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (} const T d3d6 =)",
    "insertText": "VectorMultiply(d3, d6)"
  },
  {
    "label": "VectorNegateMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const T va =)",
    "insertText": "VectorNegateMultiplyAdd(d5, d4, d3d6)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T d4MinusD3 =)",
    "insertText": "VectorSubtract(d4, d3)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T d5MinusD6 =)",
    "insertText": "VectorSubtract(d5, d6)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (const T NormalizationDenominatorBC =)",
    "insertText": "VectorAdd(d4MinusD3, d5MinusD6)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsZeroGEva =)",
    "insertText": "VectorCompareGE(TVectorZero<T>(), va)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD4MinusD3GEZero =)",
    "insertText": "VectorCompareGE(d4MinusD3, TVectorZero<T>())"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (const T IsD5MinusD6GEZero =)",
    "insertText": "VectorCompareGE(d5MinusD6, TVectorZero<T>())"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (const T IsNDBCGTZero =)",
    "insertText": "VectorCompareGT(NormalizationDenominatorBC, TVectorZero<T>())"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (const T IsBC =)",
    "insertText": "VectorBitwiseAnd(VectorBitwiseAnd(IsZeroGEva, IsD4MinusD3GEZero), VectorBitwiseAnd(IsD5MinusD6GEZero, IsNDBCGTZero))"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (NumVerts = 2 ; const T w =)",
    "insertText": "VectorDivide(d4MinusD3, NormalizationDenominatorBC)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (} const T CMinusB =)",
    "insertText": "VectorSubtract(C, B)"
  },
  {
    "label": "VectorMultiplyAdd()",
    "kind": "Method",
    "detail": "Function (const T Result =)",
    "insertText": "VectorMultiplyAdd(w, CMinusB, B)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (As [ 0 ] = As [ 1 ] ; Bs [ 0 ] = Bs [ 1 ] ; As [ 1 ] = As [ 2 ] ; Bs [ 1 ] = Bs [ 2 ] ; } return Result ; } const T denom =)",
    "insertText": "VectorDivide(VectorOne(), VectorAdd(va, VectorAdd(vb, vc)))"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (T v =)",
    "insertText": "VectorMultiply(vb, denom)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (T w =)",
    "insertText": "VectorMultiply(vc, denom)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (const T OneMinusVMinusW =)",
    "insertText": "VectorSubtract(VectorSubtract(TMakeVectorRegisterConstant<T>(1, 1, 1, 1), v), w)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (const T OneMinusVMinusW_W =)",
    "insertText": "VectorUnpackLo(OneMinusVMinusW, w)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (OutBarycentric =)",
    "insertText": "VectorUnpackLo(OneMinusVMinusW_W, v)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (} const T TriNormalOverSize2 =)",
    "insertText": "VectorDivide(TriNormal, TriNormal2)"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T SignedDistance =)",
    "insertText": "VectorDot3(T(A), TriNormalOverSize2)"
  },
  {
    "label": "VectorSignMatch()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "VectorSignMatch(T A, T B)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (T OneIsZero =)",
    "insertText": "VectorMultiply(A, B)"
  },
  {
    "label": "VectorCompareEQ()",
    "kind": "Method",
    "detail": "Function (OneIsZero =)",
    "insertText": "VectorCompareEQ(OneIsZero, TVectorZero<T>())"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const bool IsZero = static_cast<)",
    "insertText": "bool(VectorMaskBits(OneIsZero))"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (const int32 MaskA =)",
    "insertText": "VectorMaskBits(A)"
  },
  {
    "label": "VectorMaskBits()",
    "kind": "Method",
    "detail": "Function (const int32 MaskB =)",
    "insertText": "VectorMaskBits(B)"
  },
  {
    "label": "VectorTetrahedronSimplexFindOrigin()",
    "kind": "Method",
    "detail": "Function (} template<T,bool CalculatExtraInformation> T)",
    "insertText": "VectorTetrahedronSimplexFindOrigin(T* RESTRICT Simplex, int32& RESTRICT NumVerts, T& RESTRICT OutBarycentric, T* RESTRICT A, T* RESTRICT B)"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (const T& X0 = Simplex [ 0 ] ; const T& X1 = Simplex [ 1 ] ; const T& X2 = Simplex [ 2 ] ; const T& X3 = Simplex [ 3 ] ; T Cofactors [ 4 ] ; Cofactors [ 0 ] =)",
    "insertText": "VectorNegate(VectorDot3(X1, Private::VectorCrossNoFMA(X2, X3)))"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (Cofactors [ 1 ] =)",
    "insertText": "VectorDot3(X0, Private::VectorCrossNoFMA(X2, X3))"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (Cofactors [ 2 ] =)",
    "insertText": "VectorNegate(VectorDot3(X0, Private::VectorCrossNoFMA(X1, X3)))"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (Cofactors [ 3 ] =)",
    "insertText": "VectorDot3(X0, Private::VectorCrossNoFMA(X1, X2))"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (T DetM =)",
    "insertText": "VectorAdd(VectorAdd(Cofactors[0], Cofactors[1]), VectorAdd(Cofactors[2], Cofactors[3]))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (SubAs [ 0 ] [ 0 ] = A [ 1 ] ; SubAs [ 0 ] [ 1 ] = A [ 2 ] ; SubAs [ 0 ] [ 2 ] = A [ 3 ] ; SubAs [ 1 ] [ 0 ] = A [ 0 ] ; SubAs [ 1 ] [ 1 ] = A [ 2 ] ; SubAs [ 1 ] [ 2 ] = A [ 3 ] ; SubAs [ 2 ] [ 0 ] = A [ 0 ] ; SubAs [ 2 ] [ 1 ] = A [ 1 ] ; SubAs [ 2 ] [ 2 ] = A [ 3 ] ; SubAs [ 3 ] [ 0 ] = A [ 0 ] ; SubAs [ 3 ] [ 1 ] = A [ 1 ] ; SubAs [ 3 ] [ 2 ] = A [ 2 ] ; SubBs [ 0 ] [ 0 ] = B [ 1 ] ; SubBs [ 0 ] [ 1 ] = B [ 2 ] ; SubBs [ 0 ] [ 2 ] = B [ 3 ] ; SubBs [ 1 ] [ 0 ] = B [ 0 ] ; SubBs [ 1 ] [ 1 ] = B [ 2 ] ; SubBs [ 1 ] [ 2 ] = B [ 3 ] ; SubBs [ 2 ] [ 0 ] = B [ 0 ] ; SubBs [ 2 ] [ 1 ] = B [ 1 ] ; SubBs [ 2 ] [ 2 ] = B [ 3 ] ; SubBs [ 3 ] [ 0 ] = B [ 0 ] ; SubBs [ 3 ] [ 1 ] = B [ 1 ] ; SubBs [ 3 ] [ 2 ] = B [ 2 ] ; } T ClosestPointSub [ 4 ] ; T SubBarycentric [ 4 ] ; int32 ClosestTriangleIdx = INDEX_NONE ; T MinTriangleDist2 = TVectorZero<)",
    "insertText": "T()"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (int32 IdxSimd [ 4 ] = { 0,1,2,3 } ; T Eps =)",
    "insertText": "VectorMultiply(GlobalVectorConstants::KindaSmallNumber, VectorDivide(DetM, VectorSet1(4.0f)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bInside = true ;)",
    "insertText": "for(int Idx = 0; Idx < 4; ++Idx)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (bSignMatch [ Idx ] = VectorSignMatch<)",
    "insertText": "T(DetM, Cofactors[Idx])"
  },
  {
    "label": "CalculatExtraInformation()",
    "kind": "Method",
    "detail": "Function (bInside = false ; ClosestPointSub [ Idx ] = TriangleSimplexFindOriginFast<T,)",
    "insertText": "CalculatExtraInformation(SubSimplices[Idx], SubNumVerts[Idx], SubBarycentric[Idx], SubAs[Idx], SubBs[Idx])"
  },
  {
    "label": "VectorDot3()",
    "kind": "Method",
    "detail": "Function (const T Dist2 =)",
    "insertText": "VectorDot3(ClosestPointSub[Idx], ClosestPointSub[Idx])"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (const T MinGTDist =)",
    "insertText": "VectorCompareGT(MinTriangleDist2, Dist2)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (const bool bFindClosest = static_cast<)",
    "insertText": "bool(VectorMaskBits(MinGTDist)) || (ClosestTriangleIdx == INDEX_NONE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MinTriangleDist2 = bFindClosest ? Dist2 : MinTriangleDist2 ; ClosestTriangleIdx = bFindClosest ? IdxSimd [ Idx ] : ClosestTriangleIdx ; } })",
    "insertText": "if(bInside)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (T OutBarycentricVectors [ 4 ] ; const T InvDetM =)",
    "insertText": "VectorDivide(TMakeVectorRegisterConstant<T>(1, 1, 1, 1), DetM)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutBarycentricVectors [ 0 ] =)",
    "insertText": "VectorMultiply(Cofactors[0], InvDetM)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutBarycentricVectors [ 1 ] =)",
    "insertText": "VectorMultiply(Cofactors[1], InvDetM)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutBarycentricVectors [ 2 ] =)",
    "insertText": "VectorMultiply(Cofactors[2], InvDetM)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (OutBarycentricVectors [ 3 ] =)",
    "insertText": "VectorMultiply(Cofactors[3], InvDetM)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (const T OutBarycentric0101 =)",
    "insertText": "VectorUnpackLo(OutBarycentricVectors[0], OutBarycentricVectors[1])"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (const T OutBarycentric2323 =)",
    "insertText": "VectorUnpackLo(OutBarycentricVectors[2], OutBarycentricVectors[3])"
  },
  {
    "label": "VectorCombineLow()",
    "kind": "Method",
    "detail": "Function (OutBarycentric =)",
    "insertText": "VectorCombineLow(OutBarycentric0101, OutBarycentric2323)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (OutBarycentric = SubBarycentric [ ClosestTriangleIdx ] ; })",
    "insertText": "for(int i = 0; i < 3; i++)"
  },
  {
    "label": "VectorSimplexFindClosestToOrigin()",
    "kind": "Method",
    "detail": "Function (A [ i ] = SubAs [ ClosestTriangleIdx ] [ i ] ; B [ i ] = SubBs [ ClosestTriangleIdx ] [ i ] ; } } return ClosestPointSub [ ClosestTriangleIdx ] ; } template<T,bool CalculatExtraInformation = true> T)",
    "insertText": "VectorSimplexFindClosestToOrigin(T* RESTRICT Simplex, int32& RESTRICT NumVerts, T& RESTRICT OutBarycentric, T* RESTRICT A, T* RESTRICT B)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (OutBarycentric = TMakeVectorRegisterConstant<)",
    "insertText": "T(1, 0, 0 , 0)"
  },
  {
    "label": "CalculatExtraInformation()",
    "kind": "Method",
    "detail": "Function (} return Simplex [ 0 ] ; case 2 : { return VectorLineSimplexFindOrigin<T,)",
    "insertText": "CalculatExtraInformation(Simplex, NumVerts, OutBarycentric, A, B)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (break ; } default :)",
    "insertText": "ensure(false)"
  }
]