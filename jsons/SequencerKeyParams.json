[
  {
    "label": "IKeyArea",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IKeyArea"
  },
  {
    "label": "ISequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencer"
  },
  {
    "label": "ISequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerSection"
  },
  {
    "label": "ISequencerTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequencerTrackEditor"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FKeySectionOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeySectionOperation"
  },
  {
    "label": "FKeyOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyOperation"
  },
  {
    "label": "FSectionCandidates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionCandidates"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Map . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / Guid . h \" # include \" Templates / SharedPointer . h \" class IKeyArea ; class ISequencer ; class ISequencerSection ; class ISequencerTrackEditor ; class UMovieSceneTrack ; struct FFrameNumber ; struct FGuid ; template<FuncType> class TFunctionRef ; namespace UE { namespace Sequencer { struct FKeySectionOperation { void)",
    "insertText": "Apply(FFrameNumber InKeyTime, ISequencer& InSequencer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencerSection> Section ; TArray<TSharedPtr<IKeyArea>> KeyAreas ; } ; struct FKeyOperation { using CallbackType =)",
    "insertText": "void(UMovieSceneTrack*, TArrayView<const FKeySectionOperation>)"
  },
  {
    "label": "IterateOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateOperations(TFunctionRef<CallbackType> Callback)"
  },
  {
    "label": "ApplyDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDefault(FFrameNumber InKeyTime, ISequencer& InSequencer)"
  },
  {
    "label": "ApplyOperations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyOperations(FFrameNumber InKeyTime, TArrayView<const FKeySectionOperation> InOperations, const FGuid& ObjectBindingID, ISequencer& InSequencer)"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Populate(UMovieSceneTrack* InTrack, TSharedPtr<ISequencerSection> InSection, TSharedPtr<IKeyArea> InKeyArea)"
  },
  {
    "label": "InitializeOperation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOperation(FFrameNumber InKeyTime)"
  },
  {
    "label": "FilterOperations()",
    "kind": "Method",
    "detail": "Function (private : struct FSectionCandidates { void)",
    "insertText": "FilterOperations(UMovieSceneTrack* Track, FFrameNumber KeyTime)"
  }
]