[
  {
    "label": "AnalyzingVideoSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalyzingVideoSink"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "SinksDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SinksDescriptor"
  },
  {
    "label": "AnalyzingVideoSink()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_PC_E2E_ANALYZER_VIDEO_ANALYZING_VIDEO_SINK_H_ # define TEST_PC_E2E_ANALYZER_VIDEO_ANALYZING_VIDEO_SINK_H_ # include<map> # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / test / pclf / media_configuration . h \" # include \" api / test / video / video_frame_writer . h \" # include \" api / test / video_quality_analyzer_interface . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" # include \" test / pc / e2e / analyzer / video / analyzing_video_sinks_helper . h \" namespace webrtc { namespace webrtc_pc_e2e { class AnalyzingVideoSink : public rtc::VideoSinkInterface<VideoFrame> { public : struct Stats { SamplesStatsCounter scaling_tims_ms ; SamplesStatsCounter analyzing_sink_processing_time_ms ; } ;)",
    "insertText": "AnalyzingVideoSink(absl::string_view peer_name, Clock* clock, VideoQualityAnalyzerInterface& analyzer, AnalyzingVideoSinksHelper& sinks_helper, const VideoSubscription& subscription, bool report_infra_stats)"
  },
  {
    "label": "UpdateSubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubscription(const VideoSubscription& subscription)"
  },
  {
    "label": "OnFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrame(const VideoFrame& frame)"
  },
  {
    "label": "stats()",
    "kind": "Method",
    "detail": "Function (Stats)",
    "insertText": "stats()"
  },
  {
    "label": "SinksDescriptor()",
    "kind": "Method",
    "detail": "Function (private : struct SinksDescriptor {)",
    "insertText": "SinksDescriptor(absl::string_view sender_peer_name, const VideoResolution& resolution) : sender_peer_name(sender_peer_name), resolution(resolution)"
  },
  {
    "label": "ScaleVideoFrame()",
    "kind": "Method",
    "detail": "Function (} std::string sender_peer_name ; VideoResolution resolution ; test::VideoFrameWriter* video_frame_writer = nullptr ; std::vector<std::unique_ptr<rtc::VideoSinkInterface<VideoFrame>>> sinks ; } ; VideoFrame)",
    "insertText": "ScaleVideoFrame(const VideoFrame& frame, const VideoResolution& required_resolution) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "AnalyzeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeFrame(const VideoFrame& frame)"
  },
  {
    "label": "PopulateSinks()",
    "kind": "Method",
    "detail": "Function (SinksDescriptor*)",
    "insertText": "PopulateSinks(absl::string_view stream_label) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const std::string peer_name_ ; const bool report_infra_stats_ ; Clock* const clock_ ; VideoQualityAnalyzerInterface* const analyzer_ ; AnalyzingVideoSinksHelper* const sinks_helper_ ; Mutex mutex_ ; VideoSubscription subscription_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]