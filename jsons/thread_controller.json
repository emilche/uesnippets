[
  {
    "label": "HistogramBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBase"
  },
  {
    "label": "MessageLoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageLoopBase"
  },
  {
    "label": "TickClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TickClock"
  },
  {
    "label": "PendingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingTask"
  },
  {
    "label": "SequencedTaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskSource"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Phase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Phase"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "TraceObserverForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceObserverForTesting"
  },
  {
    "label": "TimeKeeper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeKeeper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RunLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunLevel"
  },
  {
    "label": "TruePostMove",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TruePostMove"
  },
  {
    "label": "ThreadController()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ThreadController(const TickClock* time_source)"
  },
  {
    "label": "EnableMessagePumpTimeKeeperMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableMessagePumpTimeKeeperMetrics(const char* thread_name)"
  },
  {
    "label": "SetTickClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickClock(const TickClock* clock)"
  },
  {
    "label": "RunLevelTracker()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RunLevelTracker(const ThreadController& outer)"
  },
  {
    "label": "OnRunLoopStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRunLoopStarted(State initial_state, LazyNow& lazy_now)"
  },
  {
    "label": "OnRunLoopEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRunLoopEnded()"
  },
  {
    "label": "OnWorkStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorkStarted(LazyNow& lazy_now)"
  },
  {
    "label": "OnApplicationTaskSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplicationTaskSelected(TimeTicks queue_time, LazyNow& lazy_now)"
  },
  {
    "label": "OnWorkEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorkEnded(LazyNow& lazy_now)"
  },
  {
    "label": "OnIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIdle(LazyNow& lazy_now)"
  },
  {
    "label": "EnableTimeKeeperMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableTimeKeeperMetrics(const char* thread_name)"
  },
  {
    "label": "SetTraceObserverForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTraceObserverForTesting(\n        TraceObserverForTesting* trace_observer_for_testing)"
  },
  {
    "label": "TimeKeeper()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "TimeKeeper(const RunLevelTracker& outer)"
  },
  {
    "label": "EnableRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRecording(const char* thread_name)"
  },
  {
    "label": "RecordWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordWakeUp(LazyNow& lazy_now)"
  },
  {
    "label": "OnApplicationTaskSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplicationTaskSelected(TimeTicks queue_time, LazyNow& lazy_now)"
  },
  {
    "label": "RecordEndOfPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEndOfPhase(Phase phase, LazyNow& lazy_now)"
  },
  {
    "label": "ShouldRecordNow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecordNow(ShouldRecordReqs reqs = ShouldRecordReqs::kRegular)"
  },
  {
    "label": "RecordTimeInPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordTimeInPhase(Phase phase,\n                             TimeTicks phase_begin,\n                             TimeTicks phase_end)"
  },
  {
    "label": "RunLevel()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "RunLevel(State initial_state,\n               bool is_nested,\n               TimeKeeper& time_keeper,\n               LazyNow& lazy_now)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState(State new_state)"
  },
  {
    "label": "GUARDED_BY_CONTEXT()",
    "kind": "Method",
    "detail": "Function (run_levels_)",
    "insertText": "GUARDED_BY_CONTEXT(outer_.associated_thread_->thread_checker)"
  }
]