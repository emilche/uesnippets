[
  {
    "label": "HistogramBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramBase"
  },
  {
    "label": "MessageLoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MessageLoopBase"
  },
  {
    "label": "TickClock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TickClock"
  },
  {
    "label": "PendingTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingTask"
  },
  {
    "label": "SequencedTaskSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskSource"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Phase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Phase"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "TraceObserverForTesting",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TraceObserverForTesting"
  },
  {
    "label": "TimeKeeper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeKeeper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RunLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RunLevel"
  },
  {
    "label": "TruePostMove",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TruePostMove"
  },
  {
    "label": "ThreadController()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_SEQUENCE_MANAGER_THREAD_CONTROLLER_H_ # define BASE_TASK_SEQUENCE_MANAGER_THREAD_CONTROLLER_H_ # include<stack> # include<vector> # include \" base / base_export . h \" # include \" base / check . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / raw_ref . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / message_loop / message_pump . h \" # include \" base / profiler / sample_metadata . h \" # include \" base / run_loop . h \" # include \" base / task / common / lazy_now . h \" # include \" base / task / sequence_manager / associated_thread_id . h \" # include \" base / task / sequence_manager / tasks . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / thread_annotations . h \" # include \" base / time / time . h \" # include \" base / trace_event / base_tracing . h \" # include \" base / tracing_buildflags . h \" # include \" build / build_config . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class HistogramBase ; class MessageLoopBase ; class TickClock ; struct PendingTask ; namespace sequence_manager { namespace internal { class SequencedTaskSource ; class BASE_EXPORT ThreadController { public : enum Phase { kScheduled = 1,kPumpOverhead = 2,kWorkItem = 3,kNativeWork = kWorkItem,kSelectingApplicationTask = 4,kApplicationTask = 5,kIdleWork = 6,kNested = 7,kWorkItemSuspendedOnNested = 8,kMaxValue = kNested } ;)",
    "insertText": "ThreadController(const TickClock* time_source)"
  },
  {
    "label": "ThreadController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadController()"
  },
  {
    "label": "SetWorkBatchSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorkBatchSize(int work_batch_size = 1)"
  },
  {
    "label": "WillQueueTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WillQueueTask(PendingTask* pending_task)"
  },
  {
    "label": "ScheduleWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleWork()"
  },
  {
    "label": "SetNextDelayedDoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextDelayedDoWork(LazyNow* lazy_now, absl::optional<WakeUp> wake_up)"
  },
  {
    "label": "SetSequencedTaskSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequencedTaskSource(SequencedTaskSource*)"
  },
  {
    "label": "SetTimerSlack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimerSlack(TimerSlack timer_slack)"
  },
  {
    "label": "BindToCurrentThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindToCurrentThread(std::unique_ptr<MessagePump> message_pump)"
  },
  {
    "label": "SetTaskExecutionAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTaskExecutionAllowed(bool allowed)"
  },
  {
    "label": "IsTaskExecutionAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTaskExecutionAllowed()"
  },
  {
    "label": "GetBoundMessagePump()",
    "kind": "Method",
    "detail": "Function (MessagePump*)",
    "insertText": "GetBoundMessagePump()"
  },
  {
    "label": "ShouldQuitRunLoopWhenIdle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldQuitRunLoopWhenIdle()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_IOS) || BUILDFLAG(IS_ANDROID) virtual void AttachToMessagePump()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_IOS) virtual void DetachFromMessagePump()"
  },
  {
    "label": "EnableMessagePumpTimeKeeperMetrics()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "EnableMessagePumpTimeKeeperMetrics(const char* thread_name)"
  },
  {
    "label": "PrioritizeYieldingToNative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeYieldingToNative(base::TimeTicks prioritize_until)"
  },
  {
    "label": "EnablePeriodicYieldingToNative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnablePeriodicYieldingToNative(base::TimeDelta delta)"
  },
  {
    "label": "SetDefaultTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDefaultTaskRunner(scoped_refptr<SingleThreadTaskRunner>)"
  },
  {
    "label": "RunsTasksInCurrentSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunsTasksInCurrentSequence()"
  },
  {
    "label": "SetTickClock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTickClock(const TickClock* clock)"
  },
  {
    "label": "GetDefaultTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "GetDefaultTaskRunner()"
  },
  {
    "label": "RestoreDefaultTaskRunner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreDefaultTaskRunner()"
  },
  {
    "label": "AddNestingObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNestingObserver(RunLoop::NestingObserver* observer)"
  },
  {
    "label": "RemoveNestingObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNestingObserver(RunLoop::NestingObserver* observer)"
  },
  {
    "label": "GetAssociatedThread()",
    "kind": "Method",
    "detail": "Function (const scoped_refptr<AssociatedThreadId>&)",
    "insertText": "GetAssociatedThread()"
  },
  {
    "label": "RunLevelTracker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RunLevelTracker()"
  },
  {
    "label": "OnRunLoopStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRunLoopStarted(State initial_state, LazyNow& lazy_now)"
  },
  {
    "label": "OnRunLoopEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRunLoopEnded()"
  },
  {
    "label": "OnWorkStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorkStarted(LazyNow& lazy_now)"
  },
  {
    "label": "OnApplicationTaskSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnApplicationTaskSelected(TimeTicks queue_time, LazyNow& lazy_now)"
  },
  {
    "label": "OnWorkEnded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWorkEnded(LazyNow& lazy_now)"
  },
  {
    "label": "OnIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnIdle(LazyNow& lazy_now)"
  },
  {
    "label": "num_run_levels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "num_run_levels()"
  },
  {
    "label": "DCHECK_CALLED_ON_VALID_THREAD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_CALLED_ON_VALID_THREAD(outer_.associated_thread_->thread_checker)"
  },
  {
    "label": "EnableTimeKeeperMetrics()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableTimeKeeperMetrics(const char* thread_name)"
  },
  {
    "label": "TraceObserverForTesting()",
    "kind": "Method",
    "detail": "Function (class TraceObserverForTesting { public : ~)",
    "insertText": "TraceObserverForTesting()"
  },
  {
    "label": "OnThreadControllerActiveBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadControllerActiveBegin()"
  },
  {
    "label": "OnThreadControllerActiveEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnThreadControllerActiveEnd()"
  },
  {
    "label": "OnPhaseRecorded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPhaseRecorded(Phase phase)"
  },
  {
    "label": "SetTraceObserverForTesting()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetTraceObserverForTesting(TraceObserverForTesting* trace_observer_for_testing)"
  },
  {
    "label": "TimeKeeper()",
    "kind": "Method",
    "detail": "Function (private : class TimeKeeper { public :)",
    "insertText": "TimeKeeper(const RunLevelTracker& outer)"
  },
  {
    "label": "EnableRecording()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableRecording(const char* thread_name)"
  },
  {
    "label": "RecordWakeUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordWakeUp(LazyNow& lazy_now)"
  },
  {
    "label": "RecordEndOfPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordEndOfPhase(Phase phase, LazyNow& lazy_now)"
  },
  {
    "label": "ShouldRecordNow()",
    "kind": "Method",
    "detail": "Function (private : enum class ShouldRecordReqs { kRegular,kOnWakeUp,kOnEndNested,} ; bool)",
    "insertText": "ShouldRecordNow(ShouldRecordReqs reqs = ShouldRecordReqs::kRegular)"
  },
  {
    "label": "RecordTimeInPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordTimeInPhase(Phase phase, TimeTicks phase_begin, TimeTicks phase_end)"
  },
  {
    "label": "PhaseToEventName()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "PhaseToEventName(Phase phase)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (std::array<TimeDelta,Phase::kMaxValue + 1> deltas_ = { } ; TimeTicks last_wakeup_ ; TimeTicks last_phase_end_ ; TimeTicks last_sleep_ ; bool current_work_item_is_native_ = true ; HistogramBase* histogram_ = nullptr ; # if)",
    "insertText": "BUILDFLAG(ENABLE_BASE_TRACING)"
  },
  {
    "label": "RunLevel()",
    "kind": "Method",
    "detail": "Function (bool was_tracing_enabled_ ; # endif const RunLevelTracker& outer_ ; } time_keeper_ {* this } ; class RunLevel { public :)",
    "insertText": "RunLevel(State initial_state, bool is_nested, TimeKeeper& time_keeper, LazyNow& lazy_now)"
  },
  {
    "label": "RunLevel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RunLevel()"
  },
  {
    "label": "RunLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunLevel(RunLevel&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RunLevel&)",
    "insertText": "operator(RunLevel&&)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState(State new_state)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (State)",
    "insertText": "state()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(exit_lazy_now)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!exit_lazy_now_)"
  },
  {
    "label": "TruePostMove()",
    "kind": "Method",
    "detail": "Function (exit_lazy_now_ = exit_lazy_now ; } private : State state_ = kIdle ; bool is_nested_ ; const raw_ref<TimeKeeper> time_keeper_ ; LazyNow* exit_lazy_now_ = nullptr ; SampleMetadata thread_controller_sample_metadata_ ; size_t thread_controller_active_id_ = 0 ; class TruePostMove { public :)",
    "insertText": "TruePostMove()"
  },
  {
    "label": "TruePostMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TruePostMove(TruePostMove&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (other . was_moved_ = true ; } TruePostMove&)",
    "insertText": "operator(TruePostMove&&)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  }
]