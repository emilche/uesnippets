[
  {
    "label": "FCompactHeapPose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompactHeapPose"
  },
  {
    "label": "UAnimBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimBlueprint"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "FSlateIcon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateIcon"
  },
  {
    "label": "UPoseWatchFolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatchFolder"
  },
  {
    "label": "UPoseWatchElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatchElement"
  },
  {
    "label": "UPoseWatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatch"
  },
  {
    "label": "UPoseWatchPoseElement",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPoseWatchPoseElement"
  },
  {
    "label": "FObjectInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectInitializer"
  },
  {
    "label": "TElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TElementType"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "GetChildrenPoseWatchOf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" BoneIndices . h \" # include \" PoseWatch . generated . h \" struct FCompactHeapPose ; class UAnimBlueprint ; class UBlendProfile ; struct FSlateIcon ; namespace PoseWatchUtil { TSet<UPoseWatch*>)",
    "insertText": "GetChildrenPoseWatchOf(const UPoseWatchFolder* Folder, const UAnimBlueprint* AnimBlueprint)"
  },
  {
    "label": "GetChildrenPoseWatchFoldersOf()",
    "kind": "Method",
    "detail": "Function (TSet<UPoseWatchFolder*>)",
    "insertText": "GetChildrenPoseWatchFoldersOf(const UPoseWatchFolder* Folder, const UAnimBlueprint* AnimBlueprint)"
  },
  {
    "label": "ChoosePoseWatchColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "ChoosePoseWatchColor()"
  },
  {
    "label": "FindUniqueNameInParent()",
    "kind": "Method",
    "detail": "Function (template<TParent,TItem> FText)",
    "insertText": "FindUniqueNameInParent(TParent* InParent, const TItem* InItem)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: #if WITH_EDITOR ENGINE_API const FText GetPath()"
  },
  {
    "label": "GetDefaultLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDefaultLabel()"
  },
  {
    "label": "GetLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetLabel()"
  },
  {
    "label": "GetIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsVisible()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (UPoseWatchFolder*)",
    "insertText": "GetParent()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetParent(UPoseWatchFolder* Parent, bool bForce = false)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveTo(UPoseWatchFolder* InFolder)"
  },
  {
    "label": "SetLabel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetLabel(const FText& InLabel)"
  },
  {
    "label": "SetIsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsVisible(bool bInIsVisible, bool bUpdateChildren=true)"
  },
  {
    "label": "OnRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoved()"
  },
  {
    "label": "IsIn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIn(const UPoseWatchFolder* InFolder)"
  },
  {
    "label": "IsDescendantOf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDescendantOf(const UPoseWatchFolder* InFolder)"
  },
  {
    "label": "IsAssignedFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssignedFolder()"
  },
  {
    "label": "ValidateLabelRename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateLabelRename(const FText& InLabel, FText& OutErrorMessage)"
  },
  {
    "label": "IsLabelUniqueInParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLabelUniqueInParent(const FText& InLabel, UPoseWatchFolder* InFolder)"
  },
  {
    "label": "HasChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasChildren()"
  },
  {
    "label": "SetUniqueDefaultLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniqueDefaultLabel()"
  },
  {
    "label": "UpdateVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisibility()"
  },
  {
    "label": "GetAnimBlueprint()",
    "kind": "Method",
    "detail": "Function (UAnimBlueprint*)",
    "insertText": "GetAnimBlueprint()"
  },
  {
    "label": "SetIsExpanded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsExpanded(bool bInIsExpanded)"
  },
  {
    "label": "GetIsExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsExpanded()"
  },
  {
    "label": "FindUniqueNameInParent()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "FindUniqueNameInParent(UPoseWatchFolder* InParent)"
  },
  {
    "label": "HasPoseWatchChildren()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPoseWatchChildren()"
  },
  {
    "label": "HasPoseWatchDescendents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPoseWatchDescendents()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: #if WITH_EDITOR virtual ~UPoseWatchElement()"
  },
  {
    "label": "GetIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsEnabled()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParent(UPoseWatch* InParent)"
  },
  {
    "label": "SetIsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsVisible(bool bInIsVisible)"
  },
  {
    "label": "IsLabelUniqueInParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLabelUniqueInParent(const FText& InLabel, UPoseWatch* InParent)"
  },
  {
    "label": "SetUniqueLabel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniqueLabel(const FText& InLabel)"
  },
  {
    "label": "GetColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetColor()"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColor(const FColor& InColor)"
  },
  {
    "label": "HasColor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasColor()"
  },
  {
    "label": "SetHasColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasColor(const bool bInHasColor)"
  },
  {
    "label": "GetIconName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetIconName()"
  },
  {
    "label": "SetIconName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIconName(const FName InIconName)"
  },
  {
    "label": "ToggleIsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleIsVisible()"
  },
  {
    "label": "FindUniqueNameInParent()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "FindUniqueNameInParent(class UPoseWatch* InParent)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API UPoseWatchPoseElement(const class FObjectInitializer& PCIP)"
  },
  {
    "label": "StaticGetIcon()",
    "kind": "Method",
    "detail": "Function (FSlateIcon)",
    "insertText": "StaticGetIcon()"
  },
  {
    "label": "GetIsNodeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsNodeEnabled()"
  },
  {
    "label": "GetShouldDeleteOnDeselect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShouldDeleteOnDeselect()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetParent(UPoseWatchFolder* InParent, bool bForce=false)"
  },
  {
    "label": "SetIsNodeEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsNodeEnabled(const bool bInIsEnabled)"
  },
  {
    "label": "SetShouldDeleteOnDeselect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldDeleteOnDeselect(const bool bInDeleteOnDeselection)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UPoseWatchElement>)",
    "insertText": "AddElement(const FText InLabel, const FName IconName)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (TArray<TObjectPtr<UPoseWatchElement>>&)",
    "insertText": "GetElements()"
  },
  {
    "label": "FindOrAddElement()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<UPoseWatchElement>)",
    "insertText": "FindOrAddElement(const FText InLabel, const FName InIconName)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(const TObjectPtr<UPoseWatchElement> InElement)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const UPoseWatchElement* const InElement)"
  },
  {
    "label": "GetFirstElementOfType()",
    "kind": "Method",
    "detail": "Function (} template<class TElementType> TObjectPtr<TElementType>)",
    "insertText": "GetFirstElementOfType()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if WITH_EDITOR template<class TElementType> TObjectPtr<TElementType>)",
    "insertText": "AddElement(const FText InLabel, const FName InIconName)"
  },
  {
    "label": "PoseWatchElement()",
    "kind": "Method",
    "detail": "Function (TObjectPtr<TElementType>)",
    "insertText": "PoseWatchElement(NewObject<TElementType>(this))"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (PoseWatchElement ->)",
    "insertText": "SetParent(this)"
  },
  {
    "label": "SetUniqueLabel()",
    "kind": "Method",
    "detail": "Function (PoseWatchElement ->)",
    "insertText": "SetUniqueLabel(InLabel)"
  },
  {
    "label": "SetIconName()",
    "kind": "Method",
    "detail": "Function (PoseWatchElement ->)",
    "insertText": "SetIconName(InIconName)"
  },
  {
    "label": "SetColor()",
    "kind": "Method",
    "detail": "Function (PoseWatchElement ->)",
    "insertText": "SetColor(FColor::MakeRandomColor())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Elements .)",
    "insertText": "Add(PoseWatchElement)"
  }
]