[
  {
    "label": "FMovieSceneEvaluationTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEvaluationTrack"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UMovieSceneEventTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneEventTrack"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneNameableTrack . h \" # include \" Tracks / MovieSceneSpawnTrack . h \" # include \" MovieSceneObjectBindingID . h \" # include \" Compilation / IMovieSceneTrackTemplateProducer . h \" # include \" Compilation / IMovieSceneDeterminismSource . h \" # include \" MovieSceneEventTrack . generated . h \" struct FMovieSceneEvaluationTrack ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (AtStartOfEvaluation,AtEndOfEvaluation,AfterSpawn,} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMovieSceneEventTrack() : bFireEventsWhenForwards(true) , bFireEventsWhenBackwards(true) , EventPosition(EFireEventsAtPosition::AtEndOfEvaluation)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA TrackTint =)",
    "insertText": "FColor(41, 98, 41, 150)"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (# endif } public : void)",
    "insertText": "AddSection(UMovieSceneSection& Section)"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneSection> SectionClass)"
  },
  {
    "label": "CreateNewSection()",
    "kind": "Method",
    "detail": "Function (UMovieSceneSection*)",
    "insertText": "CreateNewSection()"
  },
  {
    "label": "GetAllSections()",
    "kind": "Method",
    "detail": "Function (const TArray<UMovieSceneSection*>&)",
    "insertText": "GetAllSections()"
  },
  {
    "label": "HasSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSection(const UMovieSceneSection& Section)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "RemoveAllAnimationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAllAnimationData()"
  },
  {
    "label": "RemoveSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSection(UMovieSceneSection& Section)"
  },
  {
    "label": "RemoveSectionAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSectionAt(int32 SectionIndex)"
  },
  {
    "label": "CustomCompile()",
    "kind": "Method",
    "detail": "Function (EMovieSceneCompileResult)",
    "insertText": "CustomCompile(FMovieSceneEvaluationTrack& Track, const FMovieSceneTrackCompilerArgs& Args)"
  },
  {
    "label": "CreateTemplateForSection()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEvalTemplatePtr)",
    "insertText": "CreateTemplateForSection(const UMovieSceneSection& InSection)"
  },
  {
    "label": "PostCompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostCompile(FMovieSceneEvaluationTrack& Track, const FMovieSceneTrackCompilerArgs& Args)"
  },
  {
    "label": "SupportsMultipleRows()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsMultipleRows()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostRename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRename(UObject* OldOuter, const FName OldName)"
  },
  {
    "label": "GetDefaultDisplayName()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA FText)",
    "insertText": "GetDefaultDisplayName()"
  }
]