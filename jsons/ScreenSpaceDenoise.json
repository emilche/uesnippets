[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FPreviousViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPreviousViewInfo"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FSceneTextureParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneTextureParameters"
  },
  {
    "label": "IScreenSpaceDenoiser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IScreenSpaceDenoiser"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShadowRayTracingConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadowRayTracingConfig"
  },
  {
    "label": "FShadowVisibilityParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShadowVisibilityParameters"
  },
  {
    "label": "FReflectionsRayTracingConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReflectionsRayTracingConfig"
  },
  {
    "label": "FAmbientOcclusionRayTracingConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAmbientOcclusionRayTracingConfig"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderGraph . h \" # include \" IndirectLightRendering . h \" class FViewInfo ; struct FPreviousViewInfo ; class FLightSceneInfo ; class FSceneTextureParameters ; const int32 kMaxDenoiserBufferProcessingCount = 4 ; namespace Denoiser {)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FCommonShaderParameters, ) SHADER_PARAMETER(FVector4f, DenoiserBufferSizeAndInvSize) SHADER_PARAMETER(FVector4f, DenoiserBufferBilinearUVMinMax) SHADER_PARAMETER(FVector4f, SceneBufferUVToScreenPosition) END_SHADER_PARAMETER_STRUCT() void SetupCommonShaderParameters( const FViewInfo& View, const FSceneTextureParameters& SceneTextures, const FIntRect DenoiserFullResViewport, float DenoisingResolutionFraction, FCommonShaderParameters* OutPublicCommonParameters)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FSSDSignalTextures, ) SHADER_PARAMETER_RDG_TEXTURE_ARRAY(Texture2D, Textures, [kMaxDenoiserBufferProcessingCount]) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (public : const int32 kMaxBatchSize = 4 ; int32 kMultiPolychromaticPenumbraHarmonics = 4 ; int32 kHarmonicBordersCount = kMultiPolychromaticPenumbraHarmonics + 1 ; int32 kSphericalHarmonicTextureCount = 2 ; enum class EMode { Disabled,DefaultDenoiser,ThirdPartyDenoiser,} ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FShadowVisibilityInputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Mask) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, ClosestOccluder) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FShadowVisibilityOutputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Mask) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHarmonicTextures, ) SHADER_PARAMETER_RDG_TEXTURE_ARRAY(Texture2D, Harmonics, [kHarmonicBordersCount]) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FHarmonicUAVs, ) SHADER_PARAMETER_RDG_TEXTURE_UAV_ARRAY(Texture2D, Harmonics, [kHarmonicBordersCount]) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FPolychromaticPenumbraHarmonics, ) SHADER_PARAMETER_STRUCT(FHarmonicTextures, Diffuse) SHADER_PARAMETER_STRUCT(FHarmonicTextures, Specular) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FPolychromaticPenumbraOutputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Diffuse) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Specular) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FReflectionsInputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Color) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, RayHitDistance) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, RayImaginaryDepth) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FReflectionsOutputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Color) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FAmbientOcclusionInputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Mask) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, RayHitDistance) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FAmbientOcclusionOutputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, AmbientOcclusionMask) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FDiffuseIndirectInputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Color) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, AmbientOcclusionMask) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, RayHitDistance) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FDiffuseIndirectOutputs, ) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, Color) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, AmbientOcclusionMask) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FDiffuseIndirectHarmonic, ) SHADER_PARAMETER_RDG_TEXTURE_ARRAY(Texture2D, SphericalHarmonic, [kSphericalHarmonicTextureCount]) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FDiffuseIndirectHarmonicUAVs, ) SHADER_PARAMETER_RDG_TEXTURE_UAV_ARRAY(RWTexture2D, SphericalHarmonic, [kSphericalHarmonicTextureCount]) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "CreateHarmonicTextures()",
    "kind": "Method",
    "detail": "Function (Bailout,PenumbraAndAvgOccluder,PenumbraAndClosestOccluder,} ; struct FShadowRayTracingConfig { int32 RayCountPerPixel = 1 ; } ; struct FShadowVisibilityParameters { const FLightSceneInfo* LightSceneInfo = nullptr ; FShadowRayTracingConfig RayTracingConfig ; FShadowVisibilityInputs InputTextures ; } ; struct FReflectionsRayTracingConfig { float ResolutionFraction = 1 . 0 f ; int32 RayCountPerPixel = 1 ; } ; struct FAmbientOcclusionRayTracingConfig { float ResolutionFraction = 1 . 0 f ; float RayCountPerPixel = 1 . 0 f ; } ; FHarmonicTextures)",
    "insertText": "CreateHarmonicTextures(FRDGBuilder& GraphBuilder, FIntPoint Extent, const TCHAR* DebugName)"
  },
  {
    "label": "CreateUAVs()",
    "kind": "Method",
    "detail": "Function (FHarmonicUAVs)",
    "insertText": "CreateUAVs(FRDGBuilder& GraphBuilder, const FHarmonicTextures& Textures)"
  },
  {
    "label": "CreateUAVs()",
    "kind": "Method",
    "detail": "Function (FDiffuseIndirectHarmonicUAVs)",
    "insertText": "CreateUAVs(FRDGBuilder& GraphBuilder, const FDiffuseIndirectHarmonic& Textures)"
  },
  {
    "label": "IScreenSpaceDenoiser()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IScreenSpaceDenoiser()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (} ; const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetShadowRequirements()",
    "kind": "Method",
    "detail": "Function (EShadowRequirements)",
    "insertText": "GetShadowRequirements(const FViewInfo& View, const FLightSceneInfo& LightSceneInfo, const FShadowRayTracingConfig& RayTracingConfig)"
  },
  {
    "label": "DenoiseShadowVisibilityMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DenoiseShadowVisibilityMasks(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const TStaticArray<FShadowVisibilityParameters, IScreenSpaceDenoiser::kMaxBatchSize>& InputParameters, const int32 InputParameterCount, TStaticArray<FShadowVisibilityOutputs, IScreenSpaceDenoiser::kMaxBatchSize>& Outputs)"
  },
  {
    "label": "DenoisePolychromaticPenumbraHarmonics()",
    "kind": "Method",
    "detail": "Function (FPolychromaticPenumbraOutputs)",
    "insertText": "DenoisePolychromaticPenumbraHarmonics(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FPolychromaticPenumbraHarmonics& Inputs)"
  },
  {
    "label": "DenoiseReflections()",
    "kind": "Method",
    "detail": "Function (FReflectionsOutputs)",
    "insertText": "DenoiseReflections(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FReflectionsInputs& ReflectionInputs, const FReflectionsRayTracingConfig RayTracingConfig)"
  },
  {
    "label": "DenoiseWaterReflections()",
    "kind": "Method",
    "detail": "Function (FReflectionsOutputs)",
    "insertText": "DenoiseWaterReflections(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FReflectionsInputs& ReflectionInputs, const FReflectionsRayTracingConfig RayTracingConfig)"
  },
  {
    "label": "DenoiseAmbientOcclusion()",
    "kind": "Method",
    "detail": "Function (FAmbientOcclusionOutputs)",
    "insertText": "DenoiseAmbientOcclusion(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FAmbientOcclusionInputs& ReflectionInputs, const FAmbientOcclusionRayTracingConfig RayTracingConfig)"
  },
  {
    "label": "DenoiseDiffuseIndirect()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "DenoiseDiffuseIndirect(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FDiffuseIndirectInputs& Inputs, const FAmbientOcclusionRayTracingConfig Config)"
  },
  {
    "label": "DenoiseSkyLight()",
    "kind": "Method",
    "detail": "Function (FDiffuseIndirectOutputs)",
    "insertText": "DenoiseSkyLight(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FDiffuseIndirectInputs& Inputs, const FAmbientOcclusionRayTracingConfig Config)"
  },
  {
    "label": "DenoiseDiffuseIndirectHarmonic()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "DenoiseDiffuseIndirectHarmonic(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FDiffuseIndirectHarmonic& Inputs, const HybridIndirectLighting::FCommonParameters& CommonDiffuseParameters)"
  },
  {
    "label": "SupportsScreenSpaceDiffuseIndirectDenoiser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsScreenSpaceDiffuseIndirectDenoiser(EShaderPlatform Platform)"
  },
  {
    "label": "DenoiseScreenSpaceDiffuseIndirect()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "DenoiseScreenSpaceDiffuseIndirect(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FDiffuseIndirectInputs& Inputs, const FAmbientOcclusionRayTracingConfig Config)"
  },
  {
    "label": "DenoiseIndirectProbeHierarchy()",
    "kind": "Method",
    "detail": "Function (FSSDSignalTextures)",
    "insertText": "DenoiseIndirectProbeHierarchy(FRDGBuilder& GraphBuilder, const FViewInfo& View, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FSSDSignalTextures& InputSignal, FRDGTextureRef CompressedDepthTexture, FRDGTextureRef CompressedShadingModelTexture)"
  },
  {
    "label": "GetDefaultDenoiser()",
    "kind": "Method",
    "detail": "Function (const IScreenSpaceDenoiser*)",
    "insertText": "GetDefaultDenoiser()"
  },
  {
    "label": "GetDenoiserMode()",
    "kind": "Method",
    "detail": "Function (EMode)",
    "insertText": "GetDenoiserMode(const TAutoConsoleVariable<int32>& CVar)"
  },
  {
    "label": "DenoiseSkyLight()",
    "kind": "Method",
    "detail": "Function (FDiffuseIndirectOutputs)",
    "insertText": "DenoiseSkyLight(FRDGBuilder& GraphBuilder, TConstArrayView<FViewInfo> Views, FPreviousViewInfo* PreviousViewInfos, const FSceneTextureParameters& SceneTextures, const FDiffuseIndirectInputs& Inputs, const FAmbientOcclusionRayTracingConfig Config)"
  },
  {
    "label": "GetReflectionsDenoiserMode()",
    "kind": "Method",
    "detail": "Function (} ; const IScreenSpaceDenoiser* GScreenSpaceDenoiser ; int)",
    "insertText": "GetReflectionsDenoiserMode()"
  }
]