[
  {
    "label": "__GLsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__GLsync"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glActiveTexture(GLenum texture)"
  },
  {
    "label": "glAttachShader()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glAttachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glBindAttribLocation()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBindBuffer(GLenum target, GLuint buffer)"
  },
  {
    "label": "glBindFramebuffer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBindFramebuffer(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glBindRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBindRenderbuffer(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glBindTexture()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBindTexture(GLenum target, GLuint texture)"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBlendEquation(GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunc()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBlendFunc(GLenum sfactor, GLenum dfactor)"
  },
  {
    "label": "glBlendFuncSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glCheckFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCheckFramebufferStatus(GLenum target)"
  },
  {
    "label": "glClear()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glClear(GLbitfield mask)"
  },
  {
    "label": "glClearColor()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glClearDepthf()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glClearDepthf(GLfloat d)"
  },
  {
    "label": "glClearStencil()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glClearStencil(GLint s)"
  },
  {
    "label": "glColorMask()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "glCompileShader()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCompileShader(GLuint shader)"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCopyTexImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCreateProgram(void)"
  },
  {
    "label": "glCreateShader()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCreateShader(GLenum type)"
  },
  {
    "label": "glCullFace()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glCullFace(GLenum mode)"
  },
  {
    "label": "glDeleteBuffers()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDeleteBuffers(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glDeleteFramebuffers()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glDeleteProgram()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDeleteProgram(GLuint program)"
  },
  {
    "label": "glDeleteRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glDeleteShader()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDeleteShader(GLuint shader)"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDeleteTextures(GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glDepthFunc()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDepthFunc(GLenum func)"
  },
  {
    "label": "glDepthMask()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDepthMask(GLboolean flag)"
  },
  {
    "label": "glDepthRangef()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDepthRangef(GLfloat n, GLfloat f)"
  },
  {
    "label": "glDetachShader()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDetachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDisable(GLenum cap)"
  },
  {
    "label": "glDisableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDisableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glDrawArrays()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDrawArrays(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glDrawElements()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glEnable()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glEnable(GLenum cap)"
  },
  {
    "label": "glEnableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glEnableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glFinish()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glFinish(void)"
  },
  {
    "label": "glFlush()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glFlush(void)"
  },
  {
    "label": "glFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFrontFace()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glFrontFace(GLenum mode)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGenBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGenerateMipmap(GLenum target)"
  },
  {
    "label": "glGenFramebuffers()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGenFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glGenRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGenTextures(GLsizei n, GLuint *textures)"
  },
  {
    "label": "glGetActiveAttrib()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetActiveUniform()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetAttachedShaders()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "glGetAttribLocation()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetAttribLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetBooleanv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetBooleanv(GLenum pname, GLboolean *data)"
  },
  {
    "label": "glGetBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetError()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetError(void)"
  },
  {
    "label": "glGetFloatv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetFloatv(GLenum pname, GLfloat *data)"
  },
  {
    "label": "glGetFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetIntegerv(GLenum pname, GLint *data)"
  },
  {
    "label": "glGetProgramiv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetProgramiv(GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramInfoLog()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderiv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetShaderiv(GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderInfoLog()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderPrecisionFormat()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "glGetShaderSource()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "glGetString()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetString(GLenum name)"
  },
  {
    "label": "glGetTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetUniformfv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetUniformfv(GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformiv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetUniformiv(GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "glGetUniformLocation()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetUniformLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetVertexAttribfv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribiv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointerv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glHint()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glHint(GLenum target, GLenum mode)"
  },
  {
    "label": "glIsBuffer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glIsBuffer(GLuint buffer)"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glIsEnabled(GLenum cap)"
  },
  {
    "label": "glIsFramebuffer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glIsFramebuffer(GLuint framebuffer)"
  },
  {
    "label": "glIsProgram()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glIsProgram(GLuint program)"
  },
  {
    "label": "glIsRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glIsRenderbuffer(GLuint renderbuffer)"
  },
  {
    "label": "glIsShader()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glIsShader(GLuint shader)"
  },
  {
    "label": "glIsTexture()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glIsTexture(GLuint texture)"
  },
  {
    "label": "glLineWidth()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glLineWidth(GLfloat width)"
  },
  {
    "label": "glLinkProgram()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glLinkProgram(GLuint program)"
  },
  {
    "label": "glPixelStorei()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glPixelStorei(GLenum pname, GLint param)"
  },
  {
    "label": "glPolygonOffset()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glPolygonOffset(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glReadPixels()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glReleaseShaderCompiler()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glReleaseShaderCompiler(void)"
  },
  {
    "label": "glRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glSampleCoverage(GLfloat value, GLboolean invert)"
  },
  {
    "label": "glScissor()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glScissor(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glShaderBinary()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "glShaderSource()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "glStencilFunc()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glStencilFunc(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilFuncSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilMask()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glStencilMask(GLuint mask)"
  },
  {
    "label": "glStencilMaskSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glStencilMaskSeparate(GLenum face, GLuint mask)"
  },
  {
    "label": "glStencilOp()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)"
  },
  {
    "label": "glStencilOpSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glTexImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexParameterf()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glTexParameterf(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glTexParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glTexParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glUniform1f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform1f(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform1fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform1fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform1i(GLint location, GLint v0)"
  },
  {
    "label": "glUniform1iv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform1iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform2f(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform2fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform2fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2i()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform2i(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform2iv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform2iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform3fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform3fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3i()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform3iv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform3iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform4fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4i()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniform4iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUseProgram()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glUseProgram(GLuint program)"
  },
  {
    "label": "glValidateProgram()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glValidateProgram(GLuint program)"
  },
  {
    "label": "glVertexAttrib1f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib1f(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib1fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib2fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib3fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4f()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fv()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttrib4fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glViewport()",
    "kind": "Method",
    "detail": "Function (GL_APIENTRY)",
    "insertText": "glViewport(GLint x, GLint y, GLsizei width, GLsizei height)"
  }
]