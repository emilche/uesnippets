[
  {
    "label": "__GLsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__GLsync"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# ifndef __gles2_gl2_h_ # define __gles2_gl2_h_ 1 # ifdef __cplusplus \" C \" { # endif # ifndef GL_APIENTRYP # define GL_APIENTRYP GL_APIENTRY* # endif # ifndef GL_GLES_PROTOTYPES # define GL_GLES_PROTOTYPES 1 # endif # ifndef GL_ES_VERSION_2_0 # define GL_ES_VERSION_2_0 1 typedef khronos_int8_t GLbyte ; typedef khronos_float_t GLclampf ; typedef khronos_int32_t GLfixed ; typedef khronos_int16_t GLshort ; typedef khronos_uint16_t GLushort ; typedef void GLvoid ; typedef struct __GLsync* GLsync ; typedef khronos_int64_t GLint64 ; typedef khronos_uint64_t GLuint64 ; typedef unsigned int GLenum ; typedef unsigned int GLuint ; typedef char GLchar ; typedef khronos_float_t GLfloat ; typedef khronos_ssize_t GLsizeiptr ; typedef khronos_intptr_t GLintptr ; typedef unsigned int GLbitfield ; typedef int GLint ; typedef unsigned char GLboolean ; typedef int GLsizei ; typedef khronos_uint8_t GLubyte ; # define GL_DEPTH_BUFFER_BIT 0 x00000100 # define GL_STENCIL_BUFFER_BIT 0 x00000400 # define GL_COLOR_BUFFER_BIT 0 x00004000 # define GL_FALSE 0 # define GL_TRUE 1 # define GL_POINTS 0 x0000 # define GL_LINES 0 x0001 # define GL_LINE_LOOP 0 x0002 # define GL_LINE_STRIP 0 x0003 # define GL_TRIANGLES 0 x0004 # define GL_TRIANGLE_STRIP 0 x0005 # define GL_TRIANGLE_FAN 0 x0006 # define GL_ZERO 0 # define GL_ONE 1 # define GL_SRC_COLOR 0 x0300 # define GL_ONE_MINUS_SRC_COLOR 0 x0301 # define GL_SRC_ALPHA 0 x0302 # define GL_ONE_MINUS_SRC_ALPHA 0 x0303 # define GL_DST_ALPHA 0 x0304 # define GL_ONE_MINUS_DST_ALPHA 0 x0305 # define GL_DST_COLOR 0 x0306 # define GL_ONE_MINUS_DST_COLOR 0 x0307 # define GL_SRC_ALPHA_SATURATE 0 x0308 # define GL_FUNC_ADD 0 x8006 # define GL_BLEND_EQUATION 0 x8009 # define GL_BLEND_EQUATION_RGB 0 x8009 # define GL_BLEND_EQUATION_ALPHA 0 x883D # define GL_FUNC_SUBTRACT 0 x800A # define GL_FUNC_REVERSE_SUBTRACT 0 x800B # define GL_BLEND_DST_RGB 0 x80C8 # define GL_BLEND_SRC_RGB 0 x80C9 # define GL_BLEND_DST_ALPHA 0 x80CA # define GL_BLEND_SRC_ALPHA 0 x80CB # define GL_CONSTANT_COLOR 0 x8001 # define GL_ONE_MINUS_CONSTANT_COLOR 0 x8002 # define GL_CONSTANT_ALPHA 0 x8003 # define GL_ONE_MINUS_CONSTANT_ALPHA 0 x8004 # define GL_BLEND_COLOR 0 x8005 # define GL_ARRAY_BUFFER 0 x8892 # define GL_ELEMENT_ARRAY_BUFFER 0 x8893 # define GL_ARRAY_BUFFER_BINDING 0 x8894 # define GL_ELEMENT_ARRAY_BUFFER_BINDING 0 x8895 # define GL_STREAM_DRAW 0 x88E0 # define GL_STATIC_DRAW 0 x88E4 # define GL_DYNAMIC_DRAW 0 x88E8 # define GL_BUFFER_SIZE 0 x8764 # define GL_BUFFER_USAGE 0 x8765 # define GL_CURRENT_VERTEX_ATTRIB 0 x8626 # define GL_FRONT 0 x0404 # define GL_BACK 0 x0405 # define GL_FRONT_AND_BACK 0 x0408 # define GL_TEXTURE_2D 0 x0DE1 # define GL_CULL_FACE 0 x0B44 # define GL_BLEND 0 x0BE2 # define GL_DITHER 0 x0BD0 # define GL_STENCIL_TEST 0 x0B90 # define GL_DEPTH_TEST 0 x0B71 # define GL_SCISSOR_TEST 0 x0C11 # define GL_POLYGON_OFFSET_FILL 0 x8037 # define GL_SAMPLE_ALPHA_TO_COVERAGE 0 x809E # define GL_SAMPLE_COVERAGE 0 x80A0 # define GL_NO_ERROR 0 # define GL_INVALID_ENUM 0 x0500 # define GL_INVALID_VALUE 0 x0501 # define GL_INVALID_OPERATION 0 x0502 # define GL_OUT_OF_MEMORY 0 x0505 # define GL_CW 0 x0900 # define GL_CCW 0 x0901 # define GL_LINE_WIDTH 0 x0B21 # define GL_ALIASED_POINT_SIZE_RANGE 0 x846D # define GL_ALIASED_LINE_WIDTH_RANGE 0 x846E # define GL_CULL_FACE_MODE 0 x0B45 # define GL_FRONT_FACE 0 x0B46 # define GL_DEPTH_RANGE 0 x0B70 # define GL_DEPTH_WRITEMASK 0 x0B72 # define GL_DEPTH_CLEAR_VALUE 0 x0B73 # define GL_DEPTH_FUNC 0 x0B74 # define GL_STENCIL_CLEAR_VALUE 0 x0B91 # define GL_STENCIL_FUNC 0 x0B92 # define GL_STENCIL_FAIL 0 x0B94 # define GL_STENCIL_PASS_DEPTH_FAIL 0 x0B95 # define GL_STENCIL_PASS_DEPTH_PASS 0 x0B96 # define GL_STENCIL_REF 0 x0B97 # define GL_STENCIL_VALUE_MASK 0 x0B93 # define GL_STENCIL_WRITEMASK 0 x0B98 # define GL_STENCIL_BACK_FUNC 0 x8800 # define GL_STENCIL_BACK_FAIL 0 x8801 # define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0 x8802 # define GL_STENCIL_BACK_PASS_DEPTH_PASS 0 x8803 # define GL_STENCIL_BACK_REF 0 x8CA3 # define GL_STENCIL_BACK_VALUE_MASK 0 x8CA4 # define GL_STENCIL_BACK_WRITEMASK 0 x8CA5 # define GL_VIEWPORT 0 x0BA2 # define GL_SCISSOR_BOX 0 x0C10 # define GL_COLOR_CLEAR_VALUE 0 x0C22 # define GL_COLOR_WRITEMASK 0 x0C23 # define GL_UNPACK_ALIGNMENT 0 x0CF5 # define GL_PACK_ALIGNMENT 0 x0D05 # define GL_MAX_TEXTURE_SIZE 0 x0D33 # define GL_MAX_VIEWPORT_DIMS 0 x0D3A # define GL_SUBPIXEL_BITS 0 x0D50 # define GL_RED_BITS 0 x0D52 # define GL_GREEN_BITS 0 x0D53 # define GL_BLUE_BITS 0 x0D54 # define GL_ALPHA_BITS 0 x0D55 # define GL_DEPTH_BITS 0 x0D56 # define GL_STENCIL_BITS 0 x0D57 # define GL_POLYGON_OFFSET_UNITS 0 x2A00 # define GL_POLYGON_OFFSET_FACTOR 0 x8038 # define GL_TEXTURE_BINDING_2D 0 x8069 # define GL_SAMPLE_BUFFERS 0 x80A8 # define GL_SAMPLES 0 x80A9 # define GL_SAMPLE_COVERAGE_VALUE 0 x80AA # define GL_SAMPLE_COVERAGE_INVERT 0 x80AB # define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0 x86A2 # define GL_COMPRESSED_TEXTURE_FORMATS 0 x86A3 # define GL_DONT_CARE 0 x1100 # define GL_FASTEST 0 x1101 # define GL_NICEST 0 x1102 # define GL_GENERATE_MIPMAP_HINT 0 x8192 # define GL_BYTE 0 x1400 # define GL_UNSIGNED_BYTE 0 x1401 # define GL_SHORT 0 x1402 # define GL_UNSIGNED_SHORT 0 x1403 # define GL_INT 0 x1404 # define GL_UNSIGNED_INT 0 x1405 # define GL_FLOAT 0 x1406 # define GL_FIXED 0 x140C # define GL_DEPTH_COMPONENT 0 x1902 # define GL_ALPHA 0 x1906 # define GL_RGB 0 x1907 # define GL_RGBA 0 x1908 # define GL_LUMINANCE 0 x1909 # define GL_LUMINANCE_ALPHA 0 x190A # define GL_UNSIGNED_SHORT_4_4_4_4 0 x8033 # define GL_UNSIGNED_SHORT_5_5_5_1 0 x8034 # define GL_UNSIGNED_SHORT_5_6_5 0 x8363 # define GL_FRAGMENT_SHADER 0 x8B30 # define GL_VERTEX_SHADER 0 x8B31 # define GL_MAX_VERTEX_ATTRIBS 0 x8869 # define GL_MAX_VERTEX_UNIFORM_VECTORS 0 x8DFB # define GL_MAX_VARYING_VECTORS 0 x8DFC # define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0 x8B4D # define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0 x8B4C # define GL_MAX_TEXTURE_IMAGE_UNITS 0 x8872 # define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0 x8DFD # define GL_SHADER_TYPE 0 x8B4F # define GL_DELETE_STATUS 0 x8B80 # define GL_LINK_STATUS 0 x8B82 # define GL_VALIDATE_STATUS 0 x8B83 # define GL_ATTACHED_SHADERS 0 x8B85 # define GL_ACTIVE_UNIFORMS 0 x8B86 # define GL_ACTIVE_UNIFORM_MAX_LENGTH 0 x8B87 # define GL_ACTIVE_ATTRIBUTES 0 x8B89 # define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0 x8B8A # define GL_SHADING_LANGUAGE_VERSION 0 x8B8C # define GL_CURRENT_PROGRAM 0 x8B8D # define GL_NEVER 0 x0200 # define GL_LESS 0 x0201 # define GL_EQUAL 0 x0202 # define GL_LEQUAL 0 x0203 # define GL_GREATER 0 x0204 # define GL_NOTEQUAL 0 x0205 # define GL_GEQUAL 0 x0206 # define GL_ALWAYS 0 x0207 # define GL_KEEP 0 x1E00 # define GL_REPLACE 0 x1E01 # define GL_INCR 0 x1E02 # define GL_DECR 0 x1E03 # define GL_INVERT 0 x150A # define GL_INCR_WRAP 0 x8507 # define GL_DECR_WRAP 0 x8508 # define GL_VENDOR 0 x1F00 # define GL_RENDERER 0 x1F01 # define GL_VERSION 0 x1F02 # define GL_EXTENSIONS 0 x1F03 # define GL_NEAREST 0 x2600 # define GL_LINEAR 0 x2601 # define GL_NEAREST_MIPMAP_NEAREST 0 x2700 # define GL_LINEAR_MIPMAP_NEAREST 0 x2701 # define GL_NEAREST_MIPMAP_LINEAR 0 x2702 # define GL_LINEAR_MIPMAP_LINEAR 0 x2703 # define GL_TEXTURE_MAG_FILTER 0 x2800 # define GL_TEXTURE_MIN_FILTER 0 x2801 # define GL_TEXTURE_WRAP_S 0 x2802 # define GL_TEXTURE_WRAP_T 0 x2803 # define GL_TEXTURE 0 x1702 # define GL_TEXTURE_CUBE_MAP 0 x8513 # define GL_TEXTURE_BINDING_CUBE_MAP 0 x8514 # define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0 x8515 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0 x8516 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0 x8517 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0 x8518 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0 x8519 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0 x851A # define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0 x851C # define GL_TEXTURE0 0 x84C0 # define GL_TEXTURE1 0 x84C1 # define GL_TEXTURE2 0 x84C2 # define GL_TEXTURE3 0 x84C3 # define GL_TEXTURE4 0 x84C4 # define GL_TEXTURE5 0 x84C5 # define GL_TEXTURE6 0 x84C6 # define GL_TEXTURE7 0 x84C7 # define GL_TEXTURE8 0 x84C8 # define GL_TEXTURE9 0 x84C9 # define GL_TEXTURE10 0 x84CA # define GL_TEXTURE11 0 x84CB # define GL_TEXTURE12 0 x84CC # define GL_TEXTURE13 0 x84CD # define GL_TEXTURE14 0 x84CE # define GL_TEXTURE15 0 x84CF # define GL_TEXTURE16 0 x84D0 # define GL_TEXTURE17 0 x84D1 # define GL_TEXTURE18 0 x84D2 # define GL_TEXTURE19 0 x84D3 # define GL_TEXTURE20 0 x84D4 # define GL_TEXTURE21 0 x84D5 # define GL_TEXTURE22 0 x84D6 # define GL_TEXTURE23 0 x84D7 # define GL_TEXTURE24 0 x84D8 # define GL_TEXTURE25 0 x84D9 # define GL_TEXTURE26 0 x84DA # define GL_TEXTURE27 0 x84DB # define GL_TEXTURE28 0 x84DC # define GL_TEXTURE29 0 x84DD # define GL_TEXTURE30 0 x84DE # define GL_TEXTURE31 0 x84DF # define GL_ACTIVE_TEXTURE 0 x84E0 # define GL_REPEAT 0 x2901 # define GL_CLAMP_TO_EDGE 0 x812F # define GL_MIRRORED_REPEAT 0 x8370 # define GL_FLOAT_VEC2 0 x8B50 # define GL_FLOAT_VEC3 0 x8B51 # define GL_FLOAT_VEC4 0 x8B52 # define GL_INT_VEC2 0 x8B53 # define GL_INT_VEC3 0 x8B54 # define GL_INT_VEC4 0 x8B55 # define GL_BOOL 0 x8B56 # define GL_BOOL_VEC2 0 x8B57 # define GL_BOOL_VEC3 0 x8B58 # define GL_BOOL_VEC4 0 x8B59 # define GL_FLOAT_MAT2 0 x8B5A # define GL_FLOAT_MAT3 0 x8B5B # define GL_FLOAT_MAT4 0 x8B5C # define GL_SAMPLER_2D 0 x8B5E # define GL_SAMPLER_CUBE 0 x8B60 # define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0 x8622 # define GL_VERTEX_ATTRIB_ARRAY_SIZE 0 x8623 # define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0 x8624 # define GL_VERTEX_ATTRIB_ARRAY_TYPE 0 x8625 # define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0 x886A # define GL_VERTEX_ATTRIB_ARRAY_POINTER 0 x8645 # define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0 x889F # define GL_IMPLEMENTATION_COLOR_READ_TYPE 0 x8B9A # define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0 x8B9B # define GL_COMPILE_STATUS 0 x8B81 # define GL_INFO_LOG_LENGTH 0 x8B84 # define GL_SHADER_SOURCE_LENGTH 0 x8B88 # define GL_SHADER_COMPILER 0 x8DFA # define GL_SHADER_BINARY_FORMATS 0 x8DF8 # define GL_NUM_SHADER_BINARY_FORMATS 0 x8DF9 # define GL_LOW_FLOAT 0 x8DF0 # define GL_MEDIUM_FLOAT 0 x8DF1 # define GL_HIGH_FLOAT 0 x8DF2 # define GL_LOW_INT 0 x8DF3 # define GL_MEDIUM_INT 0 x8DF4 # define GL_HIGH_INT 0 x8DF5 # define GL_FRAMEBUFFER 0 x8D40 # define GL_RENDERBUFFER 0 x8D41 # define GL_RGBA4 0 x8056 # define GL_RGB5_A1 0 x8057 # define GL_RGB565 0 x8D62 # define GL_DEPTH_COMPONENT16 0 x81A5 # define GL_STENCIL_INDEX8 0 x8D48 # define GL_RENDERBUFFER_WIDTH 0 x8D42 # define GL_RENDERBUFFER_HEIGHT 0 x8D43 # define GL_RENDERBUFFER_INTERNAL_FORMAT 0 x8D44 # define GL_RENDERBUFFER_RED_SIZE 0 x8D50 # define GL_RENDERBUFFER_GREEN_SIZE 0 x8D51 # define GL_RENDERBUFFER_BLUE_SIZE 0 x8D52 # define GL_RENDERBUFFER_ALPHA_SIZE 0 x8D53 # define GL_RENDERBUFFER_DEPTH_SIZE 0 x8D54 # define GL_RENDERBUFFER_STENCIL_SIZE 0 x8D55 # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0 x8CD0 # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0 x8CD1 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0 x8CD2 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0 x8CD3 # define GL_COLOR_ATTACHMENT0 0 x8CE0 # define GL_DEPTH_ATTACHMENT 0 x8D00 # define GL_STENCIL_ATTACHMENT 0 x8D20 # define GL_NONE 0 # define GL_FRAMEBUFFER_COMPLETE 0 x8CD5 # define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0 x8CD6 # define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0 x8CD7 # define GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS 0 x8CD9 # define GL_FRAMEBUFFER_UNSUPPORTED 0 x8CDD # define GL_FRAMEBUFFER_BINDING 0 x8CA6 # define GL_RENDERBUFFER_BINDING 0 x8CA7 # define GL_MAX_RENDERBUFFER_SIZE 0 x84E8 # define GL_INVALID_FRAMEBUFFER_OPERATION 0 x0506 typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLEARPROC) (GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(GL_APIENTRYP PFNGLCREATEPROGRAMPROC) (void)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(GL_APIENTRYP PFNGLCREATESHADERPROC) (GLenum type)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLCULLFACEPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDISABLEPROC) (GLenum cap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENABLEPROC) (GLenum cap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFINISHPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFLUSHPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(GL_APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(GL_APIENTRYP PFNGLGETERRORPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "GLubyte()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "GLubyte(GL_APIENTRYP PFNGLGETSTRINGPROC) (GLenum name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(GL_APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISENABLEDPROC) (GLenum cap)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISSHADERPROC) (GLuint shader)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(GL_APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(GL_APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (# if GL_GLES_PROTOTYPES GL_APICALL void GL_APIENTRY)",
    "insertText": "glActiveTexture(GLenum texture)"
  },
  {
    "label": "glAttachShader()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glAttachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glBindAttribLocation()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindBuffer(GLenum target, GLuint buffer)"
  },
  {
    "label": "glBindFramebuffer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindFramebuffer(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glBindRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindRenderbuffer(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glBindTexture()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBindTexture(GLenum target, GLuint texture)"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendEquation(GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunc()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendFunc(GLenum sfactor, GLenum dfactor)"
  },
  {
    "label": "glBlendFuncSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glCheckFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glCheckFramebufferStatus(GLenum target)"
  },
  {
    "label": "glClear()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glClear(GLbitfield mask)"
  },
  {
    "label": "glClearColor()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glClearDepthf()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glClearDepthf(GLfloat d)"
  },
  {
    "label": "glClearStencil()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glClearStencil(GLint s)"
  },
  {
    "label": "glColorMask()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "glCompileShader()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCompileShader(GLuint shader)"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCopyTexImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLuint GL_APIENTRY)",
    "insertText": "glCreateProgram(void)"
  },
  {
    "label": "glCreateShader()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLuint GL_APIENTRY)",
    "insertText": "glCreateShader(GLenum type)"
  },
  {
    "label": "glCullFace()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glCullFace(GLenum mode)"
  },
  {
    "label": "glDeleteBuffers()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteBuffers(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glDeleteFramebuffers()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glDeleteProgram()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteProgram(GLuint program)"
  },
  {
    "label": "glDeleteRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glDeleteShader()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteShader(GLuint shader)"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDeleteTextures(GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glDepthFunc()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDepthFunc(GLenum func)"
  },
  {
    "label": "glDepthMask()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDepthMask(GLboolean flag)"
  },
  {
    "label": "glDepthRangef()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDepthRangef(GLfloat n, GLfloat f)"
  },
  {
    "label": "glDetachShader()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDetachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDisable(GLenum cap)"
  },
  {
    "label": "glDisableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDisableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glDrawArrays()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawArrays(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glDrawElements()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glEnable()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEnable(GLenum cap)"
  },
  {
    "label": "glEnableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glEnableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glFinish()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFinish(void)"
  },
  {
    "label": "glFlush()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFlush(void)"
  },
  {
    "label": "glFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFrontFace()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glFrontFace(GLenum mode)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenerateMipmap(GLenum target)"
  },
  {
    "label": "glGenFramebuffers()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glGenRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGenTextures(GLsizei n, GLuint *textures)"
  },
  {
    "label": "glGetActiveAttrib()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetActiveUniform()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetAttachedShaders()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "glGetAttribLocation()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLint GL_APIENTRY)",
    "insertText": "glGetAttribLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetBooleanv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetBooleanv(GLenum pname, GLboolean *data)"
  },
  {
    "label": "glGetBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetError()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLenum GL_APIENTRY)",
    "insertText": "glGetError(void)"
  },
  {
    "label": "glGetFloatv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFloatv(GLenum pname, GLfloat *data)"
  },
  {
    "label": "glGetFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetIntegerv(GLenum pname, GLint *data)"
  },
  {
    "label": "glGetProgramiv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetProgramiv(GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramInfoLog()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderiv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetShaderiv(GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderInfoLog()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderPrecisionFormat()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "glGetShaderSource()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "glGetString()",
    "kind": "Method",
    "detail": "Function (GL_APICALL const GLubyte* GL_APIENTRY)",
    "insertText": "glGetString(GLenum name)"
  },
  {
    "label": "glGetTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetUniformfv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetUniformfv(GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformiv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetUniformiv(GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "glGetUniformLocation()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLint GL_APIENTRY)",
    "insertText": "glGetUniformLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetVertexAttribfv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribiv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointerv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glHint()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glHint(GLenum target, GLenum mode)"
  },
  {
    "label": "glIsBuffer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsBuffer(GLuint buffer)"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsEnabled(GLenum cap)"
  },
  {
    "label": "glIsFramebuffer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsFramebuffer(GLuint framebuffer)"
  },
  {
    "label": "glIsProgram()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsProgram(GLuint program)"
  },
  {
    "label": "glIsRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsRenderbuffer(GLuint renderbuffer)"
  },
  {
    "label": "glIsShader()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsShader(GLuint shader)"
  },
  {
    "label": "glIsTexture()",
    "kind": "Method",
    "detail": "Function (GL_APICALL GLboolean GL_APIENTRY)",
    "insertText": "glIsTexture(GLuint texture)"
  },
  {
    "label": "glLineWidth()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glLineWidth(GLfloat width)"
  },
  {
    "label": "glLinkProgram()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glLinkProgram(GLuint program)"
  },
  {
    "label": "glPixelStorei()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPixelStorei(GLenum pname, GLint param)"
  },
  {
    "label": "glPolygonOffset()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glPolygonOffset(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glReadPixels()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glReleaseShaderCompiler()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glReleaseShaderCompiler(void)"
  },
  {
    "label": "glRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glSampleCoverage(GLfloat value, GLboolean invert)"
  },
  {
    "label": "glScissor()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glScissor(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glShaderBinary()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "glShaderSource()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "glStencilFunc()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilFunc(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilFuncSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilMask()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilMask(GLuint mask)"
  },
  {
    "label": "glStencilMaskSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilMaskSeparate(GLenum face, GLuint mask)"
  },
  {
    "label": "glStencilOp()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)"
  },
  {
    "label": "glStencilOpSeparate()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glTexImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexParameterf()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameterf(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glUniform1f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1f(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform1fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1i(GLint location, GLint v0)"
  },
  {
    "label": "glUniform1iv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform1iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2f(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform2fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2i()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2i(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform2iv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform2iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform3fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3i()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform3iv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform3iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4i()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniform4iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUseProgram()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glUseProgram(GLuint program)"
  },
  {
    "label": "glValidateProgram()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glValidateProgram(GLuint program)"
  },
  {
    "label": "glVertexAttrib1f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib1f(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib1fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib2fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib3fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4f()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fv()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttrib4fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glViewport()",
    "kind": "Method",
    "detail": "Function (GL_APICALL void GL_APIENTRY)",
    "insertText": "glViewport(GLint x, GLint y, GLsizei width, GLsizei height)"
  }
]