[
  {
    "label": "column_bmod()",
    "kind": "Method",
    "detail": "Function (# ifndef SPARSELU_COLUMN_BMOD_H # define SPARSELU_COLUMN_BMOD_H namespace Eigen { namespace internal { template<Scalar,StorageIndex> Index SparseLUImpl<Scalar,StorageIndex)",
    "insertText": "column_bmod(const Index jcol, const Index nseg, BlockScalarVector dense, ScalarVector& tempv, BlockIndexVector segrep, BlockIndexVector repfnz, Index fpanelc, GlobalLU_t& glu)"
  },
  {
    "label": "supno()",
    "kind": "Method",
    "detail": "Function (Index jsupno,k,ksub,krep,ksupno ; Index lptr,nrow,isub,irow,nextlu,new_next,ufirst ; Index fsupc,nsupc,nsupr,luptr,kfnz,no_zeros ; jsupno = glu .)",
    "insertText": "supno(jcol)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (k = nseg - 1 ; Index d_fsupc ; Index fst_col ; Index segsize ;)",
    "insertText": "for(ksub = 0; ksub < nseg; ksub++)"
  },
  {
    "label": "segrep()",
    "kind": "Method",
    "detail": "Function (krep =)",
    "insertText": "segrep(k)"
  },
  {
    "label": "supno()",
    "kind": "Method",
    "detail": "Function (k - - ; ksupno = glu .)",
    "insertText": "supno(krep)"
  },
  {
    "label": "xsup()",
    "kind": "Method",
    "detail": "Function (fsupc = glu .)",
    "insertText": "xsup(ksupno)"
  },
  {
    "label": "fst_col()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fst_col(std::max)(fsupc, fpanelc)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (d_fsupc = fst_col - fsupc ; luptr = glu .)",
    "insertText": "xlusup(fst_col)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (lptr = glu .)",
    "insertText": "xlsub(fsupc)"
  },
  {
    "label": "repfnz()",
    "kind": "Method",
    "detail": "Function (kfnz =)",
    "insertText": "repfnz(krep)"
  },
  {
    "label": "kfnz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "kfnz(std::max)(kfnz, fpanelc)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (segsize = krep - kfnz + 1 ; nsupc = krep - fst_col + 1 ; nsupr = glu .)",
    "insertText": "xlsub(fsupc+1) - glu.xlsub(fsupc)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (nrow = nsupr - d_fsupc - nsupc ; Index lda = glu .)",
    "insertText": "xlusup(fst_col+1) - glu.xlusup(fst_col)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (no_zeros = kfnz - fst_col ;)",
    "insertText": "if(segsize==1) LU_kernel_bmod<1>::run(segsize, dense, tempv, glu.lusup, luptr, lda, nrow, glu.lsub, lptr, no_zeros)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (} } nextlu = glu .)",
    "insertText": "xlusup(jcol)"
  },
  {
    "label": "xsup()",
    "kind": "Method",
    "detail": "Function (fsupc = glu .)",
    "insertText": "xsup(jsupno)"
  },
  {
    "label": "xlsub()",
    "kind": "Method",
    "detail": "Function (Index mem ; new_next = nextlu + glu .)",
    "insertText": "xlsub(fsupc + 1) - glu.xlsub(fsupc)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index offset = internal::first_multiple<)",
    "insertText": "Index(new_next, internal::packet_traits<Scalar>::size)"
  },
  {
    "label": "ScalarVector()",
    "kind": "Method",
    "detail": "Function (mem = memXpand<)",
    "insertText": "ScalarVector(glu.lusup, glu.nzlumax, nextlu, LUSUP, glu.num_expansions)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(isub = glu.xlsub(fsupc); isub < glu.xlsub(fsupc+1); isub++)"
  },
  {
    "label": "lsub()",
    "kind": "Method",
    "detail": "Function (irow = glu .)",
    "insertText": "lsub(isub)"
  },
  {
    "label": "lusup()",
    "kind": "Method",
    "detail": "Function (glu .)",
    "insertText": "lusup(nextlu) = dense(irow)"
  },
  {
    "label": "dense()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dense(irow) = Scalar(0.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + nextlu ; })",
    "insertText": "if(offset)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (glu . lusup .)",
    "insertText": "segment(nextlu,offset).setZero()"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (nextlu + = offset ; } glu .)",
    "insertText": "xlusup(jcol + 1) = StorageIndex(nextlu)"
  },
  {
    "label": "xlusup()",
    "kind": "Method",
    "detail": "Function (Index lda = glu .)",
    "insertText": "xlusup(jcol+1) - glu.xlusup(jcol)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (MappedMatrixBlock)",
    "insertText": "A(&(glu.lusup.data()[luptr]), nsupc, nsupc, OuterStride<>(lda))"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (VectorBlock<ScalarVector>)",
    "insertText": "u(glu.lusup, ufirst, nsupc)"
  },
  {
    "label": "UnitLower()",
    "kind": "Method",
    "detail": "Function (u = A . template triangularView<)",
    "insertText": "UnitLower().solve(u)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&A) MappedMatrixBlock ( &(glu.lusup.data()[luptr+nsupc]), nrow, nsupc, OuterStride<>(lda))"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (VectorBlock<ScalarVector>)",
    "insertText": "l(glu.lusup, ufirst+nsupc, nrow)"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (l .)",
    "insertText": "noalias()"
  }
]