[
  {
    "label": "AWorldSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AWorldSettings"
  },
  {
    "label": "FMaterialParameterCollectionInstanceResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialParameterCollectionInstanceResource"
  },
  {
    "label": "FPrecomputedLightVolume",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedLightVolume"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "UDecalComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDecalComponent"
  },
  {
    "label": "UExponentialHeightFogComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExponentialHeightFogComponent"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UPlanarReflectionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPlanarReflectionComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "UReflectionCaptureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReflectionCaptureComponent"
  },
  {
    "label": "USkyLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyLightComponent"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UTextureCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureCube"
  },
  {
    "label": "UWindDirectionalSourceComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWindDirectionalSourceComponent"
  },
  {
    "label": "FRHIGPUBufferReadback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGPUBufferReadback"
  },
  {
    "label": "FRHIGPUTextureReadback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGPUTextureReadback"
  },
  {
    "label": "FRuntimeVirtualTextureSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRuntimeVirtualTextureSceneProxy"
  },
  {
    "label": "FLumenSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenSceneData"
  },
  {
    "label": "FVirtualShadowMapArrayCacheManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVirtualShadowMapArrayCacheManager"
  },
  {
    "label": "FDistanceFieldObjectBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldObjectBuffers"
  },
  {
    "label": "FHairStrandsInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsInstance"
  },
  {
    "label": "FPathTracingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathTracingState"
  },
  {
    "label": "FSparseVolumeTextureViewerSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSparseVolumeTextureViewerSceneProxy"
  },
  {
    "label": "FExponentialHeightFogSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExponentialHeightFogSceneInfo"
  },
  {
    "label": "FStaticMeshBatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticMeshBatch"
  },
  {
    "label": "FShadowScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowScene"
  },
  {
    "label": "FSceneCulling",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneCulling"
  },
  {
    "label": "FPrimitiveOcclusionHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveOcclusionHistory"
  },
  {
    "label": "FPrimitiveOcclusionHistoryKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveOcclusionHistoryKey"
  },
  {
    "label": "FPrimitiveOcclusionHistoryKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveOcclusionHistoryKeyFuncs"
  },
  {
    "label": "FIndividualOcclusionHistory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndividualOcclusionHistory"
  },
  {
    "label": "FGlobalDistanceCullFadeUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDistanceCullFadeUniformBuffer"
  },
  {
    "label": "FGlobalDitherUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDitherUniformBuffer"
  },
  {
    "label": "FPrimitiveFadingState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveFadingState"
  },
  {
    "label": "FGlobalDistanceFieldCacheTypeState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDistanceFieldCacheTypeState"
  },
  {
    "label": "FGlobalDistanceFieldClipmapState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDistanceFieldClipmapState"
  },
  {
    "label": "FDistanceFieldSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldSceneData"
  },
  {
    "label": "FOcclusionRandomStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOcclusionRandomStream"
  },
  {
    "label": "FHLODVisibilityState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHLODVisibilityState"
  },
  {
    "label": "FHLODSceneNodeVisibilityState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHLODSceneNodeVisibilityState"
  },
  {
    "label": "FShaderPrintStateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPrintStateData"
  },
  {
    "label": "FPersistentSkyAtmosphereData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentSkyAtmosphereData"
  },
  {
    "label": "FGlobalDistanceFieldStreamingReadback",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalDistanceFieldStreamingReadback"
  },
  {
    "label": "FPersistentGlobalDistanceFieldData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPersistentGlobalDistanceFieldData"
  },
  {
    "label": "FOcclusionFeedback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOcclusionFeedback"
  },
  {
    "label": "FOcclusionBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionBatch"
  },
  {
    "label": "FOcclusionBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusionBuffer"
  },
  {
    "label": "FSceneViewState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewState"
  },
  {
    "label": "FProjectedShadowKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowKey"
  },
  {
    "label": "FEyeAdaptationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEyeAdaptationManager"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FOcclusion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOcclusion"
  },
  {
    "label": "FReflectionEnvironmentCubemapArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionEnvironmentCubemapArray"
  },
  {
    "label": "FCaptureComponentSceneState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCaptureComponentSceneState"
  },
  {
    "label": "FReflectionCaptureSortData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReflectionCaptureSortData"
  },
  {
    "label": "FReflectionCaptureCacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReflectionCaptureCacheEntry"
  },
  {
    "label": "FReflectionCaptureCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReflectionCaptureCache"
  },
  {
    "label": "FReflectionEnvironmentSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionEnvironmentSceneData"
  },
  {
    "label": "FHairStrandsSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHairStrandsSceneData"
  },
  {
    "label": "FVolumetricLightmapInterpolation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapInterpolation"
  },
  {
    "label": "FVolumetricLightmapSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapSceneData"
  },
  {
    "label": "FPrecomputedVolumetricLightmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmap"
  },
  {
    "label": "FPrimitiveAndInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveAndInstance"
  },
  {
    "label": "FPrimitiveRemoveInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveRemoveInfo"
  },
  {
    "label": "FHeightFieldPrimitiveRemoveInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeightFieldPrimitiveRemoveInfo"
  },
  {
    "label": "FDistanceFieldAssetMipId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldAssetMipId"
  },
  {
    "label": "FDistanceFieldAssetMipRelocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldAssetMipRelocation"
  },
  {
    "label": "FDistanceFieldAssetMipState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldAssetMipState"
  },
  {
    "label": "FDistanceFieldAssetState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldAssetState"
  },
  {
    "label": "TFDistanceFieldAssetStateFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFDistanceFieldAssetStateFuncs"
  },
  {
    "label": "FDistanceFieldBlockAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldBlockAllocator"
  },
  {
    "label": "FDistanceFieldReadRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDistanceFieldReadRequest"
  },
  {
    "label": "FDistanceFieldAsyncUpdateParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDistanceFieldAsyncUpdateParameters"
  },
  {
    "label": "FDistanceFieldStreamingUpdateTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldStreamingUpdateTask"
  },
  {
    "label": "FIndirectLightingCacheBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLightingCacheBlock"
  },
  {
    "label": "FBlockUpdateInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlockUpdateInfo"
  },
  {
    "label": "FAttachmentGroupSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAttachmentGroupSceneInfo"
  },
  {
    "label": "FILCUpdatePrimTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FILCUpdatePrimTaskData"
  },
  {
    "label": "FIndirectLightingCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIndirectLightingCache"
  },
  {
    "label": "FUpdateCachePrimitivesTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUpdateCachePrimitivesTask"
  },
  {
    "label": "FPrimitiveBounds",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveBounds"
  },
  {
    "label": "FPrimitiveVisibilityId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveVisibilityId"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FComponentVelocityData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComponentVelocityData"
  },
  {
    "label": "FSceneVelocityData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneVelocityData"
  },
  {
    "label": "FLODSceneTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLODSceneTree"
  },
  {
    "label": "FLODSceneNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODSceneNode"
  },
  {
    "label": "FCachedShadowMapData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCachedShadowMapData"
  },
  {
    "label": "FPixelInspectorData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPixelInspectorData"
  },
  {
    "label": "FPersistentUniformBuffers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPersistentUniformBuffers"
  },
  {
    "label": "FMeshComputeDispatchCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshComputeDispatchCommand"
  },
  {
    "label": "FRayTracingDynamicGeometryConverterCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingDynamicGeometryConverterCS"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLumenSceneDataKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLumenSceneDataKey"
  },
  {
    "label": "FLumenSceneDataIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenSceneDataIterator"
  },
  {
    "label": "FUpdateLightTransformParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLightTransformParameters"
  },
  {
    "label": "FUpdateLightColorParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateLightColorParameters"
  },
  {
    "label": "FLightSceneChangeSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLightSceneChangeSet"
  },
  {
    "label": "FFXSystemInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFXSystemInterface"
  },
  {
    "label": "FPrimitiveUpdateParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveUpdateParams"
  },
  {
    "label": "FRayTracingCullingGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingCullingGroup"
  },
  {
    "label": "FPrimitiveSceneProxyType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveSceneProxyType"
  },
  {
    "label": "FTypeOffsetTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypeOffsetTableEntry"
  },
  {
    "label": "FRealTimeSlicedReflectionCapture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRealTimeSlicedReflectionCapture"
  },
  {
    "label": "FPlanarReflectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionSceneProxy"
  },
  {
    "label": "FPhysicsFieldSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsFieldSceneProxy"
  },
  {
    "label": "FWindSourceSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindSourceSceneProxy"
  },
  {
    "label": "FSpeedTreeWindComputation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSpeedTreeWindComputation"
  },
  {
    "label": "FGPUSkinCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUSkinCache"
  },
  {
    "label": "IComputeTaskWorker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IComputeTaskWorker"
  },
  {
    "label": "FRayTracingDynamicGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingDynamicGeometryCollection"
  },
  {
    "label": "FRayTracingSkinnedGeometryUpdateQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingSkinnedGeometryUpdateQueue"
  },
  {
    "label": "FUpdateParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateParameters"
  },
  {
    "label": "FReflectionCaptureData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReflectionCaptureData"
  },
  {
    "label": "USceneCaptureComponent2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneCaptureComponent2D"
  },
  {
    "label": "USceneCaptureComponentCube",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneCaptureComponentCube"
  },
  {
    "label": "URuntimeVirtualTextureComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URuntimeVirtualTextureComponent"
  },
  {
    "label": "FLocalFogVolumeSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLocalFogVolumeSceneProxy"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FInstanceCullingOcclusionQueryRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingOcclusionQueryRenderer"
  },
  {
    "label": "FSceneComputeUpdates",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneComputeUpdates"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FLevelCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLevelCommand"
  },
  {
    "label": "OCCLUSION_SLOP()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Guid . h \" # include \" Math / RandomStream . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / RefCounting . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" UniformBuffer . h \" # include \" SceneInterface . h \" # include \" SceneView . h \" # include \" RendererInterface . h \" # include \" SceneUtils . h \" # include \" Materials / MaterialInstanceDynamic . h \" # include \" TextureLayout3d . h \" # include \" ScenePrivateBase . h \" # include \" RenderTargetPool . h \" # include \" PrimitiveSceneInfo . h \" # include \" LightSceneInfo . h \" # include \" DepthRendering . h \" # include \" SceneHitProxyRendering . h \" # include \" TextureLayout . h \" # include \" SceneRendering . h \" # include \" LightMapRendering . h \" # include \" VelocityRendering . h \" # include \" VolumeRendering . h \" # include \" CommonRenderResources . h \" # include \" VisualizeTexture . h \" # include \" UnifiedBuffer . h \" # include \" DebugViewModeRendering . h \" # include \" PrecomputedVolumetricLightmap . h \" # include \" RayTracing / RaytracingOptions . h \" # if RHI_RAYTRACING # include \" RayTracing / RayTracingScene . h \" # include \" RayTracing / RayTracingShaderBindingTable . h \" # endif # include \" Nanite / Nanite . h \" # include \" LightGrid . h \" # include \" Lumen / LumenViewState . h \" # include \" MegaLights / MegaLightsViewState . h \" # include \" StochasticLighting / StochasticLightingViewState . h \" # include \" VolumetricRenderTargetViewStateData . h \" # include \" GPUScene . h \" # include \" DynamicBVH . h \" # include \" OIT / OIT . h \" # include \" ShadingEnergyConservation . h \" # include \" Substrate / Glint / GlintShadingLUTs . h \" # include \" Experimental / Containers / RobinHoodHashTable . h \" # include \" SpanAllocator . h \" # include \" GlobalDistanceField . h \" # include \" Algo / RemoveIf . h \" # include \" UObject / Package . h \" # include \" LightFunctionAtlas . h \" # include \" SceneExtensions . h \" # include \" HeterogeneousVolumes / HeterogeneousVolumes . h \" # include \" ScenePrimitiveUpdates . h \" # define)",
    "insertText": "OCCLUSION_SLOP(1.0f) DECLARE_GPU_STAT_NAMED_EXTERN(ShadowProjection, TEXT(\"Shadow Projection\"))"
  },
  {
    "label": "ScanOldestNonStaleQueryIndex()",
    "kind": "Method",
    "detail": "Function (class AWorldSettings ; class FMaterialParameterCollectionInstanceResource ; class FPrecomputedLightVolume ; class FScene ; class UDecalComponent ; class UExponentialHeightFogComponent ; class ULightComponent ; class UPlanarReflectionComponent ; class UPrimitiveComponent ; class UInstancedStaticMeshComponent ; class UReflectionCaptureComponent ; class USkyLightComponent ; class UStaticMesh ; class UStaticMeshComponent ; class UTextureCube ; class UWindDirectionalSourceComponent ; class FRHIGPUBufferReadback ; class FRHIGPUTextureReadback ; class FRuntimeVirtualTextureSceneProxy ; class FLumenSceneData ; class FVirtualShadowMapArrayCacheManager ; class FDistanceFieldObjectBuffers ; struct FHairStrandsInstance ; struct FPathTracingState ; class FSparseVolumeTextureViewerSceneProxy ; class FExponentialHeightFogSceneInfo ; class FStaticMeshBatch ; class FShadowScene ; class FSceneCulling ; class FPrimitiveOcclusionHistory { public : FPrimitiveComponentId PrimitiveId ; FRHIRenderQuery* PendingOcclusionQuery [ FOcclusionQueryHelpers::MaxBufferedOcclusionFrames ] ; uint32 PendingOcclusionQueryFrames [ FOcclusionQueryHelpers::MaxBufferedOcclusionFrames ] ; uint32 LastTestFrameNumber ; uint32 LastConsideredFrameNumber ; uint32 HZBTestIndex ; float LastProvenVisibleTime ; float LastConsideredTime ; float LastPixelsPercentage ; int32 CustomIndex ; uint8 BecameEligibleForQueryCooldown : 6 ; uint8 WasOccludedLastFrame : 1 ; uint8 OcclusionStateWasDefiniteLastFrame : 1 ; bool bGroupedQuery [ FOcclusionQueryHelpers::MaxBufferedOcclusionFrames ] ; private : bool bNeedsScanOnRead ; int32)",
    "insertText": "ScanOldestNonStaleQueryIndex(uint32 FrameNumber, int32 NumBufferedFrames, int32 LagTolerance)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 OldestFrame = UINT32_MAX ; int32 OldestQueryIndex = - 1 ;)",
    "insertText": "for(int Index = 0; Index < NumBufferedFrames; ++Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 ThisFrameNumber = PendingOcclusionQueryFrames [ Index ] ; const int32 LaggedFrames = FrameNumber - ThisFrameNumber ;)",
    "insertText": "if(PendingOcclusionQuery[Index] && LaggedFrames <= LagTolerance && ThisFrameNumber < OldestFrame)"
  },
  {
    "label": "FPrimitiveOcclusionHistory()",
    "kind": "Method",
    "detail": "Function (OldestFrame = ThisFrameNumber ; OldestQueryIndex = Index ; } } return OldestQueryIndex ; } public :)",
    "insertText": "FPrimitiveOcclusionHistory(FPrimitiveComponentId InPrimitiveId, int32 SubQuery) : PrimitiveId(InPrimitiveId) , LastTestFrameNumber(~0u) , LastConsideredFrameNumber(~0u) , HZBTestIndex(0) , LastProvenVisibleTime(0.0f) , LastConsideredTime(0.0f) , LastPixelsPercentage(0.0f) , CustomIndex(SubQuery) , BecameEligibleForQueryCooldown(0) , WasOccludedLastFrame(false) , OcclusionStateWasDefiniteLastFrame(false) , bNeedsScanOnRead(false)"
  },
  {
    "label": "FPrimitiveOcclusionHistory()",
    "kind": "Method",
    "detail": "Function (PendingOcclusionQuery [ Index ] = nullptr ; PendingOcclusionQueryFrames [ Index ] = 0 ; bGroupedQuery [ Index ] = false ; } })",
    "insertText": "FPrimitiveOcclusionHistory() : LastTestFrameNumber(~0u) , LastConsideredFrameNumber(~0u) , HZBTestIndex(0) , LastProvenVisibleTime(0.0f) , LastConsideredTime(0.0f) , LastPixelsPercentage(0.0f) , CustomIndex(0) , BecameEligibleForQueryCooldown(0) , WasOccludedLastFrame(false) , OcclusionStateWasDefiniteLastFrame(false) , bNeedsScanOnRead(false)"
  },
  {
    "label": "GetQueryForReading()",
    "kind": "Method",
    "detail": "Function (PendingOcclusionQuery [ Index ] = nullptr ; PendingOcclusionQueryFrames [ Index ] = 0 ; bGroupedQuery [ Index ] = false ; } } FRHIRenderQuery*)",
    "insertText": "GetQueryForReading(uint32 FrameNumber, int32 NumBufferedFrames, int32 LagTolerance, bool& bOutGrouped)"
  },
  {
    "label": "ScanOldestNonStaleQueryIndex()",
    "kind": "Method",
    "detail": "Function (const int32 OldestQueryIndex = bNeedsScanOnRead ?)",
    "insertText": "ScanOldestNonStaleQueryIndex(FrameNumber, NumBufferedFrames, LagTolerance) : FOcclusionQueryHelpers::GetQueryLookupIndex(FrameNumber, NumBufferedFrames)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 LaggedFrames = FrameNumber - PendingOcclusionQueryFrames [ OldestQueryIndex ] ;)",
    "insertText": "if(OldestQueryIndex == -1 || !PendingOcclusionQuery[OldestQueryIndex] || LaggedFrames > LagTolerance)"
  },
  {
    "label": "SetCurrentQuery()",
    "kind": "Method",
    "detail": "Function (bOutGrouped = false ; return nullptr ; } bOutGrouped = bGroupedQuery [ OldestQueryIndex ] ; return PendingOcclusionQuery [ OldestQueryIndex ] ; } void)",
    "insertText": "SetCurrentQuery(uint32 FrameNumber, FRHIRenderQuery* NewQuery, int32 NumBufferedFrames, bool bGrouped, bool bNeedsScan)"
  },
  {
    "label": "GetQueryIssueIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 QueryIndex =)",
    "insertText": "GetQueryIssueIndex(FrameNumber, NumBufferedFrames)"
  },
  {
    "label": "LastQuerySubmitFrame()",
    "kind": "Method",
    "detail": "Function (PendingOcclusionQuery [ QueryIndex ] = NewQuery ; PendingOcclusionQueryFrames [ QueryIndex ] = FrameNumber ; bGroupedQuery [ QueryIndex ] = bGrouped ; bNeedsScanOnRead = bNeedsScan ; } uint32)",
    "insertText": "LastQuerySubmitFrame()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Result = 0 ;)",
    "insertText": "for(int32 Index = 0; Index < FOcclusionQueryHelpers::MaxBufferedOcclusionFrames; Index++)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "Max(Result, PendingOcclusionQueryFrames[Index])"
  },
  {
    "label": "FPrimitiveOcclusionHistoryKey()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } } ; struct FPrimitiveOcclusionHistoryKey { FPrimitiveComponentId PrimitiveId ; int32 CustomIndex ;)",
    "insertText": "FPrimitiveOcclusionHistoryKey(const FPrimitiveOcclusionHistory& Element) : PrimitiveId(Element.PrimitiveId) , CustomIndex(Element.CustomIndex)"
  },
  {
    "label": "FPrimitiveOcclusionHistoryKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimitiveOcclusionHistoryKey(FPrimitiveComponentId InPrimitiveId, int32 InCustomIndex) : PrimitiveId(InPrimitiveId) , CustomIndex(InCustomIndex)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; uint32)",
    "insertText": "GetTypeHash(const FPrimitiveOcclusionHistoryKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPrimitiveOcclusionHistoryKey& A, const FPrimitiveOcclusionHistoryKey& B)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(KeyInitType A,KeyInitType B)"
  },
  {
    "label": "ReleaseStaleQueries()",
    "kind": "Method",
    "detail": "Function (} } ; class FIndividualOcclusionHistory { FRHIPooledRenderQuery PendingOcclusionQuery [ FOcclusionQueryHelpers::MaxBufferedOcclusionFrames ] ; uint32 PendingOcclusionQueryFrames [ FOcclusionQueryHelpers::MaxBufferedOcclusionFrames ] ; public : void)",
    "insertText": "ReleaseStaleQueries(uint32 FrameNumber, int32 NumBufferedFrames)"
  },
  {
    "label": "FrameNumber()",
    "kind": "Method",
    "detail": "Function (uint32 TestFrame =)",
    "insertText": "FrameNumber(DeltaFrame - 1)"
  },
  {
    "label": "GetQueryLookupIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 QueryIndex =)",
    "insertText": "GetQueryLookupIndex(TestFrame, NumBufferedFrames)"
  },
  {
    "label": "ReleaseQuery()",
    "kind": "Method",
    "detail": "Function (PendingOcclusionQuery [ QueryIndex ] .)",
    "insertText": "ReleaseQuery()"
  },
  {
    "label": "ReleaseQuery()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "ReleaseQuery(uint32 FrameNumber, int32 NumBufferedFrames)"
  },
  {
    "label": "GetQueryLookupIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 QueryIndex =)",
    "insertText": "GetQueryLookupIndex(FrameNumber, NumBufferedFrames)"
  },
  {
    "label": "GetPastQuery()",
    "kind": "Method",
    "detail": "Function (} FRHIRenderQuery*)",
    "insertText": "GetPastQuery(uint32 FrameNumber, int32 NumBufferedFrames)"
  },
  {
    "label": "SetCurrentQuery()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } void)",
    "insertText": "SetCurrentQuery(uint32 FrameNumber, FRHIPooledRenderQuery&& NewQuery, int32 NumBufferedFrames)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PendingOcclusionQuery [ QueryIndex ] =)",
    "insertText": "MoveTemp(NewQuery)"
  },
  {
    "label": "InitContents()",
    "kind": "Method",
    "detail": "Function (PendingOcclusionQueryFrames [ QueryIndex ] = FrameNumber ; } } ; class FGlobalDistanceCullFadeUniformBuffer : public TUniformBuffer<FDistanceCullFadeUniformShaderParameters> { public : void)",
    "insertText": "InitContents()"
  },
  {
    "label": "SetContents()",
    "kind": "Method",
    "detail": "Function (FDistanceCullFadeUniformShaderParameters Parameters ; Parameters . FadeTimeScaleBias . X = 0 . 0 f ; Parameters . FadeTimeScaleBias . Y = 1 . 0 f ;)",
    "insertText": "SetContents(FRenderResource::GetImmediateCommandList(), Parameters)"
  },
  {
    "label": "FPrimitiveFadingState()",
    "kind": "Method",
    "detail": "Function (} } ; TGlobalResource<FGlobalDitherUniformBuffer> GDitherFadedInUniformBuffer ; class FPrimitiveFadingState { public :)",
    "insertText": "FPrimitiveFadingState() : FadeTimeScaleBias(ForceInitToZero) , FrameNumber(0) , EndTime(0.0f) , bIsVisible(false) , bValid(false)"
  },
  {
    "label": "FGlobalDistanceFieldClipmapState()",
    "kind": "Method",
    "detail": "Function (} FVector2D FadeTimeScaleBias ; FDistanceCullFadeUniformBufferRef UniformBuffer ; uint32 FrameNumber ; float EndTime ; bool bIsVisible ; bool bValid ; } ; class FGlobalDistanceFieldCacheTypeState { public : TArray<FBox> PrimitiveModifiedBounds ; } ; class FGlobalDistanceFieldClipmapState { public :)",
    "insertText": "FGlobalDistanceFieldClipmapState()"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (FullUpdateOriginInPages = FInt64Vector::ZeroValue ; LastPartialUpdateOriginInPages = FInt64Vector::ZeroValue ; CachedClipmapCenter =)",
    "insertText": "FVector3f(0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "FOcclusionRandomStream()",
    "kind": "Method",
    "detail": "Function (CachedClipmapExtent = 0 . 0 f ; CacheClipmapInfluenceRadius = 0 . 0 f ; CacheMostlyStaticSeparately = 1 ; LastUsedSceneDataForFullUpdate = nullptr ; } FInt64Vector FullUpdateOriginInPages ; FInt64Vector LastPartialUpdateOriginInPages ; uint32 CacheMostlyStaticSeparately ; FVector3f CachedClipmapCenter ; float CachedClipmapExtent ; float CacheClipmapInfluenceRadius ; FGlobalDistanceFieldCacheTypeState Cache [ GDF_Num ] ; const class FDistanceFieldSceneData* LastUsedSceneDataForFullUpdate ; } ; typedef TMap<FPrimitiveComponentId,FPrimitiveFadingState> FPrimitiveFadingStateMap ; class FOcclusionRandomStream { enum { NumSamples = 3 5 7 1 } ; public :)",
    "insertText": "FOcclusionRandomStream() : CurrentSample(0)"
  },
  {
    "label": "RandomStream()",
    "kind": "Method",
    "detail": "Function (FRandomStream)",
    "insertText": "RandomStream(0x83246)"
  },
  {
    "label": "GetFraction()",
    "kind": "Method",
    "detail": "Function (Samples [ Index ] = RandomStream .)",
    "insertText": "GetFraction()"
  },
  {
    "label": "Samples()",
    "kind": "Method",
    "detail": "Function (} Samples [ 0 ] = 0 . 0 f ; Samples [ NumSamples / 3 ] = 0 . 0 f ;)",
    "insertText": "Samples(NumSamples*2)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (uint32 Current = CurrentSample .)",
    "insertText": "fetch_add(1)"
  },
  {
    "label": "compare_exchange_strong()",
    "kind": "Method",
    "detail": "Function (Current + + ; CurrentSample .)",
    "insertText": "compare_exchange_strong(Current, 0)"
  },
  {
    "label": "FHLODVisibilityState()",
    "kind": "Method",
    "detail": "Function (Current = 0 ; } float Fraction = Samples [ Current ] ; return Fraction ; } private : std::atomic<uint32> CurrentSample ; float Samples [ NumSamples ] ; } ; FOcclusionRandomStream GOcclusionRandomStream ; class FHLODVisibilityState { public :)",
    "insertText": "FHLODVisibilityState() : TemporalLODSyncTime(0.0f) , FOVDistanceScaleSq(1.0f) , UpdateCount(0)"
  },
  {
    "label": "IsNodeFading()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNodeFading(const int32 PrimIndex)"
  },
  {
    "label": "FHLODSceneNodeVisibilityState()",
    "kind": "Method",
    "detail": "Function (} TBitArray<> PrimitiveFadingLODMap ; TBitArray<> PrimitiveFadingOutLODMap ; TBitArray<> ForcedVisiblePrimitiveMap ; TBitArray<> ForcedHiddenPrimitiveMap ; float TemporalLODSyncTime ; float FOVDistanceScaleSq ; uint16 UpdateCount ; } ; struct FHLODSceneNodeVisibilityState {)",
    "insertText": "FHLODSceneNodeVisibilityState() : UpdateCount(0) , bWasVisible(0) , bIsVisible(0) , bIsFading(0)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint16 UpdateCount ; uint16 bWasVisible : 1 ; uint16 bIsVisible : 1 ; uint16 bIsFading : 1 ; } ; struct FShaderPrintStateData { TRefCountPtr<FRDGPooledBuffer> StateBuffer ; TRefCountPtr<FRDGPooledBuffer> EntryBuffer ; FVector PreViewTranslation = FVector::ZeroVector ; bool bIsLocked = false ; void)",
    "insertText": "Release()"
  },
  {
    "label": "FPersistentSkyAtmosphereData()",
    "kind": "Method",
    "detail": "Function (bIsLocked = false ; PreViewTranslation = FVector::ZeroVector ; StateBuffer = nullptr ; EntryBuffer = nullptr ; } } ; struct FPersistentSkyAtmosphereData {)",
    "insertText": "FPersistentSkyAtmosphereData()"
  },
  {
    "label": "InitialiseOrNextFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialiseOrNextFrame(ERHIFeatureLevel::Type FeatureLevel, FPooledRenderTargetDesc& AerialPerspectiveDesc, FRHICommandListImmediate& RHICmdList, bool bSeparatedAtmosphereMieRayLeigh)"
  },
  {
    "label": "GetCurrentCameraAerialPerspectiveVolume()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "GetCurrentCameraAerialPerspectiveVolume()"
  },
  {
    "label": "GetCurrentCameraAerialPerspectiveVolumeMieOnly()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "GetCurrentCameraAerialPerspectiveVolumeMieOnly()"
  },
  {
    "label": "GetCurrentCameraAerialPerspectiveVolumeRayOnly()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<IPooledRenderTarget>)",
    "insertText": "GetCurrentCameraAerialPerspectiveVolumeRayOnly()"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGPUSizeBytes(bool bLogSizes)"
  },
  {
    "label": "FGlobalDistanceFieldStreamingReadback()",
    "kind": "Method",
    "detail": "Function (private : bool bInitialised ; int32 CurrentScreenResolution ; int32 CurrentDepthResolution ; EPixelFormat CurrentTextureAerialLUTFormat ; TRefCountPtr<IPooledRenderTarget> CameraAerialPerspectiveVolumes [ 2 ] ; TRefCountPtr<IPooledRenderTarget> CameraAerialPerspectiveVolumesMieOnly [ 2 ] ; TRefCountPtr<IPooledRenderTarget> CameraAerialPerspectiveVolumesRayOnly [ 2 ] ; uint8 CameraAerialPerspectiveVolumeCount ; uint8 CameraAerialPerspectiveVolumeIndex ; bool bSeparatedAtmosphereMieRayLeigh ; } ; struct FGlobalDistanceFieldStreamingReadback {)",
    "insertText": "FGlobalDistanceFieldStreamingReadback()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (PendingStreamingReadbackBuffers .)",
    "insertText": "SetNum(MaxPendingStreamingReadbackBuffers)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (} TArray<TUniquePtr<FRHIGPUBufferReadback>> PendingStreamingReadbackBuffers ; uint32 MaxPendingStreamingReadbackBuffers = 4 ; uint32 ReadbackBuffersWriteIndex = 0 ; uint32 ReadbackBuffersNumPending = 0 ; } ; struct FPersistentGlobalDistanceFieldData : public FThreadSafeRefCountedObject { TArray<int32> DeferredUpdates [ GDF_Num ] ; TArray<int32> DeferredUpdatesForMeshSDFStreaming [ GDF_Num ] ; int32 UpdateFrame = 0 ; bool bFirstFrame = true ; bool bInitializedOrigins = false ; bool bPendingReset = false ; FGlobalDistanceFieldClipmapState ClipmapState [ GlobalDistanceField::MaxClipmaps ] ; int32 UpdateIndex = 0 ; FVector CameraVelocityOffset =)",
    "insertText": "FVector(0)"
  },
  {
    "label": "FOcclusionFeedback()",
    "kind": "Method",
    "detail": "Function (} ; class FOcclusionFeedback : public FRenderResource { public :)",
    "insertText": "FOcclusionFeedback()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitive(const FPrimitiveOcclusionHistoryKey& PrimitiveKey, const FVector& BoundsOrigin, const FVector& BoundsBoxExtent, FGlobalDynamicVertexBuffer& DynamicVertexBuffer)"
  },
  {
    "label": "BeginOcclusionScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginOcclusionScope(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "EndOcclusionScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndOcclusionScope(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "SubmitOcclusionDraws()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitOcclusionDraws(FRHICommandList& RHICmdList, FViewInfo& View)"
  },
  {
    "label": "ReadbackResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadbackResults(FRHICommandList& RHICmdList)"
  },
  {
    "label": "AdvanceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceFrame(uint32 OcclusionFrameCounter)"
  },
  {
    "label": "GetGPUFeedbackBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGBuffer*)",
    "insertText": "GetGPUFeedbackBuffer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : struct FOcclusionBatch { FGlobalDynamicVertexBuffer::FAllocation VertexAllocation ; uint32 NumBatchedPrimitives ; } ; TArray<FOcclusionBatch,TInlineAllocator<3>> BatchOcclusionQueries ; FRDGBuffer* GPUFeedbackBuffer { } ; struct FOcclusionBuffer { TArray<FPrimitiveOcclusionHistoryKey> BatchedPrimitives ; FRHIGPUBufferReadback* ReadbackBuffer = nullptr ; uint32 OcclusionFrameCounter = 0 u ; } ; FOcclusionBuffer OcclusionBuffers [ 3 ] ; uint32 CurrentBufferIndex ; TSet<FPrimitiveOcclusionHistoryKey> LatestOcclusionResults ; uint32 ResultsOcclusionFrameCounter ; FVertexDeclarationRHIRef OcclusionVertexDeclarationRHI ; } ; class FSceneViewState : public FSceneViewStateInterface,public FRenderResource { public : class FProjectedShadowKey { public : bool)",
    "insertText": "operator(const FProjectedShadowKey &Other)"
  },
  {
    "label": "FProjectedShadowKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProjectedShadowKey(const FProjectedShadowInfo& ProjectedShadowInfo)"
  },
  {
    "label": "FProjectedShadowKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProjectedShadowKey(FPrimitiveComponentId InPrimitiveId, const ULightComponent* InLight, int32 InSplitIndex, bool bInTranslucentShadow) : PrimitiveId(InPrimitiveId) , Light(InLight) , ShadowSplitIndex(InSplitIndex) , bTranslucentShadow(bInTranslucentShadow)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSceneViewState::FProjectedShadowKey& Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} private : FPrimitiveComponentId PrimitiveId ; const ULightComponent* Light ; int32 ShadowSplitIndex ; bool bTranslucentShadow ; } ; uint32 UniqueID ; uint32 ShareOriginUniqueID ; FScene* Scene ; typedef TMap<FSceneViewState::FProjectedShadowKey,FRHIPooledRenderQuery> ShadowKeyOcclusionQueryMap ; TArray<ShadowKeyOcclusionQueryMap,TInlineAllocator<FOcclusionQueryHelpers::MaxBufferedOcclusionFrames>> ShadowOcclusionQueryMaps ; FRenderQueryPoolRHIRef OcclusionQueryPool ; FFrameBasedOcclusionQueryPool PrimitiveOcclusionQueryPool ; FHZBOcclusionTester HZBOcclusionTests ; FOcclusionFeedback OcclusionFeedback ; FPersistentSkyAtmosphereData PersistentSkyAtmosphereData ; TArray<uint8> DecompressedVisibilityChunk ; const TArray<uint8>* CachedVisibilityChunk ; int32 CachedVisibilityHandlerId ; int32 CachedVisibilityBucketIndex ; int32 CachedVisibilityChunkIndex ; uint32 PendingPrevFrameNumber ; uint32 PrevFrameNumber ; float LastRenderTime ; float LastRenderTimeDelta ; float MotionBlurTimeScale ; float MotionBlurTargetDeltaTime ; FMatrix44f PrevViewMatrixForOcclusionQuery ; FVector PrevViewOriginForOcclusionQuery ; uint32 OcclusionFrameCounter ; FPrimitiveFadingStateMap PrimitiveFadingStates ; FIndirectLightingCacheAllocation* TranslucencyLightingCacheAllocations [ TVC_MAX ] ; TMap<int32,FIndividualOcclusionHistory> PlanarReflectionOcclusionHistories ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FEyeAdaptationManager()",
    "kind": "Method",
    "detail": "Function (uint32 bIsFrozen : 1 ; uint32 bIsFrozenViewMatricesCached : 1 ; TSet<FPrimitiveComponentId> FrozenPrimitives ; FViewMatrices CachedViewMatrices ; # endif FHLODVisibilityState HLODVisibilityState ; TMap<FPrimitiveComponentId,FHLODSceneNodeVisibilityState> HLODSceneNodeVisibilityStates ; float PreExposure ; bool bUpdateLastExposure ; private : class FEyeAdaptationManager { public :)",
    "insertText": "FEyeAdaptationManager()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "GetLastExposure()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetLastExposure()"
  },
  {
    "label": "GetCurrentBuffer()",
    "kind": "Method",
    "detail": "Function (} const TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetCurrentBuffer()"
  },
  {
    "label": "GetCurrentBuffer()",
    "kind": "Method",
    "detail": "Function (} const TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetCurrentBuffer(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "SwapBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapBuffers()"
  },
  {
    "label": "UpdateLastExposureFromBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLastExposureFromBuffer()"
  },
  {
    "label": "EnqueueExposureBufferReadback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnqueueExposureBufferReadback(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (private : const TRefCountPtr<IPooledRenderTarget>&)",
    "insertText": "GetTexture(uint32 TextureIndex)"
  },
  {
    "label": "GetOrCreateTexture()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<IPooledRenderTarget>&)",
    "insertText": "GetOrCreateTexture(FRDGBuilder& GraphBuilder, uint32 TextureIndex)"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetBuffer(uint32 BufferIndex)"
  },
  {
    "label": "GetOrCreateBuffer()",
    "kind": "Method",
    "detail": "Function (const TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetOrCreateBuffer(FRDGBuilder& GraphBuilder, uint32 BufferIndex)"
  },
  {
    "label": "GetLatestReadbackBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIGPUBufferReadback*)",
    "insertText": "GetLatestReadbackBuffer()"
  },
  {
    "label": "PathTracingInvalidate()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<UTexture2D> Texture = nullptr ; FRHITexture* TextureRHI = nullptr ; TRefCountPtr<FRDGPooledBuffer> ConstantsBuffer ; } FilmGrainCache ; float MaterialTextureCachedMipBias ; float LandscapeCachedMipBias ; FSamplerStateRHIRef MaterialTextureBilinearWrapedSamplerCache ; FSamplerStateRHIRef MaterialTextureBilinearClampedSamplerCache ; FSamplerStateRHIRef LandscapeWeightmapSamplerCache ; # if RHI_RAYTRACING void)",
    "insertText": "PathTracingInvalidate(bool InvalidateAnimationStates = true)"
  },
  {
    "label": "GetPathTracingSampleIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPathTracingSampleIndex()"
  },
  {
    "label": "GetPathTracingSampleCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPathTracingSampleCount()"
  },
  {
    "label": "SetLandscapeRayTracingStates()",
    "kind": "Method",
    "detail": "Function (TPimplPtr<FPathTracingState> PathTracingState ; uint32 PathTracingInvalidationCounter = 0 ; TRefCountPtr<FRDGPooledBuffer> SkyLightVisibilityRaysBuffer ; FIntVector SkyLightVisibilityRaysDimensions ; FRayTracingPipelineStateSignature LastRayTracingMaterialPipelineSignature ; TPimplPtr<FLandscapeRayTracingStateList> LandscapeRayTracingStates ; void)",
    "insertText": "SetLandscapeRayTracingStates(TPimplPtr<FLandscapeRayTracingStateList>&& InLandscapeRayTracingStates)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (LandscapeRayTracingStates =)",
    "insertText": "MoveTemp(InLandscapeRayTracingStates)"
  },
  {
    "label": "GetLandscapeRayTracingStates()",
    "kind": "Method",
    "detail": "Function (} FLandscapeRayTracingStateList*)",
    "insertText": "GetLandscapeRayTracingStates()"
  },
  {
    "label": "GetVolumetricCloudTexture()",
    "kind": "Method",
    "detail": "Function (} # endif TUniquePtr<FForwardLightingViewResources> ForwardLightingResources ; float LightScatteringHistoryPreExposure ; FVector2f PrevLightScatteringViewGridUVToViewRectVolumeUV ; FVector2f VolumetricFogPrevViewGridRectUVToResourceUV ; FVector2f VolumetricFogPrevUVMax ; FVector2f VolumetricFogPrevUVMaxForTemporalBlend ; FIntVector VolumetricFogPrevResourceGridSize ; TRefCountPtr<IPooledRenderTarget> LightScatteringHistory ; TRefCountPtr<IPooledRenderTarget> PrevLightScatteringConservativeDepthTexture ; TRefCountPtr<FPersistentGlobalDistanceFieldData> GlobalDistanceFieldData ; float LastAutoDownsampleChangeTime ; float SmoothedHalfResTranslucencyGPUDuration ; float SmoothedFullResTranslucencyGPUDuration ; bool bShouldAutoDownsampleTranslucency ; bool bDOFHistory ; bool bDOFHistory2 ; ESequencerState SequencerState ; FTemporalLODState TemporalLODState ; FVolumetricRenderTargetViewStateData VolumetricCloudRenderTarget ; FTemporalRenderTargetState VolumetricCloudShadowRenderTarget [ NUM_ATMOSPHERE_LIGHTS ] ; FMatrix VolumetricCloudShadowmapPreviousTranslatedWorldToLightClipMatrix [ NUM_ATMOSPHERE_LIGHTS ] ; FVector VolumetricCloudShadowmapPreviousAtmosphericLightPos [ NUM_ATMOSPHERE_LIGHTS ] ; FVector VolumetricCloudShadowmapPreviousAnchorPoint [ NUM_ATMOSPHERE_LIGHTS ] ; FVector VolumetricCloudShadowmapPreviousAtmosphericLightDir [ NUM_ATMOSPHERE_LIGHTS ] ; FRDGTextureRef)",
    "insertText": "GetVolumetricCloudTexture(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetCurrentTemporalAASampleIndex()",
    "kind": "Method",
    "detail": "Function (} FHairStrandsViewStateData HairStrandsViewStateData ; FShaderPrintStateData ShaderPrintStateData ; FGlintShadingLUTsStateData GlintShadingLUTsData ; bool bLumenSceneDataAdded ; float LumenSurfaceCacheResolution ; uint32)",
    "insertText": "GetCurrentTemporalAASampleIndex()"
  },
  {
    "label": "GetFrameIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetFrameIndex()"
  },
  {
    "label": "GetOutputFrameIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetOutputFrameIndex()"
  },
  {
    "label": "SetupDistanceFieldTemporalOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupDistanceFieldTemporalOffset(const FSceneViewFamily& Family)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DistanceFieldTemporalSampleIndex + + ; })",
    "insertText": "if(DistanceFieldTemporalSampleIndex >= 4)"
  },
  {
    "label": "GetDistanceFieldTemporalSampleIndex()",
    "kind": "Method",
    "detail": "Function (DistanceFieldTemporalSampleIndex = 0 ; } } uint32)",
    "insertText": "GetDistanceFieldTemporalSampleIndex()"
  },
  {
    "label": "FSceneViewState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSceneViewState()"
  },
  {
    "label": "UpdateLastRenderTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLastRenderTime(const FSceneViewFamily& Family)"
  },
  {
    "label": "GetRealTimeSeconds()",
    "kind": "Method",
    "detail": "Function (LastRenderTimeDelta = Family . Time .)",
    "insertText": "GetRealTimeSeconds()"
  },
  {
    "label": "TrimHistoryRenderTargets()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "TrimHistoryRenderTargets(const FScene* InScene)"
  },
  {
    "label": "UpdateMotionBlurTimeScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMotionBlurTimeScale(const FViewInfo& View)"
  },
  {
    "label": "UpdateTemporalLODTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTemporalLODTransition(const FViewInfo& View)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) if (bIsFrozen)"
  },
  {
    "label": "ResolvePrecomputedVisibilityData()",
    "kind": "Method",
    "detail": "Function (} const uint8*)",
    "insertText": "ResolvePrecomputedVisibilityData(FViewInfo& View, const FScene* InScene)"
  },
  {
    "label": "TrimOcclusionHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimOcclusionHistory(float CurrentTime, float MinHistoryTime, float MinQueryTime, int32 FrameNumber)"
  },
  {
    "label": "UpdateRoundRobin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRoundRobin(const bool bUseRoundRobin)"
  },
  {
    "label": "IsRoundRobinEnabled()",
    "kind": "Method",
    "detail": "Function (bRoundRobinOcclusionEnabled = bUseRoundRobin ; } bool)",
    "insertText": "IsRoundRobinEnabled()"
  },
  {
    "label": "GetCurrentTexture()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS IPooledRenderTarget* Texture = EyeAdaptationManager .)",
    "insertText": "GetCurrentTexture().GetReference()"
  },
  {
    "label": "GetCurrentTexture()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS bValidEyeAdaptationTexture = true ; return EyeAdaptationManager .)",
    "insertText": "GetCurrentTexture(GraphBuilder).GetReference()"
  },
  {
    "label": "GetCurrentEyeAdaptationBuffer()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } FRDGPooledBuffer*)",
    "insertText": "GetCurrentEyeAdaptationBuffer()"
  },
  {
    "label": "GetCurrentBuffer()",
    "kind": "Method",
    "detail": "Function (FRDGPooledBuffer* Buffer = EyeAdaptationManager .)",
    "insertText": "GetCurrentBuffer().GetReference()"
  },
  {
    "label": "GetCurrentBuffer()",
    "kind": "Method",
    "detail": "Function (bValidEyeAdaptationBuffer = true ; return EyeAdaptationManager .)",
    "insertText": "GetCurrentBuffer(GraphBuilder).GetReference()"
  },
  {
    "label": "SwapEyeAdaptationBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapEyeAdaptationBuffers()"
  },
  {
    "label": "UpdateEyeAdaptationLastExposureFromBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateEyeAdaptationLastExposureFromBuffer()"
  },
  {
    "label": "EnqueueEyeAdaptationExposureBufferReadback()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EnqueueEyeAdaptationExposureBufferReadback(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "EnqueueExposureBufferReadback()",
    "kind": "Method",
    "detail": "Function (EyeAdaptationManager .)",
    "insertText": "EnqueueExposureBufferReadback(GraphBuilder)"
  },
  {
    "label": "GetLastEyeAdaptationExposure()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetLastEyeAdaptationExposure()"
  },
  {
    "label": "GetLastAverageLocalExposure()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLastAverageLocalExposure()"
  },
  {
    "label": "GetLastAverageSceneLuminance()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLastAverageSceneLuminance()"
  },
  {
    "label": "HasValidTonemappingLUT()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasValidTonemappingLUT()"
  },
  {
    "label": "CreateLUTRenderTarget()",
    "kind": "Method",
    "detail": "Function (bValidTonemappingLUT = bValid ; } FPooledRenderTargetDesc)",
    "insertText": "CreateLUTRenderTarget(const int32 LUTSize, const bool bUseVolumeLUT, const bool bNeedUAV, const bool bNeedFloatOutput)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EPixelFormat LUTPixelFormat = PF_A2B10G10R10 ;)",
    "insertText": "if(!GPixelFormats[LUTPixelFormat].Supported)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LUTPixelFormat = PF_R8G8B8A8 ; })",
    "insertText": "if(bNeedFloatOutput)"
  },
  {
    "label": "Create2DDesc()",
    "kind": "Method",
    "detail": "Function (LUTPixelFormat = PF_FloatRGBA ; } FPooledRenderTargetDesc Desc =)",
    "insertText": "Create2DDesc(FIntPoint(LUTSize * LUTSize, LUTSize), LUTPixelFormat, FClearValueBinding::Transparent, TexCreate_None, TexCreate_ShaderResource, false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Desc . Flags | = bNeedUAV ? TexCreate_UAV : TexCreate_RenderTargetable ;)",
    "insertText": "if(bUseVolumeLUT)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (Desc . Extent =)",
    "insertText": "FIntPoint(LUTSize, LUTSize)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Desc . Depth = LUTSize ; } Desc . DebugName =)",
    "insertText": "TEXT(\"CombineLUTs\")"
  },
  {
    "label": "GetTonemappingLUT()",
    "kind": "Method",
    "detail": "Function (Desc . Flags | = GFastVRamConfig . CombineLUTs ; return Desc ; } IPooledRenderTarget*)",
    "insertText": "GetTonemappingLUT(FRHICommandList& RHICmdList, const int32 LUTSize, const bool bUseVolumeLUT, const bool bNeedUAV, const bool bNeedFloatOutput)"
  },
  {
    "label": "CreateLUTRenderTarget()",
    "kind": "Method",
    "detail": "Function (FPooledRenderTargetDesc Desc =)",
    "insertText": "CreateLUTRenderTarget(LUTSize, bUseVolumeLUT, bNeedUAV, bNeedFloatOutput)"
  },
  {
    "label": "FindFreeElement()",
    "kind": "Method",
    "detail": "Function (GRenderTargetPool .)",
    "insertText": "FindFreeElement(RHICmdList, Desc, CombinedLUTRenderTarget, Desc.DebugName)"
  },
  {
    "label": "GetReference()",
    "kind": "Method",
    "detail": "Function (} return CombinedLUTRenderTarget .)",
    "insertText": "GetReference()"
  },
  {
    "label": "GetTonemappingLUT()",
    "kind": "Method",
    "detail": "Function (} IPooledRenderTarget*)",
    "insertText": "GetTonemappingLUT()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (HZBOcclusionTests .)",
    "insertText": "InitRHI(RHICmdList)"
  },
  {
    "label": "ReleaseResource()",
    "kind": "Method",
    "detail": "Function (OcclusionFeedback .)",
    "insertText": "ReleaseResource()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS bValidEyeAdaptationTexture = false ; PRAGMA_ENABLE_DEPRECATION_WARNINGS bValidEyeAdaptationBuffer = false ; } void)",
    "insertText": "Destroy()"
  },
  {
    "label": "GetConcreteViewState()",
    "kind": "Method",
    "detail": "Function (FSceneViewState*)",
    "insertText": "GetConcreteViewState()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObjects(MIDPool)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(BloomFFTKernel.Physical)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FilmGrainCache.Texture)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(FilmGrainCache.Texture)"
  },
  {
    "label": "OnStartPostProcessing()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnStartPostProcessing(FSceneView& CurrentView)"
  },
  {
    "label": "GetPreExposure()",
    "kind": "Method",
    "detail": "Function (MIDUsedCount = 0 ; } float)",
    "insertText": "GetPreExposure()"
  },
  {
    "label": "UMaterialInstanceDynamic()",
    "kind": "Method",
    "detail": "Function (auto InputAsMID = Cast<)",
    "insertText": "UMaterialInstanceDynamic(InSource)"
  },
  {
    "label": "ToRawPtr()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface* ParentOfTheNewMID = InputAsMID ?)",
    "insertText": "ToRawPtr(InputAsMID->Parent)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UMaterialInstanceDynamic* NewMID = 0 ;)",
    "insertText": "if(MIDUsedCount < (uint32)MIDPool.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewMID = MIDPool [ MIDUsedCount ] ;)",
    "insertText": "if(NewMID->Parent != ParentOfTheNewMID)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (NewMID =)",
    "insertText": "Create(ParentOfTheNewMID, 0)"
  },
  {
    "label": "ClearParameterValues()",
    "kind": "Method",
    "detail": "Function (MIDPool [ MIDUsedCount ] = NewMID ; } NewMID ->)",
    "insertText": "ClearParameterValues()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MIDPool .)",
    "insertText": "Add(NewMID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(InputAsMID)"
  },
  {
    "label": "CopyInterpParameters()",
    "kind": "Method",
    "detail": "Function (NewMID ->)",
    "insertText": "CopyInterpParameters(InputAsMID)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(!FApp::CanEverRender() || NewMID->GetRenderProxy())"
  },
  {
    "label": "ClearMIDPool()",
    "kind": "Method",
    "detail": "Function (MIDUsedCount + + ; return NewMID ; } void)",
    "insertText": "ClearMIDPool(FStringView MidParentRootPath = {})"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (MIDPool .)",
    "insertText": "Empty()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (MIDPool .)",
    "insertText": "SetNum(RemoveNum)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual const FViewMatrices* GetFrozenViewMatrices()"
  },
  {
    "label": "FSceneViewState()",
    "kind": "Method",
    "detail": "Function (auto* ViewState = static_cast<)",
    "insertText": "FSceneViewState(SceneView.State)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(SceneView.ViewMatrices, ViewState->CachedViewMatrices)"
  },
  {
    "label": "RestoreUnfrozenViewMatrices()",
    "kind": "Method",
    "detail": "Function (ViewState -> bIsFrozenViewMatricesCached = false ; } } void)",
    "insertText": "RestoreUnfrozenViewMatrices(FSceneView& SceneView)"
  },
  {
    "label": "GetTemporalLODState()",
    "kind": "Method",
    "detail": "Function (ViewState -> bIsFrozenViewMatricesCached = true ; } } # endif FTemporalLODState&)",
    "insertText": "GetTemporalLODState()"
  },
  {
    "label": "GetViewKey()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetViewKey()"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGPUSizeBytes(bool bLogSizes = false)"
  },
  {
    "label": "SetSequencerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSequencerState(ESequencerState InSequencerState)"
  },
  {
    "label": "GetSequencerState()",
    "kind": "Method",
    "detail": "Function (SequencerState = InSequencerState ; } ESequencerState)",
    "insertText": "GetSequencerState()"
  },
  {
    "label": "RemoveLumenSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLumenSceneData(FSceneInterface* InScene)"
  },
  {
    "label": "HasLumenSceneData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasLumenSceneData()"
  },
  {
    "label": "FReflectionEnvironmentCubemapArray()",
    "kind": "Method",
    "detail": "Function (struct FOcclusion { TSet<FPrimitiveOcclusionHistory,FPrimitiveOcclusionHistoryKeyFuncs> PrimitiveOcclusionHistorySet ; TArray<FRHIRenderQuery*,TInlineAllocator<FOcclusionQueryHelpers::MaxBufferedOcclusionFrames>> LastOcclusionQueryArray ; uint32 NumRequestedQueries = 0 ; } Occlusion ; } ; class FReflectionEnvironmentCubemapArray : public FRenderResource { public :)",
    "insertText": "FReflectionEnvironmentCubemapArray(ERHIFeatureLevel::Type InFeatureLevel) : FRenderResource(InFeatureLevel) , MaxCubemaps(0) , CubemapSize(0)"
  },
  {
    "label": "UpdateMaxCubemaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMaxCubemaps(uint32 InMaxCubemaps, int32 CubemapSize)"
  },
  {
    "label": "ResizeCubemapArrayGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeCubemapArrayGPU(uint32 InMaxCubemaps, int32 CubemapSize, const TArray<int32>& IndexRemapping)"
  },
  {
    "label": "GetMaxCubemaps()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxCubemaps()"
  },
  {
    "label": "GetRenderTarget()",
    "kind": "Method",
    "detail": "Function (} const TRefCountPtr<IPooledRenderTarget>&)",
    "insertText": "GetRenderTarget()"
  },
  {
    "label": "ReleaseCubeArray()",
    "kind": "Method",
    "detail": "Function (protected : uint32 MaxCubemaps ; int32 CubemapSize ; TRefCountPtr<IPooledRenderTarget> ReflectionEnvs ; void)",
    "insertText": "ReleaseCubeArray()"
  },
  {
    "label": "FCaptureComponentSceneState()",
    "kind": "Method",
    "detail": "Function (} ; class FCaptureComponentSceneState { public : int32 CubemapIndex ; float AverageBrightness ;)",
    "insertText": "FCaptureComponentSceneState(int32 InCubemapIndex) : CubemapIndex(InCubemapIndex), AverageBrightness(0.0f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FCaptureComponentSceneState& Other)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FCaptureComponentSceneState*)",
    "insertText": "Find(const FGuid& MapBuildDataId)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FCaptureComponentSceneState*)",
    "insertText": "Find(const UReflectionCaptureComponent* Component)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (const FCaptureComponentSceneState&)",
    "insertText": "FindChecked(const UReflectionCaptureComponent* Component)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FCaptureComponentSceneState&)",
    "insertText": "Add(const UReflectionCaptureComponent* Component, const FCaptureComponentSceneState& Value)"
  },
  {
    "label": "AddReference()",
    "kind": "Method",
    "detail": "Function (FCaptureComponentSceneState*)",
    "insertText": "AddReference(const UReflectionCaptureComponent* Component)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(const UReflectionCaptureComponent* Component)"
  },
  {
    "label": "Prune()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Prune(const TSet<FGuid> KeysToKeep, TArray<int32>& ReleasedIndices)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetKeys(TArray<FGuid>& OutKeys)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetKeys(TSet<FGuid>& OutKeys)"
  },
  {
    "label": "RemapRegisteredComponentMapBuildDataId()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "RemapRegisteredComponentMapBuildDataId(const UReflectionCaptureComponent* Component)"
  },
  {
    "label": "RegisterComponentMapBuildDataId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterComponentMapBuildDataId(const UReflectionCaptureComponent* Component)"
  },
  {
    "label": "UnregisterComponentMapBuildDataId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterComponentMapBuildDataId(const UReflectionCaptureComponent* Component)"
  },
  {
    "label": "FReflectionEnvironmentSceneData()",
    "kind": "Method",
    "detail": "Function (TMap<const UReflectionCaptureComponent*,FGuid> RegisteredComponentMapBuildDataIds ; TMap<FGuid,FReflectionCaptureCacheEntry> CaptureData ; } ; class FReflectionEnvironmentSceneData { public : bool bRegisteredReflectionCapturesHasChanged ; bool AllocatedReflectionCaptureStateHasChanged ; TArray<FReflectionCaptureProxy*> RegisteredReflectionCaptures ; TArray<FSphere> RegisteredReflectionCapturePositionAndRadius ; FReflectionEnvironmentCubemapArray CubemapArray ; FReflectionCaptureCache AllocatedReflectionCaptureState ; TBitArray<> CubemapArraySlotsUsed ; TArray<FReflectionCaptureSortData> SortedCaptures ; int32 NumBoxCaptures ; int32 NumSphereCaptures ; TUniformBufferRef<FReflectionCaptureShaderData> ReflectionCaptureUniformBuffer ; TUniformBufferRef<FMobileReflectionCaptureShaderData> MobileReflectionCaptureUniformBuffer ; TSparseArray<UReflectionCaptureComponent*> AllocatedReflectionCapturesGameThread ; int32 MaxAllocatedReflectionCubemapsGameThread ; int32 ReflectionCaptureSizeGameThread ; int32 DesiredReflectionCaptureSizeGameThread ;)",
    "insertText": "FReflectionEnvironmentSceneData(ERHIFeatureLevel::Type InFeatureLevel) : bRegisteredReflectionCapturesHasChanged(true), AllocatedReflectionCaptureStateHasChanged(false), CubemapArray(InFeatureLevel), MaxAllocatedReflectionCubemapsGameThread(0), ReflectionCaptureSizeGameThread(0), DesiredReflectionCaptureSizeGameThread(0)"
  },
  {
    "label": "SetGameThreadTrackingData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGameThreadTrackingData(int32 MaxAllocatedCubemaps, int32 CaptureSize, int32 DesiredCaptureSize)"
  },
  {
    "label": "DoesAllocatedDataNeedUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesAllocatedDataNeedUpdate(int32 DesiredMaxCubemaps, int32 DesiredCaptureSize)"
  },
  {
    "label": "ResizeCubemapArrayGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeCubemapArrayGPU(uint32 InMaxCubemaps, int32 InCubemapSize)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(FScene* Scene)"
  },
  {
    "label": "FVolumetricLightmapSceneData()",
    "kind": "Method",
    "detail": "Function (} ; class FHairStrandsSceneData { public : TArray<FHairStrandsInstance*> RegisteredProxies ; FHairTransientResources* TransientResources = nullptr ; } ; class FVolumetricLightmapInterpolation { public : FVector4f IndirectLightingSHCoefficients0 [ 3 ] ; FVector4f IndirectLightingSHCoefficients1 [ 3 ] ; FVector4f IndirectLightingSHCoefficients2 ; FVector4f IndirectLightingSHSingleCoefficient ; FVector4f PointSkyBentNormal ; float DirectionalLightShadowing ; uint32 LastUsedSceneFrameNumber ; } ; class FVolumetricLightmapSceneData { public :)",
    "insertText": "FVolumetricLightmapSceneData(FScene* InScene) : Scene(InScene)"
  },
  {
    "label": "HasData()",
    "kind": "Method",
    "detail": "Function (GlobalVolumetricLightmap . Data =& GlobalVolumetricLightmapData ; } bool)",
    "insertText": "HasData()"
  },
  {
    "label": "AddLevelVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLevelVolume(const class FPrecomputedVolumetricLightmap* InVolume, EShadingPath ShadingPath, bool bIsPersistentLevel)"
  },
  {
    "label": "RemoveLevelVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLevelVolume(const class FPrecomputedVolumetricLightmap* InVolume)"
  },
  {
    "label": "GetLevelVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (const FPrecomputedVolumetricLightmap*)",
    "insertText": "GetLevelVolumetricLightmap()"
  },
  {
    "label": "FPrimitiveAndInstance()",
    "kind": "Method",
    "detail": "Function (TMap<FVector,FVolumetricLightmapInterpolation> CPUInterpolationCache ; FPrecomputedVolumetricLightmapData GlobalVolumetricLightmapData ; private : FScene* Scene ; FPrecomputedVolumetricLightmap GlobalVolumetricLightmap ; const FPrecomputedVolumetricLightmap* PersistentLevelVolumetricLightmap = nullptr ; TArray<const FPrecomputedVolumetricLightmap*> LevelVolumetricLightmaps ; } ; class FPrimitiveAndInstance { public :)",
    "insertText": "FPrimitiveAndInstance(const FMatrix& InLocalToWorld, const FBox& InWorldBounds, FPrimitiveSceneInfo* InPrimitive, int32 InInstanceIndex) : Primitive(InPrimitive) , InstanceIndex(InInstanceIndex)"
  },
  {
    "label": "SetTransformAndBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformAndBounds(InLocalToWorld, InWorldBounds)"
  },
  {
    "label": "SetTransformAndBounds()",
    "kind": "Method",
    "detail": "Function (} FPrimitiveSceneInfo* Primitive ; FVector Origin ; FVector3f TransformRows [ 3 ] ; FBox3f WorldBoundsRelativeToOrigin ; int32 InstanceIndex ; void)",
    "insertText": "SetTransformAndBounds(const FMatrix& InLocalToWorld, const FBox& InWorldBounds)"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (TransformRows [ 0 ] =)",
    "insertText": "FVector3f((float)InLocalToWorld.M[0][0], (float)InLocalToWorld.M[0][1], (float)InLocalToWorld.M[0][2])"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (TransformRows [ 1 ] =)",
    "insertText": "FVector3f((float)InLocalToWorld.M[1][0], (float)InLocalToWorld.M[1][1], (float)InLocalToWorld.M[1][2])"
  },
  {
    "label": "FVector3f()",
    "kind": "Method",
    "detail": "Function (TransformRows [ 2 ] =)",
    "insertText": "FVector3f((float)InLocalToWorld.M[2][0], (float)InLocalToWorld.M[2][1], (float)InLocalToWorld.M[2][2])"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (Origin =)",
    "insertText": "FVector(InLocalToWorld.M[3][0], InLocalToWorld.M[3][1], InLocalToWorld.M[3][2])"
  },
  {
    "label": "WorldBoundsRelativeToOrigin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WorldBoundsRelativeToOrigin(FBox3f)(InWorldBounds.ShiftBy(-Origin))"
  },
  {
    "label": "GetLocalToWorld()",
    "kind": "Method",
    "detail": "Function (} FMatrix)",
    "insertText": "GetLocalToWorld()"
  },
  {
    "label": "GetWorldBounds()",
    "kind": "Method",
    "detail": "Function (FMatrix Matrix ; Matrix . M [ 0 ] [ 0 ] = TransformRows [ 0 ] . X ; Matrix . M [ 0 ] [ 1 ] = TransformRows [ 0 ] . Y ; Matrix . M [ 0 ] [ 2 ] = TransformRows [ 0 ] . Z ; Matrix . M [ 0 ] [ 3 ] = 0 . 0 f ; Matrix . M [ 1 ] [ 0 ] = TransformRows [ 1 ] . X ; Matrix . M [ 1 ] [ 1 ] = TransformRows [ 1 ] . Y ; Matrix . M [ 1 ] [ 2 ] = TransformRows [ 1 ] . Z ; Matrix . M [ 1 ] [ 3 ] = 0 . 0 f ; Matrix . M [ 2 ] [ 0 ] = TransformRows [ 2 ] . X ; Matrix . M [ 2 ] [ 1 ] = TransformRows [ 2 ] . Y ; Matrix . M [ 2 ] [ 2 ] = TransformRows [ 2 ] . Z ; Matrix . M [ 2 ] [ 3 ] = 0 . 0 f ; Matrix . M [ 3 ] [ 0 ] = Origin . X ; Matrix . M [ 3 ] [ 1 ] = Origin . Y ; Matrix . M [ 3 ] [ 2 ] = Origin . Z ; Matrix . M [ 3 ] [ 3 ] = 1 . 0 f ; return Matrix ; } FBox)",
    "insertText": "GetWorldBounds()"
  },
  {
    "label": "WorldBoundsRelativeToOriginDoublePrecision()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "WorldBoundsRelativeToOriginDoublePrecision(FBox)"
  },
  {
    "label": "FPrimitiveRemoveInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class FPrimitiveRemoveInfo { public :)",
    "insertText": "FPrimitiveRemoveInfo(const FPrimitiveSceneInfo* InPrimitive) : Primitive(InPrimitive) , bOftenMoving(InPrimitive->Proxy->IsOftenMoving()) , DistanceFieldInstanceIndices(Primitive->DistanceFieldInstanceIndices)"
  },
  {
    "label": "GetDistanceFieldAtlasData()",
    "kind": "Method",
    "detail": "Function (float SelfShadowBias ; InPrimitive -> Proxy ->)",
    "insertText": "GetDistanceFieldAtlasData(DistanceFieldData, SelfShadowBias)"
  },
  {
    "label": "FHeightFieldPrimitiveRemoveInfo()",
    "kind": "Method",
    "detail": "Function (} const FPrimitiveSceneInfo* Primitive ; bool bOftenMoving ; TArray<int32,TInlineAllocator<1>> DistanceFieldInstanceIndices ; const FDistanceFieldVolumeData* DistanceFieldData ; } ; class FHeightFieldPrimitiveRemoveInfo : public FPrimitiveRemoveInfo { public :)",
    "insertText": "FHeightFieldPrimitiveRemoveInfo(const FPrimitiveSceneInfo* InPrimitive) : FPrimitiveRemoveInfo(InPrimitive)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (const FBoxSphereBounds Bounds = InPrimitive -> Proxy ->)",
    "insertText": "GetBounds()"
  },
  {
    "label": "GetBox()",
    "kind": "Method",
    "detail": "Function (WorldBounds = Bounds .)",
    "insertText": "GetBox()"
  },
  {
    "label": "FDistanceFieldAssetMipId()",
    "kind": "Method",
    "detail": "Function (} FBox WorldBounds ; } ; class FDistanceFieldAssetMipId { public :)",
    "insertText": "FDistanceFieldAssetMipId(FSetElementId InAssetId, int32 InReversedMipIndex = 0) : AssetId(InAssetId), ReversedMipIndex(InReversedMipIndex)"
  },
  {
    "label": "FDistanceFieldAssetMipRelocation()",
    "kind": "Method",
    "detail": "Function (} FSetElementId AssetId ; int32 ReversedMipIndex ; } ; class FDistanceFieldAssetMipRelocation { public :)",
    "insertText": "FDistanceFieldAssetMipRelocation(FIntVector InIndirectionDimensions, FIntVector InSrcPosition, FIntVector InDstPosition) : IndirectionDimensions(InIndirectionDimensions), SrcPosition(InSrcPosition), DstPosition(InDstPosition)"
  },
  {
    "label": "FDistanceFieldAssetMipState()",
    "kind": "Method",
    "detail": "Function (} FIntVector IndirectionDimensions ; FIntVector SrcPosition ; FIntVector DstPosition ; } ; class FDistanceFieldAssetMipState { public :)",
    "insertText": "FDistanceFieldAssetMipState() : IndirectionDimensions(FIntVector(0, 0, 0)), IndirectionTableOffset(-1), NumBricks(0)"
  },
  {
    "label": "FDistanceFieldAssetState()",
    "kind": "Method",
    "detail": "Function (} FIntVector IndirectionDimensions ; int32 IndirectionTableOffset ; FIntVector IndirectionAtlasOffset ; int32 NumBricks ; TArray<int32,TInlineAllocator<4>> AllocatedBlocks ; } ; class FDistanceFieldAssetState { public :)",
    "insertText": "FDistanceFieldAssetState() : BuiltData(nullptr), RefCount(0), WantedNumMips(0)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} const FDistanceFieldVolumeData* BuiltData ; int32 RefCount ; int32 WantedNumMips ; TArray<FDistanceFieldAssetMipState,TInlineAllocator<3>> ReversedMips ; } ; struct TFDistanceFieldAssetStateFuncs : BaseKeyFuncs<FDistanceFieldAssetState,const FDistanceFieldVolumeData*,false> { KeyInitType)",
    "insertText": "GetSetKey(ElementInitType Element)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} } ; class FDistanceFieldBlockAllocator { public : void)",
    "insertText": "Allocate(int32 NumBlocks, TArray<int32, TInlineAllocator<4>>& OutBlocks)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(const TArray<int32, TInlineAllocator<4>>& ElementRange)"
  },
  {
    "label": "GetMaxSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMaxSize()"
  },
  {
    "label": "FDistanceFieldSceneData()",
    "kind": "Method",
    "detail": "Function (} private : int32 MaxNumBlocks = 0 ; TArray<int32,TInlineAllocator<4>> FreeBlocks ; } ; struct FDistanceFieldReadRequest ; struct FDistanceFieldAsyncUpdateParameters ; class FDistanceFieldSceneData { public :)",
    "insertText": "FDistanceFieldSceneData(FDistanceFieldSceneData&&)"
  },
  {
    "label": "FDistanceFieldSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDistanceFieldSceneData(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "FDistanceFieldSceneData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FDistanceFieldSceneData()"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitive(FPrimitiveSceneInfo* InPrimitive)"
  },
  {
    "label": "UpdatePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitive(FPrimitiveSceneInfo* InPrimitive)"
  },
  {
    "label": "RemovePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimitive(FPrimitiveSceneInfo* InPrimitive)"
  },
  {
    "label": "VerifyIntegrity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyIntegrity()"
  },
  {
    "label": "ListMeshDistanceFields()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ListMeshDistanceFields(bool bDumpAssetStats)"
  },
  {
    "label": "UpdateDistanceFieldObjectBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDistanceFieldObjectBuffers(FRDGBuilder& GraphBuilder, FRDGExternalAccessQueue& ExternalAccessQueue, FScene* Scene, TArray<FDistanceFieldAssetMipId>& DistanceFieldAssetAdds, TArray<FSetElementId>& DistanceFieldAssetRemoves)"
  },
  {
    "label": "UpdateDistanceFieldAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDistanceFieldAtlas(FRDGBuilder& GraphBuilder, FRDGExternalAccessQueue& ExternalAccessQueue, const FViewInfo& View, FScene* Scene, bool bLumenEnabled, FGlobalShaderMap* GlobalShaderMap, TArray<FDistanceFieldAssetMipId>& DistanceFieldAssetAdds, TArray<FSetElementId>& DistanceFieldAssetRemoves)"
  },
  {
    "label": "HasPendingUploads()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingUploads()"
  },
  {
    "label": "HasPendingOperations()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPendingOperations()"
  },
  {
    "label": "HasPendingHeightFieldOperations()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPendingHeightFieldOperations()"
  },
  {
    "label": "HasPendingRemovePrimitive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPendingRemovePrimitive(const FPrimitiveSceneInfo* Primitive)"
  },
  {
    "label": "CanUse16BitObjectIndices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanUse16BitObjectIndices()"
  },
  {
    "label": "GetCurrentObjectBuffers()",
    "kind": "Method",
    "detail": "Function (} const FDistanceFieldObjectBuffers*)",
    "insertText": "GetCurrentObjectBuffers()"
  },
  {
    "label": "ProcessReadRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReadRequests(TArray<FDistanceFieldAssetMipId>& AssetDataUploads, TArray<FDistanceFieldAssetMipId>& DistanceFieldAssetMipAdds, TArray<FDistanceFieldReadRequest>& ReadRequestsToUpload, TArray<FDistanceFieldReadRequest>& ReadRequestsToCleanUp)"
  },
  {
    "label": "ResizeBrickAtlasIfNeeded()",
    "kind": "Method",
    "detail": "Function (FRDGTexture*)",
    "insertText": "ResizeBrickAtlasIfNeeded(FRDGBuilder& GraphBuilder, FGlobalShaderMap* GlobalShaderMap)"
  },
  {
    "label": "ResizeIndirectionAtlasIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResizeIndirectionAtlasIfNeeded(FRDGBuilder& GraphBuilder, FGlobalShaderMap* GlobalShaderMap, FRDGTexture*& OutTexture)"
  },
  {
    "label": "DefragmentIndirectionAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefragmentIndirectionAtlas(FIntVector MinSize, TArray<FDistanceFieldAssetMipRelocation>& Relocations)"
  },
  {
    "label": "UploadAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadAssetData(FRDGBuilder& GraphBuilder, const TArray<FDistanceFieldAssetMipId>& AssetDataUploads, FRDGBuffer* AssetDataBufferRDG)"
  },
  {
    "label": "UploadAllAssetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadAllAssetData(FRDGBuilder& GraphBuilder, FRDGBuffer* AssetDataBufferRDG)"
  },
  {
    "label": "AsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncUpdate(FRHICommandListBase& RHICmdList, FDistanceFieldAsyncUpdateParameters& UpdateParameters)"
  },
  {
    "label": "GenerateStreamingRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateStreamingRequests(FRDGBuilder& GraphBuilder, const FViewInfo& View, FScene* Scene, bool bLumenEnabled, FGlobalShaderMap* GlobalShaderMap)"
  },
  {
    "label": "FIndirectLightingCacheBlock()",
    "kind": "Method",
    "detail": "Function (class FDistanceFieldStreamingUpdateTask ; } ; class FIndirectLightingCacheBlock { public :)",
    "insertText": "FIndirectLightingCacheBlock() : MinTexel(FIntVector(0, 0, 0)), TexelSize(0), Min(FVector(0, 0, 0)), Size(FVector(0, 0, 0)), bHasEverBeenUpdated(false)"
  },
  {
    "label": "FBlockUpdateInfo()",
    "kind": "Method",
    "detail": "Function (} FIntVector MinTexel ; int32 TexelSize ; FVector Min ; FVector Size ; bool bHasEverBeenUpdated ; } ; class FBlockUpdateInfo { public :)",
    "insertText": "FBlockUpdateInfo(const FIndirectLightingCacheBlock& InBlock, FIndirectLightingCacheAllocation* InAllocation) : Block(InBlock), Allocation(InAllocation)"
  },
  {
    "label": "FAttachmentGroupSceneInfo()",
    "kind": "Method",
    "detail": "Function (} FIndirectLightingCacheBlock Block ; FIndirectLightingCacheAllocation* Allocation ; } ; class FAttachmentGroupSceneInfo { public : FPrimitiveSceneInfo* ParentSceneInfo ; TArray<FPrimitiveSceneInfo*> Primitives ;)",
    "insertText": "FAttachmentGroupSceneInfo() : ParentSceneInfo(nullptr)"
  },
  {
    "label": "FIndirectLightingCache()",
    "kind": "Method",
    "detail": "Function (} } ; struct FILCUpdatePrimTaskData { FGraphEventRef TaskRef ; TMap<FIntVector,FBlockUpdateInfo> OutBlocksToUpdate ; TArray<FIndirectLightingCacheAllocation*> OutTransitionsOverTimeToUpdate ; TArray<FPrimitiveSceneInfo*> OutPrimitivesToUpdateStaticMeshes ; } ; class FIndirectLightingCache : public FRenderResource { public :)",
    "insertText": "FIndirectLightingCache(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "AllocatePrimitive()",
    "kind": "Method",
    "detail": "Function (FIndirectLightingCacheAllocation*)",
    "insertText": "AllocatePrimitive(const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bUnbuiltPreview)"
  },
  {
    "label": "ReleasePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePrimitive(FPrimitiveComponentId PrimitiveId)"
  },
  {
    "label": "FindPrimitiveAllocation()",
    "kind": "Method",
    "detail": "Function (FIndirectLightingCacheAllocation*)",
    "insertText": "FindPrimitiveAllocation(FPrimitiveComponentId PrimitiveId)"
  },
  {
    "label": "UpdateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCache(FScene* Scene, FSceneRenderer& Renderer, bool bAllowUnbuiltPreview)"
  },
  {
    "label": "StartUpdateCachePrimitivesTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartUpdateCachePrimitivesTask(FScene* Scene, FSceneRenderer& Renderer, bool bAllowUnbuiltPreview, FILCUpdatePrimTaskData& OutTaskData)"
  },
  {
    "label": "FinalizeCacheUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeCacheUpdates(FScene* Scene, FSceneRenderer& Renderer, FILCUpdatePrimTaskData& TaskData)"
  },
  {
    "label": "SetLightingCacheDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLightingCacheDirty(FScene* Scene, const FPrecomputedLightVolume* Volume)"
  },
  {
    "label": "GetTexture0()",
    "kind": "Method",
    "detail": "Function (FRHITexture*)",
    "insertText": "GetTexture0()"
  },
  {
    "label": "GetTexture1()",
    "kind": "Method",
    "detail": "Function (} FRHITexture*)",
    "insertText": "GetTexture1()"
  },
  {
    "label": "GetTexture2()",
    "kind": "Method",
    "detail": "Function (} FRHITexture*)",
    "insertText": "GetTexture2()"
  },
  {
    "label": "IndirectLightingAllowed()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "IndirectLightingAllowed(FScene* Scene, FSceneRenderer& Renderer)"
  },
  {
    "label": "ProcessPrimitiveUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessPrimitiveUpdate(FScene* Scene, FViewInfo& View, int32 PrimitiveIndex, bool bAllowUnbuiltPreview, bool bAllowVolumeSample, TMap<FIntVector, FBlockUpdateInfo>& OutBlocksToUpdate, TArray<FIndirectLightingCacheAllocation*>& OutTransitionsOverTimeToUpdate, TArray<FPrimitiveSceneInfo*>& OutPrimitivesToUpdateStaticMeshes)"
  },
  {
    "label": "UpdateCachePrimitivesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachePrimitivesInternal(FScene* Scene, FSceneRenderer& Renderer, bool bAllowUnbuiltPreview, TMap<FIntVector, FBlockUpdateInfo>& OutBlocksToUpdate, TArray<FIndirectLightingCacheAllocation*>& OutTransitionsOverTimeToUpdate, TArray<FPrimitiveSceneInfo*>& OutPrimitivesToUpdateStaticMeshes)"
  },
  {
    "label": "FinalizeUpdateInternal_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeUpdateInternal_RenderThread(FScene* Scene, FSceneRenderer& Renderer, TMap<FIntVector, FBlockUpdateInfo>& BlocksToUpdate, const TArray<FIndirectLightingCacheAllocation*>& TransitionsOverTimeToUpdate, TArray<FPrimitiveSceneInfo*>& PrimitivesToUpdateStaticMeshes)"
  },
  {
    "label": "UpdateCacheAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCacheAllocation(const FBoxSphereBounds& Bounds, int32 BlockSize, bool bPointSample, bool bUnbuiltPreview, FIndirectLightingCacheAllocation*& Allocation, TMap<FIntVector, FBlockUpdateInfo>& BlocksToUpdate, TArray<FIndirectLightingCacheAllocation*>& TransitionsOverTimeToUpdate)"
  },
  {
    "label": "UpdateCachePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachePrimitive(const TMap<FPrimitiveComponentId, FAttachmentGroupSceneInfo>& AttachmentGroups, FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bAllowUnbuiltPreview, bool bAllowVolumeSample, TMap<FIntVector, FBlockUpdateInfo>& BlocksToUpdate, TArray<FIndirectLightingCacheAllocation*>& TransitionsOverTimeToUpdate, TArray<FPrimitiveSceneInfo*>& PrimitivesToUpdateStaticMeshes)"
  },
  {
    "label": "UpdateBlocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBlocks(FScene* Scene, FViewInfo* DebugDrawingView, TMap<FIntVector, FBlockUpdateInfo>& BlocksToUpdate)"
  },
  {
    "label": "UpdateTransitionsOverTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransitionsOverTime(const TArray<FIndirectLightingCacheAllocation*>& TransitionsOverTimeToUpdate, float DeltaWorldTime)"
  },
  {
    "label": "CreateAllocation()",
    "kind": "Method",
    "detail": "Function (FIndirectLightingCacheAllocation*)",
    "insertText": "CreateAllocation(int32 BlockSize, const FBoxSphereBounds& Bounds, bool bPointSample, bool bUnbuiltPreview)"
  },
  {
    "label": "FindBlock()",
    "kind": "Method",
    "detail": "Function (FIndirectLightingCacheBlock&)",
    "insertText": "FindBlock(FIntVector TexelMin)"
  },
  {
    "label": "DeallocateBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateBlock(FIntVector Min, int32 Size)"
  },
  {
    "label": "AllocateBlock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllocateBlock(int32 Size, FIntVector& OutMin)"
  },
  {
    "label": "UpdateBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBlock(FScene* Scene, FViewInfo* DebugDrawingView, FBlockUpdateInfo& Block)"
  },
  {
    "label": "InterpolatePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolatePoint(FScene* Scene, const FIndirectLightingCacheBlock& Block, float& OutDirectionalShadowing, FSHVectorRGB3& OutIncidentRadiance, FVector& OutSkyBentNormal)"
  },
  {
    "label": "InterpolateBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateBlock(FScene* Scene, const FIndirectLightingCacheBlock& Block, TArray<float>& AccumulatedWeight, TArray<FSHVectorRGB2>& AccumulatedIncidentRadiance)"
  },
  {
    "label": "EncodeBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeBlock(FViewInfo* DebugDrawingView, const FIndirectLightingCacheBlock& Block, const TArray<float>& AccumulatedWeight, const TArray<FSHVectorRGB2>& AccumulatedIncidentRadiance, TArray<FFloat16Color>& Texture0Data, TArray<FFloat16Color>& Texture1Data, TArray<FFloat16Color>& Texture2Data)"
  },
  {
    "label": "CalculateBlockPositionAndSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateBlockPositionAndSize(const FBoxSphereBounds& Bounds, int32 TexelSize, FVector& OutMin, FVector& OutSize)"
  },
  {
    "label": "CalculateBlockScaleAndAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateBlockScaleAndAdd(FIntVector InTexelMin, int32 AllocationTexelSize, FVector InMin, FVector InSize, FVector& OutScale, FVector& OutAdd, FVector& OutMinUV, FVector& OutMaxUV)"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (bool bUpdateAllCacheEntries ; int32 CacheSize ; TRefCountPtr<IPooledRenderTarget> Texture0 ; TRefCountPtr<IPooledRenderTarget> Texture1 ; TRefCountPtr<IPooledRenderTarget> Texture2 ; TMap<FIntVector,FIndirectLightingCacheBlock> VolumeBlocks ; FTextureLayout3d BlockAllocator ; int32 NextPointId ; TMap<FPrimitiveComponentId,FIndirectLightingCacheAllocation*> PrimitiveAllocations ; class FUpdateCachePrimitivesTask ; } ; struct FPrimitiveBounds { FBoxSphereBounds BoxSphereBounds ; float MinDrawDistance ; float MaxDrawDistance ; float MaxCullDistance ; } ; struct FPrimitiveVisibilityId { int32 ByteIndex ; uint8 BitMask ; } ; namespace EOcclusionFlags { enum Type { None = 0 x0,CanBeOccluded = 0 x1,AllowApproximateOcclusion = 0 x4,HasPrecomputedVisibility = 0 x8,HasSubprimitiveQueries = 0 x10,} ; } ; class FComponentVelocityData { public : FPrimitiveSceneInfo* PrimitiveSceneInfo ; FMatrix LocalToWorld ; FMatrix PreviousLocalToWorld ; uint64 LastFrameUsed ; uint64 LastFrameUpdated ; bool bPreviousLocalToWorldValid = false ; } ; class FSceneVelocityData { public : void)",
    "insertText": "StartFrame(FScene* Scene)"
  },
  {
    "label": "GetComponentPreviousLocalToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetComponentPreviousLocalToWorld(FPrimitiveComponentId PrimitiveComponentId, FMatrix& OutPreviousLocalToWorld)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FComponentVelocityData* VelocityData = ComponentData .)",
    "insertText": "Find(PrimitiveComponentId)"
  },
  {
    "label": "UpdateTransform()",
    "kind": "Method",
    "detail": "Function (VelocityData -> LastFrameUsed = InternalFrameIndex ; OutPreviousLocalToWorld = VelocityData -> PreviousLocalToWorld ; return true ; } return false ; } void)",
    "insertText": "UpdateTransform(FPrimitiveSceneInfo* PrimitiveSceneInfo, const FMatrix& LocalToWorld, const FMatrix& PreviousLocalToWorld)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FComponentVelocityData& VelocityData = ComponentData .)",
    "insertText": "FindOrAdd(PrimitiveSceneInfo->PrimitiveComponentId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (VelocityData . LocalToWorld = LocalToWorld ; VelocityData . LastFrameUsed = InternalFrameIndex ; VelocityData . LastFrameUpdated = InternalFrameIndex ; VelocityData . PrimitiveSceneInfo = PrimitiveSceneInfo ;)",
    "insertText": "if(!VelocityData.bPreviousLocalToWorldValid)"
  },
  {
    "label": "RemoveFromScene()",
    "kind": "Method",
    "detail": "Function (VelocityData . PreviousLocalToWorld = PreviousLocalToWorld ; VelocityData . bPreviousLocalToWorldValid = true ; } } void)",
    "insertText": "RemoveFromScene(FPrimitiveComponentId PrimitiveComponentId, bool bImmediate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ComponentData .)",
    "insertText": "Remove(PrimitiveComponentId)"
  },
  {
    "label": "OverridePreviousTransform()",
    "kind": "Method",
    "detail": "Function (VelocityData -> PrimitiveSceneInfo = nullptr ; } } } void)",
    "insertText": "OverridePreviousTransform(FPrimitiveComponentId PrimitiveComponentId, const FMatrix& PreviousLocalToWorld)"
  },
  {
    "label": "ApplyOffset()",
    "kind": "Method",
    "detail": "Function (VelocityData -> PreviousLocalToWorld = PreviousLocalToWorld ; VelocityData -> bPreviousLocalToWorldValid = true ; } } void)",
    "insertText": "ApplyOffset(FVector Offset)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (FComponentVelocityData& VelocityData = It .)",
    "insertText": "Value()"
  },
  {
    "label": "SetOrigin()",
    "kind": "Method",
    "detail": "Function (VelocityData . LocalToWorld .)",
    "insertText": "SetOrigin(VelocityData.LocalToWorld.GetOrigin() + Offset)"
  },
  {
    "label": "SetOrigin()",
    "kind": "Method",
    "detail": "Function (VelocityData . PreviousLocalToWorld .)",
    "insertText": "SetOrigin(VelocityData.PreviousLocalToWorld.GetOrigin() + Offset)"
  },
  {
    "label": "FLODSceneTree()",
    "kind": "Method",
    "detail": "Function (} } private : uint64 InternalFrameIndex = 0 ; TMap<FPrimitiveComponentId,FComponentVelocityData> ComponentData ; } ; class FLODSceneTree { public :)",
    "insertText": "FLODSceneTree(FScene* InScene) : Scene(InScene)"
  },
  {
    "label": "FLODSceneNode()",
    "kind": "Method",
    "detail": "Function (} struct FLODSceneNode { TArray<FPrimitiveSceneInfo*> ChildrenSceneInfos ; FPrimitiveSceneInfo* SceneInfo ;)",
    "insertText": "FLODSceneNode() : SceneInfo(nullptr)"
  },
  {
    "label": "AddChild()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddChild(FPrimitiveSceneInfo* NewChild)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ChildrenSceneInfos .)",
    "insertText": "AddUnique(NewChild)"
  },
  {
    "label": "RemoveChild()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveChild(FPrimitiveSceneInfo* ChildToDelete)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ChildrenSceneInfos .)",
    "insertText": "Remove(ChildToDelete)"
  },
  {
    "label": "AddChildNode()",
    "kind": "Method",
    "detail": "Function (} } } ; void)",
    "insertText": "AddChildNode(FPrimitiveComponentId ParentId, FPrimitiveSceneInfo* ChildSceneInfo)"
  },
  {
    "label": "RemoveChildNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveChildNode(FPrimitiveComponentId ParentId, FPrimitiveSceneInfo* ChildSceneInfo)"
  },
  {
    "label": "UpdateNodeSceneInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNodeSceneInfo(FPrimitiveComponentId NodeId, FPrimitiveSceneInfo* SceneInfo)"
  },
  {
    "label": "UpdateVisibilityStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateVisibilityStates(FViewInfo& View, UE::Tasks::FTaskEvent& FlushCachedShadowsTaskEvent)"
  },
  {
    "label": "ClearVisibilityState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearVisibilityState(FViewInfo& View)"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "ApplyNodeFadingToChildren()",
    "kind": "Method",
    "detail": "Function (} private : FScene* Scene ; TMap<FPrimitiveComponentId,FLODSceneNode> SceneNodes ; void)",
    "insertText": "ApplyNodeFadingToChildren(FSceneViewState* ViewState, FLODSceneNode& Node, FHLODSceneNodeVisibilityState& NodeVisibility, const bool bIsFading, const bool bIsFadingOut)"
  },
  {
    "label": "HideNodeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideNodeChildren(FSceneViewState* ViewState, FLODSceneNode& Node)"
  },
  {
    "label": "InvalidateCachedShadow()",
    "kind": "Method",
    "detail": "Function (} ; # define DEBUG_CSM_CACHING 0 class FCachedShadowMapData { public : FWholeSceneProjectedShadowInitializer Initializer ; FShadowMapRenderTargetsRefCounted ShadowMap ; float LastUsedTime ; bool bCachedShadowMapHasPrimitives ; bool bCachedShadowMapHasNaniteGeometry ; TBitArray<> StaticShadowSubjectPersistentPrimitiveIdMap ; FIntPoint ShadowBufferResolution ; FVector PreShadowTranslation ; float MaxSubjectZ ; float MinSubjectZ ; int32 LastFrameExtraStaticShadowSubjects ; void)",
    "insertText": "InvalidateCachedShadow()"
  },
  {
    "label": "SetRange()",
    "kind": "Method",
    "detail": "Function (StaticShadowSubjectPersistentPrimitiveIdMap .)",
    "insertText": "SetRange(0, StaticShadowSubjectPersistentPrimitiveIdMap.Num(), false)"
  },
  {
    "label": "FCachedShadowMapData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCachedShadowMapData(const FWholeSceneProjectedShadowInitializer& InInitializer, float InLastUsedTime) : Initializer(InInitializer), LastUsedTime(InLastUsedTime), bCachedShadowMapHasPrimitives(true), bCachedShadowMapHasNaniteGeometry(false)"
  },
  {
    "label": "FPixelInspectorData()",
    "kind": "Method",
    "detail": "Function (} } ; # if WITH_EDITOR class FPixelInspectorData { public :)",
    "insertText": "FPixelInspectorData()"
  },
  {
    "label": "InitializeBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeBuffers(FRenderTarget* BufferFinalColor, FRenderTarget* BufferSceneColor, FRenderTarget* BufferDepth, FRenderTarget* BufferHDR, FRenderTarget* BufferA, FRenderTarget* BufferBCDEF, int32 bufferIndex)"
  },
  {
    "label": "AddPixelInspectorRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPixelInspectorRequest(FPixelInspectorRequest *PixelInspectorRequest)"
  },
  {
    "label": "FPersistentUniformBuffers()",
    "kind": "Method",
    "detail": "Function (TMap<FVector2f,FPixelInspectorRequest*> Requests ; FRenderTarget* RenderTargetBufferDepth [ 2 ] ; FRenderTarget* RenderTargetBufferFinalColor [ 2 ] ; FRenderTarget* RenderTargetBufferHDR [ 2 ] ; FRenderTarget* RenderTargetBufferSceneColor [ 2 ] ; FRenderTarget* RenderTargetBufferA [ 2 ] ; FRenderTarget* RenderTargetBufferBCDEF [ 2 ] ; } ; namespace EEditorSelectionStencilValues { enum Type : int32 { NotSelected = 0,BSP = 1,VisualizeLevelInstances = 2,Nanite = 3,COUNT,} ; } # endif class FPersistentUniformBuffers { public :)",
    "insertText": "FPersistentUniformBuffers()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TUniformBufferRef<FMobileDirectionalLightShaderParameters> MobileDirectionalLightUniformBuffers [ NUM_LIGHTING_CHANNELS + 1 ] ; TUniformBufferRef<FMobileReflectionCaptureShaderParameters> MobileSkyReflectionUniformBuffer ; } ; # if RHI_RAYTRACING struct FMeshComputeDispatchCommand { FMeshDrawShaderBindings ShaderBindings ; TShaderRef<class FRayTracingDynamicGeometryConverterCS> MaterialShader ; uint32 NumMaxVertices ; FRWBuffer* TargetBuffer ; } ; enum class ERayTracingMeshCommandsMode : uint8 { RAY_TRACING,PATH_TRACING,LIGHTMAP_TRACING,} ; # endif struct FLumenSceneDataKey { uint32 ViewUniqueId ; uint32 GPUIndex ; bool)",
    "insertText": "operator(const FLumenSceneDataKey& A, const FLumenSceneDataKey& B)"
  },
  {
    "label": "FLumenSceneDataIterator()",
    "kind": "Method",
    "detail": "Function (} } ; typedef TMap<FLumenSceneDataKey,FLumenSceneData*> FLumenSceneDataMap ; class FLumenSceneDataIterator { public :)",
    "insertText": "FLumenSceneDataIterator(const FScene* InScene)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FLumenSceneDataIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "RefreshRayTracingMeshCommandCache()",
    "kind": "Method",
    "detail": "Function (enum class ELightUpdateId : uint32 { Transform,Color,MAX } ; using FSceneLightInfoUpdates = TSceneUpdateCommandQueue<FLightSceneInfo,ELightDirtyFlags,ELightUpdateId> ; using FUpdateLightCommand = FSceneLightInfoUpdates::FUpdateCommand ; struct FUpdateLightTransformParameters : public FSceneLightInfoUpdates::TPayloadBase<ELightUpdateId::Transform,ELightDirtyFlags::None> { FMatrix LightToWorld ; FVector4 Position ; } ; struct FUpdateLightColorParameters : public FSceneLightInfoUpdates::TPayloadBase<ELightUpdateId::Color,ELightDirtyFlags::None> { FLinearColor NewColor ; float NewIndirectLightingScale ; float NewVolumetricScatteringIntensity ; } ; struct FLightSceneChangeSet { TConstArrayView<int32> RemovedLightIds ; TConstArrayView<int32> AddedLightIds ; FSceneLightInfoUpdates* SceneLightInfoUpdates = nullptr ; } ; class FScene : public FSceneInterface { public : UWorld* World ; class FFXSystemInterface* FXSystem ; TArray<FSceneViewState*> ViewStates ; FPersistentUniformBuffers UniformBuffers ; FStateBucketMap CachedMeshDrawCommandStateBuckets [ EMeshPass::Num ] ; FCachedPassMeshDrawList CachedDrawLists [ EMeshPass::Num ] ; # if RHI_RAYTRACING FCachedRayTracingMeshCommandStorage CachedRayTracingMeshCommands ; void)",
    "insertText": "RefreshRayTracingMeshCommandCache()"
  },
  {
    "label": "RefreshRayTracingInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshRayTracingInstances()"
  },
  {
    "label": "FPrimitiveSceneProxyType()",
    "kind": "Method",
    "detail": "Function (# endif FNaniteShadingCommands NaniteShadingCommands [ ENaniteMeshPass::Num ] ; FNaniteRasterPipelines NaniteRasterPipelines [ ENaniteMeshPass::Num ] ; FNaniteShadingPipelines NaniteShadingPipelines [ ENaniteMeshPass::Num ] ; FNaniteVisibility NaniteVisibility [ ENaniteMeshPass::Num ] ; struct FPrimitiveUpdateParams { FScene* Scene ; FPrimitiveSceneProxy* PrimitiveSceneProxy ; FBoxSphereBounds WorldBounds ; FBoxSphereBounds LocalBounds ; FMatrix LocalToWorld ; TOptional<FTransform> PreviousTransform ; FVector AttachmentRootPosition ; } ; bool bPrimitivesUpdateBatching = false ; std::atomic_int32_t PrimitiveUpdateIndex = 0 ; TArray<FPrimitiveUpdateParams> PrimitivesUpdates ; uint32 PrimitivesAlwaysVisibleOffset = ~ 0 u ; TArray<FPrimitiveSceneInfo*> Primitives ; TScenePrimitiveArray<FMatrix> PrimitiveTransforms ; TArray<FPrimitiveSceneProxy*> PrimitiveSceneProxies ; TScenePrimitiveArray<FPrimitiveBounds> PrimitiveBounds ; TArray<FPrimitiveFlagsCompact> PrimitiveFlagsCompact ; TArray<FPrimitiveVisibilityId> PrimitiveVisibilityIds ; TArray<uint32> PrimitiveOctreeIndex ; TArray<uint8> PrimitiveOcclusionFlags ; TScenePrimitiveArray<FBoxSphereBounds> PrimitiveOcclusionBounds ; TArray<FPrimitiveComponentId> PrimitiveComponentIds ; TArray<FPrimitiveVirtualTextureFlags> PrimitiveVirtualTextureFlags ; TArray<FPrimitiveVirtualTextureLodInfo> PrimitiveVirtualTextureLod ; # if RHI_RAYTRACING TArray<ERayTracingPrimitiveFlags> PrimitiveRayTracingFlags ; TArray<Experimental::FHashElementId> PrimitiveRayTracingGroupIds ; struct FRayTracingCullingGroup { FBoxSphereBounds Bounds ; float MinDrawDistance = 0 . 0 f ; TArray<FPrimitiveSceneInfo*> Primitives ; } ; Experimental::TRobinHoodHashMap<int32,FRayTracingCullingGroup> PrimitiveRayTracingGroups ; # endif TMap<FName,TArray<FPrimitiveSceneInfo*>> PrimitivesNeedingLevelUpdateNotification ; # if WITH_EDITOR TBitArray<> PrimitivesSelected ; # endif TBitArray<> PrimitivesNeedingStaticMeshUpdate ; TBitArray<> PrimitivesNeedingUniformBufferUpdate ; TArray<int32> PersistentPrimitiveIdToIndexMap ; struct FPrimitiveSceneProxyType {)",
    "insertText": "FPrimitiveSceneProxyType(const FPrimitiveSceneProxy *PrimitiveSceneProxy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FPrimitiveSceneProxyType&)"
  },
  {
    "label": "FTypeOffsetTableEntry()",
    "kind": "Method",
    "detail": "Function (SIZE_T ProxyTypeHash ; bool bIsAlwaysVisible ; } ; struct FTypeOffsetTableEntry {)",
    "insertText": "FTypeOffsetTableEntry(const FPrimitiveSceneProxyType &InPrimitiveSceneProxyType, uint32 InOffset) : PrimitiveSceneProxyType(InPrimitiveSceneProxyType), Offset(InOffset)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (} FPrimitiveSceneProxyType PrimitiveSceneProxyType ; uint32 Offset ; } ; TArray<FTypeOffsetTableEntry> TypeOffsetTable ; using FLightSceneInfoCompactSparseArray = TSparseArray<FLightSceneInfoCompact,TAlignedSparseArrayAllocator<)",
    "insertText": "alignof(FLightSceneInfoCompact)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (FLightSceneInfoCompactSparseArray Lights ; TArray<int32> LumenLightIdRemap ; int32 LumenLightIdRemapAllocator = 0 ; FLightSceneInfoCompactSparseArray InvisibleLights ; TArray<FString> OverflowingDynamicShadowedLights ; EDepthDrawingMode EarlyZPassMode ; bool bEarlyZPassMovable ; FExclusiveDepthStencil::Type DefaultBasePassDepthStencilAccess ; FExclusiveDepthStencil::Type CachedDefaultBasePassDepthStencilAccess ; bool bCachedShouldRenderSkylightInBasePass ; bool bScenesPrimitivesNeedStaticMeshElementUpdate ; TAtomic<uint32> PathTracingInvalidationCounter ; # if RHI_RAYTRACING ERayTracingMeshCommandsMode CachedRayTracingMeshCommandsMode ; # endif FSkyLightSceneProxy* SkyLight ; TRefCountPtr<FRDGPooledBuffer> SkyIrradianceEnvironmentMap ; TRefCountPtr<IPooledRenderTarget> RealTimeReflectionCaptureSkyAtmosphereViewLutTexture ; TRefCountPtr<IPooledRenderTarget> RealTimeReflectionCaptureCamera360APLutTexture ; TRefCountPtr<IPooledRenderTarget> CapturedSkyRenderTarget ; TRefCountPtr<IPooledRenderTarget> ConvolvedSkyRenderTarget [ 2 ] ; int32 ConvolvedSkyRenderTargetReadyIndex ; struct FRealTimeSlicedReflectionCapture { enum class EFirstFrameState { INIT = 0,FIRST_FRAME = 1,BEYOND_FIRST_FRAME = 2,} FirstFrameState = EFirstFrameState::INIT ; int32 State = - 1 ; int32 StateSubStep = 0 ; uint32 GpusWithFullCube = 0 ; uint32 GpusHandledThisFrame = 0 ; uint64 FrameNumber =)",
    "insertText": "uint64(-1)"
  },
  {
    "label": "UpdateRayTracedLights()",
    "kind": "Method",
    "detail": "Function (} RealTimeSlicedReflectionCapture ; TRefCountPtr<IPooledRenderTarget> PathTracingSkylightTexture ; TRefCountPtr<IPooledRenderTarget> PathTracingSkylightPdf ; FLinearColor PathTracingSkylightColor ; TArray<FSkyLightSceneProxy*> SkyLightStack ; FLightSceneInfo* SimpleDirectionalLight ; FLightSceneInfo* MobileDirectionalLights [ NUM_LIGHTING_CHANNELS ] ; FLightSceneInfo* AtmosphereLights [ NUM_ATMOSPHERE_LIGHTS ] ; TArray<FLightSceneInfo*,TInlineAllocator<4>> DirectionalLights ; TArray<FDeferredDecalProxy*> Decals ; TArray<FPrimitiveSceneInfo*> DynamicIndirectCasterPrimitives ; TArray<class FPlanarReflectionSceneProxy*> PlanarReflections ; TArray<class UPlanarReflectionComponent*> PlanarReflections_GameThread ; FReflectionEnvironmentSceneData ReflectionSceneData ; FHairStrandsSceneData HairStrandsSceneData ; FOITSceneData OITSceneData ; TArray<const FPrecomputedLightVolume*> PrecomputedLightVolumes ; FIndirectLightingCache IndirectLightingCache ; FVolumetricLightmapSceneData VolumetricLightmapSceneData ; FGPUScene GPUScene ; # if RHI_RAYTRACING FRayTracingScene RayTracingScene ; FRayTracingScene HeterogeneousVolumesRayTracingScene ; FRayTracingShaderBindingTable RayTracingSBT ; bool bHasLightsWithRayTracedShadows = false ; void)",
    "insertText": "UpdateRayTracedLights(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "FScene()",
    "kind": "Method",
    "detail": "Function (# endif FDistanceFieldSceneData DistanceFieldSceneData ; FLumenSceneData* DefaultLumenSceneData ; FLumenSceneDataMap PerViewOrGPULumenSceneData ; TMap<int32,TArray<FCachedShadowMapData>> CachedShadowMaps ; TArray<TRefCountPtr<IPooledRenderTarget>> PrevAtlasHZBs ; TArray<TRefCountPtr<IPooledRenderTarget>> PrevAtlasCompleteHZBs ; TRefCountPtr<IPooledRenderTarget> PreShadowCacheDepthZ ; TArray<TRefCountPtr<FProjectedShadowInfo>> CachedPreshadows ; FShadowScene* ShadowScene ; FTextureLayout PreshadowCacheLayout ; TSparseArray<FStaticMeshBatch*> StaticMeshes ; TArray<FExponentialHeightFogSceneInfo> ExponentialFogs ; FSkyAtmosphereRenderSceneInfo* SkyAtmosphere ; TArray<FSkyAtmosphereSceneProxy*> SkyAtmosphereStack ; FVolumetricCloudRenderSceneInfo* VolumetricCloud ; TArray<FVolumetricCloudSceneProxy*> VolumetricCloudStack ; TArray<FLocalFogVolumeSceneProxy*> LocalFogVolumes ; TArray<FSparseVolumeTextureViewerSceneProxy*> SparseVolumeTextureViewers ; class FPhysicsFieldSceneProxy* PhysicsField = nullptr ; TArray<class FWindSourceSceneProxy*> WindSources ; TArray<UWindDirectionalSourceComponent*> WindComponents_GameThread ; TMap<const UStaticMesh*,struct FSpeedTreeWindComputation*> SpeedTreeWindComputationMap ; TMap<FVertexFactory*,const UStaticMesh*> SpeedTreeVertexFactoryMap ; TMap<FPrimitiveComponentId,FAttachmentGroupSceneInfo> AttachmentGroups ; const FPrecomputedVisibilityHandler* PrecomputedVisibilityHandler ; FSceneLightOctree LocalShadowCastingLightOctree ; TArray<int32> DirectionalShadowCastingLightIDs ; FScenePrimitiveOctree PrimitiveOctree ; bool bRequiresHitProxies ; bool bIsEditorScene ; volatile int32 NumUncachedStaticLightingInteractions ; volatile int32 NumUnbuiltReflectionCaptures ; int32 NumMobileStaticAndCSMLights_RenderThread ; int32 NumMobileMovableDirectionalLights_RenderThread ; FSceneVelocityData VelocityData ; class FGPUSkinCache* GPUSkinCache ; TArray<class IComputeTaskWorker*> ComputeTaskWorkers ; TMap<FGuid,FUniformBufferRHIRef> ParameterCollections ; FLODSceneTree SceneLODHierarchy ; TSparseArray<FRuntimeVirtualTextureSceneProxy*> RuntimeVirtualTextures ; FSubstrateSceneData SubstrateSceneData ; LightFunctionAtlas::FLightFunctionAtlasSceneData LightFunctionAtlasSceneData ; uint8 RuntimeVirtualTexturePrimitiveHideMaskEditor ; uint8 RuntimeVirtualTexturePrimitiveHideMaskGame ; float DefaultMaxDistanceFieldOcclusionDistance ; float GlobalDistanceFieldViewDistance ; float DynamicIndirectShadowsSelfShadowingIntensity ; FSpanAllocator PersistentPrimitiveIdAllocator ; # if WITH_EDITOR FPixelInspectorData PixelInspectorData ; # endif # if RHI_RAYTRACING class FRayTracingDynamicGeometryCollection* RayTracingDynamicGeometryCollection ; class FRayTracingSkinnedGeometryUpdateQueue* RayTracingSkinnedGeometryUpdateQueue ; # endif FSceneExtensions SceneExtensions ; TArray<FCustomRenderPassRendererInput> CustomRenderPassRendererInputs ;)",
    "insertText": "FScene(UWorld* InWorld, bool bInRequiresHitProxies,bool bInIsEditorScene, bool bCreateFXSystem, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "FScene()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScene()"
  },
  {
    "label": "GetFullWorldName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFullWorldName()"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} Callbacks ; } ; void)",
    "insertText": "Update(FRDGBuilder& GraphBuilder, const FUpdateParameters& Parameters)"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitive(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "RemovePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimitive(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "ReleasePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePrimitive(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "BatchAddPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchAddPrimitives(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "BatchRemovePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchRemovePrimitives(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "BatchReleasePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchReleasePrimitives(TArrayView<UPrimitiveComponent*> InPrimitives)"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllPrimitiveSceneInfos(FRDGBuilder& GraphBuilder, EUpdateAllPrimitiveSceneInfosAsyncOps AsyncOps = EUpdateAllPrimitiveSceneInfosAsyncOps::None)"
  },
  {
    "label": "UpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveTransform(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "UpdatePrimitiveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveInstances(UInstancedStaticMeshComponent* Primitive)"
  },
  {
    "label": "UpdatePrimitiveOcclusionBoundsSlack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveOcclusionBoundsSlack(UPrimitiveComponent* Primitive, float NewSlack)"
  },
  {
    "label": "UpdatePrimitiveDrawDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveDrawDistance(UPrimitiveComponent* Primitive, float MinDrawDistance, float MaxDrawDistance, float VirtualTextureMaxDrawDistance)"
  },
  {
    "label": "UpdateInstanceCullDistance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInstanceCullDistance(UPrimitiveComponent* Primitive, float StartCullDistance, float EndCullDistance)"
  },
  {
    "label": "UpdatePrimitiveAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveAttachment(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "UpdateCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomPrimitiveData(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "UpdatePrimitiveDistanceFieldSceneData_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveDistanceFieldSceneData_GameThread(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "GetPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneInfo*)",
    "insertText": "GetPrimitiveSceneInfo(int32 PrimitiveIndex)"
  },
  {
    "label": "GetPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneInfo*)",
    "insertText": "GetPrimitiveSceneInfo(FPrimitiveComponentId PrimitiveId)"
  },
  {
    "label": "GetPrimitiveSceneInfo()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneInfo*)",
    "insertText": "GetPrimitiveSceneInfo(const FPersistentPrimitiveIndex& PersistentPrimitiveIndex)"
  },
  {
    "label": "GetPreviousLocalToWorld()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPreviousLocalToWorld(const FPrimitiveSceneInfo* PrimitiveSceneInfo, FMatrix& OutPreviousLocalToWorld)"
  },
  {
    "label": "AddLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLight(ULightComponent* Light)"
  },
  {
    "label": "RemoveLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLight(ULightComponent* Light)"
  },
  {
    "label": "AddInvisibleLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddInvisibleLight(ULightComponent* Light)"
  },
  {
    "label": "SetSkyLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSkyLight(FSkyLightSceneProxy* Light)"
  },
  {
    "label": "DisableSkyLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableSkyLight(FSkyLightSceneProxy* Light)"
  },
  {
    "label": "HasSkyLightRequiringLightingBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSkyLightRequiringLightingBuild()"
  },
  {
    "label": "HasAtmosphereLightRequiringLightingBuild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAtmosphereLightRequiringLightingBuild()"
  },
  {
    "label": "AddDecal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDecal(UDecalComponent* Component)"
  },
  {
    "label": "RemoveDecal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDecal(UDecalComponent* Component)"
  },
  {
    "label": "UpdateDecalTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecalTransform(UDecalComponent* Decal)"
  },
  {
    "label": "UpdateDecalFadeOutTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecalFadeOutTime(UDecalComponent* Decal)"
  },
  {
    "label": "UpdateDecalFadeInTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDecalFadeInTime(UDecalComponent* Decal)"
  },
  {
    "label": "BatchUpdateDecals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchUpdateDecals(TArray<FDeferredDecalUpdateParams>&& UpdateParams)"
  },
  {
    "label": "AddReflectionCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReflectionCapture(UReflectionCaptureComponent* Component)"
  },
  {
    "label": "RemoveReflectionCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveReflectionCapture(UReflectionCaptureComponent* Component)"
  },
  {
    "label": "GetReflectionCaptureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReflectionCaptureData(UReflectionCaptureComponent* Component, class FReflectionCaptureData& OutCaptureData)"
  },
  {
    "label": "UpdateReflectionCaptureTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReflectionCaptureTransform(UReflectionCaptureComponent* Component)"
  },
  {
    "label": "ReleaseReflectionCubemap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseReflectionCubemap(UReflectionCaptureComponent* CaptureComponent)"
  },
  {
    "label": "AddPlanarReflection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlanarReflection(class UPlanarReflectionComponent* Component)"
  },
  {
    "label": "RemovePlanarReflection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlanarReflection(UPlanarReflectionComponent* Component)"
  },
  {
    "label": "UpdatePlanarReflectionTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlanarReflectionTransform(UPlanarReflectionComponent* Component)"
  },
  {
    "label": "UpdateSceneCaptureContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSceneCaptureContents(class USceneCaptureComponent2D* CaptureComponent)"
  },
  {
    "label": "UpdateSceneCaptureContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSceneCaptureContents(class USceneCaptureComponentCube* CaptureComponent)"
  },
  {
    "label": "UpdatePlanarReflectionContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlanarReflectionContents(UPlanarReflectionComponent* CaptureComponent, FSceneRenderer& MainSceneRenderer)"
  },
  {
    "label": "AllocateReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateReflectionCaptures(const TArray<UReflectionCaptureComponent*>& NewCaptures, const TCHAR* CaptureReason, bool bVerifyOnlyCapturing, bool bCapturingForMobile, bool bInsideTick)"
  },
  {
    "label": "ResetReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReflectionCaptures(bool bOnlyIfOOM)"
  },
  {
    "label": "UpdateSkyCaptureContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSkyCaptureContents(const USkyLightComponent* CaptureComponent, bool bCaptureEmissiveOnly, UTextureCube* SourceCubemap, FTexture* OutProcessedTexture, float& OutAverageBrightness, FSHVectorRGB3& OutIrradianceEnvironmentMap, TArray<FFloat16Color>* OutRadianceMap, FLinearColor* SpecifiedCubemapColorScale)"
  },
  {
    "label": "AllocateAndCaptureFrameSkyEnvMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateAndCaptureFrameSkyEnvMap(FRDGBuilder& GraphBuilder, FSceneRenderer& SceneRenderer, FViewInfo& MainView, bool bShouldRenderSkyAtmosphere, bool bShouldRenderVolumetricCloud, FInstanceCullingManager& InstanceCullingManager, FRDGExternalAccessQueue& ExternalAccessQueue)"
  },
  {
    "label": "ValidateSkyLightRealTimeCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateSkyLightRealTimeCapture(FRDGBuilder& GraphBuilder, const FViewInfo& View, FRDGTextureRef SceneColorTexture)"
  },
  {
    "label": "ProcessAndRenderIlluminanceMeter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAndRenderIlluminanceMeter(FRDGBuilder& GraphBuilder, TArrayView<FViewInfo> Views, FRDGTextureRef SceneColorTexture)"
  },
  {
    "label": "AddPrecomputedLightVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrecomputedLightVolume(const class FPrecomputedLightVolume* Volume)"
  },
  {
    "label": "RemovePrecomputedLightVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrecomputedLightVolume(const class FPrecomputedLightVolume* Volume)"
  },
  {
    "label": "HasPrecomputedVolumetricLightmap_RenderThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPrecomputedVolumetricLightmap_RenderThread()"
  },
  {
    "label": "AddPrecomputedVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrecomputedVolumetricLightmap(const class FPrecomputedVolumetricLightmap* Volume, bool bIsPersistentLevel)"
  },
  {
    "label": "RemovePrecomputedVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrecomputedVolumetricLightmap(const class FPrecomputedVolumetricLightmap* Volume)"
  },
  {
    "label": "AddRuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRuntimeVirtualTexture(class URuntimeVirtualTextureComponent* Component)"
  },
  {
    "label": "RemoveRuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRuntimeVirtualTexture(class URuntimeVirtualTextureComponent* Component)"
  },
  {
    "label": "GetRuntimeVirtualTextureHidePrimitiveMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRuntimeVirtualTextureHidePrimitiveMask(uint8& bHideMaskEditor, uint8& bHideMaskGame)"
  },
  {
    "label": "InvalidateRuntimeVirtualTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateRuntimeVirtualTexture(class URuntimeVirtualTextureComponent* Component, FBoxSphereBounds const& WorldBounds)"
  },
  {
    "label": "InvalidatePathTracedOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidatePathTracedOutput()"
  },
  {
    "label": "InvalidateLumenSurfaceCache_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateLumenSurfaceCache_GameThread(UPrimitiveComponent* Component)"
  },
  {
    "label": "GetPrimitiveUniformShaderParameters_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrimitiveUniformShaderParameters_RenderThread(const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool& bHasPrecomputedVolumetricLightmap, FMatrix& PreviousLocalToWorld, int32& SingleCaptureIndex, bool& bOutputVelocity)"
  },
  {
    "label": "UpdateLightTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightTransform(ULightComponent* Light)"
  },
  {
    "label": "UpdateLightColorAndBrightness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightColorAndBrightness(ULightComponent* Light)"
  },
  {
    "label": "AddExponentialHeightFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExponentialHeightFog(UExponentialHeightFogComponent* FogComponent)"
  },
  {
    "label": "RemoveExponentialHeightFog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveExponentialHeightFog(UExponentialHeightFogComponent* FogComponent)"
  },
  {
    "label": "HasAnyExponentialHeightFog()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyExponentialHeightFog()"
  },
  {
    "label": "AddHairStrands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHairStrands(FHairStrandsInstance* Proxy)"
  },
  {
    "label": "RemoveHairStrands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHairStrands(FHairStrandsInstance* Proxy)"
  },
  {
    "label": "GetLightIESAtlasSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightIESAtlasSlot(const FLightSceneProxy* Proxy, FLightRenderParameters* Out)"
  },
  {
    "label": "GetRectLightAtlasSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRectLightAtlasSlot(const FRectLightSceneProxy* Proxy, FLightRenderParameters* Out)"
  },
  {
    "label": "AddLocalFogVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLocalFogVolume(class FLocalFogVolumeSceneProxy* FogProxy)"
  },
  {
    "label": "RemoveLocalFogVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLocalFogVolume(class FLocalFogVolumeSceneProxy* FogProxy)"
  },
  {
    "label": "HasAnyLocalFogVolume()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyLocalFogVolume()"
  },
  {
    "label": "AddSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSkyAtmosphere(FSkyAtmosphereSceneProxy* SkyAtmosphereSceneProxy, bool bStaticLightingBuilt)"
  },
  {
    "label": "RemoveSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSkyAtmosphere(FSkyAtmosphereSceneProxy* SkyAtmosphereSceneProxy)"
  },
  {
    "label": "GetSkyAtmosphereSceneInfo()",
    "kind": "Method",
    "detail": "Function (FSkyAtmosphereRenderSceneInfo*)",
    "insertText": "GetSkyAtmosphereSceneInfo()"
  },
  {
    "label": "RemoveSparseVolumeTextureViewer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSparseVolumeTextureViewer(FSparseVolumeTextureViewerSceneProxy* SVTV)"
  },
  {
    "label": "SetPhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPhysicsField(class FPhysicsFieldSceneProxy* PhysicsFieldSceneProxy)"
  },
  {
    "label": "ResetPhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPhysicsField()"
  },
  {
    "label": "ShowPhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowPhysicsField()"
  },
  {
    "label": "UpdatePhysicsField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePhysicsField(FRDGBuilder& GraphBuilder, FViewInfo& View)"
  },
  {
    "label": "AddVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVolumetricCloud(FVolumetricCloudSceneProxy* VolumetricCloudSceneProxy)"
  },
  {
    "label": "RemoveVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVolumetricCloud(FVolumetricCloudSceneProxy* VolumetricCloudSceneProxy)"
  },
  {
    "label": "GetVolumetricCloudSceneInfo()",
    "kind": "Method",
    "detail": "Function (FVolumetricCloudRenderSceneInfo*)",
    "insertText": "GetVolumetricCloudSceneInfo()"
  },
  {
    "label": "RemoveWindSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveWindSource(UWindDirectionalSourceComponent* WindComponent)"
  },
  {
    "label": "UpdateWindSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateWindSource(UWindDirectionalSourceComponent* WindComponent)"
  },
  {
    "label": "GetWindSources_RenderThread()",
    "kind": "Method",
    "detail": "Function (const TArray<FWindSourceSceneProxy*>&)",
    "insertText": "GetWindSources_RenderThread()"
  },
  {
    "label": "GetWindParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindParameters(const FVector& Position, FVector& OutDirection, float& OutSpeed, float& OutMinGustAmt, float& OutMaxGustAmt)"
  },
  {
    "label": "GetWindParameters_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWindParameters_GameThread(const FVector& Position, FVector& OutDirection, float& OutSpeed, float& OutMinGustAmt, float& OutMaxGustAmt)"
  },
  {
    "label": "GetDirectionalWindParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDirectionalWindParameters(FVector& OutDirection, float& OutSpeed, float& OutMinGustAmt, float& OutMaxGustAmt)"
  },
  {
    "label": "AddSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpeedTreeWind(FVertexFactory* VertexFactory, const UStaticMesh* StaticMesh)"
  },
  {
    "label": "RemoveSpeedTreeWind_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSpeedTreeWind_RenderThread(FVertexFactory* VertexFactory, const UStaticMesh* StaticMesh)"
  },
  {
    "label": "UpdateSpeedTreeWind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpeedTreeWind(double CurrentTime)"
  },
  {
    "label": "GetSpeedTreeUniformBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer*)",
    "insertText": "GetSpeedTreeUniformBuffer(const FVertexFactory* VertexFactory)"
  },
  {
    "label": "DumpUnbuiltLightInteractions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpUnbuiltLightInteractions(FOutputDevice& Ar)"
  },
  {
    "label": "UpdateParameterCollections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateParameterCollections(const TArray<FMaterialParameterCollectionInstanceResource*>& InParameterCollections)"
  },
  {
    "label": "RequestGPUSceneUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestGPUSceneUpdate(FPrimitiveSceneInfo& PrimitiveSceneInfo, EPrimitiveDirtyState PrimitiveDirtyState)"
  },
  {
    "label": "RequestUniformBufferUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestUniformBufferUpdate(FPrimitiveSceneInfo& PrimitiveSceneInfo)"
  },
  {
    "label": "RefreshNaniteRasterBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshNaniteRasterBins(FPrimitiveSceneInfo& PrimitiveSceneInfo)"
  },
  {
    "label": "ReloadNaniteFixedFunctionBins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadNaniteFixedFunctionBins()"
  },
  {
    "label": "GetVirtualShadowMapCache()",
    "kind": "Method",
    "detail": "Function (FVirtualShadowMapArrayCacheManager*)",
    "insertText": "GetVirtualShadowMapCache()"
  },
  {
    "label": "FindLumenSceneData()",
    "kind": "Method",
    "detail": "Function (FLumenSceneData*)",
    "insertText": "FindLumenSceneData(uint32 ViewKey, uint32 GPUIndex)"
  },
  {
    "label": "GetLumenSceneData()",
    "kind": "Method",
    "detail": "Function (FLumenSceneData*)",
    "insertText": "GetLumenSceneData(const FViewInfo& View)"
  },
  {
    "label": "GetLumenSceneData()",
    "kind": "Method",
    "detail": "Function (} } FLumenSceneData*)",
    "insertText": "GetLumenSceneData(const FSceneView& View)"
  },
  {
    "label": "FindLumenSceneData()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "FindLumenSceneData(View.State ? ((const FSceneViewState*)View.State)->GetShareOriginViewKey() : 0, View.GPUMask.GetFirstIndex())"
  },
  {
    "label": "AddPrimitive()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddPrimitive(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "RemovePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimitive(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "ReleasePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleasePrimitive(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "UpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveTransform(FPrimitiveSceneDesc* Primitive)"
  },
  {
    "label": "BatchAddPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchAddPrimitives(TArrayView<FPrimitiveSceneDesc*> InPrimitives)"
  },
  {
    "label": "BatchRemovePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchRemovePrimitives(TArrayView<FPrimitiveSceneDesc*> InPrimitives)"
  },
  {
    "label": "BatchReleasePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BatchReleasePrimitives(TArrayView<FPrimitiveSceneDesc*> InPrimitives)"
  },
  {
    "label": "UpdateCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomPrimitiveData(FPrimitiveSceneDesc* Primitive, const FCustomPrimitiveData& CustomPrimitiveData)"
  },
  {
    "label": "UpdatePrimitiveInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveInstances(FInstancedStaticMeshSceneDesc* Primitive)"
  },
  {
    "label": "HasSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSkyAtmosphere()"
  },
  {
    "label": "HasVolumetricCloud()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasVolumetricCloud()"
  },
  {
    "label": "IsSecondAtmosphereLightEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSecondAtmosphereLightEnabled()"
  },
  {
    "label": "GetRelevantLights()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRelevantLights(UPrimitiveComponent* Primitive, TArray<const ULightComponent*>* RelevantLights)"
  },
  {
    "label": "SetPrecomputedVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPrecomputedVisibility(const FPrecomputedVisibilityHandler* InPrecomputedVisibilityHandler)"
  },
  {
    "label": "UpdateStaticDrawLists()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStaticDrawLists()"
  },
  {
    "label": "UpdateCachedRenderStates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedRenderStates(FPrimitiveSceneProxy* SceneProxy)"
  },
  {
    "label": "UpdatePrimitiveSelectedState_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveSelectedState_RenderThread(const FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bIsSelected)"
  },
  {
    "label": "UpdatePrimitiveVelocityState_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveVelocityState_RenderThread(FPrimitiveSceneInfo* PrimitiveSceneInfo, bool bIsBeingMoved)"
  },
  {
    "label": "UpdateEarlyZPassMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEarlyZPassMode()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "FindClosestPlanarReflection()",
    "kind": "Method",
    "detail": "Function (const class FPlanarReflectionSceneProxy*)",
    "insertText": "FindClosestPlanarReflection(const FBoxSphereBounds& Bounds)"
  },
  {
    "label": "GetForwardPassGlobalPlanarReflection()",
    "kind": "Method",
    "detail": "Function (const class FPlanarReflectionSceneProxy*)",
    "insertText": "GetForwardPassGlobalPlanarReflection()"
  },
  {
    "label": "FindClosestReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindClosestReflectionCaptures(FVector Position, const FReflectionCaptureProxy* (&SortedByDistanceOUT)[FPrimitiveSceneInfo::MaxCachedReflectionCaptureProxies])"
  },
  {
    "label": "GetCachedWholeSceneShadowMapsSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetCachedWholeSceneShadowMapsSize()"
  },
  {
    "label": "GetDefaultBasePassDepthStencilAccess()",
    "kind": "Method",
    "detail": "Function (FExclusiveDepthStencil::Type)",
    "insertText": "GetDefaultBasePassDepthStencilAccess(ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetEarlyZPassMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEarlyZPassMode(ERHIFeatureLevel::Type InFeatureLevel, EDepthDrawingMode& OutZPassMode, bool& bOutEarlyZPassMovable)"
  },
  {
    "label": "RequiresHitProxies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresHitProxies()"
  },
  {
    "label": "GetSizeBytes()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetSizeBytes()"
  },
  {
    "label": "GetRenderScene()",
    "kind": "Method",
    "detail": "Function (FScene*)",
    "insertText": "GetRenderScene()"
  },
  {
    "label": "UpdateSceneSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSceneSettings(AWorldSettings* WorldSettings)"
  },
  {
    "label": "GetGPUSkinCache()",
    "kind": "Method",
    "detail": "Function (class FGPUSkinCache*)",
    "insertText": "GetGPUSkinCache()"
  },
  {
    "label": "UpdateCachedRayTracingState()",
    "kind": "Method",
    "detail": "Function (OutWorkers = ComputeTaskWorkers ; } # if RHI_RAYTRACING void)",
    "insertText": "UpdateCachedRayTracingState(class FPrimitiveSceneProxy* SceneProxy)"
  },
  {
    "label": "GetRayTracingDynamicGeometryCollection()",
    "kind": "Method",
    "detail": "Function (FRayTracingDynamicGeometryCollection*)",
    "insertText": "GetRayTracingDynamicGeometryCollection()"
  },
  {
    "label": "GetFXSystem()",
    "kind": "Method",
    "detail": "Function (class FFXSystemInterface*)",
    "insertText": "GetFXSystem()"
  },
  {
    "label": "Export()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Export(FArchive& Ar)"
  },
  {
    "label": "GetParameterCollectionBuffer()",
    "kind": "Method",
    "detail": "Function (FRHIUniformBuffer*)",
    "insertText": "GetParameterCollectionBuffer(const FGuid& InId)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FUniformBufferRHIRef* ExistingUniformBuffer = ParameterCollections .)",
    "insertText": "Find(InId)"
  },
  {
    "label": "OnLevelAddedToWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelAddedToWorld(const FName& InLevelName, UWorld* InWorld, bool bIsLightingScenario)"
  },
  {
    "label": "OnLevelRemovedFromWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLevelRemovedFromWorld(const FName& LevelRemovedName, UWorld* InWorld, bool bIsLightingScenario)"
  },
  {
    "label": "HasAnyLights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyLights()"
  },
  {
    "label": "GetPrimitiveSceneProxies()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FPrimitiveSceneProxy*>)",
    "insertText": "GetPrimitiveSceneProxies()"
  },
  {
    "label": "FlushDirtyRuntimeVirtualTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushDirtyRuntimeVirtualTextures()"
  },
  {
    "label": "InitializePixelInspector()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "InitializePixelInspector(FRenderTarget* BufferFinalColor, FRenderTarget* BufferSceneColor, FRenderTarget* BufferDepth, FRenderTarget* BufferHDR, FRenderTarget* BufferA, FRenderTarget* BufferBCDEF, int32 BufferIndex)"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "StartFrame()"
  },
  {
    "label": "StartFrame()",
    "kind": "Method",
    "detail": "Function (VelocityData .)",
    "insertText": "StartFrame(this)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndFrame(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "UpdateAllPrimitiveSceneInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllPrimitiveSceneInfos(RHICmdList)"
  },
  {
    "label": "GetFrameNumber()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetFrameNumber()"
  },
  {
    "label": "GetFrameNumberRenderThread()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFrameNumberRenderThread()"
  },
  {
    "label": "DumpMeshDrawCommandMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMeshDrawCommandMemoryStats()"
  },
  {
    "label": "GetCachedShadowMapDataRef()",
    "kind": "Method",
    "detail": "Function (} FCachedShadowMapData&)",
    "insertText": "GetCachedShadowMapDataRef(int32 LightID, int32 ShadowMapIndex = 0)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (TArray<FCachedShadowMapData>& CachedShadowMapDatas = CachedShadowMaps .)",
    "insertText": "FindChecked(LightID)"
  },
  {
    "label": "GetPrimitiveIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPrimitiveIndex(const FPersistentPrimitiveIndex& PersistentPrimitiveIndex)"
  },
  {
    "label": "WaitForCreateLightPrimitiveInteractionsTask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForCreateLightPrimitiveInteractionsTask()"
  },
  {
    "label": "CSV_SCOPED_SET_WAIT_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_SET_WAIT_STAT(LightPrimitiveInteractions)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (CreateLightPrimitiveInteractionsTask .)",
    "insertText": "Wait()"
  },
  {
    "label": "GetCreateLightPrimitiveInteractionsTask()",
    "kind": "Method",
    "detail": "Function (} UE::Tasks::FTask)",
    "insertText": "GetCreateLightPrimitiveInteractionsTask()"
  },
  {
    "label": "CSV_SCOPED_SET_WAIT_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_SET_WAIT_STAT(GPUSkinCache)"
  },
  {
    "label": "GetGPUSkinCacheTask()",
    "kind": "Method",
    "detail": "Function (} UE::Tasks::FTask)",
    "insertText": "GetGPUSkinCacheTask()"
  },
  {
    "label": "CSV_SCOPED_SET_WAIT_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_SET_WAIT_STAT(CacheMeshDrawCommands)"
  },
  {
    "label": "GetCacheMeshDrawCommandsTask()",
    "kind": "Method",
    "detail": "Function (} UE::Tasks::FTask)",
    "insertText": "GetCacheMeshDrawCommandsTask()"
  },
  {
    "label": "CSV_SCOPED_SET_WAIT_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_SET_WAIT_STAT(CacheNaniteMaterialBins)"
  },
  {
    "label": "GetCacheNaniteMaterialBinsTask()",
    "kind": "Method",
    "detail": "Function (} UE::Tasks::FTask)",
    "insertText": "GetCacheNaniteMaterialBinsTask()"
  },
  {
    "label": "CSV_SCOPED_SET_WAIT_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_SET_WAIT_STAT(CacheRayTracingPrimitives)"
  },
  {
    "label": "GetCacheRayTracingPrimitivesTask()",
    "kind": "Method",
    "detail": "Function (} UE::Tasks::FTask)",
    "insertText": "GetCacheRayTracingPrimitivesTask()"
  },
  {
    "label": "LumenUpdatePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LumenUpdatePrimitive(FPrimitiveSceneInfo* InPrimitive)"
  },
  {
    "label": "LumenInvalidateSurfaceCacheForPrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LumenInvalidateSurfaceCacheForPrimitive(FPrimitiveSceneInfo* InPrimitive)"
  },
  {
    "label": "LumenRemovePrimitive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LumenRemovePrimitive(FPrimitiveSceneInfo* InPrimitive, int32 PrimitiveIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) void DebugRender(TArrayView<FViewInfo> Views)"
  },
  {
    "label": "GetExtensionPtr()",
    "kind": "Method",
    "detail": "Function (# endif template<TExtension> TExtension*)",
    "insertText": "GetExtensionPtr()"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (} template<TExtension> TExtension&)",
    "insertText": "GetExtension()"
  },
  {
    "label": "AddCustomRenderPass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddCustomRenderPass(const FSceneViewFamily* ViewFamily, const FCustomRenderPassRendererInput& CustomRenderPassInput)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FSceneCulling* SceneCulling = nullptr ; class FInstanceCullingOcclusionQueryRenderer* InstanceCullingOcclusionQueryRenderer = nullptr ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FSceneLightSceneInfoUpdateDelegate, FRDGBuilder& , const FLightSceneChangeSet&)"
  },
  {
    "label": "GetRelevantLights_RenderThread()",
    "kind": "Method",
    "detail": "Function (FSceneLightSceneInfoUpdateDelegate OnPreLightSceneInfoUpdate ; FSceneLightSceneInfoUpdateDelegate OnPostLightSceneInfoUpdate ; void)",
    "insertText": "GetRelevantLights_RenderThread(const FPrimitiveSceneProxy* PrimitiveSceneProxy, TArray<const FLightSceneProxy*> &OutRelevantLights)"
  },
  {
    "label": "UpdatePrimitiveInstancesFromCompute()",
    "kind": "Method",
    "detail": "Function (protected : private : class FSceneComputeUpdates ; void)",
    "insertText": "UpdatePrimitiveInstancesFromCompute(FPrimitiveSceneInfo* PrimitiveSceneInfo, FGPUSceneWriteDelegate&& DataWriterGPU)"
  },
  {
    "label": "BatchAddPrimitivesInternal()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "BatchAddPrimitivesInternal(TArrayView<T*> InPrimitives)"
  },
  {
    "label": "BatchRemovePrimitivesInternal()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "BatchRemovePrimitivesInternal(TArrayView<T*> InPrimitives)"
  },
  {
    "label": "BatchReleasePrimitivesInternal()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "BatchReleasePrimitivesInternal(TArrayView<T*> InPrimitives)"
  },
  {
    "label": "UpdatePrimitiveTransformInternal()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "UpdatePrimitiveTransformInternal(T* Primitive)"
  },
  {
    "label": "StartUpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartUpdatePrimitiveTransform(int32 NumPrimitives)"
  },
  {
    "label": "FinishUpdatePrimitiveTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishUpdatePrimitiveTransform()"
  },
  {
    "label": "RemoveViewLumenSceneData_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewLumenSceneData_RenderThread(FSceneViewStateInterface* ViewState)"
  },
  {
    "label": "RemoveViewState_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveViewState_RenderThread(FSceneViewStateInterface*)"
  },
  {
    "label": "CheckPrimitiveArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckPrimitiveArrays(int MaxTypeOffsetIndex = -1)"
  },
  {
    "label": "AddPrimitiveSceneInfo_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPrimitiveSceneInfo_RenderThread(FPrimitiveSceneInfo* PrimitiveSceneInfo, const TOptional<FTransform>& PreviousTransform)"
  },
  {
    "label": "RemovePrimitiveSceneInfo_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePrimitiveSceneInfo_RenderThread(FPrimitiveSceneInfo* PrimitiveSceneInfo)"
  },
  {
    "label": "UpdatePrimitiveTransform_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveTransform_RenderThread(FPrimitiveSceneProxy* PrimitiveSceneProxy, const FBoxSphereBounds& WorldBounds, const FBoxSphereBounds& LocalBounds, const FMatrix& LocalToWorld, const FVector& OwnerPosition, const TOptional<FTransform>& PreviousTransform)"
  },
  {
    "label": "UpdatePrimitiveOcclusionBoundsSlack_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveOcclusionBoundsSlack_RenderThread(const FPrimitiveSceneProxy* PrimitiveSceneProxy, float NewSlack)"
  },
  {
    "label": "UpdateCustomPrimitiveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCustomPrimitiveData(FPrimitiveSceneProxy* SceneProxy, const FCustomPrimitiveData& CustomPrimitiveData)"
  },
  {
    "label": "UpdatePrimitiveLightingAttachmentRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePrimitiveLightingAttachmentRoot(UPrimitiveComponent* Primitive)"
  },
  {
    "label": "AssignAvailableShadowMapChannelForLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignAvailableShadowMapChannelForLight(FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "AddLightSceneInfo_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddLightSceneInfo_RenderThread(FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "AddOrRemoveDecal_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrRemoveDecal_RenderThread(FDeferredDecalProxy* Component, bool bAdd)"
  },
  {
    "label": "RemoveLightSceneInfo_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLightSceneInfo_RenderThread(FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "UpdateLightTransform_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLightTransform_RenderThread(int32 LightId, FLightSceneInfo* LightSceneInfo, const struct FUpdateLightTransformParameters& Parameters)"
  },
  {
    "label": "CaptureOrUploadReflectionCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureOrUploadReflectionCapture(UReflectionCaptureComponent* CaptureComponent, int32 ReflectionCaptureSize, bool bVerifyOnlyCapturing, bool bCapturingForMobile, bool bInsideTick)"
  },
  {
    "label": "UpdateAllReflectionCaptures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllReflectionCaptures(const TCHAR* CaptureReason, int32 ReflectionCaptureSize, bool bVerifyOnlyCapturing, bool bCapturingForMobile, bool bInsideTick)"
  },
  {
    "label": "UpdateStaticDrawLists_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStaticDrawLists_RenderThread(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "AddRuntimeVirtualTexture_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRuntimeVirtualTexture_RenderThread(FRuntimeVirtualTextureSceneProxy* SceneProxy)"
  },
  {
    "label": "UpdateRuntimeVirtualTexture_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRuntimeVirtualTexture_RenderThread(FRuntimeVirtualTextureSceneProxy* SceneProxy, FRuntimeVirtualTextureSceneProxy* SceneProxyToReplace)"
  },
  {
    "label": "RemoveRuntimeVirtualTexture_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRuntimeVirtualTexture_RenderThread(FRuntimeVirtualTextureSceneProxy* SceneProxy)"
  },
  {
    "label": "UpdateRuntimeVirtualTextureForAllPrimitives_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRuntimeVirtualTextureForAllPrimitives_RenderThread()"
  },
  {
    "label": "ApplyWorldOffset_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset_RenderThread(FRHICommandListBase& RHICmdList, const FVector& InOffset)"
  },
  {
    "label": "ProcessAtmosphereLightRemoval_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAtmosphereLightRemoval_RenderThread(FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "ProcessAtmosphereLightAddition_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAtmosphereLightAddition_RenderThread(FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "UpdateAllLightSceneInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateAllLightSceneInfos(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "UpdatePrimitiveInternal()",
    "kind": "Method",
    "detail": "Function (private : template<UpdatePayloadType> void)",
    "insertText": "UpdatePrimitiveInternal(FPrimitiveSceneProxy* SceneProxy, UpdatePayloadType &&InUpdatePayload)"
  },
  {
    "label": "UpdateLightInternal()",
    "kind": "Method",
    "detail": "Function (template<UpdatePayloadType> void)",
    "insertText": "UpdateLightInternal(FLightSceneProxy* LightSceneProxy, UpdatePayloadType &&InUpdatePayload)"
  },
  {
    "label": "UpdateCachedShadowState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCachedShadowState(const FScenePreUpdateChangeSet &ScenePreUpdateChangeSet, const FScenePostUpdateChangeSet &ScenePostUpdateChangeSet)"
  },
  {
    "label": "UpdateRayTracingGroupBounds_AddPrimitives()",
    "kind": "Method",
    "detail": "Function (FString FullWorldName ; # if RHI_RAYTRACING void)",
    "insertText": "UpdateRayTracingGroupBounds_AddPrimitives(const TArray<FPrimitiveSceneInfo*, SceneRenderingAllocator>& PrimitiveSceneInfos)"
  },
  {
    "label": "UpdateRayTracingGroupBounds_RemovePrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRayTracingGroupBounds_RemovePrimitives(const TArray<FPrimitiveSceneInfo*, SceneRenderingAllocator>& PrimitiveSceneInfos)"
  },
  {
    "label": "UpdateRayTracingGroupBounds_UpdatePrimitives()",
    "kind": "Method",
    "detail": "Function (template<RangeType> void)",
    "insertText": "UpdateRayTracingGroupBounds_UpdatePrimitives(const RangeType& UpdatedTransforms)"
  },
  {
    "label": "UpdatePrimitiveInstances()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UpdatePrimitiveInstances(FUpdateInstanceCommand& UpdateParams)"
  },
  {
    "label": "ShouldIncludeDomainInMeshPass()",
    "kind": "Method",
    "detail": "Function (struct FLevelCommand { enum class EOp { Add,Remove } ; FName Name ; EOp Op ; } ; FScenePrimitiveUpdates PrimitiveUpdates ; TArray<FLevelCommand> LevelCommands ; UE::Tasks::FTask CreateLightPrimitiveInteractionsTask ; UE::Tasks::FTask GPUSkinCacheTask ; UE::Tasks::FTask CacheMeshDrawCommandsTask ; UE::Tasks::FTask CacheNaniteMaterialBinsTask ; # if RHI_RAYTRACING UE::Tasks::FTask CacheRayTracingPrimitivesTask ; # endif FSceneLightInfoUpdates* SceneLightInfoUpdates ; int32 NumVisibleLights_GameThread ; int32 NumEnabledSkylights_GameThread ; uint32 SceneFrameNumber ; uint32 SceneFrameNumberRenderThread ; uint32 LastUpdateFrameCounter = UINT32_MAX ; bool bForceNoPrecomputedLighting ; class FSceneViewState ; } ; bool)",
    "insertText": "ShouldIncludeDomainInMeshPass(EMaterialDomain Domain)"
  }
]