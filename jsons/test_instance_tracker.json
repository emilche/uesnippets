[
  {
    "label": "BaseCountedInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseCountedInstance"
  },
  {
    "label": "InstanceTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstanceTracker"
  },
  {
    "label": "CopyableOnlyInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyableOnlyInstance"
  },
  {
    "label": "CopyableMovableInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyableMovableInstance"
  },
  {
    "label": "MovableOnlyInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MovableOnlyInstance"
  },
  {
    "label": "BaseCountedInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_TEST_INSTANCE_TRACKER_H_ # define ABSL_CONTAINER_INTERNAL_TEST_INSTANCE_TRACKER_H_ # include<cstdlib> # include<ostream> # include \" absl / types / compare . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace test_internal { class BaseCountedInstance { public :)",
    "insertText": "BaseCountedInstance(int x) : value_(x)"
  },
  {
    "label": "BaseCountedInstance()",
    "kind": "Method",
    "detail": "Function (+ + num_instances_ ; + + num_live_instances_ ; })",
    "insertText": "BaseCountedInstance(const BaseCountedInstance& x) : value_(x.value_), is_live_(x.is_live_)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + num_instances_ ;)",
    "insertText": "if(is_live_)"
  },
  {
    "label": "BaseCountedInstance()",
    "kind": "Method",
    "detail": "Function (+ + num_copies_ ; })",
    "insertText": "BaseCountedInstance(BaseCountedInstance&& x) : value_(x.value_), is_live_(x.is_live_)"
  },
  {
    "label": "BaseCountedInstance()",
    "kind": "Method",
    "detail": "Function (x . is_live_ = false ; + + num_instances_ ; + + num_moves_ ; } ~)",
    "insertText": "BaseCountedInstance()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BaseCountedInstance&)",
    "insertText": "operator(const BaseCountedInstance& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + num_copies_ ; return* this ; } BaseCountedInstance&)",
    "insertText": "operator(BaseCountedInstance&& x)"
  },
  {
    "label": "compare()",
    "kind": "Method",
    "detail": "Function (+ + num_comparisons_ ; return value_> = x . value_ ; } absl::weak_ordering)",
    "insertText": "compare(const BaseCountedInstance& x)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (+ + num_comparisons_ ; return value_<x . value_ ? absl::weak_ordering::less : value_ = = x . value_ ? absl::weak_ordering::equivalent : absl::weak_ordering::greater ; } int)",
    "insertText": "value()"
  },
  {
    "label": "SwapImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapImpl(BaseCountedInstance& lhs, BaseCountedInstance& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ;)",
    "insertText": "swap(lhs.value_, rhs.value_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(lhs.is_live_, rhs.is_live_)"
  },
  {
    "label": "InstanceTracker()",
    "kind": "Method",
    "detail": "Function (+ + BaseCountedInstance::num_swaps_ ; } private : class InstanceTracker ; int value_ ; bool is_live_ = true ; int num_instances_ ; int num_live_instances_ ; int num_moves_ ; int num_copies_ ; int num_swaps_ ; int num_comparisons_ ; } ; class InstanceTracker { public :)",
    "insertText": "InstanceTracker() : start_instances_(BaseCountedInstance::num_instances_), start_live_instances_(BaseCountedInstance::num_live_instances_)"
  },
  {
    "label": "ResetCopiesMovesSwaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetCopiesMovesSwaps()"
  },
  {
    "label": "InstanceTracker()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "InstanceTracker()"
  },
  {
    "label": "instances()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "instances()"
  },
  {
    "label": "CopyableOnlyInstance()",
    "kind": "Method",
    "detail": "Function (start_moves_ = BaseCountedInstance::num_moves_ ; start_copies_ = BaseCountedInstance::num_copies_ ; start_swaps_ = BaseCountedInstance::num_swaps_ ; start_comparisons_ = BaseCountedInstance::num_comparisons_ ; } private : int start_instances_ ; int start_live_instances_ ; int start_moves_ ; int start_copies_ ; int start_swaps_ ; int start_comparisons_ ; } ; class CopyableOnlyInstance : public BaseCountedInstance { public :)",
    "insertText": "CopyableOnlyInstance(int x) : BaseCountedInstance(x)"
  },
  {
    "label": "CopyableOnlyInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CopyableOnlyInstance(const CopyableOnlyInstance& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyableOnlyInstance&)",
    "insertText": "operator(const CopyableOnlyInstance& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(CopyableOnlyInstance& lhs, CopyableOnlyInstance& rhs)"
  },
  {
    "label": "SwapImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapImpl(lhs, rhs)"
  },
  {
    "label": "supports_move()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "supports_move()"
  },
  {
    "label": "CopyableMovableInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CopyableMovableInstance(const CopyableMovableInstance& rhs)"
  },
  {
    "label": "CopyableMovableInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyableMovableInstance(CopyableMovableInstance&& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyableMovableInstance&)",
    "insertText": "operator(const CopyableMovableInstance& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyableMovableInstance&)",
    "insertText": "operator(CopyableMovableInstance&& rhs)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(CopyableMovableInstance& lhs, CopyableMovableInstance& rhs)"
  },
  {
    "label": "MovableOnlyInstance()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MovableOnlyInstance(MovableOnlyInstance&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MovableOnlyInstance&)",
    "insertText": "operator(MovableOnlyInstance&& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(MovableOnlyInstance& lhs, MovableOnlyInstance& rhs)"
  }
]