[
  {
    "label": "MachineOperandIteratorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineOperandIteratorBase"
  },
  {
    "label": "VirtRegInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VirtRegInfo"
  },
  {
    "label": "PhysRegInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PhysRegInfo"
  },
  {
    "label": "MIOperands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MIOperands"
  },
  {
    "label": "ConstMIOperands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstMIOperands"
  },
  {
    "label": "MIBundleOperands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MIBundleOperands"
  },
  {
    "label": "ConstMIBundleOperands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstMIBundleOperands"
  },
  {
    "label": "finalizeBundle()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_MACHINEINSTRBUNDLE_H # define LLVM_CODEGEN_MACHINEINSTRBUNDLE_H # include \" llvm / CodeGen / MachineBasicBlock . h \" namespace llvm { void)",
    "insertText": "finalizeBundle(MachineBasicBlock &MBB, MachineBasicBlock::instr_iterator FirstMI, MachineBasicBlock::instr_iterator LastMI)"
  },
  {
    "label": "finalizeBundle()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::instr_iterator)",
    "insertText": "finalizeBundle(MachineBasicBlock &MBB, MachineBasicBlock::instr_iterator FirstMI)"
  },
  {
    "label": "finalizeBundles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "finalizeBundles(MachineFunction &MF)"
  },
  {
    "label": "getBundleStart()",
    "kind": "Method",
    "detail": "Function (MachineInstr*)",
    "insertText": "getBundleStart(MachineInstr *MI)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::instr_iterator I = MI ;)",
    "insertText": "while(I->isBundledWithPred())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::instr_iterator I = MI ;)",
    "insertText": "while(I->isBundledWithSucc())"
  },
  {
    "label": "operands_begin()",
    "kind": "Method",
    "detail": "Function (OpI = InstrI ->)",
    "insertText": "operands_begin()"
  },
  {
    "label": "operands_end()",
    "kind": "Method",
    "detail": "Function (OpE = InstrI ->)",
    "insertText": "operands_end()"
  },
  {
    "label": "MachineOperandIteratorBase()",
    "kind": "Method",
    "detail": "Function (} } protected :)",
    "insertText": "MachineOperandIteratorBase(MachineInstr *MI, bool WholeBundle)"
  },
  {
    "label": "getBundleStart()",
    "kind": "Method",
    "detail": "Function (InstrI =)",
    "insertText": "getBundleStart(MI)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (InstrE = MI ->)",
    "insertText": "getParent()->instr_end()"
  },
  {
    "label": "deref()",
    "kind": "Method",
    "detail": "Function (} MachineOperand&)",
    "insertText": "deref()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isValid() && \"Cannot advance MIOperands beyond the last operand\")"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (+ + OpI ;)",
    "insertText": "advance()"
  },
  {
    "label": "getOperandNo()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getOperandNo()"
  },
  {
    "label": "analyzeVirtReg()",
    "kind": "Method",
    "detail": "Function (} struct VirtRegInfo { bool Reads ; bool Writes ; bool Tied ; } ; struct PhysRegInfo { bool Clobbers ; bool Defines ; bool Reads ; bool ReadsOverlap ; bool DefinesDead ; bool Kills ; } ; VirtRegInfo)",
    "insertText": "analyzeVirtReg(unsigned Reg, SmallVectorImpl<std::pair<MachineInstr*, unsigned> > *Ops = nullptr)"
  },
  {
    "label": "analyzePhysReg()",
    "kind": "Method",
    "detail": "Function (PhysRegInfo)",
    "insertText": "analyzePhysReg(unsigned Reg, const TargetRegisterInfo *TRI)"
  },
  {
    "label": "MIOperands()",
    "kind": "Method",
    "detail": "Function (} ; class MIOperands : public MachineOperandIteratorBase { public :)",
    "insertText": "MIOperands(MachineInstr *MI) : MachineOperandIteratorBase(MI, false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} MachineOperand&)",
    "insertText": "operator()"
  },
  {
    "label": "ConstMIOperands()",
    "kind": "Method",
    "detail": "Function (} } ; class ConstMIOperands : public MachineOperandIteratorBase { public :)",
    "insertText": "ConstMIOperands(const MachineInstr *MI) : MachineOperandIteratorBase(const_cast<MachineInstr*>(MI), false)"
  },
  {
    "label": "MIBundleOperands()",
    "kind": "Method",
    "detail": "Function (} } ; class MIBundleOperands : public MachineOperandIteratorBase { public :)",
    "insertText": "MIBundleOperands(MachineInstr *MI) : MachineOperandIteratorBase(MI, true)"
  },
  {
    "label": "ConstMIBundleOperands()",
    "kind": "Method",
    "detail": "Function (} } ; class ConstMIBundleOperands : public MachineOperandIteratorBase { public :)",
    "insertText": "ConstMIBundleOperands(const MachineInstr *MI) : MachineOperandIteratorBase(const_cast<MachineInstr*>(MI), true)"
  }
]