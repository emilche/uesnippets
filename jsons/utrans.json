[
  {
    "label": "UTransDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UTransDirection"
  },
  {
    "label": "UTransPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UTransPosition"
  },
  {
    "label": "utrans_openU()",
    "kind": "Method",
    "detail": "Function (# ifndef UTRANS_H # define UTRANS_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_TRANSLITERATION # include \" unicode / localpointer . h \" # include \" unicode / urep . h \" # include \" unicode / parseerr . h \" # include \" unicode / uenum . h \" # include \" unicode / uset . h \" typedef void* UTransliterator ; typedef enum UTransDirection { UTRANS_FORWARD,UTRANS_REVERSE } UTransDirection ; typedef struct UTransPosition { int32_t contextStart ; int32_t contextLimit ; int32_t start ; int32_t limit ; } UTransPosition ; U_STABLE UTransliterator* U_EXPORT2)",
    "insertText": "utrans_openU(const UChar *id, int32_t idLength, UTransDirection dir, const UChar *rules, int32_t rulesLength, UParseError *parseError, UErrorCode *pErrorCode)"
  },
  {
    "label": "utrans_openInverse()",
    "kind": "Method",
    "detail": "Function (U_STABLE UTransliterator* U_EXPORT2)",
    "insertText": "utrans_openInverse(const UTransliterator* trans, UErrorCode* status)"
  },
  {
    "label": "utrans_clone()",
    "kind": "Method",
    "detail": "Function (U_STABLE UTransliterator* U_EXPORT2)",
    "insertText": "utrans_clone(const UTransliterator* trans, UErrorCode* status)"
  },
  {
    "label": "utrans_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_close(UTransliterator* trans)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUTransliteratorPointer, UTransliterator, utrans_close)"
  },
  {
    "label": "utrans_getUnicodeID()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE const UChar* U_EXPORT2)",
    "insertText": "utrans_getUnicodeID(const UTransliterator *trans, int32_t *resultLength)"
  },
  {
    "label": "utrans_register()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_register(UTransliterator* adoptedTrans, UErrorCode* status)"
  },
  {
    "label": "utrans_unregisterID()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_unregisterID(const UChar* id, int32_t idLength)"
  },
  {
    "label": "utrans_setFilter()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_setFilter(UTransliterator* trans, const UChar* filterPattern, int32_t filterPatternLen, UErrorCode* status)"
  },
  {
    "label": "utrans_countAvailableIDs()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "utrans_countAvailableIDs(void)"
  },
  {
    "label": "utrans_openIDs()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "utrans_openIDs(UErrorCode *pErrorCode)"
  },
  {
    "label": "utrans_trans()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_trans(const UTransliterator* trans, UReplaceable* rep, const UReplaceableCallbacks* repFunc, int32_t start, int32_t* limit, UErrorCode* status)"
  },
  {
    "label": "utrans_transIncremental()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_transIncremental(const UTransliterator* trans, UReplaceable* rep, const UReplaceableCallbacks* repFunc, UTransPosition* pos, UErrorCode* status)"
  },
  {
    "label": "utrans_transUChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_transUChars(const UTransliterator* trans, UChar* text, int32_t* textLength, int32_t textCapacity, int32_t start, int32_t* limit, UErrorCode* status)"
  },
  {
    "label": "utrans_transIncrementalUChars()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "utrans_transIncrementalUChars(const UTransliterator* trans, UChar* text, int32_t* textLength, int32_t textCapacity, UTransPosition* pos, UErrorCode* status)"
  },
  {
    "label": "utrans_toRules()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "utrans_toRules(const UTransliterator* trans, UBool escapeUnprintable, UChar* result, int32_t resultLength, UErrorCode* status)"
  },
  {
    "label": "utrans_getSourceSet()",
    "kind": "Method",
    "detail": "Function (U_STABLE USet* U_EXPORT2)",
    "insertText": "utrans_getSourceSet(const UTransliterator* trans, UBool ignoreFilter, USet* fillIn, UErrorCode* status)"
  },
  {
    "label": "utrans_open()",
    "kind": "Method",
    "detail": "Function (# ifndef U_DEPRECATED UTransliterator* U_EXPORT2)",
    "insertText": "utrans_open(const char* id, UTransDirection dir, const UChar* rules, int32_t rulesLength, UParseError* parseError, UErrorCode* status)"
  },
  {
    "label": "utrans_getID()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "utrans_getID(const UTransliterator* trans, char* buf, int32_t bufCapacity)"
  },
  {
    "label": "utrans_unregister()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED void U_EXPORT2)",
    "insertText": "utrans_unregister(const char* id)"
  },
  {
    "label": "utrans_getAvailableID()",
    "kind": "Method",
    "detail": "Function (U_DEPRECATED int32_t U_EXPORT2)",
    "insertText": "utrans_getAvailableID(int32_t index, char* buf, int32_t bufCapacity)"
  }
]