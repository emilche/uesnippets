[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef IPL_PHONON_H # define IPL_PHONON_H # include<stddef . h> # include \" phonon_version . h \" # if)",
    "insertText": "defined(SWIG) #define IPLAPI #elif (defined(_WIN32) || defined(_WIN64)) #define IPLAPI __declspec(dllexport) #else #define IPLAPI __attribute__((visibility(\"default\")))"
  },
  {
    "label": "IPLvoid()",
    "kind": "Method",
    "detail": "Function (# endif typedef void IPLvoid ; typedef char IPLint8 ; typedef unsigned char IPLuint8 ; typedef short IPLint16 ; typedef unsigned short IPLuint16 ; typedef int IPLint32 ; typedef unsigned int IPLuint32 ; typedef long long IPLint64 ; typedef unsigned long long IPLuint64 ; typedef float IPLfloat32 ; typedef double IPLfloat64 ; typedef unsigned char IPLbyte ; typedef size_t IPLsize ; typedef char* IPLstring ; typedef void* IPLhandle ; typedef enum { IPL_FALSE,IPL_TRUE } IPLbool ; typedef enum { IPL_STATUS_SUCCESS,IPL_STATUS_FAILURE,IPL_STATUS_OUTOFMEMORY,IPL_STATUS_INITIALIZATION } IPLerror ; typedef)",
    "insertText": "IPLvoid(*IPLLogFunction)(char* message)"
  },
  {
    "label": "IPLvoid()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "IPLvoid(*IPLAllocateFunction)(IPLsize, IPLsize)"
  },
  {
    "label": "IPLvoid()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "IPLvoid(*IPLFreeFunction)(IPLvoid*)"
  },
  {
    "label": "iplCreateContext()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateContext(IPLLogFunction logCallback, IPLAllocateFunction allocateCallback, IPLFreeFunction freeCallback, IPLhandle* context)"
  },
  {
    "label": "iplDestroyContext()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyContext(IPLhandle* context)"
  },
  {
    "label": "iplCleanup()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplCleanup()"
  },
  {
    "label": "iplCalculateRelativeDirection()",
    "kind": "Method",
    "detail": "Function (typedef struct { IPLfloat32 x ; IPLfloat32 y ; IPLfloat32 z ; } IPLVector3 ; typedef struct { IPLVector3 minCoordinates ; IPLVector3 maxCoordinates ; } IPLBox ; typedef struct { IPLVector3 center ; IPLfloat32 radius ; } IPLSphere ; IPLAPI IPLVector3)",
    "insertText": "iplCalculateRelativeDirection(IPLVector3 sourcePosition, IPLVector3 listenerPosition, IPLVector3 listenerAhead, IPLVector3 listenerUp)"
  },
  {
    "label": "iplCreateComputeDevice()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_COMPUTEDEVICE_CPU,IPL_COMPUTEDEVICE_GPU,IPL_COMPUTEDEVICE_ANY } IPLComputeDeviceType ; typedef struct { IPLComputeDeviceType type ; IPLint32 maxCUsToReserve ; IPLfloat32 fractionCUsForIRUpdate ; } IPLComputeDeviceFilter ; IPLAPI IPLerror)",
    "insertText": "iplCreateComputeDevice(IPLhandle context, IPLComputeDeviceFilter deviceFilter, IPLhandle* device)"
  },
  {
    "label": "iplDestroyComputeDevice()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyComputeDevice(IPLhandle* device)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_SCENETYPE_PHONON,IPL_SCENETYPE_EMBREE,IPL_SCENETYPE_RADEONRAYS,IPL_SCENETYPE_CUSTOM } IPLSceneType ; typedef enum { IPL_SIMTYPE_REALTIME,IPL_SIMTYPE_BAKED } IPLSimulationType ; typedef struct { IPLSceneType sceneType ; IPLint32 numOcclusionSamples ; IPLint32 numRays ; IPLint32 numDiffuseSamples ; IPLint32 numBounces ; IPLint32 numThreads ; IPLfloat32 irDuration ; IPLint32 ambisonicsOrder ; IPLint32 maxConvolutionSources ; IPLint32 bakingBatchSize ; IPLfloat32 irradianceMinDistance ; } IPLSimulationSettings ; typedef struct { IPLint32 indices [ 3 ] ; } IPLTriangle ; typedef struct { IPLfloat32 lowFreqAbsorption ; IPLfloat32 midFreqAbsorption ; IPLfloat32 highFreqAbsorption ; IPLfloat32 scattering ; IPLfloat32 lowFreqTransmission ; IPLfloat32 midFreqTransmission ; IPLfloat32 highFreqTransmission ; } IPLMaterial ; typedef)",
    "insertText": "void(*IPLLoadSceneProgressCallback)(IPLfloat32 progress)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*IPLFinalizeSceneProgressCallback)(IPLfloat32 progress)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*IPLClosestHitCallback)(const IPLfloat32* origin, const IPLfloat32* direction, const IPLfloat32 minDistance, const IPLfloat32 maxDistance, IPLfloat32* hitDistance, IPLfloat32* hitNormal, IPLMaterial** hitMaterial, IPLvoid* userData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*IPLAnyHitCallback)(const IPLfloat32* origin, const IPLfloat32* direction, const IPLfloat32 minDistance, const IPLfloat32 maxDistance, IPLint32* hitExists, IPLvoid* userData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*IPLBatchedClosestHitCallback)(IPLint32 numRays, IPLVector3* origins, IPLVector3* directions, IPLint32 rayStride, IPLfloat32* minDistances, IPLfloat32* maxDistances, IPLfloat32* hitDistances, IPLVector3* hitNormals, IPLMaterial** hitMaterials, IPLint32 hitStride, IPLvoid* userData)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*IPLBatchedAnyHitCallback)(IPLint32 numRays, IPLVector3* origins, IPLVector3* directions, IPLint32 rayStride, IPLfloat32* minDistances, IPLfloat32* maxDistances, IPLuint8* hitExists, IPLvoid* userData)"
  },
  {
    "label": "iplCreateScene()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateScene(IPLhandle context, IPLhandle computeDevice, IPLSimulationSettings simulationSettings, IPLint32 numMaterials, IPLMaterial* materials, IPLClosestHitCallback closestHitCallback, IPLAnyHitCallback anyHitCallback, IPLBatchedClosestHitCallback batchedClosestHitCallback, IPLBatchedAnyHitCallback batchedAnyHitCallback, IPLvoid* userData, IPLhandle* scene)"
  },
  {
    "label": "iplDestroyScene()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyScene(IPLhandle* scene)"
  },
  {
    "label": "iplCreateStaticMesh()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateStaticMesh(IPLhandle scene, IPLint32 numVertices, IPLint32 numTriangles, IPLVector3* vertices, IPLTriangle* triangles, IPLint32* materialIndices, IPLhandle* staticMesh)"
  },
  {
    "label": "iplDestroyStaticMesh()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyStaticMesh(IPLhandle* staticMesh)"
  },
  {
    "label": "iplSaveScene()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLint32)",
    "insertText": "iplSaveScene(IPLhandle scene, IPLbyte* data)"
  },
  {
    "label": "iplLoadScene()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplLoadScene(IPLhandle context, IPLSimulationSettings simulationSettings, IPLbyte* data, IPLint32 size, IPLhandle computeDevice, IPLLoadSceneProgressCallback progressCallback, IPLhandle* scene)"
  },
  {
    "label": "iplSaveSceneAsObj()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplSaveSceneAsObj(IPLhandle scene, IPLstring fileBaseName)"
  },
  {
    "label": "iplCreateInstancedMesh()",
    "kind": "Method",
    "detail": "Function (typedef struct { float elements [ 4 ] [ 4 ] ; } IPLMatrix4x4 ; IPLAPI IPLerror)",
    "insertText": "iplCreateInstancedMesh(IPLhandle scene, IPLhandle instancedScene, IPLMatrix4x4 transform, IPLhandle* instancedMesh)"
  },
  {
    "label": "iplDestroyInstancedMesh()",
    "kind": "Method",
    "detail": "Function (IPLAPI void)",
    "insertText": "iplDestroyInstancedMesh(IPLhandle* instancedMesh)"
  },
  {
    "label": "iplAddInstancedMesh()",
    "kind": "Method",
    "detail": "Function (IPLAPI void)",
    "insertText": "iplAddInstancedMesh(IPLhandle scene, IPLhandle instancedMesh)"
  },
  {
    "label": "iplRemoveInstancedMesh()",
    "kind": "Method",
    "detail": "Function (IPLAPI void)",
    "insertText": "iplRemoveInstancedMesh(IPLhandle scene, IPLhandle instancedMesh)"
  },
  {
    "label": "iplUpdateInstancedMeshTransform()",
    "kind": "Method",
    "detail": "Function (IPLAPI void)",
    "insertText": "iplUpdateInstancedMeshTransform(IPLhandle instancedMesh, IPLMatrix4x4 transform)"
  },
  {
    "label": "iplCommitScene()",
    "kind": "Method",
    "detail": "Function (IPLAPI void)",
    "insertText": "iplCommitScene(IPLhandle scene)"
  },
  {
    "label": "iplCreateEnvironment()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateEnvironment(IPLhandle context, IPLhandle computeDevice, IPLSimulationSettings simulationSettings, IPLhandle scene, IPLhandle probeManager, IPLhandle* environment)"
  },
  {
    "label": "iplDestroyEnvironment()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyEnvironment(IPLhandle* environment)"
  },
  {
    "label": "iplSetNumBounces()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplSetNumBounces(IPLhandle environment, IPLint32 numBounces)"
  },
  {
    "label": "iplMixAudioBuffers()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_CONVOLUTIONTYPE_PHONON,IPL_CONVOLUTIONTYPE_TRUEAUDIONEXT } IPLConvolutionType ; typedef struct { IPLint32 samplingRate ; IPLint32 frameSize ; IPLConvolutionType convolutionType ; } IPLRenderingSettings ; typedef enum { IPL_CHANNELLAYOUTTYPE_SPEAKERS,IPL_CHANNELLAYOUTTYPE_AMBISONICS } IPLChannelLayoutType ; typedef enum { IPL_CHANNELLAYOUT_MONO,IPL_CHANNELLAYOUT_STEREO,IPL_CHANNELLAYOUT_QUADRAPHONIC,IPL_CHANNELLAYOUT_FIVEPOINTONE,IPL_CHANNELLAYOUT_SEVENPOINTONE,IPL_CHANNELLAYOUT_CUSTOM } IPLChannelLayout ; typedef enum { IPL_AMBISONICSORDERING_FURSEMALHAM,IPL_AMBISONICSORDERING_ACN } IPLAmbisonicsOrdering ; typedef enum { IPL_AMBISONICSNORMALIZATION_FURSEMALHAM,IPL_AMBISONICSNORMALIZATION_SN3D,IPL_AMBISONICSNORMALIZATION_N3D } IPLAmbisonicsNormalization ; typedef enum { IPL_CHANNELORDER_INTERLEAVED,IPL_CHANNELORDER_DEINTERLEAVED } IPLChannelOrder ; typedef struct { IPLChannelLayoutType channelLayoutType ; IPLChannelLayout channelLayout ; IPLint32 numSpeakers ; IPLVector3* speakerDirections ; IPLint32 ambisonicsOrder ; IPLAmbisonicsOrdering ambisonicsOrdering ; IPLAmbisonicsNormalization ambisonicsNormalization ; IPLChannelOrder channelOrder ; } IPLAudioFormat ; typedef struct { IPLAudioFormat format ; IPLint32 numSamples ; IPLfloat32* interleavedBuffer ; IPLfloat32** deinterleavedBuffer ; } IPLAudioBuffer ; IPLAPI IPLvoid)",
    "insertText": "iplMixAudioBuffers(IPLint32 numBuffers, IPLAudioBuffer* inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplInterleaveAudioBuffer()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplInterleaveAudioBuffer(IPLAudioBuffer inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplDeinterleaveAudioBuffer()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDeinterleaveAudioBuffer(IPLAudioBuffer inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplConvertAudioBufferFormat()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplConvertAudioBufferFormat(IPLAudioBuffer inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplCreateAmbisonicsRotator()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateAmbisonicsRotator(IPLhandle context, IPLint32 order, IPLhandle* rotator)"
  },
  {
    "label": "iplDestroyAmbisonicsRotator()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyAmbisonicsRotator(IPLhandle* rotator)"
  },
  {
    "label": "iplSetAmbisonicsRotation()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplSetAmbisonicsRotation(IPLhandle rotator, IPLVector3 listenerAhead, IPLVector3 listenerUp)"
  },
  {
    "label": "iplRotateAmbisonicsAudioBuffer()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplRotateAmbisonicsAudioBuffer(IPLhandle rotator, IPLAudioBuffer inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplCreateBinauralRenderer()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_HRTFDATABASETYPE_DEFAULT,IPL_HRTFDATABASETYPE_SOFA } IPLHrtfDatabaseType ; typedef struct { IPLHrtfDatabaseType type ; IPLbyte* hrtfData ; IPLstring sofaFileName ; } IPLHrtfParams ; IPLAPI IPLerror)",
    "insertText": "iplCreateBinauralRenderer(IPLhandle context, IPLRenderingSettings renderingSettings, IPLHrtfParams params, IPLhandle* renderer)"
  },
  {
    "label": "iplDestroyBinauralRenderer()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyBinauralRenderer(IPLhandle* renderer)"
  },
  {
    "label": "iplCreatePanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreatePanningEffect(IPLhandle renderer, IPLAudioFormat inputFormat, IPLAudioFormat outputFormat, IPLhandle* effect)"
  },
  {
    "label": "iplDestroyPanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyPanningEffect(IPLhandle* effect)"
  },
  {
    "label": "iplApplyPanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplApplyPanningEffect(IPLhandle effect, IPLhandle binauralRenderer, IPLAudioBuffer inputAudio, IPLVector3 direction, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplFlushPanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFlushPanningEffect(IPLhandle effect)"
  },
  {
    "label": "iplCreateBinauralEffect()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_HRTFINTERPOLATION_NEAREST,IPL_HRTFINTERPOLATION_BILINEAR } IPLHrtfInterpolation ; IPLAPI IPLerror)",
    "insertText": "iplCreateBinauralEffect(IPLhandle renderer, IPLAudioFormat inputFormat, IPLAudioFormat outputFormat, IPLhandle* effect)"
  },
  {
    "label": "iplDestroyBinauralEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyBinauralEffect(IPLhandle* effect)"
  },
  {
    "label": "iplApplyBinauralEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplApplyBinauralEffect(IPLhandle effect, IPLhandle binauralRenderer, IPLAudioBuffer inputAudio, IPLVector3 direction, IPLHrtfInterpolation interpolation, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplApplyBinauralEffectWithParameters()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplApplyBinauralEffectWithParameters(IPLhandle effect, IPLhandle binauralRenderer, IPLAudioBuffer inputAudio, IPLVector3 direction, IPLHrtfInterpolation interpolation, IPLAudioBuffer outputAudio, IPLfloat32* leftDelay, IPLfloat32* rightDelay)"
  },
  {
    "label": "iplFlushBinauralEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFlushBinauralEffect(IPLhandle effect)"
  },
  {
    "label": "iplCreateVirtualSurroundEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateVirtualSurroundEffect(IPLhandle renderer, IPLAudioFormat inputFormat, IPLAudioFormat outputFormat, IPLhandle* effect)"
  },
  {
    "label": "iplDestroyVirtualSurroundEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyVirtualSurroundEffect(IPLhandle* effect)"
  },
  {
    "label": "iplApplyVirtualSurroundEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplApplyVirtualSurroundEffect(IPLhandle effect, IPLhandle binauralRenderer, IPLAudioBuffer inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplFlushVirtualSurroundEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFlushVirtualSurroundEffect(IPLhandle effect)"
  },
  {
    "label": "iplCreateAmbisonicsPanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateAmbisonicsPanningEffect(IPLhandle renderer, IPLAudioFormat inputFormat, IPLAudioFormat outputFormat, IPLhandle* effect)"
  },
  {
    "label": "iplDestroyAmbisonicsPanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyAmbisonicsPanningEffect(IPLhandle* effect)"
  },
  {
    "label": "iplApplyAmbisonicsPanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplApplyAmbisonicsPanningEffect(IPLhandle effect, IPLhandle binauralRenderer, IPLAudioBuffer inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplFlushAmbisonicsPanningEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFlushAmbisonicsPanningEffect(IPLhandle effect)"
  },
  {
    "label": "iplCreateAmbisonicsBinauralEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateAmbisonicsBinauralEffect(IPLhandle renderer, IPLAudioFormat inputFormat, IPLAudioFormat outputFormat, IPLhandle* effect)"
  },
  {
    "label": "iplDestroyAmbisonicsBinauralEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyAmbisonicsBinauralEffect(IPLhandle* effect)"
  },
  {
    "label": "iplApplyAmbisonicsBinauralEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplApplyAmbisonicsBinauralEffect(IPLhandle effect, IPLhandle binauralRenderer, IPLAudioBuffer inputAudio, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplFlushAmbisonicsBinauralEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFlushAmbisonicsBinauralEffect(IPLhandle effect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*IPLSimulationThreadCreateCallback)(void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*IPLSimulationThreadDestroyCallback)(void)"
  },
  {
    "label": "iplCreateEnvironmentalRenderer()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateEnvironmentalRenderer(IPLhandle context, IPLhandle environment, IPLRenderingSettings renderingSettings, IPLAudioFormat outputFormat, IPLSimulationThreadCreateCallback threadCreateCallback, IPLSimulationThreadDestroyCallback threadDestroyCallback, IPLhandle* renderer)"
  },
  {
    "label": "iplDestroyEnvironmentalRenderer()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyEnvironmentalRenderer(IPLhandle* renderer)"
  },
  {
    "label": "iplGetEnvironmentForRenderer()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLhandle)",
    "insertText": "iplGetEnvironmentForRenderer(IPLhandle renderer)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_DIRECTOCCLUSION_RAYCAST,IPL_DIRECTOCCLUSION_VOLUMETRIC } IPLDirectOcclusionMethod ; typedef enum { IPL_DIRECTOCCLUSION_NONE,IPL_DIRECTOCCLUSION_NOTRANSMISSION,IPL_DIRECTOCCLUSION_TRANSMISSIONBYVOLUME,IPL_DIRECTOCCLUSION_TRANSMISSIONBYFREQUENCY,} IPLDirectOcclusionMode ; typedef struct { IPLVector3 direction ; IPLfloat32 distanceAttenuation ; IPLfloat32 airAbsorption [ 3 ] ; IPLfloat32 propagationDelay ; IPLfloat32 occlusionFactor ; IPLfloat32 transmissionFactor [ 3 ] ; IPLfloat32 directivityFactor ; } IPLDirectSoundPath ; typedef)",
    "insertText": "float(*IPLDirectivityCallback)(IPLVector3 direction, void* userData)"
  },
  {
    "label": "iplGetDirectSoundPath()",
    "kind": "Method",
    "detail": "Function (typedef struct { IPLfloat32 dipoleWeight ; IPLfloat32 dipolePower ; IPLDirectivityCallback callback ; void* userData ; } IPLDirectivity ; typedef struct { IPLVector3 position ; IPLVector3 ahead ; IPLVector3 up ; IPLVector3 right ; IPLDirectivity directivity ; } IPLSource ; IPLAPI IPLDirectSoundPath)",
    "insertText": "iplGetDirectSoundPath(IPLhandle environment, IPLVector3 listenerPosition, IPLVector3 listenerAhead, IPLVector3 listenerUp, IPLSource source, IPLfloat32 sourceRadius, IPLDirectOcclusionMode occlusionMode, IPLDirectOcclusionMethod occlusionMethod)"
  },
  {
    "label": "iplCreateDirectSoundEffect()",
    "kind": "Method",
    "detail": "Function (typedef struct { IPLbool applyDistanceAttenuation ; IPLbool applyAirAbsorption ; IPLbool applyDirectivity ; IPLDirectOcclusionMode directOcclusionMode ; } IPLDirectSoundEffectOptions ; IPLAPI IPLerror)",
    "insertText": "iplCreateDirectSoundEffect(IPLhandle renderer, IPLAudioFormat inputFormat, IPLAudioFormat outputFormat, IPLhandle* effect)"
  },
  {
    "label": "iplDestroyDirectSoundEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyDirectSoundEffect(IPLhandle* effect)"
  },
  {
    "label": "iplApplyDirectSoundEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplApplyDirectSoundEffect(IPLhandle effect, IPLAudioBuffer inputAudio, IPLDirectSoundPath directSoundPath, IPLDirectSoundEffectOptions options, IPLAudioBuffer outputAudio)"
  },
  {
    "label": "iplFlushDirectSoundEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFlushDirectSoundEffect(IPLhandle effect)"
  },
  {
    "label": "iplCreateConvolutionEffect()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_BAKEDDATATYPE_STATICSOURCE,IPL_BAKEDDATATYPE_STATICLISTENER,IPL_BAKEDDATATYPE_REVERB } IPLBakedDataType ; typedef struct { IPLint32 identifier ; IPLBakedDataType type ; } IPLBakedDataIdentifier ; IPLAPI IPLerror)",
    "insertText": "iplCreateConvolutionEffect(IPLhandle renderer, IPLBakedDataIdentifier identifier, IPLSimulationType simulationType, IPLAudioFormat inputFormat, IPLAudioFormat outputFormat, IPLhandle* effect)"
  },
  {
    "label": "iplDestroyConvolutionEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyConvolutionEffect(IPLhandle* effect)"
  },
  {
    "label": "iplSetConvolutionEffectIdentifier()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplSetConvolutionEffectIdentifier(IPLhandle effect, IPLBakedDataIdentifier identifier)"
  },
  {
    "label": "iplSetDryAudioForConvolutionEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplSetDryAudioForConvolutionEffect(IPLhandle effect, IPLSource source, IPLAudioBuffer dryAudio)"
  },
  {
    "label": "iplGetWetAudioForConvolutionEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplGetWetAudioForConvolutionEffect(IPLhandle effect, IPLVector3 listenerPosition, IPLVector3 listenerAhead, IPLVector3 listenerUp, IPLAudioBuffer wetAudio)"
  },
  {
    "label": "iplGetMixedEnvironmentalAudio()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplGetMixedEnvironmentalAudio(IPLhandle renderer, IPLVector3 listenerPosition, IPLVector3 listenerAhead, IPLVector3 listenerUp, IPLAudioBuffer mixedWetAudio)"
  },
  {
    "label": "iplFlushConvolutionEffect()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFlushConvolutionEffect(IPLhandle effect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef enum { IPL_PLACEMENT_CENTROID,IPL_PLACEMENT_OCTREE,IPL_PLACEMENT_UNIFORMFLOOR } IPLProbePlacement ; typedef struct { IPLProbePlacement placement ; IPLfloat32 spacing ; IPLfloat32 heightAboveFloor ; IPLint32 maxOctreeTriangles ; IPLint32 maxOctreeDepth ; } IPLProbePlacementParams ; typedef)",
    "insertText": "void(*IPLProbePlacementProgressCallback)(IPLfloat32 progress)"
  },
  {
    "label": "iplCreateProbeBox()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateProbeBox(IPLhandle context, IPLhandle scene, IPLfloat32* boxLocalToWorldTransform, IPLProbePlacementParams placementParams, IPLProbePlacementProgressCallback progressCallback, IPLhandle* probeBox)"
  },
  {
    "label": "iplDestroyProbeBox()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyProbeBox(IPLhandle* probeBox)"
  },
  {
    "label": "iplGetProbeSpheres()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLint32)",
    "insertText": "iplGetProbeSpheres(IPLhandle probeBox, IPLSphere* probeSpheres)"
  },
  {
    "label": "iplSaveProbeBox()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLint32)",
    "insertText": "iplSaveProbeBox(IPLhandle probeBox, IPLbyte* data)"
  },
  {
    "label": "iplLoadProbeBox()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplLoadProbeBox(IPLhandle context, IPLbyte* data, IPLint32 size, IPLhandle* probeBox)"
  },
  {
    "label": "iplCreateProbeBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateProbeBatch(IPLhandle context, IPLhandle* probeBatch)"
  },
  {
    "label": "iplDestroyProbeBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyProbeBatch(IPLhandle* probeBatch)"
  },
  {
    "label": "iplAddProbeToBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplAddProbeToBatch(IPLhandle probeBatch, IPLhandle probeBox, IPLint32 probeIndex)"
  },
  {
    "label": "iplFinalizeProbeBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplFinalizeProbeBatch(IPLhandle probeBatch)"
  },
  {
    "label": "iplSaveProbeBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLint32)",
    "insertText": "iplSaveProbeBatch(IPLhandle probeBatch, IPLbyte* data)"
  },
  {
    "label": "iplLoadProbeBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplLoadProbeBatch(IPLhandle context, IPLbyte* data, IPLint32 size, IPLhandle* probeBatch)"
  },
  {
    "label": "iplCreateProbeManager()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLerror)",
    "insertText": "iplCreateProbeManager(IPLhandle context, IPLhandle* probeManager)"
  },
  {
    "label": "iplDestroyProbeManager()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDestroyProbeManager(IPLhandle* probeManager)"
  },
  {
    "label": "iplAddProbeBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplAddProbeBatch(IPLhandle probeManager, IPLhandle probeBatch)"
  },
  {
    "label": "iplRemoveProbeBatch()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplRemoveProbeBatch(IPLhandle probeManager, IPLhandle probeBatch)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef struct { IPLbool bakeParametric ; IPLbool bakeConvolution ; } IPLBakingSettings ; typedef)",
    "insertText": "void(*IPLBakeProgressCallback)(IPLfloat32 progress)"
  },
  {
    "label": "iplBakeReverb()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplBakeReverb(IPLhandle environment, IPLhandle probeBox, IPLBakingSettings bakingSettings, IPLBakeProgressCallback progressCallback)"
  },
  {
    "label": "iplBakePropagation()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplBakePropagation(IPLhandle environment, IPLhandle probeBox, IPLSphere sourceInfluence, IPLBakedDataIdentifier sourceIdentifier, IPLBakingSettings bakingSettings, IPLBakeProgressCallback progressCallback)"
  },
  {
    "label": "iplBakeStaticListener()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplBakeStaticListener(IPLhandle environment, IPLhandle probeBox, IPLSphere listenerInfluence, IPLBakedDataIdentifier listenerIdentifier, IPLBakingSettings bakingSettings, IPLBakeProgressCallback progressCallback)"
  },
  {
    "label": "iplCancelBake()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplCancelBake()"
  },
  {
    "label": "iplDeleteBakedDataByIdentifier()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLvoid)",
    "insertText": "iplDeleteBakedDataByIdentifier(IPLhandle probeBox, IPLBakedDataIdentifier identifier)"
  },
  {
    "label": "iplGetBakedDataSizeByIdentifier()",
    "kind": "Method",
    "detail": "Function (IPLAPI IPLint32)",
    "insertText": "iplGetBakedDataSizeByIdentifier(IPLhandle probeBox, IPLBakedDataIdentifier identifier)"
  }
]