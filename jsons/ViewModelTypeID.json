[
  {
    "label": "FCastableTypeTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCastableTypeTable"
  },
  {
    "label": "FViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewModelTypeID"
  },
  {
    "label": "TViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TViewModelTypeID"
  },
  {
    "label": "TAutoRegisterViewModelTypeID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAutoRegisterViewModelTypeID"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" MVVM / CastableTypeTable . h \" # define)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(Type)"
  },
  {
    "label": "RegisterTypeID()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "RegisterTypeID()"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID_API()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID_API(MODULE_API, Type)"
  },
  {
    "label": "UE_SEQUENCER_DEFINE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_SEQUENCER_DEFINE_VIEW_MODEL_TYPE_ID(Type)"
  },
  {
    "label": "RegisterNewID()",
    "kind": "Method",
    "detail": "Function (\\ Type::ID . ID =::UE::Sequencer::)",
    "insertText": "RegisterNewID()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (\\ Type::ID . TypeTable =::UE::Sequencer::FCastableTypeTable::MakeTypeTable<)",
    "insertText": "Type((Type*)0, Type::ID.ID, #Type)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (\\ } namespace UE { namespace Sequencer { struct FCastableTypeTable ; struct FViewModelTypeID { uint32)",
    "insertText": "GetTypeHash(FViewModelTypeID In)"
  },
  {
    "label": "FViewModelTypeID()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FViewModelTypeID(FCastableTypeTable* InTypeTable, uint32 InID) : TypeTable(InTypeTable) , ID(InID)"
  },
  {
    "label": "FViewModelTypeID()",
    "kind": "Method",
    "detail": "Function (} private : FCastableTypeTable* TypeTable ; uint32 ID ; } ; template<T> struct TViewModelTypeID { operator)",
    "insertText": "FViewModelTypeID()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register()"
  },
  {
    "label": "IsRegistered()",
    "kind": "Method",
    "detail": "Function (} } protected : T ; bool)",
    "insertText": "IsRegistered()"
  }
]