[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "IMF_HIDDEN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_HIDDEN"
  },
  {
    "label": "acesChromaticities()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_ACES_FILE_H # define INCLUDED_IMF_ACES_FILE_H # include \" ImathBox . h \" # include \" ImathVec . h \" # include \" ImfExport . h \" # include \" ImfForward . h \" # include \" ImfHeader . h \" # include \" ImfNamespace . h \" # include \" ImfRgba . h \" # include \" ImfThreading . h \" # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER const Chromaticities&)",
    "insertText": "acesChromaticities()"
  },
  {
    "label": "AcesOutputFile()",
    "kind": "Method",
    "detail": "Function (class IMF_EXPORT_TYPE AcesOutputFile { public : IMF_EXPORT)",
    "insertText": "AcesOutputFile(const std::string& name, const Header& header, RgbaChannels rgbaChannels = WRITE_RGBA, int numThreads = globalThreadCount ())"
  },
  {
    "label": "AcesOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "AcesOutputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::OStream& os, const Header& header, RgbaChannels rgbaChannels = WRITE_RGBA, int numThreads = globalThreadCount ())"
  },
  {
    "label": "AcesOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "AcesOutputFile(const std::string& name, const IMATH_NAMESPACE::Box2i& displayWindow, const IMATH_NAMESPACE::Box2i& dataWindow = IMATH_NAMESPACE::Box2i (), RgbaChannels rgbaChannels = WRITE_RGBA, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression compression = PIZ_COMPRESSION, int numThreads = globalThreadCount ())"
  },
  {
    "label": "AcesOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "AcesOutputFile(const std::string& name, int width, int height, RgbaChannels rgbaChannels = WRITE_RGBA, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression compression = PIZ_COMPRESSION, int numThreads = globalThreadCount ())"
  },
  {
    "label": "AcesOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "AcesOutputFile()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(const Rgba* base, size_t xStride, size_t yStride)"
  },
  {
    "label": "writePixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writePixels(int numScanLines = 1)"
  },
  {
    "label": "currentScanLine()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "currentScanLine()"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Header&)",
    "insertText": "header()"
  },
  {
    "label": "displayWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::Box2i&)",
    "insertText": "displayWindow()"
  },
  {
    "label": "dataWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::Box2i&)",
    "insertText": "dataWindow()"
  },
  {
    "label": "pixelAspectRatio()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float)",
    "insertText": "pixelAspectRatio()"
  },
  {
    "label": "screenWindowCenter()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::V2f)",
    "insertText": "screenWindowCenter()"
  },
  {
    "label": "screenWindowWidth()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float)",
    "insertText": "screenWindowWidth()"
  },
  {
    "label": "lineOrder()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LineOrder)",
    "insertText": "lineOrder()"
  },
  {
    "label": "compression()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Compression)",
    "insertText": "compression()"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT RgbaChannels)",
    "insertText": "channels()"
  },
  {
    "label": "updatePreviewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "updatePreviewImage(const PreviewRgba[])"
  },
  {
    "label": "AcesOutputFile()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "AcesOutputFile(const AcesOutputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AcesOutputFile&)",
    "insertText": "operator(const AcesOutputFile&)"
  },
  {
    "label": "AcesOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcesOutputFile(AcesOutputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AcesOutputFile&)",
    "insertText": "operator(AcesOutputFile&&)"
  },
  {
    "label": "AcesInputFile()",
    "kind": "Method",
    "detail": "Function (class IMF_HIDDEN Data ; Data* _data ; } ; class IMF_EXPORT_TYPE AcesInputFile { public : IMF_EXPORT)",
    "insertText": "AcesInputFile(const std::string& name, int numThreads = globalThreadCount ())"
  },
  {
    "label": "AcesInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "AcesInputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int numThreads = globalThreadCount ())"
  },
  {
    "label": "AcesInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "AcesInputFile()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(Rgba* base, size_t xStride, size_t yStride)"
  },
  {
    "label": "readPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixels(int scanLine1, int scanLine2)"
  },
  {
    "label": "readPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readPixels(int scanLine)"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "isComplete()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isComplete()"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "version()"
  },
  {
    "label": "AcesInputFile()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "AcesInputFile(const AcesInputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AcesInputFile&)",
    "insertText": "operator(const AcesInputFile&)"
  },
  {
    "label": "AcesInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcesInputFile(AcesInputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AcesInputFile&)",
    "insertText": "operator(AcesInputFile&&)"
  }
]