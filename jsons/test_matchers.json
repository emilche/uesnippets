[
  {
    "label": "SourceFilename()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_LOG_INTERNAL_TEST_MATCHERS_H_ # define ABSL_LOG_INTERNAL_TEST_MATCHERS_H_ # include<iosfwd> # include<sstream> # include<string> # include \" gmock / gmock . h \" # include \" gtest / gtest . h \" # include \" absl / base / config . h \" # include \" absl / base / log_severity . h \" # include \" absl / log / internal / config . h \" # include \" absl / log / internal / test_helpers . h \" # include \" absl / log / log_entry . h \" # include \" absl / strings / string_view . h \" # include \" absl / time / time . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace log_internal {::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "SourceFilename(const ::testing::Matcher<absl::string_view>& source_filename)"
  },
  {
    "label": "SourceBasename()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "SourceBasename(const ::testing::Matcher<absl::string_view>& source_basename)"
  },
  {
    "label": "SourceLine()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "SourceLine(const ::testing::Matcher<int>& source_line)"
  },
  {
    "label": "Prefix()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "Prefix(const ::testing::Matcher<bool>& prefix)"
  },
  {
    "label": "LogSeverity()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "LogSeverity(const ::testing::Matcher<absl::LogSeverity>& log_severity)"
  },
  {
    "label": "Timestamp()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "Timestamp(const ::testing::Matcher<absl::Time>& timestamp)"
  },
  {
    "label": "TimestampInMatchWindow()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "TimestampInMatchWindow()"
  },
  {
    "label": "ThreadID()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "ThreadID(const ::testing::Matcher<absl::LogEntry::tid_t>&)"
  },
  {
    "label": "TextMessageWithPrefixAndNewline()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "TextMessageWithPrefixAndNewline(const ::testing::Matcher<absl::string_view>& text_message_with_prefix_and_newline)"
  },
  {
    "label": "TextMessageWithPrefix()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "TextMessageWithPrefix(const ::testing::Matcher<absl::string_view>& text_message_with_prefix)"
  },
  {
    "label": "TextMessage()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "TextMessage(const ::testing::Matcher<absl::string_view>& text_message)"
  },
  {
    "label": "TextPrefix()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "TextPrefix(const ::testing::Matcher<absl::string_view>& text_prefix)"
  },
  {
    "label": "Verbosity()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "Verbosity(const ::testing::Matcher<int>& verbosity)"
  },
  {
    "label": "Stacktrace()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const absl::LogEntry&>)",
    "insertText": "Stacktrace(const ::testing::Matcher<absl::string_view>& stacktrace)"
  },
  {
    "label": "MatchesOstream()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<absl::string_view>)",
    "insertText": "MatchesOstream(const std::ostringstream& stream)"
  },
  {
    "label": "DeathTestValidateExpectations()",
    "kind": "Method",
    "detail": "Function (::testing::Matcher<const std::string&>)",
    "insertText": "DeathTestValidateExpectations()"
  }
]