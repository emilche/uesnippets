[
  {
    "label": "CasFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CasFileInfo"
  },
  {
    "label": "ProfileScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProfileScope"
  },
  {
    "label": "TestCacheEntry()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaCacheClient . h \" # include \" UbaCacheEntry . h \" # include \" UbaCacheServer . h \" # include \" UbaNetworkBackendTcp . h \" # include \" UbaNetworkClient . h \" # include \" UbaNetworkServer . h \" # include \" UbaSessionServer . h \" # include \" UbaStorageServer . h \" # include \" . . / Private / UbaHashMap . h \" namespace uba { bool)",
    "insertText": "TestCacheEntry(Logger& logger, const StringBufferBase& rootDir)"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (CacheEntries entries ; auto)",
    "insertText": "AddEntry(const Set<u32>& inputs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vector<u8> inputOffsets ; u64 bytes = 0 ;)",
    "insertText": "for(u32 i : inputs) bytes += Get7BitEncodedCount(i)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (inputOffsets .)",
    "insertText": "resize(bytes)"
  },
  {
    "label": "writer()",
    "kind": "Method",
    "detail": "Function (BinaryWriter)",
    "insertText": "writer(inputOffsets.data(), 0, inputOffsets.size())"
  },
  {
    "label": "BuildInputs()",
    "kind": "Method",
    "detail": "Function (CacheEntry entry ; entries .)",
    "insertText": "BuildInputs(entry, inputs)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (entries . entries .)",
    "insertText": "push_back(entry)"
  },
  {
    "label": "ValidateEntry()",
    "kind": "Method",
    "detail": "Function (entries .)",
    "insertText": "ValidateEntry(logger, entry, inputOffsets)"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "AddEntry(Set<u32>{ 1, 4, 6 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 0, 4, 6 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 2, 4, 6 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 1, 4, 5 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 1, 4, 7 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 1, 3, 6 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 1, 5, 6 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 1, 4, 6, 7 })"
  },
  {
    "label": "AddEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEntry(Set<u32>{ 0, 1, 4, 6 })"
  },
  {
    "label": "CreateTextFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTextFile(StringBufferBase& outPath, LoggerWithWriter& logger, const tchar* workingDir, const tchar* fileName, const char* text)"
  },
  {
    "label": "GetKeyAndFixedName()",
    "kind": "Method",
    "detail": "Function (StringKey)",
    "insertText": "GetKeyAndFixedName(StringBuffer<>& fixedFilePath, const tchar* filePath)"
  },
  {
    "label": "InvalidateCachedInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCachedInfo(StorageImpl& storage, StringBufferBase& fileName)"
  },
  {
    "label": "InvalidateCachedFileInfo()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> fixedFilePath ; storage .)",
    "insertText": "InvalidateCachedFileInfo(GetKeyAndFixedName(fixedFilePath, fileName.data))"
  },
  {
    "label": "TestCacheClientAndServer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestCacheClientAndServer(LoggerWithWriter& logger, const StringBufferBase& testRootDir)"
  },
  {
    "label": "tcpBackend()",
    "kind": "Method",
    "detail": "Function (LogWriter& logWriter = logger . m_writer ; NetworkBackendTcp)",
    "insertText": "tcpBackend(logWriter)"
  },
  {
    "label": "server()",
    "kind": "Method",
    "detail": "Function (bool ctorSuccess = true ; NetworkServer)",
    "insertText": "server(ctorSuccess, { logWriter })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> rootDir ; rootDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"Uba\"))"
  },
  {
    "label": "storageServerInfo()",
    "kind": "Method",
    "detail": "Function (StorageServerCreateInfo)",
    "insertText": "storageServerInfo(server, rootDir.data, logWriter)"
  },
  {
    "label": "StorageServer()",
    "kind": "Method",
    "detail": "Function (storageServerInfo . casCapacityBytes = 1 0 2 4 ull* 1 0 2 4* 1 0 2 4 ; auto& storageServer =* new)",
    "insertText": "StorageServer(storageServerInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto ssg =)",
    "insertText": "MakeGuard([&]() { delete &storageServer; })"
  },
  {
    "label": "csci()",
    "kind": "Method",
    "detail": "Function (CacheServerCreateInfo)",
    "insertText": "csci(storageServer, rootDir.data, logWriter)"
  },
  {
    "label": "cacheServer()",
    "kind": "Method",
    "detail": "Function (CacheServer)",
    "insertText": "cacheServer(csci)"
  },
  {
    "label": "sessionInfo()",
    "kind": "Method",
    "detail": "Function (SessionServerCreateInfo)",
    "insertText": "sessionInfo(storageServer, server, logWriter)"
  },
  {
    "label": "SessionServer()",
    "kind": "Method",
    "detail": "Function (sessionInfo . rootDir = rootDir . data ; auto& session =* new)",
    "insertText": "SessionServer(sessionInfo)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto sg =)",
    "insertText": "MakeGuard([&]() { delete &session; })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (u16 port = 1 3 5 6 ;)",
    "insertText": "if(!server.StartListen(tcpBackend, port)) return logger.Error(TC(\"Failed to listen\"))"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto disconnectServer =)",
    "insertText": "MakeGuard([&]() { server.DisconnectClients(); })"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> workingDir ; workingDir .)",
    "insertText": "Append(testRootDir).Append(TC(\"WorkingDir\"))"
  },
  {
    "label": "GetTestAppPath()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> testApp ;)",
    "insertText": "GetTestAppPath(logger, testApp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> inputFile ;)",
    "insertText": "if(!CreateTextFile(inputFile, logger, workingDir.data, TC(\"Input.txt\"), \"Foo\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (StringBuffer<MaxPath> outputFile ;)",
    "insertText": "if(!CreateTextFile(outputFile, logger, workingDir.data, TC(\"Output.txt\"), \"Foo\"))"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (StackBinaryWriter<2 5 6> inputs ; inputs .)",
    "insertText": "WriteString(inputFile)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (StackBinaryWriter<2 5 6> outputs ; outputs .)",
    "insertText": "WriteString(outputFile)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (StackBinaryWriter<2 5 6> logLines ; logLines .)",
    "insertText": "WriteString(TC(\"Hello\"))"
  },
  {
    "label": "WriteByte()",
    "kind": "Method",
    "detail": "Function (logLines .)",
    "insertText": "WriteByte(1)"
  },
  {
    "label": "client()",
    "kind": "Method",
    "detail": "Function (ProcessStartInfo psi ; psi . application = testApp . data ; { NetworkClient)",
    "insertText": "client(ctorSuccess, { logWriter })"
  },
  {
    "label": "ccci()",
    "kind": "Method",
    "detail": "Function (CacheClientCreateInfo)",
    "insertText": "ccci(logWriter, storageServer, client, session)"
  },
  {
    "label": "cacheClient()",
    "kind": "Method",
    "detail": "Function (ccci . useRoots = false ; CacheClient)",
    "insertText": "cacheClient(ccci)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto disconnectClient =)",
    "insertText": "MakeGuard([&]() { client.Disconnect(); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({ CacheResult result ;)",
    "insertText": "if(cacheClient.FetchFromCache(result, RootPaths(), 0, psi) || result.hit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} {)",
    "insertText": "if(!DeleteFileW(inputFile.data))"
  },
  {
    "label": "InvalidateCachedInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateCachedInfo(storageServer, inputFile)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(!cacheServer.RunMaintenance(true, []() { return false; }))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function ({ CacheResult result ;)",
    "insertText": "if(!cacheClient.FetchFromCache(result, RootPaths(), 0, psi))"
  },
  {
    "label": "TestHashTable()",
    "kind": "Method",
    "detail": "Function (} } return true ; } bool)",
    "insertText": "TestHashTable(Logger& logger, const StringBufferBase& rootDir)"
  },
  {
    "label": "memoryBlock()",
    "kind": "Method",
    "detail": "Function ({ MemoryBlock)",
    "insertText": "memoryBlock(1024*1024)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (HashMap<u32,u32> casMap ; casMap .)",
    "insertText": "Init(memoryBlock, 3)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (casMap .)",
    "insertText": "Insert(1)"
  },
  {
    "label": "CasFileInfo()",
    "kind": "Method",
    "detail": "Function (} # if 0 struct CasFileInfo {)",
    "insertText": "CasFileInfo(u32 s = 0) : size(s)"
  },
  {
    "label": "ProfileScope()",
    "kind": "Method",
    "detail": "Function (} u32 size ; bool isUsed ; } ; u64 memoryReserveSize = 1 9 2* 1 0 2 4* 1 0 2 4 ; struct ProfileScope {)",
    "insertText": "ProfileScope() : startTime(GetTime())"
  },
  {
    "label": "ProfileScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ProfileScope()"
  },
  {
    "label": "GetTime()",
    "kind": "Method",
    "detail": "Function (u64 duration =)",
    "insertText": "GetTime()"
  },
  {
    "label": "LoggerWithWriter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoggerWithWriter(g_consoleLogWriter, TC(\"\")).Info(TC(\"Time: %s\"), TimeToText(duration).str)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} u64 startTime ; } ; u32 totalCasCount = 1 ' 8 0 0 ' 0 0 0 ; { ProfileScope _ ; MemoryBlock memoryBlock ;)",
    "insertText": "if(!memoryBlock.Init(memoryReserveSize, nullptr, true)) memoryBlock.Init(memoryReserveSize)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (HashMap<CasKey,CasFileInfo> casMap ; casMap .)",
    "insertText": "Init(memoryBlock, totalCasCount)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CasKey key ;)",
    "insertText": "for(u32 i=0; i!=totalCasCount; ++i)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (key . a = i ; casMap .)",
    "insertText": "Insert(key)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (key . a = i ; casMap .)",
    "insertText": "Find(key)"
  },
  {
    "label": "casMap()",
    "kind": "Method",
    "detail": "Function (GrowingNoLockUnorderedMap<CasKey,CasFileInfo>)",
    "insertText": "casMap(&memoryBlock)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (casMap .)",
    "insertText": "reserve(totalCasCount)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (key . a = i ; casMap .)",
    "insertText": "try_emplace(key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (key . a = i ; auto it = casMap .)",
    "insertText": "find(key)"
  }
]