[
  {
    "label": "BASE_I18N_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_I18N_EXPORT"
  },
  {
    "label": "UTF8CharIterator()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_I18N_CHAR_ITERATOR_H_ # define BASE_I18N_CHAR_ITERATOR_H_ # include<stdint . h> # include \" base / i18n / base_i18n_export . h \" # include \" base / strings / string_piece . h \" namespace base { namespace i18n { class BASE_I18N_EXPORT UTF8CharIterator { public :)",
    "insertText": "UTF8CharIterator(StringPiece str)"
  },
  {
    "label": "UTF8CharIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UTF8CharIterator(const UTF8CharIterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UTF8CharIterator&)",
    "insertText": "operator(const UTF8CharIterator&)"
  },
  {
    "label": "UTF8CharIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UTF8CharIterator()"
  },
  {
    "label": "array_pos()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "array_pos()"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Advance()"
  },
  {
    "label": "UTF16CharIterator()",
    "kind": "Method",
    "detail": "Function (private : StringPiece str_ ; size_t array_pos_ ; size_t next_pos_ ; size_t char_pos_ ; int32_t char_ ; } ; class BASE_I18N_EXPORT UTF16CharIterator { public :)",
    "insertText": "UTF16CharIterator(StringPiece16 str)"
  },
  {
    "label": "UTF16CharIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UTF16CharIterator(UTF16CharIterator&& to_move)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UTF16CharIterator&)",
    "insertText": "operator(UTF16CharIterator&& to_move)"
  },
  {
    "label": "UTF16CharIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UTF16CharIterator(const UTF16CharIterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UTF16CharIterator)",
    "insertText": "operator(const UTF16CharIterator&)"
  },
  {
    "label": "UTF16CharIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UTF16CharIterator()"
  },
  {
    "label": "LowerBound()",
    "kind": "Method",
    "detail": "Function (UTF16CharIterator)",
    "insertText": "LowerBound(StringPiece16 str, size_t array_index)"
  },
  {
    "label": "UpperBound()",
    "kind": "Method",
    "detail": "Function (UTF16CharIterator)",
    "insertText": "UpperBound(StringPiece16 str, size_t array_index)"
  },
  {
    "label": "PreviousCodePoint()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "PreviousCodePoint()"
  },
  {
    "label": "start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "start()"
  },
  {
    "label": "Rewind()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rewind()"
  },
  {
    "label": "UTF16CharIterator()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "UTF16CharIterator(base::StringPiece16 str, size_t initial_pos)"
  },
  {
    "label": "ReadChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadChar()"
  }
]