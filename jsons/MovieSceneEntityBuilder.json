[
  {
    "label": "FAdd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAdd"
  },
  {
    "label": "FAddMany",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddMany"
  },
  {
    "label": "FAddConditional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAddConditional"
  },
  {
    "label": "TAdd",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAdd"
  },
  {
    "label": "TAddConditional",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAddConditional"
  },
  {
    "label": "TEntityBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityBuilder"
  },
  {
    "label": "TEntityBuilderImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEntityBuilderImpl"
  },
  {
    "label": "FTypelessMutation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypelessMutation"
  },
  {
    "label": "IEntityBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IEntityBuilder"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / MovieSceneEntityIDs . h \" # include \" EntitySystem / MovieSceneEntitySystemTypes . h \" # include \" EntitySystem / MovieSceneEntityManager . h \" # include \" EntitySystem / MovieSceneComponentRegistry . h \" # include \" EntitySystem / MovieSceneEntityFactory . h \" # include \" EntitySystem / MovieSceneMutualComponentInclusivity . h \" # include \" Delegates / IntegerSequence . h \" # include<initializer_list> namespace UE { namespace MovieScene { struct FAdd ; struct FAddMany ; struct FAddConditional ; template<T> struct TAdd ; template<T> struct TAddConditional ; template<. . . T> struct TEntityBuilder ; template<. . . T> struct TEntityBuilderImpl ; struct FTypelessMutation { FComponentMask AddMask ; FComponentMask RemoveMask ; bool bRemoveAll = false ; FTypelessMutation&)",
    "insertText": "Add(std::initializer_list<FComponentTypeID> TypeIDs)"
  },
  {
    "label": "SetAll()",
    "kind": "Method",
    "detail": "Function (AddMask .)",
    "insertText": "SetAll(TypeIDs)"
  },
  {
    "label": "MutateType()",
    "kind": "Method",
    "detail": "Function (bRemoveAll = true ; return* this ; } FComponentMask)",
    "insertText": "MutateType(const FComponentMask& Current)"
  },
  {
    "label": "IEntityBuilder()",
    "kind": "Method",
    "detail": "Function (} ; struct IEntityBuilder { ~)",
    "insertText": "IEntityBuilder()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneEntityID)",
    "insertText": "Create(FEntityManager* EntityManager)"
  },
  {
    "label": "GenerateType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateType(FEntityManager* EntityManager, FComponentMask& OutMask, bool& OutAddMutualComponents)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(FEntityManager* EntityManager, const FEntityInfo& EntityInfo)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; template<. . . T> struct TEntityBuilder : TEntityBuilderImpl<TMakeIntegerSequence<int,)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "TEntityBuilder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TEntityBuilder()"
  },
  {
    "label": "TEntityBuilder()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args>)",
    "insertText": "TEntityBuilder(Args&&... InTypes) : Super(Forward<Args>(InTypes)...)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TEntityBuilderImpl<TIntegerSequence<int>> { TEntityBuilder<FAdd>)",
    "insertText": "AddDefaulted(FComponentTypeID ComponentType)"
  },
  {
    "label": "AddMany()",
    "kind": "Method",
    "detail": "Function (TEntityBuilder<FAddMany>)",
    "insertText": "AddMany(const FComponentMask& InComponentsToAdd)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (TEntityBuilder<FAdd>)",
    "insertText": "AddTag(FComponentTypeID TagType)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (template<U,PayloadType> TEntityBuilder<TAdd<U>>)",
    "insertText": "Add(TComponentTypeID<U> ComponentType, PayloadType&& InPayload)"
  },
  {
    "label": "AddConditional()",
    "kind": "Method",
    "detail": "Function (template<U,PayloadType> TEntityBuilder<TAddConditional<U>>)",
    "insertText": "AddConditional(TComponentTypeID<U> ComponentType, PayloadType&& InPayload, bool bCondition)"
  },
  {
    "label": "AddDefaultedConditional()",
    "kind": "Method",
    "detail": "Function (TEntityBuilder<FAddConditional>)",
    "insertText": "AddDefaultedConditional(FComponentTypeID ComponentType, bool bCondition)"
  },
  {
    "label": "AddTagConditional()",
    "kind": "Method",
    "detail": "Function (TEntityBuilder<FAddConditional>)",
    "insertText": "AddTagConditional(FComponentTypeID TagType, bool bCondition)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (template<U> TEntityBuilder<U>)",
    "insertText": "Append(U&& InOther)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitTupleElements([&OutMask](auto& In){ In.AccumulateMask(OutMask); }, this->Payload)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (OutAddMutualComponents = true ; } } void)",
    "insertText": "Initialize(FEntityManager* EntityManager, const FEntityInfo& Entity)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitTupleElements([Entity](auto& In){ In.Apply(Entity.Data.Allocation, Entity.Data.ComponentOffset); }, this->Payload)"
  },
  {
    "label": "CreateEntity()",
    "kind": "Method",
    "detail": "Function (} } FMovieSceneEntityID)",
    "insertText": "CreateEntity(FEntityManager* EntityManager, FComponentMask NewType = FComponentMask())"
  },
  {
    "label": "GenerateType()",
    "kind": "Method",
    "detail": "Function (bool bLocalAddMutualComponents = false ;)",
    "insertText": "GenerateType(EntityManager, NewType, bLocalAddMutualComponents)"
  },
  {
    "label": "WriteContext()",
    "kind": "Method",
    "detail": "Function (FMutualComponentInitializers MutualInitializers ; FEntityAllocationWriteContext)",
    "insertText": "WriteContext(*EntityManager)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (EMutuallyInclusiveComponentType MutualTypes = bLocalAddMutualComponents ? EMutuallyInclusiveComponentType::All : EMutuallyInclusiveComponentType::Mandatory ; EntityManager ->)",
    "insertText": "GetComponents()->Factories.ComputeMutuallyInclusiveComponents(MutualTypes, NewType, MutualInitializers)"
  },
  {
    "label": "AllocateEntity()",
    "kind": "Method",
    "detail": "Function (FEntityInfo Entry = EntityManager ->)",
    "insertText": "AllocateEntity(NewType)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(EntityManager, Entry)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (MutualInitializers .)",
    "insertText": "Execute(Entry.Data.AsRange(), WriteContext)"
  },
  {
    "label": "CreateEntity()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEntityID NewEntityID =)",
    "insertText": "CreateEntity(EntityManager, NewType)"
  },
  {
    "label": "ReplaceEntityID()",
    "kind": "Method",
    "detail": "Function (EntityManager ->)",
    "insertText": "ReplaceEntityID(InOutEntityID, NewEntityID)"
  },
  {
    "label": "MutateExisting()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MutateExisting(FEntityManager* EntityManager, FMovieSceneEntityID EntityID, const FTypelessMutation& Base = FTypelessMutation())"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (FComponentMask OldMask = EntityManager ->)",
    "insertText": "GetEntityType(EntityID)"
  },
  {
    "label": "MutateType()",
    "kind": "Method",
    "detail": "Function (FComponentMask NewMask = Base .)",
    "insertText": "MutateType(OldMask)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitTupleElements([&NewMask](auto& In){ In.AccumulateMask(NewMask); }, this->Payload)"
  },
  {
    "label": "GetComponents()",
    "kind": "Method",
    "detail": "Function (EMutuallyInclusiveComponentType MutualTypes = bAddMutualComponents ? EMutuallyInclusiveComponentType::All : EMutuallyInclusiveComponentType::Mandatory ; EntityManager ->)",
    "insertText": "GetComponents()->Factories.ComputeMutuallyInclusiveComponents(MutualTypes, NewMask, MutualInitializers)"
  },
  {
    "label": "ChangeEntityType()",
    "kind": "Method",
    "detail": "Function (EntityManager ->)",
    "insertText": "ChangeEntityType(EntityID, NewMask)"
  },
  {
    "label": "GetEntity()",
    "kind": "Method",
    "detail": "Function (} FEntityInfo Entry = EntityManager ->)",
    "insertText": "GetEntity(EntityID)"
  },
  {
    "label": "VisitTupleElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VisitTupleElements([Entry](auto& In){ In.Apply(Entry.Data.Allocation, Entry.Data.ComponentOffset); }, this->Payload)"
  },
  {
    "label": "CreateOrUpdate()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateOrUpdate(FEntityManager* EntityManager, FMovieSceneEntityID& InOutEntityID, const FTypelessMutation& Base = FTypelessMutation().RemoveAll())"
  },
  {
    "label": "MutateExisting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MutateExisting(EntityManager, InOutEntityID, Base)"
  },
  {
    "label": "CreateEntity()",
    "kind": "Method",
    "detail": "Function (} else { InOutEntityID =)",
    "insertText": "CreateEntity(EntityManager, Base.AddMask)"
  },
  {
    "label": "AddMutualComponents()",
    "kind": "Method",
    "detail": "Function (TEntityBuilder<T . . .>)",
    "insertText": "AddMutualComponents()"
  },
  {
    "label": "TEntityBuilderImpl()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TEntityBuilderImpl(T&&... InArgs, bool bInAddMutualComponents) : Payload(MoveTemp(InArgs)...) , bAddMutualComponents(bInAddMutualComponents)"
  },
  {
    "label": "FAddMany()",
    "kind": "Method",
    "detail": "Function (} TTuple<T . . .> Payload ; bool bAddMutualComponents ; } ; using FEntityBuilder = TEntityBuilder<> ; struct FAddMany { FComponentMask BaseComponentMask ;)",
    "insertText": "FAddMany(const FComponentMask& InBaseComponentMask) : BaseComponentMask(InBaseComponentMask)"
  },
  {
    "label": "AccumulateMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AccumulateMask(FComponentMask& OutMask)"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (OutMask .)",
    "insertText": "CombineWithBitwiseOR(BaseComponentMask, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FEntityAllocation* Allocation, int32 ComponentOffset)"
  },
  {
    "label": "FAdd()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAdd { FComponentTypeID ComponentTypeID ;)",
    "insertText": "FAdd(FComponentTypeID InComponentTypeID) : ComponentTypeID(InComponentTypeID)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (OutMask .)",
    "insertText": "Set(ComponentTypeID)"
  },
  {
    "label": "FAddConditional()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAddConditional { FComponentTypeID ComponentTypeID ; bool bCondition ;)",
    "insertText": "FAddConditional(FComponentTypeID InComponentTypeID, bool bInCondition) : ComponentTypeID(InComponentTypeID) , bCondition(bInCondition)"
  },
  {
    "label": "TAdd()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TAdd : FAdd { TOptional<T> Payload ; template<PayloadType>)",
    "insertText": "TAdd(TComponentTypeID<T> InComponentTypeID, PayloadType&& InPayload) : FAdd(InComponentTypeID) , Payload(Forward<PayloadType>(InPayload))"
  },
  {
    "label": "GetComponentHeaderChecked()",
    "kind": "Method",
    "detail": "Function (const FComponentHeader& Header = Allocation ->)",
    "insertText": "GetComponentHeaderChecked(ComponentTypeID)"
  },
  {
    "label": "WriteLock()",
    "kind": "Method",
    "detail": "Function (FScopedHeaderWriteLock)",
    "insertText": "WriteLock(&Header, Allocation->GetCurrentLockMode(), FEntityAllocationWriteContext::NewAllocation())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* ComponentPtr = static_cast<)",
    "insertText": "T(Header.GetValuePtr(ComponentOffset))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (* ComponentPtr =)",
    "insertText": "MoveTemp(Payload.GetValue())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Payload .)",
    "insertText": "Reset()"
  },
  {
    "label": "TAddConditional()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TAddConditional : FAddConditional { TOptional<T> Payload ; template<PayloadType>)",
    "insertText": "TAddConditional(TComponentTypeID<T> ComponentTypeID, PayloadType&& InPayload, bool bInCondition) : FAddConditional(ComponentTypeID, bInCondition) , Payload(Forward<PayloadType>(InPayload))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FComponentMask NewMask ;)",
    "insertText": "if(!bRemoveAll)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NewMask = Current ; })",
    "insertText": "if(RemoveMask.Num())"
  },
  {
    "label": "BitwiseNOT()",
    "kind": "Method",
    "detail": "Function (FComponentMask MaskOut = RemoveMask ; MaskOut .)",
    "insertText": "BitwiseNOT()"
  },
  {
    "label": "CombineWithBitwiseAND()",
    "kind": "Method",
    "detail": "Function (NewMask .)",
    "insertText": "CombineWithBitwiseAND(MaskOut, EBitwiseOperatorFlags::MaintainSize | EBitwiseOperatorFlags::OneFillMissingBits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(AddMask.Num())"
  },
  {
    "label": "CombineWithBitwiseOR()",
    "kind": "Method",
    "detail": "Function (NewMask .)",
    "insertText": "CombineWithBitwiseOR(AddMask, EBitwiseOperatorFlags::MaxSize)"
  },
  {
    "label": "AddDefaultedConditional()",
    "kind": "Method",
    "detail": "Function (} TEntityBuilder<FAddConditional> TEntityBuilderImpl<TIntegerSequence<int>)",
    "insertText": "AddDefaultedConditional(FComponentTypeID TagType, bool bCondition)"
  }
]