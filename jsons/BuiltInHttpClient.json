[
  {
    "label": "IBuiltInHttpClientSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuiltInHttpClientSocket"
  },
  {
    "label": "IBuiltInHttpClientSocketPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuiltInHttpClientSocketPool"
  },
  {
    "label": "FBuiltInHttpClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBuiltInHttpClient"
  },
  {
    "label": "IBuiltInHttpClientSocket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" StorageServerHttpClient . h \" # include \" SocketTypes . h \" # if ! UE_BUILD_SHIPPING class IBuiltInHttpClientSocket { public : ~)",
    "insertText": "IBuiltInHttpClientSocket()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(const uint8* Data, const uint64 DataSize)"
  },
  {
    "label": "Recv()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Recv(uint8* Data, const uint64 DataSize, uint64& BytesRead, ESocketReceiveFlags::Type ReceiveFlags)"
  },
  {
    "label": "HasPendingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPendingData(uint64& PendingDataSize)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "IBuiltInHttpClientSocketPool()",
    "kind": "Method",
    "detail": "Function (} ; class IBuiltInHttpClientSocketPool { public : ~)",
    "insertText": "IBuiltInHttpClientSocketPool()"
  },
  {
    "label": "AcquireSocket()",
    "kind": "Method",
    "detail": "Function (IBuiltInHttpClientSocket*)",
    "insertText": "AcquireSocket(float TimeoutSeconds = -1.f)"
  },
  {
    "label": "ReleaseSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseSocket(IBuiltInHttpClientSocket* Socket, bool bKeepAlive)"
  },
  {
    "label": "FBuiltInHttpClient()",
    "kind": "Method",
    "detail": "Function (} ; class FBuiltInHttpClient : public IStorageServerHttpClient { public :)",
    "insertText": "FBuiltInHttpClient(TUniquePtr<IBuiltInHttpClientSocketPool> InSocketPool, FString InHostname)"
  },
  {
    "label": "FBuiltInHttpClient()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FBuiltInHttpClient()"
  },
  {
    "label": "RequestSync()",
    "kind": "Method",
    "detail": "Function (FResult)",
    "insertText": "RequestSync(FAnsiStringView Url, EStorageServerContentType Accept, FAnsiStringView Verb, TOptional<FIoBuffer> OptPayload, TOptional<FIoBuffer> OptDestination, float TimeoutSeconds, const bool bReportErrors)"
  },
  {
    "label": "RequestAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestAsync(FResultCallback&& Callback, FAnsiStringView Url, EStorageServerContentType Accept, FAnsiStringView Verb, TOptional<FIoBuffer> OptPayload, TOptional<FIoBuffer> OptDestination, float TimeoutSeconds, const bool bReportErrors)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(RequestSync(Url, Accept, Verb, OptPayload, OptDestination, TimeoutSeconds, bReportErrors))"
  }
]