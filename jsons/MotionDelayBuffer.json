[
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FMotionDelayBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMotionDelayBuffer"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FMotionDelayTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMotionDelayTarget"
  },
  {
    "label": "FMotionDelayClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMotionDelayClient"
  },
  {
    "label": "FMotionDelayService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMotionDelayService"
  },
  {
    "label": "FTargetTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetTransform"
  },
  {
    "label": "TCircularHistoryBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCircularHistoryBuffer"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SharedPointer . h \" # include \" LateUpdateManager . h \" # include \" UObject / WeakObjectPtr . h \" # include \" SceneViewExtension . h \" class USceneComponent ; class FSceneInterface ; class FMotionDelayBuffer ; class FSceneViewFamily ; class FMotionDelayTarget ; class FMotionDelayClient ; class FMotionDelayService { public : void)",
    "insertText": "SetEnabled(bool bEnable)"
  },
  {
    "label": "RegisterDelayTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterDelayTarget(USceneComponent* MotionControlledComponent, const int32 PlayerIndex, const FName SourceId)"
  },
  {
    "label": "RegisterDelayClient()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDelayClient(TSharedRef<FMotionDelayClient, ESPMode::ThreadSafe> DelayClient)"
  },
  {
    "label": "FMotionDelayClient()",
    "kind": "Method",
    "detail": "Function (} ; class FMotionDelayClient : public FSceneViewExtensionBase { public :)",
    "insertText": "FMotionDelayClient(const FAutoRegister& AutoRegister)"
  },
  {
    "label": "GetDesiredDelay()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDesiredDelay()"
  },
  {
    "label": "GetExemptTargets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExemptTargets(TArray<USceneComponent*>& ExemptTargets)"
  },
  {
    "label": "Apply_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply_RenderThread(FSceneInterface* Scene)"
  },
  {
    "label": "Restore_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore_RenderThread(FSceneInterface* Scene)"
  },
  {
    "label": "SetupViewFamily()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetupViewFamily(FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "SetupView()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupView(FSceneViewFamily& InViewFamily, FSceneView& InView)"
  },
  {
    "label": "BeginRenderViewFamily()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginRenderViewFamily(FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "PreRenderView_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreRenderView_RenderThread(FRDGBuilder& GraphBuilder, FSceneView& InView)"
  },
  {
    "label": "PreRenderViewFamily_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreRenderViewFamily_RenderThread(FRDGBuilder& GraphBuilder, FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "PostRenderViewFamily_RenderThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostRenderViewFamily_RenderThread(FRDGBuilder& GraphBuilder, FSceneViewFamily& InViewFamily)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPriority()"
  },
  {
    "label": "IsActiveThisFrame_Internal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActiveThisFrame_Internal(const FSceneViewExtensionContext& Context)"
  },
  {
    "label": "FindDelayTransform()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "FindDelayTransform(USceneComponent* Target, uint32 Delay, FTransform& TransformOut)"
  },
  {
    "label": "TCircularHistoryBuffer()",
    "kind": "Method",
    "detail": "Function (private : struct FTargetTransform { TSharedPtr<FMotionDelayTarget,ESPMode::ThreadSafe> DelayTarget ; FTransform DelayTransform ; FTransform RestoreTransform ; } ; TArray<FTargetTransform> TargetTransforms_RenderThread ; } ; template<ElementType> class TCircularHistoryBuffer { public :)",
    "insertText": "TCircularHistoryBuffer(uint32 InitialCapacity = 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementType&)",
    "insertText": "Add(const ElementType& Element)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(uint32 NewCapacity)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ElementType&)",
    "insertText": "operator(uint32 Index)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAt(uint32 Index, const ElementType& Element)"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Capacity()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RangeCheck(const uint32 Index, bool bCheckIfUnderfilled = false)"
  },
  {
    "label": "AsInternalIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AsInternalIndex(uint32 Index)"
  },
  {
    "label": "GetNextIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNextIndex(uint32 CurrentIndex)"
  },
  {
    "label": "ResizeGrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeGrow(uint32 AddedSlack)"
  },
  {
    "label": "Realign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Realign()"
  },
  {
    "label": "ResizeShrink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeShrink(uint32 ShrinkAmount)"
  }
]