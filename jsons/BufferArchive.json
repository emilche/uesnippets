[
  {
    "label": "TBufferArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBufferArchive"
  },
  {
    "label": "FBufferArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferArchive"
  },
  {
    "label": "FBufferArchive64",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBufferArchive64"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" UObject / NameTypes . h \" # include \" Serialization / MemoryWriter . h \" template<int IndexSize> class TBufferArchive : public TMemoryWriter<IndexSize>,public TArray<uint8,TSizedDefaultAllocator<IndexSize>> {)",
    "insertText": "static_assert(IndexSize == 32 || IndexSize == 64, \"Only 32-bit and 64-bit index sizes supported\")"
  },
  {
    "label": "TBufferArchive()",
    "kind": "Method",
    "detail": "Function (public : using ArrayType = TArray<uint8,TSizedDefaultAllocator<IndexSize>> ;)",
    "insertText": "TBufferArchive(bool bIsPersistent = false, const FName InArchiveName = NAME_None ) : TMemoryWriter<IndexSize>( *static_cast<ArrayType*>(this), bIsPersistent, false, InArchiveName)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "TEXT(\"FBufferArchive \") + this->ArchiveName.ToString()"
  }
]