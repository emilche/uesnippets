[
  {
    "label": "BucketRanges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BucketRanges"
  },
  {
    "label": "HistogramSnapshotManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramSnapshotManager"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "HistogramProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramProvider"
  },
  {
    "label": "StatisticsRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsRecorder"
  },
  {
    "label": "StatisticsRecorderTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsRecorderTest"
  },
  {
    "label": "MergeHistogramDeltas()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_METRICS_STATISTICS_RECORDER_H_ # define BASE_METRICS_STATISTICS_RECORDER_H_ # include<stdint . h> # include<atomic> # include<memory> # include<string> # include<unordered_map> # include<unordered_set> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / gtest_prod_util . h \" # include \" base / lazy_instance . h \" # include \" base / memory / raw_ptr . h \" # include \" base / memory / weak_ptr . h \" # include \" base / metrics / histogram_base . h \" # include \" base / metrics / ranges_manager . h \" # include \" base / metrics / record_histogram_checker . h \" # include \" base / observer_list_threadsafe . h \" # include \" base / strings / string_piece . h \" # include \" base / thread_annotations . h \" # include \" base / types / pass_key . h \" # include \" third_party / abseil - cpp / absl / synchronization / mutex . h \" namespace base { class BucketRanges ; class HistogramSnapshotManager ; class BASE_EXPORT StatisticsRecorder { public : class HistogramProvider { public : void)",
    "insertText": "MergeHistogramDeltas()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using OnSampleCallback = base::RepeatingCallback<)",
    "insertText": "void(const char* , uint64_t , HistogramBase::Sample)"
  },
  {
    "label": "ScopedHistogramSampleObserver()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT ScopedHistogramSampleObserver { public :)",
    "insertText": "ScopedHistogramSampleObserver(const std::string& histogram_name, OnSampleCallback callback)"
  },
  {
    "label": "ScopedHistogramSampleObserver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedHistogramSampleObserver()"
  },
  {
    "label": "RunCallback()",
    "kind": "Method",
    "detail": "Function (private : class StatisticsRecorder ; void)",
    "insertText": "RunCallback(const char* histogram_name, uint64_t name_hash, HistogramBase::Sample sample)"
  },
  {
    "label": "StatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (const std::string histogram_name_ ; const OnSampleCallback callback_ ; } ; typedef std::vector<HistogramBase*> Histograms ;)",
    "insertText": "StatisticsRecorder(const StatisticsRecorder&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StatisticsRecorder&)",
    "insertText": "operator(const StatisticsRecorder&)"
  },
  {
    "label": "StatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StatisticsRecorder()"
  },
  {
    "label": "RegisterHistogramProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterHistogramProvider(const WeakPtr<HistogramProvider>& provider)"
  },
  {
    "label": "RegisterOrDeleteDuplicate()",
    "kind": "Method",
    "detail": "Function (HistogramBase*)",
    "insertText": "RegisterOrDeleteDuplicate(HistogramBase* histogram)"
  },
  {
    "label": "RegisterOrDeleteDuplicateRanges()",
    "kind": "Method",
    "detail": "Function (const BucketRanges*)",
    "insertText": "RegisterOrDeleteDuplicateRanges(const BucketRanges* ranges)"
  },
  {
    "label": "WriteGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteGraph(const std::string& query, std::string* output)"
  },
  {
    "label": "ToJSON()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToJSON(JSONVerbosityLevel verbosity_level)"
  },
  {
    "label": "GetHistograms()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "GetHistograms()"
  },
  {
    "label": "GetBucketRanges()",
    "kind": "Method",
    "detail": "Function (std::vector<const BucketRanges*>)",
    "insertText": "GetBucketRanges()"
  },
  {
    "label": "FindHistogram()",
    "kind": "Method",
    "detail": "Function (HistogramBase*)",
    "insertText": "FindHistogram(base::StringPiece name)"
  },
  {
    "label": "ImportProvidedHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportProvidedHistograms()"
  },
  {
    "label": "PrepareDeltas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDeltas(bool include_persistent, HistogramBase::Flags flags_to_set, HistogramBase::Flags required_flags, HistogramSnapshotManager* snapshot_manager)"
  },
  {
    "label": "FindAndRunHistogramCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndRunHistogramCallbacks(base::PassKey<HistogramBase>, const char* histogram_name, uint64_t name_hash, HistogramBase::Sample sample)"
  },
  {
    "label": "GetHistogramCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetHistogramCount()"
  },
  {
    "label": "InitLogOnShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLogOnShutdown()"
  },
  {
    "label": "ForgetHistogramForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetHistogramForTesting(base::StringPiece name)"
  },
  {
    "label": "CreateTemporaryForTesting()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] std::unique_ptr<StatisticsRecorder>)",
    "insertText": "CreateTemporaryForTesting()"
  },
  {
    "label": "SetRecordChecker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordChecker(std::unique_ptr<RecordHistogramChecker> record_checker)"
  },
  {
    "label": "ShouldRecordHistogram()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecordHistogram(uint32_t histogram_hash)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "Sort(Histograms histograms)"
  },
  {
    "label": "WithName()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "WithName(Histograms histograms, const std::string& query)"
  },
  {
    "label": "NonPersistent()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "NonPersistent(Histograms histograms)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using GlobalSampleCallback =)",
    "insertText": "void(*)(const char* , uint64_t , HistogramBase::Sample)"
  },
  {
    "label": "SetGlobalSampleCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalSampleCallback(const GlobalSampleCallback& global_sample_callback)"
  },
  {
    "label": "global_sample_callback()",
    "kind": "Method",
    "detail": "Function (GlobalSampleCallback)",
    "insertText": "global_sample_callback()"
  },
  {
    "label": "have_active_callbacks()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "have_active_callbacks()"
  },
  {
    "label": "AddHistogramSampleObserver()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "AddHistogramSampleObserver(const std::string& histogram_name, ScopedHistogramSampleObserver* observer)"
  },
  {
    "label": "RemoveHistogramSampleObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHistogramSampleObserver(const std::string& histogram_name, ScopedHistogramSampleObserver* observer)"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<WeakPtr<HistogramProvider>> HistogramProviders ; typedef std::unordered_map<StringPiece,HistogramBase*,StringPieceHash> HistogramMap ; using HistogramSampleObserverList = base::ObserverListThreadSafe<ScopedHistogramSampleObserver> ; typedef std::unordered_map<std::string,scoped_refptr<HistogramSampleObserverList>> ObserverMap ; class StatisticsRecorderTest ;)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(StatisticsRecorderTest, IterationTest)"
  },
  {
    "label": "EnsureGlobalRecorderWhileLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureGlobalRecorderWhileLocked() EXCLUSIVE_LOCKS_REQUIRED(lock_.Pointer())"
  },
  {
    "label": "GetHistogramProviders()",
    "kind": "Method",
    "detail": "Function (HistogramProviders)",
    "insertText": "GetHistogramProviders()"
  },
  {
    "label": "ImportGlobalPersistentHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportGlobalPersistentHistograms() LOCKS_EXCLUDED(lock_.Pointer())"
  },
  {
    "label": "StatisticsRecorder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatisticsRecorder() EXCLUSIVE_LOCKS_REQUIRED(lock_.Pointer())"
  },
  {
    "label": "InitLogOnShutdownWhileLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLogOnShutdownWhileLocked() EXCLUSIVE_LOCKS_REQUIRED(lock_.Pointer())"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (HistogramMap histograms_ ; ObserverMap observers_ ; HistogramProviders providers_ ; RangesManager ranges_manager_ ; std::unique_ptr<RecordHistogramChecker> record_checker_ ; raw_ptr<StatisticsRecorder> previous_ = nullptr ; LazyInstance<absl::Mutex>::Leaky lock_ ; StatisticsRecorder* top_)",
    "insertText": "GUARDED_BY(lock_.Pointer())"
  }
]