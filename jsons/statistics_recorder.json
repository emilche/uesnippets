[
  {
    "label": "BucketRanges",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BucketRanges"
  },
  {
    "label": "HistogramSnapshotManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramSnapshotManager"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "HistogramProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HistogramProvider"
  },
  {
    "label": "starts",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "starts"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "StatisticsRecorder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsRecorder"
  },
  {
    "label": "StatisticsRecorderTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatisticsRecorderTest"
  },
  {
    "label": "ScopedHistogramSampleObserver()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedHistogramSampleObserver(const std::string& histogram_name,\n                                           OnSampleCallback callback)"
  },
  {
    "label": "RunCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunCallback(const char* histogram_name,\n                     uint64_t name_hash,\n                     HistogramBase::Sample sample)"
  },
  {
    "label": "RegisterHistogramProvider()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterHistogramProvider(\n      const WeakPtr<HistogramProvider>& provider)"
  },
  {
    "label": "WriteGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteGraph(const std::string& query, std::string* output)"
  },
  {
    "label": "ToJSON()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToJSON(JSONVerbosityLevel verbosity_level)"
  },
  {
    "label": "GetHistograms()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "GetHistograms()"
  },
  {
    "label": "ImportProvidedHistograms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportProvidedHistograms()"
  },
  {
    "label": "PrepareDeltas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareDeltas(bool include_persistent,\n                            HistogramBase::Flags flags_to_set,\n                            HistogramBase::Flags required_flags,\n                            HistogramSnapshotManager* snapshot_manager)"
  },
  {
    "label": "FindAndRunHistogramCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndRunHistogramCallbacks(base::PassKey<HistogramBase>,\n                                           const char* histogram_name,\n                                           uint64_t name_hash,\n                                           HistogramBase::Sample sample)"
  },
  {
    "label": "GetHistogramCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetHistogramCount()"
  },
  {
    "label": "InitLogOnShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitLogOnShutdown()"
  },
  {
    "label": "ForgetHistogramForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetHistogramForTesting(base::StringPiece name)"
  },
  {
    "label": "CreateTemporaryForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<StatisticsRecorder>)",
    "insertText": "CreateTemporaryForTesting()"
  },
  {
    "label": "SetRecordChecker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecordChecker(\n      std::unique_ptr<RecordHistogramChecker> record_checker)"
  },
  {
    "label": "ShouldRecordHistogram()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecordHistogram(uint32_t histogram_hash)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "Sort(Histograms histograms)"
  },
  {
    "label": "WithName()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "WithName(Histograms histograms, const std::string& query)"
  },
  {
    "label": "NonPersistent()",
    "kind": "Method",
    "detail": "Function (Histograms)",
    "insertText": "NonPersistent(Histograms histograms)"
  },
  {
    "label": "SetGlobalSampleCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGlobalSampleCallback(\n      const GlobalSampleCallback& global_sample_callback)"
  },
  {
    "label": "AddHistogramSampleObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddHistogramSampleObserver(\n      const std::string& histogram_name,\n      ScopedHistogramSampleObserver* observer)"
  },
  {
    "label": "RemoveHistogramSampleObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHistogramSampleObserver(\n      const std::string& histogram_name,\n      ScopedHistogramSampleObserver* observer)"
  },
  {
    "label": "GetHistogramProviders()",
    "kind": "Method",
    "detail": "Function (HistogramProviders)",
    "insertText": "GetHistogramProviders()"
  }
]