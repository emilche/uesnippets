[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetStatsCounterNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetStatsCounterNode"
  },
  {
    "label": "INSIGHTS_DECLARE_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" TraceServices / Model / NetProfiler . h \" # include \" InsightsCore / Table / ViewModels / BaseTreeNode . h \" namespace UE::Insights::NetworkingProfiler { enum class ENetStatsCounterNodeType { FrameStats,PacketStats,Group,InvalidOrMax,} ; class FNetStatsCounterNode ; typedef TSharedPtr<class FNetStatsCounterNode> FNetStatsCounterNodePtr ; typedef TSharedRef<class FNetStatsCounterNode> FNetStatsCounterNodeRef ; typedef TSharedRef<const class FNetStatsCounterNode> FNetStatsCounterNodeRefConst ; typedef TWeakPtr<class FNetStatsCounterNode> FNetStatsCounterNodeWeak ; class FNetStatsCounterNode : public FBaseTreeNode {)",
    "insertText": "INSIGHTS_DECLARE_RTTI(FNetStatsCounterNode, FBaseTreeNode)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (using ENetProfilerStatsCounterType = TraceServices::ENetProfilerStatsCounterType ; uint32 InvalidCounterIndex =)",
    "insertText": "uint32(-1)"
  },
  {
    "label": "FNetStatsCounterNode()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FNetStatsCounterNode(uint32 InStatsCounterTypeIndex, const FName InName, ENetProfilerStatsCounterType CounterType) : FBaseTreeNode(InName, false) , Type(CounterType == ENetProfilerStatsCounterType::Packet ? ENetStatsCounterNodeType::PacketStats : ENetStatsCounterNodeType::FrameStats)"
  },
  {
    "label": "ResetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (AggregatedStats . StatsCounterTypeIndex = InStatsCounterTypeIndex ;)",
    "insertText": "ResetAggregatedStats()"
  },
  {
    "label": "FNetStatsCounterNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetStatsCounterNode(const FName InGroupName) : FBaseTreeNode(InGroupName, true) , Type(ENetStatsCounterNodeType::Group)"
  },
  {
    "label": "GetCounterTypeIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetCounterTypeIndex()"
  },
  {
    "label": "SetAggregatedStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAggregatedStats(const FNetProfilerAggregatedStatsCounterStats& AggregatedStats)"
  },
  {
    "label": "GetTextForAggregatedStatsSum()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsSum(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsMin()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsMin(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsMax()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsMax(bool bForTooltip = false)"
  },
  {
    "label": "GetTextForAggregatedStatsAverage()",
    "kind": "Method",
    "detail": "Function (const FText)",
    "insertText": "GetTextForAggregatedStatsAverage(bool bForTooltip = false)"
  },
  {
    "label": "FormatAggregatedStatsValue()",
    "kind": "Method",
    "detail": "Function (private : const FText)",
    "insertText": "FormatAggregatedStatsValue(uint32 Value)"
  }
]