[
  {
    "label": "IClickBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClickBehaviorTarget"
  },
  {
    "label": "IClickDragBehaviorTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClickDragBehaviorTarget"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FInputDeviceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceState"
  },
  {
    "label": "USingleClickOrDragInputBehavior",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USingleClickOrDragInputBehavior"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BaseBehaviors / AnyButtonInputBehavior . h \" # include \" BehaviorTargetInterfaces . h \" # include \" CoreMinimal . h \" # include \" InputBehavior . h \" # include \" InputBehaviorModifierStates . h \" # include \" Math / Ray . h \" # include \" Math / Vector2D . h \" # include \" Templates / Function . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" SingleClickOrDragBehavior . generated . h \" class IClickBehaviorTarget ; class IClickDragBehaviorTarget ; class UObject ; struct FInputDeviceState ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(IClickBehaviorTarget* ClickTarget, IClickDragBehaviorTarget* DragTarget)"
  },
  {
    "label": "SetDragTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDragTarget(IClickDragBehaviorTarget* DragTarget)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "bool(const FInputDeviceState&)"
  },
  {
    "label": "WantsCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureRequest)",
    "insertText": "WantsCapture(const FInputDeviceState& Input)"
  },
  {
    "label": "BeginCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "BeginCapture(const FInputDeviceState& Input, EInputCaptureSide eSide)"
  },
  {
    "label": "UpdateCapture()",
    "kind": "Method",
    "detail": "Function (FInputCaptureUpdate)",
    "insertText": "UpdateCapture(const FInputDeviceState& Input, const FInputCaptureData& Data)"
  },
  {
    "label": "ForceEndCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceEndCapture(const FInputCaptureData& Data)"
  },
  {
    "label": "OnClickedInternal()",
    "kind": "Method",
    "detail": "Function (protected : IClickBehaviorTarget* ClickTarget ; IClickDragBehaviorTarget* DragTarget ; FVector2D MouseDownPosition2D ; FRay MouseDownRay ; EInputCaptureSide CaptureSide ; bool bInDrag = false ; protected : bool bImmediatelyBeginDragInBeginCapture = false ; void)",
    "insertText": "OnClickedInternal(const FInputDeviceState& Input, const FInputCaptureData& Data)"
  },
  {
    "label": "OnClickDragPressInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragPressInternal(const FInputDeviceState& Input, EInputCaptureSide Side)"
  },
  {
    "label": "OnClickDragInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragInternal(const FInputDeviceState& Input, const FInputCaptureData& Data)"
  },
  {
    "label": "OnClickDragReleaseInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDragReleaseInternal(const FInputDeviceState& Input, const FInputCaptureData& Data)"
  }
]