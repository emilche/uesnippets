[
  {
    "label": "CPUTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPUTracer"
  },
  {
    "label": "CPUTracer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<condition_variable> # include<memory> # include<mutex> # include \" Thread . h \" namespace swappy { class CPUTracer { public :)",
    "insertText": "CPUTracer()"
  },
  {
    "label": "CPUTracer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CPUTracer(CPUTracer&)"
  },
  {
    "label": "startTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "startTrace()"
  },
  {
    "label": "endTrace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "endTrace()"
  },
  {
    "label": "threadMain()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "threadMain()"
  },
  {
    "label": "joinThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "joinThread()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (std::mutex mMutex ; std::condition_variable_any mCond)",
    "insertText": "GUARDED_BY(mMutex)"
  }
]