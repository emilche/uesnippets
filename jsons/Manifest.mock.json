[
  {
    "label": "FMockManifest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMockManifest"
  },
  {
    "label": "GetAppID()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Interfaces / IBuildManifest . h \" # include \" Algo / Copy . h \" # include \" BuildPatchManifest . h \" # include \" Tests / Mock / ManifestField . mock . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FMockManifest : public FBuildPatchAppManifest { public : uint32)",
    "insertText": "GetAppID()"
  },
  {
    "label": "GetFileList()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Filenames ;)",
    "insertText": "GetFileList(Filenames)"
  },
  {
    "label": "GetTaggedFileList()",
    "kind": "Method",
    "detail": "Function (TArray<FString> Filenames ;)",
    "insertText": "GetTaggedFileList(Tags, Filenames)"
  },
  {
    "label": "GetRemovableFiles()",
    "kind": "Method",
    "detail": "Function (Tags = FileTagList ; } void)",
    "insertText": "GetRemovableFiles(const IBuildManifestRef& OldManifest, TArray< FString >& OutRemovableFiles)"
  },
  {
    "label": "GetRemovableFiles()",
    "kind": "Method",
    "detail": "Function (OutRemovableFiles = RemovableFiles ; } void)",
    "insertText": "GetRemovableFiles(const TCHAR* InstallPath, TArray< FString >& OutRemovableFiles)"
  },
  {
    "label": "CopyCustomFields()",
    "kind": "Method",
    "detail": "Function (OutRemovableFiles = RemovableFiles ; } void)",
    "insertText": "CopyCustomFields(const IBuildManifestRef& Other, bool bClobber)"
  },
  {
    "label": "NeedsResaving()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsResaving()"
  },
  {
    "label": "SetCustomField()",
    "kind": "Method",
    "detail": "Function (} const IManifestFieldPtr)",
    "insertText": "SetCustomField(const FString& FieldName, const FString& Value)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (CustomFields .)",
    "insertText": "FindOrAdd(FieldName)"
  },
  {
    "label": "SetCustomField()",
    "kind": "Method",
    "detail": "Function (} const IManifestFieldPtr)",
    "insertText": "SetCustomField(const FString& FieldName, const double& Value)"
  },
  {
    "label": "SetCustomField()",
    "kind": "Method",
    "detail": "Function (} const IManifestFieldPtr)",
    "insertText": "SetCustomField(const FString& FieldName, const int64& Value)"
  },
  {
    "label": "RemoveCustomField()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCustomField(const FString& FieldName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (CustomFields .)",
    "insertText": "Remove(FieldName)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} IBuildManifestRef)",
    "insertText": "Duplicate()"
  },
  {
    "label": "LoadFromFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LoadFromFile(const FString& Filename)"
  },
  {
    "label": "GetFeatureLevel()",
    "kind": "Method",
    "detail": "Function (} EFeatureLevel)",
    "insertText": "GetFeatureLevel()"
  },
  {
    "label": "GetNumberOfChunkReferences()",
    "kind": "Method",
    "detail": "Function (RequiredChunks = ChunksRequiredForFiles ; } uint32)",
    "insertText": "GetNumberOfChunkReferences(const FGuid& ChunkGuid)"
  },
  {
    "label": "GetFileSize()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetFileSize(const TArray<FString>& Filenames)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int64 FileSize = 0 ;)",
    "insertText": "for(const FString& Filename : Filenames)"
  },
  {
    "label": "GetFileSize()",
    "kind": "Method",
    "detail": "Function (FileSize + =)",
    "insertText": "GetFileSize(Filename)"
  },
  {
    "label": "GetFileSize()",
    "kind": "Method",
    "detail": "Function (} return FileSize ; } int64)",
    "insertText": "GetFileSize(const TSet <FString>& Filenames)"
  },
  {
    "label": "GetNumFiles()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumFiles()"
  },
  {
    "label": "GetFileList()",
    "kind": "Method",
    "detail": "Function (Filenames = BuildFileList ; } void)",
    "insertText": "GetFileList(TArray<FStringView>& Filenames)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(BuildFileList, Filenames)"
  },
  {
    "label": "GetFileList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetFileList(TSet<FString>& Filenames)"
  },
  {
    "label": "GetTaggedFileList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTaggedFileList(const TSet<FString>& Tags, TSet<FString>& TaggedFiles)"
  },
  {
    "label": "GetTaggedFileList()",
    "kind": "Method",
    "detail": "Function (TaggedFiles = TaggedFileList ; } void)",
    "insertText": "GetTaggedFileList(const TSet<FString>& Tags, TArray<FString>& TaggedFiles)"
  },
  {
    "label": "Array()",
    "kind": "Method",
    "detail": "Function (TaggedFiles = TaggedFileList .)",
    "insertText": "Array()"
  },
  {
    "label": "GetTaggedFileList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTaggedFileList(const TSet<FString>& Tags, TArray<FStringView>& TaggedFiles)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(TaggedFileList, TaggedFiles)"
  },
  {
    "label": "GetDataList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDataList(TArray<FGuid>& DataGuids)"
  },
  {
    "label": "GetDataList()",
    "kind": "Method",
    "detail": "Function (DataGuids = DataList ; } void)",
    "insertText": "GetDataList(TSet <FGuid>& DataGuids)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (DataGuids .)",
    "insertText": "Append(DataList)"
  },
  {
    "label": "GetFileManifest()",
    "kind": "Method",
    "detail": "Function (} const FFileManifest*)",
    "insertText": "GetFileManifest(const FString& Filename)"
  },
  {
    "label": "IsFileDataManifest()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFileDataManifest()"
  },
  {
    "label": "GetChunkShaHash()",
    "kind": "Method",
    "detail": "Function (OutHash = ChunkInfos [ ChunkGuid ] . Hash ; return true ; } return false ; } bool)",
    "insertText": "GetChunkShaHash(const FGuid& ChunkGuid, FSHAHash& OutHash)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint8 Zero [ FSHA1::DigestSize ] = { 0 } ;)",
    "insertText": "if(ChunkInfos.Contains(ChunkGuid))"
  },
  {
    "label": "Memcmp()",
    "kind": "Method",
    "detail": "Function (OutHash = ChunkInfos [ ChunkGuid ] . ShaHash ; return)",
    "insertText": "Memcmp(OutHash.Hash, Zero, FSHA1::DigestSize)"
  },
  {
    "label": "GetChunkInfo()",
    "kind": "Method",
    "detail": "Function (} return false ; } const FChunkInfo*)",
    "insertText": "GetChunkInfo(const FGuid& ChunkGuid)"
  },
  {
    "label": "GetFileHash()",
    "kind": "Method",
    "detail": "Function (OutHash = FileIdToHashes [ FileGuid ] ; return true ; } return false ; } bool)",
    "insertText": "GetFileHash(const FString& Filename, FSHAHash& OutHash)"
  },
  {
    "label": "GetFilePartHash()",
    "kind": "Method",
    "detail": "Function (OutHash = FileNameToHashes [ Filename ] ; return true ; } return false ; } bool)",
    "insertText": "GetFilePartHash(const FGuid& FilePartGuid, uint64& OutHash)"
  },
  {
    "label": "EnumerateProducibleChunks()",
    "kind": "Method",
    "detail": "Function (OutHash = FilePartHashes [ FilePartGuid ] ; return true ; } return false ; } int32)",
    "insertText": "EnumerateProducibleChunks(const FString& InstallDirectory, const TSet<FGuid>& ChunksRequired, TSet<FGuid>& ChunksAvailable)"
  },
  {
    "label": "Difference()",
    "kind": "Method",
    "detail": "Function (int32 RetVal = ProducibleChunks .)",
    "insertText": "Difference(ChunksAvailable).Num()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (ChunksAvailable .)",
    "insertText": "Append(ProducibleChunks)"
  },
  {
    "label": "GetOutdatedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOutdatedFiles(FBuildPatchAppManifestPtr(StaticCastSharedRef<FBuildPatchAppManifest>(OldManifest)), TEXT(\"\"), OutOutdatedFiles)"
  },
  {
    "label": "GetOutdatedFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetOutdatedFiles(const FBuildPatchAppManifestPtr& OldManifest, const FString& InstallDirectory, TSet<FString>& OutOutdatedFiles)"
  },
  {
    "label": "GetOutdatedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOutdatedFiles(OldManifest.Get(), InstallDirectory, OutOutdatedFiles)"
  },
  {
    "label": "GetOutdatedFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetOutdatedFiles(const FBuildPatchAppManifest* OldManifest, const FString& InstallDirectory, TSet<FString>& OutOutdatedFiles)"
  },
  {
    "label": "GetOutdatedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOutdatedFiles(OldManifest, InstallDirectory, TSet<FString>(), OutOutdatedFiles)"
  },
  {
    "label": "GetOutdatedFiles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetOutdatedFiles(const FBuildPatchAppManifest* OldManifest, const FString& InstallDirectory, const TSet<FString>& FilesToCheck, TSet<FString>& OutOutdatedFiles)"
  },
  {
    "label": "Union()",
    "kind": "Method",
    "detail": "Function (OutOutdatedFiles = OutOutdatedFiles .)",
    "insertText": "Union(OutdatedFiles)"
  },
  {
    "label": "IsFileOutdated()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFileOutdated(const FBuildPatchAppManifestRef& OldManifest, const FString& Filename)"
  },
  {
    "label": "HasFileAttributes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFileAttributes()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FileManifestList . FileList .)",
    "insertText": "Add(FileManifest.Value)"
  },
  {
    "label": "InitLookups()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InitLookups()"
  }
]