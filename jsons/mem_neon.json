[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_ARM_MEM_NEON_H_ # define VPX_VPX_DSP_ARM_MEM_NEON_H_ # include<arm_neon . h> # include<assert . h> # include<string . h> # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_dsp / vpx_dsp_common . h \" # if)",
    "insertText": "defined(__GNUC__) && !defined(__clang__) #if __GNUC__ < 8 || defined(__arm__) static INLINE uint8x16x2_t vld1q_u8_x2(uint8_t const *ptr)"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16x2_t res = { {)",
    "insertText": "vld1q_u8(ptr + 0 * 16), vld1q_u8(ptr + 1 * 16)"
  },
  {
    "label": "vld1q_u8()",
    "kind": "Method",
    "detail": "Function (uint8x16x3_t res = { {)",
    "insertText": "vld1q_u8(ptr + 0 * 16), vld1q_u8(ptr + 1 * 16), vld1q_u8(ptr + 2 * 16)"
  },
  {
    "label": "create_s32x2_neon()",
    "kind": "Method",
    "detail": "Function (} int32x2_t)",
    "insertText": "create_s32x2_neon(const int32_t c0, const int32_t c1)"
  },
  {
    "label": "create_s32x4_neon()",
    "kind": "Method",
    "detail": "Function (} int32x4_t)",
    "insertText": "create_s32x4_neon(const int32_t c0, const int32_t c1, const int32_t c2, const int32_t c3)"
  },
  {
    "label": "load_tran_low_to_s16x2q()",
    "kind": "Method",
    "detail": "Function (} int16x8x2_t)",
    "insertText": "load_tran_low_to_s16x2q(const tran_low_t *buf)"
  },
  {
    "label": "vld2q_s32()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH const int32x4x2_t v0 =)",
    "insertText": "vld2q_s32(buf)"
  },
  {
    "label": "vld2q_s32()",
    "kind": "Method",
    "detail": "Function (const int32x4x2_t v1 =)",
    "insertText": "vld2q_s32(buf + 8)"
  },
  {
    "label": "vmovn_s32()",
    "kind": "Method",
    "detail": "Function (const int16x4_t s0 =)",
    "insertText": "vmovn_s32(v0.val[0])"
  },
  {
    "label": "vmovn_s32()",
    "kind": "Method",
    "detail": "Function (const int16x4_t s1 =)",
    "insertText": "vmovn_s32(v0.val[1])"
  },
  {
    "label": "vmovn_s32()",
    "kind": "Method",
    "detail": "Function (const int16x4_t s2 =)",
    "insertText": "vmovn_s32(v1.val[0])"
  },
  {
    "label": "vmovn_s32()",
    "kind": "Method",
    "detail": "Function (const int16x4_t s3 =)",
    "insertText": "vmovn_s32(v1.val[1])"
  },
  {
    "label": "vcombine_s16()",
    "kind": "Method",
    "detail": "Function (int16x8x2_t res ; res . val [ 0 ] =)",
    "insertText": "vcombine_s16(s0, s2)"
  },
  {
    "label": "vcombine_s16()",
    "kind": "Method",
    "detail": "Function (res . val [ 1 ] =)",
    "insertText": "vcombine_s16(s1, s3)"
  },
  {
    "label": "load_tran_low_to_s16q()",
    "kind": "Method",
    "detail": "Function (# endif } int16x8_t)",
    "insertText": "load_tran_low_to_s16q(const tran_low_t *buf)"
  },
  {
    "label": "vld1q_s32()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH const int32x4_t v0 =)",
    "insertText": "vld1q_s32(buf)"
  },
  {
    "label": "vld1q_s32()",
    "kind": "Method",
    "detail": "Function (const int32x4_t v1 =)",
    "insertText": "vld1q_s32(buf + 4)"
  },
  {
    "label": "vmovn_s32()",
    "kind": "Method",
    "detail": "Function (const int16x4_t s0 =)",
    "insertText": "vmovn_s32(v0)"
  },
  {
    "label": "vmovn_s32()",
    "kind": "Method",
    "detail": "Function (const int16x4_t s1 =)",
    "insertText": "vmovn_s32(v1)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "vld1q_s16(buf)"
  },
  {
    "label": "load_tran_low_to_s16d()",
    "kind": "Method",
    "detail": "Function (# endif } int16x4_t)",
    "insertText": "load_tran_low_to_s16d(const tran_low_t *buf)"
  },
  {
    "label": "vld1_s16()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "vld1_s16(buf)"
  },
  {
    "label": "store_s16q_to_tran_low()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "store_s16q_to_tran_low(tran_low_t *buf, const int16x8_t a)"
  },
  {
    "label": "vmovl_s16()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH const int32x4_t v0 =)",
    "insertText": "vmovl_s16(vget_low_s16(a))"
  },
  {
    "label": "vmovl_s16()",
    "kind": "Method",
    "detail": "Function (const int32x4_t v1 =)",
    "insertText": "vmovl_s16(vget_high_s16(a))"
  },
  {
    "label": "vst1q_s32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_s32(buf, v0)"
  },
  {
    "label": "vst1q_s32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_s32(buf + 4, v1)"
  },
  {
    "label": "vst1q_s16()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "vst1q_s16(buf, a)"
  },
  {
    "label": "uint32_to_mem()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "uint32_to_mem(uint8_t *buf, uint32_t a)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buf, &a, 4)"
  },
  {
    "label": "load_unaligned_u8()",
    "kind": "Method",
    "detail": "Function (} uint8x8_t)",
    "insertText": "load_unaligned_u8(const uint8_t *buf, ptrdiff_t stride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t a ; uint32x2_t a_u32 ;)",
    "insertText": "if(stride == 4) return vld1_u8(buf)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&a, buf, 4)"
  },
  {
    "label": "vdup_n_u32()",
    "kind": "Method",
    "detail": "Function (buf + = stride ; a_u32 =)",
    "insertText": "vdup_n_u32(a)"
  },
  {
    "label": "vset_lane_u32()",
    "kind": "Method",
    "detail": "Function (a_u32 =)",
    "insertText": "vset_lane_u32(a, a_u32, 1)"
  },
  {
    "label": "store_unaligned_u8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_unaligned_u8(uint8_t *buf, ptrdiff_t stride, const uint8x8_t a)"
  },
  {
    "label": "vreinterpret_u32_u8()",
    "kind": "Method",
    "detail": "Function (const uint32x2_t a_u32 =)",
    "insertText": "vreinterpret_u32_u8(a)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_u8(buf, a)"
  },
  {
    "label": "uint32_to_mem()",
    "kind": "Method",
    "detail": "Function (buf + = stride ;)",
    "insertText": "uint32_to_mem(buf, vget_lane_u32(a_u32, 1))"
  },
  {
    "label": "load_unaligned_u8q()",
    "kind": "Method",
    "detail": "Function (} uint8x16_t)",
    "insertText": "load_unaligned_u8q(const uint8_t *buf, ptrdiff_t stride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32_t a ; uint32x4_t a_u32 ;)",
    "insertText": "if(stride == 4) return vld1q_u8(buf)"
  },
  {
    "label": "vdupq_n_u32()",
    "kind": "Method",
    "detail": "Function (buf + = stride ; a_u32 =)",
    "insertText": "vdupq_n_u32(a)"
  },
  {
    "label": "vsetq_lane_u32()",
    "kind": "Method",
    "detail": "Function (buf + = stride ; a_u32 =)",
    "insertText": "vsetq_lane_u32(a, a_u32, 1)"
  },
  {
    "label": "vsetq_lane_u32()",
    "kind": "Method",
    "detail": "Function (buf + = stride ; a_u32 =)",
    "insertText": "vsetq_lane_u32(a, a_u32, 2)"
  },
  {
    "label": "vsetq_lane_u32()",
    "kind": "Method",
    "detail": "Function (buf + = stride ; a_u32 =)",
    "insertText": "vsetq_lane_u32(a, a_u32, 3)"
  },
  {
    "label": "store_unaligned_u8q()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_unaligned_u8q(uint8_t *buf, ptrdiff_t stride, const uint8x16_t a)"
  },
  {
    "label": "vreinterpretq_u32_u8()",
    "kind": "Method",
    "detail": "Function (const uint32x4_t a_u32 =)",
    "insertText": "vreinterpretq_u32_u8(a)"
  },
  {
    "label": "vst1q_u8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1q_u8(buf, a)"
  },
  {
    "label": "uint32_to_mem()",
    "kind": "Method",
    "detail": "Function (buf + = stride ;)",
    "insertText": "uint32_to_mem(buf, vgetq_lane_u32(a_u32, 1))"
  },
  {
    "label": "uint32_to_mem()",
    "kind": "Method",
    "detail": "Function (buf + = stride ;)",
    "insertText": "uint32_to_mem(buf, vgetq_lane_u32(a_u32, 2))"
  },
  {
    "label": "uint32_to_mem()",
    "kind": "Method",
    "detail": "Function (buf + = stride ;)",
    "insertText": "uint32_to_mem(buf, vgetq_lane_u32(a_u32, 3))"
  },
  {
    "label": "load_u8()",
    "kind": "Method",
    "detail": "Function (} uint8x8_t)",
    "insertText": "load_u8(const uint8_t *buf, ptrdiff_t stride)"
  },
  {
    "label": "vdup_n_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2_t a =)",
    "insertText": "vdup_n_u32(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!((intptr_t)buf % sizeof(uint32_t)))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!(stride % sizeof(uint32_t)))"
  },
  {
    "label": "vld1_lane_u32()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "vld1_lane_u32((const uint32_t *)buf, a, 0)"
  },
  {
    "label": "vld1_lane_u32()",
    "kind": "Method",
    "detail": "Function (buf + = stride ; a =)",
    "insertText": "vld1_lane_u32((const uint32_t *)buf, a, 1)"
  },
  {
    "label": "store_u8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "store_u8(uint8_t *buf, ptrdiff_t stride, const uint8x8_t a)"
  },
  {
    "label": "vst1_lane_u32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_lane_u32((uint32_t *)buf, a_u32, 0)"
  },
  {
    "label": "vst1_lane_u32()",
    "kind": "Method",
    "detail": "Function (buf + = stride ;)",
    "insertText": "vst1_lane_u32((uint32_t *)buf, a_u32, 1)"
  }
]