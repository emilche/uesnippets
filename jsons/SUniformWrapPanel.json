[
  {
    "label": "FArrangedChildren",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrangedChildren"
  },
  {
    "label": "SUniformWrapPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUniformWrapPanel"
  },
  {
    "label": "FSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlot"
  },
  {
    "label": "SLATE_DECLARE_WIDGET_API()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Visibility . h \" # include \" SlotBase . h \" # include \" Layout / Margin . h \" # include \" Layout / Children . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SPanel . h \" # include \" Types / SlateEnums . h \" class FArrangedChildren ; class SUniformWrapPanel : public SPanel {)",
    "insertText": "SLATE_DECLARE_WIDGET_API(SUniformWrapPanel, SPanel, SLATE_API)"
  },
  {
    "label": "FSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSlot() : TSlotBase<FSlot>() , TAlignmentWidgetSlotMixin<FSlot>(HAlign_Fill, VAlign_Fill)"
  },
  {
    "label": "SLATE_SLOT_BEGIN_ARGS_OneMixin()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_SLOT_BEGIN_ARGS_OneMixin(FSlot, TSlotBase<FSlot>, TAlignmentWidgetSlotMixin<FSlot>) SLATE_SLOT_END_ARGS() void Construct(const FChildren& SlotOwner, FSlotArguments&& InArgs)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (TSlotBase<FSlot)",
    "insertText": "Construct(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "ConstructMixin()",
    "kind": "Method",
    "detail": "Function (TAlignmentWidgetSlotMixin<FSlot)",
    "insertText": "ConstructMixin(SlotOwner, MoveTemp(InArgs))"
  },
  {
    "label": "SUniformWrapPanel()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "SUniformWrapPanel()"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (FSlot::FSlotArguments)",
    "insertText": "Slot()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_BEGIN_ARGS(SUniformWrapPanel ) : _SlotPadding( FMargin(0.0f) ) , _NumColumnsOverride( 0 ) , _MinDesiredSlotWidth( 0.0f ) , _MinDesiredSlotHeight( 0.0f ) , _MaxDesiredSlotWidth( FLT_MAX ) , _MaxDesiredSlotHeight( FLT_MAX ) , _EvenRowDistribution(false) , _HAlign(EHorizontalAlignment::HAlign_Left)"
  },
  {
    "label": "SLATE_SLOT_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (_Visibility = EVisibility::SelfHitTestInvisible ; })",
    "insertText": "SLATE_SLOT_ARGUMENT(FSlot, Slots) SLATE_ATTRIBUTE(FMargin, SlotPadding) SLATE_ATTRIBUTE(int32, NumColumnsOverride) SLATE_ATTRIBUTE(float, MinDesiredSlotWidth) SLATE_ATTRIBUTE(float, MinDesiredSlotHeight) SLATE_ATTRIBUTE(float, MaxDesiredSlotWidth) SLATE_ATTRIBUTE(float, MaxDesiredSlotHeight) SLATE_ATTRIBUTE(bool, EvenRowDistribution) SLATE_ATTRIBUTE(EHorizontalAlignment, HAlign ) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "OnArrangeChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnArrangeChildren(const FGeometry& AllottedGeometry, FArrangedChildren& ArrangedChildren)"
  },
  {
    "label": "GetChildren()",
    "kind": "Method",
    "detail": "Function (FChildren*)",
    "insertText": "GetChildren()"
  },
  {
    "label": "SetSlotPadding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlotPadding(TAttribute<FMargin> InSlotPadding)"
  },
  {
    "label": "SetMinDesiredSlotWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredSlotWidth(TAttribute<float> InMinDesiredSlotWidth)"
  },
  {
    "label": "SetMinDesiredSlotHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMinDesiredSlotHeight(TAttribute<float> InMinDesiredSlotHeight)"
  },
  {
    "label": "SetNumColumnsOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumColumnsOverride(TAttribute<int32> InNumColumnsOverride)"
  },
  {
    "label": "SetMaxDesiredSlotWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDesiredSlotWidth(TAttribute<float> InMaxDesiredSlotWidth)"
  },
  {
    "label": "SetMaxDesiredSlotHeight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxDesiredSlotHeight(TAttribute<float> InMaxDesiredSlotHeight)"
  },
  {
    "label": "SetHorizontalAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHorizontalAlignment(TAttribute<EHorizontalAlignment> InHAlignment)"
  },
  {
    "label": "GetHorizontalAlignment()",
    "kind": "Method",
    "detail": "Function (EHorizontalAlignment)",
    "insertText": "GetHorizontalAlignment()"
  },
  {
    "label": "SetEvenRowDistribution()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEvenRowDistribution(TAttribute<bool> InEvenRowDistribution)"
  },
  {
    "label": "GetEvenRowDistribution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEvenRowDistribution()"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (} using FScopedWidgetSlotArguments = TPanelChildren<FSlot>::FScopedWidgetSlotArguments ; FScopedWidgetSlotArguments)",
    "insertText": "AddSlot()"
  },
  {
    "label": "RemoveSlot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSlot(const TSharedRef<SWidget>& SlotWidget)"
  },
  {
    "label": "ClearChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearChildren()"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "ComputeUniformCellSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeUniformCellSize()"
  }
]