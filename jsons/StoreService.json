[
  {
    "label": "TRACEANALYSIS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEANALYSIS_API"
  },
  {
    "label": "FDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDesc"
  },
  {
    "label": "FStoreService()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" namespace UE { namespace Trace { class FStoreService { public : struct FDesc { const TCHAR* StoreDir ; int32 RecorderPort = 0 ; int32 ThreadCount = 0 ; } ; ~)",
    "insertText": "FStoreService()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (FStoreService*)",
    "insertText": "Create(const FDesc& Desc)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void* Addr)"
  },
  {
    "label": "GetPort()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPort()"
  },
  {
    "label": "GetRecorderPort()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRecorderPort()"
  },
  {
    "label": "FStoreService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStoreService(const FStoreService&)"
  },
  {
    "label": "FStoreService()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStoreService(const FStoreService&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FStoreService&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FStoreService&&)"
  }
]