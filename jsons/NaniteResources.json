[
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UBodySetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBodySetup"
  },
  {
    "label": "FDistanceFieldVolumeData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistanceFieldVolumeData"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInstancedStaticMeshComponent"
  },
  {
    "label": "UHierarchicalInstancedStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UHierarchicalInstancedStaticMeshComponent"
  },
  {
    "label": "FVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactory"
  },
  {
    "label": "FNaniteVertexFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNaniteVertexFactory"
  },
  {
    "label": "FRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestOwner"
  },
  {
    "label": "FPackedHierarchyNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedHierarchyNode"
  },
  {
    "label": "FPackedCluster",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedCluster"
  },
  {
    "label": "FPageStreamingState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPageStreamingState"
  },
  {
    "label": "FHierarchyFixup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHierarchyFixup"
  },
  {
    "label": "FClusterFixup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterFixup"
  },
  {
    "label": "FFixupChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFixupChunk"
  },
  {
    "label": "FHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHeader"
  },
  {
    "label": "FInstanceDraw",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInstanceDraw"
  },
  {
    "label": "FResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResources"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDDCRebuildState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDDCRebuildState"
  },
  {
    "label": "FVertexFactoryResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryResource"
  },
  {
    "label": "NANITE_ENABLE_DEBUG_RENDERING()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" GrowOnlySpanAllocator . h \" # include \" IO / IoHash . h \" # include \" UnifiedBuffer . h \" # include \" RenderGraphDefinitions . h \" # include \" SceneManagement . h \" # include \" Materials / MaterialInterface . h \" # include \" Serialization / BulkData . h \" # include \" Misc / MemoryReadStream . h \" # include \" NaniteDefinitions . h \" # include \" NaniteInterface . h \" # include \" Templates / DontCopy . h \" # include \" VertexFactory . h \" # if PLATFORM_WINDOWS # define)",
    "insertText": "NANITE_ENABLE_DEBUG_RENDERING(!(UE_BUILD_SHIPPING || UE_BUILD_TEST) || WITH_EDITOR) #else #define NANITE_ENABLE_DEBUG_RENDERING 0 #endif DECLARE_STATS_GROUP( TEXT(\"Nanite\"), STATGROUP_Nanite, STATCAT_Advanced)"
  },
  {
    "label": "DECLARE_GPU_STAT_NAMED_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_GPU_STAT_NAMED_EXTERN(NaniteStreaming, TEXT(\"Nanite Streaming\"))"
  },
  {
    "label": "DECLARE_GPU_STAT_NAMED_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_GPU_STAT_NAMED_EXTERN(NaniteReadback, TEXT(\"Nanite Readback\"))"
  },
  {
    "label": "LLM_DECLARE_TAG_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_DECLARE_TAG_API(Nanite, ENGINE_API)"
  },
  {
    "label": "GetBits()",
    "kind": "Method",
    "detail": "Function (class UStaticMesh ; class UBodySetup ; class FDistanceFieldVolumeData ; class UStaticMeshComponent ; class UInstancedStaticMeshComponent ; class UHierarchicalInstancedStaticMeshComponent ; class FVertexFactory ; class FNaniteVertexFactory ; namespace UE::DerivedData { class FRequestOwner ; } namespace Nanite { struct FPackedHierarchyNode { FVector4f LODBounds [ NANITE_MAX_BVH_NODE_FANOUT ] ; struct { FVector3f BoxBoundsCenter ; uint32 MinLODError_MaxParentLODError ; } Misc0 [ NANITE_MAX_BVH_NODE_FANOUT ] ; struct { FVector3f BoxBoundsExtent ; uint32 ChildStartReference ; } Misc1 [ NANITE_MAX_BVH_NODE_FANOUT ] ; struct { uint32 ResourcePageIndex_NumPages_GroupPartSize ; } Misc2 [ NANITE_MAX_BVH_NODE_FANOUT ] ; } ; uint32)",
    "insertText": "GetBits(uint32 Value, uint32 NumBits, uint32 Offset)"
  },
  {
    "label": "Mask()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Mask(1u << NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBits(uint32& Value, uint32 Bits, uint32 NumBits, uint32 Offset)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (Mask<<= Offset ;)",
    "insertText": "Value(Value & ~Mask) | (Bits << Offset)"
  },
  {
    "label": "GetNumVerts()",
    "kind": "Method",
    "detail": "Function (} struct FPackedCluster { uint32 NumVerts_PositionOffset ; uint32 NumTris_IndexOffset ; uint32 ColorMin ; uint32 ColorBits_GroupIndex ; FIntVector PosStart ; uint32 BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision ; FVector4f LODBounds ; FVector3f BoxBoundsCenter ; uint32 LODErrorAndEdgeLength ; FVector3f BoxBoundsExtent ; uint32 Flags ; uint32 AttributeOffset_BitsPerAttribute ; uint32 DecodeInfoOffset_HasTangents_Skinning_NumUVs_ColorMode ; uint32 UVBitOffsets ; uint32 PackedMaterialInfo ; uint32 ExtendedDataOffset_Num ; uint32 Dummy0 ; uint32 Dummy1 ; uint32 Dummy2 ; uint32 VertReuseBatchInfo [ 4 ] ; uint32)",
    "insertText": "GetNumVerts()"
  },
  {
    "label": "GetPositionOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPositionOffset()"
  },
  {
    "label": "GetNumTris()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumTris()"
  },
  {
    "label": "GetIndexOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetIndexOffset()"
  },
  {
    "label": "GetBitsPerIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetBitsPerIndex()"
  },
  {
    "label": "GetPosPrecision()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPosPrecision()"
  },
  {
    "label": "GetPosBitsX()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPosBitsX()"
  },
  {
    "label": "GetPosBitsY()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPosBitsY()"
  },
  {
    "label": "GetPosBitsZ()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPosBitsZ()"
  },
  {
    "label": "GetNormalPrecision()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNormalPrecision()"
  },
  {
    "label": "GetTangentPrecision()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTangentPrecision()"
  },
  {
    "label": "GetAttributeOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAttributeOffset()"
  },
  {
    "label": "GetBitsPerAttribute()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetBitsPerAttribute()"
  },
  {
    "label": "SetNumVerts()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumVerts(uint32 NumVerts)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(NumVerts_PositionOffset, NumVerts, 9, 0)"
  },
  {
    "label": "SetPositionOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPositionOffset(uint32 Offset)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(NumVerts_PositionOffset, Offset, 23, 9)"
  },
  {
    "label": "SetNumTris()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumTris(uint32 NumTris)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(NumTris_IndexOffset, NumTris, 8, 0)"
  },
  {
    "label": "SetIndexOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIndexOffset(uint32 Offset)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(NumTris_IndexOffset, Offset, 24, 8)"
  },
  {
    "label": "SetBitsPerIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBitsPerIndex(uint32 BitsPerIndex)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision, BitsPerIndex - 1, 3, 0)"
  },
  {
    "label": "SetPosPrecision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPosPrecision(int32 Precision)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision, uint32(Precision - NANITE_MIN_POSITION_PRECISION), 6, 3)"
  },
  {
    "label": "SetPosBitsX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPosBitsX(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision, NumBits, 5, 9)"
  },
  {
    "label": "SetPosBitsY()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPosBitsY(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision, NumBits, 5, 14)"
  },
  {
    "label": "SetPosBitsZ()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPosBitsZ(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision, NumBits, 5, 19)"
  },
  {
    "label": "SetNormalPrecision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNormalPrecision(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision, NumBits, 4, 24)"
  },
  {
    "label": "SetTangentPrecision()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTangentPrecision(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(BitsPerIndex_PosPrecision_PosBits_NormalPrecision_TangentPrecision, NumBits, 4, 28)"
  },
  {
    "label": "SetAttributeOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAttributeOffset(uint32 Offset)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(AttributeOffset_BitsPerAttribute, Offset, 22, 0)"
  },
  {
    "label": "SetBitsPerAttribute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBitsPerAttribute(uint32 Bits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(AttributeOffset_BitsPerAttribute, Bits, 10, 22)"
  },
  {
    "label": "SetDecodeInfoOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDecodeInfoOffset(uint32 Offset)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(DecodeInfoOffset_HasTangents_Skinning_NumUVs_ColorMode, Offset, 22, 0)"
  },
  {
    "label": "SetHasTangents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasTangents(bool bHasTangents)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(DecodeInfoOffset_HasTangents_Skinning_NumUVs_ColorMode, bHasTangents, 1, 22)"
  },
  {
    "label": "SetHasSkinning()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHasSkinning(bool bSkinning)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(DecodeInfoOffset_HasTangents_Skinning_NumUVs_ColorMode, bSkinning, 1, 23)"
  },
  {
    "label": "SetNumUVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumUVs(uint32 Num)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(DecodeInfoOffset_HasTangents_Skinning_NumUVs_ColorMode, Num, 3, 24)"
  },
  {
    "label": "SetColorMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColorMode(uint32 Mode)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(DecodeInfoOffset_HasTangents_Skinning_NumUVs_ColorMode, Mode, 1, 27)"
  },
  {
    "label": "SetColorBitsR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColorBitsR(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(ColorBits_GroupIndex, NumBits, 4, 0)"
  },
  {
    "label": "SetColorBitsG()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColorBitsG(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(ColorBits_GroupIndex, NumBits, 4, 4)"
  },
  {
    "label": "SetColorBitsB()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColorBitsB(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(ColorBits_GroupIndex, NumBits, 4, 8)"
  },
  {
    "label": "SetColorBitsA()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetColorBitsA(uint32 NumBits)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(ColorBits_GroupIndex, NumBits, 4, 12)"
  },
  {
    "label": "SetGroupIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGroupIndex(uint32 GroupIndex)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(ColorBits_GroupIndex, GroupIndex & 0xFFFFu, 16, 16)"
  },
  {
    "label": "SetVertResourceBatchInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetVertResourceBatchInfo(TArray<uint32>& BatchInfo, uint32 GpuPageOffset, uint32 NumMaterialRanges)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(VertReuseBatchInfo, sizeof(VertReuseBatchInfo))"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(VertReuseBatchInfo, BatchInfo.GetData(), BatchInfo.Num() * sizeof(uint32))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check((GpuPageOffset & 0x3) == 0)"
  },
  {
    "label": "FHierarchyFixup()",
    "kind": "Method",
    "detail": "Function (VertReuseBatchInfo [ 0 ] = GpuPageOffset>> 2 ; VertReuseBatchInfo [ 1 ] = NumMaterialRanges ; } } } ; struct FPageStreamingState { uint32 BulkOffset ; uint32 BulkSize ; uint32 PageSize ; uint32 DependenciesStart ; uint16 DependenciesNum ; uint8 MaxHierarchyDepth ; uint8 Flags ; } ; class FHierarchyFixup { public :)",
    "insertText": "FHierarchyFixup()"
  },
  {
    "label": "FHierarchyFixup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FHierarchyFixup(uint32 InPageIndex, uint32 NodeIndex, uint32 ChildIndex, uint32 InClusterGroupPartStartIndex, uint32 PageDependencyStart, uint32 PageDependencyNum)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (PageIndex = InPageIndex ;)",
    "insertText": "check(NodeIndex < ( 1 << ( 32 - NANITE_MAX_HIERACHY_CHILDREN_BITS ) ))"
  },
  {
    "label": "HierarchyNodeAndChildIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HierarchyNodeAndChildIndex(NodeIndex << NANITE_MAX_HIERACHY_CHILDREN_BITS)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ClusterGroupPartStartIndex = InClusterGroupPartStartIndex ;)",
    "insertText": "check(PageDependencyStart < NANITE_MAX_RESOURCE_PAGES)"
  },
  {
    "label": "PageDependencyStartAndNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PageDependencyStartAndNum(PageDependencyStart << NANITE_MAX_GROUP_PARTS_BITS)"
  },
  {
    "label": "GetPageIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPageIndex()"
  },
  {
    "label": "GetClusterGroupPartStartIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetClusterGroupPartStartIndex()"
  },
  {
    "label": "FClusterFixup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FClusterFixup(uint32 PageIndex, uint32 ClusterIndex, uint32 PageDependencyStart, uint32 PageDependencyNum)"
  },
  {
    "label": "PageAndClusterIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PageAndClusterIndex(PageIndex << NANITE_MAX_CLUSTERS_PER_PAGE_BITS)"
  },
  {
    "label": "GetPageDependencyStart()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetPageDependencyStart()"
  },
  {
    "label": "GetClusterFixup()",
    "kind": "Method",
    "detail": "Function (FClusterFixup&)",
    "insertText": "GetClusterFixup(uint32 Index)"
  },
  {
    "label": "GetHierarchyFixup()",
    "kind": "Method",
    "detail": "Function (} FHierarchyFixup&)",
    "insertText": "GetHierarchyFixup(uint32 Index)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "IsInitialState()",
    "kind": "Method",
    "detail": "Function (} } ; struct FInstanceDraw { uint32 InstanceId ; uint32 ViewId ; } ; struct FResources { TArray<uint8> RootData ; FByteBulkData StreamablePages ; TArray<uint16> ImposterAtlas ; TArray<FPackedHierarchyNode> HierarchyNodes ; TArray<uint32> HierarchyRootOffsets ; TArray<FPageStreamingState> PageStreamingStates ; TArray<uint32> PageDependencies ; uint32 NumRootPages = 0 ; int32 PositionPrecision = 0 ; int32 NormalPrecision = 0 ; int32 TangentPrecision = 0 ; uint32 NumInputTriangles = 0 ; uint32 NumInputVertices = 0 ; uint16 NumInputMeshes = 0 ; uint16 NumInputTexCoords = 0 ; uint32 NumClusters = 0 ; uint32 ResourceFlags = 0 ; uint32 RuntimeResourceID = 0 xFFFFFFFFu ; uint32 HierarchyOffset = 0 xFFFFFFFFu ; int32 RootPageIndex = INDEX_NONE ; int32 ImposterIndex = INDEX_NONE ; uint32 NumHierarchyNodes = 0 ; uint32 NumResidentClusters = 0 ; uint32 PersistentHash = NANITE_INVALID_PERSISTENT_HASH ; # if WITH_EDITOR FString ResourceName ; FIoHash DDCKeyHash ; FIoHash DDCRawHash ; private : TDontCopy<TPimplPtr<UE::DerivedData::FRequestOwner>> DDCRequestOwner ; enum class EDDCRebuildState : uint8 { Initial,InitialAfterFailed,Pending,Succeeded,Failed,} ; bool)",
    "insertText": "IsInitialState(EDDCRebuildState State)"
  },
  {
    "label": "FDDCRebuildState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FDDCRebuildState(const FDDCRebuildState&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FDDCRebuildState&)",
    "insertText": "operator(const FDDCRebuildState&)"
  },
  {
    "label": "EndRebuildBulkDataFromCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRebuildBulkDataFromCache()"
  },
  {
    "label": "DropBulkData()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DropBulkData()"
  },
  {
    "label": "HasBuildFromDDCError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBuildFromDDCError()"
  },
  {
    "label": "SetHasBuildFromDDCError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHasBuildFromDDCError(bool bHasError)"
  },
  {
    "label": "RebuildBulkDataFromCacheAsync()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RebuildBulkDataFromCacheAsync(const UObject* Owner, bool& bFailed)"
  },
  {
    "label": "InitResources()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InitResources(const UObject* Owner)"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner, bool bCooked)"
  },
  {
    "label": "HasStreamingData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasStreamingData()"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "IsRootPage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRootPage(uint32 PageIndex)"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (} ; class FVertexFactoryResource : public FRenderResource { public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "GetVertexFactory()",
    "kind": "Method",
    "detail": "Function (FNaniteVertexFactory*)",
    "insertText": "GetVertexFactory()"
  },
  {
    "label": "InitNaniteResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNaniteResources(TPimplPtr<Nanite::FResources>& InResources, bool bRecreate = false)"
  },
  {
    "label": "GetNaniteResourcesSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetNaniteResourcesSize(const TPimplPtr<Nanite::FResources>& InResources)"
  },
  {
    "label": "GetNaniteResourcesSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNaniteResourcesSizeEx(const TPimplPtr<Nanite::FResources>& InResources, FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "GetNaniteResourcesSize()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetNaniteResourcesSize(const Nanite::FResources& InResources)"
  },
  {
    "label": "GetNaniteResourcesSizeEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNaniteResourcesSizeEx(const Nanite::FResources& InResources, FResourceSizeEx& CumulativeResourceSize)"
  }
]