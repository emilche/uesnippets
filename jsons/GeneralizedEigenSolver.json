[
  {
    "label": "GeneralizedEigenSolver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GeneralizedEigenSolver"
  },
  {
    "label": "GeneralizedEigenSolver()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GENERALIZEDEIGENSOLVER_H # define EIGEN_GENERALIZEDEIGENSOLVER_H # include \" . / RealQZ . h \" namespace Eigen { template<_MatrixType> class GeneralizedEigenSolver { public : typedef _MatrixType MatrixType ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,Options = MatrixType::Options,MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Eigen::Index Index ; typedef std::complex<RealScalar> ComplexScalar ; typedef Matrix<Scalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> VectorType ; typedef Matrix<ComplexScalar,ColsAtCompileTime,1,Options& ~ RowMajor,MaxColsAtCompileTime,1> ComplexVectorType ; typedef CwiseBinaryOp<internal::scalar_quotient_op<ComplexScalar,Scalar>,ComplexVectorType,VectorType> EigenvalueType ; typedef Matrix<ComplexScalar,RowsAtCompileTime,ColsAtCompileTime,Options,MaxRowsAtCompileTime,MaxColsAtCompileTime> EigenvectorsType ;)",
    "insertText": "GeneralizedEigenSolver() : m_eivec(), m_alphas(), m_betas(), m_valuesOkay(false), m_vectorsOkay(false), m_realQZ()"
  },
  {
    "label": "GeneralizedEigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GeneralizedEigenSolver(Index size) : m_eivec(size, size), m_alphas(size), m_betas(size), m_valuesOkay(false), m_vectorsOkay(false), m_realQZ(size), m_tmp(size)"
  },
  {
    "label": "GeneralizedEigenSolver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GeneralizedEigenSolver(const MatrixType& A, const MatrixType& B, bool computeEigenvectors = true) : m_eivec(A.rows(), A.cols()), m_alphas(A.cols()), m_betas(A.cols()), m_valuesOkay(false), m_vectorsOkay(false), m_realQZ(A.cols()), m_tmp(A.cols())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(A, B, computeEigenvectors)"
  },
  {
    "label": "eigenvectors()",
    "kind": "Method",
    "detail": "Function (} EigenvectorsType)",
    "insertText": "eigenvectors()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_vectorsOkay && \"Eigenvectors for GeneralizedEigenSolver were not calculated.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_valuesOkay && \"GeneralizedEigenSolver is not initialized.\")"
  },
  {
    "label": "alphas()",
    "kind": "Method",
    "detail": "Function (} ComplexVectorType)",
    "insertText": "alphas()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_valuesOkay && \"EigenSolver is not initialized.\")"
  },
  {
    "label": "setMaxIterations()",
    "kind": "Method",
    "detail": "Function (} GeneralizedEigenSolver&)",
    "insertText": "setMaxIterations(Index maxIters)"
  },
  {
    "label": "setMaxIterations()",
    "kind": "Method",
    "detail": "Function (m_realQZ .)",
    "insertText": "setMaxIterations(maxIters)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(!NumTraits<Scalar>::IsComplex, NUMERIC_TYPE_MUST_BE_REAL)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} EigenvectorsType m_eivec ; ComplexVectorType m_alphas ; VectorType m_betas ; bool m_valuesOkay,m_vectorsOkay ; RealQZ<MatrixType> m_realQZ ; ComplexVectorType m_tmp ; } ; template<MatrixType> GeneralizedEigenSolver<MatrixType>& GeneralizedEigenSolver<MatrixType)",
    "insertText": "compute(const MatrixType& A, const MatrixType& B, bool computeEigenvectors)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; using std::abs ;)",
    "insertText": "eigen_assert(A.cols() == A.rows() && B.cols() == A.rows() && B.cols() == B.rows())"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index size = A .)",
    "insertText": "cols()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_alphas .)",
    "insertText": "resize(size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "resize(size,size)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (} Map<VectorType>)",
    "insertText": "v(reinterpret_cast<Scalar*>(m_tmp.data()), size)"
  },
  {
    "label": "matrixS()",
    "kind": "Method",
    "detail": "Function (ComplexVectorType& cv = m_tmp ; const MatrixType& mS = m_realQZ .)",
    "insertText": "matrixS()"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (const MatrixType& mT = m_realQZ .)",
    "insertText": "matrixT()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index i = 0 ;)",
    "insertText": "while(i < size)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_alphas .)",
    "insertText": "coeffRef(i) = mS.diagonal().coeff(i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_betas .)",
    "insertText": "coeffRef(i) = mT.diagonal().coeff(i)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "setConstant(Scalar(0.0))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "coeffRef(i) = Scalar(1.0)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (const Scalar alpha =)",
    "insertText": "real(m_alphas.coeffRef(i))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (const Scalar beta = m_betas .)",
    "insertText": "coeffRef(i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const Index st = j + 1 ; const Index sz = i - j ;)",
    "insertText": "if(j > 0 && mS.coeff(j, j-1) != Scalar(0))"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,2,1>)",
    "insertText": "rhs(alpha*mT.template block<2,Dynamic>(j-1,st,2,sz) - beta*mS.template block<2,Dynamic>(j-1,st,2,sz)) .lazyProduct( v.segment(st,sz))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,2,2> lhs = beta* mS . template)",
    "insertText": "block(j-1,j-1) - alpha * mT.template block<2,2>(j-1,j-1)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (v . template)",
    "insertText": "segment(j-1) = lhs.partialPivLu().solve(rhs)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (j - - ; } else { v .)",
    "insertText": "coeffRef(j) = -v.segment(st,sz).transpose().cwiseProduct(beta*mS.block(j,st,1,sz) - alpha*mT.block(j,st,1,sz)).sum() / (beta*mS.coeffRef(j,j) - alpha*mT.coeffRef(j,j))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} } } m_eivec .)",
    "insertText": "col(i).real().noalias() = m_realQZ.matrixZ().transpose()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "col(i).real().normalize()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "col(i).imag().setConstant(0)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} + + i ; } else { RealScalar a = mT .)",
    "insertText": "diagonal().coeff(i), b = mT.diagonal().coeff(i+1)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (const RealScalar beta = m_betas .)",
    "insertText": "coeffRef(i) = m_betas.coeffRef(i+1)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (Matrix<RealScalar,2,2> S2 = mS . template)",
    "insertText": "block(i,i) * Matrix<Scalar,2,1>(b,a).asDiagonal()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar p =)",
    "insertText": "Scalar(0.5) * (S2.coeff(0,0) - S2.coeff(1,1))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (Scalar z =)",
    "insertText": "sqrt(abs(p * p + S2.coeff(1,0) * S2.coeff(0,1)))"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (const ComplexScalar alpha =)",
    "insertText": "ComplexScalar(S2.coeff(1,1) + p, (beta > 0) ? z : -z)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_alphas .)",
    "insertText": "coeffRef(i) = conj(alpha)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_alphas .)",
    "insertText": "coeffRef(i+1)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (cv .)",
    "insertText": "setZero()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (cv .)",
    "insertText": "coeffRef(i+1) = Scalar(1.0)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (cv .)",
    "insertText": "coeffRef(i) = -(static_cast<Scalar>(beta*mS.coeffRef(i,i+1)) - alpha*mT.coeffRef(i,i+1)) / (static_cast<Scalar>(beta*mS.coeffRef(i,i)) - alpha*mT.coeffRef(i,i))"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (Matrix<ComplexScalar,2,1>)",
    "insertText": "rhs(alpha*mT.template block<2,Dynamic>(j-1,st,2,sz) - beta*mS.template block<2,Dynamic>(j-1,st,2,sz)) .lazyProduct( cv.segment(st,sz))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (j - - ; } else { cv .)",
    "insertText": "coeffRef(j) = cv.segment(st,sz).transpose().cwiseProduct(beta*mS.block(j,st,1,sz) - alpha*mT.block(j,st,1,sz)).sum() / (alpha*mT.coeffRef(j,j) - static_cast<Scalar>(beta*mS.coeffRef(j,j)))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} } m_eivec .)",
    "insertText": "col(i+1).noalias() = (m_realQZ.matrixZ().transpose() * cv)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "col(i+1).normalize()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_eivec .)",
    "insertText": "col(i) = m_eivec.col(i+1).conjugate()"
  }
]