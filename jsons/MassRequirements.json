[
  {
    "label": "FMassDebugger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassDebugger"
  },
  {
    "label": "FMassArchetypeHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassArchetypeHandle"
  },
  {
    "label": "FMassExecutionRequirements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassExecutionRequirements"
  },
  {
    "label": "FMassRequirementAccessDetector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMassRequirementAccessDetector"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MASSENTITY_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MASSENTITY_API"
  },
  {
    "label": "doesn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "doesn"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MassEntityTypes . h \" # include \" MassRequirements . generated . h \" struct FMassDebugger ; struct FMassArchetypeHandle ; struct FMassExecutionRequirements ; struct FMassRequirementAccessDetector ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FMassFragmentRequirementDescription()",
    "kind": "Method",
    "detail": "Function (All,Any,None,Optional,MAX } ; struct FMassFragmentRequirementDescription { const UScriptStruct* StructType = nullptr ; EMassFragmentAccess AccessMode = EMassFragmentAccess::None ; EMassFragmentPresence Presence = EMassFragmentPresence::Optional ; public :)",
    "insertText": "FMassFragmentRequirementDescription()"
  },
  {
    "label": "FMassFragmentRequirementDescription()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassFragmentRequirementDescription(const UScriptStruct* InStruct, const EMassFragmentAccess InAccessMode, const EMassFragmentPresence InPresence) : StructType(InStruct) , AccessMode(InAccessMode) , Presence(InPresence)"
  },
  {
    "label": "RequiresBinding()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresBinding()"
  },
  {
    "label": "IsOptional()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsOptional()"
  },
  {
    "label": "GetStructureSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetStructureSize()"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetFName()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "AddSubsystemRequirement()",
    "kind": "Method",
    "detail": "Function (FMassRequirementAccessDetector ; template<T> FMassSubsystemRequirements&)",
    "insertText": "AddSubsystemRequirement(const EMassFragmentAccess AccessMode)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (bRequiresGameThreadExecution | = TMassExternalSubsystemTraits<T>::GameThreadOnly ; break ; case EMassFragmentAccess::ReadWrite : RequiredMutableSubsystems . Add<)",
    "insertText": "T()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (bRequiresGameThreadExecution | = TMassExternalSubsystemTraits<T>::GameThreadOnly ; break ; default :)",
    "insertText": "check(false)"
  },
  {
    "label": "AddSubsystemRequirement()",
    "kind": "Method",
    "detail": "Function (} return* this ; } FMassSubsystemRequirements&)",
    "insertText": "AddSubsystemRequirement(const TSubclassOf<USubsystem> SubsystemClass, const EMassFragmentAccess AccessMode, const bool bGameThreadOnly = true)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bRequiresGameThreadExecution | = bGameThreadOnly ; break ; case EMassFragmentAccess::ReadWrite : RequiredMutableSubsystems .)",
    "insertText": "Add(**SubsystemClass)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} return* this ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetRequiredConstSubsystems()",
    "kind": "Method",
    "detail": "Function (const FMassExternalSubsystemBitSet&)",
    "insertText": "GetRequiredConstSubsystems()"
  },
  {
    "label": "DoesRequireGameThreadExecution()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DoesRequireGameThreadExecution()"
  },
  {
    "label": "FMassFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (FMassRequirementAccessDetector ; public :)",
    "insertText": "FMassFragmentRequirements()"
  },
  {
    "label": "FMassFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMassFragmentRequirements(std::initializer_list<UScriptStruct*> InitList)"
  },
  {
    "label": "FMassFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMassFragmentRequirements(TConstArrayView<const UScriptStruct*> InitList)"
  },
  {
    "label": "AddRequirement()",
    "kind": "Method",
    "detail": "Function (FMassFragmentRequirements&)",
    "insertText": "AddRequirement(const UScriptStruct* FragmentType, const EMassFragmentAccess AccessMode, const EMassFragmentPresence Presence = EMassFragmentPresence::All)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (FragmentRequirements .)",
    "insertText": "Emplace(FragmentType, AccessMode, Presence)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "switch(Presence)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (break ; case EMassFragmentPresence::Any : RequiredAnyFragments .)",
    "insertText": "Add(*FragmentType)"
  },
  {
    "label": "IncrementChangeCounter()",
    "kind": "Method",
    "detail": "Function (break ; })",
    "insertText": "IncrementChangeCounter()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (FragmentRequirements .)",
    "insertText": "Emplace(T::StaticStruct(), AccessMode, Presence)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (break ; case EMassFragmentPresence::Any : RequiredAnyTags .)",
    "insertText": "Add(TagType)"
  },
  {
    "label": "AddTagRequirement()",
    "kind": "Method",
    "detail": "Function (} template<T> FMassFragmentRequirements&)",
    "insertText": "AddTagRequirement(const EMassFragmentPresence Presence)"
  },
  {
    "label": "AddChunkRequirement()",
    "kind": "Method",
    "detail": "Function (template<T> FMassFragmentRequirements&)",
    "insertText": "AddChunkRequirement(const EMassFragmentAccess AccessMode, const EMassFragmentPresence Presence = EMassFragmentPresence::All)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ConstSharedFragmentRequirements .)",
    "insertText": "Emplace(T::StaticStruct(), EMassFragmentAccess::ReadOnly, Presence)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (ConstSharedFragmentRequirements .)",
    "insertText": "Emplace(FragmentType, EMassFragmentAccess::ReadOnly, Presence)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckValidity()"
  },
  {
    "label": "GetFragmentRequirements()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FMassFragmentRequirementDescription>)",
    "insertText": "GetFragmentRequirements()"
  },
  {
    "label": "HasPositiveRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPositiveRequirements()"
  },
  {
    "label": "DoesArchetypeMatchRequirements()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesArchetypeMatchRequirements(const FMassArchetypeCompositionDescriptor& ArchetypeComposition)"
  },
  {
    "label": "DoesMatchAnyOptionals()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesMatchAnyOptionals(const FMassArchetypeCompositionDescriptor& ArchetypeComposition)"
  },
  {
    "label": "SortRequirements()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SortRequirements()"
  },
  {
    "label": "ConsumeIncrementalChangesCount()",
    "kind": "Method",
    "detail": "Function (+ + IncrementalChangesCount ; bPropertiesCached = false ; } void)",
    "insertText": "ConsumeIncrementalChangesCount()"
  },
  {
    "label": "HasIncrementalChanges()",
    "kind": "Method",
    "detail": "Function (IncrementalChangesCount = 0 ; } bool)",
    "insertText": "HasIncrementalChanges()"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (uint16 bPropertiesCached : 1 = false ; uint16 bHasPositiveRequirements : 1 = false ; uint16 bHasNegativeRequirements : 1 = false ; uint16 bHasOptionalRequirements : 1 = false ; uint16 IncrementalChangesCount = 0 ; bool bRequiresGameThreadExecution = false ; } ; template<> FMassFragmentRequirements& FMassFragmentRequirements::AddTagRequirements<)",
    "insertText": "All(const FMassTagBitSet& TagBitSet)"
  }
]