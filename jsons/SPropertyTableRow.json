[
  {
    "label": "IPropertyTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableRow"
  },
  {
    "label": "SPropertyTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyTableRow"
  },
  {
    "label": "SPropertyTableHeaderRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyTableHeaderRow"
  },
  {
    "label": "IPropertyTableCell",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyTableCell"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" # include \" IPropertyTable . h \" # include \" UserInterface / PropertyTable / SPropertyTableHeaderRow . h \" # include \" IPropertyTableCell . h \" # include \" IPropertyTableRow . h \" typedef SMultiColumnTableRow<TSharedRef<class IPropertyTableRow>> SPropertyTableRowBase ; class SPropertyTableRow : public SPropertyTableRowBase { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPropertyTableRow ) : _Style( \"PropertyTable\")"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FName, Style ) SLATE_END_ARGS() void Construct( const FArguments& InArgs, const TSharedRef< class IPropertyTableRow >& InPropertyTableRow, const TSharedRef< class SPropertyTableHeaderRow > InPropertyTableHeaderRow, const TSharedRef< STableViewBase >& InOwnerTableView)"
  },
  {
    "label": "OnRefresh()",
    "kind": "Method",
    "detail": "Function (Row = InPropertyTableRow ; HeaderRowWeakPtr = InPropertyTableHeaderRow ; Row ->)",
    "insertText": "OnRefresh()->AddSP( this, &SPropertyTableRow::Refresh)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (Style = InArgs . _Style ; SMultiColumnTableRow<TSharedRef<class IPropertyTableRow>)",
    "insertText": "Construct(FSuperRowType::FArguments() .Style( FAppStyle::Get(), \"TableView.AlternatingRow\" ) .ShowSelection(false) , InOwnerTableView)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (PreviousCurrentCell = Row ->)",
    "insertText": "GetTable()->GetCurrentCell()"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (Row ->)",
    "insertText": "GetTable()->SetCurrentCell( NULL)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "Unhandled()",
    "kind": "Method",
    "detail": "Function (FReply Reply =)",
    "insertText": "Unhandled()"
  },
  {
    "label": "GetTable()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IPropertyTable> Table = Row ->)",
    "insertText": "GetTable()"
  },
  {
    "label": "GetSelectionUnit()",
    "kind": "Method",
    "detail": "Function (const EPropertyTableSelectionUnit::Type SelectionUnit = Table ->)",
    "insertText": "GetSelectionUnit()"
  },
  {
    "label": "SetCurrentCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetCurrentCell(PreviousCurrentCell)"
  },
  {
    "label": "GetCurrentCell()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IPropertyTableCell> CurrentCell = Table ->)",
    "insertText": "GetCurrentCell()"
  },
  {
    "label": "GetLastClickedCell()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<IPropertyTableCell> LastClickedCell = Table ->)",
    "insertText": "GetLastClickedCell()"
  },
  {
    "label": "SelectedCells()",
    "kind": "Method",
    "detail": "Function (TSet<TSharedRef<IPropertyTableCell>>)",
    "insertText": "SelectedCells(Table->GetSelectedCells())"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (Reply =)",
    "insertText": "OnMouseButtonUp(MyGeometry, MouseEvent)"
  },
  {
    "label": "SetLastClickedCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetLastClickedCell(NULL)"
  },
  {
    "label": "SetCurrentCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetCurrentCell(NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(CurrentCell.IsValid() && LastClickedCell == CurrentCell)"
  },
  {
    "label": "GetLastClickedCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "GetLastClickedCell()->EnterEditMode()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(MouseEvent.IsShiftDown() && CurrentCell.IsValid() && LastClickedCell != CurrentCell)"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (const int32 LastClickedRowIndex = Table ->)",
    "insertText": "GetRows().Find( LastClickedCell->GetRow())"
  },
  {
    "label": "GetRows()",
    "kind": "Method",
    "detail": "Function (const int32 CurrentRowIndex = Table ->)",
    "insertText": "GetRows().Find( CurrentCell->GetRow())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 TopMostRowIndex = LastClickedRowIndex<CurrentRowIndex ? LastClickedRowIndex : CurrentRowIndex ; const int32 BottomMostRowIndex = LastClickedRowIndex> CurrentRowIndex ? LastClickedRowIndex : CurrentRowIndex ; const int32 LastClickedColumnIndex = Table ->)",
    "insertText": "GetColumns().Find( LastClickedCell->GetColumn())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 CurrentColumnIndex = Table ->)",
    "insertText": "GetColumns().Find( CurrentCell->GetColumn())"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const int32 LeftMostColumnIndex = LastClickedColumnIndex<CurrentColumnIndex ? LastClickedColumnIndex : CurrentColumnIndex ; const int32 RightMostColumnIndex = LastClickedColumnIndex> CurrentColumnIndex ? LastClickedColumnIndex : CurrentColumnIndex ; const TSharedRef<IPropertyTableCell> StartingCell = Table ->)",
    "insertText": "GetColumns()[ LeftMostColumnIndex ]->GetCell( Table->GetRows()[ TopMostRowIndex ])"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const TSharedRef<IPropertyTableCell> EndingCell = Table ->)",
    "insertText": "GetColumns()[ RightMostColumnIndex ]->GetCell( Table->GetRows()[ BottomMostRowIndex ])"
  },
  {
    "label": "SelectCellRange()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SelectCellRange(StartingCell, EndingCell)"
  },
  {
    "label": "SetCurrentCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetCurrentCell(CurrentCell)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(MouseEvent.IsControlDown())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SelectedCells .)",
    "insertText": "Add(LastClickedCell.ToSharedRef())"
  },
  {
    "label": "SetSelectedCells()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetSelectedCells(SelectedCells)"
  },
  {
    "label": "SetCurrentCell()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetCurrentCell(LastClickedCell)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} else { SelectedCells .)",
    "insertText": "Empty()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } else)",
    "insertText": "if(SelectionUnit == EPropertyTableSelectionUnit::Row)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} } return Reply ; } FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (Reply =)",
    "insertText": "OnMouseButtonDoubleClick(MyGeometry, MouseEvent)"
  },
  {
    "label": "SetCurrentRow()",
    "kind": "Method",
    "detail": "Function (Table ->)",
    "insertText": "SetCurrentRow(Row)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} } } return Reply ; } void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (Row ->)",
    "insertText": "Tick()"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Refresh()"
  },
  {
    "label": "ClearCellCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCellCache()"
  },
  {
    "label": "GenerateColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateColumns(HeaderRowWeakPtr.Pin().ToSharedRef())"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnId)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SPropertyTableHeaderRow> PropertyTableHeaderRow = HeaderRowWeakPtr .)",
    "insertText": "Pin()"
  },
  {
    "label": "GenerateCell()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget> CellWidget = ColumnHeader ->)",
    "insertText": "GenerateCell(Row.ToSharedRef())"
  }
]