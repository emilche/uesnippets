[
  {
    "label": "_SDL_GameController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_SDL_GameController"
  },
  {
    "label": "SDL_GameControllerButtonBind",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDL_GameControllerButtonBind"
  },
  {
    "label": "SDL_GameControllerAddMappingsFromRW()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_gamecontroller_h_ # define SDL_gamecontroller_h_ # include \" SDL_stdinc . h \" # include \" SDL_error . h \" # include \" SDL_rwops . h \" # include \" SDL_sensor . h \" # include \" SDL_joystick . h \" # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif struct _SDL_GameController ; typedef struct _SDL_GameController SDL_GameController ; typedef enum { SDL_CONTROLLER_TYPE_UNKNOWN = 0,SDL_CONTROLLER_TYPE_XBOX360,SDL_CONTROLLER_TYPE_XBOXONE,SDL_CONTROLLER_TYPE_PS3,SDL_CONTROLLER_TYPE_PS4,SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_PRO,SDL_CONTROLLER_TYPE_VIRTUAL,SDL_CONTROLLER_TYPE_PS5,SDL_CONTROLLER_TYPE_AMAZON_LUNA,SDL_CONTROLLER_TYPE_GOOGLE_STADIA,SDL_CONTROLLER_TYPE_NVIDIA_SHIELD,SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_LEFT,SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_RIGHT,SDL_CONTROLLER_TYPE_NINTENDO_SWITCH_JOYCON_PAIR,SDL_CONTROLLER_TYPE_MAX } SDL_GameControllerType ; typedef enum { SDL_CONTROLLER_BINDTYPE_NONE = 0,SDL_CONTROLLER_BINDTYPE_BUTTON,SDL_CONTROLLER_BINDTYPE_AXIS,SDL_CONTROLLER_BINDTYPE_HAT } SDL_GameControllerBindType ; typedef struct SDL_GameControllerButtonBind { SDL_GameControllerBindType bindType ; union { int button ; int axis ; struct { int hat ; int hat_mask ; } hat ; } value ; } SDL_GameControllerButtonBind ; DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerAddMappingsFromRW(SDL_RWops * rw, int freerw)"
  },
  {
    "label": "SDL_GameControllerAddMappingsFromFile()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_GameControllerAddMappingsFromFile(file) SDL_GameControllerAddMappingsFromRW(SDL_RWFromFile(file, \"rb\"), 1) extern DECLSPEC int SDLCALL SDL_GameControllerAddMapping(const char* mappingString)"
  },
  {
    "label": "SDL_GameControllerNumMappings()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerNumMappings(void)"
  },
  {
    "label": "SDL_GameControllerMappingForIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_GameControllerMappingForIndex(int mapping_index)"
  },
  {
    "label": "SDL_GameControllerMappingForGUID()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_GameControllerMappingForGUID(SDL_JoystickGUID guid)"
  },
  {
    "label": "SDL_GameControllerMapping()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_GameControllerMapping(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_IsGameController()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_IsGameController(int joystick_index)"
  },
  {
    "label": "SDL_GameControllerNameForIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerNameForIndex(int joystick_index)"
  },
  {
    "label": "SDL_GameControllerPathForIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerPathForIndex(int joystick_index)"
  },
  {
    "label": "SDL_GameControllerTypeForIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_GameControllerType SDLCALL)",
    "insertText": "SDL_GameControllerTypeForIndex(int joystick_index)"
  },
  {
    "label": "SDL_GameControllerMappingForDeviceIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_GameControllerMappingForDeviceIndex(int joystick_index)"
  },
  {
    "label": "SDL_GameControllerOpen()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_GameController* SDLCALL)",
    "insertText": "SDL_GameControllerOpen(int joystick_index)"
  },
  {
    "label": "SDL_GameControllerFromInstanceID()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_GameController* SDLCALL)",
    "insertText": "SDL_GameControllerFromInstanceID(SDL_JoystickID joyid)"
  },
  {
    "label": "SDL_GameControllerFromPlayerIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_GameController* SDLCALL)",
    "insertText": "SDL_GameControllerFromPlayerIndex(int player_index)"
  },
  {
    "label": "SDL_GameControllerName()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerName(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerPath()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerPath(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetType()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_GameControllerType SDLCALL)",
    "insertText": "SDL_GameControllerGetType(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetPlayerIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerGetPlayerIndex(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerSetPlayerIndex()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_GameControllerSetPlayerIndex(SDL_GameController *gamecontroller, int player_index)"
  },
  {
    "label": "SDL_GameControllerGetVendor()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint16 SDLCALL)",
    "insertText": "SDL_GameControllerGetVendor(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetProduct()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint16 SDLCALL)",
    "insertText": "SDL_GameControllerGetProduct(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetProductVersion()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint16 SDLCALL)",
    "insertText": "SDL_GameControllerGetProductVersion(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetFirmwareVersion()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint16 SDLCALL)",
    "insertText": "SDL_GameControllerGetFirmwareVersion(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetSerial()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerGetSerial(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetSteamHandle()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint64 SDLCALL)",
    "insertText": "SDL_GameControllerGetSteamHandle(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetAttached()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerGetAttached(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetJoystick()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_Joystick* SDLCALL)",
    "insertText": "SDL_GameControllerGetJoystick(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerEventState()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerEventState(int state)"
  },
  {
    "label": "SDL_GameControllerUpdate()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_GameControllerUpdate(void)"
  },
  {
    "label": "SDL_GameControllerGetAxisFromString()",
    "kind": "Method",
    "detail": "Function (typedef enum { SDL_CONTROLLER_AXIS_INVALID = - 1,SDL_CONTROLLER_AXIS_LEFTX,SDL_CONTROLLER_AXIS_LEFTY,SDL_CONTROLLER_AXIS_RIGHTX,SDL_CONTROLLER_AXIS_RIGHTY,SDL_CONTROLLER_AXIS_TRIGGERLEFT,SDL_CONTROLLER_AXIS_TRIGGERRIGHT,SDL_CONTROLLER_AXIS_MAX } SDL_GameControllerAxis ; DECLSPEC SDL_GameControllerAxis SDLCALL)",
    "insertText": "SDL_GameControllerGetAxisFromString(const char *str)"
  },
  {
    "label": "SDL_GameControllerGetStringForAxis()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerGetStringForAxis(SDL_GameControllerAxis axis)"
  },
  {
    "label": "SDL_GameControllerGetBindForAxis()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_GameControllerButtonBind SDLCALL)",
    "insertText": "SDL_GameControllerGetBindForAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis)"
  },
  {
    "label": "SDL_GameControllerHasAxis()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerHasAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis)"
  },
  {
    "label": "SDL_GameControllerGetAxis()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Sint16 SDLCALL)",
    "insertText": "SDL_GameControllerGetAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis)"
  },
  {
    "label": "SDL_GameControllerGetButtonFromString()",
    "kind": "Method",
    "detail": "Function (typedef enum { SDL_CONTROLLER_BUTTON_INVALID = - 1,SDL_CONTROLLER_BUTTON_A,SDL_CONTROLLER_BUTTON_B,SDL_CONTROLLER_BUTTON_X,SDL_CONTROLLER_BUTTON_Y,SDL_CONTROLLER_BUTTON_BACK,SDL_CONTROLLER_BUTTON_GUIDE,SDL_CONTROLLER_BUTTON_START,SDL_CONTROLLER_BUTTON_LEFTSTICK,SDL_CONTROLLER_BUTTON_RIGHTSTICK,SDL_CONTROLLER_BUTTON_LEFTSHOULDER,SDL_CONTROLLER_BUTTON_RIGHTSHOULDER,SDL_CONTROLLER_BUTTON_DPAD_UP,SDL_CONTROLLER_BUTTON_DPAD_DOWN,SDL_CONTROLLER_BUTTON_DPAD_LEFT,SDL_CONTROLLER_BUTTON_DPAD_RIGHT,SDL_CONTROLLER_BUTTON_MISC1,SDL_CONTROLLER_BUTTON_PADDLE1,SDL_CONTROLLER_BUTTON_PADDLE2,SDL_CONTROLLER_BUTTON_PADDLE3,SDL_CONTROLLER_BUTTON_PADDLE4,SDL_CONTROLLER_BUTTON_TOUCHPAD,SDL_CONTROLLER_BUTTON_MAX } SDL_GameControllerButton ; DECLSPEC SDL_GameControllerButton SDLCALL)",
    "insertText": "SDL_GameControllerGetButtonFromString(const char *str)"
  },
  {
    "label": "SDL_GameControllerGetStringForButton()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerGetStringForButton(SDL_GameControllerButton button)"
  },
  {
    "label": "SDL_GameControllerGetBindForButton()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_GameControllerButtonBind SDLCALL)",
    "insertText": "SDL_GameControllerGetBindForButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button)"
  },
  {
    "label": "SDL_GameControllerHasButton()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerHasButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button)"
  },
  {
    "label": "SDL_GameControllerGetButton()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint8 SDLCALL)",
    "insertText": "SDL_GameControllerGetButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button)"
  },
  {
    "label": "SDL_GameControllerGetNumTouchpads()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerGetNumTouchpads(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetNumTouchpadFingers()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerGetNumTouchpadFingers(SDL_GameController *gamecontroller, int touchpad)"
  },
  {
    "label": "SDL_GameControllerGetTouchpadFinger()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerGetTouchpadFinger(SDL_GameController *gamecontroller, int touchpad, int finger, Uint8 *state, float *x, float *y, float *pressure)"
  },
  {
    "label": "SDL_GameControllerHasSensor()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerHasSensor(SDL_GameController *gamecontroller, SDL_SensorType type)"
  },
  {
    "label": "SDL_GameControllerSetSensorEnabled()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerSetSensorEnabled(SDL_GameController *gamecontroller, SDL_SensorType type, SDL_bool enabled)"
  },
  {
    "label": "SDL_GameControllerIsSensorEnabled()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerIsSensorEnabled(SDL_GameController *gamecontroller, SDL_SensorType type)"
  },
  {
    "label": "SDL_GameControllerGetSensorDataRate()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_GameControllerGetSensorDataRate(SDL_GameController *gamecontroller, SDL_SensorType type)"
  },
  {
    "label": "SDL_GameControllerGetSensorData()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerGetSensorData(SDL_GameController *gamecontroller, SDL_SensorType type, float *data, int num_values)"
  },
  {
    "label": "SDL_GameControllerGetSensorDataWithTimestamp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerGetSensorDataWithTimestamp(SDL_GameController *gamecontroller, SDL_SensorType type, Uint64 *timestamp, float *data, int num_values)"
  },
  {
    "label": "SDL_GameControllerRumble()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerRumble(SDL_GameController *gamecontroller, Uint16 low_frequency_rumble, Uint16 high_frequency_rumble, Uint32 duration_ms)"
  },
  {
    "label": "SDL_GameControllerRumbleTriggers()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerRumbleTriggers(SDL_GameController *gamecontroller, Uint16 left_rumble, Uint16 right_rumble, Uint32 duration_ms)"
  },
  {
    "label": "SDL_GameControllerHasLED()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerHasLED(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerHasRumble()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerHasRumble(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerHasRumbleTriggers()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_bool SDLCALL)",
    "insertText": "SDL_GameControllerHasRumbleTriggers(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerSetLED()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerSetLED(SDL_GameController *gamecontroller, Uint8 red, Uint8 green, Uint8 blue)"
  },
  {
    "label": "SDL_GameControllerSendEffect()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GameControllerSendEffect(SDL_GameController *gamecontroller, const void *data, int size)"
  },
  {
    "label": "SDL_GameControllerClose()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_GameControllerClose(SDL_GameController *gamecontroller)"
  },
  {
    "label": "SDL_GameControllerGetAppleSFSymbolsNameForButton()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerGetAppleSFSymbolsNameForButton(SDL_GameController *gamecontroller, SDL_GameControllerButton button)"
  },
  {
    "label": "SDL_GameControllerGetAppleSFSymbolsNameForAxis()",
    "kind": "Method",
    "detail": "Function (DECLSPEC const char* SDLCALL)",
    "insertText": "SDL_GameControllerGetAppleSFSymbolsNameForAxis(SDL_GameController *gamecontroller, SDL_GameControllerAxis axis)"
  }
]