[
  {
    "label": "FVisualLoggerDBRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerDBRow"
  },
  {
    "label": "FVisualLoggerCanvasRenderer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerCanvasRenderer"
  },
  {
    "label": "FGraphLineData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphLineData"
  },
  {
    "label": "FGraphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphData"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "FGraphData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VisualLogger / VisualLoggerTypes . h \" struct FVisualLoggerDBRow ; struct FVisualLoggerCanvasRenderer { struct FGraphLineData { FName DataName ; FVector2D LeftExtreme,RightExtreme ; TArray<FVector2D> Samples ; } ; struct FGraphData {)",
    "insertText": "FGraphData() : Min(FVector2D(FLT_MAX, FLT_MAX)), Max(FVector2D(-FLT_MAX, -FLT_MAX))"
  },
  {
    "label": "FVisualLoggerCanvasRenderer()",
    "kind": "Method",
    "detail": "Function (} FVector2D Min,Max ; TMap<FName,FGraphLineData> GraphLines ; } ; TMap<FName,FGraphData> CollectedGraphs ; public :)",
    "insertText": "FVisualLoggerCanvasRenderer()"
  },
  {
    "label": "DrawOnCanvas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawOnCanvas(class UCanvas* Canvas, class APlayerController*)"
  },
  {
    "label": "OnItemSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemSelectionChanged(const FVisualLoggerDBRow& ChangedRow, int32 SelectedItemIndex)"
  },
  {
    "label": "ObjectSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectSelectionChanged(const TArray<FName>& RowNames)"
  },
  {
    "label": "DirtyCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DirtyCachedData()"
  },
  {
    "label": "ResetData()",
    "kind": "Method",
    "detail": "Function (bDirtyData = true ; } void)",
    "insertText": "ResetData()"
  },
  {
    "label": "DrawHistogramGraphs()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DrawHistogramGraphs(class UCanvas* Canvas, class APlayerController*)"
  }
]