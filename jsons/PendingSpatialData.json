[
  {
    "label": "EPendingSpatialDataOperation",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPendingSpatialDataOperation"
  },
  {
    "label": "FPendingSpatialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingSpatialData"
  },
  {
    "label": "FPendingSpatialDataQueue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingSpatialDataQueue"
  },
  {
    "label": "FPendingSpatialData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ParticleHandle . h \" # include \" Chaos / Transform . h \" # include \" Chaos / ISpatialAcceleration . h \" # include \" Chaos / Defines . h \" namespace Chaos { enum EPendingSpatialDataOperation : uint8 { Delete,Add,Update } ; struct FPendingSpatialData { FAccelerationStructureHandle AccelerationHandle ; FSpatialAccelerationIdx SpatialIdx ; int32 SyncTimestamp ; EPendingSpatialDataOperation Operation ;)",
    "insertText": "FPendingSpatialData() : SyncTimestamp(0) , Operation(Add)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "UniqueIdx()",
    "kind": "Method",
    "detail": "Function (} FUniqueIdx)",
    "insertText": "UniqueIdx()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPendingSpatialDataQueue { TArray<FPendingSpatialData> PendingData ; TArrayAsMap<FUniqueIdx,int32> ParticleToPendingData ; void)",
    "insertText": "Reset()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (} FPendingSpatialData&)",
    "insertText": "FindOrAdd(const FUniqueIdx UniqueIdx, EPendingSpatialDataOperation Operation = EPendingSpatialDataOperation::Add)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ParticleToPendingData .)",
    "insertText": "Add(UniqueIdx,NewIdx)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (PendingData [ NewIdx ] . Operation = Operation ; return PendingData [ NewIdx ] ; } } void)",
    "insertText": "Remove(const FUniqueIdx UniqueIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 SlotIdx =* Existing ;)",
    "insertText": "if(SlotIdx + 1 < PendingData.Num())"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (const FUniqueIdx LastElemUniqueIdx = PendingData .)",
    "insertText": "Last().UniqueIdx()"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (ParticleToPendingData .)",
    "insertText": "FindChecked(LastElemUniqueIdx)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} PendingData .)",
    "insertText": "RemoveAtSwap(SlotIdx)"
  },
  {
    "label": "RemoveChecked()",
    "kind": "Method",
    "detail": "Function (ParticleToPendingData .)",
    "insertText": "RemoveChecked(UniqueIdx)"
  }
]