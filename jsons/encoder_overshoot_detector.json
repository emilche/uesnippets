[
  {
    "label": "EncoderOvershootDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderOvershootDetector"
  },
  {
    "label": "BitrateUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BitrateUpdate"
  },
  {
    "label": "EncoderOvershootDetector()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_ENCODER_OVERSHOOT_DETECTOR_H_ # define VIDEO_ENCODER_OVERSHOOT_DETECTOR_H_ # include<deque> # include \" absl / types / optional . h \" # include \" api / units / data_rate . h \" namespace webrtc { class EncoderOvershootDetector { public :)",
    "insertText": "EncoderOvershootDetector(int64_t window_size_ms)"
  },
  {
    "label": "EncoderOvershootDetector()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "EncoderOvershootDetector()"
  },
  {
    "label": "SetTargetRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetRate(DataRate target_bitrate, double target_framerate_fps, int64_t time_ms)"
  },
  {
    "label": "OnEncodedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodedFrame(size_t bytes, int64_t time_ms)"
  },
  {
    "label": "GetNetworkRateUtilizationFactor()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "GetNetworkRateUtilizationFactor(int64_t time_ms)"
  },
  {
    "label": "GetMediaRateUtilizationFactor()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "GetMediaRateUtilizationFactor(int64_t time_ms)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "IdealFrameSizeBits()",
    "kind": "Method",
    "detail": "Function (private : int64_t)",
    "insertText": "IdealFrameSizeBits()"
  },
  {
    "label": "LeakBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LeakBits(int64_t time_ms)"
  },
  {
    "label": "CullOldUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CullOldUpdates(int64_t time_ms)"
  },
  {
    "label": "BitrateUpdate()",
    "kind": "Method",
    "detail": "Function (const int64_t window_size_ms_ ; int64_t time_last_update_ms_ ; struct BitrateUpdate {)",
    "insertText": "BitrateUpdate(double network_utilization_factor, double media_utilization_factor, int64_t update_time_ms) : network_utilization_factor(network_utilization_factor), media_utilization_factor(media_utilization_factor), update_time_ms(update_time_ms)"
  }
]