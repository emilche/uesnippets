[
  {
    "label": "Matcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Matcher"
  },
  {
    "label": "IgnoredValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IgnoredValue"
  },
  {
    "label": "MatcherTuple",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatcherTuple"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Function"
  },
  {
    "label": "IgnoredValue()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_ # define GMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_GENERATED_INTERNAL_UTILS_H_ # include \" gmock / internal / gmock - port . h \" namespace testing { template<T> class Matcher ; namespace internal { class IgnoredValue { public : template<T>)",
    "insertText": "IgnoredValue(const T&)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<Tuple> struct MatcherTuple ; template<> struct MatcherTuple<::testing::tuple<>> { typedef::testing::tuple<> type ; } ; template<A1> struct MatcherTuple<::testing::tuple<A1>> { typedef::testing::tuple<Matcher<A1>> type ; } ; template<A1,A2> struct MatcherTuple<::testing::tuple<A1,A2>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>> type ; } ; template<A1,A2,A3> struct MatcherTuple<::testing::tuple<A1,A2,A3>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>> type ; } ; template<A1,A2,A3,A4> struct MatcherTuple<::testing::tuple<A1,A2,A3,A4>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>,Matcher<A4>> type ; } ; template<A1,A2,A3,A4,A5> struct MatcherTuple<::testing::tuple<A1,A2,A3,A4,A5>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>,Matcher<A4>,Matcher<A5>> type ; } ; template<A1,A2,A3,A4,A5,A6> struct MatcherTuple<::testing::tuple<A1,A2,A3,A4,A5,A6>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>,Matcher<A4>,Matcher<A5>,Matcher<A6>> type ; } ; template<A1,A2,A3,A4,A5,A6,A7> struct MatcherTuple<::testing::tuple<A1,A2,A3,A4,A5,A6,A7>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>,Matcher<A4>,Matcher<A5>,Matcher<A6>,Matcher<A7>> type ; } ; template<A1,A2,A3,A4,A5,A6,A7,A8> struct MatcherTuple<::testing::tuple<A1,A2,A3,A4,A5,A6,A7,A8>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>,Matcher<A4>,Matcher<A5>,Matcher<A6>,Matcher<A7>,Matcher<A8>> type ; } ; template<A1,A2,A3,A4,A5,A6,A7,A8,A9> struct MatcherTuple<::testing::tuple<A1,A2,A3,A4,A5,A6,A7,A8,A9>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>,Matcher<A4>,Matcher<A5>,Matcher<A6>,Matcher<A7>,Matcher<A8>,Matcher<A9>> type ; } ; template<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10> struct MatcherTuple<::testing::tuple<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10>> { typedef::testing::tuple<Matcher<A1>,Matcher<A2>,Matcher<A3>,Matcher<A4>,Matcher<A5>,Matcher<A6>,Matcher<A7>,Matcher<A8>,Matcher<A9>,Matcher<A10>> type ; } ; template<F> struct Function ; template<R> struct Function<)",
    "insertText": "R()"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef R Result ; typedef::testing::tuple<> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid()"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1> struct Function<)",
    "insertText": "R(A1)> : Function<R()"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A1 Argument1 ; typedef::testing::tuple<A1> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2> struct Function<)",
    "insertText": "R(A1, A2)> : Function<R(A1)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A2 Argument2 ; typedef::testing::tuple<A1,A2> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3> struct Function<)",
    "insertText": "R(A1, A2, A3)> : Function<R(A1, A2)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A3 Argument3 ; typedef::testing::tuple<A1,A2,A3> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3,A4> struct Function<)",
    "insertText": "R(A1, A2, A3, A4)> : Function<R(A1, A2, A3)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A4 Argument4 ; typedef::testing::tuple<A1,A2,A3,A4> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3, A4)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3, A4)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3,A4,A5> struct Function<)",
    "insertText": "R(A1, A2, A3, A4, A5)> : Function<R(A1, A2, A3, A4)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A5 Argument5 ; typedef::testing::tuple<A1,A2,A3,A4,A5> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3, A4, A5)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3, A4, A5)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3,A4,A5,A6> struct Function<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6)> : Function<R(A1, A2, A3, A4, A5)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A6 Argument6 ; typedef::testing::tuple<A1,A2,A3,A4,A5,A6> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3, A4, A5, A6)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3,A4,A5,A6,A7> struct Function<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7)> : Function<R(A1, A2, A3, A4, A5, A6)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A7 Argument7 ; typedef::testing::tuple<A1,A2,A3,A4,A5,A6,A7> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3, A4, A5, A6, A7)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3,A4,A5,A6,A7,A8> struct Function<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8)> : Function<R(A1, A2, A3, A4, A5, A6, A7)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A8 Argument8 ; typedef::testing::tuple<A1,A2,A3,A4,A5,A6,A7,A8> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3,A4,A5,A6,A7,A8,A9> struct Function<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8, A9)> : Function<R(A1, A2, A3, A4, A5, A6, A7, A8)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A9 Argument9 ; typedef::testing::tuple<A1,A2,A3,A4,A5,A6,A7,A8,A9> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8, A9)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8, A9)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10> struct Function<)",
    "insertText": "R(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)> : Function<R(A1, A2, A3, A4, A5, A6, A7, A8, A9)"
  },
  {
    "label": "MakeResultVoid()",
    "kind": "Method",
    "detail": "Function (typedef A10 Argument10 ; typedef::testing::tuple<A1,A2,A3,A4,A5,A6,A7,A8,A9,A10> ArgumentTuple ; typedef MatcherTuple<ArgumentTuple>::type ArgumentMatcherTuple ; typedef void)",
    "insertText": "MakeResultVoid(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)"
  },
  {
    "label": "MakeResultIgnoredValue()",
    "kind": "Method",
    "detail": "Function (typedef IgnoredValue)",
    "insertText": "MakeResultIgnoredValue(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)"
  }
]