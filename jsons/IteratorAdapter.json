[
  {
    "label": "TIteratorAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIteratorAdapter"
  },
  {
    "label": "TIteratorAdapter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / UnrealTemplate . h \" template<Base> class TIteratorAdapter ; template<Base> class TIteratorAdapter : public Base { public : using BaseType = Base ; using ThisType = TIteratorAdapter<Base> ; using ElementType = BaseType::ElementType ; using SizeType = BaseType::SizeType ;)",
    "insertText": "TIteratorAdapter()"
  },
  {
    "label": "TIteratorAdapter()",
    "kind": "Method",
    "detail": "Function (template<. . . Args>)",
    "insertText": "TIteratorAdapter(EInPlace, Args&&... InArgs) : BaseType(Forward<Args>(InArgs)...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Increment()"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Decrement()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThisType Temp =* this ; - -* this ; return Temp ; } ThisType&)",
    "insertText": "operator(SizeType Offset)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Increment(Offset)"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "Decrement(Offset)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThisType Temp =* this ; return Temp - = Offset ; } protected : using BaseType::Dereference ; using BaseType::Equals ; using BaseType::Increment ; template<AnyElementType> class TIteratorAdapter ; public : bool)",
    "insertText": "operator(const TIteratorAdapter& Right)"
  }
]