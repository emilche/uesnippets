[
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "FCanKeyPropertyParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" Math / UnrealMathSSE . h \" # include \" PropertyPath . h \" # include \" UObject / Field . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakFieldPtr . h \" class IPropertyHandle ; class UClass ; class UObject ; class UStruct ; enum class ESequencerKeyMode ; struct FCanKeyPropertyParams {)",
    "insertText": "FCanKeyPropertyParams(const UClass* InObjectClass, const FPropertyPath& InPropertyPath)"
  },
  {
    "label": "FCanKeyPropertyParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCanKeyPropertyParams(const UClass* InObjectClass, const IPropertyHandle& InPropertyHandle)"
  },
  {
    "label": "FindPropertyOwner()",
    "kind": "Method",
    "detail": "Function (const UStruct*)",
    "insertText": "FindPropertyOwner(const FProperty* ForProperty)"
  },
  {
    "label": "FindPropertyContainer()",
    "kind": "Method",
    "detail": "Function (const UStruct*)",
    "insertText": "FindPropertyContainer(const FProperty* ForProperty)"
  },
  {
    "label": "FKeyPropertyParams()",
    "kind": "Method",
    "detail": "Function (const UClass* ObjectClass ; FPropertyPath PropertyPath ; } ; struct FKeyPropertyParams {)",
    "insertText": "FKeyPropertyParams(TArray<UObject*> InObjectsToKey, const FPropertyPath& InPropertyPath, ESequencerKeyMode InKeyMode)"
  },
  {
    "label": "FKeyPropertyParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FKeyPropertyParams(TArray<UObject*> InObjectsToKey, const IPropertyHandle& InPropertyHandle, ESequencerKeyMode InKeyMode)"
  },
  {
    "label": "FPropertyChangedParams()",
    "kind": "Method",
    "detail": "Function (const TArray<UObject*> ObjectsToKey ; FPropertyPath PropertyPath ; const ESequencerKeyMode KeyMode ; } ; class FPropertyChangedParams { public :)",
    "insertText": "FPropertyChangedParams(TArray<UObject*> InObjectsThatChanged, const FPropertyPath& InPropertyPath, const FPropertyPath& InStructPathToKey, ESequencerKeyMode InKeyMode)"
  },
  {
    "label": "GetPropertyValue()",
    "kind": "Method",
    "detail": "Function (template<ValueType> ValueType)",
    "insertText": "GetPropertyValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (void* ContainerPtr = ObjectsThatChanged [ 0 ] ;)",
    "insertText": "for(int32 i = 0; i < PropertyPath.GetNumProperties(); i++)"
  },
  {
    "label": "GetPropertyInfo()",
    "kind": "Method",
    "detail": "Function (const FPropertyInfo& PropertyInfo = PropertyPath .)",
    "insertText": "GetPropertyInfo(i)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (int32 ArrayIndex =)",
    "insertText": "Max(0, PropertyInfo.ArrayIndex)"
  },
  {
    "label": "GetPropertyInfo()",
    "kind": "Method",
    "detail": "Function (const FPropertyInfo& InnerPropertyInfo = PropertyPath .)",
    "insertText": "GetPropertyInfo(i+1)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FProperty* InnerProperty = InnerPropertyInfo . Property .)",
    "insertText": "Get()"
  },
  {
    "label": "ParentArrayHelper()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = InnerPropertyInfo . ArrayIndex ; + + i ; } } FScriptArrayHelper)",
    "insertText": "ParentArrayHelper(ArrayProp, ArrayProp->ContainerPtrToValuePtr<void>(ContainerPtr))"
  },
  {
    "label": "GetRawPtr()",
    "kind": "Method",
    "detail": "Function (} ContainerPtr = ParentArrayHelper .)",
    "insertText": "GetRawPtr(ArrayIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ArrayIndex >= 0 && ArrayIndex < Property->ArrayDim)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (ContainerPtr = Property -> ContainerPtrToValuePtr<)",
    "insertText": "ValueType(ContainerPtr, ArrayIndex)"
  },
  {
    "label": "ValueType()",
    "kind": "Method",
    "detail": "Function (} } } return GetPropertyValueImpl<)",
    "insertText": "ValueType(ContainerPtr, PropertyPath.GetLeafMostProperty())"
  },
  {
    "label": "GetPropertyPathString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetPropertyPathString()"
  },
  {
    "label": "GetPropertyValueImpl()",
    "kind": "Method",
    "detail": "Function (const TArray<UObject*> ObjectsThatChanged ; FPropertyPath PropertyPath ; FPropertyPath StructPathToKey ; const ESequencerKeyMode KeyMode ; private : template<ValueType> ValueType)",
    "insertText": "GetPropertyValueImpl(void* Data, const FPropertyInfo& Info)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; template<> bool FPropertyChangedParams::GetPropertyValueImpl<)",
    "insertText": "bool(void* Data, const FPropertyInfo& Info)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (template<> UObject* FPropertyChangedParams::GetPropertyValueImpl<)",
    "insertText": "UObject(void* Data, const FPropertyInfo& Info)"
  }
]