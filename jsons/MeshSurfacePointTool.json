[
  {
    "label": "UMeshSurfacePointTool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshSurfacePointTool"
  },
  {
    "label": "IToolStylusStateProviderAPI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolStylusStateProviderAPI"
  },
  {
    "label": "UMeshSurfacePointToolBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMeshSurfacePointToolBuilder"
  },
  {
    "label": "GetCurrentPressure()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SingleSelectionTool . h \" # include \" InteractiveToolBuilder . h \" # include \" InputBehaviorSet . h \" # include \" BaseBehaviors / BehaviorTargetInterfaces . h \" # include \" BaseBehaviors / AnyButtonInputBehavior . h \" # include \" MeshSurfacePointTool . generated . h \" class UMeshSurfacePointTool ; class IToolStylusStateProviderAPI { public : float)",
    "insertText": "GetCurrentPressure()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "CanBuildTool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBuildTool(const FToolBuilderState& SceneState)"
  },
  {
    "label": "BuildTool()",
    "kind": "Method",
    "detail": "Function (UInteractiveTool*)",
    "insertText": "BuildTool(const FToolBuilderState& SceneState)"
  },
  {
    "label": "CreateNewTool()",
    "kind": "Method",
    "detail": "Function (UMeshSurfacePointTool*)",
    "insertText": "CreateNewTool(const FToolBuilderState& SceneState)"
  },
  {
    "label": "InitializeNewTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeNewTool(UMeshSurfacePointTool* Tool, const FToolBuilderState& SceneState)"
  },
  {
    "label": "GetTargetRequirements()",
    "kind": "Method",
    "detail": "Function (protected : const FToolTargetTypeRequirements&)",
    "insertText": "GetTargetRequirements()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API virtual void Setup()"
  },
  {
    "label": "SetStylusAPI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStylusAPI(IToolStylusStateProviderAPI* StylusAPI)"
  },
  {
    "label": "HitTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HitTest(const FRay& Ray, FHitResult& OutHit)"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginDrag(const FRay& Ray)"
  },
  {
    "label": "OnUpdateDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateDrag(const FRay& Ray)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(const FRay& Ray)"
  },
  {
    "label": "OnCancelDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCancelDrag()"
  },
  {
    "label": "CanBeginClickDragSequence()",
    "kind": "Method",
    "detail": "Function (} FInputRayHit)",
    "insertText": "CanBeginClickDragSequence(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickPress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickPress(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnClickDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickDrag(const FInputDeviceRay& DragPos)"
  },
  {
    "label": "OnClickRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClickRelease(const FInputDeviceRay& ReleasePos)"
  },
  {
    "label": "OnTerminateDragSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTerminateDragSequence()"
  },
  {
    "label": "OnUpdateModifierState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateModifierState(int ModifierID, bool bIsOn)"
  },
  {
    "label": "BeginHoverSequenceHitTest()",
    "kind": "Method",
    "detail": "Function (FInputRayHit)",
    "insertText": "BeginHoverSequenceHitTest(const FInputDeviceRay& PressPos)"
  },
  {
    "label": "OnBeginHover()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "OnUpdateHover()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnUpdateHover(const FInputDeviceRay& DevicePos)"
  },
  {
    "label": "GetWorldSpaceFocusPoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetWorldSpaceFocusPoint(const FRay& WorldRay, FVector& PointOut)"
  },
  {
    "label": "SetShiftToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShiftToggle(bool bShiftDown)"
  },
  {
    "label": "GetShiftToggle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShiftToggle()"
  },
  {
    "label": "GetCtrlToggle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCtrlToggle()"
  },
  {
    "label": "SetWorld()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorld(UWorld* World)"
  },
  {
    "label": "GetTargetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetTargetWorld()"
  }
]