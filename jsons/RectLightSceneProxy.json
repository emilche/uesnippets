[
  {
    "label": "FRectLightRayTracingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRectLightRayTracingData"
  },
  {
    "label": "FRectLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRectLightSceneProxy"
  },
  {
    "label": "FRectLightSceneProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Components / RectLightComponent . h \" # include \" LocalLightSceneProxy . h \" # include \" SceneManagement . h \" struct FRectLightRayTracingData { # if RHI_RAYTRACING FRWBuffer RectLightMipTree ; FIntVector RectLightMipTreeDimensions ; FGuid TextureLightingGuid ; bool bInitialised = false ; # endif } ; class FRectLightSceneProxy : public FLocalLightSceneProxy { public : float SourceWidth ; float SourceHeight ; float BarnDoorAngle ; float BarnDoorLength ; FRectLightRayTracingData* RayTracingData ; UTexture* SourceTexture ; uint32 RectAtlasId ; float LightFunctionConeAngleTangent ;)",
    "insertText": "FRectLightSceneProxy(const URectLightComponent* Component)"
  },
  {
    "label": "FRectLightSceneProxy()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRectLightSceneProxy()"
  },
  {
    "label": "IsRectLight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRectLight()"
  },
  {
    "label": "HasSourceTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSourceTexture()"
  },
  {
    "label": "GetLightShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLightShaderParameters(FLightRenderParameters& OutLightParameters, uint32 Flags=0)"
  },
  {
    "label": "GetWholeSceneProjectedShadowInitializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWholeSceneProjectedShadowInitializer(const FSceneViewFamily& ViewFamily, TArray<FWholeSceneProjectedShadowInitializer, TInlineAllocator<6> >& OutInitializers)"
  }
]