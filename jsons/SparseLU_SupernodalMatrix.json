[
  {
    "label": "MappedSuperNodalMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MappedSuperNodalMatrix"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "MappedSuperNodalMatrix()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSELU_SUPERNODAL_MATRIX_H # define EIGEN_SPARSELU_SUPERNODAL_MATRIX_H namespace Eigen { namespace internal { template<_Scalar,_StorageIndex> class MappedSuperNodalMatrix { public : typedef _Scalar Scalar ; typedef _StorageIndex StorageIndex ; typedef Matrix<StorageIndex,Dynamic,1> IndexVector ; typedef Matrix<Scalar,Dynamic,1> ScalarVector ; public :)",
    "insertText": "MappedSuperNodalMatrix()"
  },
  {
    "label": "MappedSuperNodalMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MappedSuperNodalMatrix(Index m, Index n, ScalarVector& nzval, IndexVector& nzval_colptr, IndexVector& rowind, IndexVector& rowind_colptr, IndexVector& col_to_sup, IndexVector& sup_to_col)"
  },
  {
    "label": "setInfos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInfos(m, n, nzval, nzval_colptr, rowind, rowind_colptr, col_to_sup, sup_to_col)"
  },
  {
    "label": "setInfos()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setInfos(Index m, Index n, ScalarVector& nzval, IndexVector& nzval_colptr, IndexVector& rowind, IndexVector& rowind_colptr, IndexVector& col_to_sup, IndexVector& sup_to_col)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (m_row = m ; m_col = n ; m_nzval = nzval .)",
    "insertText": "data()"
  },
  {
    "label": "col_to_sup()",
    "kind": "Method",
    "detail": "Function (m_nsuper =)",
    "insertText": "col_to_sup(n)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "solveTransposedInPlace()",
    "kind": "Method",
    "detail": "Function (template<bool Conjugate,Dest> void)",
    "insertText": "solveTransposedInPlace(MatrixBase<Dest>&X)"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (protected : Index m_row ; Index m_col ; Index m_nsuper ; Scalar* m_nzval ; StorageIndex* m_nzval_colptr ; StorageIndex* m_rowind ; StorageIndex* m_rowind_colptr ; StorageIndex* m_col_to_sup ; StorageIndex* m_sup_to_col ; private : } ; template<Scalar,StorageIndex> class MappedSuperNodalMatrix<Scalar,StorageIndex>::InnerIterator { public :)",
    "insertText": "InnerIterator(const MappedSuperNodalMatrix& mat, Index outer) : m_matrix(mat), m_outer(outer), m_supno(mat.colToSup()[outer]), m_idval(mat.colIndexPtr()[outer]), m_startidval(m_idval), m_endidval(mat.colIndexPtr()[outer+1]), m_idrow(mat.rowIndexPtr()[mat.supToCol()[mat.colToSup()[outer]]]), m_endidrow(mat.rowIndexPtr()[mat.supToCol()[mat.colToSup()[outer]]+1])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_idval + + ; m_idrow + + ; return* this ; } Scalar)",
    "insertText": "value()"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "valueRef()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "index()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (} protected : const MappedSuperNodalMatrix& m_matrix ; const Index m_outer ; const Index m_supno ; Index m_idval ; const Index m_startidval ; const Index m_endidval ; Index m_idrow ; Index m_endidrow ; } ; template<Scalar,Index_> template<Dest> void MappedSuperNodalMatrix<Scalar,Index_)",
    "insertText": "solveInPlace(MatrixBase<Dest>&X)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (Index n =)",
    "insertText": "int(X.rows())"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (Index nrhs =)",
    "insertText": "Index(X.cols())"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (const Scalar* Lval =)",
    "insertText": "valuePtr()"
  },
  {
    "label": "work()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Dynamic,Dest::ColsAtCompileTime,ColMajor>)",
    "insertText": "work(n, nrhs)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (work .)",
    "insertText": "setZero()"
  },
  {
    "label": "supToCol()",
    "kind": "Method",
    "detail": "Function (Index fsupc =)",
    "insertText": "supToCol()"
  },
  {
    "label": "rowIndexPtr()",
    "kind": "Method",
    "detail": "Function (Index istart =)",
    "insertText": "rowIndexPtr()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index nrow = nsupr - nsupc ; Index irow ;)",
    "insertText": "if(nsupc == 1)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (InnerIterator)",
    "insertText": "it(*this, fsupc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (+ + it ;)",
    "insertText": "for(; it; ++it)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(irow, j) -= X(fsupc, j) * it.value()"
  },
  {
    "label": "colIndexPtr()",
    "kind": "Method",
    "detail": "Function (} } } else { Index luptr =)",
    "insertText": "colIndexPtr()"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (Map<const Matrix<Scalar,Dynamic,Dynamic,ColMajor>,0,OuterStride<>>)",
    "insertText": "A(&(Lval[luptr]), nsupc, nsupc, OuterStride<>(lda))"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,Dynamic,Dest::ColsAtCompileTime,ColMajor>,0,OuterStride<>>)",
    "insertText": "U(&(X(fsupc,0)), nsupc, nrhs, OuterStride<>(n))"
  },
  {
    "label": "UnitLower()",
    "kind": "Method",
    "detail": "Function (U = A . template triangularView<)",
    "insertText": "UnitLower().solve(U)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&A) Map<const Matrix<Scalar,Dynamic,Dynamic, ColMajor>, 0, OuterStride<> > ( &(Lval[luptr+nsupc]), nrow, nsupc, OuterStride<>(lda))"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (work .)",
    "insertText": "topRows(nrow).noalias()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index iptr = istart + nsupc ;)",
    "insertText": "for(Index i = 0; i < nrow; i++)"
  },
  {
    "label": "rowIndex()",
    "kind": "Method",
    "detail": "Function (irow =)",
    "insertText": "rowIndex()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(irow, j) -= work(i, j)"
  },
  {
    "label": "work()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "work(i, j) = Scalar(0)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(fsupc,j) -= X(irow, j) * (Conjugate?conj(it.value()):it.value())"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (work .)",
    "insertText": "topRows(nrow)(i,j)= X(irow,j)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (iptr + + ; } } Map<const Matrix<Scalar,Dynamic,Dynamic,ColMajor>,0,OuterStride<>>)",
    "insertText": "A(&(Lval[luptr+nsupc]), nrow, nsupc, OuterStride<>(lda))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&A) Map<const Matrix<Scalar,Dynamic,Dynamic, ColMajor>, 0, OuterStride<> > ( &(Lval[luptr]), nsupc, nsupc, OuterStride<>(lda))"
  }
]