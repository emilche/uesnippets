[
  {
    "label": "PatchParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PatchParam"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENSUBDIV3_FAR_PATCH_PARAM_H # define OPENSUBDIV3_FAR_PATCH_PARAM_H # include \" . . / version . h \" # include \" . . / far / types . h \" namespace OpenSubdiv { namespace OPENSUBDIV_VERSION { namespace Far { struct PatchParam { void)",
    "insertText": "Set(Index faceid, short u, short v, unsigned short depth, bool nonquad, unsigned short boundary, unsigned short transition, bool regular = false)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "GetFaceId()",
    "kind": "Method",
    "detail": "Function (field0 = field1 = 0 ; } Index)",
    "insertText": "GetFaceId()"
  },
  {
    "label": "GetU()",
    "kind": "Method",
    "detail": "Function (} unsigned short)",
    "insertText": "GetU()"
  },
  {
    "label": "GetV()",
    "kind": "Method",
    "detail": "Function (} unsigned short)",
    "insertText": "GetV()"
  },
  {
    "label": "GetTransition()",
    "kind": "Method",
    "detail": "Function (} unsigned short)",
    "insertText": "GetTransition()"
  },
  {
    "label": "GetBoundary()",
    "kind": "Method",
    "detail": "Function (} unsigned short)",
    "insertText": "GetBoundary()"
  },
  {
    "label": "NonQuadRoot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NonQuadRoot()"
  },
  {
    "label": "GetDepth()",
    "kind": "Method",
    "detail": "Function (} unsigned short)",
    "insertText": "GetDepth()"
  },
  {
    "label": "GetParamFraction()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetParamFraction()"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (template<REAL> void)",
    "insertText": "Normalize(REAL & u, REAL & v)"
  },
  {
    "label": "NormalizeTriangle()",
    "kind": "Method",
    "detail": "Function (template<REAL> void)",
    "insertText": "NormalizeTriangle(REAL & u, REAL & v)"
  },
  {
    "label": "Unnormalize()",
    "kind": "Method",
    "detail": "Function (template<REAL> void)",
    "insertText": "Unnormalize(REAL & u, REAL & v)"
  },
  {
    "label": "UnnormalizeTriangle()",
    "kind": "Method",
    "detail": "Function (template<REAL> void)",
    "insertText": "UnnormalizeTriangle(REAL & u, REAL & v)"
  },
  {
    "label": "IsTriangleRotated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTriangleRotated()"
  },
  {
    "label": "IsRegular()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegular()"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (} unsigned int field0 : 3 2 ; unsigned int field1 : 3 2 ; private : unsigned int)",
    "insertText": "pack(unsigned int value, int width, int offset)"
  },
  {
    "label": "unpack()",
    "kind": "Method",
    "detail": "Function (} unsigned int)",
    "insertText": "unpack(unsigned int value, int width, int offset)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} } ; typedef std::vector<PatchParam> PatchParamTable ; typedef Vtr::Array<PatchParam> PatchParamArray ; typedef Vtr::ConstArray<PatchParam> ConstPatchParamArray ; void)",
    "insertText": "Set(Index faceid, short u, short v, unsigned short depth, bool nonquad, unsigned short boundary, unsigned short transition, bool regular)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (field0 =)",
    "insertText": "pack(faceid, 28, 0) | pack(transition, 4, 28)"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (field1 =)",
    "insertText": "pack(u, 10, 22) | pack(v, 10, 12) | pack(boundary, 5, 7) | pack(regular, 1, 5) | pack(nonquad, 1, 4) | pack(depth, 4, 0)"
  },
  {
    "label": "fracInv()",
    "kind": "Method",
    "detail": "Function (REAL)",
    "insertText": "fracInv(REAL)(1.0f / GetParamFraction())"
  },
  {
    "label": "fracInv()",
    "kind": "Method",
    "detail": "Function (u = u*)",
    "insertText": "fracInv(REAL)GetU()"
  },
  {
    "label": "fracInv()",
    "kind": "Method",
    "detail": "Function (v = v*)",
    "insertText": "fracInv(REAL)GetV()"
  },
  {
    "label": "frac()",
    "kind": "Method",
    "detail": "Function (REAL)",
    "insertText": "frac(REAL)GetParamFraction()"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "u(u + (REAL)GetU())"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(v + (REAL)GetV())"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "u(REAL)(depthFactor - GetU()) - (u * fracInv)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(REAL)(depthFactor - GetV()) - (v * fracInv)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Normalize(u, v)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "u((REAL)(depthFactor - GetU()) - u)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v((REAL)(depthFactor - GetV()) - v)"
  },
  {
    "label": "Unnormalize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Unnormalize(u, v)"
  }
]