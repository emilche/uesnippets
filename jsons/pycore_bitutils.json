[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_BITUTILS_H # define Py_INTERNAL_BITUTILS_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # if)",
    "insertText": "defined(__GNUC__) \\ && ((__GNUC__ >= 5) || (__GNUC__ == 4) && (__GNUC_MINOR__ >= 8)) # define _PY_HAVE_BUILTIN_BSWAP #endif #ifdef _MSC_VER # include <intrin.h> #endif static inline uint16_t _Py_bswap16(uint16_t word)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_PY_HAVE_BUILTIN_BSWAP) || _Py__has_builtin(__builtin_bswap16) return __builtin_bswap16(word)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) Py_BUILD_ASSERT(sizeof(word) == sizeof(unsigned short))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(((word & UINT16_C(0x00FF)) << 8) | ((word & UINT16_C(0xFF00)) >> 8))"
  },
  {
    "label": "_Py_bswap32()",
    "kind": "Method",
    "detail": "Function (# endif } uint32_t)",
    "insertText": "_Py_bswap32(uint32_t word)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_PY_HAVE_BUILTIN_BSWAP) || _Py__has_builtin(__builtin_bswap32) return __builtin_bswap32(word)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) Py_BUILD_ASSERT(sizeof(word) == sizeof(unsigned long))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(((word & UINT32_C(0x000000FF)) << 24) | ((word & UINT32_C(0x0000FF00)) << 8) | ((word & UINT32_C(0x00FF0000)) >> 8) | ((word & UINT32_C(0xFF000000)) >> 24))"
  },
  {
    "label": "_Py_bswap64()",
    "kind": "Method",
    "detail": "Function (# endif } uint64_t)",
    "insertText": "_Py_bswap64(uint64_t word)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_PY_HAVE_BUILTIN_BSWAP) || _Py__has_builtin(__builtin_bswap64) return __builtin_bswap64(word)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(_MSC_VER) return _byteswap_uint64(word)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "return(((word & UINT64_C(0x00000000000000FF)) << 56) | ((word & UINT64_C(0x000000000000FF00)) << 40) | ((word & UINT64_C(0x0000000000FF0000)) << 24) | ((word & UINT64_C(0x00000000FF000000)) << 8) | ((word & UINT64_C(0x000000FF00000000)) >> 8) | ((word & UINT64_C(0x0000FF0000000000)) >> 24) | ((word & UINT64_C(0x00FF000000000000)) >> 40) | ((word & UINT64_C(0xFF00000000000000)) >> 56))"
  },
  {
    "label": "_Py_popcount32()",
    "kind": "Method",
    "detail": "Function (# endif } int)",
    "insertText": "_Py_popcount32(uint32_t x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(__clang__) || defined(__GNUC__)) #if SIZEOF_INT >= 4 Py_BUILD_ASSERT(sizeof(x) <= sizeof(unsigned int))"
  },
  {
    "label": "Py_BUILD_ASSERT()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "Py_BUILD_ASSERT(sizeof(x) <= sizeof(unsigned long))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (# endif # else const uint32_t M1 = 0 x55555555 ; const uint32_t M2 = 0 x33333333 ; const uint32_t M4 = 0 x0F0F0F0F ; x =)",
    "insertText": "x((x >> 1) & M1)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x & M2) + ((x >> 2) & M2)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x + (x >> 4))"
  },
  {
    "label": "_Py_bit_length()",
    "kind": "Method",
    "detail": "Function (# endif } int)",
    "insertText": "_Py_bit_length(unsigned long x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(defined(__clang__) || defined(__GNUC__)) if (x != 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } # elif)",
    "insertText": "defined(_MSC_VER) Py_BUILD_ASSERT(sizeof(unsigned long) <= 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned long msb ;)",
    "insertText": "if(_BitScanReverse(&msb, x))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } # else const int BIT_LENGTH_TABLE [ 3 2 ] = { 0,1,2,2,3,3,3,3,4,4,4,4,4,4,4,4,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5 } ; int msb = 0 ;)",
    "insertText": "while(x >= 32)"
  }
]