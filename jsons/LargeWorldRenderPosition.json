[
  {
    "label": "TLargeWorldRenderScalar",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLargeWorldRenderScalar"
  },
  {
    "label": "TLargeWorldRenderPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TLargeWorldRenderPosition"
  },
  {
    "label": "GetTileSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / MathFwd . h \" # include \" Math / Matrix . h \" # include \" Math / UnrealMathUtility . h \" # include \" Math / Vector . h \" # include \" Math / Vector4 . h \" # include \" Misc / LargeWorldCoordinates . h \" # include \" Math / DoubleFloat . h \" double UE_LWC_RENDER_TILE_SIZE = 2 0 9 7 1 5 2 . 0 ; template<TScalar> struct TLargeWorldRenderScalar { private : using VectorType = UE::Math::TVector<TScalar> ; public : TScalar)",
    "insertText": "GetTileSize()"
  },
  {
    "label": "GetTileFor()",
    "kind": "Method",
    "detail": "Function (} FVector3f)",
    "insertText": "GetTileFor(FVector InPosition)"
  },
  {
    "label": "MakeTile()",
    "kind": "Method",
    "detail": "Function (TScalar)",
    "insertText": "MakeTile(double InValue)"
  },
  {
    "label": "MakeQuantizedTile()",
    "kind": "Method",
    "detail": "Function (} TScalar)",
    "insertText": "MakeQuantizedTile(double InValue, double InQuantization)"
  },
  {
    "label": "MakeTile()",
    "kind": "Method",
    "detail": "Function (} VectorType)",
    "insertText": "MakeTile(const FVector& InValue)"
  },
  {
    "label": "MakeQuantizedTile()",
    "kind": "Method",
    "detail": "Function (} VectorType)",
    "insertText": "MakeQuantizedTile(const FVector& InValue, double InQuantization)"
  },
  {
    "label": "SafeCastMatrix()",
    "kind": "Method",
    "detail": "Function (} FMatrix44f)",
    "insertText": "SafeCastMatrix(const FMatrix& Matrix)"
  },
  {
    "label": "MakeToRelativeWorldMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix44f)",
    "insertText": "MakeToRelativeWorldMatrix(const FVector Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "MakeToRelativeWorldMatrixDouble()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "MakeToRelativeWorldMatrixDouble(const FVector Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "MakeFromRelativeWorldMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix44f)",
    "insertText": "MakeFromRelativeWorldMatrix(const FVector Origin, const FMatrix& FromWorld)"
  },
  {
    "label": "MakeFromRelativeWorldMatrixDouble()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "MakeFromRelativeWorldMatrixDouble(const FVector Origin, const FMatrix& FromWorld)"
  },
  {
    "label": "MakeClampedToRelativeWorldMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix44f)",
    "insertText": "MakeClampedToRelativeWorldMatrix(const FVector Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "MakeClampedToRelativeWorldMatrixDouble()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "MakeClampedToRelativeWorldMatrixDouble(const FVector Origin, const FMatrix& ToWorld)"
  },
  {
    "label": "GetTile()",
    "kind": "Method",
    "detail": "Function (template<TResult = float> TResult)",
    "insertText": "GetTile()"
  },
  {
    "label": "GetOffset()",
    "kind": "Method",
    "detail": "Function (} template<TResult = float> TResult)",
    "insertText": "GetOffset()"
  },
  {
    "label": "GetTileOffset()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetTileOffset()"
  },
  {
    "label": "GetAbsolute()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAbsolute()"
  },
  {
    "label": "TLargeWorldRenderScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLargeWorldRenderScalar() : Tile(static_cast<TScalar>(0.0)), Offset(static_cast<TScalar>(0.0))"
  },
  {
    "label": "TLargeWorldRenderScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLargeWorldRenderScalar(TScalar InTile, TScalar InOffset) : Tile(static_cast<TScalar>(InTile)), Offset(static_cast<TScalar>(InOffset))"
  },
  {
    "label": "TLargeWorldRenderScalar()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar = double>)",
    "insertText": "TLargeWorldRenderScalar(const TLargeWorldRenderScalar<TInputScalar>& In) : TLargeWorldRenderScalar(In.Tile, In.Offset)"
  },
  {
    "label": "TLargeWorldRenderScalar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLargeWorldRenderScalar(double InAbsolute)"
  },
  {
    "label": "MakeTile()",
    "kind": "Method",
    "detail": "Function (Tile =)",
    "insertText": "MakeTile(InAbsolute)"
  },
  {
    "label": "TScalar()",
    "kind": "Method",
    "detail": "Function (Offset = static_cast<)",
    "insertText": "TScalar(InAbsolute - GetTileOffset())"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate(InAbsolute)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Validate(double InAbsolute)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (LWCScalarType)",
    "insertText": "X(Tile.X, Offset.X)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (LWCScalarType)",
    "insertText": "Y(Tile.Y, Offset.Y)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (LWCScalarType)",
    "insertText": "Z(Tile.Z, Offset.Z)"
  },
  {
    "label": "TLargeWorldRenderPosition()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar = double>)",
    "insertText": "TLargeWorldRenderPosition(const UE::Math::TVector<TInputScalar>& InWorldPosition)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (LWCScalarType)",
    "insertText": "X(InWorldPosition.X)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (LWCScalarType)",
    "insertText": "Y(InWorldPosition.Y)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (LWCScalarType)",
    "insertText": "Z(InWorldPosition.Z)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (Tile =)",
    "insertText": "VectorType(X.template GetTile<TScalar>(), Y.template GetTile<TScalar>(), Z.template GetTile<TScalar>())"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (Offset =)",
    "insertText": "VectorType(X.template GetOffset<TScalar>(), Y.template GetOffset<TScalar>(), Z.template GetOffset<TScalar>())"
  },
  {
    "label": "TLargeWorldRenderPosition()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar = double>)",
    "insertText": "TLargeWorldRenderPosition(const UE::Math::TVector4<TInputScalar>& InWorldPosition) : TLargeWorldRenderPosition(UE::Math::TVector<TInputScalar>(InWorldPosition.X, InWorldPosition.Y, InWorldPosition.Z))"
  },
  {
    "label": "TLargeWorldRenderPosition()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar = double>)",
    "insertText": "TLargeWorldRenderPosition(const UE::Math::TVector<TInputScalar>& InTilePosition, const UE::Math::TVector<TInputScalar>& InRelativePosition)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (Tile =)",
    "insertText": "VectorType(InTilePosition.X, InTilePosition.Y, InTilePosition.Z)"
  },
  {
    "label": "VectorType()",
    "kind": "Method",
    "detail": "Function (Offset =)",
    "insertText": "VectorType(InRelativePosition.X, InRelativePosition.Y, InRelativePosition.Z)"
  },
  {
    "label": "TLargeWorldRenderPosition()",
    "kind": "Method",
    "detail": "Function (} template<TInputScalar>)",
    "insertText": "TLargeWorldRenderPosition(const TLargeWorldRenderPosition<TInputScalar>& In) : TLargeWorldRenderPosition(In.Tile, In.Offset)"
  },
  {
    "label": "TLargeWorldRenderPosition()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TLargeWorldRenderPosition() : Tile(0, 0, 0), Offset(0, 0, 0)"
  }
]