[
  {
    "label": "TurnCustomizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnCustomizer"
  },
  {
    "label": "TurnAllocateRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnAllocateRequest"
  },
  {
    "label": "TurnEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnEntry"
  },
  {
    "label": "TurnPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnPort"
  },
  {
    "label": "PortState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PortState"
  },
  {
    "label": "CallbacksForTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbacksForTest"
  },
  {
    "label": "TurnRefreshRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnRefreshRequest"
  },
  {
    "label": "TurnCreatePermissionRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnCreatePermissionRequest"
  },
  {
    "label": "TurnChannelBindRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnChannelBindRequest"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TURN_PORT_H_ # define P2P_BASE_TURN_PORT_H_ # include<stdio . h> # include<map> # include<memory> # include<set> # include<string> # include<vector> # include \" absl / memory / memory . h \" # include \" absl / strings / string_view . h \" # include \" api / async_dns_resolver . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / task_queue / task_queue_base . h \" # include \" p2p / base / port . h \" # include \" p2p / client / basic_port_allocator . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / ssl_certificate . h \" namespace webrtc { class TurnCustomizer ; } namespace cricket { const int kMaxTurnUsernameLength = 5 0 9 ; const int STUN_ATTR_TURN_LOGGING_ID ; const char TURN_PORT_TYPE [ ] ; class TurnAllocateRequest ; class TurnEntry ; class TurnPort : public Port { public : enum PortState { STATE_CONNECTING,STATE_CONNECTED,STATE_READY,STATE_RECEIVEONLY,STATE_DISCONNECTED,} ; bool)",
    "insertText": "Validate(const CreateRelayPortArgs& args)"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_ERROR) << \"Attempt to use TURN with a too long username \" << \"of length \" << args.config->credentials.username.size()"
  },
  {
    "label": "RTC_LOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_LOG(LS_ERROR) << \"Attempt to use TURN to connect to port \" << args.server_address->address.port()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} std::unique_ptr<TurnPort>)",
    "insertText": "Create(const CreateRelayPortArgs& args, int min_port, int max_port)"
  },
  {
    "label": "TurnPort()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TurnPort()"
  },
  {
    "label": "server_address()",
    "kind": "Method",
    "detail": "Function (const ProtocolAddress&)",
    "insertText": "server_address()"
  },
  {
    "label": "ready()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ready()"
  },
  {
    "label": "GetTlsCertPolicy()",
    "kind": "Method",
    "detail": "Function (TlsCertPolicy)",
    "insertText": "GetTlsCertPolicy()"
  },
  {
    "label": "SetTlsCertPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTlsCertPolicy(TlsCertPolicy tls_cert_policy)"
  },
  {
    "label": "SetTurnLoggingId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTurnLoggingId(absl::string_view turn_logging_id)"
  },
  {
    "label": "GetTlsAlpnProtocols()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "GetTlsAlpnProtocols()"
  },
  {
    "label": "GetTlsEllipticCurves()",
    "kind": "Method",
    "detail": "Function (std::vector<std::string>)",
    "insertText": "GetTlsEllipticCurves()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "PrepareAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareAddress()"
  },
  {
    "label": "CreateConnection()",
    "kind": "Method",
    "detail": "Function (Connection*)",
    "insertText": "CreateConnection(const Candidate& c, PortInterface::CandidateOrigin origin)"
  },
  {
    "label": "SendTo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SendTo(const void* data, size_t size, const rtc::SocketAddress& addr, const rtc::PacketOptions& options, bool payload)"
  },
  {
    "label": "SetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SetOption(rtc::Socket::Option opt, int value)"
  },
  {
    "label": "GetOption()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetOption(rtc::Socket::Option opt, int* value)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetError()"
  },
  {
    "label": "HandleIncomingPacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIncomingPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& remote_addr, int64_t packet_time_us)"
  },
  {
    "label": "CanHandleIncomingPacketsFrom()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanHandleIncomingPacketsFrom(const rtc::SocketAddress& addr)"
  },
  {
    "label": "SendBindingErrorResponse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendBindingErrorResponse(StunMessage* message, const rtc::SocketAddress& addr, int error_code, absl::string_view reason)"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket, const char* data, size_t size, const rtc::SocketAddress& remote_addr, const int64_t& packet_time_us)"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(rtc::AsyncPacketSocket* socket, const rtc::SentPacket& sent_packet)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "SupportsProtocol()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsProtocol(absl::string_view protocol)"
  },
  {
    "label": "OnSocketConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketConnect(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "OnSocketClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketClose(rtc::AsyncPacketSocket* socket, int error)"
  },
  {
    "label": "hash()",
    "kind": "Method",
    "detail": "Function (const std::string&)",
    "insertText": "hash()"
  },
  {
    "label": "socket()",
    "kind": "Method",
    "detail": "Function (rtc::AsyncPacketSocket*)",
    "insertText": "socket()"
  },
  {
    "label": "set_credentials()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_credentials(const RelayCredentials& credentials)"
  },
  {
    "label": "SetEntryChannelId()",
    "kind": "Method",
    "detail": "Function (credentials_ = credentials ; } bool)",
    "insertText": "SetEntryChannelId(const rtc::SocketAddress& address, int channel_id)"
  },
  {
    "label": "HandleConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnectionDestroyed(Connection* conn)"
  },
  {
    "label": "CloseForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseForTest()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "CallbacksForTest()",
    "kind": "Method",
    "detail": "Function (} class CallbacksForTest { public : ~)",
    "insertText": "CallbacksForTest()"
  },
  {
    "label": "OnTurnCreatePermissionResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTurnCreatePermissionResult(int code)"
  },
  {
    "label": "OnTurnRefreshResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTurnRefreshResult(int code)"
  },
  {
    "label": "OnTurnPortClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTurnPortClosed()"
  },
  {
    "label": "SetCallbacksForTest()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetCallbacksForTest(CallbacksForTest* callbacks)"
  },
  {
    "label": "TurnPort()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TurnPort(webrtc::TaskQueueBase* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, rtc::AsyncPacketSocket* socket, absl::string_view username, absl::string_view password, const ProtocolAddress& server_address, const RelayCredentials& credentials, int server_priority, const std::vector<std::string>& tls_alpn_protocols, const std::vector<std::string>& tls_elliptic_curves, webrtc::TurnCustomizer* customizer, rtc::SSLCertificateVerifier* tls_cert_verifier = nullptr, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "TurnPort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TurnPort(webrtc::TaskQueueBase* thread, rtc::PacketSocketFactory* factory, const rtc::Network* network, uint16_t min_port, uint16_t max_port, absl::string_view username, absl::string_view password, const ProtocolAddress& server_address, const RelayCredentials& credentials, int server_priority, const std::vector<std::string>& tls_alpn_protocols, const std::vector<std::string>& tls_elliptic_curves, webrtc::TurnCustomizer* customizer, rtc::SSLCertificateVerifier* tls_cert_verifier = nullptr, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "CreateOrRefreshEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrRefreshEntry(Connection* conn, int channel_number)"
  },
  {
    "label": "StunDscpValue()",
    "kind": "Method",
    "detail": "Function (rtc::DiffServCodePoint)",
    "insertText": "StunDscpValue()"
  },
  {
    "label": "AllowedTurnPort()",
    "kind": "Method",
    "detail": "Function (private : typedef std::map<rtc::Socket::Option,int> SocketOptionsMap ; typedef std::set<rtc::SocketAddress> AttemptedServerSet ; bool)",
    "insertText": "AllowedTurnPort(int port, const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "TryAlternateServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryAlternateServer()"
  },
  {
    "label": "CreateTurnClientSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTurnClientSocket()"
  },
  {
    "label": "set_nonce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_nonce(absl::string_view nonce)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (nonce_ =)",
    "insertText": "string(nonce)"
  },
  {
    "label": "set_realm()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_realm(absl::string_view realm)"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (realm_ =)",
    "insertText": "string(realm)"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHash()"
  },
  {
    "label": "OnRefreshError()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnRefreshError()"
  },
  {
    "label": "HandleRefreshError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRefreshError()"
  },
  {
    "label": "SetAlternateServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAlternateServer(const rtc::SocketAddress& address)"
  },
  {
    "label": "ResolveTurnAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveTurnAddress(const rtc::SocketAddress& address)"
  },
  {
    "label": "OnResolveResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolveResult(rtc::AsyncResolverInterface* resolver)"
  },
  {
    "label": "AddRequestAuthInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestAuthInfo(StunMessage* msg)"
  },
  {
    "label": "OnSendStunPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSendStunPacket(const void* data, size_t size, StunRequest* request)"
  },
  {
    "label": "OnStunAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStunAddress(const rtc::SocketAddress& address)"
  },
  {
    "label": "OnAllocateSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocateSuccess(const rtc::SocketAddress& address, const rtc::SocketAddress& stun_address)"
  },
  {
    "label": "OnAllocateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocateError(int error_code, absl::string_view reason)"
  },
  {
    "label": "OnAllocateRequestTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocateRequestTimeout()"
  },
  {
    "label": "HandleDataIndication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDataIndication(const char* data, size_t size, int64_t packet_time_us)"
  },
  {
    "label": "HandleChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleChannelData(int channel_id, const char* data, size_t size, int64_t packet_time_us)"
  },
  {
    "label": "DispatchPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPacket(const char* data, size_t size, const rtc::SocketAddress& remote_addr, ProtocolType proto, int64_t packet_time_us)"
  },
  {
    "label": "ScheduleRefresh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleRefresh(uint32_t lifetime)"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRequest(StunRequest* request, int delay)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* data, size_t size, const rtc::PacketOptions& options)"
  },
  {
    "label": "UpdateNonce()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNonce(StunMessage* response)"
  },
  {
    "label": "ResetNonce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNonce()"
  },
  {
    "label": "HasPermission()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPermission(const rtc::IPAddress& ipaddr)"
  },
  {
    "label": "FindEntry()",
    "kind": "Method",
    "detail": "Function (TurnEntry*)",
    "insertText": "FindEntry(const rtc::SocketAddress& address)"
  },
  {
    "label": "FindEntry()",
    "kind": "Method",
    "detail": "Function (TurnEntry*)",
    "insertText": "FindEntry(int channel_id)"
  },
  {
    "label": "FailAndPruneConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FailAndPruneConnection(const rtc::SocketAddress& address)"
  },
  {
    "label": "ReconstructedServerUrl()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ReconstructedServerUrl()"
  },
  {
    "label": "MaybeAddTurnLoggingId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeAddTurnLoggingId(StunMessage* message)"
  },
  {
    "label": "TurnCustomizerMaybeModifyOutgoingStunMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TurnCustomizerMaybeModifyOutgoingStunMessage(StunMessage* message)"
  },
  {
    "label": "TurnCustomizerAllowChannelData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TurnCustomizerAllowChannelData(const void* data, size_t size, bool payload)"
  }
]