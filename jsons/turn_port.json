[
  {
    "label": "TurnCustomizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnCustomizer"
  },
  {
    "label": "TurnAllocateRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnAllocateRequest"
  },
  {
    "label": "TurnEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnEntry"
  },
  {
    "label": "TurnPort",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnPort"
  },
  {
    "label": "PortState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PortState"
  },
  {
    "label": "CallbacksForTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbacksForTest"
  },
  {
    "label": "TurnEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnEntry"
  },
  {
    "label": "TurnAllocateRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnAllocateRequest"
  },
  {
    "label": "TurnRefreshRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnRefreshRequest"
  },
  {
    "label": "TurnCreatePermissionRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnCreatePermissionRequest"
  },
  {
    "label": "TurnChannelBindRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TurnChannelBindRequest"
  },
  {
    "label": "SetTlsCertPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTlsCertPolicy(TlsCertPolicy tls_cert_policy)"
  },
  {
    "label": "SetTurnLoggingId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTurnLoggingId(absl::string_view turn_logging_id)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "OnReadPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadPacket(rtc::AsyncPacketSocket* socket,\n                            const char* data,\n                            size_t size,\n                            const rtc::SocketAddress& remote_addr,\n                            const int64_t& packet_time_us)"
  },
  {
    "label": "OnReadyToSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReadyToSend(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "OnSocketConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketConnect(rtc::AsyncPacketSocket* socket)"
  },
  {
    "label": "OnSocketClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSocketClose(rtc::AsyncPacketSocket* socket, int error)"
  },
  {
    "label": "OnAllocateMismatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocateMismatch()"
  },
  {
    "label": "SetEntryChannelId()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEntryChannelId(const rtc::SocketAddress& address, int channel_id)"
  },
  {
    "label": "SetCallbacksForTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCallbacksForTest(CallbacksForTest* callbacks)"
  },
  {
    "label": "TurnPort()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "TurnPort(webrtc::TaskQueueBase* thread,\n           rtc::PacketSocketFactory* factory,\n           const rtc::Network* network,\n           rtc::AsyncPacketSocket* socket,\n           absl::string_view username,\n           absl::string_view password,\n           const ProtocolAddress& server_address,\n           const RelayCredentials& credentials,\n           int server_priority,\n           const std::vector<std::string>& tls_alpn_protocols,\n           const std::vector<std::string>& tls_elliptic_curves,\n           webrtc::TurnCustomizer* customizer,\n           rtc::SSLCertificateVerifier* tls_cert_verifier = nullptr,\n           const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "CreateOrRefreshEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateOrRefreshEntry(Connection* conn, int channel_number)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "AllowedTurnPort()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowedTurnPort(int port,\n                              const webrtc::FieldTrialsView* field_trials)"
  },
  {
    "label": "TryAlternateServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryAlternateServer()"
  },
  {
    "label": "CreateTurnClientSocket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateTurnClientSocket()"
  },
  {
    "label": "OnRefreshError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefreshError()"
  },
  {
    "label": "HandleRefreshError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRefreshError()"
  },
  {
    "label": "SetAlternateServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAlternateServer(const rtc::SocketAddress& address)"
  },
  {
    "label": "ResolveTurnAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveTurnAddress(const rtc::SocketAddress& address)"
  },
  {
    "label": "OnResolveResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResolveResult(rtc::AsyncResolverInterface* resolver)"
  },
  {
    "label": "AddRequestAuthInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequestAuthInfo(StunMessage* msg)"
  },
  {
    "label": "OnSendStunPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSendStunPacket(const void* data, size_t size, StunRequest* request)"
  },
  {
    "label": "OnStunAddress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStunAddress(const rtc::SocketAddress& address)"
  },
  {
    "label": "OnAllocateSuccess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocateSuccess(const rtc::SocketAddress& address,\n                         const rtc::SocketAddress& stun_address)"
  },
  {
    "label": "OnAllocateError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocateError(int error_code, absl::string_view reason)"
  },
  {
    "label": "OnAllocateRequestTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAllocateRequestTimeout()"
  },
  {
    "label": "HandleDataIndication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDataIndication(const char* data,\n                            size_t size,\n                            int64_t packet_time_us)"
  },
  {
    "label": "HandleChannelData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleChannelData(int channel_id,\n                         const char* data,\n                         size_t size,\n                         int64_t packet_time_us)"
  },
  {
    "label": "DispatchPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchPacket(const char* data,\n                      size_t size,\n                      const rtc::SocketAddress& remote_addr,\n                      ProtocolType proto,\n                      int64_t packet_time_us)"
  },
  {
    "label": "ScheduleRefresh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScheduleRefresh(uint32_t lifetime)"
  },
  {
    "label": "SendRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendRequest(StunRequest* request, int delay)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Send(const void* data, size_t size, const rtc::PacketOptions& options)"
  },
  {
    "label": "UpdateHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHash()"
  },
  {
    "label": "UpdateNonce()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateNonce(StunMessage* response)"
  },
  {
    "label": "ResetNonce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetNonce()"
  },
  {
    "label": "FailAndPruneConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FailAndPruneConnection(const rtc::SocketAddress& address)"
  },
  {
    "label": "ReconstructedServerUrl()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ReconstructedServerUrl()"
  },
  {
    "label": "MaybeAddTurnLoggingId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeAddTurnLoggingId(StunMessage* message)"
  },
  {
    "label": "TurnCustomizerMaybeModifyOutgoingStunMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TurnCustomizerMaybeModifyOutgoingStunMessage(StunMessage* message)"
  },
  {
    "label": "TurnCustomizerAllowChannelData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TurnCustomizerAllowChannelData(const void* data,\n                                      size_t size,\n                                      bool payload)"
  }
]