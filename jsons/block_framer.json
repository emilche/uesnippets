[
  {
    "label": "BlockFramer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockFramer"
  },
  {
    "label": "BlockFramer()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_BLOCK_FRAMER_H_ # define MODULES_AUDIO_PROCESSING_AEC3_BLOCK_FRAMER_H_ # include<vector> # include \" api / array_view . h \" # include \" modules / audio_processing / aec3 / aec3_common . h \" # include \" modules / audio_processing / aec3 / block . h \" namespace webrtc { class BlockFramer { public :)",
    "insertText": "BlockFramer(size_t num_bands, size_t num_channels)"
  },
  {
    "label": "BlockFramer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BlockFramer()"
  },
  {
    "label": "BlockFramer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockFramer(const BlockFramer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (BlockFramer&)",
    "insertText": "operator(const BlockFramer&)"
  },
  {
    "label": "InsertBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertBlock(const Block& block)"
  },
  {
    "label": "InsertBlockAndExtractSubFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertBlockAndExtractSubFrame(const Block& block, std::vector<std::vector<rtc::ArrayView<float>>>* sub_frame)"
  }
]