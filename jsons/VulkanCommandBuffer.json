[
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanCommandBufferPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandBufferPool"
  },
  {
    "label": "FVulkanCommandBufferManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCommandBufferManager"
  },
  {
    "label": "FVulkanRenderTargetLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderTargetLayout"
  },
  {
    "label": "FVulkanQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanQueue"
  },
  {
    "label": "FVulkanDescriptorPoolSetContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorPoolSetContainer"
  },
  {
    "label": "FVulkanGPUTiming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGPUTiming"
  },
  {
    "label": "FFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFence"
  },
  {
    "label": "FSemaphore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSemaphore"
  },
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVulkanRenderPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderPass"
  },
  {
    "label": "FVulkanFramebuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanFramebuffer"
  },
  {
    "label": "FVulkanDescriptorSetsLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDescriptorSetsLayout"
  },
  {
    "label": "PendingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PendingQuery"
  },
  {
    "label": "FVulkanTypedDescriptorPoolSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanTypedDescriptorPoolSet"
  },
  {
    "label": "FVulkanDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDynamicRHI"
  },
  {
    "label": "FVulkanLayoutManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanLayoutManager"
  },
  {
    "label": "FQueryPoolReset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueryPoolReset"
  },
  {
    "label": "FVulkanCmdBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VulkanConfiguration . h \" # include \" VulkanBarriers . h \" int32 GVulkanProfileCmdBuffers ; int32 GVulkanUseCmdBufferTimingForGPUTime ; class FVulkanDevice ; class FVulkanCommandBufferPool ; class FVulkanCommandBufferManager ; class FVulkanRenderTargetLayout ; class FVulkanQueue ; class FVulkanDescriptorPoolSetContainer ; class FVulkanGPUTiming ; namespace VulkanRHI { class FFence ; class FSemaphore ; } class FVulkanCmdBuffer { protected : class FVulkanCommandBufferManager ; class FVulkanCommandBufferPool ; class FVulkanQueue ;)",
    "insertText": "FVulkanCmdBuffer(FVulkanDevice* InDevice, FVulkanCommandBufferPool* InCommandBufferPool, bool bInIsUploadOnly)"
  },
  {
    "label": "FVulkanCmdBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanCmdBuffer()"
  },
  {
    "label": "GetOwner()",
    "kind": "Method",
    "detail": "Function (public : FVulkanCommandBufferPool*)",
    "insertText": "GetOwner()"
  },
  {
    "label": "AddWaitSemaphore()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "AddWaitSemaphore(VkPipelineStageFlags InWaitFlags, VulkanRHI::FSemaphore* InWaitSemaphore)"
  },
  {
    "label": "AddWaitSemaphore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWaitSemaphore(InWaitFlags, MakeArrayView<VulkanRHI::FSemaphore*>(&InWaitSemaphore, 1))"
  },
  {
    "label": "AddWaitSemaphore()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddWaitSemaphore(VkPipelineStageFlags InWaitFlags, TArrayView<VulkanRHI::FSemaphore*> InWaitSemaphores)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "End()"
  },
  {
    "label": "BeginRenderPass()",
    "kind": "Method",
    "detail": "Function (enum class EState : uint8 { ReadyForBegin,IsInsideBegin,IsInsideRenderPass,HasEnded,Submitted,NotAllocated,NeedReset,} ; TArray<VkViewport,TInlineAllocator<2>> CurrentViewports ; TArray<VkRect2D,TInlineAllocator<2>> CurrentScissors ; uint32 CurrentStencilRef ; EState State ; uint8 bNeedsDynamicStateSet : 1 ; uint8 bHasPipeline : 1 ; uint8 bHasViewport : 1 ; uint8 bHasScissor : 1 ; uint8 bHasStencilRef : 1 ; uint8 bIsUploadOnly : 1 ; uint8 bIsUniformBufferBarrierAdded : 1 ; void)",
    "insertText": "BeginRenderPass(const FVulkanRenderTargetLayout& Layout, class FVulkanRenderPass* RenderPass, class FVulkanFramebuffer* Framebuffer, const VkClearValue* AttachmentClearValues)"
  },
  {
    "label": "EndRenderPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndRenderPass()"
  },
  {
    "label": "BeginUniformUpdateBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginUniformUpdateBarrier()"
  },
  {
    "label": "EndUniformUpdateBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndUniformUpdateBarrier()"
  },
  {
    "label": "AcquirePoolSetAndDescriptorsIfNeeded()",
    "kind": "Method",
    "detail": "Function (FVulkanDescriptorPoolSetContainer* CurrentDescriptorPoolSetContainer = nullptr ; bool)",
    "insertText": "AcquirePoolSetAndDescriptorsIfNeeded(const class FVulkanDescriptorSetsLayout& Layout, bool bNeedDescriptors, VkDescriptorSet* OutDescriptors)"
  },
  {
    "label": "AddPendingTimestampQuery()",
    "kind": "Method",
    "detail": "Function (struct PendingQuery { uint64 Index ; uint64 Count ; VkBuffer BufferHandle ; VkQueryPool PoolHandle ; bool bBlocking ; } ; void)",
    "insertText": "AddPendingTimestampQuery(uint64 Index, uint64 Count, VkQueryPool PoolHandle, VkBuffer BufferHandle, bool bBlocking)"
  },
  {
    "label": "MarkSemaphoresAsSubmitted()",
    "kind": "Method",
    "detail": "Function (private : FVulkanDevice* Device ; VkCommandBuffer CommandBufferHandle ; double SubmittedTime = 0 . 0 f ; TArray<VkPipelineStageFlags> WaitFlags ; TArray<VulkanRHI::FSemaphore*> WaitSemaphores ; TArray<VulkanRHI::FSemaphore*> SubmittedWaitSemaphores ; TArray<PendingQuery> PendingTimestampQueries ; void)",
    "insertText": "MarkSemaphoresAsSubmitted()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (WaitFlags .)",
    "insertText": "Reset()"
  },
  {
    "label": "RefreshFenceStatus()",
    "kind": "Method",
    "detail": "Function (} VulkanRHI::FFence* Fence ; volatile uint64 FenceSignaledCounter ; volatile uint64 SubmittedFenceCounter ; void)",
    "insertText": "RefreshFenceStatus()"
  },
  {
    "label": "InitializeTimings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTimings(FVulkanCommandListContext* InContext)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVulkanCommandBufferPool* CommandBufferPool ; #)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0)"
  },
  {
    "label": "AcquirePoolSetContainer()",
    "kind": "Method",
    "detail": "Function (# endif uint64 LastValidTiming ; void)",
    "insertText": "AcquirePoolSetContainer()"
  },
  {
    "label": "AllocMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocMemory()"
  },
  {
    "label": "FreeMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeMemory()"
  },
  {
    "label": "FVulkanCommandBufferPool()",
    "kind": "Method",
    "detail": "Function (FVulkanLayoutManager LayoutManager ; public : TMap<uint32,class FVulkanTypedDescriptorPoolSet*> TypedDescriptorPoolSets ; class FVulkanDynamicRHI ; class FVulkanLayoutManager ; } ; class FVulkanCommandBufferPool { public :)",
    "insertText": "FVulkanCommandBufferPool(FVulkanDevice* InDevice, FVulkanCommandBufferManager& InMgr)"
  },
  {
    "label": "FVulkanCommandBufferPool()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanCommandBufferPool()"
  },
  {
    "label": "RefreshFenceStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshFenceStatus(FVulkanCmdBuffer* SkipCmdBuffer = nullptr)"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (VkCommandPool)",
    "insertText": "GetHandle()"
  },
  {
    "label": "GetMgr()",
    "kind": "Method",
    "detail": "Function (FVulkanCommandBufferManager&)",
    "insertText": "GetMgr()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Create(uint32 QueueFamilyIndex)"
  },
  {
    "label": "FVulkanCommandBufferManager()",
    "kind": "Method",
    "detail": "Function (class FVulkanCommandBufferManager ; } ; class FVulkanCommandBufferManager { public :)",
    "insertText": "FVulkanCommandBufferManager(FVulkanDevice* InDevice, FVulkanCommandListContext* InContext)"
  },
  {
    "label": "FVulkanCommandBufferManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVulkanCommandBufferManager()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FVulkanCommandListContext* InContext)"
  },
  {
    "label": "GetActiveCmdBuffer()",
    "kind": "Method",
    "detail": "Function (FVulkanCmdBuffer*)",
    "insertText": "GetActiveCmdBuffer()"
  },
  {
    "label": "SubmitUploadCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitUploadCmdBuffer()"
  },
  {
    "label": "GetActiveCmdBufferDirect()",
    "kind": "Method",
    "detail": "Function (} return ActiveCmdBuffer ; } FVulkanCmdBuffer*)",
    "insertText": "GetActiveCmdBufferDirect()"
  },
  {
    "label": "SubmitUploadCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitUploadCmdBuffer(uint32 NumSignalSemaphores = 0, VkSemaphore* SignalSemaphores = nullptr)"
  },
  {
    "label": "SubmitActiveCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitActiveCmdBuffer(TArrayView<VulkanRHI::FSemaphore*> SignalSemaphores)"
  },
  {
    "label": "SubmitActiveCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitActiveCmdBuffer()"
  },
  {
    "label": "SubmitActiveCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitActiveCmdBuffer(MakeArrayView<VulkanRHI::FSemaphore*>(nullptr, 0))"
  },
  {
    "label": "SubmitActiveCmdBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubmitActiveCmdBuffer(VulkanRHI::FSemaphore* SignalSemaphore)"
  },
  {
    "label": "SubmitActiveCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitActiveCmdBuffer(MakeArrayView<VulkanRHI::FSemaphore*>(&SignalSemaphore, 1))"
  },
  {
    "label": "SubmitActiveCmdBufferFromPresent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SubmitActiveCmdBufferFromPresent(VulkanRHI::FSemaphore* SignalSemaphore = nullptr)"
  },
  {
    "label": "WaitForCmdBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCmdBuffer(FVulkanCmdBuffer* CmdBuffer, float TimeInSecondsToWait = 10.0f)"
  },
  {
    "label": "AddQueryPoolForReset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddQueryPoolForReset(VkQueryPool Pool, uint32 Size)"
  },
  {
    "label": "FlushResetQueryPools()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushResetQueryPools()"
  },
  {
    "label": "RefreshFenceStatus()",
    "kind": "Method",
    "detail": "Function (Pool .)",
    "insertText": "RefreshFenceStatus(SkipCmdBuffer)"
  },
  {
    "label": "PrepareForNewActiveCommandBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrepareForNewActiveCommandBuffer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} #)",
    "insertText": "if(RHI_NEW_GPU_PROFILER == 0) uint32 CalculateGPUTime()"
  },
  {
    "label": "FreeUnusedCmdBuffers()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "FreeUnusedCmdBuffers(bool bTrimMemory)"
  },
  {
    "label": "GetCommandListContext()",
    "kind": "Method",
    "detail": "Function (FVulkanCommandListContext*)",
    "insertText": "GetCommandListContext()"
  },
  {
    "label": "GetLayoutManager()",
    "kind": "Method",
    "detail": "Function (UploadCmdBuffer ->)",
    "insertText": "GetLayoutManager().NotifyDeletedImage(Image)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ActiveCmdBuffer)"
  }
]