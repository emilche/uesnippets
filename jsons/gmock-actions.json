[
  {
    "label": "BuiltInDefaultValueGetter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BuiltInDefaultValueGetter"
  },
  {
    "label": "BuiltInDefaultValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BuiltInDefaultValue"
  },
  {
    "label": "DefaultValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultValue"
  },
  {
    "label": "ValueProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueProducer"
  },
  {
    "label": "FixedValueProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FixedValueProducer"
  },
  {
    "label": "FactoryValueProducer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FactoryValueProducer"
  },
  {
    "label": "ActionInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActionInterface"
  },
  {
    "label": "Action",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Action"
  },
  {
    "label": "ActionAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ActionAdapter"
  },
  {
    "label": "PolymorphicAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PolymorphicAction"
  },
  {
    "label": "MonomorphicImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MonomorphicImpl"
  },
  {
    "label": "ByMoveWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ByMoveWrapper"
  },
  {
    "label": "ReturnAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnAction"
  },
  {
    "label": "Impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Impl"
  },
  {
    "label": "ReturnNullAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnNullAction"
  },
  {
    "label": "ReturnVoidAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnVoidAction"
  },
  {
    "label": "ReturnRefAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnRefAction"
  },
  {
    "label": "ReturnRefOfCopyAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnRefOfCopyAction"
  },
  {
    "label": "DoDefaultAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DoDefaultAction"
  },
  {
    "label": "AssignAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssignAction"
  },
  {
    "label": "SetErrnoAndReturnAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SetErrnoAndReturnAction"
  },
  {
    "label": "SetArgumentPointeeAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SetArgumentPointeeAction"
  },
  {
    "label": "Class",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Class"
  },
  {
    "label": "InvokeMethodAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InvokeMethodAction"
  },
  {
    "label": "InvokeWithoutArgsAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InvokeWithoutArgsAction"
  },
  {
    "label": "InvokeMethodWithoutArgsAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InvokeMethodWithoutArgsAction"
  },
  {
    "label": "IgnoreResultAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IgnoreResultAction"
  },
  {
    "label": "WithArgsAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "WithArgsAction"
  },
  {
    "label": "DoAllAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DoAllAction"
  },
  {
    "label": "Op",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Op"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_ACTIONS_H_ # ifndef _WIN32_WCE # include<errno . h> # endif # include<algorithm> # include<functional> # include<memory> # include<string> # include<type_traits> # include<utility> # include \" gmock / internal / gmock - internal - utils . h \" # include \" gmock / internal / gmock - port . h \" # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) # pragma warning(disable:4100)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<T,bool kDefaultConstructible> struct BuiltInDefaultValueGetter { T)",
    "insertText": "Get()"
  },
  {
    "label": "Assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Assert(false, __FILE__, __LINE__, \"Default action undefined for the function return type.\")"
  },
  {
    "label": "Exists()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class BuiltInDefaultValue { public : bool)",
    "insertText": "Exists()"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(::std::string, \"\")"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(bool, false)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(unsigned char, '\\0')"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(signed char, '\\0')"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(char, '\\0')"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (# if GMOCK_WCHAR_T_IS_NATIVE_)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(wchar_t, 0U)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(unsigned short, 0U)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(signed short, 0)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(unsigned int, 0U)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(signed int, 0)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(unsigned long, 0UL)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(signed long, 0L)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(UInt64, 0)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(Int64, 0)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(float, 0)"
  },
  {
    "label": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_(double, 0)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (# undef GMOCK_DEFINE_DEFAULT_ACTION_FOR_RETURN_TYPE_ } template<T> class DefaultValue { public : void)",
    "insertText": "Set(T x)"
  },
  {
    "label": "FixedValueProducer()",
    "kind": "Method",
    "detail": "Function (delete producer_ ; producer_ = new)",
    "insertText": "FixedValueProducer(x)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} typedef)",
    "insertText": "T(*FactoryFunction)()"
  },
  {
    "label": "SetFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFactory(FactoryFunction factory)"
  },
  {
    "label": "FactoryValueProducer()",
    "kind": "Method",
    "detail": "Function (delete producer_ ; producer_ = new)",
    "insertText": "FactoryValueProducer(factory)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (delete producer_ ; producer_ = nullptr ; } bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "ValueProducer()",
    "kind": "Method",
    "detail": "Function (} private : class ValueProducer { public : ~)",
    "insertText": "ValueProducer()"
  },
  {
    "label": "Produce()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "Produce()"
  },
  {
    "label": "FixedValueProducer()",
    "kind": "Method",
    "detail": "Function (} ; class FixedValueProducer : public ValueProducer { public :)",
    "insertText": "FixedValueProducer(T value) : value_(value)"
  },
  {
    "label": "FactoryValueProducer()",
    "kind": "Method",
    "detail": "Function (} ; class FactoryValueProducer : public ValueProducer { public :)",
    "insertText": "FactoryValueProducer(FactoryFunction factory) : factory_(factory)"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private : const FactoryFunction factory_ ;)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(FactoryValueProducer)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} ; ValueProducer* producer_ ; } ; template<T> class DefaultValue<T&> { public : void)",
    "insertText": "Set(T& x)"
  },
  {
    "label": "ActionInterface()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> DefaultValue<T>::ValueProducer* DefaultValue<T>::producer_ = nullptr ; template<T> T* DefaultValue<T&>::address_ = nullptr ; template<F> class ActionInterface { public : typedef internal::Function<F>::Result Result ; typedef internal::Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "ActionInterface()"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} Result)",
    "insertText": "Perform(const ArgumentTuple& args)"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(ActionInterface)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<F> class Action { struct ActionAdapter {::std::shared_ptr<ActionInterface<F>> impl_ ; template<. . . Args> internal::Function<F>::Result)",
    "insertText": "operator()(Args&&... args)"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (} } ; public : typedef internal::Function<F>::Result Result ; typedef internal::Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "Action()"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (} template<G,=::std::enable_if<::std::is_constructible<::std::function<F>,G>::value>::type>)",
    "insertText": "Action(G&& fun) : fun_(::std::forward<G>(fun))"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Action(ActionInterface<F>* impl) : fun_(ActionAdapter{::std::shared_ptr<ActionInterface<F>>(impl)})"
  },
  {
    "label": "Action()",
    "kind": "Method",
    "detail": "Function (} template<Func>)",
    "insertText": "Action(const Action<Func>& action) : fun_(action.fun_)"
  },
  {
    "label": "IsDoDefault()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDoDefault()"
  },
  {
    "label": "IllegalDoDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IllegalDoDefault(__FILE__, __LINE__)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Apply(fun_, ::std::move(args))"
  },
  {
    "label": "PolymorphicAction()",
    "kind": "Method",
    "detail": "Function (} private : template<G> class Action ;::std::function<F> fun_ ; } ; template<Impl> class PolymorphicAction { public :)",
    "insertText": "PolymorphicAction(const Impl& impl) : impl_(impl)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} template<F> operator Action<)",
    "insertText": "F()"
  },
  {
    "label": "MonomorphicImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<F> class MonomorphicImpl : public ActionInterface<F> { public : typedef internal::Function<F>::Result Result ; typedef internal::Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "MonomorphicImpl(const Impl& impl) : impl_(impl)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private : Impl impl_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(MonomorphicImpl)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} ; Impl impl_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(PolymorphicAction)"
  },
  {
    "label": "MakeAction()",
    "kind": "Method",
    "detail": "Function (} ; template<F> Action<F>)",
    "insertText": "MakeAction(ActionInterface<F>* impl)"
  },
  {
    "label": "MakePolymorphicAction()",
    "kind": "Method",
    "detail": "Function (} template<Impl> PolymorphicAction<Impl>)",
    "insertText": "MakePolymorphicAction(const Impl& impl)"
  },
  {
    "label": "ByMoveWrapper()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<T> struct ByMoveWrapper {)",
    "insertText": "ByMoveWrapper(T value) : payload(std::move(value))"
  },
  {
    "label": "ReturnAction()",
    "kind": "Method",
    "detail": "Function (} T payload ; } ; template<R> class ReturnAction { public :)",
    "insertText": "ReturnAction(R value) : value_(new R(std::move(value)))"
  },
  {
    "label": "GTEST_COMPILE_ASSERT_()",
    "kind": "Method",
    "detail": "Function (typedef Function<F>::Result Result ;)",
    "insertText": "GTEST_COMPILE_ASSERT_(!std::is_reference<Result>::value, use_ReturnRef_instead_of_Return_to_return_a_reference)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} private : template<R_,F> class Impl : public ActionInterface<F> { public : typedef Function<F>::Result Result ; typedef Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "Impl(const std::shared_ptr<R>& value) : value_before_cast_(*value), value_(ImplicitCast_<Result>(value_before_cast_))"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (} Result)",
    "insertText": "Perform(const ArgumentTuple&)"
  },
  {
    "label": "GTEST_DISALLOW_COPY_AND_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (R value_before_cast_ ; Result value_ ;)",
    "insertText": "GTEST_DISALLOW_COPY_AND_ASSIGN_(Impl)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} ; template<R_,F> class Impl<ByMoveWrapper<R_>,F> : public ActionInterface<F> { public : typedef Function<F>::Result Result ; typedef Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "Impl(const std::shared_ptr<R>& wrapper) : performed_(false), wrapper_(wrapper)"
  },
  {
    "label": "GTEST_CHECK_()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GTEST_CHECK_(!performed_) << \"A ByMove()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (performed_ = true ; return)",
    "insertText": "move(wrapper_->payload)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} private : bool performed_ ; const std::shared_ptr<R> wrapper_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(Impl)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} ; const std::shared_ptr<R> value_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(ReturnAction)"
  },
  {
    "label": "ReturnRefAction()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> class ReturnRefAction { public :)",
    "insertText": "ReturnRefAction(T& ref) : ref_(ref)"
  },
  {
    "label": "GTEST_COMPILE_ASSERT_()",
    "kind": "Method",
    "detail": "Function (typedef Function<F>::Result Result ;)",
    "insertText": "GTEST_COMPILE_ASSERT_(std::is_reference<Result>::value, use_Return_instead_of_ReturnRef_to_return_a_value)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} private : template<F> class Impl : public ActionInterface<F> { public : typedef Function<F>::Result Result ; typedef Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "Impl(T& ref) : ref_(ref)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} ; T& ref_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(ReturnRefAction)"
  },
  {
    "label": "ReturnRefOfCopyAction()",
    "kind": "Method",
    "detail": "Function (} ; template<T> class ReturnRefOfCopyAction { public :)",
    "insertText": "ReturnRefOfCopyAction(const T& value) : value_(value)"
  },
  {
    "label": "GTEST_COMPILE_ASSERT_()",
    "kind": "Method",
    "detail": "Function (typedef Function<F>::Result Result ;)",
    "insertText": "GTEST_COMPILE_ASSERT_(std::is_reference<Result>::value, use_Return_instead_of_ReturnRefOfCopy_to_return_a_value)"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} private : template<F> class Impl : public ActionInterface<F> { public : typedef Function<F>::Result Result ; typedef Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "Impl(const T& value) : value_(value)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} ; const T value_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(ReturnRefOfCopyAction)"
  },
  {
    "label": "AssignAction()",
    "kind": "Method",
    "detail": "Function (} } ; template<T1,T2> class AssignAction { public :)",
    "insertText": "AssignAction(T1* ptr, T2 value) : ptr_(ptr), value_(value)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (* ptr_ = value_ ; } private : T1* const ptr_ ; const T2 value_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(AssignAction)"
  },
  {
    "label": "SetErrnoAndReturnAction()",
    "kind": "Method",
    "detail": "Function (} ; # if ! GTEST_OS_WINDOWS_MOBILE template<T> class SetErrnoAndReturnAction { public :)",
    "insertText": "SetErrnoAndReturnAction(int errno_value, T result) : errno_(errno_value), result_(result)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (errno = errno_ ; return result_ ; } private : const int errno_ ; const T result_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(SetErrnoAndReturnAction)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; # endif template<size_t N,A,= void> struct SetArgumentPointeeAction { A value ; template<. . . Args> void)",
    "insertText": "operator()(const Args&... args)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (*::std::get<)",
    "insertText": "N(std::tie(args...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class Class,MethodPtr> struct InvokeMethodAction { Class* const obj_ptr ; const MethodPtr method_ptr ; template<. . . Args> auto)",
    "insertText": "operator()(Args&&... args) const -> decltype((obj_ptr->*method_ptr)(std::forward<Args>(args)...))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<FunctionImpl> struct InvokeWithoutArgsAction { FunctionImpl function_impl ; template<. . . Args> auto)",
    "insertText": "operator()(const Args&...) -> decltype(function_impl())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class Class,MethodPtr> struct InvokeMethodWithoutArgsAction { Class* const obj_ptr ; const MethodPtr method_ptr ; using ReturnType = std::invoke_result_t<MethodPtr,Class*> ; template<. . . Args> ReturnType)",
    "insertText": "operator()(const Args&...)"
  },
  {
    "label": "IgnoreResultAction()",
    "kind": "Method",
    "detail": "Function (} } ; template<A> class IgnoreResultAction { public :)",
    "insertText": "IgnoreResultAction(const A& action) : action_(action)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (typedef internal::Function<F>::Result Result ;)",
    "insertText": "static_assert(std::is_void<Result>::value, \"Result type should be void.\")"
  },
  {
    "label": "Impl()",
    "kind": "Method",
    "detail": "Function (} private : template<F> class Impl : public ActionInterface<F> { public : typedef internal::Function<F>::Result Result ; typedef internal::Function<F>::ArgumentTuple ArgumentTuple ;)",
    "insertText": "Impl(const A& action) : action_(action)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (action_ .)",
    "insertText": "Perform(args)"
  },
  {
    "label": "GTEST_DISALLOW_ASSIGN_()",
    "kind": "Method",
    "detail": "Function (} ; const A action_ ;)",
    "insertText": "GTEST_DISALLOW_ASSIGN_(IgnoreResultAction)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<InnerAction,size_t . . . I> struct WithArgsAction { InnerAction action ; template<R,. . . Args> operator Action<)",
    "insertText": "R(Args...)>()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (Action<)",
    "insertText": "R(typename std::tuple_element<I, std::tuple<Args...>>::type...)> converted(action)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; } } ; template<. . . Actions> struct DoAllAction { private : template<. . . Args,size_t . . . I> std::vector<Action<)",
    "insertText": "void(Args...)>> Convert(IndexSequence<I...>)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct Op { std::vector<Action<)",
    "insertText": "void(Args...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (Action<)",
    "insertText": "R(Args...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (R)",
    "insertText": "operator()(Args... args)"
  },
  {
    "label": "forward_as_tuple()",
    "kind": "Method",
    "detail": "Function (auto tuple_args =)",
    "insertText": "forward_as_tuple(std::forward<Args>(args)...)"
  },
  {
    "label": "Perform()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "Perform(tuple_args)"
  },
  {
    "label": "Args()",
    "kind": "Method",
    "detail": "Function (} } ; return Op { Convert<)",
    "insertText": "Args(MakeIndexSequence<sizeof...(Actions) - 1>()), std::get<sizeof...(Actions) - 1>(actions)"
  },
  {
    "label": "DoAll()",
    "kind": "Method",
    "detail": "Function (} } ; } typedef internal::IgnoredValue Unused ; template<. . . Action> internal::DoAllAction<std::decay<Action>::type . . .>)",
    "insertText": "DoAll(Action&&... action)"
  },
  {
    "label": "WithArg()",
    "kind": "Method",
    "detail": "Function (} template<size_t k,InnerAction> internal::WithArgsAction<std::decay<InnerAction>::type,k>)",
    "insertText": "WithArg(InnerAction&& action)"
  },
  {
    "label": "WithArgs()",
    "kind": "Method",
    "detail": "Function (} template<size_t k,size_t . . . ks,InnerAction> internal::WithArgsAction<std::decay<InnerAction>::type,k,ks . . .>)",
    "insertText": "WithArgs(InnerAction&& action)"
  },
  {
    "label": "WithoutArgs()",
    "kind": "Method",
    "detail": "Function (} template<InnerAction> internal::WithArgsAction<std::decay<InnerAction>::type>)",
    "insertText": "WithoutArgs(InnerAction&& action)"
  },
  {
    "label": "Return()",
    "kind": "Method",
    "detail": "Function (} template<R> internal::ReturnAction<R>)",
    "insertText": "Return(R value)"
  },
  {
    "label": "ReturnNull()",
    "kind": "Method",
    "detail": "Function (} PolymorphicAction<internal::ReturnNullAction>)",
    "insertText": "ReturnNull()"
  },
  {
    "label": "Return()",
    "kind": "Method",
    "detail": "Function (} PolymorphicAction<internal::ReturnVoidAction>)",
    "insertText": "Return()"
  },
  {
    "label": "ReturnRef()",
    "kind": "Method",
    "detail": "Function (} template<R> internal::ReturnRefAction<R>)",
    "insertText": "ReturnRef(R& x)"
  },
  {
    "label": "ReturnRefOfCopy()",
    "kind": "Method",
    "detail": "Function (} template<R> internal::ReturnRefOfCopyAction<R>)",
    "insertText": "ReturnRefOfCopy(const R& x)"
  },
  {
    "label": "ByMove()",
    "kind": "Method",
    "detail": "Function (} template<R> internal::ByMoveWrapper<R>)",
    "insertText": "ByMove(R x)"
  },
  {
    "label": "DoDefault()",
    "kind": "Method",
    "detail": "Function (} internal::DoDefaultAction)",
    "insertText": "DoDefault()"
  },
  {
    "label": "SetArgPointee()",
    "kind": "Method",
    "detail": "Function (} template<size_t N,T> internal::SetArgumentPointeeAction<N,T>)",
    "insertText": "SetArgPointee(T x)"
  },
  {
    "label": "SetArgumentPointee()",
    "kind": "Method",
    "detail": "Function (} template<size_t N,T> internal::SetArgumentPointeeAction<N,T>)",
    "insertText": "SetArgumentPointee(T x)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} template<T1,T2> PolymorphicAction<internal::AssignAction<T1,T2>>)",
    "insertText": "Assign(T1* ptr, T2 val)"
  },
  {
    "label": "SetErrnoAndReturn()",
    "kind": "Method",
    "detail": "Function (} # if ! GTEST_OS_WINDOWS_MOBILE template<T> PolymorphicAction<internal::SetErrnoAndReturnAction<T>>)",
    "insertText": "SetErrnoAndReturn(int errval, T result)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} # endif template<FunctionImpl> std::decay<FunctionImpl>::type)",
    "insertText": "Invoke(FunctionImpl&& function_impl)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (} template<class Class,MethodPtr> internal::InvokeMethodAction<Class,MethodPtr>)",
    "insertText": "Invoke(Class* obj_ptr, MethodPtr method_ptr)"
  },
  {
    "label": "InvokeWithoutArgs()",
    "kind": "Method",
    "detail": "Function (} template<class Class,MethodPtr> internal::InvokeMethodWithoutArgsAction<Class,MethodPtr>)",
    "insertText": "InvokeWithoutArgs(Class* obj_ptr, MethodPtr method_ptr)"
  },
  {
    "label": "ByRef()",
    "kind": "Method",
    "detail": "Function (} template<T>::std::reference_wrapper<T>)",
    "insertText": "ByRef(T& l_value)"
  }
]