[
  {
    "label": "TPullPhysicsStateDispatchHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPullPhysicsStateDispatchHelper"
  },
  {
    "label": "FDispatcher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDispatcher"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / GCObject . h \" # include \" Chaos / Framework / PhysicsSolverBase . h \" # include \" Chaos / PullPhysicsDataImp . h \" # include \" PhysicsProxy / CharacterGroundConstraintProxy . h \" # include \" PhysicsProxy / ClusterUnionPhysicsProxy . h \" # include \" PhysicsProxy / SingleParticlePhysicsProxy . h \" # include \" PhysicsProxy / GeometryCollectionPhysicsProxy . h \" # include \" PhysicsProxy / JointConstraintProxy . h \" # include \" Chaos / Framework / ChaosResultsManager . h \" # include<type_traits> namespace Chaos { namespace Private { template<TDispatcher> struct TPullPhysicsStateDispatchHelper { template<TProxy> void)",
    "insertText": "Apply(TDispatcher& Dispatcher, TProxy* Proxy)"
  },
  {
    "label": "Dispatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dispatcher(Proxy)"
  },
  {
    "label": "PullPhysicsStateForEachDirtyProxy_External()",
    "kind": "Method",
    "detail": "Function (} } } ; } template<TDispatcher> void)",
    "insertText": "PullPhysicsStateForEachDirtyProxy_External(TDispatcher& Dispatcher)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace Chaos ; FPullPhysicsData* LatestData = nullptr ;)",
    "insertText": "if(IsUsingAsyncResults() && UseAsyncInterpolation)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_AsyncInterpolateResults)"
  },
  {
    "label": "GetPhysicsResultsTime_External()",
    "kind": "Method",
    "detail": "Function (const FReal ResultsTime =)",
    "insertText": "GetPhysicsResultsTime_External()"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (TArray<const FChaosInterpolationResults*> ResultsPerChannel ; {)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_AsyncPullResults)"
  },
  {
    "label": "PullAsyncPhysicsResults_External()",
    "kind": "Method",
    "detail": "Function (ResultsPerChannel = PullResultsManager ->)",
    "insertText": "PullAsyncPhysicsResults_External(ResultsTime)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 ChannelIdx = 0; ChannelIdx < ResultsPerChannel.Num(); ++ChannelIdx)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (const FChaosInterpolationResults& Results =* ResultsPerChannel [ ChannelIdx ] ; LatestData = Results . Next ; const int32 SolverTimestamp = Results . Next ? Results . Next -> SolverTimestamp : INDEX_NONE ; {)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ProcessSingleProxy)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const FDirtyRigidParticleReplicationErrorData* ErrorData = LatestData -> DirtyRigidErrors .)",
    "insertText": "Find(Proxy)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (Private::TPullPhysicsStateDispatchHelper<TDispatcher)",
    "insertText": "Apply(Dispatcher, Proxy)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} LatestData -> DirtyRigidErrors .)",
    "insertText": "Remove(Proxy)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (} } } {)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ProcessGCProxy)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (} } } {)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_ProcessClusterUnionProxy) for(const FChaosClusterUnionInterpolationData& ClusterInterp : Results.ClusterUnionInterpolations)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (} } } } } else {)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_SyncPullResults)"
  },
  {
    "label": "PullSyncPhysicsResults_External()",
    "kind": "Method",
    "detail": "Function (const FChaosInterpolationResults& Results = PullResultsManager ->)",
    "insertText": "PullSyncPhysicsResults_External()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "if(LatestData)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_PullConstraints)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 SyncTimestamp = LatestData -> SolverTimestamp ;)",
    "insertText": "for(const FDirtyJointConstraintData& DirtyData : LatestData->DirtyJointConstraints)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } } LatestData -> DirtyJointConstraints .)",
    "insertText": "Reset()"
  },
  {
    "label": "PullFromPhysicsState()",
    "kind": "Method",
    "detail": "Function (Proxy ->)",
    "insertText": "PullFromPhysicsState(DirtyData, SyncTimestamp)"
  },
  {
    "label": "PullPhysicsStateForEachDirtyProxy_External()",
    "kind": "Method",
    "detail": "Function (} } template<RigidLambda,ConstraintLambda,GeometryCollectionLambda> void)",
    "insertText": "PullPhysicsStateForEachDirtyProxy_External(const RigidLambda& RigidFunc, const ConstraintLambda& ConstraintFunc, const GeometryCollectionLambda& GeometryCollectionFunc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FDispatcher { void)",
    "insertText": "operator()(FSingleParticlePhysicsProxy* Proxy)"
  },
  {
    "label": "RigidFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RigidFunc(Proxy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(FJointConstraintPhysicsProxy* Proxy)"
  },
  {
    "label": "ConstraintFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstraintFunc(Proxy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(FGeometryCollectionPhysicsProxy* Proxy)"
  },
  {
    "label": "GeometryCollectionFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GeometryCollectionFunc(Proxy)"
  },
  {
    "label": "PullPhysicsStateForEachDirtyProxy_External()",
    "kind": "Method",
    "detail": "Function (} } Dispatcher ;)",
    "insertText": "PullPhysicsStateForEachDirtyProxy_External(Dispatcher)"
  },
  {
    "label": "PullPhysicsStateForEachDirtyProxy_External()",
    "kind": "Method",
    "detail": "Function (} template<RigidLambda,ConstraintLambda> void)",
    "insertText": "PullPhysicsStateForEachDirtyProxy_External(const RigidLambda& RigidFunc, const ConstraintLambda& ConstraintFunc)"
  }
]