[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FEditPropertyChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditPropertyChain"
  },
  {
    "label": "FField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FField"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FStructProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructProperty"
  },
  {
    "label": "UPropertyWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPropertyWrapper"
  },
  {
    "label": "CGetTypeHashable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CGetTypeHashable"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FBlake3Hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlake3Hash"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "FCustomPropertyListNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPropertyListNode"
  },
  {
    "label": "FDoubleInterval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDoubleInterval"
  },
  {
    "label": "FDoubleRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDoubleRange"
  },
  {
    "label": "FDoubleRangeBound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDoubleRangeBound"
  },
  {
    "label": "FFallbackStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFallbackStruct"
  },
  {
    "label": "FFloatInterval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatInterval"
  },
  {
    "label": "FFloatRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatRange"
  },
  {
    "label": "FFloatRangeBound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatRangeBound"
  },
  {
    "label": "FFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrame"
  },
  {
    "label": "FInt32Interval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInt32Interval"
  },
  {
    "label": "FInt32Range",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInt32Range"
  },
  {
    "label": "FInt32RangeBound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInt32RangeBound"
  },
  {
    "label": "FLinearColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearColor"
  },
  {
    "label": "FNetDeltaSerializeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetDeltaSerializeInfo"
  },
  {
    "label": "FObjectInstancingGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectInstancingGraph"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "FRandomStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRandomStream"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRepRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepRecord"
  },
  {
    "label": "UField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UField"
  },
  {
    "label": "FStructBaseChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructBaseChain"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "Z_Construct_UClass_UStruct_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UClass_UStruct_Statics"
  },
  {
    "label": "FUnversionedStructSchema",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUnversionedStructSchema"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UObjectBaseUtility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectBaseUtility"
  },
  {
    "label": "FBlueprintCompileReinstancer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintCompileReinstancer"
  },
  {
    "label": "EStructFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStructFlags"
  },
  {
    "label": "CPPSTRUCT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPPSTRUCT"
  },
  {
    "label": "TStructOpsTypeTraitsBase2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraitsBase2"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "ICppStructOps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICppStructOps"
  },
  {
    "label": "FCapabilities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapabilities"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "TCppStructOps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCppStructOps"
  },
  {
    "label": "TAutoCppStructOps",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAutoCppStructOps"
  },
  {
    "label": "package",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "package"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "name"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UDelegateFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDelegateFunction"
  },
  {
    "label": "USparseDelegateFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseDelegateFunction"
  },
  {
    "label": "UEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnum"
  },
  {
    "label": "types",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "types"
  },
  {
    "label": "FCppClassTypeTraitsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCppClassTypeTraitsBase"
  },
  {
    "label": "CPPCLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CPPCLASS"
  },
  {
    "label": "TCppClassTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TCppClassTypeTraits"
  },
  {
    "label": "ICppClassTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICppClassTypeInfo"
  },
  {
    "label": "FCppClassTypeInfoStatic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCppClassTypeInfoStatic"
  },
  {
    "label": "FCppClassTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCppClassTypeInfo"
  },
  {
    "label": "FImplementedInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImplementedInterface"
  },
  {
    "label": "FNativeFunctionLookup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNativeFunctionLookup"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FClassFunctionLinkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassFunctionLinkInfo"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FRestoreClassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRestoreClassInfo"
  },
  {
    "label": "FBlueprintEditorUtils",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditorUtils"
  },
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "FStructUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructUtils"
  },
  {
    "label": "FTestUninitializedScriptStructMembersTest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTestUninitializedScriptStructMembersTest"
  },
  {
    "label": "TBaseStructureBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBaseStructureBase"
  },
  {
    "label": "TBaseStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBaseStructure"
  },
  {
    "label": "FFrameNumber",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameNumber"
  },
  {
    "label": "FFrameTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTime"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FSoftClassPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftClassPath"
  },
  {
    "label": "FPrimaryAssetType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetType"
  },
  {
    "label": "FPrimaryAssetId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetId"
  },
  {
    "label": "FDateTime",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDateTime"
  },
  {
    "label": "FPolyglotTextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolyglotTextData"
  },
  {
    "label": "FAssetBundleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetBundleData"
  },
  {
    "label": "FTopLevelAssetPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTopLevelAssetPath"
  },
  {
    "label": "TVariantStructure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TVariantStructure"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Concepts / GetTypeHashable . h \" # include \" Concepts / StaticClassProvider . h \" # include \" Concepts / StaticStructProvider . h \" # include \" Containers / Array . h \" # include \" Containers / EnumAsByte . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" Async / Mutex . h \" # include \" Async / UniqueLock . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / UnrealMemory . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogCategory . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogVerbosity . h \" # include \" Math / Box2D . h \" # include \" Math / InterpCurvePoint . h \" # include \" Math / MathFwd . h \" # include \" Math / Matrix . h \" # include \" Math / Plane . h \" # include \" Math / Quat . h \" # include \" Math / RandomStream . h \" # include \" Math / Rotator . h \" # include \" Math / Transform . h \" # include \" Math / Vector2D . h \" # include \" Math / Vector4 . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / CString . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / FallbackStruct . h \" # include \" Misc / Guid . h \" # include \" Misc / Optional . h \" # include \" Misc / ScopeRWLock . h \" # include \" Serialization / StructuredArchive . h \" # include \" Serialization / StructuredArchiveAdapters . h \" # include \" Templates / AlignmentTemplates . h \" # include \" Templates / EnableIf . h \" # include \" Templates / IsAbstract . h \" # include \" Templates / IsEnum . h \" # include \" Templates / IsPODType . h \" # include \" Templates / IsUECoreType . h \" # include \" Templates / Models . h \" # include \" Templates / Tuple . h \" # include \" Templates / TypeCompatibleBytes . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Trace / Detail / Channel . h \" # include \" UObject / CoreNative . h \" # include \" UObject / Field . h \" # include \" UObject / FieldPath . h \" # include \" UObject / GarbageCollection . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / PropertyTag . h \" # include \" UObject / PropertyVisitor . h \" # include \" UObject / ReflectedTypeAccessors . h \" # include \" UObject / Script . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / ObjectPtr . h \" # include<type_traits> # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Misc / PackageAccessTracking . h \" # include \" Misc / PackageAccessTrackingOps . h \" # include \" UObject / Package . h \" # endif class FArchive ; class FEditPropertyChain ; class FField ; class FOutputDevice ; class FProperty ; class FStructProperty ; class UPropertyWrapper ; struct CGetTypeHashable ; struct FAssetData ; struct FBlake3Hash ; struct FColor ; struct FCustomPropertyListNode ; struct FDoubleInterval ; struct FDoubleRange ; struct FDoubleRangeBound ; struct FFallbackStruct ; struct FFloatInterval ; struct FFloatRange ; struct FFloatRangeBound ; struct FFrame ; struct FInt32Interval ; struct FInt32Range ; struct FInt32RangeBound ; struct FLinearColor ; struct FNetDeltaSerializeInfo ; struct FObjectInstancingGraph ; struct FPropertyTag ; struct FRandomStream ; struct FUObjectSerializeContext ; template<FuncType> class TFunctionRef ; enum class EPropertyObjectReferenceType : uint32 ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogClass, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogScriptSerialization, Log, All)"
  },
  {
    "label": "FRepRecord()",
    "kind": "Method",
    "detail": "Function (# ifndef USE_UE_LOCK_FOR_UCLASS_FUNCTION_HANDLING # define USE_UE_LOCK_FOR_UCLASS_FUNCTION_HANDLING 0 # endif # if USE_UE_LOCK_FOR_UCLASS_FUNCTION_HANDLING typedef UE::TUniqueLock<UE::FMutex> FUClassFuncScopeReadLock ; typedef UE::TUniqueLock<UE::FMutex> FUClassFuncScopeWriteLock ; typedef UE::FMutex FUClassFuncLock ; # else typedef FReadScopeLock FUClassFuncScopeReadLock ; typedef FWriteScopeLock FUClassFuncScopeWriteLock ; typedef FRWLock FUClassFuncLock ; # endif struct FRepRecord { FProperty* Property ; int32 Index ;)",
    "insertText": "FRepRecord(FProperty* InProperty,int32 InIndex) : Property(InProperty), Index(InIndex)"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API()",
    "kind": "Method",
    "detail": "Function (} } ; class UField : public UObject {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API(UField, UObject, CLASS_Abstract, TEXT(\"/Script/CoreUObject\"), CASTCLASS_UField, COREUOBJECT_API)"
  },
  {
    "label": "UField()",
    "kind": "Method",
    "detail": "Function (typedef UClass FieldTypeClass ; UField* Next ;)",
    "insertText": "UField(EStaticConstructor, EObjectFlags InFlags)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "NeedsLoadForClient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForClient()"
  },
  {
    "label": "NeedsLoadForServer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsLoadForServer()"
  },
  {
    "label": "AddCppProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCppProperty(FProperty* Property)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bind()"
  },
  {
    "label": "GetOwnerClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetOwnerClass()"
  },
  {
    "label": "GetOwnerStruct()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "GetOwnerStruct()"
  },
  {
    "label": "GetAuthoredName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAuthoredName()"
  },
  {
    "label": "GetDisplayNameText()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FText)",
    "insertText": "GetDisplayNameText()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText(bool bShortTooltip = false)"
  },
  {
    "label": "FormatNativeToolTip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FormatNativeToolTip(FString& ToolTipString, bool bRemoveExtraSections = true)"
  },
  {
    "label": "HasMetaData()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_METADATA bool)",
    "insertText": "HasMetaData(const TCHAR* Key)"
  },
  {
    "label": "HasMetaData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasMetaData(const FName& Key)"
  },
  {
    "label": "FindMetaData()",
    "kind": "Method",
    "detail": "Function (} const FString*)",
    "insertText": "FindMetaData(const TCHAR* Key)"
  },
  {
    "label": "FindMetaData()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "FindMetaData(const FName& Key)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetMetaData(const TCHAR* Key)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetMetaData(const FName& Key)"
  },
  {
    "label": "GetMetaDataText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMetaDataText(const TCHAR* MetaDataKey, const FTextKey LocalizationNamespace = FTextKey(), const FTextKey LocalizationKey = FTextKey())"
  },
  {
    "label": "GetMetaDataText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetMetaDataText(const FName& MetaDataKey, const FTextKey LocalizationNamespace = FTextKey(), const FTextKey LocalizationKey = FTextKey())"
  },
  {
    "label": "SetMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetaData(const TCHAR* Key, const TCHAR* InValue)"
  },
  {
    "label": "SetMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetaData(const FName& Key, const TCHAR* InValue)"
  },
  {
    "label": "GetBoolMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoolMetaData(const TCHAR* Key)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (const FString& BoolString =)",
    "insertText": "GetMetaData(Key)"
  },
  {
    "label": "GetBoolMetaData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetBoolMetaData(const FName& Key)"
  },
  {
    "label": "GetIntMetaData()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIntMetaData(const TCHAR* Key)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (int32 Value =)",
    "insertText": "Atoi(*IntString)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (float Value =)",
    "insertText": "Atof(*FloatString)"
  },
  {
    "label": "GetClassMetaData()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetClassMetaData(const FName& Key)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(const TCHAR* Key)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(const FName& Key)"
  },
  {
    "label": "HasAnyCastFlags()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HasAnyCastFlags(const uint64 InCastFlags)"
  },
  {
    "label": "HasAllCastFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAllCastFlags(const uint64 InCastFlags)"
  },
  {
    "label": "GetAssociatedFField()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FField*)",
    "insertText": "GetAssociatedFField()"
  },
  {
    "label": "SetAssociatedFField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAssociatedFField(FField* InField)"
  },
  {
    "label": "FStructBaseChain()",
    "kind": "Method",
    "detail": "Function (# endif } ; # if USTRUCT_FAST_ISCHILDOF_IMPL = = USTRUCT_ISCHILDOF_STRUCTARRAY class FStructBaseChain { protected :)",
    "insertText": "FStructBaseChain()"
  },
  {
    "label": "FStructBaseChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStructBaseChain(const FStructBaseChain&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FStructBaseChain&)",
    "insertText": "operator(const FStructBaseChain&)"
  },
  {
    "label": "ReinitializeBaseChainArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinitializeBaseChainArray()"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API()",
    "kind": "Method",
    "detail": "Function (int32 NumParentStructBasesInChainMinusOne = Parent . NumStructBasesInChainMinusOne ; return NumParentStructBasesInChainMinusOne<= NumStructBasesInChainMinusOne&& StructBaseChainArray [ NumParentStructBasesInChainMinusOne ] = =& Parent ; } private : FStructBaseChain** StructBaseChainArray ; int32 NumStructBasesInChainMinusOne ; class UStruct ; } ; # endif class UStruct : public UField # if USTRUCT_FAST_ISCHILDOF_IMPL = = USTRUCT_ISCHILDOF_STRUCTARRAY,private FStructBaseChain # endif {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API(UStruct, UField, CLASS_MatchedSerializers, TEXT(\"/Script/CoreUObject\"), CASTCLASS_UStruct, COREUOBJECT_API)"
  },
  {
    "label": "GetSchemaHash()",
    "kind": "Method",
    "detail": "Function (private : ObjectPtr_Private::TNonAccessTrackedObjectPtr<UStruct> SuperStruct ; public : TObjectPtr<UField> Children ; FField* ChildProperties ; int32 PropertiesSize ; int32 MinAlignment ; TArray<uint8> Script ; FProperty* PropertyLink ; FProperty* RefLink ; FProperty* DestructorLink ; FProperty* PostConstructLink ; TArray<TObjectPtr<UObject>> ScriptAndPropertyObjectReferences ; typedef TArray<TPair<TFieldPath<FField>,int32>> FUnresolvedScriptPropertiesArray ; FUnresolvedScriptPropertiesArray* UnresolvedScriptProperties ; # if WITH_EDITORONLY_DATA TArray<TObjectPtr<UPropertyWrapper>> PropertyWrappers ; int32 FieldPathSerialNumber ; UE_INTERNAL int32 TotalFieldCount = 0 ; # endif const struct FUnversionedStructSchema* UnversionedGameSchema = nullptr ; # if WITH_EDITORONLY_DATA const struct FUnversionedStructSchema* UnversionedEditorSchema = nullptr ; const FBlake3Hash&)",
    "insertText": "GetSchemaHash(bool bSkipEditorOnly)"
  },
  {
    "label": "UStruct()",
    "kind": "Method",
    "detail": "Function (protected : bool bHasAssetRegistrySearchableProperties ; # endif public :)",
    "insertText": "UStruct(EStaticConstructor, int32 InSize, int32 InAlignment, EObjectFlags InFlags)"
  },
  {
    "label": "UStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UStruct(UStruct* InSuperStruct, SIZE_T ParamsSize = 0, SIZE_T Alignment = 0)"
  },
  {
    "label": "UStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UStruct(const FObjectInitializer& ObjectInitializer, UStruct* InSuperStruct, SIZE_T ParamsSize = 0, SIZE_T Alignment = 0)"
  },
  {
    "label": "UStruct()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UStruct()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "FinishDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishDestroy()"
  },
  {
    "label": "RegisterDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDependencies()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "TagSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TagSubobjects(EObjectFlags NewFlags)"
  },
  {
    "label": "GetStructPathName()",
    "kind": "Method",
    "detail": "Function (FTopLevelAssetPath)",
    "insertText": "GetStructPathName()"
  },
  {
    "label": "FindPropertyByName()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "FindPropertyByName(FName InName)"
  },
  {
    "label": "InstanceSubobjectTemplates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstanceSubobjectTemplates(void* Data, void const* DefaultData, UStruct* DefaultStruct, UObject* Owner, FObjectInstancingGraph* InstanceGraph)"
  },
  {
    "label": "GetInheritanceSuper()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "GetInheritanceSuper()"
  },
  {
    "label": "StaticLink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StaticLink(bool bRelinkExistingProperties = false)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Link(FArchive& Ar, bool bRelinkExistingProperties)"
  },
  {
    "label": "SerializeBin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBin(FArchive& Ar, void* Data)"
  },
  {
    "label": "SerializeBin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBin(FStructuredArchiveFromArchive(Ar).GetSlot(), Data)"
  },
  {
    "label": "SerializeBin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeBin(FStructuredArchive::FSlot Slot, void* Data)"
  },
  {
    "label": "SerializeBinEx()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBinEx(FStructuredArchive::FSlot Slot, void* Data, void const* DefaultData, UStruct* DefaultStruct)"
  },
  {
    "label": "SerializeTaggedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTaggedProperties(FArchive& Ar, uint8* Data, UStruct* DefaultsStruct, uint8* Defaults, const UObject* BreakRecursionIfFullyLoad = nullptr)"
  },
  {
    "label": "SerializeTaggedProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeTaggedProperties(FStructuredArchiveFromArchive(Ar).GetSlot(), Data, DefaultsStruct, Defaults, BreakRecursionIfFullyLoad)"
  },
  {
    "label": "SerializeTaggedProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeTaggedProperties(FStructuredArchive::FSlot Slot, uint8* Data, UStruct* DefaultsStruct, uint8* Defaults, const UObject* BreakRecursionIfFullyLoad = nullptr)"
  },
  {
    "label": "PreloadChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreloadChildren(FArchive& Ar)"
  },
  {
    "label": "InitializeStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeStruct(void* Dest, int32 ArrayDim = 1)"
  },
  {
    "label": "DestroyStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyStruct(void* Dest, int32 ArrayDim = 1)"
  },
  {
    "label": "CustomFindProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "CustomFindProperty(const FName InName)"
  },
  {
    "label": "GetPrefixCPP()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetPrefixCPP()"
  },
  {
    "label": "GetPropertiesSize()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetPropertiesSize()"
  },
  {
    "label": "SetPropertiesSize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPropertiesSize(int32 NewSize)"
  },
  {
    "label": "IsChildOf()",
    "kind": "Method",
    "detail": "Function (PropertiesSize = NewSize ; } template<class T> bool)",
    "insertText": "IsChildOf()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(TModels_V<CStaticStructProvider, T>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(T) == 0, \"Unsupported type - requires StaticClass or StaticStruct.\")"
  },
  {
    "label": "IsChildOf()",
    "kind": "Method",
    "detail": "Function (# else bool)",
    "insertText": "IsChildOf(const UStruct* SomeBase)"
  },
  {
    "label": "GetSuperStruct()",
    "kind": "Method",
    "detail": "Function (} # endif UStruct*)",
    "insertText": "GetSuperStruct()"
  },
  {
    "label": "GetAuthoredNameForField()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAuthoredNameForField(const UField* Field)"
  },
  {
    "label": "GetAuthoredNameForField()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAuthoredNameForField(const FField* Field)"
  },
  {
    "label": "IsStructTrashed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStructTrashed()"
  },
  {
    "label": "GetBoolMetaDataHierarchical()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA bool)",
    "insertText": "GetBoolMetaDataHierarchical(const FName& Key)"
  },
  {
    "label": "GetStringMetaDataHierarchical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetStringMetaDataHierarchical(const FName& Key, FString* OutValue = nullptr)"
  },
  {
    "label": "HasMetaDataHierarchical()",
    "kind": "Method",
    "detail": "Function (const UStruct*)",
    "insertText": "HasMetaDataHierarchical(const FName& Key)"
  },
  {
    "label": "HasAssetRegistrySearchableProperties()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITORONLY_DATA bool)",
    "insertText": "HasAssetRegistrySearchableProperties()"
  },
  {
    "label": "FUnresolvedScriptPropertiesArray()",
    "kind": "Method",
    "detail": "Function (UnresolvedScriptProperties = new)",
    "insertText": "FUnresolvedScriptPropertiesArray()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (}* UnresolvedScriptProperties =)",
    "insertText": "MoveTemp(InUnresolvedProperties)"
  },
  {
    "label": "DeleteUnresolvedScriptProperties()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteUnresolvedScriptProperties()"
  },
  {
    "label": "CollectBytecodeReferencedObjects()",
    "kind": "Method",
    "detail": "Function (delete UnresolvedScriptProperties ; UnresolvedScriptProperties = nullptr ; } } void)",
    "insertText": "CollectBytecodeReferencedObjects(TArray<UObject*>& OutReferencedObjects)"
  },
  {
    "label": "CollectPropertyReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPropertyReferencedObjects(TArray<UObject*>& OutReferencedObjects)"
  },
  {
    "label": "CollectBytecodeAndPropertyReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectBytecodeAndPropertyReferencedObjects()"
  },
  {
    "label": "CollectBytecodeAndPropertyReferencedObjectsRecursively()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectBytecodeAndPropertyReferencedObjectsRecursively()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (EPropertyVisitorControlFlow)",
    "insertText": "Visit(void* Data, const TFunctionRef<EPropertyVisitorControlFlow(const FPropertyVisitorPath& , const FPropertyVisitorData& )> InFunc)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (EPropertyVisitorControlFlow)",
    "insertText": "Visit(FPropertyVisitorPath& Path, const FPropertyVisitorData& Data, const TFunctionRef<EPropertyVisitorControlFlow(const FPropertyVisitorPath& , const FPropertyVisitorData& )> InFunc)"
  },
  {
    "label": "ResolveVisitedPathInfo()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "ResolveVisitedPathInfo(void* Data, const FPropertyVisitorInfo& Info)"
  },
  {
    "label": "FindPropertyNameFromGuid()",
    "kind": "Method",
    "detail": "Function (protected : FName)",
    "insertText": "FindPropertyNameFromGuid(const FGuid& PropertyGuid)"
  },
  {
    "label": "ArePropertyGuidsAvailable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ArePropertyGuidsAvailable()"
  },
  {
    "label": "ConvertUFieldsToFFields()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "ConvertUFieldsToFFields()"
  },
  {
    "label": "LoadTaggedPropertiesFromText()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "LoadTaggedPropertiesFromText(FStructuredArchive::FSlot Slot, uint8* Data, UStruct* DefaultsStruct, uint8* Defaults, const UObject* BreakRecursionIfFullyLoad)"
  },
  {
    "label": "SerializeVersionedTaggedProperties()",
    "kind": "Method",
    "detail": "Function (private : # if USTRUCT_FAST_ISCHILDOF_IMPL = = USTRUCT_ISCHILDOF_STRUCTARRAY class UObjectBaseUtility ; using FStructBaseChain::IsChildOfUsingStructArray ; using FStructBaseChain::ReinitializeBaseChainArray ; class FStructBaseChain ; class FBlueprintCompileReinstancer ; # endif void)",
    "insertText": "SerializeVersionedTaggedProperties(FStructuredArchive::FSlot Slot, uint8* Data, UStruct* DefaultsStruct, uint8* Defaults, const UObject* BreakRecursionIfFullyLoad)"
  },
  {
    "label": "DISABLE_ABSTRACT_CONSTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; enum EStructFlags { STRUCT_NoFlags = 0 x00000000,STRUCT_Native = 0 x00000001,STRUCT_IdenticalNative = 0 x00000002,STRUCT_HasInstancedReference = 0 x00000004,STRUCT_NoExport = 0 x00000008,STRUCT_Atomic = 0 x00000010,STRUCT_Immutable = 0 x00000020,STRUCT_AddStructReferencedObjects = 0 x00000040,STRUCT_RequiredAPI = 0 x00000200,STRUCT_NetSerializeNative = 0 x00000400,STRUCT_SerializeNative = 0 x00000800,STRUCT_CopyNative = 0 x00001000,STRUCT_IsPlainOldData = 0 x00002000,STRUCT_NoDestructor = 0 x00004000,STRUCT_ZeroConstructor = 0 x00008000,STRUCT_ExportTextItemNative = 0 x00010000,STRUCT_ImportTextItemNative = 0 x00020000,STRUCT_PostSerializeNative = 0 x00040000,STRUCT_SerializeFromMismatchedTag = 0 x00080000,STRUCT_NetDeltaSerializeNative = 0 x00100000,STRUCT_PostScriptConstruct = 0 x00200000,STRUCT_NetSharedSerialization = 0 x00400000,STRUCT_Trashed = 0 x00800000,STRUCT_NewerVersionExists = 0 x01000000,STRUCT_CanEditChange = 0 x02000000,STRUCT_Visitor = 0 x04000000,STRUCT_Inherit = STRUCT_HasInstancedReference | STRUCT_Atomic,STRUCT_ComputedFlags = STRUCT_NetDeltaSerializeNative | STRUCT_NetSerializeNative | STRUCT_SerializeNative | STRUCT_PostSerializeNative | STRUCT_CopyNative | STRUCT_IsPlainOldData | STRUCT_NoDestructor | STRUCT_ZeroConstructor | STRUCT_IdenticalNative | STRUCT_AddStructReferencedObjects | STRUCT_ExportTextItemNative | STRUCT_ImportTextItemNative | STRUCT_SerializeFromMismatchedTag | STRUCT_PostScriptConstruct | STRUCT_NetSharedSerialization } ; template<class CPPSTRUCT> struct TStructOpsTypeTraitsBase2 { enum { WithZeroConstructor = false,WithNoInitConstructor = false,WithNoDestructor = false,WithCopy = ! TIsPODType<CPPSTRUCT>::Value,WithIdenticalViaEquality = false,WithIdentical = false,WithExportTextItem = false,WithImportTextItem = false,WithAddStructReferencedObjects = false,WithSerializer = false,WithStructuredSerializer = false,WithPostSerialize = false,WithNetSerializer = false,WithNetDeltaSerializer = false,WithSerializeFromMismatchedTag = false,WithStructuredSerializeFromMismatchedTag = false,WithPostScriptConstruct = false,WithNetSharedSerialization = false,WithGetPreloadDependencies = false,WithPureVirtual = false,WithFindInnerPropertyInstance = false,WithCanEditChange = false,WithClearOnFinishDestroy = false,WithVisitor = false,WithIntrusiveOptionalSafeForGC = false,} ; EPropertyObjectReferenceType WithSerializerObjectReferences = EPropertyObjectReferenceType::Conservative ; } ; template<class CPPSTRUCT> struct TStructOpsTypeTraits : public TStructOpsTypeTraitsBase2<CPPSTRUCT> { } ; # if CHECK_PUREVIRTUALS # define DISABLE_ABSTRACT_CONSTRUCT TStructOpsTypeTraits<CPPSTRUCT>::WithPureVirtual # else # define)",
    "insertText": "DISABLE_ABSTRACT_CONSTRUCT(false && TStructOpsTypeTraits<CPPSTRUCT>::WithPureVirtual) #endif template<class CPPSTRUCT> FORCEINLINE void AddStructReferencedObjectsOrNot(void* A, FReferenceCollector& Collector)"
  },
  {
    "label": "ICppStructOps()",
    "kind": "Method",
    "detail": "Function (} } class UScriptStruct : public UStruct { public : struct ICppStructOps { struct FCapabilities { EPropertyFlags ComputedPropertyFlags ; EPropertyObjectReferenceType HasSerializerObjectReferences ; bool HasNoopConstructor : 1 ; bool HasZeroConstructor : 1 ; bool HasDestructor : 1 ; bool HasSerializer : 1 ; bool HasStructuredSerializer : 1 ; bool HasPostSerialize : 1 ; bool HasNetSerializer : 1 ; bool HasNetSharedSerialization : 1 ; bool HasNetDeltaSerializer : 1 ; bool HasPostScriptConstruct : 1 ; bool IsPlainOldData : 1 ; bool IsUECoreType : 1 ; bool IsUECoreVariant : 1 ; bool HasCopy : 1 ; bool HasIdentical : 1 ; bool HasExportTextItem : 1 ; bool HasImportTextItem : 1 ; bool HasAddStructReferencedObjects : 1 ; bool HasSerializeFromMismatchedTag : 1 ; bool HasStructuredSerializeFromMismatchedTag : 1 ; bool HasGetTypeHash : 1 ; bool HasIntrusiveUnsetOptionalState : 1 ; bool IsAbstract : 1 ; bool HasFindInnerPropertyInstance : 1 ; bool ClearOnFinishDestroy : 1 ; # if WITH_EDITOR bool HasCanEditChange : 1 ; # endif bool HasVisitor : 1 ; } ;)",
    "insertText": "ICppStructOps(int32 InSize, int32 InAlignment) : Size(InSize) , Alignment(InAlignment)"
  },
  {
    "label": "ICppStructOps()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ICppStructOps()"
  },
  {
    "label": "GetCapabilities()",
    "kind": "Method",
    "detail": "Function (} FCapabilities)",
    "insertText": "GetCapabilities()"
  },
  {
    "label": "HasNoopConstructor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNoopConstructor()"
  },
  {
    "label": "HasZeroConstructor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasZeroConstructor()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(void *Dest)"
  },
  {
    "label": "ConstructForTests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructForTests(void* Dest)"
  },
  {
    "label": "HasDestructor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDestructor()"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destruct(void *Dest)"
  },
  {
    "label": "HasStructuredSerializer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasStructuredSerializer()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Serialize(FArchive& Ar, void *Data)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot, void *Data)"
  },
  {
    "label": "HasPostSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPostSerialize()"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostSerialize(const FArchive& Ar, void *Data)"
  },
  {
    "label": "HasNetSerializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNetSerializer()"
  },
  {
    "label": "HasNetSharedSerialization()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasNetSharedSerialization()"
  },
  {
    "label": "NetSerialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NetSerialize(FArchive& Ar, class UPackageMap* Map, bool& bOutSuccess, void *Data)"
  },
  {
    "label": "HasNetDeltaSerializer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasNetDeltaSerializer()"
  },
  {
    "label": "NetDeltaSerialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NetDeltaSerialize(FNetDeltaSerializeInfo & DeltaParms, void *Data)"
  },
  {
    "label": "HasPostScriptConstruct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPostScriptConstruct()"
  },
  {
    "label": "PostScriptConstruct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostScriptConstruct(void *Data)"
  },
  {
    "label": "GetPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPreloadDependencies(void* Data, TArray<UObject*>& OutDeps)"
  },
  {
    "label": "IsPlainOldData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlainOldData()"
  },
  {
    "label": "IsUECoreType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUECoreType()"
  },
  {
    "label": "IsUECoreVariant()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUECoreVariant()"
  },
  {
    "label": "HasCopy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasCopy()"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Copy(void* Dest, void const* Src, int32 ArrayDim)"
  },
  {
    "label": "HasIdentical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasIdentical()"
  },
  {
    "label": "Identical()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Identical(const void* A, const void* B, uint32 PortFlags, bool& bOutResult)"
  },
  {
    "label": "HasExportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExportTextItem()"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExportTextItem(FString& ValueStr, const void* PropertyValue, const void* DefaultValue, class UObject* Parent, int32 PortFlags, class UObject* ExportRootScope)"
  },
  {
    "label": "HasImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasImportTextItem()"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, void* Data, int32 PortFlags, class UObject* OwnerObject, FOutputDevice* ErrorText)"
  },
  {
    "label": "HasFindInnerPropertyInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFindInnerPropertyInstance()"
  },
  {
    "label": "FindInnerPropertyInstance()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindInnerPropertyInstance(FName PropertyName, const void* Data, const FProperty*& OutProp, const void*& OutData)"
  },
  {
    "label": "HasAddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAddStructReferencedObjects()"
  },
  {
    "label": "HasSerializerObjectReferences()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasSerializerObjectReferences(EPropertyObjectReferenceType Type)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} typedef)",
    "insertText": "void(*TPointerToAddStructReferencedObjects)(void* A, class FReferenceCollector& Collector)"
  },
  {
    "label": "AddStructReferencedObjects()",
    "kind": "Method",
    "detail": "Function (TPointerToAddStructReferencedObjects)",
    "insertText": "AddStructReferencedObjects()"
  },
  {
    "label": "HasSerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSerializeFromMismatchedTag()"
  },
  {
    "label": "HasStructuredSerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasStructuredSerializeFromMismatchedTag()"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SerializeFromMismatchedTag(struct FPropertyTag const& Tag, FArchive& Ar, void *Data)"
  },
  {
    "label": "StructuredSerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StructuredSerializeFromMismatchedTag(struct FPropertyTag const& Tag, FStructuredArchive::FSlot Slot, void *Data)"
  },
  {
    "label": "HasGetTypeHash()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasGetTypeHash()"
  },
  {
    "label": "GetStructTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetStructTypeHash(const void* Src)"
  },
  {
    "label": "GetComputedPropertyFlags()",
    "kind": "Method",
    "detail": "Function (EPropertyFlags)",
    "insertText": "GetComputedPropertyFlags()"
  },
  {
    "label": "IsAbstract()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAbstract()"
  },
  {
    "label": "HasClearOnFinishDestroy()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasClearOnFinishDestroy()"
  },
  {
    "label": "HasIntrusiveUnsetOptionalState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasIntrusiveUnsetOptionalState()"
  },
  {
    "label": "InitializeIntrusiveUnsetOptionalValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeIntrusiveUnsetOptionalValue(void* Data)"
  },
  {
    "label": "IsIntrusiveOptionalValueSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntrusiveOptionalValueSet(const void* Data)"
  },
  {
    "label": "ClearIntrusiveOptionalValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearIntrusiveOptionalValue(void* Data)"
  },
  {
    "label": "IsIntrusiveOptionalSafeForGC()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIntrusiveOptionalSafeForGC()"
  },
  {
    "label": "HasCanEditChange()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "HasCanEditChange()"
  },
  {
    "label": "CanEditChange()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanEditChange(const FEditPropertyChain& PropertyChain, const void* Data)"
  },
  {
    "label": "HasVisitor()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "HasVisitor()"
  },
  {
    "label": "TCppStructOps()",
    "kind": "Method",
    "detail": "Function (private : const int32 Size ; const int32 Alignment ; } ; template<class CPPSTRUCT> struct TCppStructOps final : public ICppStructOps { typedef TStructOpsTypeTraits<CPPSTRUCT> TTraits ;)",
    "insertText": "TCppStructOps() : ICppStructOps(sizeof(CPPSTRUCT), alignof(CPPSTRUCT))"
  },
  {
    "label": "Capabilities()",
    "kind": "Method",
    "detail": "Function (FCapabilities)",
    "insertText": "Capabilities(TIsPODType<CPPSTRUCT>::Value ? CPF_IsPlainOldData : CPF_None) | (std::is_trivially_destructible_v<CPPSTRUCT> ? CPF_NoDestructor : CPF_None) | (TIsZeroConstructType<CPPSTRUCT>::Value ? CPF_ZeroConstructor : CPF_None) | (TModels_V<CGetTypeHashable, CPPSTRUCT> ? CPF_HasGetValueTypeHash : CPF_None), TTraits::WithSerializerObjectReferences, TTraits::WithNoInitConstructor, TTraits::WithZeroConstructor, !(TTraits::WithNoDestructor || TIsPODType<CPPSTRUCT>::Value), TTraits::WithSerializer, TTraits::WithStructuredSerializer, TTraits::WithPostSerialize, TTraits::WithNetSerializer, TTraits::WithNetSharedSerialization, TTraits::WithNetDeltaSerializer, TTraits::WithPostScriptConstruct, TIsPODType<CPPSTRUCT>::Value, TIsUECoreType<CPPSTRUCT>::Value, TIsUECoreVariant<CPPSTRUCT>::Value, TTraits::WithCopy, TTraits::WithIdentical || TTraits::WithIdenticalViaEquality, TTraits::WithExportTextItem, TTraits::WithImportTextItem, TTraits::WithAddStructReferencedObjects, TTraits::WithSerializeFromMismatchedTag, TTraits::WithStructuredSerializeFromMismatchedTag, TModels_V<CGetTypeHashable, CPPSTRUCT>, ::HasIntrusiveUnsetOptionalState<CPPSTRUCT>()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (# if CHECK_PUREVIRTUALS if)",
    "insertText": "constexpr(!TStructOpsTypeTraits<CPPSTRUCT>::WithPureVirtual)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Dest) CPPSTRUCT(ForceInit)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "new(Dest) CPPSTRUCT()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "new(Dest)"
  },
  {
    "label": "TypedDest()",
    "kind": "Method",
    "detail": "Function (CPPSTRUCT*)",
    "insertText": "TypedDest(CPPSTRUCT*)"
  },
  {
    "label": "TypedSrc()",
    "kind": "Method",
    "detail": "Function (const CPPSTRUCT*)",
    "insertText": "TypedSrc(const CPPSTRUCT*)"
  },
  {
    "label": "bOutResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bOutResult((const CPPSTRUCT*)A)->Identical((const CPPSTRUCT*)B, PortFlags)"
  },
  {
    "label": "bOutResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bOutResult(*(const CPPSTRUCT*)A == *(const CPPSTRUCT*)B)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (} else { TTypeCompatibleBytes<CPPSTRUCT> TmpDefaultValue ;)",
    "insertText": "Memzero(TmpDefaultValue.GetTypedPtr(), sizeof(CPPSTRUCT))"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(TmpDefaultValue.GetTypedPtr())"
  },
  {
    "label": "bResult()",
    "kind": "Method",
    "detail": "Function (} const bool)",
    "insertText": "bResult((const CPPSTRUCT*)PropertyValue)->ExportTextItem(ValueStr, *(const CPPSTRUCT*)TmpDefaultValue.GetTypedPtr(), Parent, PortFlags, ExportRootScope)"
  },
  {
    "label": "Destruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destruct(TmpDefaultValue.GetTypedPtr())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FName StructName ;)",
    "insertText": "if(Tag.GetType().GetName() == NAME_StructProperty && Tag.GetType().GetParameterCount() >= 1)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (StructName = Tag .)",
    "insertText": "GetType().GetParameterName(0)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return((CPPSTRUCT*)Data)->SerializeFromMismatchedTag(StructName, Ar)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return((CPPSTRUCT*)Data)->SerializeFromMismatchedTag(Tag, Ar)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return((CPPSTRUCT*)Data)->SerializeFromMismatchedTag(StructName, Slot)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return((CPPSTRUCT*)Data)->SerializeFromMismatchedTag(Tag, Slot)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } else { return false ; } })",
    "insertText": "static_assert(!(TTraits::WithSerializeFromMismatchedTag && TTraits::WithStructuredSerializeFromMismatchedTag), \"Structs cannot have both WithSerializeFromMismatchedTag and WithStructuredSerializeFromMismatchedTag set\")"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(Data) TOptional<CPPSTRUCT>()"
  },
  {
    "label": "CPPSTRUCT()",
    "kind": "Method",
    "detail": "Function (reinterpret_cast<TOptional<)",
    "insertText": "CPPSTRUCT(Data)->Reset()"
  },
  {
    "label": "Struct()",
    "kind": "Method",
    "detail": "Function (CPPSTRUCT*)",
    "insertText": "Struct(CPPSTRUCT*)"
  },
  {
    "label": "TAutoCppStructOps()",
    "kind": "Method",
    "detail": "Function (} else { return nullptr ; } } } ; template<class CPPSTRUCT> struct TAutoCppStructOps {)",
    "insertText": "TAutoCppStructOps(FTopLevelAssetPath InName)"
  },
  {
    "label": "DeferCppStructOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferCppStructOps(InName,new TCppStructOps<CPPSTRUCT>)"
  },
  {
    "label": "IMPLEMENT_STRUCT()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "IMPLEMENT_STRUCT(BaseName) \\ UE_DEPRECATED_MACRO(5.1, \"IMPLEMENT_STRUCT has been deprecated. Use UE_IMPLEMENT_STRUCT and provide struct package name as well as struct name\") static UScriptStruct::TAutoCppStructOps<F##BaseName> BaseName##_Ops(FTopLevelAssetPath(TEXT(\"/Script/CoreUObject\"), TEXT(#BaseName)))"
  },
  {
    "label": "UE_IMPLEMENT_STRUCT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "UE_IMPLEMENT_STRUCT(PackageNameText, BaseName) \\ static UScriptStruct::TAutoCppStructOps<F##BaseName> BaseName##_Ops(FTopLevelAssetPath(TEXT(PackageNameText), TEXT(#BaseName)))"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR(UScriptStruct, UStruct, CLASS_MatchedSerializers, TEXT(\"/Script/CoreUObject\"), CASTCLASS_UScriptStruct, COREUOBJECT_API) COREUOBJECT_API UScriptStruct( EStaticConstructor, int32 InSize, int32 InAlignment, EObjectFlags InFlags)"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UScriptStruct(const FObjectInitializer& ObjectInitializer, UScriptStruct* InSuperStruct, ICppStructOps* InCppStructOps = nullptr, EStructFlags InStructFlags = STRUCT_NoFlags, SIZE_T ExplicitSize = 0, SIZE_T ExplicitAlignment = 0)"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UScriptStruct(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "GetFlattenedStructPathName()",
    "kind": "Method",
    "detail": "Function (public : EStructFlags StructFlags ; protected : bool bPrepareCppStructOpsCompleted ; ICppStructOps* CppStructOps ; FTopLevelAssetPath)",
    "insertText": "GetFlattenedStructPathName()"
  },
  {
    "label": "SetStructTrashed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStructTrashed(bool bIsTrash)"
  },
  {
    "label": "DeferCppStructOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferCppStructOps(FTopLevelAssetPath Target, ICppStructOps* InCppStructOps)"
  },
  {
    "label": "DeferCppStructOps()",
    "kind": "Method",
    "detail": "Function (template<class CPPSTRUCT> void)",
    "insertText": "DeferCppStructOps(FTopLevelAssetPath Target)"
  },
  {
    "label": "DeferCppStructOps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferCppStructOps(Target, nullptr)"
  },
  {
    "label": "DeferCppStructOps()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "DeferCppStructOps(Target, new UScriptStruct::TCppStructOps<CPPSTRUCT>)"
  },
  {
    "label": "PrepareCppStructOps()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PrepareCppStructOps()"
  },
  {
    "label": "EStructFlags()",
    "kind": "Method",
    "detail": "Function (StructFlags =)",
    "insertText": "EStructFlags(StructFlags & ~STRUCT_ComputedFlags)"
  },
  {
    "label": "HasDefaults()",
    "kind": "Method",
    "detail": "Function (bPrepareCppStructOpsCompleted = false ; CppStructOps = nullptr ; } bool)",
    "insertText": "HasDefaults()"
  },
  {
    "label": "ShouldSerializeAtomically()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldSerializeAtomically(FArchive& Ar)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeItem(FArchive& Ar, void* Value, void const* Defaults)"
  },
  {
    "label": "SerializeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeItem(FStructuredArchive::FSlot Slot, void* Value, void const* Defaults)"
  },
  {
    "label": "ExportText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportText(FString& ValueStr, const void* Value, const void* Defaults, UObject* OwnerObject, int32 PortFlags, UObject* ExportRootScope, bool bAllowNativeOverride = true)"
  },
  {
    "label": "ImportText()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportText(const TCHAR* Buffer, void* Value, UObject* OwnerObject, int32 PortFlags, FOutputDevice* ErrorText, const FString& StructName, bool bAllowNativeOverride = true)"
  },
  {
    "label": "ImportText()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ImportText(const TCHAR* Buffer, void* Value, UObject* OwnerObject, int32 PortFlags, FOutputDevice* ErrorText, const TFunctionRef<FString()>& StructNameGetter, bool bAllowNativeOverride = true)"
  },
  {
    "label": "CompareScriptStruct()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareScriptStruct(const void* A, const void* B, uint32 PortFlags)"
  },
  {
    "label": "CopyScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyScriptStruct(void* Dest, void const* Src, int32 ArrayDim = 1)"
  },
  {
    "label": "ClearScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearScriptStruct(void* Dest, int32 ArrayDim = 1)"
  },
  {
    "label": "RecursivelyPreload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecursivelyPreload()"
  },
  {
    "label": "GetCustomGuid()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "GetCustomGuid()"
  },
  {
    "label": "GetStructCPPName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetStructCPPName(uint32 CPPExportFlags = 0)"
  },
  {
    "label": "InitializeDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDefaultValue(uint8* InStructData)"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API()",
    "kind": "Method",
    "detail": "Function (} ; class UFunction : public UStruct {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API(UFunction, UStruct, 0, TEXT(\"/Script/CoreUObject\"), CASTCLASS_UFunction, COREUOBJECT_API) DECLARE_WITHIN(UClass)"
  },
  {
    "label": "GetNativeFunc()",
    "kind": "Method",
    "detail": "Function (uint8 NumParms ; uint16 ParmsSize ; uint16 ReturnValueOffset ; uint16 RPCId ; uint16 RPCResponseId ; FProperty* FirstPropertyToInit ; # if UE_BLUEPRINT_EVENTGRAPH_FASTCALLS UFunction* EventGraphFunction ; int32 EventGraphCallOffset ; # endif # if WITH_LIVE_CODING UFunction** SingletonPtr ; # endif private : FNativeFuncPtr Func ; public : FNativeFuncPtr)",
    "insertText": "GetNativeFunc()"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (Func = InFunc ; } void)",
    "insertText": "Invoke(UObject* Obj, FFrame& Stack, RESULT_DECL)"
  },
  {
    "label": "UFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UFunction(const FObjectInitializer& ObjectInitializer, UFunction* InSuperFunction, EFunctionFlags InFunctionFlags = FUNC_None, SIZE_T ParamsSize = 0)"
  },
  {
    "label": "UFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UFunction(UFunction* InSuperFunction, EFunctionFlags InFunctionFlags = FUNC_None, SIZE_T ParamsSize = 0)"
  },
  {
    "label": "InitializeDerivedMembers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDerivedMembers()"
  },
  {
    "label": "GetSuperFunction()",
    "kind": "Method",
    "detail": "Function (UFunction*)",
    "insertText": "GetSuperFunction()"
  },
  {
    "label": "GetReturnProperty()",
    "kind": "Method",
    "detail": "Function (FProperty*)",
    "insertText": "GetReturnProperty()"
  },
  {
    "label": "HasAnyFunctionFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyFunctionFlags(EFunctionFlags FlagsToCheck)"
  },
  {
    "label": "HasAllFunctionFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllFunctionFlags(EFunctionFlags FlagsToCheck)"
  },
  {
    "label": "GetDefaultIgnoredSignatureCompatibilityFlags()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetDefaultIgnoredSignatureCompatibilityFlags()"
  },
  {
    "label": "IsSignatureCompatibleWith()",
    "kind": "Method",
    "detail": "Function (const uint64 IgnoreFlags = CPF_PersistentInstance | CPF_ExportObject | CPF_InstancedReference | CPF_ContainsInstancedReference | CPF_ComputedFlags | CPF_ConstParm | CPF_UObjectWrapper | CPF_TObjectPtr | CPF_NativeAccessSpecifiers | CPF_AdvancedDisplay | CPF_BlueprintVisible | CPF_BlueprintReadOnly ; return IgnoreFlags ; } bool)",
    "insertText": "IsSignatureCompatibleWith(const UFunction* OtherFunction)"
  },
  {
    "label": "IsSignatureCompatibleWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSignatureCompatibleWith(const UFunction* OtherFunction, uint64 IgnoreFlags)"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API()",
    "kind": "Method",
    "detail": "Function (} ; class UDelegateFunction : public UFunction {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API(UDelegateFunction, UFunction, 0, TEXT(\"/Script/CoreUObject\"), CASTCLASS_UDelegateFunction, COREUOBJECT_API) DECLARE_WITHIN(UObject) public: COREUOBJECT_API explicit UDelegateFunction(const FObjectInitializer& ObjectInitializer, UFunction* InSuperFunction, EFunctionFlags InFunctionFlags = FUNC_None, SIZE_T ParamsSize = 0)"
  },
  {
    "label": "UDelegateFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UDelegateFunction(UFunction* InSuperFunction, EFunctionFlags InFunctionFlags = FUNC_None, SIZE_T ParamsSize = 0)"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API()",
    "kind": "Method",
    "detail": "Function (} ; class USparseDelegateFunction : public UDelegateFunction {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_WITH_API(USparseDelegateFunction, UDelegateFunction, 0, TEXT(\"/Script/CoreUObject\"), CASTCLASS_USparseDelegateFunction, COREUOBJECT_API) DECLARE_WITHIN(UObject) public: COREUOBJECT_API explicit USparseDelegateFunction(const FObjectInitializer& ObjectInitializer, UFunction* InSuperFunction, EFunctionFlags InFunctionFlags = FUNC_None, SIZE_T ParamsSize = 0)"
  },
  {
    "label": "USparseDelegateFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USparseDelegateFunction(UFunction* InSuperFunction, EFunctionFlags InFunctionFlags = FUNC_None, SIZE_T ParamsSize = 0)"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (FName OwningClassName ; FName DelegateName ; } ; typedef)",
    "insertText": "FText(*FEnumDisplayNameFn)(int32)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EGetByNameFlags { None = 0,ErrorIfNotFound = 0 x01,CaseSensitive = 0 x02,CheckAuthoredName = 0 x04,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EGetByNameFlags)"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR(UEnum, UField, 0, TEXT(\"/Script/CoreUObject\"), CASTCLASS_UEnum, COREUOBJECT_API) COREUOBJECT_API UEnum(const FObjectInitializer& ObjectInitialzer)"
  },
  {
    "label": "GetIndexByValue()",
    "kind": "Method",
    "detail": "Function (public : enum class ECppForm : uint8 { Regular,Namespaced,EnumClass } ; FString CppType ; int32)",
    "insertText": "GetIndexByValue(int64 InValue)"
  },
  {
    "label": "GetIndexByName()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndexByName(FName InName, EGetByNameFlags Flags = EGetByNameFlags::None)"
  },
  {
    "label": "GetNameByValue()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetNameByValue(int64 InValue)"
  },
  {
    "label": "GetValueByName()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetValueByName(FName InName, EGetByNameFlags Flags = EGetByNameFlags::None)"
  },
  {
    "label": "GetValueOrBitfieldFromString()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetValueOrBitfieldFromString(FStringView InString, EGetByNameFlags LookupFlags = EGetByNameFlags::None)"
  },
  {
    "label": "GetNameStringByIndex()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNameStringByIndex(int32 InIndex)"
  },
  {
    "label": "GetIndexByNameString()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetIndexByNameString(const FString& SearchString, EGetByNameFlags Flags = EGetByNameFlags::None)"
  },
  {
    "label": "GetNameStringByValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNameStringByValue(int64 InValue)"
  },
  {
    "label": "GetValueOrBitfieldAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetValueOrBitfieldAsString(int64 InValue)"
  },
  {
    "label": "GetValueOrBitfieldAsAuthoredNameString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetValueOrBitfieldAsAuthoredNameString(int64 InValue)"
  },
  {
    "label": "GetValueOrBitfieldAsDisplayNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetValueOrBitfieldAsDisplayNameText(int64 InValue)"
  },
  {
    "label": "FindNameStringByValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindNameStringByValue(FString& Out, int64 InValue)"
  },
  {
    "label": "GetValueByNameString()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetValueByNameString(const FString& SearchString, EGetByNameFlags Flags = EGetByNameFlags::None)"
  },
  {
    "label": "GetDisplayNameTextByIndex()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayNameTextByIndex(int32 InIndex)"
  },
  {
    "label": "GetDisplayNameTextByValue()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayNameTextByValue(int64 InValue)"
  },
  {
    "label": "FindDisplayNameTextByValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindDisplayNameTextByValue(FText& Out, int64 InValue)"
  },
  {
    "label": "GetAuthoredNameStringByIndex()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAuthoredNameStringByIndex(int32 InIndex)"
  },
  {
    "label": "GetAuthoredNameStringByValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAuthoredNameStringByValue(int64 InValue)"
  },
  {
    "label": "FindAuthoredNameStringByValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindAuthoredNameStringByValue(FString& Out, int64 InValue)"
  },
  {
    "label": "GetMaxEnumValue()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetMaxEnumValue()"
  },
  {
    "label": "IsValidEnumValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidEnumValue(int64 InValue)"
  },
  {
    "label": "IsValidEnumValueOrBitfield()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidEnumValueOrBitfield(int64 InValue)"
  },
  {
    "label": "IsValidEnumName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidEnumName(FName InName)"
  },
  {
    "label": "RemoveNamesFromPrimaryList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNamesFromPrimaryList()"
  },
  {
    "label": "ResolveEnumerator()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "ResolveEnumerator(FArchive& Ar, int64 EnumeratorIndex)"
  },
  {
    "label": "SetEnumDisplayNameFn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEnumDisplayNameFn(FEnumDisplayNameFn InEnumDisplayNameFn)"
  },
  {
    "label": "GetCppForm()",
    "kind": "Method",
    "detail": "Function (EnumDisplayNameFn = InEnumDisplayNameFn ; } ECppForm)",
    "insertText": "GetCppForm()"
  },
  {
    "label": "HasAnyEnumFlags()",
    "kind": "Method",
    "detail": "Function (EnumFlags | = FlagsToSet ; } bool)",
    "insertText": "HasAnyEnumFlags(EEnumFlags InFlags)"
  },
  {
    "label": "IsFullEnumName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFullEnumName(const TCHAR* InEnumName)"
  },
  {
    "label": "GenerateFullEnumName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GenerateFullEnumName(const TCHAR* InEnumName)"
  },
  {
    "label": "LookupEnumName()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "LookupEnumName(FName PackageName, FName TestName, EFindFirstObjectOptions Options = EFindFirstObjectOptions::None, UEnum** OutFoundEnum = nullptr)"
  },
  {
    "label": "LookupEnumNameSlow()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "LookupEnumNameSlow(FName PackageName, const TCHAR* InTestShortName, EFindFirstObjectOptions Options = EFindFirstObjectOptions::None, UEnum** OutFoundEnum = nullptr)"
  },
  {
    "label": "ParseEnum()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "ParseEnum(const TCHAR*& Str)"
  },
  {
    "label": "ContainsExistingMax()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsExistingMax()"
  },
  {
    "label": "SetEnums()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetEnums(TArray<TPair<FName, int64>>& InNames, ECppForm InCppForm, EEnumFlags InFlags = EEnumFlags::None, bool bAddMaxKeyIfMissing = true)"
  },
  {
    "label": "NumEnums()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumEnums()"
  },
  {
    "label": "GenerateEnumPrefix()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GenerateEnumPrefix()"
  },
  {
    "label": "GetToolTipTextByIndex()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FText)",
    "insertText": "GetToolTipTextByIndex(int32 NameIndex)"
  },
  {
    "label": "HasMetaData()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_METADATA bool)",
    "insertText": "HasMetaData(const TCHAR* Key, int32 NameIndex=INDEX_NONE)"
  },
  {
    "label": "GetMetaData()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMetaData(const TCHAR* Key, int32 NameIndex=INDEX_NONE, bool bAllowRemap=true)"
  },
  {
    "label": "SetMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMetaData(const TCHAR* Key, const TCHAR* InValue, int32 NameIndex=INDEX_NONE)"
  },
  {
    "label": "RemoveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMetaData(const TCHAR* Key, int32 NameIndex=INDEX_NONE)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (# endif template<T> FString)",
    "insertText": "GetValueAsString(const TCHAR* EnumPath, const T EnumeratorValue)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (} template<T> FString)",
    "insertText": "GetValueAsString(const TCHAR* EnumPath, const TEnumAsByte<T> EnumeratorValue)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "GetValueAsString(const TCHAR* EnumPath, const T EnumeratorValue, FString& out_StringValue)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (out_StringValue =)",
    "insertText": "GetValueAsString(EnumPath, EnumeratorValue)"
  },
  {
    "label": "GetValueOrBitfieldAsString()",
    "kind": "Method",
    "detail": "Function (} template<T> FString)",
    "insertText": "GetValueOrBitfieldAsString(const TCHAR* EnumPath, const T EnumeratorValue)"
  },
  {
    "label": "GetValueOrBitfieldAsString()",
    "kind": "Method",
    "detail": "Function (} template<T> FString)",
    "insertText": "GetValueOrBitfieldAsString(const TCHAR* EnumPath, const TEnumAsByte<T> EnumeratorValue)"
  },
  {
    "label": "GetValueOrBitfieldAsString()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "GetValueOrBitfieldAsString(const TCHAR* EnumPath, const T EnumeratorValue, FString& out_StringValue)"
  },
  {
    "label": "GetValueOrBitfieldAsString()",
    "kind": "Method",
    "detail": "Function (out_StringValue =)",
    "insertText": "GetValueOrBitfieldAsString(EnumPath, EnumeratorValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (} template<T> FText)",
    "insertText": "GetDisplayValueAsText(const TCHAR* EnumPath, const T EnumeratorValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (} template<T> FText)",
    "insertText": "GetDisplayValueAsText(const TCHAR* EnumPath, const TEnumAsByte<T> EnumeratorValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "GetDisplayValueAsText(const TCHAR* EnumPath, const T EnumeratorValue, FText& out_TextValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (out_TextValue =)",
    "insertText": "GetDisplayValueAsText(EnumPath, EnumeratorValue)"
  },
  {
    "label": "GetValueAsName()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> FName)",
    "insertText": "GetValueAsName(const EnumType EnumeratorValue)"
  },
  {
    "label": "EnumType()",
    "kind": "Method",
    "detail": "Function (UEnum* EnumClass = StaticEnum<)",
    "insertText": "EnumType()"
  },
  {
    "label": "GetValueAsName()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> FName)",
    "insertText": "GetValueAsName(const TEnumAsByte<EnumType> EnumeratorValue)"
  },
  {
    "label": "GetValueAsName()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> void)",
    "insertText": "GetValueAsName(const EnumType EnumeratorValue, FName& out_NameValue)"
  },
  {
    "label": "GetValueAsName()",
    "kind": "Method",
    "detail": "Function (out_NameValue =)",
    "insertText": "GetValueAsName(EnumeratorValue)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> FString)",
    "insertText": "GetValueAsString(const EnumType EnumeratorValue)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> FString)",
    "insertText": "GetValueAsString(const TEnumAsByte<EnumType> EnumeratorValue)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> void)",
    "insertText": "GetValueAsString(const EnumType EnumeratorValue, FString& out_StringValue)"
  },
  {
    "label": "GetValueAsString()",
    "kind": "Method",
    "detail": "Function (out_StringValue =)",
    "insertText": "GetValueAsString(EnumeratorValue)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<EnumType)",
    "insertText": "UE_REQUIRES(TIsEnum<EnumType>::Value) > FORCEINLINE static FString GetValueOrBitfieldAsString(const EnumType EnumeratorValue)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<EnumType)",
    "insertText": "UE_REQUIRES(!TIsEnumClass<EnumType>::Value) > FORCEINLINE static FString GetValueOrBitfieldAsString(const TEnumAsByte<EnumType> EnumeratorValue)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<EnumType,IntegralType)",
    "insertText": "UE_REQUIRES(TIsEnum<EnumType>::Value && std::is_integral_v<IntegralType>) > FORCEINLINE static FString GetValueOrBitfieldAsString(const IntegralType EnumeratorValue)"
  },
  {
    "label": "GetValueOrBitfieldAsString()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> void)",
    "insertText": "GetValueOrBitfieldAsString(const EnumType EnumeratorValue, FString& out_StringValue)"
  },
  {
    "label": "GetValueOrBitfieldAsString()",
    "kind": "Method",
    "detail": "Function (out_StringValue =)",
    "insertText": "GetValueOrBitfieldAsString(EnumeratorValue)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<EnumType,IntegralType)",
    "insertText": "UE_REQUIRES(TIsEnum<EnumType>::Value && std::is_integral_v<IntegralType>) > FORCEINLINE static void GetValueOrBitfieldAsString(const IntegralType EnumeratorValue, FString& out_StringValue)"
  },
  {
    "label": "EnumType()",
    "kind": "Method",
    "detail": "Function (out_StringValue = GetValueOrBitfieldAsString<)",
    "insertText": "EnumType(EnumeratorValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> FText)",
    "insertText": "GetDisplayValueAsText(const EnumType EnumeratorValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> FText)",
    "insertText": "GetDisplayValueAsText(const TEnumAsByte<EnumType> EnumeratorValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (} template<EnumType> void)",
    "insertText": "GetDisplayValueAsText(const EnumType EnumeratorValue, FText& out_TextValue)"
  },
  {
    "label": "GetDisplayValueAsText()",
    "kind": "Method",
    "detail": "Function (out_TextValue =)",
    "insertText": "GetDisplayValueAsText(EnumeratorValue)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "UEnum()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UEnum()"
  },
  {
    "label": "AddNamesToPrimaryList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNamesToPrimaryList()"
  },
  {
    "label": "LookupAllEnumNamesWithOptions()",
    "kind": "Method",
    "detail": "Function (private : UEnum*)",
    "insertText": "LookupAllEnumNamesWithOptions(FName PackageName, EFindFirstObjectOptions Options, TFunctionRef<bool(FName)> CompareNameFunction)"
  },
  {
    "label": "UEnum()",
    "kind": "Method",
    "detail": "Function (UEnum* EnumClass = FindObject<)",
    "insertText": "UEnum(nullptr, EnumPath)"
  },
  {
    "label": "UE_CLOG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CLOG(!EnumClass, LogClass, Fatal, TEXT(\"Couldn't find enum '%s'\"), EnumPath)"
  },
  {
    "label": "GetValueOrBitfieldAsString_Internal()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetValueOrBitfieldAsString_Internal(const TCHAR* EnumPath, const int64 EnumeratorValue)"
  },
  {
    "label": "GetDisplayValueAsText_Internal()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetDisplayValueAsText_Internal(const TCHAR* EnumPath, const int64 EnumeratorValue)"
  },
  {
    "label": "RenameNamesAfterDuplication()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RenameNamesAfterDuplication()"
  },
  {
    "label": "GetBaseEnumNameOnDuplication()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBaseEnumNameOnDuplication()"
  },
  {
    "label": "FCppClassTypeInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FCppClassTypeInfoStatic { bool bIsAbstract ; } ; struct FCppClassTypeInfo : ICppClassTypeInfo {)",
    "insertText": "FCppClassTypeInfo(const FCppClassTypeInfoStatic* InInfo) : Info(InInfo)"
  },
  {
    "label": "FCppClassTypeInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCppClassTypeInfo(const FCppClassTypeInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCppClassTypeInfo&)",
    "insertText": "operator(const FCppClassTypeInfo&)"
  },
  {
    "label": "FImplementedInterface()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FImplementedInterface(UClass* InClass, int32 InOffset, bool InImplementedByK2) : Class(InClass) , PointerOffset(InOffset) , bImplementedByK2(InImplementedByK2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FImplementedInterface& A)"
  },
  {
    "label": "FNativeFunctionLookup()",
    "kind": "Method",
    "detail": "Function (} ; struct FNativeFunctionLookup { FName Name ; FNativeFuncPtr Pointer ;)",
    "insertText": "FNativeFunctionLookup(FName InName, FNativeFuncPtr InPointer) : Name(InName) , Pointer(InPointer)"
  },
  {
    "label": "UFunction()",
    "kind": "Method",
    "detail": "Function (} } ; namespace EIncludeSuperFlag { enum Type { ExcludeSuper,IncludeSuper } ; } struct FClassFunctionLinkInfo {)",
    "insertText": "UFunction(*CreateFuncPtr)()"
  },
  {
    "label": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR()",
    "kind": "Method",
    "detail": "Function (const char* FuncNameUTF8 ; } ; enum class EGetSparseClassDataMethod : uint8 { CreateIfNull,ArchetypeIfNull,ReturnIfNull,} ; class UClass : public UStruct {)",
    "insertText": "DECLARE_CASTED_CLASS_INTRINSIC_NO_CTOR(UClass, UStruct, 0, TEXT(\"/Script/CoreUObject\"), CASTCLASS_UClass, COREUOBJECT_API) DECLARE_WITHIN_UPACKAGE()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (class FBlueprintEditorUtils ; class FBlueprintCompileReinstancer ; typedef)",
    "insertText": "void(*ClassConstructorType) (const FObjectInitializer&)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "UObject(*ClassVTableHelperCtorCallerType) (FVTableHelper& Helper)"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "UClass(*StaticClassFunctionType)()"
  },
  {
    "label": "DestroyPropertiesPendingDestruction()",
    "kind": "Method",
    "detail": "Function (ClassConstructorType ClassConstructor ; ClassVTableHelperCtorCallerType ClassVTableHelperCtorCaller ; FUObjectCppClassStaticFunctions CppClassStaticFunctions ; int32 ClassUnique ; int32 FirstOwnedClassRep = 0 ; bool bCooked ; bool bLayoutChanging ; EClassFlags ClassFlags ; EClassCastFlags ClassCastFlags ; TObjectPtr<UClass> ClassWithin ; # if WITH_EDITORONLY_DATA TObjectPtr<UObject> ClassGeneratedBy ; FField* PropertiesPendingDestruction ; void)",
    "insertText": "DestroyPropertiesPendingDestruction()"
  },
  {
    "label": "ConditionalRecompileClass()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR void)",
    "insertText": "ConditionalRecompileClass(FUObjectSerializeContext* InLoadContext)"
  },
  {
    "label": "FlushCompilationQueueForLevel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushCompilationQueueForLevel()"
  },
  {
    "label": "GetHideFunctions()",
    "kind": "Method",
    "detail": "Function (} # endif FName ClassConfigName ; TArray<FRepRecord> ClassReps ; TArray<UField*> NetFields ; # if WITH_EDITOR void)",
    "insertText": "GetHideFunctions(TArray<FString>& OutHideFunctions)"
  },
  {
    "label": "IsFunctionHidden()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionHidden(const TCHAR* InFunction)"
  },
  {
    "label": "GetAutoExpandCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAutoExpandCategories(TArray<FString>& OutAutoExpandCategories)"
  },
  {
    "label": "IsAutoExpandCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoExpandCategory(const TCHAR* InCategory)"
  },
  {
    "label": "GetPrioritizeCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrioritizeCategories(TArray<FString>& OutPrioritizedCategories)"
  },
  {
    "label": "IsPrioritizeCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPrioritizeCategory(const TCHAR* InCategory)"
  },
  {
    "label": "GetAutoCollapseCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAutoCollapseCategories(TArray<FString>& OutAutoCollapseCategories)"
  },
  {
    "label": "IsAutoCollapseCategory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoCollapseCategory(const TCHAR* InCategory)"
  },
  {
    "label": "GetClassGroupNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetClassGroupNames(TArray<FString>& OutClassGroupNames)"
  },
  {
    "label": "IsClassGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsClassGroupName(const TCHAR* InGroupName)"
  },
  {
    "label": "CallAddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CallAddReferencedObjects(UObject* This, FReferenceCollector& Collector)"
  },
  {
    "label": "GetAddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (CppClassStaticFunctions .)",
    "insertText": "GetAddReferencedObjects()(This, Collector)"
  },
  {
    "label": "CallDeclareCustomVersions()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITORONLY_DATA void)",
    "insertText": "CallDeclareCustomVersions(FArchive& Ar)"
  },
  {
    "label": "GetDeclareCustomVersions()",
    "kind": "Method",
    "detail": "Function (CppClassStaticFunctions .)",
    "insertText": "GetDeclareCustomVersions()(Ar, this)"
  },
  {
    "label": "CallAppendToClassSchema()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CallAppendToClassSchema(FAppendToClassSchemaContext& Context)"
  },
  {
    "label": "GetAppendToClassSchema()",
    "kind": "Method",
    "detail": "Function (CppClassStaticFunctions .)",
    "insertText": "GetAppendToClassSchema()(Context)"
  },
  {
    "label": "CallDeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CallDeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses)"
  },
  {
    "label": "GetDeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (CppClassStaticFunctions .)",
    "insertText": "GetDeclareConstructClasses()(OutConstructClasses, this)"
  },
  {
    "label": "GetSparseClassData()",
    "kind": "Method",
    "detail": "Function (} # endif TObjectPtr<UObject> ClassDefaultObject ; protected : void* SparseClassData ; TObjectPtr<UScriptStruct> SparseClassDataStruct ; public : const void*)",
    "insertText": "GetSparseClassData(const EGetSparseClassDataMethod GetMethod)"
  },
  {
    "label": "GetOrCreateSparseClassData()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetOrCreateSparseClassData()"
  },
  {
    "label": "GetSparseClassDataStruct()",
    "kind": "Method",
    "detail": "Function (} UScriptStruct*)",
    "insertText": "GetSparseClassDataStruct()"
  },
  {
    "label": "SetSparseClassDataStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSparseClassDataStruct(UScriptStruct* InSparseClassDataStruct)"
  },
  {
    "label": "ClearSparseClassDataStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSparseClassDataStruct(bool bInRecomplingOnLoad)"
  },
  {
    "label": "AssembleReferenceTokenStreams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssembleReferenceTokenStreams()"
  },
  {
    "label": "GenerateFunctionList()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "GenerateFunctionList(TArray<FName>& OutArray)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FUClassFuncScopeReadLock)",
    "insertText": "ScopeLock(FuncMapLock)"
  },
  {
    "label": "GenerateKeyArray()",
    "kind": "Method",
    "detail": "Function (FuncMap .)",
    "insertText": "GenerateKeyArray(OutArray)"
  },
  {
    "label": "CreateSparseClassData()",
    "kind": "Method",
    "detail": "Function (} # endif protected : void*)",
    "insertText": "CreateSparseClassData()"
  },
  {
    "label": "CleanupSparseClassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupSparseClassData()"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR TOptional<FCppClassTypeInfo> CppTypeInfo ; # endif TMap<FName,TObjectPtr<UFunction>> FuncMap ; FUClassFuncLock FuncMapLock ; TMap<FName,UFunction*> AllFunctionsCache ; FUClassFuncLock AllFunctionsCacheLock ; public : TArray<FImplementedInterface> Interfaces ; UE::GC::FSchemaOwner ReferenceSchema ; TArray<FNativeFunctionLookup> NativeFunctionLookupTable ; public :)",
    "insertText": "UClass(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UClass(const FObjectInitializer& ObjectInitializer, UClass* InSuperClass)"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UClass(EStaticConstructor, FName InName, uint32 InSize, uint32 InAlignment, EClassFlags InClassFlags, EClassCastFlags InClassCastFlags, const TCHAR* InClassConfigName, EObjectFlags InFlags, ClassConstructorType InClassConstructor, ClassVTableHelperCtorCallerType InClassVTableHelperCtorCaller, FUObjectCppClassStaticFunctions&& InCppClassStaticFunctions)"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UClass()"
  },
  {
    "label": "HotReloadPrivateStaticClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_RELOAD bool)",
    "insertText": "HotReloadPrivateStaticClass(uint32 InSize, EClassFlags InClassFlags, EClassCastFlags InClassCastFlags, const TCHAR* InConfigName, ClassConstructorType InClassConstructor, ClassVTableHelperCtorCallerType InClassVTableHelperCtorCaller, FUObjectCppClassStaticFunctions&& InCppClassStaticFunctions, class UClass* TClass_Super_StaticClass, class UClass* TClass_WithinClass_StaticClass)"
  },
  {
    "label": "ReplaceNativeFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceNativeFunction(FName InName, FNativeFuncPtr InPointer, bool bAddToFunctionRemapTable)"
  },
  {
    "label": "GetAuthoritativeClass()",
    "kind": "Method",
    "detail": "Function (# endif UClass*)",
    "insertText": "GetAuthoritativeClass()"
  },
  {
    "label": "AddNativeFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddNativeFunction(const ANSICHAR* InName, FNativeFuncPtr InPointer)"
  },
  {
    "label": "AddNativeFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNativeFunction(const WIDECHAR* InName, FNativeFuncPtr InPointer)"
  },
  {
    "label": "AddFunctionToFunctionMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFunctionToFunctionMap(UFunction* Function, FName FuncName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FuncMap .)",
    "insertText": "Add(FuncName, Function)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (} { FUClassFuncScopeWriteLock)",
    "insertText": "ScopeLock(AllFunctionsCacheLock)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (AllFunctionsCache .)",
    "insertText": "Remove(FuncName)"
  },
  {
    "label": "CreateLinkAndAddChildFunctionsToMap()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CreateLinkAndAddChildFunctionsToMap(const FClassFunctionLinkInfo* Functions, uint32 NumFunctions)"
  },
  {
    "label": "RemoveFunctionFromFunctionMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFunctionFromFunctionMap(UFunction* Function)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (FuncMap .)",
    "insertText": "Remove(Function->GetFName())"
  },
  {
    "label": "ClearFunctionMapsCaches()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ClearFunctionMapsCaches()"
  },
  {
    "label": "FindFunctionByName()",
    "kind": "Method",
    "detail": "Function (UFunction*)",
    "insertText": "FindFunctionByName(FName InName, EIncludeSuperFlag::Type IncludeSuper = EIncludeSuperFlag::IncludeSuper)"
  },
  {
    "label": "DeferredRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferredRegister(UClass *UClassStaticClass,const TCHAR* PackageName,const TCHAR* InName)"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename(const TCHAR* NewName = nullptr, UObject* NewOuter = nullptr, ERenameFlags Flags = REN_None)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "GetRestoreForUObjectOverwrite()",
    "kind": "Method",
    "detail": "Function (FRestoreForUObjectOverwrite*)",
    "insertText": "GetRestoreForUObjectOverwrite()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "ThreadedPostLoadAssetRegistryTagsOverride()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR protected : void)",
    "insertText": "ThreadedPostLoadAssetRegistryTagsOverride(FPostLoadAssetRegistryTagsContext& Context)"
  },
  {
    "label": "IsAsset()",
    "kind": "Method",
    "detail": "Function (public : # endif bool)",
    "insertText": "IsAsset()"
  },
  {
    "label": "SetSuperStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuperStruct(UStruct* NewSuperStruct)"
  },
  {
    "label": "TryFindTypeSlow()",
    "kind": "Method",
    "detail": "Function (} UField*)",
    "insertText": "TryFindTypeSlow(UClass* TypeClass, const FString& InPathNameOrShortName, EFindFirstObjectOptions InOptions = EFindFirstObjectOptions::None)"
  },
  {
    "label": "TryFindTypeSlow()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "TryFindTypeSlow(const FString& InShortNameOrPathName, EFindFirstObjectOptions InOptions = EFindFirstObjectOptions::None)"
  },
  {
    "label": "TryFindTypeSlowSafe()",
    "kind": "Method",
    "detail": "Function (} UField*)",
    "insertText": "TryFindTypeSlowSafe(UClass* TypeClass, const FString& InPathNameOrShortName, EFindFirstObjectOptions InOptions = EFindFirstObjectOptions::None)"
  },
  {
    "label": "TryFindTypeSlowSafe()",
    "kind": "Method",
    "detail": "Function (template<T> T*)",
    "insertText": "TryFindTypeSlowSafe(const FString& InShortNameOrPathName, EFindFirstObjectOptions InOptions = EFindFirstObjectOptions::None)"
  },
  {
    "label": "TryConvertShortTypeNameToPathName()",
    "kind": "Method",
    "detail": "Function (} FTopLevelAssetPath)",
    "insertText": "TryConvertShortTypeNameToPathName(UClass* TypeClass, const FString& InShortTypeName, ELogVerbosity::Type AmbiguousMessageVerbosity = ELogVerbosity::NoLogging, const TCHAR* AmbiguousClassMessage = nullptr)"
  },
  {
    "label": "TryConvertShortTypeNameToPathName()",
    "kind": "Method",
    "detail": "Function (template<T> FTopLevelAssetPath)",
    "insertText": "TryConvertShortTypeNameToPathName(const FString& InShortTypeName, ELogVerbosity::Type AmbiguousMessageVerbosity = ELogVerbosity::NoLogging, const TCHAR* AmbiguousClassMessage = nullptr)"
  },
  {
    "label": "TryFixShortClassNameExportPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TryFixShortClassNameExportPath(FString& InOutExportPathToFix, ELogVerbosity::Type AmbiguousMessageVerbosity = ELogVerbosity::NoLogging, const TCHAR* AmbiguousClassMessage = nullptr, bool bClearOnError = false)"
  },
  {
    "label": "ConvertPathNameToShortTypeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertPathNameToShortTypeName(FStringView InClassPathOrShortTypeName)"
  },
  {
    "label": "ConvertFullNameToShortTypeFullName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertFullNameToShortTypeFullName(FStringView InFullName)"
  },
  {
    "label": "IsShortTypeName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShortTypeName(FStringView ClassPathOrShortTypeName)"
  },
  {
    "label": "GetCppTypeInfo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const ICppClassTypeInfo*)",
    "insertText": "GetCppTypeInfo()"
  },
  {
    "label": "SetCppTypeInfoStatic()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "SetCppTypeInfoStatic(const FCppClassTypeInfoStatic* InCppTypeInfoStatic)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "check(InCppTypeInfoStatic)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (CppTypeInfo .)",
    "insertText": "Emplace(InCppTypeInfoStatic)"
  },
  {
    "label": "GetConfigName()",
    "kind": "Method",
    "detail": "Function (# endif } const FString)",
    "insertText": "GetConfigName()"
  },
  {
    "label": "GetSuperClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetSuperClass()"
  },
  {
    "label": "GetDefaultPropertiesFeedbackContext()",
    "kind": "Method",
    "detail": "Function (} class FFeedbackContext&)",
    "insertText": "GetDefaultPropertiesFeedbackContext()"
  },
  {
    "label": "GetDefaultsCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDefaultsCount()"
  },
  {
    "label": "GetDefaultObject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetDefaultObject(bool bCreateIfNeeded = true)"
  },
  {
    "label": "InternalCreateDefaultObjectWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalCreateDefaultObjectWrapper()"
  },
  {
    "label": "PostInitInstance()",
    "kind": "Method",
    "detail": "Function (} return ClassDefaultObject ; } void)",
    "insertText": "PostInitInstance(UObject* InObj, FObjectInstancingGraph* InstanceGraph)"
  },
  {
    "label": "PostLoadInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostLoadInstance(UObject* InObj)"
  },
  {
    "label": "InitPropertiesFromCustomList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitPropertiesFromCustomList(uint8* DataPtr, const uint8* DefaultDataPtr)"
  },
  {
    "label": "SetupObjectInitializer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupObjectInitializer(FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "CanCreateAssetOfClass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCreateAssetOfClass()"
  },
  {
    "label": "GetPersistentUberGraphFrame()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetPersistentUberGraphFrame(UObject* Obj, UFunction* FuncToCheck)"
  },
  {
    "label": "DestroyPersistentUberGraphFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DestroyPersistentUberGraphFrame(UObject* Obj, bool bSkipSuperClass = false)"
  },
  {
    "label": "GetDefaultObject()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetDefaultObject()"
  },
  {
    "label": "GetDefaultSubobjectByName()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "GetDefaultSubobjectByName(FName ToFind)"
  },
  {
    "label": "AddDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultSubobject(UObject* NewSubobject, const UClass* BaseClass)"
  },
  {
    "label": "GetDefaultObjectSubobjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDefaultObjectSubobjects(TArray<UObject*>& OutDefaultSubobjects)"
  },
  {
    "label": "HasAllClassFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllClassFlags(EClassFlags FlagsToCheck)"
  },
  {
    "label": "GetClassFlags()",
    "kind": "Method",
    "detail": "Function (} EClassFlags)",
    "insertText": "GetClassFlags()"
  },
  {
    "label": "HasAllCastFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAllCastFlags(EClassCastFlags FlagsToCheck)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "AssembleReferenceTokenStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssembleReferenceTokenStream(bool bForce = false)"
  },
  {
    "label": "ImplementsInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImplementsInterface(const class UClass* SomeInterface)"
  },
  {
    "label": "SerializeDefaultObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeDefaultObject(UObject* Object, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "SerializeDefaultObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeDefaultObject(UObject* Object, FArchive& Ar)"
  },
  {
    "label": "SerializeDefaultObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeDefaultObject(Object, FStructuredArchiveFromArchive(Ar).GetSlot())"
  },
  {
    "label": "SerializeSparseClassData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeSparseClassData(FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "PostLoadDefaultObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoadDefaultObject(UObject* Object)"
  },
  {
    "label": "PurgeClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PurgeClass(bool bRecompilingOnLoad)"
  },
  {
    "label": "FindCommonBase()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "FindCommonBase(UClass* InClassA, UClass* InClassB)"
  },
  {
    "label": "FindCommonBase()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "FindCommonBase(const TArray<UClass*>& InClasses)"
  },
  {
    "label": "IsFunctionImplementedInScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFunctionImplementedInScript(FName InFunctionName)"
  },
  {
    "label": "HasProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasProperty(const FProperty* InProperty)"
  },
  {
    "label": "FindArchetype()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "FindArchetype(const UClass* ArchetypeClass, const FName ArchetypeName)"
  },
  {
    "label": "GetArchetypeForSparseClassData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetArchetypeForSparseClassData()"
  },
  {
    "label": "GetSparseClassDataArchetypeStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct*)",
    "insertText": "GetSparseClassDataArchetypeStruct()"
  },
  {
    "label": "GetDefaultObjectPreloadDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDefaultObjectPreloadDependencies(TArray<UObject*>& OutDeps)"
  },
  {
    "label": "SetUpRuntimeReplicationData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUpRuntimeReplicationData()"
  },
  {
    "label": "IsSafeToSerializeToStructuredArchives()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSafeToSerializeToStructuredArchives(UClass* InClass)"
  },
  {
    "label": "CanCreateInstanceDataObject()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA UE_INTERNAL bool)",
    "insertText": "CanCreateInstanceDataObject()"
  },
  {
    "label": "GetReinstancedClassPathName()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_EDITOR FTopLevelAssetPath)",
    "insertText": "GetReinstancedClassPathName()"
  },
  {
    "label": "IsA()",
    "kind": "Method",
    "detail": "Function (# endif private : bool)",
    "insertText": "IsA(const UClass* Parent)"
  },
  {
    "label": "Implements()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "Implements()"
  },
  {
    "label": "FindFunction()",
    "kind": "Method",
    "detail": "Function (} UFunction*)",
    "insertText": "FindFunction(FName InName)"
  },
  {
    "label": "FindFunctionChecked()",
    "kind": "Method",
    "detail": "Function (} UFunction*)",
    "insertText": "FindFunctionChecked(FName InName)"
  },
  {
    "label": "ValidateRuntimeReplicationData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ValidateRuntimeReplicationData()"
  },
  {
    "label": "AssembleReferenceTokenStreamInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssembleReferenceTokenStreamInternal(bool bForce = false)"
  },
  {
    "label": "CreateDefaultObject()",
    "kind": "Method",
    "detail": "Function (protected : UObject*)",
    "insertText": "CreateDefaultObject()"
  },
  {
    "label": "GetReinstancedClassPathName_Impl()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FTopLevelAssetPath)",
    "insertText": "GetReinstancedClassPathName_Impl()"
  },
  {
    "label": "__DefaultConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__DefaultConstructor(X)"
  },
  {
    "label": "InternalVTableHelperCtorCaller()",
    "kind": "Method",
    "detail": "Function (} template<class T> UObject*)",
    "insertText": "InternalVTableHelperCtorCaller(FVTableHelper& Helper)"
  },
  {
    "label": "InitializePrivateStaticClass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializePrivateStaticClass(class UClass* TClass_Super_StaticClass, class UClass* TClass_PrivateStaticClass, class UClass* TClass_WithinClass_StaticClass, const TCHAR* PackageName, const TCHAR* Name)"
  },
  {
    "label": "GetPrivateStaticClassBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPrivateStaticClassBody(const TCHAR* PackageName, const TCHAR* Name, UClass*& ReturnClass, void(*RegisterNativeFunc)(), uint32 InSize, uint32 InAlignment, EClassFlags InClassFlags, EClassCastFlags InClassCastFlags, const TCHAR* InConfigName, UClass::ClassConstructorType InClassConstructor, UClass::ClassVTableHelperCtorCallerType InClassVTableHelperCtorCaller, FUObjectCppClassStaticFunctions&& InCppClassStaticFunctions, UClass::StaticClassFunctionType InSuperClassFn, UClass::StaticClassFunctionType InWithinClassFn)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EInstancePropertyValueFlags { None = 0 x00,CausesInstancing = 0 x01,AllowSelfReference = 0 x02,DoNotCreateNewInstance = 0 x04 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EInstancePropertyValueFlags)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0 x00,DisableInstancing = 0 x01,InstanceTemplatesOnly = 0 x02,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EObjectInstancingGraphOptions)"
  },
  {
    "label": "FObjectInstancingGraph()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FObjectInstancingGraph(bool bDisableInstancing = false)"
  },
  {
    "label": "FObjectInstancingGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectInstancingGraph(EObjectInstancingGraphOptions InOptions)"
  },
  {
    "label": "FObjectInstancingGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectInstancingGraph(class UObject* DestinationSubobjectRoot, EObjectInstancingGraphOptions InOptions = EObjectInstancingGraphOptions::None)"
  },
  {
    "label": "HasDestinationRoot()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDestinationRoot()"
  },
  {
    "label": "GetDestinationRoot()",
    "kind": "Method",
    "detail": "Function (} const UObject*)",
    "insertText": "GetDestinationRoot()"
  },
  {
    "label": "GetDestinationObject()",
    "kind": "Method",
    "detail": "Function (class UObject*)",
    "insertText": "GetDestinationObject(class UObject* SourceObject)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EInstancePropertyValueFlags Flags = EInstancePropertyValueFlags::None ;)",
    "insertText": "if(bCausesInstancing)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Flags | = EInstancePropertyValueFlags::CausesInstancing ; })",
    "insertText": "if(bAllowSelfReference)"
  },
  {
    "label": "InstancePropertyValue()",
    "kind": "Method",
    "detail": "Function (Flags | = EInstancePropertyValueFlags::AllowSelfReference ; } return)",
    "insertText": "InstancePropertyValue(SourceComponent, CurrentValue, CurrentObject, Flags)"
  },
  {
    "label": "InstancePropertyValue()",
    "kind": "Method",
    "detail": "Function (} class UObject*)",
    "insertText": "InstancePropertyValue(class UObject* SourceComponent, class UObject* CurrentValue, class UObject* CurrentObject, EInstancePropertyValueFlags Flags = EInstancePropertyValueFlags::None)"
  },
  {
    "label": "AddNewObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewObject(class UObject* ObjectInstance, class UObject* InArchetype = nullptr)"
  },
  {
    "label": "AddNewInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewInstance(class UObject* ObjectInstance, class UObject* InArchetype = nullptr)"
  },
  {
    "label": "RetrieveObjectInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RetrieveObjectInstances(class UObject* SearchOuter, TArray<class UObject*>& out_Objects)"
  },
  {
    "label": "ForEachObjectInstance()",
    "kind": "Method",
    "detail": "Function (template<Predicate> void)",
    "insertText": "ForEachObjectInstance(Predicate Pred)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (UObject* InstancedObject = It .)",
    "insertText": "Value()"
  },
  {
    "label": "Pred()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pred(InstancedObject)"
  },
  {
    "label": "EnableSubobjectInstancing()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EnableSubobjectInstancing(bool bEnabled)"
  },
  {
    "label": "IsSubobjectInstancingEnabled()",
    "kind": "Method",
    "detail": "Function (InstancingOptions& = ~ EObjectInstancingGraphOptions::DisableInstancing ; } else { InstancingOptions | = EObjectInstancingGraphOptions::DisableInstancing ; } } bool)",
    "insertText": "IsSubobjectInstancingEnabled()"
  },
  {
    "label": "SetLoadingObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLoadingObject(bool bIsLoading)"
  },
  {
    "label": "AddPropertyToSubobjectExclusionList()",
    "kind": "Method",
    "detail": "Function (bLoadingObject = bIsLoading ; } void)",
    "insertText": "AddPropertyToSubobjectExclusionList(const FProperty* Property)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SubobjectInstantiationExclusionList .)",
    "insertText": "Add(Property)"
  },
  {
    "label": "IsPropertyInSubobjectExclusionList()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPropertyInSubobjectExclusionList(const FProperty* Property)"
  },
  {
    "label": "IsCreatingArchetype()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "IsCreatingArchetype(bool bUserGeneratedOnly=true)"
  },
  {
    "label": "IsLoadingObject()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLoadingObject()"
  },
  {
    "label": "Expose_TNameOf()",
    "kind": "Method",
    "detail": "Function (class UObject* SourceRoot ; class UObject* DestinationRoot ; EObjectInstancingGraphOptions InstancingOptions ; bool bCreatingArchetype ; bool bLoadingObject ; TMap<class UObject*,class UObject*> SourceToDestinationMap ; TSet<const FProperty*> SubobjectInstantiationExclusionList ; } ;)",
    "insertText": "Expose_TNameOf(FObjectInstancingGraph)"
  },
  {
    "label": "Expose_TNameOf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Expose_TNameOf(FObjectInstancingGraph*)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (UClass const* const MyClass =)",
    "insertText": "GetClass()"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T*)",
    "insertText": "GetDefault(UClass *Class)"
  },
  {
    "label": "GetMutableDefault()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetMutableDefault(UClass *Class)"
  },
  {
    "label": "ArePropertiesTheSame()",
    "kind": "Method",
    "detail": "Function (} struct FStructUtils { bool)",
    "insertText": "ArePropertiesTheSame(const FProperty* A, const FProperty* B, bool bCheckPropertiesNames)"
  },
  {
    "label": "TheSameLayout()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TheSameLayout(const UStruct* StructA, const UStruct* StructB, bool bCheckPropertiesNames = false)"
  },
  {
    "label": "FindStructureInPackageChecked()",
    "kind": "Method",
    "detail": "Function (UStruct*)",
    "insertText": "FindStructureInPackageChecked(const TCHAR* StructName, const TCHAR* PackageName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_TEST || UE_BUILD_SHIPPING) COREUOBJECT_API static int32 AttemptToFindUninitializedScriptStructMembers()"
  },
  {
    "label": "AttemptToFindShortTypeNamesInMetaData()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA int32)",
    "insertText": "AttemptToFindShortTypeNamesInMetaData()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# endif # endif } ; struct FTestUninitializedScriptStructMembersTest { UObject* UninitializedObjectReference ; UObject* InitializedObjectReference = nullptr ; float UnusedValue ; } ; template<T,bool bHasStaticStruct = TModels_V<CStaticStructProvider,T>> struct TBaseStructureBase { UScriptStruct*)",
    "insertText": "Get()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> struct TVariantStructure {)",
    "insertText": "static_assert(sizeof(T) == 0, \"Unsupported for this type. Did you mean to use TBaseStructure?\")"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; # define)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(VARIANT, CORE)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Vector2, Vector2D)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Vector3, Vector)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Vector4, Vector4)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Plane4, Plane)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Quat4, Quat)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Rotator3, Rotator)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Transform3,Transform)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Matrix44, Matrix)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Box2, Box2D)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Ray3, Ray)"
  },
  {
    "label": "UE_DECLARE_CORE_VARIANT_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_CORE_VARIANT_TYPE(Sphere3, Sphere)"
  }
]