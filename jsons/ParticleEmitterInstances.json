[
  {
    "label": "UParticleEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleEmitter"
  },
  {
    "label": "UParticleLODLevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleLODLevel"
  },
  {
    "label": "UParticleModuleBeamModifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamModifier"
  },
  {
    "label": "UParticleModuleBeamNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamNoise"
  },
  {
    "label": "UParticleModuleBeamSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamSource"
  },
  {
    "label": "UParticleModuleBeamTarget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleBeamTarget"
  },
  {
    "label": "UParticleModuleSpawnPerUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleSpawnPerUnit"
  },
  {
    "label": "UParticleModuleTrailSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTrailSource"
  },
  {
    "label": "UParticleModuleTypeDataAnimTrail",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataAnimTrail"
  },
  {
    "label": "UParticleModuleTypeDataBeam2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataBeam2"
  },
  {
    "label": "UParticleModuleTypeDataMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataMesh"
  },
  {
    "label": "UParticleModuleTypeDataRibbon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleTypeDataRibbon"
  },
  {
    "label": "UParticleSystemComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSystemComponent"
  },
  {
    "label": "UParticleSpriteEmitter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleSpriteEmitter"
  },
  {
    "label": "UParticleModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModule"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UParticleModuleOrientationAxisLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleOrientationAxisLock"
  },
  {
    "label": "FLODBurstFired",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLODBurstFired"
  },
  {
    "label": "FParticleEmitterBuildInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEmitterBuildInfo"
  },
  {
    "label": "UParticleModuleRequired",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleRequired"
  },
  {
    "label": "UParticleModuleSpawn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UParticleModuleSpawn"
  },
  {
    "label": "UVectorField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVectorField"
  },
  {
    "label": "FParticleEmitterInstanceFixLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEmitterInstanceFixLayout"
  },
  {
    "label": "FParticleEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEmitterInstance"
  },
  {
    "label": "UPointLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPointLightComponent"
  },
  {
    "label": "FParticleEventInstancePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleEventInstancePayload"
  },
  {
    "label": "FScopeCycleCounterEmitter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeCycleCounterEmitter"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FParticleSpriteEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleSpriteEmitterInstance"
  },
  {
    "label": "FParticleMeshEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleMeshEmitterInstance"
  },
  {
    "label": "FParticleBeam2EmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleBeam2EmitterInstance"
  },
  {
    "label": "FParticleTrailsEmitterInstance_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleTrailsEmitterInstance_Base"
  },
  {
    "label": "EGetTrailDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGetTrailDirection"
  },
  {
    "label": "EGetTrailParticleOption",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EGetTrailParticleOption"
  },
  {
    "label": "FParticleRibbonEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleRibbonEmitterInstance"
  },
  {
    "label": "FParticleAnimTrailEmitterInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FParticleAnimTrailEmitterInstance"
  },
  {
    "label": "FAnimTrailParticleSpawnParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimTrailParticleSpawnParams"
  },
  {
    "label": "ENABLE_TRAILS_START_END_INDEX_OPTIMIZATION()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" ProfilingDebugging / ResourceSize . h \" # include \" Distributions . h \" # include \" Distributions / DistributionFloat . h \" # include \" ParticleHelper . h \" # include \" Distributions / DistributionVector . h \" # include \" Particles / Orientation / ParticleModuleOrientationAxisLock . h \" # define)",
    "insertText": "ENABLE_TRAILS_START_END_INDEX_OPTIMIZATION(0)"
  },
  {
    "label": "FParticleEmitterBuildInfo()",
    "kind": "Method",
    "detail": "Function (class UParticleLODLevel ; class UParticleModuleBeamModifier ; class UParticleModuleBeamNoise ; class UParticleModuleBeamSource ; class UParticleModuleBeamTarget ; class UParticleModuleSpawnPerUnit ; class UParticleModuleTrailSource ; class UParticleModuleTypeDataAnimTrail ; class UParticleModuleTypeDataBeam2 ; class UParticleModuleTypeDataMesh ; class UParticleModuleTypeDataRibbon ; class UParticleSystemComponent ; class UParticleEmitter ; class UParticleSpriteEmitter ; class UParticleModule ; class UParticleModuleTypeDataMesh ; class UParticleModuleTypeDataBeam2 ; class UParticleModuleTypeDataRibbon ; class UParticleModuleTypeDataAnimTrail ; class UStaticMeshComponent ; class UParticleSystemComponent ; class UParticleModuleBeamSource ; class UParticleModuleBeamTarget ; class UParticleModuleBeamNoise ; class UParticleModuleTrailSource ; class UParticleModuleSpawnPerUnit ; class UParticleModuleOrientationAxisLock ; class UParticleLODLevel ; struct FLODBurstFired { TArray<bool> Fired ; } ; struct FParticleEmitterBuildInfo { class UParticleModuleRequired* RequiredModule ; class UParticleModuleSpawn* SpawnModule ; class UParticleModuleSpawnPerUnit* SpawnPerUnitModule ; TArray<class UParticleModule*> SpawnModules ; FComposableVectorDistribution OrbitOffset ; FComposableVectorDistribution OrbitInitialRotation ; FComposableVectorDistribution OrbitRotationRate ; FComposableVectorDistribution ColorScale ; FComposableFloatDistribution AlphaScale ; FRawDistributionVector DynamicColor ; FRawDistributionFloat DynamicAlpha ; FRawDistributionVector DynamicColorScale ; FRawDistributionFloat DynamicAlphaScale ; FComposableVectorDistribution SizeScale ; FVector2D MaxSize ; FVector2D SizeScaleBySpeed ; FVector2D MaxSizeScaleBySpeed ; FComposableFloatDistribution SubImageIndex ; FComposableFloatDistribution DragCoefficient ; FComposableFloatDistribution DragScale ; bool bEnableCollision ; uint8 CollisionResponse ; uint8 CollisionMode ; float CollisionRadiusScale ; float CollisionRadiusBias ; float CollisionRandomSpread ; float CollisionRandomDistribution ; float Friction ; FComposableFloatDistribution Resilience ; FComposableFloatDistribution ResilienceScaleOverLife ; FVector PointAttractorPosition ; float PointAttractorRadius ; FComposableFloatDistribution PointAttractorStrength ; FComposableFloatDistribution VectorFieldScale ; FComposableFloatDistribution VectorFieldScaleOverLife ; float GlobalVectorFieldScale ; float GlobalVectorFieldTightness ; class UVectorField* LocalVectorField ; FTransform LocalVectorFieldTransform ; float LocalVectorFieldIntensity ; float LocalVectorFieldTightness ; FVector LocalVectorFieldMinInitialRotation ; FVector LocalVectorFieldMaxInitialRotation ; FVector LocalVectorFieldRotationRate ; FVector ConstantAcceleration ; float MaxLifetime ; float MaxRotationRate ; int32 EstimatedMaxActiveParticleCount ; int32 ScreenAlignment ; FVector2D PivotOffset ; uint32 bLocalVectorFieldIgnoreComponentTransform : 1 ; uint32 bLocalVectorFieldTileX : 1 ; uint32 bLocalVectorFieldTileY : 1 ; uint32 bLocalVectorFieldTileZ : 1 ; uint32 bLocalVectorFieldUseFixDT : 1 ; uint32 bUseVelocityForMotionBlur : 1 ; uint32 bRemoveHMDRoll : 1 ; float MinFacingCameraBlendDistance ; float MaxFacingCameraBlendDistance ;)",
    "insertText": "FParticleEmitterBuildInfo()"
  },
  {
    "label": "FParticleEmitterInstanceFixLayout()",
    "kind": "Method",
    "detail": "Function (} ; struct FParticleEmitterInstanceFixLayout { ~)",
    "insertText": "FParticleEmitterInstanceFixLayout()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; struct FParticleEmitterInstance : FParticleEmitterInstanceFixLayout { public : const float PeakActiveParticleUpdateDelta ; UParticleEmitter* SpriteTemplate ; UParticleSystemComponent* Component ; UParticleLODLevel* CurrentLODLevel ; int32 CurrentLODLevelIndex ; int32 TypeDataOffset ; int32 TypeDataInstanceOffset ; int32 SubUVDataOffset ; int32 DynamicParameterDataOffset ; int32 LightDataOffset ; float LightVolumetricScatteringIntensity ; int32 OrbitModuleOffset ; int32 CameraPayloadOffset ; int32 PayloadOffset ; FVector Location ; FMatrix EmitterToSimulation ; FMatrix SimulationToWorld ; uint8 bEnabled : 1 ; uint8 bKillOnDeactivate : 1 ; uint8 bKillOnCompleted : 1 ; uint8 bRequiresSorting : 1 ; uint8 bHaltSpawning : 1 ; uint8 bHaltSpawningExternal : 1 ; uint8 bRequiresLoopNotification : 1 ; uint8 bIgnoreComponentScale : 1 ; uint8 bIsBeam : 1 ; uint8 bAxisLockEnabled : 1 ; uint8 bFakeBurstsWhenSpawningSupressed : 1 ; uint8 bEmitterIsDone : 1 ; TEnumAsByte<EParticleAxisLock> LockAxisFlags ; int32 SortMode ; uint8* ParticleData ; uint16* ParticleIndices ; uint8* InstanceData ; int32 InstancePayloadSize ; int32 ParticleSize ; int32 ParticleStride ; int32 ActiveParticles ; uint32 ParticleCounter ; int32 MaxActiveParticles ; float SpawnFraction ; float SecondsSinceCreation ; float EmitterTime ; float LastDeltaTime ; # if WITH_EDITOR float LastTickDurationMs ; # endif FVector OldLocation ; FBox ParticleBoundingBox ; TArray<struct FLODBurstFired> BurstFired ; int32 LoopCount ; int32 IsRenderDataDirty ; float EmitterDuration ; TArray<float> EmitterDurations ; float CurrentDelay ; int32 TrianglesToRender ; int32 MaxVertexIndex ; UMaterialInterface* CurrentMaterial ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FParticleEmitterInstance()",
    "kind": "Method",
    "detail": "Function (int32 MaxEventCount ; # endif FVector PositionOffsetThisTick ; FVector2D PivotOffset ; TArray<class UPointLightComponent*> HighQualityLights ;)",
    "insertText": "FParticleEmitterInstance()"
  },
  {
    "label": "PreDestructorCall()",
    "kind": "Method",
    "detail": "Function (# if STATS void)",
    "insertText": "PreDestructorCall()"
  },
  {
    "label": "InitParameters()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "InitParameters(UParticleEmitter* InTemplate, UParticleSystemComponent* InComponent)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Resize(int32 NewMaxActiveParticles, bool bSetMaxActiveCount = true)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime, bool bSuppressSpawning)"
  },
  {
    "label": "CheckEmitterFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckEmitterFinished()"
  },
  {
    "label": "FakeBursts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeBursts()"
  },
  {
    "label": "Tick_EmitterTimeSetup()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Tick_EmitterTimeSetup(float DeltaTime, UParticleLODLevel* CurrentLODLevel)"
  },
  {
    "label": "Tick_SpawnParticles()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Tick_SpawnParticles(float DeltaTime, UParticleLODLevel* CurrentLODLevel, bool bSuppressSpawning, bool bFirstTime)"
  },
  {
    "label": "Tick_ModuleUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick_ModuleUpdate(float DeltaTime, UParticleLODLevel* CurrentLODLevel)"
  },
  {
    "label": "Tick_ModulePostUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick_ModulePostUpdate(float DeltaTime, UParticleLODLevel* CurrentLODLevel)"
  },
  {
    "label": "Tick_ModuleFinalUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick_ModuleFinalUpdate(float DeltaTime, UParticleLODLevel* CurrentLODLevel)"
  },
  {
    "label": "SetCurrentLODIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentLODIndex(int32 InLODIndex, bool bInFullyProcess)"
  },
  {
    "label": "Rewind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rewind()"
  },
  {
    "label": "GetBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBoundingBox()"
  },
  {
    "label": "UpdateBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBoundingBox(float DeltaTime)"
  },
  {
    "label": "ForceUpdateBoundingBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceUpdateBoundingBox()"
  },
  {
    "label": "RequiredBytes()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RequiredBytes()"
  },
  {
    "label": "GetModuleDataOffset()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetModuleDataOffset(UParticleModule* Module)"
  },
  {
    "label": "GetModuleInstanceData()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetModuleInstanceData(UParticleModule* Module)"
  },
  {
    "label": "GetModuleRandomSeedInstanceData()",
    "kind": "Method",
    "detail": "Function (FParticleRandomSeedInstancePayload*)",
    "insertText": "GetModuleRandomSeedInstanceData(UParticleModule* Module)"
  },
  {
    "label": "GetTypeDataModuleInstanceData()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "GetTypeDataModuleInstanceData()"
  },
  {
    "label": "CalculateParticleStride()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CalculateParticleStride(uint32 ParticleSize)"
  },
  {
    "label": "ResetBurstList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetBurstList()"
  },
  {
    "label": "GetCurrentBurstRateOffset()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCurrentBurstRateOffset(float& DeltaTime, int32& Burst)"
  },
  {
    "label": "ResetParticleParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetParticleParameters(float DeltaTime)"
  },
  {
    "label": "CalculateOrbitOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateOrbitOffset(FOrbitChainModuleInstancePayload& Payload, FVector& AccumOffset, FVector& AccumRotation, FVector& AccumRotationRate, float DeltaTime, FVector& Result, FMatrix& RotationMat)"
  },
  {
    "label": "UpdateOrbitData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOrbitData(float DeltaTime)"
  },
  {
    "label": "ParticlePrefetch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParticlePrefetch()"
  },
  {
    "label": "Spawn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Spawn(float DeltaTime)"
  },
  {
    "label": "SpawnParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnParticles(int32 Count, float StartTime, float Increment, const FVector& InitialLocation, const FVector& InitialVelocity, struct FParticleEventInstancePayload* EventPayload)"
  },
  {
    "label": "ForceSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceSpawn(float DeltaTime, int32 InSpawnCount, int32 InBurstCount, FVector& InLocation, FVector& InVelocity)"
  },
  {
    "label": "CheckSpawnCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckSpawnCount(int32 InNewCount, int32 InMaxCount)"
  },
  {
    "label": "PreSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSpawn(FBaseParticle* Particle, const FVector& InitialLocation, const FVector& InitialVelocity)"
  },
  {
    "label": "PostSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSpawn(FBaseParticle* Particle, float InterpolationPercentage, float SpawnTime)"
  },
  {
    "label": "HasCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCompleted()"
  },
  {
    "label": "KillParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillParticles()"
  },
  {
    "label": "KillParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillParticle(int32 Index)"
  },
  {
    "label": "KillParticlesForced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillParticlesForced(bool bFireEvents = false)"
  },
  {
    "label": "SetHaltSpawning()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHaltSpawning(bool bInHaltSpawning)"
  },
  {
    "label": "SetHaltSpawningExternal()",
    "kind": "Method",
    "detail": "Function (bHaltSpawning = bInHaltSpawning ; } void)",
    "insertText": "SetHaltSpawningExternal(bool bInHaltSpawning)"
  },
  {
    "label": "SetFakeBurstWhenSpawningSupressed()",
    "kind": "Method",
    "detail": "Function (bHaltSpawningExternal = bInHaltSpawning ; } void)",
    "insertText": "SetFakeBurstWhenSpawningSupressed(bool bInFakeBurstsWhenSpawningSupressed)"
  },
  {
    "label": "GetOrbitPayloadOffset()",
    "kind": "Method",
    "detail": "Function (bFakeBurstsWhenSpawningSupressed = bInFakeBurstsWhenSpawningSupressed ; } int32)",
    "insertText": "GetOrbitPayloadOffset()"
  },
  {
    "label": "GetParticleLocationWithOrbitOffset()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetParticleLocationWithOrbitOffset(FBaseParticle* Particle)"
  },
  {
    "label": "GetParticle()",
    "kind": "Method",
    "detail": "Function (FBaseParticle*)",
    "insertText": "GetParticle(int32 Index)"
  },
  {
    "label": "SetupEmitterDuration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupEmitterDuration()"
  },
  {
    "label": "HasActiveParticles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasActiveParticles()"
  },
  {
    "label": "GetDynamicData()",
    "kind": "Method",
    "detail": "Function (FDynamicEmitterDataBase*)",
    "insertText": "GetDynamicData(bool bSelected, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "GetResourceSizeEx()",
    "kind": "Method",
    "detail": "Function (OutNum = 0 ; OutMax = 0 ; } void)",
    "insertText": "GetResourceSizeEx(FResourceSizeEx& CumulativeResourceSize)"
  },
  {
    "label": "ProcessParticleEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProcessParticleEvents(float DeltaTime, bool bSuppressSpawning)"
  },
  {
    "label": "OnDeactivateSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeactivateSystem()"
  },
  {
    "label": "GetMeshRotationOffset()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMeshRotationOffset()"
  },
  {
    "label": "GatherMaterialRelevance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherMaterialRelevance(FMaterialRelevance* OutMaterialRelevance, const UParticleLODLevel* LODLevel, ERHIFeatureLevel::Type InFeatureLevel)"
  },
  {
    "label": "OnEmitterInstanceKilled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEmitterInstanceKilled(FParticleEmitterInstance* Instance)"
  },
  {
    "label": "SetBeamEndPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetBeamEndPoint(FVector NewEndPoint)"
  },
  {
    "label": "SetBeamSourcePoint()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetBeamSourcePoint(FVector NewSourcePoint,int32 SourceIndex)"
  },
  {
    "label": "SetBeamSourceTangent()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetBeamSourceTangent(FVector NewTangentPoint,int32 SourceIndex)"
  },
  {
    "label": "SetBeamSourceStrength()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetBeamSourceStrength(float NewSourceStrength,int32 SourceIndex)"
  },
  {
    "label": "SetBeamTargetPoint()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetBeamTargetPoint(FVector NewTargetPoint,int32 TargetIndex)"
  },
  {
    "label": "SetBeamTargetTangent()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetBeamTargetTangent(FVector NewTangentPoint,int32 TargetIndex)"
  },
  {
    "label": "SetBeamTargetStrength()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetBeamTargetStrength(float NewTargetStrength,int32 TargetIndex)"
  },
  {
    "label": "GetBeamEndPoint()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "GetBeamEndPoint(FVector& OutEndPoint)"
  },
  {
    "label": "IsTrailEmitter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTrailEmitter()"
  },
  {
    "label": "EndTrail()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndTrail()"
  },
  {
    "label": "SetTrailSourceData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTrailSourceData(FName InFirstSocketName, FName InSecondSocketName, ETrailWidthMode InWidthMode, float InWidth)"
  },
  {
    "label": "Tick_MaterialOverrides()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Tick_MaterialOverrides(int32 EmitterIndex)"
  },
  {
    "label": "UseLocalSpace()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseLocalSpace()"
  },
  {
    "label": "GetScreenAlignmentAndScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetScreenAlignmentAndScale(int32& OutScreenAlign, FVector& OutScale)"
  },
  {
    "label": "FillReplayData()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "FillReplayData(FDynamicEmitterReplayDataBase& OutData)"
  },
  {
    "label": "UpdateTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTransforms()"
  },
  {
    "label": "GetCurrentLODLevelChecked()",
    "kind": "Method",
    "detail": "Function (class UParticleLODLevel*)",
    "insertText": "GetCurrentLODLevelChecked()"
  },
  {
    "label": "GetCurrentMaterial()",
    "kind": "Method",
    "detail": "Function (UMaterialInterface*)",
    "insertText": "GetCurrentMaterial()"
  },
  {
    "label": "FixupParticleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupParticleIndices()"
  },
  {
    "label": "FScopeCycleCounterEmitter()",
    "kind": "Method",
    "detail": "Function (} ; # if STATS struct FScopeCycleCounterEmitter : public FCycleCounter { template<class T> FORCEINLINE_STATS)",
    "insertText": "FScopeCycleCounterEmitter(const T *Object)"
  },
  {
    "label": "GetStatID()",
    "kind": "Method",
    "detail": "Function (TStatId SpriteStatId = Object -> SpriteTemplate ->)",
    "insertText": "GetStatID()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(SpriteStatId)"
  },
  {
    "label": "FScopeCycleCounterEmitter()",
    "kind": "Method",
    "detail": "Function (} } } template<class T> FORCEINLINE_STATS)",
    "insertText": "FScopeCycleCounterEmitter(const T *Object, TStatId OtherStat)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(StatId)"
  },
  {
    "label": "FScopeCycleCounterEmitter()",
    "kind": "Method",
    "detail": "Function (} } } FORCEINLINE_STATS ~)",
    "insertText": "FScopeCycleCounterEmitter()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "FScopeCycleCounterEmitter()",
    "kind": "Method",
    "detail": "Function (} } ; # else struct FScopeCycleCounterEmitter { FORCEINLINE_STATS)",
    "insertText": "FScopeCycleCounterEmitter(const FParticleEmitterInstance *Object)"
  },
  {
    "label": "FScopeCycleCounterEmitter()",
    "kind": "Method",
    "detail": "Function (} FORCEINLINE_STATS)",
    "insertText": "FScopeCycleCounterEmitter(const FParticleEmitterInstance *Object, TStatId OtherStat)"
  },
  {
    "label": "FParticleSpriteEmitterInstance()",
    "kind": "Method",
    "detail": "Function (} } ; # endif struct FParticleSpriteEmitterInstance : public FParticleEmitterInstance {)",
    "insertText": "FParticleSpriteEmitterInstance()"
  },
  {
    "label": "GetReplayData()",
    "kind": "Method",
    "detail": "Function (FDynamicEmitterReplayDataBase*)",
    "insertText": "GetReplayData()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocatedSize(int32& OutNum, int32& OutMax)"
  },
  {
    "label": "FParticleMeshEmitterInstance()",
    "kind": "Method",
    "detail": "Function (} ; struct FParticleMeshEmitterInstance : public FParticleEmitterInstance { UParticleModuleTypeDataMesh* MeshTypeData ; bool MeshRotationActive ; int32 MeshRotationOffset ; int32 MeshMotionBlurOffset ; TArray<UMaterialInterface*> CurrentMaterials ;)",
    "insertText": "FParticleMeshEmitterInstance()"
  },
  {
    "label": "IsDynamicDataRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDynamicDataRequired(UParticleLODLevel* CurrentLODLevel)"
  },
  {
    "label": "GetMeshMaterials()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshMaterials(TArray<UMaterialInterface*,TInlineAllocator<2> >& OutMaterials, const UParticleLODLevel* LODLevel, ERHIFeatureLevel::Type InFeatureLevel, bool bLogWarnings = false)"
  },
  {
    "label": "FParticleBeam2EmitterInstance()",
    "kind": "Method",
    "detail": "Function (} ; struct FParticleBeam2EmitterInstance : public FParticleEmitterInstance { UParticleModuleTypeDataBeam2* BeamTypeData ; UParticleModuleBeamSource* BeamModule_Source ; UParticleModuleBeamTarget* BeamModule_Target ; UParticleModuleBeamNoise* BeamModule_Noise ; UParticleModuleBeamModifier* BeamModule_SourceModifier ; int32 BeamModule_SourceModifier_Offset ; UParticleModuleBeamModifier* BeamModule_TargetModifier ; int32 BeamModule_TargetModifier_Offset ; bool FirstEmission ; int32 TickCount ; int32 ForceSpawnCount ; int32 BeamMethod ; TArray<int32> TextureTiles ; int32 BeamCount ; AActor* SourceActor ; FParticleEmitterInstance* SourceEmitter ; TArray<FVector> UserSetSourceArray ; TArray<FVector> UserSetSourceTangentArray ; TArray<float> UserSetSourceStrengthArray ; TArray<float> DistanceArray ; TArray<FVector> TargetPointArray ; TArray<FVector> TargetTangentArray ; TArray<float> UserSetTargetStrengthArray ; AActor* TargetActor ; FParticleEmitterInstance* TargetEmitter ; TArray<FName> TargetPointSourceNames ; TArray<FVector> UserSetTargetArray ; TArray<FVector> UserSetTargetTangentArray ; int32 VertexCount ; int32 TriangleCount ; TArray<int32> BeamTrianglesPerSheet ;)",
    "insertText": "FParticleBeam2EmitterInstance()"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(FVector InOffset, bool bWorldShift)"
  },
  {
    "label": "GetBeamSourcePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeamSourcePoint(int32 SourceIndex, FVector& OutSourcePoint)"
  },
  {
    "label": "GetBeamSourceTangent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeamSourceTangent(int32 SourceIndex, FVector& OutTangentPoint)"
  },
  {
    "label": "GetBeamSourceStrength()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeamSourceStrength(int32 SourceIndex, float& OutSourceStrength)"
  },
  {
    "label": "GetBeamTargetPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeamTargetPoint(int32 TargetIndex, FVector& OutTargetPoint)"
  },
  {
    "label": "GetBeamTargetTangent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeamTargetTangent(int32 TargetIndex, FVector& OutTangentPoint)"
  },
  {
    "label": "GetBeamTargetStrength()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBeamTargetStrength(int32 TargetIndex, float& OutTargetStrength)"
  },
  {
    "label": "SpawnBeamParticles()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SpawnBeamParticles(float OldLeftover, float Rate, float DeltaTime, int32 Burst = 0, float BurstTime = 0.0f)"
  },
  {
    "label": "SetupBeamModifierModulesOffsets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupBeamModifierModulesOffsets()"
  },
  {
    "label": "ResolveSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveSource()"
  },
  {
    "label": "ResolveTarget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolveTarget()"
  },
  {
    "label": "DetermineVertexAndTriangleCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineVertexAndTriangleCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SourceEmitter = NULL ; })",
    "insertText": "if(TargetEmitter == Instance)"
  },
  {
    "label": "SetStartIndex()",
    "kind": "Method",
    "detail": "Function (} ; struct FParticleTrailsEmitterInstance_Base : public FParticleEmitterInstance { int32 VertexCount ; int32 TriangleCount ; int32 TrailCount ; int32 MaxTrailCount ; float RunningTime ; float LastTickTime ; uint32 bDeadTrailsOnDeactivate : 1 ; TArray<float> TrailSpawnTimes ; TArray<float> LastSpawnTime ; TArray<float> SourceDistanceTraveled ; TArray<float> TiledUDistanceTraveled ; uint32 bFirstUpdate : 1 ; uint32 bEnableInactiveTimeTracking : 1 ; # if ENABLE_TRAILS_START_END_INDEX_OPTIMIZATION int32 CurrentStartIndices [ 1 2 8 ] ; int32 CurrentEndIndices [ 1 2 8 ] ; void)",
    "insertText": "SetStartIndex(int32 TrailIndex, int32 ParticleIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentStartIndices [ TrailIndex ] = ParticleIndex ;)",
    "insertText": "if(CurrentEndIndices[TrailIndex] == ParticleIndex)"
  },
  {
    "label": "CheckIndices()",
    "kind": "Method",
    "detail": "Function (CurrentEndIndices [ TrailIndex ] = INDEX_NONE ; })",
    "insertText": "CheckIndices(TrailIndex)"
  },
  {
    "label": "GetTrailStart()",
    "kind": "Method",
    "detail": "Function (} template<TrailDataType> void)",
    "insertText": "GetTrailStart(const int32 TrailIdx, int32 &OutStartIndex, TrailDataType *&OutTrailData, FBaseParticle *&OutParticle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutStartIndex = CurrentStartIndices [ TrailIdx ] ;)",
    "insertText": "if(OutStartIndex != INDEX_NONE)"
  },
  {
    "label": "DECLARE_PARTICLE_PTR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_PARTICLE_PTR(CheckParticle, ParticleData + ParticleStride * OutStartIndex)"
  },
  {
    "label": "CheckTrailData()",
    "kind": "Method",
    "detail": "Function (TrailDataType*)",
    "insertText": "CheckTrailData((TrailDataType*)((uint8*)CheckParticle + TypeDataOffset))"
  },
  {
    "label": "GetTrailEnd()",
    "kind": "Method",
    "detail": "Function (OutTrailData = CheckTrailData ; OutParticle = CheckParticle ; } } } template<TrailDataType> void)",
    "insertText": "GetTrailEnd(const int32 TrailIdx, int32 &OutEndIndex, TrailDataType *&OutTrailData, FBaseParticle *&OutParticle)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutEndIndex = CurrentEndIndices [ TrailIdx ] ;)",
    "insertText": "if(OutEndIndex != INDEX_NONE)"
  },
  {
    "label": "DECLARE_PARTICLE_PTR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_PARTICLE_PTR(CheckParticle, ParticleData + ParticleStride * OutEndIndex)"
  },
  {
    "label": "SetEndIndex()",
    "kind": "Method",
    "detail": "Function (OutTrailData = CheckTrailData ; OutParticle = CheckParticle ; } } } void)",
    "insertText": "SetEndIndex(int32 TrailIndex, int32 ParticleIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentEndIndices [ TrailIndex ] = ParticleIndex ;)",
    "insertText": "if(CurrentStartIndices[TrailIndex] == ParticleIndex)"
  },
  {
    "label": "SetDeadIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDeadIndex(int32 TrailIndex, int32 ParticleIndex)"
  },
  {
    "label": "ClearIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearIndices(int32 TrailIndex, int32 ParticleIndex)"
  },
  {
    "label": "SetDeadIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeadIndex(TrailIndex, ParticleIndex)"
  },
  {
    "label": "CheckIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckIndices(int32 TrailIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) if (CurrentEndIndices[TrailIdx] != INDEX_NONE)"
  },
  {
    "label": "DECLARE_PARTICLE_PTR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_PARTICLE_PTR(EndParticle, ParticleData + ParticleStride * CurrentEndIndices[TrailIdx])"
  },
  {
    "label": "EndTrailData()",
    "kind": "Method",
    "detail": "Function (FTrailsBaseTypeDataPayload*)",
    "insertText": "EndTrailData((FTrailsBaseTypeDataPayload*)((uint8*)EndParticle + TypeDataOffset))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CurrentStartIndices[TrailIdx] != INDEX_NONE)"
  },
  {
    "label": "DECLARE_PARTICLE_PTR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_PARTICLE_PTR(StartParticle, ParticleData + ParticleStride * CurrentStartIndices[TrailIdx])"
  },
  {
    "label": "StartTrailData()",
    "kind": "Method",
    "detail": "Function (FTrailsBaseTypeDataPayload*)",
    "insertText": "StartTrailData((FTrailsBaseTypeDataPayload*)((uint8*)StartParticle + TypeDataOffset))"
  },
  {
    "label": "CheckAllIndices()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "CheckAllIndices()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) for (uint32 TrailIdx = 0; TrailIdx < 128; TrailIdx++)"
  },
  {
    "label": "EndTrailData()",
    "kind": "Method",
    "detail": "Function (FRibbonTypeDataPayload*)",
    "insertText": "EndTrailData((FRibbonTypeDataPayload*)((uint8*)EndParticle + TypeDataOffset))"
  },
  {
    "label": "StartTrailData()",
    "kind": "Method",
    "detail": "Function (FRibbonTypeDataPayload*)",
    "insertText": "StartTrailData((FRibbonTypeDataPayload*)((uint8*)StartParticle + TypeDataOffset))"
  },
  {
    "label": "DECLARE_PARTICLE_PTR()",
    "kind": "Method",
    "detail": "Function (int32 CheckIndex = ParticleIndices [ FindTrailIdx ] ;)",
    "insertText": "DECLARE_PARTICLE_PTR(CheckParticle, ParticleData + ParticleStride * CheckIndex)"
  },
  {
    "label": "DumpCircularTrailsSpam()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "DumpCircularTrailsSpam()"
  },
  {
    "label": "CheckForCircularTrail()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "CheckForCircularTrail(FBaseParticle* StartParticle, FBaseParticle* CheckParticle)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (TrailSpawnTimes .)",
    "insertText": "Empty()"
  },
  {
    "label": "FParticleTrailsEmitterInstance_Base()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_TRAILS_START_END_INDEX_OPTIMIZATION CurrentStartIndices [ TrailIdx ] = INDEX_NONE ; CurrentEndIndices [ TrailIdx ] = INDEX_NONE ; # endif } } ~)",
    "insertText": "FParticleTrailsEmitterInstance_Base()"
  },
  {
    "label": "AddParticleHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddParticleHelper(int32 InTrailIdx, int32 StartParticleIndex, FTrailsBaseTypeDataPayload* StartTrailData, int32 ParticleIndex, FTrailsBaseTypeDataPayload* TrailData, UParticleSystemComponent* InPsysComp = nullptr)"
  },
  {
    "label": "Tick_RecalculateTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick_RecalculateTangents(float DeltaTime, UParticleLODLevel* CurrentLODLevel)"
  },
  {
    "label": "KillParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillParticles(int32 InTrailIdx, int32 InKillCount)"
  },
  {
    "label": "SetupTrailModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupTrailModules()"
  },
  {
    "label": "UpdateSourceData()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "UpdateSourceData(float DeltaTime, bool bFirstTime)"
  },
  {
    "label": "GetParticleInTrail()",
    "kind": "Method",
    "detail": "Function (enum EGetTrailDirection { GET_Prev,GET_Next } ; enum EGetTrailParticleOption { GET_Any,GET_Spawned,GET_Interpolated,GET_Start,GET_End,} ; bool)",
    "insertText": "GetParticleInTrail(bool bSkipStartingParticle, FBaseParticle* InStartingFromParticle, FTrailsBaseTypeDataPayload* InStartingTrailData, EGetTrailDirection InGetDirection, EGetTrailParticleOption InGetOption, FBaseParticle*& OutParticle, FTrailsBaseTypeDataPayload*& OutTrailData)"
  },
  {
    "label": "PrintParticleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintParticleData(FBaseParticle* Particle, FTrailsBaseTypeDataPayload* TrailData, int32 CurrentIndex, int32 TrailIndex)"
  },
  {
    "label": "PrintAllActiveParticles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintAllActiveParticles()"
  },
  {
    "label": "PrintTrails()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PrintTrails()"
  },
  {
    "label": "FParticleRibbonEmitterInstance()",
    "kind": "Method",
    "detail": "Function (} } ; struct FParticleRibbonEmitterInstance : public FParticleTrailsEmitterInstance_Base { UParticleModuleTypeDataRibbon* TrailTypeData ; UParticleModuleSpawnPerUnit* SpawnPerUnitModule ; UParticleModuleTrailSource* SourceModule ; int32 TrailModule_Source_Offset ; TArray<FVector> CurrentSourcePosition ; TArray<FQuat> CurrentSourceRotation ; TArray<FVector> CurrentSourceUp ; TArray<FVector> CurrentSourceTangent ; TArray<float> CurrentSourceTangentStrength ; TArray<FVector> LastSourcePosition ; TArray<FQuat> LastSourceRotation ; TArray<FVector> LastSourceUp ; TArray<FVector> LastSourceTangent ; TArray<float> LastSourceTangentStrength ; AActor* SourceActor ; TArray<FVector> SourceOffsets ; FParticleEmitterInstance* SourceEmitter ; int32 LastSelectedParticleIndex ; TArray<int32> SourceIndices ; TArray<float> SourceTimes ; TArray<float> LastSourceTimes ; TArray<float> CurrentLifetimes ; TArray<float> CurrentSizes ; int32 HeadOnlyParticles ;)",
    "insertText": "FParticleRibbonEmitterInstance()"
  },
  {
    "label": "GetSpawnPerUnitAmount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSpawnPerUnitAmount(float DeltaTime, int32 InTrailIdx, int32& OutCount, float& OutRate)"
  },
  {
    "label": "GetParticleLifetimeAndSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetParticleLifetimeAndSize(int32 InTrailIdx, const FBaseParticle* InParticle, bool bInNoLivingParticles, float& OutOneOverMaxLifetime, float& OutSize)"
  },
  {
    "label": "Spawn_Source()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Spawn_Source(float DeltaTime)"
  },
  {
    "label": "Spawn_RateAndBurst()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Spawn_RateAndBurst(float DeltaTime)"
  },
  {
    "label": "ResolveSourcePoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveSourcePoint(int32 InTrailIdx, FVector& OutPosition, FQuat& OutRotation, FVector& OutUp, FVector& OutTangent, float& OutTangentStrength)"
  },
  {
    "label": "FParticleAnimTrailEmitterInstance()",
    "kind": "Method",
    "detail": "Function (} ; struct FParticleAnimTrailEmitterInstance : public FParticleTrailsEmitterInstance_Base { UParticleModuleTypeDataAnimTrail* TrailTypeData ; UParticleModuleSpawnPerUnit* SpawnPerUnitModule ; FName FirstSocketName ; FName SecondSocketName ; float Width ; ETrailWidthMode WidthMode ; const void* Owner ; bool bTagTrailAsDead ; bool bTrailEnabled ; # if WITH_EDITORONLY_DATA uint32 bRenderGeometry : 1 ; uint32 bRenderSpawnPoints : 1 ; uint32 bRenderTangents : 1 ; uint32 bRenderTessellation : 1 ; # endif int32 HeadOnlyParticles ;)",
    "insertText": "FParticleAnimTrailEmitterInstance()"
  },
  {
    "label": "RecalculateTangentAndInterpolationParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateTangentAndInterpolationParam(FBaseParticle* PrevParticle, FAnimTrailTypeDataPayload* PrevTrailData, FBaseParticle* CurrParticle, FAnimTrailTypeDataPayload* CurrTrailData, FBaseParticle* NextParticle, FAnimTrailTypeDataPayload* NextTrailData)"
  },
  {
    "label": "IsTrailActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTrailActive()"
  },
  {
    "label": "SetTrailDebugData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "SetTrailDebugData(bool bInRenderGeometry, bool bInRenderSpawnPoints, bool bInRenderTessellation, bool bInRenderTangents)"
  },
  {
    "label": "SpawnParticle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpawnParticle(int32& StartParticleIndex, const struct FAnimTrailParticleSpawnParams& Params)"
  }
]