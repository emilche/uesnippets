[
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_CLAMP_H # define _LIBCPP___ALGORITHM_CLAMP_H # include<__algorithm / comp . h> # include<__assert> # include<__config> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 14 template<class _Tp, class _Compare> _LIBCPP_NODISCARD_EXT inline _LIBCPP_INLINE_VISIBILITY constexpr const _Tp& clamp(const _Tp& __v, const _Tp& __lo, const _Tp& __hi, _Compare __comp)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(!__comp(__hi, __lo), \"Bad bounds passed to std::clamp\")"
  },
  {
    "label": "clamp()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp> _LIBCPP_NODISCARD_EXT _LIBCPP_INLINE_VISIBILITY const _Tp&)",
    "insertText": "clamp(const _Tp& __v, const _Tp& __lo, const _Tp& __hi)"
  }
]