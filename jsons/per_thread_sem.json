[
  {
    "label": "Mutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Mutex"
  },
  {
    "label": "PerThreadSem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PerThreadSem"
  },
  {
    "label": "PerThreadSemTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PerThreadSemTest"
  },
  {
    "label": "absl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "absl"
  },
  {
    "label": "PerThreadSem()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_SYNCHRONIZATION_INTERNAL_PER_THREAD_SEM_H_ # define ABSL_SYNCHRONIZATION_INTERNAL_PER_THREAD_SEM_H_ # include<atomic> # include \" absl / base / internal / thread_identity . h \" # include \" absl / synchronization / internal / create_thread_identity . h \" # include \" absl / synchronization / internal / kernel_timeout . h \" namespace absl { ABSL_NAMESPACE_BEGIN class Mutex ; namespace synchronization_internal { class PerThreadSem { public :)",
    "insertText": "PerThreadSem()"
  },
  {
    "label": "PerThreadSem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerThreadSem(const PerThreadSem&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PerThreadSem&)",
    "insertText": "operator(const PerThreadSem&)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(base_internal::ThreadIdentity* identity)"
  },
  {
    "label": "SetThreadBlockedCounter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThreadBlockedCounter(std::atomic<int> *counter)"
  },
  {
    "label": "GetThreadBlockedCounter()",
    "kind": "Method",
    "detail": "Function (std::atomic<int>*)",
    "insertText": "GetThreadBlockedCounter()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Init(base_internal::ThreadIdentity* identity)"
  },
  {
    "label": "Post()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Post(base_internal::ThreadIdentity* identity)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Wait(KernelTimeout t)"
  },
  {
    "label": "OneTimeInitThreadIdentity()",
    "kind": "Method",
    "detail": "Function (class PerThreadSemTest ; class absl::Mutex ; void)",
    "insertText": "OneTimeInitThreadIdentity(absl::base_internal::ThreadIdentity*)"
  },
  {
    "label": "ABSL_INTERNAL_C_SYMBOL()",
    "kind": "Method",
    "detail": "Function (} ; } ABSL_NAMESPACE_END } \" C \" { void)",
    "insertText": "ABSL_INTERNAL_C_SYMBOL(AbslInternalPerThreadSemPost)( absl::base_internal::ThreadIdentity* identity)"
  },
  {
    "label": "ABSL_INTERNAL_C_SYMBOL()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ABSL_INTERNAL_C_SYMBOL(AbslInternalPerThreadSemWait)( absl::synchronization_internal::KernelTimeout t)"
  },
  {
    "label": "Post()",
    "kind": "Method",
    "detail": "Function (} void absl::synchronization_internal::)",
    "insertText": "Post(absl::base_internal::ThreadIdentity* identity)"
  },
  {
    "label": "ABSL_INTERNAL_C_SYMBOL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_INTERNAL_C_SYMBOL(AbslInternalPerThreadSemPost)(identity)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} bool absl::synchronization_internal::)",
    "insertText": "Wait(absl::synchronization_internal::KernelTimeout t)"
  }
]