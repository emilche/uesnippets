[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FNetConnectionFaultRecovery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecovery"
  },
  {
    "label": "FNetResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetResult"
  },
  {
    "label": "FNetFaultState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetFaultState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "FNetConnectionFaultRecoveryBaseFixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecoveryBaseFixLayout"
  },
  {
    "label": "FNetConnectionFaultRecoveryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecoveryBase"
  },
  {
    "label": "FPendingCategoryRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCategoryRegister"
  },
  {
    "label": "NotifyHandledFault()",
    "kind": "Method",
    "detail": "Function (EHandleNetResult)",
    "insertText": "NotifyHandledFault(FNetResult&& InResult)"
  },
  {
    "label": "HandleNetResult()",
    "kind": "Method",
    "detail": "Function (EHandleNetResult)",
    "insertText": "HandleNetResult(FNetCloseResult&& InResult)"
  },
  {
    "label": "AddNewCounter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddNewCounter(int32 Count=1)"
  },
  {
    "label": "RegisterCounterCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCounterCategory(ENetFaultCounterCategory Category, int32 CounterIndex)"
  }
]