[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "FNetConnectionFaultRecovery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecovery"
  },
  {
    "label": "FNetResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetResult"
  },
  {
    "label": "FNetFaultState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetFaultState"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetConnectionFaultRecoveryBaseFixLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecoveryBaseFixLayout"
  },
  {
    "label": "FNetConnectionFaultRecoveryBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetConnectionFaultRecoveryBase"
  },
  {
    "label": "FPendingCategoryRegister",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingCategoryRegister"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / UnrealMathSSE . h \" # include \" Net / Core / Connection / EscalationStates . h \" # include \" Net / Core / Connection / NetCloseResult . h \" # include \" Net / Core / Connection / NetResultManager . h \" # include \" Net / Core / Connection / StateStruct . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / ObjectMacros . h \" # include \" NetConnectionFaultRecoveryBase . generated . h \" class UClass ; namespace UE { namespace Net { class FNetConnectionFaultRecovery ; struct FNetResult ; } })",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "GetConfigSection()",
    "kind": "Method",
    "detail": "Function (public : const TCHAR*)",
    "insertText": "GetConfigSection()"
  },
  {
    "label": "GetBaseConfigClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "GetBaseConfigClass()"
  },
  {
    "label": "InitConfigDefaultsInternal()",
    "kind": "Method",
    "detail": "Function (protected : EInitStateDefaultsResult)",
    "insertText": "InitConfigDefaultsInternal()"
  },
  {
    "label": "ApplyImpliedValuesInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyImpliedValuesInternal()"
  },
  {
    "label": "ValidateConfigInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateConfigInternal()"
  },
  {
    "label": "HasHitAnyQuota()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "HasHitAnyQuota(FHasHitAnyQuotaParms Parms)"
  },
  {
    "label": "ToInt()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE { namespace Net { enum class ENetFaultCounters : uint8 { PacketCount,NetConnPacketFault,Max,NumPrealloc = 6 } ; enum class ENetFaultCounterCategory : uint8 { NetworkCorruption,Max } ; uint8)",
    "insertText": "ToInt(ENetFaultCounters CounterVal)"
  },
  {
    "label": "ToInt()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "ToInt(ENetFaultCounterCategory CategoryVal)"
  },
  {
    "label": "FNetConnectionFaultRecoveryBaseFixLayout()",
    "kind": "Method",
    "detail": "Function (} class FNetConnectionFaultRecoveryBaseFixLayout { public : ~)",
    "insertText": "FNetConnectionFaultRecoveryBaseFixLayout()"
  },
  {
    "label": "NotifyHandledFault()",
    "kind": "Method",
    "detail": "Function (} ; class FNetConnectionFaultRecoveryBase : public FNetConnectionFaultRecoveryBaseFixLayout { public : using FNetFaultEscalationHandler = TEscalationManager<ENetFaultCounters,FNetFaultState,ENetFaultCounterCategory> ; EHandleNetResult)",
    "insertText": "NotifyHandledFault(FNetResult&& InResult)"
  },
  {
    "label": "GetFaultManager()",
    "kind": "Method",
    "detail": "Function (FNetResultManager&)",
    "insertText": "GetFaultManager()"
  },
  {
    "label": "AddNewCounter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddNewCounter(int32 Count=1)"
  },
  {
    "label": "GetFrameCounter()",
    "kind": "Method",
    "detail": "Function (FEscalationCounter&)",
    "insertText": "GetFrameCounter(int32 CounterIndex)"
  },
  {
    "label": "RegisterCounterCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCounterCategory(ENetFaultCounterCategory Category, int32 CounterIndex)"
  },
  {
    "label": "InitEscalationManager()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InitEscalationManager()"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (} protected : bool bDisconnected = false ; int32 LastCounterIndex = static_cast<)",
    "insertText": "int32(ENetFaultCounters::Max)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FNetFaultEscalationHandler> NetFaultEscalationManager ; struct FPendingCategoryRegister { int32 CategoryIndex = 0 ; int32 CounterIndex = 0 ; bool)",
    "insertText": "operator(const FPendingCategoryRegister& A, const FPendingCategoryRegister& B)"
  }
]