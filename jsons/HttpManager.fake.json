[
  {
    "label": "FFakeHttpRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeHttpRequest"
  },
  {
    "label": "FFakeHttpManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeHttpManager"
  },
  {
    "label": "FFakeHttpResponse",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFakeHttpResponse"
  },
  {
    "label": "ProcessRequest()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Ticker . h \" # include \" Tests / Mock / HttpManager . mock . h \" # include \" Tests / Mock / HttpRequest . mock . h \" # include \" Tests / Mock / HttpResponse . mock . h \" # if WITH_DEV_AUTOMATION_TESTS namespace BuildPatchServices { class FFakeHttpRequest : public FMockHttpRequest { public : bool)",
    "insertText": "ProcessRequest()"
  },
  {
    "label": "GetResponseCode()",
    "kind": "Method",
    "detail": "Function (public : class FFakeHttpManager* FakeHttpModule ; } ; class FFakeHttpResponse : public FMockHttpResponse { public : int32)",
    "insertText": "GetResponseCode()"
  },
  {
    "label": "GetContent()",
    "kind": "Method",
    "detail": "Function (const TArray<uint8>&)",
    "insertText": "GetContent()"
  },
  {
    "label": "GetContentAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentAsString()"
  },
  {
    "label": "GetContentLength()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetContentLength()"
  },
  {
    "label": "FFakeHttpManager()",
    "kind": "Method",
    "detail": "Function (public : TArray<uint8> Data ; EHttpResponseCodes::Type Code ; } ; class FFakeHttpManager : public FMockHttpManager { public :)",
    "insertText": "FFakeHttpManager(FTSTicker& Ticker)"
  },
  {
    "label": "CreateRequest()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IHttpRequest,ESPMode::ThreadSafe>)",
    "insertText": "CreateRequest()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float Delta)"
  },
  {
    "label": "OnProcessRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnProcessRequest(FFakeHttpRequest* FakeHttpRequest)"
  },
  {
    "label": "OnProcessRequest()",
    "kind": "Method",
    "detail": "Function (+ + RxProcessRequest ; return FakeHttpModule ->)",
    "insertText": "OnProcessRequest(this)"
  },
  {
    "label": "ZeroTerminatedPayload()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "ZeroTerminatedPayload(GetContent())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ZeroTerminatedPayload .)",
    "insertText": "Add(0)"
  },
  {
    "label": "AddTicker()",
    "kind": "Method",
    "detail": "Function (Ticker .)",
    "insertText": "AddTicker(FTickerDelegate::CreateRaw(this, &FFakeHttpManager::Tick))"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (+ + RxCreateRequest ; NewRequests .)",
    "insertText": "Emplace(new FFakeHttpRequest())"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (FakeHttpModule = this)",
    "insertText": "Last()"
  },
  {
    "label": "FFakeHttpResponse()",
    "kind": "Method",
    "detail": "Function (FFakeHttpResponse* FakeHttpResponse = new)",
    "insertText": "FFakeHttpResponse()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (FakeHttpResponse -> Code = EHttpResponseCodes::Ok ; const FString& Url = ProgressedRequest -> RxSetURL .)",
    "insertText": "Last().Get<0>()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (FakeHttpResponse -> Data = DataServed [ Url ] ; } ProgressedRequest -> HttpRequestCompleteDelegate .)",
    "insertText": "ExecuteIfBound(ProgressedRequest, MakeShareable(FakeHttpResponse), true)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (} ProgressedRequests =)",
    "insertText": "MoveTemp(RunningRequests)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 Progress = 0 ;)",
    "insertText": "if(DataServed.Contains(Url))"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (Progress = DataServed [ Url ] .)",
    "insertText": "Num()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (} ProgressedRequest -> HttpRequestProgressDelegate .)",
    "insertText": "ExecuteIfBound(ProgressedRequest, 0, Progress)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (int32 Index = NewRequests .)",
    "insertText": "IndexOfByPredicate([FakeHttpRequest](const TSharedRef<FFakeHttpRequest, ESPMode::ThreadSafe>& Element) { return &Element.Get() == FakeHttpRequest; })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bValidRequest = Index> = 0 ;)",
    "insertText": "if(bValidRequest)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (RunningRequests .)",
    "insertText": "Add(Request)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (NewRequests .)",
    "insertText": "RemoveAtSwap(Index)"
  }
]