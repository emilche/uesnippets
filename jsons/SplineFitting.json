[
  {
    "label": "SplineFitting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplineFitting"
  },
  {
    "label": "averageKnots()",
    "kind": "Method",
    "detail": "Function (KnotVectorType)",
    "insertText": "averageKnots(numAverageKnots)"
  },
  {
    "label": "temporaryParameters()",
    "kind": "Method",
    "detail": "Function (ParameterVectorType)",
    "insertText": "temporaryParameters(numParameters + 1)"
  },
  {
    "label": "derivativeKnots()",
    "kind": "Method",
    "detail": "Function (KnotVectorType)",
    "insertText": "derivativeKnots(numInternalDerivatives)"
  },
  {
    "label": "parameterIndices()",
    "kind": "Method",
    "detail": "Function (ParameterVectorType)",
    "insertText": "parameterIndices(numParameters)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (SplineType)",
    "insertText": "Interpolate(const PointArrayType& pts, DenseIndex degree)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (SplineType)",
    "insertText": "Interpolate(const PointArrayType& pts, DenseIndex degree, const KnotVectorType& knot_parameters)"
  },
  {
    "label": "InterpolateWithDerivatives()",
    "kind": "Method",
    "detail": "Function (SplineType)",
    "insertText": "InterpolateWithDerivatives(const PointArrayType& points,\n                                                 const PointArrayType& derivatives,\n                                                 const IndexArray& derivativeIndices,\n                                                 const unsigned int degree)"
  },
  {
    "label": "InterpolateWithDerivatives()",
    "kind": "Method",
    "detail": "Function (SplineType)",
    "insertText": "InterpolateWithDerivatives(const PointArrayType& points,\n                                                 const PointArrayType& derivatives,\n                                                 const IndexArray& derivativeIndices,\n                                                 const unsigned int degree,\n                                                 const ParameterVectorType& parameters)"
  },
  {
    "label": "qr()",
    "kind": "Method",
    "detail": "Function (HouseholderQR<MatrixType>)",
    "insertText": "qr(A)"
  },
  {
    "label": "SplineType()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SplineType(knots, ctrls)"
  },
  {
    "label": "ChordLengths()",
    "kind": "Method",
    "detail": "Function (parameters)",
    "insertText": "ChordLengths(pts, chord_lengths)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Interpolate(pts, degree, chord_lengths)"
  },
  {
    "label": "lu()",
    "kind": "Method",
    "detail": "Function (FullPivLU<MatrixType>)",
    "insertText": "lu(A)"
  },
  {
    "label": "spline()",
    "kind": "Method",
    "detail": "Function (SplineType)",
    "insertText": "spline(knots, controlPoints)"
  },
  {
    "label": "InterpolateWithDerivatives()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "InterpolateWithDerivatives(points, derivatives, derivativeIndices, degree, parameters)"
  }
]