[
  {
    "label": "SplineFitting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SplineFitting"
  },
  {
    "label": "KnotAveraging()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPLINE_FITTING_H # define EIGEN_SPLINE_FITTING_H # include<algorithm> # include<functional> # include<numeric> # include<vector> # include \" SplineFwd . h \" # include \" . . / . . / . . / . . / Eigen / LU \" # include \" . . / . . / . . / . . / Eigen / QR \" namespace Eigen { template<KnotVectorType> void)",
    "insertText": "KnotAveraging(const KnotVectorType& parameters, DenseIndex degree, KnotVectorType& knots)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (knots .)",
    "insertText": "resize(parameters.size()+degree+1)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (knots .)",
    "insertText": "segment(0,degree+1) = KnotVectorType::Zero(degree+1)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (knots .)",
    "insertText": "segment(knots.size()-degree-1,degree+1) = KnotVectorType::Ones(degree+1)"
  },
  {
    "label": "KnotAveragingWithDerivatives()",
    "kind": "Method",
    "detail": "Function (} template<KnotVectorType,ParameterVectorType,IndexArray> void)",
    "insertText": "KnotAveragingWithDerivatives(const ParameterVectorType& parameters, const unsigned int degree, const IndexArray& derivativeIndices, KnotVectorType& knots)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (typedef ParameterVectorType::Scalar Scalar ; DenseIndex numParameters = parameters .)",
    "insertText": "size()"
  },
  {
    "label": "KnotAveraging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KnotAveraging(parameters, degree, knots)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (startIndex = 0 ; - - numInternalDerivatives ; } else { startIndex = 1 ; })",
    "insertText": "if(derivativeIndices[numDerivatives - 1] == numParameters - 1)"
  },
  {
    "label": "averageKnots()",
    "kind": "Method",
    "detail": "Function (endIndex = numParameters - degree ; - - numInternalDerivatives ; } else { endIndex = numParameters - degree - 1 ; } DenseIndex numAverageKnots = endIndex - startIndex + 3 ; KnotVectorType)",
    "insertText": "averageKnots(numAverageKnots)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (averageKnots [ 0 ] = parameters [ 0 ] ; int newKnotIndex = 0 ;)",
    "insertText": "for(DenseIndex i = startIndex; i <= endIndex; ++i) averageKnots[++newKnotIndex] = parameters.segment(i, degree).mean()"
  },
  {
    "label": "temporaryParameters()",
    "kind": "Method",
    "detail": "Function (averageKnots [ + + newKnotIndex ] = parameters [ numParameters - 1 ] ; newKnotIndex = - 1 ; ParameterVectorType)",
    "insertText": "temporaryParameters(numParameters + 1)"
  },
  {
    "label": "derivativeKnots()",
    "kind": "Method",
    "detail": "Function (KnotVectorType)",
    "insertText": "derivativeKnots(numInternalDerivatives)"
  },
  {
    "label": "parameterIndices()",
    "kind": "Method",
    "detail": "Function (temporaryParameters [ 0 ] = averageKnots [ i ] ; ParameterVectorType)",
    "insertText": "parameterIndices(numParameters)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int temporaryParameterIndex = 1 ;)",
    "insertText": "for(DenseIndex j = 0; j < numParameters; ++j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar parameter = parameters [ j ] ;)",
    "insertText": "if(parameter >= averageKnots[i] && parameter < averageKnots[i + 1])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (parameterIndices [ temporaryParameterIndex ] = j ; temporaryParameters [ temporaryParameterIndex + + ] = parameter ; } } temporaryParameters [ temporaryParameterIndex ] = averageKnots [ i + 1 ] ;)",
    "insertText": "for(int j = 0; j <= temporaryParameterIndex - 2; ++j)"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (derivativeKnots [ + + newKnotIndex ] = temporaryParameters .)",
    "insertText": "segment(j, 3).mean()"
  },
  {
    "label": "temporaryKnots()",
    "kind": "Method",
    "detail": "Function (break ; } } } } KnotVectorType)",
    "insertText": "temporaryKnots(averageKnots.size() + derivativeKnots.size())"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(averageKnots.data(), averageKnots.data() + averageKnots.size(), derivativeKnots.data(), derivativeKnots.data() + derivativeKnots.size(), temporaryKnots.data())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (DenseIndex numKnots = numParameters + numDerivatives + degree + 1 ; knots .)",
    "insertText": "resize(numKnots)"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (knots .)",
    "insertText": "head(degree).fill(temporaryKnots[0])"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (knots .)",
    "insertText": "tail(degree).fill(temporaryKnots.template tail<1>()[0])"
  },
  {
    "label": "segment()",
    "kind": "Method",
    "detail": "Function (knots .)",
    "insertText": "segment(degree, temporaryKnots.size())"
  },
  {
    "label": "ChordLengths()",
    "kind": "Method",
    "detail": "Function (} template<PointArrayType,KnotVectorType> void)",
    "insertText": "ChordLengths(const PointArrayType& pts, KnotVectorType& chord_lengths)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (typedef KnotVectorType::Scalar Scalar ; const DenseIndex n = pts .)",
    "insertText": "cols()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (chord_lengths .)",
    "insertText": "resize(pts.cols())"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (chord_lengths [ 0 ] = 0 ; chord_lengths .)",
    "insertText": "rightCols(n-1) = (pts.array().leftCols(n-1) - pts.array().rightCols(n-1)).matrix().colwise().norm()"
  },
  {
    "label": "partial_sum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "partial_sum(chord_lengths.data(), chord_lengths.data()+n, chord_lengths.data())"
  },
  {
    "label": "chord_lengths()",
    "kind": "Method",
    "detail": "Function (chord_lengths / =)",
    "insertText": "chord_lengths(n-1)"
  },
  {
    "label": "chord_lengths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "chord_lengths(n-1) = Scalar(1)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (} template<SplineType> struct SplineFitting { typedef SplineType::KnotVectorType KnotVectorType ; typedef SplineType::ParameterVectorType ParameterVectorType ; template<PointArrayType> SplineType)",
    "insertText": "Interpolate(const PointArrayType& pts, DenseIndex degree)"
  },
  {
    "label": "Interpolate()",
    "kind": "Method",
    "detail": "Function (template<PointArrayType> SplineType)",
    "insertText": "Interpolate(const PointArrayType& pts, DenseIndex degree, const KnotVectorType& knot_parameters)"
  },
  {
    "label": "InterpolateWithDerivatives()",
    "kind": "Method",
    "detail": "Function (template<PointArrayType,IndexArray> SplineType)",
    "insertText": "InterpolateWithDerivatives(const PointArrayType& points, const PointArrayType& derivatives, const IndexArray& derivativeIndices, const unsigned int degree)"
  },
  {
    "label": "InterpolateWithDerivatives()",
    "kind": "Method",
    "detail": "Function (template<PointArrayType,IndexArray> SplineType)",
    "insertText": "InterpolateWithDerivatives(const PointArrayType& points, const PointArrayType& derivatives, const IndexArray& derivativeIndices, const unsigned int degree, const ParameterVectorType& parameters)"
  },
  {
    "label": "KnotAveraging()",
    "kind": "Method",
    "detail": "Function (typedef SplineType::KnotVectorType::Scalar Scalar ; typedef SplineType::ControlPointVectorType ControlPointVectorType ; typedef Matrix<Scalar,Dynamic,Dynamic> MatrixType ; KnotVectorType knots ;)",
    "insertText": "KnotAveraging(knot_parameters, degree, knots)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (MatrixType A =)",
    "insertText": "Zero(n,n)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (const DenseIndex span =)",
    "insertText": "Span(knot_parameters[i], degree, knots)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "row(i).segment(span-degree, degree+1) = SplineType::BasisFunctions(knot_parameters[i], degree, knots)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "A(0,0)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(n-1,n-1)"
  },
  {
    "label": "qr()",
    "kind": "Method",
    "detail": "Function (HouseholderQR<MatrixType>)",
    "insertText": "qr(A)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (ControlPointVectorType ctrls = qr .)",
    "insertText": "solve(MatrixType(pts.transpose())).transpose()"
  },
  {
    "label": "ChordLengths()",
    "kind": "Method",
    "detail": "Function (KnotVectorType chord_lengths ;)",
    "insertText": "ChordLengths(pts, chord_lengths)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (typedef SplineType::KnotVectorType::Scalar Scalar ; typedef SplineType::ControlPointVectorType ControlPointVectorType ; typedef Matrix<Scalar,Dynamic,Dynamic> MatrixType ; const DenseIndex n = points .)",
    "insertText": "cols() + derivatives.cols()"
  },
  {
    "label": "KnotAveragingWithDerivatives()",
    "kind": "Method",
    "detail": "Function (KnotVectorType knots ;)",
    "insertText": "KnotAveragingWithDerivatives(parameters, degree, derivativeIndices, knots)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (MatrixType A =)",
    "insertText": "Zero(n, n)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (MatrixType)",
    "insertText": "b(points.rows(), n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DenseIndex startRow ; DenseIndex derivativeStart ;)",
    "insertText": "if(derivativeIndices[0] == 0)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (A . template)",
    "insertText": "block(1, 0)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "y(knots(degree + 1) - knots(0))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (b .)",
    "insertText": "col(1) = y*derivatives.col(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (startRow = 2 ; derivativeStart = 1 ; } else { startRow = 1 ; derivativeStart = 0 ; })",
    "insertText": "if(derivativeIndices[derivatives.cols() - 1] == points.cols() - 1)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (A . template)",
    "insertText": "block(n - 2, n - 2)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (Scalar)",
    "insertText": "y(knots(knots.size() - 1) - knots(knots.size() - (degree + 2)))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (b .)",
    "insertText": "col(b.cols() - 2) = y*derivatives.col(derivatives.cols() - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} DenseIndex row = startRow ; DenseIndex derivativeIndex = derivativeStart ;)",
    "insertText": "for(DenseIndex i = 1; i < parameters.size() - 1; ++i)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (const DenseIndex span =)",
    "insertText": "Span(parameters[i], degree, knots)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (A .)",
    "insertText": "block(row, span - degree, 2, degree + 1) = SplineType::BasisFunctionDerivatives(parameters[i], 1, degree, knots)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (b .)",
    "insertText": "col(row++) = points.col(i)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (b .)",
    "insertText": "col(row++) = derivatives.col(derivativeIndex++)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} else { A .)",
    "insertText": "row(row).segment(span - degree, degree + 1) = SplineType::BasisFunctions(parameters[i], degree, knots)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} } b .)",
    "insertText": "col(0) = points.col(0)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (b .)",
    "insertText": "col(b.cols() - 1) = points.col(points.cols() - 1)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "A(n - 1, n - 1)"
  },
  {
    "label": "lu()",
    "kind": "Method",
    "detail": "Function (FullPivLU<MatrixType>)",
    "insertText": "lu(A)"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (ControlPointVectorType controlPoints = lu .)",
    "insertText": "solve(MatrixType(b.transpose())).transpose()"
  },
  {
    "label": "spline()",
    "kind": "Method",
    "detail": "Function (SplineType)",
    "insertText": "spline(knots, controlPoints)"
  },
  {
    "label": "ChordLengths()",
    "kind": "Method",
    "detail": "Function (ParameterVectorType parameters ;)",
    "insertText": "ChordLengths(points, parameters)"
  }
]