[
  {
    "label": "TCookedEditorTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCookedEditorTargetPlatformControls"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "TCookedCookerTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCookedCookerTargetPlatformControls"
  },
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "TCookedEditorTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Common / TargetPlatformControlsBase . h \" # include \" Interfaces / IPluginManager . h \" # include \" CookedEditorPackageManager . h \" template<Base> class TCookedEditorTargetPlatformControls : public Base { public :)",
    "insertText": "TCookedEditorTargetPlatformControls(ITargetPlatformSettings* TargetPlatformSettings) :Base(TargetPlatformSettings)"
  },
  {
    "label": "FactoryForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (PackageManager =)",
    "insertText": "FactoryForTargetPlatform(false)"
  },
  {
    "label": "TCookedEditorTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCookedEditorTargetPlatformControls(TUniquePtr<ICookedEditorPackageManager>&& ExistingManager, ITargetPlatformSettings* TargetPlatformSettings) :Base(TargetPlatformSettings)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (PackageManager =)",
    "insertText": "MoveTemp(ExistingManager)"
  },
  {
    "label": "TCookedEditorTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCookedEditorTargetPlatformControls()"
  },
  {
    "label": "PlatformName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "PlatformName()"
  },
  {
    "label": "GetTargetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FString CachedPlatformName = this ->)",
    "insertText": "GetTargetPlatformSettings()->IniPlatformName() + TEXT(\"CookedEditor\")"
  },
  {
    "label": "AllowsEditorObjects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowsEditorObjects()"
  },
  {
    "label": "InitializeForCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeForCook()"
  },
  {
    "label": "GetExtraPackagesToCook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetExtraPackagesToCook(TArray<FName>& PackageNames)"
  },
  {
    "label": "GatherAllPackages()",
    "kind": "Method",
    "detail": "Function (PackageManager ->)",
    "insertText": "GatherAllPackages(PackageNames)"
  },
  {
    "label": "IsRunningPlatform()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsRunningPlatform()"
  },
  {
    "label": "GetDefaultDevice()",
    "kind": "Method",
    "detail": "Function (} ITargetDevicePtr)",
    "insertText": "GetDefaultDevice()"
  },
  {
    "label": "FactoryForTargetPlatform()",
    "kind": "Method",
    "detail": "Function (PackageManager =)",
    "insertText": "FactoryForTargetPlatform(true)"
  },
  {
    "label": "TCookedCookerTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TCookedCookerTargetPlatformControls(TUniquePtr<ICookedEditorPackageManager>&& ExistingManager, ITargetPlatformSettings* TargetPlatformSettings) : Base(TargetPlatformSettings)"
  },
  {
    "label": "TCookedCookerTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TCookedCookerTargetPlatformControls()"
  },
  {
    "label": "GetTargetPlatformSettings()",
    "kind": "Method",
    "detail": "Function (FString CachedPlatformName = this ->)",
    "insertText": "GetTargetPlatformSettings()->IniPlatformName() + TEXT(\"CookedCooker\")"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GetTextureFormats(const class UTexture* InTexture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsVariants()"
  }
]