[
  {
    "label": "TAllocatorFixedSizeFreeList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAllocatorFixedSizeFreeList"
  },
  {
    "label": "FreeListNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FreeListNode"
  },
  {
    "label": "TAllocatorFixedSizeFreeList()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" CoreGlobals . h \" template<uint32 AllocationSize,uint32 BlockSize> class TAllocatorFixedSizeFreeList { public :)",
    "insertText": "TAllocatorFixedSizeFreeList(uint32 InitialBlockSize=0) :FreeList(nullptr) ,NumAllocated(0) ,NumLive(0)"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grow(InitialBlockSize)"
  },
  {
    "label": "TAllocatorFixedSizeFreeList()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TAllocatorFixedSizeFreeList()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Allocate()"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Grow(BlockSize)"
  },
  {
    "label": "rawMem()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "rawMem(void *)"
  },
  {
    "label": "CheckInvariants()",
    "kind": "Method",
    "detail": "Function (FreeList = FreeList -> NextFreeAllocation ; + + NumLive ;)",
    "insertText": "CheckInvariants()"
  },
  {
    "label": "NewFreeElement()",
    "kind": "Method",
    "detail": "Function (- - NumLive ; FreeListNode*)",
    "insertText": "NewFreeElement(FreeListNode*)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "RawMem()",
    "kind": "Method",
    "detail": "Function (uint8*)",
    "insertText": "RawMem(uint8*)FMemory::Malloc(AllocationSize * NumElements)"
  },
  {
    "label": "NewFreeList()",
    "kind": "Method",
    "detail": "Function (FreeListNode*)",
    "insertText": "NewFreeList(FreeListNode*)"
  },
  {
    "label": "NextFreeAllocation()",
    "kind": "Method",
    "detail": "Function (NewFreeList ->)",
    "insertText": "NextFreeAllocation(FreeListNode*)(RawMem + (i+1)*AllocationSize)"
  },
  {
    "label": "FreeList()",
    "kind": "Method",
    "detail": "Function (} NewFreeList -> NextFreeAllocation = FreeList ;)",
    "insertText": "FreeList(FreeListNode*)"
  }
]