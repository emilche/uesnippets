[
  {
    "label": "ASpotLight",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ASpotLight"
  },
  {
    "label": "USpotLightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USpotLightComponent"
  },
  {
    "label": "UArrowComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UArrowComponent"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Engine / Light . h \" # include \" SpotLight . generated . h \")",
    "insertText": "UCLASS(ClassGroup=(Lights, SpotLights), MinimalAPI, ComponentWrapperClass, meta=(ChildCanTick))"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(BlueprintReadOnly, VisibleAnywhere, Category=\"Light\", meta=(ExposeFunctionCategories=\"SpotLight,Rendering|Lighting\"))"
  },
  {
    "label": "EditorApplyScale()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "EditorApplyScale(const FVector& DeltaScale, const FVector* PivotLocation, bool bAltDown, bool bShiftDown, bool bCtrlDown)"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "LoadedFromAnotherClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "LoadedFromAnotherClass(const FName& OldClassName)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditChangeProperty(FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "GetArrowComponent()",
    "kind": "Method",
    "detail": "Function (# endif public : # if WITH_EDITORONLY_DATA class UArrowComponent*)",
    "insertText": "GetArrowComponent()"
  }
]