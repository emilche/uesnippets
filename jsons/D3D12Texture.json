[
  {
    "label": "FD3D12Texture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Texture"
  },
  {
    "label": "FD3D12Device",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Device"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "TD3D12ResourceTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TD3D12ResourceTraits"
  },
  {
    "label": "FD3D12Viewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12Viewport"
  },
  {
    "label": "FD3D12BackBufferReferenceTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FD3D12BackBufferReferenceTexture2D"
  },
  {
    "label": "GUARDED_TEXTURE_CREATES()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" D3D12CommandList . h \" # include \" D3D12Resources . h \" # include \" D3D12View . h \" # define)",
    "insertText": "GUARDED_TEXTURE_CREATES(PLATFORM_WINDOWS && !(UE_BUILD_SHIPPING || UE_BUILD_TEST || PLATFORM_COMPILER_CLANG)) void SafeCreateTexture2D(FD3D12Device* pDevice, FD3D12Adapter* Adapter, const FD3D12ResourceDesc& TextureDesc, const D3D12_CLEAR_VALUE* ClearValue, FD3D12ResourceLocation* OutTexture2D, FD3D12BaseShaderResource* Owner, EPixelFormat Format, ETextureCreateFlags Flags, D3D12_RESOURCE_STATES InitialState, const TCHAR* Name)"
  },
  {
    "label": "CanBe4KAligned()",
    "kind": "Method",
    "detail": "Function (class FD3D12Texture : public FRHITexture,public FD3D12BaseShaderResource,public FD3D12LinkedAdapterObject<FD3D12Texture> { public : bool)",
    "insertText": "CanBe4KAligned(const FD3D12ResourceDesc& Desc, EPixelFormat UEFormat)"
  },
  {
    "label": "FD3D12Texture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12Texture()"
  },
  {
    "label": "FD3D12Texture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FD3D12Texture(const FRHITextureCreateDesc& InDesc, class FD3D12Device* InParent) : FRHITexture(InDesc) , FD3D12BaseShaderResource(InParent)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "GetResourceInfo()",
    "kind": "Method",
    "detail": "Function (} # if RHI_ENABLE_RESOURCE_INFO bool)",
    "insertText": "GetResourceInfo(FRHIResourceInfo& OutResourceInfo)"
  },
  {
    "label": "GetTextureBaseRHI()",
    "kind": "Method",
    "detail": "Function (# endif void*)",
    "insertText": "GetTextureBaseRHI()"
  },
  {
    "label": "GetDefaultBindlessHandle()",
    "kind": "Method",
    "detail": "Function (FRHIDescriptorHandle)",
    "insertText": "GetDefaultBindlessHandle()"
  },
  {
    "label": "IsStreamable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStreamable()"
  },
  {
    "label": "SkipsFastClearFinalize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SkipsFastClearFinalize()"
  },
  {
    "label": "GetAliasingSourceTexture()",
    "kind": "Method",
    "detail": "Function (} const FTextureRHIRef&)",
    "insertText": "GetAliasingSourceTexture()"
  },
  {
    "label": "HasRenderTargetViews()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRenderTargetViews()"
  },
  {
    "label": "GetShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FD3D12ShaderResourceView*)",
    "insertText": "GetShaderResourceView()"
  },
  {
    "label": "GetRenderTargetView()",
    "kind": "Method",
    "detail": "Function (} FD3D12RenderTargetView*)",
    "insertText": "GetRenderTargetView(int32 MipIndex, int32 ArraySliceIndex)"
  },
  {
    "label": "GetDepthStencilView()",
    "kind": "Method",
    "detail": "Function (FD3D12DepthStencilView*)",
    "insertText": "GetDepthStencilView(FExclusiveDepthStencil AccessType)"
  },
  {
    "label": "GetRequiresTypelessResourceDiscardWorkaround()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_REQUIRES_TYPELESS_RESOURCE_DISCARD_WORKAROUND bool)",
    "insertText": "GetRequiresTypelessResourceDiscardWorkaround()"
  },
  {
    "label": "CreateViews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViews(FD3D12Texture* FirstLinkedObject)"
  },
  {
    "label": "SetCreatedRTVsPerSlice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCreatedRTVsPerSlice(bool Value, int32 InRTVArraySize)"
  },
  {
    "label": "SetNumRTVs()",
    "kind": "Method",
    "detail": "Function (bCreatedRTVsPerSlice = Value ; RTVArraySizePerMip = InRTVArraySize ; } void)",
    "insertText": "SetNumRTVs(int32 Num)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (RenderTargetViews .)",
    "insertText": "SetNum(Num)"
  },
  {
    "label": "EmplaceRTV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmplaceRTV(D3D12_RENDER_TARGET_VIEW_DESC const& RTVDesc, int32 Index, FD3D12Texture* FirstLinkedObject)"
  },
  {
    "label": "FD3D12RenderTargetView()",
    "kind": "Method",
    "detail": "Function (RenderTargetViews [ Index ] = MakeShared<)",
    "insertText": "FD3D12RenderTargetView(GetParentDevice(), FirstLinkedObject ? FirstLinkedObject->RenderTargetViews[Index].Get() : nullptr)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (RenderTargetViews [ Index ] ->)",
    "insertText": "CreateView(this, RTVDesc)"
  },
  {
    "label": "EmplaceDSV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmplaceDSV(D3D12_DEPTH_STENCIL_VIEW_DESC const& DSVDesc, int32 Index, FD3D12Texture* FirstLinkedObject)"
  },
  {
    "label": "FD3D12DepthStencilView()",
    "kind": "Method",
    "detail": "Function (DepthStencilViews [ Index ] = MakeShared<)",
    "insertText": "FD3D12DepthStencilView(GetParentDevice(), FirstLinkedObject ? FirstLinkedObject->DepthStencilViews[Index].Get() : nullptr)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (DepthStencilViews [ Index ] ->)",
    "insertText": "CreateView(this, DSVDesc)"
  },
  {
    "label": "EmplaceSRV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EmplaceSRV(D3D12_SHADER_RESOURCE_VIEW_DESC const& SRVDesc, FD3D12Texture* FirstLinkedObject)"
  },
  {
    "label": "FD3D12ShaderResourceView()",
    "kind": "Method",
    "detail": "Function (ShaderResourceView = MakeShared<)",
    "insertText": "FD3D12ShaderResourceView(GetParentDevice(), FirstLinkedObject ? FirstLinkedObject->ShaderResourceView.Get() : nullptr)"
  },
  {
    "label": "CreateView()",
    "kind": "Method",
    "detail": "Function (ShaderResourceView ->)",
    "insertText": "CreateView(this, SRVDesc, Flags)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Lock(FRHICommandListImmediate& RHICmdList, uint32 MipIndex, uint32 ArrayIndex, EResourceLockMode LockMode, uint32& DestStride, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(FRHICommandListBase& RHICmdList, uint32 MipIndex, uint32 ArrayIndex)"
  },
  {
    "label": "UpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTexture2D(FRHICommandListBase& RHICmdList, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "UpdateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTexture(FD3D12CommandContext& Context, uint32 MipIndex, uint32 DestX, uint32 DestY, uint32 DestZ, const D3D12_TEXTURE_COPY_LOCATION& SourceCopyLocation)"
  },
  {
    "label": "CopyTextureRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTextureRegion(FD3D12CommandContext& Context, uint32 DestX, uint32 DestY, uint32 DestZ, FD3D12Texture* SourceTexture, const D3D12_BOX& SourceBox)"
  },
  {
    "label": "AliasResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AliasResources(FD3D12Texture* Texture)"
  },
  {
    "label": "SetAliasingSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAliasingSource(FTextureRHIRef& SourceTextureRHI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 ArrayIndex = MipIndex ;)",
    "insertText": "if(bCreatedRTVsPerSlice)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ArrayIndex = MipIndex* RTVArraySizePerMip + ArraySliceIndex ;)",
    "insertText": "check(ArrayIndex < RenderTargetViews.Num())"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(ArraySliceIndex == -1 || ArraySliceIndex == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ArrayIndex < RenderTargetViews.Num())"
  },
  {
    "label": "FD3D12BackBufferReferenceTexture2D()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } template<> struct TD3D12ResourceTraits<FRHITexture> { typedef FD3D12Texture TConcreteType ; } ; class FD3D12Viewport ; # if D3D12RHI_USE_DUMMY_BACKBUFFER class FD3D12BackBufferReferenceTexture2D : public FD3D12Texture { public :)",
    "insertText": "FD3D12BackBufferReferenceTexture2D(const FRHITextureCreateDesc& InDesc, FD3D12Viewport* InViewPort, FD3D12Device* InDevice) : FD3D12Texture(InDesc, InDevice) , Viewport(InViewPort)"
  },
  {
    "label": "GetViewPort()",
    "kind": "Method",
    "detail": "Function (} FD3D12Viewport*)",
    "insertText": "GetViewPort()"
  },
  {
    "label": "GetD3D12TextureFromRHITexture()",
    "kind": "Method",
    "detail": "Function (private : FD3D12Viewport* const Viewport ; } ; # endif FD3D12Texture*)",
    "insertText": "GetD3D12TextureFromRHITexture(FRHITexture* Texture)"
  },
  {
    "label": "BufferBufferReferenceTexture()",
    "kind": "Method",
    "detail": "Function (FD3D12BackBufferReferenceTexture2D*)",
    "insertText": "BufferBufferReferenceTexture(FD3D12BackBufferReferenceTexture2D*)"
  },
  {
    "label": "GetBackBufferTexture()",
    "kind": "Method",
    "detail": "Function (RHITexture = BufferBufferReferenceTexture ->)",
    "insertText": "GetBackBufferTexture()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} # endif FD3D12Texture*)",
    "insertText": "Result((FD3D12Texture*)RHITexture->GetTextureBaseRHI())"
  },
  {
    "label": "GetD3D12TextureFromRHITexture()",
    "kind": "Method",
    "detail": "Function (FD3D12Texture* Result =)",
    "insertText": "GetD3D12TextureFromRHITexture(Texture)"
  },
  {
    "label": "GetLinkedObject()",
    "kind": "Method",
    "detail": "Function (Result = Result ->)",
    "insertText": "GetLinkedObject(GPUIndex)"
  },
  {
    "label": "D3D12TextureAllocated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "D3D12TextureAllocated(FD3D12Texture& Texture)"
  },
  {
    "label": "D3D12TextureDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "D3D12TextureDeleted(FD3D12Texture& Texture)"
  }
]