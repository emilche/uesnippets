[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _METIS_H_ # define _METIS_H_ # define IDXTYPEWIDTH 3 2 # define REALTYPEWIDTH 3 2 # if)",
    "insertText": "defined(_MSC_VER) #define COMPILER_MSC #endif #if defined(__ICC) #define COMPILER_ICC #endif #if defined(__GNUC__)"
  },
  {
    "label": "REALEQ()",
    "kind": "Method",
    "detail": "Function (typedef __int64 int64_t ; # define PRId32 \" I32d \" # define PRId64 \" I64d \" # define SCNd32 \" ld \" # define SCNd64 \" I64d \" # else # include<inttypes . h> # endif # endif # if IDXTYPEWIDTH = = 3 2 typedef int32_t idx_t ; # define IDX_MAX INT32_MAX # define IDX_MIN INT32_MIN # define SCIDX SCNd32 # define PRIDX PRId32 # define strtoidx strtol # define iabs abs # elif IDXTYPEWIDTH = = 6 4 typedef int64_t idx_t ; # define IDX_MAX INT64_MAX # define IDX_MIN INT64_MIN # define SCIDX SCNd64 # define PRIDX PRId64 # ifdef COMPILER_MSC # define strtoidx _strtoi64 # else # define strtoidx strtoll # endif # define iabs labs # else # error \" Incorrect user - supplied value fo IDXTYPEWIDTH \" # endif # if REALTYPEWIDTH = = 3 2 typedef float real_t ; # define SCREAL \" f \" # define PRREAL \" f \" # define REAL_MAX FLT_MAX # define REAL_MIN FLT_MIN # define REAL_EPSILON FLT_EPSILON # define rabs fabsf # define)",
    "insertText": "REALEQ(x,y) ((rabs((x)-(y)) <= FLT_EPSILON)) #ifdef COMPILER_MSC #define strtoreal (float)"
  },
  {
    "label": "REALEQ()",
    "kind": "Method",
    "detail": "Function (# define SCREAL \" lf \" # define PRREAL \" lf \" # define REAL_MAX DBL_MAX # define REAL_MIN DBL_MIN # define REAL_EPSILON DBL_EPSILON # define rabs fabs # define)",
    "insertText": "REALEQ(x,y) ((rabs((x)-(y)) <= DBL_EPSILON)) #define strtoreal strtod #else #error \"Incorrect user-supplied value for REALTYPEWIDTH\" #endif #define METIS_VER_MAJOR 5 #define METIS_VER_MINOR 1 #define METIS_VER_SUBMINOR 0 #define METIS_NOPTIONS 40 #ifdef _WINDLL #define METIS_API(type) __declspec(dllexport) type __cdecl #elif defined(__cdecl) #define METIS_API(type) type __cdecl #else #define METIS_API(type)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "METIS_API(int) METIS_PartGraphRecursive(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_PartGraphKway(idx_t *nvtxs, idx_t *ncon, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *vsize, idx_t *adjwgt, idx_t *nparts, real_t *tpwgts, real_t *ubvec, idx_t *options, idx_t *edgecut, idx_t *part)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_MeshToDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *ncommon, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_MeshToNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *numflag, idx_t **r_xadj, idx_t **r_adjncy)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_PartMeshNodal(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_PartMeshDual(idx_t *ne, idx_t *nn, idx_t *eptr, idx_t *eind, idx_t *vwgt, idx_t *vsize, idx_t *ncommon, idx_t *nparts, real_t *tpwgts, idx_t *options, idx_t *objval, idx_t *epart, idx_t *npart)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_NodeND(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *perm, idx_t *iperm)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_Free(void *ptr)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_SetDefaultOptions(idx_t *options)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_NodeNDP(idx_t nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t npes, idx_t *options, idx_t *perm, idx_t *iperm, idx_t *sizes)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_ComputeVertexSeparator(idx_t *nvtxs, idx_t *xadj, idx_t *adjncy, idx_t *vwgt, idx_t *options, idx_t *sepsize, idx_t *part)"
  },
  {
    "label": "METIS_API()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "METIS_API(int) METIS_NodeRefine(idx_t nvtxs, idx_t *xadj, idx_t *vwgt, idx_t *adjncy, idx_t *where, idx_t *hmarker, real_t ubfactor)"
  }
]