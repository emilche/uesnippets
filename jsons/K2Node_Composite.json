[
  {
    "label": "INameValidatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INameValidatorInterface"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "BLUEPRINTGRAPH_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BLUEPRINTGRAPH_API"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraph . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphNodeUtils . h \" # include \" Internationalization / Text . h \" # include \" K2Node_Tunnel . h \" # include \" Math / Color . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / UObjectGlobals . h \" # include \" K2Node_Composite . generated . h \" class INameValidatorInterface ; class UObject ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "AllocateDefaultPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateDefaultPins()"
  },
  {
    "label": "DestroyNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyNode()"
  },
  {
    "label": "PostPasteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPasteNode()"
  },
  {
    "label": "GetTooltipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTooltipText()"
  },
  {
    "label": "GetNodeTitleColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetNodeTitleColor()"
  },
  {
    "label": "GetNodeTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetNodeTitle(ENodeTitleType::Type TitleType)"
  },
  {
    "label": "CanUserDeleteNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUserDeleteNode()"
  },
  {
    "label": "GetJumpTargetForDoubleClick()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetJumpTargetForDoubleClick()"
  },
  {
    "label": "PostPlacedNewNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostPlacedNewNode()"
  },
  {
    "label": "OnRenameNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameNode(const FString& NewName)"
  },
  {
    "label": "MakeNameValidator()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class INameValidatorInterface>)",
    "insertText": "MakeNameValidator()"
  },
  {
    "label": "GetSubGraphs()",
    "kind": "Method",
    "detail": "Function (TArray<UEdGraph*>)",
    "insertText": "GetSubGraphs()"
  },
  {
    "label": "CanCreateUnderSpecifiedSchema()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanCreateUnderSpecifiedSchema(const UEdGraphSchema* DesiredSchema)"
  },
  {
    "label": "DrawNodeAsExit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DrawNodeAsExit()"
  },
  {
    "label": "GetExitNode()",
    "kind": "Method",
    "detail": "Function (UK2Node_Tunnel*)",
    "insertText": "GetExitNode()"
  },
  {
    "label": "FixupInputAndOutputSink()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "FixupInputAndOutputSink()"
  },
  {
    "label": "RenameBoundGraphCloseToName()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RenameBoundGraphCloseToName(const FString& Name)"
  },
  {
    "label": "IsCompositeNameAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompositeNameAvailable(const FString& NewName)"
  }
]