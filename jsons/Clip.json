[
  {
    "label": "MaskInteriorVoxels",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MaskInteriorVoxels"
  },
  {
    "label": "CopyLeafNodes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CopyLeafNodes"
  },
  {
    "label": "BoolSampler",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoolSampler"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "ConvertGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConvertGrid"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_CLIP_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_CLIP_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / math / Math . h> # include<openvdb / math / Maps . h> # include<openvdb / tree / LeafManager . h> # include \" GridTransformer . h \" # include \" Prune . h \" # include<tbb / blocked_range . h> # include<tbb / parallel_reduce . h> # include<type_traits> # include<vector> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<GridType> GridType::Ptr)",
    "insertText": "clip(const GridType& grid, const BBoxd& bbox, bool keepInterior = true)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (template<GridType> GridType::Ptr)",
    "insertText": "clip(const GridType& grid, const math::NonlinearFrustumMap& frustum, bool keepInterior = true)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (template<GridType,MaskTreeType> GridType::Ptr)",
    "insertText": "clip(const GridType& grid, const Grid<MaskTreeType>& mask, bool keepInterior = true)"
  },
  {
    "label": "MaskInteriorVoxels()",
    "kind": "Method",
    "detail": "Function (namespace clip_internal { using MaskValueType = ValueMask ; template<TreeT> class MaskInteriorVoxels { public : using ValueT = TreeT::ValueType ; using LeafNodeT = TreeT::LeafNodeType ;)",
    "insertText": "MaskInteriorVoxels(const TreeT& tree): mAcc(tree)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<LeafNodeType> void)",
    "insertText": "operator()(LeafNodeType& leaf, size_t)"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (const auto* refLeaf = mAcc .)",
    "insertText": "probeConstLeaf(leaf.origin())"
  },
  {
    "label": "pos()",
    "kind": "Method",
    "detail": "Function (const auto pos = iter .)",
    "insertText": "pos()"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (leaf .)",
    "insertText": "setActiveState(pos, math::isNegative(refLeaf->getValue(pos)))"
  },
  {
    "label": "CopyLeafNodes()",
    "kind": "Method",
    "detail": "Function (} } } private : tree::ValueAccessor<const TreeT> mAcc ; } ; template<TreeT> class CopyLeafNodes { public : using MaskTreeT = TreeT::template ValueConverter<MaskValueType>::Type ; using MaskLeafManagerT = tree::LeafManager<const MaskTreeT> ;)",
    "insertText": "CopyLeafNodes(const TreeT&, const MaskLeafManagerT&)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run(bool threaded = true)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (TreeT::Ptr)",
    "insertText": "tree()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>&)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "join(const CopyLeafNodes& rhs)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (mNewTree ->)",
    "insertText": "merge(*rhs.mNewTree)"
  },
  {
    "label": "CopyLeafNodes()",
    "kind": "Method",
    "detail": "Function (} private : const MaskTreeT* mClipMask ; const TreeT* mTree ; const MaskLeafManagerT* mLeafNodes ; TreeT::Ptr mNewTree ; } ; template<TreeT> CopyLeafNodes<TreeT)",
    "insertText": "CopyLeafNodes(const TreeT& tree, const MaskLeafManagerT& leafNodes) : mTree(&tree) , mLeafNodes(&leafNodes) , mNewTree(new TreeT(mTree->background()))"
  },
  {
    "label": "CopyLeafNodes()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> CopyLeafNodes<TreeT)",
    "insertText": "CopyLeafNodes(CopyLeafNodes& rhs, tbb::split) : mTree(rhs.mTree) , mLeafNodes(rhs.mLeafNodes) , mNewTree(new TreeT(mTree->background()))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> void CopyLeafNodes<TreeT)",
    "insertText": "run(bool threaded)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<TreeT> void CopyLeafNodes<TreeT)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<TreeT>)",
    "insertText": "acc(*mNewTree)"
  },
  {
    "label": "refAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<const TreeT>)",
    "insertText": "refAcc(*mTree)"
  },
  {
    "label": "leaf()",
    "kind": "Method",
    "detail": "Function (const auto& maskLeaf = mLeafNodes ->)",
    "insertText": "leaf(n)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (const auto& ijk = maskLeaf .)",
    "insertText": "origin()"
  },
  {
    "label": "probeConstLeaf()",
    "kind": "Method",
    "detail": "Function (const auto* refLeaf = refAcc .)",
    "insertText": "probeConstLeaf(ijk)"
  },
  {
    "label": "touchLeaf()",
    "kind": "Method",
    "detail": "Function (auto* newLeaf = acc .)",
    "insertText": "touchLeaf(ijk)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (newLeaf ->)",
    "insertText": "setValueOnly(pos, refLeaf->getValue(pos))"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (newLeaf ->)",
    "insertText": "setActiveState(pos, refLeaf->isValueOn(pos))"
  },
  {
    "label": "probeValue()",
    "kind": "Method",
    "detail": "Function (} } else { TreeT::ValueType value ; bool isActive = refAcc .)",
    "insertText": "probeValue(ijk, value)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (newLeaf ->)",
    "insertText": "setValueOnly(pos, value)"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (newLeaf ->)",
    "insertText": "setActiveState(pos, isActive)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (} } } } struct BoolSampler { const char*)",
    "insertText": "name()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<FromGridT,ToGridT> struct ConvertGrid { using FromGridCPtrT = FromGridT::ConstPtr ; using ToGridPtrT = ToGridT::Ptr ; ToGridPtrT)",
    "insertText": "operator()(const FromGridCPtrT& grid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<GridT> struct ConvertGrid<GridT,GridT> { using GridCPtrT = GridT::ConstPtr ; GridCPtrT)",
    "insertText": "operator()(const GridCPtrT& grid)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (using MaskGridT = GridT::template ValueConverter<MaskValueType>::Type ; auto mask =)",
    "insertText": "create(false)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (mask ->)",
    "insertText": "topologyUnion(grid)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (mask ->)",
    "insertText": "setTransform(grid.constTransform().copy())"
  },
  {
    "label": "doClip()",
    "kind": "Method",
    "detail": "Function (} template<GridType> GridType::Ptr)",
    "insertText": "doClip(const GridType& grid, const typename GridType::template ValueConverter<MaskValueType>::Type& clipMask, bool keepInterior)"
  },
  {
    "label": "getGridClass()",
    "kind": "Method",
    "detail": "Function (using TreeT = GridType::TreeType ; using MaskTreeT = GridType::TreeType::template ValueConverter<MaskValueType>::Type ; const auto gridClass = grid .)",
    "insertText": "getGridClass()"
  },
  {
    "label": "gridMask()",
    "kind": "Method",
    "detail": "Function (MaskTreeT)",
    "insertText": "gridMask(false)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (gridMask .)",
    "insertText": "topologyUnion(tree)"
  },
  {
    "label": "leafNodes()",
    "kind": "Method",
    "detail": "Function (tree::LeafManager<MaskTreeT>)",
    "insertText": "leafNodes(gridMask)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (leafNodes .)",
    "insertText": "foreach(MaskInteriorVoxels<TreeT>(tree))"
  },
  {
    "label": "acc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<const TreeT>)",
    "insertText": "acc(tree)"
  },
  {
    "label": "iter()",
    "kind": "Method",
    "detail": "Function (MaskTreeT::ValueAllIter)",
    "insertText": "iter(gridMask)"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setMaxDepth(MaskTreeT::ValueAllIter::LEAF_DEPTH - 1)"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (iter .)",
    "insertText": "setActiveState(math::isNegative(acc.getValue(iter.getCoord())))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(keepInterior)"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (gridMask .)",
    "insertText": "topologyIntersection(clipMask.constTree())"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (} else { gridMask .)",
    "insertText": "topologyDifference(clipMask.constTree())"
  },
  {
    "label": "copyWithNewTree()",
    "kind": "Method",
    "detail": "Function (} auto outGrid = grid .)",
    "insertText": "copyWithNewTree()"
  },
  {
    "label": "maskOp()",
    "kind": "Method",
    "detail": "Function (CopyLeafNodes<TreeT>)",
    "insertText": "maskOp(tree, leafNodes)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (maskOp .)",
    "insertText": "run()"
  },
  {
    "label": "setTree()",
    "kind": "Method",
    "detail": "Function (outGrid ->)",
    "insertText": "setTree(maskOp.tree())"
  },
  {
    "label": "refAcc()",
    "kind": "Method",
    "detail": "Function (} { tree::ValueAccessor<const TreeT>)",
    "insertText": "refAcc(tree)"
  },
  {
    "label": "maskAcc()",
    "kind": "Method",
    "detail": "Function (tree::ValueAccessor<const MaskTreeT>)",
    "insertText": "maskAcc(gridMask)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (TreeT::ValueAllIter)",
    "insertText": "it(outGrid->tree())"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (it .)",
    "insertText": "setMaxDepth(TreeT::ValueAllIter::LEAF_DEPTH - 1)"
  },
  {
    "label": "getCoord()",
    "kind": "Method",
    "detail": "Function (Coord ijk = it .)",
    "insertText": "getCoord()"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (it .)",
    "insertText": "setValue(value)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (} } } outGrid ->)",
    "insertText": "setTransform(grid.transform().copy())"
  },
  {
    "label": "calculateBounds()",
    "kind": "Method",
    "detail": "Function (using MaskValueT = clip_internal::MaskValueType ; using MaskGridT = GridType::template ValueConverter<MaskValueT>::Type ; Vec3d idxMin,idxMax ;)",
    "insertText": "calculateBounds(grid.constTransform(), bbox.min(), bbox.max(), idxMin, idxMax)"
  },
  {
    "label": "region()",
    "kind": "Method",
    "detail": "Function (CoordBBox)",
    "insertText": "region(Coord::floor(idxMin), Coord::floor(idxMax))"
  },
  {
    "label": "clipMask()",
    "kind": "Method",
    "detail": "Function (MaskGridT)",
    "insertText": "clipMask(false)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (clipMask .)",
    "insertText": "fill(region, true, true)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (} template<SrcGridType,ClipTreeType> SrcGridType::Ptr)",
    "insertText": "clip(const SrcGridType& srcGrid, const Grid<ClipTreeType>& clipGrid, bool keepInterior)"
  },
  {
    "label": "convertToMaskGrid()",
    "kind": "Method",
    "detail": "Function (using MaskValueT = clip_internal::MaskValueType ; using ClipGridType = Grid<ClipTreeType> ; using SrcMaskGridType = SrcGridType::template ValueConverter<MaskValueT>::Type ; using ClipMaskGridType = ClipGridType::template ValueConverter<MaskValueT>::Type ; auto maskGrid =)",
    "insertText": "convertToMaskGrid(clipGrid)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (resampledMask ->)",
    "insertText": "setTransform(srcGrid.constTransform().copy())"
  },
  {
    "label": "BoolSampler()",
    "kind": "Method",
    "detail": "Function (tools::resampleToMatch<)",
    "insertText": "BoolSampler(*maskGrid, *resampledMask)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "prune(resampledMask->tree())"
  },
  {
    "label": "SrcMaskGridType()",
    "kind": "Method",
    "detail": "Function (maskGrid = resampledMask ; } auto clipMask = clip_internal::ConvertGrid<ClipMaskGridType,)",
    "insertText": "SrcMaskGridType()(maskGrid)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (} template<GridType> GridType::Ptr)",
    "insertText": "clip(const GridType& inGrid, const math::NonlinearFrustumMap& frustumMap, bool keepInterior)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (using ValueT = GridType::ValueType ; using TreeT = GridType::TreeType ; using LeafT = TreeT::LeafNodeType ; const auto& gridXform = inGrid .)",
    "insertText": "transform()"
  },
  {
    "label": "getBBox()",
    "kind": "Method",
    "detail": "Function (const auto frustumIndexBBox = frustumMap .)",
    "insertText": "getBBox()"
  },
  {
    "label": "frustumContainsCoord()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "frustumContainsCoord(const Coord& ijk)"
  },
  {
    "label": "indexToWorld()",
    "kind": "Method",
    "detail": "Function (auto xyz = gridXform .)",
    "insertText": "indexToWorld(ijk)"
  },
  {
    "label": "applyInverseMap()",
    "kind": "Method",
    "detail": "Function (xyz = frustumMap .)",
    "insertText": "applyInverseMap(xyz)"
  },
  {
    "label": "toFrustumIndexSpace()",
    "kind": "Method",
    "detail": "Function (BBoxd)",
    "insertText": "toFrustumIndexSpace(const CoordBBox& inBBox)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (const Coord bounds [ 2 ] = { inBBox .)",
    "insertText": "min(), inBBox.max()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Coord ijk ; BBoxd outBBox ;)",
    "insertText": "for(int i = 0; i < 8; ++i)"
  },
  {
    "label": "bounds()",
    "kind": "Method",
    "detail": "Function (ijk [ 0 ] =)",
    "insertText": "bounds(i & 1)"
  },
  {
    "label": "bounds()",
    "kind": "Method",
    "detail": "Function (ijk [ 1 ] =)",
    "insertText": "bounds(i & 2)"
  },
  {
    "label": "bounds()",
    "kind": "Method",
    "detail": "Function (ijk [ 2 ] =)",
    "insertText": "bounds(i & 4)"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (outBBox .)",
    "insertText": "expand(xyz)"
  },
  {
    "label": "setGridClass()",
    "kind": "Method",
    "detail": "Function (outGrid ->)",
    "insertText": "setGridClass(GRID_UNKNOWN)"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (} const auto& bg = outGrid ->)",
    "insertText": "background()"
  },
  {
    "label": "getAccessor()",
    "kind": "Method",
    "detail": "Function (auto outAcc = outGrid ->)",
    "insertText": "getAccessor()"
  },
  {
    "label": "beginValueAll()",
    "kind": "Method",
    "detail": "Function (auto tileIter = inGrid .)",
    "insertText": "beginValueAll()"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (tileIter .)",
    "insertText": "setMaxDepth(GridType::ValueAllIter::LEAF_DEPTH - 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CoordBBox tileBBox ;)",
    "insertText": "for(; tileIter; ++tileIter)"
  },
  {
    "label": "isValueOn()",
    "kind": "Method",
    "detail": "Function (const bool tileActive = tileIter .)",
    "insertText": "isValueOn()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (const auto& tileValue = tileIter .)",
    "insertText": "getValue()"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (tileIter .)",
    "insertText": "getBoundingBox(tileBBox)"
  },
  {
    "label": "toFrustumIndexSpace()",
    "kind": "Method",
    "detail": "Function (const auto tileFrustumBBox =)",
    "insertText": "toFrustumIndexSpace(tileBBox)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (copyTile = CopyTile::kFull ; } else)",
    "insertText": "if(frustumIndexBBox.hasOverlap(tileFrustumBBox))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (copyTile = CopyTile::kPartial ; } } else {)",
    "insertText": "if(!frustumIndexBBox.hasOverlap(tileFrustumBBox))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (copyTile = CopyTile::kFull ; } else)",
    "insertText": "if(!frustumIndexBBox.isInside(tileFrustumBBox))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (copyTile = CopyTile::kPartial ; } })",
    "insertText": "switch(copyTile)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; case CopyTile::kPartial :)",
    "insertText": "for(std::vector<CoordBBox> bboxVec = { tileBBox }; !bboxVec.empty();)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (bboxVec .)",
    "insertText": "emplace_back(bboxVec.back(), tbb::split{})"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (continue ; } auto subBBox = bboxVec .)",
    "insertText": "back()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (bboxVec .)",
    "insertText": "pop_back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(frustumIndexBBox.isInside(toFrustumIndexSpace(subBBox)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(const auto& ijk: subBBox)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (outAcc .)",
    "insertText": "setValueOn(ijk, tileValue)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (} else { outAcc .)",
    "insertText": "setValueOff(ijk, tileValue)"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (} } } } break ; } })",
    "insertText": "prune(outGrid->tree())"
  },
  {
    "label": "getNodeBoundingBox()",
    "kind": "Method",
    "detail": "Function (const auto leafBBox = leafIter ->)",
    "insertText": "getNodeBoundingBox()"
  },
  {
    "label": "toFrustumIndexSpace()",
    "kind": "Method",
    "detail": "Function (const auto leafFrustumBBox =)",
    "insertText": "toFrustumIndexSpace(leafBBox)"
  },
  {
    "label": "touchLeaf()",
    "kind": "Method",
    "detail": "Function (outAcc .)",
    "insertText": "touchLeaf(leafBBox.min())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(!frustumIndexBBox.hasOverlap(leafFrustumBBox) || !frustumIndexBBox.isInside(leafFrustumBBox))"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (outLeafNodes .)",
    "insertText": "foreach([&](LeafT& leaf, size_t ) { auto inAcc = inGrid.getConstAccessor(); ValueT val; for (auto voxelIter = leaf.beginValueAll(); voxelIter; ++voxelIter) { const auto ijk = voxelIter.getCoord(); if (frustumContainsCoord(ijk) == keepInterior) { const bool active = inAcc.probeValue(ijk, val); voxelIter.setValue(val); voxelIter.setValueOn(active); } } })"
  }
]