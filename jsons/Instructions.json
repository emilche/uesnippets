[
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APInt"
  },
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "ConstantRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantRange"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "AtomicOrdering",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AtomicOrdering"
  },
  {
    "label": "SynchronizationScope",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SynchronizationScope"
  },
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "StoreInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoreInst"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "FenceInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FenceInst"
  },
  {
    "label": "AtomicCmpXchgInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicCmpXchgInst"
  },
  {
    "label": "AtomicRMWInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicRMWInst"
  },
  {
    "label": "BinOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BinOp"
  },
  {
    "label": "GetElementPtrInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GetElementPtrInst"
  },
  {
    "label": "ICmpInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICmpInst"
  },
  {
    "label": "FCmpInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCmpInst"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "TailCallKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TailCallKind"
  },
  {
    "label": "SelectInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectInst"
  },
  {
    "label": "VAArgInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VAArgInst"
  },
  {
    "label": "ExtractElementInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtractElementInst"
  },
  {
    "label": "InsertElementInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertElementInst"
  },
  {
    "label": "ShuffleVectorInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShuffleVectorInst"
  },
  {
    "label": "ExtractValueInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtractValueInst"
  },
  {
    "label": "InsertValueInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertValueInst"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "LandingPadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LandingPadInst"
  },
  {
    "label": "ClauseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ClauseType"
  },
  {
    "label": "ReturnInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnInst"
  },
  {
    "label": "BranchInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchInst"
  },
  {
    "label": "SwitchInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwitchInst"
  },
  {
    "label": "SwitchInstTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwitchInstTy"
  },
  {
    "label": "ConstantIntTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantIntTy"
  },
  {
    "label": "BasicBlockTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlockTy"
  },
  {
    "label": "CaseIteratorT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CaseIteratorT"
  },
  {
    "label": "CaseIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CaseIt"
  },
  {
    "label": "IndirectBrInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndirectBrInst"
  },
  {
    "label": "InvokeInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InvokeInst"
  },
  {
    "label": "ResumeInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResumeInst"
  },
  {
    "label": "UnreachableInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnreachableInst"
  },
  {
    "label": "TruncInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TruncInst"
  },
  {
    "label": "ZExtInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ZExtInst"
  },
  {
    "label": "SExtInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SExtInst"
  },
  {
    "label": "FPTruncInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPTruncInst"
  },
  {
    "label": "FPExtInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPExtInst"
  },
  {
    "label": "UIToFPInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UIToFPInst"
  },
  {
    "label": "SIToFPInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SIToFPInst"
  },
  {
    "label": "FPToUIInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPToUIInst"
  },
  {
    "label": "FPToSIInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPToSIInst"
  },
  {
    "label": "IntToPtrInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntToPtrInst"
  },
  {
    "label": "PtrToIntInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PtrToIntInst"
  },
  {
    "label": "BitCastInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitCastInst"
  },
  {
    "label": "AddrSpaceCastInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AddrSpaceCastInst"
  },
  {
    "label": "isAtLeastAcquire()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_INSTRUCTIONS_H # define LLVM_IR_INSTRUCTIONS_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / iterator_range . h \" # include \" llvm / IR / Attributes . h \" # include \" llvm / IR / CallingConv . h \" # include \" llvm / IR / DerivedTypes . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / InstrTypes . h \" # include \" llvm / Support / ErrorHandling . h \" # include<iterator> namespace llvm { class APInt ; class ConstantInt ; class ConstantRange ; class DataLayout ; class LLVMContext ; enum AtomicOrdering { NotAtomic = 0,Unordered = 1,Monotonic = 2,Acquire = 4,Release = 5,AcquireRelease = 6,SequentiallyConsistent = 7 } ; enum SynchronizationScope { SingleThread = 0,CrossThread = 1 } ; bool)",
    "insertText": "isAtLeastAcquire(AtomicOrdering Ord)"
  },
  {
    "label": "isAtLeastRelease()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAtLeastRelease(AtomicOrdering Ord)"
  },
  {
    "label": "cloneImpl()",
    "kind": "Method",
    "detail": "Function (} class AllocaInst : public UnaryInstruction { Type* AllocatedType ; protected : class Instruction ; AllocaInst*)",
    "insertText": "cloneImpl()"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AllocaInst(Type *Ty, Value *ArraySize = nullptr, const Twine &Name = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocaInst(Type *Ty, Value *ArraySize, const Twine &Name, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocaInst(Type *Ty, const Twine &Name, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocaInst(Type *Ty, const Twine &Name, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocaInst(Type *Ty, Value *ArraySize, unsigned Align, const Twine &Name = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocaInst(Type *Ty, Value *ArraySize, unsigned Align, const Twine &Name, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AllocaInst()"
  },
  {
    "label": "isArrayAllocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isArrayAllocation()"
  },
  {
    "label": "getArraySize()",
    "kind": "Method",
    "detail": "Function (const Value*)",
    "insertText": "getArraySize()"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (} PointerType*)",
    "insertText": "getType()"
  },
  {
    "label": "getAllocatedType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getAllocatedType()"
  },
  {
    "label": "getAlignment()",
    "kind": "Method",
    "detail": "Function (AllocatedType = Ty ; } unsigned)",
    "insertText": "getAlignment()"
  },
  {
    "label": "setAlignment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAlignment(unsigned Align)"
  },
  {
    "label": "isStaticAlloca()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isStaticAlloca()"
  },
  {
    "label": "isUsedWithInAlloca()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUsedWithInAlloca()"
  },
  {
    "label": "setUsedWithInAlloca()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setUsedWithInAlloca(bool V)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~32) | (V ? 32 : 0))"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Instruction *I)"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "classof(const Value *V)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "setInstructionSubclassData(unsigned short D)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData(D)"
  },
  {
    "label": "AssertOK()",
    "kind": "Method",
    "detail": "Function (} } ; class LoadInst : public UnaryInstruction { void)",
    "insertText": "AssertOK()"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Type *Ty, Value *Ptr, const Twine &NameStr, bool isVolatile = false, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, bool isVolatile = false, Instruction *InsertBefore = nullptr) : LoadInst(cast<PointerType>(Ptr->getType())->getElementType(), Ptr, NameStr, isVolatile, InsertBefore)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, bool isVolatile, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, bool isVolatile, unsigned Align, Instruction *InsertBefore = nullptr) : LoadInst(cast<PointerType>(Ptr->getType())->getElementType(), Ptr, NameStr, isVolatile, Align, InsertBefore)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LoadInst(Type *Ty, Value *Ptr, const Twine &NameStr, bool isVolatile, unsigned Align, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, bool isVolatile, unsigned Align, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, bool isVolatile, unsigned Align, AtomicOrdering Order, SynchronizationScope SynchScope = CrossThread, Instruction *InsertBefore = nullptr) : LoadInst(cast<PointerType>(Ptr->getType())->getElementType(), Ptr, NameStr, isVolatile, Align, Order, SynchScope, InsertBefore)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LoadInst(Type *Ty, Value *Ptr, const Twine &NameStr, bool isVolatile, unsigned Align, AtomicOrdering Order, SynchronizationScope SynchScope = CrossThread, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, bool isVolatile, unsigned Align, AtomicOrdering Order, SynchronizationScope SynchScope, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const char *NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const char *NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Type *Ty, Value *Ptr, const char *NameStr = nullptr, bool isVolatile = false, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadInst(Value *Ptr, const char *NameStr = nullptr, bool isVolatile = false, Instruction *InsertBefore = nullptr) : LoadInst(cast<PointerType>(Ptr->getType())->getElementType(), Ptr, NameStr, isVolatile, InsertBefore)"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "LoadInst(Value *Ptr, const char *NameStr, bool isVolatile, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "isVolatile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVolatile()"
  },
  {
    "label": "setVolatile()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setVolatile(bool V)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~1) | (V ? 1 : 0))"
  },
  {
    "label": "getOrdering()",
    "kind": "Method",
    "detail": "Function (AtomicOrdering)",
    "insertText": "getOrdering()"
  },
  {
    "label": "setOrdering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOrdering(AtomicOrdering Ordering)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~(7 << 7)) | (Ordering << 7))"
  },
  {
    "label": "getSynchScope()",
    "kind": "Method",
    "detail": "Function (} SynchronizationScope)",
    "insertText": "getSynchScope()"
  },
  {
    "label": "setSynchScope()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSynchScope(SynchronizationScope xthread)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~(1 << 6)) | (xthread << 6))"
  },
  {
    "label": "setAtomic()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAtomic(AtomicOrdering Ordering, SynchronizationScope SynchScope = CrossThread)"
  },
  {
    "label": "setOrdering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOrdering(Ordering)"
  },
  {
    "label": "setSynchScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSynchScope(SynchScope)"
  },
  {
    "label": "isSimple()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSimple()"
  },
  {
    "label": "isUnordered()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnordered()"
  },
  {
    "label": "getPointerOperand()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getPointerOperand()"
  },
  {
    "label": "getPointerOperandIndex()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getPointerOperandIndex()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} } ; class StoreInst : public Instruction { void* operator)",
    "insertText": "new(size_t, unsigned)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (public : void* operator)",
    "insertText": "new(size_t s)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StoreInst(Value *Val, Value *Ptr, Instruction *InsertBefore)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreInst(Value *Val, Value *Ptr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreInst(Value *Val, Value *Ptr, bool isVolatile = false, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreInst(Value *Val, Value *Ptr, bool isVolatile, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreInst(Value *Val, Value *Ptr, bool isVolatile, unsigned Align, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreInst(Value *Val, Value *Ptr, bool isVolatile, unsigned Align, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreInst(Value *Val, Value *Ptr, bool isVolatile, unsigned Align, AtomicOrdering Order, SynchronizationScope SynchScope = CrossThread, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "StoreInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreInst(Value *Val, Value *Ptr, bool isVolatile, unsigned Align, AtomicOrdering Order, SynchronizationScope SynchScope, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "getValueOperand()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getValueOperand()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<StoreInst> : public FixedNumOperandTraits<StoreInst,2> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(StoreInst, Value)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "FenceInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FenceInst(LLVMContext &C, AtomicOrdering Ordering, SynchronizationScope SynchScope = CrossThread, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "FenceInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FenceInst(LLVMContext &C, AtomicOrdering Ordering, SynchronizationScope SynchScope, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & 1) | (Ordering << 1))"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~1) | xthread)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Value *Ptr, Value *Cmp, Value *NewVal, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, SynchronizationScope SynchScope)"
  },
  {
    "label": "AtomicCmpXchgInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AtomicCmpXchgInst(Value *Ptr, Value *Cmp, Value *NewVal, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, SynchronizationScope SynchScope, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "AtomicCmpXchgInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicCmpXchgInst(Value *Ptr, Value *Cmp, Value *NewVal, AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering, SynchronizationScope SynchScope, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~1) | (unsigned)V)"
  },
  {
    "label": "isWeak()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isWeak()"
  },
  {
    "label": "setWeak()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setWeak(bool IsWeak)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~0x100) | (IsWeak << 8))"
  },
  {
    "label": "setSuccessOrdering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSuccessOrdering(AtomicOrdering Ordering)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ordering != NotAtomic && \"CmpXchg instructions can only be atomic.\")"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~0x1c) | (Ordering << 2))"
  },
  {
    "label": "setFailureOrdering()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setFailureOrdering(AtomicOrdering Ordering)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~0xe0) | (Ordering << 5))"
  },
  {
    "label": "setSynchScope()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSynchScope(SynchronizationScope SynchScope)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~2) | (SynchScope << 1))"
  },
  {
    "label": "getSuccessOrdering()",
    "kind": "Method",
    "detail": "Function (} AtomicOrdering)",
    "insertText": "getSuccessOrdering()"
  },
  {
    "label": "getFailureOrdering()",
    "kind": "Method",
    "detail": "Function (} AtomicOrdering)",
    "insertText": "getFailureOrdering()"
  },
  {
    "label": "getCompareOperand()",
    "kind": "Method",
    "detail": "Function (} const Value*)",
    "insertText": "getCompareOperand()"
  },
  {
    "label": "getNewValOperand()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getNewValOperand()"
  },
  {
    "label": "getPointerAddressSpace()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getPointerAddressSpace()"
  },
  {
    "label": "getStrongestFailureOrdering()",
    "kind": "Method",
    "detail": "Function (} AtomicOrdering)",
    "insertText": "getStrongestFailureOrdering(AtomicOrdering SuccessOrdering)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "llvm_unreachable(\"invalid cmpxchg success ordering\")"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<AtomicCmpXchgInst> : public FixedNumOperandTraits<AtomicCmpXchgInst,3> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(AtomicCmpXchgInst, Value)"
  },
  {
    "label": "AtomicRMWInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AtomicRMWInst(BinOp Operation, Value *Ptr, Value *Val, AtomicOrdering Ordering, SynchronizationScope SynchScope, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "AtomicRMWInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicRMWInst(BinOp Operation, Value *Ptr, Value *Val, AtomicOrdering Ordering, SynchronizationScope SynchScope, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "getOperation()",
    "kind": "Method",
    "detail": "Function (BinOp)",
    "insertText": "getOperation()"
  },
  {
    "label": "setOperation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOperation(BinOp Operation)"
  },
  {
    "label": "getSubclassDataFromInstruction()",
    "kind": "Method",
    "detail": "Function (unsigned short SubclassData =)",
    "insertText": "getSubclassDataFromInstruction()"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((SubclassData & 31) | (Operation << 5))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ordering != NotAtomic && \"atomicrmw instructions can only be atomic.\")"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~(7 << 2)) | (Ordering << 2))"
  },
  {
    "label": "getValOperand()",
    "kind": "Method",
    "detail": "Function (} const Value*)",
    "insertText": "getValOperand()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Init(BinOp Operation, Value *Ptr, Value *Val, AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<AtomicRMWInst> : public FixedNumOperandTraits<AtomicRMWInst,2> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(AtomicRMWInst, Value) inline Type *checkGEPType(Type *Ty)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Ty && \"Invalid GetElementPtrInst indices for type!\")"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Ptr, ArrayRef<Value *> IdxList, const Twine &NameStr)"
  },
  {
    "label": "GetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementPtrInst(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, unsigned Values, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "GetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElementPtrInst(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, unsigned Values, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : GetElementPtrInst*)",
    "insertText": "Create(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned Values = 1 +)",
    "insertText": "unsigned(IdxList.size())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} GetElementPtrInst*)",
    "insertText": "Create(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "CreateInBounds()",
    "kind": "Method",
    "detail": "Function (} GetElementPtrInst*)",
    "insertText": "CreateInBounds(Value *Ptr, ArrayRef<Value *> IdxList, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "CreateInBounds()",
    "kind": "Method",
    "detail": "Function (} GetElementPtrInst*)",
    "insertText": "CreateInBounds(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (GetElementPtrInst* GEP =)",
    "insertText": "Create(PointeeType, Ptr, IdxList, NameStr, InsertBefore)"
  },
  {
    "label": "setIsInBounds()",
    "kind": "Method",
    "detail": "Function (GEP ->)",
    "insertText": "setIsInBounds(true)"
  },
  {
    "label": "CreateInBounds()",
    "kind": "Method",
    "detail": "Function (} GetElementPtrInst*)",
    "insertText": "CreateInBounds(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (GetElementPtrInst* GEP =)",
    "insertText": "Create(PointeeType, Ptr, IdxList, NameStr, InsertAtEnd)"
  },
  {
    "label": "getSourceElementType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getSourceElementType()"
  },
  {
    "label": "setResultElementType()",
    "kind": "Method",
    "detail": "Function (SourceElementType = Ty ; } void)",
    "insertText": "setResultElementType(Type *Ty)"
  },
  {
    "label": "getResultElementType()",
    "kind": "Method",
    "detail": "Function (ResultElementType = Ty ; } Type*)",
    "insertText": "getResultElementType()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ResultElementType == cast<PointerType>(getType()->getScalarType())->getElementType())"
  },
  {
    "label": "getIndexedType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getIndexedType(Type *Ty, ArrayRef<Value *> IdxList)"
  },
  {
    "label": "getIndexedType()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "getIndexedType(Type *Ty, ArrayRef<Constant *> IdxList)"
  },
  {
    "label": "getIndexedType()",
    "kind": "Method",
    "detail": "Function (Type*)",
    "insertText": "getIndexedType(Type *Ty, ArrayRef<uint64_t> IdxList)"
  },
  {
    "label": "idx_begin()",
    "kind": "Method",
    "detail": "Function (op_iterator)",
    "insertText": "idx_begin()"
  },
  {
    "label": "idx_end()",
    "kind": "Method",
    "detail": "Function (} op_iterator)",
    "insertText": "idx_end()"
  },
  {
    "label": "getGEPReturnType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getGEPReturnType(Value *Ptr, ArrayRef<Value *> IdxList)"
  },
  {
    "label": "getGEPReturnType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getGEPReturnType(Type *ElTy, Value *Ptr, ArrayRef<Value *> IdxList)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* PtrTy =)",
    "insertText": "get(checkGEPType(getIndexedType(ElTy, IdxList)), Ptr->getType()->getPointerAddressSpace())"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (unsigned NumElem = Ptr ->)",
    "insertText": "getType()->getVectorNumElements()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Value *Index : IdxList) if (Index->getType()->isVectorTy())"
  },
  {
    "label": "getNumIndices()",
    "kind": "Method",
    "detail": "Function (} return PtrTy ; } unsigned)",
    "insertText": "getNumIndices()"
  },
  {
    "label": "hasIndices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasIndices()"
  },
  {
    "label": "hasAllZeroIndices()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasAllZeroIndices()"
  },
  {
    "label": "hasAllConstantIndices()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasAllConstantIndices()"
  },
  {
    "label": "setIsInBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIsInBounds(bool b = true)"
  },
  {
    "label": "isInBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isInBounds()"
  },
  {
    "label": "accumulateConstantOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "accumulateConstantOffset(const DataLayout &DL, APInt &Offset)"
  },
  {
    "label": "GetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<GetElementPtrInst> : public VariadicOperandTraits<GetElementPtrInst,1> { } ;)",
    "insertText": "GetElementPtrInst(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, unsigned Values, const Twine &NameStr, Instruction *InsertBefore) : Instruction(getGEPReturnType(PointeeType, Ptr, IdxList), GetElementPtr, OperandTraits<GetElementPtrInst>::op_end(this) - Values, Values, InsertBefore), SourceElementType(PointeeType), ResultElementType(getIndexedType(PointeeType, IdxList))"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Ptr, IdxList, NameStr)"
  },
  {
    "label": "GetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GetElementPtrInst(Type *PointeeType, Value *Ptr, ArrayRef<Value *> IdxList, unsigned Values, const Twine &NameStr, BasicBlock *InsertAtEnd) : Instruction(getGEPReturnType(PointeeType, Ptr, IdxList), GetElementPtr, OperandTraits<GetElementPtrInst>::op_end(this) - Values, Values, InsertAtEnd), SourceElementType(PointeeType), ResultElementType(getIndexedType(PointeeType, IdxList))"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(GetElementPtrInst, Value)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getPredicate() >= CmpInst::FIRST_ICMP_PREDICATE && getPredicate() <= CmpInst::LAST_ICMP_PREDICATE && \"Invalid ICmp predicate value\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getOperand(0)->getType() == getOperand(1)->getType() && \"Both operands to ICmp instruction are not of the same type!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((getOperand(0)->getType()->isIntOrIntVectorTy() || getOperand(0)->getType()->isPtrOrPtrVectorTy()) && \"Invalid operand types for ICmp instruction\")"
  },
  {
    "label": "ICmpInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ICmpInst(Instruction *InsertBefore, Predicate pred, Value *LHS, Value *RHS, const Twine &NameStr = \"\" ) : CmpInst(makeCmpResultType(LHS->getType()), Instruction::ICmp, pred, LHS, RHS, NameStr, InsertBefore)"
  },
  {
    "label": "ICmpInst()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "ICmpInst(BasicBlock &InsertAtEnd, Predicate pred, Value *LHS, Value *RHS, const Twine &NameStr = \"\" ) : CmpInst(makeCmpResultType(LHS->getType()), Instruction::ICmp, pred, LHS, RHS, NameStr, &InsertAtEnd)"
  },
  {
    "label": "ICmpInst()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "ICmpInst(Predicate pred, Value *LHS, Value *RHS, const Twine &NameStr = \"\" ) : CmpInst(makeCmpResultType(LHS->getType()), Instruction::ICmp, pred, LHS, RHS, NameStr)"
  },
  {
    "label": "getSignedPredicate()",
    "kind": "Method",
    "detail": "Function (# endif } Predicate)",
    "insertText": "getSignedPredicate()"
  },
  {
    "label": "getSignedPredicate()",
    "kind": "Method",
    "detail": "Function (} Predicate)",
    "insertText": "getSignedPredicate(Predicate pred)"
  },
  {
    "label": "getUnsignedPredicate()",
    "kind": "Method",
    "detail": "Function (Predicate)",
    "insertText": "getUnsignedPredicate()"
  },
  {
    "label": "getUnsignedPredicate()",
    "kind": "Method",
    "detail": "Function (} Predicate)",
    "insertText": "getUnsignedPredicate(Predicate pred)"
  },
  {
    "label": "isEquality()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isEquality(Predicate P)"
  },
  {
    "label": "isCommutative()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCommutative()"
  },
  {
    "label": "isRelational()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRelational()"
  },
  {
    "label": "isRelational()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isRelational(Predicate P)"
  },
  {
    "label": "makeConstantRange()",
    "kind": "Method",
    "detail": "Function (} ConstantRange)",
    "insertText": "makeConstantRange(Predicate pred, const APInt &C)"
  },
  {
    "label": "swapOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapOperands()"
  },
  {
    "label": "setPredicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPredicate(getSwappedPredicate())"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Op().swap(Op<1>())"
  },
  {
    "label": "FCmpInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FCmpInst(Instruction *InsertBefore, Predicate pred, Value *LHS, Value *RHS, const Twine &NameStr = \"\" ) : CmpInst(makeCmpResultType(LHS->getType()), Instruction::FCmp, pred, LHS, RHS, NameStr, InsertBefore)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pred <= FCmpInst::LAST_FCMP_PREDICATE && \"Invalid FCmp predicate value\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getOperand(0)->getType() == getOperand(1)->getType() && \"Both operands to FCmp instruction are not of the same type!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getOperand(0)->getType()->isFPOrFPVectorTy() && \"Invalid operand types for FCmp instruction\")"
  },
  {
    "label": "FCmpInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCmpInst(BasicBlock &InsertAtEnd, Predicate pred, Value *LHS, Value *RHS, const Twine &NameStr = \"\" ) : CmpInst(makeCmpResultType(LHS->getType()), Instruction::FCmp, pred, LHS, RHS, NameStr, &InsertAtEnd)"
  },
  {
    "label": "FCmpInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCmpInst(Predicate pred, Value *LHS, Value *RHS, const Twine &NameStr = \"\" ) : CmpInst(makeCmpResultType(LHS->getType()), Instruction::FCmp, pred, LHS, RHS, NameStr)"
  },
  {
    "label": "isEquality()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEquality(Predicate Pred)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (} } ; class CallInst : public Instruction { AttributeSet AttributeList ; FunctionType* FTy ;)",
    "insertText": "CallInst(const CallInst &CI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(cast<FunctionType>( cast<PointerType>(Func->getType())->getElementType()), Func, Args, NameStr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(FunctionType *FTy, Value *Func, ArrayRef<Value *> Args, const Twine &NameStr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Func, const Twine &NameStr)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallInst(FunctionType *Ty, Value *Func, ArrayRef<Value *> Args, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallInst(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr, Instruction *InsertBefore) : CallInst(cast<FunctionType>( cast<PointerType>(Func->getType())->getElementType()), Func, Args, NameStr, InsertBefore)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CallInst(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallInst(Value *F, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallInst(Value *F, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : CallInst*)",
    "insertText": "Create(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "Create(FunctionType *Ty, Value *Func, ArrayRef<Value *> Args, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "Create(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "Create(Value *F, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} CallInst*)",
    "insertText": "Create(Value *F, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "CreateMalloc()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "CreateMalloc(Instruction *InsertBefore, Type *IntPtrTy, Type *AllocTy, Value *AllocSize, Value *ArraySize = nullptr, Function* MallocF = nullptr, const Twine &Name = \"\")"
  },
  {
    "label": "CreateMalloc()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "CreateMalloc(BasicBlock *InsertAtEnd, Type *IntPtrTy, Type *AllocTy, Value *AllocSize, Value *ArraySize = nullptr, Function* MallocF = nullptr, const Twine &Name = \"\")"
  },
  {
    "label": "CreateFree()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "CreateFree(Value* Source, Instruction *InsertBefore)"
  },
  {
    "label": "CreateFree()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "CreateFree(Value* Source, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CallInst()"
  },
  {
    "label": "getFunctionType()",
    "kind": "Method",
    "detail": "Function (FunctionType*)",
    "insertText": "getFunctionType()"
  },
  {
    "label": "mutateType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mutateType(FTy->getReturnType())"
  },
  {
    "label": "getTailCallKind()",
    "kind": "Method",
    "detail": "Function (this -> FTy = FTy ; } enum TailCallKind { TCK_None = 0,TCK_Tail = 1,TCK_MustTail = 2 } ; TailCallKind)",
    "insertText": "getTailCallKind()"
  },
  {
    "label": "isTailCall()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isTailCall()"
  },
  {
    "label": "isMustTailCall()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isMustTailCall()"
  },
  {
    "label": "setTailCall()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTailCall(bool isTC = true)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~3) | unsigned(isTC ? TCK_Tail : TCK_None))"
  },
  {
    "label": "setTailCallKind()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setTailCallKind(TailCallKind TCK)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & ~3) | unsigned(TCK))"
  },
  {
    "label": "getNumArgOperands()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumArgOperands()"
  },
  {
    "label": "getArgOperand()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getArgOperand(unsigned i)"
  },
  {
    "label": "setArgOperand()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setArgOperand(unsigned i, Value *v)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(i, v)"
  },
  {
    "label": "arg_operands()",
    "kind": "Method",
    "detail": "Function (} iterator_range<op_iterator>)",
    "insertText": "arg_operands()"
  },
  {
    "label": "getArgOperandUse()",
    "kind": "Method",
    "detail": "Function (} const Use&)",
    "insertText": "getArgOperandUse(unsigned i)"
  },
  {
    "label": "getCallingConv()",
    "kind": "Method",
    "detail": "Function (} CallingConv::ID)",
    "insertText": "getCallingConv()"
  },
  {
    "label": "setCallingConv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCallingConv(CallingConv::ID CC)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData((getSubclassDataFromInstruction() & 3) | (static_cast<unsigned>(CC) << 2))"
  },
  {
    "label": "getAttributes()",
    "kind": "Method",
    "detail": "Function (} const AttributeSet&)",
    "insertText": "getAttributes()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (AttributeList = Attrs ; } void)",
    "insertText": "addAttribute(unsigned i, Attribute::AttrKind attr)"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(unsigned i, StringRef Kind, StringRef Value)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeAttribute(unsigned i, Attribute attr)"
  },
  {
    "label": "addDereferenceableAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDereferenceableAttr(unsigned i, uint64_t Bytes)"
  },
  {
    "label": "addDereferenceableOrNullAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDereferenceableOrNullAttr(unsigned i, uint64_t Bytes)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFnAttr(Attribute::AttrKind A)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(A != Attribute::NoBuiltin && \"Use CallInst::isNoBuiltin() to check for Attribute::NoBuiltin\")"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasFnAttr(StringRef A)"
  },
  {
    "label": "paramHasAttr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "paramHasAttr(unsigned i, Attribute::AttrKind A)"
  },
  {
    "label": "getParamAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getParamAlignment(unsigned i)"
  },
  {
    "label": "getDereferenceableBytes()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getDereferenceableBytes(unsigned i)"
  },
  {
    "label": "getDereferenceableOrNullBytes()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "getDereferenceableOrNullBytes(unsigned i)"
  },
  {
    "label": "isNoBuiltin()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNoBuiltin()"
  },
  {
    "label": "isNoInline()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNoInline()"
  },
  {
    "label": "setIsNoInline()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIsNoInline()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::NoInline)"
  },
  {
    "label": "canReturnTwice()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "canReturnTwice()"
  },
  {
    "label": "setCanReturnTwice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCanReturnTwice()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::ReturnsTwice)"
  },
  {
    "label": "doesNotAccessMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "doesNotAccessMemory()"
  },
  {
    "label": "setDoesNotAccessMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDoesNotAccessMemory()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::ReadNone)"
  },
  {
    "label": "onlyReadsMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "onlyReadsMemory()"
  },
  {
    "label": "setOnlyReadsMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOnlyReadsMemory()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::ReadOnly)"
  },
  {
    "label": "onlyAccessesArgMemory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "onlyAccessesArgMemory()"
  },
  {
    "label": "setOnlyAccessesArgMemory()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setOnlyAccessesArgMemory()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::ArgMemOnly)"
  },
  {
    "label": "doesNotReturn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "doesNotReturn()"
  },
  {
    "label": "setDoesNotReturn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDoesNotReturn()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::NoReturn)"
  },
  {
    "label": "doesNotThrow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "doesNotThrow()"
  },
  {
    "label": "setDoesNotThrow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDoesNotThrow()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::NoUnwind)"
  },
  {
    "label": "cannotDuplicate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "cannotDuplicate()"
  },
  {
    "label": "setCannotDuplicate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCannotDuplicate()"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(AttributeSet::FunctionIndex, Attribute::NoDuplicate)"
  },
  {
    "label": "hasStructRetAttr()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasStructRetAttr()"
  },
  {
    "label": "hasByValArgument()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasByValArgument()"
  },
  {
    "label": "getCalledFunction()",
    "kind": "Method",
    "detail": "Function (} Function*)",
    "insertText": "getCalledFunction()"
  },
  {
    "label": "getCalledValue()",
    "kind": "Method",
    "detail": "Function (} const Value*)",
    "insertText": "getCalledValue()"
  },
  {
    "label": "setCalledFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCalledFunction(Value* Fn)"
  },
  {
    "label": "setCalledFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCalledFunction(cast<FunctionType>(cast<PointerType>(Fn->getType())->getElementType()), Fn)"
  },
  {
    "label": "setCalledFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCalledFunction(FunctionType *FTy, Value *Fn)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (this -> FTy = FTy ;)",
    "insertText": "assert(FTy == cast<FunctionType>( cast<PointerType>(Fn->getType())->getElementType()))"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Op()"
  },
  {
    "label": "isInlineAsm()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInlineAsm()"
  },
  {
    "label": "hasFnAttrImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<AttrKind> bool)",
    "insertText": "hasFnAttrImpl(AttrKind A)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<CallInst> : public VariadicOperandTraits<CallInst,1> { } ;)",
    "insertText": "CallInst(Value *Func, ArrayRef<Value *> Args, const Twine &NameStr, BasicBlock *InsertAtEnd) : Instruction(cast<FunctionType>(cast<PointerType>(Func->getType()) ->getElementType())->getReturnType(), Instruction::Call, OperandTraits<CallInst>::op_end(this) - (Args.size() + 1), unsigned(Args.size() + 1), InsertAtEnd)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Func, Args, NameStr)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CallInst(FunctionType *Ty, Value *Func, ArrayRef<Value *> Args, const Twine &NameStr, Instruction *InsertBefore) : Instruction(Ty->getReturnType(), Instruction::Call, OperandTraits<CallInst>::op_end(this) - (Args.size() + 1), unsigned(Args.size() + 1), InsertBefore)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Ty, Func, Args, NameStr)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(CallInst, Value)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *C, Value *S1, Value *S2)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!areInvalidOperands(C, S1, S2) && \"Invalid operands for select\")"
  },
  {
    "label": "SelectInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SelectInst(Value *C, Value *S1, Value *S2, const Twine &NameStr, Instruction *InsertBefore) : Instruction(S1->getType(), Instruction::Select, &Op<0>(), 3, InsertBefore)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(C, S1, S2)"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(NameStr)"
  },
  {
    "label": "SelectInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SelectInst(Value *C, Value *S1, Value *S2, const Twine &NameStr, BasicBlock *InsertAtEnd) : Instruction(S1->getType(), Instruction::Select, &Op<0>(), 3, InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : SelectInst*)",
    "insertText": "Create(Value *C, Value *S1, Value *S2, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} SelectInst*)",
    "insertText": "Create(Value *C, Value *S1, Value *S2, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "getCondition()",
    "kind": "Method",
    "detail": "Function (} const Value*)",
    "insertText": "getCondition()"
  },
  {
    "label": "getTrueValue()",
    "kind": "Method",
    "detail": "Function (} const Value*)",
    "insertText": "getTrueValue()"
  },
  {
    "label": "getFalseValue()",
    "kind": "Method",
    "detail": "Function (} const Value*)",
    "insertText": "getFalseValue()"
  },
  {
    "label": "areInvalidOperands()",
    "kind": "Method",
    "detail": "Function (} const char*)",
    "insertText": "areInvalidOperands(Value *Cond, Value *True, Value *False)"
  },
  {
    "label": "getOpcode()",
    "kind": "Method",
    "detail": "Function (OtherOps)",
    "insertText": "getOpcode()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<SelectInst> : public FixedNumOperandTraits<SelectInst,3> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(SelectInst, Value)"
  },
  {
    "label": "VAArgInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "VAArgInst(Value *List, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr) : UnaryInstruction(Ty, VAArg, List, InsertBefore)"
  },
  {
    "label": "VAArgInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VAArgInst(Value *List, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd) : UnaryInstruction(Ty, VAArg, List, InsertAtEnd)"
  },
  {
    "label": "ExtractElementInst()",
    "kind": "Method",
    "detail": "Function (} } ; class ExtractElementInst : public Instruction {)",
    "insertText": "ExtractElementInst(Value *Vec, Value *Idx, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "ExtractElementInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractElementInst(Value *Vec, Value *Idx, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : ExtractElementInst*)",
    "insertText": "Create(Value *Vec, Value *Idx, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ExtractElementInst*)",
    "insertText": "Create(Value *Vec, Value *Idx, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "isValidOperands()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValidOperands(const Value *Vec, const Value *Idx)"
  },
  {
    "label": "getVectorOperand()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "getVectorOperand()"
  },
  {
    "label": "getIndexOperand()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getIndexOperand()"
  },
  {
    "label": "getVectorOperandType()",
    "kind": "Method",
    "detail": "Function (} VectorType*)",
    "insertText": "getVectorOperandType()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<ExtractElementInst> : public FixedNumOperandTraits<ExtractElementInst,2> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ExtractElementInst, Value)"
  },
  {
    "label": "InsertElementInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertElementInst(Value *Vec, Value *NewElt, Value *Idx, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "InsertElementInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertElementInst(Value *Vec, Value *NewElt, Value *Idx, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : InsertElementInst*)",
    "insertText": "Create(Value *Vec, Value *NewElt, Value *Idx, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} InsertElementInst*)",
    "insertText": "Create(Value *Vec, Value *NewElt, Value *Idx, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "isValidOperands()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValidOperands(const Value *Vec, const Value *NewElt, const Value *Idx)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<InsertElementInst> : public FixedNumOperandTraits<InsertElementInst,3> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(InsertElementInst, Value)"
  },
  {
    "label": "ShuffleVectorInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ShuffleVectorInst(Value *V1, Value *V2, Value *Mask, const Twine &NameStr = \"\", Instruction *InsertBefor = nullptr)"
  },
  {
    "label": "ShuffleVectorInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShuffleVectorInst(Value *V1, Value *V2, Value *Mask, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "isValidOperands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidOperands(const Value *V1, const Value *V2, const Value *Mask)"
  },
  {
    "label": "getMask()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getMask()"
  },
  {
    "label": "getMaskValue()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getMaskValue(Constant *Mask, unsigned i)"
  },
  {
    "label": "getMaskValue()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getMaskValue(unsigned i)"
  },
  {
    "label": "getShuffleMask()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getShuffleMask(Constant *Mask, SmallVectorImpl<int> &Result)"
  },
  {
    "label": "getShuffleMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getShuffleMask(SmallVectorImpl<int> &Result)"
  },
  {
    "label": "getShuffleMask()",
    "kind": "Method",
    "detail": "Function (} SmallVector<int,1 6>)",
    "insertText": "getShuffleMask()"
  },
  {
    "label": "getShuffleMask()",
    "kind": "Method",
    "detail": "Function (SmallVector<int,1 6> Mask ;)",
    "insertText": "getShuffleMask(Mask)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<ShuffleVectorInst> : public FixedNumOperandTraits<ShuffleVectorInst,3> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ShuffleVectorInst, Value)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (SmallVector<unsigned,4> Indices ;)",
    "insertText": "ExtractValueInst(const ExtractValueInst &EVI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(ArrayRef<unsigned> Idxs, const Twine &NameStr)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractValueInst(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractValueInst(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : ExtractValueInst*)",
    "insertText": "Create(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ExtractValueInst*)",
    "insertText": "Create(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "getIndexedType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getIndexedType(Type *Agg, ArrayRef<unsigned> Idxs)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (} iterator_range<idx_iterator>)",
    "insertText": "indices()"
  },
  {
    "label": "getAggregateOperand()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getAggregateOperand()"
  },
  {
    "label": "getAggregateOperandIndex()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getAggregateOperandIndex()"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "ExtractValueInst(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &NameStr, Instruction *InsertBefore) : UnaryInstruction(checkGEPType(getIndexedType(Agg->getType(), Idxs)), ExtractValue, Agg, InsertBefore)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Idxs, NameStr)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ExtractValueInst(Value *Agg, ArrayRef<unsigned> Idxs, const Twine &NameStr, BasicBlock *InsertAtEnd) : UnaryInstruction(checkGEPType(getIndexedType(Agg->getType(), Idxs)), ExtractValue, Agg, InsertAtEnd)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertValueInst(const InsertValueInst &IVI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &NameStr)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertValueInst(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertValueInst(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertValueInst(Value *Agg, Value *Val, unsigned Idx, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertValueInst(Value *Agg, Value *Val, unsigned Idx, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} InsertValueInst*)",
    "insertText": "Create(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} InsertValueInst*)",
    "insertText": "Create(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "getInsertedValueOperand()",
    "kind": "Method",
    "detail": "Function (} const Value*)",
    "insertText": "getInsertedValueOperand()"
  },
  {
    "label": "getInsertedValueOperandIndex()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getInsertedValueOperandIndex()"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<InsertValueInst> : public FixedNumOperandTraits<InsertValueInst,2> { } ;)",
    "insertText": "InsertValueInst(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &NameStr, Instruction *InsertBefore) : Instruction(Agg->getType(), InsertValue, OperandTraits<InsertValueInst>::op_begin(this), 2, InsertBefore)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Agg, Val, Idxs, NameStr)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InsertValueInst(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs, const Twine &NameStr, BasicBlock *InsertAtEnd) : Instruction(Agg->getType(), InsertValue, OperandTraits<InsertValueInst>::op_begin(this), 2, InsertAtEnd)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(InsertValueInst, Value)"
  },
  {
    "label": "PHINode()",
    "kind": "Method",
    "detail": "Function (unsigned ReservedSpace ;)",
    "insertText": "PHINode(const PHINode &PN)"
  },
  {
    "label": "PHINode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PHINode(Type *Ty, unsigned NumReservedValues, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr) : Instruction(Ty, Instruction::PHI, nullptr, 0, InsertBefore), ReservedSpace(NumReservedValues)"
  },
  {
    "label": "allocHungoffUses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocHungoffUses(ReservedSpace)"
  },
  {
    "label": "PHINode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PHINode(Type *Ty, unsigned NumReservedValues, const Twine &NameStr, BasicBlock *InsertAtEnd) : Instruction(Ty, Instruction::PHI, nullptr, 0, InsertAtEnd), ReservedSpace(NumReservedValues)"
  },
  {
    "label": "allocHungoffUses()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "allocHungoffUses(unsigned N)"
  },
  {
    "label": "allocHungoffUses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "allocHungoffUses(N, true)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : PHINode*)",
    "insertText": "Create(Type *Ty, unsigned NumReservedValues, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} PHINode*)",
    "insertText": "Create(Type *Ty, unsigned NumReservedValues, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "block_begin()",
    "kind": "Method",
    "detail": "Function (typedef BasicBlock** block_iterator ; typedef BasicBlock* const* const_block_iterator ; block_iterator)",
    "insertText": "block_begin()"
  },
  {
    "label": "UserRef()",
    "kind": "Method",
    "detail": "Function (Use::UserRef* ref = reinterpret_cast<)",
    "insertText": "UserRef(op_begin() + ReservedSpace)"
  },
  {
    "label": "block_end()",
    "kind": "Method",
    "detail": "Function (} block_iterator)",
    "insertText": "block_end()"
  },
  {
    "label": "incoming_values()",
    "kind": "Method",
    "detail": "Function (} op_range)",
    "insertText": "incoming_values()"
  },
  {
    "label": "getNumIncomingValues()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumIncomingValues()"
  },
  {
    "label": "getIncomingValue()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getIncomingValue(unsigned i)"
  },
  {
    "label": "setIncomingValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIncomingValue(unsigned i, Value *V)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(i, V)"
  },
  {
    "label": "getOperandNumForIncomingValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getOperandNumForIncomingValue(unsigned i)"
  },
  {
    "label": "getIncomingBlock()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getIncomingBlock(const Use &U)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(this == U.getUser() && \"Iterator doesn't point to PHI's Uses?\")"
  },
  {
    "label": "getIncomingBlock()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getIncomingBlock(Value::const_user_iterator I)"
  },
  {
    "label": "setIncomingBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setIncomingBlock(unsigned i, BasicBlock *BB)"
  },
  {
    "label": "addIncoming()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addIncoming(Value *V, BasicBlock *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(V && \"PHI node got a null value!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(BB && \"PHI node got a null basic block!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getType() == V->getType() && \"All operands to PHI node must be the same type as the PHI node!\")"
  },
  {
    "label": "setNumHungOffUseOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumHungOffUseOperands(getNumOperands() + 1)"
  },
  {
    "label": "setIncomingValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIncomingValue(getNumOperands() - 1, V)"
  },
  {
    "label": "setIncomingBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIncomingBlock(getNumOperands() - 1, BB)"
  },
  {
    "label": "removeIncomingValue()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "removeIncomingValue(unsigned Idx, bool DeletePHIIfEmpty = true)"
  },
  {
    "label": "removeIncomingValue()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "removeIncomingValue(const BasicBlock *BB, bool DeletePHIIfEmpty=true)"
  },
  {
    "label": "getBasicBlockIndex()",
    "kind": "Method",
    "detail": "Function (int Idx =)",
    "insertText": "getBasicBlockIndex(BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx >= 0 && \"Invalid basic block argument to remove!\")"
  },
  {
    "label": "getBasicBlockIndex()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getBasicBlockIndex(const BasicBlock *BB)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx >= 0 && \"Invalid basic block argument!\")"
  },
  {
    "label": "hasConstantValue()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "hasConstantValue()"
  },
  {
    "label": "growOperands()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "growOperands()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct OperandTraits<PHINode> : public HungoffOperandTraits<2> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(PHINode, Value)"
  },
  {
    "label": "LandingPadInst()",
    "kind": "Method",
    "detail": "Function (unsigned ReservedSpace ;)",
    "insertText": "LandingPadInst(const LandingPadInst &LP)"
  },
  {
    "label": "growOperands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "growOperands(unsigned Size)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(unsigned NumReservedValues, const Twine &NameStr)"
  },
  {
    "label": "LandingPadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LandingPadInst(Type *RetTy, unsigned NumReservedValues, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "LandingPadInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LandingPadInst(Type *RetTy, unsigned NumReservedValues, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : LandingPadInst*)",
    "insertText": "Create(Type *RetTy, unsigned NumReservedClauses, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (LandingPadInst*)",
    "insertText": "Create(Type *RetTy, unsigned NumReservedClauses, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "isCleanup()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isCleanup()"
  },
  {
    "label": "setCleanup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCleanup(bool V)"
  },
  {
    "label": "addClause()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addClause(Constant *ClauseVal)"
  },
  {
    "label": "getClause()",
    "kind": "Method",
    "detail": "Function (Constant*)",
    "insertText": "getClause(unsigned Idx)"
  },
  {
    "label": "isCatch()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCatch(unsigned Idx)"
  },
  {
    "label": "isFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFilter(unsigned Idx)"
  },
  {
    "label": "getNumClauses()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumClauses()"
  },
  {
    "label": "reserveClauses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserveClauses(unsigned Size)"
  },
  {
    "label": "growOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "growOperands(Size)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<LandingPadInst> : public HungoffOperandTraits<1> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(LandingPadInst, Value)"
  },
  {
    "label": "ReturnInst()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "ReturnInst(LLVMContext &C, Value *retVal = nullptr, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "ReturnInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReturnInst(LLVMContext &C, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : ReturnInst*)",
    "insertText": "Create(LLVMContext &C, Value *retVal = nullptr, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ReturnInst*)",
    "insertText": "Create(LLVMContext &C, Value *retVal, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ReturnInst*)",
    "insertText": "Create(LLVMContext &C, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "ReturnInst()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ReturnInst()"
  },
  {
    "label": "getReturnValue()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "getReturnValue()"
  },
  {
    "label": "getNumSuccessors()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumSuccessors()"
  },
  {
    "label": "getSuccessorV()",
    "kind": "Method",
    "detail": "Function (} private : BasicBlock*)",
    "insertText": "getSuccessorV(unsigned idx)"
  },
  {
    "label": "getNumSuccessorsV()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumSuccessorsV()"
  },
  {
    "label": "setSuccessorV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSuccessorV(unsigned idx, BasicBlock *B)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct OperandTraits<ReturnInst> : public VariadicOperandTraits<ReturnInst> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ReturnInst, Value)"
  },
  {
    "label": "BranchInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchInst(const BranchInst &BI)"
  },
  {
    "label": "BranchInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchInst(BasicBlock *IfTrue, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "BranchInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchInst(BasicBlock *IfTrue, BasicBlock *IfFalse, Value *Cond, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "BranchInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchInst(BasicBlock *IfTrue, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "BranchInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BranchInst(BasicBlock *IfTrue, BasicBlock *IfFalse, Value *Cond, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : BranchInst*)",
    "insertText": "Create(BasicBlock *IfTrue, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} BranchInst*)",
    "insertText": "Create(BasicBlock *IfTrue, BasicBlock *IfFalse, Value *Cond, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} BranchInst*)",
    "insertText": "Create(BasicBlock *IfTrue, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} BranchInst*)",
    "insertText": "Create(BasicBlock *IfTrue, BasicBlock *IfFalse, Value *Cond, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "isUnconditional()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUnconditional()"
  },
  {
    "label": "isConditional()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConditional()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isConditional() && \"Cannot get condition of an uncond branch!\")"
  },
  {
    "label": "setCondition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setCondition(Value *V)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isConditional() && \"Cannot set condition of unconditional branch!\")"
  },
  {
    "label": "getSuccessor()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getSuccessor(unsigned i)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < getNumSuccessors() && \"Successor # out of range for Branch!\")"
  },
  {
    "label": "setSuccessor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSuccessor(unsigned idx, BasicBlock *NewSucc)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(idx < getNumSuccessors() && \"Successor # out of range for Branch!\")"
  },
  {
    "label": "swapSuccessors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swapSuccessors()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct OperandTraits<BranchInst> : public VariadicOperandTraits<BranchInst,1> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(BranchInst, Value)"
  },
  {
    "label": "SwitchInst()",
    "kind": "Method",
    "detail": "Function (unsigned ReservedSpace ;)",
    "insertText": "SwitchInst(const SwitchInst &SI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Value, BasicBlock *Default, unsigned NumReserved)"
  },
  {
    "label": "SwitchInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SwitchInst(Value *Value, BasicBlock *Default, unsigned NumCases, Instruction *InsertBefore)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (public : const unsigned DefaultPseudoIndex = static_cast<)",
    "insertText": "unsigned(~0L-1)"
  },
  {
    "label": "CaseIteratorT()",
    "kind": "Method",
    "detail": "Function (template<class SwitchInstTy,class ConstantIntTy,class BasicBlockTy> class CaseIteratorT { protected : SwitchInstTy* SI ; unsigned Index ; public : typedef CaseIteratorT<SwitchInstTy,ConstantIntTy,BasicBlockTy> Self ;)",
    "insertText": "CaseIteratorT(SwitchInstTy *SI, unsigned CaseNum)"
  },
  {
    "label": "fromSuccessorIndex()",
    "kind": "Method",
    "detail": "Function (this -> SI = SI ; Index = CaseNum ; } Self)",
    "insertText": "fromSuccessorIndex(SwitchInstTy *SI, unsigned SuccessorIndex)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(SuccessorIndex < SI->getNumSuccessors() && \"Successor index # out of range!\")"
  },
  {
    "label": "getCaseValue()",
    "kind": "Method",
    "detail": "Function (} ConstantIntTy*)",
    "insertText": "getCaseValue()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Index < SI->getNumCases() && \"Index out the number of cases.\")"
  },
  {
    "label": "getCaseSuccessor()",
    "kind": "Method",
    "detail": "Function (} BasicBlockTy*)",
    "insertText": "getCaseSuccessor()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Index < SI->getNumCases() || Index == DefaultPseudoIndex) && \"Index out the number of cases.\")"
  },
  {
    "label": "getCaseIndex()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getCaseIndex()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Index == DefaultPseudoIndex || Index < SI->getNumCases()) && \"Index out the number of cases.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Index+1 <= SI->getNumCases() && \"Index out the number of cases.\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + Index ; return* this ; } Self)",
    "insertText": "operator(int)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (Self tmp =*)",
    "insertText": "this(*this)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Index == 0 || Index-1 <= SI->getNumCases()) && \"Index out the number of cases.\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(RHS.SI == SI && \"Incompatible operators.\")"
  },
  {
    "label": "CaseIt()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CaseIt(SwitchInst *SI, unsigned CaseNum) : ParentTy(SI, CaseNum)"
  },
  {
    "label": "setValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setValue(ConstantInt *V)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (SI ->)",
    "insertText": "setOperand(2 + Index*2, reinterpret_cast<Value*>(V))"
  },
  {
    "label": "setSuccessor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSuccessor(BasicBlock *S)"
  },
  {
    "label": "setSuccessor()",
    "kind": "Method",
    "detail": "Function (SI ->)",
    "insertText": "setSuccessor(getSuccessorIndex(), S)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; SwitchInst*)",
    "insertText": "Create(Value *Value, BasicBlock *Default, unsigned NumCases, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} SwitchInst*)",
    "insertText": "Create(Value *Value, BasicBlock *Default, unsigned NumCases, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(0, V)"
  },
  {
    "label": "getDefaultDest()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getDefaultDest()"
  },
  {
    "label": "setDefaultDest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDefaultDest(BasicBlock *DefaultCase)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(1, reinterpret_cast<Value*>(DefaultCase))"
  },
  {
    "label": "getNumCases()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumCases()"
  },
  {
    "label": "case_begin()",
    "kind": "Method",
    "detail": "Function (} CaseIt)",
    "insertText": "case_begin()"
  },
  {
    "label": "case_end()",
    "kind": "Method",
    "detail": "Function (} CaseIt)",
    "insertText": "case_end()"
  },
  {
    "label": "cases()",
    "kind": "Method",
    "detail": "Function (} iterator_range<CaseIt>)",
    "insertText": "cases()"
  },
  {
    "label": "case_default()",
    "kind": "Method",
    "detail": "Function (} CaseIt)",
    "insertText": "case_default()"
  },
  {
    "label": "findCaseValue()",
    "kind": "Method",
    "detail": "Function (} CaseIt)",
    "insertText": "findCaseValue(const ConstantInt *C)"
  },
  {
    "label": "findCaseDest()",
    "kind": "Method",
    "detail": "Function (} ConstantInt*)",
    "insertText": "findCaseDest(BasicBlock *BB)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ConstantInt* CI = nullptr ;)",
    "insertText": "for(CaseIt i = case_begin(), e = case_end(); i != e; ++i)"
  },
  {
    "label": "addCase()",
    "kind": "Method",
    "detail": "Function (} } return CI ; } void)",
    "insertText": "addCase(ConstantInt *OnVal, BasicBlock *Dest)"
  },
  {
    "label": "removeCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeCase(CaseIt i)"
  },
  {
    "label": "getSuccessor()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getSuccessor(unsigned idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(idx < getNumSuccessors() &&\"Successor idx out of range for switch!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(idx < getNumSuccessors() && \"Successor # out of range for switch!\")"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(idx*2+1, (Value*)NewSucc)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct OperandTraits<SwitchInst> : public HungoffOperandTraits<2> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(SwitchInst, Value)"
  },
  {
    "label": "IndirectBrInst()",
    "kind": "Method",
    "detail": "Function (unsigned ReservedSpace ;)",
    "insertText": "IndirectBrInst(const IndirectBrInst &IBI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Address, unsigned NumDests)"
  },
  {
    "label": "IndirectBrInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "IndirectBrInst(Value *Address, unsigned NumDests, Instruction *InsertBefore)"
  },
  {
    "label": "IndirectBrInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IndirectBrInst(Value *Address, unsigned NumDests, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : IndirectBrInst*)",
    "insertText": "Create(Value *Address, unsigned NumDests, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} IndirectBrInst*)",
    "insertText": "Create(Value *Address, unsigned NumDests, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "getAddress()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "getAddress()"
  },
  {
    "label": "setAddress()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAddress(Value *V)"
  },
  {
    "label": "getNumDestinations()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumDestinations()"
  },
  {
    "label": "getDestination()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getDestination(unsigned i)"
  },
  {
    "label": "addDestination()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addDestination(BasicBlock *Dest)"
  },
  {
    "label": "removeDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDestination(unsigned i)"
  },
  {
    "label": "setSuccessor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setSuccessor(unsigned i, BasicBlock *NewSucc)"
  },
  {
    "label": "setOperand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setOperand(i+1, (Value*)NewSucc)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct OperandTraits<IndirectBrInst> : public HungoffOperandTraits<1> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(IndirectBrInst, Value)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (AttributeSet AttributeList ; FunctionType* FTy ;)",
    "insertText": "InvokeInst(const InvokeInst &BI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, const Twine &NameStr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(cast<FunctionType>( cast<PointerType>(Func->getType())->getElementType()), Func, IfNormal, IfException, Args, NameStr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "init(FunctionType *FTy, Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, const Twine &NameStr)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeInst(Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, unsigned Values, const Twine &NameStr, Instruction *InsertBefore) : InvokeInst(cast<FunctionType>( cast<PointerType>(Func->getType())->getElementType()), Func, IfNormal, IfException, Args, Values, NameStr, InsertBefore)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InvokeInst(FunctionType *Ty, Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, unsigned Values, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvokeInst(Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, unsigned Values, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : InvokeInst*)",
    "insertText": "Create(Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} InvokeInst*)",
    "insertText": "Create(FunctionType *Ty, Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "unsigned()",
    "kind": "Method",
    "detail": "Function (unsigned Values =)",
    "insertText": "unsigned(Args.size())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} InvokeInst*)",
    "insertText": "Create(Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "setInstructionSubclassData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setInstructionSubclassData(static_cast<unsigned>(CC))"
  },
  {
    "label": "getNormalDest()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getNormalDest()"
  },
  {
    "label": "getUnwindDest()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getUnwindDest()"
  },
  {
    "label": "setNormalDest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNormalDest(BasicBlock *B)"
  },
  {
    "label": "Op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Op() = reinterpret_cast<Value*>(B)"
  },
  {
    "label": "setUnwindDest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setUnwindDest(BasicBlock *B)"
  },
  {
    "label": "getLandingPadInst()",
    "kind": "Method",
    "detail": "Function (} LandingPadInst*)",
    "insertText": "getLandingPadInst()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < 2 && \"Successor # out of range for invoke!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(idx < 2 && \"Successor # out of range for invoke!\")"
  },
  {
    "label": "hasFnAttrImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasFnAttrImpl(Attribute::AttrKind A)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct OperandTraits<InvokeInst> : public VariadicOperandTraits<InvokeInst,3> { } ;)",
    "insertText": "InvokeInst(FunctionType *Ty, Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, unsigned Values, const Twine &NameStr, Instruction *InsertBefore) : TerminatorInst(Ty->getReturnType(), Instruction::Invoke, OperandTraits<InvokeInst>::op_end(this) - Values, Values, InsertBefore)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Ty, Func, IfNormal, IfException, Args, NameStr)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "InvokeInst(Value *Func, BasicBlock *IfNormal, BasicBlock *IfException, ArrayRef<Value *> Args, unsigned Values, const Twine &NameStr, BasicBlock *InsertAtEnd) : TerminatorInst(cast<FunctionType>(cast<PointerType>(Func->getType()) ->getElementType())->getReturnType(), Instruction::Invoke, OperandTraits<InvokeInst>::op_end(this) - Values, Values, InsertAtEnd)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Func, IfNormal, IfException, Args, NameStr)"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(InvokeInst, Value)"
  },
  {
    "label": "ResumeInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeInst(const ResumeInst &RI)"
  },
  {
    "label": "ResumeInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeInst(Value *Exn, Instruction *InsertBefore=nullptr)"
  },
  {
    "label": "ResumeInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResumeInst(Value *Exn, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (public : ResumeInst*)",
    "insertText": "Create(Value *Exn, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} ResumeInst*)",
    "insertText": "Create(Value *Exn, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (Value*)",
    "insertText": "getValue()"
  },
  {
    "label": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct OperandTraits<ResumeInst> : public FixedNumOperandTraits<ResumeInst,1> { } ;)",
    "insertText": "DEFINE_TRANSPARENT_OPERAND_ACCESSORS(ResumeInst, Value)"
  },
  {
    "label": "UnreachableInst()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UnreachableInst(LLVMContext &C, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "UnreachableInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnreachableInst(LLVMContext &C, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "TruncInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TruncInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "TruncInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TruncInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "ZExtInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ZExtInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "ZExtInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZExtInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "SExtInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SExtInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "SExtInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SExtInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "FPTruncInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPTruncInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "FPTruncInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPTruncInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "FPExtInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPExtInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "FPExtInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPExtInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "UIToFPInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UIToFPInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "UIToFPInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UIToFPInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "SIToFPInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SIToFPInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "SIToFPInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SIToFPInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "FPToUIInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPToUIInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "FPToUIInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPToUIInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "FPToSIInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FPToSIInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "FPToSIInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPToSIInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "IntToPtrInst()",
    "kind": "Method",
    "detail": "Function (} } ; class IntToPtrInst : public CastInst { public :)",
    "insertText": "IntToPtrInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "IntToPtrInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntToPtrInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "getAddressSpace()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getAddressSpace()"
  },
  {
    "label": "PtrToIntInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "PtrToIntInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "PtrToIntInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PtrToIntInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "BitCastInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "BitCastInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "BitCastInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BitCastInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "AddrSpaceCastInst()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AddrSpaceCastInst(Value *S, Type *Ty, const Twine &NameStr = \"\", Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "AddrSpaceCastInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddrSpaceCastInst(Value *S, Type *Ty, const Twine &NameStr, BasicBlock *InsertAtEnd)"
  }
]