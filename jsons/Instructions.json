[
  {
    "label": "definitions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "definitions"
  },
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APInt"
  },
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "ConstantRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantRange"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "AtomicOrdering",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AtomicOrdering"
  },
  {
    "label": "SynchronizationScope",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SynchronizationScope"
  },
  {
    "label": "AllocaInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AllocaInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "LoadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoadInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "StoreInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StoreInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "FenceInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FenceInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "AtomicCmpXchgInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicCmpXchgInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "AtomicRMWInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicRMWInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "BinOp",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BinOp"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "GetElementPtrInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GetElementPtrInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "ICmpInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICmpInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "FCmpInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCmpInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "uses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uses"
  },
  {
    "label": "CallInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "TailCallKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TailCallKind"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "SelectInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SelectInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "VAArgInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VAArgInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "ExtractElementInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtractElementInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "InsertElementInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertElementInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "ShuffleVectorInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShuffleVectorInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "member",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "member"
  },
  {
    "label": "ExtractValueInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExtractValueInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "field",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "field"
  },
  {
    "label": "InsertValueInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InsertValueInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "LandingPadInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LandingPadInst"
  },
  {
    "label": "ClauseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ClauseType"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "ReturnInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReturnInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "BranchInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BranchInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "SwitchInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwitchInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "SwitchInstTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SwitchInstTy"
  },
  {
    "label": "ConstantIntTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantIntTy"
  },
  {
    "label": "BasicBlockTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlockTy"
  },
  {
    "label": "CaseIteratorT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CaseIteratorT"
  },
  {
    "label": "CaseIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CaseIt"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "IndirectBrInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IndirectBrInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "InvokeInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InvokeInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "ResumeInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ResumeInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "OperandTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OperandTraits"
  },
  {
    "label": "UnreachableInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnreachableInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "TruncInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TruncInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "ZExtInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ZExtInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "SExtInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SExtInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "FPTruncInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPTruncInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "FPExtInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPExtInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "UIToFPInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UIToFPInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "SIToFPInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SIToFPInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "FPToUIInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPToUIInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "FPToSIInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPToSIInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "IntToPtrInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntToPtrInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "PtrToIntInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PtrToIntInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "BitCastInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitCastInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "AddrSpaceCastInst",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AddrSpaceCastInst"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "AllocaInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "AllocaInst(Type *Ty, Value *ArraySize = nullptr,\n                      const Twine &Name = \"\",\n                      Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "setAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAlignment(unsigned Align)"
  },
  {
    "label": "AssertOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertOK()"
  },
  {
    "label": "LoadInst()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LoadInst(Value *Ptr, const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "setAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAlignment(unsigned Align)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "AssertOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertOK()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 2)"
  },
  {
    "label": "setAlignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAlignment(unsigned Align)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 0)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Value *Ptr, Value *Cmp, Value *NewVal,\n            AtomicOrdering SuccessOrdering, AtomicOrdering FailureOrdering,\n            SynchronizationScope SynchScope)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 3)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(2)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(2)"
  },
  {
    "label": "llvm_unreachable()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "llvm_unreachable(\"invalid cmpxchg success ordering\")"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 2)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(BinOp Operation, Value *Ptr, Value *Val,\n            AtomicOrdering Ordering, SynchronizationScope SynchScope)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Ptr, ArrayRef<Value *> IdxList, const Twine &NameStr)"
  },
  {
    "label": "GetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "GetElementPtrInst(Type *PointeeType, Value *Ptr,\n                           ArrayRef<Value *> IdxList, unsigned Values,\n                           const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "GetElementPtrInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "GetElementPtrInst(Type *PointeeType, Value *Ptr,\n                           ArrayRef<Value *> IdxList, unsigned Values,\n                           const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "CreateInBounds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateInBounds(nullptr, Ptr, IdxList, NameStr, InsertBefore)"
  },
  {
    "label": "CreateInBounds()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CreateInBounds(nullptr, Ptr, IdxList, NameStr, InsertAtEnd)"
  },
  {
    "label": "getPointerAddressSpace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getPointerAddressSpace()"
  },
  {
    "label": "op_end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "op_end()"
  },
  {
    "label": "op_end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "op_end()"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "setIsInBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIsInBounds(bool b = true)"
  },
  {
    "label": "AssertOK()",
    "kind": "Method",
    "detail": "Function (NDEBUG)",
    "insertText": "AssertOK()"
  },
  {
    "label": "AssertOK()",
    "kind": "Method",
    "detail": "Function (NDEBUG)",
    "insertText": "AssertOK()"
  },
  {
    "label": "AssertOK()",
    "kind": "Method",
    "detail": "Function (NDEBUG)",
    "insertText": "AssertOK()"
  },
  {
    "label": "getSignedPredicate()",
    "kind": "Method",
    "detail": "Function (Predicate)",
    "insertText": "getSignedPredicate(Predicate pred)"
  },
  {
    "label": "getUnsignedPredicate()",
    "kind": "Method",
    "detail": "Function (Predicate)",
    "insertText": "getUnsignedPredicate(Predicate pred)"
  },
  {
    "label": "isEquality()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isEquality()"
  },
  {
    "label": "makeConstantRange()",
    "kind": "Method",
    "detail": "Function (ConstantRange)",
    "insertText": "makeConstantRange(Predicate pred, const APInt &C)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(FunctionType *FTy, Value *Func, ArrayRef<Value *> Args,\n            const Twine &NameStr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Func, const Twine &NameStr)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "CallInst(FunctionType *Ty, Value *Func, ArrayRef<Value *> Args,\n                  const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "CallInst(Value *Func, ArrayRef<Value *> Args,\n                  const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "CallInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "CallInst(Value *F, const Twine &NameStr,\n                    Instruction *InsertBefore)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (accessors)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(i)"
  },
  {
    "label": "getOperandUse()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperandUse(i)"
  },
  {
    "label": "getOperandUse()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperandUse(i)"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(unsigned i, Attribute::AttrKind attr)"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(unsigned i, StringRef Kind, StringRef Value)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeAttribute(unsigned i, Attribute attr)"
  },
  {
    "label": "addDereferenceableAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDereferenceableAttr(unsigned i, uint64_t Bytes)"
  },
  {
    "label": "addDereferenceableOrNullAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDereferenceableOrNullAttr(unsigned i, uint64_t Bytes)"
  },
  {
    "label": "hasFnAttrImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttrImpl(A)"
  },
  {
    "label": "hasFnAttrImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttrImpl(A)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoInline)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::ReturnsTwice)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::ReadNone)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::ArgMemOnly)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoReturn)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoUnwind)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoDuplicate)"
  },
  {
    "label": "paramHasAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "paramHasAttr(1, Attribute::StructRet)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "isValidOperands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidOperands(const Value *Vec, const Value *Idx)"
  },
  {
    "label": "isValidOperands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidOperands(const Value *Vec, const Value *NewElt,\n                              const Value *Idx)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 3)"
  },
  {
    "label": "isValidOperands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidOperands(const Value *V1, const Value *V2,\n                              const Value *Mask)"
  },
  {
    "label": "getMaskValue()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getMaskValue(Constant *Mask, unsigned i)"
  },
  {
    "label": "getShuffleMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getShuffleMask(Constant *Mask, SmallVectorImpl<int> &Result)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(ArrayRef<unsigned> Idxs, const Twine &NameStr)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "ExtractValueInst(Value *Agg,\n                          ArrayRef<unsigned> Idxs,\n                          const Twine &NameStr,\n                          Instruction *InsertBefore)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "ExtractValueInst(Value *Agg,\n                          ArrayRef<unsigned> Idxs,\n                          const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 1)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ExtractValueInst(Agg, Idxs, NameStr, InsertBefore)"
  },
  {
    "label": "ExtractValueInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ExtractValueInst(Agg, Idxs, NameStr, InsertAtEnd)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Agg, Value *Val, ArrayRef<unsigned> Idxs,\n            const Twine &NameStr)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "InsertValueInst(Value *Agg, Value *Val,\n                         ArrayRef<unsigned> Idxs,\n                         const Twine &NameStr,\n                         Instruction *InsertBefore)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "InsertValueInst(Value *Agg, Value *Val,\n                         ArrayRef<unsigned> Idxs,\n                         const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 2)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "InsertValueInst(Agg, Val, Idxs, NameStr, InsertBefore)"
  },
  {
    "label": "InsertValueInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "InsertValueInst(Agg, Val, Idxs, NameStr, InsertAtEnd)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s)"
  },
  {
    "label": "PHINode()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "PHINode(Ty, NumReservedValues, NameStr, InsertBefore)"
  },
  {
    "label": "PHINode()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "PHINode(Ty, NumReservedValues, NameStr, InsertAtEnd)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (accessors)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "operands()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "operands()"
  },
  {
    "label": "operands()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "operands()"
  },
  {
    "label": "getNumOperands()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNumOperands()"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(i)"
  },
  {
    "label": "removeIncomingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "removeIncomingValue(Idx, DeletePHIIfEmpty)"
  },
  {
    "label": "getIncomingValue()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getIncomingValue(Idx)"
  },
  {
    "label": "growOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "growOperands()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s)"
  },
  {
    "label": "growOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "growOperands(unsigned Size)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(unsigned NumReservedValues, const Twine &NameStr)"
  },
  {
    "label": "LandingPadInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "LandingPadInst(Type *RetTy, unsigned NumReservedValues,\n                          const Twine &NameStr, Instruction *InsertBefore)"
  },
  {
    "label": "LandingPadInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "LandingPadInst(Type *RetTy, unsigned NumReservedValues,\n                          const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (accessors)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "addClause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addClause(Constant *ClauseVal)"
  },
  {
    "label": "getNumOperands()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getNumOperands()"
  },
  {
    "label": "ReturnInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ReturnInst(LLVMContext &C, Value *retVal = nullptr,\n                      Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "ReturnInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ReturnInst(LLVMContext &C, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (accessors)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "AssertOK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertOK()"
  },
  {
    "label": "BranchInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "BranchInst(BasicBlock *IfTrue, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "swapSuccessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swapSuccessors()"
  },
  {
    "label": "SwitchInst()",
    "kind": "Method",
    "detail": "Function (match)",
    "insertText": "SwitchInst(const SwitchInst &SI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Value, BasicBlock *Default, unsigned NumReserved)"
  },
  {
    "label": "growOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "growOperands()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s)"
  },
  {
    "label": "SwitchInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "SwitchInst(Value, Default, NumCases, InsertBefore)"
  },
  {
    "label": "SwitchInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "SwitchInst(Value, Default, NumCases, InsertAtEnd)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (accessors)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "CaseIt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CaseIt(this, 0)"
  },
  {
    "label": "ConstCaseIt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ConstCaseIt(this, 0)"
  },
  {
    "label": "CaseIt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "CaseIt(this, DefaultPseudoIndex)"
  },
  {
    "label": "ConstCaseIt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ConstCaseIt(this, DefaultPseudoIndex)"
  },
  {
    "label": "case_default()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "case_default()"
  },
  {
    "label": "case_default()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "case_default()"
  },
  {
    "label": "addCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addCase(ConstantInt *OnVal, BasicBlock *Dest)"
  },
  {
    "label": "removeCase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeCase(CaseIt i)"
  },
  {
    "label": "IndirectBrInst()",
    "kind": "Method",
    "detail": "Function (match)",
    "insertText": "IndirectBrInst(const IndirectBrInst &IBI)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(Value *Address, unsigned NumDests)"
  },
  {
    "label": "growOperands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "growOperands()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s)"
  },
  {
    "label": "IndirectBrInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "IndirectBrInst(Address, NumDests, InsertBefore)"
  },
  {
    "label": "IndirectBrInst()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "IndirectBrInst(Address, NumDests, InsertAtEnd)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getSuccessor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getSuccessor(i)"
  },
  {
    "label": "getSuccessor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getSuccessor(i)"
  },
  {
    "label": "addDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDestination(BasicBlock *Dest)"
  },
  {
    "label": "removeDestination()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeDestination(unsigned i)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(FunctionType *FTy, Value *Func, BasicBlock *IfNormal,\n            BasicBlock *IfException, ArrayRef<Value *> Args,\n            const Twine &NameStr)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "InvokeInst(FunctionType *Ty, Value *Func, BasicBlock *IfNormal,\n                    BasicBlock *IfException, ArrayRef<Value *> Args,\n                    unsigned Values, const Twine &NameStr,\n                    Instruction *InsertBefore)"
  },
  {
    "label": "InvokeInst()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "InvokeInst(Value *Func, BasicBlock *IfNormal, BasicBlock *IfException,\n                    ArrayRef<Value *> Args, unsigned Values,\n                    const Twine &NameStr, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (accessors)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(i)"
  },
  {
    "label": "getOperandUse()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperandUse(i)"
  },
  {
    "label": "getOperandUse()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperandUse(i)"
  },
  {
    "label": "addAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addAttribute(unsigned i, Attribute::AttrKind attr)"
  },
  {
    "label": "removeAttribute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeAttribute(unsigned i, Attribute attr)"
  },
  {
    "label": "addDereferenceableAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDereferenceableAttr(unsigned i, uint64_t Bytes)"
  },
  {
    "label": "addDereferenceableOrNullAttr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDereferenceableOrNullAttr(unsigned i, uint64_t Bytes)"
  },
  {
    "label": "hasFnAttrImpl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttrImpl(A)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoInline)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::ReadNone)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::ArgMemOnly)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoReturn)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoUnwind)"
  },
  {
    "label": "hasFnAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hasFnAttr(Attribute::NoDuplicate)"
  },
  {
    "label": "paramHasAttr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "paramHasAttr(1, Attribute::StructRet)"
  },
  {
    "label": "ResumeInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ResumeInst(Value *Exn, Instruction *InsertBefore=nullptr)"
  },
  {
    "label": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS()",
    "kind": "Method",
    "detail": "Function (accessors)",
    "insertText": "DECLARE_TRANSPARENT_OPERAND_ACCESSORS(Value)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (User::operator)",
    "insertText": "new(s, 0)"
  },
  {
    "label": "UnreachableInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "UnreachableInst(LLVMContext &C, Instruction *InsertBefore = nullptr)"
  },
  {
    "label": "UnreachableInst()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "UnreachableInst(LLVMContext &C, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "ZExtInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "ZExtInst(\n    Value *S,                           ///< The value to be zero extended\n    Type *Ty,                           ///< The type to zero extend to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "SExtInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "SExtInst(\n    Value *S,                           ///< The value to be sign extended\n    Type *Ty,                           ///< The type to sign extend to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "SExtInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "SExtInst(\n    Value *S,                     ///< The value to be sign extended\n    Type *Ty,                     ///< The type to sign extend to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "FPTruncInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPTruncInst(\n    Value *S,                           ///< The value to be truncated\n    Type *Ty,                           ///< The type to truncate to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "FPTruncInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPTruncInst(\n    Value *S,                     ///< The value to be truncated\n    Type *Ty,                     ///< The type to truncate to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "FPExtInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPExtInst(\n    Value *S,                           ///< The value to be extended\n    Type *Ty,                           ///< The type to extend to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "FPExtInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPExtInst(\n    Value *S,                     ///< The value to be extended\n    Type *Ty,                     ///< The type to extend to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "UIToFPInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "UIToFPInst(\n    Value *S,                           ///< The value to be converted\n    Type *Ty,                           ///< The type to convert to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "UIToFPInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "UIToFPInst(\n    Value *S,                     ///< The value to be converted\n    Type *Ty,                     ///< The type to convert to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "SIToFPInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "SIToFPInst(\n    Value *S,                           ///< The value to be converted\n    Type *Ty,                           ///< The type to convert to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "SIToFPInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "SIToFPInst(\n    Value *S,                     ///< The value to be converted\n    Type *Ty,                     ///< The type to convert to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "FPToUIInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPToUIInst(\n    Value *S,                           ///< The value to be converted\n    Type *Ty,                           ///< The type to convert to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "FPToUIInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPToUIInst(\n    Value *S,                     ///< The value to be converted\n    Type *Ty,                     ///< The type to convert to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "FPToSIInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPToSIInst(\n    Value *S,                           ///< The value to be converted\n    Type *Ty,                           ///< The type to convert to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "FPToSIInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "FPToSIInst(\n    Value *S,                     ///< The value to be converted\n    Type *Ty,                     ///< The type to convert to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "IntToPtrInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "IntToPtrInst(\n    Value *S,                           ///< The value to be converted\n    Type *Ty,                           ///< The type to convert to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "IntToPtrInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "IntToPtrInst(\n    Value *S,                     ///< The value to be converted\n    Type *Ty,                     ///< The type to convert to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "PtrToIntInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "PtrToIntInst(\n    Value *S,                           ///< The value to be converted\n    Type *Ty,                           ///< The type to convert to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "PtrToIntInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "PtrToIntInst(\n    Value *S,                     ///< The value to be converted\n    Type *Ty,                     ///< The type to convert to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getOperand(0)"
  },
  {
    "label": "BitCastInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "BitCastInst(\n    Value *S,                           ///< The value to be casted\n    Type *Ty,                           ///< The type to casted to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "BitCastInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "BitCastInst(\n    Value *S,                     ///< The value to be casted\n    Type *Ty,                     ///< The type to casted to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  },
  {
    "label": "AddrSpaceCastInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "AddrSpaceCastInst(\n    Value *S,                           ///< The value to be casted\n    Type *Ty,                           ///< The type to casted to\n    const Twine &NameStr = \"\",          ///< A name for the new instruction\n    Instruction *InsertBefore = nullptr ///< Where to insert the new instruction\n  )"
  },
  {
    "label": "AddrSpaceCastInst()",
    "kind": "Method",
    "detail": "Function (semantics)",
    "insertText": "AddrSpaceCastInst(\n    Value *S,                     ///< The value to be casted\n    Type *Ty,                     ///< The type to casted to\n    const Twine &NameStr,         ///< A name for the new instruction\n    BasicBlock *InsertAtEnd       ///< The block to insert the instruction into\n  )"
  }
]