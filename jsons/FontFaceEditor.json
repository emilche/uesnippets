[
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "SCompositeFontEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCompositeFontEditor"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "UFontFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFontFace"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FFontFaceEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFontFaceEditor"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "FEditPropertyChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditPropertyChain"
  },
  {
    "label": "FPropertyAndParent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyAndParent"
  },
  {
    "label": "IDetailsView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailsView"
  },
  {
    "label": "FFontFaceEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EditorUndoClient . h \" # include \" Framework / Docking / TabManager . h \" # include \" HAL / Platform . h \" # include \" IFontFaceEditor . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Misc / NotifyHook . h \" # include \" Misc / Optional . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Toolkits / IToolkit . h \" # include \" UObject / GCObject . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" class FReferenceCollector ; class SCompositeFontEditor ; class SDockTab ; class SEditableTextBox ; class SVerticalBox ; class UFontFace ; struct FPropertyChangedEvent ; class FFontFaceEditor : public IFontFaceEditor,public FGCObject,public FNotifyHook,public FEditorUndoClient { public :)",
    "insertText": "FFontFaceEditor()"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "UnregisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "InitFontFaceEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFontFaceEditor(const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, UObject* ObjectToEdit)"
  },
  {
    "label": "GetFontFace()",
    "kind": "Method",
    "detail": "Function (UFontFace*)",
    "insertText": "GetFontFace()"
  },
  {
    "label": "RefreshPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshPreview()"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "ShouldPromptForNewFilesOnReload()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldPromptForNewFilesOnReload(const UObject& object)"
  },
  {
    "label": "OnPreviewTextChanged()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPreviewTextChanged(const FText& Text)"
  },
  {
    "label": "GetPreviewFontSize()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetPreviewFontSize()"
  },
  {
    "label": "OnPreviewFontSizeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewFontSizeChanged(int32 InNewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, class FEditPropertyChain* PropertyThatChanged)"
  },
  {
    "label": "CreateInternalWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateInternalWidgets()"
  },
  {
    "label": "OnPostReimport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostReimport(UObject* InObject, bool bSuccess)"
  },
  {
    "label": "OnObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectPropertyChanged(UObject* InObject, struct FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "SpawnTab_Preview()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Preview(const FSpawnTabArgs& Args)"
  },
  {
    "label": "SpawnTab_Properties()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab_Properties(const FSpawnTabArgs& Args)"
  },
  {
    "label": "AddToSpawnedToolPanels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSpawnedToolPanels(const FName& TabIdentifier, const TSharedRef<SDockTab>& SpawnedTab)"
  },
  {
    "label": "OnObjectReimported()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnObjectReimported(UObject* InObject)"
  },
  {
    "label": "GetIsPropertyVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsPropertyVisible(const struct FPropertyAndParent& PropertyAndParent)"
  },
  {
    "label": "ClonePreviewFontFace()",
    "kind": "Method",
    "detail": "Function (private : TObjectPtr<UFontFace> FontFace ; TArray<TObjectPtr<UObject>> PreviewFonts ; TArray<TObjectPtr<UFontFace>> PreviewFaces ; TMap<FName,TWeakPtr<SDockTab>> SpawnedToolPanels ; TSharedPtr<SVerticalBox> FontFacePreview ; TSharedPtr<class IDetailsView> FontFaceProperties ; TSharedPtr<SEditableTextBox> FontFacePreviewText ; TSharedPtr<STextBlock> PreviewTextBlocks [ 2 ] [ 7 ] ; TSharedPtr<STextBlock> PreviewNoteTextBlock ; int32 PreviewFontSize = 2 4 ; const FName PreviewTabId ; const FName PropertiesTabId ; void)",
    "insertText": "ClonePreviewFontFace(TObjectPtr<UFontFace>& TargetFontFace, EFontRasterizationMode RasterizationMode, int32 DistanceFieldPpem = 0)"
  },
  {
    "label": "MakePreviewFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakePreviewFont(TObjectPtr<UObject>& TargetObject, UFontFace* Face)"
  },
  {
    "label": "IsFontFaceDistanceFieldEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFontFaceDistanceFieldEnabled()"
  },
  {
    "label": "UpdatePreviewFonts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreviewFonts()"
  },
  {
    "label": "UpdatePreviewVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreviewVisibility()"
  },
  {
    "label": "ApplyPreviewFontSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyPreviewFontSize()"
  }
]