[
  {
    "label": "UCookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCookOnTheFlyServer"
  },
  {
    "label": "FIterativeValidateMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIterativeValidateMPCollector"
  },
  {
    "label": "FIterativeValidatePackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FIterativeValidatePackageWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMessage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessage"
  },
  {
    "label": "FStatusCounts",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatusCounts"
  },
  {
    "label": "FPackageStatusInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageStatusInfo"
  },
  {
    "label": "FIterativeValidatePackageWriter()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DiffPackageWriter . h \" class UCookOnTheFlyServer ; class FIterativeValidateMPCollector ; class FIterativeValidatePackageWriter : public FDiffPackageWriter { public : using Super = FDiffPackageWriter ; enum class EPhase { AllInOnePhase,Phase1,Phase2,} ;)",
    "insertText": "FIterativeValidatePackageWriter(UCookOnTheFlyServer& InCOTFS, TUniquePtr<ICookedPackageWriter>&& InInner, EPhase InPhase, const FString& ResolvedMetadataPath, UE::Cook::FDeterminismManager* InDeterminismManager)"
  },
  {
    "label": "BeginPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPackage(const FBeginPackageInfo& Info)"
  },
  {
    "label": "CommitPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitPackage(FCommitPackageInfo&& Info)"
  },
  {
    "label": "WritePackageData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageData(const FPackageInfo& Info, FLargeMemoryWriter& ExportsArchive, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteBulkData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteBulkData(const FBulkDataInfo& Info, const FIoBuffer& BulkData, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WriteAdditionalFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteAdditionalFile(const FAdditionalFileInfo& Info, const FIoBuffer& FileData)"
  },
  {
    "label": "WriteLinkerAdditionalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLinkerAdditionalData(const FLinkerAdditionalDataInfo& Info, const FIoBuffer& Data, const TArray<FFileRegion>& FileRegions)"
  },
  {
    "label": "WritePackageTrailer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WritePackageTrailer(const FPackageTrailerInfo& Info, const FIoBuffer& Data)"
  },
  {
    "label": "GetExportsFooterSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetExportsFooterSize()"
  },
  {
    "label": "CreateLinkerArchive()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FLargeMemoryWriter>)",
    "insertText": "CreateLinkerArchive(FName PackageName, UObject* Asset, uint16 MultiOutputIndex)"
  },
  {
    "label": "CreateLinkerExportsArchive()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FLargeMemoryWriter>)",
    "insertText": "CreateLinkerExportsArchive(FName PackageName, UObject* Asset, uint16 MultiOutputIndex)"
  },
  {
    "label": "IsPreSaveCompleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreSaveCompleted()"
  },
  {
    "label": "GetCookCapabilities()",
    "kind": "Method",
    "detail": "Function (FCookCapabilities)",
    "insertText": "GetCookCapabilities()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FCookInfo& CookInfo)"
  },
  {
    "label": "UpdatePackageModificationStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePackageModificationStatus(FName PackageName, bool bIterativelyUnmodified, bool& bInOutShouldIterativelySkip)"
  },
  {
    "label": "BeginCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCook(const FCookInfo& Info)"
  },
  {
    "label": "EndCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndCook(const FCookInfo& Info)"
  },
  {
    "label": "UpdateSaveArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSaveArguments(FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "IsAnotherSaveNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnotherSaveNeeded(FSavePackageResultStruct& PreviousResult, FSavePackageArgs& SaveArgs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : enum class EPackageStatus : uint8 ; enum class ESaveAction : uint8 { CheckForDiffs,SaveToInner,IgnoreResults,} ; enum class EPackageStatus : uint8 { NotYetProcessed,DeclaredUnmodified_ConfirmedUnmodified,DeclaredUnmodified_FoundModified_IndeterminismOrFalsePositive,DeclaredUnmodified_FoundModified_Indeterminism,DeclaredUnmodified_FoundModified_FalsePositive,DeclaredUnmodified_FoundModified_OnIgnoreList,DeclaredUnmodified_NotYetProcessed,DeclaredModified_WillNotVerify,Count } ; struct FMessage { FString Text ; ELogVerbosity::Type Verbosity ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMessage& Message)"
  },
  {
    "label": "FStatusCounts()",
    "kind": "Method",
    "detail": "Function (struct FStatusCounts {)",
    "insertText": "FStatusCounts()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (Data = MakeUniformStaticArray<)",
    "insertText": "uint32(uint32)EPackageStatus::Count>(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} uint32&)",
    "insertText": "operator(EPackageStatus PackageStatus)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} private : TStaticArray<)",
    "insertText": "uint32(uint32)"
  },
  {
    "label": "OnDiffWriterMessage()",
    "kind": "Method",
    "detail": "Function (} ; struct FPackageStatusInfo { FTopLevelAssetPath AssetClass ; EPackageStatus Status ; } ; protected : void)",
    "insertText": "OnDiffWriterMessage(ELogVerbosity::Type Verbosity, FStringView Message)"
  },
  {
    "label": "LogIterativeDifferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogIterativeDifferences()"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Save()"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Load()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetIterativeValidatePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetIterativeValidatePath()"
  },
  {
    "label": "GetPackageStatus()",
    "kind": "Method",
    "detail": "Function (EPackageStatus)",
    "insertText": "GetPackageStatus(FName PackageName)"
  },
  {
    "label": "SetPackageStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPackageStatus(FName PackageName, EPackageStatus NewStatus)"
  },
  {
    "label": "CountPackagesByStatus()",
    "kind": "Method",
    "detail": "Function (FStatusCounts)",
    "insertText": "CountPackagesByStatus()"
  },
  {
    "label": "GetSummaryFalsePositiveCounts()",
    "kind": "Method",
    "detail": "Function (TMap<FTopLevelAssetPath,int32>)",
    "insertText": "GetSummaryFalsePositiveCounts()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : TMap<FName,FPackageStatusInfo> PackageStatusMap ; TMap<FName,TArray<FMessage>> PackageMessageMap ; TSet<FName> PackageIgnoreList ; FString MetadataPath ; UCookOnTheFlyServer& COTFS ; EPhase Phase = EPhase::AllInOnePhase ; ESaveAction SaveAction = ESaveAction::IgnoreResults ; bool bPackageFirstPass = false ; bool bReadOnly = true ; class FIterativeValidateMPCollector ; FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FMessage& Message)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FMessage& Path)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, EPackageStatus Status)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, EPackageStatus& Status)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Writer, FPackageStatusInfo& Info)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FPackageStatusInfo& Info)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FPackageStatusInfo& Info)"
  }
]