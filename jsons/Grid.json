[
  {
    "label": "Grid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Grid"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "GridBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridBase"
  },
  {
    "label": "OPENVDB_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "OPENVDB_API"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "Grid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Grid"
  },
  {
    "label": "ValueConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueConverter"
  },
  {
    "label": "Grid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Grid"
  },
  {
    "label": "TreeAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeAdapter"
  },
  {
    "label": "TreeAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeAdapter"
  },
  {
    "label": "TreeAdapter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeAdapter"
  },
  {
    "label": "HasMultiPassIO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasMultiPassIO"
  },
  {
    "label": "HasMultiPassIO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasMultiPassIO"
  },
  {
    "label": "HasMultiPassIO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasMultiPassIO"
  },
  {
    "label": "GridApplyImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GridApplyImpl"
  },
  {
    "label": "GridApplyImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GridApplyImpl"
  },
  {
    "label": "createGrid()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "createGrid(const typename GridType::ValueType& background)"
  },
  {
    "label": "createGrid()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "createGrid()"
  },
  {
    "label": "createGrid()",
    "kind": "Method",
    "detail": "Function (TreePtrType::element_type>::Ptr)",
    "insertText": "createGrid(TreePtrType)"
  },
  {
    "label": "createLevelSet()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "createLevelSet(\n    Real voxelSize = 1.0, Real halfWidth = LEVEL_SET_HALF_WIDTH)"
  },
  {
    "label": "createGrid()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "createGrid(const Name& type)"
  },
  {
    "label": "isRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isRegistered(const Name &type)"
  },
  {
    "label": "clearRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearRegistry()"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr)",
    "insertText": "grid(const GridBase::Ptr&)"
  },
  {
    "label": "grid()",
    "kind": "Method",
    "detail": "Function (GridType::ConstPtr)",
    "insertText": "grid(const GridBase::ConstPtr&)"
  },
  {
    "label": "constGrid()",
    "kind": "Method",
    "detail": "Function (GridType::ConstPtr)",
    "insertText": "constGrid(const GridBase::Ptr&)"
  },
  {
    "label": "constGrid()",
    "kind": "Method",
    "detail": "Function (GridType::ConstPtr)",
    "insertText": "constGrid(const GridBase::ConstPtr&)"
  },
  {
    "label": "baseTreePtr()",
    "kind": "Method",
    "detail": "Function (TreeBase::Ptr)",
    "insertText": "baseTreePtr()"
  },
  {
    "label": "clipGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clipGrid(const BBoxd&)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "apply(OpT&)"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "apply(const OpT&)"
  },
  {
    "label": "setName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setName(const std::string&)"
  },
  {
    "label": "setCreator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCreator(const std::string&)"
  },
  {
    "label": "setSaveFloatAsHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSaveFloatAsHalf(bool)"
  },
  {
    "label": "setGridClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setGridClass(GridClass)"
  },
  {
    "label": "clearGridClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearGridClass()"
  },
  {
    "label": "gridClassToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "gridClassToString(GridClass)"
  },
  {
    "label": "gridClassToMenuName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "gridClassToMenuName(GridClass)"
  },
  {
    "label": "stringToGridClass()",
    "kind": "Method",
    "detail": "Function (GridClass)",
    "insertText": "stringToGridClass(const std::string&)"
  },
  {
    "label": "setVectorType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVectorType(VecType)"
  },
  {
    "label": "clearVectorType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearVectorType()"
  },
  {
    "label": "vecTypeToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "vecTypeToString(VecType)"
  },
  {
    "label": "vecTypeExamples()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "vecTypeExamples(VecType)"
  },
  {
    "label": "vecTypeDescription()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "vecTypeDescription(VecType)"
  },
  {
    "label": "stringToVecType()",
    "kind": "Method",
    "detail": "Function (VecType)",
    "insertText": "stringToVecType(const std::string&)"
  },
  {
    "label": "setIsInWorldSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setIsInWorldSpace(bool)"
  },
  {
    "label": "addStatsMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addStatsMetadata()"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setTransform(math::Transform::Ptr)"
  },
  {
    "label": "GridBase()",
    "kind": "Method",
    "detail": "Function (null)",
    "insertText": "GridBase(const MetaMap& meta, math::Transform::Ptr xform)"
  },
  {
    "label": "registerGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "registerGrid(const Name& type, GridFactory)"
  },
  {
    "label": "unregisterGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "unregisterGrid(const Name& type)"
  },
  {
    "label": "GridPtrT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GridPtrT()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const ValueType& background)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(TreePtrType)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "create(const GridBase& other)"
  },
  {
    "label": "Grid()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Grid(const ValueType& background)"
  },
  {
    "label": "Grid()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Grid(TreePtrType)"
  },
  {
    "label": "Grid()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Grid(const Grid<OtherTreeType>&)"
  },
  {
    "label": "Grid()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "Grid(const GridBase&)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (Ptr)",
    "insertText": "copy()"
  },
  {
    "label": "sparseFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sparseFill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "denseFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "denseFill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(Grid& other, MergePolicy policy = MERGE_ACTIVE_STATES)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyUnion(const Grid<OtherTreeType>& other)"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyIntersection(const Grid<OtherTreeType>& other)"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyDifference(const Grid<OtherTreeType>& other)"
  },
  {
    "label": "hasMultiPassIO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasMultiPassIO()"
  }
]