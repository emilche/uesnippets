[
  {
    "label": "THitType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THitType"
  },
  {
    "label": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT_HELPER()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # if WITH_CHAOS_VISUAL_DEBUGGER # include \" CollisionQueryFilterCallbackCore . h \" # include \" Chaos / ISpatialAcceleration . h \" # include \" ChaosVisualDebugger / ChaosVisualDebuggerTrace . h \" # include \" DataWrappers / ChaosVDQueryDataWrappers . h \" # ifndef CVD_TRACE_SCOPED_SCENE_QUERY_VISIT_HELPER # define)",
    "insertText": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT_HELPER(Type, ParticleTransform, ParticleIndex, ShapeIndex, CurData) \\ CVD_SCOPED_DATA_CHANNEL_OVERRIDE(CVDDC_SceneQueries)"
  },
  {
    "label": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CVD_TRACE_SCOPED_SCENE_QUERY_VISIT(CVDSQVisitStepData)"
  },
  {
    "label": "FillCVDQueryVisitData()",
    "kind": "Method",
    "detail": "Function (\\ Chaos::VisualDebugger::)",
    "insertText": "FillCVDQueryVisitData(CVDSQVisitStepData, Type, ParticleTransform, ParticleIndex, ShapeIndex, CurData)"
  },
  {
    "label": "CVD_FILL_HIT_DATA_HELPER()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef CVD_FILL_HIT_DATA_HELPER # define)",
    "insertText": "CVD_FILL_HIT_DATA_HELPER(Hit, HitType) \\ Chaos::VisualDebugger::TraceHelpers::FillCVDHitDataHelper(Hit, HitType, CVDSQVisitStepData)"
  },
  {
    "label": "CVD_SET_SQ_SHAPE_REJECT_REASON()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef CVD_SET_SQ_SHAPE_REJECT_REASON # define)",
    "insertText": "CVD_SET_SQ_SHAPE_REJECT_REASON(Reason)"
  },
  {
    "label": "FillCVDHitDataHelper()",
    "kind": "Method",
    "detail": "Function (# endif namespace Chaos::VisualDebugger::TraceHelpers { template<class THitType> void)",
    "insertText": "FillCVDHitDataHelper(THitType& Hit, ECollisionQueryHitType HitType, FChaosVDQueryVisitStep& InOutVisitData)"
  },
  {
    "label": "FillCVDQueryVisitData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillCVDQueryVisitData(FChaosVDQueryVisitStep& InOutVisitData, EChaosVDSceneQueryVisitorType Type, const FTransform& ParticleTransform, int32 ParticleIndex, int32 ShapeIndex, const Chaos::FQueryFastData* CurData)"
  },
  {
    "label": "MarkAsValid()",
    "kind": "Method",
    "detail": "Function (InOutVisitData . QueryFastData . Dir = CurData -> Dir ; InOutVisitData . QueryFastData . InvDir = CurData -> InvDir ; InOutVisitData . QueryFastData . CurrentLength = CurData -> CurrentLength ; InOutVisitData . QueryFastData . InvCurrentLength = CurData -> InvCurrentLength ; InOutVisitData . QueryFastData . bParallel0 = CurData -> bParallel [ 0 ] ; InOutVisitData . QueryFastData . bParallel1 = CurData -> bParallel [ 1 ] ; InOutVisitData . QueryFastData . bParallel2 = CurData -> bParallel [ 2 ] ; InOutVisitData . QueryFastData .)",
    "insertText": "MarkAsValid()"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (InOutVisitData . HitData . Distance = Hit . Distance ; InOutVisitData . HitData . WorldPosition = Hit . WorldPosition ; InOutVisitData . HitData . WorldNormal = Hit . WorldNormal ; InOutVisitData . HitData . Flags = static_cast<)",
    "insertText": "uint16(Hit.Flags.HitFlags)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (InOutVisitData . HitData . FaceIdx = Hit . FaceIndex ; } if)",
    "insertText": "constexpr(std::is_base_of_v<ChaosInterface::FQueryHit, THitType> || std::is_base_of_v<ChaosInterface::FPTQueryHit, THitType>)"
  },
  {
    "label": "EChaosVDCollisionQueryHitType()",
    "kind": "Method",
    "detail": "Function (InOutVisitData . HitData . FaceNormal = Hit . FaceNormal ; } InOutVisitData . HitType = static_cast<)",
    "insertText": "EChaosVDCollisionQueryHitType(HitType)"
  }
]