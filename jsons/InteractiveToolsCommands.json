[
  {
    "label": "TInteractiveToolCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TInteractiveToolCommands"
  },
  {
    "label": "FToolActionCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolActionCommand"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / Commands / Commands . h \" # include \" Framework / Commands / UICommandList . h \" # include \" InteractiveTool . h \" # include \" StandardToolModeCommands . h \" # include \" Styling / ISlateStyle . h \" template<CommandContextType> class TInteractiveToolCommands : public TCommands<CommandContextType> { public : void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "BindCommandsForCurrentTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommandsForCurrentTool(TSharedPtr<FUICommandList> UICommandList, UInteractiveTool* Tool)"
  },
  {
    "label": "UnbindActiveCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindActiveCommands(TSharedPtr<FUICommandList> UICommandList)"
  },
  {
    "label": "GetToolDefaultObjectList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetToolDefaultObjectList(TArray<UInteractiveTool*>& ToolCDOs)"
  },
  {
    "label": "TInteractiveToolCommands()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TInteractiveToolCommands(const FName InContextName, const FText& InContextDesc, const FName InContextParent, const FName InStyleSetName) : TCommands<CommandContextType>(InContextName, InContextDesc, InContextParent, InStyleSetName)"
  },
  {
    "label": "FindStandardCommand()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FUICommandInfo>)",
    "insertText": "FindStandardCommand(EStandardToolActions ToolActionID)"
  },
  {
    "label": "FindOrCreateSharedCommand()",
    "kind": "Method",
    "detail": "Function (struct FToolActionCommand { FInteractiveToolAction ToolAction ; TSharedPtr<FUICommandInfo> UICommand ; } ; TArray<FToolActionCommand> ActionCommands ; TMap<EStandardToolActions,FToolActionCommand> SharedActionCommands ; bool)",
    "insertText": "FindOrCreateSharedCommand(EStandardToolActions ActionID, FToolActionCommand& FoundOut)"
  },
  {
    "label": "IntializeStandardToolAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IntializeStandardToolAction(EStandardToolActions ActionID, FInteractiveToolAction& ToolActionOut)"
  },
  {
    "label": "RegisterUIToolCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterUIToolCommand(const FInteractiveToolAction& ToolAction, TSharedPtr<FUICommandInfo>& UICommandInfo)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register()"
  },
  {
    "label": "GetToolDefaultObjectList()",
    "kind": "Method",
    "detail": "Function (TArray<UInteractiveTool*> AllToolsCDOs ;)",
    "insertText": "GetToolDefaultObjectList(AllToolsCDOs)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<FInteractiveToolAction> ToolActions ;)",
    "insertText": "for(UInteractiveTool* Tool : AllToolsCDOs)"
  },
  {
    "label": "GetActionSet()",
    "kind": "Method",
    "detail": "Function (Tool ->)",
    "insertText": "GetActionSet()->CollectActions(ToolActions)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int NumActions = ToolActions .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ActionCommands .)",
    "insertText": "SetNum(NumActions)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bEverRegistered = false ;)",
    "insertText": "for(int k = 0; k < NumActions; ++k)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FInteractiveToolAction& ToolAction = ToolActions [ k ] ; ActionCommands [ k ] . ToolAction = ToolAction ; bool bRegistered = false ;)",
    "insertText": "if((int32)ToolAction.ActionID < (int32)EStandardToolActions::BaseClientDefinedActionID)"
  },
  {
    "label": "FindStandardCommand()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FUICommandInfo> FoundStandard =)",
    "insertText": "FindStandardCommand((EStandardToolActions)ToolAction.ActionID)"
  },
  {
    "label": "FindOrCreateSharedCommand()",
    "kind": "Method",
    "detail": "Function (ActionCommands [ k ] . UICommand = FoundStandard ; bRegistered = true ; } else { FToolActionCommand StandardActionCommand ; bool bFoundRemap =)",
    "insertText": "FindOrCreateSharedCommand((EStandardToolActions)ToolAction.ActionID, StandardActionCommand)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ActionCommands [ k ] . UICommand = StandardActionCommand . UICommand ; bRegistered = true ; } } })",
    "insertText": "if(bRegistered == false)"
  },
  {
    "label": "RegisterUIToolCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterUIToolCommand(ActionCommands[k].ToolAction, ActionCommands[k].UICommand)"
  },
  {
    "label": "ensureMsgf()",
    "kind": "Method",
    "detail": "Function (bEverRegistered = true ; } })",
    "insertText": "ensureMsgf(bEverRegistered || ToolActions.Num() == 0, TEXT(\"Command object had actions, but never registered a FUICommandInfo \" \"object of its own, so its singleton pointer may not be kept alive, causing a crash on a subsequent Get() call. Currently, \" \"a command object must register at least one \\\"non-standard\\\" action through the tool to be safely used.\"))"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (UClass* ToolClassType = Tool ->)",
    "insertText": "GetClass()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FToolActionCommand& ActionCommand = ActionCommands [ k ] ;)",
    "insertText": "if(ActionCommand.ToolAction.ClassType == ToolClassType)"
  },
  {
    "label": "MapAction()",
    "kind": "Method",
    "detail": "Function (UICommandList ->)",
    "insertText": "MapAction(ActionCommand.UICommand, FExecuteAction::CreateUObject(Tool, &UInteractiveTool::ExecuteAction, ActionCommand.ToolAction.ActionID))"
  },
  {
    "label": "UnmapAction()",
    "kind": "Method",
    "detail": "Function (UICommandList ->)",
    "insertText": "UnmapAction(ActionCommand.UICommand)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FStandardToolModeCommands& StdCommands =)",
    "insertText": "Get()"
  },
  {
    "label": "IntializeStandardToolAction()",
    "kind": "Method",
    "detail": "Function (FoundOut = SharedActionCommands [ ActionID ] ; return true ; } FInteractiveToolAction NewAction ; bool bIsKnownAction =)",
    "insertText": "IntializeStandardToolAction(ActionID, NewAction)"
  },
  {
    "label": "RegisterUIToolCommand()",
    "kind": "Method",
    "detail": "Function (FToolActionCommand NewActionCommand ; NewActionCommand . ToolAction = NewAction ;)",
    "insertText": "RegisterUIToolCommand(NewActionCommand.ToolAction, NewActionCommand.UICommand)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FoundOut = SharedActionCommands .)",
    "insertText": "Add(ActionID, NewActionCommand)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (const FString DotString =)",
    "insertText": "FString(TEXT(\".\"))"
  },
  {
    "label": "MakeCommandInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeCommandInfo(this->AsShared(), UICommandInfo, *ToolAction.ActionName, ToolAction.ShortName, ToolAction.Description, FSlateIcon(this->GetStyleSetName(), ISlateStyle::Join(this->GetContextName(), TCHAR_TO_ANSI(*DotString))), EUserInterfaceActionType::Button, FInputChord(ToolAction.DefaultModifiers, ToolAction.DefaultKey))"
  }
]