[
  {
    "label": "stat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stat"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaStringBuffer . h \" # if !)",
    "insertText": "defined(UBA_IS_DETOURED_INCLUDE) #define TRUE_WRAPPER(func)"
  },
  {
    "label": "IsKnownSystemFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsKnownSystemFile(const tchar* fileName)"
  },
  {
    "label": "TRUE_WRAPPER()",
    "kind": "Method",
    "detail": "Function (int fd =)",
    "insertText": "TRUE_WRAPPER(open)(fileName, O_RDONLY)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (outError .)",
    "insertText": "Appendf(\"Open failed for file %s\", fileName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (struct stat sb ;)",
    "insertText": "if(TRUE_WRAPPER(fstat)(fd, &sb) == -1)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (outError .)",
    "insertText": "Appendf(\"Stat failed for file %s\", fileName)"
  },
  {
    "label": "TRUE_WRAPPER()",
    "kind": "Method",
    "detail": "Function (void* mem =)",
    "insertText": "TRUE_WRAPPER(mmap)(nullptr, size, PROT_READ, MAP_PRIVATE, fd, 0)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (outError .)",
    "insertText": "Appendf(\"Mmap failed for file %s\", fileName)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (const char* libs [ 1 0 2 4 ] ; u32 libsCount = 0 ; const char* loaderPaths [ 2 5 6 ] ; u32 loaderPathsCount = 0 ; auto)",
    "insertText": "it(const u8*)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (auto end = it + size - 1 4 ;)",
    "insertText": "while(it != end)"
  },
  {
    "label": "importFile()",
    "kind": "Method",
    "detail": "Function (it + = 6 ; auto)",
    "insertText": "importFile(const char*)"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (outError .)",
    "insertText": "Appendf(\"Found @rpath in binary %s that did not end with .dylib (%s)\", fileName, importFile)"
  },
  {
    "label": "executablePath()",
    "kind": "Method",
    "detail": "Function (it + = 1 6 ; auto)",
    "insertText": "executablePath(const char*)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(*executablePath == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(memcmp(it, \"loader_path/\", 12) == 0)"
  },
  {
    "label": "loaderPathsCount()",
    "kind": "Method",
    "detail": "Function (it + = 1 2 ; loaderPaths [)",
    "insertText": "loaderPathsCount(const char*)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } loaderPaths [ loaderPathsCount ] = nullptr ;)",
    "insertText": "for(u32 i=0; i!=libsCount; ++i) func(libs[i], false, loaderPaths)"
  }
]