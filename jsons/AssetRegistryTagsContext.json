[
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FAssetBundleData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetBundleData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetRegistryTagsContextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryTagsContextData"
  },
  {
    "label": "FAssetRegistryTagsContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryTagsContext"
  },
  {
    "label": "TEXTVIEW()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / StringView . h \" # include \" Misc / Optional . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / CookEnums . h \" # include \" UObject / Object . h \" class ITargetPlatform ; class UObject ; struct FAssetBundleData ; namespace UE::AssetRegistry { FStringView CookTagPrefix =)",
    "insertText": "TEXTVIEW(\"Cook_\")"
  },
  {
    "label": "FAssetRegistryTagsContextData()",
    "kind": "Method",
    "detail": "Function (} enum class EAssetRegistryTagsCaller : uint8 { AssetRegistryQuery,AssetRegistryLoad,FullUpdate,SavePackage,Fast,Uncategorized,} ; struct FAssetRegistryTagsContextData { public :)",
    "insertText": "FAssetRegistryTagsContextData(const UObject* CallTarget, EAssetRegistryTagsCaller InCaller = EAssetRegistryTagsCaller::Uncategorized)"
  },
  {
    "label": "FAssetRegistryTagsContext()",
    "kind": "Method",
    "detail": "Function (TMap<FName,UObject::FAssetRegistryTag> Tags ; const UObject* Object = nullptr ; const ITargetPlatform* TargetPlatform = nullptr ; const FAssetBundleData* BundleResult = nullptr ; EAssetRegistryTagsCaller Caller = EAssetRegistryTagsCaller::Uncategorized ; UE::Cook::ECookType CookType = UE::Cook::ECookType::Unknown ; UE::Cook::ECookingDLC CookingDLC = UE::Cook::ECookingDLC::Unknown ; bool bProceduralSave = false ; bool bWantsBundleResult = false ; bool bWantsCookTags = false ; bool bFullUpdateRequested = false ; } ; class FAssetRegistryTagsContext { public :)",
    "insertText": "FAssetRegistryTagsContext(FAssetRegistryTagsContextData& InData)"
  },
  {
    "label": "FAssetRegistryTagsContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAssetRegistryTagsContext(const FAssetRegistryTagsContext& Other)"
  },
  {
    "label": "GetCaller()",
    "kind": "Method",
    "detail": "Function (EAssetRegistryTagsCaller)",
    "insertText": "GetCaller()"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "GetObject()"
  },
  {
    "label": "IsFullUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFullUpdate()"
  },
  {
    "label": "IsSaving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSaving()"
  },
  {
    "label": "IsProceduralSave()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsProceduralSave()"
  },
  {
    "label": "IsCooking()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCooking()"
  },
  {
    "label": "GetTargetPlatform()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform*)",
    "insertText": "GetTargetPlatform()"
  },
  {
    "label": "IsCookByTheBook()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookByTheBook()"
  },
  {
    "label": "IsCookOnTheFly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookOnTheFly()"
  },
  {
    "label": "IsCookTypeUnknown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookTypeUnknown()"
  },
  {
    "label": "GetCookType()",
    "kind": "Method",
    "detail": "Function (UE::Cook::ECookType)",
    "insertText": "GetCookType()"
  },
  {
    "label": "GetCookingDLC()",
    "kind": "Method",
    "detail": "Function (UE::Cook::ECookingDLC)",
    "insertText": "GetCookingDLC()"
  },
  {
    "label": "FindOrAddTag()",
    "kind": "Method",
    "detail": "Function (UObject::FAssetRegistryTag&)",
    "insertText": "FindOrAddTag(FName TagName, bool* bOutAlreadyExists=nullptr)"
  },
  {
    "label": "FindTag()",
    "kind": "Method",
    "detail": "Function (UObject::FAssetRegistryTag*)",
    "insertText": "FindTag(FName TagName)"
  },
  {
    "label": "ContainsTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsTag(FName TagName)"
  },
  {
    "label": "AddTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTag(UObject::FAssetRegistryTag TagResult)"
  },
  {
    "label": "GetNumTags()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumTags()"
  },
  {
    "label": "EnumerateTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTags(TFunctionRef<void(const UObject::FAssetRegistryTag&)> Visitor)"
  },
  {
    "label": "WantsBundleResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsBundleResult()"
  },
  {
    "label": "GetBundleResult()",
    "kind": "Method",
    "detail": "Function (const FAssetBundleData*)",
    "insertText": "GetBundleResult()"
  },
  {
    "label": "SetBundleResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBundleResult(const FAssetBundleData* InBundleResult)"
  },
  {
    "label": "WantsCookTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WantsCookTags()"
  },
  {
    "label": "FindOrAddCookTag()",
    "kind": "Method",
    "detail": "Function (UObject::FAssetRegistryTag&)",
    "insertText": "FindOrAddCookTag(FName TagName, bool* bOutAlreadyExists)"
  },
  {
    "label": "FindCookTag()",
    "kind": "Method",
    "detail": "Function (UObject::FAssetRegistryTag*)",
    "insertText": "FindCookTag(FName TagName)"
  },
  {
    "label": "ContainsCookTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsCookTag(FName TagName)"
  },
  {
    "label": "AddCookTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCookTag(UObject::FAssetRegistryTag TagResult)"
  },
  {
    "label": "TryValidateTagName()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "TryValidateTagName(FName TagName)"
  },
  {
    "label": "TransformTagName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "TransformTagName(FName TagName, FStringView PrefixToAdd)"
  },
  {
    "label": "FindOrAddTagInternal()",
    "kind": "Method",
    "detail": "Function (UObject::FAssetRegistryTag&)",
    "insertText": "FindOrAddTagInternal(FName TagName, FStringView PrefixToAdd, bool* bOutAlreadyExists)"
  },
  {
    "label": "FindTagInternal()",
    "kind": "Method",
    "detail": "Function (UObject::FAssetRegistryTag*)",
    "insertText": "FindTagInternal(FName TagName, FStringView PrefixToAdd)"
  },
  {
    "label": "ContainsTagInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsTagInternal(FName TagName, FStringView PrefixToAdd)"
  },
  {
    "label": "AddTagInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTagInternal(UObject::FAssetRegistryTag&& TagResult, FStringView PrefixToAdd)"
  }
]