[
  {
    "label": "for",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "for"
  },
  {
    "label": "stbir__info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stbir__info"
  },
  {
    "label": "STBIR_RESIZE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "STBIR_RESIZE"
  },
  {
    "label": "STBIR_PROFILE_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "STBIR_PROFILE_INFO"
  },
  {
    "label": "stbir__scale_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stbir__scale_info"
  },
  {
    "label": "stbir__info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stbir__info"
  },
  {
    "label": "STBIR__V_FIRST_INFO",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "STBIR__V_FIRST_INFO"
  },
  {
    "label": "stbir_output_callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_output_callback( void const * output_ptr, int num_pixels, int y, void * context )"
  },
  {
    "label": "stbir__kernel_callback()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "stbir__kernel_callback( float x, float scale, void * user_data )"
  },
  {
    "label": "stbir__support_callback()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "stbir__support_callback( float scale, void * user_data )"
  },
  {
    "label": "stbir_resize_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_resize_init( STBIR_RESIZE * resize,\n                                 const void *input_pixels,  int input_w,  int input_h, int input_stride_in_bytes, // stride can be zero\n                                       void *output_pixels, int output_w, int output_h, int output_stride_in_bytes, // stride can be zero\n                                 stbir_pixel_layout pixel_layout, stbir_datatype data_type )"
  },
  {
    "label": "stbir_set_datatypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_set_datatypes( STBIR_RESIZE * resize, stbir_datatype input_type, stbir_datatype output_type )"
  },
  {
    "label": "stbir_set_pixel_callbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_set_pixel_callbacks( STBIR_RESIZE * resize, stbir_input_callback * input_cb, stbir_output_callback * output_cb )"
  },
  {
    "label": "stbir_set_user_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_set_user_data( STBIR_RESIZE * resize, void * user_data )"
  },
  {
    "label": "stbir_set_buffer_ptrs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_set_buffer_ptrs( STBIR_RESIZE * resize, const void * input_pixels, int input_stride_in_bytes, void * output_pixels, int output_stride_in_bytes )"
  },
  {
    "label": "stbir_set_pixel_layouts()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_pixel_layouts( STBIR_RESIZE * resize, stbir_pixel_layout input_pixel_layout, stbir_pixel_layout output_pixel_layout )"
  },
  {
    "label": "stbir_set_edgemodes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_edgemodes( STBIR_RESIZE * resize, stbir_edge horizontal_edge, stbir_edge vertical_edge )"
  },
  {
    "label": "stbir_set_filters()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_filters( STBIR_RESIZE * resize, stbir_filter horizontal_filter, stbir_filter vertical_filter )"
  },
  {
    "label": "stbir_set_filter_callbacks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_filter_callbacks( STBIR_RESIZE * resize, stbir__kernel_callback * horizontal_filter, stbir__support_callback * horizontal_support, stbir__kernel_callback * vertical_filter, stbir__support_callback * vertical_support )"
  },
  {
    "label": "stbir_set_pixel_subrect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_pixel_subrect( STBIR_RESIZE * resize, int subx, int suby, int subw, int subh )"
  },
  {
    "label": "stbir_set_input_subrect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_input_subrect( STBIR_RESIZE * resize, double s0, double t0, double s1, double t1 )"
  },
  {
    "label": "stbir_set_output_pixel_subrect()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_output_pixel_subrect( STBIR_RESIZE * resize, int subx, int suby, int subw, int subh )"
  },
  {
    "label": "stbir_set_non_pm_alpha_speed_over_quality()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_set_non_pm_alpha_speed_over_quality( STBIR_RESIZE * resize, int non_pma_alpha_speed_over_quality )"
  },
  {
    "label": "stbir_build_samplers()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_build_samplers( STBIR_RESIZE * resize )"
  },
  {
    "label": "stbir_free_samplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_free_samplers( STBIR_RESIZE * resize )"
  },
  {
    "label": "stbir_resize_extended()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_resize_extended( STBIR_RESIZE * resize )"
  },
  {
    "label": "stbir_build_samplers_with_splits()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_build_samplers_with_splits( STBIR_RESIZE * resize, int try_splits )"
  },
  {
    "label": "stbir_resize_extended_split()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir_resize_extended_split( STBIR_RESIZE * resize, int split_start, int split_count )"
  },
  {
    "label": "stbir_resize_build_profile_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_resize_build_profile_info( STBIR_PROFILE_INFO * out_info, STBIR_RESIZE const * resize )"
  },
  {
    "label": "stbir_resize_extended_profile_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_resize_extended_profile_info( STBIR_PROFILE_INFO * out_info, STBIR_RESIZE const * resize )"
  },
  {
    "label": "stbir_resize_split_profile_info()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir_resize_split_profile_info( STBIR_PROFILE_INFO * out_info, STBIR_RESIZE const * resize, int split_start, int split_num )"
  },
  {
    "label": "stbir__decode_pixels_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir__decode_pixels_func( float * decode, int width_times_channels, void const * input )"
  },
  {
    "label": "stbir__alpha_weight_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir__alpha_weight_func( float * decode_buffer, int width_times_channels )"
  },
  {
    "label": "stbir__horizontal_gather_channels_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir__horizontal_gather_channels_func( float * output_buffer, unsigned int output_sub_size, float const * decode_buffer,\n  stbir__contributors const * horizontal_contributors, float const * horizontal_coefficients, int coefficient_width )"
  },
  {
    "label": "stbir__alpha_unweight_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir__alpha_unweight_func(float * encode_buffer, int width_times_channels )"
  },
  {
    "label": "stbir__encode_pixels_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir__encode_pixels_func( void * output, int width_times_channels, float const * encode )"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "STBIR__SIMDI_CONST(stbir__s32_32768, 32768)"
  },
  {
    "label": "_mm_cvtss_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtss_f32(r)"
  },
  {
    "label": "_mm_cvtss_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtss_f32(r)"
  },
  {
    "label": "vget_lane_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vget_lane_f32(r, 0)"
  },
  {
    "label": "vget_lane_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "vget_lane_f32(r, 0)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(mask_nosign,      0x7fff)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(smallest_normal,  0x0400)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(infinity,         0x7c00)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(magic_denorm,     113 << 23)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(mask_sign,      0x80000000u)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(c_nanbit,        0x200)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(c_infty_as_fp16, 0x7c00)"
  },
  {
    "label": "STBIR__SIMDF_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDF_CONST(STBIR_max_uint8_as_float,           stbir__max_uint8_as_float)"
  },
  {
    "label": "STBIR__SIMDF_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDF_CONST(STBIR_max_uint16_as_float,          stbir__max_uint16_as_float)"
  },
  {
    "label": "STBIR__SIMDF_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDF_CONST(STBIR_max_uint8_as_float_inverted,  stbir__max_uint8_as_float_inverted)"
  },
  {
    "label": "STBIR__SIMDF_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDF_CONST(STBIR_max_uint16_as_float_inverted, stbir__max_uint16_as_float_inverted)"
  },
  {
    "label": "STBIR__SIMDF_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDF_CONST(STBIR_simd_point5,   0.5f)"
  },
  {
    "label": "STBIR__SIMDF_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDF_CONST(STBIR_ones,          1.0f)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(STBIR_almost_one,    0x3f7fffff)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(STBIR_mastissa_mask, 0xff)"
  },
  {
    "label": "STBIR__SIMDI_CONST()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "STBIR__SIMDI_CONST(STBIR_topscale,      0x02000000)"
  },
  {
    "label": "__rdtsc()",
    "kind": "Method",
    "detail": "Function (stbir_uint64)",
    "insertText": "__rdtsc()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "return(samp->scale_info.input_full_size + samp->filter_pixel_margin * 2)"
  },
  {
    "label": "stbir__edge_wrap_func()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbir__edge_wrap_func( int n, int max )"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (n_coeff)",
    "insertText": "loop(which depends on the widest count mod4)"
  },
  {
    "label": "loop()",
    "kind": "Method",
    "detail": "Function (n_coeff)",
    "insertText": "loop(which depends on the widest count mod4)"
  },
  {
    "label": "STBIR_PROFILE_BUILD_START()",
    "kind": "Method",
    "detail": "Function (jump_right_to_pivot:)",
    "insertText": "STBIR_PROFILE_BUILD_START( pivot )"
  },
  {
    "label": "STBIR_VERTICAL_GATHERFUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBIR_VERTICAL_GATHERFUNC( float * output, float const * coeffs, float const ** inputs, float const * input0_end )"
  },
  {
    "label": "STBIR_VERTICAL_SCATTERFUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBIR_VERTICAL_SCATTERFUNC( float ** outputs, float const * coeffs, float const * input, float const * input_end )"
  },
  {
    "label": "stbir__get_ring_buffer_entry()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "stbir__get_ring_buffer_entry( stbir_info, split_info, ring_buffer_index )"
  },
  {
    "label": "STBIR_PROFILE_START()",
    "kind": "Method",
    "detail": "Function (buffer)",
    "insertText": "STBIR_PROFILE_START( vertical )"
  },
  {
    "label": "stbir__resample_horizontal_gather()",
    "kind": "Method",
    "detail": "Function (buffer)",
    "insertText": "stbir__resample_horizontal_gather(stbir_info, encode_buffer, decode_buffer  STBIR_ONLY_PROFILE_SET_SPLIT_INFO )"
  },
  {
    "label": "STBIR_ASSERT()",
    "kind": "Method",
    "detail": "Function (broken)",
    "insertText": "STBIR_ASSERT( in_first_scanline >= split_info->ring_buffer_first_scanline )"
  },
  {
    "label": "stbir__handle_scanline_for_scatter_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbir__handle_scanline_for_scatter_func(stbir__info const * stbir_info, stbir__per_split_info* split_info)"
  },
  {
    "label": "stbir__calculate_in_pixel_range()",
    "kind": "Method",
    "detail": "Function (range)",
    "insertText": "stbir__calculate_in_pixel_range( &in_first_pixel, &in_last_pixel, 0, 0, inv_scale, out_shift, input_full_size, edge )"
  },
  {
    "label": "STBIR__FREE_AND_CLEAR()",
    "kind": "Method",
    "detail": "Function (STBIR__SEPARATE_ALLOCATIONS)",
    "insertText": "STBIR__FREE_AND_CLEAR( info->alloced_mem )"
  },
  {
    "label": "STBIR__FREE_AND_CLEAR()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "STBIR__FREE_AND_CLEAR( info->split_info[i].ring_buffers[j] )"
  },
  {
    "label": "STBIR__FREE_AND_CLEAR()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "STBIR__FREE_AND_CLEAR( info->split_info[i].decode_buffer )"
  },
  {
    "label": "STBIR__NEXT_PTR()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "STBIR__NEXT_PTR( info->split_info[i].ring_buffer, ring_buffer_size, float )"
  },
  {
    "label": "STBIR__NEXT_PTR()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "STBIR__NEXT_PTR( info->split_info[i].vertical_buffer, vertical_buffer_size, float )"
  },
  {
    "label": "STBIR__NEXT_PTR()",
    "kind": "Method",
    "detail": "Function (memory)",
    "insertText": "STBIR__NEXT_PTR( vertical->gather_prescatter_contributors, vertical->gather_prescatter_contributors_size, stbir__contributors )"
  },
  {
    "label": "stbir__get_extents()",
    "kind": "Method",
    "detail": "Function (extents)",
    "insertText": "stbir__get_extents( horizontal, &info->scanline_extents )"
  },
  {
    "label": "stbir__get_split_info()",
    "kind": "Method",
    "detail": "Function (ranges)",
    "insertText": "stbir__get_split_info( info->split_info, info->splits, info->vertical.scale_info.output_sub_size, info->vertical.filter_pixel_margin, info->vertical.scale_info.input_full_size )"
  },
  {
    "label": "stbir__vertical_scatter_loop()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbir__vertical_scatter_loop( info, split_info, split_count )"
  },
  {
    "label": "stbir__update_info_from_resize()",
    "kind": "Method",
    "detail": "Function (samplers)",
    "insertText": "stbir__update_info_from_resize( out_info, resize )"
  },
  {
    "label": "stbir__perform_build()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "stbir__perform_build( resize, splits )"
  },
  {
    "label": "stbir_build_samplers_with_splits()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "stbir_build_samplers_with_splits( resize, 1 )"
  },
  {
    "label": "STBIR_PROFILE_BUILD_CLEAR()",
    "kind": "Method",
    "detail": "Function (it)",
    "insertText": "STBIR_PROFILE_BUILD_CLEAR( resize->samplers )"
  },
  {
    "label": "stbir_resize_extended()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "stbir_resize_extended( resize )"
  },
  {
    "label": "stbir__perform_resize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "stbir__perform_resize( resize->samplers, split_start, split_count )"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (splits)",
    "insertText": "for( i = 0 ; i < STBIR__ARRAY_SIZE( descriptions )"
  },
  {
    "label": "stbir__simdf8_pack_to_16bytes()",
    "kind": "Method",
    "detail": "Function (STBIR_SIMD8)",
    "insertText": "stbir__simdf8_pack_to_16bytes( i, e0, e1 )"
  },
  {
    "label": "stbir__simdf_pack_to_8bytes()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbir__simdf_pack_to_8bytes( i, e0, e1 )"
  },
  {
    "label": "stbir__simdf8_pack_to_16bytes()",
    "kind": "Method",
    "detail": "Function (STBIR_SIMD8)",
    "insertText": "stbir__simdf8_pack_to_16bytes( i, e0, e1 )"
  },
  {
    "label": "stbir__simdf_pack_to_8bytes()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbir__simdf_pack_to_8bytes( i, e0, e1 )"
  },
  {
    "label": "stbir__float_to_half_SIMD()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbir__float_to_half_SIMD( output, encode )"
  },
  {
    "label": "stbir__simdfX_min()",
    "kind": "Method",
    "detail": "Function (STBIR_FLOAT_HIGH_CLAMP)",
    "insertText": "stbir__simdfX_min( e0, e0, high_clamp )"
  },
  {
    "label": "stbir__simdfX_max()",
    "kind": "Method",
    "detail": "Function (STBIR_FLOAT_LOW_CLAMP)",
    "insertText": "stbir__simdfX_max( e0, e0, low_clamp )"
  },
  {
    "label": "stbir__encode_simdfX_unflip()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "stbir__encode_simdfX_unflip( e0 )"
  },
  {
    "label": "stbir__simdf_min()",
    "kind": "Method",
    "detail": "Function (STBIR_FLOAT_HIGH_CLAMP)",
    "insertText": "stbir__simdf_min( e0, e0, high_clamp )"
  },
  {
    "label": "stbir__simdf_max()",
    "kind": "Method",
    "detail": "Function (STBIR_FLOAT_LOW_CLAMP)",
    "insertText": "stbir__simdf_max( e0, e0, low_clamp )"
  },
  {
    "label": "stbir__encode_simdf4_unflip()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "stbir__encode_simdf4_unflip( e0 )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (STB_IMAGE_RESIZE_VERTICAL_CONTINUE)",
    "insertText": "stbIF0( stbir__simdfX_load( o0, output0 )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbIF0( stbir__simdfX_mult( o0, r0, c0 )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (STB_IMAGE_RESIZE_VERTICAL_CONTINUE)",
    "insertText": "stbIF0( stbir__simdf_load( o0, output0 )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (STB_IMAGE_RESIZE_VERTICAL_CONTINUE)",
    "insertText": "stbIF0( output0[0] += ( r0 * c0s )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbIF0( output0[0]  = ( r0 * c0s )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (STB_IMAGE_RESIZE_VERTICAL_CONTINUE)",
    "insertText": "stbIF0( output0[0] += ( r * c0s )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbIF0( output0[0]  = ( r * c0s )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (STB_IMAGE_RESIZE_VERTICAL_CONTINUE)",
    "insertText": "stbIF0( stbir__simdfX_load( o0, output )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbIF0( stbir__simdfX_load( r0, input0 )"
  },
  {
    "label": "stbIF1()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "stbIF1( stbir__simdfX_load( r0, input1 )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (STB_IMAGE_RESIZE_VERTICAL_CONTINUE)",
    "insertText": "stbIF0( stbir__simdf_load( o0, output )"
  },
  {
    "label": "stbIF0()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "stbIF0( stbir__simdf_load( r0, input0 )"
  },
  {
    "label": "stbIF1()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "stbIF1( stbir__simdf_load( r0, input1 )"
  }
]