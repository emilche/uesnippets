[
  {
    "label": "must",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "must"
  },
  {
    "label": "member",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "member"
  },
  {
    "label": "destructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "destructor"
  },
  {
    "label": "AM_NOVTABLE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AM_NOVTABLE"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "because",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "because"
  },
  {
    "label": "make",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "make"
  },
  {
    "label": "CDrawImage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CDrawImage"
  },
  {
    "label": "tagDIBDATA",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagDIBDATA"
  },
  {
    "label": "inherits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "inherits"
  },
  {
    "label": "CImageSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CImageSample"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "CImageAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CImageAllocator"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "looks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "looks"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "CImagePalette",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CImagePalette"
  },
  {
    "label": "really",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "really"
  },
  {
    "label": "initialises",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "initialises"
  },
  {
    "label": "provides",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "provides"
  },
  {
    "label": "CImageDisplay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CImageDisplay"
  },
  {
    "label": "WndProc()",
    "kind": "Method",
    "detail": "Function (CALLBACK)",
    "insertText": "WndProc(HWND hwnd,      // Window handle\n                                    UINT uMsg,      // Message ID\n                                    WPARAM wParam,  // First parameter\n                                    LPARAM lParam)"
  },
  {
    "label": "OnPaletteChange()",
    "kind": "Method",
    "detail": "Function (LRESULT)",
    "insertText": "OnPaletteChange(HWND hwnd, UINT Message)"
  },
  {
    "label": "CBaseWindow()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CBaseWindow(BOOL bDoGetDC = TRUE, bool bPostToDestroy = false)"
  },
  {
    "label": "DoneWithWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DoneWithWindow()"
  },
  {
    "label": "PrepareWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "PrepareWindow()"
  },
  {
    "label": "InactivateWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "InactivateWindow()"
  },
  {
    "label": "ActivateWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "ActivateWindow()"
  },
  {
    "label": "OnSize()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "OnSize(LONG Width, LONG Height)"
  },
  {
    "label": "OnClose()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "OnClose()"
  },
  {
    "label": "GetDefaultRect()",
    "kind": "Method",
    "detail": "Function (RECT)",
    "insertText": "GetDefaultRect()"
  },
  {
    "label": "UninitialiseWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "UninitialiseWindow()"
  },
  {
    "label": "InitialiseWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "InitialiseWindow(HWND hwnd)"
  },
  {
    "label": "CompleteConnect()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CompleteConnect()"
  },
  {
    "label": "DoCreateWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DoCreateWindow()"
  },
  {
    "label": "PerformanceAlignWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "PerformanceAlignWindow()"
  },
  {
    "label": "DoShowWindow()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DoShowWindow(LONG ShowCmd)"
  },
  {
    "label": "PaintWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintWindow(BOOL bErase)"
  },
  {
    "label": "DoSetWindowForeground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoSetWindowForeground(BOOL bFocus)"
  },
  {
    "label": "SetPalette()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetPalette(HPALETTE hPalette)"
  },
  {
    "label": "SetPalette()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetPalette()"
  },
  {
    "label": "UnsetPalette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnsetPalette(void)"
  },
  {
    "label": "DoRealisePalette()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "DoRealisePalette(BOOL bForceBackground = FALSE)"
  },
  {
    "label": "LockPaletteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LockPaletteLock()"
  },
  {
    "label": "UnlockPaletteLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockPaletteLock()"
  },
  {
    "label": "WindowExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WindowExists()"
  },
  {
    "label": "GetWindowWidth()",
    "kind": "Method",
    "detail": "Function (LONG)",
    "insertText": "GetWindowWidth()"
  },
  {
    "label": "GetWindowHeight()",
    "kind": "Method",
    "detail": "Function (LONG)",
    "insertText": "GetWindowHeight()"
  },
  {
    "label": "GetWindowHWND()",
    "kind": "Method",
    "detail": "Function (HWND)",
    "insertText": "GetWindowHWND()"
  },
  {
    "label": "GetMemoryHDC()",
    "kind": "Method",
    "detail": "Function (HDC)",
    "insertText": "GetMemoryHDC()"
  },
  {
    "label": "GetWindowHDC()",
    "kind": "Method",
    "detail": "Function (HDC)",
    "insertText": "GetWindowHDC()"
  },
  {
    "label": "GetPalette()",
    "kind": "Method",
    "detail": "Function (HPALETTE)",
    "insertText": "GetPalette()"
  },
  {
    "label": "OnReceiveMessage()",
    "kind": "Method",
    "detail": "Function (LRESULT)",
    "insertText": "OnReceiveMessage(HWND hwnd,          // Window handle\n                                     UINT uMsg,          // Message ID\n                                     WPARAM wParam,      // First parameter\n                                     LPARAM lParam)"
  },
  {
    "label": "SlowRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlowRender(IMediaSample *pMediaSample)"
  },
  {
    "label": "FastRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FastRender(IMediaSample *pMediaSample)"
  },
  {
    "label": "DisplaySampleTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySampleTimes(IMediaSample *pSample)"
  },
  {
    "label": "UpdateColourTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateColourTable(HDC hdc,__in BITMAPINFOHEADER *pbmi)"
  },
  {
    "label": "SetStretchMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStretchMode()"
  },
  {
    "label": "CDrawImage()",
    "kind": "Method",
    "detail": "Function (drawing)",
    "insertText": "CDrawImage(__inout CBaseWindow *pBaseWindow)"
  },
  {
    "label": "DrawImage()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "DrawImage(IMediaSample *pMediaSample)"
  },
  {
    "label": "DrawVideoImageHere()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "DrawVideoImageHere(HDC hdc, IMediaSample *pMediaSample,\n                            __in LPRECT lprcSrc, __in LPRECT lprcDst)"
  },
  {
    "label": "SetDrawContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDrawContext()"
  },
  {
    "label": "SetTargetRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetRect(__in RECT *pTargetRect)"
  },
  {
    "label": "SetSourceRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceRect(__in RECT *pSourceRect)"
  },
  {
    "label": "GetTargetRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTargetRect(__out RECT *pTargetRect)"
  },
  {
    "label": "GetSourceRect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSourceRect(__out RECT *pSourceRect)"
  },
  {
    "label": "ScaleSourceRect()",
    "kind": "Method",
    "detail": "Function (RECT)",
    "insertText": "ScaleSourceRect(const RECT *pSource)"
  },
  {
    "label": "GetPaletteVersion()",
    "kind": "Method",
    "detail": "Function (LONG)",
    "insertText": "GetPaletteVersion()"
  },
  {
    "label": "ResetPaletteVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPaletteVersion()"
  },
  {
    "label": "IncrementPaletteVersion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementPaletteVersion()"
  },
  {
    "label": "NotifyAllocator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAllocator(BOOL bUsingImageAllocator)"
  },
  {
    "label": "NotifyMediaType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMediaType(__in CMediaType *pMediaType)"
  },
  {
    "label": "UsingImageAllocator()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "UsingImageAllocator()"
  },
  {
    "label": "SetDIBData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDIBData(__in DIBDATA *pDibData)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Alloc()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free()"
  },
  {
    "label": "CreateDIB()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CreateDIB(LONG InSize,DIBDATA &DibData)"
  },
  {
    "label": "CheckSizes()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "CheckSizes(__in ALLOCATOR_PROPERTIES *pRequest)"
  },
  {
    "label": "CImageAllocator()",
    "kind": "Method",
    "detail": "Function (destructor)",
    "insertText": "CImageAllocator(__inout CBaseFilter *pFilter,__in_opt LPCTSTR pName,__inout HRESULT *phr)"
  },
  {
    "label": "NotifyMediaType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyMediaType(__in CMediaType *pMediaType)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (STDMETHODIMP)",
    "insertText": "SetProperties(\n        __in ALLOCATOR_PROPERTIES *pRequest,\n        __out ALLOCATOR_PROPERTIES *pActual)"
  },
  {
    "label": "CImagePalette()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "CImagePalette(__inout CBaseFilter *pBaseFilter,\n                  __inout CBaseWindow *pBaseWindow,\n                  __inout CDrawImage *pDrawImage)"
  },
  {
    "label": "MakePalette()",
    "kind": "Method",
    "detail": "Function (HPALETTE)",
    "insertText": "MakePalette(const VIDEOINFOHEADER *pVideoInfo, __in LPSTR szDevice)"
  },
  {
    "label": "RemovePalette()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RemovePalette()"
  },
  {
    "label": "CopyPalette()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CopyPalette(const CMediaType *pSrc,__out CMediaType *pDest)"
  },
  {
    "label": "ShouldUpdate()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "ShouldUpdate(const VIDEOINFOHEADER *pNewInfo,const VIDEOINFOHEADER *pOldInfo)"
  },
  {
    "label": "PreparePalette()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "PreparePalette(const CMediaType *pmtNew,const CMediaType *pmtOld,__in LPSTR szDevice)"
  },
  {
    "label": "CountSetBits()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "CountSetBits(const DWORD Field)"
  },
  {
    "label": "CountPrefixBits()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "CountPrefixBits(const DWORD Field)"
  },
  {
    "label": "CheckBitFields()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "CheckBitFields(const VIDEOINFO *pInput)"
  },
  {
    "label": "CImageDisplay()",
    "kind": "Method",
    "detail": "Function (destructor)",
    "insertText": "CImageDisplay()"
  },
  {
    "label": "RefreshDisplayType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "RefreshDisplayType(__in_opt LPSTR szDeviceName)"
  },
  {
    "label": "CheckHeaderValidity()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "CheckHeaderValidity(const VIDEOINFO *pInput)"
  },
  {
    "label": "CheckPaletteHeader()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "CheckPaletteHeader(const VIDEOINFO *pInput)"
  },
  {
    "label": "IsPalettised()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "IsPalettised()"
  },
  {
    "label": "GetDisplayDepth()",
    "kind": "Method",
    "detail": "Function (WORD)",
    "insertText": "GetDisplayDepth()"
  },
  {
    "label": "CheckMediaType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckMediaType(const CMediaType *pmtIn)"
  },
  {
    "label": "CheckVideoType()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CheckVideoType(const VIDEOINFO *pInput)"
  },
  {
    "label": "UpdateFormat()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "UpdateFormat(__inout VIDEOINFO *pVideoInfo)"
  },
  {
    "label": "GetColourMask()",
    "kind": "Method",
    "detail": "Function (BOOL)",
    "insertText": "GetColourMask(__out DWORD *pMaskRed,\n                       __out DWORD *pMaskGreen,\n                       __out DWORD *pMaskBlue)"
  },
  {
    "label": "ConvertVideoInfoToVideoInfo2()",
    "kind": "Method",
    "detail": "Function (STDAPI)",
    "insertText": "ConvertVideoInfoToVideoInfo2(__inout AM_MEDIA_TYPE *pmt)"
  },
  {
    "label": "CheckVideoInfoType()",
    "kind": "Method",
    "detail": "Function (STDAPI)",
    "insertText": "CheckVideoInfoType(const AM_MEDIA_TYPE *pmt)"
  },
  {
    "label": "CheckVideoInfo2Type()",
    "kind": "Method",
    "detail": "Function (STDAPI)",
    "insertText": "CheckVideoInfo2Type(const AM_MEDIA_TYPE *pmt)"
  }
]