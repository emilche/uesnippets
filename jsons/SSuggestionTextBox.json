[
  {
    "label": "SMenuAnchor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuAnchor"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "TAttribute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAttribute"
  },
  {
    "label": "SSuggestionTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSuggestionTextBox"
  },
  {
    "label": "IErrorReportingWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IErrorReportingWidget"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Widgets / Input / SEditableTextBox . h \" # include \" Widgets / Notifications / SErrorText . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" class SMenuAnchor ; class SVerticalBox ; template<ObjectType> class TAttribute ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnShowingHistory, OUT TArray<FString>&) DECLARE_DELEGATE_TwoParams(FOnShowingSuggestions, const FString&, OUT TArray<FString>&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSuggestionTextBox) : _BackgroundColor(FLinearColor::White) , _BackgroundImage(FCoreStyle::Get().GetBrush(\"SuggestionTextBox.Background\")) , _ClearKeyboardFocusOnCommit(true) , _ErrorReporting() , _Font( FCoreStyle::Get().GetFontStyle( TEXT( \"NormalFont\" ) ) ) , _ForegroundColor( FCoreStyle::Get().GetSlateColor( \"InvertedForeground\" ) ) , _HintText() , _IsCaretMovedWhenGainFocus (true) , _MinDesiredWidth(0.0f) , _RevertTextOnEscape(false) , _SelectAllTextOnCommit(false) , _SelectAllTextWhenFocused(false) , _TextStyle( &FCoreStyle::Get().GetWidgetStyle<FEditableTextBoxStyle>(\"NormalEditableTextBox\") ) , _SuggestionTextStyle( &FCoreStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SuggestionTextBox.Text\") ) , _SuggestionListMaxHeight(250.0) , _Text()"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FSlateColor, BackgroundColor) SLATE_ARGUMENT(const FSlateBrush*, BackgroundImage) SLATE_ATTRIBUTE(bool, ClearKeyboardFocusOnCommit) SLATE_ARGUMENT(TSharedPtr<class IErrorReportingWidget>, ErrorReporting) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE(FSlateColor, ForegroundColor) SLATE_ATTRIBUTE(FText, HintText) SLATE_ATTRIBUTE(bool, IsCaretMovedWhenGainFocus) SLATE_ATTRIBUTE(float, MinDesiredWidth) SLATE_EVENT(FOnShowingHistory, OnShowingHistory) SLATE_EVENT(FOnShowingSuggestions, OnShowingSuggestions) SLATE_EVENT(FOnTextChanged, OnTextChanged) SLATE_EVENT(FOnTextCommitted, OnTextCommitted) SLATE_ATTRIBUTE(bool, RevertTextOnEscape) SLATE_ATTRIBUTE(bool, SelectAllTextOnCommit) SLATE_ATTRIBUTE(bool, SelectAllTextWhenFocused) SLATE_STYLE_ARGUMENT(FEditableTextBoxStyle, TextStyle) SLATE_STYLE_ARGUMENT(FTextBlockStyle, SuggestionTextStyle) SLATE_ATTRIBUTE(float, SuggestionListMaxHeight) SLATE_ATTRIBUTE(FText, Text) SLATE_END_ARGS() public: SLATE_API SSuggestionTextBox()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetText()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetError(const FString& InError)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (TextBox ->)",
    "insertText": "SetError(InError)"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetText(const TAttribute< FText >& InNewText)"
  },
  {
    "label": "ClearSuggestions()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ClearSuggestions()"
  },
  {
    "label": "FocusTextBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusTextBox()"
  },
  {
    "label": "GetSelectedSuggestionString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSelectedSuggestionString()"
  },
  {
    "label": "MarkActiveSuggestion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkActiveSuggestion()"
  },
  {
    "label": "SetSuggestions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSuggestions(TArray<FString>& SuggestionStrings, bool InHistoryMode)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "HandleSuggestionListViewGenerateRow()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "HandleSuggestionListViewGenerateRow(TSharedPtr<FString> Message, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "HandleSuggestionListViewSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSuggestionListViewSelectionChanged(TSharedPtr<FString> NewValue, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "HandleSuggestionListWidgetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleSuggestionListWidgetHighlightText()"
  },
  {
    "label": "HandleTextBoxTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextBoxTextChanged(const FText& InText)"
  },
  {
    "label": "HandleTextBoxTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTextBoxTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnGlobalFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGlobalFocusChanging(const FFocusEvent& FocusEvent, const FWeakWidgetPath& OldFocusedWidgetPath, const TSharedPtr<SWidget>& OldFocusedWidget, const FWidgetPath& NewFocusedWidgetPath, const TSharedPtr<SWidget>& NewFocusedWidget)"
  }
]