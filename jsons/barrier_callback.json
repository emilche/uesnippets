[
  {
    "label": "BarrierCallbackInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BarrierCallbackInfo"
  },
  {
    "label": "CallbackType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackType"
  },
  {
    "label": "BarrierCallbackInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_BARRIER_CALLBACK_H_ # define BASE_BARRIER_CALLBACK_H_ # include<memory> # include<type_traits> # include<utility> # include<vector> # include \" base / bind . h \" # include \" base / callback . h \" # include \" base / callback_helpers . h \" # include \" base / check . h \" # include \" base / check_op . h \" # include \" base / synchronization / lock . h \" # include \" base / template_util . h \" # include \" base / thread_annotations . h \" namespace base { namespace internal { template<T,DoneArg> class BarrierCallbackInfo { public :)",
    "insertText": "BarrierCallbackInfo(size_t num_callbacks, OnceCallback<void(DoneArg)> done_callback) : num_callbacks_left_(num_callbacks), done_callback_(std::move(done_callback))"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (results_ .)",
    "insertText": "reserve(num_callbacks)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Run(T t) LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (base::ReleasableAutoLock)",
    "insertText": "lock(&mutex_)"
  },
  {
    "label": "DCHECK_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_NE(num_callbacks_left_, 0U)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (results_ .)",
    "insertText": "push_back(std::move(t))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - num_callbacks_left_ ;)",
    "insertText": "if(num_callbacks_left_ == 0)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (std::vector<base::remove_cvref_t<T>> results =)",
    "insertText": "move(results_)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (lock .)",
    "insertText": "Release()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(done_callback_).Run(std::move(results))"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} } private : Lock mutex_ ; size_t num_callbacks_left_)",
    "insertText": "GUARDED_BY(mutex_)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (OnceCallback<)",
    "insertText": "void(DoneArg)"
  },
  {
    "label": "ShouldNeverRun()",
    "kind": "Method",
    "detail": "Function (} ; template<T> void)",
    "insertText": "ShouldNeverRun(T t)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} } template<T,RawArg = base::remove_cvref_t<T>,DoneArg = std::vector<RawArg>,template<> class CallbackType,std::enable_if<std::is_same<std::vector<RawArg>,base::remove_cvref_t<DoneArg>>::value>::type* = nullptr,= base::EnableIfIsBaseCallback<CallbackType>> RepeatingCallback<)",
    "insertText": "void(T)> BarrierCallback( size_t num_callbacks, CallbackType<void(DoneArg)> done_callback)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(done_callback).Run({})"
  },
  {
    "label": "BindRepeating()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "BindRepeating(&internal::BarrierCallbackInfo<T, DoneArg>::Run, std::make_unique<internal::BarrierCallbackInfo<T, DoneArg>>( num_callbacks, std::move(done_callback)))"
  }
]