[
  {
    "label": "__Operation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__Operation"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FUNCTIONAL_BINDER1ST_H # define _LIBCPP___FUNCTIONAL_BINDER1ST_H # include<__config> # include<__functional / unary_function . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER <= 14 || defined(_LIBCPP_ENABLE_CXX17_REMOVED_BINDERS)"
  },
  {
    "label": "binder1st()",
    "kind": "Method",
    "detail": "Function (protected : __Operation op ; __Operation::first_argument_type value ; public : _LIBCPP_INLINE_VISIBILITY)",
    "insertText": "binder1st(const __Operation& __x, const typename __Operation::first_argument_type __y) : op(__x), value(__y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY __Operation::result_type)",
    "insertText": "operator() (typename __Operation::second_argument_type& __x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_INLINE_VISIBILITY __Operation::result_type)",
    "insertText": "operator() (const typename __Operation::second_argument_type& __x)"
  },
  {
    "label": "bind1st()",
    "kind": "Method",
    "detail": "Function (} } ; template<class __Operation,class _Tp> _LIBCPP_DEPRECATED_IN_CXX11 _LIBCPP_INLINE_VISIBILITY binder1st<__Operation>)",
    "insertText": "bind1st(const __Operation& __op, const _Tp& __x)"
  }
]