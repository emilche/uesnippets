[
  {
    "label": "FLinearEase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinearEase"
  },
  {
    "label": "FLinearEase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" class FLinearEase { public :)",
    "insertText": "FLinearEase() : StartValue(0.0f) , CurrentValue(0.0f) , DeltaValue(0.0f) , SampleRate(44100.0f) , DurationTicks(0) , DefaultDurationTicks(0) , CurrentTick(0)"
  },
  {
    "label": "FLinearEase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FLinearEase()"
  },
  {
    "label": "IsDone()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDone()"
  },
  {
    "label": "SetValueRange()",
    "kind": "Method",
    "detail": "Function (SampleRate = InSampleRate ; } void)",
    "insertText": "SetValueRange(const float Start, const float End, const float InTimeSec)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (StartValue = Start ; CurrentValue = Start ;)",
    "insertText": "SetValue(End, InTimeSec)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetValue()"
  },
  {
    "label": "SetValueInterrupt()",
    "kind": "Method",
    "detail": "Function (+ + CurrentTick ; return CurrentValue ; } void)",
    "insertText": "SetValueInterrupt(const float InValue)"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (CurrentValue = InValue ; } else { DurationTicks = DurationTicks - CurrentTick ; CurrentTick = 0 ; DeltaValue = InValue - CurrentValue ; StartValue = CurrentValue ; } } void)",
    "insertText": "SetValue(const float InValue, float InTimeSec = 0.0f)"
  },
  {
    "label": "DurationTicks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DurationTicks(int32)(SampleRate * InTimeSec)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentTick = 0 ;)",
    "insertText": "if(DurationTicks == 0)"
  }
]