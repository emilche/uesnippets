[
  {
    "label": "TMarchingPixelInfill",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMarchingPixelInfill"
  },
  {
    "label": "ComputeInfill()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IntVectorTypes . h \" # include \" Templates / Tuple . h \" # include \" Util / IndexUtil . h \" # include \" VectorTypes . h \" # include \" Image / ImageDimensions . h \" # include \" Image / ImageBuilder . h \" # include \" Util / IndexPriorityQueue . h \" namespace UE { namespace Geometry { template<PixelType> class TMarchingPixelInfill { public : TArray<int32> InfillSequence ; void)",
    "insertText": "ComputeInfill(TImageBuilder<PixelType>& Image, const TArray<FVector2i>& MissingPixels, PixelType MissingValue, TFunctionRef<PixelType(PixelType SumOfNbrValues, int NbrCount)> NormalizeFunc)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (InfillSequence .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InfillSequence .)",
    "insertText": "Add(0)"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (Image .)",
    "insertText": "SetPixel(MissingPixels[k], MissingValue)"
  },
  {
    "label": "ActiveSetQueue()",
    "kind": "Method",
    "detail": "Function (} FIndexPriorityQueue)",
    "insertText": "ActiveSetQueue(MissingPixels.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<FVector2i,int32> PixelToIndexMap ;)",
    "insertText": "for(int32 k = 0; k < MissingPixels.Num(); ++k)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Count = 0 ; FVector2i CenterCoords = MissingPixels [ k ] ;)",
    "insertText": "for(int32 j = 0; j < 8; ++j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector2i NbrCoords = CenterCoords + IndexUtil::GridOffsets8 [ j ] ;)",
    "insertText": "if(Image.ContainsPixel(NbrCoords) && Image.GetPixel(NbrCoords) != MissingValue)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Count + + ; } } ActiveSetQueue .)",
    "insertText": "Insert(k, float(8 - Count))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PixelToIndexMap .)",
    "insertText": "Add(CenterCoords, k)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(ActiveSetQueue.GetCount() > 0)"
  },
  {
    "label": "Dequeue()",
    "kind": "Method",
    "detail": "Function (int32 Index = ActiveSetQueue .)",
    "insertText": "Dequeue()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (FVector2i CenterCoords = MissingPixels [ Index ] ; int32 CountIdx = InfillSequence .)",
    "insertText": "Num()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InfillSequence .)",
    "insertText": "Add(1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InfillSequence .)",
    "insertText": "Add(CenterCoords.X)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InfillSequence .)",
    "insertText": "Add(CenterCoords.Y)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (InfillSequence [ 0 ] + + ; PixelType ValidNbrAvg =)",
    "insertText": "Zero()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector2i NbrCoords = CenterCoords + IndexUtil::GridOffsets8 [ j ] ;)",
    "insertText": "if(Image.ContainsPixel(NbrCoords))"
  },
  {
    "label": "GetPixel()",
    "kind": "Method",
    "detail": "Function (PixelType PixelColor = Image .)",
    "insertText": "GetPixel(NbrCoords)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ValidNbrAvg + = PixelColor ; + + ValidCount ; InfillSequence .)",
    "insertText": "Add(NbrCoords.X)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InfillSequence .)",
    "insertText": "Add(NbrCoords.Y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InfillSequence [ CountIdx ] + + ; } } })",
    "insertText": "if(ValidCount > 0)"
  },
  {
    "label": "NormalizeFunc()",
    "kind": "Method",
    "detail": "Function (PixelType InfillValue =)",
    "insertText": "NormalizeFunc(ValidNbrAvg, ValidCount)"
  },
  {
    "label": "SetPixel()",
    "kind": "Method",
    "detail": "Function (Image .)",
    "insertText": "SetPixel(CenterCoords, InfillValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FVector2i NbrCoords = CenterCoords + IndexUtil::GridOffsets8 [ j ] ;)",
    "insertText": "if(Image.ContainsPixel(NbrCoords) && Image.GetPixel(NbrCoords) == MissingValue)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* FoundIndex = PixelToIndexMap .)",
    "insertText": "Find(NbrCoords)"
  },
  {
    "label": "GetPriority()",
    "kind": "Method",
    "detail": "Function (float CurPriority = ActiveSetQueue .)",
    "insertText": "GetPriority(*FoundIndex)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (ActiveSetQueue .)",
    "insertText": "Update(*FoundIndex, CurPriority - 1.0f)"
  },
  {
    "label": "ApplyInfill()",
    "kind": "Method",
    "detail": "Function (} } } } } } template<OtherPixelType> void)",
    "insertText": "ApplyInfill(TImageBuilder<OtherPixelType>& Image, TFunctionRef<OtherPixelType(OtherPixelType SumOfNbrValues, int NbrCount)> NormalizeFunc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 InfillPixels = InfillSequence [ 0 ] ; int32 i = 1 ;)",
    "insertText": "for(int32 pi = 0; pi < InfillPixels; ++pi)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 PixelCount = InfillSequence [ i + + ] ; FVector2i CenterCoords ; CenterCoords . X = InfillSequence [ i + + ] ; CenterCoords . Y = InfillSequence [ i + + ] ;)",
    "insertText": "if(PixelCount > 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 NbrCount = 0 ;)",
    "insertText": "for(int32 j = 1; j < PixelCount; ++j)"
  },
  {
    "label": "NormalizeFunc()",
    "kind": "Method",
    "detail": "Function (NbrCount + + ; } OtherPixelType InfillValue =)",
    "insertText": "NormalizeFunc(NbrSum, NbrCount)"
  },
  {
    "label": "ApplyInfill()",
    "kind": "Method",
    "detail": "Function (} } } ; void)",
    "insertText": "ApplyInfill(TImageBuilder<PixelType>& Image, TFunctionRef<PixelType(PixelType SumOfNbrValues, int NbrCount)> NormalizeFunc)"
  },
  {
    "label": "PixelType()",
    "kind": "Method",
    "detail": "Function (ApplyInfill<)",
    "insertText": "PixelType(Image, NormalizeFunc)"
  }
]