[
  {
    "label": "IRefCountedObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRefCountedObject"
  },
  {
    "label": "FRefCountBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefCountBase"
  },
  {
    "label": "FRefCountedObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRefCountedObject"
  },
  {
    "label": "FThreadSafeRefCountedObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThreadSafeRefCountedObject"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TRefCountingMixin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRefCountingMixin"
  },
  {
    "label": "TRefCountPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRefCountPtr"
  },
  {
    "label": "IRefCountedObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" AutoRTFM / AutoRTFM . h \" # include \" HAL / PlatformAtomics . h \" # include \" HAL / PreprocessorHelpers . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / Build . h \" # include \" Serialization / Archive . h \" # include \" Serialization / MemoryLayout . h \" # include \" Templates / TypeHash . h \" # include \" Templates / Requires . h \" # include<atomic> # include<type_traits> class IRefCountedObject { public : ~)",
    "insertText": "IRefCountedObject()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Release()"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "FRefCountBase()",
    "kind": "Method",
    "detail": "Function (} ; class FRefCountBase { public :)",
    "insertText": "FRefCountBase()"
  },
  {
    "label": "FRefCountBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRefCountBase(const FRefCountBase& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRefCountBase&)",
    "insertText": "operator(const FRefCountBase& Rhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if DO_GUARD_SLOW)",
    "insertText": "if(NumRefs == 0)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} # endif const int32 Refs =)",
    "insertText": "InterlockedDecrement(&NumRefs)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (delete this ; } return)",
    "insertText": "uint32(Refs)"
  },
  {
    "label": "CheckRefCount()",
    "kind": "Method",
    "detail": "Function (} private : int32 NumRefs = 0 ; void)",
    "insertText": "CheckRefCount()"
  },
  {
    "label": "FRefCountedObject()",
    "kind": "Method",
    "detail": "Function (} ; class FRefCountedObject { public :)",
    "insertText": "FRefCountedObject(): NumRefs(0)"
  },
  {
    "label": "FRefCountedObject()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRefCountedObject()"
  },
  {
    "label": "FRefCountedObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRefCountedObject(const FRefCountedObject& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRefCountedObject&)",
    "insertText": "operator(const FRefCountedObject& Rhs)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Refs =)",
    "insertText": "uint32(--NumRefs)"
  },
  {
    "label": "FThreadSafeRefCountedObject()",
    "kind": "Method",
    "detail": "Function (} private : int32 NumRefs ; } ; class FThreadSafeRefCountedObject { public :)",
    "insertText": "FThreadSafeRefCountedObject() : NumRefs(0)"
  },
  {
    "label": "FThreadSafeRefCountedObject()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FThreadSafeRefCountedObject()"
  },
  {
    "label": "FThreadSafeRefCountedObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FThreadSafeRefCountedObject(const FThreadSafeRefCountedObject& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FThreadSafeRefCountedObject&)",
    "insertText": "operator(const FThreadSafeRefCountedObject& Rhs)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Refs =)",
    "insertText": "uint32(NumRefs.Decrement())"
  },
  {
    "label": "TRefCountingMixin()",
    "kind": "Method",
    "detail": "Function (} private : FThreadSafeCounter NumRefs ; } ; enum class ERefCountingMode : uint8 { NotThreadSafe = 0,ThreadSafe = 1 } ; template<T,ERefCountingMode Mode = ERefCountingMode::ThreadSafe> class TRefCountingMixin { using RefCountType = std::conditional_t<Mode = = ERefCountingMode::ThreadSafe,std::atomic<uint32>,uint32> ; public :)",
    "insertText": "TRefCountingMixin()"
  },
  {
    "label": "TRefCountingMixin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRefCountingMixin(const TRefCountingMixin&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TRefCountingMixin&)",
    "insertText": "operator(const TRefCountingMixin&)"
  },
  {
    "label": "OnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommit([this] { #if defined(_MSC_VER) && (defined(_M_X64) || defined(_M_IX86)) ++RefCount; #else RefCount.fetch_add(1, std::memory_order_relaxed); #endif })"
  },
  {
    "label": "OnCommit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommit([this] { uint32 OldCount = RefCount.fetch_sub(1, std::memory_order_acq_rel); checkSlow(OldCount > 0); if (OldCount == 1) { T::StaticDestroyObject(static_cast<const T*>(this)); } })"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkSlow(RefCount > 0)"
  },
  {
    "label": "StaticDestroyObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticDestroyObject(static_cast<const T*>(this))"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint32 Count = 0 ; UE_AUTORTFM_OPEN { Count = RefCount .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "StaticDestroyObject()",
    "kind": "Method",
    "detail": "Function (} ; return Count ; } else { return RefCount ; } } void)",
    "insertText": "StaticDestroyObject(const T* Obj)"
  },
  {
    "label": "TRefCountPtr()",
    "kind": "Method",
    "detail": "Function (delete Obj ; } private : RefCountType RefCount { 0 } ; } ; template<ReferencedType> class TRefCountPtr { typedef ReferencedType* ReferenceType ; public :)",
    "insertText": "TRefCountPtr(): Reference(nullptr)"
  },
  {
    "label": "TRefCountPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TRefCountPtr(ReferencedType* InReference,bool bAddRef = true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Reference = InReference ;)",
    "insertText": "if(Reference && bAddRef)"
  },
  {
    "label": "TRefCountPtr()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TRefCountPtr(const TRefCountPtr& Copy)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Reference = Copy . Reference ;)",
    "insertText": "if(Reference)"
  },
  {
    "label": "TRefCountPtr()",
    "kind": "Method",
    "detail": "Function (} } template<CopyReferencedType>)",
    "insertText": "TRefCountPtr(const TRefCountPtr<CopyReferencedType>& Copy)"
  },
  {
    "label": "ReferencedType()",
    "kind": "Method",
    "detail": "Function (Reference = static_cast<)",
    "insertText": "ReferencedType(Copy.GetReference())"
  },
  {
    "label": "TRefCountPtr()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TRefCountPtr(TRefCountPtr&& Move)"
  },
  {
    "label": "TRefCountPtr()",
    "kind": "Method",
    "detail": "Function (Reference = Move . Reference ; Move . Reference = nullptr ; } template<MoveReferencedType>)",
    "insertText": "TRefCountPtr(TRefCountPtr<MoveReferencedType>&& Move)"
  },
  {
    "label": "ReferencedType()",
    "kind": "Method",
    "detail": "Function (Reference = static_cast<)",
    "insertText": "ReferencedType(Move.GetReference())"
  },
  {
    "label": "TRefCountPtr()",
    "kind": "Method",
    "detail": "Function (Move . Reference = nullptr ; } ~)",
    "insertText": "TRefCountPtr()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } TRefCountPtr&)",
    "insertText": "operator(ReferencedType* InReference)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(OldReference)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } TRefCountPtr&)",
    "insertText": "operator(const TRefCountPtr& InPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr&)",
    "insertText": "operator(TRefCountPtr&& InPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } return* this ; } template<MoveReferencedType> TRefCountPtr&)",
    "insertText": "operator(TRefCountPtr<MoveReferencedType>&& InPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ReferencedType*)",
    "insertText": "operator()"
  },
  {
    "label": "GetReference()",
    "kind": "Method",
    "detail": "Function (* this = nullptr ; return& Reference ; } ReferencedType*)",
    "insertText": "GetReference()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} return Result ; } void)",
    "insertText": "Swap(TRefCountPtr& InPtr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (ReferencedType* OldReference = Reference ; Reference = InPtr . Reference ; InPtr . Reference = OldReference ; } void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ReferenceType PtrReference = Reference ; Ar<<PtrReference ;)",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (* this = PtrReference ; } } private : ReferencedType* Reference ; template<OtherType> class TRefCountPtr ; public : bool)",
    "insertText": "operator(const TRefCountPtr& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(ReferencedType* B)"
  },
  {
    "label": "ALIAS_TEMPLATE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "ALIAS_TEMPLATE_TYPE_LAYOUT(template<typename T>, TRefCountPtr<T>, void*)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# if ! PLATFORM_COMPILER_HAS_GENERATED_COMPARISON_OPERATORS template<ReferencedType> bool)",
    "insertText": "operator(ReferencedType* A, const TRefCountPtr<ReferencedType>& B)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} # endif template<ReferencedType> uint32)",
    "insertText": "GetTypeHash(const TRefCountPtr<ReferencedType>& InPtr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<ReferencedType> FArchive&)",
    "insertText": "operator(FArchive& Ar,TRefCountPtr<ReferencedType>& Ptr)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (Ptr .)",
    "insertText": "Serialize(Ar)"
  }
]