[
  {
    "label": "FNullColorVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullColorVertexBuffer"
  },
  {
    "label": "FNullVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullVertexBuffer"
  },
  {
    "label": "FScreenSpaceVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScreenSpaceVertexBuffer"
  },
  {
    "label": "FTileVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileVertexDeclaration"
  },
  {
    "label": "FCubeIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCubeIndexBuffer"
  },
  {
    "label": "FTwoTrianglesIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTwoTrianglesIndexBuffer"
  },
  {
    "label": "TDynamicBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicBuffer"
  },
  {
    "label": "FGlobalDynamicVertexBufferAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalDynamicVertexBufferAllocation"
  },
  {
    "label": "FGlobalDynamicVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicVertexBuffer"
  },
  {
    "label": "FGlobalDynamicIndexBufferAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalDynamicIndexBufferAllocation"
  },
  {
    "label": "FGlobalDynamicIndexBufferAllocationEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlobalDynamicIndexBufferAllocationEx"
  },
  {
    "label": "FGlobalDynamicIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalDynamicIndexBuffer"
  },
  {
    "label": "FNullColorVertexBuffer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderResource . h \" FTexture* GWhiteTexture ; FTextureWithSRV* GWhiteTextureWithSRV ; FTexture* GBlackTexture ; FTextureWithSRV* GBlackTextureWithSRV ; FTexture* GTransparentBlackTexture ; FTextureWithSRV* GTransparentBlackTextureWithSRV ; FVertexBufferWithSRV* GEmptyVertexBufferWithUAV ; FVertexBufferWithSRV* GEmptyStructuredBufferWithUAV ; FVertexBufferWithSRV* GBlackFloat4StructuredBufferWithSRV ; FVertexBufferWithSRV* GBlackFloat4VertexBufferWithSRV ; FVertexBufferWithSRV* GWhiteVertexBufferWithSRV ; FVertexBufferWithSRV* GBlackVertexBufferWithSRV ; FBufferWithRDG* GWhiteVertexBufferWithRDG ; FTexture* GBlackArrayTexture ; FTexture* GBlackVolumeTexture ; FTexture* GBlackAlpha1VolumeTexture ; FTexture* GBlackUintTexture ; FTexture* GBlackUintVolumeTexture ; FTexture* GWhiteTextureCube ; FTexture* GBlackTextureCube ; FTexture* GBlackTextureDepthCube ; FTexture* GBlackCubeArrayTexture ; FTexture* GMipColorTexture ; int32 GMipColorTextureMipLevels ; const uint32 GDiffuseConvolveMipLevel ; class FNullColorVertexBuffer : public FVertexBuffer { public :)",
    "insertText": "FNullColorVertexBuffer()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "FNullVertexBuffer()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef VertexBufferSRV ; } ; TGlobalResource<FNullColorVertexBuffer,FRenderResource::EInitPhase::Pre> GNullColorVertexBuffer ; class FNullVertexBuffer : public FVertexBuffer { public :)",
    "insertText": "FNullVertexBuffer()"
  },
  {
    "label": "FTileVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FScreenSpaceVertexBuffer,FRenderResource::EInitPhase::Pre> GScreenSpaceVertexBuffer ; class FTileVertexDeclaration : public FRenderResource { public :)",
    "insertText": "FTileVertexDeclaration()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FTwoTrianglesIndexBuffer,FRenderResource::EInitPhase::Pre> GTwoTrianglesIndexBuffer ; template<BufferType> class TDynamicBuffer ; using FDynamicVertexBuffer = TDynamicBuffer<FVertexBuffer> ; using FDynamicIndexBuffer = TDynamicBuffer<FIndexBuffer> ; struct FGlobalDynamicVertexBufferAllocation { uint8* Buffer = nullptr ; FVertexBuffer* VertexBuffer = nullptr ; uint32 VertexOffset = 0 ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FGlobalDynamicVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGlobalDynamicVertexBuffer(FRHICommandListBase& InRHICmdList) : RHICmdList(&InRHICmdList)"
  },
  {
    "label": "FGlobalDynamicVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGlobalDynamicVertexBuffer()"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Commit()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(FRHICommandListBase& InRHICmdList)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (RHICmdList =& InRHICmdList ; } FAllocation)",
    "insertText": "Allocate(uint32 SizeInBytes)"
  },
  {
    "label": "IsRenderAlarmLoggingEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRenderAlarmLoggingEnabled()"
  },
  {
    "label": "FGlobalDynamicIndexBuffer()",
    "kind": "Method",
    "detail": "Function (} uint32 NumIndices = 0 ; uint32 IndexStride = 0 ; uint32 MaxUsedIndex = 0 ; } ; class FGlobalDynamicIndexBuffer { public : using FAllocation = FGlobalDynamicIndexBufferAllocation ; using FAllocationEx = FGlobalDynamicIndexBufferAllocationEx ;)",
    "insertText": "FGlobalDynamicIndexBuffer()"
  },
  {
    "label": "FGlobalDynamicIndexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGlobalDynamicIndexBuffer(FRHICommandListBase& InRHICmdList) : RHICmdList(&InRHICmdList)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (RHICmdList =& InRHICmdList ; } FAllocation)",
    "insertText": "Allocate(uint32 NumIndices, uint32 IndexStride)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (template<IndexType> FAllocationEx)",
    "insertText": "Allocate(uint32 NumIndices)"
  },
  {
    "label": "GarbageCollect()",
    "kind": "Method",
    "detail": "Function (private : FRHICommandListBase* RHICmdList = nullptr ; TArray<FDynamicIndexBuffer*> IndexBuffers16 ; TArray<FDynamicIndexBuffer*> IndexBuffers32 ; } ; namespace GlobalDynamicBuffer { void)",
    "insertText": "GarbageCollect()"
  }
]