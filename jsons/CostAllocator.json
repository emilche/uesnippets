[
  {
    "label": "ValuePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValuePool"
  },
  {
    "label": "PoolEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoolEntry"
  },
  {
    "label": "PoolEntryDSInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoolEntryDSInfo"
  },
  {
    "label": "PoolCostAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PoolCostAllocator"
  },
  {
    "label": "PoolEntry()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_PBQP_COSTALLOCATOR_H # define LLVM_CODEGEN_PBQP_COSTALLOCATOR_H # include \" llvm / ADT / DenseSet . h \" # include<memory> # include<type_traits> namespace llvm { namespace PBQP { template<ValueT> class ValuePool { public : typedef std::shared_ptr<const ValueT> PoolRef ; private : class PoolEntry : public std::enable_shared_from_this<PoolEntry> { public : template<ValueKeyT>)",
    "insertText": "PoolEntry(ValuePool &Pool, ValueKeyT Value) : Pool(Pool), Value(std::move(Value))"
  },
  {
    "label": "PoolEntry()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PoolEntry()"
  },
  {
    "label": "removeEntry()",
    "kind": "Method",
    "detail": "Function (Pool .)",
    "insertText": "removeEntry(this)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} const ValueT&)",
    "insertText": "getValue()"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} template<ValueKeyT> unsigned)",
    "insertText": "getHashValue(const ValueKeyT &C)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(PoolEntry *P)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getHashValue(const PoolEntry *P)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} template<ValueKeyT1,ValueKeyT2> bool)",
    "insertText": "isEqual(const ValueKeyT1 &C1, const ValueKeyT2 &C2)"
  },
  {
    "label": "isEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isEqual(PoolEntry *P1, PoolEntry *P2)"
  },
  {
    "label": "removeEntry()",
    "kind": "Method",
    "detail": "Function (} } ; typedef DenseSet<PoolEntry*,PoolEntryDSInfo> EntrySetT ; EntrySetT EntrySet ; void)",
    "insertText": "removeEntry(PoolEntry *P)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (EntrySet .)",
    "insertText": "erase(P)"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (} public : template<ValueKeyT> PoolRef)",
    "insertText": "getValue(ValueKeyT ValueKey)"
  },
  {
    "label": "find_as()",
    "kind": "Method",
    "detail": "Function (EntrySetT::iterator I = EntrySet .)",
    "insertText": "find_as(ValueKey)"
  },
  {
    "label": "PoolEntry()",
    "kind": "Method",
    "detail": "Function (auto P = std::make_shared<)",
    "insertText": "PoolEntry(*this, std::move(ValueKey))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (EntrySet .)",
    "insertText": "insert(P.get())"
  },
  {
    "label": "getVector()",
    "kind": "Method",
    "detail": "Function (} } ; template<VectorT,MatrixT> class PoolCostAllocator { private : typedef ValuePool<VectorT> VectorCostPool ; typedef ValuePool<MatrixT> MatrixCostPool ; public : typedef VectorT Vector ; typedef MatrixT Matrix ; typedef VectorCostPool::PoolRef VectorPtr ; typedef MatrixCostPool::PoolRef MatrixPtr ; template<VectorKeyT> VectorPtr)",
    "insertText": "getVector(VectorKeyT v)"
  },
  {
    "label": "getMatrix()",
    "kind": "Method",
    "detail": "Function (} template<MatrixKeyT> MatrixPtr)",
    "insertText": "getMatrix(MatrixKeyT m)"
  }
]