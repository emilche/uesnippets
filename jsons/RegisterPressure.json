[
  {
    "label": "LiveIntervals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveIntervals"
  },
  {
    "label": "LiveRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveRange"
  },
  {
    "label": "RegisterClassInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisterClassInfo"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "RegisterPressure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterPressure"
  },
  {
    "label": "IntervalPressure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntervalPressure"
  },
  {
    "label": "RegionPressure",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegionPressure"
  },
  {
    "label": "PressureChange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PressureChange"
  },
  {
    "label": "isPodLike",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "isPodLike"
  },
  {
    "label": "PressureDiff",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PressureDiff"
  },
  {
    "label": "PressureDiffs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PressureDiffs"
  },
  {
    "label": "RegPressureDelta",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegPressureDelta"
  },
  {
    "label": "LiveRegSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LiveRegSet"
  },
  {
    "label": "RegPressureTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegPressureTracker"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_REGISTERPRESSURE_H # define LLVM_CODEGEN_REGISTERPRESSURE_H # include \" llvm / ADT / SparseSet . h \" # include \" llvm / CodeGen / SlotIndexes . h \" # include \" llvm / Target / TargetRegisterInfo . h \" namespace llvm { class LiveIntervals ; class LiveRange ; class RegisterClassInfo ; class MachineInstr ; struct RegisterPressure { std::vector<unsigned> MaxSetPressure ; SmallVector<unsigned,8> LiveInRegs ; SmallVector<unsigned,8> LiveOutRegs ; void)",
    "insertText": "dump(const TargetRegisterInfo *TRI)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} ; struct IntervalPressure : RegisterPressure { SlotIndex TopIdx ; SlotIndex BottomIdx ; void)",
    "insertText": "reset()"
  },
  {
    "label": "openTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "openTop(SlotIndex NextTop)"
  },
  {
    "label": "openBottom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "openBottom(SlotIndex PrevBottom)"
  },
  {
    "label": "openTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "openTop(MachineBasicBlock::const_iterator PrevTop)"
  },
  {
    "label": "openBottom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "openBottom(MachineBasicBlock::const_iterator PrevBottom)"
  },
  {
    "label": "PressureChange()",
    "kind": "Method",
    "detail": "Function (} ; class PressureChange { uint16_t PSetID ; int16_t UnitInc ; public :)",
    "insertText": "PressureChange(): PSetID(0), UnitInc(0)"
  },
  {
    "label": "PressureChange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PressureChange(unsigned id): PSetID(id+1), UnitInc(0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(id < UINT16_MAX && \"PSetID overflow.\")"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValid()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isValid() && \"invalid PressureChange\")"
  },
  {
    "label": "getUnitInc()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getUnitInc()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UnitInc = Inc ; } bool)",
    "insertText": "operator(const PressureChange &RHS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (LLVM_DUMP_METHOD void)",
    "insertText": "dump(const TargetRegisterInfo &TRI)"
  },
  {
    "label": "PressureDiffs()",
    "kind": "Method",
    "detail": "Function (} ; class PressureDiffs { PressureDiff* PDiffArray ; unsigned Size ; unsigned Max ; public :)",
    "insertText": "PressureDiffs(): PDiffArray(nullptr), Size(0), Max(0)"
  },
  {
    "label": "PressureDiffs()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "PressureDiffs()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (delete [ ] PDiffArray ; } void)",
    "insertText": "clear()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (Size = 0 ; } void)",
    "insertText": "init(unsigned N)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PressureDiff&)",
    "insertText": "operator(unsigned Idx)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Idx < Size && \"PressureDiff index out of bounds\")"
  },
  {
    "label": "RegPressureDelta()",
    "kind": "Method",
    "detail": "Function (} } ; struct RegPressureDelta { PressureChange Excess ; PressureChange CriticalMax ; PressureChange CurrentMax ;)",
    "insertText": "RegPressureDelta()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const RegPressureDelta &RHS)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} } ; struct LiveRegSet { SparseSet<unsigned> PhysRegs ; SparseSet<unsigned,VirtReg2IndexFunctor> VirtRegs ; bool)",
    "insertText": "contains(unsigned Reg)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "insert(unsigned Reg)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase(unsigned Reg)"
  },
  {
    "label": "RegPressureTracker()",
    "kind": "Method",
    "detail": "Function (} } ; class RegPressureTracker { const MachineFunction* MF ; const TargetRegisterInfo* TRI ; const RegisterClassInfo* RCI ; const MachineRegisterInfo* MRI ; const LiveIntervals* LIS ; const MachineBasicBlock* MBB ; RegisterPressure& P ; bool RequireIntervals ; bool TrackUntiedDefs ; MachineBasicBlock::const_iterator CurrPos ; std::vector<unsigned> CurrSetPressure ; LiveRegSet LiveRegs ; SparseSet<unsigned,VirtReg2IndexFunctor> UntiedDefs ; std::vector<unsigned> LiveThruPressure ; public :)",
    "insertText": "RegPressureTracker(IntervalPressure &rp) : MF(nullptr), TRI(nullptr), RCI(nullptr), LIS(nullptr), MBB(nullptr), P(rp), RequireIntervals(true), TrackUntiedDefs(false)"
  },
  {
    "label": "RegPressureTracker()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RegPressureTracker(RegionPressure &rp) : MF(nullptr), TRI(nullptr), RCI(nullptr), LIS(nullptr), MBB(nullptr), P(rp), RequireIntervals(false), TrackUntiedDefs(false)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const MachineFunction *mf, const RegisterClassInfo *rci, const LiveIntervals *lis, const MachineBasicBlock *mbb, MachineBasicBlock::const_iterator pos, bool ShouldTrackUntiedDefs = false)"
  },
  {
    "label": "addLiveRegs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLiveRegs(ArrayRef<unsigned> Regs)"
  },
  {
    "label": "getPos()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::const_iterator)",
    "insertText": "getPos()"
  },
  {
    "label": "getCurrSlot()",
    "kind": "Method",
    "detail": "Function (CurrPos = Pos ; } SlotIndex)",
    "insertText": "getCurrSlot()"
  },
  {
    "label": "recede()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "recede(SmallVectorImpl<unsigned> *LiveUses = nullptr, PressureDiff *PDiff = nullptr)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "advance()"
  },
  {
    "label": "closeRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closeRegion()"
  },
  {
    "label": "initLiveThru()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initLiveThru(const RegPressureTracker &RPTracker)"
  },
  {
    "label": "initLiveThru()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initLiveThru(ArrayRef<unsigned> PressureSet)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (LiveThruPressure .)",
    "insertText": "assign(PressureSet.begin(), PressureSet.end())"
  },
  {
    "label": "getLiveThru()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<unsigned>)",
    "insertText": "getLiveThru()"
  },
  {
    "label": "discoverLiveIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "discoverLiveIn(unsigned Reg)"
  },
  {
    "label": "isTopClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTopClosed()"
  },
  {
    "label": "isBottomClosed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBottomClosed()"
  },
  {
    "label": "closeTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closeTop()"
  },
  {
    "label": "closeBottom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "closeBottom()"
  },
  {
    "label": "getMaxUpwardPressureDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getMaxUpwardPressureDelta(const MachineInstr *MI, PressureDiff *PDiff, RegPressureDelta &Delta, ArrayRef<PressureChange> CriticalPSets, ArrayRef<unsigned> MaxPressureLimit)"
  },
  {
    "label": "getUpwardPressureDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getUpwardPressureDelta(const MachineInstr *MI, PressureDiff &PDiff, RegPressureDelta &Delta, ArrayRef<PressureChange> CriticalPSets, ArrayRef<unsigned> MaxPressureLimit)"
  },
  {
    "label": "getMaxDownwardPressureDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getMaxDownwardPressureDelta(const MachineInstr *MI, RegPressureDelta &Delta, ArrayRef<PressureChange> CriticalPSets, ArrayRef<unsigned> MaxPressureLimit)"
  },
  {
    "label": "getMaxPressureDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getMaxPressureDelta(const MachineInstr *MI, RegPressureDelta &Delta, ArrayRef<PressureChange> CriticalPSets, ArrayRef<unsigned> MaxPressureLimit)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isBottomClosed() && \"Uninitialized pressure tracker\")"
  },
  {
    "label": "getUpwardPressure()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getUpwardPressure(const MachineInstr *MI, std::vector<unsigned> &PressureResult, std::vector<unsigned> &MaxPressureResult)"
  },
  {
    "label": "getDownwardPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getDownwardPressure(const MachineInstr *MI, std::vector<unsigned> &PressureResult, std::vector<unsigned> &MaxPressureResult)"
  },
  {
    "label": "getPressureAfterInst()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getPressureAfterInst(const MachineInstr *MI, std::vector<unsigned> &PressureResult, std::vector<unsigned> &MaxPressureResult)"
  },
  {
    "label": "hasUntiedDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasUntiedDef(unsigned VirtReg)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "dump()"
  },
  {
    "label": "getLiveRange()",
    "kind": "Method",
    "detail": "Function (protected : const LiveRange*)",
    "insertText": "getLiveRange(unsigned Reg)"
  },
  {
    "label": "increaseRegPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "increaseRegPressure(ArrayRef<unsigned> Regs)"
  },
  {
    "label": "decreaseRegPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decreaseRegPressure(ArrayRef<unsigned> Regs)"
  },
  {
    "label": "bumpUpwardPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bumpUpwardPressure(const MachineInstr *MI)"
  },
  {
    "label": "bumpDownwardPressure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bumpDownwardPressure(const MachineInstr *MI)"
  },
  {
    "label": "dumpRegSetPressure()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "dumpRegSetPressure(ArrayRef<unsigned> SetPressure, const TargetRegisterInfo *TRI)"
  }
]