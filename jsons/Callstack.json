[
  {
    "label": "TRACESERVICES_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRACESERVICES_API"
  },
  {
    "label": "FCallstack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCallstack"
  },
  {
    "label": "ICallstacksProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICallstacksProvider"
  },
  {
    "label": "FCallstack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" TraceServices / Model / Memory . h \" # include \" TraceServices / Model / Modules . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { struct FStackFrame { uint64 Addr ; const FResolvedSymbol* Symbol ; } ; struct FCallstack {)",
    "insertText": "FCallstack()"
  },
  {
    "label": "FCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstack(uint64 Id)"
  },
  {
    "label": "FCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstack(const FStackFrame* FirstEntry, uint8 FrameCount)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FStackFrame* FirstEntry, uint8 FrameCount)"
  },
  {
    "label": "InitEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEmpty(uint64 Id)"
  },
  {
    "label": "GetEmptyId()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetEmptyId()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Num()"
  },
  {
    "label": "Addr()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "Addr(uint8 Depth)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "Name(uint8 Depth)"
  },
  {
    "label": "Frame()",
    "kind": "Method",
    "detail": "Function (const FStackFrame*)",
    "insertText": "Frame(uint8 Depth)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (private : enum : uint64 { EntryLenShift = 5 6,EntryLenMask =)",
    "insertText": "uint64(0xff)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint64 CallstackLenIndex ; } ;)",
    "insertText": "static_assert(sizeof(FCallstack) == 8, \"struct FCallstack is too large\")"
  },
  {
    "label": "ICallstacksProvider()",
    "kind": "Method",
    "detail": "Function (class ICallstacksProvider : public IProvider { public : ~)",
    "insertText": "ICallstacksProvider()"
  },
  {
    "label": "GetCallstack()",
    "kind": "Method",
    "detail": "Function (const FCallstack*)",
    "insertText": "GetCallstack(uint32 CallstackId)"
  },
  {
    "label": "GetCallstacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCallstacks(const TArrayView<uint32>& CallstackIds, FCallstack const** OutCallstacks)"
  },
  {
    "label": "GetCallstackIdForHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetCallstackIdForHash(uint64 CallstackHash)"
  },
  {
    "label": "GetCallstacksProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetCallstacksProviderName()"
  },
  {
    "label": "ReadCallstacksProvider()",
    "kind": "Method",
    "detail": "Function (const ICallstacksProvider*)",
    "insertText": "ReadCallstacksProvider(const IAnalysisSession& Session)"
  },
  {
    "label": "FCallstack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCallstack() : CallstackLenIndex(0)"
  },
  {
    "label": "InitEmpty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitEmpty(Id)"
  },
  {
    "label": "FCallstack()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCallstack(const FStackFrame* InFirstFrame, uint8 InFrameCount)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InFirstFrame, InFrameCount)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FStackFrame* InFirstFrame, uint8 InFrameCount)"
  },
  {
    "label": "CallstackLenIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallstackLenIndex(uint64(InFrameCount) << EntryLenShift) | (~EntryLenMask & uint64(InFirstFrame))"
  },
  {
    "label": "FirstFrame()",
    "kind": "Method",
    "detail": "Function (const FStackFrame*)",
    "insertText": "FirstFrame(const FStackFrame *) (~EntryLenMask & CallstackLenIndex)"
  },
  {
    "label": "FirstFrame()",
    "kind": "Method",
    "detail": "Function (const FStackFrame*)",
    "insertText": "FirstFrame(const FStackFrame*)(~EntryLenMask & CallstackLenIndex)"
  }
]