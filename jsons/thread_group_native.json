[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ScopedCommandsExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScopedCommandsExecutor"
  },
  {
    "label": "ThreadGroupNative()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_THREAD_GROUP_NATIVE_H_ # define BASE_TASK_THREAD_POOL_THREAD_GROUP_NATIVE_H_ # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / synchronization / atomic_flag . h \" # include \" base / task / thread_pool / thread_group . h \" namespace base { namespace internal { class BASE_EXPORT ThreadGroupNative : public ThreadGroup { public :)",
    "insertText": "ThreadGroupNative(const ThreadGroupNative&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadGroupNative&)",
    "insertText": "operator(const ThreadGroupNative&)"
  },
  {
    "label": "ThreadGroupNative()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ThreadGroupNative()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(WorkerEnvironment worker_environment = WorkerEnvironment::NONE)"
  },
  {
    "label": "JoinForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinForTesting()"
  },
  {
    "label": "GetMaxConcurrentNonBlockedTasksDeprecated()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetMaxConcurrentNonBlockedTasksDeprecated()"
  },
  {
    "label": "DidUpdateCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DidUpdateCanRunPolicy()"
  },
  {
    "label": "OnShutdownStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdownStarted()"
  },
  {
    "label": "ThreadGroupNative()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "ThreadGroupNative(TrackedRef<TaskTracker> task_tracker, TrackedRef<Delegate> delegate, ThreadGroup* predecessor_thread_group)"
  },
  {
    "label": "RunNextTaskSourceImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNextTaskSourceImpl()"
  },
  {
    "label": "JoinImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JoinImpl()"
  },
  {
    "label": "StartImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartImpl()"
  },
  {
    "label": "SubmitWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitWork()"
  },
  {
    "label": "UpdateSortKey()",
    "kind": "Method",
    "detail": "Function (WorkerEnvironment worker_environment_ = WorkerEnvironment::NONE ; private : class ScopedCommandsExecutor ; void)",
    "insertText": "UpdateSortKey(TaskSource::Transaction transaction)"
  },
  {
    "label": "PushTaskSourceAndWakeUpWorkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushTaskSourceAndWakeUpWorkers(TransactionWithRegisteredTaskSource transaction_with_task_source)"
  },
  {
    "label": "EnsureEnoughWorkersLockRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureEnoughWorkersLockRequired(BaseScopedCommandsExecutor* executor) override EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "UpdateMinAllowedPriorityLockRequired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMinAllowedPriorityLockRequired() EXCLUSIVE_LOCKS_REQUIRED(lock_)"
  },
  {
    "label": "GetWork()",
    "kind": "Method",
    "detail": "Function (RegisteredTaskSource)",
    "insertText": "GetWork()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool started_)",
    "insertText": "GUARDED_BY(lock_)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "DCHECK_IS_ON()"
  }
]