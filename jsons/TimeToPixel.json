[
  {
    "label": "FTimeToPixel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimeToPixel"
  },
  {
    "label": "FTimeToPixel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Layout / Geometry . h \" # include \" Misc / FrameRate . h \" struct FTimeToPixel { public :)",
    "insertText": "FTimeToPixel(const FGeometry& AllottedGeometry, const TRange<double>& InLocalViewRange, const FFrameRate& InTickResolution ) : FTimeToPixel(AllottedGeometry.GetLocalSize().X, InLocalViewRange, InTickResolution)"
  },
  {
    "label": "FTimeToPixel()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimeToPixel(float WidthPx, const TRange<double>& InLocalViewRange, const FFrameRate& InTickResolution ) : ViewRangeStartSeconds( InLocalViewRange.GetLowerBoundValue() ) , TickResolution( InTickResolution)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double VisibleWidth = InLocalViewRange . Size<)",
    "insertText": "double()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float MaxPixelsPerSecond = 1 0 0 0 . f ; PixelsPerSecond = VisibleWidth> 0 ? static_cast<)",
    "insertText": "float(WidthPx / VisibleWidth)"
  },
  {
    "label": "SecondsToPixel()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "SecondsToPixel(double Time)"
  },
  {
    "label": "SecondsDeltaToPixel()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "SecondsDeltaToPixel(double TimeDelta)"
  },
  {
    "label": "PixelToSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "PixelToSeconds(float PixelX)"
  },
  {
    "label": "FrameToPixel()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FrameToPixel(const FFrameTime& Time)"
  },
  {
    "label": "FrameDeltaToPixel()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FrameDeltaToPixel(const FFrameTime& TimeDelta)"
  },
  {
    "label": "PixelToFrame()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "PixelToFrame(float PixelX)"
  },
  {
    "label": "PixelDeltaToFrame()",
    "kind": "Method",
    "detail": "Function (} FFrameTime)",
    "insertText": "PixelDeltaToFrame(float PixelDelta)"
  },
  {
    "label": "PixelDeltaToSeconds()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "PixelDeltaToSeconds(float PixelDelta)"
  },
  {
    "label": "GetTickResolution()",
    "kind": "Method",
    "detail": "Function (} FFrameRate)",
    "insertText": "GetTickResolution()"
  },
  {
    "label": "FTimeToPixel()",
    "kind": "Method",
    "detail": "Function (FTimeToPixel Copy =* this ; Copy . ViewRangeStartSeconds = FrameZero / TickResolution ; return Copy ; } private :)",
    "insertText": "FTimeToPixel()"
  }
]