[
  {
    "label": "FftData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FftData"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AEC3_FFT_DATA_H_ # define MODULES_AUDIO_PROCESSING_AEC3_FFT_DATA_H_ # include \" rtc_base / system / arch . h \" # if)",
    "insertText": "defined(WEBRTC_ARCH_X86_FAMILY)"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (struct FftData { void)",
    "insertText": "Assign(const FftData& src)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(src.re.begin(), src.re.end(), re.begin())"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copy(src.im.begin(), src.im.end(), im.begin())"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (im [ 0 ] = im [ kFftLengthBy2 ] = 0 ; } void)",
    "insertText": "Clear()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (re .)",
    "insertText": "fill(0.f)"
  },
  {
    "label": "SpectrumAVX2()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpectrumAVX2(rtc::ArrayView<float> power_spectrum)"
  },
  {
    "label": "Spectrum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Spectrum(Aec3Optimization optimization, rtc::ArrayView<float> power_spectrum)"
  },
  {
    "label": "RTC_DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_EQ(kFftLengthBy2Plus1, power_spectrum.size())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int kNumFourBinBands = kFftLengthBy2 / 4 ; int kLimit = kNumFourBinBands* 4 ;)",
    "insertText": "for(size_t k = 0; k < kLimit; k += 4)"
  },
  {
    "label": "_mm_loadu_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 r =)",
    "insertText": "_mm_loadu_ps(&re[k])"
  },
  {
    "label": "_mm_loadu_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 i =)",
    "insertText": "_mm_loadu_ps(&im[k])"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 ii =)",
    "insertText": "_mm_mul_ps(i, i)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 rr =)",
    "insertText": "_mm_mul_ps(r, r)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (const __m128 rrii =)",
    "insertText": "_mm_add_ps(rr, ii)"
  },
  {
    "label": "_mm_storeu_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_ps(&power_spectrum[k], rrii)"
  },
  {
    "label": "SpectrumAVX2()",
    "kind": "Method",
    "detail": "Function (} power_spectrum [ kFftLengthBy2 ] = re [ kFftLengthBy2 ]* re [ kFftLengthBy2 ] + im [ kFftLengthBy2 ]* im [ kFftLengthBy2 ] ; } break ; case Aec3Optimization::kAvx2 :)",
    "insertText": "SpectrumAVX2(power_spectrum)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (break ; # endif default :)",
    "insertText": "transform(re.begin(), re.end(), im.begin(), power_spectrum.begin(), [](float a, float b) { return a * a + b * b; })"
  },
  {
    "label": "CopyFromPackedArray()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CopyFromPackedArray(const std::array<float, kFftLength>& v)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (re [ 0 ] = v [ 0 ] ; re [ kFftLengthBy2 ] = v [ 1 ] ; im [ 0 ] = im [ kFftLengthBy2 ] = 0 ;)",
    "insertText": "for(size_t k = 1, j = 2; k < kFftLengthBy2; ++k)"
  },
  {
    "label": "CopyToPackedArray()",
    "kind": "Method",
    "detail": "Function (re [ k ] = v [ j + + ] ; im [ k ] = v [ j + + ] ; } } void)",
    "insertText": "CopyToPackedArray(std::array<float, kFftLength>* v)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(v)"
  }
]