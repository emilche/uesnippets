[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "ColPivHouseholderQR",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ColPivHouseholderQR"
  },
  {
    "label": "SolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SolverBase"
  },
  {
    "label": "CompleteOrthogonalDecomposition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CompleteOrthogonalDecomposition"
  },
  {
    "label": "Assignment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Assignment"
  },
  {
    "label": "EIGEN_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COLPIVOTINGHOUSEHOLDERQR_H # define EIGEN_COLPIVOTINGHOUSEHOLDERQR_H namespace Eigen { namespace internal { template<_MatrixType> struct traits<ColPivHouseholderQR<_MatrixType>> : traits<_MatrixType> { typedef MatrixXpr XprKind ; typedef SolverStorage StorageKind ; typedef int StorageIndex ; enum { Flags = 0 } ; } ; } template<_MatrixType> class ColPivHouseholderQR : public SolverBase<ColPivHouseholderQR<_MatrixType>> { public : typedef _MatrixType MatrixType ; typedef SolverBase<ColPivHouseholderQR> Base ; class SolverBase<ColPivHouseholderQR> ;)",
    "insertText": "EIGEN_GENERIC_PUBLIC_INTERFACE(ColPivHouseholderQR)"
  },
  {
    "label": "ColPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef internal::plain_diag_type<MatrixType>::type HCoeffsType ; typedef PermutationMatrix<ColsAtCompileTime,MaxColsAtCompileTime> PermutationType ; typedef internal::plain_row_type<MatrixType,Index>::type IntRowVectorType ; typedef internal::plain_row_type<MatrixType>::type RowVectorType ; typedef internal::plain_row_type<MatrixType,RealScalar>::type RealRowVectorType ; typedef HouseholderSequence<MatrixType,internal::remove_all<HCoeffsType::ConjugateReturnType>::type> HouseholderSequenceType ; typedef MatrixType::PlainObject PlainObject ; private : typedef PermutationType::StorageIndex PermIndexType ; public :)",
    "insertText": "ColPivHouseholderQR() : m_qr(), m_hCoeffs(), m_colsPermutation(), m_colsTranspositions(), m_temp(), m_colNormsUpdated(), m_colNormsDirect(), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "ColPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ColPivHouseholderQR(Index rows, Index cols) : m_qr(rows, cols), m_hCoeffs((std::min)(rows,cols)), m_colsPermutation(PermIndexType(cols)), m_colsTranspositions(cols), m_temp(cols), m_colNormsUpdated(cols), m_colNormsDirect(cols), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "ColPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "ColPivHouseholderQR(const EigenBase<InputType>& matrix) : m_qr(matrix.rows(), matrix.cols()), m_hCoeffs((std::min)(matrix.rows(),matrix.cols())), m_colsPermutation(PermIndexType(matrix.cols())), m_colsTranspositions(matrix.cols()), m_temp(matrix.cols()), m_colNormsUpdated(matrix.cols()), m_colNormsDirect(matrix.cols()), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived())"
  },
  {
    "label": "ColPivHouseholderQR()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "ColPivHouseholderQR(EigenBase<InputType>& matrix) : m_qr(matrix.derived()), m_hCoeffs((std::min)(matrix.rows(),matrix.cols())), m_colsPermutation(PermIndexType(matrix.cols())), m_colsTranspositions(matrix.cols()), m_temp(matrix.cols()), m_colNormsUpdated(matrix.cols()), m_colNormsDirect(matrix.cols()), m_isInitialized(false), m_usePrescribedThreshold(false)"
  },
  {
    "label": "computeInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeInPlace()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_PARSED_BY_DOXYGEN template<Rhs> const Solve<ColPivHouseholderQR,Rhs>)",
    "insertText": "solve(const MatrixBase<Rhs>& b)"
  },
  {
    "label": "householderQ()",
    "kind": "Method",
    "detail": "Function (# endif HouseholderSequenceType)",
    "insertText": "householderQ()"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (HouseholderSequenceType)",
    "insertText": "matrixQ()"
  },
  {
    "label": "matrixQR()",
    "kind": "Method",
    "detail": "Function (} const MatrixType&)",
    "insertText": "matrixQR()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"ColPivHouseholderQR is not initialized.\")"
  },
  {
    "label": "colsPermutation()",
    "kind": "Method",
    "detail": "Function (const PermutationType&)",
    "insertText": "colsPermutation()"
  },
  {
    "label": "logAbsDeterminant()",
    "kind": "Method",
    "detail": "Function (MatrixType::RealScalar)",
    "insertText": "logAbsDeterminant()"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (Index)",
    "insertText": "rank()"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (RealScalar premultiplied_threshold =)",
    "insertText": "abs(m_maxpivot) * threshold()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index result = 0 ;)",
    "insertText": "for(Index i = 0; i < m_nonzero_pivots; ++i) result += (abs(m_qr.coeff(i,i)) > premultiplied_threshold)"
  },
  {
    "label": "isInjective()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInjective()"
  },
  {
    "label": "isSurjective()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSurjective()"
  },
  {
    "label": "isInvertible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isInvertible()"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} const Inverse<ColPivHouseholderQR>)",
    "insertText": "inverse()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "hCoeffs()",
    "kind": "Method",
    "detail": "Function (} const HCoeffsType&)",
    "insertText": "hCoeffs()"
  },
  {
    "label": "setThreshold()",
    "kind": "Method",
    "detail": "Function (m_usePrescribedThreshold = true ; m_prescribedThreshold = threshold ; return* this ; } ColPivHouseholderQR&)",
    "insertText": "setThreshold(Default_t)"
  },
  {
    "label": "threshold()",
    "kind": "Method",
    "detail": "Function (m_usePrescribedThreshold = false ; return* this ; } RealScalar)",
    "insertText": "threshold()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized || m_usePrescribedThreshold)"
  },
  {
    "label": "nonzeroPivots()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonzeroPivots()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Decomposition is not initialized.\")"
  },
  {
    "label": "_solve_impl_transposed()",
    "kind": "Method",
    "detail": "Function (template<bool Conjugate,RhsType,DstType> void)",
    "insertText": "_solve_impl_transposed(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "check_template_parameters()",
    "kind": "Method",
    "detail": "Function (# endif protected : class CompleteOrthogonalDecomposition<MatrixType> ; void)",
    "insertText": "check_template_parameters()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_NON_INTEGER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_NON_INTEGER(Scalar)"
  },
  {
    "label": "absDeterminant()",
    "kind": "Method",
    "detail": "Function (MatrixType m_qr ; HCoeffsType m_hCoeffs ; PermutationType m_colsPermutation ; IntRowVectorType m_colsTranspositions ; RowVectorType m_temp ; RealRowVectorType m_colNormsUpdated ; RealRowVectorType m_colNormsDirect ; bool m_isInitialized,m_usePrescribedThreshold ; RealScalar m_prescribedThreshold,m_maxpivot ; Index m_nonzero_pivots ; Index m_det_pq ; } ; template<MatrixType> MatrixType::RealScalar ColPivHouseholderQR<MatrixType)",
    "insertText": "absDeterminant()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_qr.rows() == m_qr.cols() && \"You can't take the determinant of a non-square matrix!\")"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> template<InputType> ColPivHouseholderQR<MatrixType>& ColPivHouseholderQR<MatrixType)",
    "insertText": "compute(const EigenBase<InputType>& matrix)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_qr = matrix .)",
    "insertText": "derived()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_qr.cols()<=NumTraits<int>::highest())"
  },
  {
    "label": "diagonalSize()",
    "kind": "Method",
    "detail": "Function (Index size = m_qr .)",
    "insertText": "diagonalSize()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_hCoeffs .)",
    "insertText": "resize(size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_temp .)",
    "insertText": "resize(cols)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_colsTranspositions .)",
    "insertText": "resize(m_qr.cols())"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_colNormsDirect .)",
    "insertText": "coeffRef(k) = m_qr.col(k).norm()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_colNormsUpdated .)",
    "insertText": "coeffRef(k) = m_colNormsDirect.coeffRef(k)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (} RealScalar threshold_helper = numext::abs2<)",
    "insertText": "RealScalar(m_colNormsUpdated.maxCoeff() * NumTraits<RealScalar>::epsilon()) / RealScalar(rows)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (RealScalar norm_downdate_threshold =)",
    "insertText": "sqrt(NumTraits<RealScalar>::epsilon())"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (m_nonzero_pivots = size ; m_maxpivot =)",
    "insertText": "RealScalar(0)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (Index biggest_col_index ; RealScalar biggest_col_sq_norm =)",
    "insertText": "abs2(m_colNormsUpdated.tail(cols-k).maxCoeff(&biggest_col_index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (biggest_col_index + = k ;)",
    "insertText": "if(m_nonzero_pivots==size && biggest_col_sq_norm < threshold_helper * RealScalar(rows-k))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_colsTranspositions .)",
    "insertText": "coeffRef(k)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "col(k).swap(m_qr.col(biggest_col_index))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_colNormsUpdated.coeffRef(k), m_colNormsUpdated.coeffRef(biggest_col_index))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_colNormsDirect.coeffRef(k), m_colNormsDirect.coeffRef(biggest_col_index))"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (+ + number_of_transpositions ; } RealScalar beta ; m_qr .)",
    "insertText": "col(k).tail(rows-k).makeHouseholderInPlace(m_hCoeffs.coeffRef(k), beta)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "coeffRef(k,k)"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "bottomRightCorner(rows-k, cols-k-1) .applyHouseholderOnTheLeft(m_qr.col(k).tail(rows-k-1), m_hCoeffs.coeffRef(k), &m_temp.coeffRef(k+1))"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (RealScalar temp =)",
    "insertText": "abs(m_qr.coeffRef(k, j)) / m_colNormsUpdated.coeffRef(j)"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "temp(RealScalar(1) + temp) * (RealScalar(1) - temp)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (temp = temp<)",
    "insertText": "RealScalar(0) ? RealScalar(0)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar temp2 = temp* numext::abs2<)",
    "insertText": "RealScalar(m_colNormsUpdated.coeffRef(j) / m_colNormsDirect.coeffRef(j))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_colNormsDirect .)",
    "insertText": "coeffRef(j) = m_qr.col(j).tail(rows - k - 1).norm()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_colNormsUpdated .)",
    "insertText": "coeffRef(j) = m_colNormsDirect.coeffRef(j)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} else { m_colNormsUpdated .)",
    "insertText": "coeffRef(j) *= numext::sqrt(temp)"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (} } } } m_colsPermutation .)",
    "insertText": "setIdentity(PermIndexType(cols))"
  },
  {
    "label": "m_det_pq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_det_pq(number_of_transpositions%2)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; } # ifndef EIGEN_PARSED_BY_DOXYGEN template<_MatrixType> template<RhsType,DstType> void ColPivHouseholderQR<_MatrixType)",
    "insertText": "_solve_impl(const RhsType &rhs, DstType &dst)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "setZero()"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (c .)",
    "insertText": "applyOnTheLeft(householderQ().setLength(nonzero_pivots).adjoint())"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "topLeftCorner(nonzero_pivots, nonzero_pivots) .template triangularView<Upper>() .solveInPlace(c.topRows(nonzero_pivots))"
  },
  {
    "label": "topLeftCorner()",
    "kind": "Method",
    "detail": "Function (m_qr .)",
    "insertText": "topLeftCorner(nonzero_pivots, nonzero_pivots) .template triangularView<Upper>() .transpose().template conjugateIf<Conjugate>() .solveInPlace(c.topRows(nonzero_pivots))"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "topRows(nonzero_pivots) = c.topRows(nonzero_pivots)"
  },
  {
    "label": "bottomRows()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "bottomRows(rows()-nonzero_pivots).setZero()"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (dst .)",
    "insertText": "applyOnTheLeft(householderQ().setLength(nonzero_pivots).template conjugateIf<!Conjugate>())"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} # endif namespace internal { template<DstXprType,MatrixType> struct Assignment<DstXprType,Inverse<ColPivHouseholderQR<MatrixType>>,internal::assign_op<DstXprType::Scalar,ColPivHouseholderQR<MatrixType>::Scalar>,Dense2Dense> { typedef ColPivHouseholderQR<MatrixType> QrType ; typedef Inverse<QrType> SrcXprType ; void)",
    "insertText": "run(DstXprType &dst, const SrcXprType &src, const internal::assign_op<typename DstXprType::Scalar,typename QrType::Scalar> &)"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (dst = src .)",
    "insertText": "nestedExpression().solve(MatrixType::Identity(src.rows(), src.cols()))"
  },
  {
    "label": "colPivHouseholderQr()",
    "kind": "Method",
    "detail": "Function (} template<Derived> const ColPivHouseholderQR<MatrixBase<Derived>::PlainObject> MatrixBase<Derived)",
    "insertText": "colPivHouseholderQr()"
  }
]