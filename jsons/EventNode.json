[
  {
    "label": "FEventInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEventInfo"
  },
  {
    "label": "FEventNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventNode"
  },
  {
    "label": "FIter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIter"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Trace / Config . h \" # if TRACE_PRIVATE_MINIMAL_ENABLED # include \" Field . h \" namespace UE { namespace Trace { namespace Private { struct FEventInfo { enum { Flag_None = 0,Flag_Important = 1<<0,Flag_MaybeHasAux = 1<<1,Flag_NoSync = 1<<2,Flag_Definition8 = 1<<3,Flag_Definition16 = 1<<4,Flag_Definition32 = 1<<5,Flag_Definition64 = 1<<6,DefinitionBits = Flag_Definition8 | Flag_Definition16 | Flag_Definition32 | Flag_Definition64,} ; FLiteralName LoggerName ; FLiteralName EventName ; const FFieldDesc* Fields ; uint16 FieldCount ; uint16 Flags ; } ; class FEventNode { public : struct FIter { const FEventNode*)",
    "insertText": "GetNext()"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (void* Inner ; } ; FIter)",
    "insertText": "Read()"
  },
  {
    "label": "ReadNew()",
    "kind": "Method",
    "detail": "Function (FIter)",
    "insertText": "ReadNew()"
  },
  {
    "label": "OnConnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnect()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Initialize(const FEventInfo* InInfo)"
  },
  {
    "label": "Describe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Describe()"
  },
  {
    "label": "GetUid()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetUid()"
  }
]