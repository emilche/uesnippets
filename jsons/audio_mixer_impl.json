[
  {
    "label": "AudioMixerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioMixerImpl"
  },
  {
    "label": "SourceStatus",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SourceStatus"
  },
  {
    "label": "HelperContainers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HelperContainers"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_MIXER_AUDIO_MIXER_IMPL_H_ # define MODULES_AUDIO_MIXER_AUDIO_MIXER_IMPL_H_ # include<stddef . h> # include<memory> # include<vector> # include \" api / array_view . h \" # include \" api / audio / audio_frame . h \" # include \" api / audio / audio_mixer . h \" # include \" api / scoped_refptr . h \" # include \" modules / audio_mixer / frame_combiner . h \" # include \" modules / audio_mixer / output_rate_calculator . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class AudioMixerImpl : public AudioMixer { public : struct SourceStatus ; const int kFrameDurationInMs = 1 0 ; const int kDefaultNumberOfMixedAudioSources = 3 ; rtc::scoped_refptr<AudioMixerImpl>)",
    "insertText": "Create(int max_sources_to_mix = kDefaultNumberOfMixedAudioSources)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<AudioMixerImpl>)",
    "insertText": "Create(std::unique_ptr<OutputRateCalculator> output_rate_calculator, bool use_limiter, int max_sources_to_mix = kDefaultNumberOfMixedAudioSources)"
  },
  {
    "label": "AudioMixerImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioMixerImpl()"
  },
  {
    "label": "AudioMixerImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioMixerImpl(const AudioMixerImpl&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioMixerImpl&)",
    "insertText": "operator(const AudioMixerImpl&)"
  },
  {
    "label": "AddSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSource(Source* audio_source)"
  },
  {
    "label": "RemoveSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSource(Source* audio_source)"
  },
  {
    "label": "Mix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Mix(size_t number_of_channels, AudioFrame* audio_frame_for_mixing) override RTC_LOCKS_EXCLUDED(mutex_)"
  },
  {
    "label": "GetAudioSourceMixabilityStatusForTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAudioSourceMixabilityStatusForTest(Source* audio_source)"
  },
  {
    "label": "AudioMixerImpl()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "AudioMixerImpl(std::unique_ptr<OutputRateCalculator> output_rate_calculator, bool use_limiter, int max_sources_to_mix)"
  },
  {
    "label": "GetAudioFromSources()",
    "kind": "Method",
    "detail": "Function (private : struct HelperContainers ; rtc::ArrayView<AudioFrame* const>)",
    "insertText": "GetAudioFromSources(int output_frequency) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex mutex_ ; const int max_sources_to_mix_ ; std::unique_ptr<OutputRateCalculator> output_rate_calculator_ ; std::vector<std::unique_ptr<SourceStatus>> audio_source_list_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]