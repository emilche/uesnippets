[
  {
    "label": "is_widening_convertible",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is_widening_convertible"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IsIntegral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsIntegral"
  },
  {
    "label": "MakeUnsigned",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakeUnsigned"
  },
  {
    "label": "IsUnsigned",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsUnsigned"
  },
  {
    "label": "unsigned_bits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unsigned_bits"
  },
  {
    "label": "U256",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "U256"
  },
  {
    "label": "make_unsigned_bits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_unsigned_bits"
  },
  {
    "label": "rank()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_INTERNAL_TRAITS_H_ # define ABSL_RANDOM_INTERNAL_TRAITS_H_ # include<cstdint> # include<limits> # include<type_traits> # include \" absl / base / config . h \" # include \" absl / numeric / bits . h \" # include \" absl / numeric / int128 . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { template<A,B> class is_widening_convertible { template<class T> int)",
    "insertText": "rank()"
  },
  {
    "label": "BitWidth()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct IsIntegral : std::is_integral<T> { } ; template<> struct IsIntegral<absl::int128> : std::true_type { } ; template<> struct IsIntegral<absl::uint128> : std::true_type { } ; template<T> struct MakeUnsigned : std::make_unsigned<T> { } ; template<> struct MakeUnsigned<absl::int128> { using type = absl::uint128 ; } ; template<> struct MakeUnsigned<absl::uint128> { using type = absl::uint128 ; } ; template<T> struct IsUnsigned : std::is_unsigned<T> { } ; template<> struct IsUnsigned<absl::int128> : std::false_type { } ; template<> struct IsUnsigned<absl::uint128> : std::true_type { } ; template<size_t N> struct unsigned_bits ; template<> struct unsigned_bits<8> { using type = uint8_t ; } ; template<> struct unsigned_bits<1 6> { using type = uint16_t ; } ; template<> struct unsigned_bits<3 2> { using type = uint32_t ; } ; template<> struct unsigned_bits<6 4> { using type = uint64_t ; } ; template<> struct unsigned_bits<1 2 8> { using type = absl::uint128 ; } ; struct U256 { uint128 hi ; uint128 lo ; } ; template<> struct unsigned_bits<2 5 6> { using type = U256 ; } ; template<IntType> struct make_unsigned_bits { using type = unsigned_bits<std::numeric_limits<MakeUnsigned<IntType>::type>::digits>::type ; } ; template<T> int)",
    "insertText": "BitWidth(T v)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int half_bits =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "bit_width()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "bit_width(static_cast<uint64_t>(v))"
  }
]