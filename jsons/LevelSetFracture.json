[
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "InterruptType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterruptType"
  },
  {
    "label": "LevelSetFracture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetFracture"
  },
  {
    "label": "FindMinMaxVoxelValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindMinMaxVoxelValue"
  },
  {
    "label": "LevelSetFracture()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVELSETFRACTURE_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVELSETFRACTURE_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / math / Quat . h> # include<openvdb / util / NullInterrupter . h> # include \" Composite . h \" # include \" GridTransformer . h \" # include \" LevelSetUtil . h \" # include<algorithm> # include<limits> # include<list> # include<vector> # include<tbb / blocked_range . h> # include<tbb / parallel_reduce . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<class GridType,class InterruptType = util::NullInterrupter> class LevelSetFracture { public : using Vec3sList = std::vector<Vec3s> ; using QuatsList = std::vector<math::Quats> ; using GridPtrList = std::list<GridType::Ptr> ; using GridPtrListIter = GridPtrList::iterator ;)",
    "insertText": "LevelSetFracture(InterruptType* interrupter = nullptr)"
  },
  {
    "label": "fracture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fracture(GridPtrList& grids, const GridType& cutter, bool segment = false, const Vec3sList* points = nullptr, const QuatsList* rotations = nullptr, bool cutterOverlap = true)"
  },
  {
    "label": "fragments()",
    "kind": "Method",
    "detail": "Function (GridPtrList&)",
    "insertText": "fragments()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (mFragments .)",
    "insertText": "clear()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "operator(const LevelSetFracture&)"
  },
  {
    "label": "wasInterrupted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "wasInterrupted(int percent = -1)"
  },
  {
    "label": "isValidFragment()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isValidFragment(GridType&)"
  },
  {
    "label": "segmentFragments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "segmentFragments(GridPtrList&)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "process(GridPtrList&, const GridType& cutter)"
  },
  {
    "label": "FindMinMaxVoxelValue()",
    "kind": "Method",
    "detail": "Function (InterruptType* mInterrupter ; GridPtrList mFragments ; } ; namespace level_set_fracture_internal { template<LeafNodeType> struct FindMinMaxVoxelValue { using ValueType = LeafNodeType::ValueType ;)",
    "insertText": "FindMinMaxVoxelValue(const std::vector<const LeafNodeType*>& nodes) : minValue(std::numeric_limits<ValueType>::max()) , maxValue(-minValue) , mNodes(nodes.empty() ? nullptr : &nodes.front())"
  },
  {
    "label": "FindMinMaxVoxelValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FindMinMaxVoxelValue(FindMinMaxVoxelValue& rhs, tbb::split) : minValue(std::numeric_limits<ValueType>::max()) , maxValue(-minValue) , mNodes(rhs.mNodes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const tbb::blocked_range<size_t>& range)"
  },
  {
    "label": "buffer()",
    "kind": "Method",
    "detail": "Function (const ValueType* data = mNodes [ n ] ->)",
    "insertText": "buffer().data()"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (minValue =)",
    "insertText": "min(minValue, data[i])"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (maxValue =)",
    "insertText": "max(maxValue, data[i])"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "join(FindMinMaxVoxelValue& rhs)"
  },
  {
    "label": "min()",
    "kind": "Method",
    "detail": "Function (minValue =)",
    "insertText": "min(minValue, rhs.minValue)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (maxValue =)",
    "insertText": "max(maxValue, rhs.maxValue)"
  },
  {
    "label": "LevelSetFracture()",
    "kind": "Method",
    "detail": "Function (} ValueType minValue,maxValue ; LeafNodeType const* const* const mNodes ; } ; } template<class GridType,class InterruptType> LevelSetFracture<GridType,InterruptType)",
    "insertText": "LevelSetFracture(InterruptType* interrupter) : mInterrupter(interrupter) , mFragments()"
  },
  {
    "label": "fracture()",
    "kind": "Method",
    "detail": "Function (} template<class GridType,class InterruptType> void LevelSetFracture<GridType,InterruptType)",
    "insertText": "fracture(GridPtrList& grids, const GridType& cutter, bool segmentation, const Vec3sList* points, const QuatsList* rotations, bool cutterOverlap)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (math::Transform::Ptr originalCutterTransform = cutter .)",
    "insertText": "transform().copy()"
  },
  {
    "label": "cutterGrid()",
    "kind": "Method",
    "detail": "Function (GridType)",
    "insertText": "cutterGrid(*const_cast<GridType*>(&cutter), ShallowCopy())"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const bool hasInstanceRotations = points&& rotations&& points ->)",
    "insertText": "size() == rotations->size()"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int percent =)",
    "insertText": "int((float(p) / float(P)) * 100.0)"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (GridType instCutterGrid ; instCutterGrid .)",
    "insertText": "setTransform(originalCutterTransform->copy())"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (math::Transform::Ptr xform = originalCutterTransform ->)",
    "insertText": "copy()"
  },
  {
    "label": "rot()",
    "kind": "Method",
    "detail": "Function (const Vec3s&)",
    "insertText": "rot(*rotations)[p].eulerAngles(math::XYZ_ROTATION)"
  },
  {
    "label": "preRotate()",
    "kind": "Method",
    "detail": "Function (xform ->)",
    "insertText": "preRotate(rot[0], math::X_AXIS)"
  },
  {
    "label": "preRotate()",
    "kind": "Method",
    "detail": "Function (xform ->)",
    "insertText": "preRotate(rot[1], math::Y_AXIS)"
  },
  {
    "label": "preRotate()",
    "kind": "Method",
    "detail": "Function (xform ->)",
    "insertText": "preRotate(rot[2], math::Z_AXIS)"
  },
  {
    "label": "postTranslate()",
    "kind": "Method",
    "detail": "Function (xform ->)",
    "insertText": "postTranslate((*points)[p])"
  },
  {
    "label": "setTransform()",
    "kind": "Method",
    "detail": "Function (} cutterGrid .)",
    "insertText": "setTransform(xform)"
  },
  {
    "label": "PointSampler()",
    "kind": "Method",
    "detail": "Function (} else { doResampleToMatch<)",
    "insertText": "PointSampler(cutterGrid, instCutterGrid, *mInterrupter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { util::NullInterrupter interrupter ;)",
    "insertText": "if(hasInstanceRotations)"
  },
  {
    "label": "PointSampler()",
    "kind": "Method",
    "detail": "Function (} else { doResampleToMatch<)",
    "insertText": "PointSampler(cutterGrid, instCutterGrid, interrupter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(wasInterrupted(percent))"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "process(grids, instCutterGrid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(cutterOverlap && !mFragments.empty()) process(mFragments, cutter)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "process(grids, cutter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(segmentation)"
  },
  {
    "label": "segmentFragments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "segmentFragments(mFragments)"
  },
  {
    "label": "segmentFragments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "segmentFragments(grids)"
  },
  {
    "label": "isValidFragment()",
    "kind": "Method",
    "detail": "Function (} } template<class GridType,class InterruptType> bool LevelSetFracture<GridType,InterruptType)",
    "insertText": "isValidFragment(GridType& grid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using LeafNodeType = GridType::TreeType::LeafNodeType ;)",
    "insertText": "if(grid.tree().leafCount() < 9)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (std::vector<const LeafNodeType*> nodes ; grid .)",
    "insertText": "tree().getNodes(nodes)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index64 activeVoxelCount = 0 ;)",
    "insertText": "for(size_t n = 0, N = nodes.size(); n < N; ++n)"
  },
  {
    "label": "onVoxelCount()",
    "kind": "Method",
    "detail": "Function (activeVoxelCount + = nodes [ n ] ->)",
    "insertText": "onVoxelCount()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(activeVoxelCount < 27)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (level_set_fracture_internal::FindMinMaxVoxelValue<LeafNodeType>)",
    "insertText": "op(nodes)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(tbb::blocked_range<size_t>(0, nodes.size()), op)"
  },
  {
    "label": "segmentFragments()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<class GridType,class InterruptType> void LevelSetFracture<GridType,InterruptType)",
    "insertText": "segmentFragments(GridPtrList& grids)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (GridPtrList newFragments ;)",
    "insertText": "for(GridPtrListIter it = grids.begin(); it != grids.end(); ++it)"
  },
  {
    "label": "segmentSDF()",
    "kind": "Method",
    "detail": "Function (std::vector<GridType::Ptr> segments ;)",
    "insertText": "segmentSDF(*(*it), segments)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (newFragments .)",
    "insertText": "push_back(segments[n])"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } grids .)",
    "insertText": "swap(newFragments)"
  },
  {
    "label": "process()",
    "kind": "Method",
    "detail": "Function (} template<class GridType,class InterruptType> void LevelSetFracture<GridType,InterruptType)",
    "insertText": "process(GridPtrList& grids, const GridType& cutter)"
  },
  {
    "label": "csgIntersectionCopy()",
    "kind": "Method",
    "detail": "Function (GridPtr& grid =* it ; GridPtr fragment =)",
    "insertText": "csgIntersectionCopy(*grid, cutter)"
  },
  {
    "label": "csgDifferenceCopy()",
    "kind": "Method",
    "detail": "Function (GridPtr residual =)",
    "insertText": "csgDifferenceCopy(*grid, cutter)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (newFragments .)",
    "insertText": "push_back(fragment)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "tree().clear()"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (grid ->)",
    "insertText": "tree().merge(residual->tree())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!newFragments.empty())"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (mFragments .)",
    "insertText": "splice(mFragments.end(), newFragments)"
  }
]