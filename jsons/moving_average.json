[
  {
    "label": "MovingAverage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MovingAverage"
  },
  {
    "label": "MovingAverage()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NUMERICS_MOVING_AVERAGE_H_ # define RTC_BASE_NUMERICS_MOVING_AVERAGE_H_ # include<stddef . h> # include<stdint . h> # include<vector> # include \" absl / types / optional . h \" namespace rtc { class MovingAverage { public :)",
    "insertText": "MovingAverage(size_t window_size)"
  },
  {
    "label": "MovingAverage()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MovingAverage()"
  },
  {
    "label": "MovingAverage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MovingAverage(const MovingAverage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MovingAverage&)",
    "insertText": "operator(const MovingAverage&)"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSample(int sample)"
  },
  {
    "label": "GetAverageRoundedDown()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetAverageRoundedDown()"
  },
  {
    "label": "GetAverageRoundedToClosest()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "GetAverageRoundedToClosest()"
  },
  {
    "label": "GetUnroundedAverage()",
    "kind": "Method",
    "detail": "Function (absl::optional<double>)",
    "insertText": "GetUnroundedAverage()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  }
]