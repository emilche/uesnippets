[
  {
    "label": "uniform_real_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "uniform_real_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_UNIFORM_REAL_DISTRIBUTION_H_ # define ABSL_RANDOM_UNIFORM_REAL_DISTRIBUTION_H_ # include<cassert> # include<cmath> # include<cstdint> # include<istream> # include<limits> # include<type_traits> # include \" absl / meta / type_traits . h \" # include \" absl / random / internal / fast_uniform_bits . h \" # include \" absl / random / internal / generate_real . h \" # include \" absl / random / internal / iostream_state_saver . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<RealType = double> class uniform_real_distribution { public : using result_type = RealType ; class param_type { public : using distribution_type = uniform_real_distribution ;)",
    "insertText": "param_type(result_type lo = 0, result_type hi = 1) : lo_(lo), hi_(hi), range_(hi - lo)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(lo <= hi)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(range_ <= (std::numeric_limits<result_type>::max)())"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "a()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : class uniform_real_distribution ; result_type lo_,hi_,range_ ;)",
    "insertText": "static_assert(std::is_floating_point<RealType>::value, \"Class-template absl::uniform_real_distribution<> must be \" \"parameterized using a floating-point type.\")"
  },
  {
    "label": "uniform_real_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "uniform_real_distribution() : uniform_real_distribution(0)"
  },
  {
    "label": "uniform_real_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "uniform_real_distribution(result_type lo, result_type hi = 1) : param_(lo, hi)"
  },
  {
    "label": "uniform_real_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "uniform_real_distribution(const param_type& param) : param_(param)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& gen)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& gen, const param_type& p)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "b()"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (} param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (param_ = params ; })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const uniform_real_distribution& a, const uniform_real_distribution& b)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (using random_internal::GeneratePositiveTag ; using random_internal::GenerateRealFromBits ; using real_type = absl::conditional_t<std::is_same<RealType,float>::value,float,double> ;)",
    "insertText": "while(true)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (const result_type sample = GenerateRealFromBits<real_type,GeneratePositiveTag,)",
    "insertText": "true(fast_u64_(gen))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (const result_type res = p .)",
    "insertText": "a() + (sample * p.range_)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "precision(random_internal::stream_precision_helper<RealType>::kPrecision)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (os<<x .)",
    "insertText": "a() << os.fill() << x.b()"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using param_type = uniform_real_distribution<RealType>::param_type ; using result_type = uniform_real_distribution<RealType>::result_type ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (auto a = random_internal::read_floating_point<)",
    "insertText": "result_type(is)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(a, b))"
  }
]