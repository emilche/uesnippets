[
  {
    "label": "FPiecewiseCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPiecewiseCurve"
  },
  {
    "label": "FPiecewiseCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPiecewiseCurveModel"
  },
  {
    "label": "FPiecewiseCurveModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CurveModel . h \" # include \" Misc / Attribute . h \" namespace UE::MovieScene { struct FPiecewiseCurve ; class FPiecewiseCurveModel : public FCurveModel { public : TAttribute<const UE::MovieScene::FPiecewiseCurve*> CurveAttribute ; TAttribute<FFrameRate> FrameRateAttribute ; TAttribute<FTransform2d> CurveTransformAttribute ;)",
    "insertText": "FPiecewiseCurveModel()"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Color =)",
    "insertText": "FLinearColor(0.1f,0.1f,0.1f)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "GetCurve()"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetKeys(double MinTime, double MaxTime, double MinValue, double MaxValue, TArray<FKeyHandle>& OutKeyHandles)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddKeys(TArrayView<const FKeyPosition> InPositions, TArrayView<const FKeyAttributes> InAttributes, TArrayView<TOptional<FKeyHandle>>* OutKeyHandles)"
  },
  {
    "label": "RemoveKeys()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveKeys(TArrayView<const FKeyHandle> InKeys)"
  },
  {
    "label": "GetKeyPositions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyPosition> OutKeyPositions)"
  },
  {
    "label": "SetKeyPositions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<const FKeyPosition> InKeyPositions, EPropertyChangeType::Type ChangeType = EPropertyChangeType::Unspecified)"
  },
  {
    "label": "GetKeyDrawInfo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetKeyDrawInfo(ECurvePointType PointType, const FKeyHandle InKeyHandle, FKeyDrawInfo& OutDrawInfo)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Evaluate(double InTime, double& OutValue)"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurve(const FCurveEditor& CurveEditor, const FCurveEditorScreenSpace& ScreenSpace, TArray<TTuple<double, double>>& InterpolatingPoints)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeRange(double& MinTime, double& MaxTime)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(double& MinValue, double& MaxValue)"
  }
]