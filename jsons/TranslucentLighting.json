[
  {
    "label": "FSortedLightSceneInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSortedLightSceneInfo"
  },
  {
    "label": "FCloudShadowAOData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCloudShadowAOData"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FTranslucencyLightingVolumeTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucencyLightingVolumeTextures"
  },
  {
    "label": "FTranslucentLightInjectionCollector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTranslucentLightInjectionCollector"
  },
  {
    "label": "FInjectionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInjectionData"
  },
  {
    "label": "FPerViewData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPerViewData"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SceneRendering . h \" # include \" RenderGraph . h \" # include \" VolumeRendering . h \" struct FSortedLightSceneInfo ; struct FCloudShadowAOData ; class FLightSceneInfo ; class FProjectedShadowInfo ; struct FTranslucencyLightingVolumeTextures { int32)",
    "insertText": "GetIndex(const FViewInfo& View, int32 CascadeIndex)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, ERDGPassFlags PassFlags)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetDirectionalTexture()",
    "kind": "Method",
    "detail": "Function (} FRDGTextureRef)",
    "insertText": "GetDirectionalTexture(const FViewInfo& View, int32 CascadeIndex)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} TArray<FRDGTextureRef,TInlineAllocator<TVC_MAX>> Ambient ; TArray<FRDGTextureRef,TInlineAllocator<TVC_MAX>> Directional ; int32 VolumeDim = 0 ; TArray<int32,TInlineAllocator<2>> ViewsToTexturePairs ; } ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FTranslucencyLightingVolumeParameters, ) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, TranslucencyLightingVolumeAmbientInner) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, TranslucencyLightingVolumeAmbientOuter) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, TranslucencyLightingVolumeDirectionalInner) SHADER_PARAMETER_RDG_TEXTURE(Texture3D, TranslucencyLightingVolumeDirectionalOuter) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "FTranslucentLightInjectionCollector()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FTranslucentLightInjectionCollector(FRDGBuilder& GraphBuilder, TArrayView<const FViewInfo> Views, bool bAreLightsInLightGrid)"
  },
  {
    "label": "AddLightForInjection()",
    "kind": "Method",
    "detail": "Function (struct FInjectionData { const FLightSceneInfo* LightSceneInfo ; const FProjectedShadowInfo* ProjectedShadowInfo ; bool bApplyLightFunction ; const FMaterialRenderProxy* LightFunctionMaterialProxy ; int32 VirtualShadowMapId ; bool bUseAdaptiveVolumetricShadowMap ; FVolumeBounds VolumeBounds [ TVC_MAX ] ; } ; typedef TArray<FInjectionData,SceneRenderingAllocator> FInjectionDataArray ; struct FPerViewData { FInjectionDataArray Unbatched ; TBitArray<SceneRenderingAllocator> BatchedLocalLights [ TVC_MAX ] ; uint32 BatchedLocalLightCount = 0 ; bool bAnyBatchedLightsWithVirtualShadowMaps = false ; } ; TArray<FPerViewData,SceneRenderingAllocator>& InjectionDataPerView ; void)",
    "insertText": "AddLightForInjection(const FViewInfo& View, const uint32 ViewIndex, TArrayView<const FVisibleLightInfo> VisibleLightInfos, const FLightSceneInfo& LightSceneInfo, const FProjectedShadowInfo* InProjectedShadowInfo = nullptr)"
  },
  {
    "label": "GetTranslucencyLightingVolumeParameters()",
    "kind": "Method",
    "detail": "Function (bool bCollectorSupportsBatching = false ; } ; FTranslucencyLightingVolumeParameters)",
    "insertText": "GetTranslucencyLightingVolumeParameters(FRDGBuilder& GraphBuilder, const FTranslucencyLightingVolumeTextures& Textures, const FViewInfo& View)"
  },
  {
    "label": "InjectTranslucencyLightingVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectTranslucencyLightingVolume(FRDGBuilder& GraphBuilder, const FViewInfo& View, const uint32 ViewIndex, const FScene* Scene, const FSceneRenderer& Renderer, const FTranslucencyLightingVolumeTextures& Textures, const FTranslucentLightInjectionCollector& Collector)"
  },
  {
    "label": "InjectSimpleTranslucencyLightingVolumeArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectSimpleTranslucencyLightingVolumeArray(FRDGBuilder& GraphBuilder, const FViewInfo& View, const uint32 ViewIndex, const uint32 ViewCount, const FTranslucencyLightingVolumeTextures& Textures, const FSimpleLightArray& SimpleLights)"
  },
  {
    "label": "FinalizeTranslucencyLightingVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeTranslucencyLightingVolume(FRDGBuilder& GraphBuilder, const TArrayView<const FViewInfo> Views, FTranslucencyLightingVolumeTextures& Textures)"
  },
  {
    "label": "InjectTranslucencyLightingVolumeAmbientCubemap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InjectTranslucencyLightingVolumeAmbientCubemap(FRDGBuilder& GraphBuilder, const TArrayView<const FViewInfo> Views, const FTranslucencyLightingVolumeTextures& Textures)"
  },
  {
    "label": "FilterTranslucencyLightingVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterTranslucencyLightingVolume(FRDGBuilder& GraphBuilder, const TArrayView<const FViewInfo> Views, FTranslucencyLightingVolumeTextures& Textures)"
  }
]