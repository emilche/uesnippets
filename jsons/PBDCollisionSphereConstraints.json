[
  {
    "label": "FPBDCollisionSphereConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionSphereConstraints"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPBDCollisionSphereConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # if ! COMPILE_WITHOUT_UNREAL_SUPPORT # include \" Chaos / Array . h \" # include \" Chaos / BoundingVolumeHierarchy . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / Map . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / PerParticleRule . h \" # include \" Chaos / Sphere . h \" # include<algorithm> namespace Chaos { class FPBDCollisionSphereConstraints : public FPerParticleRule { public :)",
    "insertText": "FPBDCollisionSphereConstraints(const FPBDParticles& InParticles, const TSet<TVec2<int32>>& DisabledCollisionElements, const FReal Dt, const FReal Height = (FReal)0.) : MH(Height)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MObjects .)",
    "insertText": "Add(Chaos::FImplicitObjectPtr(new TSphere<FReal, 3>(InParticles.P(i), Height)))"
  },
  {
    "label": "Hierarchy()",
    "kind": "Method",
    "detail": "Function (} TBoundingVolumeHierarchy<TArray<Chaos::FImplicitObjectPtr>,TArray<int32>>)",
    "insertText": "Hierarchy(MObjects)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (FCriticalSection CriticalSection ;)",
    "insertText": "PhysicsParallelFor(InParticles.Size(), [&](int32 Index) { TArray<int32> PotentialIntersections = Hierarchy.FindAllIntersections(InParticles.P(Index)); for (int32 i = 0; i < PotentialIntersections.Num(); ++i) { int32 Index2 = PotentialIntersections[i]; if (Index == Index2 || DisabledCollisionElements.Contains(TVector<int32, 2>(Index, Index2))) continue; if ((InParticles.P(Index2) - InParticles.P(Index)).Size() < Height) { CriticalSection.Lock(); MConstraints.FindOrAdd(Index).Add(Index2); CriticalSection.Unlock(); } } })"
  },
  {
    "label": "FPBDCollisionSphereConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDCollisionSphereConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt, const int32 Index)"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (FVec3 Normal ; FReal Phi = MObjects [ MConstraints [ Index ] [ i ] ] ->)",
    "insertText": "PhiWithNormal(InParticles.P(Index), Normal)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(Index)"
  }
]