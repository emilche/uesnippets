[
  {
    "label": "SamplingHeapProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SamplingHeapProfiler"
  },
  {
    "label": "GlobalActivityTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalActivityTracker"
  },
  {
    "label": "MallocDumpProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MallocDumpProvider"
  },
  {
    "label": "ThreadLocalStorageTestInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadLocalStorageTestInternal"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SequenceCheckerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceCheckerImpl"
  },
  {
    "label": "ThreadCheckerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadCheckerImpl"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "trace_event",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "trace_event"
  },
  {
    "label": "debug",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "debug"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_THREAD_LOCAL_STORAGE_H_ # define BASE_THREADING_THREAD_LOCAL_STORAGE_H_ # include<stdint . h> # include \" base / base_export . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/windows_types.h\" #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class SamplingHeapProfiler ; namespace debug { class GlobalActivityTracker ; } namespace trace_event { class MallocDumpProvider ; } namespace internal { class ThreadLocalStorageTestInternal ; class BASE_EXPORT PlatformThreadLocalStorage { public : # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (enum : unsigned { TLS_KEY_OUT_OF_INDEXES = TLS_OUT_OF_INDEXES } ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "AllocTLS()",
    "kind": "Method",
    "detail": "Function (enum { TLS_KEY_OUT_OF_INDEXES = 0 x7FFFFFFF } ; # endif bool)",
    "insertText": "AllocTLS(TLSKey* key)"
  },
  {
    "label": "FreeTLS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeTLS(TLSKey key)"
  },
  {
    "label": "SetTLSValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTLSValue(TLSKey key, void* value)"
  },
  {
    "label": "GetTLSValue()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetTLSValue(TLSKey key)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) return TlsGetValue(key)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) return pthread_getspecific(key)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif } # if)",
    "insertText": "BUILDFLAG(IS_WIN) static void OnThreadExit()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA) static void OnThreadExit(void* value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif } ; } class BASE_EXPORT ThreadLocalStorage { public : typedef)",
    "insertText": "void(*TLSDestructorFunc)(void* value)"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (class BASE_EXPORT Slot final { public :)",
    "insertText": "Slot(TLSDestructorFunc destructor = nullptr)"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Slot(const Slot&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Slot&)",
    "insertText": "operator(const Slot&)"
  },
  {
    "label": "Slot()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Slot()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Get()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(void* value)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize(TLSDestructorFunc destructor)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free()"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (size_t kInvalidSlotValue = static_cast<)",
    "insertText": "size_t(-1)"
  },
  {
    "label": "ThreadLocalStorage()",
    "kind": "Method",
    "detail": "Function (size_t slot_ = kInvalidSlotValue ; uint32_t version_ = 0 ; } ;)",
    "insertText": "ThreadLocalStorage(const ThreadLocalStorage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ThreadLocalStorage&)",
    "insertText": "operator(const ThreadLocalStorage&)"
  },
  {
    "label": "HasBeenDestroyed()",
    "kind": "Method",
    "detail": "Function (private : class SequenceCheckerImpl ; class SamplingHeapProfiler ; class ThreadCheckerImpl ; class internal::ThreadLocalStorageTestInternal ; class trace_event::MallocDumpProvider ; class debug::GlobalActivityTracker ; bool)",
    "insertText": "HasBeenDestroyed()"
  }
]