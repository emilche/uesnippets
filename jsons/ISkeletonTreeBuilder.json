[
  {
    "label": "ISkeletonTreeItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeItem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTextFilterExpressionEvaluator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextFilterExpressionEvaluator"
  },
  {
    "label": "SKELETONEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SKELETONEDITOR_API"
  },
  {
    "label": "FSkeletonTreeFilterArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonTreeFilterArgs"
  },
  {
    "label": "ISkeletonTreeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTreeBuilder"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "IPersonaPreviewScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPersonaPreviewScene"
  },
  {
    "label": "FSkeletonTreeBuilderOutput()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / ArrayView . h \" # include \" Misc / TextFilterExpressionEvaluator . h \" class ISkeletonTreeItem ; enum class ESkeletonTreeFilterResult : int32 ; class FTextFilterExpressionEvaluator ; struct FSkeletonTreeBuilderOutput {)",
    "insertText": "FSkeletonTreeBuilderOutput(TArray<TSharedPtr<class ISkeletonTreeItem>>& InItems, TArray<TSharedPtr<class ISkeletonTreeItem>>& InLinearItems) : Items(InItems) , LinearItems(InLinearItems)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const TSharedPtr<class ISkeletonTreeItem>& InItem, const FName& InParentName, TArrayView<const FName> InParentTypes, bool bAddToHead = false)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(InItem, InParentName, MakeArrayView(InParentTypes), bAddToHead)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Add(const TSharedPtr<class ISkeletonTreeItem>& InItem, const FName& InParentName, const FName& InParentType, bool bAddToHead = false)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ISkeletonTreeItem>)",
    "insertText": "Find(const FName& InName, TArrayView<const FName> InTypes)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<class ISkeletonTreeItem>)",
    "insertText": "Find(const FName& InName, const FName& InType)"
  },
  {
    "label": "FSkeletonTreeFilterArgs()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<class ISkeletonTreeItem>>& Items ; TArray<TSharedPtr<class ISkeletonTreeItem>>& LinearItems ; } ; struct FSkeletonTreeFilterArgs {)",
    "insertText": "FSkeletonTreeFilterArgs(TSharedPtr<FTextFilterExpressionEvaluator> InTextFilter) : TextFilter(InTextFilter) , bFlattenHierarchyOnFilter(true)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FTextFilterExpressionEvaluator> TextFilter ; bool bFlattenHierarchyOnFilter ; } ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(ESkeletonTreeFilterResult, FOnFilterSkeletonTreeItem, const FSkeletonTreeFilterArgs& , const TSharedPtr<class ISkeletonTreeItem>&)"
  },
  {
    "label": "ISkeletonTreeBuilder()",
    "kind": "Method",
    "detail": "Function (class ISkeletonTreeBuilder : public TSharedFromThis<ISkeletonTreeBuilder> { public : ~)",
    "insertText": "ISkeletonTreeBuilder()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Initialize(const TSharedRef<class ISkeletonTree>& InSkeletonTree, const TSharedPtr<class IPersonaPreviewScene>& InPreviewScene, FOnFilterSkeletonTreeItem InOnFilterSkeletonTreeItem)"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Build(FSkeletonTreeBuilderOutput& Output)"
  },
  {
    "label": "Filter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Filter(const FSkeletonTreeFilterArgs& InArgs, const TArray<TSharedPtr<class ISkeletonTreeItem>>& InItems, TArray<TSharedPtr<class ISkeletonTreeItem>>& OutFilteredItems)"
  },
  {
    "label": "FilterItem()",
    "kind": "Method",
    "detail": "Function (ESkeletonTreeFilterResult)",
    "insertText": "FilterItem(const FSkeletonTreeFilterArgs& InArgs, const TSharedPtr<class ISkeletonTreeItem>& InItem)"
  },
  {
    "label": "IsShowingBones()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingBones()"
  },
  {
    "label": "IsShowingSockets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingSockets()"
  },
  {
    "label": "IsShowingAttachedAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingAttachedAssets()"
  }
]