[
  {
    "label": "FImplicitObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImplicitObject"
  },
  {
    "label": "FPBDCollisionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraints"
  },
  {
    "label": "FPBDRigidsSOAs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDRigidsSOAs"
  },
  {
    "label": "FPBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraint"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FPBDCollisionConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDCollisionConstraintHandle"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / Collision / CollisionApplyType . h \" # include \" Chaos / Collision / CollisionConstraintAllocator . h \" # include \" Chaos / Collision / CollisionContext . h \" # include \" Chaos / Collision / PBDCollisionConstraint . h \" # include \" Chaos / Collision / PBDCollisionConstraintHandle . h \" # include \" Chaos / Collision / PBDCollisionSolverSettings . h \" # include \" Chaos / PBDConstraintContainer . h \" # include \" Framework / BufferedData . h \" # include<memory> # include<queue> # include<sstream> # include \" BoundingVolume . h \" # include \" AABBTree . h \" namespace Chaos { class FImplicitObject ; class FPBDCollisionConstraints ; class FPBDRigidsSOAs ; class FPBDCollisionConstraint ; using FRigidBodyContactConstraintsPostComputeCallback = TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FRigidBodyContactConstraintsPostApplyCallback = TFunction<)",
    "insertText": "void(const FReal Dt, const TArray<FPBDCollisionConstraintHandle*>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FRigidBodyContactConstraintsPostApplyPushOutCallback = TFunction<)",
    "insertText": "void(const FReal Dt, const TArray<FPBDCollisionConstraintHandle*>&, bool)"
  },
  {
    "label": "FPBDCollisionConstraints()",
    "kind": "Method",
    "detail": "Function (namespace Private { enum class ECollisionSolverType { GaussSeidel,GaussSeidelSimd,PartialJacobi,} ; } class FPBDCollisionConstraints : public FPBDConstraintContainer { public : class FPBDCollisionConstraintHandle ; using Base = FPBDIndexedConstraintContainer ; using FHandles = TArrayView<FPBDCollisionConstraint* const> ; using FConstHandles = TArrayView<const FPBDCollisionConstraint* const> ; using FConstraintContainerHandle = FPBDCollisionConstraintHandle ;)",
    "insertText": "FPBDCollisionConstraints(const FPBDRigidsSOAs& InParticles, TArrayCollectionArray<bool>& Collided, const TArrayCollectionArray<TSerializablePtr<FChaosPhysicsMaterial>>& PhysicsMaterials, const TArrayCollectionArray<TUniquePtr<FChaosPhysicsMaterial>>& PerParticlePhysicsMaterials, const THandleArray<FChaosPhysicsMaterial>* const SimMaterials, const int32 NumCollisionsPerBlock = 1000, const FReal RestitutionThreshold = FReal(2000))"
  },
  {
    "label": "FPBDCollisionConstraints()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPBDCollisionConstraints()"
  },
  {
    "label": "GetHandlesEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetHandlesEnabled()"
  },
  {
    "label": "SetIsDeterministic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsDeterministic(const bool bInIsDeterministic)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "BeginDetectCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDetectCollisions()"
  },
  {
    "label": "EndDetectCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDetectCollisions()"
  },
  {
    "label": "DetectProbeCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetectProbeCollisions(FReal Dt)"
  },
  {
    "label": "ApplyMidPhaseModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMidPhaseModifier(const TArray<ISimCallbackObject*>& MidPhaseModifiers, FReal Dt)"
  },
  {
    "label": "ApplyCCDModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCCDModifier(const TArray<ISimCallbackObject*>& CCDModifiers, FReal Dt)"
  },
  {
    "label": "ApplyCollisionModifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCollisionModifier(const TArray<ISimCallbackObject*>& CollisionModifiers, FReal Dt)"
  },
  {
    "label": "RemoveConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraints(const TSet<FGeometryParticleHandle*>& ParticleHandle)"
  },
  {
    "label": "DisconnectConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisconnectConstraints(const TSet<FGeometryParticleHandle*>& ParticleHandles)"
  },
  {
    "label": "DisableConstraints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableConstraints(const TSet<FGeometryParticleHandle*>& ParticleHandle)"
  },
  {
    "label": "GetNumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumConstraints()"
  },
  {
    "label": "ResetConstraints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetConstraints()"
  },
  {
    "label": "AddConstraintsToGraph()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddConstraintsToGraph(Private::FPBDIslandManager& IslandManager)"
  },
  {
    "label": "PrepareTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareTick()"
  },
  {
    "label": "UnprepareTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnprepareTick()"
  },
  {
    "label": "CreateSceneSolver()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateSceneSolver(const int32 Priority)"
  },
  {
    "label": "CreateGroupSolver()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FConstraintContainerSolver>)",
    "insertText": "CreateGroupSolver(const int32 Priority)"
  },
  {
    "label": "GetSolverType()",
    "kind": "Method",
    "detail": "Function (Private::ECollisionSolverType)",
    "insertText": "GetSolverType()"
  },
  {
    "label": "SetCanDisableContacts()",
    "kind": "Method",
    "detail": "Function (CollisionSolverType = InSolverType ; } void)",
    "insertText": "SetCanDisableContacts(bool bInCanDisableContacts)"
  },
  {
    "label": "GetCanDisableContacts()",
    "kind": "Method",
    "detail": "Function (bCanDisableContacts = bInCanDisableContacts ; } bool)",
    "insertText": "GetCanDisableContacts()"
  },
  {
    "label": "GetRestitutionThreshold()",
    "kind": "Method",
    "detail": "Function (RestitutionThreshold = InRestitutionThreshold ; } FReal)",
    "insertText": "GetRestitutionThreshold()"
  },
  {
    "label": "GetCollisionsEnabled()",
    "kind": "Method",
    "detail": "Function (bEnableCollisions = bInEnableCollisions ; } bool)",
    "insertText": "GetCollisionsEnabled()"
  },
  {
    "label": "GetRestitutionEnabled()",
    "kind": "Method",
    "detail": "Function (bEnableRestitution = bInEnableRestitution ; } bool)",
    "insertText": "GetRestitutionEnabled()"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (GravityDirection = InGravity ; GravitySize = GravityDirection .)",
    "insertText": "SafeNormalize()"
  },
  {
    "label": "GetGravityDirection()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetGravityDirection()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (SolverSettings . MaxPushOutVelocity =)",
    "insertText": "Max(InMaxPushOutVelocity, FReal(0))"
  },
  {
    "label": "SetDepenetrationVelocity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDepenetrationVelocity(const FRealSingle InVel)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float MaxDepenetrationVelocity = 1 e10f ;)",
    "insertText": "if(InVel >= 0.0f)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (SolverSettings . DepenetrationVelocity =)",
    "insertText": "Min(InVel, MaxDepenetrationVelocity)"
  },
  {
    "label": "SetPositionFrictionIterations()",
    "kind": "Method",
    "detail": "Function (} else { SolverSettings . DepenetrationVelocity = MaxDepenetrationVelocity ; } } void)",
    "insertText": "SetPositionFrictionIterations(const int32 InNumIterations)"
  },
  {
    "label": "SetVelocityFrictionIterations()",
    "kind": "Method",
    "detail": "Function (SolverSettings . NumPositionFrictionIterations = InNumIterations ; } void)",
    "insertText": "SetVelocityFrictionIterations(const int32 InNumIterations)"
  },
  {
    "label": "SetPositionShockPropagationIterations()",
    "kind": "Method",
    "detail": "Function (SolverSettings . NumVelocityFrictionIterations = InNumIterations ; } void)",
    "insertText": "SetPositionShockPropagationIterations(const int32 InNumIterations)"
  },
  {
    "label": "SetVelocityShockPropagationIterations()",
    "kind": "Method",
    "detail": "Function (SolverSettings . NumPositionShockPropagationIterations = InNumIterations ; } void)",
    "insertText": "SetVelocityShockPropagationIterations(const int32 InNumIterations)"
  },
  {
    "label": "IsShockPropagationEnabled()",
    "kind": "Method",
    "detail": "Function (SolverSettings . NumVelocityShockPropagationIterations = InNumIterations ; } bool)",
    "insertText": "IsShockPropagationEnabled()"
  },
  {
    "label": "NumConstraints()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumConstraints()"
  },
  {
    "label": "GetConstraints()",
    "kind": "Method",
    "detail": "Function (} TArrayView<FPBDCollisionConstraint* const>)",
    "insertText": "GetConstraints()"
  },
  {
    "label": "GetConstraintHandles()",
    "kind": "Method",
    "detail": "Function (} FHandles)",
    "insertText": "GetConstraintHandles()"
  },
  {
    "label": "GetConstConstraintHandles()",
    "kind": "Method",
    "detail": "Function (FConstHandles)",
    "insertText": "GetConstConstraintHandles()"
  },
  {
    "label": "GetConstraint()",
    "kind": "Method",
    "detail": "Function (const FPBDCollisionConstraint&)",
    "insertText": "GetConstraint(int32 Index)"
  },
  {
    "label": "GetConstraintAllocator()",
    "kind": "Method",
    "detail": "Function (Private::FCollisionConstraintAllocator&)",
    "insertText": "GetConstraintAllocator()"
  },
  {
    "label": "GetSolverSettings()",
    "kind": "Method",
    "detail": "Function (const FPBDCollisionSolverSettings&)",
    "insertText": "GetSolverSettings()"
  },
  {
    "label": "SetCullDistance()",
    "kind": "Method",
    "detail": "Function (DetectorSettings = InSettings ; } void)",
    "insertText": "SetCullDistance(const FReal InCullDistance)"
  },
  {
    "label": "SetVelocityBoundsExpansion()",
    "kind": "Method",
    "detail": "Function (DetectorSettings . BoundsExpansion = InCullDistance ; } void)",
    "insertText": "SetVelocityBoundsExpansion(const FReal BoundsVelocityMultiplier, const FReal MaxVelocityBoundsExpansion)"
  },
  {
    "label": "SetVelocityBoundsExpansionMACD()",
    "kind": "Method",
    "detail": "Function (DetectorSettings . BoundsVelocityInflation = BoundsVelocityMultiplier ; DetectorSettings . MaxVelocityBoundsExpansion = MaxVelocityBoundsExpansion ; } void)",
    "insertText": "SetVelocityBoundsExpansionMACD(const FReal BoundsVelocityMultiplier, const FReal MaxVelocityBoundsExpansion)"
  },
  {
    "label": "SetAllowManifolds()",
    "kind": "Method",
    "detail": "Function (DetectorSettings . BoundsVelocityInflationMACD = BoundsVelocityMultiplier ; DetectorSettings . MaxVelocityBoundsExpansionMACD = MaxVelocityBoundsExpansion ; } void)",
    "insertText": "SetAllowManifolds(const bool bAllowManifolds)"
  },
  {
    "label": "PruneEdgeCollisions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneEdgeCollisions()"
  },
  {
    "label": "ConcreteContainer()",
    "kind": "Method",
    "detail": "Function (private : const FPBDRigidsSOAs& Particles ; Private::FCollisionConstraintAllocator ConstraintAllocator ; int32 NumActivePointConstraints ; TArray<FPBDCollisionConstraintHandle*> TempCollisions ; TArrayCollectionArray<bool>& MCollided ; const TArrayCollectionArray<TSerializablePtr<FChaosPhysicsMaterial>>& MPhysicsMaterials ; const TArrayCollectionArray<TUniquePtr<FChaosPhysicsMaterial>>& MPerParticlePhysicsMaterials ; const THandleArray<FChaosPhysicsMaterial>* const SimMaterials ; FReal RestitutionThreshold ; bool bEnableCollisions ; bool bEnableRestitution ; bool bHandlesEnabled ; bool bEnableEdgePruning ; bool bIsDeterministic ; bool bCanDisableContacts ; Private::ECollisionSolverType CollisionSolverType ; FVec3 GravityDirection ; FReal GravitySize ; FPBDCollisionSolverSettings SolverSettings ; FCollisionDetectorSettings DetectorSettings ; } ; const FPBDCollisionConstraints*)",
    "insertText": "ConcreteContainer()"
  },
  {
    "label": "GetContact()",
    "kind": "Method",
    "detail": "Function (} const FPBDCollisionConstraint&)",
    "insertText": "GetContact()"
  },
  {
    "label": "GetCCDEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetCCDEnabled()"
  },
  {
    "label": "SetEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetEnabled(bool InEnabled)"
  },
  {
    "label": "GetContact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContact().SetDisabled(!InEnabled)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "IsProbe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProbe()"
  },
  {
    "label": "GetAccumulatedImpulse()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetAccumulatedImpulse()"
  },
  {
    "label": "GetConstrainedParticles()",
    "kind": "Method",
    "detail": "Function (} FParticlePair)",
    "insertText": "GetConstrainedParticles()"
  }
]