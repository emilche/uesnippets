[
  {
    "label": "rotation_base_generic_product_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "rotation_base_generic_product_selector"
  },
  {
    "label": "RotationBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RotationBase"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ROTATIONBASE_H # define EIGEN_ROTATIONBASE_H namespace Eigen { namespace internal { template<RotationDerived,MatrixType,bool IsVector = MatrixType::IsVectorAtCompileTime> struct rotation_base_generic_product_selector ; } template<Derived,int _Dim> class RotationBase { public : enum { Dim = _Dim } ; typedef internal::traits<Derived>::Scalar Scalar ; typedef Matrix<Scalar,Dim,Dim> RotationMatrixType ; typedef Matrix<Scalar,Dim,1> VectorType ; public : EIGEN_DEVICE_FUNC const Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "toRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC RotationMatrixType)",
    "insertText": "toRotationMatrix()"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC RotationMatrixType)",
    "insertText": "matrix()"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Derived)",
    "insertText": "inverse()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Transform<Scalar,Dim,Isometry>)",
    "insertText": "operator(const Translation<Scalar,Dim>& t)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC RotationMatrixType)",
    "insertText": "operator(const UniformScaling<Scalar>& s)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::rotation_base_generic_product_selector<Derived,OtherDerived,OtherDerived::IsVectorAtCompileTime>::ReturnType)",
    "insertText": "operator(const EigenBase<OtherDerived>& e)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC RotationMatrixType)",
    "insertText": "operator(const EigenBase<OtherDerived>& l, const Derived& r)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Transform<Scalar,Dim,Affine>)",
    "insertText": "operator(const DiagonalMatrix<Scalar,Dim>& l, const Derived& r)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (Transform<Scalar,Dim,Affine>)",
    "insertText": "res(r)"
  },
  {
    "label": "linear()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "linear().applyOnTheLeft(l)"
  },
  {
    "label": "_transformVector()",
    "kind": "Method",
    "detail": "Function (} template<OtherVectorType> EIGEN_DEVICE_FUNC VectorType)",
    "insertText": "_transformVector(const OtherVectorType& v)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<RotationDerived,MatrixType> struct rotation_base_generic_product_selector<RotationDerived,MatrixType,false> { enum { Dim = RotationDerived::Dim } ; typedef Matrix<RotationDerived::Scalar,Dim,Dim> ReturnType ; EIGEN_DEVICE_FUNC ReturnType)",
    "insertText": "run(const RotationDerived& r, const MatrixType& m)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<RotationDerived,Scalar,int Dim,int MaxDim> struct rotation_base_generic_product_selector<RotationDerived,DiagonalMatrix<Scalar,Dim,MaxDim>,false> { typedef Transform<Scalar,Dim,Affine> ReturnType ; EIGEN_DEVICE_FUNC ReturnType)",
    "insertText": "run(const RotationDerived& r, const DiagonalMatrix<Scalar,Dim,MaxDim>& m)"
  },
  {
    "label": "linear()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "linear()"
  },
  {
    "label": "Matrix()",
    "kind": "Method",
    "detail": "Function (} } ; } template<_Scalar,int _Rows,int _Cols,int _Storage,int _MaxRows,int _MaxCols> template<OtherDerived> EIGEN_DEVICE_FUNC Matrix<_Scalar,_Rows,_Cols,_Storage,_MaxRows,_MaxCols)",
    "insertText": "Matrix(const RotationBase<OtherDerived,ColsAtCompileTime>& r)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE(Matrix,int(OtherDerived::Dim),int(OtherDerived::Dim)) *this = r.toRotationMatrix()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<_Scalar,int _Rows,int _Cols,int _Storage,int _MaxRows,int _MaxCols> template<OtherDerived> EIGEN_DEVICE_FUNC Matrix<_Scalar,_Rows,_Cols,_Storage,_MaxRows,_MaxCols>& Matrix<_Scalar,_Rows,_Cols,_Storage,_MaxRows,_MaxCols)",
    "insertText": "operator(const RotationBase<OtherDerived,ColsAtCompileTime>& r)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_MATRIX_SPECIFIC_SIZE(Matrix,int(OtherDerived::Dim),int(OtherDerived::Dim)) return *this = r.toRotationMatrix()"
  },
  {
    "label": "toRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<Scalar,int Dim> EIGEN_DEVICE_FUNC Matrix<Scalar,2,2>)",
    "insertText": "toRotationMatrix(const Scalar& s)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(Dim==2,YOU_MADE_A_PROGRAMMING_MISTAKE) return Rotation2D<Scalar>(s).toRotationMatrix()"
  },
  {
    "label": "toRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,int Dim,OtherDerived> EIGEN_DEVICE_FUNC Matrix<Scalar,Dim,Dim>)",
    "insertText": "toRotationMatrix(const RotationBase<OtherDerived,Dim>& r)"
  },
  {
    "label": "toRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,int Dim,OtherDerived> EIGEN_DEVICE_FUNC const MatrixBase<OtherDerived>&)",
    "insertText": "toRotationMatrix(const MatrixBase<OtherDerived>& mat)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(OtherDerived::RowsAtCompileTime==Dim && OtherDerived::ColsAtCompileTime==Dim, YOU_MADE_A_PROGRAMMING_MISTAKE)"
  }
]