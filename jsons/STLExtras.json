[
  {
    "label": "Ty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ty"
  },
  {
    "label": "identity",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "identity"
  },
  {
    "label": "Ty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ty"
  },
  {
    "label": "less_ptr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "less_ptr"
  },
  {
    "label": "Ty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Ty"
  },
  {
    "label": "greater_ptr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "greater_ptr"
  },
  {
    "label": "does",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "does"
  },
  {
    "label": "function_ref",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_ref"
  },
  {
    "label": "function_ref",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "function_ref"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "RootIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootIt"
  },
  {
    "label": "UnaryFunc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnaryFunc"
  },
  {
    "label": "mapped_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "mapped_iterator"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "Func",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Func"
  },
  {
    "label": "ItTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ItTy"
  },
  {
    "label": "FuncTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuncTy"
  },
  {
    "label": "has_rbegin_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has_rbegin_impl"
  },
  {
    "label": "has_rbegin",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "has_rbegin"
  },
  {
    "label": "filter_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "filter_iterator"
  },
  {
    "label": "PayloadType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PayloadType"
  },
  {
    "label": "UnaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnaryPredicate"
  },
  {
    "label": "index_sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_sequence"
  },
  {
    "label": "index_sequence_for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_sequence_for"
  },
  {
    "label": "zip_first",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "zip_first"
  },
  {
    "label": "zip_shortest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "zip_shortest"
  },
  {
    "label": "ItType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ItType"
  },
  {
    "label": "zippy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "zippy"
  },
  {
    "label": "less_first",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "less_first"
  },
  {
    "label": "less_second",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "less_second"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "integer_sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "integer_sequence"
  },
  {
    "label": "index_sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_sequence"
  },
  {
    "label": "build_index_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "build_index_impl"
  },
  {
    "label": "build_index_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "build_index_impl"
  },
  {
    "label": "index_sequence_for",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "index_sequence_for"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "IteratorTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorTy"
  },
  {
    "label": "IteratorTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IteratorTy"
  },
  {
    "label": "UnaryPredicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UnaryPredicate"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FreeDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FreeDeleter"
  },
  {
    "label": "pair_hash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pair_hash"
  },
  {
    "label": "less",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "less"
  },
  {
    "label": "equal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "equal"
  },
  {
    "label": "deref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "deref"
  },
  {
    "label": "Fn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "Fn(*current)"
  },
  {
    "label": "mapped_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mapped_iterator(current + n, Fn)"
  },
  {
    "label": "mapped_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mapped_iterator(current - n, Fn)"
  },
  {
    "label": "make_filter_range()",
    "kind": "Method",
    "detail": "Function (PT>>)",
    "insertText": "make_filter_range(RT &&, PT)"
  },
  {
    "label": "all_of()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "all_of(R &&range, UnaryPredicate &&P)"
  },
  {
    "label": "deres()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "deres(index_sequence_for<Iters...>{})"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "test(other, index_sequence_for<Iters...>{})"
  },
  {
    "label": "begin_impl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "begin_impl(index_sequence_for<Args...>{})"
  },
  {
    "label": "end_impl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end_impl(index_sequence_for<Args...>{})"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "func(*lhs, *rhs)"
  }
]