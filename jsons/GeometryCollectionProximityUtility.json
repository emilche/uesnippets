[
  {
    "label": "FGeometryCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollection"
  },
  {
    "label": "FConvexHulls",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConvexHulls"
  },
  {
    "label": "FCollectionHierarchyFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionHierarchyFacade"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeometryCollectionProximityUtility",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGeometryCollectionProximityUtility"
  },
  {
    "label": "FGeometryContactEdge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryContactEdge"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" GeometryCollectionProximityUtility . generated . h \" class FGeometryCollection ; namespace UE::GeometryCollectionConvexUtility { struct FConvexHulls ; } namespace Chaos::Facades { class FCollectionHierarchyFacade ; })",
    "insertText": "UENUM()"
  },
  {
    "label": "FGeometryCollectionProximityUtility()",
    "kind": "Method",
    "detail": "Function (None,ConvexHullContactArea } ; class FGeometryCollectionProximityUtility { public :)",
    "insertText": "FGeometryCollectionProximityUtility(FGeometryCollection* InCollection)"
  },
  {
    "label": "UpdateProximity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateProximity(UE::GeometryCollectionConvexUtility::FConvexHulls* OptionalComputedHulls = nullptr)"
  },
  {
    "label": "RequireProximity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequireProximity(UE::GeometryCollectionConvexUtility::FConvexHulls* OptionalComputedHulls = nullptr)"
  },
  {
    "label": "InvalidateProximity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateProximity()"
  },
  {
    "label": "EnumerateNeighbors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateNeighbors(const Chaos::Facades::FCollectionHierarchyFacade& Hierarchy, int32 BoneIdx, TFunctionRef<void(int32)> NeighborFunc, bool bIncludeNeighborsInParentLevels = true, bool bFilterDuplicates = true)"
  },
  {
    "label": "FGeometryContactEdge()",
    "kind": "Method",
    "detail": "Function (struct FGeometryContactEdge { int32 GeometryIndices [ 2 ] ; float ContactArea ; float MaxContactArea ; float SharpContactWidth ; float MaxSharpContact ;)",
    "insertText": "FGeometryContactEdge()"
  },
  {
    "label": "FGeometryContactEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FGeometryContactEdge(int32 GeoIdxA, int32 GeoIdxB, float ContactArea, float MaxContactArea, float SharpContactWidth, float MaxSharpContact)"
  },
  {
    "label": "ContactArea()",
    "kind": "Method",
    "detail": "Function (GeoIdxA,GeoIdxB },)",
    "insertText": "ContactArea(ContactArea), MaxContactArea(MaxContactArea), SharpContactWidth(SharpContactWidth), MaxSharpContact(MaxSharpContact)"
  },
  {
    "label": "ComputeConvexGeometryContactFromProximity()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FGeometryContactEdge>)",
    "insertText": "ComputeConvexGeometryContactFromProximity(FGeometryCollection* Collection, float DistanceTolerance, UE::GeometryCollectionConvexUtility::FConvexHulls& LocalHulls)"
  },
  {
    "label": "CopyProximityToConnectionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyProximityToConnectionGraph(const TArray<FGeometryContactEdge>* ContactEdges = nullptr)"
  },
  {
    "label": "ClearConnectionGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearConnectionGraph()"
  }
]