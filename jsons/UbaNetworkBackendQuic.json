[
  {
    "label": "QUIC_API_TABLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_API_TABLE"
  },
  {
    "label": "QUIC_HANDLE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_HANDLE"
  },
  {
    "label": "QUIC_CONNECTION_EVENT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_CONNECTION_EVENT"
  },
  {
    "label": "QUIC_STREAM_EVENT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_STREAM_EVENT"
  },
  {
    "label": "QUIC_LISTENER_EVENT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_LISTENER_EVENT"
  },
  {
    "label": "QUIC_SETTINGS",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QUIC_SETTINGS"
  },
  {
    "label": "NetworkBackendQuic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NetworkBackendQuic"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Connection"
  },
  {
    "label": "Stream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stream"
  },
  {
    "label": "NetworkBackendQuic()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaEvent . h \" # include \" UbaNetworkBackend . h \" # include \" UbaLogger . h \" # ifndef UBA_USE_QUIC # define UBA_USE_QUIC 0 # endif # if UBA_USE_QUIC typedef struct QUIC_API_TABLE QUIC_API_TABLE ; typedef struct QUIC_HANDLE QUIC_HANDLE ; typedef struct QUIC_HANDLE* HQUIC ; typedef struct QUIC_CONNECTION_EVENT QUIC_CONNECTION_EVENT ; typedef struct QUIC_STREAM_EVENT QUIC_STREAM_EVENT ; typedef struct QUIC_LISTENER_EVENT QUIC_LISTENER_EVENT ; typedef struct QUIC_SETTINGS QUIC_SETTINGS ; # define QUIC_STATUS long namespace uba { struct NetworkBackendQuic : public NetworkBackend { public :)",
    "insertText": "NetworkBackendQuic(LogWriter& writer, const wchar_t* prefix = L\"NetworkBackendQuic\")"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(const char* app)"
  },
  {
    "label": "NetworkBackendQuic()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkBackendQuic()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown(void* connection)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(void* connection)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Send(Logger& logger, void* connection, const void* data, u32 dataSize, SendContext& sendContext)"
  },
  {
    "label": "SetDataSentCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataSentCallback(void* connection, void* context, DataSentCallback* callback)"
  },
  {
    "label": "SetRecvCallbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvCallbacks(void* connection, void* context, u32 headerSize, RecvHeaderCallback* h, RecvBodyCallback* b, const wchar_t* recvHint)"
  },
  {
    "label": "SetRecvTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRecvTimeout(void* connection, u32 timeoutMs)"
  },
  {
    "label": "SetDisconnectCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisconnectCallback(void* connection, void* context, DisconnectCallback* callback)"
  },
  {
    "label": "StartListen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartListen(Logger& logger, u16 port, const wchar_t* ip, const ListenConnectedFunc& connectedFunc)"
  },
  {
    "label": "StopListen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopListen()"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(Logger& logger, const wchar_t* ip, const ConnectedFunc& connectedFunc, u16 port = DefaultPort, bool* timedOut = nullptr)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Connect(Logger& logger, const sockaddr& remoteSocketAddr, const ConnectedFunc& connectedFunc, bool* timedOut = nullptr, const wchar_t* nameHint = nullptr)"
  },
  {
    "label": "StreamCallback()",
    "kind": "Method",
    "detail": "Function (private : struct Connection ; QUIC_STATUS)",
    "insertText": "StreamCallback(Connection& connection, HQUIC streamHandle, QUIC_STREAM_EVENT* Event)"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (LoggerWithWriter m_logger ; const QUIC_API_TABLE* m_msQuic = nullptr ; HQUIC m_registration = NULL ; HQUIC m_configuration = NULL ; struct Stream { HQUIC handle ; u8 headerData [ 1 6 ] ; u8 headerRead = 0 ; void* bodyContext = nullptr ; u8* bodyData = nullptr ; u32 bodySize = 0 ; u32 bodyRead = 0 ; } ; struct Connection {)",
    "insertText": "Connection(NetworkBackendQuic& b, HQUIC ch)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "ConnectionCallback()",
    "kind": "Method",
    "detail": "Function (NetworkBackendQuic& backend ; HQUIC connectionHandle ; AtomicU64 refCount ; UnorderedMap<HQUIC,Stream> recvStreams ; Event ready ; AtomicU64 streamHandleIt ; bool connected = false ; void* disconnectContext = nullptr ; DisconnectCallback* disconnectCallback = nullptr ; DataSentCallback* dataSentCallback = nullptr ; RecvHeaderCallback* headerCallback = nullptr ; RecvBodyCallback* bodyCallback = nullptr ; void* context = nullptr ; u32 headerSize = 0 ; } ; ReaderWriterLock m_connectionsLock ; UnorderedMap<HQUIC,Connection*> m_connections ; QUIC_STATUS)",
    "insertText": "ConnectionCallback(HQUIC Connection, QUIC_CONNECTION_EVENT* Event)"
  },
  {
    "label": "ListenerCallback()",
    "kind": "Method",
    "detail": "Function (QUIC_STATUS)",
    "insertText": "ListenerCallback(HQUIC Listener, QUIC_LISTENER_EVENT* Event)"
  },
  {
    "label": "ListenerConnectionCallback()",
    "kind": "Method",
    "detail": "Function (QUIC_STATUS)",
    "insertText": "ListenerConnectionCallback(HQUIC Connection, QUIC_CONNECTION_EVENT* Event)"
  },
  {
    "label": "StreamCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamCreated(HQUIC conn, HQUIC stream)"
  },
  {
    "label": "StreamShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamShutdown(Connection& conn, HQUIC streamHandle)"
  },
  {
    "label": "CloseConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseConnection(HQUIC connection)"
  },
  {
    "label": "CloseConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseConnection(Connection& connection)"
  },
  {
    "label": "InitNetworkSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitNetworkSettings(QUIC_SETTINGS& Settings, bool isClient)"
  },
  {
    "label": "LoadCredentials()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadCredentials(bool isClient)"
  }
]