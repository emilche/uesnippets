[
  {
    "label": "Span",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Span"
  },
  {
    "label": "npos()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_TYPES_SPAN_H_ # define ABSL_TYPES_SPAN_H_ # include<algorithm> # include<cassert> # include<cstddef> # include<initializer_list> # include<iterator> # include<type_traits> # include<utility> # include \" absl / base / attributes . h \" # include \" absl / base / internal / throw_delegate . h \" # include \" absl / base / macros . h \" # include \" absl / base / optimization . h \" # include \" absl / base / port . h \" # include \" absl / meta / type_traits . h \" # include \" absl / types / internal / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<T> class Span { private : template<C> using EnableIfConvertibleFrom = std::enable_if<span_internal::HasData<T,C>::value&& span_internal::HasSize<C>::value>::type ; template<U> using EnableIfValueIsConst = std::enable_if<std::is_const<T>::value,U>::type ; template<U> using EnableIfValueIsMutable = std::enable_if<! std::is_const<T>::value,U>::type ; public : using element_type = T ; using value_type = absl::remove_cv_t<T> ; using pointer = T* ; using const_pointer = const T* ; using reference = T& ; using const_reference = const T& ; using iterator = pointer ; using const_iterator = const_pointer ; using reverse_iterator = std::reverse_iterator<iterator> ; using const_reverse_iterator = std::reverse_iterator<const_iterator> ; using size_type = size_t ; using difference_type = ptrdiff_t ; const size_type)",
    "insertText": "npos(size_type(0))"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Span() noexcept : Span(nullptr, 0)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Span(pointer array, size_type length) noexcept : ptr_(array), len_(length)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (} template<size_t N>)",
    "insertText": "Span(T (&a)[N]) noexcept : Span(a, N)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (} template<V,= EnableIfConvertibleFrom<V>,= EnableIfValueIsMutable<V>,= span_internal::EnableIfNotIsView<V>>)",
    "insertText": "Span(V& v ABSL_ATTRIBUTE_LIFETIME_BOUND) noexcept : Span(span_internal::GetData(v), v.size())"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (} template<V,= EnableIfConvertibleFrom<V>,= EnableIfValueIsConst<V>,= span_internal::EnableIfNotIsView<V>>)",
    "insertText": "Span(const V& v ABSL_ATTRIBUTE_LIFETIME_BOUND) noexcept : Span(span_internal::GetData(v), v.size())"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (} template<V,= EnableIfConvertibleFrom<V>,= EnableIfValueIsMutable<V>,span_internal::EnableIfIsView<V> = 0>)",
    "insertText": "Span(V& v) noexcept : Span(span_internal::GetData(v), v.size())"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (} template<V,= EnableIfConvertibleFrom<V>,= EnableIfValueIsConst<V>,span_internal::EnableIfIsView<V> = 0>)",
    "insertText": "Span(const V& v) noexcept : Span(span_internal::GetData(v), v.size())"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (} template<LazyT = T,= EnableIfValueIsConst<LazyT>>)",
    "insertText": "Span(std::initializer_list<value_type> v ABSL_ATTRIBUTE_LIFETIME_BOUND) noexcept : Span(v.begin(), v.size())"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} pointer)",
    "insertText": "data()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator(size_type i)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "at(size_type i)"
  },
  {
    "label": "front()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "front()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "back()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "crbegin()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "crend()",
    "kind": "Method",
    "detail": "Function (} const_reverse_iterator)",
    "insertText": "crend()"
  },
  {
    "label": "remove_prefix()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "remove_prefix(size_type n)"
  },
  {
    "label": "ABSL_HARDENING_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_HARDENING_ASSERT(size() >= n)"
  },
  {
    "label": "remove_suffix()",
    "kind": "Method",
    "detail": "Function (ptr_ + = n ; len_ - = n ; } void)",
    "insertText": "remove_suffix(size_type n)"
  },
  {
    "label": "subspan()",
    "kind": "Method",
    "detail": "Function (len_ - = n ; } Span)",
    "insertText": "subspan(size_type pos = 0, size_type len = npos)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (} Span)",
    "insertText": "first(size_type len)"
  },
  {
    "label": "last()",
    "kind": "Method",
    "detail": "Function (} Span)",
    "insertText": "last(size_type len)"
  },
  {
    "label": "AbslHashValue()",
    "kind": "Method",
    "detail": "Function (} template<H> H)",
    "insertText": "AbslHashValue(H h, Span v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : pointer ptr_ ; size_type len_ ; } ; template<T> const Span<T>::size_type Span<T>::npos ; template<T> bool)",
    "insertText": "operator(Span<T> a, Span<T> b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(Span<const T> a, Span<T> b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "operator(Span<T> a, Span<const T> b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U,= span_internal::EnableIfConvertibleTo<U,absl::Span<const T>>> bool)",
    "insertText": "operator(const U& a, Span<T> b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<T,U,= span_internal::EnableIfConvertibleTo<U,absl::Span<const T>>> bool)",
    "insertText": "operator(Span<T> a, const U& b)"
  },
  {
    "label": "MakeSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,T> Span<T>)",
    "insertText": "MakeSpan(T* ptr, size_t size)"
  },
  {
    "label": "MakeSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,T> Span<T>)",
    "insertText": "MakeSpan(T* begin, T* end)"
  },
  {
    "label": "MakeSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,C> auto)",
    "insertText": "MakeSpan(C& c) noexcept -> decltype(absl::MakeSpan(span_internal::GetData(c), c.size()))"
  },
  {
    "label": "MakeSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,T,size_t N> Span<T>)",
    "insertText": "MakeSpan(T (&array)[N])"
  },
  {
    "label": "MakeConstSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,T> Span<const T>)",
    "insertText": "MakeConstSpan(T* ptr, size_t size)"
  },
  {
    "label": "MakeConstSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,T> Span<const T>)",
    "insertText": "MakeConstSpan(T* begin, T* end)"
  },
  {
    "label": "MakeConstSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,C> auto)",
    "insertText": "MakeConstSpan(const C& c) noexcept -> decltype(MakeSpan(c))"
  },
  {
    "label": "MakeConstSpan()",
    "kind": "Method",
    "detail": "Function (} template<int& . . . ExplicitArgumentBarrier,T,size_t N> Span<const T>)",
    "insertText": "MakeConstSpan(const T (&array)[N])"
  }
]