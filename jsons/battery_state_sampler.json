[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Observer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Observer"
  },
  {
    "label": "OnBatteryStateSampled()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_POWER_MONITOR_BATTERY_STATE_SAMPLER_H_ # define BASE_POWER_MONITOR_BATTERY_STATE_SAMPLER_H_ # include<memory> # include<vector> # include \" base / base_export . h \" # include \" base / observer_list . h \" # include \" base / observer_list_types . h \" # include \" base / power_monitor / battery_level_provider . h \" # include \" base / power_monitor / power_monitor_buildflags . h \" # include \" base / power_monitor / sampling_event_source . h \" # include \" base / sequence_checker . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base { class BASE_EXPORT BatteryStateSampler { public : class Observer : public base::CheckedObserver { public : void)",
    "insertText": "OnBatteryStateSampled(const absl::optional<BatteryLevelProvider::BatteryState>& battery_state)"
  },
  {
    "label": "BatteryStateSampler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "BatteryStateSampler(std::unique_ptr<SamplingEventSource> sampling_event_source = CreateSamplingEventSource(), std::unique_ptr<BatteryLevelProvider> battery_level_provider = BatteryLevelProvider::Create())"
  },
  {
    "label": "BatteryStateSampler()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BatteryStateSampler()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (BatteryStateSampler*)",
    "insertText": "Get()"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddObserver(Observer* observer)"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObserver(Observer* observer)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "CreateInstanceForTesting()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<base::BatteryStateSampler>)",
    "insertText": "CreateInstanceForTesting(std::unique_ptr<SamplingEventSource> sampling_event_source, std::unique_ptr<BatteryLevelProvider> battery_level_provider)"
  },
  {
    "label": "HasTestingInstance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasTestingInstance()"
  },
  {
    "label": "CreateSamplingEventSource()",
    "kind": "Method",
    "detail": "Function (private : std::unique_ptr<SamplingEventSource>)",
    "insertText": "CreateSamplingEventSource()"
  },
  {
    "label": "OnInitialBatteryStateSampled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialBatteryStateSampled(const absl::optional<BatteryLevelProvider::BatteryState>& battery_state)"
  },
  {
    "label": "OnSamplingEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSamplingEvent()"
  },
  {
    "label": "GUARDED_BY_CONTEXT()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SamplingEventSource> sampling_event_source_)",
    "insertText": "GUARDED_BY_CONTEXT(sequence_checker_)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]