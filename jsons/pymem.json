[
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_CPYTHON_PYMEM_H # error \" this header file must not be included directly \" # endif)",
    "insertText": "PyAPI_FUNC(void *) PyMem_RawMalloc(size_t size)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void *) PyMem_RawCalloc(size_t nelem, size_t elsize)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void *) PyMem_RawRealloc(void *ptr, size_t new_size)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) PyMem_RawFree(void *ptr)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(const char*) _PyMem_GetCurrentAllocatorName(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(char *) _PyMem_RawStrdup(const char *str)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(char *) _PyMem_Strdup(const char *str)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(wchar_t*) _PyMem_RawWcsdup(const wchar_t *str)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef enum { PYMEM_DOMAIN_RAW,PYMEM_DOMAIN_MEM,PYMEM_DOMAIN_OBJ } PyMemAllocatorDomain ; typedef enum { PYMEM_ALLOCATOR_NOT_SET = 0,PYMEM_ALLOCATOR_DEFAULT = 1,PYMEM_ALLOCATOR_DEBUG = 2,PYMEM_ALLOCATOR_MALLOC = 3,PYMEM_ALLOCATOR_MALLOC_DEBUG = 4,# ifdef WITH_PYMALLOC PYMEM_ALLOCATOR_PYMALLOC = 5,PYMEM_ALLOCATOR_PYMALLOC_DEBUG = 6,# endif } PyMemAllocatorName ; typedef struct { void* ctx ;)",
    "insertText": "void(*malloc) (void *ctx, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*calloc) (void *ctx, size_t nelem, size_t elsize)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*realloc) (void *ctx, void *ptr, size_t new_size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*free) (void *ctx, void *ptr)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (} PyMemAllocatorEx ;)",
    "insertText": "PyAPI_FUNC(void) PyMem_GetAllocator(PyMemAllocatorDomain domain, PyMemAllocatorEx *allocator)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) PyMem_SetAllocator(PyMemAllocatorDomain domain, PyMemAllocatorEx *allocator)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(void) PyMem_SetupDebugHooks(void)"
  }
]