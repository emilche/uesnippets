[
  {
    "label": "SparseLU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseLU"
  },
  {
    "label": "SparseLUMatrixLReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseLUMatrixLReturnType"
  },
  {
    "label": "SparseLUMatrixUReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SparseLUMatrixUReturnType"
  },
  {
    "label": "SparseLUType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseLUType"
  },
  {
    "label": "SparseLUTransposeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseLUTransposeView"
  },
  {
    "label": "SparseLUTransposeView()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_LU_H # define EIGEN_SPARSE_LU_H namespace Eigen { template<_MatrixType,_OrderingType = COLAMDOrdering<_MatrixType::StorageIndex>> class SparseLU ; template<MappedSparseMatrixType> struct SparseLUMatrixLReturnType ; template<MatrixLType,MatrixUType> struct SparseLUMatrixUReturnType ; template<bool Conjugate,class SparseLUType> class SparseLUTransposeView : public SparseSolverBase<SparseLUTransposeView<Conjugate,SparseLUType>> { protected : typedef SparseSolverBase<SparseLUTransposeView<Conjugate,SparseLUType>> APIBase ; using APIBase::m_isInitialized ; public : typedef SparseLUType::Scalar Scalar ; typedef SparseLUType::StorageIndex StorageIndex ; typedef SparseLUType::MatrixType MatrixType ; typedef SparseLUType::OrderingType OrderingType ; enum { ColsAtCompileTime = MatrixType::ColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ;)",
    "insertText": "SparseLUTransposeView() : m_sparseLU(NULL)"
  },
  {
    "label": "SparseLUTransposeView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseLUTransposeView(const SparseLUTransposeView& view)"
  },
  {
    "label": "setIsInitialized()",
    "kind": "Method",
    "detail": "Function (this -> m_sparseLU = view . m_sparseLU ; } void)",
    "insertText": "setIsInitialized(const bool isInitialized)"
  },
  {
    "label": "setSparseLU()",
    "kind": "Method",
    "detail": "Function (this -> m_isInitialized = isInitialized ; } void)",
    "insertText": "setSparseLU(SparseLUType* sparseLU)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (m_sparseLU = sparseLU ; } using APIBase::_solve_impl ; template<Rhs,Dest> bool)",
    "insertText": "_solve_impl(const MatrixBase<Rhs> &B, MatrixBase<Dest> &X_base)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (Dest&)",
    "insertText": "X(X_base.derived())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_sparseLU->info() == Success && \"The matrix should be factorized first\")"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((Dest::Flags&RowMajorBit)==0, THIS_METHOD_IS_ONLY_FOR_COLUMN_MAJOR_MATRICES)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "col(j) = m_sparseLU->colsPermutation() * B.const_cast_derived().col(j)"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (} m_sparseLU ->)",
    "insertText": "matrixU().template solveTransposedInPlace<Conjugate>(X)"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (m_sparseLU ->)",
    "insertText": "matrixL().template solveTransposedInPlace<Conjugate>(X)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : SparseLUType* m_sparseLU ; SparseLUTransposeView&)",
    "insertText": "operator(const SparseLUTransposeView&)"
  },
  {
    "label": "SparseLU()",
    "kind": "Method",
    "detail": "Function (} ; template<_MatrixType,_OrderingType> class SparseLU : public SparseSolverBase<SparseLU<_MatrixType,_OrderingType>>,public internal::SparseLUImpl<_MatrixType::Scalar,_MatrixType::StorageIndex> { protected : typedef SparseSolverBase<SparseLU<_MatrixType,_OrderingType>> APIBase ; using APIBase::m_isInitialized ; public : using APIBase::_solve_impl ; typedef _MatrixType MatrixType ; typedef _OrderingType OrderingType ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> NCMatrix ; typedef internal::MappedSuperNodalMatrix<Scalar,StorageIndex> SCMatrix ; typedef Matrix<Scalar,Dynamic,1> ScalarVector ; typedef Matrix<StorageIndex,Dynamic,1> IndexVector ; typedef PermutationMatrix<Dynamic,Dynamic,StorageIndex> PermutationType ; typedef internal::SparseLUImpl<Scalar,StorageIndex> Base ; enum { ColsAtCompileTime = MatrixType::ColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; public :)",
    "insertText": "SparseLU():m_lastError(\"\"),m_Ustore(0,0,0,0,0,0),m_symmetricmode(false),m_diagpivotthresh(1.0),m_detPermR(1)"
  },
  {
    "label": "initperfvalues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initperfvalues()"
  },
  {
    "label": "SparseLU()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseLU(const MatrixType& matrix) : m_lastError(\"\"),m_Ustore(0,0,0,0,0,0),m_symmetricmode(false),m_diagpivotthresh(1.0),m_detPermR(1)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "SparseLU()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SparseLU()"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "analyzePattern(const MatrixType& matrix)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(const MatrixType& matrix)"
  },
  {
    "label": "simplicialfactorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "simplicialfactorize(const MatrixType& matrix)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(const MatrixType& matrix)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(matrix)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "factorize(matrix)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (} const SparseLUTransposeView<false,SparseLU<_MatrixType,_OrderingType>>)",
    "insertText": "transpose()"
  },
  {
    "label": "setSparseLU()",
    "kind": "Method",
    "detail": "Function (SparseLUTransposeView<false,SparseLU<_MatrixType,_OrderingType>> transposeView ; transposeView .)",
    "insertText": "setSparseLU(this)"
  },
  {
    "label": "setIsInitialized()",
    "kind": "Method",
    "detail": "Function (transposeView .)",
    "insertText": "setIsInitialized(this->m_isInitialized)"
  },
  {
    "label": "isSymmetric()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "isSymmetric(bool sym)"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (m_symmetricmode = sym ; } SparseLUMatrixLReturnType<SCMatrix>)",
    "insertText": "matrixL()"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (} SparseLUMatrixUReturnType<SCMatrix,MappedSparseMatrix<Scalar,ColMajor,StorageIndex>>)",
    "insertText": "matrixU()"
  },
  {
    "label": "rowsPermutation()",
    "kind": "Method",
    "detail": "Function (} const PermutationType&)",
    "insertText": "rowsPermutation()"
  },
  {
    "label": "solve()",
    "kind": "Method",
    "detail": "Function (m_diagpivotthresh = thresh ; } # ifdef EIGEN_PARSED_BY_DOXYGEN template<Rhs> const Solve<SparseLU,Rhs>)",
    "insertText": "solve(const MatrixBase<Rhs>& B)"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (# endif ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Decomposition is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_factorizationIsOk && \"The matrix should be factorized first\")"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (X .)",
    "insertText": "resize(B.rows(),B.cols())"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "matrixL().solveInPlace(X)"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "matrixU().solveInPlace(X)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::abs ;)",
    "insertText": "eigen_assert(m_factorizationIsOk && \"The matrix should be factorized first.\")"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar det =)",
    "insertText": "Scalar(1.)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (det* =)",
    "insertText": "abs(it.value())"
  },
  {
    "label": "logAbsDeterminant()",
    "kind": "Method",
    "detail": "Function (break ; } } } return det ; } Scalar)",
    "insertText": "logAbsDeterminant()"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar det =)",
    "insertText": "Scalar(0.)"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (det + =)",
    "insertText": "log(abs(it.value()))"
  },
  {
    "label": "signDeterminant()",
    "kind": "Method",
    "detail": "Function (break ; } } } return det ; } Scalar)",
    "insertText": "signDeterminant()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index det = 1 ;)",
    "insertText": "for(Index j = 0; j < this->cols(); ++j)"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (break ; } } } return det* m_detPermR* m_detPermC ; } Scalar)",
    "insertText": "determinant()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (det* = it .)",
    "insertText": "value()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (break ; } } })",
    "insertText": "return(m_detPermR * m_detPermC)"
  },
  {
    "label": "nnzL()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nnzL()"
  },
  {
    "label": "SparseLU()",
    "kind": "Method",
    "detail": "Function (m_perfv . panel_size = 1 6 ; m_perfv . relax = 1 ; m_perfv . maxsuper = 1 2 8 ; m_perfv . rowblk = 1 6 ; m_perfv . colblk = 8 ; m_perfv . fillfactor = 2 0 ; } ComputationInfo m_info ; bool m_factorizationIsOk ; bool m_analysisIsOk ; std::string m_lastError ; NCMatrix m_mat ; SCMatrix m_Lstore ; MappedSparseMatrix<Scalar,ColMajor,StorageIndex> m_Ustore ; PermutationType m_perm_c ; PermutationType m_perm_r ; IndexVector m_etree ; Base::GlobalLU_t m_glu ; bool m_symmetricmode ; internal::perfvalues m_perfv ; RealScalar m_diagpivotthresh ; Index m_nnzL,m_nnzU ; Index m_detPermR,m_detPermC ; private :)",
    "insertText": "SparseLU(const SparseLU&)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType,OrderingType> void SparseLU<MatrixType,OrderingType)",
    "insertText": "analyzePattern(const MatrixType& mat)"
  },
  {
    "label": "ord()",
    "kind": "Method",
    "detail": "Function (m_mat = mat ; OrderingType ord ;)",
    "insertText": "ord(m_mat,m_perm_c)"
  },
  {
    "label": "uncompress()",
    "kind": "Method",
    "detail": "Function (m_mat .)",
    "insertText": "uncompress()"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(StorageIndex,outerIndexPtr,mat.cols()+1,mat.isCompressed()?const_cast<StorageIndex*>(mat.outerIndexPtr()):0)"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (m_mat .)",
    "insertText": "outerIndexPtr()[m_perm_c.indices()(i)"
  },
  {
    "label": "innerNonZeroPtr()",
    "kind": "Method",
    "detail": "Function (m_mat .)",
    "insertText": "innerNonZeroPtr()[m_perm_c.indices()(i)"
  },
  {
    "label": "coletree()",
    "kind": "Method",
    "detail": "Function (} } IndexVector firstRowElt ;)",
    "insertText": "coletree(m_mat, m_etree,firstRowElt)"
  },
  {
    "label": "treePostorder()",
    "kind": "Method",
    "detail": "Function (IndexVector post,iwork ;)",
    "insertText": "treePostorder(StorageIndex(m_mat.cols()), m_etree, post)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (iwork .)",
    "insertText": "resize(m+1)"
  },
  {
    "label": "post_perm()",
    "kind": "Method",
    "detail": "Function (m_etree = iwork ; PermutationType)",
    "insertText": "post_perm(m)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using internal::emptyIdxLU ;)",
    "insertText": "eigen_assert(m_analysisIsOk && \"analyzePattern() should be called first\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert((matrix.rows() == matrix.cols()) && \"Only for squared matrices\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; m_mat = matrix ;)",
    "insertText": "if(m_perm_c.size())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const StorageIndex* outerIndexPtr ;)",
    "insertText": "if(matrix.isCompressed()) outerIndexPtr = matrix.outerIndexPtr()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (outerIndexPtr = outerIndexPtr_t ; })",
    "insertText": "for(Index i = 0; i < matrix.cols(); i++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!matrix.isCompressed())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else { m_perm_c .)",
    "insertText": "resize(matrix.cols())"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index m = m_mat .)",
    "insertText": "rows()"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (Index nnz = m_mat .)",
    "insertText": "nonZeros()"
  },
  {
    "label": "memInit()",
    "kind": "Method",
    "detail": "Function (Index maxpanel = m_perfv . panel_size* m ; Index lwork = 0 ; Index info =)",
    "insertText": "memInit(m, n, nnz, lwork, m_perfv.fillfactor, m_perfv.panel_size, m_glu)"
  },
  {
    "label": "segrep()",
    "kind": "Method",
    "detail": "Function (m_lastError = \" UNABLE TO ALLOCATE WORKING MEMORY \\ n \\ n \" ; m_factorizationIsOk = false ; return ; } IndexVector)",
    "insertText": "segrep(m)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (segrep .)",
    "insertText": "setZero()"
  },
  {
    "label": "parent()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "parent(m)"
  },
  {
    "label": "xplore()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "xplore(m)"
  },
  {
    "label": "repfnz()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "repfnz(maxpanel)"
  },
  {
    "label": "panel_lsub()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "panel_lsub(maxpanel)"
  },
  {
    "label": "xprune()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "xprune(n)"
  },
  {
    "label": "marker()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "marker(m*internal::LUNoMarker)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (repfnz .)",
    "insertText": "setConstant(-1)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (ScalarVector dense ; dense .)",
    "insertText": "setZero(maxpanel)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (ScalarVector tempv ; tempv .)",
    "insertText": "setZero(internal::LUnumTempV(m, m_perfv.panel_size, m_perfv.maxsuper, m))"
  },
  {
    "label": "iperm_c()",
    "kind": "Method",
    "detail": "Function (PermutationType)",
    "insertText": "iperm_c(m_perm_c.inverse())"
  },
  {
    "label": "relax_end()",
    "kind": "Method",
    "detail": "Function (IndexVector)",
    "insertText": "relax_end(n)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_perm_r .)",
    "insertText": "resize(m)"
  },
  {
    "label": "indices()",
    "kind": "Method",
    "detail": "Function (m_perm_r .)",
    "insertText": "indices().setConstant(-1)"
  },
  {
    "label": "supno()",
    "kind": "Method",
    "detail": "Function (m_detPermR = 1 ; m_glu .)",
    "insertText": "supno(0)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (m_glu . xsup .)",
    "insertText": "setConstant(0)"
  },
  {
    "label": "xsup()",
    "kind": "Method",
    "detail": "Function (m_glu .)",
    "insertText": "xsup(0) = m_glu.xlsub(0) = m_glu.xusub(0) = m_glu.xlusup(0) = Index(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index jcol ; Index pivrow ; Index nseg1 ; Index nseg ; Index irep ; Index i,k,jj ;)",
    "insertText": "for(jcol = 0; jcol < n;)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index panel_size = m_perfv . panel_size ;)",
    "insertText": "for(k = jcol + 1; k < (std::min)(jcol+panel_size, n); k++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (panel_size = k - jcol ; break ; } })",
    "insertText": "if(k == n)"
  },
  {
    "label": "panel_dfs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "panel_dfs(m, panel_size, jcol, m_mat, m_perm_r.indices(), nseg1, dense, panel_lsub, segrep, repfnz, xprune, marker, parent, xplore, m_glu)"
  },
  {
    "label": "panel_bmod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "panel_bmod(m, panel_size, jcol, nseg1, dense, tempv, segrep, repfnz, m_glu)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "k(jj - jcol)"
  },
  {
    "label": "panel_lsubk()",
    "kind": "Method",
    "detail": "Function (nseg = nseg1 ; VectorBlock<IndexVector>)",
    "insertText": "panel_lsubk(panel_lsub, k, m)"
  },
  {
    "label": "repfnz_k()",
    "kind": "Method",
    "detail": "Function (VectorBlock<IndexVector>)",
    "insertText": "repfnz_k(repfnz, k, m)"
  },
  {
    "label": "column_dfs()",
    "kind": "Method",
    "detail": "Function (info =)",
    "insertText": "column_dfs(m, jj, m_perm_r.indices(), m_perfv.maxsuper, nseg, panel_lsubk, segrep, repfnz_k, xprune, marker, parent, xplore, m_glu)"
  },
  {
    "label": "COLUMN_DFS()",
    "kind": "Method",
    "detail": "Function (m_lastError = \" UNABLE TO EXPAND MEMORY IN)",
    "insertText": "COLUMN_DFS()"
  },
  {
    "label": "dense_k()",
    "kind": "Method",
    "detail": "Function (m_info = NumericalIssue ; m_factorizationIsOk = false ; return ; } VectorBlock<ScalarVector>)",
    "insertText": "dense_k(dense, k, m)"
  },
  {
    "label": "segrep_k()",
    "kind": "Method",
    "detail": "Function (VectorBlock<IndexVector>)",
    "insertText": "segrep_k(segrep, nseg1, m-nseg1)"
  },
  {
    "label": "column_bmod()",
    "kind": "Method",
    "detail": "Function (info =)",
    "insertText": "column_bmod(jj, (nseg - nseg1), dense_k, tempv, segrep_k, repfnz_k, jcol, m_glu)"
  },
  {
    "label": "COLUMN_BMOD()",
    "kind": "Method",
    "detail": "Function (m_lastError = \" UNABLE TO EXPAND MEMORY IN)",
    "insertText": "COLUMN_BMOD()"
  },
  {
    "label": "copy_to_ucol()",
    "kind": "Method",
    "detail": "Function (m_info = NumericalIssue ; m_factorizationIsOk = false ; return ; } info =)",
    "insertText": "copy_to_ucol(jj, nseg, segrep, repfnz_k ,m_perm_r.indices(), dense_k, m_glu)"
  },
  {
    "label": "COPY_TO_UCOL()",
    "kind": "Method",
    "detail": "Function (m_lastError = \" UNABLE TO EXPAND MEMORY IN)",
    "insertText": "COPY_TO_UCOL()"
  },
  {
    "label": "pivotL()",
    "kind": "Method",
    "detail": "Function (m_info = NumericalIssue ; m_factorizationIsOk = false ; return ; } info =)",
    "insertText": "pivotL(jj, m_diagpivotthresh, m_perm_r.indices(), iperm_c.indices(), pivrow, m_glu)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (m_lastError = \" THE MATRIX IS STRUCTURALLY SINGULAR . . . ZERO COLUMN AT \" ; std::ostringstream returnInfo ; returnInfo<<info ; m_lastError + = returnInfo .)",
    "insertText": "str()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = NumericalIssue ; m_factorizationIsOk = false ; return ; })",
    "insertText": "if(pivrow != jj)"
  },
  {
    "label": "pruneL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneL(jj, m_perm_r.indices(), pivrow, nseg, segrep, repfnz_k, xprune, m_glu)"
  },
  {
    "label": "segrep()",
    "kind": "Method",
    "detail": "Function (irep =)",
    "insertText": "segrep(i)"
  },
  {
    "label": "repfnz_k()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "repfnz_k(irep)"
  },
  {
    "label": "countnz()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "countnz(n, m_nnzL, m_nnzU, m_glu)"
  },
  {
    "label": "fixupL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fixupL(n, m_perm_r.indices(), m_glu)"
  },
  {
    "label": "setInfos()",
    "kind": "Method",
    "detail": "Function (m_Lstore .)",
    "insertText": "setInfos(m, n, m_glu.lusup, m_glu.xlusup, m_glu.lsub, m_glu.xlsub, m_glu.supno, m_glu.xsup)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&m_Ustore) MappedSparseMatrix<Scalar, ColMajor, StorageIndex> ( m, n, m_nnzU, m_glu.xusub.data(), m_glu.usub.data(), m_glu.ucol.data())"
  },
  {
    "label": "SparseLUMatrixLReturnType()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; m_factorizationIsOk = true ; } template<MappedSupernodalType> struct SparseLUMatrixLReturnType : internal::no_assignment_operator { typedef MappedSupernodalType::Scalar Scalar ;)",
    "insertText": "SparseLUMatrixLReturnType(const MappedSupernodalType& mapL) : m_mapL(mapL)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (} template<Dest> void)",
    "insertText": "solveInPlace(MatrixBase<Dest> &X)"
  },
  {
    "label": "solveInPlace()",
    "kind": "Method",
    "detail": "Function (m_mapL .)",
    "insertText": "solveInPlace(X)"
  },
  {
    "label": "solveTransposedInPlace()",
    "kind": "Method",
    "detail": "Function (} template<bool Conjugate,Dest> void)",
    "insertText": "solveTransposedInPlace(MatrixBase<Dest> &X)"
  },
  {
    "label": "Conjugate()",
    "kind": "Method",
    "detail": "Function (m_mapL . template solveTransposedInPlace<)",
    "insertText": "Conjugate(X)"
  },
  {
    "label": "SparseLUMatrixUReturnType()",
    "kind": "Method",
    "detail": "Function (} const MappedSupernodalType& m_mapL ; } ; template<MatrixLType,MatrixUType> struct SparseLUMatrixUReturnType : internal::no_assignment_operator { typedef MatrixLType::Scalar Scalar ;)",
    "insertText": "SparseLUMatrixUReturnType(const MatrixLType& mapL, const MatrixUType& mapU) : m_mapL(mapL),m_mapU(mapU)"
  },
  {
    "label": "supToCol()",
    "kind": "Method",
    "detail": "Function (Index fsupc = m_mapL .)",
    "insertText": "supToCol()"
  },
  {
    "label": "colIndexPtr()",
    "kind": "Method",
    "detail": "Function (Index lda = m_mapL .)",
    "insertText": "colIndexPtr()[fsupc+1] - m_mapL.colIndexPtr()"
  },
  {
    "label": "colIndexPtr()",
    "kind": "Method",
    "detail": "Function (Index luptr = m_mapL .)",
    "insertText": "colIndexPtr()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(fsupc, j) /= m_mapL.valuePtr()"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (} } else { Map<const Matrix<Scalar,Dynamic,Dynamic,ColMajor>,0,OuterStride<>>)",
    "insertText": "A(&(m_mapL.valuePtr()[luptr]), nsupc, nsupc, OuterStride<>(lda))"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,Dynamic,Dest::ColsAtCompileTime,ColMajor>,0,OuterStride<>>)",
    "insertText": "U(&(X.coeffRef(fsupc,0)), nsupc, nrhs, OuterStride<>(n))"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (U = A . template triangularView<)",
    "insertText": "Upper().solve(U)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index j = 0; j < nrhs; ++j)"
  },
  {
    "label": "it()",
    "kind": "Method",
    "detail": "Function (MatrixUType::InnerIterator)",
    "insertText": "it(m_mapU, jcol)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (Index irow = it .)",
    "insertText": "index()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(irow, j) -= X(jcol, j) * it.value()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(jcol, j) -= X(irow, j) * (Conjugate? conj(it.value()): it.value())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(nsupc == 1)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "X(fsupc, j) /= (Conjugate? conj(m_mapL.valuePtr()[luptr]) : m_mapL.valuePtr()[luptr])"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (Map<Matrix<Scalar,Dynamic,Dest::ColsAtCompileTime,ColMajor>,0,OuterStride<>>)",
    "insertText": "U(&(X(fsupc,0)), nsupc, nrhs, OuterStride<>(n))"
  }
]