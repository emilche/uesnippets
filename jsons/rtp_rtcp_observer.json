[
  {
    "label": "PacketTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketTransport"
  },
  {
    "label": "RtpRtcpObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpRtcpObserver"
  },
  {
    "label": "Action",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Action"
  },
  {
    "label": "TransportType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TransportType"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_RTP_RTCP_OBSERVER_H_ # define TEST_RTP_RTCP_OBSERVER_H_ # include<map> # include<memory> # include<utility> # include<vector> # include \" api / array_view . h \" # include \" api / test / simulated_network . h \" # include \" api / units / time_delta . h \" # include \" call / simulated_packet_receiver . h \" # include \" call / video_send_stream . h \" # include \" modules / rtp_rtcp / source / rtp_util . h \" # include \" rtc_base / event . h \" # include \" system_wrappers / include / field_trial . h \" # include \" test / direct_transport . h \" # include \" test / gtest . h \" namespace { webrtc::TimeDelta kShortTimeout = webrtc::)",
    "insertText": "Millis(500)"
  },
  {
    "label": "RtpRtcpObserver()",
    "kind": "Method",
    "detail": "Function (} namespace webrtc { namespace test { class PacketTransport ; class RtpRtcpObserver { public : enum Action { SEND_PACKET,DROP_PACKET,} ; ~)",
    "insertText": "RtpRtcpObserver()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Wait()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (observation_complete_ .)",
    "insertText": "Wait(kShortTimeout)"
  },
  {
    "label": "OnSendRtp()",
    "kind": "Method",
    "detail": "Function (} Action)",
    "insertText": "OnSendRtp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "RtpRtcpObserver()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RtpRtcpObserver(TimeDelta event_timeout) : timeout_(event_timeout)"
  },
  {
    "label": "PacketTransport()",
    "kind": "Method",
    "detail": "Function (} rtc::Event observation_complete_ ; private : const TimeDelta timeout_ ; } ; class PacketTransport : public test::DirectTransport { public : enum TransportType { kReceiver,kSender } ;)",
    "insertText": "PacketTransport(TaskQueueBase* task_queue, Call* send_call, RtpRtcpObserver* observer, TransportType transport_type, const std::map<uint8_t, MediaType>& payload_type_map, std::unique_ptr<SimulatedPacketReceiverInterface> nw_pipe) : test::DirectTransport(task_queue, std::move(nw_pipe), send_call, payload_type_map), observer_(observer), transport_type_(transport_type)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "SendRtp(const uint8_t* packet, size_t length, const PacketOptions& options)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(IsRtpPacket(rtc::MakeArrayView(packet, length)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RtpRtcpObserver::Action action ; {)",
    "insertText": "if(transport_type_ == kSender)"
  },
  {
    "label": "OnSendRtp()",
    "kind": "Method",
    "detail": "Function (action = observer_ ->)",
    "insertText": "OnSendRtp(packet, length)"
  },
  {
    "label": "OnReceiveRtp()",
    "kind": "Method",
    "detail": "Function (} else { action = observer_ ->)",
    "insertText": "OnReceiveRtp(packet, length)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "switch(action)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "SendRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "EXPECT_TRUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_TRUE(IsRtcpPacket(rtc::MakeArrayView(packet, length)))"
  },
  {
    "label": "OnSendRtcp()",
    "kind": "Method",
    "detail": "Function (action = observer_ ->)",
    "insertText": "OnSendRtcp(packet, length)"
  },
  {
    "label": "OnReceiveRtcp()",
    "kind": "Method",
    "detail": "Function (} else { action = observer_ ->)",
    "insertText": "OnReceiveRtcp(packet, length)"
  }
]