[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FAssetThumbnailPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetThumbnailPool"
  },
  {
    "label": "FPropertyEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPropertyEditor"
  },
  {
    "label": "IClassViewerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClassViewerFilter"
  },
  {
    "label": "IDetailCategoryBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailCategoryBuilder"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IDetailGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailGroup"
  },
  {
    "label": "IDetailLayoutBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailLayoutBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "SPropertyEditorAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorAsset"
  },
  {
    "label": "SPropertyEditorClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorClass"
  },
  {
    "label": "SPropertyEditorStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPropertyEditorStruct"
  },
  {
    "label": "SToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SToolTip"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFactory"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FSceneOutlinerFilters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOutlinerFilters"
  },
  {
    "label": "FPropertyComboBoxArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyComboBoxArgs"
  },
  {
    "label": "FPropertyFunctionCallArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyFunctionCallArgs"
  },
  {
    "label": "FPropertyFunctionCallDelegates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyFunctionCallDelegates"
  },
  {
    "label": "SObjectPropertyEntryBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SObjectPropertyEntryBox"
  },
  {
    "label": "SClassPropertyEntryBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SClassPropertyEntryBox"
  },
  {
    "label": "SStructPropertyEntryBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SStructPropertyEntryBox"
  },
  {
    "label": "SProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProperty"
  },
  {
    "label": "FDetailArrayBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailArrayBuilder"
  },
  {
    "label": "SMaterialSlotWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMaterialSlotWidget"
  },
  {
    "label": "ISectionListBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISectionListBuilder"
  },
  {
    "label": "FSectionListDelegates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionListDelegates"
  },
  {
    "label": "FSectionListItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSectionListItem"
  },
  {
    "label": "FSectionList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionList"
  },
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "FSectionItemView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionItemView"
  },
  {
    "label": "FSectionListBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionListBuilder"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" CoreMinimal . h \" # include \" UObject / Object . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / SBoxPanel . h \" # include \" Framework / SlateDelegates . h \" # include \" Materials / MaterialInterface . h \" # include \" PropertyHandle . h \" # include \" IDetailCustomNodeBuilder . h \" # include \" DetailWidgetRow . h \" # include \" SResetToDefaultMenu . h \" # include \" ActorPickerMode . h \" # include \" SceneDepthPickerMode . h \" # include \" IDetailPropertyRow . h \" # include \" ClassViewerModule . h \" class AActor ; class FAssetThumbnailPool ; class FPropertyEditor ; class IClassViewerFilter ; class IDetailCategoryBuilder ; class IDetailChildrenBuilder ; class IDetailGroup ; class IDetailLayoutBuilder ; class IPropertyHandle ; class SPropertyEditorAsset ; class SPropertyEditorClass ; class SPropertyEditorStruct ; class SToolTip ; class UActorComponent ; class UFactory ; struct FAssetData ; struct FSceneOutlinerFilters ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnAssetSelected, const FAssetData&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnShouldSetAsset, const FAssetData&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnShouldFilterAsset, const FAssetData&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnComponentSelected, const UActorComponent*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnShouldFilterComponent, const UActorComponent*)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnGetActorFilters, TSharedPtr<FSceneOutlinerFilters>&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnGetPropertyComboBoxStrings, TArray< TSharedPtr<FString> >&, TArray<TSharedPtr<SToolTip>>&, TArray<bool>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(FString, FOnGetPropertyComboBoxValue)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnPropertyComboBoxValueSelected, const FString&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnInstancedPropertyIteration, IDetailCategoryBuilder&, IDetailGroup*, TSharedRef<IPropertyHandle>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FOnIsEnabled)"
  },
  {
    "label": "FPropertyComboBoxArgs()",
    "kind": "Method",
    "detail": "Function (struct FPropertyComboBoxArgs { TSharedPtr<IPropertyHandle> PropertyHandle ; FOnGetPropertyComboBoxStrings OnGetStrings ; FOnGetPropertyComboBoxValue OnGetValue ; FOnPropertyComboBoxValueSelected OnValueSelected ; int32 ShowSearchForItemCount = 2 0 ; FSlateFontInfo Font ;)",
    "insertText": "FPropertyComboBoxArgs()"
  },
  {
    "label": "FPropertyComboBoxArgs()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyComboBoxArgs(const TSharedPtr<IPropertyHandle>& InPropertyHandle, FOnGetPropertyComboBoxStrings InOnGetStrings = FOnGetPropertyComboBoxStrings(), FOnGetPropertyComboBoxValue InOnGetValue = FOnGetPropertyComboBoxValue(), FOnPropertyComboBoxValueSelected InOnValueSelected = FOnPropertyComboBoxValueSelected()) : PropertyHandle(InPropertyHandle) , OnGetStrings(InOnGetStrings) , OnGetValue(InOnGetValue) , OnValueSelected(InOnValueSelected)"
  },
  {
    "label": "FReply()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPropertyFunctionCallArgs { TWeakObjectPtr<UFunction> Function ; TOptional<FText> LabelOverride ; TOptional<FText> ToolTipTextOverride ; using FOnExecute = TDelegate<)",
    "insertText": "FReply(TWeakObjectPtr<UFunction>)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (FOnExecute OnExecute ; using FOnCanExecute = TDelegate<)",
    "insertText": "bool(TWeakObjectPtr<UFunction>)"
  },
  {
    "label": "FPropertyFunctionCallArgs()",
    "kind": "Method",
    "detail": "Function (FOnCanExecute OnCanExecute ; FTextBuilder* SearchText = nullptr ;)",
    "insertText": "FPropertyFunctionCallArgs(UFunction* InFunction, const FOnExecute& InOnExecute, const FOnCanExecute& InOnCanExecute = {}, const TOptional<FText>& InLabelOverride = {}, const TOptional<FText>& InToolTipTextOverride = {}, FTextBuilder* InSearchText = nullptr) : Function(InFunction) , LabelOverride(InLabelOverride) , ToolTipTextOverride(InToolTipTextOverride) , OnExecute(InOnExecute) , OnCanExecute(InOnCanExecute) , SearchText(InSearchText)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (} } ; struct FPropertyFunctionCallDelegates { using FOnGetExecutionContext = TDelegate<TArray<TWeakObjectPtr<)",
    "insertText": "UObject(TWeakObjectPtr<UFunction>)"
  },
  {
    "label": "FPropertyFunctionCallDelegates()",
    "kind": "Method",
    "detail": "Function (FOnCanExecute OnCanExecute ;)",
    "insertText": "FPropertyFunctionCallDelegates(const FOnExecute& InOnExecute, const FOnCanExecute& InOnCanExecute = {}) : OnExecute(InOnExecute) , OnCanExecute(InOnCanExecute)"
  },
  {
    "label": "FPropertyFunctionCallDelegates()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPropertyFunctionCallDelegates(const FOnGetExecutionContext& InOnGetExecutionContext) : OnGetExecutionContext(InOnGetExecutionContext)"
  },
  {
    "label": "MakeResetButton()",
    "kind": "Method",
    "detail": "Function (} } ; namespace PropertyCustomizationHelpers { TSharedRef<SWidget>)",
    "insertText": "MakeResetButton(FSimpleDelegate OnResetClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeAddButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAddButton(FSimpleDelegate OnAddClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeRemoveButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeRemoveButton(FSimpleDelegate OnRemoveClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeEditButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeEditButton(FSimpleDelegate OnEditClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeEmptyButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeEmptyButton(FSimpleDelegate OnEmptyClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeInsertDeleteDuplicateButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeInsertDeleteDuplicateButton(FExecuteAction OnInsertClicked, FExecuteAction OnDeleteClicked, FExecuteAction OnDuplicateClicked)"
  },
  {
    "label": "MakeDeleteButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeDeleteButton(FSimpleDelegate OnDeleteClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeClearButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeClearButton(FSimpleDelegate OnClearClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeVisibilityButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeVisibilityButton(FOnClicked OnVisibilityClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> VisibilityDelegate = true)"
  },
  {
    "label": "MakeNewBlueprintButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeNewBlueprintButton(FSimpleDelegate OnNewBlueprintClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeUseSelectedButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeUseSelectedButton(FSimpleDelegate OnUseSelectedClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true, const bool IsActor = false)"
  },
  {
    "label": "MakeBrowseButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeBrowseButton(FSimpleDelegate OnFindClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true, const bool IsActor = false)"
  },
  {
    "label": "MakeAssetPickerAnchorButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAssetPickerAnchorButton(FOnGetAllowedClasses OnGetAllowedClasses, FOnAssetSelected OnAssetSelectedFromPicker, const TSharedPtr<IPropertyHandle>& PropertyHandle = TSharedPtr<IPropertyHandle>())"
  },
  {
    "label": "MakeAssetPickerWithMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAssetPickerWithMenu(const FAssetData& InitialObject, const bool AllowClear, const TArray<const UClass*>& AllowedClasses, const TArray<UFactory*>& NewAssetFactories, FOnShouldFilterAsset OnShouldFilterAsset, FOnAssetSelected OnSet, FSimpleDelegate OnClose, const TSharedPtr<IPropertyHandle>& PropertyHandle = TSharedPtr<IPropertyHandle>(), const TArray<FAssetData>& OwnerAssetArray = TArray<FAssetData>())"
  },
  {
    "label": "MakeAssetPickerWithMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAssetPickerWithMenu(const FAssetData& InitialObject, const bool AllowClear, const TArray<const UClass*>& AllowedClasses, const TArray<const UClass*>& DisallowedClasses, const TArray<UFactory*>& NewAssetFactories, FOnShouldFilterAsset OnShouldFilterAsset, FOnAssetSelected OnSet, FSimpleDelegate OnClose, const TSharedPtr<IPropertyHandle>& PropertyHandle = TSharedPtr<IPropertyHandle>(), const TArray<FAssetData>& OwnerAssetArray = TArray<FAssetData>())"
  },
  {
    "label": "MakeAssetPickerWithMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAssetPickerWithMenu(const FAssetData& InitialObject, const bool AllowClear, const bool AllowCopyPaste, const TArray<const UClass*>& AllowedClasses, const TArray<UFactory*>& NewAssetFactories, FOnShouldFilterAsset OnShouldFilterAsset, FOnAssetSelected OnSet, FSimpleDelegate OnClose, const TSharedPtr<IPropertyHandle>& PropertyHandle = TSharedPtr<IPropertyHandle>(), const TArray<FAssetData>& OwnerAssetArray = TArray<FAssetData>())"
  },
  {
    "label": "MakeAssetPickerWithMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeAssetPickerWithMenu(const FAssetData& InitialObject, const bool AllowClear, const bool AllowCopyPaste, const TArray<const UClass*>& AllowedClasses, const TArray<const UClass*>& DisallowedClasses, const TArray<UFactory*>& NewAssetFactories, FOnShouldFilterAsset OnShouldFilterAsset, FOnAssetSelected OnSet, FSimpleDelegate OnClose, const TSharedPtr<IPropertyHandle>& PropertyHandle = TSharedPtr<IPropertyHandle>(), const TArray<FAssetData>& OwnerAssetArray = TArray<FAssetData>())"
  },
  {
    "label": "MakeActorPickerAnchorButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeActorPickerAnchorButton(FOnGetActorFilters OnGetActorFilters, FOnActorSelected OnActorSelectedFromPicker)"
  },
  {
    "label": "MakeActorPickerWithMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeActorPickerWithMenu(AActor* const InitialActor, const bool AllowClear, FOnShouldFilterActor ActorFilter, FOnActorSelected OnSet, FSimpleDelegate OnClose, FSimpleDelegate OnUseSelected)"
  },
  {
    "label": "MakeActorPickerWithMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeActorPickerWithMenu(AActor* const InitialActor, const bool AllowClear, const bool AllowPickingLevelInstanceContent, FOnShouldFilterActor ActorFilter, FOnActorSelected OnSet, FSimpleDelegate OnClose, FSimpleDelegate OnUseSelected, bool bDisplayUseSelected=true)"
  },
  {
    "label": "MakeComponentPickerWithMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeComponentPickerWithMenu(UActorComponent* const InitialComponent, const bool AllowClear, FOnShouldFilterActor ActorFilter, FOnShouldFilterComponent ComponentFilter, FOnComponentSelected OnSet, FSimpleDelegate OnClose)"
  },
  {
    "label": "MakeInteractiveActorPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeInteractiveActorPicker(FOnGetAllowedClasses OnGetAllowedClasses, FOnShouldFilterActor OnShouldFilterActor, FOnActorSelected OnActorSelectedFromPicker)"
  },
  {
    "label": "MakeSceneDepthPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeSceneDepthPicker(FOnSceneDepthLocationSelected OnSceneDepthLocationSelected)"
  },
  {
    "label": "MakeEditConfigHierarchyButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeEditConfigHierarchyButton(FSimpleDelegate OnEditConfigClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeDocumentationButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeDocumentationButton(const TSharedRef<FPropertyEditor>& InPropertyEditor)"
  },
  {
    "label": "MakeSaveButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeSaveButton(FSimpleDelegate OnSaveClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeSetOptionalButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeSetOptionalButton(FSimpleDelegate OnSetOptionalClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeClearOptionalButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeClearOptionalButton(FSimpleDelegate OnClearOptionalClicked, TAttribute<FText> OptionalToolTipText = FText(), TAttribute<bool> IsEnabled = true)"
  },
  {
    "label": "MakeFunctionCallButton()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeFunctionCallButton(const FPropertyFunctionCallArgs& InArgs)"
  },
  {
    "label": "AddFunctionCallWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFunctionCallWidgets(IDetailGroup& RootGroup, const TArrayView<UFunction*>& InCallInEditorFunctions, const FPropertyFunctionCallDelegates& InArgs)"
  },
  {
    "label": "AddFunctionCallWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFunctionCallWidgets(IDetailLayoutBuilder& DetailBuilder, const TArrayView<UFunction*>& InCallInEditorFunctions, const FPropertyFunctionCallDelegates& InArgs)"
  },
  {
    "label": "AddCallInEditorFunctionCallWidgetsForClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCallInEditorFunctionCallWidgetsForClass(IDetailGroup& RootGroup, const UClass* Class, const FPropertyFunctionCallDelegates& InArgs)"
  },
  {
    "label": "AddCallInEditorFunctionCallWidgetsForClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCallInEditorFunctionCallWidgetsForClass(IDetailLayoutBuilder& DetailBuilder, const UClass* Class, const FPropertyFunctionCallDelegates& InArgs)"
  },
  {
    "label": "GetEditConditionProperty()",
    "kind": "Method",
    "detail": "Function (FBoolProperty*)",
    "insertText": "GetEditConditionProperty(const FProperty* InProperty, bool& bNegate)"
  },
  {
    "label": "GetNewAssetFactoriesForClasses()",
    "kind": "Method",
    "detail": "Function (TArray<UFactory*>)",
    "insertText": "GetNewAssetFactoriesForClasses(const TArray<const UClass*>& Classes)"
  },
  {
    "label": "GetNewAssetFactoriesForClasses()",
    "kind": "Method",
    "detail": "Function (TArray<UFactory*>)",
    "insertText": "GetNewAssetFactoriesForClasses(const TArray<const UClass*>& Classes, const TArray<const UClass*>& DisallowedClasses)"
  },
  {
    "label": "MakePropertyComboBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePropertyComboBox(const FPropertyComboBoxArgs& InArgs)"
  },
  {
    "label": "MakePropertyComboBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakePropertyComboBox(const TSharedPtr<IPropertyHandle>& InPropertyHandle, FOnGetPropertyComboBoxStrings OnGetStrings = FOnGetPropertyComboBoxStrings(), FOnGetPropertyComboBoxValue OnGetValue = FOnGetPropertyComboBoxValue(), FOnPropertyComboBoxValueSelected OnValueSelected = FOnPropertyComboBoxValueSelected())"
  },
  {
    "label": "MakeInstancedPropertyCustomUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeInstancedPropertyCustomUI(TMap<FName, IDetailGroup*>& ExistingGroup, IDetailCategoryBuilder& BaseCategory, TSharedRef<IPropertyHandle>& BaseProperty, FOnInstancedPropertyIteration AddRowDelegate)"
  },
  {
    "label": "GetClassesFromMetadataString()",
    "kind": "Method",
    "detail": "Function (TArray<const UClass*>)",
    "insertText": "GetClassesFromMetadataString(const FString& MetadataString)"
  },
  {
    "label": "GetStructsFromMetadataString()",
    "kind": "Method",
    "detail": "Function (TArray<const UScriptStruct*>)",
    "insertText": "GetStructsFromMetadataString(const FString& MetadataString)"
  },
  {
    "label": "GetCallInEditorFunctionsForClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCallInEditorFunctionsForClass(const UClass* InClass, TArray<UFunction*>& OutCallInEditorFunctions, EFieldIterationFlags InIterationFlags = EFieldIterationFlags::IncludeSuper)"
  },
  {
    "label": "GetCallInEditorFunctionsForClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCallInEditorFunctionsForClass(const UClass* InClass, const TFunctionRef<bool(const UFunction*)>& InFunctionFilter, TArray<UFunction*>& OutCallInEditorFunctions, EFieldIterationFlags InIterationFlags = EFieldIterationFlags::IncludeSuper)"
  },
  {
    "label": "MakeEditInlineObjectClassPicker()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeEditInlineObjectClassPicker(TSharedRef<IPropertyHandle> PropertyHandle, FOnClassPicked OnClassPicked, TSharedPtr<IClassViewerFilter> AdditionalClassFilter=nullptr)"
  },
  {
    "label": "CreateNewInstanceOfEditInlineObjectClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNewInstanceOfEditInlineObjectClass(TSharedRef<IPropertyHandle> PropertyHandle, UClass* Class, EPropertyValueSetFlags::Type Flags = EPropertyValueSetFlags::DefaultFlags)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_DELEGATE_RetVal(const UObject*, FOnGetObject)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSetObject, const FAssetData&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SObjectPropertyEntryBox : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SObjectPropertyEntryBox ) : _AllowedClass( UObject::StaticClass() ) , _AllowClear( true ) , _DisplayUseSelected( true ) , _DisplayBrowse( true ) , _EnableContentPicker(true) , _DisplayCompactSize(false) , _DisplayThumbnail(true)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FString, ObjectPath ) SLATE_ARGUMENT( TSharedPtr<IPropertyHandle>, PropertyHandle ) SLATE_ARGUMENT(TArray<FAssetData>, OwnerAssetDataArray) SLATE_ARGUMENT( TSharedPtr<FAssetThumbnailPool>, ThumbnailPool ) SLATE_ARGUMENT( const UClass*, AllowedClass ) SLATE_ARGUMENT( TOptional<TArray<UFactory*>>, NewAssetFactories ) SLATE_EVENT(FOnShouldSetAsset, OnShouldSetAsset) SLATE_EVENT(FOnSetObject, OnObjectChanged) SLATE_EVENT(FOnShouldFilterAsset, OnShouldFilterAsset) SLATE_EVENT(FOnIsEnabled, OnIsEnabled) SLATE_ARGUMENT(bool, AllowClear) SLATE_ARGUMENT(bool, AllowCreate) SLATE_ARGUMENT(bool, DisplayUseSelected) SLATE_ARGUMENT(bool, DisplayBrowse) SLATE_EVENT(FSimpleDelegate, OnBrowseOverride) SLATE_ARGUMENT(bool, EnableContentPicker) SLATE_ARGUMENT(bool, DisplayCompactSize) SLATE_ARGUMENT(bool, DisplayThumbnail) SLATE_NAMED_SLOT(FArguments, CustomContentSlot) SLATE_ATTRIBUTE(FIntPoint, ThumbnailSizeOverride) SLATE_EVENT(FOnShouldFilterActor, OnShouldFilterActor) SLATE_ATTRIBUTE(bool, bOnlyRecognizeOnDragEnter) SLATE_END_ARGS() PROPERTYEDITOR_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "GetDesiredWidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDesiredWidth(float& OutMinDesiredWidth, float &OutMaxDesiredWidth)"
  },
  {
    "label": "OpenEntryBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenEntryBox()"
  },
  {
    "label": "OnSetObject()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnSetObject(const FAssetData& InObject)"
  },
  {
    "label": "OnGetObjectPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "OnGetObjectPath()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (private : FOnShouldSetAsset OnShouldSetAsset ; FOnShouldFilterActor OnShouldFilterActor ; FOnSetObject OnObjectChanged ; FOnIsEnabled OnIsEnabled ; TAttribute<FString> ObjectPath ; TSharedPtr<IPropertyHandle> PropertyHandle ; TSharedPtr<SPropertyEditorAsset> PropertyEditorAsset ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSetClass, const UClass*)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SClassPropertyEntryBox : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SClassPropertyEntryBox) : _MetaClass(UObject::StaticClass()) , _RequiredInterface(nullptr) , _AllowAbstract(false) , _IsBlueprintBaseOnly(false) , _AllowNone(true) , _HideViewOptions(false) , _ShowDisplayNames(false) , _ShowTreeView(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(const UClass*, MetaClass) SLATE_ARGUMENT(const UClass*, RequiredInterface) SLATE_ARGUMENT(TArray<const UClass*>, AllowedClasses) SLATE_ARGUMENT(TArray<const UClass*>, DisallowedClasses) SLATE_ARGUMENT(bool, AllowAbstract) SLATE_ARGUMENT(bool, IsBlueprintBaseOnly) SLATE_ARGUMENT(bool, AllowNone) SLATE_ARGUMENT(bool, HideViewOptions) SLATE_ARGUMENT(bool, ShowDisplayNames) SLATE_ARGUMENT(bool, ShowTreeView) SLATE_ATTRIBUTE(const UClass*, SelectedClass) SLATE_EVENT(FOnSetClass, OnSetClass) SLATE_ARGUMENT(TArray<TSharedRef<IClassViewerFilter>>, ClassViewerFilters) SLATE_END_ARGS() PROPERTYEDITOR_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SPropertyEditorClass> PropertyEditorClass ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSetStruct, const UScriptStruct*)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class SStructPropertyEntryBox : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SStructPropertyEntryBox) : _MetaStruct(nullptr) , _AllowNone(true) , _HideViewOptions(false) , _ShowDisplayNames(false) , _ShowTreeView(false)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(const UScriptStruct*, MetaStruct) SLATE_ARGUMENT(bool, AllowNone) SLATE_ARGUMENT(bool, HideViewOptions) SLATE_ARGUMENT(bool, ShowDisplayNames) SLATE_ARGUMENT(bool, ShowTreeView) SLATE_ATTRIBUTE(const UScriptStruct*, SelectedStruct) SLATE_EVENT(FOnSetStruct, OnSetStruct) SLATE_END_ARGS() PROPERTYEDITOR_API void Construct(const FArguments& InArgs)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<SPropertyEditorStruct> PropertyEditorStruct ; } ; class SProperty : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE(FOnPropertyValueChanged)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SProperty ) : _ShouldDisplayName( true ) , _DisplayResetToDefault( true)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, DisplayName ) SLATE_ARGUMENT( bool, ShouldDisplayName ) SLATE_DEFAULT_SLOT( FArguments, CustomWidget ) SLATE_ARGUMENT( bool, DisplayResetToDefault ) SLATE_END_ARGS() virtual ~SProperty()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<IPropertyHandle> InPropertyHandle)"
  },
  {
    "label": "ResetToDefault()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetToDefault()"
  },
  {
    "label": "ShouldShowResetToDefault()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowResetToDefault()"
  },
  {
    "label": "GetResetToDefaultLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetResetToDefaultLabel()"
  },
  {
    "label": "IsValidProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidProperty()"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (protected : TSharedPtr<IPropertyHandle> PropertyHandle ; } ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnGenerateArrayElementWidget, TSharedRef<IPropertyHandle>, int32, IDetailChildrenBuilder&)"
  },
  {
    "label": "FDetailArrayBuilder()",
    "kind": "Method",
    "detail": "Function (class FDetailArrayBuilder : public IDetailCustomNodeBuilder { public :)",
    "insertText": "FDetailArrayBuilder(TSharedRef<IPropertyHandle> InBaseProperty, bool InGenerateHeader = true, bool InDisplayResetToDefault = true, bool InDisplayElementNum = true) : ArrayProperty( InBaseProperty->AsArray() ) , BaseProperty( InBaseProperty ) , bGenerateHeader( InGenerateHeader) , bDisplayResetToDefault(InDisplayResetToDefault) , bDisplayElementNum(InDisplayElementNum)"
  },
  {
    "label": "CreateRaw()",
    "kind": "Method",
    "detail": "Function (FSimpleDelegate OnNumChildrenChanged =)",
    "insertText": "CreateRaw(this, &FDetailArrayBuilder::OnNumChildrenChanged)"
  },
  {
    "label": "SetOnNumElementsChanged()",
    "kind": "Method",
    "detail": "Function (OnNumElementsChangedHandle = ArrayProperty ->)",
    "insertText": "SetOnNumElementsChanged(OnNumChildrenChanged)"
  },
  {
    "label": "MarkHiddenByCustomization()",
    "kind": "Method",
    "detail": "Function (BaseProperty ->)",
    "insertText": "MarkHiddenByCustomization()"
  },
  {
    "label": "FDetailArrayBuilder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDetailArrayBuilder()"
  },
  {
    "label": "UnregisterOnNumElementsChanged()",
    "kind": "Method",
    "detail": "Function (ArrayProperty ->)",
    "insertText": "UnregisterOnNumElementsChanged(OnNumElementsChangedHandle)"
  },
  {
    "label": "SetDisplayName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDisplayName(const FText& InDisplayName)"
  },
  {
    "label": "OnGenerateArrayElementWidget()",
    "kind": "Method",
    "detail": "Function (DisplayName = InDisplayName ; } void)",
    "insertText": "OnGenerateArrayElementWidget(FOnGenerateArrayElementWidget InOnGenerateArrayElementWidget)"
  },
  {
    "label": "RequiresTick()",
    "kind": "Method",
    "detail": "Function (OnGenerateArrayElementWidgetDelegate = InOnGenerateArrayElementWidget ; } bool)",
    "insertText": "RequiresTick()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetName()"
  },
  {
    "label": "InitiallyCollapsed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitiallyCollapsed()"
  },
  {
    "label": "SAssignNew()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SHorizontalBox> ContentHorizontalBox ;)",
    "insertText": "SAssignNew(ContentHorizontalBox, SHorizontalBox)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (ContentHorizontalBox ->)",
    "insertText": "AddSlot() [ BaseProperty->CreatePropertyValueWidget()"
  },
  {
    "label": "CreateDefaultPropertyCopyPasteActions()",
    "kind": "Method",
    "detail": "Function (} FUIAction CopyAction ; FUIAction PasteAction ; BaseProperty ->)",
    "insertText": "CreateDefaultPropertyCopyPasteActions(CopyAction, PasteAction)"
  },
  {
    "label": "FilterString()",
    "kind": "Method",
    "detail": "Function (NodeRow .)",
    "insertText": "FilterString(!DisplayName.IsEmpty() ? DisplayName : BaseProperty->GetPropertyDisplayName()) .NameContent() [ BaseProperty->CreatePropertyNameWidget(DisplayName, FText::GetEmpty()) ] .ValueContent() [ ContentHorizontalBox.ToSharedRef() ] .CopyAction(CopyAction) .PasteAction(PasteAction)"
  },
  {
    "label": "AddSlot()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SResetToDefaultMenu> ResetToDefaultMenu ; ContentHorizontalBox ->)",
    "insertText": "AddSlot() .AutoWidth() .Padding(FMargin(2.0f, 0.0f, 0.0f, 0.0f)) [ SAssignNew(ResetToDefaultMenu, SResetToDefaultMenu)"
  },
  {
    "label": "AddProperty()",
    "kind": "Method",
    "detail": "Function (ResetToDefaultMenu ->)",
    "insertText": "AddProperty(BaseProperty)"
  },
  {
    "label": "GenerateChildContent()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "GenerateChildContent(IDetailChildrenBuilder& ChildrenBuilder)"
  },
  {
    "label": "GetNumElements()",
    "kind": "Method",
    "detail": "Function (uint32 NumChildren = 0 ; ArrayProperty ->)",
    "insertText": "GetNumElements(NumChildren)"
  },
  {
    "label": "GetElement()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IPropertyHandle> ElementHandle = ArrayProperty ->)",
    "insertText": "GetElement(ChildIndex)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (OnGenerateArrayElementWidgetDelegate .)",
    "insertText": "Execute(ElementHandle, ChildIndex, ChildrenBuilder)"
  },
  {
    "label": "RefreshChildren()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RefreshChildren()"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnRebuildChildren .)",
    "insertText": "ExecuteIfBound()"
  },
  {
    "label": "GetPropertyHandle()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<IPropertyHandle>)",
    "insertText": "GetPropertyHandle()"
  },
  {
    "label": "OnNumChildrenChanged()",
    "kind": "Method",
    "detail": "Function (OnRebuildChildren = InOnRebuildChildren ; } void)",
    "insertText": "OnNumChildrenChanged()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} private : FText DisplayName ; FOnGenerateArrayElementWidget OnGenerateArrayElementWidgetDelegate ; TSharedPtr<IPropertyHandleArray> ArrayProperty ; TSharedRef<IPropertyHandle> BaseProperty ; FSimpleDelegate OnRebuildChildren ; bool bGenerateHeader ; bool bDisplayResetToDefault ; bool bDisplayElementNum ; FDelegateHandle OnNumElementsChangedHandle ; } ; class SMaterialSlotWidget : public SCompoundWidget {)",
    "insertText": "SLATE_BEGIN_ARGS(SMaterialSlotWidget) : _DeleteMaterialSlotVisibility(EVisibility::Visible)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, MaterialName) SLATE_ATTRIBUTE(bool, IsMaterialSlotNameReadOnly) SLATE_EVENT(FOnTextChanged, OnMaterialNameChanged) SLATE_EVENT(FOnTextCommitted, OnMaterialNameCommitted) SLATE_ATTRIBUTE(bool, CanDeleteMaterialSlot) SLATE_EVENT(FSimpleDelegate, OnDeleteMaterialSlot) SLATE_ATTRIBUTE(EVisibility, DeleteMaterialSlotVisibility) SLATE_END_ARGS() PROPERTYEDITOR_API void Construct(const FArguments& InArgs, int32 SlotIndex, bool bIsMaterialUsed)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnGetSections, class ISectionListBuilder&)"
  },
  {
    "label": "DECLARE_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_FourParams(FOnSectionChanged, int32, int32, int32, FName)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(TSharedRef<SWidget>, FOnGenerateWidgetsForSection, int32, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnResetSectionToDefaultClicked, int32, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(TSharedRef<SWidget>, FOnGenerateLODComboBox, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FOnCanCopySectionList)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnCopySectionList)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FOnPasteSectionList)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FOnCanCopySectionItem, int32, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnCopySectionItem, int32, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnPasteSectionItem, int32, int32)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FOnEnableSectionItem, int32, int32, bool)"
  },
  {
    "label": "FSectionListDelegates()",
    "kind": "Method",
    "detail": "Function (struct FSectionListDelegates {)",
    "insertText": "FSectionListDelegates() : OnGetSections() , OnSectionChanged() , OnGenerateCustomNameWidgets() , OnGenerateCustomSectionWidgets() , OnResetSectionToDefaultClicked()"
  },
  {
    "label": "ISectionListBuilder()",
    "kind": "Method",
    "detail": "Function (} FOnGetSections OnGetSections ; FOnSectionChanged OnSectionChanged ; FOnGenerateWidgetsForSection OnGenerateCustomNameWidgets ; FOnGenerateWidgetsForSection OnGenerateCustomSectionWidgets ; FOnResetSectionToDefaultClicked OnResetSectionToDefaultClicked ; FOnCopySectionList OnCopySectionList ; FOnCanCopySectionList OnCanCopySectionList ; FOnPasteSectionList OnPasteSectionList ; FOnCopySectionItem OnCopySectionItem ; FOnCanCopySectionItem OnCanCopySectionItem ; FOnPasteSectionItem OnPasteSectionItem ; FOnEnableSectionItem OnEnableSectionItem ; } ; class ISectionListBuilder { public : ~)",
    "insertText": "ISectionListBuilder()"
  },
  {
    "label": "AddSection()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "AddSection(int32 LodIndex, int32 SectionIndex, FName InMaterialSlotName, int32 InMaterialSlotIndex, FName InOriginalMaterialSlotName, const TMap<int32, FName> &InAvailableMaterialSlotName, const UMaterialInterface* Material, bool IsSectionUsingCloth, bool bIsChunkSection, int32 DefaultMaterialIndex)"
  },
  {
    "label": "FSectionListItem()",
    "kind": "Method",
    "detail": "Function (} ; struct FSectionListItem { int32 LodIndex ; int32 SectionIndex ; bool IsSectionUsingCloth ; int32 ThumbnailSize ; TWeakObjectPtr<UMaterialInterface> Material ; FName MaterialSlotName ; int32 MaterialSlotIndex ; FName OriginalMaterialSlotName ; TMap<int32,FName> AvailableMaterialSlotName ; bool bIsChunkSection ; int32 DefaultMaterialIndex ;)",
    "insertText": "FSectionListItem(int32 InLodIndex, int32 InSectionIndex, FName InMaterialSlotName, int32 InMaterialSlotIndex, FName InOriginalMaterialSlotName, const TMap<int32, FName> &InAvailableMaterialSlotName, const UMaterialInterface* InMaterial, bool InIsSectionUsingCloth, int32 InThumbnailSize, bool InIsChunkSection, int32 InDefaultMaterialIndex) : LodIndex(InLodIndex) , SectionIndex(InSectionIndex) , IsSectionUsingCloth(InIsSectionUsingCloth) , ThumbnailSize(InThumbnailSize) , Material(const_cast<UMaterialInterface*>(InMaterial)) , MaterialSlotName(InMaterialSlotName) , MaterialSlotIndex(InMaterialSlotIndex) , OriginalMaterialSlotName(InOriginalMaterialSlotName) , AvailableMaterialSlotName(InAvailableMaterialSlotName) , bIsChunkSection(InIsChunkSection) , DefaultMaterialIndex(InDefaultMaterialIndex)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FSectionListItem& Other)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (bool IsSectionItemEqual = LodIndex = = Other . LodIndex&& SectionIndex = = Other . SectionIndex&& MaterialSlotIndex = = Other . MaterialSlotIndex&& MaterialSlotName = = Other . MaterialSlotName&& Material = = Other . Material&& AvailableMaterialSlotName .)",
    "insertText": "Num() == Other.AvailableMaterialSlotName.Num()"
  },
  {
    "label": "OtherName()",
    "kind": "Method",
    "detail": "Function (IsSectionItemEqual = false ; break ; } FName)",
    "insertText": "OtherName(Other.AvailableMaterialSlotName.Find(Kvp.Key))"
  },
  {
    "label": "FSectionList()",
    "kind": "Method",
    "detail": "Function (} } ; class FSectionList : public IDetailCustomNodeBuilder,public TSharedFromThis<FSectionList> { public :)",
    "insertText": "FSectionList(IDetailLayoutBuilder& InDetailLayoutBuilder, FSectionListDelegates& SectionListDelegates, bool bInInitiallyCollapsed, int32 InThumbnailSize, int32 InSectionsLodIndex, FName InSectionListName)"
  },
  {
    "label": "IsDisplayingSections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisplayingSections()"
  },
  {
    "label": "OnHideSectionsForLod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHideSectionsForLod(int32 LodIndex)"
  },
  {
    "label": "SetOnRebuildChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOnRebuildChildren(FSimpleDelegate InOnRebuildChildren)"
  },
  {
    "label": "GenerateHeaderRowContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateHeaderRowContent(FDetailWidgetRow& NodeRow)"
  },
  {
    "label": "OnCanCopySectionList()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "OnCanCopySectionList()"
  },
  {
    "label": "OnCopySectionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopySectionList()"
  },
  {
    "label": "OnPasteSectionList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteSectionList()"
  },
  {
    "label": "OnCanCopySectionItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnCanCopySectionItem(int32 LODIndex, int32 SectionIndex)"
  },
  {
    "label": "OnCopySectionItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCopySectionItem(int32 LODIndex, int32 SectionIndex)"
  },
  {
    "label": "OnPasteSectionItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteSectionItem(int32 LODIndex, int32 SectionIndex)"
  },
  {
    "label": "OnEnableSectionItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnableSectionItem(int32 LodIndex, int32 SectionIndex, bool bEnable)"
  }
]