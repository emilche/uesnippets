[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FDiskCachedAssetData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDiskCachedAssetData"
  },
  {
    "label": "FAssetRegistryReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryReader"
  },
  {
    "label": "FAssetRegistryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryWriter"
  },
  {
    "label": "FAssetRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryImpl"
  },
  {
    "label": "FAssetDataDiscovery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataDiscovery"
  },
  {
    "label": "FFilesToSearch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFilesToSearch"
  },
  {
    "label": "FCachePayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachePayload"
  },
  {
    "label": "FGatheredPathData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatheredPathData"
  },
  {
    "label": "FPathExistence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathExistence"
  },
  {
    "label": "FSetPathProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetPathProperties"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAssetGatherDiagnostics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetGatherDiagnostics"
  },
  {
    "label": "FAssetDataGatherer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetDataGatherer"
  },
  {
    "label": "FResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResults"
  },
  {
    "label": "FResultContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResultContext"
  },
  {
    "label": "FScopedGatheringPause",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedGatheringPause"
  },
  {
    "label": "CHECK_IS_LOCKED_CURRENT_THREAD()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / RingBuffer . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" CriticalSectionQueryable . h \" # include \" DiskCachedAssetData . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / FileManager . h \" # include \" HAL / Platform . h \" # include \" HAL / Runnable . h \" # include \" Misc / DateTime . h \" # include \" Misc / Optional . h \" # include \" PackageDependencyData . h \" # include \" AssetRegistry / PackageReader . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include<atomic> class FArchive ; struct FAssetData ; class FDiskCachedAssetData ; class FAssetRegistryReader ; class FAssetRegistryWriter ; namespace UE::AssetRegistry { class FAssetRegistryImpl ; } namespace UE::AssetDataGather::Private { class FAssetDataDiscovery ; class FFilesToSearch ; struct FCachePayload ; struct FGatheredPathData ; struct FPathExistence ; struct FSetPathProperties ; enum class EPriority : uint8 ; } # if DO_CHECK typedef FCriticalSectionQueryable FGathererCriticalSection ; typedef FScopeLockQueryable FGathererScopeLock ; # define)",
    "insertText": "CHECK_IS_LOCKED_CURRENT_THREAD(CritSec) check(CritSec.IsLockedOnCurrentThread()) #define CHECK_IS_NOT_LOCKED_CURRENT_THREAD(CritSec) check(!CritSec.IsLockedOnCurrentThread())"
  },
  {
    "label": "CHECK_IS_LOCKED_CURRENT_THREAD()",
    "kind": "Method",
    "detail": "Function (typedef FScopeLock FGathererScopeLock ; # define)",
    "insertText": "CHECK_IS_LOCKED_CURRENT_THREAD(CritSec)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false) #define CHECK_IS_NOT_LOCKED_CURRENT_THREAD(CritSec)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(false)"
  },
  {
    "label": "FAssetDataGatherer()",
    "kind": "Method",
    "detail": "Function (float DiscoveryTimeSeconds ; float GatherTimeSeconds ; float WallTimeSeconds ; int32 NumCachedDirectories ; int32 NumUncachedDirectories ; int32 NumCachedAssetFiles ; int32 NumUncachedAssetFiles ; } ; class FAssetDataGatherer : public FRunnable { public :)",
    "insertText": "FAssetDataGatherer(const TArray<FString>& InLongPackageNamesDenyList, const TArray<FString>& InMountRelativePathsDenyList, bool bInAsyncEnabled, UE::AssetRegistry::FAssetRegistryImpl& InRegistryImpl)"
  },
  {
    "label": "FAssetDataGatherer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAssetDataGatherer()"
  },
  {
    "label": "OnInitialSearchCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialSearchCompleted()"
  },
  {
    "label": "StartAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartAsync()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "IsAsyncEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAsyncEnabled()"
  },
  {
    "label": "IsSynchronous()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSynchronous()"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (struct FResults { TMultiMap<FName,TUniquePtr<FAssetData>> Assets ; TMultiMap<FName,TUniquePtr<FAssetData>> AssetsForGameThread ; TRingBuffer<FString> Paths ; TMultiMap<FName,FPackageDependencyData> Dependencies ; TMultiMap<FName,FPackageDependencyData> DependenciesForGameThread ; TRingBuffer<FString> CookedPackageNamesWithoutAssetData ; TRingBuffer<FName> VerseFiles ; TArray<FString> BlockedFiles ; SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (Paths .)",
    "insertText": "Trim()"
  },
  {
    "label": "GetAndTrimSearchResults()",
    "kind": "Method",
    "detail": "Function (} } ; struct FResultContext { bool bIsSearching = false ; bool bAbleToProgress = false ; TArray<double> SearchTimes ; int32 NumFilesToSearch = 0 ; int32 NumPathsToSearch = 0 ; bool bIsDiscoveringFiles = false ; } ; void)",
    "insertText": "GetAndTrimSearchResults(FResults& InOutResults, FResultContext& OutContext)"
  },
  {
    "label": "GetDiagnostics()",
    "kind": "Method",
    "detail": "Function (FAssetGatherDiagnostics)",
    "insertText": "GetDiagnostics()"
  },
  {
    "label": "GetPackageResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackageResults(FResults& InOutResults)"
  },
  {
    "label": "WaitOnPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitOnPath(FStringView LocalPath)"
  },
  {
    "label": "ClearCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCache()"
  },
  {
    "label": "ScanPathsSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanPathsSynchronous(const TArray<FString>& InPaths, bool bForceRescan, bool bIgnoreDenyListScanFilters)"
  },
  {
    "label": "WaitForIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForIdle(float TimeoutSeconds = -1.0f)"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "SetInitialPluginsLoaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInitialPluginsLoaded()"
  },
  {
    "label": "IsGatheringDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGatheringDependencies()"
  },
  {
    "label": "IsCacheReadEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheReadEnabled()"
  },
  {
    "label": "IsCacheWriteEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheWriteEnabled()"
  },
  {
    "label": "AddMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMountPoint(FStringView LocalPath, FStringView LongPackageName)"
  },
  {
    "label": "RemoveMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMountPoint(FStringView LocalPath)"
  },
  {
    "label": "AddRequiredMountPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequiredMountPoints(TArrayView<FString> LocalPaths)"
  },
  {
    "label": "OnDirectoryCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryCreated(FStringView LocalPath)"
  },
  {
    "label": "OnFilesCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilesCreated(TConstArrayView<FString> LocalPaths)"
  },
  {
    "label": "PrioritizeSearchPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeSearchPath(const FString& PathToPrioritize)"
  },
  {
    "label": "SetIsOnAllowList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsOnAllowList(FStringView LocalPath, bool bIsAllowed)"
  },
  {
    "label": "IsOnAllowList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnAllowList(FStringView LocalPath)"
  },
  {
    "label": "IsOnDenyList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOnDenyList(FStringView LocalPath)"
  },
  {
    "label": "IsMonitored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMonitored(FStringView LocalPath)"
  },
  {
    "label": "IsVerseFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVerseFile(FStringView FilePath)"
  },
  {
    "label": "GetVerseFileExtensions()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<const TCHAR*>)",
    "insertText": "GetVerseFileExtensions()"
  },
  {
    "label": "ReadAssetFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAssetFile(FPackageReader& PackageReader, TArray<FAssetData*>& AssetDataList, FPackageDependencyData& DependencyData, TArray<FString>& CookedPackagesToLoadUponDiscovery, FPackageReader::EReadOptions Options)"
  },
  {
    "label": "PauseProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PauseProcessing()"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (IsProcessingPaused .)",
    "insertText": "fetch_add(1, std::memory_order_relaxed)"
  },
  {
    "label": "ResumeProcessing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeProcessing()"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (IsProcessingPaused .)",
    "insertText": "fetch_sub(1, std::memory_order_relaxed)"
  },
  {
    "label": "IsProcessingPauseRequested()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProcessingPauseRequested()"
  },
  {
    "label": "SetGatherOnGameThreadOnly()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGatherOnGameThreadOnly(bool bValue)"
  },
  {
    "label": "IsGatherOnGameThreadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGatherOnGameThreadOnly()"
  },
  {
    "label": "InnerTickLoop()",
    "kind": "Method",
    "detail": "Function (private : enum class ETickResult { KeepTicking,PollDiscovery,Idle,Interrupt,} ; void)",
    "insertText": "InnerTickLoop(bool bInSynchronousTick, bool bContributeToCacheSave, double EndTimeSeconds)"
  },
  {
    "label": "TickInternal()",
    "kind": "Method",
    "detail": "Function (ETickResult)",
    "insertText": "TickInternal(double& TickStartTime, bool bPollDiscovery)"
  },
  {
    "label": "IngestDiscoveryResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IngestDiscoveryResults()"
  },
  {
    "label": "OnFileCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFileCreated(FStringView LocalPath)"
  },
  {
    "label": "SetDirectoryProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirectoryProperties(FStringView LocalPath, const UE::AssetDataGather::Private::FSetPathProperties& Properties)"
  },
  {
    "label": "WaitOnPathsInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitOnPathsInternal(TArrayView<UE::AssetDataGather::Private::FPathExistence> QueryPaths)"
  },
  {
    "label": "SortPathsByPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortPathsByPriority(TArrayView<UE::AssetDataGather::Private::FPathExistence> QueryPaths, UE::AssetDataGather::Private::EPriority Priority, int32& OutNumPaths)"
  },
  {
    "label": "ReadAssetFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAssetFile(const FString& AssetLongPackageName, const FString& AssetFilename, TArray<FAssetData*>& AssetDataList, FPackageDependencyData& DependencyData, TArray<FString>& CookedPackagesToLoadUponDiscovery, bool& OutCanRetry)"
  },
  {
    "label": "ConsumeCacheFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConsumeCacheFiles(TArray<UE::AssetDataGather::Private::FCachePayload> Payloads)"
  },
  {
    "label": "TryReserveSaveCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryReserveSaveCache(bool& bOutShouldSave, TArray<TPair<FName,FDiskCachedAssetData*>>& AssetsToSave)"
  },
  {
    "label": "SaveCacheFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCacheFile(const TArray<TPair<FName,FDiskCachedAssetData*>>& AssetsToSave)"
  },
  {
    "label": "SaveCacheFileInternal()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "SaveCacheFileInternal(const FString& CacheFilename, const TArray<TPair<FName,FDiskCachedAssetData*>>& AssetsToSave)"
  },
  {
    "label": "GetAssetsToSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsToSave(TArrayView<const FString> SaveCacheLongPackageNameDirs, TArray<TPair<FName,FDiskCachedAssetData*>>& OutAssetsToSave)"
  },
  {
    "label": "GetCacheAssetsToSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCacheAssetsToSave(TArray<TPair<FName,FDiskCachedAssetData*>>& OutAssetsToSave)"
  },
  {
    "label": "AddToCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToCache(FName PackageName, FDiskCachedAssetData* DiskCachedAssetData)"
  },
  {
    "label": "SetIsIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIdle(bool IsIdle)"
  },
  {
    "label": "SetIsIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsIdle(bool IsIdle, double& TickStartTime)"
  },
  {
    "label": "FScopedGatheringPause()",
    "kind": "Method",
    "detail": "Function (struct FScopedGatheringPause {)",
    "insertText": "FScopedGatheringPause(const FAssetDataGatherer& InOwner)"
  },
  {
    "label": "FScopedGatheringPause()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedGatheringPause()"
  },
  {
    "label": "NormalizeLocalPath()",
    "kind": "Method",
    "detail": "Function (const FAssetDataGatherer& Owner ; } ; FString)",
    "insertText": "NormalizeLocalPath(FStringView LocalPath)"
  },
  {
    "label": "NormalizeLongPackageName()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "NormalizeLongPackageName(FStringView LongPackageName)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (bGatherOnGameThreadOnly .)",
    "insertText": "store(bValue, std::memory_order_relaxed)"
  }
]