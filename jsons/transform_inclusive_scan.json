[
  {
    "label": "_InputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InputIterator"
  },
  {
    "label": "_OutputIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutputIterator"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_BinaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_BinaryOp"
  },
  {
    "label": "_UnaryOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_UnaryOp"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___NUMERIC_TRANSFORM_INCLUSIVE_SCAN_H # define _LIBCPP___NUMERIC_TRANSFORM_INCLUSIVE_SCAN_H # include<__config> # include<__iterator / iterator_traits . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_BEGIN_NAMESPACE_STD #if _LIBCPP_STD_VER > 14 template <class _InputIterator, class _OutputIterator, class _Tp, class _BinaryOp, class _UnaryOp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator transform_inclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOp __b, _UnaryOp __u, _Tp __init)"
  },
  {
    "label": "__b()",
    "kind": "Method",
    "detail": "Function (__init =)",
    "insertText": "__b(__init, __u(*__first))"
  },
  {
    "label": "transform_inclusive_scan()",
    "kind": "Method",
    "detail": "Function (* __result = __init ; } return __result ; } template<class _InputIterator,class _OutputIterator,class _BinaryOp,class _UnaryOp> _LIBCPP_INLINE_VISIBILITY _LIBCPP_CONSTEXPR_AFTER_CXX17 _OutputIterator)",
    "insertText": "transform_inclusive_scan(_InputIterator __first, _InputIterator __last, _OutputIterator __result, _BinaryOp __b, _UnaryOp __u)"
  },
  {
    "label": "__u()",
    "kind": "Method",
    "detail": "Function (iterator_traits<_InputIterator>::value_type __init =)",
    "insertText": "__u(*__first)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* __result + + = __init ;)",
    "insertText": "if(++__first != __last) return _VSTD::transform_inclusive_scan(__first, __last, __result, __b, __u, __init)"
  }
]