[
  {
    "label": "TileSampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TileSampler"
  },
  {
    "label": "GridResampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridResampler"
  },
  {
    "label": "RangeProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RangeProcessor"
  },
  {
    "label": "GridTransformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridTransformer"
  },
  {
    "label": "Sampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Sampler"
  },
  {
    "label": "GridT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridT"
  },
  {
    "label": "MatrixTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MatrixTransform"
  },
  {
    "label": "ABTransform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABTransform"
  },
  {
    "label": "HalfWidthOp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HalfWidthOp"
  },
  {
    "label": "TreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TreeT"
  },
  {
    "label": "InTreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InTreeT"
  },
  {
    "label": "OutTreeT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutTreeT"
  },
  {
    "label": "Transformer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transformer"
  },
  {
    "label": "resampleToMatch()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_GRIDTRANSFORMER_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_GRIDTRANSFORMER_HAS_BEEN_INCLUDED # include<openvdb / Grid . h> # include<openvdb / Types . h> # include<openvdb / math / Math . h> # include<openvdb / util / NullInterrupter . h> # include \" ChangeBackground . h \" # include \" Interpolation . h \" # include \" LevelSetRebuild . h \" # include \" SignedFloodFill . h \" # include \" Prune . h \" # include<tbb / blocked_range . h> # include<tbb / parallel_reduce . h> # include<cmath> # include<functional> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<Sampler,Interrupter,GridType> void)",
    "insertText": "resampleToMatch(const GridType& inGrid, GridType& outGrid, Interrupter& interrupter)"
  },
  {
    "label": "resampleToMatch()",
    "kind": "Method",
    "detail": "Function (template<Sampler,GridType> void)",
    "insertText": "resampleToMatch(const GridType& inGrid, GridType& outGrid)"
  },
  {
    "label": "TileSampler()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<Sampler,TreeT> class TileSampler : public Sampler { public : using ValueT = TreeT::ValueType ;)",
    "insertText": "TileSampler(const CoordBBox& b, const ValueT& tileVal, bool on): mBBox(b.min().asVec3d(), b.max().asVec3d()), mVal(tileVal), mActive(on), mEmpty(false)"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (mBBox .)",
    "insertText": "expand(-this->radius())"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (mEmpty = mBBox .)",
    "insertText": "empty()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "sample(const TreeT& inTree, const Vec3R& inCoord, ValueT& result)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (result = mVal ; return mActive ; } return)",
    "insertText": "sample(inTree, inCoord, result)"
  },
  {
    "label": "TileSampler()",
    "kind": "Method",
    "detail": "Function (} protected : BBoxd mBBox ; ValueT mVal ; bool mActive,mEmpty ; } ; template<TreeT> class TileSampler<PointSampler,TreeT> : public PointSampler { public :)",
    "insertText": "TileSampler(const CoordBBox&, const typename TreeT::ValueType&, bool)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} } ; } class GridResampler { public : using Ptr = SharedPtr<GridResampler> ; using InterruptFunc = std::function<)",
    "insertText": "bool(void)"
  },
  {
    "label": "GridResampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridResampler(): mThreaded(true), mTransformTiles(true)"
  },
  {
    "label": "GridResampler()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "GridResampler()"
  },
  {
    "label": "GridResampler()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GridResampler(const GridResampler&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GridResampler&)",
    "insertText": "operator(const GridResampler&)"
  },
  {
    "label": "setThreaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setThreaded(bool b)"
  },
  {
    "label": "threaded()",
    "kind": "Method",
    "detail": "Function (mThreaded = b ; } bool)",
    "insertText": "threaded()"
  },
  {
    "label": "transformTiles()",
    "kind": "Method",
    "detail": "Function (mTransformTiles = b ; } bool)",
    "insertText": "transformTiles()"
  },
  {
    "label": "transformGrid()",
    "kind": "Method",
    "detail": "Function (template<Sampler,GridT,Transformer> void)",
    "insertText": "transformGrid(const Transformer&, const GridT& inGrid, GridT& outGrid)"
  },
  {
    "label": "applyTransform()",
    "kind": "Method",
    "detail": "Function (protected : template<Sampler,GridT,Transformer> void)",
    "insertText": "applyTransform(const Transformer&, const GridT& inGrid, GridT& outGrid)"
  },
  {
    "label": "interrupt()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "interrupt()"
  },
  {
    "label": "transformBBox()",
    "kind": "Method",
    "detail": "Function (} private : template<Sampler,InTreeT,OutTreeT,Transformer> void)",
    "insertText": "transformBBox(const Transformer&, const CoordBBox& inBBox, const InTreeT& inTree, OutTreeT& outTree, const InterruptFunc&, const Sampler& = Sampler())"
  },
  {
    "label": "GridTransformer()",
    "kind": "Method",
    "detail": "Function (template<Sampler,TreeT,Transformer> class RangeProcessor ; bool mThreaded,mTransformTiles ; InterruptFunc mInterrupt ; } ; class GridTransformer : public GridResampler { public : using Ptr = SharedPtr<GridTransformer> ;)",
    "insertText": "GridTransformer(const Mat4R& xform)"
  },
  {
    "label": "GridTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridTransformer(const Vec3R& pivot, const Vec3R& scale, const Vec3R& rotate, const Vec3R& translate, const std::string& xformOrder = \"tsr\", const std::string& rotationOrder = \"zyx\")"
  },
  {
    "label": "GridTransformer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GridTransformer()"
  },
  {
    "label": "GridTransformer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GridTransformer(const GridTransformer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (GridTransformer&)",
    "insertText": "operator(const GridTransformer&)"
  },
  {
    "label": "getTransform()",
    "kind": "Method",
    "detail": "Function (const Mat4R&)",
    "insertText": "getTransform()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (private : struct MatrixTransform ; void)",
    "insertText": "init(const Vec3R& pivot, const Vec3R& scale, const Vec3R& rotate, const Vec3R& translate, const std::string& xformOrder, const std::string& rotOrder)"
  },
  {
    "label": "decompose()",
    "kind": "Method",
    "detail": "Function (Vec3R mPivot ; Vec3i mMipLevels ; Mat4R mTransform,mPreScaleTransform,mPostScaleTransform ; } ; namespace local_util { enum { DECOMP_INVALID = 0,DECOMP_VALID = 1,DECOMP_UNIQUE = 2 } ; template<T> int)",
    "insertText": "decompose(const math::Mat4<T>& m, math::Vec3<T>& scale, math::Vec3<T>& rotate, math::Vec3<T>& translate)"
  },
  {
    "label": "getTranslation()",
    "kind": "Method",
    "detail": "Function (translate = m .)",
    "insertText": "getTranslation()"
  },
  {
    "label": "getMat3()",
    "kind": "Method",
    "detail": "Function (const math::Mat3<T> xform = m .)",
    "insertText": "getMat3()"
  },
  {
    "label": "unsignedScale()",
    "kind": "Method",
    "detail": "Function (const math::Vec3<T>)",
    "insertText": "unsignedScale((math::Vec3<T>(1, 0, 0) * xform).length(), (math::Vec3<T>(0, 1, 0) * xform).length(), (math::Vec3<T>(0, 0, 1) * xform).length())"
  },
  {
    "label": "eq()",
    "kind": "Method",
    "detail": "Function (const bool hasUniformScale = unsignedScale .)",
    "insertText": "eq(math::Vec3<T>(unsignedScale[0]))"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (bool hasRotation = false ; bool validDecomposition = false ; T minAngle = std::numeric_limits<T)",
    "insertText": "max()"
  },
  {
    "label": "signedScale()",
    "kind": "Method",
    "detail": "Function (const math::Vec3<T>)",
    "insertText": "signedScale(n & 0x1 ? -unsignedScale.x() : unsignedScale.x(), n & 0x2 ? -unsignedScale.y() : unsignedScale.y(), n & 0x4 ? -unsignedScale.z() : unsignedScale.z())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const math::Mat3<T> mat = xform* math::scale<math::Mat3<)",
    "insertText": "T(signedScale).inverse()"
  },
  {
    "label": "eulerAngles()",
    "kind": "Method",
    "detail": "Function (const math::Vec3<T> tmpAngle =)",
    "insertText": "eulerAngles(mat, math::XYZ_ROTATION)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const math::Mat3<T> rebuild = math::rotation<math::Mat3<)",
    "insertText": "T(math::Vec3<T>(0, 0, 1), tmpAngle.z()) * math::rotation<math::Mat3<T> >(math::Vec3<T>(0, 1, 0), tmpAngle.y()) * math::rotation<math::Mat3<T> >(math::Vec3<T>(1, 0, 0), tmpAngle.x()) * math::scale<math::Mat3<T> >(signedScale)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const T maxAngle =)",
    "insertText": "max(std::abs(tmpAngle[0]), std::max(std::abs(tmpAngle[1]), std::abs(tmpAngle[2])))"
  },
  {
    "label": "eq()",
    "kind": "Method",
    "detail": "Function (minAngle = maxAngle ; rotate = tmpAngle ; scale = signedScale ; hasRotation = ! rotate .)",
    "insertText": "eq(math::Vec3<T>::zero())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (validDecomposition = true ;)",
    "insertText": "if(hasUniformScale || !hasRotation)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } } })",
    "insertText": "if(!validDecomposition)"
  },
  {
    "label": "MatrixTransform()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MatrixTransform(const Mat4R& xform): mat(xform), invMat(xform.inverse())"
  },
  {
    "label": "isAffine()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isAffine()"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} Vec3R)",
    "insertText": "transform(const Vec3R& pos)"
  },
  {
    "label": "invTransform()",
    "kind": "Method",
    "detail": "Function (} Vec3R)",
    "insertText": "invTransform(const Vec3R& pos)"
  },
  {
    "label": "ABTransform()",
    "kind": "Method",
    "detail": "Function (} Mat4R mat,invMat ; } ; class ABTransform { public :)",
    "insertText": "ABTransform(const math::Transform& aXform, const math::Transform& bXform): mAXform(aXform), mBXform(bXform), mIsAffine(mAXform.isLinear() && mBXform.isLinear()), mIsIdentity(mIsAffine && mAXform == mBXform)"
  },
  {
    "label": "invTransform()",
    "kind": "Method",
    "detail": "Function (} openvdb::Vec3R)",
    "insertText": "invTransform(const openvdb::Vec3R& pos)"
  },
  {
    "label": "getA()",
    "kind": "Method",
    "detail": "Function (} const math::Transform&)",
    "insertText": "getA()"
  },
  {
    "label": "xform()",
    "kind": "Method",
    "detail": "Function (ABTransform)",
    "insertText": "xform(inGrid.transform(), outGrid.transform())"
  },
  {
    "label": "setTree()",
    "kind": "Method",
    "detail": "Function (outGrid .)",
    "insertText": "setTree(inGrid.tree().copy())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(xform.isAffine())"
  },
  {
    "label": "getA()",
    "kind": "Method",
    "detail": "Function (Mat4R mat = xform .)",
    "insertText": "getA().baseMap()->getAffineMap()->getMat4() * ( xform.getB().baseMap()->getAffineMap()->getMat4().inverse())"
  },
  {
    "label": "transformer()",
    "kind": "Method",
    "detail": "Function (GridTransformer)",
    "insertText": "transformer(mat)"
  },
  {
    "label": "setInterrupter()",
    "kind": "Method",
    "detail": "Function (transformer .)",
    "insertText": "setInterrupter(interrupter)"
  },
  {
    "label": "Sampler()",
    "kind": "Method",
    "detail": "Function (transformer . transformGrid<)",
    "insertText": "Sampler(inGrid, outGrid)"
  },
  {
    "label": "Sampler()",
    "kind": "Method",
    "detail": "Function (resampler . transformGrid<)",
    "insertText": "Sampler(xform, inGrid, outGrid)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (} } template<ValueType> struct HalfWidthOp { ValueType)",
    "insertText": "eval(const ValueType& background, const Vec3d& voxelSize)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_BEGIN ValueType)",
    "insertText": "result(background * (1.0 / voxelSize[0]))"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (OPENVDB_NO_TYPE_CONVERSION_WARNING_END return result ; } } ; template<> struct HalfWidthOp<bool> { bool)",
    "insertText": "eval(const bool& background, const Vec3d&)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (const ValueT halfWidth = outIsLevelSet ? HalfWidthOp<ValueT)",
    "insertText": "eval(outGrid.background(), outGrid.voxelSize()) : HalfWidthOp<ValueT>::eval(inGrid.background(), inGrid.voxelSize())"
  },
  {
    "label": "doLevelSetRebuild()",
    "kind": "Method",
    "detail": "Function (GridType::Ptr tempGrid ; try { tempGrid =)",
    "insertText": "doLevelSetRebuild(inGrid, zeroVal<ValueT>(), halfWidth, halfWidth, &outGrid.constTransform(), &interrupter)"
  },
  {
    "label": "catch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "catch(TypeError&)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (tempGrid .)",
    "insertText": "reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(tempGrid)"
  },
  {
    "label": "setTree()",
    "kind": "Method",
    "detail": "Function (outGrid .)",
    "insertText": "setTree(tempGrid->treePtr())"
  },
  {
    "label": "Sampler()",
    "kind": "Method",
    "detail": "Function (util::NullInterrupter interrupter ; resampleToMatch<)",
    "insertText": "Sampler(inGrid, outGrid, interrupter)"
  },
  {
    "label": "GridTransformer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "GridTransformer(const Mat4R& xform): mPivot(0, 0, 0), mMipLevels(0, 0, 0), mTransform(xform), mPreScaleTransform(Mat4R::identity()), mPostScaleTransform(Mat4R::identity())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Vec3R scale,rotate,translate ;)",
    "insertText": "if(local_util::decompose(mTransform, scale, rotate, translate))"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(mPivot, scale, rotate, translate, \"rst\", \"zyx\")"
  },
  {
    "label": "GridTransformer()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "GridTransformer(const Vec3R& pivot, const Vec3R& scale, const Vec3R& rotate, const Vec3R& translate, const std::string& xformOrder, const std::string& rotOrder): mPivot(0, 0, 0), mMipLevels(0, 0, 0), mPreScaleTransform(Mat4R::identity()), mPostScaleTransform(Mat4R::identity())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(pivot, scale, rotate, translate, xformOrder, rotOrder)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"invalid transform order (\" + xformOrder + \")\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(rotOrder.size() != 3)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(ValueError, \"invalid rotation order (\" + rotOrder + \")\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} mPivot = pivot ; Vec3R scaleRemainder = scale ;)",
    "insertText": "for(int i = 0; i < 3; ++i)"
  },
  {
    "label": "mMipLevels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "mMipLevels(i) = int(std::floor(-std::log(s)/std::log(2.0)))"
  },
  {
    "label": "scaleRemainder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scaleRemainder(i) = scale(i) * (1 << mMipLevels(i))"
  },
  {
    "label": "identity()",
    "kind": "Method",
    "detail": "Function (} } mTransform = mPreScaleTransform = mPostScaleTransform =)",
    "insertText": "identity()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Mat4R* remainder =& mPostScaleTransform ; int rpos,spos,tpos ; rpos = spos = tpos = 3 ;)",
    "insertText": "for(int ix = 2; ix >= 0; --ix)"
  },
  {
    "label": "preTranslate()",
    "kind": "Method",
    "detail": "Function (remainder ->)",
    "insertText": "preTranslate(pivot)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int xpos,ypos,zpos ; xpos = ypos = zpos = 3 ;)",
    "insertText": "for(int ir = 2; ir >= 0; --ir)"
  },
  {
    "label": "preRotate()",
    "kind": "Method",
    "detail": "Function (remainder ->)",
    "insertText": "preRotate(math::X_AXIS, rotate.x())"
  },
  {
    "label": "preRotate()",
    "kind": "Method",
    "detail": "Function (break ; case ' y ' : ypos = ir ; mTransform .)",
    "insertText": "preRotate(math::Y_AXIS, rotate.y())"
  },
  {
    "label": "preRotate()",
    "kind": "Method",
    "detail": "Function (break ; case ' z ' : zpos = ir ; mTransform .)",
    "insertText": "preRotate(math::Z_AXIS, rotate.z())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(xpos > 2 || ypos > 2 || zpos > 2)"
  },
  {
    "label": "preTranslate()",
    "kind": "Method",
    "detail": "Function (} mTransform .)",
    "insertText": "preTranslate(-pivot)"
  },
  {
    "label": "preScale()",
    "kind": "Method",
    "detail": "Function (mTransform .)",
    "insertText": "preScale(scale)"
  },
  {
    "label": "preScale()",
    "kind": "Method",
    "detail": "Function (remainder ->)",
    "insertText": "preScale(scaleRemainder)"
  },
  {
    "label": "preTranslate()",
    "kind": "Method",
    "detail": "Function (remainder =& mPreScaleTransform ; break ; case ' t ' : tpos = ix ; mTransform .)",
    "insertText": "preTranslate(translate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(tpos > 2 || rpos > 2 || spos > 2)"
  },
  {
    "label": "setInterrupter()",
    "kind": "Method",
    "detail": "Function (} } template<InterrupterType> void)",
    "insertText": "setInterrupter(InterrupterType& interrupter)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (mInterrupt =)",
    "insertText": "bind(&InterrupterType::wasInterrupted, &interrupter, -1)"
  },
  {
    "label": "transformGrid()",
    "kind": "Method",
    "detail": "Function (} template<Sampler,GridT,Transformer> void)",
    "insertText": "transformGrid(const Transformer& xform, const GridT& inGrid, GridT& outGrid)"
  },
  {
    "label": "changeBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "changeBackground(outGrid.tree(), inGrid.background())"
  },
  {
    "label": "transformGrid()",
    "kind": "Method",
    "detail": "Function (} template<class Sampler,class GridT> void)",
    "insertText": "transformGrid(const GridT& inGrid, GridT& outGrid)"
  },
  {
    "label": "xform()",
    "kind": "Method",
    "detail": "Function (const MatrixTransform)",
    "insertText": "xform(mTransform)"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (} else { bool firstPass = true ; const GridT::ValueType background = inGrid .)",
    "insertText": "background()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (GridT::Ptr tempGrid =)",
    "insertText": "create(background)"
  },
  {
    "label": "xform()",
    "kind": "Method",
    "detail": "Function (firstPass = false ; const MatrixTransform)",
    "insertText": "xform(mPreScaleTransform)"
  },
  {
    "label": "Sampler()",
    "kind": "Method",
    "detail": "Function (applyTransform<)",
    "insertText": "Sampler(xform, inGrid, *tempGrid)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} Vec3i count = mMipLevels ;)",
    "insertText": "while(count != Vec3i::zero())"
  },
  {
    "label": "setTranslation()",
    "kind": "Method",
    "detail": "Function (MatrixTransform xform ; xform . mat .)",
    "insertText": "setTranslation(mPivot)"
  },
  {
    "label": "preScale()",
    "kind": "Method",
    "detail": "Function (xform . mat .)",
    "insertText": "preScale(Vec3R( count.x() ? .5 : 1, count.y() ? .5 : 1, count.z() ? .5 : 1))"
  },
  {
    "label": "preTranslate()",
    "kind": "Method",
    "detail": "Function (xform . mat .)",
    "insertText": "preTranslate(-mPivot)"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (xform . invMat = xform . mat .)",
    "insertText": "inverse()"
  },
  {
    "label": "Sampler()",
    "kind": "Method",
    "detail": "Function (applyTransform<)",
    "insertText": "Sampler(xform, *tempGrid, *destGrid)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (tempGrid .)",
    "insertText": "swap(destGrid)"
  },
  {
    "label": "maxComponent()",
    "kind": "Method",
    "detail": "Function (} count =)",
    "insertText": "maxComponent(count - 1, Vec3i::zero())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!mPostScaleTransform.eq(Mat4R::identity()))"
  },
  {
    "label": "xform()",
    "kind": "Method",
    "detail": "Function (const MatrixTransform)",
    "insertText": "xform(mPostScaleTransform)"
  },
  {
    "label": "Sampler()",
    "kind": "Method",
    "detail": "Function (applyTransform<)",
    "insertText": "Sampler(xform, *tempGrid, outGrid)"
  },
  {
    "label": "RangeProcessor()",
    "kind": "Method",
    "detail": "Function (} } } template<class Sampler,class TreeT,Transformer> class GridResampler::RangeProcessor { public : using LeafIterT = TreeT::LeafCIter ; using TileIterT = TreeT::ValueAllCIter ; using LeafRange = tree::IteratorRange<LeafIterT> ; using TileRange = tree::IteratorRange<TileIterT> ; using InTreeAccessor = tree::ValueAccessor<const TreeT> ; using OutTreeAccessor = tree::ValueAccessor<TreeT> ;)",
    "insertText": "RangeProcessor(const Transformer& xform, const CoordBBox& b, const TreeT& inT, TreeT& outT): mIsRoot(true), mXform(xform), mBBox(b), mInTree(inT), mOutTree(&outT), mInAcc(mInTree), mOutAcc(*mOutTree)"
  },
  {
    "label": "RangeProcessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RangeProcessor(const Transformer& xform, const CoordBBox& b, const TreeT& inTree): mIsRoot(false), mXform(xform), mBBox(b), mInTree(inTree), mOutTree(new TreeT(inTree.background())), mInAcc(mInTree), mOutAcc(*mOutTree)"
  },
  {
    "label": "RangeProcessor()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "RangeProcessor()"
  },
  {
    "label": "RangeProcessor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RangeProcessor(RangeProcessor& other, tbb::split): mIsRoot(false), mXform(other.mXform), mBBox(other.mBBox), mInTree(other.mInTree), mOutTree(new TreeT(mInTree.background())), mInAcc(mInTree), mOutAcc(*mOutTree), mInterrupt(other.mInterrupt)"
  },
  {
    "label": "setInterrupt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setInterrupt(const InterruptFunc& f)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (mInterrupt = f ; } void)",
    "insertText": "operator()(LeafRange& r)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (LeafIterT i = r .)",
    "insertText": "iterator()"
  },
  {
    "label": "bbox()",
    "kind": "Method",
    "detail": "Function (CoordBBox)",
    "insertText": "bbox(i->origin(), i->origin() + Coord(i->dim()))"
  },
  {
    "label": "CoordBBox()",
    "kind": "Method",
    "detail": "Function (bbox =)",
    "insertText": "CoordBBox(Coord::maxComponent(bbox.min(), mBBox.min()), Coord::minComponent(bbox.max(), mBBox.max()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!bbox.empty())"
  },
  {
    "label": "Sampler()",
    "kind": "Method",
    "detail": "Function (transformBBox<)",
    "insertText": "Sampler(mXform, bbox, mInAcc, mOutAcc, mInterrupt)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "operator()(TileRange& r)"
  },
  {
    "label": "getBoundingBox()",
    "kind": "Method",
    "detail": "Function (CoordBBox bbox ; i .)",
    "insertText": "getBoundingBox(bbox)"
  },
  {
    "label": "sampler()",
    "kind": "Method",
    "detail": "Function (internal::TileSampler<Sampler,InTreeAccessor>)",
    "insertText": "sampler(bbox, i.getValue(), i.isValueOn())"
  },
  {
    "label": "transformBBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transformBBox(mXform, bbox, mInAcc, mOutAcc, mInterrupt, sampler)"
  },
  {
    "label": "join()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "join(RangeProcessor& other)"
  },
  {
    "label": "applyTransform()",
    "kind": "Method",
    "detail": "Function (} const bool mIsRoot ; Transformer mXform ; CoordBBox mBBox ; const TreeT& mInTree ; TreeT* mOutTree ; InTreeAccessor mInAcc ; OutTreeAccessor mOutAcc ; InterruptFunc mInterrupt ; } ; template<class Sampler,class GridT,Transformer> void)",
    "insertText": "applyTransform(const Transformer& xform, const GridT& inGrid, GridT& outGrid)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (using TreeT = GridT::TreeType ; const TreeT& inTree = inGrid .)",
    "insertText": "tree()"
  },
  {
    "label": "getGridClass()",
    "kind": "Method",
    "detail": "Function (using RangeProc = RangeProcessor<Sampler,TreeT,Transformer> ; const GridClass gridClass = inGrid .)",
    "insertText": "getGridClass()"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (RangeProc)",
    "insertText": "proc(xform, CoordBBox(), inTree, outTree)"
  },
  {
    "label": "setInterrupt()",
    "kind": "Method",
    "detail": "Function (proc .)",
    "insertText": "setInterrupt(mInterrupt)"
  },
  {
    "label": "cbeginValueAll()",
    "kind": "Method",
    "detail": "Function (RangeProc::TileIterT tileIter = inTree .)",
    "insertText": "cbeginValueAll()"
  },
  {
    "label": "setMaxDepth()",
    "kind": "Method",
    "detail": "Function (tileIter .)",
    "insertText": "setMaxDepth(tileIter.getLeafDepth() - 1)"
  },
  {
    "label": "tileRange()",
    "kind": "Method",
    "detail": "Function (RangeProc::TileRange)",
    "insertText": "tileRange(tileIter)"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(tileRange, proc)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "proc(tileRange)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } CoordBBox clipBBox ;)",
    "insertText": "if(gridClass == GRID_LEVEL_SET)"
  },
  {
    "label": "evalActiveVoxelBoundingBox()",
    "kind": "Method",
    "detail": "Function (clipBBox = inGrid .)",
    "insertText": "evalActiveVoxelBoundingBox()"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (} RangeProc)",
    "insertText": "proc(xform, clipBBox, inTree, outTree)"
  },
  {
    "label": "leafRange()",
    "kind": "Method",
    "detail": "Function (RangeProc::LeafRange)",
    "insertText": "leafRange(inTree.cbeginLeaf())"
  },
  {
    "label": "parallel_reduce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_reduce(leafRange, proc)"
  },
  {
    "label": "proc()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "proc(leafRange)"
  },
  {
    "label": "pruneLevelSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pruneLevelSet(outTree)"
  },
  {
    "label": "signedFloodFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "signedFloodFill(outTree)"
  },
  {
    "label": "transformBBox()",
    "kind": "Method",
    "detail": "Function (} } template<class Sampler,class InTreeT,class OutTreeT,class Transformer> void)",
    "insertText": "transformBBox(const Transformer& xform, const CoordBBox& bbox, const InTreeT& inTree, OutTreeT& outTree, const InterruptFunc& interrupt, const Sampler& sampler)"
  },
  {
    "label": "inRMin()",
    "kind": "Method",
    "detail": "Function (using ValueT = OutTreeT::ValueType ; Vec3R)",
    "insertText": "inRMin(bbox.min().x(), bbox.min().y(), bbox.min().z()), inRMax(bbox.max().x()+1, bbox.max().y()+1, bbox.max().z()+1), outRMin = math::minComponent(xform.transform(inRMin), xform.transform(inRMax)), outRMax = math::maxComponent(xform.transform(inRMin), xform.transform(inRMax))"
  },
  {
    "label": "corner()",
    "kind": "Method",
    "detail": "Function (Vec3R)",
    "insertText": "corner(i & 1 ? inRMax.x() : inRMin.x(), i & 2 ? inRMax.y() : inRMin.y(), i & 4 ? inRMax.z() : inRMin.z())"
  },
  {
    "label": "minComponent()",
    "kind": "Method",
    "detail": "Function (outRMin =)",
    "insertText": "minComponent(outRMin, xform.transform(corner))"
  },
  {
    "label": "maxComponent()",
    "kind": "Method",
    "detail": "Function (outRMax =)",
    "insertText": "maxComponent(outRMax, xform.transform(corner))"
  },
  {
    "label": "floorVec3()",
    "kind": "Method",
    "detail": "Function (} Vec3i outMin =)",
    "insertText": "floorVec3(outRMin) - Sampler::radius(), outMax = local_util::ceilVec3(outRMax) + Sampler::radius()"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (Vec3R xyz,inXYZ ; Coord outXYZ ; int& x = outXYZ .)",
    "insertText": "x(), &y = outXYZ.y(), &z = outXYZ.z()"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (xyz .)",
    "insertText": "x()"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (xyz .)",
    "insertText": "y()"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (xyz .)",
    "insertText": "z()"
  },
  {
    "label": "invTransform()",
    "kind": "Method",
    "detail": "Function (inXYZ = xform .)",
    "insertText": "invTransform(xyz)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ValueT result ;)",
    "insertText": "if(sampler.sample(inTree, inXYZ, result))"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (outTree .)",
    "insertText": "setValueOn(outXYZ, result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!outTree.isValueOn(outXYZ))"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (outTree .)",
    "insertText": "setValueOff(outXYZ, result)"
  },
  {
    "label": "invTransform()",
    "kind": "Method",
    "detail": "Function (} } } } } } else { const Vec3R translation = xform .)",
    "insertText": "invTransform(Vec3R(0, 0, 0)), deltaX = xform.invTransform(Vec3R(1, 0, 0)) - translation, deltaY = xform.invTransform(Vec3R(0, 1, 0)) - translation, deltaZ = xform.invTransform(Vec3R(0, 0, 1))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__ICC)"
  },
  {
    "label": "invTransform()",
    "kind": "Method",
    "detail": "Function (# endif Vec3R inStartX = xform .)",
    "insertText": "invTransform(Vec3R(outMin))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vec3R inStartY = inStartX ;)",
    "insertText": "for(y = outMin.y(); y <= outMax.y(); ++y, inStartY += deltaY)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vec3R inXYZ = inStartY ;)",
    "insertText": "for(z = outMin.z(); z <= outMax.z(); ++z, inXYZ += deltaZ)"
  }
]