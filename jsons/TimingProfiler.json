[
  {
    "label": "IEditableTimeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableTimeline"
  },
  {
    "label": "ITable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITable"
  },
  {
    "label": "FTimingProfilerTimer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingProfilerTimer"
  },
  {
    "label": "FTimingProfilerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingProfilerEvent"
  },
  {
    "label": "FTimingProfilerAggregatedStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingProfilerAggregatedStats"
  },
  {
    "label": "FTimingProfilerButterflyNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimingProfilerButterflyNode"
  },
  {
    "label": "FCreateAggreationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateAggreationParams"
  },
  {
    "label": "ITimingProfilerButterfly",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingProfilerButterfly"
  },
  {
    "label": "ITimingProfilerTimerReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingProfilerTimerReader"
  },
  {
    "label": "ITimingProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITimingProfilerProvider"
  },
  {
    "label": "IEditableTimingProfilerProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableTimingProfilerProvider"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringFwd . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformMath . h \" # include \" Model / MonotonicTimeline . h \" # include \" TraceServices / Common / CancellationToken . h \" # include \" TraceServices / Containers / Tables . h \" # include \" TraceServices / Containers / Timelines . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" namespace TraceServices { template<InEventType> class IEditableTimeline ; template<RowType> class ITable ; struct FTimingProfilerTimer { const TCHAR* Name = nullptr ; const TCHAR* File = nullptr ; uint32 Id = 0 ; union { struct { uint32 Line : 2 4 ; uint32 IsGpuTimer : 1 ; } ; uint32 LineAndFlags = 0 ; } ; } ; struct FTimingProfilerEvent { uint32 TimerIndex =)",
    "insertText": "uint32(-1)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; struct FTimingProfilerAggregatedStats { const FTimingProfilerTimer* Timer = nullptr ; uint64 InstanceCount = 0 ; double TotalInclusiveTime = 0 . 0 ; double MinInclusiveTime = DBL_MAX ; double MaxInclusiveTime = - DBL_MAX ; double AverageInclusiveTime = 0 . 0 ; double MedianInclusiveTime = 0 . 0 ; double TotalExclusiveTime = 0 . 0 ; double MinExclusiveTime = DBL_MAX ; double MaxExclusiveTime = - DBL_MAX ; double AverageExclusiveTime = 0 . 0 ; double MedianExclusiveTime = 0 . 0 ; } ; struct FTimingProfilerButterflyNode { const FTimingProfilerTimer* Timer = nullptr ; uint64 Count = 0 ; double InclusiveTime = 0 . 0 ; double ExclusiveTime = 0 . 0 ; const FTimingProfilerButterflyNode* Parent = nullptr ; TArray<FTimingProfilerButterflyNode*> Children ; } ; struct FCreateAggreationParams { double IntervalStart ; double IntervalEnd ; TFunction<)",
    "insertText": "bool(uint32)"
  },
  {
    "label": "ITimingProfilerButterfly()",
    "kind": "Method",
    "detail": "Function (bool IncludeGpu ; ETraceFrameType FrameType = ETraceFrameType::TraceFrameType_Count ; TSharedPtr<TraceServices::FCancellationToken> CancellationToken ; } ; class ITimingProfilerButterfly { public : ~)",
    "insertText": "ITimingProfilerButterfly()"
  },
  {
    "label": "GenerateCallersTree()",
    "kind": "Method",
    "detail": "Function (const FTimingProfilerButterflyNode&)",
    "insertText": "GenerateCallersTree(uint32 TimerId)"
  },
  {
    "label": "GenerateCalleesTree()",
    "kind": "Method",
    "detail": "Function (const FTimingProfilerButterflyNode&)",
    "insertText": "GenerateCalleesTree(uint32 TimerId)"
  },
  {
    "label": "GetTimer()",
    "kind": "Method",
    "detail": "Function (} ; class ITimingProfilerTimerReader { public : const FTimingProfilerTimer*)",
    "insertText": "GetTimer(uint32 TimerId)"
  },
  {
    "label": "GetTimerCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTimerCount()"
  },
  {
    "label": "GetMetadata()",
    "kind": "Method",
    "detail": "Function (TArrayView<const uint8>)",
    "insertText": "GetMetadata(uint32 TimerId)"
  },
  {
    "label": "ITimingProfilerProvider()",
    "kind": "Method",
    "detail": "Function (} ; class ITimingProfilerProvider : public IProvider { public : typedef ITimeline<FTimingProfilerEvent> Timeline ; ~)",
    "insertText": "ITimingProfilerProvider()"
  },
  {
    "label": "GetCpuThreadTimelineIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCpuThreadTimelineIndex(uint32 ThreadId, uint32& OutTimelineIndex)"
  },
  {
    "label": "GetGpuTimelineIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGpuTimelineIndex(uint32& OutTimelineIndex)"
  },
  {
    "label": "GetGpu2TimelineIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGpu2TimelineIndex(uint32& OutTimelineIndex)"
  },
  {
    "label": "ReadTimeline()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadTimeline(uint32 Index, TFunctionRef<void(const Timeline&)> Callback)"
  },
  {
    "label": "GetTimelineCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTimelineCount()"
  },
  {
    "label": "EnumerateTimelines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateTimelines(TFunctionRef<void(const Timeline&)> Callback)"
  },
  {
    "label": "ReadTimers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadTimers(TFunctionRef<void(const ITimingProfilerTimerReader&)> Callback)"
  },
  {
    "label": "CreateAggregation()",
    "kind": "Method",
    "detail": "Function (ITable<FTimingProfilerAggregatedStats>*)",
    "insertText": "CreateAggregation(const FCreateAggreationParams& Params)"
  },
  {
    "label": "CreateButterfly()",
    "kind": "Method",
    "detail": "Function (ITimingProfilerButterfly*)",
    "insertText": "CreateButterfly(double IntervalStart, double IntervalEnd, TFunctionRef<bool(uint32)> CpuThreadFilter, bool IncludeGpu)"
  },
  {
    "label": "IEditableTimingProfilerProvider()",
    "kind": "Method",
    "detail": "Function (} ; class IEditableTimingProfilerProvider : public IEditableProvider { public : ~)",
    "insertText": "IEditableTimingProfilerProvider()"
  },
  {
    "label": "AddCpuTimer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddCpuTimer(FStringView Name, const TCHAR* File, uint32 Line)"
  },
  {
    "label": "SetTimerNameAndLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimerNameAndLocation(uint32 TimerId, FStringView Name, const TCHAR* File, uint32 Line)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "AddMetadata(uint32 OriginalTimerId, TArray<uint8>&& Metadata)"
  },
  {
    "label": "GetCpuThreadEditableTimeline()",
    "kind": "Method",
    "detail": "Function (IEditableTimeline<FTimingProfilerEvent>&)",
    "insertText": "GetCpuThreadEditableTimeline(uint32 ThreadId)"
  },
  {
    "label": "GetTimingProfilerProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetTimingProfilerProviderName()"
  },
  {
    "label": "ReadTimingProfilerProvider()",
    "kind": "Method",
    "detail": "Function (const ITimingProfilerProvider*)",
    "insertText": "ReadTimingProfilerProvider(const IAnalysisSession& Session)"
  },
  {
    "label": "EditTimingProfilerProvider()",
    "kind": "Method",
    "detail": "Function (IEditableTimingProfilerProvider*)",
    "insertText": "EditTimingProfilerProvider(IAnalysisSession& Session)"
  }
]