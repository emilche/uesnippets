[
  {
    "label": "FMobileBasePassTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileBasePassTextures"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSkyLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyLightSceneProxy"
  },
  {
    "label": "FPlanarReflectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionSceneProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TMobileBasePassShaderElementData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassShaderElementData"
  },
  {
    "label": "TMobileBasePassVSPolicyParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassVSPolicyParamType"
  },
  {
    "label": "TMobileBasePassVSBaseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassVSBaseType"
  },
  {
    "label": "TMobileBasePassVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassVS"
  },
  {
    "label": "TMobileBasePassPSPolicyParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassPSPolicyParamType"
  },
  {
    "label": "TMobileBasePassPSBaseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassPSBaseType"
  },
  {
    "label": "TMobileBasePassPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassPS"
  },
  {
    "label": "FMobileBasePassMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileBasePassMeshProcessor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "MobileLocalLightsBufferEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileLocalLightsBufferEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileMergeLocalLightsInPrepassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileMergeLocalLightsInPrepassEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileMergeLocalLightsInBasepassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileMergeLocalLightsInBasepassEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "SetupMobileBasePassUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMobileBasePassUniformParameters(\n\tFRDGBuilder& GraphBuilder,\n\tconst FViewInfo& View,\n\tEMobileBasePass BasePass,\n\tconst FMobileBasePassTextures& MobileBasePassTextures,\n\tFMobileBasePassUniformParameters& BasePassParameters)"
  },
  {
    "label": "CreateMobileBasePassUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FMobileBasePassUniformParameters>)",
    "insertText": "CreateMobileBasePassUniformBuffer(\n\tFRDGBuilder& GraphBuilder,\n\tconst FViewInfo& View,\n\tEMobileBasePass BasePass,\n\tEMobileSceneTextureSetupMode SetupMode,\n\tconst FMobileBasePassTextures& MobileBasePassTextures = {})"
  },
  {
    "label": "SetupMobileDirectionalLightUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMobileDirectionalLightUniformParameters(\n\tconst FScene& Scene,\n\tconst FViewInfo& View,\n\tconst TArray<FVisibleLightInfo,SceneRenderingAllocator>& VisibleLightInfos,\n\tint32 ChannelIdx,\n\tbool bDynamicShadows,\n\tFMobileDirectionalLightShaderParameters& Parameters)"
  },
  {
    "label": "SetupMobileSkyReflectionUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMobileSkyReflectionUniformParameters(\n\tclass FSkyLightSceneProxy* SkyLight,\n\tFMobileReflectionCaptureShaderParameters& Parameters)"
  },
  {
    "label": "GetMobileForwardLocalLightSetting()",
    "kind": "Method",
    "detail": "Function (EMobileLocalLightSetting)",
    "insertText": "GetMobileForwardLocalLightSetting(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "MobileDefaultTranslucentColorTransmittanceMode()",
    "kind": "Method",
    "detail": "Function (EMobileTranslucentColorTransmittanceMode)",
    "insertText": "MobileDefaultTranslucentColorTransmittanceMode(EShaderPlatform Platform)"
  },
  {
    "label": "MobileActiveTranslucentColorTransmittanceMode()",
    "kind": "Method",
    "detail": "Function (EMobileTranslucentColorTransmittanceMode)",
    "insertText": "MobileActiveTranslucentColorTransmittanceMode(EShaderPlatform Platform, bool bExplicitDefaultMode)"
  },
  {
    "label": "MaterialRequiresColorTransmittanceBlending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialRequiresColorTransmittanceBlending(const FMaterial& MaterialResource)"
  },
  {
    "label": "MaterialRequiresColorTransmittanceBlending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialRequiresColorTransmittanceBlending(const FMaterialShaderParameters& MaterialParameters)"
  },
  {
    "label": "ShouldCacheShaderForColorTransmittanceFallback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCacheShaderForColorTransmittanceFallback(const FMaterialShaderPermutationParameters& Parameters, EMobileTranslucentColorTransmittanceMode TranslucentColorTransmittanceFallback)"
  },
  {
    "label": "MobileBasePassModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MobileBasePassModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "IsMobilePlatform()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsMobilePlatform(Parameters.Platform)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (private:)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, MobileDirectionLightBufferParam)"
  },
  {
    "label": "ModifyCompilationEnvironmentForQualityLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ModifyCompilationEnvironmentForQualityLevel(EShaderPlatform Platform, EMaterialQualityLevel::Type QualityLevel, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "SelectMeshLightmapPolicy()",
    "kind": "Method",
    "detail": "Function (ELightMapPolicyType)",
    "insertText": "SelectMeshLightmapPolicy(\n\t\tconst FScene* Scene, \n\t\tconst FMeshBatch& MeshBatch, \n\t\tconst FPrimitiveSceneProxy* PrimitiveSceneProxy, \n\t\tbool bPrimReceivesCSM, \n\t\tbool bUsedDeferredShading,\n\t\tbool bIsLitMaterial,\n\t\tbool bIsTranslucent)"
  },
  {
    "label": "GetShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShaders(\n\t\tELightMapPolicyType LightMapPolicyType,\n\t\tEMobileLocalLightSetting LocalLightSetting,\n\t\tconst FMaterial& MaterialResource,\n\t\tconst FVertexFactoryType* VertexFactoryType,\n\t\tTShaderRef<TMobileBasePassVSPolicyParamType<FUniformLightMapPolicy>>& VertexShader,\n\t\tTShaderRef<TMobileBasePassPSPolicyParamType<FUniformLightMapPolicy>>& PixelShader)"
  },
  {
    "label": "StaticCanReceiveCSM()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticCanReceiveCSM(const FLightSceneInfo* LightSceneInfo, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "SetOpaqueRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpaqueRenderState(FMeshPassProcessorRenderState& DrawRenderState, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterial& Material, FMaterialShadingModelField ShadingModels, bool bEnableReceiveDecalOutput, bool bUsesDeferredShading)"
  },
  {
    "label": "SetTranslucentRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslucentRenderState(FMeshPassProcessorRenderState& DrawRenderState, const FMaterial& Material, FMaterialShadingModelField ShadingModels)"
  },
  {
    "label": "CollectPSOInitializersForLMPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOInitializersForLMPolicy(\n\t\tconst FPSOPrecacheVertexFactoryData& VertexFactoryData,\n\t\tconst FMeshPassProcessorRenderState& RESTRICT DrawRenderState,\n\t\tconst FGraphicsPipelineRenderTargetsInfo& RESTRICT RenderTargetsInfo,\n\t\tconst FMaterial& RESTRICT MaterialResource,\n\t\tEMobileLocalLightSetting LocalLightSetting,\n\t\tconst ELightMapPolicyType LightMapPolicyType,\n\t\tERasterizerFillMode MeshFillMode,\n\t\tERasterizerCullMode MeshCullMode,\n\t\tEPrimitiveType PrimitiveType,\n\t\tTArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "TryAddMeshBatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Process(\n\t\tconst FMeshBatch& RESTRICT MeshBatch,\n\t\tuint64 BatchElementMask,\n\t\tint32 StaticMeshId,\n\t\tconst FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy,\n\t\tconst FMaterialRenderProxy& RESTRICT MaterialRenderProxy,\n\t\tconst FMaterial& RESTRICT MaterialResource,\n\t\tconst bool bIsMasked,\n\t\tconst bool bIsTranslucent,\n\t\tFMaterialShadingModelField ShadingModels,\n\t\tconst ELightMapPolicyType LightMapPolicyType,\n\t\tconst bool bCanReceiveCSM,\n\t\tconst FUniformLightMapPolicy::ElementDataType& RESTRICT LightMapElementData)"
  }
]