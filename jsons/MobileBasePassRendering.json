[
  {
    "label": "FMobileBasePassTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMobileBasePassTextures"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSkyLightSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyLightSceneProxy"
  },
  {
    "label": "FPlanarReflectionSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPlanarReflectionSceneProxy"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "TMobileBasePassShaderElementData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassShaderElementData"
  },
  {
    "label": "TMobileBasePassVSPolicyParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassVSPolicyParamType"
  },
  {
    "label": "TMobileBasePassVSBaseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassVSBaseType"
  },
  {
    "label": "TMobileBasePassVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassVS"
  },
  {
    "label": "TMobileBasePassPSPolicyParamType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassPSPolicyParamType"
  },
  {
    "label": "TMobileBasePassPSBaseType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassPSBaseType"
  },
  {
    "label": "TMobileBasePassPS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMobileBasePassPS"
  },
  {
    "label": "FMobileBasePassMeshProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMobileBasePassMeshProcessor"
  },
  {
    "label": "FMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterial"
  },
  {
    "label": "MobileLocalLightsBufferEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / IConsoleManager . h \" # include \" RHI . h \" # include \" ShaderParameters . h \" # include \" Shader . h \" # include \" HitProxies . h \" # include \" RHIStaticStates . h \" # include \" SceneManagement . h \" # include \" PrimitiveSceneInfo . h \" # include \" PostProcess / SceneRenderTargets . h \" # include \" LightMapRendering . h \" # include \" MeshMaterialShaderType . h \" # include \" MeshMaterialShader . h \" # include \" FogRendering . h \" # include \" PlanarReflectionRendering . h \" # include \" BasePassRendering . h \" # include \" SkyAtmosphereRendering . h \" # include \" RenderUtils . h \" # include \" DebugViewModeRendering . h \" # include \" LocalFogVolumeRendering . h \" # include \" DBufferTextures . h \" # include \" CompositionLighting / PostProcessDeferredDecals . h \" # include \" MobileSSR . h \" bool)",
    "insertText": "MobileLocalLightsBufferEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileMergeLocalLightsInPrepassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileMergeLocalLightsInPrepassEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "MobileMergeLocalLightsInBasepassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MobileMergeLocalLightsInBasepassEnabled(const FStaticShaderPlatform Platform)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (struct FMobileBasePassTextures { FDBufferTextures DBufferTextures = { } ; } ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FMobileBasePassUniformParameters, ) SHADER_PARAMETER(float, AmbientOcclusionStaticFraction) SHADER_PARAMETER_STRUCT(FFogUniformParameters, Fog) SHADER_PARAMETER_STRUCT(FFogUniformParameters, FogMMV) SHADER_PARAMETER_STRUCT(FLocalFogVolumeUniformParameters, LFV) SHADER_PARAMETER_STRUCT(FForwardLightData, Forward) SHADER_PARAMETER_STRUCT(FForwardLightData, ForwardMMV) SHADER_PARAMETER_STRUCT(FPlanarReflectionUniformParameters, PlanarReflection) SHADER_PARAMETER_STRUCT(FMobileSceneTextureUniformParameters, SceneTextures) SHADER_PARAMETER_STRUCT(FSubstrateMobileForwardPassUniformParameters, Substrate) SHADER_PARAMETER_STRUCT(FDebugViewModeUniformParameters, DebugViewMode) SHADER_PARAMETER_RDG_TEXTURE_UAV(RWTexture2D<uint>, QuadOverdraw) SHADER_PARAMETER_STRUCT(FReflectionUniformParameters, ReflectionsParameters) SHADER_PARAMETER_TEXTURE(Texture2D, PreIntegratedGFTexture) SHADER_PARAMETER_SAMPLER(SamplerState, PreIntegratedGFSampler) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, EyeAdaptationBuffer) SHADER_PARAMETER_RDG_BUFFER_UAV(RWStructuredBuffer<uint>, RWOcclusionBufferUAV) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, AmbientOcclusionTexture) SHADER_PARAMETER_SAMPLER(SamplerState, AmbientOcclusionSampler) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, ScreenSpaceShadowMaskTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2DArray, ScreenSpaceShadowMaskTextureArray) SHADER_PARAMETER_SAMPLER(SamplerState, ScreenSpaceShadowMaskSampler) SHADER_PARAMETER(uint32, bApplyHalfResLocalFogToSkyMeshes) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, HalfResLocalFogVolumeViewTexture) SHADER_PARAMETER_SAMPLER(SamplerState, HalfResLocalFogVolumeViewSampler) SHADER_PARAMETER_STRUCT_INCLUDE(FDBufferParameters, DBuffer) SHADER_PARAMETER_STRUCT(FMobileScreenSpaceReflectionParams, SSRParams) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "SetupMobileBasePassUniformParameters()",
    "kind": "Method",
    "detail": "Function (DepthPrePass,Opaque,Translucent } ; void)",
    "insertText": "SetupMobileBasePassUniformParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, EMobileBasePass BasePass, const FMobileBasePassTextures& MobileBasePassTextures, FMobileBasePassUniformParameters& BasePassParameters)"
  },
  {
    "label": "CreateMobileBasePassUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FMobileBasePassUniformParameters>)",
    "insertText": "CreateMobileBasePassUniformBuffer(FRDGBuilder& GraphBuilder, const FViewInfo& View, EMobileBasePass BasePass, EMobileSceneTextureSetupMode SetupMode, const FMobileBasePassTextures& MobileBasePassTextures = {})"
  },
  {
    "label": "SetupMobileDirectionalLightUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMobileDirectionalLightUniformParameters(const FScene& Scene, const FViewInfo& View, const TArray<FVisibleLightInfo,SceneRenderingAllocator>& VisibleLightInfos, int32 ChannelIdx, bool bDynamicShadows, FMobileDirectionalLightShaderParameters& Parameters)"
  },
  {
    "label": "SetupMobileSkyReflectionUniformParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupMobileSkyReflectionUniformParameters(class FSkyLightSceneProxy* SkyLight, FMobileReflectionCaptureShaderParameters& Parameters)"
  },
  {
    "label": "GetMobileForwardLocalLightSetting()",
    "kind": "Method",
    "detail": "Function (class FPlanarReflectionSceneProxy ; class FScene ; EMobileLocalLightSetting)",
    "insertText": "GetMobileForwardLocalLightSetting(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "MobileDefaultTranslucentColorTransmittanceMode()",
    "kind": "Method",
    "detail": "Function (enum class EMobileTranslucentColorTransmittanceMode { DEFAULT,DUAL_SRC_BLENDING,PROGRAMMABLE_BLENDING,SINGLE_SRC_BLENDING,} ; EMobileTranslucentColorTransmittanceMode)",
    "insertText": "MobileDefaultTranslucentColorTransmittanceMode(EShaderPlatform Platform)"
  },
  {
    "label": "MobileActiveTranslucentColorTransmittanceMode()",
    "kind": "Method",
    "detail": "Function (EMobileTranslucentColorTransmittanceMode)",
    "insertText": "MobileActiveTranslucentColorTransmittanceMode(EShaderPlatform Platform, bool bExplicitDefaultMode)"
  },
  {
    "label": "MaterialRequiresColorTransmittanceBlending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialRequiresColorTransmittanceBlending(const FMaterial& MaterialResource)"
  },
  {
    "label": "MaterialRequiresColorTransmittanceBlending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MaterialRequiresColorTransmittanceBlending(const FMaterialShaderParameters& MaterialParameters)"
  },
  {
    "label": "ShouldCacheShaderForColorTransmittanceFallback()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCacheShaderForColorTransmittanceFallback(const FMaterialShaderPermutationParameters& Parameters, EMobileTranslucentColorTransmittanceMode TranslucentColorTransmittanceFallback)"
  },
  {
    "label": "MobileBasePassModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MobileBasePassModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "TMobileBasePassShaderElementData()",
    "kind": "Method",
    "detail": "Function (template<LightMapPolicyType> class TMobileBasePassShaderElementData : public FMeshMaterialShaderElementData { public :)",
    "insertText": "TMobileBasePassShaderElementData(const typename LightMapPolicyType::ElementDataType& InLightMapPolicyElementData, bool bInCanReceiveCSM) : LightMapPolicyElementData(InLightMapPolicyElementData) , bCanReceiveCSM(bInCanReceiveCSM)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (} LightMapPolicyType::ElementDataType LightMapPolicyElementData ; const bool bCanReceiveCSM ; } ; template<LightMapPolicyType> class TMobileBasePassVSPolicyParamType : public FMeshMaterialShader,public LightMapPolicyType::VertexParametersType {)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES(TMobileBasePassVSPolicyParamType, NonVirtual, FMeshMaterialShader, typename LightMapPolicyType::VertexParametersType)"
  },
  {
    "label": "TMobileBasePassVSPolicyParamType()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TMobileBasePassVSPolicyParamType()"
  },
  {
    "label": "TMobileBasePassVSPolicyParamType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassVSPolicyParamType(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer): FMeshMaterialShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (LightMapPolicyType::)",
    "insertText": "Bind(Initializer.ParameterMap)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (PassUniformBuffer .)",
    "insertText": "Bind(Initializer.ParameterMap, FMobileBasePassUniformParameters::FTypeInfo::GetStructMetadata()->GetShaderVariableName())"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "ModifyCompilationEnvironment(const FMaterialShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetShaderBindings(const FScene* Scene, const FStaticFeatureLevel FeatureLevel, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material, const TMobileBasePassShaderElementData<LightMapPolicyType>& ShaderElementData, FMeshDrawSingleShaderBindings& ShaderBindings)"
  },
  {
    "label": "GetShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShaderBindings(Scene, FeatureLevel, PrimitiveSceneProxy, MaterialRenderProxy, Material, ShaderElementData, ShaderBindings)"
  },
  {
    "label": "GetVertexShaderBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVertexShaderBindings(PrimitiveSceneProxy, ShaderElementData.LightMapPolicyElementData, this, ShaderBindings)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} } ; template<LightMapPolicyType> class TMobileBasePassVSBaseType : public TMobileBasePassVSPolicyParamType<LightMapPolicyType> { typedef TMobileBasePassVSPolicyParamType<LightMapPolicyType> Super ;)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT(TMobileBasePassVSBaseType, NonVirtual)"
  },
  {
    "label": "TMobileBasePassVSBaseType()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TMobileBasePassVSBaseType()"
  },
  {
    "label": "TMobileBasePassVSBaseType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassVSBaseType(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer) : Super(Initializer)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "ShouldCompilePermutation(const FMeshMaterialShaderPermutationParameters& Parameters)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} } ; template<LightMapPolicyType> class TMobileBasePassVS : public TMobileBasePassVSBaseType<LightMapPolicyType> {)",
    "insertText": "DECLARE_SHADER_TYPE(TMobileBasePassVS,MeshMaterial)"
  },
  {
    "label": "MobileBasePassModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MobileBasePassModifyCompilationEnvironment(Parameters, OutEnvironment)"
  },
  {
    "label": "TMobileBasePassVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassVS(const ShaderMetaType::CompiledShaderInitializerType& Initializer): TMobileBasePassVSBaseType<LightMapPolicyType>(Initializer)"
  },
  {
    "label": "TMobileBasePassVS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassVS()"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES()",
    "kind": "Method",
    "detail": "Function (} } ; template<LightMapPolicyType> class TMobileBasePassPSPolicyParamType : public FMeshMaterialShader,public LightMapPolicyType::PixelParametersType {)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT_EXPLICIT_BASES(TMobileBasePassPSPolicyParamType, NonVirtual, FMeshMaterialShader, typename LightMapPolicyType::PixelParametersType)"
  },
  {
    "label": "ModifyCompilationEnvironmentForQualityLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironmentForQualityLevel(Parameters.Platform, Parameters.MaterialParameters.QualityLevel, OutEnvironment)"
  },
  {
    "label": "TMobileBasePassPSPolicyParamType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassPSPolicyParamType(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer) : FMeshMaterialShader(Initializer)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (MobileDirectionLightBufferParam .)",
    "insertText": "Bind(Initializer.ParameterMap, FMobileDirectionalLightShaderParameters::FTypeInfo::GetStructMetadata()->GetShaderVariableName())"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (ReflectionParameter .)",
    "insertText": "Bind(Initializer.ParameterMap, FMobileReflectionCaptureShaderParameters::FTypeInfo::GetStructMetadata()->GetShaderVariableName())"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (UseCSMParameter .)",
    "insertText": "Bind(Initializer.ParameterMap, TEXT(\"UseCSM\"))"
  },
  {
    "label": "TMobileBasePassPSPolicyParamType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassPSPolicyParamType()"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, MobileDirectionLightBufferParam)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderUniformBufferParameter, ReflectionParameter)"
  },
  {
    "label": "LAYOUT_FIELD()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LAYOUT_FIELD(FShaderParameter, UseCSMParameter)"
  },
  {
    "label": "ModifyCompilationEnvironmentForQualityLevel()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ModifyCompilationEnvironmentForQualityLevel(EShaderPlatform Platform, EMaterialQualityLevel::Type QualityLevel, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "DECLARE_INLINE_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (} ; template<LightMapPolicyType> class TMobileBasePassPSBaseType : public TMobileBasePassPSPolicyParamType<LightMapPolicyType> { typedef TMobileBasePassPSPolicyParamType<LightMapPolicyType> Super ;)",
    "insertText": "DECLARE_INLINE_TYPE_LAYOUT(TMobileBasePassPSBaseType, NonVirtual)"
  },
  {
    "label": "TMobileBasePassPSBaseType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassPSBaseType(const FMeshMaterialShaderType::CompiledShaderInitializerType& Initializer) : Super(Initializer)"
  },
  {
    "label": "TMobileBasePassPSBaseType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassPSBaseType()"
  },
  {
    "label": "SelectMeshLightmapPolicy()",
    "kind": "Method",
    "detail": "Function (} } ; namespace MobileBasePass { ELightMapPolicyType)",
    "insertText": "SelectMeshLightmapPolicy(const FScene* Scene, const FMeshBatch& MeshBatch, const FPrimitiveSceneProxy* PrimitiveSceneProxy, bool bPrimReceivesCSM, bool bUsedDeferredShading, bool bIsLitMaterial, bool bIsTranslucent)"
  },
  {
    "label": "GetShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShaders(ELightMapPolicyType LightMapPolicyType, EMobileLocalLightSetting LocalLightSetting, const FMaterial& MaterialResource, const FVertexFactoryType* VertexFactoryType, TShaderRef<TMobileBasePassVSPolicyParamType<FUniformLightMapPolicy>>& VertexShader, TShaderRef<TMobileBasePassPSPolicyParamType<FUniformLightMapPolicy>>& PixelShader)"
  },
  {
    "label": "GetDirectionalLightInfo()",
    "kind": "Method",
    "detail": "Function (const FLightSceneInfo*)",
    "insertText": "GetDirectionalLightInfo(const FScene* Scene, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "StaticCanReceiveCSM()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticCanReceiveCSM(const FLightSceneInfo* LightSceneInfo, const FPrimitiveSceneProxy* PrimitiveSceneProxy)"
  },
  {
    "label": "SetOpaqueRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpaqueRenderState(FMeshPassProcessorRenderState& DrawRenderState, const FPrimitiveSceneProxy* PrimitiveSceneProxy, const FMaterial& Material, FMaterialShadingModelField ShadingModels, bool bEnableReceiveDecalOutput, bool bUsesDeferredShading)"
  },
  {
    "label": "SetTranslucentRenderState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTranslucentRenderState(FMeshPassProcessorRenderState& DrawRenderState, const FMaterial& Material, FMaterialShadingModelField ShadingModels)"
  },
  {
    "label": "DECLARE_SHADER_TYPE()",
    "kind": "Method",
    "detail": "Function (} ; template<LightMapPolicyType,EMobileLocalLightSetting LocalLightSetting,EMobileTranslucentColorTransmittanceMode TranslucentColorTransmittanceFallback = EMobileTranslucentColorTransmittanceMode::DEFAULT> class TMobileBasePassPS : public TMobileBasePassPSBaseType<LightMapPolicyType> {)",
    "insertText": "DECLARE_SHADER_TYPE(TMobileBasePassPS,MeshMaterial)"
  },
  {
    "label": "IsLit()",
    "kind": "Method",
    "detail": "Function (const bool bIsLit = Parameters . MaterialParameters . ShadingModels .)",
    "insertText": "IsLit()"
  },
  {
    "label": "IsMobileDeferredShadingEnabled()",
    "kind": "Method",
    "detail": "Function (const bool bDeferredShadingEnabled =)",
    "insertText": "IsMobileDeferredShadingEnabled(Parameters.Platform)"
  },
  {
    "label": "IsTranslucentBlendMode()",
    "kind": "Method",
    "detail": "Function (const bool bIsTranslucent =)",
    "insertText": "IsTranslucentBlendMode(Parameters.MaterialParameters) || Parameters.MaterialParameters.ShadingModels.HasShadingModel(MSM_SingleLayerWater)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bMaterialUsesForwardShading = bIsLit&& bIsTranslucent ; const bool bForwardShading = ! bDeferredShadingEnabled | | bMaterialUsesForwardShading ; EMobileLocalLightSetting SupportedLocalLightsType = EMobileLocalLightSetting::LOCAL_LIGHTS_DISABLED ;)",
    "insertText": "if(bForwardShading && bIsLit)"
  },
  {
    "label": "GetMobileForwardLocalLightSetting()",
    "kind": "Method",
    "detail": "Function (SupportedLocalLightsType =)",
    "insertText": "GetMobileForwardLocalLightSetting(Parameters.Platform)"
  },
  {
    "label": "bEnableLocalLights()",
    "kind": "Method",
    "detail": "Function (} bool bEnableLocalLights = LocalLightSetting ! = EMobileLocalLightSetting::LOCAL_LIGHTS_DISABLED ; const bool bShouldCacheByLocalLights = !)",
    "insertText": "bEnableLocalLights(bIsLit && (SupportedLocalLightsType == LocalLightSetting))"
  },
  {
    "label": "MobileUsesShadowMaskTexture()",
    "kind": "Method",
    "detail": "Function (const bool bMobileUsesShadowMaskTexture =)",
    "insertText": "MobileUsesShadowMaskTexture(Parameters.Platform)"
  },
  {
    "label": "MobileForwardEnableClusteredReflections()",
    "kind": "Method",
    "detail": "Function (const bool bEnableClusteredReflections =)",
    "insertText": "MobileForwardEnableClusteredReflections(Parameters.Platform)"
  },
  {
    "label": "EnableStationarySkylight()",
    "kind": "Method",
    "detail": "Function (const bool bProjectSupportsNonStaticSkyLights =)",
    "insertText": "EnableStationarySkylight() || !IsStaticLightingAllowed()"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_SKY_LIGHT\"), bIsLit && bForwardShading && bProjectSupportsNonStaticSkyLights)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_AMBIENT_OCCLUSION\"), bForwardShading && IsMobileAmbientOcclusionEnabled(Parameters.Platform) ? 1u : 0u)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(Parameters.Platform, OutEnvironment)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_CLUSTERED_LIGHTS\"), (LocalLightSetting == EMobileLocalLightSetting::LOCAL_LIGHTS_ENABLED) ? 1u : 0u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 MergedLocalLights = 0 u ;)",
    "insertText": "if(LocalLightSetting == EMobileLocalLightSetting::LOCAL_LIGHTS_BUFFER)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (MergedLocalLights = 1 u ; } else)",
    "insertText": "if(MobileMergeLocalLightsInBasepassEnabled(Parameters.Platform) || bTranslucentMaterial)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (MergedLocalLights = 2 u ; } } OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"MERGED_LOCAL_LIGHTS_MOBILE\"), MergedLocalLights)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_CLUSTERED_REFLECTION\"), bEnableClusteredReflections ? 1u : 0u)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"USE_SHADOWMASKTEXTURE\"), bMobileUsesShadowMaskTexture && !bTranslucentMaterial ? 1u : 0u)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"ENABLE_DBUFFER_TEXTURES\"), Parameters.MaterialParameters.MaterialDomain == MD_Surface ? 1u : 0u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EMobileTranslucentColorTransmittanceMode TranslucentColorTransmittanceMode = EMobileTranslucentColorTransmittanceMode::DEFAULT ;)",
    "insertText": "if(MaterialRequiresColorTransmittanceBlending(Parameters.MaterialParameters))"
  },
  {
    "label": "TranslucentColorTransmittanceMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TranslucentColorTransmittanceMode(TranslucentColorTransmittanceFallback == EMobileTranslucentColorTransmittanceMode::DEFAULT) ? MobileDefaultTranslucentColorTransmittanceMode(Parameters.Platform)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"MOBILE_TRANSLUCENT_COLOR_TRANSMITTANCE_DUAL_SRC_BLENDING\"), TranslucentColorTransmittanceMode == EMobileTranslucentColorTransmittanceMode::DUAL_SRC_BLENDING ? 1u : 0u)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"MOBILE_TRANSLUCENT_COLOR_TRANSMITTANCE_PROGRAMMABLE_BLENDING\"), TranslucentColorTransmittanceMode == EMobileTranslucentColorTransmittanceMode::PROGRAMMABLE_BLENDING ? 1u : 0u)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"MOBILE_TRANSLUCENT_COLOR_TRANSMITTANCE_SINGLE_SRC_BLENDING\"), TranslucentColorTransmittanceMode == EMobileTranslucentColorTransmittanceMode::SINGLE_SRC_BLENDING ? 1u : 0u)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (OutEnvironment .)",
    "insertText": "SetDefine(TEXT(\"MOBILE_SSR_ENABLED\"), AreMobileScreenSpaceReflectionsEnabled(Parameters.Platform) ? 1u : 0u)"
  },
  {
    "label": "TMobileBasePassPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassPS(const ShaderMetaType::CompiledShaderInitializerType& Initializer): TMobileBasePassPSBaseType<LightMapPolicyType>(Initializer)"
  },
  {
    "label": "TMobileBasePassPS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMobileBasePassPS()"
  },
  {
    "label": "CanUseDepthStencil()",
    "kind": "Method",
    "detail": "Function (} } ; class FMobileBasePassMeshProcessor : public FSceneRenderingAllocatorObject<FMobileBasePassMeshProcessor>,public FMeshPassProcessor { public : enum class EFlags { None = 0,)",
    "insertText": "CanUseDepthStencil(1 << 0), CanReceiveCSM = (1 << 1), ForcePassDrawRenderState = (1 << 2), DoNotCache = (1 << 3)"
  },
  {
    "label": "FMobileBasePassMeshProcessor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMobileBasePassMeshProcessor(EMeshPass::Type InMeshPassType, const FScene* InScene, const FSceneView* InViewIfDynamicMeshCommand, const FMeshPassProcessorRenderState& InDrawRenderState, FMeshPassDrawListContext* InDrawListContext, EFlags Flags, ETranslucencyPass::Type InTranslucencyPassType = ETranslucencyPass::TPT_MAX)"
  },
  {
    "label": "AddMeshBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId = -1)"
  },
  {
    "label": "CollectPSOInitializers()",
    "kind": "Method",
    "detail": "Function (FMeshPassProcessorRenderState PassDrawRenderState ; void)",
    "insertText": "CollectPSOInitializers(const FSceneTexturesConfig& SceneTexturesConfig, const FMaterial& Material, const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FPSOPrecacheParams& PreCacheParams, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "CollectPSOInitializersForLMPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPSOInitializersForLMPolicy(const FPSOPrecacheVertexFactoryData& VertexFactoryData, const FMeshPassProcessorRenderState& RESTRICT DrawRenderState, const FGraphicsPipelineRenderTargetsInfo& RESTRICT RenderTargetsInfo, const FMaterial& RESTRICT MaterialResource, EMobileLocalLightSetting LocalLightSetting, const ELightMapPolicyType LightMapPolicyType, ERasterizerFillMode MeshFillMode, ERasterizerCullMode MeshCullMode, EPrimitiveType PrimitiveType, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "FilterShadingModelsMask()",
    "kind": "Method",
    "detail": "Function (private : FMaterialShadingModelField)",
    "insertText": "FilterShadingModelsMask(const FMaterialShadingModelField& ShadingModels)"
  },
  {
    "label": "ShouldDraw()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDraw(const class FMaterial& Material)"
  },
  {
    "label": "TryAddMeshBatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryAddMeshBatch(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, int32 StaticMeshId, const FMaterialRenderProxy& MaterialRenderProxy, const FMaterial& Material)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Process(const FMeshBatch& RESTRICT MeshBatch, uint64 BatchElementMask, int32 StaticMeshId, const FPrimitiveSceneProxy* RESTRICT PrimitiveSceneProxy, const FMaterialRenderProxy& RESTRICT MaterialRenderProxy, const FMaterial& RESTRICT MaterialResource, const bool bIsMasked, const bool bIsTranslucent, FMaterialShadingModelField ShadingModels, const ELightMapPolicyType LightMapPolicyType, const bool bCanReceiveCSM, const FUniformLightMapPolicy::ElementDataType& RESTRICT LightMapElementData)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (const ETranslucencyPass::Type TranslucencyPassType ; const EFlags Flags ; const bool bTranslucentBasePass ; const bool bDeferredShading ; const bool bPassUsesDeferredShading ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FMobileBasePassMeshProcessor::EFlags)"
  }
]