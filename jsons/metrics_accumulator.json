[
  {
    "label": "MetricsAccumulator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MetricsAccumulator"
  },
  {
    "label": "MetricKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MetricKey"
  },
  {
    "label": "MetricValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MetricValue"
  },
  {
    "label": "MetricsAccumulator()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_METRICS_METRICS_ACCUMULATOR_H_ # define API_TEST_METRICS_METRICS_ACCUMULATOR_H_ # include<map> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" api / numerics / samples_stats_counter . h \" # include \" api / test / metrics / metric . h \" # include \" api / units / timestamp . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { namespace test { class MetricsAccumulator { public :)",
    "insertText": "MetricsAccumulator()"
  },
  {
    "label": "AddSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSample(absl::string_view metric_name, absl::string_view test_case_name, double value, Timestamp timestamp, std::map<std::string, std::string> point_metadata = {})"
  },
  {
    "label": "AddMetricMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddMetricMetadata(absl::string_view metric_name, absl::string_view test_case_name, Unit unit, ImprovementDirection improvement_direction, std::map<std::string, std::string> metric_metadata = {})"
  },
  {
    "label": "GetCollectedMetrics()",
    "kind": "Method",
    "detail": "Function (std::vector<Metric>)",
    "insertText": "GetCollectedMetrics()"
  },
  {
    "label": "MetricKey()",
    "kind": "Method",
    "detail": "Function (private : struct MetricKey {)",
    "insertText": "MetricKey(absl::string_view metric_name, absl::string_view test_case_name) : metric_name(metric_name), test_case_name(test_case_name)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} std::string metric_name ; std::string test_case_name ; } ; bool)",
    "insertText": "operator(const MetricKey& a, const MetricKey& b)"
  },
  {
    "label": "GetOrCreateMetric()",
    "kind": "Method",
    "detail": "Function (struct MetricValue { SamplesStatsCounter counter ; Metric metric ; } ; MetricValue*)",
    "insertText": "GetOrCreateMetric(absl::string_view metric_name, absl::string_view test_case_name, bool* created) RTC_EXCLUSIVE_LOCKS_REQUIRED(mutex_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex mutex_ ; std::map<MetricKey,MetricValue> metrics_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]