[
  {
    "label": "AutoOpenCloseEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoOpenCloseEvent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "AutoOpenCloseEvent()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_AUTO_OPEN_CLOSE_EVENT_H_ # define BASE_TRACE_EVENT_AUTO_OPEN_CLOSE_EVENT_H_ # include \" base / check . h \" # include \" base / memory / weak_ptr . h \" # include \" base / threading / thread_checker . h \" # include \" base / time / time . h \" # include \" base / trace_event / trace_event . h \" namespace base { namespace trace_event { template<const char* category> class AutoOpenCloseEvent : public TraceLog::AsyncEnabledStateObserver { public : enum Type { ASYNC } ;)",
    "insertText": "AutoOpenCloseEvent(Type type, const char* event_name) : event_name_(event_name)"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (base::trace_event::)",
    "insertText": "GetInstance()->AddAsyncEnabledStateObserver( weak_factory_.GetWeakPtr())"
  },
  {
    "label": "AutoOpenCloseEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoOpenCloseEvent(const AutoOpenCloseEvent&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AutoOpenCloseEvent&)",
    "insertText": "operator(const AutoOpenCloseEvent&)"
  },
  {
    "label": "AutoOpenCloseEvent()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AutoOpenCloseEvent()"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(thread_checker_.CalledOnValidThread())"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (base::trace_event::)",
    "insertText": "GetInstance()->RemoveAsyncEnabledStateObserver( this)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "TRACE_TIME_TICKS_NOW()",
    "kind": "Method",
    "detail": "Function (start_time_ =)",
    "insertText": "TRACE_TIME_TICKS_NOW()"
  },
  {
    "label": "TRACE_EVENT_ASYNC_BEGIN_WITH_TIMESTAMP0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_EVENT_ASYNC_BEGIN_WITH_TIMESTAMP0(category, event_name_, static_cast<void*>(this), start_time_)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "End()"
  },
  {
    "label": "TRACE_EVENT_ASYNC_END0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_EVENT_ASYNC_END0(category, event_name_, static_cast<void*>(this))"
  },
  {
    "label": "TimeTicks()",
    "kind": "Method",
    "detail": "Function (start_time_ =)",
    "insertText": "TimeTicks()"
  },
  {
    "label": "OnTraceLogEnabled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnTraceLogEnabled()"
  },
  {
    "label": "OnTraceLogDisabled()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "OnTraceLogDisabled()"
  }
]