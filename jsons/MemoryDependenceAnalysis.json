[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "FunctionPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPass"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "CallSite",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallSite"
  },
  {
    "label": "AliasAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AliasAnalysis"
  },
  {
    "label": "AssumptionCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCache"
  },
  {
    "label": "MemoryDependenceAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemoryDependenceAnalysis"
  },
  {
    "label": "PredIteratorCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredIteratorCache"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "PHITransAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHITransAddr"
  },
  {
    "label": "MemDepResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MemDepResult"
  },
  {
    "label": "DepType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DepType"
  },
  {
    "label": "OtherType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "OtherType"
  },
  {
    "label": "NonLocalDepEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonLocalDepEntry"
  },
  {
    "label": "NonLocalDepResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonLocalDepResult"
  },
  {
    "label": "NonLocalPointerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NonLocalPointerInfo"
  },
  {
    "label": "MemDepResult()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_MEMORYDEPENDENCEANALYSIS_H # define LLVM_ANALYSIS_MEMORYDEPENDENCEANALYSIS_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / Analysis / AliasAnalysis . h \" # include \" llvm / IR / BasicBlock . h \" # include \" llvm / IR / PredIteratorCache . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Pass . h \" namespace llvm { class Function ; class FunctionPass ; class Instruction ; class CallSite ; class AliasAnalysis ; class AssumptionCache ; class MemoryDependenceAnalysis ; class PredIteratorCache ; class DominatorTree ; class PHITransAddr ; class MemDepResult { enum DepType { Invalid = 0,Clobber,Def,Other } ; enum OtherType { NonLocal = 0 x4,NonFuncLocal = 0 x8,Unknown = 0 xc } ; typedef PointerIntPair<Instruction*,2,DepType> PairTy ; PairTy Value ;)",
    "insertText": "MemDepResult(PairTy V) : Value(V)"
  },
  {
    "label": "MemDepResult()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "MemDepResult() : Value(nullptr, Invalid)"
  },
  {
    "label": "getDef()",
    "kind": "Method",
    "detail": "Function (} MemDepResult)",
    "insertText": "getDef(Instruction *Inst)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Inst && \"Def requires inst\")"
  },
  {
    "label": "getClobber()",
    "kind": "Method",
    "detail": "Function (} MemDepResult)",
    "insertText": "getClobber(Instruction *Inst)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Inst && \"Clobber requires inst\")"
  },
  {
    "label": "getNonLocal()",
    "kind": "Method",
    "detail": "Function (} MemDepResult)",
    "insertText": "getNonLocal()"
  },
  {
    "label": "getNonFuncLocal()",
    "kind": "Method",
    "detail": "Function (} MemDepResult)",
    "insertText": "getNonFuncLocal()"
  },
  {
    "label": "getUnknown()",
    "kind": "Method",
    "detail": "Function (} MemDepResult)",
    "insertText": "getUnknown()"
  },
  {
    "label": "isClobber()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isClobber()"
  },
  {
    "label": "isDef()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isDef()"
  },
  {
    "label": "isNonLocal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNonLocal()"
  },
  {
    "label": "isNonFuncLocal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isNonFuncLocal()"
  },
  {
    "label": "isUnknown()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isUnknown()"
  },
  {
    "label": "getInst()",
    "kind": "Method",
    "detail": "Function (} Instruction*)",
    "insertText": "getInst()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const MemDepResult &M)"
  },
  {
    "label": "getDirty()",
    "kind": "Method",
    "detail": "Function (} MemDepResult)",
    "insertText": "getDirty(Instruction *Inst)"
  },
  {
    "label": "NonLocalDepEntry()",
    "kind": "Method",
    "detail": "Function (} } ; class NonLocalDepEntry { BasicBlock* BB ; MemDepResult Result ; public :)",
    "insertText": "NonLocalDepEntry(BasicBlock *bb, MemDepResult result) : BB(bb), Result(result)"
  },
  {
    "label": "NonLocalDepEntry()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NonLocalDepEntry(BasicBlock *bb) : BB(bb)"
  },
  {
    "label": "getBB()",
    "kind": "Method",
    "detail": "Function (} BasicBlock*)",
    "insertText": "getBB()"
  },
  {
    "label": "getResult()",
    "kind": "Method",
    "detail": "Function (Result = R ; } const MemDepResult&)",
    "insertText": "getResult()"
  },
  {
    "label": "setResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setResult(const MemDepResult &R, Value *Addr)"
  },
  {
    "label": "setResult()",
    "kind": "Method",
    "detail": "Function (Entry .)",
    "insertText": "setResult(R)"
  },
  {
    "label": "getAddress()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getAddress()"
  },
  {
    "label": "MemoryDependenceAnalysis()",
    "kind": "Method",
    "detail": "Function (} } ; typedef DenseMap<ValueIsLoadPair,NonLocalPointerInfo> CachedNonLocalPointerInfo ; CachedNonLocalPointerInfo NonLocalPointerDeps ; typedef DenseMap<Instruction*,SmallPtrSet<ValueIsLoadPair,4>> ReverseNonLocalPtrDepTy ; ReverseNonLocalPtrDepTy ReverseNonLocalPtrDeps ; typedef std::pair<NonLocalDepInfo,bool> PerInstNLInfo ; typedef DenseMap<Instruction*,PerInstNLInfo> NonLocalDepMapType ; NonLocalDepMapType NonLocalDeps ; typedef DenseMap<Instruction*,SmallPtrSet<Instruction*,4>> ReverseDepMapType ; ReverseDepMapType ReverseLocalDeps ; ReverseDepMapType ReverseNonLocalDeps ; AliasAnalysis* AA ; DominatorTree* DT ; AssumptionCache* AC ; PredIteratorCache PredCache ; public :)",
    "insertText": "MemoryDependenceAnalysis()"
  },
  {
    "label": "runOnFunction()",
    "kind": "Method",
    "detail": "Function (char ID ; bool)",
    "insertText": "runOnFunction(Function &)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "getDependency()",
    "kind": "Method",
    "detail": "Function (MemDepResult)",
    "insertText": "getDependency(Instruction *QueryInst, unsigned ScanLimit = 0)"
  },
  {
    "label": "getNonLocalCallDependency()",
    "kind": "Method",
    "detail": "Function (const NonLocalDepInfo&)",
    "insertText": "getNonLocalCallDependency(CallSite QueryCS)"
  },
  {
    "label": "getNonLocalPointerDependency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNonLocalPointerDependency(Instruction *QueryInst, SmallVectorImpl<NonLocalDepResult> &Result)"
  },
  {
    "label": "removeInstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeInstruction(Instruction *InstToRemove)"
  },
  {
    "label": "invalidateCachedPointerInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidateCachedPointerInfo(Value *Ptr)"
  },
  {
    "label": "invalidateCachedPredecessors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidateCachedPredecessors()"
  },
  {
    "label": "getPointerDependencyFrom()",
    "kind": "Method",
    "detail": "Function (MemDepResult)",
    "insertText": "getPointerDependencyFrom(const MemoryLocation &Loc, bool isLoad, BasicBlock::iterator ScanIt, BasicBlock *BB, Instruction *QueryInst = nullptr, unsigned Limit = 0)"
  },
  {
    "label": "getLoadLoadClobberFullWidthSize()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getLoadLoadClobberFullWidthSize(const Value *MemLocBase, int64_t MemLocOffs, unsigned MemLocSize, const LoadInst *LI)"
  },
  {
    "label": "getCallSiteDependencyFrom()",
    "kind": "Method",
    "detail": "Function (private : MemDepResult)",
    "insertText": "getCallSiteDependencyFrom(CallSite C, bool isReadOnlyCall, BasicBlock::iterator ScanIt, BasicBlock *BB)"
  },
  {
    "label": "getNonLocalPointerDepFromBB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getNonLocalPointerDepFromBB(Instruction *QueryInst, const PHITransAddr &Pointer, const MemoryLocation &Loc, bool isLoad, BasicBlock *BB, SmallVectorImpl<NonLocalDepResult> &Result, DenseMap<BasicBlock *, Value *> &Visited, bool SkipFirstBlock = false)"
  },
  {
    "label": "GetNonLocalInfoForBlock()",
    "kind": "Method",
    "detail": "Function (MemDepResult)",
    "insertText": "GetNonLocalInfoForBlock(Instruction *QueryInst, const MemoryLocation &Loc, bool isLoad, BasicBlock *BB, NonLocalDepInfo *Cache, unsigned NumSortedEntries)"
  },
  {
    "label": "RemoveCachedNonLocalPointerDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCachedNonLocalPointerDependencies(ValueIsLoadPair P)"
  },
  {
    "label": "verifyRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyRemoved(Instruction *Inst)"
  }
]