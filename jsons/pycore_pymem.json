[
  {
    "label": "_PyTraceMalloc_Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_PyTraceMalloc_Config"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_PYMEM_H # define Py_INTERNAL_PYMEM_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif # include \" pymem . h \")",
    "insertText": "PyAPI_FUNC(int) _PyMem_SetDefaultAllocator( PyMemAllocatorDomain domain, PyMemAllocatorEx *old_alloc)"
  },
  {
    "label": "_PyMem_IsPtrFreed()",
    "kind": "Method",
    "detail": "Function (# define PYMEM_CLEANBYTE 0 xCD # define PYMEM_DEADBYTE 0 xDD # define PYMEM_FORBIDDENBYTE 0 xFD int)",
    "insertText": "_PyMem_IsPtrFreed(const void *ptr)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "value(uintptr_t)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# if SIZEOF_VOID_P = = 8)",
    "insertText": "return(value == 0 || value == (uintptr_t)0xCDCDCDCDCDCDCDCD || value == (uintptr_t)0xDDDDDDDDDDDDDDDD || value == (uintptr_t)0xFDFDFDFDFDFDFDFD)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# elif SIZEOF_VOID_P = = 4)",
    "insertText": "return(value == 0 || value == (uintptr_t)0xCDCDCDCD || value == (uintptr_t)0xDDDDDDDD || value == (uintptr_t)0xFDFDFDFD)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# else # error \" unknown pointer size \" # endif })",
    "insertText": "PyAPI_FUNC(int) _PyMem_GetAllocatorName( const char *name, PyMemAllocatorName *allocator)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(int) _PyMem_SetupAllocators(PyMemAllocatorName allocator)"
  },
  {
    "label": "PyAPI_DATA()",
    "kind": "Method",
    "detail": "Function (struct _PyTraceMalloc_Config { enum { TRACEMALLOC_NOT_INITIALIZED,TRACEMALLOC_INITIALIZED,TRACEMALLOC_FINALIZED } initialized ; int tracing ; int max_nframe ; } ; # define _PyTraceMalloc_Config_INIT \\ { . initialized = TRACEMALLOC_NOT_INITIALIZED,\\ . tracing = 0,\\ . max_nframe = 1 })",
    "insertText": "PyAPI_DATA(struct _PyTraceMalloc_Config)"
  },
  {
    "label": "_PyObject_VirtualAlloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "_PyObject_VirtualAlloc(size_t size)"
  },
  {
    "label": "_PyObject_VirtualFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyObject_VirtualFree(void *, size_t size)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_ssize_t) _Py_GetAllocatedBlocks(void)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifdef WITH_PYMALLOC)",
    "insertText": "PyAPI_FUNC(int) _PyObject_DebugMallocStats(FILE *out)"
  }
]