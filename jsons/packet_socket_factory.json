[
  {
    "label": "SSLCertificateVerifier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLCertificateVerifier"
  },
  {
    "label": "AsyncResolverInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncResolverInterface"
  },
  {
    "label": "PacketSocketTcpOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PacketSocketTcpOptions"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Options",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Options"
  },
  {
    "label": "PacketSocketTcpOptions()",
    "kind": "Method",
    "detail": "Function (# ifndef API_PACKET_SOCKET_FACTORY_H_ # define API_PACKET_SOCKET_FACTORY_H_ # include<memory> # include<string> # include<vector> # include \" api / async_dns_resolver . h \" # include \" api / wrapping_async_dns_resolver . h \" # include \" rtc_base / async_packet_socket . h \" # include \" rtc_base / proxy_info . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { class SSLCertificateVerifier ; class AsyncResolverInterface ; struct PacketSocketTcpOptions {)",
    "insertText": "PacketSocketTcpOptions()"
  },
  {
    "label": "PacketSocketFactory()",
    "kind": "Method",
    "detail": "Function (int opts = 0 ; std::vector<std::string> tls_alpn_protocols ; std::vector<std::string> tls_elliptic_curves ; SSLCertificateVerifier* tls_cert_verifier = nullptr ; } ; class RTC_EXPORT PacketSocketFactory { public : enum Options { OPT_STUN = 0 x04,OPT_TLS = 0 x02,OPT_TLS_FAKE = 0 x01,OPT_TLS_INSECURE = 0 x08,OPT_SSLTCP = OPT_TLS_FAKE,} ;)",
    "insertText": "PacketSocketFactory()"
  },
  {
    "label": "CreateUdpSocket()",
    "kind": "Method",
    "detail": "Function (AsyncPacketSocket*)",
    "insertText": "CreateUdpSocket(const SocketAddress& address, uint16_t min_port, uint16_t max_port)"
  },
  {
    "label": "CreateServerTcpSocket()",
    "kind": "Method",
    "detail": "Function (AsyncListenSocket*)",
    "insertText": "CreateServerTcpSocket(const SocketAddress& local_address, uint16_t min_port, uint16_t max_port, int opts)"
  },
  {
    "label": "CreateClientTcpSocket()",
    "kind": "Method",
    "detail": "Function (AsyncPacketSocket*)",
    "insertText": "CreateClientTcpSocket(const SocketAddress& local_address, const SocketAddress& remote_address, const ProxyInfo& proxy_info, const std::string& user_agent, const PacketSocketTcpOptions& tcp_options)"
  },
  {
    "label": "CreateAsyncResolver()",
    "kind": "Method",
    "detail": "Function (AsyncResolverInterface*)",
    "insertText": "CreateAsyncResolver()"
  },
  {
    "label": "RTC_DCHECK_NOTREACHED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_NOTREACHED()"
  },
  {
    "label": "PacketSocketFactory()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "PacketSocketFactory(const PacketSocketFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PacketSocketFactory&)",
    "insertText": "operator(const PacketSocketFactory&)"
  }
]