[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "ISceneOutlinerColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISceneOutlinerColumn"
  },
  {
    "label": "SComboButton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SComboButton"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "SFilterBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterBar"
  },
  {
    "label": "STreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STreeView"
  },
  {
    "label": "SFilterSearchBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFilterSearchBox"
  },
  {
    "label": "FPendingTreeOperation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingTreeOperation"
  },
  {
    "label": "EType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EType"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FSceneOutlinerItemSelection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOutlinerItemSelection"
  },
  {
    "label": "SCENEOUTLINER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCENEOUTLINER_API"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "FSceneOutlinerConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOutlinerConfig"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EditorUndoClient . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" Input / Reply . h \" # include \" Layout / Visibility . h \" # include \" Misc / Attribute . h \" # include \" Misc / TextFilter . h \" # include \" SlateFwd . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Delegates / DelegateCombinations . h \" # include \" Framework / Views / ITypedTableView . h \" # include \" Types / SlateEnums . h \" # include \" Folder . h \" # include \" ISceneOutliner . h \" # include \" SceneOutlinerFwd . h \" # include \" SOutlinerTreeView . h \" # include \" SceneOutlinerPublicTypes . h \" # include \" SceneOutlinerStandaloneTypes . h \" # include \" ISceneOutlinerHierarchy . h \" # include \" SceneOutlinerDragDrop . h \" # include \" SceneOutlinerSCCHandler . h \" # include \" SceneOutlinerTreeItemSCC . h \" class FMenuBuilder ; class UToolMenu ; class ISceneOutlinerColumn ; class SComboButton ; class ULevel ; struct FToolMenuSection ; template<FilterType> class SFilterBar ; template<ItemType> class STreeView ; class SFilterSearchBox ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSceneOutliner, Log, All)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (namespace SceneOutliner {)",
    "insertText": "DECLARE_EVENT_OneParam(SSceneOutliner, FTreeItemPtrEvent, FSceneOutlinerTreeItemPtr)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(SSceneOutliner, FOnItemSelectionChanged, FSceneOutlinerTreeItemPtr, ESelectInfo::Type)"
  },
  {
    "label": "FPendingTreeOperation()",
    "kind": "Method",
    "detail": "Function (typedef TTextFilter<const ISceneOutlinerTreeItem&> TreeItemTextFilter ; struct FPendingTreeOperation { enum EType { Added,Removed,Moved } ;)",
    "insertText": "FPendingTreeOperation(EType InType, TSharedRef<ISceneOutlinerTreeItem> InItem) : Type(InType), Item(InItem)"
  },
  {
    "label": "Hierarchy()",
    "kind": "Method",
    "detail": "Function (} EType Type ; FSceneOutlinerTreeItemRef Item ; } ; namespace ENewItemAction { enum Type { None = 0,Select = 1<<0,ScrollIntoView = 1<<1,Rename = 1<<2,} ; } namespace ExtensionHooks { FName)",
    "insertText": "Hierarchy(TEXT(\"Hierarchy\"))"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Show(TEXT(\"Show\"))"
  },
  {
    "label": "FSceneOutlinerItemSelection()",
    "kind": "Method",
    "detail": "Function (} } struct FSceneOutlinerItemSelection { TArray<TWeakPtr<ISceneOutlinerTreeItem>> SelectedItems ;)",
    "insertText": "FSceneOutlinerItemSelection()"
  },
  {
    "label": "FSceneOutlinerItemSelection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneOutlinerItemSelection(const TArray<FSceneOutlinerTreeItemPtr>& InSelectedItems) : SelectedItems(InSelectedItems)"
  },
  {
    "label": "FSceneOutlinerItemSelection()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSceneOutlinerItemSelection(SSceneOutlinerTreeView& Tree) : FSceneOutlinerItemSelection(Tree.GetSelectedItems())"
  },
  {
    "label": "Has()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> bool)",
    "insertText": "Has()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} template<. . . TreeTypes> uint32)",
    "insertText": "Num()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint32 Result = 0 ;)",
    "insertText": "for(const TWeakPtr<ISceneOutlinerTreeItem>& Item : SelectedItems)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (+ + Result ; } } } return Result ; } void)",
    "insertText": "Add(FSceneOutlinerTreeItemPtr NewItem)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SelectedItems .)",
    "insertText": "Add(NewItem)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<TreeType> void)",
    "insertText": "Get(TArray<TreeType*>& OutArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Add(CastedItem)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "Get(TArray<FSceneOutlinerTreeItemPtr>& OutArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Add(ItemPtr)"
  },
  {
    "label": "ForEachItem()",
    "kind": "Method",
    "detail": "Function (} } } template<TreeType> void)",
    "insertText": "ForEachItem(TFunctionRef<void(TreeType&)> Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(*CastedItem)"
  },
  {
    "label": "ForEachItem()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "ForEachItem(TFunctionRef<void(FSceneOutlinerTreeItemPtr&)> Func)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(ItemPtr)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} } } template<DataType> TArray<DataType>)",
    "insertText": "GetData(TFunctionRef<bool(const TWeakPtr<ISceneOutlinerTreeItem>&, DataType&)> Selector)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<DataType> Result ;)",
    "insertText": "for(TWeakPtr<ISceneOutlinerTreeItem>& Item : SelectedItems)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DataType Data ;)",
    "insertText": "if(Selector(Item, Data))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(Data)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} } return Result ; } } ; class SSceneOutliner : public ISceneOutliner,public FEditorUndoClient,public FGCObject { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSceneOutliner)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const FSceneOutlinerInitializationOptions& InitOptions)"
  },
  {
    "label": "SSceneOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SSceneOutliner() : SharedData(MakeShareable(new FSharedSceneOutlinerData)) , Filters(MakeShareable(new FSceneOutlinerFilters)) , InteractiveFilters(MakeShareable(new FSceneOutlinerFilters))"
  },
  {
    "label": "SSceneOutliner()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SSceneOutliner()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Refresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Refresh()"
  },
  {
    "label": "RefreshSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSelection()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bSuccess)"
  },
  {
    "label": "GetSharedData()",
    "kind": "Method",
    "detail": "Function (} const FSharedSceneOutlinerData&)",
    "insertText": "GetSharedData()"
  },
  {
    "label": "SetKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyboardFocus()"
  },
  {
    "label": "GetCachedIconForClass()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetCachedIconForClass(FName InClassName)"
  },
  {
    "label": "CacheIconForClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheIconForClass(FName InClassName, const FSlateBrush* InSlateBrush)"
  },
  {
    "label": "CanExecuteRenameRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExecuteRenameRequest(const ISceneOutlinerTreeItem& ItemPtr)"
  },
  {
    "label": "AddFilter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddFilter(const TSharedRef<FSceneOutlinerFilter>& Filter)"
  },
  {
    "label": "AddFilterToFilterBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFilterToFilterBar(const TSharedRef<FFilterBase<SceneOutliner::FilterBarType>>& InFilter)"
  },
  {
    "label": "DisableAllFilterBarFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAllFilterBarFilters(bool bRemove)"
  },
  {
    "label": "RemoveFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveFilter(const TSharedRef<FSceneOutlinerFilter>& Filter)"
  },
  {
    "label": "AddInteractiveFilter()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddInteractiveFilter(const TSharedRef<FSceneOutlinerFilter>& Filter)"
  },
  {
    "label": "RemoveInteractiveFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveInteractiveFilter(const TSharedRef<FSceneOutlinerFilter>& Filter)"
  },
  {
    "label": "GetFilterAtIndex()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSceneOutlinerFilter>)",
    "insertText": "GetFilterAtIndex(int32 Index)"
  },
  {
    "label": "GetFilterCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetFilterCount()"
  },
  {
    "label": "AddColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn(FName ColumnId, const FSceneOutlinerColumnInfo& ColumInfo)"
  },
  {
    "label": "RemoveColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn(FName ColumnId)"
  },
  {
    "label": "SetColumnVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColumnVisibility(FName ColumnId, bool bIsVisible)"
  },
  {
    "label": "GetColumnIds()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetColumnIds()"
  },
  {
    "label": "GetColumnSortMode()",
    "kind": "Method",
    "detail": "Function (EColumnSortMode::Type)",
    "insertText": "GetColumnSortMode(const FName ColumnId)"
  },
  {
    "label": "RequestSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSort()"
  },
  {
    "label": "Delete_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Delete_CanExecute()"
  },
  {
    "label": "Rename_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename_CanExecute()"
  },
  {
    "label": "Rename_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rename_Execute()"
  },
  {
    "label": "Cut_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Cut_CanExecute()"
  },
  {
    "label": "Copy_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Copy_CanExecute()"
  },
  {
    "label": "Paste_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Paste_CanExecute()"
  },
  {
    "label": "CanSupportDragAndDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSupportDragAndDrop()"
  },
  {
    "label": "FullRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FullRefresh()"
  },
  {
    "label": "CustomAddToToolbar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomAddToToolbar(TSharedPtr<class SHorizontalBox> Toolbar)"
  },
  {
    "label": "IsFilterActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFilterActive(const FString& FilterName)"
  },
  {
    "label": "GetTreeItem()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerTreeItemPtr)",
    "insertText": "GetTreeItem(FSceneOutlinerTreeItemID, bool bIncludePending = false)"
  },
  {
    "label": "SetNextUIRefreshDelay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNextUIRefreshDelay(float InDelay)"
  },
  {
    "label": "GetDoubleClickEvent()",
    "kind": "Method",
    "detail": "Function (public : SceneOutliner::FTreeItemPtrEvent&)",
    "insertText": "GetDoubleClickEvent()"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemSelection(const TArray<FSceneOutlinerTreeItemPtr>& InItems, bool bSelected, ESelectInfo::Type SelectInfo = ESelectInfo::Direct)"
  },
  {
    "label": "SetItemSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemSelection(const FSceneOutlinerTreeItemPtr& InItem, bool bSelected, ESelectInfo::Type SelectInfo = ESelectInfo::Direct)"
  },
  {
    "label": "AddToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSelection(const TArray<FSceneOutlinerTreeItemPtr>& InItems, ESelectInfo::Type SelectInfo = ESelectInfo::Direct)"
  },
  {
    "label": "RemoveFromSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromSelection(const TArray<FSceneOutlinerTreeItemPtr>& InItems, ESelectInfo::Type SelectInfo = ESelectInfo::Direct)"
  },
  {
    "label": "GetSelectedItems()",
    "kind": "Method",
    "detail": "Function (TArray<FSceneOutlinerTreeItemPtr>)",
    "insertText": "GetSelectedItems()"
  },
  {
    "label": "GetSelection()",
    "kind": "Method",
    "detail": "Function (} FSceneOutlinerItemSelection)",
    "insertText": "GetSelection()"
  },
  {
    "label": "PinItems()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PinItems(const TArray<FSceneOutlinerTreeItemPtr>& InItems)"
  },
  {
    "label": "UnpinItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpinItems(const TArray<FSceneOutlinerTreeItemPtr>& InItems)"
  },
  {
    "label": "CanPinItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPinItems(const TArray<FSceneOutlinerTreeItemPtr>& InItems)"
  },
  {
    "label": "CanUnpinItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnpinItems(const TArray<FSceneOutlinerTreeItemPtr>& InItems)"
  },
  {
    "label": "PinSelectedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PinSelectedItems()"
  },
  {
    "label": "UnpinSelectedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnpinSelectedItems()"
  },
  {
    "label": "CanPinSelectedItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPinSelectedItems()"
  },
  {
    "label": "CanUnpinSelectedItems()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUnpinSelectedItems()"
  },
  {
    "label": "FrameSelectedItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameSelectedItems()"
  },
  {
    "label": "FrameItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FrameItem(const FSceneOutlinerTreeItemID& Item)"
  },
  {
    "label": "FindParent()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerTreeItemPtr)",
    "insertText": "FindParent(const ISceneOutlinerTreeItem& InItem)"
  },
  {
    "label": "AddFolderToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFolderToSelection(const FName& FolderName)"
  },
  {
    "label": "RemoveFolderFromSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFolderFromSelection(const FName& FolderName)"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "SetPendingRenameItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPendingRenameItem(const FSceneOutlinerTreeItemPtr& InItem)"
  },
  {
    "label": "GetFilters()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FSceneOutlinerFilters>&)",
    "insertText": "GetFilters()"
  },
  {
    "label": "ParseDragDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseDragDrop(FSceneOutlinerDragDropPayload& OutPayload, const FDragDropOperation& Operation)"
  },
  {
    "label": "ValidateDrop()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerDragValidationInfo)",
    "insertText": "ValidateDrop(const ISceneOutlinerTreeItem& DropTarget, const FSceneOutlinerDragDropPayload& Payload)"
  },
  {
    "label": "OnDropPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDropPayload(ISceneOutlinerTreeItem& DropTarget, const FSceneOutlinerDragDropPayload& Payload, const FSceneOutlinerDragValidationInfo& ValidationInfo)"
  },
  {
    "label": "OnDragOverItem()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOverItem(const FDragDropEvent& Event, const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "GetIsReentrant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsReentrant()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bShowTransient = bInShowTransient)",
    "insertText": "Get()"
  },
  {
    "label": "EmptyTreeItems()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "EmptyTreeItems()"
  },
  {
    "label": "Populate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Populate()"
  },
  {
    "label": "RepopulateEntireTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RepopulateEntireTree()"
  },
  {
    "label": "AddPendingItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingItem(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "AddPendingItemAndChildren()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPendingItemAndChildren(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "AddItemToTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddItemToTree(FSceneOutlinerTreeItemRef InItem)"
  },
  {
    "label": "AddUnfilteredItemToTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUnfilteredItemToTree(FSceneOutlinerTreeItemRef Item)"
  },
  {
    "label": "EnsureParentForItem()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerTreeItemPtr)",
    "insertText": "EnsureParentForItem(FSceneOutlinerTreeItemRef Item)"
  },
  {
    "label": "RemoveItemFromTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveItemFromTree(FSceneOutlinerTreeItemRef InItem)"
  },
  {
    "label": "OnChildRemovedFromParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChildRemovedFromParent(ISceneOutlinerTreeItem& Parent)"
  },
  {
    "label": "OnItemMoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemMoved(const FSceneOutlinerTreeItemRef& Item)"
  },
  {
    "label": "CreateItemFor()",
    "kind": "Method",
    "detail": "Function (public : template<TreeItemType,TreeItemData> FSceneOutlinerTreeItemPtr)",
    "insertText": "CreateItemFor(const TreeItemData& Data, TFunctionRef<void(const TreeItemType&)> OnItemPassesFilters, bool bForce = false)"
  },
  {
    "label": "Temporary()",
    "kind": "Method",
    "detail": "Function (const TreeItemType)",
    "insertText": "Temporary(Data)"
  },
  {
    "label": "PassesAllFilters()",
    "kind": "Method",
    "detail": "Function (bool bPassesFilters = Filters ->)",
    "insertText": "PassesAllFilters(Temporary)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bPassesFilters)"
  },
  {
    "label": "OnItemPassesFilters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemPassesFilters(Temporary)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SearchBoxFilter)"
  },
  {
    "label": "PassesFilter()",
    "kind": "Method",
    "detail": "Function (bPassesFilters& = SearchBoxFilter ->)",
    "insertText": "PassesFilter(Temporary)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bForce || bPassesFilters)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (FSceneOutlinerTreeItemPtr Result =)",
    "insertText": "MakeShareable(new TreeItemType(Data))"
  },
  {
    "label": "ISceneOutliner()",
    "kind": "Method",
    "detail": "Function (Result -> WeakSceneOutliner = StaticCastSharedRef<)",
    "insertText": "ISceneOutliner(AsShared())"
  },
  {
    "label": "GetInteractiveState()",
    "kind": "Method",
    "detail": "Function (Result -> Flags . bIsFilteredOut = ! bPassesFilters ; Result -> Flags . bInteractive = Filters ->)",
    "insertText": "GetInteractiveState(*Result) && InteractiveFilters->GetInteractiveState(*Result)"
  },
  {
    "label": "GetColumns()",
    "kind": "Method",
    "detail": "Function (const TMap<FName,TSharedPtr<ISceneOutlinerColumn>>&)",
    "insertText": "GetColumns()"
  },
  {
    "label": "PassesFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesFilters(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "IsTextFilterActive()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTextFilterActive()"
  },
  {
    "label": "PassesTextFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PassesTextFilter(const FSceneOutlinerTreeItemPtr& Item)"
  },
  {
    "label": "PassesAllFilters()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PassesAllFilters(const FSceneOutlinerTreeItemPtr& Item)"
  },
  {
    "label": "PassesFilter()",
    "kind": "Method",
    "detail": "Function (bPassesFilters = SearchBoxFilter ->)",
    "insertText": "PassesFilter(*Item)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(FilterCollection)"
  },
  {
    "label": "PassesAllFilters()",
    "kind": "Method",
    "detail": "Function (bPassesFilters& = FilterCollection ->)",
    "insertText": "PassesAllFilters(*Item)"
  },
  {
    "label": "HasSelectorFocus()",
    "kind": "Method",
    "detail": "Function (} return bPassesFilters ; } bool)",
    "insertText": "HasSelectorFocus(FSceneOutlinerTreeItemPtr Item)"
  },
  {
    "label": "OnItemLabelChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnItemLabelChanged(FSceneOutlinerTreeItemPtr ChangedItem)"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "SetupColumns()",
    "kind": "Method",
    "detail": "Function (TMap<FName,TSharedPtr<ISceneOutlinerColumn>> Columns ; void)",
    "insertText": "SetupColumns()"
  },
  {
    "label": "HandleHiddenColumnsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHiddenColumnsChanged()"
  },
  {
    "label": "RefreshColumns()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshColumns()"
  },
  {
    "label": "AddColumn_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddColumn_Internal(const FName& ColumnId, const FSceneOutlinerColumnInfo& ColumnInfo, const TMap<FName, bool>& ColumnVisibilities, int32 InsertPosition = INDEX_NONE)"
  },
  {
    "label": "RemoveColumn_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveColumn_Internal(const FName& ColumnId)"
  },
  {
    "label": "PopulateSearchStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateSearchStrings(const ISceneOutlinerTreeItem& TreeItem, OUT TArray< FString >& OutSearchStrings)"
  },
  {
    "label": "CreateTextFilter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SceneOutliner::TreeItemTextFilter>)",
    "insertText": "CreateTextFilter()"
  },
  {
    "label": "CompareItemWithClassName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareItemWithClassName(SceneOutliner::FilterBarType InItem, const TSet<FTopLevelAssetPath>&)"
  },
  {
    "label": "OnFilterBarFilterChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterBarFilterChanged()"
  },
  {
    "label": "CreateFilterBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFilterBar(const FSceneOutlinerFilterBarOptions& FilterBarOptions)"
  },
  {
    "label": "ScrollItemIntoView()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ScrollItemIntoView(const FSceneOutlinerTreeItemPtr& Item)"
  },
  {
    "label": "SetItemExpansion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansion(const FSceneOutlinerTreeItemPtr& Item, bool bIsExpanded)"
  },
  {
    "label": "IsItemExpanded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItemExpanded(const FSceneOutlinerTreeItemPtr& Item)"
  },
  {
    "label": "ExpandAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandAll()"
  },
  {
    "label": "CollapseAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseAll()"
  },
  {
    "label": "ShouldShowFolders()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ShouldShowFolders()"
  },
  {
    "label": "GetSelectedFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectedFolders(TArray<FFolderTreeItem*>& OutFolders)"
  },
  {
    "label": "OnGenerateRowForOutlinerTree()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<ITableRow>)",
    "insertText": "OnGenerateRowForOutlinerTree(FSceneOutlinerTreeItemPtr Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnGeneratePinnedRowForOutlinerTree()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "OnGeneratePinnedRowForOutlinerTree(FSceneOutlinerTreeItemPtr Item, const TSharedRef< STableViewBase >& OwnerTable)"
  },
  {
    "label": "OnGetChildrenForOutlinerTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetChildrenForOutlinerTree(FSceneOutlinerTreeItemPtr InParent, TArray< FSceneOutlinerTreeItemPtr >& OutChildren)"
  },
  {
    "label": "OnOutlinerTreeSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerTreeSelectionChanged(FSceneOutlinerTreeItemPtr TreeItem, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "OnOutlinerTreeDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerTreeDoubleClick(FSceneOutlinerTreeItemPtr TreeItem)"
  },
  {
    "label": "OnOutlinerTreeSingleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerTreeSingleClick(FSceneOutlinerTreeItemPtr TreeItem)"
  },
  {
    "label": "OnOutlinerTreeItemScrolledIntoView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnOutlinerTreeItemScrolledIntoView(FSceneOutlinerTreeItemPtr TreeItem, const TSharedPtr<ITableRow>& Widget)"
  },
  {
    "label": "OnItemExpansionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemExpansionChanged(FSceneOutlinerTreeItemPtr TreeItem, bool bIsExpanded)"
  },
  {
    "label": "OnHierarchyChangedEvent()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnHierarchyChangedEvent(FSceneOutlinerHierarchyChangedData Event)"
  },
  {
    "label": "OnAssetReloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssetReloaded(const EPackageReloadPhase InPackageReloadPhase, FPackageReloadedEvent* InPackageReloadedEvent)"
  },
  {
    "label": "CopyFoldersToClipboard()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "CopyFoldersToClipboard(const TArray<FName>& InFolders, const FString& InPrevClipboardContents)"
  },
  {
    "label": "CopyFoldersBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFoldersBegin()"
  },
  {
    "label": "CopyFoldersEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyFoldersEnd()"
  },
  {
    "label": "PasteFoldersBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteFoldersBegin(TArray<FName> InFolders)"
  },
  {
    "label": "PasteFoldersEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteFoldersEnd()"
  },
  {
    "label": "DeleteFoldersBegin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFoldersBegin()"
  },
  {
    "label": "DeleteFoldersEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFoldersEnd()"
  },
  {
    "label": "GetClipboardPasteFolders()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "GetClipboardPasteFolders()"
  },
  {
    "label": "ExportFolderList()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ExportFolderList(TArray<FName> InFolders)"
  },
  {
    "label": "ImportFolderList()",
    "kind": "Method",
    "detail": "Function (TArray<FName>)",
    "insertText": "ImportFolderList(const FString& InStrBuffer)"
  },
  {
    "label": "DuplicateFoldersHierarchy()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "DuplicateFoldersHierarchy()"
  },
  {
    "label": "GetCommonRootObjectFromSelection()",
    "kind": "Method",
    "detail": "Function (private : TArray<FFolderTreeItem*> CacheFoldersDelete ; TArray<FName> CacheFoldersEdit ; FFolder::FRootObject CacheFoldersEditRootObject ; TMap<FName,FName> CacheFolderMap ; FString CacheClipboardContents ; TMap<FFolder,TArray<FSceneOutlinerTreeItemID>> CachePasteFolderExistingChildrenMap ; TSet<FName> CacheHiddenColumns ; private : bool)",
    "insertText": "GetCommonRootObjectFromSelection(FFolder::FRootObject& OutCommonRootObject)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& InFilterText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetFilterButtonGlyph()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetFilterButtonGlyph()"
  },
  {
    "label": "GetFilterButtonToolTip()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilterButtonToolTip()"
  },
  {
    "label": "GetFilterStatusVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFilterStatusVisibility()"
  },
  {
    "label": "GetFilterStatusText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilterStatusText()"
  },
  {
    "label": "GetFilterStatusTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetFilterStatusTextColor()"
  },
  {
    "label": "GetEmptyLabelVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEmptyLabelVisibility()"
  },
  {
    "label": "GetSelectionMode()",
    "kind": "Method",
    "detail": "Function (ESelectionMode::Type)",
    "insertText": "GetSelectionMode()"
  },
  {
    "label": "GetViewButtonContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetViewButtonContent(bool bShowFilters)"
  },
  {
    "label": "GetViewButtonForegroundColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetViewButtonForegroundColor()"
  },
  {
    "label": "OnOpenContextMenu()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<SWidget>)",
    "insertText": "OnOpenContextMenu()"
  },
  {
    "label": "FillFoldersSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillFoldersSubMenu(UToolMenu* Menu)"
  },
  {
    "label": "AddMoveToFolderOutliner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMoveToFolderOutliner(UToolMenu* Menu)"
  },
  {
    "label": "FillSelectionSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillSelectionSubMenu(UToolMenu* Menun)"
  },
  {
    "label": "GatherInvalidMoveToDestinations()",
    "kind": "Method",
    "detail": "Function (TSharedRef<TSet<FFolder>>)",
    "insertText": "GatherInvalidMoveToDestinations()"
  },
  {
    "label": "SelectFoldersDescendants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectFoldersDescendants(bool bSelectImmediateChildrenOnly = false)"
  },
  {
    "label": "MoveSelectionTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveSelectionTo(const FFolder& NewParent)"
  },
  {
    "label": "CreateFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFolder()"
  },
  {
    "label": "OnCreateFolderClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnCreateFolderClicked()"
  },
  {
    "label": "OnColumnPermissionListChanged()",
    "kind": "Method",
    "detail": "Function (private : FOnContextMenuOpening OnContextMenuOpening ; TSharedPtr<FSharedSceneOutlinerData> SharedData ; TArray<SceneOutliner::FPendingTreeOperation> PendingOperations ; TMap<FSceneOutlinerTreeItemID,uint8> NewItemActions ; TSharedPtr<SSceneOutlinerTreeView> OutlinerTreeView ; FSceneOutlinerTreeItemMap TreeItemMap ; FSceneOutlinerTreeItemMap PendingTreeItemMap ; FSceneOutlinerTreeItemMap PendingTreeItemMap_Removal ; TArray<FFolder> PendingFoldersSelect ; TArray<FSceneOutlinerTreeItemPtr> RootTreeItems ; TSharedPtr<SComboButton> ViewOptionsComboButton ; TSharedPtr<FUICommandList> CommandList ; private : void)",
    "insertText": "OnColumnPermissionListChanged()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (typedef TMap<FSceneOutlinerTreeItemID,bool> FParentsExpansionState ; FParentsExpansionState CachedExpansionStateInfo ; private : uint8 bNeedsRefresh : 1 ; uint8 bProcessingFullRefresh : 1 ; uint8 bFullRefresh : 1 ; uint8 bSelectionDirty : 1 ; uint8 bDisableIntermediateSorting : 1 ; uint8 bNeedsColumRefresh : 1 ; uint8 bShouldCacheColumnVisibility : 1 ; uint8 bForceParentItemsExpanded : 1 ; bool bIsReentrant ; float UIRefreshDelay = 0 . 0 f ; TSharedPtr<SFilterSearchBox> FilterTextBoxWidget ; TSharedPtr<SHeaderRow> HeaderRowWidget ; TSharedPtr<FSceneOutlinerFilters> Filters ; TSharedPtr<FSceneOutlinerFilters> InteractiveFilters ; TSharedPtr<SceneOutliner::TreeItemTextFilter> SearchBoxFilter ; TSharedPtr<SFilterBar<SceneOutliner::FilterBarType>> FilterBar ; TSharedPtr<TFilterCollection<SceneOutliner::FilterBarType>> FilterCollection ; bool bPendingFocusNextFrame ; TWeakPtr<ISceneOutlinerTreeItem> PendingRenameItem ; TMap<FName,const FSlateBrush*> CachedIcons ; SceneOutliner::FTreeItemPtrEvent OnDoubleClickOnTreeEvent ; SceneOutliner::FOnItemSelectionChanged OnItemSelectionChanged ; private : void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (} ; FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "ToggleStackHierarchyHeaders()",
    "kind": "Method",
    "detail": "Function (} float SortOutlinerTimer ; bool bSortDirty ; FName SortByColumn ; EColumnSortMode::Type SortMode ; FName OutlinerIdentifier ; bool bShouldStackHierarchyHeaders ; void)",
    "insertText": "ToggleStackHierarchyHeaders()"
  },
  {
    "label": "ShouldStackHierarchyHeaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldStackHierarchyHeaders()"
  },
  {
    "label": "OnColumnSortModeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnColumnSortModeChanged(const EColumnSortPriority::Type SortPriority, const FName& ColumnId, const EColumnSortMode::Type InSortMode)"
  },
  {
    "label": "SortItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortItems(TArray<FSceneOutlinerTreeItemPtr>& Items)"
  },
  {
    "label": "GetTypeSortPriority()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeSortPriority(const ISceneOutlinerTreeItem& Item)"
  },
  {
    "label": "SetItemExpansionRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetItemExpansionRecursive(FSceneOutlinerTreeItemPtr Model, bool bInExpansionState)"
  },
  {
    "label": "GetMutableConfig()",
    "kind": "Method",
    "detail": "Function (struct FSceneOutlinerConfig*)",
    "insertText": "GetMutableConfig()"
  },
  {
    "label": "GetConstConfig()",
    "kind": "Method",
    "detail": "Function (const FSceneOutlinerConfig*)",
    "insertText": "GetConstConfig()"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig()"
  },
  {
    "label": "GetItemSourceControl()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSceneOutlinerSCCHandler> SourceControlHandler ; public : TSharedPtr<FSceneOutlinerTreeItemSCC>)",
    "insertText": "GetItemSourceControl(const FSceneOutlinerTreeItemPtr& InItem)"
  },
  {
    "label": "AddSourceControlMenuOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSourceControlMenuOptions(UToolMenu* Menu)"
  },
  {
    "label": "AddMenuEntryCreateFolder()",
    "kind": "Method",
    "detail": "Function (} ; struct FSceneOutlinerMenuHelper { void)",
    "insertText": "AddMenuEntryCreateFolder(FToolMenuSection& InSection, SSceneOutliner& InOutliner)"
  },
  {
    "label": "AddMenuEntryCleanupFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenuEntryCleanupFolders(FToolMenuSection& InSection, ULevel* InLevel)"
  }
]