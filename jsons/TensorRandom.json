[
  {
    "label": "UniformRandomGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniformRandomGenerator"
  },
  {
    "label": "functor_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "functor_traits"
  },
  {
    "label": "NormalRandomGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NormalRandomGenerator"
  },
  {
    "label": "get_random_seed()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_RANDOM_H # define EIGEN_CXX11_TENSOR_TENSOR_RANDOM_H namespace Eigen { namespace internal { namespace { EIGEN_DEVICE_FUNC uint64_t)",
    "insertText": "get_random_seed()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(EIGEN_GPU_COMPILE_PHASE) gpu_assert(threadIdx.z == 0)"
  },
  {
    "label": "uint64_t()",
    "kind": "Method",
    "detail": "Function (# else return random<)",
    "insertText": "uint64_t()"
  },
  {
    "label": "PCG_XSH_RS_generator()",
    "kind": "Method",
    "detail": "Function (# endif } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE unsigned)",
    "insertText": "PCG_XSH_RS_generator(uint64_t* state, uint64_t stream)"
  },
  {
    "label": "ULL()",
    "kind": "Method",
    "detail": "Function (uint64_t current =* state ;* state = current* 6 3 6 4 1 3 6 2 2 3 8 4 6 7 9 3 0 0 5)",
    "insertText": "ULL(stream << 1 | 1)"
  },
  {
    "label": "PCG_XSH_RS_state()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE uint64_t)",
    "insertText": "PCG_XSH_RS_state(uint64_t seed)"
  },
  {
    "label": "PCG_XSH_RS_generator()",
    "kind": "Method",
    "detail": "Function (unsigned rnd =)",
    "insertText": "PCG_XSH_RS_generator(state, stream)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Eigen::half RandomToTypeUniform<)",
    "insertText": "half(uint64_t* state, uint64_t stream)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (const uint16_t half_bits = static_cast<)",
    "insertText": "uint16_t(rnd & 0x3ffu) | (static_cast<uint16_t>(15) << 10)"
  },
  {
    "label": "half()",
    "kind": "Method",
    "detail": "Function (Eigen::half result = Eigen::numext::bit_cast<)",
    "insertText": "half(half_bits)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Eigen::bfloat16 RandomToTypeUniform<)",
    "insertText": "bfloat16(uint64_t* state, uint64_t stream)"
  },
  {
    "label": "uint16_t()",
    "kind": "Method",
    "detail": "Function (const uint16_t half_bits = static_cast<)",
    "insertText": "uint16_t(rnd & 0x7fu) | (static_cast<uint16_t>(127) << 7)"
  },
  {
    "label": "bfloat16()",
    "kind": "Method",
    "detail": "Function (Eigen::bfloat16 result = Eigen::numext::bit_cast<)",
    "insertText": "bfloat16(half_bits)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE float RandomToTypeUniform<)",
    "insertText": "float(uint64_t* state, uint64_t stream)"
  },
  {
    "label": "raw()",
    "kind": "Method",
    "detail": "Function (result . raw = rnd& 0 x7fffffu ; result .)",
    "insertText": "raw(static_cast<uint32_t>(127) << 23)"
  },
  {
    "label": "raw()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "raw(static_cast<uint64_t>(rnd1) << 32)"
  },
  {
    "label": "raw()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "raw(static_cast<uint64_t>(1023) << 52)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (} template<> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE std::complex<double> RandomToTypeUniform<std::complex<)",
    "insertText": "double(uint64_t* state, uint64_t stream)"
  },
  {
    "label": "UniformRandomGenerator()",
    "kind": "Method",
    "detail": "Function (} template<T> class UniformRandomGenerator { public : const bool PacketAccess = true ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "UniformRandomGenerator(uint64_t seed = 0)"
  },
  {
    "label": "PCG_XSH_RS_state()",
    "kind": "Method",
    "detail": "Function (m_state =)",
    "insertText": "PCG_XSH_RS_state(seed)"
  },
  {
    "label": "UniformRandomGenerator()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_USE_SYCL m_exec_once = false ; # endif } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "UniformRandomGenerator(const UniformRandomGenerator& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_state = other . m_state ; # ifdef EIGEN_USE_SYCL m_exec_once = other . m_exec_once ; # endif } template<Index> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "operator()(Index i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_USE_SYCL)",
    "insertText": "if(!m_exec_once)"
  },
  {
    "label": "m_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_state(i * 6364136223846793005ULL)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (m_exec_once = true ; } # endif T result = RandomToTypeUniform<)",
    "insertText": "T(&m_state, i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_exec_once = true ; } # endif EIGEN_UNROLL_LOOP)",
    "insertText": "for(int j = 0; j < packetSize; ++j)"
  },
  {
    "label": "Packet()",
    "kind": "Method",
    "detail": "Function (} return internal::pload<)",
    "insertText": "Packet(values)"
  },
  {
    "label": "AddCost()",
    "kind": "Method",
    "detail": "Function (} private : uint64_t m_state ; # ifdef EIGEN_USE_SYCL bool m_exec_once ; # endif } ; template<Scalar> struct functor_traits<UniformRandomGenerator<Scalar>> { enum { Cost = 1 2* NumTraits<Scalar)",
    "insertText": "AddCost((sizeof(Scalar) + sizeof(float) - 1) / sizeof(float))"
  },
  {
    "label": "RandomToTypeNormal()",
    "kind": "Method",
    "detail": "Function (} ; template<T> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "RandomToTypeNormal(uint64_t* state, uint64_t stream)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T u,v,q ; do { u = RandomToTypeUniform<)",
    "insertText": "T(state, stream)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (v =)",
    "insertText": "T(1.7156) * (RandomToTypeUniform<T>(state, stream) - T(0.5))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T x = u -)",
    "insertText": "T(0.449871)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (const T y =)",
    "insertText": "abs(v) + T(0.386595)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (q = x* x +)",
    "insertText": "y(T(0.196)*y - T(0.25472)*x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(q > T(0.27597) && (q > T(0.27846) || v*v > T(-4) * numext::log(u) * u*u))"
  },
  {
    "label": "NormalRandomGenerator()",
    "kind": "Method",
    "detail": "Function (} template<T> class NormalRandomGenerator { public : const bool PacketAccess = true ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "NormalRandomGenerator(uint64_t seed = 0)"
  },
  {
    "label": "NormalRandomGenerator()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_USE_SYCL m_exec_once = false ; # endif } EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "NormalRandomGenerator(const NormalRandomGenerator& other)"
  }
]