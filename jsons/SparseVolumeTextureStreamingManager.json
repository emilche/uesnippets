[
  {
    "label": "UStreamableSparseVolumeTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStreamableSparseVolumeTexture"
  },
  {
    "label": "USparseVolumeTextureFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USparseVolumeTextureFrame"
  },
  {
    "label": "FRequestOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRequestOwner"
  },
  {
    "label": "FCacheGetChunkRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCacheGetChunkRequest"
  },
  {
    "label": "FResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResources"
  },
  {
    "label": "FMipLevelStreamingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMipLevelStreamingInfo"
  },
  {
    "label": "FTextureRenderResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureRenderResources"
  },
  {
    "label": "FTileDataTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileDataTexture"
  },
  {
    "label": "FTileUploader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileUploader"
  },
  {
    "label": "FPageTableUpdater",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPageTableUpdater"
  },
  {
    "label": "FStreamingInstanceRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingInstanceRequest"
  },
  {
    "label": "FStreamingInstance",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingInstance"
  },
  {
    "label": "FTileAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTileAllocator"
  },
  {
    "label": "FAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAllocation"
  },
  {
    "label": "FStreamingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingManager"
  },
  {
    "label": "FStreamingUpdateTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingUpdateTask"
  },
  {
    "label": "FFrameInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameInfo"
  },
  {
    "label": "FStreamingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingInfo"
  },
  {
    "label": "FPendingRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingRequest"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTileDataTask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileDataTask"
  },
  {
    "label": "FAsyncState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAsyncState"
  },
  {
    "label": "FNewSparseVolumeTextureInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNewSparseVolumeTextureInfo"
  },
  {
    "label": "FFrameKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameKey"
  },
  {
    "label": "FRequestPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRequestPayload"
  },
  {
    "label": "FStreamingRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingRequest"
  },
  {
    "label": "FTileRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTileRange"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" SparseVolumeTexture / ISparseVolumeTextureStreamingManager . h \" # include \" IO / IoDispatcher . h \" # include \" Memory / SharedBuffer . h \" # include \" Serialization / BulkData . h \" # include \" RenderResource . h \" # include \" Containers / Map . h \" # include \" Containers / StaticArray . h \" # include \" Containers / BinaryHeap . h \" # include \" RenderGraphBuilder . h \" # include \" Misc / DateTime . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogSparseVolumeTextureStreamingManager, Log, All)"
  },
  {
    "label": "PhysicalCoordMask()",
    "kind": "Method",
    "detail": "Function (class UStreamableSparseVolumeTexture ; class USparseVolumeTextureFrame ; namespace UE { namespace DerivedData { class FRequestOwner ; struct FCacheGetChunkRequest ; } } namespace UE { namespace SVT { struct FResources ; struct FMipLevelStreamingInfo ; class FTextureRenderResources ; class FTileDataTexture ; class FTileUploader ; class FPageTableUpdater ; struct FStreamingInstanceRequest ; class FStreamingInstance ; class FTileAllocator { public : uint32)",
    "insertText": "PhysicalCoordMask(1u << 24u)"
  },
  {
    "label": "FAllocation()",
    "kind": "Method",
    "detail": "Function (struct FAllocation { uint32 TileIndexInFrame ; uint16 FrameIndex ; uint16 bIsLocked : 1 ; uint16 bIsAllocated : 1 ;)",
    "insertText": "FAllocation() : TileIndexInFrame(0), FrameIndex(0), bIsLocked(0), bIsAllocated(0)"
  },
  {
    "label": "FAllocation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAllocation(uint16 InFrameIndex, uint32 InTileIndex, bool bInIsLocked, bool bInIsAllocated) : TileIndexInFrame(InTileIndex), FrameIndex(InFrameIndex), bIsLocked(bInIsLocked), bIsAllocated(bInIsAllocated)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "Init(const FIntVector3& InResolutionInTiles)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Allocate(uint32 UpdateIndex, uint32 FreeThreshold, uint16 FrameIndex, uint32 TileIndexInFrame, uint32 TilePriority, bool bLocked, FAllocation& OutPreviousAllocation)"
  },
  {
    "label": "UpdateUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUsage(uint32 UpdateIndex, uint32 TileCoord, uint32 TilePriority)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(uint32 TileCoord)"
  },
  {
    "label": "FStreamingManager()",
    "kind": "Method",
    "detail": "Function (private : FBinaryHeap<uint64,uint32> FreeHeap ; TArray<FAllocation> Allocations ; FIntVector3 ResolutionInTiles = FIntVector3::ZeroValue ; uint32 TileCapacity = 0 ; uint32 NumAllocated = 0 ; } ; class FStreamingManager : public FRenderResource,public IStreamingManager { public :)",
    "insertText": "FStreamingManager()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "Add_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add_GameThread(UStreamableSparseVolumeTexture* SparseVolumeTexture)"
  },
  {
    "label": "Remove_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove_GameThread(UStreamableSparseVolumeTexture* SparseVolumeTexture)"
  },
  {
    "label": "Request_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Request_GameThread(UStreamableSparseVolumeTexture* SparseVolumeTexture, uint32 StreamingInstanceKey, float FrameRate, float FrameIndex, float MipLevel, EStreamingRequestFlags Flags)"
  },
  {
    "label": "Update_GameThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update_GameThread()"
  },
  {
    "label": "Request()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Request(UStreamableSparseVolumeTexture* SparseVolumeTexture, uint32 StreamingInstanceKey, float FrameRate, float FrameIndex, float MipLevel, EStreamingRequestFlags Flags)"
  },
  {
    "label": "BeginAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginAsyncUpdate(FRDGBuilder& GraphBuilder, bool bUseAsyncThread)"
  },
  {
    "label": "EndAsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndAsyncUpdate(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetStreamingDebugInfo()",
    "kind": "Method",
    "detail": "Function (const FStreamingDebugInfo*)",
    "insertText": "GetStreamingDebugInfo(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (private : class FStreamingUpdateTask ; struct FFrameInfo { const FResources* Resources ; FTextureRenderResources* TextureRenderResources ; int32 NumMipLevels = 0 ; TArray<uint32> TileAllocations ; TBitArray<> ResidentPages ; TBitArray<> InvalidatedPages ; TBitArray<> ResidentTiles ; TBitArray<> StreamingTiles ; TMap<uint32,uint32> TileIndexToPendingRequestIndex ; TRefCountPtr<IPooledRenderTarget> PageTableTexture ; } ; struct FStreamingInfo { uint16 SVTHandle = INDEX_NONE ; FName SVTName =)",
    "insertText": "FName()"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (EPixelFormat FormatA = PF_Unknown ; EPixelFormat FormatB = PF_Unknown ; FVector4f FallbackValueA =)",
    "insertText": "FVector4f()"
  },
  {
    "label": "GetAndUpdateStreamingInstance()",
    "kind": "Method",
    "detail": "Function (int32 NumPrefetchFrames = 0 ; float PrefetchPercentageStepSize = 0 . 0 f ; float PrefetchPercentageBias = 0 . 0 f ; TArray<FFrameInfo> PerFrameInfo ; TArray<TUniquePtr<FStreamingInstance>> StreamingInstances ; TArray<uint32,TInlineAllocator<1 6>> MipLevelStreamingSize ; FTileAllocator TileAllocator ; TUniquePtr<FTileDataTexture> TileDataTexture ; FStreamingInstance*)",
    "insertText": "GetAndUpdateStreamingInstance(uint64 StreamingInstanceKey, const FStreamingInstanceRequest& Request)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} ; struct FPendingRequest { uint16 SVTHandle = INDEX_NONE ; uint16 FrameIndex = INDEX_NONE ; uint32 TileOffset = INDEX_NONE ; uint32 TileCount = 0 ; # if WITH_EDITORONLY_DATA FCriticalSection DDCAsyncGuard ; FSharedBuffer SharedBuffer ; enum class EState { None,DDC_Pending,DDC_Ready,DDC_Failed,Memory,Disk,} State = EState::None ; uint32 RetryCount = 0 ; uint32 RequestVersion = 0 ; # endif FIoBuffer RequestBuffer ; FBulkDataBatchRequest Request ; uint32 IssuedInFrame = 0 ; bool bBlocking = false ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(uint16 InSVTHandle, uint16 InFrameIndex, uint32 InTileOffset, uint32 InTileCount, uint32 InIssuedInFrame, bool bInBlocking)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (SVTHandle = InSVTHandle ; FrameIndex = InFrameIndex ; TileOffset = InTileOffset ; TileCount = InTileCount ; IssuedInFrame = InIssuedInFrame ; bBlocking = bInBlocking ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (State = EState::None ; RetryCount = 0 ; + + RequestVersion ; # endif)",
    "insertText": "if(Request.IsPending())"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (Request .)",
    "insertText": "Cancel()"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (Request .)",
    "insertText": "Wait()"
  },
  {
    "label": "FVector4f()",
    "kind": "Method",
    "detail": "Function (EPixelFormat FormatA = PF_Unknown ; EPixelFormat FormatB = PF_Unknown ; FVector4f FallbackValueA =)",
    "insertText": "FVector4f(0.0f, 0.0f, 0.0f, 0.0f)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (int32 NumMipLevelsGlobal = 0 ; float StreamingPoolSizeFactor = 0 . 0 f ; int32 NumPrefetchFrames = 0 ; float PrefetchPercentageStepSize = 0 . 0 f ; float PrefetchPercentageBias = 0 . 0 f ; TArray<FFrameInfo> FrameInfo ; } ; struct FFrameKey { uint16 SVTHandle = INDEX_NONE ; uint16 FrameIndex = INDEX_NONE ; uint32)",
    "insertText": "GetTypeHash(const FFrameKey& Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFrameKey& Other)"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (} ; struct FStreamingRequest { FFrameKey Key ; FRequestPayload Payload ; } ; struct FTileRange { uint16 SVTHandle = INDEX_NONE ; uint16 FrameIndex = INDEX_NONE ; uint32 TileOffset = INDEX_NONE ; uint32 TileCount = 0 ; uint8 Priority = 0 ; } ; TMap<UStreamableSparseVolumeTexture*,uint16> SparseVolumeTextureToHandle ; TSparseArray<TUniquePtr<FStreamingInfo>> StreamingInfo ; TMap<FFrameKey,FRequestPayload> RequestsHashTable ; TArray<FPendingRequest> PendingRequests ; # if WITH_EDITORONLY_DATA TUniquePtr<UE::DerivedData::FRequestOwner> RequestOwner ; TUniquePtr<UE::DerivedData::FRequestOwner> RequestOwnerBlocking ; # endif TUniquePtr<class FPageTableUpdater> PageTableUpdater ; FGraphEventArray AsyncTaskEvents ; FAsyncState AsyncState ; int32 MaxPendingRequests = 0 ; int32 NumPendingRequests = 0 ; int32 NextPendingRequestIndex = 0 ; uint32 UpdateIndex = 1 ; FDateTime InitTime =)",
    "insertText": "Now()"
  },
  {
    "label": "AddInternal()",
    "kind": "Method",
    "detail": "Function (int64 TotalRequestedBandwidth = 0 ; TSet<FStreamingInstance*> ActiveStreamingInstances ; TSet<FTileDataTexture*> TileDataTexturesToUpdate ; TSet<FFrameInfo*> InvalidatedSVTFrames ; TArray<FTileRange> TileRangesToStream ; TArray<FTileDataTask> UploadTasks ; TArray<int32> RequestsToCleanUp ; TBitArray<> ResidentPagesNew ; TBitArray<> ResidentPagesDiff ; void)",
    "insertText": "AddInternal(FRDGBuilder& GraphBuilder, FNewSparseVolumeTextureInfo&& NewSVTInfo)"
  },
  {
    "label": "RemoveInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveInternal(UStreamableSparseVolumeTexture* SparseVolumeTexture)"
  },
  {
    "label": "AddRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRequest(const FStreamingRequest& Request)"
  },
  {
    "label": "AsyncUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsyncUpdate()"
  },
  {
    "label": "ComputeBandwidthLimit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeBandwidthLimit()"
  },
  {
    "label": "FilterRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterRequests()"
  },
  {
    "label": "IssueRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IssueRequests()"
  },
  {
    "label": "DetermineReadyRequests()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "DetermineReadyRequests()"
  },
  {
    "label": "InstallReadyRequests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstallReadyRequests()"
  },
  {
    "label": "PatchPageTable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PatchPageTable(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "FindStreamingInfo()",
    "kind": "Method",
    "detail": "Function (FStreamingInfo*)",
    "insertText": "FindStreamingInfo(uint16 SparseVolumeTextureHandle)"
  },
  {
    "label": "FindStreamingInfo()",
    "kind": "Method",
    "detail": "Function (FStreamingInfo*)",
    "insertText": "FindStreamingInfo(UStreamableSparseVolumeTexture* SparseVolumeTexture)"
  },
  {
    "label": "AllocatePendingRequestIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AllocatePendingRequestIndex()"
  },
  {
    "label": "BuildDDCRequest()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA UE::DerivedData::FCacheGetChunkRequest)",
    "insertText": "BuildDDCRequest(const FResources& Resources, uint32 FirstTileIndex, uint32 NumTiles, uint32 PendingRequestIndex, int32 ChunkIndex)"
  },
  {
    "label": "RequestDDCData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestDDCData(TConstArrayView<UE::DerivedData::FCacheGetChunkRequest> DDCRequests, bool bBlocking)"
  }
]