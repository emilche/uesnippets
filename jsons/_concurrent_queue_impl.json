[
  {
    "label": "concurrent_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue"
  },
  {
    "label": "concurrent_bounded_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_bounded_queue"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "micro_queue_pop_finalizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue_pop_finalizer"
  },
  {
    "label": "concurrent_queue_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_base_v3"
  },
  {
    "label": "concurrent_queue_rep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "concurrent_queue_rep"
  },
  {
    "label": "concurrent_queue_rep_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "concurrent_queue_rep_base"
  },
  {
    "label": "page",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "page"
  },
  {
    "label": "concurrent_queue_page_allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_page_allocator"
  },
  {
    "label": "destroyer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "destroyer"
  },
  {
    "label": "padded_page",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "padded_page"
  },
  {
    "label": "concurrent_queue_iterator_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_rep"
  },
  {
    "label": "concurrent_queue_iterator_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_base_v3"
  },
  {
    "label": "concurrent_queue_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator"
  },
  {
    "label": "tbb_remove_cv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tbb_remove_cv"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "copy_specifics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "copy_specifics"
  },
  {
    "label": "concurrent_queue_base_v8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_base_v8"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__concurrent_queue_impl_H # define __TBB__concurrent_queue_impl_H # ifndef __TBB_concurrent_queue_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif # include \" . . / tbb_stddef . h \" # include \" . . / tbb_machine . h \" # include \" . . / atomic . h \" # include \" . . / spin_mutex . h \" # include \" . . / cache_aligned_allocator . h \" # include \" . . / tbb_exception . h \" # include \" . . / tbb_profiling . h \" # include<new> # include __TBB_STD_SWAP_HEADER # include<iterator> namespace tbb { # if ! __TBB_TEMPLATE_FRIENDS_BROKEN namespace strict_ppl { template<T,A> class concurrent_queue ; } template<T,A> class concurrent_bounded_queue ; # endif namespace strict_ppl { namespace internal { using namespace tbb::internal ; typedef size_t ticket ; template<T> class micro_queue ; template<T> class micro_queue_pop_finalizer ; template<T> class concurrent_queue_base_v3 ; template<T> struct concurrent_queue_rep ; struct concurrent_queue_rep_base : no_copy { template<T> class micro_queue ; template<T> class concurrent_queue_base_v3 ; protected : const size_t phi = 3 ; public : const size_t n_queue = 8 ; struct page { page* next ; uintptr_t mask ; } ; atomic<ticket> head_counter ; char pad1 [ NFS_MaxLineSize -)",
    "insertText": "sizeof(atomic<ticket>)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t items_per_page ; size_t item_size ; atomic<size_t> n_invalid_entries ; char pad3 [ NFS_MaxLineSize -)",
    "insertText": "sizeof(size_t)-sizeof(size_t)-sizeof(atomic<size_t>)"
  },
  {
    "label": "is_valid_page()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "is_valid_page(const concurrent_queue_rep_base::page* p)"
  },
  {
    "label": "concurrent_queue_page_allocator()",
    "kind": "Method",
    "detail": "Function (} class concurrent_queue_page_allocator { template<T> class micro_queue ; template<T> class micro_queue_pop_finalizer ; protected : ~)",
    "insertText": "concurrent_queue_page_allocator()"
  },
  {
    "label": "allocate_page()",
    "kind": "Method",
    "detail": "Function (} private : concurrent_queue_rep_base::page*)",
    "insertText": "allocate_page()"
  },
  {
    "label": "deallocate_page()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate_page(concurrent_queue_rep_base::page* p)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} ; # if _MSC_VER&& !)",
    "insertText": "defined(__INTEL_COMPILER) #pragma warning( push ) #pragma warning( disable: 4146)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (public : typedef)",
    "insertText": "void(*item_constructor_t)(T* location, const void* src)"
  },
  {
    "label": "destroyer()",
    "kind": "Method",
    "detail": "Function (private : typedef concurrent_queue_rep_base::page page ; class destroyer : no_copy { T& my_value ; public :)",
    "insertText": "destroyer(T& value ) : my_value(value)"
  },
  {
    "label": "destroyer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "destroyer()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (my_value . ~)",
    "insertText": "T()"
  },
  {
    "label": "copy_item()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "copy_item(page& dst, size_t dindex, const void* src, item_constructor_t construct_item)"
  },
  {
    "label": "construct_item()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct_item(&get_ref(dst, dindex), src)"
  },
  {
    "label": "copy_item()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copy_item(page& dst, size_t dindex, const page& src, size_t sindex, item_constructor_t construct_item)"
  },
  {
    "label": "get_ref()",
    "kind": "Method",
    "detail": "Function (T& src_item =)",
    "insertText": "get_ref(const_cast<page&>(src), sindex)"
  },
  {
    "label": "construct_item()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "construct_item(&get_ref(dst, dindex), static_cast<const void*>(&src_item))"
  },
  {
    "label": "assign_and_destroy_item()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "assign_and_destroy_item(void* dst, page& src, size_t index)"
  },
  {
    "label": "get_ref()",
    "kind": "Method",
    "detail": "Function (T& from =)",
    "insertText": "get_ref(src,index)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (destroyer)",
    "insertText": "d(from)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* static_cast<)",
    "insertText": "T(dst) = tbb::internal::move( from)"
  },
  {
    "label": "spin_wait_until_my_turn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "spin_wait_until_my_turn(atomic<ticket>& counter, ticket k, concurrent_queue_rep_base& rb)"
  },
  {
    "label": "padded_page()",
    "kind": "Method",
    "detail": "Function (public : class micro_queue_pop_finalizer<T> ; struct padded_page : page {)",
    "insertText": "padded_page()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const padded_page&)"
  },
  {
    "label": "get_ref()",
    "kind": "Method",
    "detail": "Function (T last ; } ; T&)",
    "insertText": "get_ref(page& p, size_t index)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} atomic<page*> head_page ; atomic<ticket> head_counter ; atomic<page*> tail_page ; atomic<ticket> tail_counter ; spin_mutex page_mutex ; void)",
    "insertText": "push(const void* item, ticket k, concurrent_queue_base_v3<T>& base, item_constructor_t construct_item)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pop(void* dst, ticket k, concurrent_queue_base_v3<T>& base)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (micro_queue&)",
    "insertText": "assign(const micro_queue& src, concurrent_queue_base_v3<T>& base, item_constructor_t construct_item)"
  },
  {
    "label": "make_copy()",
    "kind": "Method",
    "detail": "Function (page*)",
    "insertText": "make_copy(concurrent_queue_base_v3<T>& base, const page* src_page, size_t begin_in_page, size_t end_in_page, ticket& g_index, item_constructor_t construct_item)"
  },
  {
    "label": "invalidate_page_and_rethrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidate_page_and_rethrow(ticket k)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ticket c = counter ;)",
    "insertText": "if(c==k)"
  },
  {
    "label": "throw_exception()",
    "kind": "Method",
    "detail": "Function (+ + rb . n_invalid_entries ;)",
    "insertText": "throw_exception(eid_bad_last_alloc)"
  },
  {
    "label": "modulo_power_of_two()",
    "kind": "Method",
    "detail": "Function (k& = - concurrent_queue_rep_base::n_queue ; page* p = NULL ; size_t index =)",
    "insertText": "modulo_power_of_two(k/concurrent_queue_rep_base::n_queue, base.my_rep->items_per_page)"
  },
  {
    "label": "__TBB_CATCH()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "__TBB_CATCH(...)"
  },
  {
    "label": "invalidate_page_and_rethrow()",
    "kind": "Method",
    "detail": "Function (+ + base . my_rep -> n_invalid_entries ;)",
    "insertText": "invalidate_page_and_rethrow(k)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} p -> mask = 0 ; p -> next = NULL ; })",
    "insertText": "if(tail_counter != k ) spin_wait_until_my_turn( tail_counter, k, *base.my_rep)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &tail_counter)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (spin_mutex::scoped_lock)",
    "insertText": "lock(page_mutex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (next = p)",
    "insertText": "if(is_valid_page(q))"
  },
  {
    "label": "itt_hide_store_word()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_hide_store_word(p->mask, p->mask | uintptr_t(1)<<index)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(releasing, &tail_counter)"
  },
  {
    "label": "__TBB_RETHROW()",
    "kind": "Method",
    "detail": "Function (tail_counter + = concurrent_queue_rep_base::n_queue ;)",
    "insertText": "__TBB_RETHROW()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (k& = - concurrent_queue_rep_base::n_queue ;)",
    "insertText": "if(head_counter!=k ) spin_wait_until_eq( head_counter, k)"
  },
  {
    "label": "call_itt_notify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_itt_notify(acquired, &head_counter)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (page* p = head_page ;)",
    "insertText": "__TBB_ASSERT(p, NULL)"
  },
  {
    "label": "finalizer()",
    "kind": "Method",
    "detail": "Function (bool success = false ; { micro_queue_pop_finalizer<T>)",
    "insertText": "finalizer(*this, base, k+concurrent_queue_rep_base::n_queue, index==base.my_rep->items_per_page-1 ? p : NULL)"
  },
  {
    "label": "assign_and_destroy_item()",
    "kind": "Method",
    "detail": "Function (success = true ;)",
    "insertText": "assign_and_destroy_item(dst, *p, index)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} else { - - base . my_rep -> n_invalid_entries ; } } return success ; } template<T> micro_queue<T>& micro_queue<T)",
    "insertText": "assign(const micro_queue<T>& src, concurrent_queue_base_v3<T>& base, item_constructor_t construct_item)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (head_counter = src . head_counter ; tail_counter = src . tail_counter ; const page* srcp = src . head_page ;)",
    "insertText": "if(is_valid_page(srcp))"
  },
  {
    "label": "n_items()",
    "kind": "Method",
    "detail": "Function (ticket g_index = head_counter ; __TBB_TRY { size_t)",
    "insertText": "n_items(tail_counter-head_counter)"
  },
  {
    "label": "modulo_power_of_two()",
    "kind": "Method",
    "detail": "Function (size_t index =)",
    "insertText": "modulo_power_of_two(head_counter/concurrent_queue_rep_base::n_queue, base.my_rep->items_per_page)"
  },
  {
    "label": "end_in_first_page()",
    "kind": "Method",
    "detail": "Function (items_per_page)",
    "insertText": "end_in_first_page(index+n_items<base.my_rep->items_per_page)?(index+n_items)"
  },
  {
    "label": "make_copy()",
    "kind": "Method",
    "detail": "Function (head_page =)",
    "insertText": "make_copy(base, srcp, index, end_in_first_page, g_index, construct_item)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (page* cur_page = head_page ;)",
    "insertText": "if(srcp != src.tail_page)"
  },
  {
    "label": "make_copy()",
    "kind": "Method",
    "detail": "Function (cur_page -> next =)",
    "insertText": "make_copy(base, srcp, 0, base.my_rep->items_per_page, g_index, construct_item)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (cur_page = cur_page -> next ; })",
    "insertText": "__TBB_ASSERT(srcp==src.tail_page, NULL)"
  },
  {
    "label": "modulo_power_of_two()",
    "kind": "Method",
    "detail": "Function (size_t last_index =)",
    "insertText": "modulo_power_of_two(tail_counter/concurrent_queue_rep_base::n_queue, base.my_rep->items_per_page)"
  },
  {
    "label": "make_copy()",
    "kind": "Method",
    "detail": "Function (cur_page -> next =)",
    "insertText": "make_copy(base, srcp, 0, last_index, g_index, construct_item)"
  },
  {
    "label": "invalidate_page_and_rethrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidate_page_and_rethrow(g_index)"
  },
  {
    "label": "invalid_page()",
    "kind": "Method",
    "detail": "Function (page*)",
    "insertText": "invalid_page(page*)uintptr_t(1)"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "itt_store_word_with_release(tail_counter, k+concurrent_queue_rep_base::n_queue+1)"
  },
  {
    "label": "make_copy()",
    "kind": "Method",
    "detail": "Function (} template<T> concurrent_queue_rep_base::page* micro_queue<T)",
    "insertText": "make_copy(concurrent_queue_base_v3<T>& base, const concurrent_queue_rep_base::page* src_page, size_t begin_in_page, size_t end_in_page, ticket& g_index, item_constructor_t construct_item)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (new_page -> next = NULL ; new_page -> mask = src_page -> mask ;)",
    "insertText": "for(; begin_in_page!=end_in_page; ++begin_in_page, ++g_index ) if( new_page->mask & uintptr_t(1)<<begin_in_page ) copy_item( *new_page, begin_in_page, *src_page, begin_in_page, construct_item)"
  },
  {
    "label": "micro_queue_pop_finalizer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "micro_queue_pop_finalizer()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (page* p = my_page ;)",
    "insertText": "if(is_valid_page(p))"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (spin_mutex::scoped_lock)",
    "insertText": "lock(my_queue.page_mutex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (page* q = p -> next ; my_queue . head_page = q ;)",
    "insertText": "if(!is_valid_page(q))"
  },
  {
    "label": "itt_store_word_with_release()",
    "kind": "Method",
    "detail": "Function (my_queue . tail_page = NULL ; } })",
    "insertText": "itt_store_word_with_release(my_queue.head_counter, my_ticket)"
  },
  {
    "label": "deallocate_page()",
    "kind": "Method",
    "detail": "Function (allocator .)",
    "insertText": "deallocate_page(p)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # if _MSC_VER&& !)",
    "insertText": "defined(__INTEL_COMPILER) #pragma warning( pop)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (template<T> class concurrent_queue_iterator_base_v3 ; template<T> struct concurrent_queue_rep : public concurrent_queue_rep_base { micro_queue<T> array [ n_queue ] ; size_t)",
    "insertText": "index(ticket k)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (concurrent_queue_rep<T>& r =* my_rep ; size_t n =)",
    "insertText": "sizeof(padded_page) + (r.items_per_page-1)*sizeof(T)"
  },
  {
    "label": "deallocate_page()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "deallocate_page(concurrent_queue_rep_base::page *p)"
  },
  {
    "label": "deallocate_block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate_block(reinterpret_cast<void*>(p), n)"
  },
  {
    "label": "allocate_block()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "allocate_block(size_t n)"
  },
  {
    "label": "deallocate_block()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate_block(void *p, size_t n)"
  },
  {
    "label": "concurrent_queue_base_v3()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "concurrent_queue_base_v3()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# if TBB_USE_ASSERT size_t nq = my_rep -> n_queue ;)",
    "insertText": "for(size_t i=0; i<nq; i++ ) __TBB_ASSERT( my_rep->array[i].tail_page==NULL, \"pages were not freed properly\")"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# endif cache_aligned_allocator<concurrent_queue_rep<)",
    "insertText": "T().deallocate(my_rep,1)"
  },
  {
    "label": "internal_push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_push(const void* src, item_constructor_t construct_item)"
  },
  {
    "label": "choose()",
    "kind": "Method",
    "detail": "Function (concurrent_queue_rep<T>& r =* my_rep ; ticket k = r . tail_counter + + ; r .)",
    "insertText": "choose(k).push( src, k, *this, construct_item)"
  },
  {
    "label": "internal_try_pop()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "internal_try_pop(void* dst)"
  },
  {
    "label": "internal_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "internal_size()"
  },
  {
    "label": "internal_empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "internal_empty()"
  },
  {
    "label": "internal_finish_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_finish_clear()"
  },
  {
    "label": "internal_throw_exception()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_throw_exception()"
  },
  {
    "label": "throw_exception()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "throw_exception(eid_bad_alloc)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "assign(const concurrent_queue_base_v3& src, item_constructor_t construct_item)"
  },
  {
    "label": "internal_swap()",
    "kind": "Method",
    "detail": "Function (# if __TBB_CPP11_RVALUE_REF_PRESENT void)",
    "insertText": "internal_swap(concurrent_queue_base_v3& src)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(my_rep, src.my_rep)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const size_t item_size =)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (my_rep = cache_aligned_allocator<concurrent_queue_rep<)",
    "insertText": "T().allocate(1)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((size_t)my_rep % NFS_GetLineSize()==0, \"alignment error\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((size_t)&my_rep->head_counter % NFS_GetLineSize()==0, \"alignment error\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((size_t)&my_rep->tail_counter % NFS_GetLineSize()==0, \"alignment error\")"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT((size_t)&my_rep->array % NFS_GetLineSize()==0, \"alignment error\")"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(static_cast<void*>(my_rep),0,sizeof(concurrent_queue_rep<T>))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (concurrent_queue_rep<T>& r =* my_rep ; ticket k ; do { k = r . head_counter ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) && defined(_Wp64) #pragma warning (pop) #endif if( k==tk)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(!r.choose( k ).pop( dst, k, *this ))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (concurrent_queue_rep<T>& r =* my_rep ;)",
    "insertText": "__TBB_ASSERT(sizeof(ptrdiff_t)<=sizeof(size_t), NULL)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (ticket hc = r . head_counter ; size_t nie = r . n_invalid_entries ; ticket tc = r . tail_counter ;)",
    "insertText": "__TBB_ASSERT(hc!=tc || !nie, NULL)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (ptrdiff_t sz = tc - hc - nie ; return sz<0 ? 0 :)",
    "insertText": "size_t(sz)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (concurrent_queue_rep<T>& r =* my_rep ; size_t nq = r . n_queue ;)",
    "insertText": "for(size_t i=0; i<nq; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (page* tp = r . array [ i ] . tail_page ;)",
    "insertText": "if(is_valid_page(tp))"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(r.array[i].head_page==tp, \"at most one page should remain\")"
  },
  {
    "label": "deallocate_page()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate_page(tp)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (r . array [ i ] . tail_page = NULL ; } else)",
    "insertText": "__TBB_ASSERT(!is_valid_page(r.array[i].head_page), \"head page pointer corrupt?\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (concurrent_queue_rep<T>& r =* my_rep ; r . items_per_page = src . my_rep -> items_per_page ; r . head_counter = src . my_rep -> head_counter ; r . tail_counter = src . my_rep -> tail_counter ; r . n_invalid_entries = src . my_rep -> n_invalid_entries ;)",
    "insertText": "for(size_t i = 0; i < r.n_queue; ++i ) r.array[i].assign( src.my_rep->array[i], *this, construct_item)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(r.head_counter==src.my_rep->head_counter && r.tail_counter==src.my_rep->tail_counter, \"the source concurrent queue should not be concurrently modified.\")"
  },
  {
    "label": "concurrent_queue_iterator_rep()",
    "kind": "Method",
    "detail": "Function (} template<Container,Value> class concurrent_queue_iterator ; template<T> class concurrent_queue_iterator_rep : no_assign { typedef micro_queue<T>::padded_page padded_page ; public : ticket head_counter ; const concurrent_queue_base_v3<T>& my_queue ; concurrent_queue_base_v3<T>::page* array [ concurrent_queue_rep<T>::n_queue ] ;)",
    "insertText": "concurrent_queue_iterator_rep(const concurrent_queue_base_v3<T>& queue ) : head_counter(queue.my_rep->head_counter), my_queue(queue)"
  },
  {
    "label": "get_item()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "get_item(T*& item, size_t k)"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (item = NULL ; return true ; } else { concurrent_queue_base_v3<T>::page* p = array [ concurrent_queue_rep<T)",
    "insertText": "index(k)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(p,NULL)"
  },
  {
    "label": "modulo_power_of_two()",
    "kind": "Method",
    "detail": "Function (size_t i =)",
    "insertText": "modulo_power_of_two(k/concurrent_queue_rep<T>::n_queue, my_queue.my_rep->items_per_page)"
  },
  {
    "label": "get_ref()",
    "kind": "Method",
    "detail": "Function (item =& micro_queue<T)",
    "insertText": "get_ref(*p,i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } template<Value> class concurrent_queue_iterator_base_v3 : no_assign { concurrent_queue_iterator_rep<Value>* my_rep ; template<C,T,U> bool)",
    "insertText": "operator(const concurrent_queue_iterator<C,T>& i, const concurrent_queue_iterator<C,U>& j)"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (protected : Value* my_item ;)",
    "insertText": "concurrent_queue_iterator_base_v3() : my_rep(NULL), my_item(NULL)"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (# if __TBB_GCC_OPTIMIZER_ORDERING_BROKEN)",
    "insertText": "__TBB_compiler_fence()"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "concurrent_queue_iterator_base_v3(const concurrent_queue_iterator_base_v3& i ) : no_assign(), my_rep(NULL), my_item(NULL)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(i)"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_queue_iterator_base_v3(const concurrent_queue_base_v3<Value>& queue)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign(const concurrent_queue_iterator_base_v3<Value>& other)"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance()"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "concurrent_queue_iterator_base_v3()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (cache_aligned_allocator<concurrent_queue_iterator_rep<)",
    "insertText": "Value().deallocate(my_rep, 1)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (my_rep = cache_aligned_allocator<concurrent_queue_iterator_rep<)",
    "insertText": "Value().allocate(1)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(my_rep ) concurrent_queue_iterator_rep<Value>(queue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (size_t k = my_rep -> head_counter ;)",
    "insertText": "if(!my_rep->get_item(my_item, k) ) advance()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (my_rep = NULL ; })",
    "insertText": "if(other.my_rep)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(my_rep ) concurrent_queue_iterator_rep<Value>( *other.my_rep)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_item, \"attempt to increment iterator past end of queue\")"
  },
  {
    "label": "get_item()",
    "kind": "Method",
    "detail": "Function (size_t k = my_rep -> head_counter ; const concurrent_queue_base_v3<Value>& queue = my_rep -> my_queue ; # if TBB_USE_ASSERT Value* tmp ; my_rep ->)",
    "insertText": "get_item(tmp,k)"
  },
  {
    "label": "__TBB_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT(my_item==tmp, NULL)"
  },
  {
    "label": "modulo_power_of_two()",
    "kind": "Method",
    "detail": "Function (# endif size_t i =)",
    "insertText": "modulo_power_of_two(k/concurrent_queue_rep<Value>::n_queue, queue.my_rep->items_per_page)"
  },
  {
    "label": "concurrent_queue_iterator()",
    "kind": "Method",
    "detail": "Function (} template<T> struct tbb_remove_cv { typedef T type ; } ; template<T> struct tbb_remove_cv<const T> { typedef T type ; } ; template<T> struct tbb_remove_cv<volatile T> { typedef T type ; } ; template<T> struct tbb_remove_cv<const volatile T> { typedef T type ; } ; template<Container,Value> class concurrent_queue_iterator : public concurrent_queue_iterator_base_v3<tbb_remove_cv<Value>::type>,public std::iterator<std::forward_iterator_tag,Value> { # if ! __TBB_TEMPLATE_FRIENDS_BROKEN template<T,class A> class::tbb::strict_ppl::concurrent_queue ; # else public : # endif)",
    "insertText": "concurrent_queue_iterator(const concurrent_queue_base_v3<typename tbb_remove_cv<Value>::type>& queue ) : concurrent_queue_iterator_base_v3<typename tbb_remove_cv<Value>::type>(queue)"
  },
  {
    "label": "concurrent_queue_iterator()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "concurrent_queue_iterator()"
  },
  {
    "label": "concurrent_queue_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_queue_iterator(const concurrent_queue_iterator<Container,typename Container::value_type>& other ) : concurrent_queue_iterator_base_v3<typename tbb_remove_cv<Value>::type>(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_queue_iterator&)",
    "insertText": "operator(const concurrent_queue_iterator& other)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "assign(other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "operator()"
  },
  {
    "label": "copy_item()",
    "kind": "Method",
    "detail": "Function (T last ; } ; private : void)",
    "insertText": "copy_item(page& dst, size_t index, const void* src)"
  },
  {
    "label": "concurrent_queue_base_v3()",
    "kind": "Method",
    "detail": "Function (protected : __TBB_EXPORTED_METHOD)",
    "insertText": "concurrent_queue_base_v3(size_t item_size)"
  },
  {
    "label": "internal_push()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_push(const void* src)"
  },
  {
    "label": "internal_pop()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_pop(void* dst)"
  },
  {
    "label": "internal_abort()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_abort()"
  },
  {
    "label": "internal_push_if_not_full()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_push_if_not_full(const void* src)"
  },
  {
    "label": "internal_pop_if_present()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_pop_if_present(void* dst)"
  },
  {
    "label": "internal_set_capacity()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_set_capacity(ptrdiff_t capacity, size_t element_size)"
  },
  {
    "label": "deallocate_page()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate_page(page *p)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "assign(const concurrent_queue_base_v3& src)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(my_capacity, src.my_capacity)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(items_per_page, src.items_per_page)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(item_size, src.item_size)"
  },
  {
    "label": "internal_insert_item()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "internal_insert_item(const void* src, copy_specifics op_type)"
  },
  {
    "label": "internal_insert_if_not_full()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "internal_insert_if_not_full(const void* src, copy_specifics op_type)"
  },
  {
    "label": "internal_assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_assign(const concurrent_queue_base_v3& src, copy_specifics op_type)"
  },
  {
    "label": "copy_page_item()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "copy_page_item(page& dst, size_t dindex, const page& src, size_t sindex)"
  },
  {
    "label": "concurrent_queue_base_v8()",
    "kind": "Method",
    "detail": "Function (} ; class concurrent_queue_base_v8 : public concurrent_queue_base_v3 { protected :)",
    "insertText": "concurrent_queue_base_v8(size_t item_sz ) : concurrent_queue_base_v3( item_sz)"
  },
  {
    "label": "move_content()",
    "kind": "Method",
    "detail": "Function (} void __TBB_EXPORTED_METHOD)",
    "insertText": "move_content(concurrent_queue_base_v8& src)"
  },
  {
    "label": "internal_push_move_if_not_full()",
    "kind": "Method",
    "detail": "Function (bool __TBB_EXPORTED_METHOD)",
    "insertText": "internal_push_move_if_not_full(const void* src)"
  },
  {
    "label": "internal_push_move()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "internal_push_move(const void* src)"
  },
  {
    "label": "move_page_item()",
    "kind": "Method",
    "detail": "Function (private : struct micro_queue ; void)",
    "insertText": "move_page_item(page& dst, size_t dindex, const page& src, size_t sindex)"
  },
  {
    "label": "move_item()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move_item(page& dst, size_t index, const void* src)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const concurrent_queue_base_v3& queue, size_t offset_of_data)"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_queue_iterator_base_v3(const concurrent_queue_iterator_base_v3& i ) : my_rep(NULL), my_item(NULL)"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (} __TBB_EXPORTED_METHOD)",
    "insertText": "concurrent_queue_iterator_base_v3(const concurrent_queue_base_v3& queue)"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "concurrent_queue_iterator_base_v3(const concurrent_queue_base_v3& queue, size_t offset_of_data)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void __TBB_EXPORTED_METHOD)",
    "insertText": "assign(const concurrent_queue_iterator_base_v3& i)"
  },
  {
    "label": "concurrent_queue_iterator()",
    "kind": "Method",
    "detail": "Function (} ; typedef concurrent_queue_iterator_base_v3 concurrent_queue_iterator_base ; template<Container,Value> class concurrent_queue_iterator : public concurrent_queue_iterator_base,public std::iterator<std::forward_iterator_tag,Value> { # if ! __TBB_TEMPLATE_FRIENDS_BROKEN template<T,class A> class::tbb::concurrent_bounded_queue ; # else public : # endif)",
    "insertText": "concurrent_queue_iterator(const concurrent_queue_base_v3& queue ) : concurrent_queue_iterator_base_v3(queue,__TBB_offsetof(concurrent_queue_base_v3::padded_page<Value>,last))"
  },
  {
    "label": "concurrent_queue_iterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_queue_iterator(const concurrent_queue_iterator<Container,typename Container::value_type>& other ) : concurrent_queue_iterator_base_v3(other)"
  }
]