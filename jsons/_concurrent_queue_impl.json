[
  {
    "label": "concurrent_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue"
  },
  {
    "label": "concurrent_bounded_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_bounded_queue"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "micro_queue_pop_finalizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue_pop_finalizer"
  },
  {
    "label": "concurrent_queue_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_base_v3"
  },
  {
    "label": "concurrent_queue_rep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "concurrent_queue_rep"
  },
  {
    "label": "concurrent_queue_rep_base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "concurrent_queue_rep_base"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "concurrent_queue_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_base_v3"
  },
  {
    "label": "page",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "page"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "concurrent_queue_page_allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_page_allocator"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "micro_queue_pop_finalizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue_pop_finalizer"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "destroyer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "destroyer"
  },
  {
    "label": "micro_queue_pop_finalizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue_pop_finalizer"
  },
  {
    "label": "padded_page",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "padded_page"
  },
  {
    "label": "micro_queue_pop_finalizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue_pop_finalizer"
  },
  {
    "label": "concurrent_queue_iterator_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_rep"
  },
  {
    "label": "concurrent_queue_iterator_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_base_v3"
  },
  {
    "label": "inherits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "inherits"
  },
  {
    "label": "concurrent_queue_rep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "concurrent_queue_rep"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "implements",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "implements"
  },
  {
    "label": "concurrent_queue_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_base_v3"
  },
  {
    "label": "concurrent_queue_rep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "concurrent_queue_rep"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "concurrent_queue_iterator_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_rep"
  },
  {
    "label": "concurrent_queue_iterator_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_base_v3"
  },
  {
    "label": "concurrent_queue_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator"
  },
  {
    "label": "concurrent_queue_iterator_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_rep"
  },
  {
    "label": "concurrent_queue_iterator_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_base_v3"
  },
  {
    "label": "tbb_remove_cv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tbb_remove_cv"
  },
  {
    "label": "tbb_remove_cv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tbb_remove_cv"
  },
  {
    "label": "tbb_remove_cv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tbb_remove_cv"
  },
  {
    "label": "tbb_remove_cv",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tbb_remove_cv"
  },
  {
    "label": "concurrent_queue_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "concurrent_queue_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_rep"
  },
  {
    "label": "concurrent_queue_iterator_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_rep"
  },
  {
    "label": "concurrent_queue_iterator_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_base_v3"
  },
  {
    "label": "concurrent_queue_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator"
  },
  {
    "label": "concurrent_queue_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_base_v3"
  },
  {
    "label": "concurrent_queue_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_rep"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "micro_queue_pop_finalizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "micro_queue_pop_finalizer"
  },
  {
    "label": "concurrent_queue_iterator_rep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_rep"
  },
  {
    "label": "concurrent_queue_iterator_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_base_v3"
  },
  {
    "label": "page",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "page"
  },
  {
    "label": "copy_specifics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "copy_specifics"
  },
  {
    "label": "padded_page",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "padded_page"
  },
  {
    "label": "concurrent_queue_base_v8",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_base_v8"
  },
  {
    "label": "micro_queue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "micro_queue"
  },
  {
    "label": "concurrent_queue_iterator_base_v3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator_base_v3"
  },
  {
    "label": "concurrent_queue_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_queue_iterator"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (destroyer)",
    "insertText": "d(from)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push( const void* item, ticket k, concurrent_queue_base_v3<T>& base,\n        item_constructor_t construct_item )"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "pop( void* dst, ticket k, concurrent_queue_base_v3<T>& base )"
  },
  {
    "label": "invalidate_page_and_rethrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "invalidate_page_and_rethrow( ticket k )"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (atomic_backoff)",
    "insertText": "b(true)"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (spin_mutex::scoped_lock)",
    "insertText": "lock( page_mutex )"
  },
  {
    "label": "finalizer()",
    "kind": "Method",
    "detail": "Function (micro_queue_pop_finalizer<T>)",
    "insertText": "finalizer( *this, base, k+concurrent_queue_rep_base::n_queue, index==base.my_rep->items_per_page-1 ? p : NULL )"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (spin_mutex::scoped_lock)",
    "insertText": "lock( page_mutex )"
  },
  {
    "label": "lock()",
    "kind": "Method",
    "detail": "Function (spin_mutex::scoped_lock)",
    "insertText": "lock( my_queue.page_mutex )"
  },
  {
    "label": "concurrent_queue_base_v3()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "concurrent_queue_base_v3()"
  },
  {
    "label": "internal_try_pop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "internal_try_pop( void* dst )"
  },
  {
    "label": "internal_finish_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_finish_clear()"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign( const concurrent_queue_base_v3& src, item_constructor_t construct_item )"
  },
  {
    "label": "get_item()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "get_item( T*& item, size_t k )"
  },
  {
    "label": "__TBB_compiler_fence()",
    "kind": "Method",
    "detail": "Function (__TBB_GCC_OPTIMIZER_ORDERING_BROKEN)",
    "insertText": "__TBB_compiler_fence()"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assign( const concurrent_queue_iterator_base_v3<Value>& other )"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "advance()"
  },
  {
    "label": "concurrent_queue_base_v3()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "concurrent_queue_base_v3( size_t item_size )"
  },
  {
    "label": "internal_push()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_push( const void* src )"
  },
  {
    "label": "internal_pop()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_pop( void* dst )"
  },
  {
    "label": "internal_abort()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_abort()"
  },
  {
    "label": "internal_push_if_not_full()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_push_if_not_full( const void* src )"
  },
  {
    "label": "internal_pop_if_present()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_pop_if_present( void* dst )"
  },
  {
    "label": "internal_set_capacity()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_set_capacity( ptrdiff_t capacity, size_t element_size )"
  },
  {
    "label": "internal_finish_clear()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_finish_clear()"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "assign( const concurrent_queue_base_v3& src )"
  },
  {
    "label": "internal_insert_item()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_insert_item( const void* src, copy_specifics op_type )"
  },
  {
    "label": "internal_insert_if_not_full()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "internal_insert_if_not_full( const void* src, copy_specifics op_type )"
  },
  {
    "label": "internal_assign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "internal_assign( const concurrent_queue_base_v3& src, copy_specifics op_type )"
  },
  {
    "label": "move_content()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "move_content( concurrent_queue_base_v8& src )"
  },
  {
    "label": "internal_push_move_if_not_full()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_push_move_if_not_full( const void* src )"
  },
  {
    "label": "internal_push_move()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "internal_push_move( const void* src )"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize( const concurrent_queue_base_v3& queue, size_t offset_of_data )"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "concurrent_queue_iterator_base_v3( const concurrent_queue_base_v3& queue )"
  },
  {
    "label": "concurrent_queue_iterator_base_v3()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "concurrent_queue_iterator_base_v3( const concurrent_queue_base_v3& queue, size_t offset_of_data )"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "assign( const concurrent_queue_iterator_base_v3& i )"
  },
  {
    "label": "advance()",
    "kind": "Method",
    "detail": "Function (__TBB_EXPORTED_METHOD)",
    "insertText": "advance()"
  }
]