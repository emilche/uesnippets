[
  {
    "label": "FRunnableThread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRunnableThread"
  },
  {
    "label": "FAsyncWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncWriter"
  },
  {
    "label": "EConstants",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConstants"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FOutputDeviceFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceFile"
  },
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FCategoryInclusionInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCategoryInclusionInternal"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Runnable . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / OutputDevice . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / SingleThreadRunnable . h \" # include \" Serialization / Archive . h \" # include \" Templates / Atomic . h \" # include \" Templates / Function . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" class FRunnableThread ; # define BACKUP_LOG_FILENAME_POSTFIX)",
    "insertText": "TEXT(\"-backup-\")"
  },
  {
    "label": "FlushArchiveAndResetTimer()",
    "kind": "Method",
    "detail": "Function (enum EConstants { InitialBufferSize = 1 2 8* 1 0 2 4 } ; volatile FRunnableThread* Thread ; FThreadSafeCounter StopTaskCounter ; FArchive& Ar ; TArray<uint8> Buffer ; TAtomic<int32> BufferStartPos ; TAtomic<int32> BufferEndPos ; FCriticalSection BufferPosCritical ; FThreadSafeCounter SerializeRequestCounter ; FThreadSafeCounter WantsArchiveFlush ; FCriticalSection RunCritical ; double LastArchiveFlushTime ; void)",
    "insertText": "FlushArchiveAndResetTimer()"
  },
  {
    "label": "SerializeBufferToArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeBufferToArchive()"
  },
  {
    "label": "FlushBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushBuffer()"
  },
  {
    "label": "FAsyncWriter()",
    "kind": "Method",
    "detail": "Function (public : enum class EThreadNameOption : uint8 { FileName,Sequential,} ;)",
    "insertText": "FAsyncWriter(FArchive& InAr, FAsyncWriter::EThreadNameOption NameOption=FAsyncWriter::EThreadNameOption::FileName)"
  },
  {
    "label": "FAsyncWriter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncWriter()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* InData, int64 Length)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "GetSingleThreadInterface()",
    "kind": "Method",
    "detail": "Function (FSingleThreadRunnable*)",
    "insertText": "GetSingleThreadInterface()"
  },
  {
    "label": "FOutputDeviceFile()",
    "kind": "Method",
    "detail": "Function (} ; enum class EByteOrderMark : int8 { UTF8,Unspecified,} ; class FOutputDeviceFile : public FOutputDevice { public :)",
    "insertText": "FOutputDeviceFile(const TCHAR* InFilename = nullptr, bool bDisableBackup = false, bool bAppendIfExists = false, bool bCreateWriterLazily = true, TFunction<void(const TCHAR*)> FileOpenedCallback = TFunction<void(const TCHAR*)>())"
  },
  {
    "label": "FOutputDeviceFile()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FOutputDeviceFile()"
  },
  {
    "label": "SetFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFilename(const TCHAR* InFilename)"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const class FName& Category, const double Time)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(const TCHAR* Data, ELogVerbosity::Type Verbosity, const class FName& Category)"
  },
  {
    "label": "CanBeUsedOnAnyThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanBeUsedOnAnyThread()"
  },
  {
    "label": "IsBackupCopy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBackupCopy(const TCHAR* Filename)"
  },
  {
    "label": "IncludeCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncludeCategory(const class FName& InCategoryName)"
  },
  {
    "label": "GetFilename()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetFilename()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (private : FAsyncWriter* AsyncWriter ; FArchive* WriterArchive ; TFunction<)",
    "insertText": "void(const TCHAR*)"
  },
  {
    "label": "WriteRaw()",
    "kind": "Method",
    "detail": "Function (TCHAR Filename [ 1 0 2 4 ] ; bool AppendIfExists ; bool Dead ; struct FCategoryInclusionInternal ; TUniquePtr<FCategoryInclusionInternal> CategoryInclusionInternal ; bool bDisableBackup ; void)",
    "insertText": "WriteRaw(const TCHAR* C)"
  },
  {
    "label": "CreateWriter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateWriter(uint32 MaxAttempts = 32)"
  },
  {
    "label": "WriteByteOrderMarkToArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteByteOrderMarkToArchive(EByteOrderMark ByteOrderMark)"
  }
]