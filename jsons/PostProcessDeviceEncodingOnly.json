[
  {
    "label": "FDeviceEncodingOnlyInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeviceEncodingOnlyInputs"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" PostProcess / PostProcessEyeAdaptation . h \" # include \" ScreenPass . h \" # include \" OverridePassSequence . h \" # include \" Math / Halton . h \")",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FDeviceEncodingOnlyOutputDeviceParameters, ) SHADER_PARAMETER(FVector3f, InverseGamma) SHADER_PARAMETER(uint32, OutputDevice) SHADER_PARAMETER(uint32, OutputGamut) SHADER_PARAMETER(float, OutputMaxLuminance) END_SHADER_PARAMETER_STRUCT() FDeviceEncodingOnlyOutputDeviceParameters GetDeviceEncodingOnlyOutputDeviceParameters(const FSceneViewFamily& Family)"
  },
  {
    "label": "AddDeviceEncodingOnlyPass()",
    "kind": "Method",
    "detail": "Function (struct FDeviceEncodingOnlyInputs { FScreenPassRenderTarget OverrideOutput ; FScreenPassTexture SceneColor ; bool bOutputInHDR = false ; } ; FScreenPassTexture)",
    "insertText": "AddDeviceEncodingOnlyPass(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FDeviceEncodingOnlyInputs& Inputs)"
  }
]