[
  {
    "label": "FSimulationScratchBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulationScratchBuffer"
  },
  {
    "label": "FKinematicTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKinematicTarget"
  },
  {
    "label": "FKinematicTarget_AssumesLocked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKinematicTarget_AssumesLocked"
  },
  {
    "label": "FForceTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceTarget"
  },
  {
    "label": "FTorqueTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTorqueTarget"
  },
  {
    "label": "FRadialForceTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRadialForceTarget"
  },
  {
    "label": "FCustomTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomTarget"
  },
  {
    "label": "FPhysTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysTarget"
  },
  {
    "label": "FPhysSubstepTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysSubstepTask"
  },
  {
    "label": "PhysXCompletionTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PhysXCompletionTask"
  },
  {
    "label": "FSubstepCallbackGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstepCallbackGuard"
  },
  {
    "label": "FinishSceneStat()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" CoreMinimal . h \" # include \" EngineDefines . h \" # include \" HAL / ThreadSafeBool . h \" # include \" Physics / PhysicsInterfaceCore . h \" # include \" PhysicsEngine / BodyInstance . h \" struct FSimulationScratchBuffer ; void)",
    "insertText": "FinishSceneStat()"
  },
  {
    "label": "FKinematicTarget()",
    "kind": "Method",
    "detail": "Function (struct FKinematicTarget {)",
    "insertText": "FKinematicTarget() : BodyInstance(0)"
  },
  {
    "label": "FKinematicTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FKinematicTarget(FBodyInstance* Body, const FTransform& TM) : BodyInstance(Body), TargetTM(TM), OriginalTM(Body->GetUnrealWorldTransform(true, true))"
  },
  {
    "label": "FKinematicTarget_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (} FBodyInstance* BodyInstance ; FTransform TargetTM ; FTransform OriginalTM ; } ; struct FKinematicTarget_AssumesLocked : public FKinematicTarget {)",
    "insertText": "FKinematicTarget_AssumesLocked(FBodyInstance* Body, const FTransform& TM)"
  },
  {
    "label": "GetUnrealWorldTransform_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (BodyInstance = Body ; TargetTM = TM ; OriginalTM = Body ->)",
    "insertText": "GetUnrealWorldTransform_AssumesLocked(true, true)"
  },
  {
    "label": "FForceTarget()",
    "kind": "Method",
    "detail": "Function (} } ; struct FForceTarget {)",
    "insertText": "FForceTarget()"
  },
  {
    "label": "FForceTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FForceTarget(const FVector& GivenForce) : Force(GivenForce), bPosition(false)"
  },
  {
    "label": "FForceTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FForceTarget(const FVector& GivenForce, const FVector& GivenPosition) : Force(GivenForce), Position(GivenPosition), bPosition(true)"
  },
  {
    "label": "FTorqueTarget()",
    "kind": "Method",
    "detail": "Function (} FVector Force ; FVector Position ; bool bPosition ; bool bAccelChange ; bool bIsLocalForce ; } ; struct FTorqueTarget {)",
    "insertText": "FTorqueTarget()"
  },
  {
    "label": "FTorqueTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTorqueTarget(const FVector& GivenTorque) : Torque(GivenTorque)"
  },
  {
    "label": "FRadialForceTarget()",
    "kind": "Method",
    "detail": "Function (} FVector Torque ; bool bAccelChange ; } ; struct FRadialForceTarget {)",
    "insertText": "FRadialForceTarget()"
  },
  {
    "label": "FCustomTarget()",
    "kind": "Method",
    "detail": "Function (} FVector Origin ; float Radius ; float Strength ; uint8 Falloff ; bool bAccelChange ; } ; struct FCustomTarget {)",
    "insertText": "FCustomTarget()"
  },
  {
    "label": "FCustomTarget()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomTarget(const FCalculateCustomPhysics& GivenCalculateCustomPhysics) : CalculateCustomPhysics(&GivenCalculateCustomPhysics)"
  },
  {
    "label": "FPhysTarget()",
    "kind": "Method",
    "detail": "Function (} const FCalculateCustomPhysics* CalculateCustomPhysics ; } ; struct FPhysTarget {)",
    "insertText": "FPhysTarget() : bKinematicTarget(false)"
  },
  {
    "label": "SetKinematicTarget_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (} TArray<FForceTarget> Forces ; TArray<FTorqueTarget> Torques ; TArray<FRadialForceTarget> RadialForces ; TArray<FCustomTarget> CustomPhysics ; FKinematicTarget KinematicTarget ; bool bKinematicTarget ; } ; class FPhysSubstepTask { public : void)",
    "insertText": "SetKinematicTarget_AssumesLocked(FBodyInstance* Body, const FTransform& TM)"
  },
  {
    "label": "GetKinematicTarget_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetKinematicTarget_AssumesLocked(const FBodyInstance* Body, FTransform& OutTM)"
  },
  {
    "label": "AddCustomPhysics_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomPhysics_AssumesLocked(FBodyInstance* Body, const FCalculateCustomPhysics& CalculateCustomPhysics)"
  },
  {
    "label": "AddForce_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce_AssumesLocked(FBodyInstance* Body, const FVector& Force, bool bAccelChange)"
  },
  {
    "label": "AddForceAtPosition_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtPosition_AssumesLocked(FBodyInstance* Body, const FVector& Force, const FVector& Position, bool bIsLocalForce)"
  },
  {
    "label": "AddRadialForceToBody_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForceToBody_AssumesLocked(FBodyInstance* Body, const FVector& Origin, const float Radius, const float Strength, const uint8 Falloff, const bool bAccelChange)"
  },
  {
    "label": "ClearForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearForces_AssumesLocked(FBodyInstance* Body)"
  },
  {
    "label": "AddTorque_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque_AssumesLocked(FBodyInstance* Body, const FVector& Torque, bool bAccelChange)"
  },
  {
    "label": "ClearTorques_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTorques_AssumesLocked(FBodyInstance* Body)"
  },
  {
    "label": "RemoveBodyInstance_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBodyInstance_AssumesLocked(FBodyInstance* Body)"
  },
  {
    "label": "SwapBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapBuffers()"
  },
  {
    "label": "UpdateTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateTime(float UseDelta)"
  },
  {
    "label": "SubstepSimulationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstepSimulationStart()"
  },
  {
    "label": "SubstepSimulationEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstepSimulationEnd(ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "SubstepInterpolation()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "SubstepInterpolation(float Scale, float DeltaTime)"
  },
  {
    "label": "ApplyCustomPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCustomPhysics(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance, float DeltaTime)"
  },
  {
    "label": "ApplyForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyForces_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance)"
  },
  {
    "label": "ApplyTorques_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTorques_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance)"
  },
  {
    "label": "ApplyRadialForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRadialForces_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance)"
  },
  {
    "label": "InterpolateKinematicActor_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateKinematicActor_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance, float Alpha)"
  }
]