[
  {
    "label": "FSimulationScratchBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSimulationScratchBuffer"
  },
  {
    "label": "FKinematicTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKinematicTarget"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FKinematicTarget_AssumesLocked",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKinematicTarget_AssumesLocked"
  },
  {
    "label": "FForceTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FForceTarget"
  },
  {
    "label": "FTorqueTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTorqueTarget"
  },
  {
    "label": "FRadialForceTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRadialForceTarget"
  },
  {
    "label": "FCustomTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomTarget"
  },
  {
    "label": "FPhysTarget",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPhysTarget"
  },
  {
    "label": "FPhysSubstepTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysSubstepTask"
  },
  {
    "label": "PhysXCompletionTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PhysXCompletionTask"
  },
  {
    "label": "FSubstepCallbackGuard",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubstepCallbackGuard"
  },
  {
    "label": "FinishSceneStat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishSceneStat()"
  },
  {
    "label": "SetKinematicTarget_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKinematicTarget_AssumesLocked(FBodyInstance* Body, const FTransform& TM)"
  },
  {
    "label": "AddCustomPhysics_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCustomPhysics_AssumesLocked(FBodyInstance* Body, const FCalculateCustomPhysics& CalculateCustomPhysics)"
  },
  {
    "label": "AddForce_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForce_AssumesLocked(FBodyInstance* Body, const FVector& Force, bool bAccelChange)"
  },
  {
    "label": "AddForceAtPosition_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddForceAtPosition_AssumesLocked(FBodyInstance* Body, const FVector& Force, const FVector& Position, bool bIsLocalForce)"
  },
  {
    "label": "AddRadialForceToBody_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRadialForceToBody_AssumesLocked(FBodyInstance* Body, const FVector& Origin, const float Radius, const float Strength, const uint8 Falloff, const bool bAccelChange)"
  },
  {
    "label": "ClearForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearForces_AssumesLocked(FBodyInstance* Body)"
  },
  {
    "label": "AddTorque_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTorque_AssumesLocked(FBodyInstance* Body, const FVector& Torque, bool bAccelChange)"
  },
  {
    "label": "ClearTorques_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearTorques_AssumesLocked(FBodyInstance* Body)"
  },
  {
    "label": "RemoveBodyInstance_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBodyInstance_AssumesLocked(FBodyInstance* Body)"
  },
  {
    "label": "SwapBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapBuffers()"
  },
  {
    "label": "UpdateTime()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "UpdateTime(float UseDelta)"
  },
  {
    "label": "SubstepSimulationStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstepSimulationStart()"
  },
  {
    "label": "SubstepSimulationEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstepSimulationEnd(ENamedThreads::Type CurrentThread, const FGraphEventRef& MyCompletionGraphEvent)"
  },
  {
    "label": "SubstepInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubstepInterpolation(float Scale, float DeltaTime)"
  },
  {
    "label": "ApplyCustomPhysics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyCustomPhysics(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance, float DeltaTime)"
  },
  {
    "label": "ApplyForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyForces_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance)"
  },
  {
    "label": "ApplyTorques_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyTorques_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance)"
  },
  {
    "label": "ApplyRadialForces_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRadialForces_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance)"
  },
  {
    "label": "InterpolateKinematicActor_AssumesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolateKinematicActor_AssumesLocked(const FPhysTarget& PhysTarget, FBodyInstance* BodyInstance, float Alpha)"
  }
]