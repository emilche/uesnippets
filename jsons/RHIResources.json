[
  {
    "label": "FHazardPointerCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHazardPointerCollection"
  },
  {
    "label": "FRHIComputeCommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeCommandList"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FRHITextureReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITextureReference"
  },
  {
    "label": "FRHIShaderBindingLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderBindingLayout"
  },
  {
    "label": "FResourceBulkDataInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceBulkDataInterface"
  },
  {
    "label": "FResourceArrayInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FResourceArrayInterface"
  },
  {
    "label": "FResourceArrayUploadInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResourceArrayUploadInterface"
  },
  {
    "label": "FClearValueBinding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClearValueBinding"
  },
  {
    "label": "FRHIResourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceInfo"
  },
  {
    "label": "FGenerateMipsStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerateMipsStruct"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRHIResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIResource"
  },
  {
    "label": "FDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicRHI"
  },
  {
    "label": "FRHICommandListExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListExecutor"
  },
  {
    "label": "FAtomicFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAtomicFlags"
  },
  {
    "label": "DSVAlue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DSVAlue"
  },
  {
    "label": "FRHIResourceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceCreateInfo"
  },
  {
    "label": "FExclusiveDepthStencil",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FExclusiveDepthStencil"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FRHISamplerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHISamplerState"
  },
  {
    "label": "FRHIRasterizerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRasterizerState"
  },
  {
    "label": "FRasterizerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizerStateInitializerRHI"
  },
  {
    "label": "FRHIDepthStencilState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIDepthStencilState"
  },
  {
    "label": "FDepthStencilStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencilStateInitializerRHI"
  },
  {
    "label": "FRHIBlendState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBlendState"
  },
  {
    "label": "FBlendStateInitializerRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendStateInitializerRHI"
  },
  {
    "label": "FVertexElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVertexElement"
  },
  {
    "label": "FRHIVertexDeclaration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIVertexDeclaration"
  },
  {
    "label": "FRHIBoundShaderState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBoundShaderState"
  },
  {
    "label": "FShaderResourceTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderResourceTable"
  },
  {
    "label": "FRHIShaderData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderData"
  },
  {
    "label": "FRHIShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShader"
  },
  {
    "label": "FRHIGraphicsShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGraphicsShader"
  },
  {
    "label": "FRHIVertexShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIVertexShader"
  },
  {
    "label": "FRHIMeshShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIMeshShader"
  },
  {
    "label": "FRHIAmplificationShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIAmplificationShader"
  },
  {
    "label": "FRHIPixelShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIPixelShader"
  },
  {
    "label": "FRHIGeometryShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGeometryShader"
  },
  {
    "label": "FRHIRayTracingShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingShader"
  },
  {
    "label": "FRHIRayGenShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayGenShader"
  },
  {
    "label": "FRHIRayMissShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayMissShader"
  },
  {
    "label": "FRHIRayCallableShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayCallableShader"
  },
  {
    "label": "FRHIRayHitGroupShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayHitGroupShader"
  },
  {
    "label": "FRHIComputeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeShader"
  },
  {
    "label": "FPipelineStateStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPipelineStateStats"
  },
  {
    "label": "FRHIWorkGraphShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIWorkGraphShader"
  },
  {
    "label": "FRHIWorkGraphRootShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIWorkGraphRootShader"
  },
  {
    "label": "FRHIWorkGraphComputeNodeShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIWorkGraphComputeNodeShader"
  },
  {
    "label": "FRHIGraphicsPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGraphicsPipelineState"
  },
  {
    "label": "FValidationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationContext"
  },
  {
    "label": "FValidationRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationRHI"
  },
  {
    "label": "FRHIComputePipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputePipelineState"
  },
  {
    "label": "FRHIWorkGraphPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIWorkGraphPipelineState"
  },
  {
    "label": "FRHIRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingPipelineState"
  },
  {
    "label": "FRHIUniformBufferResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferResource"
  },
  {
    "label": "FRHIUniformBufferLayoutInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferLayoutInitializer"
  },
  {
    "label": "FRHIUniformBufferLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferLayout"
  },
  {
    "label": "FRHIUniformBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIUniformBuffer"
  },
  {
    "label": "FRHIViewableResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIViewableResource"
  },
  {
    "label": "IRHIComputeContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHIComputeContext"
  },
  {
    "label": "FRHIBufferDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBufferDesc"
  },
  {
    "label": "FRHIBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBuffer"
  },
  {
    "label": "FRHIStreamSourceSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIStreamSourceSlot"
  },
  {
    "label": "FLastRenderTimeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLastRenderTimeContainer"
  },
  {
    "label": "FRHITextureDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITextureDesc"
  },
  {
    "label": "FRHITextureCreateDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITextureCreateDesc"
  },
  {
    "label": "FRHITexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITexture"
  },
  {
    "label": "FRHITimestampCalibrationQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITimestampCalibrationQuery"
  },
  {
    "label": "FRHIGPUFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGPUFence"
  },
  {
    "label": "FGenericRHIGPUFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericRHIGPUFence"
  },
  {
    "label": "FRHIRenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRenderQuery"
  },
  {
    "label": "FRHIRenderQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRenderQueryPool"
  },
  {
    "label": "FRHIPooledRenderQuery",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIPooledRenderQuery"
  },
  {
    "label": "FRHIViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIViewport"
  },
  {
    "label": "FRHICustomPresent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICustomPresent"
  },
  {
    "label": "TRHIRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRHIRange"
  },
  {
    "label": "FRHIViewDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIViewDesc"
  },
  {
    "label": "FCommon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommon"
  },
  {
    "label": "FBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuffer"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTexture"
  },
  {
    "label": "FBufferSRV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBufferSRV"
  },
  {
    "label": "FInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInitializer"
  },
  {
    "label": "FBufferUAV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBufferUAV"
  },
  {
    "label": "FTextureSRV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureSRV"
  },
  {
    "label": "FTextureUAV",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureUAV"
  },
  {
    "label": "FShaderResourceViewInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderResourceViewInitializer"
  },
  {
    "label": "FRawBufferShaderResourceViewInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawBufferShaderResourceViewInitializer"
  },
  {
    "label": "FRHIView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIView"
  },
  {
    "label": "FRHIUnorderedAccessView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIUnorderedAccessView"
  },
  {
    "label": "FRHIShaderResourceView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderResourceView"
  },
  {
    "label": "FRHIRayTracingGeometry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingGeometry"
  },
  {
    "label": "FRayTracingGeometryInstance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingGeometryInstance"
  },
  {
    "label": "ERayTracingGeometryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERayTracingGeometryType"
  },
  {
    "label": "FRayTracingGeometrySegment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingGeometrySegment"
  },
  {
    "label": "FRayTracingGeometryInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingGeometryInitializer"
  },
  {
    "label": "ERayTracingSceneLifetime",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERayTracingSceneLifetime"
  },
  {
    "label": "FRayTracingShaderBindingTableInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingShaderBindingTableInitializer"
  },
  {
    "label": "FRayTracingSceneInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingSceneInitializer"
  },
  {
    "label": "FRayTracingAccelerationStructureSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRayTracingAccelerationStructureSize"
  },
  {
    "label": "FRHIRayTracingAccelerationStructure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingAccelerationStructure"
  },
  {
    "label": "FRHIRayTracingScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRayTracingScene"
  },
  {
    "label": "FRHIShaderBindingTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderBindingTable"
  },
  {
    "label": "FShaderBundleCreateInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderBundleCreateInfo"
  },
  {
    "label": "FRHIShaderBundle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIShaderBundle"
  },
  {
    "label": "FRHIStagingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIStagingBuffer"
  },
  {
    "label": "FGenericRHIStagingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericRHIStagingBuffer"
  },
  {
    "label": "FRHIRenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIRenderTargetView"
  },
  {
    "label": "FRHIDepthRenderTargetView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIDepthRenderTargetView"
  },
  {
    "label": "FRHISetRenderTargetsInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHISetRenderTargetsInfo"
  },
  {
    "label": "FHashableStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHashableStruct"
  },
  {
    "label": "TRHIShaderToEnum",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRHIShaderToEnum"
  },
  {
    "label": "FBoundShaderStateInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoundShaderStateInput"
  },
  {
    "label": "FGraphicsPipelineRenderTargetsInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGraphicsPipelineRenderTargetsInfo"
  },
  {
    "label": "FGraphicsPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineStateInitializer"
  },
  {
    "label": "FWorkGraphPipelineStateSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkGraphPipelineStateSignature"
  },
  {
    "label": "FWorkGraphPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkGraphPipelineStateInitializer"
  },
  {
    "label": "FRayTracingPipelineStateSignature",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingPipelineStateSignature"
  },
  {
    "label": "FRayTracingPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingPipelineStateInitializer"
  },
  {
    "label": "FRHIGraphicsPipelineStateFallBack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIGraphicsPipelineStateFallBack"
  },
  {
    "label": "FRHIComputePipelineStateFallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputePipelineStateFallback"
  },
  {
    "label": "FResolveRect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolveRect"
  },
  {
    "label": "FRHIRenderPassInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIRenderPassInfo"
  },
  {
    "label": "FColorEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColorEntry"
  },
  {
    "label": "FDepthStencilEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencilEntry"
  },
  {
    "label": "ERHITextureSRVOverrideSRGBType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ERHITextureSRVOverrideSRGBType"
  },
  {
    "label": "FRHITextureSRVCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITextureSRVCreateInfo"
  },
  {
    "label": "FRHITextureUAVCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHITextureUAVCreateInfo"
  },
  {
    "label": "FRHIBufferCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBufferCreateInfo"
  },
  {
    "label": "FRHIBufferSRVCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBufferSRVCreateInfo"
  },
  {
    "label": "FRHIBufferUAVCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIBufferUAVCreateInfo"
  },
  {
    "label": "FRHITextureViewCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHITextureViewCache"
  },
  {
    "label": "FRHIBufferViewCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIBufferViewCache"
  },
  {
    "label": "FRHIResource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Containers / Array . h \" # include \" Misc / Crc . h \" # include \" Containers / UnrealString . h \" # include \" UObject / NameTypes . h \" # include \" Math / Color . h \" # include \" Containers / StaticArray . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Templates / RefCounting . h \" # include \" PixelFormat . h \" # include \" Async / TaskGraphFwd . h \" # include \" RHIFwd . h \" # include \" RHIImmutableSamplerState . h \" # include \" RHITransition . h \" # include \" MultiGPU . h \" # include \" Math / IntPoint . h \" # include \" Math / IntRect . h \" # include \" Math / IntVector . h \" # include \" Misc / SecureHash . h \" # include<atomic> class FHazardPointerCollection ; class FRHIComputeCommandList ; class FRHICommandListImmediate ; class FRHITextureReference ; class FRHIShaderBindingLayout ; class FResourceBulkDataInterface ; class FResourceArrayInterface ; struct FResourceArrayUploadInterface ; struct FClearValueBinding ; struct FRHIResourceInfo ; struct FGenerateMipsStruct ; enum class EClearBinding ; typedef TArray<FGraphEventRef,TInlineAllocator<4>> FGraphEventArray ; class FRHIResource { public :)",
    "insertText": "FRHIResource(ERHIResourceType InResourceType)"
  },
  {
    "label": "FRHIResource()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "FRHIResource()"
  },
  {
    "label": "MarkForDelete()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "MarkForDelete()"
  },
  {
    "label": "DeleteResources()",
    "kind": "Method",
    "detail": "Function (class FDynamicRHI ; class FRHICommandListExecutor ; void)",
    "insertText": "DeleteResources(TArray<FRHIResource*> const& Resources)"
  },
  {
    "label": "GatherResourcesToDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherResourcesToDelete(TArray<FRHIResource*>& OutResources, bool bIncludeExtendedLifetimeResources)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (public : uint32)",
    "insertText": "AddRef()"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (int32 NewValue = AtomicFlags .)",
    "insertText": "AddRef(std::memory_order_acquire)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "Release()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int32 NewValue = AtomicFlags .)",
    "insertText": "Release(std::memory_order_release)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "checkSlow(NewValue >= 0)"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "GetNumRefs()",
    "kind": "Method",
    "detail": "Function (int32 CurrentValue = AtomicFlags .)",
    "insertText": "GetNumRefs(std::memory_order_relaxed)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "DisableLifetimeExtension()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableLifetimeExtension()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (bAllowExtendLifetime = false ; } ERHIResourceType)",
    "insertText": "GetType()"
  },
  {
    "label": "SetOwnerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerName(const FName& InOwnerName)"
  },
  {
    "label": "GetResourceInfo()",
    "kind": "Method",
    "detail": "Function (# if RHI_ENABLE_RESOURCE_INFO bool)",
    "insertText": "GetResourceInfo(FRHIResourceInfo& OutResourceInfo)"
  },
  {
    "label": "BeginTrackingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTrackingResource(FRHIResource* InResource)"
  },
  {
    "label": "EndTrackingResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTrackingResource(FRHIResource* InResource)"
  },
  {
    "label": "StartTrackingAllResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartTrackingAllResources()"
  },
  {
    "label": "StopTrackingAllResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopTrackingAllResources()"
  },
  {
    "label": "NumRefsMask()",
    "kind": "Method",
    "detail": "Function (# endif private : class FAtomicFlags { uint32 MarkedForDeleteBit = 1<<3 0 ; uint32 DeletingBit = 1<<3 1 ; uint32)",
    "insertText": "NumRefsMask(MarkedForDeleteBit | DeletingBit)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (std::atomic_uint Packed = { 0 } ; public : int32)",
    "insertText": "AddRef(std::memory_order MemoryOrder)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (uint32 OldPacked = Packed .)",
    "insertText": "fetch_add(1, MemoryOrder)"
  },
  {
    "label": "NumRefs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumRefs(OldPacked & NumRefsMask)"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (uint32 OldPacked = Packed .)",
    "insertText": "fetch_sub(1, MemoryOrder)"
  },
  {
    "label": "fetch_or()",
    "kind": "Method",
    "detail": "Function (uint32 OldPacked = Packed .)",
    "insertText": "fetch_or(MarkedForDeleteBit, MemoryOrder)"
  },
  {
    "label": "UnmarkForDelete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UnmarkForDelete(std::memory_order MemoryOrder)"
  },
  {
    "label": "fetch_xor()",
    "kind": "Method",
    "detail": "Function (uint32 OldPacked = Packed .)",
    "insertText": "fetch_xor(MarkedForDeleteBit, MemoryOrder)"
  },
  {
    "label": "OldMarkedForDelete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OldMarkedForDelete(OldPacked & MarkedForDeleteBit)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint32 LocalPacked = Packed .)",
    "insertText": "load(std::memory_order_acquire)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 NumRefs = LocalPacked& NumRefsMask ;)",
    "insertText": "if(NumRefs == 0)"
  },
  {
    "label": "fetch_or()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK Packed .)",
    "insertText": "fetch_or(DeletingBit, std::memory_order_acquire)"
  },
  {
    "label": "UnmarkForDelete()",
    "kind": "Method",
    "detail": "Function (# endif return true ; } else {)",
    "insertText": "UnmarkForDelete(std::memory_order_release)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (uint32 LocalPacked = Packed .)",
    "insertText": "load(MemoryOrder)"
  },
  {
    "label": "IsMarkedForDelete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMarkedForDelete(std::memory_order MemoryOrder)"
  },
  {
    "label": "GetNumRefs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumRefs(std::memory_order MemoryOrder)"
  },
  {
    "label": "FClearValueBinding()",
    "kind": "Method",
    "detail": "Function (} } ; FAtomicFlags AtomicFlags ; const ERHIResourceType ResourceType ; uint8 bCommitted : 1 ; uint8 bAllowExtendLifetime : 1 ; # if RHI_ENABLE_RESOURCE_INFO uint8 bBeingTracked : 1 ; FName OwnerName ; # endif # if DO_CHECK thread_local FRHIResource const* CurrentlyDeleting ; # endif FRHICommandListImmediate ; } ; enum class EClearBinding { ENoneBound,EColorBound,EDepthStencilBound,} ; struct FClearValueBinding { struct DSVAlue { float Depth ; uint32 Stencil ; } ;)",
    "insertText": "FClearValueBinding() : ColorBinding(EClearBinding::EColorBound)"
  },
  {
    "label": "FClearValueBinding()",
    "kind": "Method",
    "detail": "Function (Value . Color [ 0 ] = 0 . 0 f ; Value . Color [ 1 ] = 0 . 0 f ; Value . Color [ 2 ] = 0 . 0 f ; Value . Color [ 3 ] = 0 . 0 f ; })",
    "insertText": "FClearValueBinding(EClearBinding NoBinding) : ColorBinding(NoBinding)"
  },
  {
    "label": "FClearValueBinding()",
    "kind": "Method",
    "detail": "Function (Value . Color [ 0 ] = 0 . 0 f ; Value . Color [ 1 ] = 0 . 0 f ; Value . Color [ 2 ] = 0 . 0 f ; Value . Color [ 3 ] = 0 . 0 f ; Value . DSValue . Depth = 0 . 0 f ; Value . DSValue . Stencil = 0 ; })",
    "insertText": "FClearValueBinding(const FLinearColor& InClearColor) : ColorBinding(EClearBinding::EColorBound)"
  },
  {
    "label": "FClearValueBinding()",
    "kind": "Method",
    "detail": "Function (Value . Color [ 0 ] = InClearColor . R ; Value . Color [ 1 ] = InClearColor . G ; Value . Color [ 2 ] = InClearColor . B ; Value . Color [ 3 ] = InClearColor . A ; })",
    "insertText": "FClearValueBinding(float DepthClearValue, uint32 StencilClearValue = 0) : ColorBinding(EClearBinding::EDepthStencilBound)"
  },
  {
    "label": "GetClearColor()",
    "kind": "Method",
    "detail": "Function (Value . DSValue . Depth = DepthClearValue ; Value . DSValue . Stencil = StencilClearValue ; } FLinearColor)",
    "insertText": "GetClearColor()"
  },
  {
    "label": "GetDepthStencil()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDepthStencil(float& OutDepth, uint32& OutStencil)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (OutDepth = Value . DSValue . Depth ; OutStencil = Value . DSValue . Stencil ; } bool)",
    "insertText": "operator(const FClearValueBinding& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Binding.ColorBinding)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Binding.Value.Color[0]))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Binding.Value.Color[1]))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Binding.Value.Color[2]))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Binding.Value.Color[3]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Binding.ColorBinding == EClearBinding::EDepthStencilBound)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Binding.Value.DSValue.Depth ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Binding.Value.DSValue.Stencil))"
  },
  {
    "label": "FRHIResourceCreateInfo()",
    "kind": "Method",
    "detail": "Function (} return Hash ; } EClearBinding ColorBinding ; union ClearValueType { float Color [ 4 ] ; DSVAlue DSValue ; } Value ; const FClearValueBinding None ; const FClearValueBinding Black ; const FClearValueBinding BlackMaxAlpha ; const FClearValueBinding White ; const FClearValueBinding Transparent ; const FClearValueBinding DepthOne ; const FClearValueBinding DepthZero ; const FClearValueBinding DepthNear ; const FClearValueBinding DepthFar ; const FClearValueBinding Green ; const FClearValueBinding DefaultNormal8Bit ; } ; struct FRHIResourceCreateInfo {)",
    "insertText": "FRHIResourceCreateInfo(const TCHAR* InDebugName) : DebugName(InDebugName)"
  },
  {
    "label": "FRHIResourceCreateInfo()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS BulkData = InBulkData ; PRAGMA_ENABLE_DEPRECATION_WARNINGS })",
    "insertText": "FRHIResourceCreateInfo(const TCHAR* InDebugName, FResourceArrayUploadInterface* InResourceArray) : FRHIResourceCreateInfo(InDebugName)"
  },
  {
    "label": "GetTraceClassName()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS ExtData = InExtData ; PRAGMA_ENABLE_DEPRECATION_WARNINGS } FName)",
    "insertText": "GetTraceClassName()"
  },
  {
    "label": "FRHIBufferName()",
    "kind": "Method",
    "detail": "Function (const FLazyName)",
    "insertText": "FRHIBufferName(TEXT(\"FRHIBuffer\"))"
  },
  {
    "label": "All()",
    "kind": "Method",
    "detail": "Function (FRHIGPUMask GPUMask =)",
    "insertText": "All()"
  },
  {
    "label": "FExclusiveDepthStencil()",
    "kind": "Method",
    "detail": "Function (const TCHAR* DebugName ; FName ClassName = NAME_None ; FName OwnerName = NAME_None ; } ; class FExclusiveDepthStencil { public : enum Type { DepthNop = 0 x00,DepthRead = 0 x01,DepthWrite = 0 x02,DepthMask = 0 x0f,StencilNop = 0 x00,StencilRead = 0 x10,StencilWrite = 0 x20,StencilMask = 0 xf0,DepthNop_StencilNop = DepthNop + StencilNop,DepthRead_StencilNop = DepthRead + StencilNop,DepthWrite_StencilNop = DepthWrite + StencilNop,DepthNop_StencilRead = DepthNop + StencilRead,DepthRead_StencilRead = DepthRead + StencilRead,DepthWrite_StencilRead = DepthWrite + StencilRead,DepthNop_StencilWrite = DepthNop + StencilWrite,DepthRead_StencilWrite = DepthRead + StencilWrite,DepthWrite_StencilWrite = DepthWrite + StencilWrite,} ; private : Type Value ; public :)",
    "insertText": "FExclusiveDepthStencil(Type InValue = DepthNop_StencilNop) : Value(InValue)"
  },
  {
    "label": "IsUsingDepthStencil()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingDepthStencil()"
  },
  {
    "label": "IsUsingStencil()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUsingStencil()"
  },
  {
    "label": "IsDepthWrite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDepthWrite()"
  },
  {
    "label": "IsDepthRead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDepthRead()"
  },
  {
    "label": "IsStencilWrite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStencilWrite()"
  },
  {
    "label": "IsStencilRead()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStencilRead()"
  },
  {
    "label": "IsAnyWrite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAnyWrite()"
  },
  {
    "label": "SetDepthWrite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDepthWrite()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Type)(ExtractStencil() | DepthWrite)"
  },
  {
    "label": "SetStencilWrite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStencilWrite()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Type)(ExtractDepth() | StencilWrite)"
  },
  {
    "label": "SetDepthStencilWrite()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDepthStencilWrite(bool bDepth, bool bStencil)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value = DepthNop_StencilNop ;)",
    "insertText": "if(bDepth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bStencil)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FExclusiveDepthStencil& rhs)"
  },
  {
    "label": "ExtractDepth()",
    "kind": "Method",
    "detail": "Function (Type Depth =)",
    "insertText": "ExtractDepth()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DepthAccess = ERHIAccess::None ; ERHIAccess DSVReadOnlyMask = ERHIAccess::DSVRead ; ERHIAccess DSVReadWriteMask = ERHIAccess::DSVRead | ERHIAccess::DSVWrite ;)",
    "insertText": "if(IsUsingDepth())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} StencilAccess = ERHIAccess::None ;)",
    "insertText": "if(IsUsingStencil())"
  },
  {
    "label": "EnumerateSubresources()",
    "kind": "Method",
    "detail": "Function (} } template<TFunction> void)",
    "insertText": "EnumerateSubresources(TFunction Function)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(DepthAccess, FRHITransitionInfo::kAllSubresources)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(DepthAccess != ERHIAccess::None)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(DepthAccess, FRHITransitionInfo::kDepthPlaneSlice)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(StencilAccess != ERHIAccess::None)"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Function(StencilAccess, FRHITransitionInfo::kStencilPlaneSlice)"
  },
  {
    "label": "GetReadableTransition()",
    "kind": "Method",
    "detail": "Function (} } } FExclusiveDepthStencil)",
    "insertText": "GetReadableTransition()"
  },
  {
    "label": "GetWritableTransition()",
    "kind": "Method",
    "detail": "Function (} FExclusiveDepthStencil)",
    "insertText": "GetWritableTransition()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "ExtractStencil()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "ExtractStencil()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FExclusiveDepthStencil& Ds)"
  },
  {
    "label": "FRHISamplerState()",
    "kind": "Method",
    "detail": "Function (} ; class FRHISamplerState : public FRHIResource { public :)",
    "insertText": "FRHISamplerState() : FRHIResource(RRT_SamplerState)"
  },
  {
    "label": "IsImmutable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsImmutable()"
  },
  {
    "label": "FRHIRasterizerState()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIRasterizerState : public FRHIResource { public :)",
    "insertText": "FRHIRasterizerState() : FRHIResource(RRT_RasterizerState)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInitializer(struct FRasterizerStateInitializerRHI& Init)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (} # if ENABLE_RHI_VALIDATION FExclusiveDepthStencil ActualDSMode ; # endif bool)",
    "insertText": "GetInitializer(struct FDepthStencilStateInitializerRHI& Init)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInitializer(class FBlendStateInitializerRHI& Init)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RHIStateInitializer LHSStateInitializerRHI ; RHIStateInitializer RHSStateInitializerRHI ;)",
    "insertText": "if(LHSState)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (LHSState ->)",
    "insertText": "GetInitializer(LHSStateInitializerRHI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RHSState)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (RHSState ->)",
    "insertText": "GetInitializer(RHSStateInitializerRHI)"
  },
  {
    "label": "FRHIVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} return LHSStateInitializerRHI = = RHSStateInitializerRHI ; } typedef TArray<struct FVertexElement,TFixedAllocator<MaxVertexElementCount>> FVertexDeclarationElementList ; class FRHIVertexDeclaration : public FRHIResource { public :)",
    "insertText": "FRHIVertexDeclaration() : FRHIResource(RRT_VertexDeclaration)"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInitializer(FVertexDeclarationElementList& Init)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } ; #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) #define RHI_INCLUDE_SHADER_DEBUG_DATA 1 #else #define RHI_INCLUDE_SHADER_DEBUG_DATA 0 #endif #if RHI_INCLUDE_SHADER_DEBUG_DATA #define RHI_IF_SHADER_DEBUG_DATA(...) __VA_ARGS__ #else #define RHI_IF_SHADER_DEBUG_DATA(...)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (uint32 ResourceTableBits = 0 ; TArray<uint32> ShaderResourceViewMap ; TArray<uint32> SamplerMap ; TArray<uint32> UnorderedAccessViewMap ; TArray<uint32> ResourceTableLayoutHashes ; TArray<uint32> TextureMap ; TArray<uint32> ResourceCollectionMap ; bool)",
    "insertText": "operator(const FShaderResourceTable& A, const FShaderResourceTable& B)"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (bool bEqual = true ;)",
    "insertText": "bEqual(A.ResourceTableBits == B.ResourceTableBits)"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(A.ShaderResourceViewMap .Num() == B.ShaderResourceViewMap .Num())"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(A.SamplerMap .Num() == B.SamplerMap .Num())"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(A.UnorderedAccessViewMap .Num() == B.UnorderedAccessViewMap .Num())"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(A.ResourceTableLayoutHashes.Num() == B.ResourceTableLayoutHashes.Num())"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(A.TextureMap .Num() == B.TextureMap .Num())"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(A.ResourceCollectionMap .Num() == B.ResourceCollectionMap .Num())"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(FMemory::Memcmp(A.SamplerMap .GetData(), B.SamplerMap .GetData(), A.SamplerMap .GetTypeSize() * A.SamplerMap .Num()) == 0)"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(FMemory::Memcmp(A.UnorderedAccessViewMap .GetData(), B.UnorderedAccessViewMap .GetData(), A.UnorderedAccessViewMap .GetTypeSize() * A.UnorderedAccessViewMap .Num()) == 0)"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(FMemory::Memcmp(A.ResourceTableLayoutHashes.GetData(), B.ResourceTableLayoutHashes.GetData(), A.ResourceTableLayoutHashes.GetTypeSize() * A.ResourceTableLayoutHashes.Num()) == 0)"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(FMemory::Memcmp(A.TextureMap .GetData(), B.TextureMap .GetData(), A.TextureMap .GetTypeSize() * A.TextureMap .Num()) == 0)"
  },
  {
    "label": "bEqual()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bEqual(FMemory::Memcmp(A.ResourceCollectionMap .GetData(), B.ResourceCollectionMap .GetData(), A.ResourceCollectionMap .GetTypeSize() * A.ResourceCollectionMap .Num()) == 0)"
  },
  {
    "label": "InitStaticUniformBufferSlots()",
    "kind": "Method",
    "detail": "Function (Ar<<SRT . ResourceTableBits ; Ar<<SRT . ShaderResourceViewMap ; Ar<<SRT . SamplerMap ; Ar<<SRT . UnorderedAccessViewMap ; Ar<<SRT . ResourceTableLayoutHashes ; Ar<<SRT . TextureMap ; Ar<<SRT . ResourceCollectionMap ; return Ar ; } } ; namespace UE { namespace RHICore { void)",
    "insertText": "InitStaticUniformBufferSlots(FRHIShaderData* ShaderData)"
  },
  {
    "label": "GetShaderResourceTable()",
    "kind": "Method",
    "detail": "Function (} } class FRHIShaderData { public : const FShaderResourceTable&)",
    "insertText": "GetShaderResourceTable()"
  },
  {
    "label": "SetHash()",
    "kind": "Method",
    "detail": "Function (} ; class FRHIShader : public FRHIResource,public FRHIShaderData { public : void)",
    "insertText": "SetHash(const FSHAHash& InHash)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (Hash = InHash ; } const FSHAHash&)",
    "insertText": "GetHash()"
  },
  {
    "label": "GetUniformBufferName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetUniformBufferName(uint32 Index)"
  },
  {
    "label": "GetShaderName()",
    "kind": "Method",
    "detail": "Function (} TArray<FShaderCodeValidationStride> DebugStrideValidationData ; TArray<FShaderCodeValidationType> DebugSRVTypeValidationData ; TArray<FShaderCodeValidationType> DebugUAVTypeValidationData ; TArray<FShaderCodeValidationUBSize> DebugUBSizeValidationData ; # else const TCHAR*)",
    "insertText": "GetShaderName()"
  },
  {
    "label": "FRHIShader()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "FRHIShader()"
  },
  {
    "label": "FRHIShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIShader(ERHIResourceType InResourceType, EShaderFrequency InFrequency) : FRHIResource(InResourceType) , Frequency(InFrequency) , bNoDerivativeOps(false) , bHasShaderBundleUsage(false)"
  },
  {
    "label": "SetInUseByPSOCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInUseByPSOCompilation(bool bInUse)"
  },
  {
    "label": "GetFrequency()",
    "kind": "Method",
    "detail": "Function (# endif EShaderFrequency)",
    "insertText": "GetFrequency()"
  },
  {
    "label": "HasNoDerivativeOps()",
    "kind": "Method",
    "detail": "Function (bNoDerivativeOps = bValue ; } bool)",
    "insertText": "HasNoDerivativeOps()"
  },
  {
    "label": "HasShaderBundleUsage()",
    "kind": "Method",
    "detail": "Function (bHasShaderBundleUsage = bValue ; } bool)",
    "insertText": "HasShaderBundleUsage()"
  },
  {
    "label": "FRHIVertexShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIVertexShader : public FRHIGraphicsShader { public :)",
    "insertText": "FRHIVertexShader() : FRHIGraphicsShader(RRT_VertexShader, SF_Vertex)"
  },
  {
    "label": "FRHIMeshShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIMeshShader : public FRHIGraphicsShader { public :)",
    "insertText": "FRHIMeshShader() : FRHIGraphicsShader(RRT_MeshShader, SF_Mesh)"
  },
  {
    "label": "FRHIAmplificationShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIAmplificationShader : public FRHIGraphicsShader { public :)",
    "insertText": "FRHIAmplificationShader() : FRHIGraphicsShader(RRT_AmplificationShader, SF_Amplification)"
  },
  {
    "label": "FRHIPixelShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIPixelShader : public FRHIGraphicsShader { public :)",
    "insertText": "FRHIPixelShader() : FRHIGraphicsShader(RRT_PixelShader, SF_Pixel)"
  },
  {
    "label": "FRHIGeometryShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIGeometryShader : public FRHIGraphicsShader { public :)",
    "insertText": "FRHIGeometryShader() : FRHIGraphicsShader(RRT_GeometryShader, SF_Geometry)"
  },
  {
    "label": "FRHIRayTracingShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIRayTracingShader : public FRHIShader { public :)",
    "insertText": "FRHIRayTracingShader(EShaderFrequency InFrequency) : FRHIShader(RRT_RayTracingShader, InFrequency)"
  },
  {
    "label": "FRHIRayGenShader()",
    "kind": "Method",
    "detail": "Function (} uint32 RayTracingPayloadType = 0 ; uint32 RayTracingPayloadSize = 0 ; uint32 LocalBindingDataSize = 0 ; } ; class FRHIRayGenShader : public FRHIRayTracingShader { public :)",
    "insertText": "FRHIRayGenShader() : FRHIRayTracingShader(SF_RayGen)"
  },
  {
    "label": "FRHIRayMissShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIRayMissShader : public FRHIRayTracingShader { public :)",
    "insertText": "FRHIRayMissShader() : FRHIRayTracingShader(SF_RayMiss)"
  },
  {
    "label": "FRHIRayCallableShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIRayCallableShader : public FRHIRayTracingShader { public :)",
    "insertText": "FRHIRayCallableShader() : FRHIRayTracingShader(SF_RayCallable)"
  },
  {
    "label": "FRHIRayHitGroupShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIRayHitGroupShader : public FRHIRayTracingShader { public :)",
    "insertText": "FRHIRayHitGroupShader() : FRHIRayTracingShader(SF_RayHitGroup)"
  },
  {
    "label": "FRHIComputeShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIComputeShader : public FRHIShader { public :)",
    "insertText": "FRHIComputeShader() : FRHIShader(RRT_ComputeShader, SF_Compute) , Stats(nullptr)"
  },
  {
    "label": "SetStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetStats(struct FPipelineStateStats* Ptr)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (Stats = Ptr ; } void)",
    "insertText": "UpdateStats()"
  },
  {
    "label": "FRHIWorkGraphShader()",
    "kind": "Method",
    "detail": "Function (private : struct FPipelineStateStats* Stats ; } ; class FRHIWorkGraphShader : public FRHIShader { public :)",
    "insertText": "FRHIWorkGraphShader(EShaderFrequency InFrequency) : FRHIShader(RRT_WorkGraphShader, InFrequency)"
  },
  {
    "label": "FRHIWorkGraphRootShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIWorkGraphRootShader : public FRHIWorkGraphShader { public :)",
    "insertText": "FRHIWorkGraphRootShader() : FRHIWorkGraphShader(SF_WorkGraphRoot)"
  },
  {
    "label": "FRHIWorkGraphComputeNodeShader()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIWorkGraphComputeNodeShader : public FRHIWorkGraphShader { public :)",
    "insertText": "FRHIWorkGraphComputeNodeShader() : FRHIWorkGraphShader(SF_WorkGraphComputeNode)"
  },
  {
    "label": "FRHIGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIGraphicsPipelineState : public FRHIResource { public :)",
    "insertText": "FRHIGraphicsPipelineState() : FRHIResource(RRT_GraphicsPipelineState)"
  },
  {
    "label": "SetSortKey()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSortKey(uint64 InSortKey)"
  },
  {
    "label": "GetSortKey()",
    "kind": "Method",
    "detail": "Function (SortKey = InSortKey ; } uint64)",
    "insertText": "GetSortKey()"
  },
  {
    "label": "FRHIComputePipelineState()",
    "kind": "Method",
    "detail": "Function (private : uint64 SortKey = 0 ; # if ENABLE_RHI_VALIDATION class FValidationContext ; class FValidationRHI ; FExclusiveDepthStencil DSMode ; # endif } ; class FRHIComputePipelineState : public FRHIResource { public :)",
    "insertText": "FRHIComputePipelineState(FRHIComputeShader* InComputeShader) : FRHIResource(RRT_ComputePipelineState) , ComputeShader(InComputeShader)"
  },
  {
    "label": "SetValid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetValid(bool InIsValid)"
  },
  {
    "label": "FRHIRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIRayTracingPipelineState : public FRHIResource { public :)",
    "insertText": "FRHIRayTracingPipelineState() : FRHIResource(RRT_RayTracingPipelineState)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; # define VALIDATE_UNIFORM_BUFFER_LAYOUT_LIFETIME 0 # define VALIDATE_UNIFORM_BUFFER_LIFETIME 0 struct FRHIUniformBufferResource { uint16 MemberOffset ; EUniformBufferBaseType MemberType ; bool)",
    "insertText": "operator(const FRHIUniformBufferResource& A, const FRHIUniformBufferResource& B)"
  },
  {
    "label": "FRHIUniformBufferLayout()",
    "kind": "Method",
    "detail": "Function (struct FRHIUniformBufferLayoutInitializer ; struct FRHIUniformBufferLayout : public FRHIResource {)",
    "insertText": "FRHIUniformBufferLayout()"
  },
  {
    "label": "FRHIUniformBufferLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIUniformBufferLayout(const FRHIUniformBufferLayoutInitializer& Initializer)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "HasStaticSlot()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasStaticSlot()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FString Name ; const TArray<FRHIUniformBufferResource> Resources ; const TArray<FRHIUniformBufferResource> GraphResources ; const TArray<FRHIUniformBufferResource> GraphTextures ; const TArray<FRHIUniformBufferResource> GraphBuffers ; const TArray<FRHIUniformBufferResource> GraphUniformBuffers ; const TArray<FRHIUniformBufferResource> UniformBuffers ; const uint32 Hash ; const uint32 ConstantBufferSize ; const uint16 RenderTargetsOffset ; const FUniformBufferStaticSlot StaticSlot ; const EUniformBufferBindingFlags BindingFlags ; const ERHIUniformBufferFlags Flags ; bool)",
    "insertText": "operator(const FRHIUniformBufferLayout& A, const FRHIUniformBufferLayout& B)"
  },
  {
    "label": "FRHIUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIUniformBuffer(const FRHIUniformBufferLayout* InLayout) : FRHIResource(RRT_UniformBuffer) , Layout(InLayout) , LayoutConstantBufferSize(InLayout->ConstantBufferSize)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if VALIDATE_UNIFORM_BUFFER_LIFETIME)",
    "insertText": "check(LocalNumMeshCommandReferencesForDebugging == 0 || IsEngineExitRequested())"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (# endif } return NewRefCount ; } uint32)",
    "insertText": "GetSize()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (TrackedAccess = Access ; } FName)",
    "insertText": "GetName()"
  },
  {
    "label": "FRHIViewableResource()",
    "kind": "Method",
    "detail": "Function (# endif protected :)",
    "insertText": "FRHIViewableResource(ERHIResourceType InResourceType, ERHIAccess InAccess) : FRHIResource(InResourceType) , TrackedAccess(InAccess)"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TakeOwnership(FRHIViewableResource& Other)"
  },
  {
    "label": "ReleaseOwnership()",
    "kind": "Method",
    "detail": "Function (TrackedAccess = Other . TrackedAccess ; } void)",
    "insertText": "ReleaseOwnership()"
  },
  {
    "label": "FRHIBufferDesc()",
    "kind": "Method",
    "detail": "Function (TrackedAccess = ERHIAccess::Unknown ; } FName Name ; private : ERHIAccess TrackedAccess ; class FRHIComputeCommandList ; class IRHIComputeContext ; } ; struct FRHIBufferDesc { uint32 Size { } ; uint32 Stride { } ; EBufferUsageFlags Usage { } ;)",
    "insertText": "FRHIBufferDesc()"
  },
  {
    "label": "FRHIBufferDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIBufferDesc(uint32 InSize, uint32 InStride, EBufferUsageFlags InUsage) : Size (InSize) , Stride(InStride) , Usage (InUsage)"
  },
  {
    "label": "Null()",
    "kind": "Method",
    "detail": "Function (} FRHIBufferDesc)",
    "insertText": "Null()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (} FRHIBufferDesc const&)",
    "insertText": "GetDesc()"
  },
  {
    "label": "GetParentGPUIndex()",
    "kind": "Method",
    "detail": "Function (Name = InName ; } uint32)",
    "insertText": "GetParentGPUIndex()"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (Desc . Usage = InUsage ; } void)",
    "insertText": "TakeOwnership(FRHIBuffer& Other)"
  },
  {
    "label": "TakeOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeOwnership(Other)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} private : FRHIBufferDesc Desc ; } ; class FRHIStreamSourceSlot : public FRHIResource { FRHICommandListBase ; FRHICommandList ; public : TRefCountPtr<FRHIStreamSourceSlot>)",
    "insertText": "Create(FRHIBuffer* InBuffer)"
  },
  {
    "label": "FRHIStreamSourceSlot()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FRHIStreamSourceSlot(FRHIBuffer* InBuffer) : FRHIResource(RRT_StreamSourceSlot) , Buffer(InBuffer)"
  },
  {
    "label": "FLastRenderTimeContainer()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr<FRHIBuffer> Buffer ; } ; class FLastRenderTimeContainer { public :)",
    "insertText": "FLastRenderTimeContainer() : LastRenderTime(-FLT_MAX)"
  },
  {
    "label": "GetLastRenderTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetLastRenderTime()"
  },
  {
    "label": "FRHITextureDesc()",
    "kind": "Method",
    "detail": "Function (LastRenderTime = InLastRenderTime ; } } private : double LastRenderTime ; } ; struct FRHITextureDesc {)",
    "insertText": "FRHITextureDesc()"
  },
  {
    "label": "FRHITextureDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITextureDesc(const FRHITextureDesc& Other)"
  },
  {
    "label": "FRHITextureDesc()",
    "kind": "Method",
    "detail": "Function (* this = Other ; })",
    "insertText": "FRHITextureDesc(ETextureDimension InDimension) : Dimension(InDimension)"
  },
  {
    "label": "FRHITextureDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITextureDesc(ETextureDimension InDimension , ETextureCreateFlags InFlags , EPixelFormat InFormat , FClearValueBinding InClearValue , FIntPoint InExtent , uint16 InDepth , uint16 InArraySize , uint8 InNumMips , uint8 InNumSamples , uint32 InExtData ) : Flags (InFlags ) , ClearValue(InClearValue) , ExtData (InExtData ) , Extent (InExtent ) , Depth (InDepth ) , ArraySize (InArraySize ) , NumMips (InNumMips ) , NumSamples(InNumSamples) , Dimension (InDimension ) , Format (InFormat)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRHITextureDesc& Desc)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(Desc.Dimension)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.Flags ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.Format ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.UAVFormat ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.Extent ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.Depth ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.ArraySize ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.NumMips ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.NumSamples))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.FastVRAMPercentage))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.ClearValue))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.ExtData ))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Desc.GPUMask.GetNative()))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FRHITextureDesc&)",
    "insertText": "operator(const FRHITextureDesc& Other)"
  },
  {
    "label": "IsTexture2D()",
    "kind": "Method",
    "detail": "Function (Dimension = Other . Dimension ; Flags = Other . Flags ; Format = Other . Format ; UAVFormat = Other . UAVFormat ; Extent = Other . Extent ; Depth = Other . Depth ; ArraySize = Other . ArraySize ; NumMips = Other . NumMips ; NumSamples = Other . NumSamples ; ClearValue = Other . ClearValue ; ExtData = Other . ExtData ; FastVRAMPercentage = Other . FastVRAMPercentage ; GPUMask = Other . GPUMask ; return* this ; } bool)",
    "insertText": "IsTexture2D()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (NumSamples = 1 ; Flags | = TexCreate_RenderTargetable ;)",
    "insertText": "Flags(TexCreate_UAV | TexCreate_ResolveTargetable | TexCreate_DepthStencilResolveTarget | TexCreate_Memoryless)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (uint32 ExtData = 0 ; FIntPoint Extent =)",
    "insertText": "FIntPoint(1, 1)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (uint16 Depth = 1 ; uint16 ArraySize = 1 ; uint8 NumMips = 1 ; uint8 NumSamples = 1 ; ETextureDimension Dimension = ETextureDimension::Texture2D ; EPixelFormat Format = PF_Unknown ; EPixelFormat UAVFormat = PF_Unknown ; uint8 FastVRAMPercentage = 0 xFF ; bool)",
    "insertText": "CheckValidity(const FRHITextureDesc& Desc, const TCHAR* Name)"
  },
  {
    "label": "CalcMemorySizeEstimate()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "CalcMemorySizeEstimate(uint32 FirstMipIndex, uint32 LastMipIndex)"
  },
  {
    "label": "CalcMemorySizeEstimate()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "CalcMemorySizeEstimate(uint32 FirstMipIndex = 0)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "Validate(const FRHITextureDesc& Desc, const TCHAR* Name, bool bFatal)"
  },
  {
    "label": "RHIGetDefaultResourceState()",
    "kind": "Method",
    "detail": "Function (} ; using FRHITextureCreateInfo = FRHITextureDesc ; ERHIAccess)",
    "insertText": "RHIGetDefaultResourceState(ETextureCreateFlags InUsage, bool bInHasInitialData)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (struct FRHITextureCreateDesc : public FRHITextureDesc { FRHITextureCreateDesc)",
    "insertText": "Create(const TCHAR* InDebugName, ETextureDimension InDimension)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create2D(const TCHAR* InDebugName)"
  },
  {
    "label": "Create2DArray()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create2DArray(const TCHAR* InDebugName)"
  },
  {
    "label": "Create3D()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create3D(const TCHAR* InDebugName)"
  },
  {
    "label": "CreateCube()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "CreateCube(const TCHAR* InDebugName)"
  },
  {
    "label": "CreateCubeArray()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "CreateCubeArray(const TCHAR* InDebugName)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create2D(const TCHAR* DebugName, FIntPoint Size, EPixelFormat Format)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create2D(const TCHAR* DebugName, int32 SizeX, int32 SizeY, EPixelFormat Format)"
  },
  {
    "label": "Create2DArray()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create2DArray(const TCHAR* DebugName, FIntPoint Size, uint16 ArraySize, EPixelFormat Format)"
  },
  {
    "label": "Create2DArray()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create2DArray(const TCHAR* DebugName, int32 SizeX, int32 SizeY, int32 ArraySize, EPixelFormat Format)"
  },
  {
    "label": "Create3D()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create3D(const TCHAR* DebugName, FIntVector Size, EPixelFormat Format)"
  },
  {
    "label": "Create3D()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "Create3D(const TCHAR* DebugName, int32 SizeX, int32 SizeY, int32 SizeZ, EPixelFormat Format)"
  },
  {
    "label": "CreateCube()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "CreateCube(const TCHAR* DebugName, uint32 Size, EPixelFormat Format)"
  },
  {
    "label": "CreateCubeArray()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc)",
    "insertText": "CreateCubeArray(const TCHAR* DebugName, uint32 Size, uint16 ArraySize, EPixelFormat Format)"
  },
  {
    "label": "FRHITextureCreateDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITextureCreateDesc()"
  },
  {
    "label": "FRHITextureCreateDesc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITextureCreateDesc(const TCHAR* InDebugName, ETextureDimension InDimension) : FRHITextureDesc(InDimension) , DebugName(InDebugName)"
  },
  {
    "label": "FRHITextureCreateDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITextureCreateDesc(FRHITextureDesc const& InDesc , ERHIAccess InInitialState , TCHAR const* InDebugName , FResourceBulkDataInterface* InBulkData = nullptr ) : FRHITextureDesc(InDesc) , InitialState (InInitialState) , DebugName (InDebugName) , BulkData (InBulkData)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckValidity()"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckValidity(*this, DebugName)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (} FRHITextureCreateDesc&)",
    "insertText": "SetFlags(ETextureCreateFlags InFlags)"
  },
  {
    "label": "AddFlags()",
    "kind": "Method",
    "detail": "Function (Flags = InFlags ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "AddFlags(ETextureCreateFlags InFlags)"
  },
  {
    "label": "SetClearValue()",
    "kind": "Method",
    "detail": "Function (Flags | = InFlags ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetClearValue(FClearValueBinding InClearValue)"
  },
  {
    "label": "SetExtData()",
    "kind": "Method",
    "detail": "Function (ClearValue = InClearValue ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetExtData(uint32 InExtData)"
  },
  {
    "label": "SetExtent()",
    "kind": "Method",
    "detail": "Function (ExtData = InExtData ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetExtent(const FIntPoint& InExtent)"
  },
  {
    "label": "SetExtent()",
    "kind": "Method",
    "detail": "Function (Extent = InExtent ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetExtent(int32 InExtentX, int32 InExtentY)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (Extent =)",
    "insertText": "FIntPoint(InExtentX, InExtentY)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (Extent =)",
    "insertText": "FIntPoint(InExtent)"
  },
  {
    "label": "SetArraySize()",
    "kind": "Method",
    "detail": "Function (Depth = InDepth ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetArraySize(uint16 InArraySize)"
  },
  {
    "label": "SetNumMips()",
    "kind": "Method",
    "detail": "Function (ArraySize = InArraySize ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetNumMips(uint8 InNumMips)"
  },
  {
    "label": "SetNumSamples()",
    "kind": "Method",
    "detail": "Function (NumMips = InNumMips ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetNumSamples(uint8 InNumSamples)"
  },
  {
    "label": "SetDimension()",
    "kind": "Method",
    "detail": "Function (NumSamples = InNumSamples ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetDimension(ETextureDimension InDimension)"
  },
  {
    "label": "SetFormat()",
    "kind": "Method",
    "detail": "Function (Dimension = InDimension ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetFormat(EPixelFormat InFormat)"
  },
  {
    "label": "SetInitialState()",
    "kind": "Method",
    "detail": "Function (UAVFormat = InUAVFormat ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetInitialState(ERHIAccess InInitialState)"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (InitialState = InInitialState ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetDebugName(const TCHAR* InDebugName)"
  },
  {
    "label": "SetGPUMask()",
    "kind": "Method",
    "detail": "Function (DebugName = InDebugName ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetGPUMask(FRHIGPUMask InGPUMask)"
  },
  {
    "label": "SetBulkData()",
    "kind": "Method",
    "detail": "Function (GPUMask = InGPUMask ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "SetBulkData(FResourceBulkDataInterface* InBulkData)"
  },
  {
    "label": "DetermineInititialState()",
    "kind": "Method",
    "detail": "Function (BulkData = InBulkData ; return* this ; } FRHITextureCreateDesc&)",
    "insertText": "DetermineInititialState()"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (FastVRAMPercentage =)",
    "insertText": "uint8(FMath::Clamp(In, 0.f, 1.0f) * 0xFF)"
  },
  {
    "label": "FRHITextureName()",
    "kind": "Method",
    "detail": "Function (const FLazyName)",
    "insertText": "FRHITextureName(TEXT(\"FRHITexture\"))"
  },
  {
    "label": "FRHITexture()",
    "kind": "Method",
    "detail": "Function (} ERHIAccess InitialState = ERHIAccess::Unknown ; const TCHAR* DebugName = nullptr ; FResourceBulkDataInterface* BulkData = nullptr ; FName ClassName = NAME_None ; FName OwnerName = NAME_None ; } ; class FRHITexture : public FRHIViewableResource # if ENABLE_RHI_VALIDATION,public RHIValidation::FTextureResource # endif { protected :)",
    "insertText": "FRHITexture(const FRHITextureCreateDesc& InDesc)"
  },
  {
    "label": "GetNativeResource()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeResource()"
  },
  {
    "label": "GetSizeXYZ()",
    "kind": "Method",
    "detail": "Function (OutData = nullptr ; OutSize = 0 ; } FIntVector)",
    "insertText": "GetSizeXYZ()"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FIntVector(0, 0, 0)"
  },
  {
    "label": "GetMipDimensions()",
    "kind": "Method",
    "detail": "Function (} FIntVector)",
    "insertText": "GetMipDimensions(uint8 MipIndex)"
  },
  {
    "label": "IsMultisampled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMultisampled()"
  },
  {
    "label": "HasClearValue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasClearValue()"
  },
  {
    "label": "GetDepthStencilClearValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDepthStencilClearValue(float& OutDepth, uint32& OutStencil)"
  },
  {
    "label": "GetDepthClearValue()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDepthClearValue()"
  },
  {
    "label": "GetDesc()",
    "kind": "Method",
    "detail": "Function (float Depth ; uint32 Stencil ;)",
    "insertText": "GetDesc().ClearValue.GetDepthStencil(Depth, Stencil)"
  },
  {
    "label": "SetLastRenderTime()",
    "kind": "Method",
    "detail": "Function (LastRenderTime .)",
    "insertText": "SetLastRenderTime(InLastRenderTime)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetName(const FName& InName)"
  },
  {
    "label": "GetTexture2D()",
    "kind": "Method",
    "detail": "Function (FRHITexture*)",
    "insertText": "GetTexture2D()"
  },
  {
    "label": "GetSizeX()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSizeX()"
  },
  {
    "label": "GetSizeY()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSizeY()"
  },
  {
    "label": "GetSizeXY()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetSizeXY()"
  },
  {
    "label": "GetSizeZ()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSizeZ()"
  },
  {
    "label": "GetNumMips()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumMips()"
  },
  {
    "label": "GetFormat()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat)",
    "insertText": "GetFormat()"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} ETextureCreateFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "GetNumSamples()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetNumSamples()"
  },
  {
    "label": "GetClearBinding()",
    "kind": "Method",
    "detail": "Function (} const FClearValueBinding)",
    "insertText": "GetClearBinding()"
  },
  {
    "label": "GetValidationTrackerResource()",
    "kind": "Method",
    "detail": "Function (} # if ENABLE_RHI_VALIDATION RHIValidation::FResource*)",
    "insertText": "GetValidationTrackerResource()"
  },
  {
    "label": "FRHITexture()",
    "kind": "Method",
    "detail": "Function (} # endif private : class FRHITextureReference ;)",
    "insertText": "FRHITexture(ERHIResourceType InResourceType) : FRHIViewableResource(InResourceType, ERHIAccess::Unknown)"
  },
  {
    "label": "FRHITimestampCalibrationQuery()",
    "kind": "Method",
    "detail": "Function (} FRHITextureDesc TextureDesc ; FLastRenderTimeContainer LastRenderTime ; } ; class FRHITimestampCalibrationQuery : public FRHIResource { public :)",
    "insertText": "FRHITimestampCalibrationQuery() : FRHIResource(RRT_TimestampCalibrationQuery)"
  },
  {
    "label": "FRHIGPUFence()",
    "kind": "Method",
    "detail": "Function (} uint64 GPUMicroseconds [ MAX_NUM_GPUS ] = { } ; uint64 CPUMicroseconds [ MAX_NUM_GPUS ] = { } ; } ; class FRHIGPUFence : public FRHIResource { public :)",
    "insertText": "FRHIGPUFence(FName InName) : FRHIResource(RRT_GPUFence), FenceName(InName)"
  },
  {
    "label": "FRHIGPUFence()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHIGPUFence()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clear()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Poll()"
  },
  {
    "label": "Poll()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Poll(FRHIGPUMask GPUMask)"
  },
  {
    "label": "GetFName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetFName()"
  },
  {
    "label": "WriteInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInternal()"
  },
  {
    "label": "FRHIRenderQuery()",
    "kind": "Method",
    "detail": "Function (private : uint32 InsertedFrameNumber ; } ; class FRHIRenderQuery : public FRHIResource { public :)",
    "insertText": "FRHIRenderQuery() : FRHIResource(RRT_RenderQuery)"
  },
  {
    "label": "FRHIPooledRenderQuery()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIRenderQueryPool ; class FRHIPooledRenderQuery { TRefCountPtr<FRHIRenderQuery> Query ; FRHIRenderQueryPool* QueryPool = nullptr ; public :)",
    "insertText": "FRHIPooledRenderQuery()"
  },
  {
    "label": "FRHIPooledRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIPooledRenderQuery(FRHIRenderQueryPool* InQueryPool, TRefCountPtr<FRHIRenderQuery>&& InQuery)"
  },
  {
    "label": "FRHIPooledRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIPooledRenderQuery(const FRHIPooledRenderQuery&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRHIPooledRenderQuery&)",
    "insertText": "operator(const FRHIPooledRenderQuery&)"
  },
  {
    "label": "FRHIPooledRenderQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIPooledRenderQuery(FRHIPooledRenderQuery&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRHIPooledRenderQuery&)",
    "insertText": "operator(FRHIPooledRenderQuery&&)"
  },
  {
    "label": "GetQuery()",
    "kind": "Method",
    "detail": "Function (} FRHIRenderQuery*)",
    "insertText": "GetQuery()"
  },
  {
    "label": "FRHIRenderQueryPool()",
    "kind": "Method",
    "detail": "Function (} ; class FRHIRenderQueryPool : public FRHIResource { public :)",
    "insertText": "FRHIRenderQueryPool() : FRHIResource(RRT_RenderQueryPool)"
  },
  {
    "label": "FRHIRenderQueryPool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHIRenderQueryPool()"
  },
  {
    "label": "AllocateQuery()",
    "kind": "Method",
    "detail": "Function (} ; FRHIPooledRenderQuery)",
    "insertText": "AllocateQuery()"
  },
  {
    "label": "ReleaseQuery()",
    "kind": "Method",
    "detail": "Function (private : class FRHIPooledRenderQuery ; void)",
    "insertText": "ReleaseQuery(TRefCountPtr<FRHIRenderQuery>&& Query)"
  },
  {
    "label": "FRHIPooledRenderQuery()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FRHIPooledRenderQuery(FRHIRenderQueryPool* InQueryPool, TRefCountPtr<FRHIRenderQuery>&& InQuery) : Query(MoveTemp(InQuery)) , QueryPool(InQueryPool)"
  },
  {
    "label": "ReleaseQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseQuery()"
  },
  {
    "label": "ReleaseQuery()",
    "kind": "Method",
    "detail": "Function (QueryPool ->)",
    "insertText": "ReleaseQuery(MoveTemp(Query))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (QueryPool = nullptr ; })",
    "insertText": "check(!Query.IsValid())"
  },
  {
    "label": "FRHIViewport()",
    "kind": "Method",
    "detail": "Function (} class FRHIViewport : public FRHIResource { public :)",
    "insertText": "FRHIViewport() : FRHIResource(RRT_Viewport)"
  },
  {
    "label": "GetNativeSwapChain()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "GetNativeSwapChain()"
  },
  {
    "label": "GetCustomPresent()",
    "kind": "Method",
    "detail": "Function (} class FRHICustomPresent*)",
    "insertText": "GetCustomPresent()"
  },
  {
    "label": "WaitForFrameEventCompletion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WaitForFrameEventCompletion()"
  },
  {
    "label": "IssueFrameEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "IssueFrameEvent()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ERHITexturePlane : uint8 { Primary = 0,PrimaryCompressed = 1,Depth = 2,Stencil = 3,HTile = 4,FMask = 5,CMask = 6,Num,NumBits = 3,None = Primary,CompressedSurface = PrimaryCompressed,} ;)",
    "insertText": "static_assert((1u << uint32(ERHITexturePlane::NumBits)) >= uint32(ERHITexturePlane::Num), \"Not enough bits in the ERHITexturePlane enum\")"
  },
  {
    "label": "TRHIRange()",
    "kind": "Method",
    "detail": "Function (using ERHITextureMetaDataAccess = ERHITexturePlane ; template<TType> struct TRHIRange { TType First = 0 ; TType Num = 0 ;)",
    "insertText": "TRHIRange()"
  },
  {
    "label": "TRHIRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRHIRange(uint32 InFirst, uint32 InNum) : First(InFirst) , Num (InNum)"
  },
  {
    "label": "ExclusiveLast()",
    "kind": "Method",
    "detail": "Function (} TType)",
    "insertText": "ExclusiveLast()"
  },
  {
    "label": "GetViewInfo()",
    "kind": "Method",
    "detail": "Function (} } ; using FRHIRange8 = TRHIRange<uint8> ; using FRHIRange16 = TRHIRange<uint16> ; struct FRHIViewDesc { enum class EViewType : uint8 { BufferSRV,BufferUAV,TextureSRV,TextureUAV } ; enum class EBufferType : uint8 { Unknown = 0,Typed = 1,Structured = 2,AccelerationStructure = 3,Raw = 4 } ; enum class EDimension : uint8 { Unknown = 0,Texture2D = 1,Texture2DArray = 2,TextureCube = 3,TextureCubeArray = 4,Texture3D = 5,NumBits = 3 } ; struct FCommon { EViewType ViewType ; EPixelFormat Format ; } ; struct FBuffer : public FCommon { EBufferType BufferType ; uint8 bAtomicCounter : 1 ; uint8 bAppendBuffer : 1 ; uint8 : 6 ; uint32 OffsetInBytes ; union { struct { uint32 NumElements ; uint32 Stride ; } ; FRHIRayTracingScene* RayTracingScene ; } ; struct FViewInfo ; protected : FViewInfo)",
    "insertText": "GetViewInfo(FRHIBuffer* TargetBuffer)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (} ; struct FTexture : public FCommon { ERHITexturePlane Plane :)",
    "insertText": "uint32(ERHITexturePlane::NumBits)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint8 bDisableSRGB : 1 ; EDimension Dimension :)",
    "insertText": "uint32(EDimension::NumBits)"
  },
  {
    "label": "GetViewInfo()",
    "kind": "Method",
    "detail": "Function (FRHIRange8 MipRange ; FRHIRange16 ArrayRange ; struct FViewInfo ; protected : FViewInfo)",
    "insertText": "GetViewInfo(FRHITexture* TargetTexture)"
  },
  {
    "label": "CreateBufferSRV()",
    "kind": "Method",
    "detail": "Function (} ; union { FCommon Common ; union { FBufferSRV SRV ; FBufferUAV UAV ; } Buffer ; union { FTextureSRV SRV ; FTextureUAV UAV ; } Texture ; } ; FBufferSRV::FInitializer)",
    "insertText": "CreateBufferSRV()"
  },
  {
    "label": "CreateBufferUAV()",
    "kind": "Method",
    "detail": "Function (FBufferUAV::FInitializer)",
    "insertText": "CreateBufferUAV()"
  },
  {
    "label": "CreateTextureSRV()",
    "kind": "Method",
    "detail": "Function (FTextureSRV::FInitializer)",
    "insertText": "CreateTextureSRV()"
  },
  {
    "label": "CreateTextureUAV()",
    "kind": "Method",
    "detail": "Function (FTextureUAV::FInitializer)",
    "insertText": "CreateTextureUAV()"
  },
  {
    "label": "IsSRV()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSRV()"
  },
  {
    "label": "IsBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBuffer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FRHIViewDesc const& RHS)"
  },
  {
    "label": "FRHIViewDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIViewDesc() : FRHIViewDesc(EViewType::BufferSRV)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(*this)"
  },
  {
    "label": "GetBufferTypeString()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetBufferTypeString(EBufferType BufferType)"
  },
  {
    "label": "GetTextureDimensionString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTextureDimensionString(EDimension Dimension)"
  },
  {
    "label": "FRHIViewDesc()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FRHIViewDesc(EViewType ViewType)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Common . ViewType = ViewType ; } } ;)",
    "insertText": "static_assert(sizeof(FRHIViewDesc) == 16, \"Packing of FRHIViewDesc is unexpected.\")"
  },
  {
    "label": "FInitializer()",
    "kind": "Method",
    "detail": "Function (struct FRHIViewDesc::FBufferSRV::FInitializer : private FRHIViewDesc { FRHIViewDesc ; FRHICommandListBase ; struct FShaderResourceViewInitializer ; struct FRawBufferShaderResourceViewInitializer ; protected :)",
    "insertText": "FInitializer() : FRHIViewDesc(EViewType::BufferSRV)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (} public : FInitializer&)",
    "insertText": "SetType(EBufferType Type)"
  },
  {
    "label": "SetTypeFromBuffer()",
    "kind": "Method",
    "detail": "Function (Buffer . SRV . BufferType = Type ; return* this ; } FInitializer&)",
    "insertText": "SetTypeFromBuffer(FRHIBuffer* TargetBuffer)"
  },
  {
    "label": "EnumHasAnyFlags()",
    "kind": "Method",
    "detail": "Function (Buffer . SRV . BufferType =)",
    "insertText": "EnumHasAnyFlags(TargetBuffer->GetUsage(), BUF_ByteAddressBuffer ) ? EBufferType::Raw : EnumHasAnyFlags(TargetBuffer->GetUsage(), BUF_StructuredBuffer ) ? EBufferType::Structured : EnumHasAnyFlags(TargetBuffer->GetUsage(), BUF_AccelerationStructure)"
  },
  {
    "label": "SetOffsetInBytes()",
    "kind": "Method",
    "detail": "Function (Buffer . SRV . Format = InFormat ; return* this ; } FInitializer&)",
    "insertText": "SetOffsetInBytes(uint32 InOffsetBytes)"
  },
  {
    "label": "SetStride()",
    "kind": "Method",
    "detail": "Function (Buffer . SRV . OffsetInBytes = InOffsetBytes ; return* this ; } FInitializer&)",
    "insertText": "SetStride(uint32 InStride)"
  },
  {
    "label": "SetNumElements()",
    "kind": "Method",
    "detail": "Function (Buffer . SRV . Stride = InStride ; return* this ; } FInitializer&)",
    "insertText": "SetNumElements(uint32 InNumElements)"
  },
  {
    "label": "SetRayTracingScene()",
    "kind": "Method",
    "detail": "Function (Buffer . SRV . NumElements = InNumElements ; return* this ; } FInitializer&)",
    "insertText": "SetRayTracingScene(FRHIRayTracingScene* InRayTracingScene)"
  },
  {
    "label": "FInitializer()",
    "kind": "Method",
    "detail": "Function (Buffer . SRV . RayTracingScene = InRayTracingScene ; return* this ; } } ; struct FRHIViewDesc::FBufferUAV::FInitializer : private FRHIViewDesc { FRHIViewDesc ; FRHICommandListBase ; protected :)",
    "insertText": "FInitializer() : FRHIViewDesc(EViewType::BufferUAV)"
  },
  {
    "label": "SetAtomicCounter()",
    "kind": "Method",
    "detail": "Function (Buffer . UAV . NumElements = InNumElements ; return* this ; } FInitializer&)",
    "insertText": "SetAtomicCounter(bool InAtomicCounter)"
  },
  {
    "label": "SetAppendBuffer()",
    "kind": "Method",
    "detail": "Function (Buffer . UAV . bAtomicCounter = InAtomicCounter ; return* this ; } FInitializer&)",
    "insertText": "SetAppendBuffer(bool InAppendBuffer)"
  },
  {
    "label": "FInitializer()",
    "kind": "Method",
    "detail": "Function (Buffer . UAV . bAppendBuffer = InAppendBuffer ; return* this ; } } ; struct FRHIViewDesc::FTextureSRV::FInitializer : private FRHIViewDesc { FRHIViewDesc ; FRHICommandListBase ; protected :)",
    "insertText": "FInitializer() : FRHIViewDesc(EViewType::TextureSRV)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "SetDimensionFromTexture()",
    "kind": "Method",
    "detail": "Function (break ; case ETextureDimension::Texture2D : Texture . SRV . Dimension = EDimension::Texture2D ; break ; case ETextureDimension::Texture2DArray : Texture . SRV . Dimension = EDimension::Texture2DArray ; break ; case ETextureDimension::Texture3D : Texture . SRV . Dimension = EDimension::Texture3D ; break ; case ETextureDimension::TextureCube : Texture . SRV . Dimension = EDimension::TextureCube ; break ; case ETextureDimension::TextureCubeArray : Texture . SRV . Dimension = EDimension::TextureCubeArray ; break ; } return* this ; } FInitializer&)",
    "insertText": "SetDimensionFromTexture(FRHITexture* TargetTexture)"
  },
  {
    "label": "SetDimension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDimension(TargetTexture->GetDesc().Dimension)"
  },
  {
    "label": "SetPlane()",
    "kind": "Method",
    "detail": "Function (Texture . SRV . Format = InFormat ; return* this ; } FInitializer&)",
    "insertText": "SetPlane(ERHITexturePlane InPlane)"
  },
  {
    "label": "SetMipRange()",
    "kind": "Method",
    "detail": "Function (Texture . SRV . Plane = InPlane ; return* this ; } FInitializer&)",
    "insertText": "SetMipRange(uint8 InFirstMip, uint8 InNumMips)"
  },
  {
    "label": "SetArrayRange()",
    "kind": "Method",
    "detail": "Function (Texture . SRV . MipRange . First = InFirstMip ; Texture . SRV . MipRange . Num = InNumMips ; return* this ; } FInitializer&)",
    "insertText": "SetArrayRange(uint16 InFirstElement, uint16 InNumElements)"
  },
  {
    "label": "SetDisableSRGB()",
    "kind": "Method",
    "detail": "Function (Texture . SRV . ArrayRange . First = InFirstElement ; Texture . SRV . ArrayRange . Num = InNumElements ; return* this ; } FInitializer&)",
    "insertText": "SetDisableSRGB(bool InDisableSRGB)"
  },
  {
    "label": "FInitializer()",
    "kind": "Method",
    "detail": "Function (Texture . SRV . bDisableSRGB = InDisableSRGB ; return* this ; } } ; struct FRHIViewDesc::FTextureUAV::FInitializer : private FRHIViewDesc { FRHIViewDesc ; FRHICommandListBase ; protected :)",
    "insertText": "FInitializer() : FRHIViewDesc(EViewType::TextureUAV)"
  },
  {
    "label": "SetMipLevel()",
    "kind": "Method",
    "detail": "Function (Texture . UAV . Plane = InPlane ; return* this ; } FInitializer&)",
    "insertText": "SetMipLevel(uint8 InMipLevel)"
  },
  {
    "label": "FRHIView()",
    "kind": "Method",
    "detail": "Function (uint8 bAllMips : 1 ; uint8 bAllSlices : 1 ; } ; struct FRHIViewDesc::FTextureSRV::FViewInfo : public FRHIViewDesc::FTexture::FViewInfo { FRHIRange8 MipRange ; uint8 bSRGB : 1 ; } ; struct FRHIViewDesc::FTextureUAV::FViewInfo : public FRHIViewDesc::FTexture::FViewInfo { uint8 MipLevel ; } ; class FRHIView : public FRHIResource { public :)",
    "insertText": "FRHIView(ERHIResourceType InResourceType, FRHIViewableResource* InResource, FRHIViewDesc const& InViewDesc) : FRHIResource(InResourceType) , Resource(InResource) , ViewDesc(InViewDesc)"
  },
  {
    "label": "GetBindlessHandle()",
    "kind": "Method",
    "detail": "Function (} FRHIDescriptorHandle)",
    "insertText": "GetBindlessHandle()"
  },
  {
    "label": "GetResource()",
    "kind": "Method",
    "detail": "Function (} FRHIViewableResource*)",
    "insertText": "GetResource()"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (} FRHITexture*)",
    "insertText": "GetTexture()"
  },
  {
    "label": "IsTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsTexture()"
  },
  {
    "label": "GetViewIdentity()",
    "kind": "Method",
    "detail": "Function (} # if ENABLE_RHI_VALIDATION RHIValidation::FViewIdentity)",
    "insertText": "GetViewIdentity()"
  },
  {
    "label": "FRHIShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHIShaderResourceView : public FRHIView { public :)",
    "insertText": "FRHIShaderResourceView(FRHIViewableResource* InResource, FRHIViewDesc const& InViewDesc) : FRHIView(RRT_ShaderResourceView, InResource, InViewDesc)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ERayTracingInstanceFlags : uint8 { None = 0,TriangleCullDisable = 1<<1,TriangleCullReverse = 1<<2,ForceOpaque = 1<<3,ForceNonOpaque = 1<<4,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERayTracingInstanceFlags)"
  },
  {
    "label": "FRayTracingGeometryInstance()",
    "kind": "Method",
    "detail": "Function (class FRHIRayTracingGeometry ; struct FRayTracingGeometryInstance { PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FRayTracingGeometryInstance()"
  },
  {
    "label": "FRayTracingGeometryInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingGeometryInstance(const FRayTracingGeometryInstance&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryInstance&)",
    "insertText": "operator(const FRayTracingGeometryInstance&)"
  },
  {
    "label": "FRayTracingGeometryInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingGeometryInstance(FRayTracingGeometryInstance&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingGeometryInstance&)",
    "insertText": "operator(FRayTracingGeometryInstance&&)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (ERayTracingInstanceFlags Flags = ERayTracingInstanceFlags::None ; } ; enum ERayTracingGeometryType { RTGT_Triangles,RTGT_Procedural,} ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(ERayTracingGeometryType)"
  },
  {
    "label": "DECLARE_INTRINSIC_TYPE_LAYOUT()",
    "kind": "Method",
    "detail": "Function (enum class ERayTracingGeometryInitializerType : uint8 { Rendering,StreamingDestination,StreamingSource,} ;)",
    "insertText": "DECLARE_INTRINSIC_TYPE_LAYOUT(ERayTracingGeometryInitializerType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FRayTracingGeometrySegment { public : FBufferRHIRef VertexBuffer = nullptr ; EVertexElementType VertexBufferElementType = VET_Float3 ; uint32 VertexBufferOffset = 0 ; uint32 VertexBufferStride = 1 2 ; uint32 MaxVertices = 0 ; uint32 FirstPrimitive = 0 ; uint32 NumPrimitives = 0 ; bool bForceOpaque = false ; bool bAllowDuplicateAnyHitShaderInvocation = true ; bool bEnabled = true ; } ; struct FRayTracingGeometryInitializer { public : FBufferRHIRef IndexBuffer = nullptr ; uint32 IndexBufferOffset = 0 ; ERayTracingGeometryType GeometryType = RTGT_Triangles ; uint32 TotalPrimitiveCount = 0 ; bool bFastBuild = false ; bool bAllowUpdate = false ; bool bAllowCompaction = true ; ERayTracingGeometryInitializerType Type = ERayTracingGeometryInitializerType::Rendering ; TArray<FRayTracingGeometrySegment> Segments ; FResourceArrayUploadInterface* OfflineData = nullptr ; FRHIRayTracingGeometry* SourceGeometry = nullptr ; FDebugName DebugName ; FName OwnerName ; } ; # if DO_CHECK bool)",
    "insertText": "operator(const FRayTracingGeometryInitializer& LHS, const FRayTracingGeometryInitializer& RHS)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ERayTracingShaderBindingMode { Disabled = 0,= 1<<0,RTPSO = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERayTracingShaderBindingMode)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ERayTracingHitGroupIndexingMode { Allow,Disallow,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ERayTracingHitGroupIndexingMode)"
  },
  {
    "label": "FRayTracingSceneInitializer()",
    "kind": "Method",
    "detail": "Function (ERayTracingSceneLifetime Lifetime = RTSL_SingleFrame ; ERayTracingAccelerationStructureFlags BuildFlags = ERayTracingAccelerationStructureFlags::FastTrace ; FName DebugName ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FRayTracingSceneInitializer()"
  },
  {
    "label": "FRayTracingSceneInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingSceneInitializer(FRayTracingSceneInitializer&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingSceneInitializer&)",
    "insertText": "operator(FRayTracingSceneInitializer&&)"
  },
  {
    "label": "FRHIRayTracingAccelerationStructure()",
    "kind": "Method",
    "detail": "Function (struct FRayTracingAccelerationStructureSize { uint64 ResultSize = 0 ; uint64 BuildScratchSize = 0 ; uint64 UpdateScratchSize = 0 ; } ; class FRHIRayTracingAccelerationStructure : public FRHIResource # if ENABLE_RHI_VALIDATION,public RHIValidation::FAccelerationStructureResource # endif { public :)",
    "insertText": "FRHIRayTracingAccelerationStructure() : FRHIResource(RRT_RayTracingAccelerationStructure)"
  },
  {
    "label": "GetSizeInfo()",
    "kind": "Method",
    "detail": "Function (} FRayTracingAccelerationStructureSize)",
    "insertText": "GetSizeInfo()"
  },
  {
    "label": "FRHIRayTracingGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIRayTracingGeometry(const FRayTracingGeometryInitializer& InInitializer) : Initializer(InInitializer)"
  },
  {
    "label": "GetAccelerationStructureAddress()",
    "kind": "Method",
    "detail": "Function (} FRayTracingAccelerationStructureAddress)",
    "insertText": "GetAccelerationStructureAddress(uint64 GPUIndex)"
  },
  {
    "label": "IsCompressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompressed()"
  },
  {
    "label": "GetInitializer()",
    "kind": "Method",
    "detail": "Function (} protected : FRayTracingGeometryInitializer Initializer = { } ; } ; class FRHIRayTracingScene : public FRHIRayTracingAccelerationStructure { public : const FRayTracingSceneInitializer&)",
    "insertText": "GetInitializer()"
  },
  {
    "label": "FRHIShaderBindingTable()",
    "kind": "Method",
    "detail": "Function (} ; class FRHIShaderBindingTable : public FRHIResource # if ENABLE_RHI_VALIDATION,public RHIValidation::FRayTracingShaderBindingTable # endif { public :)",
    "insertText": "FRHIShaderBindingTable(const FRayTracingShaderBindingTableInitializer& InInitializer) : FRHIResource(RRT_RayTracingShaderBindingTable) , Initializer(InInitializer)"
  },
  {
    "label": "FRHIShaderBundle()",
    "kind": "Method",
    "detail": "Function (uint32 NumRecords = 0 u ; uint32 ArgOffset = 0 u ; uint32 ArgStride = 0 u ; ERHIShaderBundleMode Mode = ERHIShaderBundleMode::CS ; } ; class FRHIShaderBundle : public FRHIResource { public : const uint32 NumRecords = 0 ; const uint32 ArgOffset = 0 ; const uint32 ArgStride = 0 ; const ERHIShaderBundleMode Mode = ERHIShaderBundleMode::CS ; FName ModeName ; public :)",
    "insertText": "FRHIShaderBundle(const FShaderBundleCreateInfo& CreateInfo) : FRHIResource(RRT_ShaderBundle) , NumRecords(CreateInfo.NumRecords) , ArgOffset(CreateInfo.ArgOffset) , ArgStride(CreateInfo.ArgStride) , Mode(CreateInfo.Mode)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ModeName =)",
    "insertText": "TEXT(\"CS\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Mode == ERHIShaderBundleMode::MSPS)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ModeName =)",
    "insertText": "TEXT(\"MSPS\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Mode == ERHIShaderBundleMode::VSPS)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (ModeName =)",
    "insertText": "TEXT(\"VSPS\")"
  },
  {
    "label": "FRHIStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} } } ; class FRHIStagingBuffer : public FRHIResource { public :)",
    "insertText": "FRHIStagingBuffer() : FRHIResource(RRT_StagingBuffer) , bIsLocked(false)"
  },
  {
    "label": "FRHIStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHIStagingBuffer()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "Lock(uint32 Offset, uint32 NumBytes)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "GetGPUSizeBytes()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetGPUSizeBytes()"
  },
  {
    "label": "FGenericRHIStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGenericRHIStagingBuffer()"
  },
  {
    "label": "FRHIRenderTargetView()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef ShadowBuffer ; uint32 Offset ; } ; class FRHIRenderTargetView { public : FRHITexture* Texture = nullptr ; uint32 MipIndex = 0 ; uint32 ArraySliceIndex = - 1 ; ERenderTargetLoadAction LoadAction = ERenderTargetLoadAction::ENoAction ; ERenderTargetStoreAction StoreAction = ERenderTargetStoreAction::ENoAction ;)",
    "insertText": "FRHIRenderTargetView()"
  },
  {
    "label": "FRHIRenderTargetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIRenderTargetView(FRHIRenderTargetView&&)"
  },
  {
    "label": "FRHIRenderTargetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIRenderTargetView(const FRHIRenderTargetView&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRHIRenderTargetView&)",
    "insertText": "operator(FRHIRenderTargetView&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRHIRenderTargetView&)",
    "insertText": "operator(const FRHIRenderTargetView&)"
  },
  {
    "label": "FRHIRenderTargetView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIRenderTargetView(FRHITexture* InTexture, ERenderTargetLoadAction InLoadAction) : Texture(InTexture), MipIndex(0), ArraySliceIndex(-1), LoadAction(InLoadAction), StoreAction(ERenderTargetStoreAction::EStore)"
  },
  {
    "label": "FRHIRenderTargetView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIRenderTargetView(FRHITexture* InTexture, ERenderTargetLoadAction InLoadAction, uint32 InMipIndex, uint32 InArraySliceIndex) : Texture(InTexture), MipIndex(InMipIndex), ArraySliceIndex(InArraySliceIndex), LoadAction(InLoadAction), StoreAction(ERenderTargetStoreAction::EStore)"
  },
  {
    "label": "FRHIRenderTargetView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIRenderTargetView(FRHITexture* InTexture, uint32 InMipIndex, uint32 InArraySliceIndex, ERenderTargetLoadAction InLoadAction, ERenderTargetStoreAction InStoreAction) : Texture(InTexture), MipIndex(InMipIndex), ArraySliceIndex(InArraySliceIndex), LoadAction(InLoadAction), StoreAction(InStoreAction)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRHIRenderTargetView& Other)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate()"
  },
  {
    "label": "FRHIDepthRenderTargetView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIDepthRenderTargetView(FRHITexture* InTexture, ERenderTargetLoadAction InLoadAction, ERenderTargetStoreAction InStoreAction) : Texture(InTexture), DepthLoadAction(InLoadAction), DepthStoreAction(InStoreAction), StencilLoadAction(InLoadAction), StencilStoreAction(InStoreAction), DepthStencilAccess(FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "FRHIDepthRenderTargetView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIDepthRenderTargetView(FRHITexture* InTexture, ERenderTargetLoadAction InLoadAction, ERenderTargetStoreAction InStoreAction, FExclusiveDepthStencil InDepthStencilAccess) : Texture(InTexture), DepthLoadAction(InLoadAction), DepthStoreAction(InStoreAction), StencilLoadAction(InLoadAction), StencilStoreAction(InStoreAction), DepthStencilAccess(InDepthStencilAccess)"
  },
  {
    "label": "FRHIDepthRenderTargetView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIDepthRenderTargetView(FRHITexture* InTexture, ERenderTargetLoadAction InDepthLoadAction, ERenderTargetStoreAction InDepthStoreAction, ERenderTargetLoadAction InStencilLoadAction, ERenderTargetStoreAction InStencilStoreAction) : Texture(InTexture), DepthLoadAction(InDepthLoadAction), DepthStoreAction(InDepthStoreAction), StencilLoadAction(InStencilLoadAction), StencilStoreAction(InStencilStoreAction), DepthStencilAccess(FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "FRHIDepthRenderTargetView()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIDepthRenderTargetView(FRHITexture* InTexture, ERenderTargetLoadAction InDepthLoadAction, ERenderTargetStoreAction InDepthStoreAction, ERenderTargetLoadAction InStencilLoadAction, ERenderTargetStoreAction InStencilStoreAction, FExclusiveDepthStencil InDepthStencilAccess) : Texture(InTexture), DepthLoadAction(InDepthLoadAction), DepthStoreAction(InDepthStoreAction), StencilLoadAction(InStencilLoadAction), StencilStoreAction(InStencilStoreAction), DepthStencilAccess(InDepthStencilAccess)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRHIDepthRenderTargetView& Other)"
  },
  {
    "label": "FRHISetRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHISetRenderTargetsInfo(int32 InNumColorRenderTargets, const FRHIRenderTargetView* InColorRenderTargets, const FRHIDepthRenderTargetView& InDepthStencilRenderTarget) : NumColorRenderTargets(InNumColorRenderTargets), bClearColor(InNumColorRenderTargets > 0 && InColorRenderTargets[0].LoadAction == ERenderTargetLoadAction::EClear), bHasResolveAttachments(false), DepthStencilRenderTarget(InDepthStencilRenderTarget), bClearDepth(InDepthStencilRenderTarget.Texture && InDepthStencilRenderTarget.DepthLoadAction == ERenderTargetLoadAction::EClear), ShadingRateTexture(nullptr), ShadingRateTextureCombiner(VRSRB_Passthrough)"
  },
  {
    "label": "SetClearDepthStencil()",
    "kind": "Method",
    "detail": "Function (ColorRenderTarget [ Index ] = InColorRenderTargets [ Index ] ; } } void)",
    "insertText": "SetClearDepthStencil(bool bInClearDepth, bool bInClearStencil = false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DepthStencilRenderTarget . DepthLoadAction = ERenderTargetLoadAction::EClear ; })",
    "insertText": "if(bInClearStencil)"
  },
  {
    "label": "CalculateHash()",
    "kind": "Method",
    "detail": "Function (DepthStencilRenderTarget . StencilLoadAction = ERenderTargetLoadAction::EClear ; } bClearDepth = bInClearDepth ; bClearStencil = bInClearStencil ; } uint32)",
    "insertText": "CalculateHash()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (struct FHashableStruct { FRHITexture* Texture [ MaxSimultaneousRenderTargets* 2 + 3 ] ; uint32 MipIndex [ MaxSimultaneousRenderTargets ] ; uint32 ArraySliceIndex [ MaxSimultaneousRenderTargets ] ; ERenderTargetLoadAction LoadAction [ MaxSimultaneousRenderTargets ] ; ERenderTargetStoreAction StoreAction [ MaxSimultaneousRenderTargets ] ; ERenderTargetLoadAction DepthLoadAction ; ERenderTargetStoreAction DepthStoreAction ; ERenderTargetLoadAction StencilLoadAction ; ERenderTargetStoreAction StencilStoreAction ; FExclusiveDepthStencil DepthStencilAccess ; bool bClearDepth ; bool bClearStencil ; bool bClearColor ; bool bHasResolveAttachments ; FRHIUnorderedAccessView* UnorderedAccessView [ MaxSimultaneousUAVs ] ; uint8 MultiViewCount ; void)",
    "insertText": "Set(const FRHISetRenderTargetsInfo& RTInfo)"
  },
  {
    "label": "GetStencilStoreAction()",
    "kind": "Method",
    "detail": "Function (Texture [ Index ] = RTInfo . ColorRenderTarget [ Index ] . Texture ; Texture [ MaxSimultaneousRenderTargets + Index ] = RTInfo . ColorResolveRenderTarget [ Index ] . Texture ; MipIndex [ Index ] = RTInfo . ColorRenderTarget [ Index ] . MipIndex ; ArraySliceIndex [ Index ] = RTInfo . ColorRenderTarget [ Index ] . ArraySliceIndex ; LoadAction [ Index ] = RTInfo . ColorRenderTarget [ Index ] . LoadAction ; StoreAction [ Index ] = RTInfo . ColorRenderTarget [ Index ] . StoreAction ; } Texture [ MaxSimultaneousRenderTargets* 2 ] = RTInfo . DepthStencilRenderTarget . Texture ; Texture [ MaxSimultaneousRenderTargets* 2 + 1 ] = RTInfo . DepthStencilResolveRenderTarget . Texture ; Texture [ MaxSimultaneousRenderTargets* 2 + 2 ] = RTInfo . ShadingRateTexture ; DepthLoadAction = RTInfo . DepthStencilRenderTarget . DepthLoadAction ; DepthStoreAction = RTInfo . DepthStencilRenderTarget . DepthStoreAction ; StencilLoadAction = RTInfo . DepthStencilRenderTarget . StencilLoadAction ; StencilStoreAction = RTInfo . DepthStencilRenderTarget .)",
    "insertText": "GetStencilStoreAction()"
  },
  {
    "label": "GetDepthStencilAccess()",
    "kind": "Method",
    "detail": "Function (DepthStencilAccess = RTInfo . DepthStencilRenderTarget .)",
    "insertText": "GetDepthStencilAccess()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (bClearDepth = RTInfo . bClearDepth ; bClearStencil = RTInfo . bClearStencil ; bClearColor = RTInfo . bClearColor ; bHasResolveAttachments = RTInfo . bHasResolveAttachments ; MultiViewCount = RTInfo . MultiViewCount ; } } ; FHashableStruct RTHash ;)",
    "insertText": "Memzero(RTHash)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (RTHash .)",
    "insertText": "Set(*this)"
  },
  {
    "label": "FRHICustomPresent()",
    "kind": "Method",
    "detail": "Function (} } ; class FRHICustomPresent : public FRHIResource { public :)",
    "insertText": "FRHICustomPresent() : FRHIResource(RRT_CustomPresent)"
  },
  {
    "label": "FRHICustomPresent()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FRHICustomPresent()"
  },
  {
    "label": "OnBackBufferResize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBackBufferResize()"
  },
  {
    "label": "NeedsNativePresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsNativePresent()"
  },
  {
    "label": "NeedsAdvanceBackbuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsAdvanceBackbuffer()"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "Present(IRHICommandContext& RHICmdContext, int32& InOutSyncInterval)"
  },
  {
    "label": "Present()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS return)",
    "insertText": "Present(InOutSyncInterval)"
  },
  {
    "label": "OnAcquireThreadOwnership()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "OnAcquireThreadOwnership()"
  },
  {
    "label": "OnReleaseThreadOwnership()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReleaseThreadOwnership()"
  },
  {
    "label": "GetShaderFrequencyString()",
    "kind": "Method",
    "detail": "Function (} } ; template<TRHIShader> struct TRHIShaderToEnum { } ; template<> struct TRHIShaderToEnum<FRHIVertexShader> { enum { ShaderFrequency = SF_Vertex } ; } ; template<> struct TRHIShaderToEnum<FRHIMeshShader> { enum { ShaderFrequency = SF_Mesh } ; } ; template<> struct TRHIShaderToEnum<FRHIAmplificationShader> { enum { ShaderFrequency = SF_Amplification } ; } ; template<> struct TRHIShaderToEnum<FRHIPixelShader> { enum { ShaderFrequency = SF_Pixel } ; } ; template<> struct TRHIShaderToEnum<FRHIGeometryShader> { enum { ShaderFrequency = SF_Geometry } ; } ; template<> struct TRHIShaderToEnum<FRHIComputeShader> { enum { ShaderFrequency = SF_Compute } ; } ; template<> struct TRHIShaderToEnum<FRHIVertexShader*> { enum { ShaderFrequency = SF_Vertex } ; } ; template<> struct TRHIShaderToEnum<FRHIMeshShader*> { enum { ShaderFrequency = SF_Mesh } ; } ; template<> struct TRHIShaderToEnum<FRHIAmplificationShader*> { enum { ShaderFrequency = SF_Amplification } ; } ; template<> struct TRHIShaderToEnum<FRHIPixelShader*> { enum { ShaderFrequency = SF_Pixel } ; } ; template<> struct TRHIShaderToEnum<FRHIGeometryShader*> { enum { ShaderFrequency = SF_Geometry } ; } ; template<> struct TRHIShaderToEnum<FRHIComputeShader*> { enum { ShaderFrequency = SF_Compute } ; } ; template<> struct TRHIShaderToEnum<FVertexShaderRHIRef> { enum { ShaderFrequency = SF_Vertex } ; } ; template<> struct TRHIShaderToEnum<FMeshShaderRHIRef> { enum { ShaderFrequency = SF_Mesh } ; } ; template<> struct TRHIShaderToEnum<FAmplificationShaderRHIRef> { enum { ShaderFrequency = SF_Amplification } ; } ; template<> struct TRHIShaderToEnum<FPixelShaderRHIRef> { enum { ShaderFrequency = SF_Pixel } ; } ; template<> struct TRHIShaderToEnum<FGeometryShaderRHIRef> { enum { ShaderFrequency = SF_Geometry } ; } ; template<> struct TRHIShaderToEnum<FComputeShaderRHIRef> { enum { ShaderFrequency = SF_Compute } ; } ; template<TRHIShaderType> const TCHAR*)",
    "insertText": "GetShaderFrequencyString(bool bIncludePrefix = true)"
  },
  {
    "label": "FBoundShaderStateInput()",
    "kind": "Method",
    "detail": "Function (} struct FBoundShaderStateInput {)",
    "insertText": "FBoundShaderStateInput()"
  },
  {
    "label": "FBoundShaderStateInput()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoundShaderStateInput(FRHIVertexDeclaration* InVertexDeclarationRHI , FRHIVertexShader* InVertexShaderRHI , FRHIPixelShader* InPixelShaderRHI #if PLATFORM_SUPPORTS_GEOMETRY_SHADERS , FRHIGeometryShader* InGeometryShaderRHI #endif ) : VertexDeclarationRHI(InVertexDeclarationRHI) , VertexShaderRHI(InVertexShaderRHI) , PixelShaderRHI(InPixelShaderRHI) #if PLATFORM_SUPPORTS_GEOMETRY_SHADERS , GeometryShaderRHI(InGeometryShaderRHI)"
  },
  {
    "label": "FBoundShaderStateInput()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_SUPPORTS_MESH_SHADERS)",
    "insertText": "FBoundShaderStateInput(FRHIMeshShader* InMeshShaderRHI, FRHIAmplificationShader* InAmplificationShader, FRHIPixelShader* InPixelShaderRHI) : PixelShaderRHI(InPixelShaderRHI) , MeshShaderRHI(InMeshShaderRHI) , AmplificationShaderRHI(InAmplificationShader)"
  },
  {
    "label": "AddRefResources()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "AddRefResources()"
  },
  {
    "label": "GetMeshShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshShader()->AddRef()"
  },
  {
    "label": "GetAmplificationShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAmplificationShader()->AddRef()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "check(VertexDeclarationRHI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PixelShaderRHI)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(GetGeometryShader())"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGeometryShader()->AddRef()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "GetMeshShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMeshShader()->Release()"
  },
  {
    "label": "GetAmplificationShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAmplificationShader()->Release()"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGeometryShader()->Release()"
  },
  {
    "label": "GetVertexShader()",
    "kind": "Method",
    "detail": "Function (} } FRHIVertexShader*)",
    "insertText": "GetVertexShader()"
  },
  {
    "label": "GetAmplificationShader()",
    "kind": "Method",
    "detail": "Function (MeshShaderRHI = InMeshShader ; } FRHIAmplificationShader*)",
    "insertText": "GetAmplificationShader()"
  },
  {
    "label": "GetMeshShader()",
    "kind": "Method",
    "detail": "Function (AmplificationShaderRHI = InAmplificationShader ; } # else FRHIMeshShader*)",
    "insertText": "GetMeshShader()"
  },
  {
    "label": "GetGeometryShader()",
    "kind": "Method",
    "detail": "Function (} # endif # if PLATFORM_SUPPORTS_GEOMETRY_SHADERS FRHIGeometryShader*)",
    "insertText": "GetGeometryShader()"
  },
  {
    "label": "FGraphicsPipelineRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (} # endif FRHIVertexDeclaration* VertexDeclarationRHI = nullptr ; FRHIVertexShader* VertexShaderRHI = nullptr ; FRHIPixelShader* PixelShaderRHI = nullptr ; private : # if PLATFORM_SUPPORTS_MESH_SHADERS FRHIMeshShader* MeshShaderRHI = nullptr ; FRHIAmplificationShader* AmplificationShaderRHI = nullptr ; # endif # if PLATFORM_SUPPORTS_GEOMETRY_SHADERS FRHIGeometryShader* GeometryShaderRHI = nullptr ; # endif } ; enum class ESubpassHint : uint8 { None,DepthReadSubpass,DeferredShadingSubpass,CustomResolveSubpass,} ; enum class EConservativeRasterization : uint8 { Disabled,Overestimated,} ; struct FGraphicsPipelineRenderTargetsInfo {)",
    "insertText": "FGraphicsPipelineRenderTargetsInfo() : RenderTargetFormats(InPlace, UE_PIXELFORMAT_TO_UINT8(PF_Unknown)) , RenderTargetFlags(InPlace, TexCreate_None) , DepthStencilAccess(FExclusiveDepthStencil::DepthNop_StencilNop)"
  },
  {
    "label": "FGraphicsPipelineStateInitializer()",
    "kind": "Method",
    "detail": "Function (} uint32 RenderTargetsEnabled = 0 ; TStaticArray<uint8,MaxSimultaneousRenderTargets> RenderTargetFormats ; TStaticArray<ETextureCreateFlags,MaxSimultaneousRenderTargets> RenderTargetFlags ; EPixelFormat DepthStencilTargetFormat = PF_Unknown ; ETextureCreateFlags DepthStencilTargetFlag = ETextureCreateFlags::None ; ERenderTargetLoadAction DepthTargetLoadAction = ERenderTargetLoadAction::ENoAction ; ERenderTargetStoreAction DepthTargetStoreAction = ERenderTargetStoreAction::ENoAction ; ERenderTargetLoadAction StencilTargetLoadAction = ERenderTargetLoadAction::ENoAction ; ERenderTargetStoreAction StencilTargetStoreAction = ERenderTargetStoreAction::ENoAction ; FExclusiveDepthStencil DepthStencilAccess ; uint16 NumSamples = 0 ; uint8 MultiViewCount = 0 ; bool bHasFragmentDensityAttachment = false ; } ; class FGraphicsPipelineStateInitializer { public : using TRenderTargetFormats = TStaticArray<uint8,MaxSimultaneousRenderTargets> ; using TRenderTargetFlags = TStaticArray<ETextureCreateFlags,MaxSimultaneousRenderTargets> ;)",
    "insertText": "FGraphicsPipelineStateInitializer() : BlendState(nullptr) , RasterizerState(nullptr) , DepthStencilState(nullptr) , RenderTargetsEnabled(0) , RenderTargetFormats(InPlace, UE_PIXELFORMAT_TO_UINT8(PF_Unknown)) , RenderTargetFlags(InPlace, TexCreate_None) , DepthStencilTargetFormat(PF_Unknown) , DepthStencilTargetFlag(TexCreate_None) , DepthTargetLoadAction(ERenderTargetLoadAction::ENoAction) , DepthTargetStoreAction(ERenderTargetStoreAction::ENoAction) , StencilTargetLoadAction(ERenderTargetLoadAction::ENoAction) , StencilTargetStoreAction(ERenderTargetStoreAction::ENoAction) , NumSamples(0) , SubpassHint(ESubpassHint::None) , SubpassIndex(0) , ConservativeRasterization(EConservativeRasterization::Disabled) , bDepthBounds(false) , MultiViewCount(0) , bHasFragmentDensityAttachment(false) , bAllowVariableRateShading(true) , ShadingRate(EVRSShadingRate::VRSSR_1x1) , Flags(0) , StatePrecachePSOHash(0)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_WINDOWS)",
    "insertText": "static_assert(sizeof(TRenderTargetFormats::ElementType) == sizeof(uint8 ), \"Change TRenderTargetFormats's uint8 to EPixelFormat's size!\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "static_assert(PF_MAX < MAX_uint8, \"TRenderTargetFormats assumes EPixelFormat can fit in a uint8!\")"
  },
  {
    "label": "FGraphicsPipelineStateInitializer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGraphicsPipelineStateInitializer(FBoundShaderStateInput InBoundShaderState, FRHIBlendState* InBlendState, FRHIRasterizerState* InRasterizerState, FRHIDepthStencilState* InDepthStencilState, FImmutableSamplerState InImmutableSamplerState, EPrimitiveType InPrimitiveType, uint32 InRenderTargetsEnabled, const TRenderTargetFormats& InRenderTargetFormats, const TRenderTargetFlags& InRenderTargetFlags, EPixelFormat InDepthStencilTargetFormat, ETextureCreateFlags InDepthStencilTargetFlag, ERenderTargetLoadAction InDepthTargetLoadAction, ERenderTargetStoreAction InDepthTargetStoreAction, ERenderTargetLoadAction InStencilTargetLoadAction, ERenderTargetStoreAction InStencilTargetStoreAction, FExclusiveDepthStencil InDepthStencilAccess, uint16 InNumSamples, ESubpassHint InSubpassHint, uint8 InSubpassIndex, EConservativeRasterization InConservativeRasterization, uint16 InFlags, bool bInDepthBounds, uint8 InMultiViewCount, bool bInHasFragmentDensityAttachment, bool bInAllowVariableRateShading, EVRSShadingRate InShadingRate) : BoundShaderState(InBoundShaderState) , BlendState(InBlendState) , RasterizerState(InRasterizerState) , DepthStencilState(InDepthStencilState) , ImmutableSamplerState(InImmutableSamplerState) , PrimitiveType(InPrimitiveType) , RenderTargetsEnabled(InRenderTargetsEnabled) , RenderTargetFormats(InRenderTargetFormats) , RenderTargetFlags(InRenderTargetFlags) , DepthStencilTargetFormat(InDepthStencilTargetFormat) , DepthStencilTargetFlag(InDepthStencilTargetFlag) , DepthTargetLoadAction(InDepthTargetLoadAction) , DepthTargetStoreAction(InDepthTargetStoreAction) , StencilTargetLoadAction(InStencilTargetLoadAction) , StencilTargetStoreAction(InStencilTargetStoreAction) , DepthStencilAccess(InDepthStencilAccess) , NumSamples(InNumSamples) , SubpassHint(InSubpassHint) , SubpassIndex(InSubpassIndex) , ConservativeRasterization(EConservativeRasterization::Disabled) , bDepthBounds(bInDepthBounds) , MultiViewCount(InMultiViewCount) , bHasFragmentDensityAttachment(bInHasFragmentDensityAttachment) , bAllowVariableRateShading(bInAllowVariableRateShading) , ShadingRate(InShadingRate) , Flags(InFlags) , StatePrecachePSOHash(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FGraphicsPipelineStateInitializer& rhs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags FlagsA = A [ Index ]& RelevantRenderTargetFlagMask ; ETextureCreateFlags FlagsB = B [ Index ]& RelevantRenderTargetFlagMask ;)",
    "insertText": "if(FlagsA != FlagsB)"
  },
  {
    "label": "FlagsA()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags)",
    "insertText": "FlagsA(A & RelevantDepthStencilFlagMask)"
  },
  {
    "label": "FlagsB()",
    "kind": "Method",
    "detail": "Function (ETextureCreateFlags)",
    "insertText": "FlagsB(B & RelevantDepthStencilFlagMask)"
  },
  {
    "label": "ComputeNumValidRenderTargets()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "ComputeNumValidRenderTargets()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 LastValidTarget = - 1 ;)",
    "insertText": "for(int32 i = (int32)RenderTargetsEnabled - 1; i >= 0; i--)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (LastValidTarget = i ; break ; } } return)",
    "insertText": "uint32(LastValidTarget + 1)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} return RenderTargetsEnabled ; } FBoundShaderStateInput BoundShaderState ; FRHIBlendState* BlendState ; FRHIRasterizerState* RasterizerState ; FRHIDepthStencilState* DepthStencilState ; FImmutableSamplerState ImmutableSamplerState ; EPrimitiveType PrimitiveType ; uint32 RenderTargetsEnabled ; TRenderTargetFormats RenderTargetFormats ; TRenderTargetFlags RenderTargetFlags ; EPixelFormat DepthStencilTargetFormat ; ETextureCreateFlags DepthStencilTargetFlag ; ERenderTargetLoadAction DepthTargetLoadAction ; ERenderTargetStoreAction DepthTargetStoreAction ; ERenderTargetLoadAction StencilTargetLoadAction ; ERenderTargetStoreAction StencilTargetStoreAction ; FExclusiveDepthStencil DepthStencilAccess ; uint16 NumSamples ; ESubpassHint SubpassHint ; uint8 SubpassIndex ; EConservativeRasterization ConservativeRasterization ; bool bDepthBounds ; uint8 MultiViewCount ; bool bHasFragmentDensityAttachment ; bool bAllowVariableRateShading ; EVRSShadingRate ShadingRate ; union { struct { uint16 Reserved : 1 1 ; uint16 bPSOPrecache : 1 ; uint16 bFromPSOFileCache : 1 ; uint16 PrecacheCompileType : 3 ; } ; uint16 Flags ; } ; enum class EPSOPrecacheCompileType : uint8 { NotSet = 0,MinPri = 1,NormalPri = 2,MaxPri = 3,NumTypes = 4,} ;)",
    "insertText": "static_assert((int)EPSOPrecacheCompileType::MaxPri < (1<<3))"
  },
  {
    "label": "SetPSOPrecacheCompileType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPSOPrecacheCompileType(EPSOPrecacheCompileType PrecacheCompileTypeIN)"
  },
  {
    "label": "PrecacheCompileType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecacheCompileType(uint16)"
  },
  {
    "label": "GetPSOPrecacheCompileType()",
    "kind": "Method",
    "detail": "Function (} EPSOPrecacheCompileType)",
    "insertText": "GetPSOPrecacheCompileType()"
  },
  {
    "label": "ComputeShaderTableHash()",
    "kind": "Method",
    "detail": "Function (} uint64 StatePrecachePSOHash ; } ; template<TShaderType> uint64)",
    "insertText": "ComputeShaderTableHash(const TArrayView<TShaderType*>& ShaderTable, uint64 InitialHash = 5699878132332235837ull)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (uint64 CombinedHash = InitialHash ;)",
    "insertText": "for(FRHIShader* ShaderRHI : ShaderTable)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 ShaderHash = 0 ;)",
    "insertText": "if(ShaderRHI)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(&ShaderHash, ShaderRHI->GetHash().Hash, sizeof(ShaderHash))"
  },
  {
    "label": "x9e3779b9()",
    "kind": "Method",
    "detail": "Function (} CombinedHash ^ = ShaderHash + 0)",
    "insertText": "x9e3779b9(CombinedHash << 6) + (CombinedHash >> 2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return CombinedHash ; } class FWorkGraphPipelineStateSignature { public : bool)",
    "insertText": "operator(const FWorkGraphPipelineStateSignature& Rhs)"
  },
  {
    "label": "FWorkGraphPipelineStateInitializer()",
    "kind": "Method",
    "detail": "Function (} protected : uint64 BaseHash = 0 ; uint64 NameHash = 0 ; uint64 ShaderBundleNodeHash = 0 ; } ; class FWorkGraphPipelineStateInitializer : public FWorkGraphPipelineStateSignature { public :)",
    "insertText": "FWorkGraphPipelineStateInitializer()"
  },
  {
    "label": "SetProgramName()",
    "kind": "Method",
    "detail": "Function (FWorkGraphPipelineStateRHIRef BasePipeline ; void)",
    "insertText": "SetProgramName(TCHAR const* InProgramName)"
  },
  {
    "label": "ComputeNameHash()",
    "kind": "Method",
    "detail": "Function (ProgramName = InProgramName ; NameHash =)",
    "insertText": "ComputeNameHash()"
  },
  {
    "label": "GetProgramName()",
    "kind": "Method",
    "detail": "Function (} FString const&)",
    "insertText": "GetProgramName()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (BaseShader = InShader ;)",
    "insertText": "Memcpy(&BaseHash, InShader->GetHash().Hash, sizeof(BaseHash))"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} FRHIWorkGraphShader*)",
    "insertText": "GetShader()"
  },
  {
    "label": "ComputeShaderTableHash()",
    "kind": "Method",
    "detail": "Function (ShaderBundleNodeTable = InShaders ; ShaderBundleNodeHash = Hash ? Hash :)",
    "insertText": "ComputeShaderTableHash(InShaders)"
  },
  {
    "label": "GetShaderBundleNodeTable()",
    "kind": "Method",
    "detail": "Function (} const TArrayView<FRHIWorkGraphShader*>&)",
    "insertText": "GetShaderBundleNodeTable()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FRayTracingPipelineStateSignature& rhs)"
  },
  {
    "label": "GetHitGroupHash()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } uint64)",
    "insertText": "GetHitGroupHash()"
  },
  {
    "label": "FRayTracingPipelineStateSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingPipelineStateSignature(const FRayTracingPipelineStateSignature&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineStateSignature&)",
    "insertText": "operator(const FRayTracingPipelineStateSignature&)"
  },
  {
    "label": "FRayTracingPipelineStateSignature()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRayTracingPipelineStateSignature(FRayTracingPipelineStateSignature&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRayTracingPipelineStateSignature&)",
    "insertText": "operator(FRayTracingPipelineStateSignature&&)"
  },
  {
    "label": "FRayTracingPipelineStateSignature()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FRayTracingPipelineStateSignature()"
  },
  {
    "label": "FRayTracingPipelineStateInitializer()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS protected : uint64 RayGenHash = 0 ; uint64 MissHash = 0 ; uint64 HitGroupHash = 0 ; uint64 CallableHash = 0 ; } ; class FRayTracingPipelineStateInitializer : public FRayTracingPipelineStateSignature { public :)",
    "insertText": "FRayTracingPipelineStateInitializer()"
  },
  {
    "label": "GetRayGenTable()",
    "kind": "Method",
    "detail": "Function (bool bPartial = false ; bool bBackgroundCompilation = false ; FRayTracingPipelineStateRHIRef BasePipeline ; const FRHIShaderBindingLayout* ShaderBindingLayout = nullptr ; const TArrayView<FRHIRayTracingShader*>&)",
    "insertText": "GetRayGenTable()"
  },
  {
    "label": "ComputeShaderTableHash()",
    "kind": "Method",
    "detail": "Function (RayGenTable = InRayGenShaders ; RayGenHash = Hash ? Hash :)",
    "insertText": "ComputeShaderTableHash(InRayGenShaders)"
  },
  {
    "label": "SetMissShaderTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMissShaderTable(const TArrayView<FRHIRayTracingShader*>& InMissShaders, uint64 Hash = 0)"
  },
  {
    "label": "ComputeShaderTableHash()",
    "kind": "Method",
    "detail": "Function (MissTable = InMissShaders ; MissHash = Hash ? Hash :)",
    "insertText": "ComputeShaderTableHash(InMissShaders)"
  },
  {
    "label": "SetHitGroupTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHitGroupTable(const TArrayView<FRHIRayTracingShader*>& InHitGroups, uint64 Hash = 0)"
  },
  {
    "label": "ComputeShaderTableHash()",
    "kind": "Method",
    "detail": "Function (HitGroupTable = InHitGroups ; HitGroupHash = Hash ? Hash :)",
    "insertText": "ComputeShaderTableHash(HitGroupTable)"
  },
  {
    "label": "SetCallableTable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCallableTable(const TArrayView<FRHIRayTracingShader*>& InCallableShaders, uint64 Hash = 0)"
  },
  {
    "label": "ComputeShaderTableHash()",
    "kind": "Method",
    "detail": "Function (CallableTable = InCallableShaders ; CallableHash = Hash ? Hash :)",
    "insertText": "ComputeShaderTableHash(CallableTable)"
  },
  {
    "label": "GetMaxLocalBindingDataSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetMaxLocalBindingDataSize()"
  },
  {
    "label": "FRHIGraphicsPipelineStateFallBack()",
    "kind": "Method",
    "detail": "Function (private : TArrayView<FRHIRayTracingShader*> RayGenTable ; TArrayView<FRHIRayTracingShader*> MissTable ; TArrayView<FRHIRayTracingShader*> HitGroupTable ; TArrayView<FRHIRayTracingShader*> CallableTable ; } ; class FRHIGraphicsPipelineStateFallBack : public FRHIGraphicsPipelineState { public :)",
    "insertText": "FRHIGraphicsPipelineStateFallBack()"
  },
  {
    "label": "FRHIGraphicsPipelineStateFallBack()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIGraphicsPipelineStateFallBack(const FGraphicsPipelineStateInitializer& Init) : Initializer(Init)"
  },
  {
    "label": "GetShader()",
    "kind": "Method",
    "detail": "Function (} FRHIGraphicsShader*)",
    "insertText": "GetShader(EShaderFrequency Frequency)"
  },
  {
    "label": "FRHIComputePipelineStateFallback()",
    "kind": "Method",
    "detail": "Function (default : return nullptr ; } } FGraphicsPipelineStateInitializer Initializer ; } ; class FRHIComputePipelineStateFallback : public FRHIComputePipelineState { public :)",
    "insertText": "FRHIComputePipelineStateFallback(FRHIComputeShader* InComputeShader) : FRHIComputePipelineState(InComputeShader)"
  },
  {
    "label": "RTACTION_MAKE_MASK()",
    "kind": "Method",
    "detail": "Function (} } ; enum class ERenderTargetActions : uint8 { LoadOpMask = 2,# define)",
    "insertText": "RTACTION_MAKE_MASK(Load, Store) (((uint8)ERenderTargetLoadAction::Load << (uint8)LoadOpMask) | (uint8)ERenderTargetStoreAction::Store) DontLoad_DontStore = RTACTION_MAKE_MASK(ENoAction, ENoAction), DontLoad_Store = RTACTION_MAKE_MASK(ENoAction, EStore), Clear_Store = RTACTION_MAKE_MASK(EClear, EStore), Load_Store = RTACTION_MAKE_MASK(ELoad, EStore), Clear_DontStore = RTACTION_MAKE_MASK(EClear, ENoAction), Load_DontStore = RTACTION_MAKE_MASK(ELoad, ENoAction), Clear_Resolve = RTACTION_MAKE_MASK(EClear, EMultisampleResolve), Load_Resolve = RTACTION_MAKE_MASK(ELoad, EMultisampleResolve)"
  },
  {
    "label": "MakeRenderTargetActions()",
    "kind": "Method",
    "detail": "Function (ERenderTargetActions)",
    "insertText": "MakeRenderTargetActions(ERenderTargetLoadAction Load, ERenderTargetStoreAction Store)"
  },
  {
    "label": "GetLoadAction()",
    "kind": "Method",
    "detail": "Function (} ERenderTargetLoadAction)",
    "insertText": "GetLoadAction(ERenderTargetActions Action)"
  },
  {
    "label": "GetStoreAction()",
    "kind": "Method",
    "detail": "Function (} ERenderTargetStoreAction)",
    "insertText": "GetStoreAction(ERenderTargetActions Action)"
  },
  {
    "label": "RTACTION_MAKE_MASK()",
    "kind": "Method",
    "detail": "Function (} enum class EDepthStencilTargetActions : uint8 { DepthMask = 4,# define)",
    "insertText": "RTACTION_MAKE_MASK(Depth, Stencil) (((uint8)ERenderTargetActions::Depth << (uint8)DepthMask) | (uint8)ERenderTargetActions::Stencil) DontLoad_DontStore = RTACTION_MAKE_MASK(DontLoad_DontStore, DontLoad_DontStore), DontLoad_StoreDepthStencil = RTACTION_MAKE_MASK(DontLoad_Store, DontLoad_Store), DontLoad_StoreStencilNotDepth = RTACTION_MAKE_MASK(DontLoad_DontStore, DontLoad_Store), ClearDepthStencil_StoreDepthStencil = RTACTION_MAKE_MASK(Clear_Store, Clear_Store), LoadDepthStencil_StoreDepthStencil = RTACTION_MAKE_MASK(Load_Store, Load_Store), LoadDepthNotStencil_StoreDepthNotStencil = RTACTION_MAKE_MASK(Load_Store, DontLoad_DontStore), LoadDepthNotStencil_DontStore = RTACTION_MAKE_MASK(Load_DontStore, DontLoad_DontStore), LoadDepthStencil_StoreStencilNotDepth = RTACTION_MAKE_MASK(Load_DontStore, Load_Store), ClearDepthStencil_DontStoreDepthStencil = RTACTION_MAKE_MASK(Clear_DontStore, Clear_DontStore), LoadDepthStencil_DontStoreDepthStencil = RTACTION_MAKE_MASK(Load_DontStore, Load_DontStore), ClearDepthStencil_StoreDepthNotStencil = RTACTION_MAKE_MASK(Clear_Store, Clear_DontStore), ClearDepthStencil_StoreStencilNotDepth = RTACTION_MAKE_MASK(Clear_DontStore, Clear_Store), ClearDepthStencil_ResolveDepthNotStencil = RTACTION_MAKE_MASK(Clear_Resolve, Clear_DontStore), ClearDepthStencil_ResolveStencilNotDepth = RTACTION_MAKE_MASK(Clear_DontStore, Clear_Resolve), LoadDepthClearStencil_StoreDepthStencil = RTACTION_MAKE_MASK(Load_Store, Clear_Store), ClearStencilDontLoadDepth_StoreStencilNotDepth = RTACTION_MAKE_MASK(DontLoad_DontStore, Clear_Store)"
  },
  {
    "label": "MakeDepthStencilTargetActions()",
    "kind": "Method",
    "detail": "Function (EDepthStencilTargetActions)",
    "insertText": "MakeDepthStencilTargetActions(const ERenderTargetActions Depth, const ERenderTargetActions Stencil)"
  },
  {
    "label": "GetDepthActions()",
    "kind": "Method",
    "detail": "Function (} ERenderTargetActions)",
    "insertText": "GetDepthActions(EDepthStencilTargetActions Action)"
  },
  {
    "label": "GetStencilActions()",
    "kind": "Method",
    "detail": "Function (} ERenderTargetActions)",
    "insertText": "GetStencilActions(EDepthStencilTargetActions Action)"
  },
  {
    "label": "FResolveRect()",
    "kind": "Method",
    "detail": "Function (} struct FResolveRect { int32 X1 ; int32 Y1 ; int32 X2 ; int32 Y2 ;)",
    "insertText": "FResolveRect(int32 InX1 = -1, int32 InY1 = -1, int32 InX2 = -1, int32 InY2 = -1) : X1(InX1) , Y1(InY1) , X2(InX2) , Y2(InY2)"
  },
  {
    "label": "FResolveRect()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolveRect(FIntRect Other) : X1(Other.Min.X) , Y1(Other.Min.Y) , X2(Other.Max.X) , Y2(Other.Max.Y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(FResolveRect Other)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIRenderPassInfo(const FRHIRenderPassInfo&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRHIRenderPassInfo&)",
    "insertText": "operator(const FRHIRenderPassInfo&)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIRenderPassInfo(FRHITexture* ColorRT, ERenderTargetActions ColorAction, FRHITexture* ResolveRT = nullptr, uint8 InMipIndex = 0, int32 InArraySlice = -1)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (ColorRenderTargets [ 0 ] . RenderTarget = ColorRT ; ColorRenderTargets [ 0 ] . ResolveTarget = ResolveRT ; ColorRenderTargets [ 0 ] . ArraySlice = InArraySlice ; ColorRenderTargets [ 0 ] . MipIndex = InMipIndex ; ColorRenderTargets [ 0 ] . Action = ColorAction ; })",
    "insertText": "FRHIRenderPassInfo(int32 NumColorRTs, FRHITexture* ColorRTs[], ERenderTargetActions ColorAction)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (ColorRenderTargets [ Index ] . RenderTarget = ColorRTs [ Index ] ; ColorRenderTargets [ Index ] . ArraySlice = - 1 ; ColorRenderTargets [ Index ] . Action = ColorAction ; } DepthStencilRenderTarget . DepthStencilTarget = nullptr ; DepthStencilRenderTarget . Action = EDepthStencilTargetActions::DontLoad_DontStore ; DepthStencilRenderTarget . ExclusiveDepthStencil = FExclusiveDepthStencil::DepthNop_StencilNop ; DepthStencilRenderTarget . ResolveTarget = nullptr ; })",
    "insertText": "FRHIRenderPassInfo(int32 NumColorRTs, FRHITexture* ColorRTs[], ERenderTargetActions ColorAction, FRHITexture* ResolveTargets[])"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (ColorRenderTargets [ Index ] . RenderTarget = ColorRTs [ Index ] ; ColorRenderTargets [ Index ] . ResolveTarget = ResolveTargets [ Index ] ; ColorRenderTargets [ Index ] . ArraySlice = - 1 ; ColorRenderTargets [ Index ] . MipIndex = 0 ; ColorRenderTargets [ Index ] . Action = ColorAction ; } DepthStencilRenderTarget . DepthStencilTarget = nullptr ; DepthStencilRenderTarget . Action = EDepthStencilTargetActions::DontLoad_DontStore ; DepthStencilRenderTarget . ExclusiveDepthStencil = FExclusiveDepthStencil::DepthNop_StencilNop ; DepthStencilRenderTarget . ResolveTarget = nullptr ; })",
    "insertText": "FRHIRenderPassInfo(int32 NumColorRTs, FRHITexture* ColorRTs[], ERenderTargetActions ColorAction, FRHITexture* DepthRT, EDepthStencilTargetActions DepthActions, FExclusiveDepthStencil InEDS = FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ColorRenderTargets [ Index ] . RenderTarget = ColorRTs [ Index ] ; ColorRenderTargets [ Index ] . ResolveTarget = nullptr ; ColorRenderTargets [ Index ] . ArraySlice = - 1 ; ColorRenderTargets [ Index ] . MipIndex = 0 ; ColorRenderTargets [ Index ] . Action = ColorAction ; })",
    "insertText": "check(DepthRT)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (DepthStencilRenderTarget . DepthStencilTarget = DepthRT ; DepthStencilRenderTarget . ResolveTarget = nullptr ; DepthStencilRenderTarget . Action = DepthActions ; DepthStencilRenderTarget . ExclusiveDepthStencil = InEDS ; })",
    "insertText": "FRHIRenderPassInfo(int32 NumColorRTs, FRHITexture* ColorRTs[], ERenderTargetActions ColorAction, FRHITexture* ResolveRTs[], FRHITexture* DepthRT, EDepthStencilTargetActions DepthActions, FRHITexture* ResolveDepthRT, FExclusiveDepthStencil InEDS = FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (ColorRenderTargets [ Index ] . RenderTarget = ColorRTs [ Index ] ; ColorRenderTargets [ Index ] . ResolveTarget = ResolveRTs [ Index ] ; ColorRenderTargets [ Index ] . ArraySlice = - 1 ; ColorRenderTargets [ Index ] . MipIndex = 0 ; ColorRenderTargets [ Index ] . Action = ColorAction ; })",
    "insertText": "check(!ResolveDepthRT || ResolveDepthRT->IsMultisampled())"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (DepthStencilRenderTarget . DepthStencilTarget = DepthRT ; DepthStencilRenderTarget . ResolveTarget = ResolveDepthRT ; DepthStencilRenderTarget . Action = DepthActions ; DepthStencilRenderTarget . ExclusiveDepthStencil = InEDS ; })",
    "insertText": "FRHIRenderPassInfo(FRHITexture* DepthRT, EDepthStencilTargetActions DepthActions, FRHITexture* ResolveDepthRT = nullptr, FExclusiveDepthStencil InEDS = FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (DepthStencilRenderTarget . DepthStencilTarget = DepthRT ; DepthStencilRenderTarget . ResolveTarget = ResolveDepthRT ; DepthStencilRenderTarget . Action = DepthActions ; DepthStencilRenderTarget . ExclusiveDepthStencil = InEDS ; })",
    "insertText": "FRHIRenderPassInfo(FRHITexture* DepthRT, uint32 InNumOcclusionQueries, EDepthStencilTargetActions DepthActions, FRHITexture* ResolveDepthRT = nullptr, FExclusiveDepthStencil InEDS = FExclusiveDepthStencil::DepthWrite_StencilWrite) : NumOcclusionQueries(InNumOcclusionQueries)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (DepthStencilRenderTarget . DepthStencilTarget = DepthRT ; DepthStencilRenderTarget . ResolveTarget = ResolveDepthRT ; DepthStencilRenderTarget . Action = DepthActions ; DepthStencilRenderTarget . ExclusiveDepthStencil = InEDS ; })",
    "insertText": "FRHIRenderPassInfo(FRHITexture* ColorRT, ERenderTargetActions ColorAction, FRHITexture* DepthRT, EDepthStencilTargetActions DepthActions, FExclusiveDepthStencil InEDS = FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (DepthStencilRenderTarget . DepthStencilTarget = DepthRT ; DepthStencilRenderTarget . ResolveTarget = nullptr ; DepthStencilRenderTarget . Action = DepthActions ; DepthStencilRenderTarget . ExclusiveDepthStencil = InEDS ;)",
    "insertText": "Memzero(&ColorRenderTargets[1], sizeof(FColorEntry) * (MaxSimultaneousRenderTargets - 1))"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIRenderPassInfo(FRHITexture* ColorRT, ERenderTargetActions ColorAction, FRHITexture* ResolveColorRT, FRHITexture* DepthRT, EDepthStencilTargetActions DepthActions, FRHITexture* ResolveDepthRT, FExclusiveDepthStencil InEDS = FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "FRHIRenderPassInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIRenderPassInfo(FRHITexture* ColorRT, ERenderTargetActions ColorAction, FRHITexture* ResolveColorRT, FRHITexture* DepthRT, EDepthStencilTargetActions DepthActions, FRHITexture* ResolveDepthRT, FRHITexture* InShadingRateTexture, EVRSRateCombiner InShadingRateTextureCombiner, FExclusiveDepthStencil InEDS = FExclusiveDepthStencil::DepthWrite_StencilWrite)"
  },
  {
    "label": "GetNumColorRenderTargets()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumColorRenderTargets()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ColorIndex = 0 ;)",
    "insertText": "for(; ColorIndex < MaxSimultaneousRenderTargets; ++ColorIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FColorEntry& Entry = ColorRenderTargets [ ColorIndex ] ;)",
    "insertText": "if(!Entry.RenderTarget)"
  },
  {
    "label": "ExtractRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (break ; } } return ColorIndex ; } FGraphicsPipelineRenderTargetsInfo)",
    "insertText": "ExtractRenderTargetsInfo()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineRenderTargetsInfo RenderTargetsInfo ; RenderTargetsInfo . NumSamples = 1 ; int32 RenderTargetIndex = 0 ;)",
    "insertText": "for(; RenderTargetIndex < MaxSimultaneousRenderTargets; ++RenderTargetIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FRHITexture* RenderTarget = ColorRenderTargets [ RenderTargetIndex ] . RenderTarget ;)",
    "insertText": "if(!RenderTarget)"
  },
  {
    "label": "RenderTargetIndex()",
    "kind": "Method",
    "detail": "Function (break ; } RenderTargetsInfo . RenderTargetFormats [)",
    "insertText": "RenderTargetIndex(uint8)RenderTarget->GetFormat()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RenderTargetsInfo . RenderTargetFormats [ RenderTargetIndex ] = PF_Unknown ; })",
    "insertText": "if(DepthStencilRenderTarget.DepthStencilTarget)"
  },
  {
    "label": "GetDepthActions()",
    "kind": "Method",
    "detail": "Function (} else { RenderTargetsInfo . DepthStencilTargetFormat = PF_Unknown ; } const ERenderTargetActions DepthActions =)",
    "insertText": "GetDepthActions(DepthStencilRenderTarget.Action)"
  },
  {
    "label": "GetStencilActions()",
    "kind": "Method",
    "detail": "Function (const ERenderTargetActions StencilActions =)",
    "insertText": "GetStencilActions(DepthStencilRenderTarget.Action)"
  },
  {
    "label": "GetLoadAction()",
    "kind": "Method",
    "detail": "Function (RenderTargetsInfo . DepthTargetLoadAction =)",
    "insertText": "GetLoadAction(DepthActions)"
  },
  {
    "label": "GetStoreAction()",
    "kind": "Method",
    "detail": "Function (RenderTargetsInfo . DepthTargetStoreAction =)",
    "insertText": "GetStoreAction(DepthActions)"
  },
  {
    "label": "GetLoadAction()",
    "kind": "Method",
    "detail": "Function (RenderTargetsInfo . StencilTargetLoadAction =)",
    "insertText": "GetLoadAction(StencilActions)"
  },
  {
    "label": "GetStoreAction()",
    "kind": "Method",
    "detail": "Function (RenderTargetsInfo . StencilTargetStoreAction =)",
    "insertText": "GetStoreAction(StencilActions)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RenderTargetsInfo . DepthStencilAccess = DepthStencilRenderTarget . ExclusiveDepthStencil ; RenderTargetsInfo . MultiViewCount = MultiViewCount ; RenderTargetsInfo . bHasFragmentDensityAttachment = ShadingRateTexture ! = nullptr ; return RenderTargetsInfo ; } #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) RHI_API void Validate()"
  },
  {
    "label": "ConvertToRenderTargetsInfo()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "ConvertToRenderTargetsInfo(FRHISetRenderTargetsInfo& OutRTInfo)"
  },
  {
    "label": "FRHITextureSRVCreateInfo()",
    "kind": "Method",
    "detail": "Function (} ; enum ERHITextureSRVOverrideSRGBType : uint8 { SRGBO_Default,SRGBO_ForceDisable,} ; struct FRHITextureSRVCreateInfo {)",
    "insertText": "FRHITextureSRVCreateInfo(uint8 InMipLevel = 0u, uint8 InNumMipLevels = 1u, EPixelFormat InFormat = PF_Unknown) : Format(InFormat) , MipLevel(InMipLevel) , NumMipLevels(InNumMipLevels) , SRGBOverride(SRGBO_Default) , FirstArraySlice(0) , NumArraySlices(0)"
  },
  {
    "label": "FRHITextureSRVCreateInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITextureSRVCreateInfo(uint8 InMipLevel, uint8 InNumMipLevels, uint16 InFirstArraySlice, uint16 InNumArraySlices, EPixelFormat InFormat = PF_Unknown) : Format(InFormat) , MipLevel(InMipLevel) , NumMipLevels(InNumMipLevels) , SRGBOverride(SRGBO_Default) , FirstArraySlice(InFirstArraySlice) , NumArraySlices(InNumArraySlices)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat Format ; uint8 MipLevel ; uint8 NumMipLevels ; ERHITextureSRVOverrideSRGBType SRGBOverride ; uint16 FirstArraySlice ; uint16 NumArraySlices ; ERHITextureMetaDataAccess MetaData = ERHITextureMetaDataAccess::None ; TOptional<ETextureDimension> DimensionOverride ; bool)",
    "insertText": "operator(const FRHITextureSRVCreateInfo& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRHITextureSRVCreateInfo& Info)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "uint32(Info.Format) | uint32(Info.MipLevel) << 8 | uint32(Info.NumMipLevels) << 16 | uint32(Info.SRGBOverride)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, uint32(Info.FirstArraySlice) | uint32(Info.NumArraySlices) << 16)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, Info.DimensionOverride.IsSet() ? uint32(*Info.DimensionOverride) : MAX_uint32)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, uint32(Info.MetaData))"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "Validate(const FRHITextureDesc& TextureDesc, const FRHITextureSRVCreateInfo& TextureSRVDesc, const TCHAR* TextureName, bool bFatal)"
  },
  {
    "label": "FRHITextureUAVCreateInfo()",
    "kind": "Method",
    "detail": "Function (} ; struct FRHITextureUAVCreateInfo { public :)",
    "insertText": "FRHITextureUAVCreateInfo()"
  },
  {
    "label": "FRHITextureUAVCreateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHITextureUAVCreateInfo(uint8 InMipLevel, EPixelFormat InFormat = PF_Unknown, uint16 InFirstArraySlice = 0, uint16 InNumArraySlices = 0) : Format(InFormat) , MipLevel(InMipLevel) , FirstArraySlice(InFirstArraySlice) , NumArraySlices(InNumArraySlices)"
  },
  {
    "label": "FRHITextureUAVCreateInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHITextureUAVCreateInfo(ERHITextureMetaDataAccess InMetaData) : MetaData(InMetaData)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRHITextureUAVCreateInfo& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRHITextureUAVCreateInfo& Info)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "uint32(Info.Format) | uint32(Info.MipLevel) << 8 | uint32(Info.FirstArraySlice)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, uint32(Info.NumArraySlices) | uint32(Info.MetaData) << 16)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRHIBufferCreateInfo& Other)"
  },
  {
    "label": "FRHIBufferSRVCreateInfo()",
    "kind": "Method",
    "detail": "Function (} uint32 Size = 1 ; uint32 Stride = 1 ; EBufferUsageFlags Usage = BUF_None ; } ; struct FRHIBufferSRVCreateInfo {)",
    "insertText": "FRHIBufferSRVCreateInfo()"
  },
  {
    "label": "FRHIBufferSRVCreateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIBufferSRVCreateInfo(EPixelFormat InFormat) : Format(InFormat)"
  },
  {
    "label": "FRHIBufferSRVCreateInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIBufferSRVCreateInfo(uint32 InStartOffsetBytes, uint32 InNumElements) : StartOffsetBytes(InStartOffsetBytes) , NumElements(InNumElements)"
  },
  {
    "label": "FRHIBufferSRVCreateInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIBufferSRVCreateInfo(FRHIRayTracingScene* InRayTracingScene, uint32 InStartOffsetBytes) : StartOffsetBytes(InStartOffsetBytes) , RayTracingScene(InRayTracingScene)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRHIBufferSRVCreateInfo& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRHIBufferSRVCreateInfo& Desc)"
  },
  {
    "label": "FRHIBufferUAVCreateInfo()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat Format = PF_Unknown ; uint32 StartOffsetBytes = 0 ; uint32 NumElements = UINT32_MAX ; FRHIRayTracingScene* RayTracingScene = nullptr ; } ; struct FRHIBufferUAVCreateInfo {)",
    "insertText": "FRHIBufferUAVCreateInfo()"
  },
  {
    "label": "FRHIBufferUAVCreateInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRHIBufferUAVCreateInfo(EPixelFormat InFormat) : Format(InFormat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FRHIBufferUAVCreateInfo& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FRHIBufferUAVCreateInfo& Info)"
  },
  {
    "label": "GetOrCreateUAV()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat Format = PF_Unknown ; bool bSupportsAtomicCounter = false ; bool bSupportsAppendBuffer = false ; } ; class FRHITextureViewCache { public : FRHIUnorderedAccessView*)",
    "insertText": "GetOrCreateUAV(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const FRHITextureUAVCreateInfo& CreateInfo)"
  },
  {
    "label": "GetOrCreateSRV()",
    "kind": "Method",
    "detail": "Function (FRHIShaderResourceView*)",
    "insertText": "GetOrCreateSRV(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const FRHITextureSRVCreateInfo& CreateInfo)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) RHI_API void SetDebugName(FRHICommandListBase& RHICmdList, const TCHAR* DebugName)"
  },
  {
    "label": "SetDebugName()",
    "kind": "Method",
    "detail": "Function (# else void)",
    "insertText": "SetDebugName(FRHICommandListBase& RHICmdList, const TCHAR* DebugName)"
  },
  {
    "label": "GetOrCreateUAV()",
    "kind": "Method",
    "detail": "Function (} # endif private : TArray<TPair<FRHITextureUAVCreateInfo,FUnorderedAccessViewRHIRef>,TInlineAllocator<1>> UAVs ; TArray<TPair<FRHITextureSRVCreateInfo,FShaderResourceViewRHIRef>,TInlineAllocator<1>> SRVs ; } ; class FRHIBufferViewCache { public : FRHIUnorderedAccessView*)",
    "insertText": "GetOrCreateUAV(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, const FRHIBufferUAVCreateInfo& CreateInfo)"
  },
  {
    "label": "GetOrCreateSRV()",
    "kind": "Method",
    "detail": "Function (FRHIShaderResourceView*)",
    "insertText": "GetOrCreateSRV(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, const FRHIBufferSRVCreateInfo& CreateInfo)"
  },
  {
    "label": "NumItems()",
    "kind": "Method",
    "detail": "Function (} # endif int32)",
    "insertText": "NumItems()"
  }
]