[
  {
    "label": "zero_arg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "zero_arg"
  },
  {
    "label": "nonzero_arg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nonzero_arg"
  },
  {
    "label": "void_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "void_result"
  },
  {
    "label": "nonvoid_result",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nonvoid_result"
  },
  {
    "label": "arg_count_trait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "arg_count_trait"
  },
  {
    "label": "result_trait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "result_trait"
  },
  {
    "label": "func_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "func_traits"
  },
  {
    "label": "func_kind_info",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "func_kind_info"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifndef FUNC_TRAITS_H_HWIWA6G0 # define FUNC_TRAITS_H_HWIWA6G0 # include \" rpc / detail / bool . h \" namespace rpc { namespace detail { template<int N> using is_zero = invoke<)",
    "insertText": "conditional(N == 0)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<int N,. . . Ts> using nth_type = invoke<std::tuple_element<N,std::tuple<Ts . . .>>> ; namespace tags { struct zero_arg { } ; struct nonzero_arg { } ; struct void_result { } ; struct nonvoid_result { } ; template<int N> struct arg_count_trait { typedef nonzero_arg type ; } ; template<> struct arg_count_trait<0> { typedef zero_arg type ; } ; template<T> struct result_trait { typedef nonvoid_result type ; } ; template<> struct result_trait<void> { typedef void_result type ; } ; } template<T> struct func_traits : func_traits<)",
    "insertText": "decltype(&T::operator())"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<C,R,. . . Args> struct func_traits<)",
    "insertText": "R(C::*)(Args...)> : func_traits<R (*)(Args...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<C,R,. . . Args> struct func_traits<)",
    "insertText": "R(C::*)(Args...) const> : func_traits<R (*)(Args...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<R,. . . Args> struct func_traits<)",
    "insertText": "R(*)(Args...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (using result_type = R ; using arg_count = std::integral_constant<std::size_t,)",
    "insertText": "sizeof(Args)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<C,R,. . . Args> struct func_kind_info<)",
    "insertText": "R(C::*)(Args...)> : func_kind_info<R (*)(Args...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} ; template<C,R,. . . Args> struct func_kind_info<)",
    "insertText": "R(C::*)(Args...) const> : func_kind_info<R (*)(Args...)"
  }
]