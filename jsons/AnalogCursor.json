[
  {
    "label": "FSlateApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateApplication"
  },
  {
    "label": "FSlateUser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateUser"
  },
  {
    "label": "FInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputEvent"
  },
  {
    "label": "FAnalogInputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalogInputEvent"
  },
  {
    "label": "FKeyEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyEvent"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAnalogCursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalogCursor"
  },
  {
    "label": "FAnalogCursor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GenericPlatform / ICursor . h \" # include \" Framework / Application / IInputProcessor . h \" class FSlateApplication ; class FSlateUser ; struct FInputEvent ; struct FAnalogInputEvent ; struct FKeyEvent ; struct FPointerEvent ; namespace AnalogCursorMode { enum Type { Accelerated,Direct,} ; } enum class EAnalogStick : uint8 { Left,Right,Max,} ; class FAnalogCursor : public IInputProcessor,public TSharedFromThis<FAnalogCursor> { public :)",
    "insertText": "FAnalogCursor()"
  },
  {
    "label": "FAnalogCursor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnalogCursor(const FAnalogCursor&)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const float DeltaTime, FSlateApplication& SlateApp, TSharedRef<ICursor> Cursor)"
  },
  {
    "label": "HandleKeyDownEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKeyDownEvent(FSlateApplication& SlateApp, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleKeyUpEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleKeyUpEvent(FSlateApplication& SlateApp, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "HandleAnalogInputEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAnalogInputEvent(FSlateApplication& SlateApp, const FAnalogInputEvent& InAnalogInputEvent)"
  },
  {
    "label": "HandleMouseMoveEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleMouseMoveEvent(FSlateApplication& SlateApp, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "GetOwnerUserIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetOwnerUserIndex()"
  },
  {
    "label": "SetMaxSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMaxSpeed(float NewMaxSpeed)"
  },
  {
    "label": "SetStickySlowdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStickySlowdown(float NewStickySlowdown)"
  },
  {
    "label": "SetDeadZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeadZone(float NewDeadZone)"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(AnalogCursorMode::Type NewMode)"
  },
  {
    "label": "IsRelevantInput()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsRelevantInput(const FInputEvent& InputEvent)"
  },
  {
    "label": "IsRelevantInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevantInput(const FKeyEvent& KeyEvent)"
  },
  {
    "label": "IsRelevantInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevantInput(const FAnalogInputEvent& AnalogInputEvent)"
  },
  {
    "label": "IsRelevantInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevantInput(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ClearAnalogValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAnalogValues()"
  },
  {
    "label": "UpdateCursorPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCursorPosition(FSlateApplication& SlateApp, TSharedRef<FSlateUser> SlateUser, const FVector2D& NewPosition, bool bForce = false)"
  },
  {
    "label": "CalculateTickedCursorPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "CalculateTickedCursorPosition(const float DeltaTime, FSlateApplication& SlateApp, TSharedPtr<FSlateUser> SlateUser)"
  },
  {
    "label": "GetAnalogValue()",
    "kind": "Method",
    "detail": "Function (FVector2D CurrentSpeed ; FVector2D CurrentOffset ; float Acceleration ; float MaxSpeed ; float StickySlowdown ; float DeadZone ; AnalogCursorMode::Type Mode ; private : FVector2D&)",
    "insertText": "GetAnalogValue(EAnalogStick Stick)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} FVector2D AnalogValues [ static_cast<)",
    "insertText": "uint8(EAnalogStick::Max)"
  }
]