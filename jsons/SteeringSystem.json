[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FSimpleSteeringConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" Math / Vector2D . h \" # include \" SteeringUtility . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION # endif namespace Chaos { enum class ESteerType : uint8 { SingleAngle,AngleRatio,Ackermann,} ; struct FSimpleSteeringConfig {)",
    "insertText": "FSimpleSteeringConfig() : SteeringType(ESteerType::AngleRatio) , AngleRatio(0.7f) , TrackWidth(1.8f) , WheelBase(3.8f)"
  },
  {
    "label": "FAckermannSim()",
    "kind": "Method",
    "detail": "Function (} ESteerType SteeringType ; float AngleRatio ; float TrackWidth ; float WheelBase ; float MaxSteeringAngle ; FGraph SpeedVsSteeringCurve ; } ; class FAckermannSim : public TVehicleSystem<FSimpleSteeringConfig> { public :)",
    "insertText": "FAckermannSim(const FSimpleSteeringConfig* SetupIn)"
  },
  {
    "label": "GetLeftHingeLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLeftHingeLocations(FVector2D& OutC1, FVector2D& OutP, FVector2D& OutC2)"
  },
  {
    "label": "GetRightHingeLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRightHingeLocations(FVector2D& OutC1, FVector2D& OutP, FVector2D& OutC2)"
  },
  {
    "label": "CalculateAkermannAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateAkermannAngle(float Input, float& OutSteerLeft, float& OutSteerRight)"
  },
  {
    "label": "GetMaxAckermanAngle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxAckermanAngle()"
  },
  {
    "label": "GetSteeringFromVelocity()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSteeringFromVelocity(float VelocityMPH)"
  },
  {
    "label": "GetSteeringAngle()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetSteeringAngle(float InNormSteering, float MaxSteeringAngle, float WheelSide)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (float OutSteeringAngle = 0 . f ;)",
    "insertText": "switch(Setup().SteeringType)"
  },
  {
    "label": "InNormSteering()",
    "kind": "Method",
    "detail": "Function (OutSteeringAngle =)",
    "insertText": "InNormSteering(OutsideWheel ? MaxSteeringAngle : MaxSteeringAngle * Setup().AngleRatio)"
  },
  {
    "label": "CalculateAkermannAngle()",
    "kind": "Method",
    "detail": "Function (} break ; case ESteerType::Ackermann : { float SteerLHS ; float SteerRHS ; Ackermann .)",
    "insertText": "CalculateAkermannAngle(-InNormSteering, SteerLHS, SteerRHS)"
  },
  {
    "label": "OutSteeringAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutSteeringAngle(WheelSide < 0.0f)"
  },
  {
    "label": "OutSteeringAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutSteeringAngle(MaxSteeringAngle / Ackermann.GetMaxAckermanAngle())"
  }
]