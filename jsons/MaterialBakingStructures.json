[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "FMaterialData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialData"
  },
  {
    "label": "FMaterialDataEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaterialDataEx"
  },
  {
    "label": "FPrimitiveData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimitiveData"
  },
  {
    "label": "FMeshData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshData"
  },
  {
    "label": "FBakeOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakeOutput"
  },
  {
    "label": "FBakeOutputEx",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBakeOutputEx"
  },
  {
    "label": "FPrimitiveData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / IntPoint . h \" # include \" Components / MeshComponent . h \" # include \" Components / SkinnedMeshComponent . h \" # include \" Engine / SkeletalMesh . h \" # include \" Engine / StaticMesh . h \" # include \" SceneTypes . h \" # include \" LightMap . h \" # include \" MaterialPropertyEx . h \" class UMaterialInterface ; struct FMeshDescription ; struct FMaterialData { UMaterialInterface* Material = nullptr ; TMap<EMaterialProperty,FIntPoint> PropertySizes ; bool bPerformBorderSmear = true ; bool bPerformShrinking = true ; bool bTangentSpaceNormal = false ; EBlendMode BlendMode = BLEND_Opaque ; FColor BackgroundColor = FColor::Magenta ; } ; struct FMaterialDataEx { UMaterialInterface* Material = nullptr ; TMap<FMaterialPropertyEx,FIntPoint> PropertySizes ; bool bPerformBorderSmear = true ; bool bPerformShrinking = true ; bool bTangentSpaceNormal = false ; EBlendMode BlendMode = BLEND_Opaque ; FColor BackgroundColor = FColor::Magenta ; } ; struct FPrimitiveData {)",
    "insertText": "FPrimitiveData(const FBoxSphereBounds& LocalBounds = FBoxSphereBounds(ForceInitToZero)) : LocalToWorld(FMatrix::Identity) , ActorPosition(ForceInitToZero) , WorldBounds(LocalBounds) , LocalBounds(LocalBounds) , PreSkinnedLocalBounds(LocalBounds) , CustomPrimitiveData(nullptr)"
  },
  {
    "label": "FPrimitiveData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimitiveData(const UStaticMesh* StaticMesh) : FPrimitiveData(StaticMesh->GetBounds())"
  },
  {
    "label": "FPrimitiveData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimitiveData(const USkeletalMesh* SkeletalMesh) : FPrimitiveData(SkeletalMesh->GetBounds())"
  },
  {
    "label": "FPrimitiveData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimitiveData(const UMeshComponent* MeshComponent) : LocalToWorld(MeshComponent->GetRenderMatrix()) , ActorPosition(MeshComponent->GetActorPositionForRenderer()) , WorldBounds(MeshComponent->Bounds) , LocalBounds(MeshComponent->GetLocalBounds()) , CustomPrimitiveData(&MeshComponent->GetCustomPrimitiveData())"
  },
  {
    "label": "GetPreSkinnedLocalBounds()",
    "kind": "Method",
    "detail": "Function (SkinnedMeshComponent ->)",
    "insertText": "GetPreSkinnedLocalBounds(PreSkinnedLocalBounds)"
  },
  {
    "label": "FBox2D()",
    "kind": "Method",
    "detail": "Function (} else { PreSkinnedLocalBounds = LocalBounds ; } } FMatrix LocalToWorld ; FVector ActorPosition ; FBoxSphereBounds WorldBounds ; FBoxSphereBounds LocalBounds ; FBoxSphereBounds PreSkinnedLocalBounds ; const FCustomPrimitiveData* CustomPrimitiveData ; } ; struct FMeshData { const FMeshDescription* MeshDescription = nullptr ; const UStaticMesh* Mesh = nullptr ; bool bMirrored = false ; uint32 VertexColorHash = 0 ; TArray<int32> MaterialIndices ; TArray<FVector2D> CustomTextureCoordinates ; FBox2D TextureCoordinateBox =)",
    "insertText": "FBox2D(FVector2D(0.0f, 0.0f), FVector2D(1.0f, 1.0f))"
  }
]