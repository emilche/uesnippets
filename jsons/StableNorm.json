[
  {
    "label": "stable_norm_kernel()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_STABLENORM_H # define EIGEN_STABLENORM_H namespace Eigen { namespace internal { template<ExpressionType,Scalar> void)",
    "insertText": "stable_norm_kernel(const ExpressionType& bl, Scalar& ssq, Scalar& scale, Scalar& invScale)"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (Scalar maxCoeff = bl .)",
    "insertText": "cwiseAbs().maxCoeff()"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (ssq = ssq*)",
    "insertText": "abs2(scale/maxCoeff)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar tmp =)",
    "insertText": "Scalar(1)"
  },
  {
    "label": "highest()",
    "kind": "Method",
    "detail": "Function (invScale = NumTraits<Scalar)",
    "insertText": "highest()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(maxCoeff>NumTraits<Scalar>::highest())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (scale = maxCoeff ; } else { scale = maxCoeff ; invScale = tmp ; } } else)",
    "insertText": "if(maxCoeff!=maxCoeff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (scale = maxCoeff ; })",
    "insertText": "if(scale>Scalar(0)) ssq += (bl*invScale).squaredNorm()"
  },
  {
    "label": "stable_norm_impl_inner_step()",
    "kind": "Method",
    "detail": "Function (} template<VectorType,RealScalar> void)",
    "insertText": "stable_norm_impl_inner_step(const VectorType &vec, RealScalar& ssq, RealScalar& scale, RealScalar& invScale)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (typedef VectorType::Scalar Scalar ; const Index blockSize = 4 0 9 6 ; typedef internal::nested_eval<VectorType,2>::type VectorTypeCopy ; typedef internal::remove_all<VectorTypeCopy>::type VectorTypeCopyClean ; const VectorTypeCopy)",
    "insertText": "copy(vec)"
  },
  {
    "label": "CanAlign()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "CanAlign((int(VectorTypeCopyClean::Flags)&DirectAccessBit) || (int(internal::evaluator<VectorTypeCopyClean>::Alignment)>0) ) && (blockSize*sizeof(Scalar)*2<EIGEN_STACK_ALLOCATION_LIMIT) && (EIGEN_MAX_STATIC_ALIGN_BYTES>0)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<CanAlign,Ref<const Matrix<Scalar,Dynamic,1,0,blockSize,1>,internal::evaluator<VectorTypeCopyClean>::Alignment>,VectorTypeCopyClean::ConstSegmentReturnType>::type SegmentWrapper ; Index n = vec .)",
    "insertText": "size()"
  },
  {
    "label": "first_default_aligned()",
    "kind": "Method",
    "detail": "Function (Index bi =)",
    "insertText": "first_default_aligned(copy)"
  },
  {
    "label": "stable_norm_impl()",
    "kind": "Method",
    "detail": "Function (} template<VectorType> VectorType::RealScalar)",
    "insertText": "stable_norm_impl(const VectorType &vec, typename enable_if<VectorType::IsVectorAtCompileTime>::type* = 0)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (typedef VectorType::RealScalar RealScalar ; RealScalar)",
    "insertText": "scale(0)"
  },
  {
    "label": "invScale()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "invScale(1)"
  },
  {
    "label": "ssq()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "ssq(0)"
  },
  {
    "label": "stable_norm_impl_inner_step()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stable_norm_impl_inner_step(vec, ssq, scale, invScale)"
  },
  {
    "label": "stable_norm_impl()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType> MatrixType::RealScalar)",
    "insertText": "stable_norm_impl(const MatrixType &mat, typename enable_if<!MatrixType::IsVectorAtCompileTime>::type* = 0)"
  },
  {
    "label": "blueNorm_impl()",
    "kind": "Method",
    "detail": "Function (} template<Derived> NumTraits<traits<Derived>::Scalar>::Real)",
    "insertText": "blueNorm_impl(const EigenBase<Derived>& _vec)"
  },
  {
    "label": "digits()",
    "kind": "Method",
    "detail": "Function (typedef Derived::RealScalar RealScalar ; using std::pow ; using std::sqrt ; using std::abs ; const int ibeta = std::numeric_limits<RealScalar>::radix ; const int it = NumTraits<RealScalar)",
    "insertText": "digits()"
  },
  {
    "label": "min_exponent()",
    "kind": "Method",
    "detail": "Function (const int iemin = NumTraits<RealScalar)",
    "insertText": "min_exponent()"
  },
  {
    "label": "max_exponent()",
    "kind": "Method",
    "detail": "Function (const int iemax = NumTraits<RealScalar)",
    "insertText": "max_exponent()"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar b1 =)",
    "insertText": "RealScalar(pow(RealScalar(ibeta),RealScalar(-((1-iemin)/2))))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar b2 =)",
    "insertText": "RealScalar(pow(RealScalar(ibeta),RealScalar((iemax + 1 - it)/2)))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar s1m =)",
    "insertText": "RealScalar(pow(RealScalar(ibeta),RealScalar((2-iemin)/2)))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar s2m =)",
    "insertText": "RealScalar(pow(RealScalar(ibeta),RealScalar(- ((iemax+it)/2))))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (const RealScalar eps =)",
    "insertText": "RealScalar(pow(double(ibeta), 1-it))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (const RealScalar relerr =)",
    "insertText": "sqrt(eps)"
  },
  {
    "label": "vec()",
    "kind": "Method",
    "detail": "Function (const Derived&)",
    "insertText": "vec(_vec.derived())"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar ab2 = b2 /)",
    "insertText": "RealScalar(n)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar asml =)",
    "insertText": "RealScalar(0)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (RealScalar ax =)",
    "insertText": "abs(iter.value())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(amed!=amed)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (abig =)",
    "insertText": "sqrt(abig)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (abig = abig / s2m ; amed =)",
    "insertText": "sqrt(amed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else return abig / s2m ; } else)",
    "insertText": "if(asml > RealScalar(0))"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (amed =)",
    "insertText": "sqrt(asml)"
  },
  {
    "label": "mini()",
    "kind": "Method",
    "detail": "Function (asml =)",
    "insertText": "mini(abig, amed)"
  },
  {
    "label": "maxi()",
    "kind": "Method",
    "detail": "Function (abig =)",
    "insertText": "maxi(abig, amed)"
  },
  {
    "label": "stableNorm()",
    "kind": "Method",
    "detail": "Function (} } template<Derived> NumTraits<internal::traits<Derived>::Scalar>::Real MatrixBase<Derived)",
    "insertText": "stableNorm()"
  },
  {
    "label": "blueNorm()",
    "kind": "Method",
    "detail": "Function (} template<Derived> NumTraits<internal::traits<Derived>::Scalar>::Real MatrixBase<Derived)",
    "insertText": "blueNorm()"
  },
  {
    "label": "hypotNorm()",
    "kind": "Method",
    "detail": "Function (} template<Derived> NumTraits<internal::traits<Derived>::Scalar>::Real MatrixBase<Derived)",
    "insertText": "hypotNorm()"
  }
]