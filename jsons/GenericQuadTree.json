[
  {
    "label": "TQuadTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TQuadTree"
  },
  {
    "label": "QuadNames",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "QuadNames"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogQuadTree, Log, Warning)"
  },
  {
    "label": "TQuadTree()",
    "kind": "Method",
    "detail": "Function (template<ElementType,int32 NodeCapacity = 4> class TQuadTree { typedef TQuadTree<ElementType,NodeCapacity> TreeType ; public :)",
    "insertText": "TQuadTree()"
  },
  {
    "label": "TQuadTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TQuadTree(const FBox2D& InBox, float InMinimumQuadSize = 100.f)"
  },
  {
    "label": "GetTreeBox()",
    "kind": "Method",
    "detail": "Function (const FBox2D&)",
    "insertText": "GetTreeBox()"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (template<ElementAllocatorType> void)",
    "insertText": "GetElements(const FBox2D& Box, TArray<ElementType, ElementAllocatorType>& ElementsOut)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Remove(const ElementType& Instance, const FBox2D& Box)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Duplicate(TreeType& OutDuplicate)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "TQuadTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TQuadTree(const TQuadTree&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TQuadTree&)",
    "insertText": "operator(const TQuadTree& Other)"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (private : enum QuadNames { TopLeft = 0,TopRight = 1,BottomLeft = 2,BottomRight = 3 } ; struct FNode { FBox2D Box ; ElementType Element ;)",
    "insertText": "FNode()"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FNode(const ElementType& InElement, const FBox2D& InBox) : Box(InBox) , Element(InElement)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, typename TQuadTree<ElementType, NodeCapacity>::FNode& Node)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Split()"
  },
  {
    "label": "GetIntersectingElements()",
    "kind": "Method",
    "detail": "Function (template<ElementAllocatorType> void)",
    "insertText": "GetIntersectingElements(const FBox2D& Box, TArray<ElementType, ElementAllocatorType>& ElementsOut)"
  },
  {
    "label": "RemoveNodeForElement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveNodeForElement(const ElementType& Element)"
  },
  {
    "label": "InsertElementRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertElementRecursive(const ElementType& Element, const FBox2D& Box, const TCHAR* DebugContext)"
  },
  {
    "label": "TQuadTree()",
    "kind": "Method",
    "detail": "Function (private : TArray<FNode> Nodes ; TreeType* SubTrees [ 4 ] = { nullptr } ; FBox2D TreeBox ; FVector2D Position ; float MinimumQuadSize ; bool bInternal ; } ; template<ElementType,int32 NodeCapacity> TQuadTree<ElementType,NodeCapacity)",
    "insertText": "TQuadTree(const TQuadTree& Other)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (Other .)",
    "insertText": "Duplicate(*this)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Ar<<Nodes ; bool SubTreeFlags [ 4 ] = { SubTrees [ 0 ] ! = nullptr,SubTrees [ 1 ] ! = nullptr,SubTrees [ 2 ] ! = nullptr,SubTrees [ 3 ] ! = nullptr } ; Ar<<SubTreeFlags [ 0 ]<<SubTreeFlags [ 1 ]<<SubTreeFlags [ 2 ]<<SubTreeFlags [ 3 ] ;)",
    "insertText": "for(int32 Idx = 0; Idx < 4; ++Idx)"
  },
  {
    "label": "TreeType()",
    "kind": "Method",
    "detail": "Function (SubTrees [ Idx ] = new)",
    "insertText": "TreeType(FBox2D(), MinimumQuadSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} SubTrees [ Idx ] ->)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "TQuadTree()",
    "kind": "Method",
    "detail": "Function (} } Ar<<TreeBox ; Ar<<Position ; Ar<<bInternal ; } template<ElementType,int32 NodeCapacity> TQuadTree<ElementType,NodeCapacity)",
    "insertText": "TQuadTree(const FBox2D& Box, float InMinimumQuadSize) : TreeBox(Box) , Position(Box.GetCenter()) , MinimumQuadSize(InMinimumQuadSize) , bInternal(false)"
  },
  {
    "label": "GetExtent()",
    "kind": "Method",
    "detail": "Function (const FVector2D Extent = TreeBox .)",
    "insertText": "GetExtent()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (const FVector2D XExtent =)",
    "insertText": "FVector2D(Extent.X, 0.f)"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (const FVector2D YExtent =)",
    "insertText": "FVector2D(0.f, Extent.Y)"
  },
  {
    "label": "TreeType()",
    "kind": "Method",
    "detail": "Function (const FVector2D C = Position ; const FVector2D TM = C + YExtent ; const FVector2D ML = C - XExtent ; const FVector2D MR = C + XExtent ; const FVector2D BM = C - YExtent ; const FVector2D BL = TreeBox . Min ; const FVector2D TR = TreeBox . Max ; SubTrees [ TopLeft ] = new)",
    "insertText": "TreeType(FBox2D(ML, TM), MinimumQuadSize)"
  },
  {
    "label": "TreeType()",
    "kind": "Method",
    "detail": "Function (SubTrees [ TopRight ] = new)",
    "insertText": "TreeType(FBox2D(C, TR), MinimumQuadSize)"
  },
  {
    "label": "TreeType()",
    "kind": "Method",
    "detail": "Function (SubTrees [ BottomLeft ] = new)",
    "insertText": "TreeType(FBox2D(BL, C), MinimumQuadSize)"
  },
  {
    "label": "TreeType()",
    "kind": "Method",
    "detail": "Function (SubTrees [ BottomRight ] = new)",
    "insertText": "TreeType(FBox2D(BM, MR), MinimumQuadSize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bInternal = true ; TArray<FNode> OverlappingNodes ;)",
    "insertText": "for(const FNode& Node : Nodes)"
  },
  {
    "label": "GetQuads()",
    "kind": "Method",
    "detail": "Function (TreeType* Quads [ 4 ] ; const int32 NumQuads =)",
    "insertText": "GetQuads(Node.Box, Quads)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Quads [ 0 ] -> Nodes .)",
    "insertText": "Add(Node)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} } Nodes = OverlappingNodes ; } template<ElementType,int32 NodeCapacity> void TQuadTree<ElementType,NodeCapacity)",
    "insertText": "Insert(const ElementType& Element, const FBox2D& Box, const TCHAR* DebugContext)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "if(!Box.Intersect(TreeBox))"
  },
  {
    "label": "InsertElementRecursive()",
    "kind": "Method",
    "detail": "Function (} # endif)",
    "insertText": "InsertElementRecursive(Element, Box, DebugContext)"
  },
  {
    "label": "GetQuads()",
    "kind": "Method",
    "detail": "Function (TreeType* Quads [ 4 ] ; const int32 NumQuads =)",
    "insertText": "GetQuads(Box, Quads)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (const bool bCanSplitTree = TreeBox .)",
    "insertText": "GetSize().SizeSquared() > FMath::Square(MinimumQuadSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "Add(FNode(Element, Box))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(NumQuads == 1)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(bInternal)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 ElementIdx = INDEX_NONE ;)",
    "insertText": "for(int32 NodeIdx = 0, NumNodes = Nodes.Num(); NodeIdx < NumNodes; ++NodeIdx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementIdx = NodeIdx ; break ; } })",
    "insertText": "if(ElementIdx != INDEX_NONE)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "RemoveAtSwap(ElementIdx, EAllowShrinking::No)"
  },
  {
    "label": "RemoveNodeForElement()",
    "kind": "Method",
    "detail": "Function (bElementRemoved =)",
    "insertText": "RemoveNodeForElement(Element)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (bElementRemoved = Quads [ QuadIndex ] ->)",
    "insertText": "Remove(Element, Box)"
  },
  {
    "label": "GetIntersectingElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetIntersectingElements(Box, ElementsOut)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (Quads [ QuadIndex ] ->)",
    "insertText": "GetElements(Box, ElementsOut)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ElementsOut .)",
    "insertText": "Reserve(ElementsOut.Num() + Nodes.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementsOut .)",
    "insertText": "Add(Node.Element)"
  },
  {
    "label": "GetQuads()",
    "kind": "Method",
    "detail": "Function (} } ; } template<ElementType,int32 NodeCapacity> int32 TQuadTree<ElementType,NodeCapacity)",
    "insertText": "GetQuads(const FBox2D& Box, TreeType* Quads[4])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 QuadCount = 0 ;)",
    "insertText": "if(bInternal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bNegX = Box . Min . X<= Position . X ; bool bNegY = Box . Min . Y<= Position . Y ; bool bPosX = Box . Max . X> = Position . X ; bool bPosY = Box . Max . Y> = Position . Y ;)",
    "insertText": "if(bNegX && bNegY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Quads [ QuadCount + + ] = SubTrees [ BottomLeft ] ; })",
    "insertText": "if(bPosX && bNegY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Quads [ QuadCount + + ] = SubTrees [ BottomRight ] ; })",
    "insertText": "if(bNegX && bPosY)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Quads [ QuadCount + + ] = SubTrees [ TopLeft ] ; })",
    "insertText": "if(bPosX && bPosY)"
  },
  {
    "label": "TreeType()",
    "kind": "Method",
    "detail": "Function (OutDuplicate . SubTrees [ TreeIdx ] = new)",
    "insertText": "TreeType(FBox2D(0, 0), MinimumQuadSize)"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (SubTree ->)",
    "insertText": "Duplicate(*OutDuplicate.SubTrees[TreeIdx])"
  }
]