[
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerSelectedKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSelectedKey"
  },
  {
    "label": "ITrackAreaHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITrackAreaHotspot"
  },
  {
    "label": "FTrackAreaViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackAreaViewModel"
  },
  {
    "label": "FChannelModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FChannelModel"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "STrackLane",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackLane"
  },
  {
    "label": "FChannelViewKeyCachedState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChannelViewKeyCachedState"
  },
  {
    "label": "SEQUENCER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCER_API"
  },
  {
    "label": "FChannelViewKeyCachedState()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Widgets / SCompoundWidget . h \" # include \" MVVM / Extensions / ITrackLaneExtension . h \" # include \" MVVM / Views / KeyRenderer . h \" # include \" MVVM / Views / STrackAreaLaneView . h \" # include \" MVVM / ViewModelPtr . h \" # include \" Templates / SharedPointer . h \" class FSequencer ; struct FSequencerSelectedKey ; namespace UE::Sequencer { struct ITrackAreaHotspot ; class FTrackAreaViewModel ; class FChannelModel ; class FSectionModel ; class STrackLane ; struct FChannelViewKeyCachedState { TWeakPtr<ITrackAreaHotspot> WeakHotspot ; ITrackAreaHotspot* RawHotspotDoNotUse = nullptr ; FFrameNumber ValidPlayRangeMin,ValidPlayRangeMax ; TRange<FFrameTime> VisibleRange ; FVector2D KeySizePx ; uint32 SelectionSerial ; uint32 SelectionPreviewHash ; bool bShowCurve ; bool bShowKeyBars ; bool bCollapseChildren ; bool bIsChannelHovered ;)",
    "insertText": "FChannelViewKeyCachedState()"
  },
  {
    "label": "FChannelViewKeyCachedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FChannelViewKeyCachedState(TRange<FFrameTime> InVisibleRange, TSharedPtr<ITrackAreaHotspot> Hotspot, FViewModelPtr Model, FSequencer* Sequencer)"
  },
  {
    "label": "CompareTo()",
    "kind": "Method",
    "detail": "Function (EViewDependentCacheFlags)",
    "insertText": "CompareTo(const FChannelViewKeyCachedState& Other)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SChannelView : public STrackAreaLaneView { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SChannelView)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FLinearColor, KeyBarColor) SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const FViewModelPtr& InViewModel, TSharedPtr<STrackAreaView> InTrackAreaView)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "DrawLane()",
    "kind": "Method",
    "detail": "Function (protected : int32)",
    "insertText": "DrawLane(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "CreateKeysUnderMouse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateKeysUnderMouse(const FVector2D& MousePosition, const FGeometry& AllottedGeometry, const TSet<FSequencerSelectedKey>& InPressedKeys, TArray<FSequencerSelectedKey>& OutKeys)"
  },
  {
    "label": "GetKeysUnderMouse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeysUnderMouse(const FVector2D& MousePosition, const FGeometry& AllottedGeometry, TArray<FSequencerSelectedKey>& OutKeys)"
  },
  {
    "label": "GetKeysAtPixelX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeysAtPixelX(float LocalMousePixelX, TArray<FSequencerSelectedKey>& OutKeys)"
  },
  {
    "label": "GetSection()",
    "kind": "Method",
    "detail": "Function (TViewModelPtr<FSectionModel>)",
    "insertText": "GetSection()"
  },
  {
    "label": "LegacyGetSequencer()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSequencer>)",
    "insertText": "LegacyGetSequencer()"
  }
]