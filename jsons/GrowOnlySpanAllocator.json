[
  {
    "label": "FGrowOnlySpanAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrowOnlySpanAllocator"
  },
  {
    "label": "FLinearAllocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinearAllocation"
  },
  {
    "label": "FGrowOnlySpanAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" class FGrowOnlySpanAllocator { public :)",
    "insertText": "FGrowOnlySpanAllocator() : MaxSize(0)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Allocate(int32 Num)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(int32 BaseOffset, int32 Num)"
  },
  {
    "label": "GetSparselyAllocatedSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSparselyAllocatedSize()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 AllocatedSize = MaxSize ;)",
    "insertText": "for(int32 i = 0; i < FreeSpans.Num(); i++)"
  },
  {
    "label": "GetMaxSize()",
    "kind": "Method",
    "detail": "Function (AllocatedSize - = FreeSpans [ i ] . Num ; } return AllocatedSize ; } int32)",
    "insertText": "GetMaxSize()"
  },
  {
    "label": "IsFree()",
    "kind": "Method",
    "detail": "Function (} # if DO_CHECK bool)",
    "insertText": "IsFree(int32 Index)"
  },
  {
    "label": "EndDeferMerges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndDeferMerges()"
  },
  {
    "label": "FLinearAllocation()",
    "kind": "Method",
    "detail": "Function (private : class FLinearAllocation { public :)",
    "insertText": "FLinearAllocation(int32 InStartOffset, int32 InNum) : StartOffset(InStartOffset), Num(InNum)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} int32 StartOffset ; int32 Num ; bool)",
    "insertText": "Contains(FLinearAllocation Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLinearAllocation& Other)"
  }
]