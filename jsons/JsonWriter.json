[
  {
    "label": "CharType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharType"
  },
  {
    "label": "PrintPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintPolicy"
  },
  {
    "label": "TJsonWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonWriter"
  },
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValue"
  },
  {
    "label": "ElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ElementType"
  },
  {
    "label": "TJsonStringWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonStringWriter"
  },
  {
    "label": "TJsonWriterFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TJsonWriterFactory"
  },
  {
    "label": "AppendEscapeJsonString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / JsonTypes . h \" # include \" Policies / PrettyJsonPrintPolicy . h \" # include \" Serialization / MemoryWriter . h \" template<StringType> StringType&)",
    "insertText": "AppendEscapeJsonString(StringType& AppendTo, const FString& StringVal)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (AppendTo + =)",
    "insertText": "TEXT(\"\\\"\")"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "TCHAR('\\n'): AppendTo += TEXT(\"\\\\n\")"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "TCHAR('\\t'): AppendTo += TEXT(\"\\\\t\")"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "TCHAR('\\b'): AppendTo += TEXT(\"\\\\b\")"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "TCHAR('\\f'): AppendTo += TEXT(\"\\\\f\")"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "TCHAR('\\r'): AppendTo += TEXT(\"\\\\r\")"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "TCHAR('\\\"'): AppendTo += TEXT(\"\\\\\\\"\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; default :)",
    "insertText": "if(*Char >= TCHAR(32))"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (AppendTo + =* Char ; } else { AppendTo .)",
    "insertText": "Appendf(TEXT(\"\\\\u%04x\"), *Char)"
  },
  {
    "label": "AppendEscapeJsonString()",
    "kind": "Method",
    "detail": "Function (FString Result ; return)",
    "insertText": "AppendEscapeJsonString(Result, StringVal)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} template<class CharType = TCHAR,class PrintPolicy = TPrettyJsonPrintPolicy<CharType>> class TJsonWriter { public : TSharedRef<TJsonWriter>)",
    "insertText": "Create(FArchive* const Stream, int32 InitialIndentLevel = 0)"
  },
  {
    "label": "TJsonWriter()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "TJsonWriter()"
  },
  {
    "label": "GetIndentLevel()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndentLevel()"
  },
  {
    "label": "GetCurrentElementType()",
    "kind": "Method",
    "detail": "Function (} EJson)",
    "insertText": "GetCurrentElementType()"
  },
  {
    "label": "WriteObjectStart()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteObjectStart()"
  },
  {
    "label": "WriteCommaIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteCommaIfNeeded()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PreviousTokenWritten != EJsonToken::None)"
  },
  {
    "label": "WriteLineTerminator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteLineTerminator(Stream)"
  },
  {
    "label": "WriteTabs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteTabs(Stream, IndentLevel)"
  },
  {
    "label": "WriteChar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WriteChar(Stream, CharType('{'))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (+ + IndentLevel ; Stack .)",
    "insertText": "Push(EJson::Object)"
  },
  {
    "label": "WriteObjectStart()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::CurlyOpen ; } template<IdentifierType> void)",
    "insertText": "WriteObjectStart(IdentifierType&& Identifier)"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteIdentifier(Forward<IdentifierType>(Identifier))"
  },
  {
    "label": "WriteObjectEnd()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::CurlyOpen ; } void)",
    "insertText": "WriteObjectEnd()"
  },
  {
    "label": "WriteChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteChar(Stream, CharType('}'))"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (Stack .)",
    "insertText": "Pop()"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::CurlyClose ; } void)",
    "insertText": "WriteArrayStart()"
  },
  {
    "label": "WriteChar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WriteChar(Stream, CharType('['))"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (+ + IndentLevel ; Stack .)",
    "insertText": "Push(EJson::Array)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::SquareOpen ; } template<IdentifierType> void)",
    "insertText": "WriteArrayStart(IdentifierType&& Identifier)"
  },
  {
    "label": "WriteSpace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteSpace(Stream)"
  },
  {
    "label": "WriteArrayEnd()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::SquareOpen ; } void)",
    "insertText": "WriteArrayEnd()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - IndentLevel ;)",
    "insertText": "if(PreviousTokenWritten == EJsonToken::SquareClose || PreviousTokenWritten == EJsonToken::CurlyClose || PreviousTokenWritten == EJsonToken::String)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(PreviousTokenWritten != EJsonToken::SquareOpen)"
  },
  {
    "label": "WriteChar()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "WriteChar(Stream, CharType(']'))"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::SquareClose ; } template<class FValue> void)",
    "insertText": "WriteValue(FValue Value)"
  },
  {
    "label": "WriteValueOnly()",
    "kind": "Method",
    "detail": "Function (} PreviousTokenWritten =)",
    "insertText": "WriteValueOnly(Value)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteValue(FStringView Value)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteValue(const FString& Value)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} template<class FValue,IdentifierType> void)",
    "insertText": "WriteValue(IdentifierType&& Identifier, FValue Value)"
  },
  {
    "label": "WriteValueOnly()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten =)",
    "insertText": "WriteValueOnly(MoveTemp(Value))"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} template<class ElementType,IdentifierType> void)",
    "insertText": "WriteValue(IdentifierType&& Identifier, const TArray<ElementType>& Array)"
  },
  {
    "label": "WriteArrayStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteArrayStart(Forward<IdentifierType>(Identifier))"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(Array[Idx])"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteValue(FStringView Identifier, const TCHAR* Value)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(Identifier, FStringView(Value))"
  },
  {
    "label": "WriteRawJSONValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteRawJSONValue(FStringView Identifier, FStringView Value)"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteIdentifier(Identifier)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(Stream, Value)"
  },
  {
    "label": "WriteNull()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::String ; } template<IdentifierType> void)",
    "insertText": "WriteNull(IdentifierType&& Identifier)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(Forward<IdentifierType>(Identifier), nullptr)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteValue(const TCHAR* Value)"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(FStringView(Value))"
  },
  {
    "label": "WriteRawJSONValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteRawJSONValue(FStringView Value)"
  },
  {
    "label": "WriteNull()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::String ; } void)",
    "insertText": "WriteNull()"
  },
  {
    "label": "WriteValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteValue(nullptr)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Close()"
  },
  {
    "label": "WriteIdentifierPrefix()",
    "kind": "Method",
    "detail": "Function (} template<IdentifierType> void)",
    "insertText": "WriteIdentifierPrefix(IdentifierType&& Identifier)"
  },
  {
    "label": "TJsonWriter()",
    "kind": "Method",
    "detail": "Function (PreviousTokenWritten = EJsonToken::Identifier ; } protected :)",
    "insertText": "TJsonWriter(FArchive* const InStream, int32 InitialIndentLevel ) : Stream( InStream ) , Stack() , PreviousTokenWritten(EJsonToken::None) , IndentLevel(InitialIndentLevel)"
  },
  {
    "label": "CanWriteValueWithoutIdentifier()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "CanWriteValueWithoutIdentifier()"
  },
  {
    "label": "CanWriteObjectWithoutIdentifier()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanWriteObjectWithoutIdentifier()"
  },
  {
    "label": "WriteChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteChar(Stream, CharType(','))"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "WriteIdentifier(const ANSICHAR* Identifier)"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringValue(FAnsiStringView(Identifier))"
  },
  {
    "label": "WriteChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteChar(Stream, CharType(':'))"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteIdentifier(const TCHAR* Identifier)"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringValue(FStringView(Identifier))"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteIdentifier(FStringView Identifier)"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringValue(Identifier)"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteIdentifier(const FText& Identifier)"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteIdentifier(Identifier.ToString())"
  },
  {
    "label": "WriteIdentifier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteIdentifier(const FString& Identifier)"
  },
  {
    "label": "WriteValueOnly()",
    "kind": "Method",
    "detail": "Function (} EJsonToken)",
    "insertText": "WriteValueOnly(bool Value)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(Stream, Value ? TEXTVIEW(\"true\") : TEXTVIEW(\"false\"))"
  },
  {
    "label": "WriteFloat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFloat(Stream, Value)"
  },
  {
    "label": "WriteDouble()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteDouble(Stream, Value)"
  },
  {
    "label": "WriteValueOnly()",
    "kind": "Method",
    "detail": "Function (} EJsonToken)",
    "insertText": "WriteValueOnly(int64 Value)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(Stream, WriteToString<32>(Value))"
  },
  {
    "label": "WriteValueOnly()",
    "kind": "Method",
    "detail": "Function (} EJsonToken)",
    "insertText": "WriteValueOnly(uint64 Value)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(Stream, TEXTVIEW(\"null\"))"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringValue(FStringView(Value))"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringValue(Value)"
  },
  {
    "label": "WriteChar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteChar(Stream, CharType('\"'))"
  },
  {
    "label": "WriteEscapedString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteEscapedString(String)"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteStringValue(FStringView String)"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteStringValue(const FString& String)"
  },
  {
    "label": "WriteStringValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStringValue(FStringView(String))"
  },
  {
    "label": "WriteEscapedString()",
    "kind": "Method",
    "detail": "Function (} template<InCharType> void)",
    "insertText": "WriteEscapedString(TStringView<InCharType> InView)"
  },
  {
    "label": "NeedsEscaping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsEscaping(InCharType Char)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "if(Char >= TCHAR(32))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 LongestRun = 2 0 4 8 ; int32 EndIndex = 0 ;)",
    "insertText": "for(; EndIndex < InView.Len() && EndIndex < LongestRun; ++EndIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "if(TStringView<InCharType> Blittable = InView.Left(EndIndex); !Blittable.IsEmpty())"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(Stream, Blittable)"
  },
  {
    "label": "RightChopInline()",
    "kind": "Method",
    "detail": "Function (} InView .)",
    "insertText": "RightChopInline(EndIndex)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (TCHAR Char = InView [ EndIndex ] ;)",
    "insertText": "switch(Char)"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (continue ; case)",
    "insertText": "TCHAR('\\n'): PrintPolicy::WriteString(Stream, TEXTVIEW(\"\\\\n\"))"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (continue ; case)",
    "insertText": "TCHAR('\\t'): PrintPolicy::WriteString(Stream, TEXTVIEW(\"\\\\t\"))"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (continue ; case)",
    "insertText": "TCHAR('\\b'): PrintPolicy::WriteString(Stream, TEXTVIEW(\"\\\\b\"))"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (continue ; case)",
    "insertText": "TCHAR('\\f'): PrintPolicy::WriteString(Stream, TEXTVIEW(\"\\\\f\"))"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (continue ; case)",
    "insertText": "TCHAR('\\r'): PrintPolicy::WriteString(Stream, TEXTVIEW(\"\\\\r\"))"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (continue ; case)",
    "insertText": "TCHAR('\\\"'): PrintPolicy::WriteString(Stream, TEXTVIEW(\"\\\\\\\"\"))"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (break ; } else { TAnsiStringBuilder<8> Builder ; Builder .)",
    "insertText": "Appendf(\"\\\\u%04x\", Char)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(Stream, Builder.ToView())"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } FArchive* const Stream ; TArray<EJson> Stack ; EJsonToken PreviousTokenWritten ; int32 IndentLevel ; } ; template<class PrintPolicy = TPrettyJsonPrintPolicy<TCHAR>> class TJsonStringWriter : public TJsonWriter<TCHAR,PrintPolicy> { public : TSharedRef<TJsonStringWriter>)",
    "insertText": "Create(FString* const InStream, int32 InitialIndent = 0)"
  },
  {
    "label": "TJsonStringWriter()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "TJsonStringWriter()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutString ->)",
    "insertText": "Reset(Bytes.Num()/sizeof(TCHAR))"
  },
  {
    "label": "TCHAR()",
    "kind": "Method",
    "detail": "Function (TCHAR* Char = static_cast<)",
    "insertText": "TCHAR(static_cast<void*>(&Bytes[i]))"
  },
  {
    "label": "TJsonStringWriter()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "TJsonStringWriter(FString* const InOutString, int32 InitialIndent ) : TJsonWriter<TCHAR, PrintPolicy>(new FMemoryWriter(Bytes), InitialIndent) , Bytes() , OutString(InOutString)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} private : TArray<uint8> Bytes ; FString* OutString ; } ; template<class CharType = TCHAR,class PrintPolicy = TPrettyJsonPrintPolicy<CharType>> class TJsonWriterFactory { public : TSharedRef<TJsonWriter<CharType,PrintPolicy>>)",
    "insertText": "Create(FArchive* const Stream, int32 InitialIndent = 0)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<TJsonWriter<TCHAR,PrintPolicy>>)",
    "insertText": "Create(FString* const Stream, int32 InitialIndent = 0)"
  }
]