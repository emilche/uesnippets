[
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "DESKTOPWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DESKTOPWIDGETS_API"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Application / SlateWindowHelper . h \" class SEditableTextBox ; class SDirectoryPicker : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnDirectoryChanged, const FString&)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SDirectoryPicker) : _IsEnabled(true)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FString, Directory) SLATE_ARGUMENT(FString, File) SLATE_ARGUMENT(FText, Message) SLATE_ATTRIBUTE(bool, IsEnabled) SLATE_EVENT(FOnDirectoryChanged, OnDirectoryChanged) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetFilePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilePath()"
  },
  {
    "label": "GetDirectory()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDirectory()"
  },
  {
    "label": "OnDirectoryTextChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnDirectoryTextChanged(const FText& InDirectoryPath)"
  },
  {
    "label": "OnDirectoryTextCommited()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectoryTextCommited(const FText& InText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "GetFilePathText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFilePathText()"
  },
  {
    "label": "OpenPlatformDirectoryPicker()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPlatformDirectoryPicker(FString& OutDirectory, const FString& DefaultPath)"
  },
  {
    "label": "BrowseForDirectory()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "BrowseForDirectory()"
  }
]