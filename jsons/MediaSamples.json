[
  {
    "label": "IMediaAudioSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaAudioSample"
  },
  {
    "label": "IMediaBinarySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaBinarySample"
  },
  {
    "label": "IMediaOverlaySample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaOverlaySample"
  },
  {
    "label": "IMediaTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaTextureSample"
  },
  {
    "label": "FTimespan",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTimespan"
  },
  {
    "label": "TRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRange"
  },
  {
    "label": "FMediaSamples",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaSamples"
  },
  {
    "label": "FMediaSamples()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" IMediaSamples . h \" # include \" IMediaTextureSample . h \" # include \" IMediaTimeSource . h \" # include \" MediaSampleQueue . h \" # include \" Templates / SharedPointer . h \" class IMediaAudioSample ; class IMediaBinarySample ; class IMediaOverlaySample ; class IMediaTextureSample ; struct FTimespan ; template<ElementType> class TRange ; class FMediaSamples : public IMediaSamples { public : uint32 MaxNumberOfQueuedVideoSamples = 4 ; uint32 MaxNumberOfQueuedAudioSamples = 4 ; uint32 MaxNumberOfQueuedCaptionSamples = 4 ; uint32 MaxNumberOfQueuedSubtitlesSamples = 4 ; uint32 MaxNumberOfQueuedMetaDataSamples = 4 ;)",
    "insertText": "FMediaSamples(uint32 InMaxNumberOfQueuedAudioSamples = MaxNumberOfQueuedAudioSamples, uint32 InMaxNumberOfQueuedVideoSamples = MaxNumberOfQueuedVideoSamples, uint32 InMaxNumberOfQueuedCaptionSamples = MaxNumberOfQueuedCaptionSamples, uint32 InMaxNumberOfQueuedSubtitlesSamples = MaxNumberOfQueuedSubtitlesSamples, uint32 InMaxNumberOfQueuedMetaDataSamples = MaxNumberOfQueuedMetaDataSamples)"
  },
  {
    "label": "FMediaSamples()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FMediaSamples()"
  },
  {
    "label": "AddAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAudio(const TSharedRef<IMediaAudioSample, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (AudioSampleQueue .)",
    "insertText": "Enqueue(Sample)"
  },
  {
    "label": "AddCaption()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddCaption(const TSharedRef<IMediaOverlaySample, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "AddMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddMetadata(const TSharedRef<IMediaBinarySample, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "AddSubtitle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSubtitle(const TSharedRef<IMediaOverlaySample, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "AddVideo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddVideo(const TSharedRef<IMediaTextureSample, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "NumAudio()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumAudio()"
  },
  {
    "label": "NumCaption()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumCaption()"
  },
  {
    "label": "NumMetadataSamples()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumMetadataSamples()"
  },
  {
    "label": "NumSubtitleSamples()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumSubtitleSamples()"
  },
  {
    "label": "NumVideoSamples()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "NumVideoSamples()"
  },
  {
    "label": "FetchAudio()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "FetchAudio(TRange<FTimespan> TimeRange, TSharedPtr<IMediaAudioSample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchCaption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchCaption(TRange<FTimespan> TimeRange, TSharedPtr<IMediaOverlaySample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchMetadata(TRange<FTimespan> TimeRange, TSharedPtr<IMediaBinarySample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchSubtitle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchSubtitle(TRange<FTimespan> TimeRange, TSharedPtr<IMediaOverlaySample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchVideo(TRange<FTimespan> TimeRange, TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FlushSamples()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushSamples()"
  },
  {
    "label": "FetchAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchAudio(TRange<FMediaTimeStamp> TimeRange, TSharedPtr<IMediaAudioSample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchCaption()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchCaption(TRange<FMediaTimeStamp> TimeRange, TSharedPtr<IMediaOverlaySample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchMetadata()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchMetadata(TRange<FMediaTimeStamp> TimeRange, TSharedPtr<IMediaBinarySample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchSubtitle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchSubtitle(TRange<FMediaTimeStamp> TimeRange, TSharedPtr<IMediaOverlaySample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchVideo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FetchVideo(TRange<FMediaTimeStamp> TimeRange, TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "FetchBestVideoSampleForTimeRange()",
    "kind": "Method",
    "detail": "Function (EFetchBestSampleResult)",
    "insertText": "FetchBestVideoSampleForTimeRange(const TRange<FMediaTimeStamp>& TimeRange, TSharedPtr<IMediaTextureSample, ESPMode::ThreadSafe>& OutSample, bool bReverse, bool bConsistentResult)"
  },
  {
    "label": "PeekVideoSampleTime()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PeekVideoSampleTime(FMediaTimeStamp & TimeStamp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<IMediaTextureSample,ESPMode::ThreadSafe> Sample ;)",
    "insertText": "if(!VideoSampleQueue.Peek(Sample))"
  },
  {
    "label": "GetSampleTimes()",
    "kind": "Method",
    "detail": "Function (VideoSampleQueue .)",
    "insertText": "GetSampleTimes(TimeRange)"
  },
  {
    "label": "PeekAudioSampleTimeRanges()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PeekAudioSampleTimeRanges(TArray<TRange<FMediaTimeStamp>>& TimeRange)"
  },
  {
    "label": "DiscardVideoSamples()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DiscardVideoSamples(const TRange<FMediaTimeStamp>& TimeRange, bool bReverse)"
  },
  {
    "label": "DiscardAudioSamples()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DiscardAudioSamples(const TRange<FMediaTimeStamp>& TimeRange, bool bReverse)"
  },
  {
    "label": "DiscardCaptionSamples()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DiscardCaptionSamples(const TRange<FMediaTimeStamp>& TimeRange, bool bReverse)"
  },
  {
    "label": "DiscardSubtitleSamples()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DiscardSubtitleSamples(const TRange<FMediaTimeStamp>& TimeRange, bool bReverse)"
  },
  {
    "label": "DiscardMetadataSamples()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DiscardMetadataSamples(const TRange<FMediaTimeStamp>& TimeRange, bool bReverse)"
  },
  {
    "label": "PurgeOutdatedVideoSamples()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "PurgeOutdatedVideoSamples(const FMediaTimeStamp & ReferenceTime, bool bReversed, FTimespan MaxAge)"
  },
  {
    "label": "PurgeOutdatedSubtitleSamples()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PurgeOutdatedSubtitleSamples(const FMediaTimeStamp & ReferenceTime, bool bReversed, FTimespan MaxAge)"
  },
  {
    "label": "PurgeOutdatedCaptionSamples()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PurgeOutdatedCaptionSamples(const FMediaTimeStamp& ReferenceTime, bool bReversed, FTimespan MaxAge)"
  },
  {
    "label": "PurgeOutdatedMetadataSamples()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "PurgeOutdatedMetadataSamples(const FMediaTimeStamp& ReferenceTime, bool bReversed, FTimespan MaxAge)"
  },
  {
    "label": "CanReceiveVideoSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReceiveVideoSamples(uint32 Num)"
  },
  {
    "label": "CanReceiveAudioSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReceiveAudioSamples(uint32 Num)"
  },
  {
    "label": "CanReceiveSubtitleSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReceiveSubtitleSamples(uint32 Num)"
  },
  {
    "label": "CanReceiveCaptionSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReceiveCaptionSamples(uint32 Num)"
  },
  {
    "label": "CanReceiveMetadataSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReceiveMetadataSamples(uint32 Num)"
  }
]