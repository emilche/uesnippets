[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTransientDecalRenderData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransientDecalRenderData"
  },
  {
    "label": "FDBufferTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDBufferTextures"
  },
  {
    "label": "FSceneTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneTextures"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FDeferredDecalPassTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredDecalPassTextures"
  },
  {
    "label": "DECLARE_UNIFORM_BUFFER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderGraph . h \" # include \" SceneTextureParameters . h \" # include \" SceneView . h \" # include \" InstanceCulling / InstanceCullingContext . h \" # include \" Substrate / Substrate . h \" enum class EDecalRenderStage : uint8 ; enum class EDecalRenderTargetMode : uint8 ; struct FTransientDecalRenderData ; struct FDBufferTextures ; struct FSceneTextures ; class FViewInfo ;)",
    "insertText": "DECLARE_UNIFORM_BUFFER_STRUCT(FSceneUniformParameters, RENDERER_API) bool AreDecalsEnabled(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsDBufferEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDBufferEnabled(const FSceneViewFamily& ViewFamily, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FDecalPassUniformParameters, ) SHADER_PARAMETER_STRUCT(FSceneTextureUniformParameters, SceneTextures) SHADER_PARAMETER_STRUCT(FMobileSceneTextureUniformParameters, MobileSceneTextures) SHADER_PARAMETER_STRUCT(FSubstratePublicParameters, SubstratePublic) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<float4>, EyeAdaptationBuffer) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "GetDeferredDecalPassTextures()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FDecalPassUniformParameters> DecalPassUniformBuffer = nullptr ; FRDGTextureMSAA Depth ; FRDGTextureRef Color = nullptr ; FRDGTextureRef ScreenSpaceAO = nullptr ; FRDGTextureRef GBufferA = nullptr ; FRDGTextureRef GBufferB = nullptr ; FRDGTextureRef GBufferC = nullptr ; FRDGTextureRef GBufferE = nullptr ; FDBufferTextures* DBufferTextures = nullptr ; } ; FDeferredDecalPassTextures)",
    "insertText": "GetDeferredDecalPassTextures(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FSubstrateSceneData& SubstrateSceneData, const FSceneTextures& SceneTextures, FDBufferTextures* DBufferTextures, EDecalRenderStage DecalRenderStage)"
  },
  {
    "label": "AddDeferredDecalPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDeferredDecalPass(FRDGBuilder& GraphBuilder, FViewInfo& ViewInfo, TConstArrayView<FTransientDecalRenderData> VisibleDecals, const FDeferredDecalPassTextures& Textures, FInstanceCullingManager& InstanceCullingManager, EDecalRenderStage RenderStage)"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FDeferredDecalUniformParameters, ) SHADER_PARAMETER_TEXTURE(Texture2D, PreviousFrameNormal) SHADER_PARAMETER(int32, NormalReprojectionEnabled) SHADER_PARAMETER(float, NormalReprojectionThresholdLow) SHADER_PARAMETER(float, NormalReprojectionThresholdHigh) SHADER_PARAMETER(float, NormalReprojectionThresholdScaleHelper) SHADER_PARAMETER(FVector2f, NormalReprojectionJitter) END_SHADER_PARAMETER_STRUCT() TUniformBufferRef<FDeferredDecalUniformParameters> CreateDeferredDecalUniformBuffer(const FViewInfo& View)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FDeferredDecalPassParameters, ) SHADER_PARAMETER_STRUCT_INCLUDE(FViewShaderParameters, View) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FSceneUniformParameters, Scene) SHADER_PARAMETER_STRUCT_REF(FDeferredDecalUniformParameters, DeferredDecal) SHADER_PARAMETER_RDG_UNIFORM_BUFFER(FDecalPassUniformParameters, DecalPass) SHADER_PARAMETER_STRUCT_INCLUDE(FInstanceCullingDrawParams, InstanceCullingDrawParams) RENDER_TARGET_BINDING_SLOTS() END_SHADER_PARAMETER_STRUCT() void GetDeferredDecalRenderTargetsInfo( const FSceneTexturesConfig& Config, EDecalRenderTargetMode RenderTargetMode, FGraphicsPipelineRenderTargetsInfo& RenderTargetsInfo)"
  },
  {
    "label": "CollectDeferredDecalPassPSOInitializers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectDeferredDecalPassPSOInitializers(int32 PSOCollectorIndex, ERHIFeatureLevel::Type FeatureLevel, const FSceneTexturesConfig& SceneTexturesConfig, const FMaterial& Material, EDecalRenderStage DecalRenderStage, TArray<FPSOPrecacheData>& PSOInitializers)"
  },
  {
    "label": "GetDeferredDecalPassParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeferredDecalPassParameters(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FDeferredDecalPassTextures& DecalPassTextures, EDecalRenderStage DecalRenderStage, EDecalRenderTargetMode RenderTargetMode, FDeferredDecalPassParameters& PassParameters)"
  },
  {
    "label": "RenderMeshDecals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenderMeshDecals(FRDGBuilder& GraphBuilder, const FScene& Scene, FViewInfo& View, const FDeferredDecalPassTextures& DecalPassTextures, FInstanceCullingManager& InstanceCullingManager, EDecalRenderStage DecalRenderStage)"
  },
  {
    "label": "HasAnyDrawCommandDecalCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyDrawCommandDecalCount(EDecalRenderStage DecalRenderStage, FViewInfo& View)"
  },
  {
    "label": "ExtractNormalsForNextFrameReprojection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractNormalsForNextFrameReprojection(FRDGBuilder& GraphBuilder, const FSceneTextures& SceneTextures, const TArray<FViewInfo>& Views)"
  }
]