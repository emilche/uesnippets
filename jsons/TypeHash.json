[
  {
    "label": "MurmurFinalize32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / IsEnum . h \" # include \" Misc / Crc . h \" # include<stdint . h> # include<type_traits> namespace UE { namespace Private { uint32)",
    "insertText": "MurmurFinalize32(uint32 Hash)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash ^ = Hash>> 1 6 ; Hash* = 0 x85ebca6b ; Hash ^ = Hash>> 1 3 ; Hash* = 0 xc2b2ae35 ; Hash ^ = Hash>> 1 6 ; return Hash ; } } } [ [ nodiscard ] ] uint32)",
    "insertText": "HashCombine(uint32 A, uint32 C)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (uint32 B = 0 x9e3779b9 ; A + = B ; A - = B ; A - = C ;)",
    "insertText": "A(C>>13)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (B - = C ; B - = A ;)",
    "insertText": "B(A<<8)"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (C - = A ; C - = B ;)",
    "insertText": "C(B>>13)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (A - = B ; A - = C ;)",
    "insertText": "A(C>>12)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (B - = C ; B - = A ;)",
    "insertText": "B(A<<16)"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (C - = A ; C - = B ;)",
    "insertText": "C(B>>5)"
  },
  {
    "label": "A()",
    "kind": "Method",
    "detail": "Function (A - = B ; A - = C ;)",
    "insertText": "A(C>>3)"
  },
  {
    "label": "B()",
    "kind": "Method",
    "detail": "Function (B - = C ; B - = A ;)",
    "insertText": "B(A<<10)"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (C - = A ; C - = B ;)",
    "insertText": "C(B>>15)"
  },
  {
    "label": "PointerHash()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint32)",
    "insertText": "PointerHash(const void* Key)"
  },
  {
    "label": "UPTRINT()",
    "kind": "Method",
    "detail": "Function (const UPTRINT PtrInt = reinterpret_cast<)",
    "insertText": "UPTRINT(Key)"
  },
  {
    "label": "PointerHash()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] uint32)",
    "insertText": "PointerHash(const void* Key, uint32 C)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} template<ScalarType,std::enable_if_t<std::is_scalar_v<ScalarType>&& ! std::is_same_v<ScalarType,TCHAR*>&& ! std::is_same_v<ScalarType,const TCHAR*>>* = nullptr> [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHash(ScalarType Value)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(sizeof(ScalarType) == 16)"
  },
  {
    "label": "Low()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "Low(uint64)"
  },
  {
    "label": "High()",
    "kind": "Method",
    "detail": "Function (const uint64)",
    "insertText": "High(uint64)(Value >> 64)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(ScalarType) == 0, \"Unsupported integral type\")"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<ScalarType, double>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(ScalarType) == 0, \"Unsupported floating point type\")"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_pointer_v<ScalarType>)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(ScalarType) == 0, \"Unsupported scalar type\")"
  },
  {
    "label": "GetArrayHash()",
    "kind": "Method",
    "detail": "Function (} template<T> [ [ nodiscard ] ] uint32)",
    "insertText": "GetArrayHash(const T* Ptr, uint64 Size, uint32 PreviousHash = 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 Result = PreviousHash ;)",
    "insertText": "while(Size)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "HashCombineFast(Result, GetTypeHash(*Ptr))"
  },
  {
    "label": "GetTypeHashHelper()",
    "kind": "Method",
    "detail": "Function (+ + Ptr ; - - Size ; } return Result ; } template<T> [ [ nodiscard ] ] uint32)",
    "insertText": "GetTypeHashHelper(const T& V)"
  }
]