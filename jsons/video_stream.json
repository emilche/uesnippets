[
  {
    "label": "SendVideoStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SendVideoStream"
  },
  {
    "label": "Scenario",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scenario"
  },
  {
    "label": "VideoStreamPair",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamPair"
  },
  {
    "label": "ReceiveVideoStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveVideoStream"
  },
  {
    "label": "SendVideoStream()",
    "kind": "Method",
    "detail": "Function (# ifndef TEST_SCENARIO_VIDEO_STREAM_H_ # define TEST_SCENARIO_VIDEO_STREAM_H_ # include<memory> # include<string> # include<vector> # include \" rtc_base / synchronization / mutex . h \" # include \" test / fake_encoder . h \" # include \" test / fake_videorenderer . h \" # include \" test / frame_generator_capturer . h \" # include \" test / logging / log_writer . h \" # include \" test / scenario / call_client . h \" # include \" test / scenario / column_printer . h \" # include \" test / scenario / network_node . h \" # include \" test / scenario / scenario_config . h \" # include \" test / scenario / video_frame_matcher . h \" # include \" test / test_video_capturer . h \" namespace webrtc { namespace test { class SendVideoStream { public : ~)",
    "insertText": "SendVideoStream()"
  },
  {
    "label": "SendVideoStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendVideoStream(const SendVideoStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SendVideoStream&)",
    "insertText": "operator(const SendVideoStream&)"
  },
  {
    "label": "SetCaptureFramerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCaptureFramerate(int framerate)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (VideoSendStream::Stats)",
    "insertText": "GetStats()"
  },
  {
    "label": "StatsPrinter()",
    "kind": "Method",
    "detail": "Function (ColumnPrinter)",
    "insertText": "StatsPrinter()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "UpdateConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateConfig(std::function<void(VideoStreamConfig*)> modifier)"
  },
  {
    "label": "UpdateActiveLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateActiveLayers(std::vector<bool> active_layers)"
  },
  {
    "label": "UsingSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingSsrc(uint32_t ssrc)"
  },
  {
    "label": "UsingRtxSsrc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsingRtxSsrc(uint32_t ssrc)"
  },
  {
    "label": "SendVideoStream()",
    "kind": "Method",
    "detail": "Function (private : class Scenario ; class VideoStreamPair ; class ReceiveVideoStream ;)",
    "insertText": "SendVideoStream(CallClient* sender, VideoStreamConfig config, Transport* send_transport, VideoFrameMatcher* matcher)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex mutex_ ; std::vector<uint32_t> ssrcs_ ; std::vector<uint32_t> rtx_ssrcs_ ; VideoSendStream* send_stream_ = nullptr ; CallClient* const sender_ ; VideoStreamConfig config_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  },
  {
    "label": "ReceiveVideoStream()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<VideoBitrateAllocatorFactory> bitrate_allocator_factory_ ; std::unique_ptr<FrameGeneratorCapturer> video_capturer_ ; std::unique_ptr<ForwardingCapturedFrameTap> frame_tap_ ; int next_local_network_id_ = 0 ; int next_remote_network_id_ = 0 ; } ; class ReceiveVideoStream { public : ~)",
    "insertText": "ReceiveVideoStream()"
  },
  {
    "label": "ReceiveVideoStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceiveVideoStream(const ReceiveVideoStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ReceiveVideoStream&)",
    "insertText": "operator(const ReceiveVideoStream&)"
  },
  {
    "label": "ReceiveVideoStream()",
    "kind": "Method",
    "detail": "Function (private : class Scenario ; class VideoStreamPair ;)",
    "insertText": "ReceiveVideoStream(CallClient* receiver, VideoStreamConfig config, SendVideoStream* send_stream, size_t chosen_stream, Transport* feedback_transport, VideoFrameMatcher* matcher)"
  },
  {
    "label": "VideoStreamPair()",
    "kind": "Method",
    "detail": "Function (std::vector<VideoReceiveStreamInterface*> receive_streams_ ; FlexfecReceiveStream* flecfec_stream_ = nullptr ; FakeVideoRenderer fake_renderer_ ; std::vector<std::unique_ptr<rtc::VideoSinkInterface<VideoFrame>>> render_taps_ ; CallClient* const receiver_ ; const VideoStreamConfig config_ ; std::unique_ptr<VideoDecoderFactory> decoder_factory_ ; } ; class VideoStreamPair { public : ~)",
    "insertText": "VideoStreamPair()"
  },
  {
    "label": "VideoStreamPair()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoStreamPair(const VideoStreamPair&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VideoStreamPair&)",
    "insertText": "operator(const VideoStreamPair&)"
  },
  {
    "label": "send()",
    "kind": "Method",
    "detail": "Function (SendVideoStream*)",
    "insertText": "send()"
  }
]