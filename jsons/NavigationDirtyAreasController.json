[
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "ANavigationData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANavigationData"
  },
  {
    "label": "FNavigationDirtyElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyElement"
  },
  {
    "label": "FNavigationElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationElement"
  },
  {
    "label": "FNavigationDirtyArea",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyArea"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNavigationDirtyAreasController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNavigationDirtyAreasController"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_5 # include \" AI / Navigation / NavigationTypes . h \" # endif # include \" Containers / Array . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" Math / Box . h \" # include \" Templates / Function . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class UObject ; class ANavigationData ; struct FNavigationDirtyElement ; struct FNavigationElement ; struct FNavigationDirtyArea ; enum class ENavigationDirtyFlag : uint8 ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogNavigationDirtyArea, Warning, All)"
  },
  {
    "label": "ShouldReportOversizedDirtyArea()",
    "kind": "Method",
    "detail": "Function (struct FNavigationDirtyAreasController { float DirtyAreasUpdateFreq = 6 0 . f ; float DirtyAreasUpdateTime = 0 . f ; TArray<FNavigationDirtyArea> DirtyAreas ; uint8 bCanAccumulateDirtyAreas : 1 ; uint8 bUseWorldPartitionedDynamicMode : 1 ; # if ! UE_BUILD_SHIPPING uint8 bDirtyAreasReportedWhileAccumulationLocked : 1 ; private : uint8 bCanReportOversizedDirtyArea : 1 ; uint8 bNavigationBuildLocked : 1 ; float DirtyAreaWarningSizeThreshold = - 1 . f ; bool)",
    "insertText": "ShouldReportOversizedDirtyArea()"
  },
  {
    "label": "FNavigationDirtyAreasController()",
    "kind": "Method",
    "detail": "Function (# endif public :)",
    "insertText": "FNavigationDirtyAreasController()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "ForceRebuildOnNextTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceRebuildOnNextTick()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaSeconds, const TArray<ANavigationData*>& NavDataSet, bool bForceRebuilding = false)"
  },
  {
    "label": "AddArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArea(const FBox& NewArea, const ENavigationDirtyFlag Flags, const TFunction<const TSharedPtr<const FNavigationElement>()>& ElementProviderFunc = nullptr, const FNavigationDirtyElement* DirtyElement = nullptr, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "AddAreas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAreas(const TConstArrayView<FBox> NewAreas, const ENavigationDirtyFlag Flags, const TFunction<const TSharedPtr<const FNavigationElement>()>& ElementProviderFunc = nullptr, const FNavigationDirtyElement* DirtyElement = nullptr, const FName& DebugReason = NAME_None)"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "GetNumDirtyAreas()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumDirtyAreas()"
  },
  {
    "label": "OnNavigationBuildLocked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnNavigationBuildLocked()"
  },
  {
    "label": "OnNavigationBuildUnlocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNavigationBuildUnlocked()"
  },
  {
    "label": "SetUseWorldPartitionedDynamicMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseWorldPartitionedDynamicMode(bool bIsWPDynamic)"
  },
  {
    "label": "SetCanReportOversizedDirtyArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCanReportOversizedDirtyArea(const bool bCanReport)"
  },
  {
    "label": "SetDirtyAreaWarningSizeThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDirtyAreaWarningSizeThreshold(const float Threshold)"
  },
  {
    "label": "HadDirtyAreasReportedWhileAccumulationLocked()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "HadDirtyAreasReportedWhileAccumulationLocked()"
  }
]