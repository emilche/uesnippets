[
  {
    "label": "FunctorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctorType"
  },
  {
    "label": "FunctorDirectoryVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctorDirectoryVisitor"
  },
  {
    "label": "Functor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Functor"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericPlatformFile . h \" template<class FunctorType> class FunctorDirectoryVisitor : public IPlatformFile::FDirectoryVisitor { public : bool)",
    "insertText": "Visit(const TCHAR* FilenameOrDirectory, bool bIsDirectory)"
  },
  {
    "label": "FunctorDirectoryVisitor()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FunctorDirectoryVisitor(FunctorType&& FunctorInstance) : Functor(MoveTemp(FunctorInstance))"
  },
  {
    "label": "MakeDirectoryVisitor()",
    "kind": "Method",
    "detail": "Function (} private : FunctorType Functor ; } ; template<class Functor> FunctorDirectoryVisitor<Functor>)",
    "insertText": "MakeDirectoryVisitor(Functor&& FunctorInstance)"
  }
]