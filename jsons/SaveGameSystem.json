[
  {
    "label": "ISaveGameSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISaveGameSystem"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGenericSaveGameSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGenericSaveGameSystem"
  },
  {
    "label": "FBaseAsyncSaveGameSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBaseAsyncSaveGameSystem"
  },
  {
    "label": "ISaveGameSystemModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISaveGameSystemModule"
  },
  {
    "label": "PlatformHasNativeUI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / FileManager . h \" # include \" Misc / FileHelper . h \" # include \" Misc / Paths . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Tasks / Pipe . h \" # include \" Modules / ModuleInterface . h \" class ISaveGameSystem { public : enum class ESaveExistsResult { OK,DoesNotExist,Corrupt,UnspecifiedError } ; bool)",
    "insertText": "PlatformHasNativeUI()"
  },
  {
    "label": "DoesSaveSystemSupportMultipleUsers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSaveSystemSupportMultipleUsers()"
  },
  {
    "label": "DoesSaveGameExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSaveGameExist(const TCHAR* Name, const int32 UserIndex)"
  },
  {
    "label": "DoesSaveGameExistWithResult()",
    "kind": "Method",
    "detail": "Function (ESaveExistsResult)",
    "insertText": "DoesSaveGameExistWithResult(const TCHAR* Name, const int32 UserIndex)"
  },
  {
    "label": "GetSaveGameNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSaveGameNames(TArray<FString>& FoundSaves, const int32 UserIndex)"
  },
  {
    "label": "LoadGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadGame(bool bAttemptToUseUI, const TCHAR* Name, const int32 UserIndex, TArray<uint8>& Data)"
  },
  {
    "label": "DeleteGame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteGame(bool bAttemptToUseUI, const TCHAR* Name, const int32 UserIndex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(const FString&, FPlatformUserId, bool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(const FString&, FPlatformUserId, bool, const TArray<uint8>&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(const FString&, FPlatformUserId, ISaveGameSystem::ESaveExistsResult)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FPlatformUserId, bool)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "void(FPlatformUserId, bool, const TArray<FString>&)"
  },
  {
    "label": "DoesSaveGameExistAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoesSaveGameExistAsync(const TCHAR* Name, FPlatformUserId PlatformUserId, FSaveGameAsyncExistsCallback Callback)"
  },
  {
    "label": "SaveGameAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveGameAsync(bool bAttemptToUseUI, const TCHAR* Name, FPlatformUserId PlatformUserId, TSharedRef<const TArray<uint8>> Data, FSaveGameAsyncOpCompleteCallback Callback)"
  },
  {
    "label": "LoadGameAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadGameAsync(bool bAttemptToUseUI, const TCHAR* Name, FPlatformUserId PlatformUserId, FSaveGameAsyncLoadCompleteCallback Callback)"
  },
  {
    "label": "DeleteGameAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteGameAsync(bool bAttemptToUseUI, const TCHAR* Name, FPlatformUserId PlatformUserId, FSaveGameAsyncOpCompleteCallback Callback)"
  },
  {
    "label": "GetSaveGameNamesAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSaveGameNamesAsync(FPlatformUserId PlatformUserId, FSaveGameAsyncGetNamesCallback Callback)"
  },
  {
    "label": "InitAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsync(bool bAttemptToUseUI, FPlatformUserId PlatformUserId, FSaveGameAsyncInitCompleteCallback Callback)"
  },
  {
    "label": "OnAsyncComplete()",
    "kind": "Method",
    "detail": "Function (protected : UE::Tasks::FPipe AsyncTaskPipe ; void)",
    "insertText": "OnAsyncComplete(TFunction<void()> Callback)"
  },
  {
    "label": "ProjectSavedDir()",
    "kind": "Method",
    "detail": "Function (TArray<FString> FoundFiles ; const FString SaveGameDirectory =)",
    "insertText": "ProjectSavedDir() / TEXT(\"SaveGames/\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FoundSaves .)",
    "insertText": "Add(FPaths::GetBaseFilename(File))"
  },
  {
    "label": "SaveGame()",
    "kind": "Method",
    "detail": "Function (} return true ; } bool)",
    "insertText": "SaveGame(bool bAttemptToUseUI, const TCHAR* Name, const int32 UserIndex, const TArray<uint8>& Data)"
  },
  {
    "label": "GetSaveGamePath()",
    "kind": "Method",
    "detail": "Function (} protected : FString)",
    "insertText": "GetSaveGamePath(const TCHAR* Name)"
  },
  {
    "label": "InternalDoesSaveGameExistAsync()",
    "kind": "Method",
    "detail": "Function (protected : UE::Tasks::FTask)",
    "insertText": "InternalDoesSaveGameExistAsync(const TCHAR* Name, FPlatformUserId PlatformUserId, FSaveGameAsyncExistsCallback Callback, TSharedPtr<ESaveExistsResult> OutResult = nullptr)"
  },
  {
    "label": "InternalSaveGameAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "InternalSaveGameAsync(bool bAttemptToUseUI, const TCHAR* Name, FPlatformUserId PlatformUserId, TSharedRef<const TArray<uint8>> Data, FSaveGameAsyncOpCompleteCallback Callback, TSharedPtr<bool> OutResult = nullptr)"
  },
  {
    "label": "InternalLoadGameAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "InternalLoadGameAsync(bool bAttemptToUseUI, const TCHAR* Name, FPlatformUserId PlatformUserId, TSharedRef<TArray<uint8>> Data, FSaveGameAsyncLoadCompleteCallback Callback, TSharedPtr<bool> OutResult = nullptr)"
  },
  {
    "label": "InternalDeleteGameAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "InternalDeleteGameAsync(bool bAttemptToUseUI, const TCHAR* Name, FPlatformUserId PlatformUserId, FSaveGameAsyncOpCompleteCallback Callback, TSharedPtr<bool> OutResult = nullptr)"
  },
  {
    "label": "InternalGetSaveGameNamesAsync()",
    "kind": "Method",
    "detail": "Function (UE::Tasks::FTask)",
    "insertText": "InternalGetSaveGameNamesAsync(FPlatformUserId PlatformUserId, TSharedRef<TArray<FString>> FoundSaves, FSaveGameAsyncGetNamesCallback Callback, TSharedPtr<bool> OutResult = nullptr)"
  },
  {
    "label": "WaitForAsyncTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAsyncTask(UE::Tasks::FTask AsyncSaveTask)"
  },
  {
    "label": "GetSaveGameSystem()",
    "kind": "Method",
    "detail": "Function (} ; class ISaveGameSystemModule : public IModuleInterface { public : ISaveGameSystem*)",
    "insertText": "GetSaveGameSystem()"
  }
]