[
  {
    "label": "FImageDimensions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImageDimensions"
  },
  {
    "label": "FImageDimensions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" IntVectorTypes . h \" namespace UE { namespace Geometry { class FImageDimensions { protected : int32 Width = 0 ; int32 Height = 0 ; public :)",
    "insertText": "FImageDimensions(int32 WidthIn = 0, int32 HeightIn = 0)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDimensions(WidthIn, HeightIn)"
  },
  {
    "label": "SetDimensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDimensions(int32 WidthIn, int32 HeightIn)"
  },
  {
    "label": "GetWidth()",
    "kind": "Method",
    "detail": "Function (Width = WidthIn ; Height = HeightIn ; } int32)",
    "insertText": "GetWidth()"
  },
  {
    "label": "IsSquare()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSquare()"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clamp(int32& X, int32& Y)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "Clamp(X, 0, Width - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "Clamp(Y, 0, Height - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Clamp(FVector2i& Coords)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Coords . X =)",
    "insertText": "Clamp(Coords.X, 0, Width - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (Coords . Y =)",
    "insertText": "Clamp(Coords.Y, 0, Height - 1)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetIndex(int32 X, int32 Y)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetIndex(const FVector2i& Coords)"
  },
  {
    "label": "GetIndexMirrored()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetIndexMirrored(const FVector2i& Coords, bool bFlipX, bool bFlipY)"
  },
  {
    "label": "UseX()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "UseX(bFlipX) ? (Width - 1 - Coords.X)"
  },
  {
    "label": "UseY()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "UseY(bFlipY) ? (Height - 1 - Coords.Y)"
  },
  {
    "label": "GetCoords()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "GetCoords(int64 LinearIndex)"
  },
  {
    "label": "GetTexelSize()",
    "kind": "Method",
    "detail": "Function (} FVector2d)",
    "insertText": "GetTexelSize()"
  },
  {
    "label": "GetTexelUV()",
    "kind": "Method",
    "detail": "Function (} FVector2d)",
    "insertText": "GetTexelUV(const FVector2i& Coords)"
  },
  {
    "label": "GetTexelUV()",
    "kind": "Method",
    "detail": "Function (} FVector2d)",
    "insertText": "GetTexelUV(int64 LinearIndex)"
  },
  {
    "label": "GetTexelDistance()",
    "kind": "Method",
    "detail": "Function (} FVector2d)",
    "insertText": "GetTexelDistance(const FVector2d& P, const FVector2d Q)"
  },
  {
    "label": "PixelToCoords()",
    "kind": "Method",
    "detail": "Function (FVector2d TexelDistance = P - Q ; TexelDistance . X* = Width ; TexelDistance . Y* = Height ; return TexelDistance ; } FVector2i)",
    "insertText": "PixelToCoords(const FVector2d& PixelPosition)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32 X =)",
    "insertText": "Clamp((int32)PixelPosition.X, 0, Width - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (int32 Y =)",
    "insertText": "Clamp((int32)PixelPosition.Y, 0, Height - 1)"
  },
  {
    "label": "UVToCoords()",
    "kind": "Method",
    "detail": "Function (} FVector2i)",
    "insertText": "UVToCoords(const FVector2d& UVPosition)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FImageDimensions& Other)"
  }
]