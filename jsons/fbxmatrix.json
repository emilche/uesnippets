[
  {
    "label": "FbxAMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxAMatrix"
  },
  {
    "label": "FBXSDK_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBXSDK_DLL"
  },
  {
    "label": "FbxMatrix()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_MATH_MATRIX_H_ # define _FBXSDK_CORE_MATH_MATRIX_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / core / math / fbxvector4 . h> # include<fbxsdk / fbxsdk_nsbegin . h> class FbxAMatrix ; class FBXSDK_DLL FbxMatrix : public FbxDouble4x4 { public :)",
    "insertText": "FbxMatrix()"
  },
  {
    "label": "FbxMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxMatrix(const FbxMatrix& pM)"
  },
  {
    "label": "FbxMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxMatrix(const FbxAMatrix& pM)"
  },
  {
    "label": "FbxMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxMatrix(const FbxVector4& pT, const FbxVector4& pR, const FbxVector4& pS)"
  },
  {
    "label": "FbxMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxMatrix(const FbxVector4& pT, const FbxQuaternion& pQ, const FbxVector4& pS)"
  },
  {
    "label": "FbxMatrix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxMatrix(const double p00, const double p10, const double p20, const double p30, const double p01, const double p11, const double p21, const double p31, const double p02, const double p12, const double p22, const double p32, const double p03, const double p13, const double p23, const double p33)"
  },
  {
    "label": "GetRow()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetRow(int pY)"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "GetColumn(int pX)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(int pY, int pX, double pValue)"
  },
  {
    "label": "SetTRS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTRS(const FbxVector4& pT, const FbxVector4& pR, const FbxVector4& pS)"
  },
  {
    "label": "SetTQS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTQS(const FbxVector4& pT, const FbxQuaternion& pQ, const FbxVector4& pS)"
  },
  {
    "label": "SetRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRow(int pY, const FbxVector4& pRow)"
  },
  {
    "label": "SetColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColumn(int pX, const FbxVector4& pColumn)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElements(FbxVector4& pTranslation, FbxQuaternion& pRotation, FbxVector4& pShearing, FbxVector4& pScaling, double& pSign)"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetElements(FbxVector4& pTranslation, FbxVector4& pRotation, FbxVector4& pShearing, FbxVector4& pScaling, double& pSign)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxMatrix&)",
    "insertText": "operator(const FbxMatrix& pMatrix)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxMatrix)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FbxMatrix& pM)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FbxAMatrix& pM)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "double()"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "double(kDouble44)"
  },
  {
    "label": "Double44()",
    "kind": "Method",
    "detail": "Function (kDouble44&)",
    "insertText": "Double44()"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (} FbxMatrix)",
    "insertText": "Inverse()"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (FbxMatrix)",
    "insertText": "Transpose()"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity()"
  },
  {
    "label": "SetLookToLH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLookToLH(const FbxVector4& pEyePosition, const FbxVector4& pEyeDirection, const FbxVector4& pUpDirection)"
  },
  {
    "label": "SetLookToRH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLookToRH(const FbxVector4& pEyePosition, const FbxVector4& pEyeDirection, const FbxVector4& pUpDirection)"
  },
  {
    "label": "SetLookAtLH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLookAtLH(const FbxVector4& pEyePosition, const FbxVector4& pLookAt, const FbxVector4& pUpDirection)"
  },
  {
    "label": "SetLookAtRH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLookAtRH(const FbxVector4& pEyePosition, const FbxVector4& pLookAt, const FbxVector4& pUpDirection)"
  },
  {
    "label": "MultNormalize()",
    "kind": "Method",
    "detail": "Function (FbxVector4)",
    "insertText": "MultNormalize(const FbxVector4& pVector)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (# ifndef DOXYGEN_SHOULD_SKIP_THIS int)",
    "insertText": "Compare(const FbxMatrix pM, const double pThreshold = FBXSDK_TOLERANCE)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const FbxAMatrix pM, const double pThreshold = FBXSDK_TOLERANCE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FbxMatrix)",
    "insertText": "operator(double pValue)"
  },
  {
    "label": "LUMult()",
    "kind": "Method",
    "detail": "Function (FbxMatrix)",
    "insertText": "LUMult(FbxMatrix pM, const FbxVector4& pVector)"
  }
]