[
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "MadvFreeDiscardableMemoryPosix()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_MADV_FREE_DISCARDABLE_MEMORY_POSIX_H_ # define BASE_MEMORY_MADV_FREE_DISCARDABLE_MEMORY_POSIX_H_ # include<stddef . h> # include<stdint . h> # include<atomic> # include<vector> # include \" base / base_export . h \" # include \" base / callback . h \" # include \" base / memory / discardable_memory . h \" # include \" base / memory / raw_ptr . h \" # include \" base / sequence_checker . h \" # include \" base / threading / thread_collision_warner . h \" # include \" build / build_config . h \" namespace base { class BASE_EXPORT MadvFreeDiscardableMemoryPosix : public DiscardableMemory { public :)",
    "insertText": "MadvFreeDiscardableMemoryPosix(size_t size_in_pages, std::atomic<size_t>* allocator_byte_count)"
  },
  {
    "label": "MadvFreeDiscardableMemoryPosix()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MadvFreeDiscardableMemoryPosix(const MadvFreeDiscardableMemoryPosix&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MadvFreeDiscardableMemoryPosix&)",
    "insertText": "operator(const MadvFreeDiscardableMemoryPosix&)"
  },
  {
    "label": "MadvFreeDiscardableMemoryPosix()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "MadvFreeDiscardableMemoryPosix()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "data()"
  },
  {
    "label": "IsLockedForTesting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLockedForTesting()"
  },
  {
    "label": "DiscardForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardForTesting()"
  },
  {
    "label": "CreateMemoryAllocatorDump()",
    "kind": "Method",
    "detail": "Function (trace_event::MemoryAllocatorDump*)",
    "insertText": "CreateMemoryAllocatorDump(const char* name, trace_event::ProcessMemoryDump* pmd)"
  },
  {
    "label": "GetPageCount()",
    "kind": "Method",
    "detail": "Function (protected : size_t)",
    "insertText": "GetPageCount()"
  },
  {
    "label": "SetKeepMemoryForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeepMemoryForTesting(bool keep_memory)"
  },
  {
    "label": "DiscardPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardPage(size_t page_index)"
  },
  {
    "label": "LockPage()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "LockPage(size_t page_index)"
  },
  {
    "label": "UnlockPage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockPage(size_t page_index)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Deallocate()"
  },
  {
    "label": "IsDiscarded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDiscarded()"
  },
  {
    "label": "IsResident()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResident()"
  },
  {
    "label": "DFAKE_MUTEX()",
    "kind": "Method",
    "detail": "Function (const size_t size_in_bytes_ ; const size_t allocated_pages_ ; raw_ptr<std::atomic<size_t>> allocator_byte_count_ ; raw_ptr<void> data_ ; bool is_locked_ = true ; bool keep_memory_for_testing_ = false ; std::vector<std::atomic<intptr_t>> page_first_word_ ;)",
    "insertText": "DFAKE_MUTEX(thread_collision_warner_)"
  },
  {
    "label": "GetMadvFreeSupport()",
    "kind": "Method",
    "detail": "Function (} ; enum class MadvFreeSupport { kUnsupported,kSupported } ; BASE_EXPORT MadvFreeSupport)",
    "insertText": "GetMadvFreeSupport()"
  }
]