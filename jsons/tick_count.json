[
  {
    "label": "tick_count",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tick_count"
  },
  {
    "label": "interval_t",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "interval_t"
  },
  {
    "label": "tbb",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tbb"
  },
  {
    "label": "timespec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timespec"
  },
  {
    "label": "timeval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "timeval"
  },
  {
    "label": "interval_t()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_tick_count_H # define __TBB_tick_count_H # include \" tbb_stddef . h \" # if _WIN32 | | _WIN64 # include \" machine / windows_api . h \" # elif __linux__ # include<ctime> # else # include<sys / time . h> # endif namespace tbb { class tick_count { public : class interval_t { long long value ;)",
    "insertText": "interval_t(long long value_ ) : value(value_)"
  },
  {
    "label": "interval_t()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "interval_t() : value(0)"
  },
  {
    "label": "interval_t()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "interval_t(double sec)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (class tbb::tick_count ; interval_t)",
    "insertText": "operator(const tick_count& t1, const tick_count& t0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (interval_t)",
    "insertText": "operator(const interval_t& i, const interval_t& j)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} interval_t&)",
    "insertText": "operator(const interval_t& i)"
  },
  {
    "label": "ticks_per_second()",
    "kind": "Method",
    "detail": "Function (value - = i . value ; return* this ; } private : long long)",
    "insertText": "ticks_per_second()"
  },
  {
    "label": "QueryPerformanceFrequency()",
    "kind": "Method",
    "detail": "Function (# if _WIN32 | | _WIN64 LARGE_INTEGER qpfreq ; int rval =)",
    "insertText": "QueryPerformanceFrequency(&qpfreq)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(rval, \"QueryPerformanceFrequency returned zero\")"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (# elif __linux__ return static_cast<long)",
    "insertText": "long(1E9)"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (# else return static_cast<long)",
    "insertText": "long(1E6)"
  },
  {
    "label": "tick_count()",
    "kind": "Method",
    "detail": "Function (# endif } } ;)",
    "insertText": "tick_count() : my_count(0)"
  },
  {
    "label": "now()",
    "kind": "Method",
    "detail": "Function (} ; tick_count)",
    "insertText": "now()"
  },
  {
    "label": "resolution()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "resolution()"
  },
  {
    "label": "QueryPerformanceCounter()",
    "kind": "Method",
    "detail": "Function (tick_count result ; # if _WIN32 | | _WIN64 LARGE_INTEGER qpcnt ; int rval =)",
    "insertText": "QueryPerformanceCounter(&qpcnt)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(rval, \"QueryPerformanceCounter failed\")"
  },
  {
    "label": "clock_gettime()",
    "kind": "Method",
    "detail": "Function (result . my_count = qpcnt . QuadPart ; # elif __linux__ struct timespec ts ; int status =)",
    "insertText": "clock_gettime(CLOCK_REALTIME, &ts)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(status==0, \"CLOCK_REALTIME not supported\")"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (result . my_count = static_cast<long)",
    "insertText": "long(1000000000UL)*static_cast<long long>(ts.tv_sec) + static_cast<long long>(ts.tv_nsec)"
  },
  {
    "label": "gettimeofday()",
    "kind": "Method",
    "detail": "Function (# else struct timeval tv ; int status =)",
    "insertText": "gettimeofday(&tv, NULL)"
  },
  {
    "label": "__TBB_ASSERT_EX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_ASSERT_EX(status==0, \"gettimeofday failed\")"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (result . my_count = static_cast<long)",
    "insertText": "long(1000000)*static_cast<long long>(tv.tv_sec) + static_cast<long long>(tv.tv_usec)"
  },
  {
    "label": "long()",
    "kind": "Method",
    "detail": "Function (value = static_cast<long)",
    "insertText": "long(sec*interval_t::ticks_per_second())"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (} double tick_count::)",
    "insertText": "seconds()"
  }
]