[
  {
    "label": "FTrajectorySample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrajectorySample"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / BinarySearch . h \" # include \" UObject / ObjectMacros . h \" # include \" MotionTrajectoryTypes . generated . h \")",
    "insertText": "USTRUCT(BlueprintType, Category=\"Motion Trajectory\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=\"Motion Trajectory\")"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (FTrajectorySample)",
    "insertText": "Lerp(const FTrajectorySample& Sample, float Alpha)"
  },
  {
    "label": "SmoothInterp()",
    "kind": "Method",
    "detail": "Function (FTrajectorySample)",
    "insertText": "SmoothInterp(const FTrajectorySample& PrevSample , const FTrajectorySample& Sample , const FTrajectorySample& NextSample , float Alpha)"
  },
  {
    "label": "PrependOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrependOffset(const FTransform DeltaTransform, float DeltaSeconds)"
  },
  {
    "label": "TransformReferenceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformReferenceFrame(const FTransform DeltaTransform)"
  },
  {
    "label": "IsZeroSample()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsZeroSample()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType, Category=\"Motion Trajectory\") struct UE_DEPRECATED(5.3, \"Use FPoseSearchQueryTrajectory instead\")"
  },
  {
    "label": "RemoveHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveHistory()"
  },
  {
    "label": "Rotate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Rotate(const FQuat& Rotation)"
  },
  {
    "label": "TransformOverTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformOverTime(const FTransform& Transform, float StartTime, float DeltaTime)"
  },
  {
    "label": "TransformReferenceFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransformReferenceFrame(const FTransform& Transform)"
  },
  {
    "label": "HasSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSamples()"
  },
  {
    "label": "HasOnlyZeroSamples()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasOnlyZeroSamples()"
  },
  {
    "label": "GetSampleAtTime()",
    "kind": "Method",
    "detail": "Function (FTrajectorySample)",
    "insertText": "GetSampleAtTime(float Time, bool bExtrapolate = true)"
  },
  {
    "label": "DebugDrawTrajectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugDrawTrajectory(bool bEnable , const UWorld* World , const FTransform& WorldTransform , const FLinearColor PredictionColor = { 0.f, 1.f, 0.f } , const FLinearColor HistoryColor = { 0.f, 0.f, 1.f } , float TransformScale = 10.f , float TransformThickness = 2.f , float VelArrowScale = 0.025f , float VelArrowSize = 40.f , float VelArrowThickness = 2.f)"
  }
]