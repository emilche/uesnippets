[
  {
    "label": "FDetailWidgetRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailWidgetRow"
  },
  {
    "label": "IDetailChildrenBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailChildrenBuilder"
  },
  {
    "label": "IPropertyHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPropertyHandle"
  },
  {
    "label": "FTimecodeDetailsCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimecodeDetailsCustomization"
  },
  {
    "label": "MakeInstance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" IPropertyTypeCustomization . h \" # include \" Internationalization / Text . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" class FDetailWidgetRow ; class IDetailChildrenBuilder ; class IPropertyHandle ; class FTimecodeDetailsCustomization : public IPropertyTypeCustomization { public : TSharedRef<IPropertyTypeCustomization>)",
    "insertText": "MakeInstance()"
  },
  {
    "label": "FTimecodeDetailsCustomization()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTimecodeDetailsCustomization()"
  },
  {
    "label": "CustomizeHeader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeHeader(TSharedRef<IPropertyHandle> PropertyHandle, FDetailWidgetRow& HeaderRow, IPropertyTypeCustomizationUtils& CustomizationUtils)"
  },
  {
    "label": "CustomizeChildren()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CustomizeChildren(TSharedRef<IPropertyHandle> PropertyHandle, IDetailChildrenBuilder& ChildBuilder, IPropertyTypeCustomizationUtils& CustomizationUtils)"
  },
  {
    "label": "OnGetTimecodeText()",
    "kind": "Method",
    "detail": "Function (private : FText)",
    "insertText": "OnGetTimecodeText()"
  },
  {
    "label": "OnTimecodeTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTimecodeTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  }
]