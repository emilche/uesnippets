[
  {
    "label": "FValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValue"
  },
  {
    "label": "FValueWithId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValueWithId"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Compression / CompressedBuffer . h \" # include \" CoreTypes . h \" # include \" DerivedDataValueId . h \" # include \" IO / IoHash . h \" # include \" Memory / MemoryFwd . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UnrealTemplate . h \" # define namespace UE::DerivedData { class FValue { public : FValue)",
    "insertText": "Compress(const FCompositeBuffer& RawData, uint64 BlockSize = 0)"
  },
  {
    "label": "Compress()",
    "kind": "Method",
    "detail": "Function (FValue)",
    "insertText": "Compress(const FSharedBuffer& RawData, uint64 BlockSize = 0)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValue()"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValue(const FIoHash& RawHash, uint64 RawSize)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValue(const FCompressedBuffer& Data)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FValue(FCompressedBuffer&& Data)"
  },
  {
    "label": "GetRawHash()",
    "kind": "Method",
    "detail": "Function (const FIoHash&)",
    "insertText": "GetRawHash()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "FValueWithId()",
    "kind": "Method",
    "detail": "Function (} const FValue Null ; private : FIoHash RawHash ; uint64 RawSize = 0 ; FCompressedBuffer Data ; } ; class FValueWithId : public FValue { public :)",
    "insertText": "FValueWithId()"
  },
  {
    "label": "FValueWithId()",
    "kind": "Method",
    "detail": "Function (template<. . . ArgTypes>)",
    "insertText": "FValueWithId(const FValueId& Id, ArgTypes&&... Args)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (const FValueId&)",
    "insertText": "GetId()"
  },
  {
    "label": "IsNull()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNull()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (} const FValueWithId Null ; private : FValueId Id ; } ; const FValue FValue::Null ; const FValueWithId FValueWithId::Null ;)",
    "insertText": "FValue(const FIoHash& InRawHash, const uint64 InRawSize) : RawHash(InRawHash) , RawSize(InRawSize)"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(const FCompressedBuffer& InData) : RawHash(InData.GetRawHash()) , RawSize(InData.GetRawSize()) , Data(InData.MakeOwned())"
  },
  {
    "label": "FValue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FValue(FCompressedBuffer&& InData) : RawHash(InData.GetRawHash()) , RawSize(InData.GetRawSize()) , Data(MoveTemp(InData).MakeOwned())"
  },
  {
    "label": "FValueWithId()",
    "kind": "Method",
    "detail": "Function (} template<. . . ArgTypes>)",
    "insertText": "FValueWithId(const FValueId& InId, ArgTypes&&... InArgs) : FValue(Forward<ArgTypes>(InArgs)...) , Id(InId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FValue& A, const FValue& B)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FValueWithId& A, const FValueWithId& B)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (const FValue& ValueA = A ; const FValue& ValueB = B ; return A .)",
    "insertText": "GetId() == B.GetId()"
  }
]