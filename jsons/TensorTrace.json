[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorTraceOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorTraceOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorTraceOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_TRACE_H # define EIGEN_CXX11_TENSOR_TENSOR_TRACE_H namespace Eigen { namespace internal { template<Dims,XprType> struct traits<TensorTraceOp<Dims,XprType>> : public traits<XprType> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions - array_size<Dims>::value ; const int Layout = XprTraits::Layout ; } ; template<Dims,XprType> struct eval<TensorTraceOp<Dims,XprType>,Eigen::Dense> { typedef const TensorTraceOp<Dims,XprType>& type ; } ; template<Dims,XprType> struct nested<TensorTraceOp<Dims,XprType>,1,eval<TensorTraceOp<Dims,XprType>>::type> { typedef TensorTraceOp<Dims,XprType> type ; } ; } template<Dims,XprType> class TensorTraceOp : public TensorBase<TensorTraceOp<Dims,XprType>> { public : typedef Eigen::internal::traits<TensorTraceOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef XprType::CoeffReturnType CoeffReturnType ; typedef Eigen::internal::nested<TensorTraceOp>::type Nested ; typedef Eigen::internal::traits<TensorTraceOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorTraceOp>::Index Index ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorTraceOp(const XprType& expr, const Dims& dims) : m_xpr(expr), m_dims(dims)"
  },
  {
    "label": "dims()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const Dims&)",
    "insertText": "dims()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumOutputDims >= 0), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((NumReducedDims >= 2) || ((NumReducedDims == 0) && (NumInputDims == 0)), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(op_dims[i] >= 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(op_dims[i] < NumInputDims)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_reduced [ op_dims [ i ] ] = true ; } int num_distinct_reduce_dims = 0 ;)",
    "insertText": "for(int i = 0; i < NumInputDims; ++i)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (+ + num_distinct_reduce_dims ; } })",
    "insertText": "eigen_assert(num_distinct_reduce_dims == NumReducedDims)"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (const TensorEvaluator<ArgType,Device>::Dimensions& input_dims = m_impl .)",
    "insertText": "dimensions()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_reducedDims [ reduced_index ] = input_dims [ i ] ;)",
    "insertText": "if(reduced_index > 0)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_reducedDims[0] == m_reducedDims[reduced_index])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + reduced_index ; } else { m_dimensions [ output_index ] = input_dims [ i ] ; + + output_index ; } })",
    "insertText": "if(NumReducedDims != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_traceDim = m_reducedDims [ 0 ] ; })",
    "insertText": "if(NumOutputDims > 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumOutputDims; ++i)"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ i ] = m_outputStrides [ i - 1 ]* m_dimensions [ i - 1 ] ; } } else { m_outputStrides .)",
    "insertText": "back()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_outputStrides [ i ] = m_outputStrides [ i + 1 ]* m_dimensions [ i + 1 ] ; } } })",
    "insertText": "if(NumInputDims > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (array<Index,NumInputDims> input_strides ;)",
    "insertText": "if(static_cast<int>(Layout) == static_cast<int>(ColMajor))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (input_strides [ 0 ] = 1 ;)",
    "insertText": "for(int i = 1; i < NumInputDims; ++i)"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeeded(NULL)"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "CoeffReturnType()",
    "kind": "Method",
    "detail": "Function (CoeffReturnType result = internal::cast<int,)",
    "insertText": "CoeffReturnType(0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index index_stride = 0 ;)",
    "insertText": "for(int i = 0; i < NumReducedDims; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (index_stride + = m_reducedStrides [ i ] ; } Index cur_index = 0 ;)",
    "insertText": "if(NumOutputDims != 0) cur_index = firstInput(index)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (result + = m_impl .)",
    "insertText": "coeff(cur_index)"
  },
  {
    "label": "packet()",
    "kind": "Method",
    "detail": "Function (cur_index + = index_stride ; } return result ; } template<int LoadMode> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE PacketReturnType)",
    "insertText": "packet(Index index)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((PacketSize > 1), YOU_MADE_A_PROGRAMMING_MISTAKE)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(index + PacketSize - 1 < dimensions().TotalSize())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (EIGEN_ALIGN_MAX internal::remove_const<CoeffReturnType>::type values [ PacketSize ] ;)",
    "insertText": "for(int i = 0; i < PacketSize; ++i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (values [ i ] =)",
    "insertText": "coeff(index + i)"
  },
  {
    "label": "LoadMode()",
    "kind": "Method",
    "detail": "Function (} PacketReturnType result = internal::ploadt<PacketReturnType,)",
    "insertText": "LoadMode(values)"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  },
  {
    "label": "firstInput()",
    "kind": "Method",
    "detail": "Function (} # endif protected : EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Index)",
    "insertText": "firstInput(Index index)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index idx = index / m_outputStrides [ i ] ; startInput + = idx* m_preservedStrides [ i ] ; index - = idx* m_outputStrides [ i ] ; } startInput + = index* m_preservedStrides [ 0 ] ; } else {)",
    "insertText": "for(int i = 0; i < NumOutputDims - 1; ++i)"
  }
]