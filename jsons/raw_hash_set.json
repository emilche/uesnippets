[
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "BackingArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BackingArray"
  },
  {
    "label": "probe_seq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "probe_seq"
  },
  {
    "label": "ContainerKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerKey"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "RequireUsableKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RequireUsableKey"
  },
  {
    "label": "PassedKey",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassedKey"
  },
  {
    "label": "E",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "E"
  },
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "IsDecomposable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsDecomposable"
  },
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "IsDecomposable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsDecomposable"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "NonIterableBitMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NonIterableBitMask"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "BitMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitMask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GroupSse2Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroupSse2Impl"
  },
  {
    "label": "GroupAArch64Impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroupAArch64Impl"
  },
  {
    "label": "GroupPortableImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GroupPortableImpl"
  },
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "raw_hash_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_hash_set"
  },
  {
    "label": "InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIter"
  },
  {
    "label": "FindInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindInfo"
  },
  {
    "label": "Policy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Policy"
  },
  {
    "label": "Hash",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hash"
  },
  {
    "label": "Eq",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Eq"
  },
  {
    "label": "Alloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Alloc"
  },
  {
    "label": "raw_hash_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_hash_set"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "SameAsElementReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameAsElementReference"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "raw_hash_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_hash_set"
  },
  {
    "label": "const_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "const_iterator"
  },
  {
    "label": "raw_hash_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_hash_set"
  },
  {
    "label": "InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIter"
  },
  {
    "label": "InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIter"
  },
  {
    "label": "InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIter"
  },
  {
    "label": "InputIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIter"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "InputIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIt"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "constructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constructor"
  },
  {
    "label": "raw_hash_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_hash_set"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "F",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "F"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "absl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "absl"
  },
  {
    "label": "FindElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FindElement"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "HashElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashElement"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K1"
  },
  {
    "label": "EqualElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EqualElement"
  },
  {
    "label": "K2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K2"
  },
  {
    "label": "EmplaceDecomposable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EmplaceDecomposable"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "InsertSlot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InsertSlot"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "K",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "K"
  },
  {
    "label": "RawHashSetTestOnlyAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RawHashSetTestOnlyAccess"
  },
  {
    "label": "HashtableDebugAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashtableDebugAccess"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "find(const key_type& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "find(const K& key)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "erase(const key_type& key)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (size_type)",
    "insertText": "erase(const K& key)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (iterator>)",
    "insertText": "equal_range(const key_type& key)"
  },
  {
    "label": "equal_range()",
    "kind": "Method",
    "detail": "Function (iterator>)",
    "insertText": "equal_range(const K& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "find(const key_type& key, size_t hash)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "find(const U& key, size_t hash)"
  },
  {
    "label": "BitMask()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "BitMask(0)"
  },
  {
    "label": "ShouldInsertBackwards()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldInsertBackwards(size_t hash, const ctrl_t* ctrl)"
  },
  {
    "label": "_mm_cmpgt_epi8()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cmpgt_epi8(a, b)"
  },
  {
    "label": "ConvertDeletedToEmptyAndFullToDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertDeletedToEmptyAndFullToDeleted(ctrl_t* ctrl, size_t capacity)"
  },
  {
    "label": "find_first_non_full()",
    "kind": "Method",
    "detail": "Function (FindInfo)",
    "insertText": "find_first_non_full(const ctrl_t*, size_t, size_t)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "static_assert(std::is_same<pointer, value_type*>::value,\n                \"Allocators with custom pointer types are not supported\")"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "emplace(value)"
  },
  {
    "label": "iterator_at()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "iterator_at(res.first)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (NOLINT)",
    "insertText": "assert(this != &src)"
  },
  {
    "label": "prefetch_heap_block()",
    "kind": "Method",
    "detail": "Function (ABSL_INTERNAL_HAVE_PREFETCH)",
    "insertText": "prefetch_heap_block()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "end()"
  },
  {
    "label": "hash_ref()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "hash_ref()"
  },
  {
    "label": "eq_ref()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "eq_ref()"
  },
  {
    "label": "alloc_ref()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "alloc_ref()"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "h(key)"
  },
  {
    "label": "eq()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "eq(lhs, rhs)"
  }
]