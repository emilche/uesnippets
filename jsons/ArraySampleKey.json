[
  {
    "label": "ArraySampleKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArraySampleKey"
  },
  {
    "label": "ArraySampleKeyEqualTo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArraySampleKeyEqualTo"
  },
  {
    "label": "ArraySampleKeyStdHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArraySampleKeyStdHash"
  },
  {
    "label": "MAPPED",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MAPPED"
  },
  {
    "label": "UnorderedMapUtil",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UnorderedMapUtil"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcCoreAbstract_ArraySampleKey_h # define Alembic_AbcCoreAbstract_ArraySampleKey_h # include<Alembic / AbcCoreAbstract / Foundation . h> # include<Alembic / AbcCoreAbstract / DataType . h> namespace Alembic { namespace AbcCoreAbstract { namespace ALEMBIC_VERSION_NS { struct ArraySampleKey : public Alembic::Util::totally_ordered<ArraySampleKey> { uint64_t numBytes ; PlainOldDataType origPOD ; PlainOldDataType readPOD ; Digest digest ; bool)",
    "insertText": "operator(const ArraySampleKey &iRhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; } ; struct ArraySampleKeyEqualTo { typedef ArraySampleKey first_argument_type ; typedef ArraySampleKey second_argument_type ; typedef bool result_type ; bool)",
    "insertText": "operator()( ArraySampleKey const &a, ArraySampleKey const &b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} struct ArraySampleKeyStdHash { typedef ArraySampleKey argument_type ; typedef size_t result_type ; size_t)",
    "insertText": "operator()( ArraySampleKey const &a)"
  }
]