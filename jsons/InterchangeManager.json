[
  {
    "label": "FAsyncTaskNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncTaskNotification"
  },
  {
    "label": "UInterchangeBlueprintPipelineBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeBlueprintPipelineBase"
  },
  {
    "label": "UInterchangeFactoryBaseNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeFactoryBaseNode"
  },
  {
    "label": "UInterchangePipelineBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangePipelineBase"
  },
  {
    "label": "UInterchangePythonPipelineBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangePythonPipelineBase"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FScopedInterchangeImportEnableState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedInterchangeImportEnableState"
  },
  {
    "label": "FScopedSourceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedSourceData"
  },
  {
    "label": "FScopedTranslator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTranslator"
  },
  {
    "label": "FImportAsyncHelperData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportAsyncHelperData"
  },
  {
    "label": "FImportResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportResult"
  },
  {
    "label": "FImportAsyncHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FImportAsyncHelper"
  },
  {
    "label": "FImportedObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportedObjectInfo"
  },
  {
    "label": "UInterchangePipelineStackOverride",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangePipelineStackOverride"
  },
  {
    "label": "FImportAssetParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportAssetParameters"
  },
  {
    "label": "UInterchangeManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterchangeManager"
  },
  {
    "label": "FQueuedTaskData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueuedTaskData"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UE"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<atomic> # include \" CoreMinimal . h \" # include \" Async / TaskGraphInterfaces . h \" # include \" Containers / Queue . h \" # include \" Delegates / DelegateCombinations . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Thread . h \" # include \" HAL / ThreadSafeBool . h \" # include \" InterchangeAssetImportData . h \" # include \" InterchangeEditorUtilitiesBase . h \" # include \" InterchangeFactoryBase . h \" # include \" InterchangePipelineConfigurationBase . h \" # include \" InterchangeResultsContainer . h \" # include \" InterchangeSourceData . h \" # include \" InterchangeTaskSystem . h \" # include \" InterchangeTranslatorBase . h \" # include \" InterchangeWriterBase . h \" # include \" Nodes / InterchangeBaseNodeContainer . h \" # include \" Templates / Tuple . h \" # include \" UObject / Package . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / StrongObjectPtr . h \" # include \" Containers / Ticker . h \" # include \" InterchangeManager . generated . h \" class FAsyncTaskNotification ; class UInterchangeBlueprintPipelineBase ; class UInterchangeFactoryBaseNode ; class UInterchangePipelineBase ; class UInterchangePythonPipelineBase ; class ULevel ;)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FOnObjectImportDoneDynamic, UObject*, Object)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnObjectImportDoneNative, UObject*)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_OneParam(FOnImportDoneDynamic, const TArray<UObject*>&, Objects)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnImportDoneNative, const TArray<UObject*>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnImportStarted)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnImportFinished)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class ESanitizeNameTypeFlags : uint8 { None = 0 x00,Name = 0 x01,ObjectName = 0 x02,ObjectPath = 0 x04,LongPackage = 0 x08 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ESanitizeNameTypeFlags) DECLARE_TS_MULTICAST_DELEGATE_TwoParams(FOnSanitizeName, FString& , const ESanitizeNameTypeFlags)"
  },
  {
    "label": "FScopedInterchangeImportEnableState()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace Interchange { class FScopedInterchangeImportEnableState { public :)",
    "insertText": "FScopedInterchangeImportEnableState(const bool bScopeValue)"
  },
  {
    "label": "FScopedInterchangeImportEnableState()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedInterchangeImportEnableState()"
  },
  {
    "label": "FScopedSourceData()",
    "kind": "Method",
    "detail": "Function (private : bool bOriginalInterchangeImportEnableState ; } ; class FScopedSourceData { public :)",
    "insertText": "FScopedSourceData(const FString& Filename)"
  },
  {
    "label": "FScopedSourceData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedSourceData()"
  },
  {
    "label": "GetSourceData()",
    "kind": "Method",
    "detail": "Function (UInterchangeSourceData*)",
    "insertText": "GetSourceData()"
  },
  {
    "label": "FScopedTranslator()",
    "kind": "Method",
    "detail": "Function (private : TStrongObjectPtr<UInterchangeSourceData> SourceDataPtr = nullptr ; } ; class FScopedTranslator { public :)",
    "insertText": "FScopedTranslator(const UInterchangeSourceData* SourceData)"
  },
  {
    "label": "FScopedTranslator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FScopedTranslator()"
  },
  {
    "label": "GetTranslator()",
    "kind": "Method",
    "detail": "Function (UInterchangeTranslatorBase*)",
    "insertText": "GetTranslator()"
  },
  {
    "label": "FImportResult()",
    "kind": "Method",
    "detail": "Function (private : TStrongObjectPtr<UInterchangeTranslatorBase> ScopedTranslatorPtr = nullptr ; } ; enum class EImportType : uint8 { ImportType_None,ImportType_Asset,ImportType_Scene } ; struct FImportAsyncHelperData { bool bIsAutomated = false ; bool bFollowRedirectors = false ; EImportType ImportType = EImportType::ImportType_None ; UObject* ReimportObject = nullptr ; ULevel* ImportLevel = nullptr ; FString DestinationName ; bool bReplaceExisting = true ; } ; class FImportResult : protected FGCObject { public :)",
    "insertText": "FImportResult()"
  },
  {
    "label": "FImportResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FImportResult(FImportResult&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FImportResult&)",
    "insertText": "operator(FImportResult&&)"
  },
  {
    "label": "FImportResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FImportResult(const FImportResult&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FImportResult&)",
    "insertText": "operator(const FImportResult&)"
  },
  {
    "label": "GetStatus()",
    "kind": "Method",
    "detail": "Function (public : enum class EStatus { Invalid,InProgress,Done } ; EStatus)",
    "insertText": "GetStatus()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "SetInProgress()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInProgress()"
  },
  {
    "label": "SetDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDone()"
  },
  {
    "label": "WaitUntilDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilDone(bool bSynchronous = false)"
  },
  {
    "label": "GetImportedObjects()",
    "kind": "Method",
    "detail": "Function (const TArray<UObject*>&)",
    "insertText": "GetImportedObjects()"
  },
  {
    "label": "GetFirstAssetOfClass()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetFirstAssetOfClass(UClass* InClass)"
  },
  {
    "label": "GetResults()",
    "kind": "Method",
    "detail": "Function (UInterchangeResultsContainer*)",
    "insertText": "GetResults()"
  },
  {
    "label": "OnDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDone(TFunction< void(FImportResult&) > Callback)"
  },
  {
    "label": "SetAsyncHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncHelper(TWeakPtr<class FImportAsyncHelper> InAsyncHelper)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (FOnObjectImportDoneDynamic OnObjectDone ; FOnObjectImportDoneNative OnObjectDoneNative ; FOnImportDoneDynamic OnImportDone ; FOnImportDoneNative OnImportDoneNative ; protected : void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : std::atomic<EStatus> ImportStatus ; TArray<TObjectPtr<UObject>> ImportedObjects ; FRWLock ImportedObjectsRWLock ; TObjectPtr<UInterchangeResultsContainer> Results ; TWeakPtr<class FImportAsyncHelper> AsyncHelper = nullptr ; TFunction<)",
    "insertText": "void(FImportResult&)"
  },
  {
    "label": "FImportAsyncHelper()",
    "kind": "Method",
    "detail": "Function (} ; using FAssetImportResultRef = TSharedRef<FImportResult,ESPMode::ThreadSafe> ; using FSceneImportResultRef = TSharedRef<FImportResult,ESPMode::ThreadSafe> ; using FAssetImportResultPtr = TSharedPtr<FImportResult,ESPMode::ThreadSafe> ; using FSceneImportResultPtr = TSharedPtr<FImportResult,ESPMode::ThreadSafe> ; class FImportAsyncHelper : protected FGCObject { public :)",
    "insertText": "FImportAsyncHelper()"
  },
  {
    "label": "IsClassImportAllowed()",
    "kind": "Method",
    "detail": "Function (} bool bRunSynchronous = false ; bool bRuntimeOrPIE = false ; int32 UniqueId ; FString ContentBasePath ; TArray<TStrongObjectPtr<UInterchangeBaseNodeContainer>> BaseNodeContainers ; TArray<TObjectPtr<UInterchangeSourceData>> SourceDatas ; TArray<TObjectPtr<UInterchangeTranslatorBase>> Translators ; TArray<TObjectPtr<UInterchangePipelineBase>> Pipelines ; TArray<UObject*> OriginalPipelines ; TArray<uint64> TranslatorTasks ; TArray<uint64> PipelineTasks ; TArray<uint64> WaitAssetCompilationTasks ; TArray<uint64> PostImportTasks ; uint64 ParsingTask ; TArray<uint64> ImportObjectQueryPayloadsTasks ; TArray<uint64> BeginImportObjectTasks ; TArray<uint64> ImportObjectTasks ; TArray<uint64> FinalizeImportObjectTasks ; TArray<uint64> SceneTasks ; uint64 PreCompletionTask ; uint64 CompletionTask ; bool)",
    "insertText": "IsClassImportAllowed(UClass* Class)"
  },
  {
    "label": "GetCreatedPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GetCreatedPackage(const FString& PackageName)"
  },
  {
    "label": "AddCreatedPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCreatedPackage(const FString& PackageName, UPackage* Package)"
  },
  {
    "label": "GetCreatedFactory()",
    "kind": "Method",
    "detail": "Function (UInterchangeFactoryBase*)",
    "insertText": "GetCreatedFactory(const FString& FactoryNodeUniqueId)"
  },
  {
    "label": "AddCreatedFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCreatedFactory(const FString& FactoryNodeUniqueId, UInterchangeFactoryBase* Factory)"
  },
  {
    "label": "AddDefaultImportedAssetGetRef()",
    "kind": "Method",
    "detail": "Function (struct FImportedObjectInfo { UObject* ImportedObject = nullptr ; UInterchangeFactoryBase* Factory = nullptr ; UInterchangeFactoryBaseNode* FactoryNode = nullptr ; bool bIsReimport ; bool bPostEditChangeCalled = false ; } ; FImportedObjectInfo&)",
    "insertText": "AddDefaultImportedAssetGetRef(int32 SourceIndex)"
  },
  {
    "label": "FindImportedAssets()",
    "kind": "Method",
    "detail": "Function (const FImportedObjectInfo*)",
    "insertText": "FindImportedAssets(int32 SourceIndex, TFunction< bool(const FImportedObjectInfo& ImportedObjects) > Predicate)"
  },
  {
    "label": "IterateImportedAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateImportedAssets(int32 SourceIndex, TFunction< void(const TArray<FImportedObjectInfo>& ImportedObjects) > Callback)"
  },
  {
    "label": "IterateImportedAssetsPerSourceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateImportedAssetsPerSourceIndex(TFunction< void(int32 SourceIndex, const TArray<FImportedObjectInfo>& ImportedObjects) > Callback)"
  },
  {
    "label": "AddDefaultImportedSceneObjectGetRef()",
    "kind": "Method",
    "detail": "Function (FImportedObjectInfo&)",
    "insertText": "AddDefaultImportedSceneObjectGetRef(int32 SourceIndex)"
  },
  {
    "label": "FindImportedSceneObjects()",
    "kind": "Method",
    "detail": "Function (const FImportedObjectInfo*)",
    "insertText": "FindImportedSceneObjects(int32 SourceIndex, TFunction< bool(const FImportedObjectInfo& ImportedObjects) > Predicate)"
  },
  {
    "label": "IterateImportedSceneObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateImportedSceneObjects(int32 SourceIndex, TFunction< void(const TArray<FImportedObjectInfo>& ImportedObjects) > Callback)"
  },
  {
    "label": "IterateImportedSceneObjectsPerSourceIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateImportedSceneObjectsPerSourceIndex(TFunction< void(int32 SourceIndex, const TArray<FImportedObjectInfo>& ImportedObjects) > Callback)"
  },
  {
    "label": "IsImportingObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImportingObject(UObject* Object)"
  },
  {
    "label": "SendAnalyticImportEndData()",
    "kind": "Method",
    "detail": "Function (FImportAsyncHelperData TaskData ; FAssetImportResultRef AssetImportResult ; FSceneImportResultRef SceneImportResult ; std::atomic<bool> bCancel ; void)",
    "insertText": "SendAnalyticImportEndData()"
  },
  {
    "label": "ReleaseTranslatorsSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseTranslatorsSource()"
  },
  {
    "label": "GetCompletionTaskGraphEvent()",
    "kind": "Method",
    "detail": "Function (TArray<uint64>)",
    "insertText": "GetCompletionTaskGraphEvent()"
  },
  {
    "label": "InitCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCancel()"
  },
  {
    "label": "CleanUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUp()"
  },
  {
    "label": "GeneratePipelineInstance()",
    "kind": "Method",
    "detail": "Function (private : FCriticalSection ClassPermissionLock ; TSet<UClass*> DeniedClasses ; TSet<UClass*> AllowedClasses ; FCriticalSection CreatedPackagesLock ; TMap<FString,UPackage*> CreatedPackages ; FCriticalSection CreatedFactoriesLock ; TMap<FString,TObjectPtr<UInterchangeFactoryBase>> CreatedFactories ; FCriticalSection ImportedAssetsPerSourceIndexLock ; TMap<int32,TArray<FImportedObjectInfo>> ImportedAssetsPerSourceIndex ; FCriticalSection ImportedSceneObjectsPerSourceIndexLock ; TMap<int32,TArray<FImportedObjectInfo>> ImportedSceneObjectsPerSourceIndex ; } ; UInterchangePipelineBase*)",
    "insertText": "GeneratePipelineInstance(const FSoftObjectPath& PipelineInstance)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "UCLASS(Transient, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Interchange|ImportAsset\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Interchange|ImportAsset\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (FOnImportDoneNative OnSceneImportDoneNative ; bool bRunSynchronous ; } ;)",
    "insertText": "UCLASS(Transient, BlueprintType, CustomConstructor, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UInterchangeManager(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "GetInterchangeManager()",
    "kind": "Method",
    "detail": "Function (} UInterchangeManager&)",
    "insertText": "GetInterchangeManager()"
  },
  {
    "label": "IsInterchangeImportEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterchangeImportEnabled()"
  },
  {
    "label": "SetInterchangeImportEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInterchangeImportEnabled(bool bEnabled)"
  },
  {
    "label": "IsImporting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsImporting()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInterchangeOnAssetPostImport, UObject*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInterchangeOnAssetPostReimport, UObject*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FInterchangeOnBatchImportComplete, TStrongObjectPtr<UInterchangeResultsContainer>)"
  },
  {
    "label": "SanitizeNameInline()",
    "kind": "Method",
    "detail": "Function (FInterchangeOnAssetPostImport OnAssetPostImport ; FInterchangeOnAssetPostReimport OnAssetPostReimport ; FInterchangeOnBatchImportComplete OnBatchImportComplete ; FOnImportStarted OnImportStarted ; FOnImportFinished OnImportFinished ; FOnSanitizeName OnSanitizeName ; FSimpleMulticastDelegate OnPreDestroyInterchangeManager ; void)",
    "insertText": "SanitizeNameInline(FString& NameToSanitize, const ESanitizeNameTypeFlags NameType)"
  },
  {
    "label": "RegisterTranslator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterTranslator(const UClass* TranslatorClass)"
  },
  {
    "label": "RegisterFactory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterFactory(const UClass* Factory)"
  },
  {
    "label": "RegisterWriter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterWriter(const UClass* Writer)"
  },
  {
    "label": "RegisterImportDataConverter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterImportDataConverter(const UClass* Converter)"
  },
  {
    "label": "ConvertImportData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertImportData(UObject* Asset, const FString& Extension)"
  },
  {
    "label": "ConvertImportData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertImportData(const UObject* SourceImportData, FImportAssetParameters& ImportAssetParameters)"
  },
  {
    "label": "ConvertImportData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertImportData(const UObject* SourceImportData, const UClass* DestinationClass, UObject** DestinationImportData)"
  },
  {
    "label": "GetSupportedFormats()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetSupportedFormats(const EInterchangeTranslatorType ForTranslatorType)"
  },
  {
    "label": "GetSupportedAssetTypeFormats()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetSupportedAssetTypeFormats(const EInterchangeTranslatorAssetType ForTranslatorAssetType, const EInterchangeTranslatorType ForTranslatorType = EInterchangeTranslatorType::Invalid, bool bStrictMatchTranslatorType = false)"
  },
  {
    "label": "GetSupportedFormatsForObject()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetSupportedFormatsForObject(const UObject* Object, int32 SourceFileIndex)"
  },
  {
    "label": "CanTranslateSourceData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTranslateSourceData(const UInterchangeSourceData* SourceData, bool bSceneImportOnly = false)"
  },
  {
    "label": "CanReimport()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanReimport(const UObject* Object, TArray<FString>& OutFilenames)"
  },
  {
    "label": "ImportAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportAsset(const FString& ContentPath, const UInterchangeSourceData* SourceData, const FImportAssetParameters& ImportAssetParameters)"
  },
  {
    "label": "ImportAssetWithResult()",
    "kind": "Method",
    "detail": "Function (UE::Interchange::FAssetImportResultRef)",
    "insertText": "ImportAssetWithResult(const FString& ContentPath, const UInterchangeSourceData* SourceData, const FImportAssetParameters& ImportAssetParameters)"
  },
  {
    "label": "ImportAssetAsync()",
    "kind": "Method",
    "detail": "Function (UE::Interchange::FAssetImportResultRef)",
    "insertText": "ImportAssetAsync(const FString& ContentPath, const UInterchangeSourceData* SourceData, const FImportAssetParameters& ImportAssetParameters)"
  },
  {
    "label": "ImportSceneAsync()",
    "kind": "Method",
    "detail": "Function (TTuple<UE::Interchange::FAssetImportResultRef,UE::Interchange::FSceneImportResultRef>)",
    "insertText": "ImportSceneAsync(const FString& ContentPath, const UInterchangeSourceData* SourceData, const FImportAssetParameters& ImportAssetParameters)"
  },
  {
    "label": "CreateAsyncHelper()",
    "kind": "Method",
    "detail": "Function (TSharedRef<UE::Interchange::FImportAsyncHelper,ESPMode::ThreadSafe>)",
    "insertText": "CreateAsyncHelper(const UE::Interchange::FImportAsyncHelperData& Data, const FImportAssetParameters& ImportAssetParameters)"
  },
  {
    "label": "ReleaseAsyncHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAsyncHelper(TWeakPtr<UE::Interchange::FImportAsyncHelper, ESPMode::ThreadSafe> AsyncHelper)"
  },
  {
    "label": "GetTranslatorForSourceData()",
    "kind": "Method",
    "detail": "Function (UInterchangeTranslatorBase*)",
    "insertText": "GetTranslatorForSourceData(const UInterchangeSourceData* SourceData)"
  },
  {
    "label": "IsInterchangeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInterchangeActive()"
  },
  {
    "label": "WarnIfInterchangeIsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WarnIfInterchangeIsActive()"
  },
  {
    "label": "CanTranslateSourceDataWithPayloadInterface()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanTranslateSourceDataWithPayloadInterface(const UInterchangeSourceData* SourceData, const UClass* PayloadInterfaceClass)"
  },
  {
    "label": "GetTranslatorSupportingPayloadInterfaceForSourceData()",
    "kind": "Method",
    "detail": "Function (UInterchangeTranslatorBase*)",
    "insertText": "GetTranslatorSupportingPayloadInterfaceForSourceData(const UInterchangeSourceData* SourceData, const UClass* PayloadInterfaceClass)"
  },
  {
    "label": "IsObjectBeingImported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectBeingImported(UObject* Object)"
  },
  {
    "label": "EnqueuePostImportTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueuePostImportTask(TSharedPtr<FInterchangePostImportTask> PostImportTask)"
  },
  {
    "label": "SetReplaceExistingAlldialogAnswer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplaceExistingAlldialogAnswer(bool bReplaceExistingAllDialogAnswer)"
  },
  {
    "label": "ResetReplaceExistingAlldialogAnswerSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetReplaceExistingAlldialogAnswerSet()"
  },
  {
    "label": "GetReplaceExistingAlldialogAnswer()",
    "kind": "Method",
    "detail": "Function (TOptional<bool>)",
    "insertText": "GetReplaceExistingAlldialogAnswer()"
  },
  {
    "label": "SetEditorUtilities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEditorUtilities(UClass* EditorUtilitiesClass)"
  },
  {
    "label": "GetEditorUtilities()",
    "kind": "Method",
    "detail": "Function (UInterchangeEditorUtilitiesBase*)",
    "insertText": "GetEditorUtilities()"
  },
  {
    "label": "IsAttended()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsAttended()"
  },
  {
    "label": "FindPipelineCandidate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPipelineCandidate(TArray<UClass*>& PipelineCandidates)"
  },
  {
    "label": "CancelAllTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAllTasks()"
  },
  {
    "label": "WaitUntilAllTasksDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitUntilAllTasksDone(bool bCancel)"
  },
  {
    "label": "SetActiveMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveMode(bool IsActive)"
  },
  {
    "label": "StartQueuedTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartQueuedTasks(bool bCancelAllTasks = false)"
  },
  {
    "label": "ImportInternal()",
    "kind": "Method",
    "detail": "Function (TTuple<UE::Interchange::FAssetImportResultRef,UE::Interchange::FSceneImportResultRef>)",
    "insertText": "ImportInternal(const FString& ContentPath, const UInterchangeSourceData* SourceData, const FImportAssetParameters& ImportAssetParameters, const UE::Interchange::EImportType ImportType)"
  }
]