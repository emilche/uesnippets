[
  {
    "label": "FAnimationBaseContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationBaseContext"
  },
  {
    "label": "FAnimInstanceProxy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimInstanceProxy"
  },
  {
    "label": "FAnimSyncDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSyncDebugInfo"
  },
  {
    "label": "FAnimSyncGroupScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimSyncGroupScope"
  },
  {
    "label": "FAnimSyncDebugInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AnimNodeMessages . h \" # include \" Animation / AnimationAsset . h \" # include \" Animation / AnimSync . h \" struct FAnimationBaseContext ; struct FAnimInstanceProxy ; namespace UE { namespace Anim { struct FAnimSyncDebugInfo {)",
    "insertText": "FAnimSyncDebugInfo()"
  },
  {
    "label": "FAnimSyncDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimSyncDebugInfo(const FAnimationBaseContext& InContext)"
  },
  {
    "label": "FAnimSyncDebugInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimSyncDebugInfo(FAnimInstanceProxy& InSourceProxy, int32 InSourceNodeId) : SourceProxy(&InSourceProxy) , SourceNodeId(InSourceNodeId)"
  },
  {
    "label": "DECLARE_ANIMGRAPH_MESSAGE_API()",
    "kind": "Method",
    "detail": "Function (} FAnimInstanceProxy* SourceProxy = nullptr ; int32 SourceNodeId = INDEX_NONE ; } ; class FAnimSyncGroupScope : public IGraphMessage {)",
    "insertText": "DECLARE_ANIMGRAPH_MESSAGE_API(FAnimSyncGroupScope, ENGINE_API)"
  },
  {
    "label": "FAnimSyncGroupScope()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimSyncGroupScope(const FAnimationBaseContext& InContext, FName InSyncGroup = NAME_None, EAnimGroupRole::Type InGroupRole = EAnimGroupRole::CanBeLeader)"
  },
  {
    "label": "AddTickRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTickRecord(const FAnimTickRecord& InTickRecord, const FAnimSyncParams& InSyncParams = FAnimSyncParams(), const FAnimSyncDebugInfo& InDebugInfo = FAnimSyncDebugInfo())"
  },
  {
    "label": "SetMirror()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMirror(const UMirrorDataTable* MirrorDataTable)"
  }
]