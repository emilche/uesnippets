[
  {
    "label": "BasicIceController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicIceController"
  },
  {
    "label": "BasicIceController()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_BASIC_ICE_CONTROLLER_H_ # define P2P_BASE_BASIC_ICE_CONTROLLER_H_ # include<algorithm> # include<map> # include<set> # include<utility> # include<vector> # include \" p2p / base / ice_controller_factory_interface . h \" # include \" p2p / base / ice_controller_interface . h \" # include \" p2p / base / p2p_transport_channel . h \" namespace cricket { class BasicIceController : public IceControllerInterface { public :)",
    "insertText": "BasicIceController(const IceControllerFactoryArgs& args)"
  },
  {
    "label": "BasicIceController()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicIceController()"
  },
  {
    "label": "SetIceConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIceConfig(const IceConfig& config)"
  },
  {
    "label": "SetSelectedConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedConnection(const Connection* selected_connection)"
  },
  {
    "label": "AddConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConnection(const Connection* connection)"
  },
  {
    "label": "OnConnectionDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConnectionDestroyed(const Connection* connection)"
  },
  {
    "label": "connections()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<const Connection*>)",
    "insertText": "connections()"
  },
  {
    "label": "HasPingableConnection()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasPingableConnection()"
  },
  {
    "label": "SelectConnectionToPing()",
    "kind": "Method",
    "detail": "Function (PingResult)",
    "insertText": "SelectConnectionToPing(int64_t last_ping_sent_ms)"
  },
  {
    "label": "GetUseCandidateAttr()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseCandidateAttr(const Connection* conn, NominationMode mode, IceMode remote_ice_mode)"
  },
  {
    "label": "PruneConnections()",
    "kind": "Method",
    "detail": "Function (std::vector<const Connection*>)",
    "insertText": "PruneConnections()"
  },
  {
    "label": "FindNextPingableConnection()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "FindNextPingableConnection()"
  },
  {
    "label": "MarkConnectionPinged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkConnectionPinged(const Connection* conn)"
  },
  {
    "label": "weak()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "weak()"
  },
  {
    "label": "weak_ping_interval()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "weak_ping_interval()"
  },
  {
    "label": "strong_ping_interval()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "strong_ping_interval()"
  },
  {
    "label": "check_receiving_interval()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "check_receiving_interval()"
  },
  {
    "label": "FindOldestConnectionNeedingTriggeredCheck()",
    "kind": "Method",
    "detail": "Function (} const Connection*)",
    "insertText": "FindOldestConnectionNeedingTriggeredCheck(int64_t now)"
  },
  {
    "label": "MorePingable()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "MorePingable(const Connection* conn1, const Connection* conn2)"
  },
  {
    "label": "MostLikelyToWork()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "MostLikelyToWork(const Connection* conn1, const Connection* conn2)"
  },
  {
    "label": "LeastRecentlyPinged()",
    "kind": "Method",
    "detail": "Function (const Connection*)",
    "insertText": "LeastRecentlyPinged(const Connection* conn1, const Connection* conn2)"
  },
  {
    "label": "IsPingable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPingable(const Connection* conn, int64_t now)"
  },
  {
    "label": "IsBackupConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBackupConnection(const Connection* conn)"
  },
  {
    "label": "WritableConnectionPastPingInterval()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WritableConnectionPastPingInterval(const Connection* conn, int64_t now)"
  },
  {
    "label": "CalculateActiveWritablePingInterval()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CalculateActiveWritablePingInterval(const Connection* conn, int64_t now)"
  },
  {
    "label": "GetBestConnectionByNetwork()",
    "kind": "Method",
    "detail": "Function (std::map<const rtc::Network*,const Connection*>)",
    "insertText": "GetBestConnectionByNetwork()"
  },
  {
    "label": "GetBestWritableConnectionPerNetwork()",
    "kind": "Method",
    "detail": "Function (std::vector<const Connection*>)",
    "insertText": "GetBestWritableConnectionPerNetwork()"
  },
  {
    "label": "ReadyToSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToSend(const Connection* connection)"
  },
  {
    "label": "PresumedWritable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PresumedWritable(const Connection* conn)"
  },
  {
    "label": "CompareCandidatePairNetworks()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CompareCandidatePairNetworks(const Connection* a, const Connection* b, absl::optional<rtc::AdapterType> network_preference)"
  },
  {
    "label": "CompareConnectionStates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CompareConnectionStates(const Connection* a, const Connection* b, absl::optional<int64_t> receiving_unchanged_threshold, bool* missed_receiving_unchanged_threshold)"
  },
  {
    "label": "CompareConnectionCandidates()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CompareConnectionCandidates(const Connection* a, const Connection* b)"
  },
  {
    "label": "CompareConnections()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "CompareConnections(const Connection* a, const Connection* b, absl::optional<int64_t> receiving_unchanged_threshold, bool* missed_receiving_unchanged_threshold)"
  },
  {
    "label": "IceTransportState()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "IceTransportState()"
  },
  {
    "label": "IceRole()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "IceRole()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (std::function<)",
    "insertText": "bool(const Connection*)"
  }
]