[
  {
    "label": "FClusterUnion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnion"
  },
  {
    "label": "FClusterUnionStressSolver",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionStressSolver"
  },
  {
    "label": "FConnectionEvalResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConnectionEvalResult"
  },
  {
    "label": "FNodeEvalResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeEvalResult"
  },
  {
    "label": "FNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNode"
  },
  {
    "label": "GetMaxStressRatio()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / ParticleHandleFwd . h \" namespace Chaos { struct FClusterUnion ; struct FClusterUnionStressSolver { public : using FNodeId = const FPBDRigidClusteredParticleHandle* ; struct FConnectionEvalResult { float)",
    "insertText": "GetMaxStressRatio()"
  },
  {
    "label": "HasFailed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFailed()"
  },
  {
    "label": "IsGreaterThan()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGreaterThan(float StressRatio)"
  },
  {
    "label": "FClusterUnionStressSolver()",
    "kind": "Method",
    "detail": "Function (} float CompressionStressRatio = 0 ; float TensileStressRatio = 0 ; float ShearStressRatio = 0 ; } ; struct FNodeEvalResult { FNodeId NodeA = nullptr ; FNodeId NodeB = nullptr ; FConnectionEvalResult ConnectionResult ; } ; using FResults = TArray<FNodeEvalResult> ;)",
    "insertText": "FClusterUnionStressSolver(FClusterUnion& ClusterUnionIn) : ClusterUnion(ClusterUnionIn)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (} const FResults&)",
    "insertText": "Solve()"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (private : struct FNode {)",
    "insertText": "FNode() : Particle(nullptr) , Value(TNumericLimits<float>::Max()) , SumOfMassRatios(0) , WeightedCenterOfMass(FVec3::ZeroVector)"
  },
  {
    "label": "FNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNode(FPBDRigidClusteredParticleHandle* ParticleIn) : Particle(ParticleIn) , Value(TNumericLimits<float>::Max()) , SumOfMassRatios(0) , WeightedCenterOfMass(FVec3::ZeroVector)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} FNodeId)",
    "insertText": "GetId()"
  },
  {
    "label": "GetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "GetCenterOfMass()"
  },
  {
    "label": "PrepareForSolve()",
    "kind": "Method",
    "detail": "Function (FPBDRigidClusteredParticleHandle* Particle ; float Value ; double SumOfMassRatios ; FVec3 WeightedCenterOfMass ; } ; void)",
    "insertText": "PrepareForSolve()"
  },
  {
    "label": "CreateNodeFromClusterUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateNodeFromClusterUnion()"
  },
  {
    "label": "ComputeNodeValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeNodeValues()"
  },
  {
    "label": "PropagateValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateValue(const FNode& Node)"
  },
  {
    "label": "EvaluateNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateNodes()"
  },
  {
    "label": "EvaluateNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateNode(FNode& Node)"
  },
  {
    "label": "EvaluateConnectionStress()",
    "kind": "Method",
    "detail": "Function (FConnectionEvalResult)",
    "insertText": "EvaluateConnectionStress(double Mass, const FVec3& CenterOfMass, float ConnectionArea, const FVec3& ConnectionCenter, const FVec3& ConnectionNormal)"
  }
]