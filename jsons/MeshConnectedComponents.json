[
  {
    "label": "FMeshConnectedComponents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMeshConnectedComponents"
  },
  {
    "label": "FComponent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponent"
  },
  {
    "label": "FMeshConnectedComponents()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IntBoxTypes . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" Containers / IndirectArray . h \" namespace UE { namespace Geometry { class FMeshConnectedComponents { public : const FDynamicMesh3* Mesh ; struct FComponent { TArray<int> Indices ; } ; TIndirectArray<FComponent> Components ; public :)",
    "insertText": "FMeshConnectedComponents(const FDynamicMesh3* MeshIn) : Mesh(MeshIn)"
  },
  {
    "label": "FindConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FindConnectedTriangles(TFunction<bool(int32, int32)> TrisConnectedPredicate = nullptr)"
  },
  {
    "label": "FindConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindConnectedTriangles(const TArray<int>& TriangleROI, TFunction<bool(int32, int32)> TrisConnectedPredicate = nullptr)"
  },
  {
    "label": "FindConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindConnectedTriangles(TFunctionRef<bool(int)> IndexFilterFunc, TFunction<bool(int32, int32)> TrisConnectedPredicate = nullptr)"
  },
  {
    "label": "FindTrianglesConnectedToSeeds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTrianglesConnectedToSeeds(const TArray<int>& SeedTriangles, TFunction<bool(int32, int32)> TrisConnectedPredicate = nullptr)"
  },
  {
    "label": "InitializeFromTriangleComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeFromTriangleComponents(const TArray<TArray<int32>>& ComponentLists, bool bValidateIDs)"
  },
  {
    "label": "InitializeFromTriangleComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeFromTriangleComponents(TArray<TArray<int32>>& ComponentLists, bool bMoveSubLists, bool bValidateIDs)"
  },
  {
    "label": "FindConnectedVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindConnectedVertices(TFunction<bool(int32, int32)> VertsConnectedPredicate = nullptr)"
  },
  {
    "label": "FindConnectedVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindConnectedVertices(const TArray<int>& VertexROI, TFunction<bool(int32, int32)> VertsConnectedPredicate = nullptr)"
  },
  {
    "label": "FindConnectedVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindConnectedVertices(TFunctionRef<bool(int)> IndexFilterFunc, TFunction<bool(int32, int32)>VertsConnectedPredicate = nullptr)"
  },
  {
    "label": "FindVerticesConnectedToSeeds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindVerticesConnectedToSeeds(const TArray<int>& SeedVertices, TFunction<bool(int32, int32)> VertsConnectedPredicate = nullptr)"
  },
  {
    "label": "InitializeFromVertexComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeFromVertexComponents(const TArray<TArray<int32>>& ComponentLists, bool bValidateIDs)"
  },
  {
    "label": "InitializeFromVertexComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeFromVertexComponents(TArray<TArray<int32>>& ComponentLists, bool bMoveSubLists, bool bValidateIDs)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (} const FComponent&)",
    "insertText": "GetComponent(int32 Index)"
  },
  {
    "label": "SortByCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortByCount(bool bLargestFirst = true)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (public : auto)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "end()"
  },
  {
    "label": "FindTriComponents()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "FindTriComponents(FInterval1i ActiveRange, TArray<uint8>& ActiveSet, TFunction<bool(int32, int32)> TriConnectedPredicate)"
  },
  {
    "label": "FindTriComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTriComponents(const TArray<int32>& SeedList, TArray<uint8>& ActiveSet, TFunction<bool(int32, int32)> TriConnectedPredicate)"
  },
  {
    "label": "FindTriComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTriComponent(FComponent* Component, TArray<int32>& ComponentQueue, TArray<uint8>& ActiveSet)"
  },
  {
    "label": "FindTriComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindTriComponent(FComponent* Component, TArray<int32>& ComponentQueue, TArray<uint8>& ActiveSet, TFunctionRef<bool(int32, int32)> TriConnectedPredicate)"
  },
  {
    "label": "RemoveFromActiveSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromActiveSet(const FComponent* Component, TArray<uint8>& ActiveSet)"
  },
  {
    "label": "FindVertComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindVertComponents(FInterval1i ActiveRange, TArray<uint8>& ActiveSet, TFunction<bool(int32, int32)> VertsConnectedPredicate)"
  },
  {
    "label": "FindVertComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindVertComponents(const TArray<int32>& SeedList, TArray<uint8>& ActiveSet, TFunction<bool(int32, int32)> VertsConnectedPredicate)"
  },
  {
    "label": "FindVertComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindVertComponent(FComponent* Component, TArray<int32>& ComponentQueue, TArray<uint8>& ActiveSet)"
  },
  {
    "label": "FindVertComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindVertComponent(FComponent* Component, TArray<int32>& ComponentQueue, TArray<uint8>& ActiveSet, TFunctionRef<bool(int32, int32)> VertsConnectedPredicate)"
  },
  {
    "label": "GrowToConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "GrowToConnectedTriangles(const FDynamicMesh3* Mesh, const TArray<int>& InputROI, TArray<int>& ResultROI, TArray<int32>* QueueBuffer = nullptr, TSet<int32>* DoneBuffer = nullptr, TFunctionRef<bool(int32, int32)> CanGrowPredicate = [](int32, int32) { return true; })"
  },
  {
    "label": "GrowToConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrowToConnectedTriangles(const FDynamicMesh3* Mesh, const TArray<int>& InputROI, TSet<int>& ResultROI, TArray<int32>* QueueBuffer = nullptr, TFunctionRef<bool(int32, int32)> CanGrowPredicate = [](int32, int32) { return true; })"
  },
  {
    "label": "GrowToConnectedVertices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrowToConnectedVertices(const FDynamicMesh3& Mesh, const TArray<int>& InputROI, TSet<int>& ResultROI, TArray<int32>* QueueBuffer = nullptr, TFunctionRef<bool(int32, int32)> CanGrowPredicate = [](int32, int32) { return true; })"
  },
  {
    "label": "GrowToConnectedEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GrowToConnectedEdges(const FDynamicMesh3& Mesh, const TArray<int>& InputROI, TSet<int>& ResultROI, TArray<int32>* QueueBuffer = nullptr, TFunctionRef<bool(int32, int32)> CanGrowPredicate = [](int32, int32) { return true; })"
  }
]