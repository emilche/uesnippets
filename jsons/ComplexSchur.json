[
  {
    "label": "complex_schur_reduce_to_hessenberg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "complex_schur_reduce_to_hessenberg"
  },
  {
    "label": "ComplexSchur",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ComplexSchur"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "ComplexSchur()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_COMPLEX_SCHUR_H # define EIGEN_COMPLEX_SCHUR_H # include \" . / HessenbergDecomposition . h \" namespace Eigen { namespace internal { template<MatrixType,bool IsComplex> struct complex_schur_reduce_to_hessenberg ; } template<_MatrixType> class ComplexSchur { public : typedef _MatrixType MatrixType ; enum { RowsAtCompileTime = MatrixType::RowsAtCompileTime,ColsAtCompileTime = MatrixType::ColsAtCompileTime,Options = MatrixType::Options,MaxRowsAtCompileTime = MatrixType::MaxRowsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; typedef MatrixType::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Eigen::Index Index ; typedef std::complex<RealScalar> ComplexScalar ; typedef Matrix<ComplexScalar,RowsAtCompileTime,ColsAtCompileTime,Options,MaxRowsAtCompileTime,MaxColsAtCompileTime> ComplexMatrixType ;)",
    "insertText": "ComplexSchur(Index size = RowsAtCompileTime==Dynamic ? 1 : RowsAtCompileTime) : m_matT(size,size), m_matU(size,size), m_hess(size), m_isInitialized(false), m_matUisUptodate(false), m_maxIters(-1)"
  },
  {
    "label": "ComplexSchur()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "ComplexSchur(const EigenBase<InputType>& matrix, bool computeU = true) : m_matT(matrix.rows(),matrix.cols()), m_matU(matrix.rows(),matrix.cols()), m_hess(matrix.rows()), m_isInitialized(false), m_matUisUptodate(false), m_maxIters(-1)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix.derived(), computeU)"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (} const ComplexMatrixType&)",
    "insertText": "matrixU()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"ComplexSchur is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_matUisUptodate && \"The matrix U has not been computed during the ComplexSchur decomposition.\")"
  },
  {
    "label": "computeFromHessenberg()",
    "kind": "Method",
    "detail": "Function (template<HessMatrixType,OrthMatrixType> ComplexSchur&)",
    "insertText": "computeFromHessenberg(const HessMatrixType& matrixH, const OrthMatrixType& matrixQ, bool computeU=true)"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "getMaxIterations()",
    "kind": "Method",
    "detail": "Function (m_maxIters = maxIters ; return* this ; } Index)",
    "insertText": "getMaxIterations()"
  },
  {
    "label": "computeShift()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "computeShift(Index iu, Index iter)"
  },
  {
    "label": "reduceToTriangularForm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reduceToTriangularForm(bool computeU)"
  },
  {
    "label": "subdiagonalEntryIsNeglegible()",
    "kind": "Method",
    "detail": "Function (struct internal::complex_schur_reduce_to_hessenberg<MatrixType,NumTraits<Scalar>::IsComplex> ; } ; template<MatrixType> bool ComplexSchur<MatrixType)",
    "insertText": "subdiagonalEntryIsNeglegible(Index i)"
  },
  {
    "label": "norm1()",
    "kind": "Method",
    "detail": "Function (RealScalar d =)",
    "insertText": "norm1(m_matT.coeff(i,i)) + numext::norm1(m_matT.coeff(i+1,i+1))"
  },
  {
    "label": "norm1()",
    "kind": "Method",
    "detail": "Function (RealScalar sd =)",
    "insertText": "norm1(m_matT.coeff(i+1,i))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i+1,i) = ComplexScalar(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using std::abs ;)",
    "insertText": "if(iter == 10 || iter == 20)"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (} Matrix<ComplexScalar,2,2> t = m_matT . template)",
    "insertText": "block(iu-1,iu-1)"
  },
  {
    "label": "cwiseAbs()",
    "kind": "Method",
    "detail": "Function (RealScalar normt = t .)",
    "insertText": "cwiseAbs().sum()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (t / = normt ; ComplexScalar b = t .)",
    "insertText": "coeff(0,1) * t.coeff(1,0)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (ComplexScalar c = t .)",
    "insertText": "coeff(0,0) - t.coeff(1,1)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (ComplexScalar disc =)",
    "insertText": "sqrt(c*c + RealScalar(4)*b)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (ComplexScalar det = t .)",
    "insertText": "coeff(0,0) * t.coeff(1,1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (ComplexScalar trace = t .)",
    "insertText": "coeff(0,0) + t.coeff(1,1)"
  },
  {
    "label": "eival1()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "eival1(trace + disc) / RealScalar(2)"
  },
  {
    "label": "eival2()",
    "kind": "Method",
    "detail": "Function (ComplexScalar)",
    "insertText": "eival2(trace - disc) / RealScalar(2)"
  },
  {
    "label": "norm1()",
    "kind": "Method",
    "detail": "Function (RealScalar eival1_norm =)",
    "insertText": "norm1(eival1)"
  },
  {
    "label": "norm1()",
    "kind": "Method",
    "detail": "Function (RealScalar eival2_norm =)",
    "insertText": "norm1(eival2)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (m_matUisUptodate = false ;)",
    "insertText": "eigen_assert(matrix.cols() == matrix.rows())"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_matT = matrix .)",
    "insertText": "derived().template cast<ComplexScalar>()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; m_isInitialized = true ; m_matUisUptodate = computeU ; return* this ; } internal::complex_schur_reduce_to_hessenberg<MatrixType,NumTraits<Scalar>::IsComplex)",
    "insertText": "run(*this, matrix.derived(), computeU)"
  },
  {
    "label": "computeFromHessenberg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeFromHessenberg(m_matT, m_matU, computeU)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_matT = matrixH ;)",
    "insertText": "if(computeU)"
  },
  {
    "label": "reduceToTriangularForm()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reduceToTriangularForm(computeU)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (_this . m_hess .)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "matrixH()",
    "kind": "Method",
    "detail": "Function (_this . m_matT = _this . m_hess .)",
    "insertText": "matrixH()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType> struct complex_schur_reduce_to_hessenberg<MatrixType,false> { void)",
    "insertText": "run(ComplexSchur<MatrixType>& _this, const MatrixType& matrix, bool computeU)"
  },
  {
    "label": "matrixH()",
    "kind": "Method",
    "detail": "Function (_this . m_matT = _this . m_hess .)",
    "insertText": "matrixH().template cast<ComplexScalar>()"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (MatrixType Q = _this . m_hess .)",
    "insertText": "matrixQ()"
  },
  {
    "label": "ComplexScalar()",
    "kind": "Method",
    "detail": "Function (_this . m_matU = Q . template cast<)",
    "insertText": "ComplexScalar()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Index maxIters = m_maxIters ;)",
    "insertText": "if(maxIters == -1) maxIters = m_maxIterationsPerRow * m_matT.rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (Index iu = m_matT .)",
    "insertText": "cols()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index il ; Index iter = 0 ; Index totalIter = 0 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iter = 0 ; - - iu ; })",
    "insertText": "if(iu==0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (iter + + ; totalIter + + ;)",
    "insertText": "if(totalIter > maxIters)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (il = iu - 1 ;)",
    "insertText": "while(il > 0 && !subdiagonalEntryIsNeglegible(il-1))"
  },
  {
    "label": "computeShift()",
    "kind": "Method",
    "detail": "Function (- - il ; } ComplexScalar shift =)",
    "insertText": "computeShift(iu, iter)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (JacobiRotation<ComplexScalar> rot ; rot .)",
    "insertText": "makeGivens(m_matT.coeff(il,il) - shift, m_matT.coeff(il+1,il))"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "rightCols(m_matT.cols()-il).applyOnTheLeft(il, il+1, rot.adjoint())"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "topRows((std::min)(il+2,iu)+1).applyOnTheRight(il, il+1, rot)"
  },
  {
    "label": "makeGivens()",
    "kind": "Method",
    "detail": "Function (rot .)",
    "insertText": "makeGivens(m_matT.coeffRef(i,i-1), m_matT.coeffRef(i+1,i-1), &m_matT.coeffRef(i,i-1))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "coeffRef(i+1,i-1) = ComplexScalar(0)"
  },
  {
    "label": "rightCols()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "rightCols(m_matT.cols()-i).applyOnTheLeft(i, i+1, rot.adjoint())"
  },
  {
    "label": "topRows()",
    "kind": "Method",
    "detail": "Function (m_matT .)",
    "insertText": "topRows((std::min)(i+2,iu)+1).applyOnTheRight(i, i+1, rot)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(totalIter <= maxIters)"
  }
]