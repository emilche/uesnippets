[
  {
    "label": "TJSAMP",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TJSAMP"
  },
  {
    "label": "TJPF",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TJPF"
  },
  {
    "label": "TJCS",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TJCS"
  },
  {
    "label": "TJERR",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TJERR"
  },
  {
    "label": "TJXOP",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TJXOP"
  },
  {
    "label": "tjtransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tjtransform"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __TURBOJPEG_H__ # define __TURBOJPEG_H__ # if)",
    "insertText": "defined(_WIN32) && defined(DLLDEFINE) #define DLLEXPORT __declspec(dllexport)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (TJSAMP_444 = 0,TJSAMP_422,TJSAMP_420,TJSAMP_GRAY,TJSAMP_440,TJSAMP_411 } ; const int tjMCUWidth [ TJ_NUMSAMP ] = { 8,1 6,1 6,8,8,3 2 } ; const int tjMCUHeight [ TJ_NUMSAMP ] = { 8,8,1 6,8,1 6,8 } ; # define TJ_NUMPF 1 2 enum TJPF { TJPF_RGB = 0,TJPF_BGR,TJPF_RGBX,TJPF_BGRX,TJPF_XBGR,TJPF_XRGB,TJPF_GRAY,TJPF_RGBA,TJPF_BGRA,TJPF_ABGR,TJPF_ARGB,TJPF_CMYK,TJPF_UNKNOWN = - 1 } ; const int tjRedOffset [ TJ_NUMPF ] = { 0,2,0,2,3,1,- 1,0,2,3,1,- 1 } ; const int tjGreenOffset [ TJ_NUMPF ] = { 1,1,1,1,2,2,- 1,1,1,2,2,- 1 } ; const int tjBlueOffset [ TJ_NUMPF ] = { 2,0,2,0,1,3,- 1,2,0,1,3,- 1 } ; const int tjAlphaOffset [ TJ_NUMPF ] = { - 1,- 1,- 1,- 1,- 1,- 1,- 1,3,3,0,0,- 1 } ; const int tjPixelSize [ TJ_NUMPF ] = { 3,3,4,4,4,4,1,4,4,4,4,4 } ; # define TJ_NUMCS 5 enum TJCS { TJCS_RGB = 0,TJCS_YCbCr,TJCS_GRAY,TJCS_CMYK,TJCS_YCCK } ; # define TJFLAG_BOTTOMUP 2 # define TJFLAG_FASTUPSAMPLE 2 5 6 # define TJFLAG_NOREALLOC 1 0 2 4 # define TJFLAG_FASTDCT 2 0 4 8 # define TJFLAG_ACCURATEDCT 4 0 9 6 # define TJFLAG_STOPONWARNING 8 1 9 2 # define TJFLAG_PROGRESSIVE 1 6 3 8 4 # define TJFLAG_LIMITSCANS 3 2 7 6 8 # define TJ_NUMERR 2 enum TJERR { TJERR_WARNING = 0,TJERR_FATAL } ; # define TJ_NUMXOP 8 enum TJXOP { TJXOP_NONE = 0,TJXOP_HFLIP,TJXOP_VFLIP,TJXOP_TRANSPOSE,TJXOP_TRANSVERSE,TJXOP_ROT90,TJXOP_ROT180,TJXOP_ROT270 } ; # define TJXOPT_PERFECT 1 # define TJXOPT_TRIM 2 # define TJXOPT_CROP 4 # define TJXOPT_GRAY 8 # define TJXOPT_NOOUTPUT 1 6 # define TJXOPT_PROGRESSIVE 3 2 # define TJXOPT_COPYNONE 6 4 typedef struct { int num ; int denom ; } tjscalingfactor ; typedef struct { int x ; int y ; int w ; int h ; } tjregion ; typedef struct tjtransform { tjregion r ; int op ; int options ; void* data ;)",
    "insertText": "int(*customFilter) (short *coeffs, tjregion arrayRegion, tjregion planeRegion, int componentIndex, int transformIndex, struct tjtransform *transform)"
  },
  {
    "label": "TJPAD()",
    "kind": "Method",
    "detail": "Function (} tjtransform ; typedef void* tjhandle ; # define)",
    "insertText": "TJPAD(width) (((width) + 3) & (~3)) #define TJSCALED(dimension, scalingFactor) \\ (((dimension) * scalingFactor.num + scalingFactor.denom - 1) / \\ scalingFactor.denom)"
  },
  {
    "label": "tjInitCompress()",
    "kind": "Method",
    "detail": "Function (# endif DLLEXPORT tjhandle)",
    "insertText": "tjInitCompress(void)"
  },
  {
    "label": "tjCompress2()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjCompress2(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegSubsamp, int jpegQual, int flags)"
  },
  {
    "label": "tjCompressFromYUV()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjCompressFromYUV(tjhandle handle, const unsigned char *srcBuf, int width, int pad, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)"
  },
  {
    "label": "tjCompressFromYUVPlanes()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjCompressFromYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, int width, const int *strides, int height, int subsamp, unsigned char **jpegBuf, unsigned long *jpegSize, int jpegQual, int flags)"
  },
  {
    "label": "tjBufSize()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT unsigned long)",
    "insertText": "tjBufSize(int width, int height, int jpegSubsamp)"
  },
  {
    "label": "tjBufSizeYUV2()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT unsigned long)",
    "insertText": "tjBufSizeYUV2(int width, int pad, int height, int subsamp)"
  },
  {
    "label": "tjPlaneSizeYUV()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT unsigned long)",
    "insertText": "tjPlaneSizeYUV(int componentID, int width, int stride, int height, int subsamp)"
  },
  {
    "label": "tjPlaneWidth()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjPlaneWidth(int componentID, int width, int subsamp)"
  },
  {
    "label": "tjPlaneHeight()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjPlaneHeight(int componentID, int height, int subsamp)"
  },
  {
    "label": "tjEncodeYUV3()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjEncodeYUV3(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int pad, int subsamp, int flags)"
  },
  {
    "label": "tjEncodeYUVPlanes()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjEncodeYUVPlanes(tjhandle handle, const unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char **dstPlanes, int *strides, int subsamp, int flags)"
  },
  {
    "label": "tjInitDecompress()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT tjhandle)",
    "insertText": "tjInitDecompress(void)"
  },
  {
    "label": "tjDecompressHeader3()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompressHeader3(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp, int *jpegColorspace)"
  },
  {
    "label": "tjGetScalingFactors()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT tjscalingfactor*)",
    "insertText": "tjGetScalingFactors(int *numscalingfactors)"
  },
  {
    "label": "tjDecompress2()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompress2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)"
  },
  {
    "label": "tjDecompressToYUV2()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompressToYUV2(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pad, int height, int flags)"
  },
  {
    "label": "tjDecompressToYUVPlanes()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompressToYUVPlanes(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, unsigned char **dstPlanes, int width, int *strides, int height, int flags)"
  },
  {
    "label": "tjDecodeYUV()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecodeYUV(tjhandle handle, const unsigned char *srcBuf, int pad, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)"
  },
  {
    "label": "tjDecodeYUVPlanes()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecodeYUVPlanes(tjhandle handle, const unsigned char **srcPlanes, const int *strides, int subsamp, unsigned char *dstBuf, int width, int pitch, int height, int pixelFormat, int flags)"
  },
  {
    "label": "tjInitTransform()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT tjhandle)",
    "insertText": "tjInitTransform(void)"
  },
  {
    "label": "tjTransform()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjTransform(tjhandle handle, const unsigned char *jpegBuf, unsigned long jpegSize, int n, unsigned char **dstBufs, unsigned long *dstSizes, tjtransform *transforms, int flags)"
  },
  {
    "label": "tjDestroy()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDestroy(tjhandle handle)"
  },
  {
    "label": "tjAlloc()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT unsigned char*)",
    "insertText": "tjAlloc(int bytes)"
  },
  {
    "label": "tjLoadImage()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT unsigned char*)",
    "insertText": "tjLoadImage(const char *filename, int *width, int align, int *height, int *pixelFormat, int flags)"
  },
  {
    "label": "tjSaveImage()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjSaveImage(const char *filename, unsigned char *buffer, int width, int pitch, int height, int pixelFormat, int flags)"
  },
  {
    "label": "tjFree()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT void)",
    "insertText": "tjFree(unsigned char *buffer)"
  },
  {
    "label": "tjGetErrorStr2()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT char*)",
    "insertText": "tjGetErrorStr2(tjhandle handle)"
  },
  {
    "label": "tjGetErrorCode()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjGetErrorCode(tjhandle handle)"
  },
  {
    "label": "TJBUFSIZE()",
    "kind": "Method",
    "detail": "Function (# define TJFLAG_FORCEMMX 8 # define TJFLAG_FORCESSE 1 6 # define TJFLAG_FORCESSE2 3 2 # define TJFLAG_FORCESSE3 1 2 8 # define NUMSUBOPT TJ_NUMSAMP # define TJ_444 TJSAMP_444 # define TJ_422 TJSAMP_422 # define TJ_420 TJSAMP_420 # define TJ_411 TJSAMP_420 # define TJ_GRAYSCALE TJSAMP_GRAY # define TJ_BGR 1 # define TJ_BOTTOMUP TJFLAG_BOTTOMUP # define TJ_FORCEMMX TJFLAG_FORCEMMX # define TJ_FORCESSE TJFLAG_FORCESSE # define TJ_FORCESSE2 TJFLAG_FORCESSE2 # define TJ_ALPHAFIRST 6 4 # define TJ_FORCESSE3 TJFLAG_FORCESSE3 # define TJ_FASTUPSAMPLE TJFLAG_FASTUPSAMPLE # define TJ_YUV 5 1 2 DLLEXPORT unsigned long)",
    "insertText": "TJBUFSIZE(int width, int height)"
  },
  {
    "label": "TJBUFSIZEYUV()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT unsigned long)",
    "insertText": "TJBUFSIZEYUV(int width, int height, int jpegSubsamp)"
  },
  {
    "label": "tjBufSizeYUV()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT unsigned long)",
    "insertText": "tjBufSizeYUV(int width, int height, int subsamp)"
  },
  {
    "label": "tjCompress()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjCompress(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, unsigned long *compressedSize, int jpegSubsamp, int jpegQual, int flags)"
  },
  {
    "label": "tjEncodeYUV()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjEncodeYUV(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelSize, unsigned char *dstBuf, int subsamp, int flags)"
  },
  {
    "label": "tjEncodeYUV2()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjEncodeYUV2(tjhandle handle, unsigned char *srcBuf, int width, int pitch, int height, int pixelFormat, unsigned char *dstBuf, int subsamp, int flags)"
  },
  {
    "label": "tjDecompressHeader()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompressHeader(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height)"
  },
  {
    "label": "tjDecompressHeader2()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompressHeader2(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, int *width, int *height, int *jpegSubsamp)"
  },
  {
    "label": "tjDecompress()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompress(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int width, int pitch, int height, int pixelSize, int flags)"
  },
  {
    "label": "tjDecompressToYUV()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT int)",
    "insertText": "tjDecompressToYUV(tjhandle handle, unsigned char *jpegBuf, unsigned long jpegSize, unsigned char *dstBuf, int flags)"
  },
  {
    "label": "tjGetErrorStr()",
    "kind": "Method",
    "detail": "Function (DLLEXPORT char*)",
    "insertText": "tjGetErrorStr(void)"
  }
]