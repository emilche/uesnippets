[
  {
    "label": "FStreamingLocalTimestampVisitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingLocalTimestampVisitor"
  },
  {
    "label": "FStreamingNetworkPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingNetworkPlatformFile"
  },
  {
    "label": "FAsyncFileSync",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncFileSync"
  },
  {
    "label": "FStreamingNetworkFileHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStreamingNetworkFileHandle"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" HAL / Platform . h \" # include \" Logging / LogMacros . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / DateTime . h \" # include \" Misc / Paths . h \" # include \" NetworkMessage . h \" # include \" NetworkPlatformFile . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStreamingPlatformFile, Log, All)"
  },
  {
    "label": "FStreamingLocalTimestampVisitor()",
    "kind": "Method",
    "detail": "Function (# if 0 class FStreamingLocalTimestampVisitor : public IPlatformFile::FDirectoryVisitor { private : IPlatformFile& FileInterface ; bool bCacheDirectories ; TArray<FString> DirectoriesToIgnore ; TArray<FString> DirectoriesToNotRecurse ; public : TMap<FString,FDateTime> FileTimes ;)",
    "insertText": "FStreamingLocalTimestampVisitor(IPlatformFile& InFileInterface, const TArray<FString>& InDirectoriesToIgnore, const TArray<FString>& InDirectoriesToNotRecurse, bool bInCacheDirectories=false) : FileInterface(InFileInterface) , bCacheDirectories(bInCacheDirectories)"
  },
  {
    "label": "MakeStandardFilename()",
    "kind": "Method",
    "detail": "Function (FString DirToIgnore = InDirectoriesToIgnore [ DirIndex ] ;)",
    "insertText": "MakeStandardFilename(DirToIgnore)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DirectoriesToIgnore .)",
    "insertText": "Add(DirToIgnore)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 DirIndex = 0; DirIndex < InDirectoriesToNotRecurse.Num(); DirIndex++)"
  },
  {
    "label": "MakeStandardFilename()",
    "kind": "Method",
    "detail": "Function (FString DirToNotRecurse = InDirectoriesToNotRecurse [ DirIndex ] ;)",
    "insertText": "MakeStandardFilename(DirToNotRecurse)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (DirectoriesToNotRecurse .)",
    "insertText": "Add(DirToNotRecurse)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "Visit(const TCHAR* FilenameOrDirectory, bool bIsDirectory)"
  },
  {
    "label": "MakeStandardFilename()",
    "kind": "Method",
    "detail": "Function (FString RelativeFilename = FilenameOrDirectory ;)",
    "insertText": "MakeStandardFilename(RelativeFilename)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FileTimes .)",
    "insertText": "Add(RelativeFilename, FileInterface.GetTimeStamp(FilenameOrDirectory))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bCacheDirectories)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FileTimes .)",
    "insertText": "Add(RelativeFilename, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bIsDirectory)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bShouldRecurse = true ;)",
    "insertText": "for(int32 DirIndex = 0; DirIndex < DirectoriesToIgnore.Num() && bShouldRecurse; DirIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bShouldRecurse = false ; } })",
    "insertText": "if(bShouldRecurse == true)"
  },
  {
    "label": "Right()",
    "kind": "Method",
    "detail": "Function (FString CheckFilename = RelativeFilename .)",
    "insertText": "Right(RelativeFilename.Len() - DirectoriesToNotRecurse[DirIndex].Len())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bShouldRecurse = false ; } } } })",
    "insertText": "if(bShouldRecurse)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (FileInterface .)",
    "insertText": "IterateDirectory(FilenameOrDirectory, *this)"
  },
  {
    "label": "InitializeInternal()",
    "kind": "Method",
    "detail": "Function (} } return true ; } } ; # endif class FStreamingNetworkPlatformFile : public FNetworkPlatformFile { class FAsyncFileSync ; bool)",
    "insertText": "InitializeInternal(IPlatformFile* Inner, const TCHAR* HostIP)"
  },
  {
    "label": "FStreamingNetworkPlatformFile()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FStreamingNetworkPlatformFile()"
  },
  {
    "label": "GetTypeName()",
    "kind": "Method",
    "detail": "Function (public : const TCHAR*)",
    "insertText": "GetTypeName()"
  },
  {
    "label": "SendOpenMessage()",
    "kind": "Method",
    "detail": "Function (} class FStreamingNetworkFileHandle*)",
    "insertText": "SendOpenMessage(const FString& Filename, bool bIsWriting, bool bAppend, bool bAllowRead)"
  },
  {
    "label": "SendReadMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendReadMessage(uint64 HandleId, uint8* Destination, int64 BytesToRead)"
  },
  {
    "label": "SendReadMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendReadMessage(uint64 HandleId, uint8* Destination, int64 BytesToRead, int64 Offset)"
  },
  {
    "label": "SendWriteMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendWriteMessage(uint64 HandleId, const uint8* Source, int64 BytesToWrite)"
  },
  {
    "label": "SendSeekMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendSeekMessage(uint64 HandleId, int64 NewPosition)"
  },
  {
    "label": "SendCloseMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendCloseMessage(uint64 HandleId)"
  },
  {
    "label": "InitializeAfterSetActive()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitializeAfterSetActive()"
  },
  {
    "label": "ShouldBeUsed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldBeUsed(IPlatformFile* Inner, const TCHAR* CmdLine)"
  },
  {
    "label": "GetLowerLevel()",
    "kind": "Method",
    "detail": "Function (IPlatformFile*)",
    "insertText": "GetLowerLevel()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "DeleteFile(const TCHAR* Filename)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFile(const TCHAR* To, const TCHAR* From)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime DateTime)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename, bool bAllowWrite = false)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend, bool bAllowRead)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectoryTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectoryTree(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "DeleteDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectoryRecursively(const TCHAR* Directory)"
  },
  {
    "label": "CopyFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CopyFile(const TCHAR* To, const TCHAR* From, EPlatformFileRead ReadFlags = EPlatformFileRead::None, EPlatformFileWrite WriteFlags = EPlatformFileWrite::None)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForRead()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForRead(const TCHAR* Filename)"
  },
  {
    "label": "ConvertToAbsolutePathForExternalAppForWrite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToAbsolutePathForExternalAppForWrite(const TCHAR* Filename)"
  },
  {
    "label": "PerformHeartbeat()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PerformHeartbeat()"
  },
  {
    "label": "GetFileInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFileInfo(const TCHAR* Filename, FFileInfo& Info)"
  }
]