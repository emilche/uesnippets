[
  {
    "label": "AutoDiffVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AutoDiffVector"
  },
  {
    "label": "AutoDiffVector()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_AUTODIFF_VECTOR_H # define EIGEN_AUTODIFF_VECTOR_H namespace Eigen { template<ValueType,JacobianType> class AutoDiffVector { public : typedef internal::traits<ValueType>::Scalar BaseScalar ; typedef AutoDiffScalar<Matrix<BaseScalar,JacobianType::RowsAtCompileTime,1>> ActiveScalar ; typedef ActiveScalar Scalar ; typedef AutoDiffScalar<JacobianType::ColXpr> CoeffType ; typedef JacobianType::Index Index ;)",
    "insertText": "AutoDiffVector()"
  },
  {
    "label": "AutoDiffVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffVector(const ValueType& values) : m_values(values)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (m_jacobian .)",
    "insertText": "setZero()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CoeffType)",
    "insertText": "operator(Index i)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CoeffType)",
    "insertText": "operator() (Index i)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} CoeffType)",
    "insertText": "coeffRef(Index i)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "size()"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "sum()"
  },
  {
    "label": "AutoDiffVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffVector(const ValueType& values, const JacobianType& jac) : m_values(values), m_jacobian(jac)"
  },
  {
    "label": "AutoDiffVector()",
    "kind": "Method",
    "detail": "Function (} template<OtherValueType,OtherJacobianType>)",
    "insertText": "AutoDiffVector(const AutoDiffVector<OtherValueType, OtherJacobianType>& other) : m_values(other.values()), m_jacobian(other.jacobian())"
  },
  {
    "label": "AutoDiffVector()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AutoDiffVector(const AutoDiffVector& other) : m_values(other.values()), m_jacobian(other.jacobian())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherValueType,OtherJacobianType> AutoDiffVector&)",
    "insertText": "operator(const AutoDiffVector<OtherValueType, OtherJacobianType>& other)"
  },
  {
    "label": "values()",
    "kind": "Method",
    "detail": "Function (m_values = other .)",
    "insertText": "values()"
  },
  {
    "label": "jacobian()",
    "kind": "Method",
    "detail": "Function (m_jacobian = other .)",
    "insertText": "jacobian()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherValueType,OtherJacobianType> AutoDiffVector&)",
    "insertText": "operator(const AutoDiffVector<OtherValueType,OtherJacobianType>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffVector<MakeCwiseUnaryOp<internal::scalar_multiple_op<Scalar>,ValueType>::Type,MakeCwiseUnaryOp<internal::scalar_multiple_op<Scalar>,JacobianType>::Type>)",
    "insertText": "operator(const BaseScalar& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const AutoDiffVector<MakeCwiseUnaryOp<internal::scalar_multiple_op<Scalar>,ValueType>::Type,MakeCwiseUnaryOp<internal::scalar_multiple_op<Scalar>,JacobianType>::Type>)",
    "insertText": "operator(const Scalar& other, const AutoDiffVector& v)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AutoDiffVector&)",
    "insertText": "operator(const Scalar& other)"
  }
]