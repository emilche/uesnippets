[
  {
    "label": "product_selfadjoint_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "product_selfadjoint_matrix"
  },
  {
    "label": "EIGEN_BLAS_SYMM_L()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SELFADJOINT_MATRIX_MATRIX_BLAS_H # define EIGEN_SELFADJOINT_MATRIX_MATRIX_BLAS_H namespace Eigen { namespace internal { # define)",
    "insertText": "EIGEN_BLAS_SYMM_L(EIGTYPE, BLASTYPE, EIGPREFIX, BLASFUNC)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ \\ void)",
    "insertText": "run(\\ Index rows, Index cols, \\ const EIGTYPE* _lhs, Index lhsStride, \\ const EIGTYPE* _rhs, Index rhsStride, \\ EIGTYPE* res, Index resIncr, Index resStride, \\ EIGTYPE alpha, level3_blocking<EIGTYPE, EIGTYPE>&)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(resIncr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "eigen_assert(resIncr == 1)"
  },
  {
    "label": "beta()",
    "kind": "Method",
    "detail": "Function (\\ char side = ' L ',uplo = ' L ' ; \\ BlasIndex m,n,lda,ldb,ldc ; \\ const EIGTYPE* a,* b ; \\ EIGTYPE)",
    "insertText": "beta(1)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ MatrixX # # EIGPREFIX b_tmp ; \\ \\ \\ \\ m = convert_index<)",
    "insertText": "BlasIndex(rows)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ n = convert_index<)",
    "insertText": "BlasIndex(cols)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\ lda = convert_index<)",
    "insertText": "BlasIndex(lhsStride)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldb = convert_index<)",
    "insertText": "BlasIndex(rhsStride)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldc = convert_index<)",
    "insertText": "BlasIndex(resStride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "if(LhsStorageOrder==RowMajor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ a = _lhs ; \\ \\)",
    "insertText": "if(RhsStorageOrder==RowMajor)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "rhs(_rhs,n,m,OuterStride<>(rhsStride))"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (\\ b_tmp = rhs .)",
    "insertText": "adjoint()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (\\ b = b_tmp .)",
    "insertText": "data()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldb = convert_index<)",
    "insertText": "BlasIndex(b_tmp.outerStride())"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\ } else b = _rhs ; \\ \\)",
    "insertText": "BLASFUNC(&side, &uplo, &m, &n, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)a, &lda, (const BLASTYPE*)b, &ldb, (const BLASTYPE*)&numext::real_ref(beta), (BLASTYPE*)res, &ldc)"
  },
  {
    "label": "EIGEN_BLAS_HEMM_L()",
    "kind": "Method",
    "detail": "Function (\\ \\ } \\ } ; # define)",
    "insertText": "EIGEN_BLAS_HEMM_L(EIGTYPE, BLASTYPE, EIGPREFIX, BLASFUNC)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "if(((LhsStorageOrder==ColMajor) && ConjugateLhs) || ((LhsStorageOrder==RowMajor) && (!ConjugateLhs)))"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const Matrix<EIGTYPE,Dynamic,Dynamic,LhsStorageOrder>,0,OuterStride<>>)",
    "insertText": "lhs(_lhs,m,m,OuterStride<>(lhsStride))"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (\\ a_tmp = lhs .)",
    "insertText": "conjugate()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ lda = convert_index<)",
    "insertText": "BlasIndex(a_tmp.outerStride())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "if(RhsStorageOrder==ColMajor && (!ConjugateRhs))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ b = _rhs ; } \\ else { \\)",
    "insertText": "if(RhsStorageOrder==ColMajor && ConjugateRhs)"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "rhs(_rhs,m,n,OuterStride<>(rhsStride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else \\)",
    "insertText": "if(ConjugateRhs)"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (\\ b_tmp = rhs .)",
    "insertText": "transpose()"
  },
  {
    "label": "EIGEN_BLAS_SYMM_L()",
    "kind": "Method",
    "detail": "Function (\\ \\ } \\ } ; # ifdef EIGEN_USE_MKL)",
    "insertText": "EIGEN_BLAS_SYMM_L(double, double, d, dsymm) EIGEN_BLAS_SYMM_L(float, float, f, ssymm) EIGEN_BLAS_HEMM_L(dcomplex, MKL_Complex16, cd, zhemm) EIGEN_BLAS_HEMM_L(scomplex, MKL_Complex8, cf, chemm) #else EIGEN_BLAS_SYMM_L(double, double, d, dsymm_) EIGEN_BLAS_SYMM_L(float, float, f, ssymm_) EIGEN_BLAS_HEMM_L(dcomplex, double, cd, zhemm_) EIGEN_BLAS_HEMM_L(scomplex, float, cf, chemm_) #endif #define EIGEN_BLAS_SYMM_R(EIGTYPE, BLASTYPE, EIGPREFIX, BLASFUNC)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "lhs(_lhs,n,m,OuterStride<>(rhsStride))"
  },
  {
    "label": "EIGEN_BLAS_HEMM_R()",
    "kind": "Method",
    "detail": "Function (\\ \\ } \\ } ; # define)",
    "insertText": "EIGEN_BLAS_HEMM_R(EIGTYPE, BLASTYPE, EIGPREFIX, BLASFUNC)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ \\)",
    "insertText": "if(((RhsStorageOrder==ColMajor) && ConjugateRhs) || ((RhsStorageOrder==RowMajor) && (!ConjugateRhs)))"
  },
  {
    "label": "rhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const Matrix<EIGTYPE,Dynamic,Dynamic,RhsStorageOrder>,0,OuterStride<>>)",
    "insertText": "rhs(_rhs,n,n,OuterStride<>(rhsStride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "if(LhsStorageOrder==ColMajor && (!ConjugateLhs))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ b = _lhs ; } \\ else { \\)",
    "insertText": "if(LhsStorageOrder==ColMajor && ConjugateLhs)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "lhs(_lhs,m,n,OuterStride<>(lhsStride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } else \\)",
    "insertText": "if(ConjugateLhs)"
  },
  {
    "label": "lhs()",
    "kind": "Method",
    "detail": "Function (\\ Map<const MatrixX # # EIGPREFIX,0,OuterStride<>>)",
    "insertText": "lhs(_lhs,n,m,OuterStride<>(lhsStride))"
  }
]