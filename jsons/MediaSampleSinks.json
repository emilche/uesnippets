[
  {
    "label": "TMediaSampleSinks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMediaSampleSinks"
  },
  {
    "label": "FMediaAudioSampleSinks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMediaAudioSampleSinks"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / Array . h \" # include \" Templates / SharedPointer . h \" # include \" MediaSampleSink . h \" template<SampleType,SinkType = TMediaSampleSink<SampleType>> class TMediaSampleSinks { public : void)",
    "insertText": "Add(const TSharedRef<SinkType, ESPMode::ThreadSafe>& SampleSink, UMediaPlayer* Player = nullptr)"
  },
  {
    "label": "ReceiveEvent()",
    "kind": "Method",
    "detail": "Function (FMediaSampleSinkEventData Data ; Data . Attached = { Player } ; SampleSink ->)",
    "insertText": "ReceiveEvent(EMediaSampleSinkEvent::Attached, Data)"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Enqueue(const TSharedRef<SampleType, ESPMode::ThreadSafe>& Sample)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool Overflowed = false ;)",
    "insertText": "for(int32 SinkIndex = Sinks.Num() - 1; SinkIndex >= 0; --SinkIndex)"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SinkType,ESPMode::ThreadSafe> Sink = Sinks [ SinkIndex ] .)",
    "insertText": "Pin()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Overflowed = true ; } else { Sink ->)",
    "insertText": "Enqueue(Sample)"
  },
  {
    "label": "ReceiveEvent()",
    "kind": "Method",
    "detail": "Function (FMediaSampleSinkEventData Data ; Sink ->)",
    "insertText": "ReceiveEvent(EMediaSampleSinkEvent::SampleDataUpdate, Data)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} } else { Sinks .)",
    "insertText": "RemoveAt(SinkIndex)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (} } return ! Overflowed ; } void)",
    "insertText": "Flush(UMediaPlayer* MediaPlayer)"
  },
  {
    "label": "RequestFlush()",
    "kind": "Method",
    "detail": "Function (Sink ->)",
    "insertText": "RequestFlush()"
  },
  {
    "label": "ReceiveEvent()",
    "kind": "Method",
    "detail": "Function (FMediaSampleSinkEventData Data ; Data . FlushWasRequested = { MediaPlayer } ; Sink ->)",
    "insertText": "ReceiveEvent(EMediaSampleSinkEvent::FlushWasRequested, Data)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} } } int32)",
    "insertText": "Num()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Remove(const TSharedRef<SinkType, ESPMode::ThreadSafe>& SampleSink, UMediaPlayer* Player = nullptr)"
  },
  {
    "label": "ReceiveEvent()",
    "kind": "Method",
    "detail": "Function (FMediaSampleSinkEventData Data ; Data . Detached = { Player } ; SampleSink ->)",
    "insertText": "ReceiveEvent(EMediaSampleSinkEvent::Detached, Data)"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "ReceiveEvent()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ReceiveEvent(EMediaSampleSinkEvent Event, const FMediaSampleSinkEventData& Data)"
  },
  {
    "label": "ReceiveEvent()",
    "kind": "Method",
    "detail": "Function (Sink ->)",
    "insertText": "ReceiveEvent(Event, Data)"
  },
  {
    "label": "GetPrimaryAudioSink()",
    "kind": "Method",
    "detail": "Function (} } } protected : TArray<TWeakPtr<SinkType,ESPMode::ThreadSafe>> Sinks ; } ; typedef TMediaSampleSinks<IMediaTextureSample,FMediaTextureSampleSink> FMediaVideoSampleSinks ; class FMediaAudioSampleSinks : public TMediaSampleSinks<IMediaAudioSample,FMediaAudioSampleSink> { public : TSharedPtr<FMediaAudioSampleSink,ESPMode::ThreadSafe>)",
    "insertText": "GetPrimaryAudioSink()"
  }
]