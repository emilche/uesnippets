[
  {
    "label": "EStage",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EStage"
  },
  {
    "label": "EDescriptorSets",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDescriptorSets"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIDefinitions . h \" # include \" Logging / LogMacros . h \" # ifndef VULKAN_SUPPORTS_GEOMETRY_SHADERS # define VULKAN_SUPPORTS_GEOMETRY_SHADERS PLATFORM_SUPPORTS_GEOMETRY_SHADERS # endif # define VULKAN_ENABLE_BINDING_DEBUG_NAMES 0 namespace ShaderStage { enum EStage { Vertex = 0,Pixel = 1,Geometry = 2,Mesh = 3,Task = 4,NumGraphicsStages = 5,RayGen = 0,RayMiss = 1,RayHitGroup = 2,RayCallable = 3,NumRayTracingStages = 4,Compute = 0,NumComputeStages = 1,MaxNumStages = 6,Invalid = - 1,} ;)",
    "insertText": "static_assert(MaxNumStages >= FMath::Max(NumComputeStages, FMath::Max(NumGraphicsStages, NumRayTracingStages)), \"MaxNumStages too small!\")"
  },
  {
    "label": "GetStageForFrequency()",
    "kind": "Method",
    "detail": "Function (EStage)",
    "insertText": "GetStageForFrequency(EShaderFrequency Stage)"
  },
  {
    "label": "GetFrequencyForGfxStage()",
    "kind": "Method",
    "detail": "Function (break ; } return Invalid ; } EShaderFrequency)",
    "insertText": "GetFrequencyForGfxStage(EStage Stage)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (break ; } return SF_NumFrequencies ; } } ; namespace VulkanBindless { uint32 MaxUniformBuffersPerStage = 1 6 ; enum EDescriptorSets { BindlessSamplerSet = 0,BindlessStorageBufferSet,BindlessUniformBufferSet,BindlessStorageImageSet,BindlessSampledImageSet,BindlessStorageTexelBufferSet,BindlessUniformTexelBufferSet,BindlessAccelerationStructureSet,NumBindlessSets,BindlessSingleUseUniformBufferSet = NumBindlessSets,MaxNumSets = NumBindlessSets + 1 } ; } ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogVulkan, Display, All)"
  },
  {
    "label": "ZeroVulkanStruct()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "ZeroVulkanStruct(T& Struct, int32 VkStructureType)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(((uint8*)&Struct) + sizeof(VkStructureType), sizeof(T) - sizeof(VkStructureType))"
  }
]