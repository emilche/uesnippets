[
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "IntEqClasses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IntEqClasses"
  },
  {
    "label": "ScheduleDAGInstrs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScheduleDAGInstrs"
  },
  {
    "label": "SUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnit"
  },
  {
    "label": "ILPValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ILPValue"
  },
  {
    "label": "SchedDFSResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedDFSResult"
  },
  {
    "label": "SchedDFSImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SchedDFSImpl"
  },
  {
    "label": "NodeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeData"
  },
  {
    "label": "TreeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TreeData"
  },
  {
    "label": "Connection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Connection"
  },
  {
    "label": "ILPValue()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_SCHEDULEDFS_H # define LLVM_CODEGEN_SCHEDULEDFS_H # include \" llvm / CodeGen / ScheduleDAG . h \" # include \" llvm / Support / DataTypes . h \" # include<vector> namespace llvm { class raw_ostream ; class IntEqClasses ; class ScheduleDAGInstrs ; class SUnit ; struct ILPValue { unsigned InstrCount ; unsigned Length ;)",
    "insertText": "ILPValue(unsigned count, unsigned length): InstrCount(count), Length(length)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(ILPValue RHS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "NodeData()",
    "kind": "Method",
    "detail": "Function (} ; class SchedDFSResult { class SchedDFSImpl ; const unsigned InvalidSubtreeID = ~ 0 u ; struct NodeData { unsigned InstrCount ; unsigned SubtreeID ;)",
    "insertText": "NodeData(): InstrCount(0), SubtreeID(InvalidSubtreeID)"
  },
  {
    "label": "TreeData()",
    "kind": "Method",
    "detail": "Function (} } ; struct TreeData { unsigned ParentTreeID ; unsigned SubInstrCount ;)",
    "insertText": "TreeData(): ParentTreeID(InvalidSubtreeID), SubInstrCount(0)"
  },
  {
    "label": "Connection()",
    "kind": "Method",
    "detail": "Function (} } ; struct Connection { unsigned TreeID ; unsigned Level ;)",
    "insertText": "Connection(unsigned tree, unsigned level): TreeID(tree), Level(level)"
  },
  {
    "label": "SchedDFSResult()",
    "kind": "Method",
    "detail": "Function (} } ; bool IsBottomUp ; unsigned SubtreeLimit ; std::vector<NodeData> DFSNodeData ; SmallVector<TreeData,1 6> DFSTreeData ; std::vector<SmallVector<Connection,4>> SubtreeConnections ; std::vector<unsigned> SubtreeConnectLevels ; public :)",
    "insertText": "SchedDFSResult(bool IsBU, unsigned lim) : IsBottomUp(IsBU), SubtreeLimit(lim)"
  },
  {
    "label": "getSubtreeLimit()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSubtreeLimit()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(unsigned NumSUnits)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (DFSNodeData .)",
    "insertText": "resize(NumSUnits)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "compute(ArrayRef<SUnit> SUnits)"
  },
  {
    "label": "getNumInstrs()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumInstrs(const SUnit *SU)"
  },
  {
    "label": "getNumSubtrees()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumSubtrees()"
  },
  {
    "label": "getSubtreeID()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getSubtreeID(const SUnit *SU)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(SU->NodeNum < DFSNodeData.size() && \"New Node\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const ILPValue &Val)"
  }
]