[
  {
    "label": "DenseBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseBase"
  },
  {
    "label": "check_DenseIndex_is_signed()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_DENSEBASE_H # define EIGEN_DENSEBASE_H namespace Eigen { namespace internal { void)",
    "insertText": "check_DenseIndex_is_signed()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(NumTraits<DenseIndex>::IsSigned,THE_INDEX_TYPE_MUST_BE_A_SIGNED_TYPE)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : typedef Eigen::InnerIterator<Derived> InnerIterator ; typedef internal::traits<Derived>::StorageKind StorageKind ; typedef internal::traits<Derived>::StorageIndex StorageIndex ; typedef internal::traits<Derived>::Scalar Scalar ; typedef Scalar value_type ; typedef NumTraits<Scalar>::Real RealScalar ; typedef DenseCoeffsBase<Derived,internal::accessors_level<Derived>::value> Base ; using Base::derived ; using Base::const_cast_derived ; using Base::rows ; using Base::cols ; using Base::size ; using Base::rowIndexByOuterInner ; using Base::colIndexByOuterInner ; using Base::coeff ; using Base::coeffByOuterInner ; using)",
    "insertText": "operator()"
  },
  {
    "label": "SizeAtCompileTime()",
    "kind": "Method",
    "detail": "Function (using Base::operator [ ] ; using Base::x ; using Base::y ; using Base::z ; using Base::w ; using Base::stride ; using Base::innerStride ; using Base::outerStride ; using Base::rowStride ; using Base::colStride ; typedef Base::CoeffReturnType CoeffReturnType ; enum { RowsAtCompileTime = internal::traits<Derived>::RowsAtCompileTime,ColsAtCompileTime = internal::traits<Derived>::ColsAtCompileTime,)",
    "insertText": "SizeAtCompileTime(internal::size_at_compile_time<internal::traits<Derived>::RowsAtCompileTime, internal::traits<Derived>::ColsAtCompileTime>::ret), MaxRowsAtCompileTime = internal::traits<Derived>::MaxRowsAtCompileTime, MaxColsAtCompileTime = internal::traits<Derived>::MaxColsAtCompileTime, MaxSizeAtCompileTime = (internal::size_at_compile_time<internal::traits<Derived>::MaxRowsAtCompileTime, internal::traits<Derived>::MaxColsAtCompileTime>::ret), IsVectorAtCompileTime = internal::traits<Derived>::RowsAtCompileTime == 1 || internal::traits<Derived>::ColsAtCompileTime == 1, NumDimensions = int(MaxSizeAtCompileTime) == 1 ? 0 : bool(IsVectorAtCompileTime) ? 1 : 2, Flags = internal::traits<Derived>::Flags, IsRowMajor = int(Flags) & RowMajorBit, InnerSizeAtCompileTime = int(IsVectorAtCompileTime) ? int(SizeAtCompileTime) : int(IsRowMajor) ? int(ColsAtCompileTime) : int(RowsAtCompileTime)"
  },
  {
    "label": "AutoAlign()",
    "kind": "Method",
    "detail": "Function (typedef internal::find_best_packet<Scalar,SizeAtCompileTime>::type PacketScalar ; enum { IsPlainObjectBase = 0 } ; typedef Matrix<internal::traits<Derived>::Scalar,internal::traits<Derived>::RowsAtCompileTime,internal::traits<Derived>::ColsAtCompileTime,)",
    "insertText": "AutoAlign(internal::traits<Derived>::Flags&RowMajorBit ? RowMajor : ColMajor)"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<internal::is_same<internal::traits<Derived>::XprKind,MatrixXpr>::value,PlainMatrix,PlainArray>::type PlainObject ; EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "outerSize()"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "innerSize()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(Index newSize)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(newSize)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(newSize == this->size() && \"DenseBase::resize() does not actually allow to resize.\")"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "resize(Index rows, Index cols)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(rows)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows == this->rows() && cols == this->cols() && \"DenseBase::resize() does not actually allow to resize.\")"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject> ConstantReturnType ; EIGEN_DEPRECATED typedef CwiseNullaryOp<internal::linspaced_op<Scalar>,PlainObject> SequentialLinSpacedReturnType ; typedef CwiseNullaryOp<internal::linspaced_op<Scalar>,PlainObject> RandomAccessLinSpacedReturnType ; typedef Matrix<NumTraits<internal::traits<Derived>::Scalar>::Real,internal::traits<Derived>::ColsAtCompileTime,1> EigenvaluesReturnType ; # endif template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const DenseBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "operator(const EigenBase<OtherDerived> &other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "operator(const ReturnByValue<OtherDerived>& func)"
  },
  {
    "label": "lazyAssign()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEPRECATED EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "lazyAssign(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC CommaInitializer<Derived>)",
    "insertText": "operator(const Scalar& s)"
  },
  {
    "label": "flagged()",
    "kind": "Method",
    "detail": "Function (template<unsigned int Added,unsigned int Removed> EIGEN_DEPRECATED const Derived&)",
    "insertText": "flagged()"
  },
  {
    "label": "transpose()",
    "kind": "Method",
    "detail": "Function (typedef Transpose<Derived> TransposeReturnType ; EIGEN_DEVICE_FUNC TransposeReturnType)",
    "insertText": "transpose()"
  },
  {
    "label": "transposeInPlace()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC void)",
    "insertText": "transposeInPlace()"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Constant(Index rows, Index cols, const Scalar& value)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Constant(Index size, const Scalar& value)"
  },
  {
    "label": "Constant()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Constant(const Scalar& value)"
  },
  {
    "label": "LinSpaced()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEPRECATED EIGEN_DEVICE_FUNC const RandomAccessLinSpacedReturnType)",
    "insertText": "LinSpaced(Sequential_t, Index size, const Scalar& low, const Scalar& high)"
  },
  {
    "label": "LinSpaced()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEPRECATED EIGEN_DEVICE_FUNC const RandomAccessLinSpacedReturnType)",
    "insertText": "LinSpaced(Sequential_t, const Scalar& low, const Scalar& high)"
  },
  {
    "label": "LinSpaced()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const RandomAccessLinSpacedReturnType)",
    "insertText": "LinSpaced(Index size, const Scalar& low, const Scalar& high)"
  },
  {
    "label": "LinSpaced()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const RandomAccessLinSpacedReturnType)",
    "insertText": "LinSpaced(const Scalar& low, const Scalar& high)"
  },
  {
    "label": "NullaryExpr()",
    "kind": "Method",
    "detail": "Function (template<CustomNullaryOp> EIGEN_DEVICE_FUNC const CwiseNullaryOp<CustomNullaryOp,PlainObject>)",
    "insertText": "NullaryExpr(Index rows, Index cols, const CustomNullaryOp& func)"
  },
  {
    "label": "NullaryExpr()",
    "kind": "Method",
    "detail": "Function (template<CustomNullaryOp> EIGEN_DEVICE_FUNC const CwiseNullaryOp<CustomNullaryOp,PlainObject>)",
    "insertText": "NullaryExpr(Index size, const CustomNullaryOp& func)"
  },
  {
    "label": "NullaryExpr()",
    "kind": "Method",
    "detail": "Function (template<CustomNullaryOp> EIGEN_DEVICE_FUNC const CwiseNullaryOp<CustomNullaryOp,PlainObject>)",
    "insertText": "NullaryExpr(const CustomNullaryOp& func)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Zero(Index rows, Index cols)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Zero(Index size)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Zero()"
  },
  {
    "label": "Ones()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Ones(Index rows, Index cols)"
  },
  {
    "label": "Ones()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Ones(Index size)"
  },
  {
    "label": "Ones()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ConstantReturnType)",
    "insertText": "Ones()"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC void)",
    "insertText": "fill(const Scalar& value)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setConstant(const Scalar& value)"
  },
  {
    "label": "setLinSpaced()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setLinSpaced(Index size, const Scalar& low, const Scalar& high)"
  },
  {
    "label": "setLinSpaced()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setLinSpaced(const Scalar& low, const Scalar& high)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setZero()"
  },
  {
    "label": "setOnes()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setOnes()"
  },
  {
    "label": "setRandom()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setRandom()"
  },
  {
    "label": "isApprox()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC bool)",
    "insertText": "isApprox(const DenseBase<OtherDerived>& other, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isMuchSmallerThan()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC bool)",
    "insertText": "isMuchSmallerThan(const RealScalar& other, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isMuchSmallerThan()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC bool)",
    "insertText": "isMuchSmallerThan(const DenseBase<OtherDerived>& other, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isApproxToConstant()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC bool)",
    "insertText": "isApproxToConstant(const Scalar& value, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC bool)",
    "insertText": "isConstant(const Scalar& value, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isZero()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC bool)",
    "insertText": "isZero(const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isOnes()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC bool)",
    "insertText": "isOnes(const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "hasNaN()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasNaN()"
  },
  {
    "label": "allFinite()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "allFinite()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const Scalar& other)"
  },
  {
    "label": "eval()",
    "kind": "Method",
    "detail": "Function (typedef internal::add_const_on_value_type<internal::eval<Derived>::type>::type EvalReturnType ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE EvalReturnType)",
    "insertText": "eval()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "swap(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(!OtherDerived::IsPlainObjectBase,THIS_EXPRESSION_IS_NOT_A_LVALUE__IT_IS_READ_ONLY)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows()==other.rows() && cols()==other.cols())"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.const_cast_derived(), internal::swap_assign_op<Scalar>())"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "swap(PlainObjectBase<OtherDerived>& other)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived(), internal::swap_assign_op<Scalar>())"
  },
  {
    "label": "nestByValue()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const NestByValue<Derived>)",
    "insertText": "nestByValue()"
  },
  {
    "label": "forceAlignedAccess()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const ForceAlignedAccess<Derived>)",
    "insertText": "forceAlignedAccess()"
  },
  {
    "label": "forceAlignedAccessIf()",
    "kind": "Method",
    "detail": "Function (template<bool Enable> EIGEN_DEVICE_FUNC const internal::conditional<Enable,ForceAlignedAccess<Derived>,Derived&>::type)",
    "insertText": "forceAlignedAccessIf()"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "sum()"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "mean()"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "trace()"
  },
  {
    "label": "prod()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "prod()"
  },
  {
    "label": "minCoeff()",
    "kind": "Method",
    "detail": "Function (template<int NaNPropagation> EIGEN_DEVICE_FUNC internal::traits<Derived>::Scalar)",
    "insertText": "minCoeff()"
  },
  {
    "label": "maxCoeff()",
    "kind": "Method",
    "detail": "Function (template<int NaNPropagation> EIGEN_DEVICE_FUNC internal::traits<Derived>::Scalar)",
    "insertText": "maxCoeff()"
  },
  {
    "label": "minCoeff()",
    "kind": "Method",
    "detail": "Function (} template<int NaNPropagation,IndexType> EIGEN_DEVICE_FUNC internal::traits<Derived>::Scalar)",
    "insertText": "minCoeff(IndexType* row, IndexType* col)"
  },
  {
    "label": "maxCoeff()",
    "kind": "Method",
    "detail": "Function (template<int NaNPropagation,IndexType> EIGEN_DEVICE_FUNC internal::traits<Derived>::Scalar)",
    "insertText": "maxCoeff(IndexType* row, IndexType* col)"
  },
  {
    "label": "minCoeff()",
    "kind": "Method",
    "detail": "Function (template<int NaNPropagation,IndexType> EIGEN_DEVICE_FUNC internal::traits<Derived>::Scalar)",
    "insertText": "minCoeff(IndexType* index)"
  },
  {
    "label": "maxCoeff()",
    "kind": "Method",
    "detail": "Function (template<int NaNPropagation,IndexType> EIGEN_DEVICE_FUNC internal::traits<Derived>::Scalar)",
    "insertText": "maxCoeff(IndexType* index)"
  },
  {
    "label": "redux()",
    "kind": "Method",
    "detail": "Function (} template<BinaryOp> EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "redux(const BinaryOp& func)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (template<Visitor> EIGEN_DEVICE_FUNC void)",
    "insertText": "visit(Visitor& func)"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (const WithFormat<Derived>)",
    "insertText": "format(const IOFormat& fmt)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC CoeffReturnType)",
    "insertText": "value()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_SIZE_1x1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_SIZE_1x1(Derived) eigen_assert(this->rows() == 1 && this->cols() == 1)"
  },
  {
    "label": "all()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC bool)",
    "insertText": "all()"
  },
  {
    "label": "any()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC bool)",
    "insertText": "any()"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Index)",
    "insertText": "count()"
  },
  {
    "label": "rowwise()",
    "kind": "Method",
    "detail": "Function (typedef VectorwiseOp<Derived,Horizontal> RowwiseReturnType ; typedef const VectorwiseOp<const Derived,Horizontal> ConstRowwiseReturnType ; typedef VectorwiseOp<Derived,Vertical> ColwiseReturnType ; typedef const VectorwiseOp<const Derived,Vertical> ConstColwiseReturnType ; EIGEN_DEVICE_FUNC ConstRowwiseReturnType)",
    "insertText": "rowwise()"
  },
  {
    "label": "colwise()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC ConstColwiseReturnType)",
    "insertText": "colwise()"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (typedef CwiseNullaryOp<internal::scalar_random_op<Scalar>,PlainObject> RandomReturnType ; const RandomReturnType)",
    "insertText": "Random(Index rows, Index cols)"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (const RandomReturnType)",
    "insertText": "Random(Index size)"
  },
  {
    "label": "Random()",
    "kind": "Method",
    "detail": "Function (const RandomReturnType)",
    "insertText": "Random()"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (template<ThenDerived,ElseDerived> EIGEN_DEVICE_FUNC const Select<Derived,ThenDerived,ElseDerived>)",
    "insertText": "select(const DenseBase<ThenDerived>& thenMatrix, const DenseBase<ElseDerived>& elseMatrix)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (template<ThenDerived> EIGEN_DEVICE_FUNC const Select<Derived,ThenDerived,ThenDerived::ConstantReturnType>)",
    "insertText": "select(const DenseBase<ThenDerived>& thenMatrix, const typename ThenDerived::Scalar& elseScalar)"
  },
  {
    "label": "select()",
    "kind": "Method",
    "detail": "Function (template<ElseDerived> EIGEN_DEVICE_FUNC const Select<Derived,ElseDerived::ConstantReturnType,ElseDerived>)",
    "insertText": "select(const typename ElseDerived::Scalar& thenScalar, const DenseBase<ElseDerived>& elseMatrix)"
  },
  {
    "label": "lpNorm()",
    "kind": "Method",
    "detail": "Function (template<int p> RealScalar)",
    "insertText": "lpNorm()"
  },
  {
    "label": "replicate()",
    "kind": "Method",
    "detail": "Function (template<int RowFactor,int ColFactor> EIGEN_DEVICE_FUNC const Replicate<Derived,RowFactor,ColFactor>)",
    "insertText": "replicate()"
  },
  {
    "label": "replicate()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const Replicate<Derived,Dynamic,Dynamic>)",
    "insertText": "replicate(Index rowFactor, Index colFactor)"
  },
  {
    "label": "reverse()",
    "kind": "Method",
    "detail": "Function (} typedef Reverse<Derived,BothDirections> ReverseReturnType ; typedef const Reverse<const Derived,BothDirections> ConstReverseReturnType ; EIGEN_DEVICE_FUNC ReverseReturnType)",
    "insertText": "reverse()"
  },
  {
    "label": "reverseInPlace()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC void)",
    "insertText": "reverseInPlace()"
  },
  {
    "label": "conditional()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_PARSED_BY_DOXYGEN typedef random_access_iterator_type iterator ; typedef random_access_iterator_type const_iterator ; # else typedef)",
    "insertText": "conditional(Flags&DirectAccessBit)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<IsVectorAtCompileTime,iterator_type,void>::type iterator ; typedef internal::conditional<IsVectorAtCompileTime,const_iterator_type,void>::type const_iterator ; # endif iterator)",
    "insertText": "begin()"
  },
  {
    "label": "cbegin()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "cbegin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end()"
  },
  {
    "label": "cend()",
    "kind": "Method",
    "detail": "Function (const_iterator)",
    "insertText": "cend()"
  },
  {
    "label": "EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF()",
    "kind": "Method",
    "detail": "Function (# define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::DenseBase # define EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL # define)",
    "insertText": "EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF(COND) #define EIGEN_DOC_UNARY_ADDONS(X,Y) # include \"../plugins/CommonCwiseUnaryOps.h\" # include \"../plugins/BlockMethods.h\" # include \"../plugins/IndexedViewMethods.h\" # include \"../plugins/ReshapedMethods.h\" # ifdef EIGEN_DENSEBASE_PLUGIN # include EIGEN_DENSEBASE_PLUGIN # endif #undef EIGEN_CURRENT_STORAGE_BASE_CLASS #undef EIGEN_DOC_BLOCK_ADDONS_NOT_INNER_PANEL #undef EIGEN_DOC_BLOCK_ADDONS_INNER_PANEL_IF #undef EIGEN_DOC_UNARY_ADDONS template<typename Dest> EIGEN_DEVICE_FUNC inline void evalTo(Dest&)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<Dest,void>::value),THE_EVAL_EVALTO_FUNCTION_SHOULD_NEVER_BE_CALLED_FOR_DENSE_OBJECTS)"
  },
  {
    "label": "EIGEN_DEFAULT_COPY_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "EIGEN_DEFAULT_COPY_CONSTRUCTOR(DenseBase) EIGEN_DEVICE_FUNC DenseBase()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (# ifdef EIGEN_INTERNAL_DEBUGGING)",
    "insertText": "EIGEN_STATIC_ASSERT((EIGEN_IMPLIES(MaxRowsAtCompileTime==1 && MaxColsAtCompileTime!=1, int(IsRowMajor)) && EIGEN_IMPLIES(MaxColsAtCompileTime==1 && MaxRowsAtCompileTime!=1, int(!IsRowMajor))), INVALID_STORAGE_ORDER_FOR_THIS_VECTOR_EXPRESSION) #endif } private: EIGEN_DEVICE_FUNC explicit DenseBase(int)"
  },
  {
    "label": "DenseBase()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC)",
    "insertText": "DenseBase(int,int)"
  },
  {
    "label": "DenseBase()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC)",
    "insertText": "DenseBase(const DenseBase<OtherDerived>&)"
  }
]