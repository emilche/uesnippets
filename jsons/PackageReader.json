[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetPackageData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetPackageData"
  },
  {
    "label": "FLinkerTables",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerTables"
  },
  {
    "label": "FPackageDependencyData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageDependencyData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGatherableTextData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGatherableTextData"
  },
  {
    "label": "FObjectFullNameAndThumbnail",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectFullNameAndThumbnail"
  },
  {
    "label": "FPackageReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageReader"
  },
  {
    "label": "FObjectData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectData"
  },
  {
    "label": "FPackageReader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / EnumClassFlags . h \" # include \" Serialization / ArchiveUObject . h \" # include \" UObject / ObjectResource . h \" # include \" UObject / PackageFileSummary . h \" # include \" UObject / SoftObjectPath . h \" struct FAssetData ; class FAssetPackageData ; class FLinkerTables ; class FPackageDependencyData ; namespace UE::AssetRegistry { enum class EExtraDependencyFlags : uint32 ; } struct FGatherableTextData ; struct FObjectFullNameAndThumbnail ; class FPackageReader : public FArchiveUObject { public :)",
    "insertText": "FPackageReader()"
  },
  {
    "label": "OpenPackageFile()",
    "kind": "Method",
    "detail": "Function (enum class EOpenPackageResult : uint8 { Success,NoLoader,MalformedTag,VersionTooOld,VersionTooNew,CustomVersionMissing,CustomVersionInvalid,Unversioned,} ; struct FObjectData { FSoftObjectPath ClassPath ; bool bUsedInGame = true ; } ; bool)",
    "insertText": "OpenPackageFile(FStringView PackageFilename, EOpenPackageResult* OutErrorCode = nullptr)"
  },
  {
    "label": "OpenPackageFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPackageFile(FStringView LongPackageName, FStringView PackageFilename, EOpenPackageResult* OutErrorCode = nullptr)"
  },
  {
    "label": "OpenPackageFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPackageFile(FArchive* Loader, EOpenPackageResult* OutErrorCode = nullptr)"
  },
  {
    "label": "OpenPackageFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPackageFile(TUniquePtr<FArchive> Loader, EOpenPackageResult* OutErrorCode = nullptr)"
  },
  {
    "label": "OpenPackageFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OpenPackageFile(EOpenPackageResult& OutErrorCode)"
  },
  {
    "label": "TryGetLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetLongPackageName(FString& OutLongPackageName)"
  },
  {
    "label": "GetLongPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLongPackageName()"
  },
  {
    "label": "GetPackageFileSummary()",
    "kind": "Method",
    "detail": "Function (const FPackageFileSummary&)",
    "insertText": "GetPackageFileSummary()"
  },
  {
    "label": "GetNames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetNames(TArray<FName>& OutNames)"
  },
  {
    "label": "GetImports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetImports(TArray<FObjectImport>& OutImportMap)"
  },
  {
    "label": "GetExports()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetExports(TArray<FObjectExport>& OutExportMap)"
  },
  {
    "label": "GetDependsMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDependsMap(TArray<TArray<FPackageIndex>>& OutDependsMap)"
  },
  {
    "label": "GetSoftPackageReferenceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftPackageReferenceList(TArray<FName>& OutSoftPackageReferenceList)"
  },
  {
    "label": "GetSoftObjectPaths()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSoftObjectPaths(TArray<FSoftObjectPath>& OutSoftObjectPaths)"
  },
  {
    "label": "ReadEditorOnlyFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadEditorOnlyFlags(TBitArray<>& OutImportUsedInGame, TBitArray<>& OutSoftPackageUsedInGame)"
  },
  {
    "label": "GetGatherableTextData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGatherableTextData(TArray<FGatherableTextData>& OutText)"
  },
  {
    "label": "GetThumbnails()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetThumbnails(TArray<FObjectFullNameAndThumbnail>& OutThumbnails)"
  },
  {
    "label": "ReadAssetRegistryData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAssetRegistryData(TArray<FAssetData*>& AssetDataList, bool& bOutIsCookedWithoutAssetData)"
  },
  {
    "label": "ReadImportedClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadImportedClasses(TArray<FName>& OutClassNames)"
  },
  {
    "label": "ReadLinkerObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadLinkerObjects(TMap<FSoftObjectPath, FObjectData>& OutExports, TMap<FSoftObjectPath, FObjectData>& OutImports, TMap<FName, bool>& OutSoftPackageReferences)"
  },
  {
    "label": "ReadDependencyData()",
    "kind": "Method",
    "detail": "Function (enum class EReadOptions { None = 0,PackageData = 1<<0,Dependencies = 1<<1,Default = PackageData | Dependencies,} ; bool)",
    "insertText": "ReadDependencyData(FPackageDependencyData& OutDependencyData, EReadOptions Options)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* V, int64 Length)"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Precache(int64 PrecacheOffset, int64 PrecacheSize)"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FName& Name)"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "ReadAssetRegistryDataFromCookedPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadAssetRegistryDataFromCookedPackage(TArray<FAssetData*>& AssetDataList, bool& bOutIsCookedWithoutAssetData)"
  },
  {
    "label": "StartSerializeSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartSerializeSection(int64 Offset)"
  },
  {
    "label": "SerializeNameMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeNameMap()"
  },
  {
    "label": "SerializeImportMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeImportMap()"
  },
  {
    "label": "SerializeExportMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeExportMap()"
  },
  {
    "label": "SerializeDependsMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeDependsMap()"
  },
  {
    "label": "SerializeImportedClasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeImportedClasses(const TArray<FObjectImport>& InImportMap, TArray<FName>& OutClassNames)"
  },
  {
    "label": "SerializeSoftPackageReferenceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeSoftPackageReferenceList()"
  },
  {
    "label": "SerializeSoftObjectPathMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeSoftObjectPathMap()"
  },
  {
    "label": "SerializeGatherableTextDataMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeGatherableTextDataMap()"
  },
  {
    "label": "SerializeThumbnailMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeThumbnailMap()"
  },
  {
    "label": "SerializeEditorOnlyFlags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeEditorOnlyFlags(TBitArray<>& OutImportUsedInGame, TBitArray<>& OutSoftPackageUsedInGame)"
  },
  {
    "label": "SerializeSearchableNamesMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeSearchableNamesMap(FLinkerTables& OutSearchableNames)"
  },
  {
    "label": "SerializeAssetRegistryDependencyData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeAssetRegistryDependencyData(TBitArray<>& OutImportUsedInGame, TBitArray<>& OutSoftPackageUsedInGame, TArray<TPair<FName, UE::AssetRegistry::EExtraDependencyFlags>>& OutExtraPackageDependencies)"
  },
  {
    "label": "SerializePackageTrailer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializePackageTrailer(FAssetPackageData& PackageData)"
  },
  {
    "label": "ApplyRelocationToImportMapAndSoftPackageReferenceList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyRelocationToImportMapAndSoftPackageReferenceList(FStringView LoadedPackageName, TArray<FName>& InOutSoftPackageReferenceList, TArray<TPair<FName, UE::AssetRegistry::EExtraDependencyFlags>>& InOutExtraPackageDependencies)"
  },
  {
    "label": "ConvertLinkerTableToPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertLinkerTableToPaths(FName PackageName, TArray<FObjectExport>& ExportMap, TArray<FObjectImport>& ImportMap, TArray<FSoftObjectPath>& OutExports, TArray<FSoftObjectPath>& OutImports)"
  },
  {
    "label": "GetPackageFlags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPackageFlags()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (FString LongPackageName ; FString PackageFilename ; FArchive* Loader = nullptr ; FPackageFileSummary PackageFileSummary ; TArray<FName> NameMap ; TArray<FObjectImport> ImportMap ; TArray<FObjectExport> ExportMap ; TArray<TArray<FPackageIndex>> DependsMap ; TArray<FName> SoftPackageReferenceList ; TArray<FSoftObjectPath> SoftObjectPathMap ; TArray<FGatherableTextData> GatherableTextDataMap ; TArray<FObjectFullNameAndThumbnail> ThumbnailMap ; int64 PackageFileSize = 0 ; int64 AssetRegistryDependencyDataOffset = INDEX_NONE ; uint32 AssetRegistryVersion = static_cast<)",
    "insertText": "uint32(~0)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (bool bLoaderOwner = false ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(FPackageReader::EReadOptions)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(FPackageReader::EOpenPackageResult Result)"
  }
]