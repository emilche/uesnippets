[
  {
    "label": "FHeightField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHeightField"
  },
  {
    "label": "ComputeSweptContactTOIAndPhiAtTargetPenetration()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / CollisionResolutionTypes . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / TriangleMeshImplicitObject . h \" namespace Chaos { class FHeightField ; bool)",
    "insertText": "ComputeSweptContactTOIAndPhiAtTargetPenetration(const FReal DirDotNormal, const FReal SweepLength, const FReal HitDistance, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi)"
  },
  {
    "label": "ComputeSweptContactTOIAndPhiAtTargetPenetration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ComputeSweptContactTOIAndPhiAtTargetPenetration(const FVec3& ContactNormal, const FVec3& Dir, const FReal SweepLength, const FReal HitDistance, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& OutTOI, FReal& OutPhi)"
  },
  {
    "label": "LegacyComputeSweptContactTOIAndPhiAtTargetPenetration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LegacyComputeSweptContactTOIAndPhiAtTargetPenetration(const FReal DirDotNormal, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& InOutTOI, FReal& InOutPhi)"
  },
  {
    "label": "GJKImplicitSweptContactPoint()",
    "kind": "Method",
    "detail": "Function (template<GeometryB> FContactPoint)",
    "insertText": "GJKImplicitSweptContactPoint(const FImplicitObject& A, const FRigidTransform3& AStartTransform, const GeometryB& B, const FRigidTransform3& BTransform, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& TOI)"
  },
  {
    "label": "GJKImplicitContactPoint()",
    "kind": "Method",
    "detail": "Function (template<GeometryA,GeometryB> FContactPoint)",
    "insertText": "GJKImplicitContactPoint(const FImplicitObject& A, const FRigidTransform3& ATransform, const GeometryB& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "SphereSphereContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "SphereSphereContactPoint(const TSphere<FReal, 3>& Sphere1, const FRigidTransform3& Sphere1Transform, const TSphere<FReal, 3>& Sphere2, const FRigidTransform3& Sphere2Transform, const FReal CullDistance)"
  },
  {
    "label": "SpherePlaneContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "SpherePlaneContactPoint(const TSphere<FReal, 3>& Sphere, const FRigidTransform3& SphereTransform, const TPlane<FReal, 3>& Plane, const FRigidTransform3& PlaneTransform)"
  },
  {
    "label": "SphereBoxContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "SphereBoxContactPoint(const TSphere<FReal, 3>& Sphere, const FRigidTransform3& SphereTransform, const FImplicitBox3& Box, const FRigidTransform3& BoxTransform)"
  },
  {
    "label": "SphereCapsuleContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "SphereCapsuleContactPoint(const TSphere<FReal, 3>& A, const FRigidTransform3& ATransform, const FCapsule& B, const FRigidTransform3& BTransform)"
  },
  {
    "label": "SphereTriangleMeshContactPoint()",
    "kind": "Method",
    "detail": "Function (template<TriMeshType> FContactPoint)",
    "insertText": "SphereTriangleMeshContactPoint(const TSphere<FReal, 3>& A, const FRigidTransform3& ATransform, const TriMeshType& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "SphereTriangleMeshSweptContactPoint()",
    "kind": "Method",
    "detail": "Function (template<TriMeshType> FContactPoint)",
    "insertText": "SphereTriangleMeshSweptContactPoint(const TSphere<FReal, 3>& A, const FRigidTransform3& ATransform, const TriMeshType& B, const FRigidTransform3& BStartTransform, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& TOI)"
  },
  {
    "label": "BoxHeightFieldContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "BoxHeightFieldContactPoint(const FImplicitBox3& A, const FRigidTransform3& ATransform, const FHeightField& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "BoxTriangleMeshContactPoint()",
    "kind": "Method",
    "detail": "Function (template<TriMeshType> FContactPoint)",
    "insertText": "BoxTriangleMeshContactPoint(const FImplicitBox3& A, const FRigidTransform3& ATransform, const TriMeshType& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "SphereHeightFieldContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "SphereHeightFieldContactPoint(const TSphere<FReal, 3>& A, const FRigidTransform3& ATransform, const FHeightField& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "CapsuleHeightFieldContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "CapsuleHeightFieldContactPoint(const FCapsule& A, const FRigidTransform3& ATransform, const FHeightField& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "CapsuleTriangleMeshContactPoint()",
    "kind": "Method",
    "detail": "Function (template<TriMeshType> FContactPoint)",
    "insertText": "CapsuleTriangleMeshContactPoint(const FCapsule& A, const FRigidTransform3& ATransform, const TriMeshType& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "CapsuleTriangleMeshSweptContactPoint()",
    "kind": "Method",
    "detail": "Function (template<TriMeshType> FContactPoint)",
    "insertText": "CapsuleTriangleMeshSweptContactPoint(const FCapsule& A, const FRigidTransform3& ATransform, const TriMeshType& B, const FRigidTransform3& BStartTransform, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& TOI)"
  },
  {
    "label": "ConvexHeightFieldContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "ConvexHeightFieldContactPoint(const FImplicitObject& A, const FRigidTransform3& ATransform, const FHeightField& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "ConvexTriangleMeshContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "ConvexTriangleMeshContactPoint(const FImplicitObject& A, const FRigidTransform3& ATransform, const FImplicitObject& B, const FRigidTransform3& BTransform, const FReal CullDistance)"
  },
  {
    "label": "ConvexTriangleMeshSweptContactPoint()",
    "kind": "Method",
    "detail": "Function (template<TriMeshType> FContactPoint)",
    "insertText": "ConvexTriangleMeshSweptContactPoint(const FImplicitObject& A, const FRigidTransform3& ATransform, const TriMeshType& B, const FRigidTransform3& BStartTransform, const FVec3& Dir, const FReal Length, const FReal IgnorePenetration, const FReal TargetPenetration, FReal& TOI)"
  },
  {
    "label": "CapsuleCapsuleContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "CapsuleCapsuleContactPoint(const FCapsule& A, const FRigidTransform3& ATransform, const FCapsule& B, const FRigidTransform3& BTransform)"
  },
  {
    "label": "CapsuleBoxContactPoint()",
    "kind": "Method",
    "detail": "Function (FContactPoint)",
    "insertText": "CapsuleBoxContactPoint(const FCapsule& A, const FRigidTransform3& ATransform, const FImplicitBox3& B, const FRigidTransform3& BTransform, const FVec3& InitialDir)"
  }
]