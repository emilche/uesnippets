[
  {
    "label": "triangular_solve_matrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "triangular_solve_matrix"
  },
  {
    "label": "EIGEN_BLAS_TRSM_L()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIANGULAR_SOLVER_MATRIX_BLAS_H # define EIGEN_TRIANGULAR_SOLVER_MATRIX_BLAS_H namespace Eigen { namespace internal { # define)",
    "insertText": "EIGEN_BLAS_TRSM_L(EIGTYPE, BLASTYPE, BLASFUNC)"
  },
  {
    "label": "IsLower()",
    "kind": "Method",
    "detail": "Function (\\ enum { \\)",
    "insertText": "IsLower(Mode&Lower) == Lower, \\ IsUnitDiag = (Mode&UnitDiag) ? 1 : 0, \\ IsZeroDiag = (Mode&ZeroDiag) ? 1 : 0, \\ conjA = ((TriStorageOrder==ColMajor) && Conjugate)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (\\ void)",
    "insertText": "run(\\ Index size, Index otherSize, \\ const EIGTYPE* _tri, Index triStride, \\ EIGTYPE* _other, Index otherIncr, Index otherStride, level3_blocking<EIGTYPE,EIGTYPE>&)"
  },
  {
    "label": "EIGEN_ONLY_USED_FOR_DEBUG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "EIGEN_ONLY_USED_FOR_DEBUG(otherIncr)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "eigen_assert(otherIncr == 1)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ BlasIndex m = convert_index<)",
    "insertText": "BlasIndex(size), n = convert_index<BlasIndex>(otherSize)"
  },
  {
    "label": "alpha()",
    "kind": "Method",
    "detail": "Function (\\ char side = ' L ',uplo,diag = ' N ',transa ; \\ \\ EIGTYPE)",
    "insertText": "alpha(1)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ ldb = convert_index<)",
    "insertText": "BlasIndex(otherStride)"
  },
  {
    "label": "transa()",
    "kind": "Method",
    "detail": "Function (\\ \\ const EIGTYPE* a ; \\ \\)",
    "insertText": "transa(TriStorageOrder==RowMajor) ? ((Conjugate) ? 'C' : 'T')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ \\ uplo = IsLower ? ' L ' : ' U ' ; \\)",
    "insertText": "if(TriStorageOrder==RowMajor) uplo = (uplo == 'L')"
  },
  {
    "label": "tri()",
    "kind": "Method",
    "detail": "Function (\\ \\ typedef Matrix<EIGTYPE,Dynamic,Dynamic,TriStorageOrder> MatrixTri ; \\ Map<const MatrixTri,0,OuterStride<>>)",
    "insertText": "tri(_tri,size,size,OuterStride<>(triStride))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ MatrixTri a_tmp ; \\ \\)",
    "insertText": "if(conjA)"
  },
  {
    "label": "conjugate()",
    "kind": "Method",
    "detail": "Function (\\ a_tmp = tri .)",
    "insertText": "conjugate()"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (\\ a = a_tmp .)",
    "insertText": "data()"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ lda = convert_index<)",
    "insertText": "BlasIndex(a_tmp.outerStride())"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ } else { \\ a = _tri ; \\ lda = convert_index<)",
    "insertText": "BlasIndex(triStride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\)",
    "insertText": "if(IsUnitDiag)"
  },
  {
    "label": "BLASFUNC()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "BLASFUNC(&side, &uplo, &transa, &diag, &m, &n, (const BLASTYPE*)&numext::real_ref(alpha), (const BLASTYPE*)a, &lda, (BLASTYPE*)_other, &ldb)"
  },
  {
    "label": "EIGEN_BLAS_TRSM_L()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; # ifdef EIGEN_USE_MKL)",
    "insertText": "EIGEN_BLAS_TRSM_L(double, double, dtrsm) EIGEN_BLAS_TRSM_L(dcomplex, MKL_Complex16, ztrsm) EIGEN_BLAS_TRSM_L(float, float, strsm) EIGEN_BLAS_TRSM_L(scomplex, MKL_Complex8, ctrsm) #else EIGEN_BLAS_TRSM_L(double, double, dtrsm_) EIGEN_BLAS_TRSM_L(dcomplex, double, ztrsm_) EIGEN_BLAS_TRSM_L(float, float, strsm_) EIGEN_BLAS_TRSM_L(scomplex, float, ctrsm_) #endif #define EIGEN_BLAS_TRSM_R(EIGTYPE, BLASTYPE, BLASFUNC)"
  },
  {
    "label": "BlasIndex()",
    "kind": "Method",
    "detail": "Function (\\ BlasIndex m = convert_index<)",
    "insertText": "BlasIndex(otherSize), n = convert_index<BlasIndex>(size)"
  }
]