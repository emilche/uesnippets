[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Gen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Gen"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_SHUFFLE_H # define _LIBCPP___ALGORITHM_RANGES_SHUFFLE_H # include<__algorithm / iterator_operations . h> # include<__algorithm / shuffle . h> # include<__algorithm / uniform_random_bit_generator_adaptor . h> # include<__config> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / iterator_traits . h> # include<__iterator / next . h> # include<__iterator / permutable . h> # include<__random / uniform_random_bit_generator . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__utility / forward . h> # include<__utility / move . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __shuffle { struct __fn { template<random_access_iterator _Iter,sentinel_for<_Iter> _Sent,class _Gen> requires permutable<_Iter>&& uniform_random_bit_generator<remove_reference_t<_Gen>> _LIBCPP_HIDE_FROM_ABI _Iter)",
    "insertText": "operator()(_Iter __first, _Sent __last, _Gen&& __gen)"
  },
  {
    "label": "__adapted_gen()",
    "kind": "Method",
    "detail": "Function (_ClassicGenAdaptor<_Gen>)",
    "insertText": "__adapted_gen(__gen)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<random_access_range _Range,class _Gen> requires permutable<iterator_t<_Range>>&& uniform_random_bit_generator<remove_reference_t<_Gen>> _LIBCPP_HIDE_FROM_ABI borrowed_iterator_t<_Range>)",
    "insertText": "operator()(_Range&& __range, _Gen&& __gen)"
  }
]