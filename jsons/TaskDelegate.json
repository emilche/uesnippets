[
  {
    "label": "FLowLevelTasksBlockAllocationTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLowLevelTasksBlockAllocationTag"
  },
  {
    "label": "TTaskDelegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTaskDelegate"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "alignas"
  },
  {
    "label": "TTaskDelegateBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTaskDelegateBase"
  },
  {
    "label": "TTaskDelegateDummy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTaskDelegateDummy"
  },
  {
    "label": "TTaskDelegateImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTaskDelegateImpl"
  },
  {
    "label": "MakeDummyValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Experimental / ConcurrentLinearAllocator . h \" # include \" Templates / IsInvocable . h \" # include \" Misc / ScopeExit . h \" # include \" Misc / Launder . h \" # include<type_traits> namespace LowLevelTasks { struct FLowLevelTasksBlockAllocationTag : FDefaultBlockAllocationTag { uint32 BlockSize = 6 4* 1 0 2 4 ; bool AllowOversizedBlocks = true ; bool RequiresAccurateSize = false ; bool InlineBlockAllocation = true ; const char* TagName = \" LowLevelTasksLinear \" ; using Allocator = TBlockAllocationCache<BlockSize,FAlignedAllocator> ; } ; namespace TTaskDelegate_Impl { template<ReturnType> ReturnType)",
    "insertText": "MakeDummyValue()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} template<> void MakeDummyValue<)",
    "insertText": "void()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (template<uint32 TotalSize,ReturnType,. . . ParamTypes> class)",
    "insertText": "alignas(8) TTaskDelegate<ReturnType(ParamTypes...)"
  },
  {
    "label": "ReturnType()",
    "kind": "Method",
    "detail": "Function (template<,uint32> class TTaskDelegate ; using ThisClass = TTaskDelegate<)",
    "insertText": "ReturnType(ParamTypes...)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (struct TTaskDelegateBase { void)",
    "insertText": "Move(TTaskDelegateBase&, void*, void*, uint32)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (} ; ReturnType)",
    "insertText": "Call(void*, ParamTypes...)"
  },
  {
    "label": "CallAndMove()",
    "kind": "Method",
    "detail": "Function (} ; ReturnType)",
    "insertText": "CallAndMove(ThisClass&, void*, uint32, ParamTypes...)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Destroy(void*)"
  },
  {
    "label": "IsHeapAllocated()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsHeapAllocated()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(InlineData) TCallableType(Forward<CallableT>(Callable))"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Move(TTaskDelegateBase& DstWrapper, void* DstData, void* SrcData, uint32 DestInlineSize)"
  },
  {
    "label": "TCallableType()",
    "kind": "Method",
    "detail": "Function (TCallableType* SrcPtr = reinterpret_cast<)",
    "insertText": "TCallableType(SrcData)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&DstWrapper) TTaskDelegateImpl<TCallableType, false>(MoveTemp(*SrcPtr), DstData)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "new(&DstWrapper) TTaskDelegateImpl<TCallableType, true>(MoveTemp(*SrcPtr), DstData)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "new(this) TTaskDelegateDummy()"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "Call(void* InlineData, ParamTypes... Params)"
  },
  {
    "label": "TCallableType()",
    "kind": "Method",
    "detail": "Function (TCallableType* LocalPtr = reinterpret_cast<)",
    "insertText": "TCallableType(InlineData)"
  },
  {
    "label": "CallAndMove()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "CallAndMove(ThisClass& Destination, void* InlineData, uint32 DestInlineSize, ParamTypes... Params)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (ON_SCOPE_EXIT {)",
    "insertText": "Move(Destination.CallableWrapper, Destination.InlineStorage, InlineData, DestInlineSize)"
  },
  {
    "label": "Call()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "Call(InlineData, Params...)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Destroy(void* InlineData)"
  },
  {
    "label": "TCallableType()",
    "kind": "Method",
    "detail": "Function (LocalPtr -> ~)",
    "insertText": "TCallableType()"
  },
  {
    "label": "TTaskDelegateImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<TCallableType> struct TTaskDelegateImpl<TCallableType,true> final : TTaskDelegateBase { private :)",
    "insertText": "TTaskDelegateImpl(void* DstData, void* SrcData)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(DstData, SrcData, sizeof(TCallableType*))"
  },
  {
    "label": "TTaskDelegateImpl()",
    "kind": "Method",
    "detail": "Function (} public : template<CallableT>)",
    "insertText": "TTaskDelegateImpl(CallableT&& Callable, void* InlineData)"
  },
  {
    "label": "TCallableType()",
    "kind": "Method",
    "detail": "Function (* HeapPtr = reinterpret_cast<)",
    "insertText": "TCallableType(TConcurrentLinearAllocator<FLowLevelTasksBlockAllocationTag>::template Malloc<alignof(TCallableType)>(sizeof(TCallableType)))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(*HeapPtr) TCallableType(Forward<CallableT>(Callable))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&DstWrapper) TTaskDelegateImpl<TCallableType, true>(DstData, SrcData)"
  },
  {
    "label": "TCallableType()",
    "kind": "Method",
    "detail": "Function (TCallableType* HeapPtr = reinterpret_cast<)",
    "insertText": "TCallableType(*reinterpret_cast<void* const*>(InlineData))"
  },
  {
    "label": "TCallableType()",
    "kind": "Method",
    "detail": "Function (TCallableType* HeapPtr = reinterpret_cast<)",
    "insertText": "TCallableType(*reinterpret_cast<void**>(InlineData))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (TConcurrentLinearAllocator<FLowLevelTasksBlockAllocationTag)",
    "insertText": "Free(HeapPtr)"
  },
  {
    "label": "TTaskDelegate()",
    "kind": "Method",
    "detail": "Function (} } ; public :)",
    "insertText": "TTaskDelegate()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&CallableWrapper) TTaskDelegateDummy()"
  },
  {
    "label": "TTaskDelegate()",
    "kind": "Method",
    "detail": "Function (} template<uint32 SourceTotalSize>)",
    "insertText": "TTaskDelegate(const TTaskDelegate<ReturnType(ParamTypes...), SourceTotalSize>&)"
  },
  {
    "label": "TTaskDelegate()",
    "kind": "Method",
    "detail": "Function (template<uint32 SourceTotalSize>)",
    "insertText": "TTaskDelegate(TTaskDelegate<ReturnType(ParamTypes...), SourceTotalSize>&& Other)"
  },
  {
    "label": "GetWrapper()",
    "kind": "Method",
    "detail": "Function (Other .)",
    "insertText": "GetWrapper()->Move(CallableWrapper, InlineStorage, Other.InlineStorage, InlineStorageSize)"
  },
  {
    "label": "TTaskDelegate()",
    "kind": "Method",
    "detail": "Function (} template<CallableT>)",
    "insertText": "TTaskDelegate(CallableT&& Callable)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (using TCallableType = std::decay_t<CallableT> ; if)",
    "insertText": "constexpr((sizeof(TCallableType) <= InlineStorageSize) && ((uintptr_t(InlineStorageSize) % alignof(TCallableType)) == 0))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&CallableWrapper) TTaskDelegateImpl<TCallableType, false>(Forward<CallableT>(Callable), InlineStorage)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "new(&CallableWrapper) TTaskDelegateImpl<TCallableType, true>(Forward<CallableT>(Callable), InlineStorage)"
  },
  {
    "label": "GetWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWrapper()->Destroy(InlineStorage)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "operator()(ParamTypes... Params)"
  },
  {
    "label": "CallAndMove()",
    "kind": "Method",
    "detail": "Function (} template<uint32 DestTotalSize> ReturnType)",
    "insertText": "CallAndMove(TTaskDelegate<ReturnType(ParamTypes...), DestTotalSize>& Destination, ParamTypes... Params)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<uint32 SourceTotalSize> ThisClass&)",
    "insertText": "operator(const TTaskDelegate<ReturnType(ParamTypes...), SourceTotalSize>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<uint32 SourceTotalSize> ThisClass&)",
    "insertText": "operator(TTaskDelegate<ReturnType(ParamTypes...), SourceTotalSize>&& Other)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (} return* this ; } void)",
    "insertText": "Destroy()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "DelegateSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "DelegateSize()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} private : uint32 InlineStorageSize = TotalSize -)",
    "insertText": "sizeof(TTaskDelegateBase)"
  },
  {
    "label": "GetWrapper()",
    "kind": "Method",
    "detail": "Function (char InlineStorage [ InlineStorageSize ] ; TTaskDelegateBase CallableWrapper ; TTaskDelegateBase*)",
    "insertText": "GetWrapper()"
  }
]