[
  {
    "label": "NSWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NSWindow"
  },
  {
    "label": "RootWindowConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootWindowConfig"
  },
  {
    "label": "RootWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootWindow"
  },
  {
    "label": "Delegate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Delegate"
  },
  {
    "label": "ShowMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ShowMode"
  },
  {
    "label": "DeleteOnMainThread",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DeleteOnMainThread"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "base"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_ROOT_WINDOW_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_ROOT_WINDOW_H_ # pragma once # include<set> # include<string> # include \" include / base / cef_callback_forward . h \" # include \" include / base / cef_ref_counted . h \" # include \" include / cef_browser . h \" # include \" include / views / cef_window . h \" # include \" tests / cefclient / browser / client_types . h \" # include \" tests / cefclient / browser / image_cache . h \" # include \" tests / shared / browser / main_message_loop . h \" # if)",
    "insertText": "defined(OS_MAC)"
  },
  {
    "label": "RootWindowConfig()",
    "kind": "Method",
    "detail": "Function (# endif namespace client { struct RootWindowConfig {)",
    "insertText": "RootWindowConfig()"
  },
  {
    "label": "GetRequestContext()",
    "kind": "Method",
    "detail": "Function (bool always_on_top ; bool with_controls ; bool with_osr ; bool with_extension ; bool initially_hidden ; CefRect bounds ; CefRect source_bounds ; CefRefPtr<CefWindow> parent_window ; base::Closure close_callback ; std::string url ; } ; typedef std::set<CefRefPtr<CefExtension>> ExtensionSet ; class RootWindow : public base::RefCountedThreadSafe<RootWindow,DeleteOnMainThread> { public : class Delegate { public : CefRefPtr<CefRequestContext>)",
    "insertText": "GetRequestContext(RootWindow* root_window)"
  },
  {
    "label": "GetImageCache()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<ImageCache>)",
    "insertText": "GetImageCache()"
  },
  {
    "label": "OnTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTest(RootWindow* root_window, int test_id)"
  },
  {
    "label": "OnExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExit(RootWindow* root_window)"
  },
  {
    "label": "OnRootWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRootWindowDestroyed(RootWindow* root_window)"
  },
  {
    "label": "OnRootWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRootWindowActivated(RootWindow* root_window)"
  },
  {
    "label": "OnBrowserCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserCreated(RootWindow* root_window, CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "CreateExtensionWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExtensionWindow(CefRefPtr<CefExtension> extension, const CefRect& source_bounds, CefRefPtr<CefWindow> parent_window, const base::Closure& close_callback, bool with_osr)"
  },
  {
    "label": "Delegate()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "Delegate()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; scoped_refptr<RootWindow>)",
    "insertText": "Create(bool use_views)"
  },
  {
    "label": "GetForBrowser()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RootWindow>)",
    "insertText": "GetForBrowser(int browser_id)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(OS_MAC) && __OBJC__ static scoped_refptr<RootWindow> GetForNSWindow(NSWindow* window)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Init(RootWindow::Delegate* delegate, const RootWindowConfig& config, const CefBrowserSettings& settings)"
  },
  {
    "label": "InitAsPopup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAsPopup(RootWindow::Delegate* delegate, bool with_controls, bool with_osr, const CefPopupFeatures& popupFeatures, CefWindowInfo& windowInfo, CefRefPtr<CefClient>& client, CefBrowserSettings& settings)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (enum ShowMode { ShowNormal,ShowMinimized,ShowMaximized,ShowNoActivate,} ; void)",
    "insertText": "Show(ShowMode mode)"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "SetBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBounds(int x, int y, size_t width, size_t height)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close(bool force)"
  },
  {
    "label": "SetDeviceScaleFactor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDeviceScaleFactor(float device_scale_factor)"
  },
  {
    "label": "GetDeviceScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDeviceScaleFactor()"
  },
  {
    "label": "GetBrowser()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "GetBrowser()"
  },
  {
    "label": "GetWindowHandle()",
    "kind": "Method",
    "detail": "Function (ClientWindowHandle)",
    "insertText": "GetWindowHandle()"
  },
  {
    "label": "WithWindowlessRendering()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WithWindowlessRendering()"
  },
  {
    "label": "WithExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WithExtension()"
  },
  {
    "label": "OnExtensionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExtensionsChanged(const ExtensionSet& extensions)"
  },
  {
    "label": "RootWindow()",
    "kind": "Method",
    "detail": "Function (protected : struct DeleteOnMainThread ; class base::RefCountedThreadSafe<RootWindow,DeleteOnMainThread> ;)",
    "insertText": "RootWindow()"
  }
]