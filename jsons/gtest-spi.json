[
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "InterceptMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InterceptMode"
  },
  {
    "label": "GTestExpectFatalFailureHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTestExpectFatalFailureHelper"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_PUSH_()",
    "kind": "Method",
    "detail": "Function (# ifndef GOOGLETEST_INCLUDE_GTEST_GTEST_SPI_H_ # define GOOGLETEST_INCLUDE_GTEST_GTEST_SPI_H_ # include \" gtest / gtest . h \")",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_PUSH_(4251 \\)"
  },
  {
    "label": "ScopedFakeTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (class GTEST_API_ ScopedFakeTestPartResultReporter : public TestPartResultReporterInterface { public : enum InterceptMode { INTERCEPT_ONLY_CURRENT_THREAD,INTERCEPT_ALL_THREADS } ;)",
    "insertText": "ScopedFakeTestPartResultReporter(TestPartResultArray* result)"
  },
  {
    "label": "ScopedFakeTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScopedFakeTestPartResultReporter(InterceptMode intercept_mode, TestPartResultArray* result)"
  },
  {
    "label": "ScopedFakeTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedFakeTestPartResultReporter()"
  },
  {
    "label": "ReportTestPartResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportTestPartResult(const TestPartResult& result)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Init()"
  },
  {
    "label": "ScopedFakeTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (const InterceptMode intercept_mode_ ; TestPartResultReporterInterface* old_reporter_ ; TestPartResultArray* const result_ ;)",
    "insertText": "ScopedFakeTestPartResultReporter(const ScopedFakeTestPartResultReporter&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScopedFakeTestPartResultReporter&)",
    "insertText": "operator(const ScopedFakeTestPartResultReporter&)"
  },
  {
    "label": "SingleFailureChecker()",
    "kind": "Method",
    "detail": "Function (} ; namespace internal { class GTEST_API_ SingleFailureChecker { public :)",
    "insertText": "SingleFailureChecker(const TestPartResultArray* results, TestPartResult::Type type, const std::string& substr)"
  },
  {
    "label": "SingleFailureChecker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SingleFailureChecker()"
  },
  {
    "label": "SingleFailureChecker()",
    "kind": "Method",
    "detail": "Function (private : const TestPartResultArray* const results_ ; const TestPartResult::Type type_ ; const std::string substr_ ;)",
    "insertText": "SingleFailureChecker(const SingleFailureChecker&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SingleFailureChecker&)",
    "insertText": "operator(const SingleFailureChecker&)"
  },
  {
    "label": "GTEST_DISABLE_MSC_WARNINGS_POP_()",
    "kind": "Method",
    "detail": "Function (} ; } })",
    "insertText": "GTEST_DISABLE_MSC_WARNINGS_POP_() #define EXPECT_FATAL_FAILURE(statement, substr)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (\\ class GTestExpectFatalFailureHelper { \\ public : \\ void)",
    "insertText": "Execute()"
  },
  {
    "label": "gtest_checker()",
    "kind": "Method",
    "detail": "Function (statement ; } \\ } ; \\::testing::TestPartResultArray gtest_failures ; \\::testing::internal::SingleFailureChecker)",
    "insertText": "gtest_checker(\\ &gtest_failures, ::testing::TestPartResult::kFatalFailure, (substr))"
  },
  {
    "label": "gtest_reporter()",
    "kind": "Method",
    "detail": "Function (\\ { \\::testing::ScopedFakeTestPartResultReporter)",
    "insertText": "gtest_reporter(\\ ::testing::ScopedFakeTestPartResultReporter:: \\ INTERCEPT_ONLY_CURRENT_THREAD, \\ &gtest_failures)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(::testing::internal::AlwaysFalse()) #define EXPECT_FATAL_FAILURE_ON_ALL_THREADS(statement, substr)"
  },
  {
    "label": "gtest_reporter()",
    "kind": "Method",
    "detail": "Function (\\ { \\::testing::ScopedFakeTestPartResultReporter)",
    "insertText": "gtest_reporter(\\ ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \\ &gtest_failures)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ } \\ })",
    "insertText": "while(::testing::internal::AlwaysFalse()) #define EXPECT_NONFATAL_FAILURE(statement, substr)"
  },
  {
    "label": "gtest_checker()",
    "kind": "Method",
    "detail": "Function (\\::testing::TestPartResultArray gtest_failures ; \\::testing::internal::SingleFailureChecker)",
    "insertText": "gtest_checker(\\ &gtest_failures, ::testing::TestPartResult::kNonFatalFailure, \\ (substr))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(::testing::internal::AlwaysTrue())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ statement ; \\ } \\ } \\ })",
    "insertText": "while(::testing::internal::AlwaysFalse()) #define EXPECT_NONFATAL_FAILURE_ON_ALL_THREADS(statement, substr)"
  }
]