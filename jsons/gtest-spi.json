[
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "B",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "B"
  },
  {
    "label": "can",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "can"
  },
  {
    "label": "appends",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "appends"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "InterceptMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "InterceptMode"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "GTEST_API_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTEST_API_"
  },
  {
    "label": "GTestExpectFatalFailureHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTestExpectFatalFailureHelper"
  },
  {
    "label": "GTestExpectFatalFailureHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GTestExpectFatalFailureHelper"
  },
  {
    "label": "ScopedFakeTestPartResultReporter()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "ScopedFakeTestPartResultReporter(TestPartResultArray* result)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "gtest_reporter()",
    "kind": "Method",
    "detail": "Function (testing::ScopedFakeTestPartResultReporter)",
    "insertText": "gtest_reporter(             \\\n          ::testing::ScopedFakeTestPartResultReporter::                       \\\n              INTERCEPT_ONLY_CURRENT_THREAD,                                  \\\n          &gtest_failures)"
  },
  {
    "label": "gtest_reporter()",
    "kind": "Method",
    "detail": "Function (testing::ScopedFakeTestPartResultReporter)",
    "insertText": "gtest_reporter(             \\\n          ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \\\n          &gtest_failures)"
  },
  {
    "label": "gtest_reporter()",
    "kind": "Method",
    "detail": "Function (testing::ScopedFakeTestPartResultReporter)",
    "insertText": "gtest_reporter(     \\\n          ::testing::ScopedFakeTestPartResultReporter::               \\\n              INTERCEPT_ONLY_CURRENT_THREAD,                          \\\n          &gtest_failures)"
  },
  {
    "label": "gtest_reporter()",
    "kind": "Method",
    "detail": "Function (testing::ScopedFakeTestPartResultReporter)",
    "insertText": "gtest_reporter(             \\\n          ::testing::ScopedFakeTestPartResultReporter::INTERCEPT_ALL_THREADS, \\\n          &gtest_failures)"
  }
]