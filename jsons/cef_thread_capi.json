[
  {
    "label": "_cef_thread_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_thread_t"
  },
  {
    "label": "_cef_task_runner_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cef_task_runner_t"
  },
  {
    "label": "_cef_task_runner_t()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_CAPI_CEF_THREAD_CAPI_H_ # define CEF_INCLUDE_CAPI_CEF_THREAD_CAPI_H_ # pragma once # include \" include / capi / cef_task_capi . h \" # include \" include / internal / cef_thread_internal . h \" # ifdef __cplusplus \" C \" { # endif typedef struct _cef_thread_t { cef_base_ref_counted_t base ; struct)",
    "insertText": "_cef_task_runner_t(CEF_CALLBACK* get_task_runner)( struct _cef_thread_t* self)"
  },
  {
    "label": "cef_platform_thread_id_t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cef_platform_thread_id_t(CEF_CALLBACK* get_platform_thread_id)( struct _cef_thread_t* self)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(CEF_CALLBACK* stop)(struct _cef_thread_t* self)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(CEF_CALLBACK* is_running)(struct _cef_thread_t* self)"
  },
  {
    "label": "cef_thread_create()",
    "kind": "Method",
    "detail": "Function (} cef_thread_t ; CEF_EXPORT cef_thread_t*)",
    "insertText": "cef_thread_create(const cef_string_t* display_name, cef_thread_priority_t priority, cef_message_loop_type_t message_loop_type, int stoppable, cef_com_init_mode_t com_init_mode)"
  }
]