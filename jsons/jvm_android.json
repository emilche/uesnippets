[
  {
    "label": "JvmThreadConnector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JvmThreadConnector"
  },
  {
    "label": "GlobalRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GlobalRef"
  },
  {
    "label": "JavaClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JavaClass"
  },
  {
    "label": "NativeRegistration",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NativeRegistration"
  },
  {
    "label": "JNIEnvironment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JNIEnvironment"
  },
  {
    "label": "JVM",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "JVM"
  },
  {
    "label": "JvmThreadConnector()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_UTILITY_INCLUDE_JVM_ANDROID_H_ # define MODULES_UTILITY_INCLUDE_JVM_ANDROID_H_ # include<jni . h> # include<memory> # include<string> # include \" api / sequence_checker . h \" # include \" modules / utility / include / helpers_android . h \" namespace webrtc { class JvmThreadConnector { public :)",
    "insertText": "JvmThreadConnector()"
  },
  {
    "label": "GlobalRef()",
    "kind": "Method",
    "detail": "Function (private : SequenceChecker thread_checker_ ; bool attached_ ; } ; class GlobalRef { public :)",
    "insertText": "GlobalRef(JNIEnv* jni, jobject object)"
  },
  {
    "label": "GlobalRef()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "GlobalRef()"
  },
  {
    "label": "CallBooleanMethod()",
    "kind": "Method",
    "detail": "Function (jboolean)",
    "insertText": "CallBooleanMethod(jmethodID methodID, ...)"
  },
  {
    "label": "CallIntMethod()",
    "kind": "Method",
    "detail": "Function (jint)",
    "insertText": "CallIntMethod(jmethodID methodID, ...)"
  },
  {
    "label": "CallVoidMethod()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallVoidMethod(jmethodID methodID, ...)"
  },
  {
    "label": "JavaClass()",
    "kind": "Method",
    "detail": "Function (private : JNIEnv* const jni_ ; const jobject j_object_ ; } ; class JavaClass { public :)",
    "insertText": "JavaClass(JNIEnv* jni, jclass clazz) : jni_(jni), j_class_(clazz)"
  },
  {
    "label": "JavaClass()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "JavaClass()"
  },
  {
    "label": "GetMethodId()",
    "kind": "Method",
    "detail": "Function (} jmethodID)",
    "insertText": "GetMethodId(const char* name, const char* signature)"
  },
  {
    "label": "GetStaticMethodId()",
    "kind": "Method",
    "detail": "Function (jmethodID)",
    "insertText": "GetStaticMethodId(const char* name, const char* signature)"
  },
  {
    "label": "CallStaticObjectMethod()",
    "kind": "Method",
    "detail": "Function (jobject)",
    "insertText": "CallStaticObjectMethod(jmethodID methodID, ...)"
  },
  {
    "label": "CallStaticIntMethod()",
    "kind": "Method",
    "detail": "Function (jint)",
    "insertText": "CallStaticIntMethod(jmethodID methodID, ...)"
  },
  {
    "label": "NativeRegistration()",
    "kind": "Method",
    "detail": "Function (protected : JNIEnv* const jni_ ; jclass const j_class_ ; } ; class NativeRegistration : public JavaClass { public :)",
    "insertText": "NativeRegistration(JNIEnv* jni, jclass clazz)"
  },
  {
    "label": "NativeRegistration()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NativeRegistration()"
  },
  {
    "label": "NewObject()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<GlobalRef>)",
    "insertText": "NewObject(const char* name, const char* signature, ...)"
  },
  {
    "label": "JNIEnvironment()",
    "kind": "Method",
    "detail": "Function (private : JNIEnv* const jni_ ; } ; class JNIEnvironment { public :)",
    "insertText": "JNIEnvironment(JNIEnv* jni)"
  },
  {
    "label": "JNIEnvironment()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JNIEnvironment()"
  },
  {
    "label": "RegisterNatives()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<NativeRegistration>)",
    "insertText": "RegisterNatives(const char* name, const JNINativeMethod* methods, int num_methods)"
  },
  {
    "label": "JavaToStdString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "JavaToStdString(const jstring& j_string)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : SequenceChecker thread_checker_ ; JNIEnv* const jni_ ; } ; class JVM { public : void)",
    "insertText": "Initialize(JavaVM* jvm)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(JavaVM* jvm, jobject context)"
  },
  {
    "label": "Uninitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Uninitialize()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (JVM*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "environment()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<JNIEnvironment>)",
    "insertText": "environment()"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (JavaClass)",
    "insertText": "GetClass(const char* name)"
  },
  {
    "label": "jvm()",
    "kind": "Method",
    "detail": "Function (JavaVM*)",
    "insertText": "jvm()"
  },
  {
    "label": "JVM()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "JVM()"
  },
  {
    "label": "jni()",
    "kind": "Method",
    "detail": "Function (private : JNIEnv*)",
    "insertText": "jni()"
  }
]