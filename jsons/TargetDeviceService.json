[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FMessageEndpoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMessageEndpoint"
  },
  {
    "label": "IMessageBus",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageBus"
  },
  {
    "label": "ITargetDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetDevice"
  },
  {
    "label": "FTargetDeviceClaimDenied",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceClaimDenied"
  },
  {
    "label": "FTargetDeviceClaimed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceClaimed"
  },
  {
    "label": "FTargetDeviceServiceDeployCommit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceDeployCommit"
  },
  {
    "label": "FTargetDeviceServiceDeployFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceDeployFile"
  },
  {
    "label": "FTargetDeviceServiceLaunchApp",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceLaunchApp"
  },
  {
    "label": "FTargetDeviceServiceTerminateLaunchedProcess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceTerminateLaunchedProcess"
  },
  {
    "label": "FTargetDeviceServicePing",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServicePing"
  },
  {
    "label": "FTargetDeviceServicePowerOff",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServicePowerOff"
  },
  {
    "label": "FTargetDeviceServicePowerOn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServicePowerOn"
  },
  {
    "label": "FTargetDeviceServiceReboot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceReboot"
  },
  {
    "label": "FTargetDeviceServiceRunExecutable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceServiceRunExecutable"
  },
  {
    "label": "FTargetDeviceUnclaimed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTargetDeviceUnclaimed"
  },
  {
    "label": "FTargetDeviceService",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetDeviceService"
  },
  {
    "label": "FTargetDeviceService()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" IMessageContext . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / NameTypes . h \" # include \" ITargetDeviceService . h \" class FArchive ; class FMessageEndpoint ; class IMessageBus ; class ITargetDevice ; struct FTargetDeviceClaimDenied ; struct FTargetDeviceClaimed ; struct FTargetDeviceServiceDeployCommit ; struct FTargetDeviceServiceDeployFile ; struct FTargetDeviceServiceLaunchApp ; struct FTargetDeviceServiceTerminateLaunchedProcess ; struct FTargetDeviceServicePing ; struct FTargetDeviceServicePowerOff ; struct FTargetDeviceServicePowerOn ; struct FTargetDeviceServiceReboot ; struct FTargetDeviceServiceRunExecutable ; struct FTargetDeviceUnclaimed ; class FTargetDeviceService : public ITargetDeviceService { public :)",
    "insertText": "FTargetDeviceService(const FString& InDeviceName, const TSharedRef<IMessageBus, ESPMode::ThreadSafe>& InMessageBus)"
  },
  {
    "label": "FTargetDeviceService()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTargetDeviceService()"
  },
  {
    "label": "AddTargetDevice()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddTargetDevice(TSharedPtr<ITargetDevice, ESPMode::ThreadSafe> InDevice)"
  },
  {
    "label": "CanStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStart(FName InFlavor = NAME_None)"
  },
  {
    "label": "GetClaimHost()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetClaimHost()"
  },
  {
    "label": "GetClaimUser()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetClaimUser()"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr)",
    "insertText": "GetDevice(FName InVariant = NAME_None)"
  },
  {
    "label": "GetDeviceName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDeviceName()"
  },
  {
    "label": "GetDevicePlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetDevicePlatformName()"
  },
  {
    "label": "GetDevicePlatformDisplayName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDevicePlatformDisplayName()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "IsShared()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShared()"
  },
  {
    "label": "NumTargetDevices()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumTargetDevices()"
  },
  {
    "label": "RemoveTargetDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTargetDevice(TSharedPtr<ITargetDevice, ESPMode::ThreadSafe> InDevice)"
  },
  {
    "label": "SetShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShared(bool InShared)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "StoreDeployedFile()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "StoreDeployedFile(FArchive* FileReader, const FString& TargetFileName)"
  },
  {
    "label": "HandleClaimDeniedMessage()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleClaimDeniedMessage(const FTargetDeviceClaimDenied& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleClaimedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleClaimedMessage(const FTargetDeviceClaimed& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleUnclaimedMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUnclaimedMessage(const FTargetDeviceUnclaimed& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleTerminateLaunchedProcessMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTerminateLaunchedProcessMessage(const FTargetDeviceServiceTerminateLaunchedProcess& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePingMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePingMessage(const FTargetDeviceServicePing& InMessage, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePowerOffMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePowerOffMessage(const FTargetDeviceServicePowerOff& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandlePowerOnMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePowerOnMessage(const FTargetDeviceServicePowerOn& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  },
  {
    "label": "HandleRebootMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleRebootMessage(const FTargetDeviceServiceReboot& Message, const TSharedRef<IMessageContext, ESPMode::ThreadSafe>& Context)"
  }
]