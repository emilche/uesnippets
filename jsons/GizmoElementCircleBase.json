[
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FMaterialRenderProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialRenderProxy"
  },
  {
    "label": "UGizmoElementCircleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoElementCircleBase"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BaseGizmos / GizmoElementLineBase . h \" # include \" InputState . h \" # include \" UObject / ObjectMacros . h \" # include \" GizmoElementCircleBase . generated . h \" class FPrimitiveDrawInterface ; class FMaterialRenderProxy ;)",
    "insertText": "UCLASS(Transient, Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: INTERACTIVETOOLSFRAMEWORK_API virtual void SetCenter(const FVector& InCenter)"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetCenter()"
  },
  {
    "label": "SetAxis0()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxis0(const FVector& InAxis0)"
  },
  {
    "label": "GetAxis0()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAxis0()"
  },
  {
    "label": "SetAxis1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAxis1(const FVector& InAxis0)"
  },
  {
    "label": "GetAxis1()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetAxis1()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(double InRadius)"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetRadius()"
  },
  {
    "label": "SetNumSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumSegments(int32 InNumSegments)"
  },
  {
    "label": "GetNumSegments()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSegments()"
  },
  {
    "label": "SetPartialType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPartialType(EGizmoElementPartialType InPartial)"
  },
  {
    "label": "GetPartialType()",
    "kind": "Method",
    "detail": "Function (EGizmoElementPartialType)",
    "insertText": "GetPartialType()"
  },
  {
    "label": "SetPartialStartAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPartialStartAngle(double InPartialAngle)"
  },
  {
    "label": "GetPartialStartAngle()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetPartialStartAngle()"
  },
  {
    "label": "SetPartialEndAngle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPartialEndAngle(double InPartialAngle)"
  },
  {
    "label": "GetPartialEndAngle()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetPartialEndAngle()"
  },
  {
    "label": "SetPartialViewDependentMaxCosTol()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPartialViewDependentMaxCosTol(double InPartialViewDependentMaxCosTol)"
  },
  {
    "label": "GetPartialViewDependentMaxCosTol()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetPartialViewDependentMaxCosTol()"
  },
  {
    "label": "IsPartial()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IsPartial(const FSceneView* View, const FVector& InWorldCenter, const FVector& InWorldNormal)"
  },
  {
    "label": "IsPartial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPartial(const UGizmoViewContext* ViewContext, const FVector& InWorldCenter, const FVector& InWorldNormal)"
  },
  {
    "label": "IsPartial()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPartial(const FVector& InWorldCenter, const FVector& InWorldNormal, const FVector& InViewLocation, const FVector& InViewDirection, const bool bIsPerspectiveProjection)"
  }
]