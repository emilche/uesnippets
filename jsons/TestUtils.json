[
  {
    "label": "ResetRandomSeed()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreTypes . h \" # include \" Math / UnrealMathUtility . h \" namespace Test { void)",
    "insertText": "ResetRandomSeed()"
  },
  {
    "label": "MakeIndexArray()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "MakeIndexArray(int32 Size)"
  },
  {
    "label": "MakeRandomSubset()",
    "kind": "Method",
    "detail": "Function (template<T> TArray<T>)",
    "insertText": "MakeRandomSubset(const TArray<T>& InArray, int32 Size)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TArray<T> Result ;)",
    "insertText": "if(InArray.Num() > 1 && Size < InArray.Num())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Reset(Size)"
  },
  {
    "label": "RandRange()",
    "kind": "Method",
    "detail": "Function (const int32 i =)",
    "insertText": "RandRange(0, InArray.Num() - 1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(InArray[i])"
  },
  {
    "label": "Shuffle()",
    "kind": "Method",
    "detail": "Function (} } } return Result ; } template<T> void)",
    "insertText": "Shuffle(TArray<T>& OutArray)"
  },
  {
    "label": "RandRange()",
    "kind": "Method",
    "detail": "Function (const int32 j =)",
    "insertText": "RandRange(i, OutArray.Num() - 1)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Swap(i, j)"
  }
]