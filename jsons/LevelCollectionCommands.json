[
  {
    "label": "FLevelCollectionCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelCollectionCommands"
  },
  {
    "label": "FLevelCollectionCommands()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" InputCoreTypes . h \" # include \" Framework / Commands / InputChord . h \" # include \" Styling / AppStyle . h \" # include \" Framework / Commands / Commands . h \" # define LOCTEXT_NAMESPACE \" LevelCollectionCommands \" class FLevelCollectionCommands : public TCommands<FLevelCollectionCommands> { public :)",
    "insertText": "FLevelCollectionCommands() : TCommands<FLevelCollectionCommands> ( \"WorldBrowser\", NSLOCTEXT(\"Contexts\", \"WorldBrowser\", \"World Browser\"), NAME_None, FAppStyle::GetAppStyleSetName())"
  },
  {
    "label": "RegisterCommands()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterCommands()"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(RefreshBrowser, \"Refresh\", \"Refreshes opened world\", EUserInterfaceActionType::Button, FInputChord(EKeys::F5))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(FixUpInvalidReference, \"Replace Selected Level\",\"Removes the broken level and replaces it with the level browsed to\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(RemoveInvalidReference, \"Remove Selected Level\", \"Removes the reference to the missing level from the map\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_MakeLevelCurrent, \"Make Current\", \"Make this Level the Current Level\", EUserInterfaceActionType::Button, FInputChord( EKeys::Enter ))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_FindInContentBrowser, \"Find in Content Browser\", \"Find the selected levels in the Content Browser\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_LoadLevel, \"Load\", \"Load selected level into world\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_UnloadLevel, \"Unload\", \"Unload selected level from world\", EUserInterfaceActionType::Button, FInputChord(EKeys::Platform_Delete))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_SaveSelectedLevels, \"Save\", \"Saves selected levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_SaveSelectedLevelAs, \"Save As...\", \"Save the selected level as...\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_MigrateSelectedLevels, \"Migrate...\", \"Copies the selected levels and all their dependencies to a different game\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_MergeSelectedLevels, \"Merge...\", \"Merges the selected levels into a new level, removing the original levels from the persistent\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_CreateNewLevel, \"Create New...\", \"Creates a new level, or choose a level template to start from.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_AddExistingLevel, \"Add Existing...\", \"Adds an existing level\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_AddSelectedActorsToNewLevel, \"Create New with Selected Actors...\", \"Adds the actors currently selected in the active viewport to a new Level\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_RemoveSelectedLevels, \"Remove Selected\", \"Removes selected levels from the base streaming level\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(MoveWorldOrigin, \"Move World Origin to Level Position\", \"Moves world origin to level position\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(ResetWorldOrigin, \"Reset World Origin\", \"Moves world origin to zero\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(ResetLevelOrigin, \"Reset Level Position\", \"Moves level to zero\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SelectAllLevels, \"Select All Levels\", \"Selects all levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(DeselectAllLevels, \"De-select All Levels\", \"De-selects all levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(InvertLevelSelection, \"Invert Level Selection\", \"Inverts level selection\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SCCCheckOut, \"Check Out\", \"Checks out the selected asset from revision control.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SCCCheckIn, \"Check In\", \"Checks in the selected asset to revision control.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SCCOpenForAdd, \"Mark For Add\", \"Adds the selected asset to revision control.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SCCHistory, \"History\", \"Displays the history of the selected asset in revision control.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SCCRefresh, \"Refresh\", \"Updates the revision control status of the asset.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SCCDiffAgainstDepot, \"Diff Against Depot\", \"Look at differences between your version of the asset and that in revision control.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SCCConnect, \"Connect To Revision Control\", \"Connect to a revision control system for tracking changes to your content and levels.\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SetAddStreamingMethod_Blueprint, \"Set Blueprint Streaming Method\", \"Sets the streaming method for new or added levels to Blueprint streaming\", EUserInterfaceActionType::RadioButton, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SetAddStreamingMethod_AlwaysLoaded, \"Set Streaming to Always Loaded\", \"Sets the streaming method new or added selected levels to be always loaded\", EUserInterfaceActionType::RadioButton, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SetStreamingMethod_Blueprint, \"Change Blueprint Streaming Method\", \"Changes the streaming method for the selected levels to Blueprint streaming\", EUserInterfaceActionType::Check, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SetStreamingMethod_AlwaysLoaded, \"Change Streaming to Always Loaded\", \"Changes the streaming method for the selected levels to be always loaded\", EUserInterfaceActionType::Check, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SetLightingScenario_Enabled, \"Make level a Lighting Scenario\", \"Changes the level to be a Lighting Scenario. Lighting is built separately for each Lighting Scenario, with all other Scenarios hidden.\", EUserInterfaceActionType::Check, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SetLightingScenario_Disabled, \"Make level not a Lighting Scenario\", \"Changes the level to not be a Lighting Scenario\", EUserInterfaceActionType::Check, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(AssignLevelToLayer, \"Assign to layer\", \"Assign selected levels to current layer\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(AddsActors, \"Select Actors\", \"Adds the Actors in the selected Levels from the viewport's existing selection\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(RemovesActors, \"Deselect Actors\", \"Removes the Actors in the selected Levels from the viewport's existing selection\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(ConvertLevelToExternalActors, \"Convert Level to External Actors\", \"Enable selected levels to use external actors and convert their actors to external packaging\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(ConvertLevelToInternalActors, \"Convert Level to Internal Actors\", \"Disable selected levels to use external actors and convert their actors to internal packaging\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(MoveActorsToSelected, \"Move Selected Actors to Level\", \"Moves the selected actors to this level\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(MoveFoliageToSelected, \"Move Selected Foliage to Level\", \"Moves the selected foliage instances to this level. Keeps cross-level references to original bases\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(SelectStreamingVolumes, \"Select Streaming Volumes\", \"Selects the streaming volumes associated with the selected levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInEditorSelectedLevels, \"Show Selected\", \"Toggles selected levels to a visible state in the viewports for editor worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_HideInEditorSelectedLevels, \"Hide Selected\", \"Toggles selected levels to an invisible state in the viewports for editor worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInEditorOnlySelectedLevels, \"Show Only Selected\", \"Toggles the selected levels to a visible state for editor worlds; toggles all other levels to an invisible state\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInEditorAllButSelectedLevels, \"Show All But Selected\", \"Toggles the selected levels to an invisible state for editor worlds; toggles all other levels to a visible state\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInEditorAllLevels, \"Show All\", \"Toggles all levels to a visible state in the viewports for editor worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_HideInEditorAllLevels, \"Hide All\", \"Hides all levels to an invisible state in the viewports for editor worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInGameSelectedLevels, \"Show Selected\", \"Toggles selected levels to a visible state in the viewports for game worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_HideInGameSelectedLevels, \"Hide Selected\", \"Toggles selected levels to an invisible state in the viewports for game worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInGameOnlySelectedLevels, \"Show Only Selected\", \"Toggles the selected levels to a visible state for game worlds; toggles all other levels to an invisible state\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInGameAllButSelectedLevels, \"Show All But Selected\", \"Toggles the selected levels to an invisible state for game worlds; toggles all other levels to a visible state\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_ShowInGameAllLevels, \"Show All\", \"Toggles all levels to a visible state in the viewports for game worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_HideInGameAllLevels, \"Hide All\", \"Hides all levels to an invisible state in the viewports for game worlds\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_LockSelectedLevels, \"Lock Selected\", \"Locks selected levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_UnlockSelectedLevels, \"Unlock Selected\", \"Unlocks selected levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_LockOnlySelectedLevels, \"Lock Only Selected\", \"Toggles the selected levels to a locked state; toggles all other levels to an unlocked state\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_LockAllButSelectedLevels, \"Lock All But Selected\", \"Toggles the selected levels to an unlocked state; toggles all other levels to a locked state\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_LockAllLevels, \"Lock All\", \"Locks all levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_UnlockAllLevels, \"Unlock All\", \"Unlocks all levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_LockReadOnlyLevels, \"Lock Read-Only Levels\", \"Locks all read-only levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(World_UnlockReadOnlyLevels, \"Unlock Read-Only Levels\", \"Unlocks all read-only levels\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(FitToSelection, \"Fit to Selection\", \"Fits view to selected levels\", EUserInterfaceActionType::Button, FInputChord(EKeys::F))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(ExpandSelectedItems, \"Expand Selected\", \"Expands all children of a selected items\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(ClearParentLink, \"Clear Parent Link\", \"Clears parent link for selected items\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(MoveLevelLeft, \"Move Level Left\", \"Moves level to the left by 1 unit\", EUserInterfaceActionType::Button, FInputChord(EKeys::Left))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(MoveLevelRight, \"Move Level Right\", \"Moves level to the right by 1 unit\", EUserInterfaceActionType::Button, FInputChord(EKeys::Right))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(MoveLevelUp, \"Move Level Up\", \"Moves level up by 1 unit\", EUserInterfaceActionType::Button, FInputChord(EKeys::Up))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(MoveLevelDown, \"Move Level Down\", \"Moves level down by 1 unit\", EUserInterfaceActionType::Button, FInputChord(EKeys::Down))"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(ImportTiledLandscape, \"Import Tiled Landscape...\", \"Imports landscape from a tiled heightmap files (<name>X<n>_Y<n>.png)\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(AddLandscapeLevelXNegative, \"-X\", \"Add a new adjacent level with landscape proxy\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(AddLandscapeLevelXPositive, \"+X\", \"Add a new adjacent level with landscape proxy\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(AddLandscapeLevelYNegative, \"-Y\", \"Add a new adjacent level with landscape proxy\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(AddLandscapeLevelYPositive, \"+Y\", \"Add a new adjacent level with landscape proxy\", EUserInterfaceActionType::Button, FInputChord())"
  },
  {
    "label": "UI_COMMAND()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UI_COMMAND(LockTilesLocation, \"Lock tiles location\", \"When enabled all tiles location will be locked, content inside tiles can still be edited\", EUserInterfaceActionType::ToggleButton, FInputChord())"
  }
]