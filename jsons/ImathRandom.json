[
  {
    "label": "Rand32",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Rand32"
  },
  {
    "label": "Rand48",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Rand48"
  },
  {
    "label": "Vec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Vec"
  },
  {
    "label": "Rand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Rand"
  },
  {
    "label": "Rand32()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMATHRANDOM_H # define INCLUDED_IMATHRANDOM_H # include \" ImathExport . h \" # include \" ImathNamespace . h \" # include<math . h> # include<stdlib . h> IMATH_INTERNAL_NAMESPACE_HEADER_ENTER class Rand32 { public : IMATH_HOSTDEVICE)",
    "insertText": "Rand32(unsigned long int seed = 0)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE void)",
    "insertText": "init(unsigned long int seed)"
  },
  {
    "label": "nextb()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE bool)",
    "insertText": "nextb()"
  },
  {
    "label": "nexti()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE unsigned long int)",
    "insertText": "nexti()"
  },
  {
    "label": "nextf()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_EXPORT float)",
    "insertText": "nextf()"
  },
  {
    "label": "nextf()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE float)",
    "insertText": "nextf(float rangeMin, float rangeMax)"
  },
  {
    "label": "next()",
    "kind": "Method",
    "detail": "Function (private : IMATH_HOSTDEVICE void)",
    "insertText": "next()"
  },
  {
    "label": "Rand48()",
    "kind": "Method",
    "detail": "Function (unsigned long int _state ; } ; class Rand48 { public : IMATH_HOSTDEVICE)",
    "insertText": "Rand48(unsigned long int seed = 0)"
  },
  {
    "label": "nextf()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE double)",
    "insertText": "nextf(double rangeMin, double rangeMax)"
  },
  {
    "label": "solidSphereRand()",
    "kind": "Method",
    "detail": "Function (private : unsigned short int _state [ 3 ] ; } ; template<class Vec,class Rand> IMATH_HOSTDEVICE Vec)",
    "insertText": "solidSphereRand(Rand& rand)"
  },
  {
    "label": "hollowSphereRand()",
    "kind": "Method",
    "detail": "Function (template<class Vec,class Rand> IMATH_HOSTDEVICE Vec)",
    "insertText": "hollowSphereRand(Rand& rand)"
  },
  {
    "label": "gaussRand()",
    "kind": "Method",
    "detail": "Function (template<class Rand> IMATH_HOSTDEVICE float)",
    "insertText": "gaussRand(Rand& rand)"
  },
  {
    "label": "gaussSphereRand()",
    "kind": "Method",
    "detail": "Function (template<class Vec,class Rand> IMATH_HOSTDEVICE Vec)",
    "insertText": "gaussSphereRand(Rand& rand)"
  },
  {
    "label": "erand48()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_EXPORT double)",
    "insertText": "erand48(unsigned short state[3])"
  },
  {
    "label": "drand48()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_EXPORT double)",
    "insertText": "drand48()"
  },
  {
    "label": "nrand48()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_EXPORT long int)",
    "insertText": "nrand48(unsigned short state[3])"
  },
  {
    "label": "lrand48()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_EXPORT long int)",
    "insertText": "lrand48()"
  },
  {
    "label": "srand48()",
    "kind": "Method",
    "detail": "Function (IMATH_HOSTDEVICE IMATH_EXPORT void)",
    "insertText": "srand48(long int seed)"
  },
  {
    "label": "_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_state(seed * 0xa5a573a5L)"
  },
  {
    "label": "Rand32()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE)",
    "insertText": "Rand32(unsigned long int seed)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(seed)"
  },
  {
    "label": "seed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "seed(seed * 0xa5a573a5L)"
  },
  {
    "label": "_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_state(unsigned short int) (seed & 0xFFFF)"
  },
  {
    "label": "_state()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_state(unsigned short int) ((seed >> 16) & 0xFFFF)"
  },
  {
    "label": "Rand48()",
    "kind": "Method",
    "detail": "Function (} IMATH_HOSTDEVICE)",
    "insertText": "Rand48(unsigned long int seed)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Vec v ; do {)",
    "insertText": "for(unsigned int i = 0; i < Vec::dimensions(); i++) v[i] = (typename Vec::BaseType) rand.nextf (-1, 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(v.length2() > 1)"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (length = v .)",
    "insertText": "length()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(length > 1 || length == 0)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (float x ; float y ; float length2 ; do { x =)",
    "insertText": "float(rand.nextf (-1, 1))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (length2 = x* x + y* y ; })",
    "insertText": "while(length2 >= 1 || length2 == 0)"
  }
]