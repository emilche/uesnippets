[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / CurveSequence . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Layout / Geometry . h \" # include \" Layout / SlateRect . h \" # include \" Math / Vector2D . h \" # include \" Misc / Attribute . h \" # include \" SNodePanel . h \" # include \" Styling / SlateColor . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" class FActiveTimerHandle ; class FPaintArgs ; class FSlateWindowElementList ; class FWidgetStyle ; class SWidget ; struct FGeometry ; struct FPointerEvent ; struct FSlateBrush ; class SDesignSurface : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDesignSurface ) : _AllowContinousZoomInterpolation(false)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content) SLATE_ATTRIBUTE(bool, AllowContinousZoomInterpolation) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnTouchGesture()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchGesture(const FGeometry& MyGeometry, const FPointerEvent& GestureEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "GraphCoordToPanelCoord()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GraphCoordToPanelCoord(const FVector2D& GraphSpaceCoordinate)"
  },
  {
    "label": "PanelCoordToGraphCoord()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "PanelCoordToGraphCoord(const FVector2D& PanelSpaceCoordinate)"
  },
  {
    "label": "OnPaintBackground()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPaintBackground(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "PaintBackgroundAsLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintBackgroundAsLines(const FSlateBrush* BackgroundImage, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32& DrawLayerId)"
  },
  {
    "label": "ChangeZoomLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeZoomLevel(int32 ZoomLevelDelta, const FVector2D& WidgetSpaceZoomOrigin, bool bOverrideZoomLimiting)"
  },
  {
    "label": "PostChangedZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostChangedZoom()"
  },
  {
    "label": "ScrollToLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ScrollToLocation(const FGeometry& MyGeometry, FVector2D DesiredCenterPosition, const float InDeltaTime)"
  },
  {
    "label": "ZoomToLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ZoomToLocation(const FVector2D& CurrentSizeWithoutZoom, const FVector2D& DesiredSize, bool bDoneScrolling)"
  },
  {
    "label": "ZoomToFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToFit(bool bInstantZoom)"
  },
  {
    "label": "GetZoomText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetZoomText()"
  },
  {
    "label": "GetZoomTextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetZoomTextColorAndOpacity()"
  },
  {
    "label": "GetViewOffset()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetViewOffset()"
  },
  {
    "label": "ComputeSensibleBounds()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "ComputeSensibleBounds()"
  },
  {
    "label": "ComputeAreaBounds()",
    "kind": "Method",
    "detail": "Function (protected : FSlateRect)",
    "insertText": "ComputeAreaBounds()"
  },
  {
    "label": "GetGridScaleAmount()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGridScaleAmount()"
  },
  {
    "label": "GetGraphRulePeriod()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGraphRulePeriod()"
  },
  {
    "label": "GetSnapGridSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSnapGridSize()"
  },
  {
    "label": "HandleZoomToFit()",
    "kind": "Method",
    "detail": "Function (protected : FVector2D ViewOffset ; FVector2D GridOrigin ; bool bDrawGridLines ; int32 PreviousZoomLevel ; int32 ZoomLevel ; bool bIsPanning ; bool bIsZooming ; TAttribute<bool> AllowContinousZoomInterpolation ; FCurveSequence ZoomLevelGraphFade ; FCurveSequence ZoomLevelFade ; TUniquePtr<FZoomLevelsContainer> ZoomLevels ; bool bAllowContinousZoomInterpolation ; bool bTeleportInsteadOfScrollingWhenZoomingToFit ; FVector2D ZoomTargetTopLeft ; FVector2D ZoomTargetBottomRight ; FVector2D ZoomToFitPadding ; double TotalMouseDelta ; FVector2D ZoomStartOffset ; FVector2D ViewOffsetStart ; FVector2D MouseDownPositionAbsolute ; float TotalGestureMagnify ; bool bRequireControlToOverZoom ; private : EActiveTimerReturnType)",
    "insertText": "HandleZoomToFit(double InCurrentTime, float InDeltaTime)"
  }
]