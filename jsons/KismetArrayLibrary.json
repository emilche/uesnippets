[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UKismetArrayLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UKismetArrayLibrary"
  },
  {
    "label": "type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "type"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "Array_Add()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Array_Add(const TArray<int32>& TargetArray, const int32& NewItem)"
  },
  {
    "label": "Array_AddUnique()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Array_AddUnique(const TArray<int32>& TargetArray, const int32& NewItem)"
  },
  {
    "label": "Array_Shuffle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Shuffle(const TArray<int32>& TargetArray)"
  },
  {
    "label": "Array_Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Array_Identical(const TArray<int32>& ArrayA, const TArray<int32>& ArrayB)"
  },
  {
    "label": "Array_Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Append(const TArray<int32>& TargetArray, const TArray<int32>& SourceArray)"
  },
  {
    "label": "Array_Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Insert(const TArray<int32>& TargetArray, const int32& NewItem, int32 Index)"
  },
  {
    "label": "Array_Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Remove(const TArray<int32>& TargetArray, int32 IndexToRemove)"
  },
  {
    "label": "Array_RemoveItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Array_RemoveItem(const TArray<int32>& TargetArray, const int32 &Item)"
  },
  {
    "label": "Array_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Clear(const TArray<int32>& TargetArray)"
  },
  {
    "label": "Array_Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Resize(const TArray<int32>& TargetArray, int32 Size)"
  },
  {
    "label": "Array_Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Reverse(const TArray<int32>& TargetArray)"
  },
  {
    "label": "Array_Length()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Array_Length(const TArray<int32>& TargetArray)"
  },
  {
    "label": "Array_IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Array_IsEmpty(const TArray<int32>& TargetArray)"
  },
  {
    "label": "Array_IsNotEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Array_IsNotEmpty(const TArray<int32>& TargetArray)"
  },
  {
    "label": "Array_LastIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Array_LastIndex(const TArray<int32>& TargetArray)"
  },
  {
    "label": "Array_Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Get(const TArray<int32>& TargetArray, int32 Index, int32& Item)"
  },
  {
    "label": "Array_Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Set(const TArray<int32>& TargetArray, int32 Index, const int32& Item, bool bSizeToFit)"
  },
  {
    "label": "Array_Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Swap(const TArray<int32>& TargetArray, int32 FirstIndex, int32 SecondIndex)"
  },
  {
    "label": "Array_Find()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Array_Find(const TArray<int32>& TargetArray, const int32& ItemToFind)"
  },
  {
    "label": "Array_Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Array_Contains(const TArray<int32>& TargetArray, const int32& ItemToFind)"
  },
  {
    "label": "FilterArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterArray(const TArray<AActor*>& TargetArray, TSubclassOf<class AActor> FilterClass, TArray<AActor*>& FilteredArray)"
  },
  {
    "label": "SetArrayPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrayPropertyByName(UObject* Object, FName PropertyName, const TArray<int32>& Value)"
  },
  {
    "label": "Array_IsValidIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Array_IsValidIndex(const TArray<int32>& TargetArray, int32 IndexToTest)"
  },
  {
    "label": "Array_Random()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Array_Random(const TArray<int32>& TargetArray, int32& OutItem, int32& OutIndex)"
  },
  {
    "label": "GenericArray_Add()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericArray_Add(void* TargetArray, const FArrayProperty* ArrayProp, const void* NewItem)"
  },
  {
    "label": "GenericArray_AddUnique()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericArray_AddUnique(void* TargetArray, const FArrayProperty* ArrayProp, const void* NewItem)"
  },
  {
    "label": "GenericArray_Shuffle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Shuffle(void* TargetArray, const FArrayProperty* ArrayProp)"
  },
  {
    "label": "GenericArray_ShuffleFromStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_ShuffleFromStream(void* TargetArray, const FArrayProperty* ArrayProp, FRandomStream* RandomStream)"
  },
  {
    "label": "GenericArray_Identical()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericArray_Identical(void* ArrayA, const FArrayProperty* ArrayAProp, void* ArrayB, const FArrayProperty* ArrayBProperty)"
  },
  {
    "label": "GenericArray_Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Append(void* TargetArray, const FArrayProperty* TargetArrayProp, void* SourceArray, const FArrayProperty* SourceArrayProperty)"
  },
  {
    "label": "GenericArray_Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Insert(void* TargetArray, const FArrayProperty* ArrayProp, const void* NewItem, int32 Index)"
  },
  {
    "label": "GenericArray_Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Remove(void* TargetArray, const FArrayProperty* ArrayProp, int32 IndexToRemove)"
  },
  {
    "label": "GenericArray_RemoveItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericArray_RemoveItem(void* TargetArray, const FArrayProperty* ArrayProp, const void* Item)"
  },
  {
    "label": "GenericArray_Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Clear(void* TargetArray, const FArrayProperty* ArrayProp)"
  },
  {
    "label": "GenericArray_Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Resize(void* TargetArray, const FArrayProperty* ArrayProp, int32 Size)"
  },
  {
    "label": "GenericArray_Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Reverse(void* TargetArray, const FArrayProperty* ArrayProp)"
  },
  {
    "label": "GenericArray_Length()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericArray_Length(const void* TargetArray, const FArrayProperty* ArrayProp)"
  },
  {
    "label": "GenericArray_IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericArray_IsEmpty(const void* TargetArray, const FArrayProperty* ArrayProp)"
  },
  {
    "label": "GenericArray_IsNotEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericArray_IsNotEmpty(const void* TargetArray, const FArrayProperty* ArrayProp)"
  },
  {
    "label": "GenericArray_LastIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericArray_LastIndex(const void* TargetArray, const FArrayProperty* ArrayProp)"
  },
  {
    "label": "GenericArray_Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Get(void* TargetArray, const FArrayProperty* ArrayProp, int32 Index, void* Item)"
  },
  {
    "label": "GenericArray_Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Set(void* TargetArray, const FArrayProperty* ArrayProp, int32 Index, const void* NewItem, bool bSizeToFit)"
  },
  {
    "label": "GenericArray_Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Swap(const void* TargetArray, const FArrayProperty* ArrayProp, int32 First, int32 Second)"
  },
  {
    "label": "GenericArray_Find()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenericArray_Find(const void* TargetArray, const FArrayProperty* ArrayProperty, const void* ItemToFind)"
  },
  {
    "label": "GenericArray_SetArrayPropertyByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_SetArrayPropertyByName(UObject* OwnerObject, FName ArrayPropertyName, const void* SrcArrayAddr)"
  },
  {
    "label": "GenericArray_Random()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_Random(void* TargetArray, const FArrayProperty* ArrayProp, void* OutItem, int32* OutIndex)"
  },
  {
    "label": "GenericArray_RandomFromStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_RandomFromStream(void* TargetArray, const FArrayProperty* ArrayProp, FRandomStream* RandomStream, void* OutItem, int32* OutIndex)"
  },
  {
    "label": "GenericArray_IsValidIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenericArray_IsValidIndex(const void* TargetArray, const FArrayProperty* ArrayProp, int32 IndexToTest)"
  },
  {
    "label": "GenericArray_HandleBool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenericArray_HandleBool(const FProperty* Property, void* ItemPtr)"
  }
]