[
  {
    "label": "IAccessible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IAccessible"
  },
  {
    "label": "OsrAccessibilityHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsrAccessibilityHelper"
  },
  {
    "label": "OsrAXNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OsrAXNode"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_OSR_ACCESSIBILITY_NODE_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_OSR_ACCESSIBILITY_NODE_H_ # pragma once # include<vector> # include \" include / cef_browser . h \" # if)",
    "insertText": "defined(OS_MAC)"
  },
  {
    "label": "__has_feature()",
    "kind": "Method",
    "detail": "Function (# if __OBJC__ # if)",
    "insertText": "__has_feature(objc_arc) #define CAST_CEF_NATIVE_ACCESSIBLE_TO_NSOBJECT(accessible) \\ (__bridge NSObject*)accessible #define CAST_NSOBJECT_TO_CEF_NATIVE_ACCESSIBLE(object) \\ (__bridge CefNativeAccessible*)object #else #define CAST_CEF_NATIVE_ACCESSIBLE_TO_NSOBJECT(accessible) (NSObject*)accessible #define CAST_NSOBJECT_TO_CEF_NATIVE_ACCESSIBLE(object) \\ (__bridge CefNativeAccessible*)object #endif #endif #elif defined(OS_WIN)"
  },
  {
    "label": "CreateNode()",
    "kind": "Method",
    "detail": "Function (typedef IAccessible CefNativeAccessible ; # else # error \" Unsupported platform \" # endif namespace client { class OsrAccessibilityHelper ; class OsrAXNode { public : OsrAXNode*)",
    "insertText": "CreateNode(const CefString& treeId, int nodeId, CefRefPtr<CefDictionaryValue> value, OsrAccessibilityHelper* helper)"
  },
  {
    "label": "UpdateValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateValue(CefRefPtr<CefDictionaryValue> value)"
  },
  {
    "label": "UpdateLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateLocation(CefRefPtr<CefDictionaryValue> value)"
  },
  {
    "label": "NotifyAccessibilityEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyAccessibilityEvent(std::string event_type)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "GetNativeAccessibleObject()",
    "kind": "Method",
    "detail": "Function (CefNativeAccessible*)",
    "insertText": "GetNativeAccessibleObject(OsrAXNode* parent)"
  },
  {
    "label": "GetParentAccessibleObject()",
    "kind": "Method",
    "detail": "Function (CefNativeAccessible*)",
    "insertText": "GetParentAccessibleObject()"
  },
  {
    "label": "ChildAtIndex()",
    "kind": "Method",
    "detail": "Function (OsrAXNode*)",
    "insertText": "ChildAtIndex(int index)"
  },
  {
    "label": "AxRole()",
    "kind": "Method",
    "detail": "Function (const CefString&)",
    "insertText": "AxRole()"
  },
  {
    "label": "GetWindowHandle()",
    "kind": "Method",
    "detail": "Function (CefWindowHandle)",
    "insertText": "GetWindowHandle()"
  },
  {
    "label": "GetBrowser()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "GetBrowser()"
  },
  {
    "label": "SetParent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParent(OsrAXNode* parent)"
  },
  {
    "label": "OsrAXNode()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "OsrAXNode(const CefString& treeId, int nodeId, CefRefPtr<CefDictionaryValue> value, OsrAccessibilityHelper* helper)"
  }
]