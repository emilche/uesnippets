[
  {
    "label": "FSphereGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSphereGenerator"
  },
  {
    "label": "SphericalToCartesian()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MeshShapeGenerator . h \" # include \" OrientedBoxTypes . h \" # include \" Util / IndexUtil . h \" namespace UE { namespace Geometry { class FSphereGenerator : public FMeshShapeGenerator { public : double Radius = 1 ; int NumPhi = 3 ; int NumTheta = 3 ; bool bPolygroupPerQuad = false ; private : FVector3d)",
    "insertText": "SphericalToCartesian(double r, double theta, double phi)"
  },
  {
    "label": "GenerateVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateVertices()"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (auto SetVertex = [)",
    "insertText": "this(int32 VtxIdx, FVector3d Pos, FVector3f Normal)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Vertices [ VtxIdx ] = Pos ; Normals [ VtxIdx ] = Normal ; NormalParentVertex [ VtxIdx ] = VtxIdx ; } ; { const double Dphi = FMathd::Pi /)",
    "insertText": "double(NumPhi - 1)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const double Dtheta = FMathd::TwoPi /)",
    "insertText": "double(NumTheta)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 p,t ; double Phi,Theta ; int32 VtxIdx = 0 ;)",
    "insertText": "for(p = 1, Phi = Dphi; p < NumPhi - 1; ++p, Phi += Dphi)"
  },
  {
    "label": "SphericalToCartesian()",
    "kind": "Method",
    "detail": "Function (FVector3d Normal =)",
    "insertText": "SphericalToCartesian(1., Theta, Phi)"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertex(VtxIdx, Normal * Radius, FVector3f(Normal))"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "SetVertex(VtxIdx++, FVector3d::UnitZ() * Radius, FVector3f::UnitZ())"
  },
  {
    "label": "SetVertex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVertex(VtxIdx++, -FVector3d::UnitZ() * Radius, -FVector3f::UnitZ())"
  },
  {
    "label": "GenerateUVVertices()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "GenerateUVVertices()"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float DUVphi = 1 . f /)",
    "insertText": "float(NumPhi - 1)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (const float DUVtheta = - 1 . f /)",
    "insertText": "float(NumTheta)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 UVIdx = 0 ; int32 p,t ; float UVPhi,UVTheta ;)",
    "insertText": "for(p = 1, UVPhi = DUVphi; p < NumPhi - 1; ++p, UVPhi += DUVphi)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ] =)",
    "insertText": "FVector2f(UVTheta, UVPhi)"
  },
  {
    "label": "UVIdx()",
    "kind": "Method",
    "detail": "Function (UVParentVertex [)",
    "insertText": "UVIdx(p - 1)"
  },
  {
    "label": "NorthPoleVtxIdx()",
    "kind": "Method",
    "detail": "Function (+ + UVIdx ; } int32)",
    "insertText": "NorthPoleVtxIdx(NumPhi - 2)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ] =)",
    "insertText": "FVector2f(UVTheta, 0.0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (UVParentVertex [ UVIdx ] = NorthPoleVtxIdx ; } int32 SouthPoleVtxIdx = NorthPoleVtxIdx + 1 ;)",
    "insertText": "for(t = 0, UVTheta = 1 + DUVtheta; t < NumTheta; ++t, ++UVIdx, UVTheta += DUVtheta)"
  },
  {
    "label": "FVector2f()",
    "kind": "Method",
    "detail": "Function (UVs [ UVIdx ] =)",
    "insertText": "FVector2f(UVTheta, 1.0)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (UVParentVertex [ UVIdx ] = SouthPoleVtxIdx ; } } using CornerIndices = FVector3i ; void)",
    "insertText": "OutputTriangle(int TriIdx, int PolyIdx, CornerIndices Corners, CornerIndices UVCorners)"
  },
  {
    "label": "SetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangle(TriIdx, Corners.X, Corners.Y, Corners.Z)"
  },
  {
    "label": "SetTrianglePolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTrianglePolygon(TriIdx, PolyIdx)"
  },
  {
    "label": "SetTriangleUVs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVs(TriIdx, UVCorners.X, UVCorners.Y, UVCorners.Z)"
  },
  {
    "label": "SetTriangleNormals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleNormals(TriIdx, Corners.X, Corners.Y, Corners.Z)"
  },
  {
    "label": "OutputEquatorialTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OutputEquatorialTriangles()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 TriIdx = 0,PolyIdx = 0 ; int32 Corners [ 4 ] = { 0,1,NumTheta + 1,NumTheta } ; int32 UVCorners [ 4 ] = { 0,1,NumTheta + 2,NumTheta + 1 } ;)",
    "insertText": "for(int32 p = 1; p < NumPhi - 2; ++p)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[0], Corners[1], Corners[2]}, {UVCorners[0], UVCorners[1], UVCorners[2]})"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[2], Corners[3], Corners[0]}, {UVCorners[2], UVCorners[3], UVCorners[0]})"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } })",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[0], Corners[1] - NumTheta, Corners[2] - NumTheta}, {UVCorners[0] , UVCorners[1], UVCorners[2] })"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {Corners[2] - NumTheta, Corners[3], Corners[0]}, {UVCorners[2], UVCorners[3], UVCorners[0]})"
  },
  {
    "label": "OutputPolarTriangles()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } } } void)",
    "insertText": "OutputPolarTriangles()"
  },
  {
    "label": "NumEquatorialVtx()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumEquatorialVtx(NumPhi - 2)"
  },
  {
    "label": "NumEquatorialUVVtx()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumEquatorialUVVtx(NumPhi - 2) * (NumTheta + 1)"
  },
  {
    "label": "NumTheta()",
    "kind": "Method",
    "detail": "Function (const int32 NorthPoleVtxIdx = NumEquatorialVtx ; const int32 SouthPoleVtxIdx = NumEquatorialVtx + 1 ; int32 PolyIdx =)",
    "insertText": "NumTheta(NumPhi - 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 TriIdx = PolyIdx* 2 ;)",
    "insertText": "if(bPolygroupPerQuad == false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (PolyIdx = 0 ; })",
    "insertText": "for(int32 t = 0; t < NumTheta; ++t)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {t, NorthPoleVtxIdx, (t + 1) % NumTheta}, {t, NumEquatorialUVVtx + t, t + 1})"
  },
  {
    "label": "NumEquatorialUVVtx()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } } const int32 Offset = NumEquatorialVtx - NumTheta ; const int32 OffsetUV =)",
    "insertText": "NumEquatorialUVVtx(NumTheta + 1)"
  },
  {
    "label": "OutputTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputTriangle(TriIdx++, PolyIdx, {t + Offset, ((t + 1) % NumTheta) + Offset, SouthPoleVtxIdx}, {t + OffsetUV, t + 1 + OffsetUV , NumEquatorialUVVtx + NumTheta + t})"
  },
  {
    "label": "Generate()",
    "kind": "Method",
    "detail": "Function (PolyIdx + + ; } } } public : FMeshShapeGenerator&)",
    "insertText": "Generate()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumPhi =)",
    "insertText": "Max(NumPhi, 3)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumTheta =)",
    "insertText": "Max(NumTheta, 3)"
  },
  {
    "label": "NumVertices()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumVertices(NumPhi - 2)"
  },
  {
    "label": "NumUVs()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumUVs(NumPhi - 2) * (NumTheta + 1) + (2 * NumTheta)"
  },
  {
    "label": "NumTris()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumTris(NumPhi - 2)"
  },
  {
    "label": "SetBufferSizes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferSizes(NumVertices, NumTris, NumUVs, NumVertices)"
  }
]