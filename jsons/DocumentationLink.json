[
  {
    "label": "FDocumentationLink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDocumentationLink"
  },
  {
    "label": "GetUrlRoot()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IDocumentation . h \" # include \" Misc / Paths . h \" # include \" HAL / FileManager . h \" # include \" Internationalization / Culture . h \" # include \" UnrealEdMisc . h \" class FDocumentationLink { public : FString)",
    "insertText": "GetUrlRoot(const FString& BaseUrlId = FString())"
  },
  {
    "label": "GetHomeUrl()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetHomeUrl()"
  },
  {
    "label": "GetHomeUrl()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetHomeUrl(const FCultureRef& Culture)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FString Url ;)",
    "insertText": "Get().GetURL( TEXT(\"DocumentationURL\"), Url, true)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().ReplaceDocumentationURLWildcards(Url, Culture)"
  },
  {
    "label": "ToUrl()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToUrl(const FString& Link, const FCultureRef& Culture, FDocumentationSourceInfo const& Source, const FString& BaseUrlId = FString())"
  },
  {
    "label": "GetUrlRoot()",
    "kind": "Method",
    "detail": "Function (FString UrlRoot =)",
    "insertText": "GetUrlRoot(BaseUrlId)"
  },
  {
    "label": "SplitLink()",
    "kind": "Method",
    "detail": "Function (FString RootPath ; FString QueryString ; FString Anchor ;)",
    "insertText": "SplitLink(UrlRoot, RootPath, QueryString, Anchor)"
  },
  {
    "label": "SplitLink()",
    "kind": "Method",
    "detail": "Function (FString LinkPath ;)",
    "insertText": "SplitLink(Link, LinkPath, QueryString, Anchor)"
  },
  {
    "label": "TrimChar()",
    "kind": "Method",
    "detail": "Function (const FString TrimmedPartialPath = LinkPath .)",
    "insertText": "TrimChar('/')"
  },
  {
    "label": "AddSourceInfoToQueryString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSourceInfoToQueryString(QueryString, Source)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FString AssembledUrl = RootPath + QueryString + Anchor ;)",
    "insertText": "Get().ReplaceDocumentationURLWildcards(AssembledUrl, Culture, TrimmedPartialPath)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FInternationalization& I18N =)",
    "insertText": "Get()"
  },
  {
    "label": "ToFilePath()",
    "kind": "Method",
    "detail": "Function (FString FilePath =)",
    "insertText": "ToFilePath(Link, I18N.GetCurrentCulture())"
  },
  {
    "label": "GetCulture()",
    "kind": "Method",
    "detail": "Function (const FCulturePtr FallbackCulture = I18N .)",
    "insertText": "GetCulture(TEXT(\"en\"))"
  },
  {
    "label": "ToFilePath()",
    "kind": "Method",
    "detail": "Function (const FString FallbackFilePath =)",
    "insertText": "ToFilePath(Link, FallbackCulture.ToSharedRef())"
  },
  {
    "label": "ToFilePath()",
    "kind": "Method",
    "detail": "Function (FilePath = FallbackFilePath ; } } } return FilePath ; } FString)",
    "insertText": "ToFilePath(const FString& Link, const FCultureRef& Culture)"
  },
  {
    "label": "SplitLink()",
    "kind": "Method",
    "detail": "Function (FString Path ; FString Anchor ; FString QueryString ;)",
    "insertText": "SplitLink(Link, Path, QueryString, Anchor)"
  },
  {
    "label": "FromInt()",
    "kind": "Method",
    "detail": "Function (FString Version =)",
    "insertText": "FromInt(FEngineVersion::Current().GetMajor()) + TEXT(\".\") + FString::FromInt(FEngineVersion::Current().GetMinor())"
  },
  {
    "label": "Printf()",
    "kind": "Method",
    "detail": "Function (const FString PartialPath =)",
    "insertText": "Printf(TEXT(\"%s/%s%s/index.html\"), *Version, *(Culture->GetName()), *Path)"
  },
  {
    "label": "ToFileUrl()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToFileUrl(const FString& Link, FDocumentationSourceInfo const& SourceInfo)"
  },
  {
    "label": "GetCurrentCulture()",
    "kind": "Method",
    "detail": "Function (FCultureRef Culture = I18N .)",
    "insertText": "GetCurrentCulture()"
  },
  {
    "label": "ToFilePath()",
    "kind": "Method",
    "detail": "Function (FString FilePath =)",
    "insertText": "ToFilePath(Link, Culture)"
  },
  {
    "label": "ToSharedRef()",
    "kind": "Method",
    "detail": "Function (Culture = FallbackCulture .)",
    "insertText": "ToSharedRef()"
  },
  {
    "label": "ToFileUrl()",
    "kind": "Method",
    "detail": "Function (} } } return)",
    "insertText": "ToFileUrl(Link, Culture, SourceInfo)"
  },
  {
    "label": "ToFileUrl()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToFileUrl(const FString& Link, const FCultureRef& Culture, FDocumentationSourceInfo const& SourceInfo)"
  },
  {
    "label": "AddSourceInfoToQueryString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSourceInfoToQueryString(QueryString, SourceInfo)"
  }
]