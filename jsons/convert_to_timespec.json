[
  {
    "label": "_TimeSpec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_TimeSpec"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___CHRONO_CONVERT_TO_TIMESPEC_H # define _LIBCPP___CHRONO_CONVERT_TO_TIMESPEC_H # include<__chrono / duration . h> # include<__config> # include<limits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif _LIBCPP_PUSH_MACROS #include <__undef_macros> _LIBCPP_BEGIN_NAMESPACE_STD template <class _TimeSpec> _LIBCPP_HIDE_FROM_ABI inline _TimeSpec __convert_to_timespec(const chrono::nanoseconds& __ns)"
  },
  {
    "label": "seconds()",
    "kind": "Method",
    "detail": "Function (using namespace chrono ; seconds __s = duration_cast<)",
    "insertText": "seconds(__ns)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (_TimeSpec __ts ; typedef)",
    "insertText": "decltype(__ts.tv_sec)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (const __ts_sec __ts_sec_max = numeric_limits<__ts_sec)",
    "insertText": "max()"
  },
  {
    "label": "__ts_sec()",
    "kind": "Method",
    "detail": "Function (__ts . tv_sec = static_cast<)",
    "insertText": "__ts_sec(__s.count())"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (__ts . tv_nsec = static_cast<)",
    "insertText": "decltype(__ts.tv_nsec)>((__ns - __s).count())"
  }
]