[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "SharedMemoryFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedMemoryFactory"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_SHARED_MEMORY_H_ # define MODULES_DESKTOP_CAPTURE_SHARED_MEMORY_H_ # include<stddef . h> # if)",
    "insertText": "defined(WEBRTC_WIN)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const Handle kInvalidHandle ; # else typedef int Handle ; const Handle kInvalidHandle ; # endif void*)",
    "insertText": "data()"
  },
  {
    "label": "SharedMemory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SharedMemory(const SharedMemory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SharedMemory&)",
    "insertText": "operator(const SharedMemory&)"
  },
  {
    "label": "SharedMemory()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "SharedMemory(void* data, size_t size, Handle handle, int id)"
  },
  {
    "label": "SharedMemoryFactory()",
    "kind": "Method",
    "detail": "Function (void* const data_ ; const size_t size_ ; const Handle handle_ ; const int id_ ; } ; class SharedMemoryFactory { public :)",
    "insertText": "SharedMemoryFactory()"
  },
  {
    "label": "SharedMemoryFactory()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SharedMemoryFactory(const SharedMemoryFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SharedMemoryFactory&)",
    "insertText": "operator(const SharedMemoryFactory&)"
  },
  {
    "label": "CreateSharedMemory()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SharedMemory>)",
    "insertText": "CreateSharedMemory(size_t size)"
  }
]