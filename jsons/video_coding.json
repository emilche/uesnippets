[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "EncodedImageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncodedImageCallback"
  },
  {
    "label": "VideoDecoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoDecoder"
  },
  {
    "label": "VideoEncoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoEncoder"
  },
  {
    "label": "CodecSpecificInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSpecificInfo"
  },
  {
    "label": "VideoCodingModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoCodingModule"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_INCLUDE_VIDEO_CODING_H_ # define MODULES_VIDEO_CODING_INCLUDE_VIDEO_CODING_H_ # include \" api / field_trials_view . h \" # include \" api / video / video_frame . h \" # include \" api / video_codecs / video_decoder . h \" # include \" modules / rtp_rtcp / source / rtp_video_header . h \" # include \" modules / video_coding / include / video_coding_defines . h \" namespace webrtc { class Clock ; class EncodedImageCallback ; class VideoDecoder ; class VideoEncoder ; struct CodecSpecificInfo ; class VideoCodingModule { public : VideoCodingModule*)",
    "insertText": "Create(Clock* clock, const FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "VideoCodingModule()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoCodingModule()"
  },
  {
    "label": "RegisterReceiveCodec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterReceiveCodec(uint8_t payload_type, const VideoDecoder::Settings& settings)"
  },
  {
    "label": "RegisterExternalDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalDecoder(VideoDecoder* externalDecoder, uint8_t payloadType)"
  },
  {
    "label": "RegisterReceiveCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterReceiveCallback(VCMReceiveCallback* receiveCallback)"
  },
  {
    "label": "RegisterFrameTypeCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterFrameTypeCallback(VCMFrameTypeCallback* frameTypeCallback)"
  },
  {
    "label": "RegisterPacketRequestCallback()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterPacketRequestCallback(VCMPacketRequestCallback* callback)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "Decode(uint16_t maxWaitTimeMs = 200)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "IncomingPacket(const uint8_t* incomingPayload, size_t payloadLength, const RTPHeader& rtp_header, const RTPVideoHeader& video_header)"
  },
  {
    "label": "SetNackSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNackSettings(size_t max_nack_list_size, int max_packet_age_to_nack, int max_incomplete_time_ms)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Process()"
  }
]