[
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "FFileStatData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileStatData"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FSoftObjectPath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftObjectPath"
  },
  {
    "label": "FScanPathContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScanPathContext"
  },
  {
    "label": "FPackageName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageName"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "at",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "at"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "from"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FAssetRegistryConsoleCommands",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryConsoleCommands"
  },
  {
    "label": "UAssetRegistryImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetRegistryImpl"
  },
  {
    "label": "FormatErrorAsString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatErrorAsString(FStringView InPath, EErrorCode ErrorCode)"
  },
  {
    "label": "FormatErrorAsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "FormatErrorAsText(FStringView InPath, EErrorCode ErrorCode)"
  },
  {
    "label": "ConvertToLongScriptPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertToLongScriptPackageName(const TCHAR* InShortName)"
  },
  {
    "label": "GetModuleScriptPackageName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetModuleScriptPackageName(FName ModuleName)"
  },
  {
    "label": "GetModuleScriptPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetModuleScriptPackageName(FStringView ModuleName)"
  },
  {
    "label": "TryConvertScriptPackageNameToModuleName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertScriptPackageNameToModuleName(FStringView PackageName, FStringView& OutModuleName)"
  },
  {
    "label": "RegisterShortPackageNamesForUObjectModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterShortPackageNamesForUObjectModules()"
  },
  {
    "label": "TryConvertFilenameToLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertFilenameToLongPackageName(const FString& InFilename, FString& OutPackageName,\n\t\tFString* OutFailureReason = nullptr, const EConvertFlags Flags = EConvertFlags::None)"
  },
  {
    "label": "TryConvertFilenameToLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertFilenameToLongPackageName(FStringView InFilename,\n\t\tFStringBuilderBase& OutPackageName, FStringBuilderBase* OutFailureReason = nullptr,\n\t\tconst EConvertFlags Flags = EConvertFlags::None)"
  },
  {
    "label": "FilenameToLongPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FilenameToLongPackageName(const FString& InFilename)"
  },
  {
    "label": "TryConvertLongPackageNameToFilename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertLongPackageNameToFilename(FStringView InLongPackageName, FString& OutFilename, FStringView InExtension = {})"
  },
  {
    "label": "TryConvertToMountedPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertToMountedPath(FStringView InPath, FString* OutLocalPathNoExtension, FString* OutPackageName, FString* OutObjectName, FString* OutSubObjectName, FString* OutExtension, EFlexNameType* OutFlexNameType = nullptr, EErrorCode* OutFailureReason = nullptr)"
  },
  {
    "label": "GetLongPackagePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLongPackagePath(const FString& InLongPackageName)"
  },
  {
    "label": "GetLongPackageAssetName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLongPackageAssetName(const FString& InLongPackageName)"
  },
  {
    "label": "SplitLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SplitLongPackageName(const FString& InLongPackageName, FString& OutPackageRoot, FString& OutPackagePath, FString& OutPackageName, const bool bStripRootLeadingSlash = false)"
  },
  {
    "label": "SplitFullObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitFullObjectPath(const FString& InFullObjectPath, FString& OutClassName,\n\t\tFString& OutPackageName, FString& OutObjectName, FString& OutSubObjectName, bool bDetectClassName = true)"
  },
  {
    "label": "SplitFullObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitFullObjectPath(FStringView InFullObjectPath, FStringView& OutClassName,\n\t\tFStringView& OutPackageName, FStringView& OutObjectName, FStringView& OutSubObjectName, bool bDetectClassName=true)"
  },
  {
    "label": "SplitFullObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitFullObjectPath(const FString& InFullObjectPath, FString& OutClassName,\n\t\tFString& OutPackageName, FString& OutObjectName, TArray<FString>& OutSubobjectNames, bool bDetectClassName = true)"
  },
  {
    "label": "SplitFullObjectPath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitFullObjectPath(FStringView InFullObjectPath, FStringView& OutClassName,\n\t\tFStringView& OutPackageName, FStringView& OutObjectName, TArray<FStringView>& OutSubobjectNames, bool bDetectClassName = true)"
  },
  {
    "label": "IsValidLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidLongPackageName(FStringView InLongPackageName, bool bIncludeReadOnlyRoots = false, EErrorCode* OutReason = nullptr)"
  },
  {
    "label": "IsValidLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidLongPackageName(FStringView InLongPackageName, bool bIncludeReadOnlyRoots, FText* OutReason )"
  },
  {
    "label": "IsValidTextForLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTextForLongPackageName(FStringView InLongPackageName, EErrorCode* OutReason = nullptr)"
  },
  {
    "label": "IsValidTextForLongPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidTextForLongPackageName(FStringView InLongPackageName, FText* OutReason)"
  },
  {
    "label": "IsValidObjectPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidObjectPath(FStringView InObjectPath, FText* OutReason = nullptr)"
  },
  {
    "label": "IsValidPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPath(FStringView InPath)"
  },
  {
    "label": "IsShortPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShortPackageName(const FString& PossiblyLongName)"
  },
  {
    "label": "IsShortPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShortPackageName(const FName PossiblyLongName)"
  },
  {
    "label": "IsShortPackageName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShortPackageName(FStringView PossiblyLongName)"
  },
  {
    "label": "GetShortName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShortName(const UPackage* Package)"
  },
  {
    "label": "GetShortName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShortName(const FString& LongName)"
  },
  {
    "label": "GetShortName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShortName(const FName& LongName)"
  },
  {
    "label": "GetShortName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShortName(const TCHAR* LongName)"
  },
  {
    "label": "GetShortFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetShortFName(const FString& LongName)"
  },
  {
    "label": "GetShortFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetShortFName(const FName& LongName)"
  },
  {
    "label": "GetShortFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetShortFName(const TCHAR* LongName)"
  },
  {
    "label": "TryConvertGameRelativePackagePathToLocalPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertGameRelativePackagePathToLocalPath(FStringView RelativePackagePath, FString& OutLocalPath)"
  },
  {
    "label": "RegisterMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMountPoint(const FString& RootPath, const FString& ContentPath)"
  },
  {
    "label": "UnRegisterMountPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnRegisterMountPoint(const FString& RootPath, const FString& ContentPath)"
  },
  {
    "label": "MountPointExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MountPointExists(const FString& RootPath)"
  },
  {
    "label": "GetPackageMountPoint()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetPackageMountPoint(const FString& InPackagePath, bool InWithoutSlashes = true)"
  },
  {
    "label": "GetContentPathForPackageRoot()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetContentPathForPackageRoot(FStringView InPackageRoot)"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DoesPackageExist(LongPackageName, OutFilename, InAllowTextFormats)"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(const FString& LongPackageName, FString* OutFilename = nullptr, bool InAllowTextFormats = true)"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(const FPackagePath& PackagePath, bool bMatchCaseOnDisk = false, FPackagePath* OutPackagePath = nullptr)"
  },
  {
    "label": "DoesPackageExist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExist(const FPackagePath& PackagePath, FPackagePath* OutPackagePath)"
  },
  {
    "label": "DoesPackageExistEx()",
    "kind": "Method",
    "detail": "Function (EPackageLocationFilter)",
    "insertText": "DoesPackageExistEx(const FPackagePath& PackagePath, EPackageLocationFilter Filter, bool bMatchCaseOnDisk = false, FPackagePath* OutPackagePath = nullptr)"
  },
  {
    "label": "SearchForPackageOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SearchForPackageOnDisk(const FString& PackageName, FString* OutLongPackageName = NULL, FString* OutFilename = NULL)"
  },
  {
    "label": "TryConvertShortPackagePathToLongInObjectPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertShortPackagePathToLongInObjectPath(const FString& ObjectPath, FString& ConvertedObjectPath)"
  },
  {
    "label": "GetNormalizedObjectPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetNormalizedObjectPath(const FString& ObjectPath)"
  },
  {
    "label": "GetDelegateResolvedPackagePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDelegateResolvedPackagePath(const FString& InSourcePackagePath)"
  },
  {
    "label": "GetSourcePackagePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSourcePackagePath(const FString& InLocalizedPackagePath)"
  },
  {
    "label": "GetLocalizedPackagePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalizedPackagePath(const FString& InSourcePackagePath)"
  },
  {
    "label": "GetLocalizedPackagePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetLocalizedPackagePath(const FString& InSourcePackagePath, const FString& InCultureName)"
  },
  {
    "label": "GetVersePath()",
    "kind": "Method",
    "detail": "Function (UE::Core::FVersePath)",
    "insertText": "GetVersePath(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "IsTextPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextPackageExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsTextPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextPackageExtension(EPackageExtension Extension)"
  },
  {
    "label": "IsTextAssetPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextAssetPackageExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsTextMapPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTextMapPackageExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPackageExtension(EPackageExtension Extension)"
  },
  {
    "label": "IsAssetPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetPackageExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsMapPackageExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMapPackageExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsVerseExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVerseExtension(const TCHAR* Ext)"
  },
  {
    "label": "IsUnderGeneratedPackageSubPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUnderGeneratedPackageSubPath(FStringView FileOrLongPackagePath)"
  },
  {
    "label": "FindPackagesInDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPackagesInDirectory(TArray<FString>& OutPackages, const FString& RootDir)"
  },
  {
    "label": "FindPackagesInDirectories()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPackagesInDirectories(TArray<FString>& OutPackages, const TArrayView<const FString>& RootDirs)"
  },
  {
    "label": "IteratePackagesInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInDirectory(const FString& RootDir, const FPackageNameVisitor& Visitor)"
  },
  {
    "label": "IteratePackagesInDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IteratePackagesInDirectory(const FString& RootDir, const FPackageNameStatVisitor& Visitor)"
  },
  {
    "label": "QueryRootContentPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueryRootContentPaths( TArray<FString>& OutRootContentPaths, bool bIncludeReadOnlyRoots = false, bool bWithoutLeadingSlashes = false, bool bWithoutTrailingSlashes = false)"
  },
  {
    "label": "QueryMountPointLocalAbsPaths()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "QueryMountPointLocalAbsPaths()"
  },
  {
    "label": "OnCoreUObjectInitialized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCoreUObjectInitialized()"
  },
  {
    "label": "ParseExportTextPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseExportTextPath(FWideStringView InExportTextPath, FWideStringView* OutClassName, FWideStringView* OutObjectPath)"
  },
  {
    "label": "ParseExportTextPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseExportTextPath(FAnsiStringView InExportTextPath, FAnsiStringView* OutClassName, FAnsiStringView* OutObjectPath)"
  },
  {
    "label": "ParseExportTextPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseExportTextPath(const FString& InExportTextPath, FString* OutClassName, FString* OutObjectPath)"
  },
  {
    "label": "ParseExportTextPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseExportTextPath(const TCHAR* InExportTextPath, FStringView* OutClassName, FStringView* OutObjectPath)"
  },
  {
    "label": "ExportTextPathToObjectPath()",
    "kind": "Method",
    "detail": "Function (FWideStringView)",
    "insertText": "ExportTextPathToObjectPath(FWideStringView InExportTextPath)"
  },
  {
    "label": "ExportTextPathToObjectPath()",
    "kind": "Method",
    "detail": "Function (FAnsiStringView)",
    "insertText": "ExportTextPathToObjectPath(FAnsiStringView InExportTextPath)"
  },
  {
    "label": "ExportTextPathToObjectPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ExportTextPathToObjectPath(const FString& InExportTextPath)"
  },
  {
    "label": "ExportTextPathToObjectPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ExportTextPathToObjectPath(const TCHAR* InExportTextPath)"
  },
  {
    "label": "SplitPackageNameRoot()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "SplitPackageNameRoot(FStringView InPackageName, FStringView* OutRelativePath)"
  },
  {
    "label": "SplitPackageNameRoot()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SplitPackageNameRoot(FName InPackageName, FString* OutRelativePath)"
  },
  {
    "label": "ObjectPathToPackageName()",
    "kind": "Method",
    "detail": "Function (FWideStringView)",
    "insertText": "ObjectPathToPackageName(FWideStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToPackageName()",
    "kind": "Method",
    "detail": "Function (FAnsiStringView)",
    "insertText": "ObjectPathToPackageName(FAnsiStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToPackageName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ObjectPathToPackageName(const FString& InObjectPath)"
  },
  {
    "label": "ObjectPathToPathWithinPackage()",
    "kind": "Method",
    "detail": "Function (FWideStringView)",
    "insertText": "ObjectPathToPathWithinPackage(FWideStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToPathWithinPackage()",
    "kind": "Method",
    "detail": "Function (FAnsiStringView)",
    "insertText": "ObjectPathToPathWithinPackage(FAnsiStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToPathWithinPackage()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ObjectPathToPathWithinPackage(const FString& InObjectPath)"
  },
  {
    "label": "ObjectPathToOuterPath()",
    "kind": "Method",
    "detail": "Function (FWideStringView)",
    "insertText": "ObjectPathToOuterPath(FWideStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToOuterPath()",
    "kind": "Method",
    "detail": "Function (FAnsiStringView)",
    "insertText": "ObjectPathToOuterPath(FAnsiStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToOuterPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ObjectPathToOuterPath(const FString& InObjectPath)"
  },
  {
    "label": "ObjectPathToSubObjectPath()",
    "kind": "Method",
    "detail": "Function (FWideStringView)",
    "insertText": "ObjectPathToSubObjectPath(FWideStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToSubObjectPath()",
    "kind": "Method",
    "detail": "Function (FAnsiStringView)",
    "insertText": "ObjectPathToSubObjectPath(FAnsiStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToSubObjectPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ObjectPathToSubObjectPath(const FString& InObjectPath)"
  },
  {
    "label": "ObjectPathToObjectName()",
    "kind": "Method",
    "detail": "Function (FWideStringView)",
    "insertText": "ObjectPathToObjectName(FWideStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToObjectName()",
    "kind": "Method",
    "detail": "Function (FAnsiStringView)",
    "insertText": "ObjectPathToObjectName(FAnsiStringView InObjectPath)"
  },
  {
    "label": "ObjectPathToObjectName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ObjectPathToObjectName(const FString& InObjectPath)"
  },
  {
    "label": "ObjectPathSplitFirstName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectPathSplitFirstName(FWideStringView Text,\n\t\tFWideStringView& OutFirst, FWideStringView& OutRemainder)"
  },
  {
    "label": "ObjectPathSplitFirstName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectPathSplitFirstName(FAnsiStringView Text,\n\t\tFAnsiStringView& OutFirst, FAnsiStringView& OutRemainder)"
  },
  {
    "label": "ObjectPathAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ObjectPathAppend(FStringBuilderBase& ObjectPath, FStringView NextName)"
  },
  {
    "label": "ObjectPathCombine()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ObjectPathCombine(FStringView ObjectPath, FStringView NextName)"
  },
  {
    "label": "IsVersePackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVersePackage(FStringView InPackageName)"
  },
  {
    "label": "IsScriptPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsScriptPackage(FStringView InPackageName)"
  },
  {
    "label": "IsMemoryPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMemoryPackage(FStringView InPackageName)"
  },
  {
    "label": "IsTempPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTempPackage(FStringView InPackageName)"
  },
  {
    "label": "IsLocalizedPackage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLocalizedPackage(FStringView InPackageName)"
  },
  {
    "label": "DoesPackageNameContainInvalidCharacters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageNameContainInvalidCharacters(FStringView InLongPackageName, FText* OutReason)"
  },
  {
    "label": "DoesPackageNameContainInvalidCharacters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageNameContainInvalidCharacters(FStringView InLongPackageName, EErrorCode* OutReason = nullptr)"
  },
  {
    "label": "FindPackageFileWithoutExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPackageFileWithoutExtension(const FString& InPackageFilename, FString& OutFilename)"
  },
  {
    "label": "FindPackageFileWithoutExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindPackageFileWithoutExtension(const FString& InPackageFilename, FString& OutFilename, bool InAllowTextFormats)"
  },
  {
    "label": "FixPackageNameCase()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FixPackageNameCase(FString& LongPackageName, FStringView Extension)"
  },
  {
    "label": "TryGetMountPointForPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryGetMountPointForPath(FStringView InFilePathOrPackageName, FStringBuilderBase& OutMountPointPackageName, FStringBuilderBase& OutMountPointFilePath, FStringBuilderBase& OutRelPath,\n\t\tEFlexNameType* OutFlexNameType = nullptr, EErrorCode* OutFailureReason = nullptr)"
  },
  {
    "label": "GetExplanationForUnavailablePackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetExplanationForUnavailablePackage(const FName& UnavailablePackageName, FStringBuilderBase& InOutExplanation)"
  },
  {
    "label": "InternalFilenameToLongPackageName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFilenameToLongPackageName(FStringView InFilename, FStringBuilderBase& OutPackageName)"
  },
  {
    "label": "TryConvertToMountedPathComponents()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertToMountedPathComponents(FStringView InPath, FStringBuilderBase& OutMountPointPackageName, FStringBuilderBase& OutMountPointFilePath, FStringBuilderBase& OutRelPath,\n\t\tFStringBuilderBase& OutObjectName, EPackageExtension& OutExtension, FStringBuilderBase& OutCustomExtension, EFlexNameType* OutFlexNameType = nullptr, EErrorCode* OutFailureReason = nullptr)"
  },
  {
    "label": "TryConvertToMountedPackagePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryConvertToMountedPackagePath(const FString& InPath, FPackagePath& OutPackagePath, EErrorCode& OutFailureReason)"
  },
  {
    "label": "InternalDoesPackageExistEx()",
    "kind": "Method",
    "detail": "Function (EPackageLocationFilter)",
    "insertText": "InternalDoesPackageExistEx(const FPackagePath& PackagePath, EPackageLocationFilter Filterconst, bool bMatchCaseOnDisk = false, FPackagePath* OutPackagePath = nullptr)"
  },
  {
    "label": "InternalDoesPackageExistEx()",
    "kind": "Method",
    "detail": "Function (EPackageLocationFilter)",
    "insertText": "InternalDoesPackageExistEx(const FString& LongPackageName, EPackageLocationFilter Filterconst, bool bMatchCaseOnDisk = false, FPackagePath* OutPackagePath = nullptr)"
  }
]