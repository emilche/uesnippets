[
  {
    "label": "MatrixBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixBase"
  },
  {
    "label": "DiagonalIndexReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DiagonalIndexReturnType"
  },
  {
    "label": "ConstDiagonalIndexReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstDiagonalIndexReturnType"
  },
  {
    "label": "TriangularViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TriangularViewReturnType"
  },
  {
    "label": "ConstTriangularViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstTriangularViewReturnType"
  },
  {
    "label": "SelfAdjointViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SelfAdjointViewReturnType"
  },
  {
    "label": "ConstSelfAdjointViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstSelfAdjointViewReturnType"
  },
  {
    "label": "cross_product_return_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cross_product_return_type"
  },
  {
    "label": "EIGEN_SIZE_MAX()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_MATRIXBASE_H # define EIGEN_MATRIXBASE_H namespace Eigen { template<Derived> class MatrixBase : public DenseBase<Derived> { public : # ifndef EIGEN_PARSED_BY_DOXYGEN typedef MatrixBase StorageBaseType ; typedef internal::traits<Derived>::StorageKind StorageKind ; typedef internal::traits<Derived>::StorageIndex StorageIndex ; typedef internal::traits<Derived>::Scalar Scalar ; typedef internal::packet_traits<Scalar>::type PacketScalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef DenseBase<Derived> Base ; using Base::RowsAtCompileTime ; using Base::ColsAtCompileTime ; using Base::SizeAtCompileTime ; using Base::MaxRowsAtCompileTime ; using Base::MaxColsAtCompileTime ; using Base::MaxSizeAtCompileTime ; using Base::IsVectorAtCompileTime ; using Base::Flags ; using Base::derived ; using Base::const_cast_derived ; using Base::rows ; using Base::cols ; using Base::size ; using Base::coeff ; using Base::coeffRef ; using Base::lazyAssign ; using Base::eval ; using Base::operator - ; using Base::operator + = ; using Base::operator - = ; using Base::operator* = ; using Base::operator / = ; typedef Base::CoeffReturnType CoeffReturnType ; typedef Base::ConstTransposeReturnType ConstTransposeReturnType ; typedef Base::RowXpr RowXpr ; typedef Base::ColXpr ColXpr ; # endif # ifndef EIGEN_PARSED_BY_DOXYGEN typedef Matrix<Scalar,)",
    "insertText": "EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime), EIGEN_SIZE_MAX(RowsAtCompileTime,ColsAtCompileTime)"
  },
  {
    "label": "diagonalSize()",
    "kind": "Method",
    "detail": "Function (# endif EIGEN_DEVICE_FUNC Index)",
    "insertText": "diagonalSize()"
  },
  {
    "label": "EIGEN_DOC_UNARY_ADDONS()",
    "kind": "Method",
    "detail": "Function (} typedef Base::PlainObject PlainObject ; # ifndef EIGEN_PARSED_BY_DOXYGEN typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject> ConstantReturnType ; typedef internal::conditional<NumTraits<Scalar>::IsComplex,CwiseUnaryOp<internal::scalar_conjugate_op<Scalar>,ConstTransposeReturnType>,ConstTransposeReturnType>::type AdjointReturnType ; typedef Matrix<std::complex<RealScalar>,internal::traits<Derived>::ColsAtCompileTime,1,ColMajor> EigenvaluesReturnType ; typedef CwiseNullaryOp<internal::scalar_identity_op<Scalar>,PlainObject> IdentityReturnType ; typedef Block<const CwiseNullaryOp<internal::scalar_identity_op<Scalar>,SquareMatrixType>,internal::traits<Derived>::RowsAtCompileTime,internal::traits<Derived>::ColsAtCompileTime> BasisReturnType ; # endif # define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::MatrixBase # define)",
    "insertText": "EIGEN_DOC_UNARY_ADDONS(X,Y) # include \"../plugins/CommonCwiseBinaryOps.h\" # include \"../plugins/MatrixCwiseUnaryOps.h\" # include \"../plugins/MatrixCwiseBinaryOps.h\" # ifdef EIGEN_MATRIXBASE_PLUGIN # include EIGEN_MATRIXBASE_PLUGIN # endif #undef EIGEN_CURRENT_STORAGE_BASE_CLASS #undef EIGEN_DOC_UNARY_ADDONS EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& operator=(const MatrixBase& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const DenseBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "operator(const EigenBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "operator(const ReturnByValue<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC const Product<Derived,OtherDerived>)",
    "insertText": "operator(const MatrixBase<OtherDerived> &other)"
  },
  {
    "label": "lazyProduct()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC const Product<Derived,OtherDerived,LazyProduct>)",
    "insertText": "lazyProduct(const MatrixBase<OtherDerived> &other)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> void)",
    "insertText": "applyOnTheLeft(const EigenBase<OtherDerived>& other)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> void)",
    "insertText": "applyOnTheRight(const EigenBase<OtherDerived>& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<DiagonalDerived> EIGEN_DEVICE_FUNC const Product<Derived,DiagonalDerived,LazyProduct>)",
    "insertText": "operator(const DiagonalBase<DiagonalDerived> &diagonal)"
  },
  {
    "label": "dot()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC ScalarBinaryOpTraits<internal::traits<Derived>::Scalar,internal::traits<OtherDerived>::Scalar>::ReturnType)",
    "insertText": "dot(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "squaredNorm()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC RealScalar)",
    "insertText": "squaredNorm()"
  },
  {
    "label": "norm()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC RealScalar)",
    "insertText": "norm()"
  },
  {
    "label": "stableNorm()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "stableNorm()"
  },
  {
    "label": "blueNorm()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "blueNorm()"
  },
  {
    "label": "hypotNorm()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "hypotNorm()"
  },
  {
    "label": "normalized()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const PlainObject)",
    "insertText": "normalized()"
  },
  {
    "label": "stableNormalized()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const PlainObject)",
    "insertText": "stableNormalized()"
  },
  {
    "label": "normalize()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC void)",
    "insertText": "normalize()"
  },
  {
    "label": "stableNormalize()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC void)",
    "insertText": "stableNormalize()"
  },
  {
    "label": "adjoint()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const AdjointReturnType)",
    "insertText": "adjoint()"
  },
  {
    "label": "adjointInPlace()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC void)",
    "insertText": "adjointInPlace()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (typedef Diagonal<Derived> DiagonalReturnType ; EIGEN_DEVICE_FUNC DiagonalReturnType)",
    "insertText": "diagonal()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (typedef Diagonal<Derived,DynamicIndex> DiagonalDynamicIndexReturnType ; typedef internal::add_const<Diagonal<const Derived,DynamicIndex>>::type ConstDiagonalDynamicIndexReturnType ; EIGEN_DEVICE_FUNC DiagonalDynamicIndexReturnType)",
    "insertText": "diagonal(Index index)"
  },
  {
    "label": "triangularView()",
    "kind": "Method",
    "detail": "Function (template<unsigned int Mode> struct TriangularViewReturnType { typedef TriangularView<Derived,Mode> Type ; } ; template<unsigned int Mode> struct ConstTriangularViewReturnType { typedef const TriangularView<const Derived,Mode> Type ; } ; template<unsigned int Mode> EIGEN_DEVICE_FUNC TriangularViewReturnType<Mode>::Type)",
    "insertText": "triangularView()"
  },
  {
    "label": "selfadjointView()",
    "kind": "Method",
    "detail": "Function (template<unsigned int UpLo> struct SelfAdjointViewReturnType { typedef SelfAdjointView<Derived,UpLo> Type ; } ; template<unsigned int UpLo> struct ConstSelfAdjointViewReturnType { typedef const SelfAdjointView<const Derived,UpLo> Type ; } ; template<unsigned int UpLo> EIGEN_DEVICE_FUNC SelfAdjointViewReturnType<UpLo>::Type)",
    "insertText": "selfadjointView()"
  },
  {
    "label": "sparseView()",
    "kind": "Method",
    "detail": "Function (const SparseView<Derived>)",
    "insertText": "sparseView(const Scalar& m_reference = Scalar(0), const typename NumTraits<Scalar>::Real& m_epsilon = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const IdentityReturnType)",
    "insertText": "Identity()"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const IdentityReturnType)",
    "insertText": "Identity(Index rows, Index cols)"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const BasisReturnType)",
    "insertText": "Unit(Index size, Index i)"
  },
  {
    "label": "Unit()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const BasisReturnType)",
    "insertText": "Unit(Index i)"
  },
  {
    "label": "UnitX()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const BasisReturnType)",
    "insertText": "UnitX()"
  },
  {
    "label": "UnitY()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const BasisReturnType)",
    "insertText": "UnitY()"
  },
  {
    "label": "UnitZ()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const BasisReturnType)",
    "insertText": "UnitZ()"
  },
  {
    "label": "UnitW()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const BasisReturnType)",
    "insertText": "UnitW()"
  },
  {
    "label": "asDiagonal()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const DiagonalWrapper<const Derived>)",
    "insertText": "asDiagonal()"
  },
  {
    "label": "asPermutation()",
    "kind": "Method",
    "detail": "Function (const PermutationWrapper<const Derived>)",
    "insertText": "asPermutation()"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setIdentity()"
  },
  {
    "label": "setIdentity()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setIdentity(Index rows, Index cols)"
  },
  {
    "label": "setUnit()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setUnit(Index i)"
  },
  {
    "label": "setUnit()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Derived&)",
    "insertText": "setUnit(Index newSize, Index i)"
  },
  {
    "label": "isIdentity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isIdentity(const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isDiagonal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isDiagonal(const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isUpperTriangular()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUpperTriangular(const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isLowerTriangular()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLowerTriangular(const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isOrthogonal()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> bool)",
    "insertText": "isOrthogonal(const MatrixBase<OtherDerived>& other, const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "isUnitary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isUnitary(const RealScalar& prec = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "noalias()",
    "kind": "Method",
    "detail": "Function (} NoAlias<Derived,Eigen::MatrixBase> EIGEN_DEVICE_FUNC)",
    "insertText": "noalias()"
  },
  {
    "label": "forceAlignedAccess()",
    "kind": "Method",
    "detail": "Function (const Derived&)",
    "insertText": "forceAlignedAccess()"
  },
  {
    "label": "forceAlignedAccessIf()",
    "kind": "Method",
    "detail": "Function (} template<bool Enable> const Derived&)",
    "insertText": "forceAlignedAccessIf()"
  },
  {
    "label": "trace()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "trace()"
  },
  {
    "label": "lpNorm()",
    "kind": "Method",
    "detail": "Function (template<int p> EIGEN_DEVICE_FUNC RealScalar)",
    "insertText": "lpNorm()"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC MatrixBase<Derived>&)",
    "insertText": "matrix()"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE const ArrayWrapper<const Derived>)",
    "insertText": "array()"
  },
  {
    "label": "fullPivLu()",
    "kind": "Method",
    "detail": "Function (} const FullPivLU<PlainObject>)",
    "insertText": "fullPivLu()"
  },
  {
    "label": "partialPivLu()",
    "kind": "Method",
    "detail": "Function (const PartialPivLU<PlainObject>)",
    "insertText": "partialPivLu()"
  },
  {
    "label": "lu()",
    "kind": "Method",
    "detail": "Function (const PartialPivLU<PlainObject>)",
    "insertText": "lu()"
  },
  {
    "label": "inverse()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const Inverse<Derived>)",
    "insertText": "inverse()"
  },
  {
    "label": "computeInverseAndDetWithCheck()",
    "kind": "Method",
    "detail": "Function (template<ResultType> void)",
    "insertText": "computeInverseAndDetWithCheck(ResultType& inverse, typename ResultType::Scalar& determinant, bool& invertible, const RealScalar& absDeterminantThreshold = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "computeInverseWithCheck()",
    "kind": "Method",
    "detail": "Function (template<ResultType> void)",
    "insertText": "computeInverseWithCheck(ResultType& inverse, bool& invertible, const RealScalar& absDeterminantThreshold = NumTraits<Scalar>::dummy_precision())"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Scalar)",
    "insertText": "determinant()"
  },
  {
    "label": "llt()",
    "kind": "Method",
    "detail": "Function (const LLT<PlainObject>)",
    "insertText": "llt()"
  },
  {
    "label": "ldlt()",
    "kind": "Method",
    "detail": "Function (const LDLT<PlainObject>)",
    "insertText": "ldlt()"
  },
  {
    "label": "householderQr()",
    "kind": "Method",
    "detail": "Function (const HouseholderQR<PlainObject>)",
    "insertText": "householderQr()"
  },
  {
    "label": "colPivHouseholderQr()",
    "kind": "Method",
    "detail": "Function (const ColPivHouseholderQR<PlainObject>)",
    "insertText": "colPivHouseholderQr()"
  },
  {
    "label": "fullPivHouseholderQr()",
    "kind": "Method",
    "detail": "Function (const FullPivHouseholderQR<PlainObject>)",
    "insertText": "fullPivHouseholderQr()"
  },
  {
    "label": "completeOrthogonalDecomposition()",
    "kind": "Method",
    "detail": "Function (const CompleteOrthogonalDecomposition<PlainObject>)",
    "insertText": "completeOrthogonalDecomposition()"
  },
  {
    "label": "eigenvalues()",
    "kind": "Method",
    "detail": "Function (EigenvaluesReturnType)",
    "insertText": "eigenvalues()"
  },
  {
    "label": "operatorNorm()",
    "kind": "Method",
    "detail": "Function (RealScalar)",
    "insertText": "operatorNorm()"
  },
  {
    "label": "jacobiSvd()",
    "kind": "Method",
    "detail": "Function (JacobiSVD<PlainObject>)",
    "insertText": "jacobiSvd(unsigned int computationOptions = 0)"
  },
  {
    "label": "bdcSvd()",
    "kind": "Method",
    "detail": "Function (BDCSVD<PlainObject>)",
    "insertText": "bdcSvd(unsigned int computationOptions = 0)"
  },
  {
    "label": "cross()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_PARSED_BY_DOXYGEN template<OtherDerived> struct cross_product_return_type { typedef ScalarBinaryOpTraits<internal::traits<Derived>::Scalar,internal::traits<OtherDerived>::Scalar>::ReturnType Scalar ; typedef Matrix<Scalar,MatrixBase::RowsAtCompileTime,MatrixBase::ColsAtCompileTime> type ; } ; # endif template<OtherDerived> EIGEN_DEVICE_FUNC # ifndef EIGEN_PARSED_BY_DOXYGEN cross_product_return_type<OtherDerived>::type # else PlainObject # endif)",
    "insertText": "cross(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "cross3()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC PlainObject)",
    "insertText": "cross3(const MatrixBase<OtherDerived>& other)"
  },
  {
    "label": "unitOrthogonal()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC PlainObject)",
    "insertText": "unitOrthogonal(void)"
  },
  {
    "label": "eulerAngles()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC Matrix<Scalar,3,1>)",
    "insertText": "eulerAngles(Index a0, Index a1, Index a2)"
  },
  {
    "label": "RowsAtCompileTime()",
    "kind": "Method",
    "detail": "Function (enum { HomogeneousReturnTypeDirection = ColsAtCompileTime = = 1&&)",
    "insertText": "RowsAtCompileTime((internal::traits<Derived>::Flags&RowMajorBit)==RowMajorBit ? Horizontal : Vertical)"
  },
  {
    "label": "homogeneous()",
    "kind": "Method",
    "detail": "Function (typedef Homogeneous<Derived,HomogeneousReturnTypeDirection> HomogeneousReturnType ; EIGEN_DEVICE_FUNC HomogeneousReturnType)",
    "insertText": "homogeneous()"
  },
  {
    "label": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE()",
    "kind": "Method",
    "detail": "Function (enum { SizeMinusOne = SizeAtCompileTime = = Dynamic ? Dynamic : SizeAtCompileTime - 1 } ; typedef Block<const Derived,internal::traits<Derived>::ColsAtCompileTime = = 1 ? SizeMinusOne : 1,internal::traits<Derived>::ColsAtCompileTime = = 1 ? 1 : SizeMinusOne> ConstStartMinusOne ; typedef)",
    "insertText": "EIGEN_EXPR_BINARYOP_SCALAR_RETURN_TYPE(ConstStartMinusOne,Scalar,quotient)"
  },
  {
    "label": "hnormalized()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC const HNormalizedReturnType)",
    "insertText": "hnormalized()"
  },
  {
    "label": "makeHouseholderInPlace()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC void)",
    "insertText": "makeHouseholderInPlace(Scalar& tau, RealScalar& beta)"
  },
  {
    "label": "makeHouseholder()",
    "kind": "Method",
    "detail": "Function (template<EssentialPart> EIGEN_DEVICE_FUNC void)",
    "insertText": "makeHouseholder(EssentialPart& essential, Scalar& tau, RealScalar& beta)"
  },
  {
    "label": "applyHouseholderOnTheLeft()",
    "kind": "Method",
    "detail": "Function (template<EssentialPart> EIGEN_DEVICE_FUNC void)",
    "insertText": "applyHouseholderOnTheLeft(const EssentialPart& essential, const Scalar& tau, Scalar* workspace)"
  },
  {
    "label": "applyHouseholderOnTheRight()",
    "kind": "Method",
    "detail": "Function (template<EssentialPart> EIGEN_DEVICE_FUNC void)",
    "insertText": "applyHouseholderOnTheRight(const EssentialPart& essential, const Scalar& tau, Scalar* workspace)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (template<OtherScalar> EIGEN_DEVICE_FUNC void)",
    "insertText": "applyOnTheLeft(Index p, Index q, const JacobiRotation<OtherScalar>& j)"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (template<OtherScalar> EIGEN_DEVICE_FUNC void)",
    "insertText": "applyOnTheRight(Index p, Index q, const JacobiRotation<OtherScalar>& j)"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_STRONG_INLINE const SparseMatrixBase<OtherDerived>::template CwiseProductDenseReturnType<Derived>::Type)",
    "insertText": "cwiseProduct(const SparseMatrixBase<OtherDerived> &other)"
  },
  {
    "label": "EIGEN_MATRIX_FUNCTION()",
    "kind": "Method",
    "detail": "Function (} typedef internal::stem_function<Scalar>::type StemFunction ; # define)",
    "insertText": "EIGEN_MATRIX_FUNCTION(ReturnType, Name, Description) \\ \\ const ReturnType<Derived> Name()"
  },
  {
    "label": "EIGEN_MATRIX_FUNCTION_1()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "EIGEN_MATRIX_FUNCTION_1(ReturnType, Name, Description, Argument) \\ \\ const ReturnType<Derived> Name(Argument)"
  },
  {
    "label": "EIGEN_MATRIX_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MATRIX_FUNCTION(MatrixExponentialReturnValue, exp, exponential) const MatrixFunctionReturnValue<Derived> matrixFunction(StemFunction f)"
  },
  {
    "label": "EIGEN_MATRIX_FUNCTION()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, cosh, hyperbolic cosine) EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, sinh, hyperbolic sine) #if EIGEN_HAS_CXX11_MATH EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, atanh, inverse hyperbolic cosine) EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, acosh, inverse hyperbolic cosine) EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, asinh, inverse hyperbolic sine) #endif EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, cos, cosine) EIGEN_MATRIX_FUNCTION(MatrixFunctionReturnValue, sin, sine) EIGEN_MATRIX_FUNCTION(MatrixSquareRootReturnValue, sqrt, square root) EIGEN_MATRIX_FUNCTION(MatrixLogarithmReturnValue, log, logarithm) EIGEN_MATRIX_FUNCTION_1(MatrixPowerReturnValue, pow, power to \\c p, const RealScalar& p) EIGEN_MATRIX_FUNCTION_1(MatrixComplexPowerReturnValue, pow, power to \\c p, const std::complex<RealScalar>& p) protected: EIGEN_DEFAULT_COPY_CONSTRUCTOR(MatrixBase) EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(MatrixBase) private: EIGEN_DEVICE_FUNC explicit MatrixBase(int)"
  },
  {
    "label": "MatrixBase()",
    "kind": "Method",
    "detail": "Function (EIGEN_DEVICE_FUNC)",
    "insertText": "MatrixBase(int,int)"
  },
  {
    "label": "MatrixBase()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC)",
    "insertText": "MatrixBase(const MatrixBase<OtherDerived>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : template<OtherDerived> Derived&)",
    "insertText": "operator(const ArrayBase<OtherDerived>&)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(std::ptrdiff_t(sizeof(typename OtherDerived::Scalar))==-1,YOU_CANNOT_MIX_ARRAYS_AND_MATRICES)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "derived().applyThisOnTheRight(derived())"
  },
  {
    "label": "applyOnTheRight()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> void MatrixBase<Derived)",
    "insertText": "applyOnTheRight(const EigenBase<OtherDerived> &other)"
  },
  {
    "label": "applyOnTheLeft()",
    "kind": "Method",
    "detail": "Function (} template<Derived> template<OtherDerived> void MatrixBase<Derived)",
    "insertText": "applyOnTheLeft(const EigenBase<OtherDerived> &other)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (other .)",
    "insertText": "derived().applyThisOnTheLeft(derived())"
  }
]