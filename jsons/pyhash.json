[
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_HASH_H # define Py_HASH_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_LIMITED_API)",
    "insertText": "PyAPI_FUNC(Py_hash_t) _Py_HashDouble(PyObject *, double)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_hash_t) _Py_HashPointer(const void*)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_hash_t) _Py_HashPointerRaw(const void*)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyAPI_FUNC(Py_hash_t) _Py_HashBytes(const void*, Py_ssize_t)"
  },
  {
    "label": "_PyHASH_MODULUS()",
    "kind": "Method",
    "detail": "Function (# endif # define _PyHASH_MULTIPLIER 1 0 0 0 0 0 3 UL # if SIZEOF_VOID_P> = 8 # define _PyHASH_BITS 6 1 # else # define _PyHASH_BITS 3 1 # endif # define)",
    "insertText": "_PyHASH_MODULUS(((size_t)1 << _PyHASH_BITS) - 1)"
  },
  {
    "label": "PyAPI_DATA()",
    "kind": "Method",
    "detail": "Function (unsigned char uc [ 2 4 ] ; struct { Py_hash_t prefix ; Py_hash_t suffix ; } fnv ; struct { uint64_t k0 ; uint64_t k1 ; } siphash ; struct { unsigned char padding [ 1 6 ] ; Py_hash_t suffix ; } djbx33a ; struct { unsigned char padding [ 1 6 ] ; Py_hash_t hashsalt ; } expat ; } _Py_HashSecret_t ;)",
    "insertText": "PyAPI_DATA(_Py_HashSecret_t)"
  },
  {
    "label": "PyAPI_DATA()",
    "kind": "Method",
    "detail": "Function (# ifdef Py_DEBUG)",
    "insertText": "PyAPI_DATA(int)"
  },
  {
    "label": "Py_hash_t()",
    "kind": "Method",
    "detail": "Function (# endif typedef struct {)",
    "insertText": "Py_hash_t(*const hash)(const void *, Py_ssize_t)"
  },
  {
    "label": "PyAPI_FUNC()",
    "kind": "Method",
    "detail": "Function (const char* name ; const int hash_bits ; const int seed_bits ; } PyHash_FuncDef ;)",
    "insertText": "PyAPI_FUNC(PyHash_FuncDef*) PyHash_GetFuncDef(void)"
  }
]