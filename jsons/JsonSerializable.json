[
  {
    "label": "FJsonSerializable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJsonSerializable"
  },
  {
    "label": "CharType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CharType"
  },
  {
    "label": "PrintPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PrintPolicy"
  },
  {
    "label": "FJsonSerializable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Dom / JsonObject . h \" # include \" Policies / CondensedJsonPrintPolicy . h \" # include \" Serialization / JsonWriter . h \" # include \" Serialization / JsonSerializer . h \" # include \" Serialization / JsonSerializerReader . h \" # include \" JsonSerializerWriter . h \" # include \" Misc / TVariant . h \" struct FJsonSerializable { ~)",
    "insertText": "FJsonSerializable()"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "ToJson(bool bPrettyPrint = true)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (const FString)",
    "insertText": "ToJson(bool bPrettyPrint=true)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (template<class CharType,class PrintPolicy,ESPMode SPMode> void)",
    "insertText": "ToJson(TSharedRef<TJsonWriter<CharType, PrintPolicy>, SPMode> JsonWriter, bool bFlatObject = false)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromJson(const FString& Json)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromJson(FString&& Json)"
  },
  {
    "label": "FromJsonStringView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromJsonStringView(FUtf8StringView JsonStringView)"
  },
  {
    "label": "FromJsonStringView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromJsonStringView(FWideStringView JsonStringView)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FromJson(TSharedPtr<FJsonObject> JsonObject)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FJsonSerializerBase& Serializer, bool bFlatObject)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (} ; template<class CharType,class PrintPolicy,ESPMode SPMode> void)",
    "insertText": "ToJson(TSharedRef<TJsonWriter<CharType, PrintPolicy>, SPMode> JsonWriter, bool bFlatObject)"
  },
  {
    "label": "Serializer()",
    "kind": "Method",
    "detail": "Function (FJsonSerializerWriter<CharType,PrintPolicy>)",
    "insertText": "Serializer(MoveTemp(JsonWriter))"
  },
  {
    "label": "FJsonSerializable()",
    "kind": "Method",
    "detail": "Function (const_cast<)",
    "insertText": "FJsonSerializable(this)->Serialize(Serializer, bFlatObject)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (} namespace UE::JsonArray { namespace Private { template<T,CharType> bool)",
    "insertText": "FromJson(TArray<T>& OutArray, TStringView<CharType> JsonString)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Reset()"
  },
  {
    "label": "CreateFromView()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FJsonValue>> ArrayValues ; TSharedRef<TJsonReader<CharType>> JsonReader = TJsonReaderFactory<CharType)",
    "insertText": "CreateFromView(JsonString)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject>* ArrayEntry ;)",
    "insertText": "if(Value.IsValid() && Value->TryGetObject(ArrayEntry))"
  },
  {
    "label": "Serializer()",
    "kind": "Method",
    "detail": "Function (FJsonSerializerReader)",
    "insertText": "Serializer(*ArrayEntry)"
  },
  {
    "label": "Add_GetRef()",
    "kind": "Method",
    "detail": "Function (OutArray .)",
    "insertText": "Add_GetRef(T()).Serialize(Serializer, false)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogJson, Error, TEXT(\"Failed to parse Json from array\"))"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (ArrayEntry .)",
    "insertText": "Serialize(Args...)"
  },
  {
    "label": "ToJson_SerializeArrayElements()",
    "kind": "Method",
    "detail": "Function (} } template<T,. . . SerializerArgsT> void)",
    "insertText": "ToJson_SerializeArrayElements(TArray<T*>& InArray, SerializerArgsT...Args)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (} } template<T> void)",
    "insertText": "ToJson(TArray<T>& InArray, const ToJsonVariantArgs& InArgs)"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (using PrettySerializerAndWriter = TTuple<PrettySerializer,PrettyWriter> ; using CondensedSerializerAndWriter = TTuple<CondensedSerializer,CondensedWriter> ; using SerializerVariant = TVariant<PrettySerializerAndWriter,CondensedSerializerAndWriter> ; SerializerVariant SerializerToUse)",
    "insertText": "Visit([](auto& StoredValue) { using StoredValueType = std::decay_t<decltype(StoredValue)>; if constexpr (std::is_same_v<StoredValueType, ReturnStringArgs>) { if (StoredValue.template Get<1>()) { PrettyWriter NewWriter = TJsonWriterFactory<>::Create(StoredValue.template Get<0>()); return SerializerVariant(TInPlaceType<PrettySerializerAndWriter>(), PrettySerializer(NewWriter), NewWriter); } else { CondensedWriter NewWriter = TJsonWriterFactory<TCHAR, TCondensedJsonPrintPolicy<TCHAR>>::Create(StoredValue.template Get<0>()); return SerializerVariant(TInPlaceType<CondensedSerializerAndWriter>(), CondensedSerializer(NewWriter), NewWriter); } } else { return ::Visit([](auto& StoredWriter) { using StoredWriterType = std::decay_t<decltype(StoredWriter)>; if constexpr (std::is_same_v<StoredWriterType, PrettyWriter>) { return SerializerVariant(TInPlaceType<PrettySerializerAndWriter>(), PrettySerializer(StoredWriter), StoredWriter); } else if constexpr (std::is_same_v<StoredWriterType, CondensedWriter>) { return SerializerVariant(TInPlaceType<CondensedSerializerAndWriter>(), CondensedSerializer(StoredWriter), StoredWriter); } }, StoredValue); } }, InArgs)"
  },
  {
    "label": "ReturnStringArgs()",
    "kind": "Method",
    "detail": "Function (const bool bCloseWriter = InArgs . IsType<)",
    "insertText": "ReturnStringArgs()"
  },
  {
    "label": "Visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Visit([bCloseWriter, &InArray](auto& StoredSerializer) { StoredSerializer.template Get<0>().StartArray(); ToJson_SerializeArrayElements(InArray, StoredSerializer.template Get<0>(), false); StoredSerializer.template Get<0>().EndArray(); if (bCloseWriter) { StoredSerializer.template Get<1>()->Close(); } }, SerializerToUse)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (} } template<T> bool)",
    "insertText": "FromJson(TArray<T>& OutArray, const FString& JsonString)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "FromJson(TArray<T>& OutArray, FString&& JsonString)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "FromJson(TArray<T>& OutArray, FUtf8StringView JsonStringView)"
  },
  {
    "label": "FromJson()",
    "kind": "Method",
    "detail": "Function (} template<T> bool)",
    "insertText": "FromJson(TArray<T>& OutArray, FWideStringView JsonStringView)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (} template<T> const FString)",
    "insertText": "ToJson(TArray<T>& InArray, const bool bPrettyPrint = true)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (FString JsonStr ;)",
    "insertText": "ToJson(InArray, Private::ToJsonVariantArgs(TInPlaceType<Private::ReturnStringArgs>(), &JsonStr, bPrettyPrint))"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToJson(InArray, Private::ToJsonVariantArgs(TInPlaceType<Private::WriterVariants>(), Private::WriterVariants(TInPlaceType<Private::PrettyWriter>(), JsonWriter)))"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "ToJson(TArray<T>& InArray, Private::CondensedWriter& JsonWriter)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToJson(InArray, Private::ToJsonVariantArgs(TInPlaceType<Private::WriterVariants>(), Private::WriterVariants(TInPlaceType<Private::CondensedWriter>(), JsonWriter)))"
  }
]