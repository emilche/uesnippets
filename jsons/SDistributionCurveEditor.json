[
  {
    "label": "FCurveEdInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEdInterface"
  },
  {
    "label": "FCurveEditorSharedData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditorSharedData"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "SCurveEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCurveEditorViewport"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "STextComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextComboBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UInterpCurveEdSetup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInterpCurveEdSetup"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FColor"
  },
  {
    "label": "FCurveEdEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEdEntry"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SDistributionCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDistributionCurveEditor"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / PlatformMath . h \" # include \" IDistCurveEditor . h \" # include \" Layout / Visibility . h \" # include \" Logging / LogMacros . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class FCurveEdInterface ; class FCurveEditorSharedData ; class FString ; class FText ; class FUICommandList ; class IMenu ; class SCurveEditorViewport ; class SHorizontalBox ; class STextComboBox ; class SWidget ; class UInterpCurveEdSetup ; class UObject ; struct FColor ; struct FCurveEdEntry ; template<FuncType> class TFunctionRef ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCurveEd, Log, All)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (namespace ECurveScaleScope { enum Type { All,Current,CurrentSub } ; } class SDistributionCurveEditor : public IDistributionCurveEditor { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDistributionCurveEditor) : _EdSetup(NULL) , _NotifyObject(NULL) , _CurveEdOptions(FCurveEdOptions())"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(UInterpCurveEdSetup*, EdSetup) SLATE_ARGUMENT(FCurveEdNotifyInterface*, NotifyObject) SLATE_ARGUMENT(FCurveEdOptions, CurveEdOptions) SLATE_END_ARGS() SDistributionCurveEditor()"
  },
  {
    "label": "SDistributionCurveEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SDistributionCurveEditor()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs)"
  },
  {
    "label": "RefreshViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshViewport()"
  },
  {
    "label": "CurveChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurveChanged()"
  },
  {
    "label": "SetCurveVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveVisible(const UObject* InCurve, bool bShow)"
  },
  {
    "label": "ClearAllVisibleCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllVisibleCurves()"
  },
  {
    "label": "SetCurveSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveSelected(const UObject* InCurve, bool bSelected)"
  },
  {
    "label": "ClearAllSelectedCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllSelectedCurves()"
  },
  {
    "label": "ScrollToFirstSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScrollToFirstSelected()"
  },
  {
    "label": "SetActiveTabToFirstSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveTabToFirstSelected()"
  },
  {
    "label": "GetEdSetup()",
    "kind": "Method",
    "detail": "Function (UInterpCurveEdSetup*)",
    "insertText": "GetEdSetup()"
  },
  {
    "label": "GetStartIn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStartIn()"
  },
  {
    "label": "GetEndIn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEndIn()"
  },
  {
    "label": "SetPositionMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPositionMarker(bool bEnabled, float InPosition, const FColor& InMarkerColor)"
  },
  {
    "label": "SetEndMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEndMarker(bool bEnabled, float InEndPosition)"
  },
  {
    "label": "SetRegionMarker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRegionMarker(bool bEnabled, float InRegionStart, float InRegionEnd, const FColor& InRegionFillColor)"
  },
  {
    "label": "SetInSnap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInSnap(bool bEnabled, float SnapAmount, bool bInSnapToFrames)"
  },
  {
    "label": "SetViewInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewInterval(float StartIn, float EndIn)"
  },
  {
    "label": "FitViewHorizontally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FitViewHorizontally()"
  },
  {
    "label": "FitViewVertically()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FitViewVertically()"
  },
  {
    "label": "GetSharedData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FCurveEditorSharedData>)",
    "insertText": "GetSharedData()"
  },
  {
    "label": "OnDeleteKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteKeys()"
  },
  {
    "label": "OnFit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFit()"
  },
  {
    "label": "OnFitToSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFitToSelected()"
  },
  {
    "label": "OnFitHorizontally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFitHorizontally()"
  },
  {
    "label": "OnFitVertically()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFitVertically()"
  },
  {
    "label": "OnSetTangentType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetTangentType(int32 NewType)"
  },
  {
    "label": "OpenLabelMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenLabelMenu()"
  },
  {
    "label": "OpenKeyMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenKeyMenu()"
  },
  {
    "label": "OpenGeneralMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenGeneralMenu()"
  },
  {
    "label": "OpenCurveMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenCurveMenu()"
  },
  {
    "label": "CloseEntryPopup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseEntryPopup()"
  },
  {
    "label": "CreateLayout()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "CreateLayout(FCurveEdOptions CurveEdOptions)"
  },
  {
    "label": "GetLargeIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLargeIconVisibility()"
  },
  {
    "label": "BuildToolBar()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SHorizontalBox>)",
    "insertText": "BuildToolBar()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "OnRemoveCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveCurve()"
  },
  {
    "label": "OnRemoveAllCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveAllCurves()"
  },
  {
    "label": "OnSetTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetTime()"
  },
  {
    "label": "OnSetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetValue()"
  },
  {
    "label": "OnSetColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetColor()"
  },
  {
    "label": "OnScaleTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScaleTimes(ECurveScaleScope::Type Scope)"
  },
  {
    "label": "OnScaleValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScaleValues(ECurveScaleScope::Type Scope)"
  },
  {
    "label": "OnScaleSingleCurveTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScaleSingleCurveTimes()"
  },
  {
    "label": "OnScaleSingleCurveValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScaleSingleCurveValues()"
  },
  {
    "label": "OnSetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetMode(int32 NewMode)"
  },
  {
    "label": "IsModeChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModeChecked(int32 Mode)"
  },
  {
    "label": "IsTangentTypeChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTangentTypeChecked(int32 Type)"
  },
  {
    "label": "OnFlattenTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFlattenTangents()"
  },
  {
    "label": "OnStraightenTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStraightenTangents()"
  },
  {
    "label": "OnShowAllTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShowAllTangents()"
  },
  {
    "label": "IsShowAllTangentsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowAllTangentsChecked()"
  },
  {
    "label": "OnCreateTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateTab()"
  },
  {
    "label": "OnDeleteTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeleteTab()"
  },
  {
    "label": "BuildMenuWidgetLabel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuWidgetLabel()"
  },
  {
    "label": "BuildMenuWidgetKey()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuWidgetKey()"
  },
  {
    "label": "BuildMenuWidgetGeneral()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuWidgetGeneral()"
  },
  {
    "label": "BuildMenuWidgetCurve()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildMenuWidgetCurve()"
  },
  {
    "label": "TabSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TabSelectionChanged(TSharedPtr<FString> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "SetTabSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTabSelection(TSharedPtr<FString> NewSelection, bool bUpdateWidget)"
  },
  {
    "label": "KeyTimeCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyTimeCommitted(const FText& CommentText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "KeyValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KeyValueCommitted(const FText& CommentText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "ScaleTimeCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleTimeCommitted(const FText& CommentText, ETextCommit::Type CommitInfo, ECurveScaleScope::Type Scope)"
  },
  {
    "label": "ScaleValueCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleValueCommitted(const FText& CommentText, ETextCommit::Type CommitInfo, ECurveScaleScope::Type Scope)"
  },
  {
    "label": "TabNameCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TabNameCommitted(const FText& CommentText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "NotifyPendingCurveChange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NotifyPendingCurveChange(bool bSelectedOnly)"
  },
  {
    "label": "ModifyTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyTangents(bool bDoStraighten)"
  },
  {
    "label": "GetSelectedTab()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetSelectedTab()"
  },
  {
    "label": "IterateKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IterateKeys(TFunctionRef<void(int32, int32, FCurveEdEntry&, FCurveEdInterface&)> IteratorCallback)"
  }
]