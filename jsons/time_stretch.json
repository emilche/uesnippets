[
  {
    "label": "BackgroundNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BackgroundNoise"
  },
  {
    "label": "TimeStretch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TimeStretch"
  },
  {
    "label": "ReturnCodes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ReturnCodes"
  },
  {
    "label": "TimeStretch()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_TIME_STRETCH_H_ # define MODULES_AUDIO_CODING_NETEQ_TIME_STRETCH_H_ # include<string . h> # include \" modules / audio_coding / neteq / audio_multi_vector . h \" namespace webrtc { class BackgroundNoise ; class TimeStretch { public : enum ReturnCodes { kSuccess = 0,kSuccessLowEnergy = 1,kNoStretch = 2,kError = - 1 } ;)",
    "insertText": "TimeStretch(int sample_rate_hz, size_t num_channels, const BackgroundNoise& background_noise) : sample_rate_hz_(sample_rate_hz), fs_mult_(sample_rate_hz / 8000), num_channels_(num_channels), background_noise_(background_noise), max_input_value_(0)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(sample_rate_hz_ == 8000 || sample_rate_hz_ == 16000 || sample_rate_hz_ == 32000 || sample_rate_hz_ == 48000)"
  },
  {
    "label": "RTC_DCHECK_GT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GT(num_channels_, 0)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(auto_correlation_, 0, sizeof(auto_correlation_))"
  },
  {
    "label": "TimeStretch()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TimeStretch()"
  },
  {
    "label": "TimeStretch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TimeStretch(const TimeStretch&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TimeStretch&)",
    "insertText": "operator(const TimeStretch&)"
  },
  {
    "label": "SetParametersForPassiveSpeech()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetParametersForPassiveSpeech(size_t input_length, int16_t* best_correlation, size_t* peak_index)"
  },
  {
    "label": "CheckCriteriaAndStretch()",
    "kind": "Method",
    "detail": "Function (ReturnCodes)",
    "insertText": "CheckCriteriaAndStretch(const int16_t* input, size_t input_length, size_t peak_index, int16_t best_correlation, bool active_speech, bool fast_mode, AudioMultiVector* output)"
  },
  {
    "label": "AutoCorrelation()",
    "kind": "Method",
    "detail": "Function (const size_t kCorrelationLen = 5 0 ; const size_t kLogCorrelationLen = 6 ; const size_t kMinLag = 1 0 ; const size_t kMaxLag = 6 0 ; const size_t kDownsampledLen = kCorrelationLen + kMaxLag ; const int kCorrelationThreshold = 1 4 7 4 6 ; size_t kRefChannel = 0 ; const int sample_rate_hz_ ; const int fs_mult_ ; const size_t num_channels_ ; const BackgroundNoise& background_noise_ ; int16_t max_input_value_ ; int16_t downsampled_input_ [ kDownsampledLen ] ; int16_t auto_correlation_ [ kCorrelationLen + 1 ] ; private : void)",
    "insertText": "AutoCorrelation()"
  },
  {
    "label": "SpeechDetection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SpeechDetection(int32_t vec1_energy, int32_t vec2_energy, size_t peak_index, int scaling)"
  }
]