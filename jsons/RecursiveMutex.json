[
  {
    "label": "FRecursiveMutex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRecursiveMutex"
  },
  {
    "label": "FRecursiveMutex()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include<atomic> # define namespace UE { class FRecursiveMutex final { public :)",
    "insertText": "FRecursiveMutex()"
  },
  {
    "label": "FRecursiveMutex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FRecursiveMutex(const FRecursiveMutex&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FRecursiveMutex&)",
    "insertText": "operator(const FRecursiveMutex&)"
  },
  {
    "label": "TryLock()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryLock()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock()"
  },
  {
    "label": "LockSlow()",
    "kind": "Method",
    "detail": "Function (private : union FState ; void)",
    "insertText": "LockSlow(FState CurrentState, uint32 CurrentThreadId)"
  },
  {
    "label": "UnlockSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockSlow(FState CurrentState)"
  }
]