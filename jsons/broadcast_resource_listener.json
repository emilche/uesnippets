[
  {
    "label": "BroadcastResourceListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BroadcastResourceListener"
  },
  {
    "label": "AdapterResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AdapterResource"
  },
  {
    "label": "BroadcastResourceListener()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_ADAPTATION_BROADCAST_RESOURCE_LISTENER_H_ # define CALL_ADAPTATION_BROADCAST_RESOURCE_LISTENER_H_ # include<vector> # include \" api / adaptation / resource . h \" # include \" api / scoped_refptr . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class BroadcastResourceListener : public ResourceListener { public :)",
    "insertText": "BroadcastResourceListener(rtc::scoped_refptr<Resource> source_resource)"
  },
  {
    "label": "BroadcastResourceListener()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BroadcastResourceListener()"
  },
  {
    "label": "SourceResource()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<Resource>)",
    "insertText": "SourceResource()"
  },
  {
    "label": "StartListening()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartListening()"
  },
  {
    "label": "StopListening()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopListening()"
  },
  {
    "label": "CreateAdapterResource()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<Resource>)",
    "insertText": "CreateAdapterResource()"
  },
  {
    "label": "RemoveAdapterResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAdapterResource(rtc::scoped_refptr<Resource> resource)"
  },
  {
    "label": "GetAdapterResources()",
    "kind": "Method",
    "detail": "Function (std::vector<rtc::scoped_refptr<Resource>>)",
    "insertText": "GetAdapterResources()"
  },
  {
    "label": "OnResourceUsageStateMeasured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResourceUsageStateMeasured(rtc::scoped_refptr<Resource> resource, ResourceUsageState usage_state)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : class AdapterResource ; class AdapterResource ; const rtc::scoped_refptr<Resource> source_resource_ ; Mutex lock_ ; bool is_listening_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]