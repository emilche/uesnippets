[
  {
    "label": "FAutoConsoleVariableRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariableRef"
  },
  {
    "label": "FFeedbackContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFeedbackContext"
  },
  {
    "label": "FOutputDeviceConsole",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceConsole"
  },
  {
    "label": "FOutputDeviceError",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDeviceError"
  },
  {
    "label": "IPlatformInputDeviceMapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPlatformInputDeviceMapper"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShowInputDeviceSelectorParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShowInputDeviceSelectorParams"
  },
  {
    "label": "FPlatformUserSelectionCompleteParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformUserSelectionCompleteParams"
  },
  {
    "label": "FGenericPlatformApplicationMisc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformApplicationMisc"
  },
  {
    "label": "GenericApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenericApplication"
  },
  {
    "label": "EScreenSaverAction",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EScreenSaverAction"
  },
  {
    "label": "FLinearColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLinearColor"
  },
  {
    "label": "UTexture2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture2D"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / UnrealString . h \" # include \" CoreTypes . h \" # include \" GenericPlatform / GenericApplication . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # include \" HAL / IConsoleManager . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Templates / IsFloatingPoint . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Templates / Function . h \" # include \" Misc / EnumClassFlags . h \" class FAutoConsoleVariableRef ; class FFeedbackContext ; class FOutputDeviceConsole ; class FOutputDeviceError ; class IPlatformInputDeviceMapper ; enum class EScreenPhysicalAccuracy { Unknown,Approximation,Truth } ; struct FShowInputDeviceSelectorParams { FInputDeviceId InputDeviceId ; FPlatformUserId PlatformUserId ; } ; typedef TFunction<)",
    "insertText": "void(const FShowInputDeviceSelectorParams&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (struct FPlatformUserSelectionCompleteParams { FPlatformUserId SelectedUserId ; bool bSuccess ; } ; typedef TFunction<)",
    "insertText": "void(const FPlatformUserSelectionCompleteParams& Params)"
  },
  {
    "label": "RequiresOnlineEnabledProfile()",
    "kind": "Method",
    "detail": "Function (enum class EPlatformUserSelectorFlags : uint8 { None = 0,)",
    "insertText": "RequiresOnlineEnabledProfile(1 << 1), ShowSkipButton = (1 << 2), AllowGuests = (1 << 3), ShowNewUsersOnly = (1 << 4)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EPlatformUserSelectorFlags)"
  },
  {
    "label": "PreInit()",
    "kind": "Method",
    "detail": "Function (struct FGenericPlatformApplicationMisc { void)",
    "insertText": "PreInit()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "PostInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInit()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "LoadPreInitModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPreInitModules()"
  },
  {
    "label": "LoadStartupModules()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadStartupModules()"
  },
  {
    "label": "CreateConsoleOutputDevice()",
    "kind": "Method",
    "detail": "Function (} FOutputDeviceConsole*)",
    "insertText": "CreateConsoleOutputDevice()"
  },
  {
    "label": "GetErrorOutputDevice()",
    "kind": "Method",
    "detail": "Function (FOutputDeviceError*)",
    "insertText": "GetErrorOutputDevice()"
  },
  {
    "label": "GetFeedbackContext()",
    "kind": "Method",
    "detail": "Function (FFeedbackContext*)",
    "insertText": "GetFeedbackContext()"
  },
  {
    "label": "CreatePlatformInputDeviceManager()",
    "kind": "Method",
    "detail": "Function (IPlatformInputDeviceMapper*)",
    "insertText": "CreatePlatformInputDeviceManager()"
  },
  {
    "label": "CreateApplication()",
    "kind": "Method",
    "detail": "Function (class GenericApplication*)",
    "insertText": "CreateApplication()"
  },
  {
    "label": "RequestMinimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestMinimize()"
  },
  {
    "label": "IsThisApplicationForeground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsThisApplicationForeground()"
  },
  {
    "label": "RequiresVirtualKeyboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequiresVirtualKeyboard()"
  },
  {
    "label": "PreventScreenSaver()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreventScreenSaver()"
  },
  {
    "label": "IsScreensaverEnabled()",
    "kind": "Method",
    "detail": "Function (} enum EScreenSaverAction { Disable,Enable } ; bool)",
    "insertText": "IsScreensaverEnabled()"
  },
  {
    "label": "GetWindowTitleMatchingText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWindowTitleMatchingText(const TCHAR* TitleStartsWith, FString& OutTitle)"
  },
  {
    "label": "GetDPIScaleFactorAtPoint()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDPIScaleFactorAtPoint(float X, float Y)"
  },
  {
    "label": "AnchorWindowWindowPositionTopLeft()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnchorWindowWindowPositionTopLeft()"
  },
  {
    "label": "SetGamepadsBlockDeviceFeedback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGamepadsBlockDeviceFeedback(bool bAllowed)"
  },
  {
    "label": "ResetGamepadAssignments()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetGamepadAssignments()"
  },
  {
    "label": "ResetGamepadAssignmentToController()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetGamepadAssignmentToController(int32 ControllerId)"
  },
  {
    "label": "IsControllerAssignedToGamepad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsControllerAssignedToGamepad(int32 ControllerId)"
  },
  {
    "label": "GetGamepadControllerName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetGamepadControllerName(int32 ControllerId)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FString(TEXT(\"None\"))"
  },
  {
    "label": "GetGamepadButtonGlyph()",
    "kind": "Method",
    "detail": "Function (} class UTexture2D*)",
    "insertText": "GetGamepadButtonGlyph(const FGamepadKeyNames::Type& ButtonKey, uint32 ControllerIndex)"
  },
  {
    "label": "IsMotionDataEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMotionDataEnabled()"
  },
  {
    "label": "ClipboardPaste()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClipboardPaste(class FString& Dest)"
  },
  {
    "label": "GetPhysicalScreenDensity()",
    "kind": "Method",
    "detail": "Function (EScreenPhysicalAccuracy)",
    "insertText": "GetPhysicalScreenDensity(int32& OutScreenDensity)"
  },
  {
    "label": "ComputePhysicalScreenDensity()",
    "kind": "Method",
    "detail": "Function (EScreenPhysicalAccuracy)",
    "insertText": "ComputePhysicalScreenDensity(int32& OutScreenDensity)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<T,T2)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<T> && std::is_floating_point_v<T2>)> static EScreenPhysicalAccuracy ConvertInchesToPixels(T Inches, T2& OutPixels)"
  },
  {
    "label": "GetPhysicalScreenDensity()",
    "kind": "Method",
    "detail": "Function (int32 ScreenDensity = 0 ; const EScreenPhysicalAccuracy Accuracy =)",
    "insertText": "GetPhysicalScreenDensity(ScreenDensity)"
  },
  {
    "label": "T2()",
    "kind": "Method",
    "detail": "Function (OutPixels = static_cast<)",
    "insertText": "T2(Inches * ScreenDensity)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} else { OutPixels = 0 ; } return Accuracy ; } template<T,T2)",
    "insertText": "UE_REQUIRES(std::is_floating_point_v<T> && std::is_floating_point_v<T2>)> static EScreenPhysicalAccuracy ConvertPixelsToInches(T Pixels, T2& OutInches)"
  },
  {
    "label": "T2()",
    "kind": "Method",
    "detail": "Function (OutInches = static_cast<)",
    "insertText": "T2(Pixels / ScreenDensity)"
  },
  {
    "label": "ShowInputDeviceSelector()",
    "kind": "Method",
    "detail": "Function (} else { OutInches = 0 ; } return Accuracy ; } bool)",
    "insertText": "ShowInputDeviceSelector(FPlatformUserId InitiatingUserId, FShowInputDeviceSelectorComplete OnShowInputDeviceSelectorComplete)"
  }
]