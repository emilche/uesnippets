[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "CpuCounterHash",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CpuCounterHash"
  },
  {
    "label": "CpuCounterInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CpuCounterInfo"
  },
  {
    "label": "CpuProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CpuProfiler"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" value . h \" # include<string> # include<unordered_map> # include<unordered_set> namespace hwcpipe { enum class CpuCounter { Cycles,Instructions,CacheReferences,CacheMisses,BranchInstructions,BranchMisses,L1Accesses,InstrRetired,L2Accesses,L3Accesses,BusReads,BusWrites,MemReads,MemWrites,ASESpec,VFPSpec,CryptoSpec,MaxValue } ; const std::unordered_map<std::string,CpuCounter> cpu_counter_names ; struct CpuCounterHash { template<T> std::size_t)",
    "insertText": "operator()(T t)"
  },
  {
    "label": "CpuProfiler()",
    "kind": "Method",
    "detail": "Function (} } ; struct CpuCounterInfo { std::string desc ; std::string unit ; } ; typedef std::unordered_set<CpuCounter,CpuCounterHash> CpuCounterSet ; typedef std::unordered_map<CpuCounter,Value,CpuCounterHash> CpuMeasurements ; class CpuProfiler { public : ~)",
    "insertText": "CpuProfiler()"
  },
  {
    "label": "enabled_counters()",
    "kind": "Method",
    "detail": "Function (const CpuCounterSet&)",
    "insertText": "enabled_counters()"
  },
  {
    "label": "supported_counters()",
    "kind": "Method",
    "detail": "Function (const CpuCounterSet&)",
    "insertText": "supported_counters()"
  },
  {
    "label": "set_enabled_counters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_enabled_counters(const CpuCounterSet& counters)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "run()"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (const CpuMeasurements&)",
    "insertText": "sample()"
  }
]