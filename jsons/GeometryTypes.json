[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TIndexMap",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIndexMap"
  },
  {
    "label": "TIndexMap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Misc / AssertionMacros . h \" namespace UE { namespace Geometry { enum class EMeshResult { Ok = 0,Failed_NotAVertex = 1,Failed_NotATriangle = 2,Failed_NotAnEdge = 3,Failed_BrokenTopology = 1 0,Failed_HitValenceLimit = 1 1,Failed_IsBoundaryEdge = 2 0,Failed_FlippedEdgeExists = 2 1,Failed_IsBowtieVertex = 2 2,Failed_InvalidNeighbourhood = 2 3,Failed_FoundDuplicateTriangle = 2 4,Failed_CollapseTetrahedron = 2 5,Failed_CollapseTriangle = 2 6,Failed_NotABoundaryEdge = 2 7,Failed_SameOrientation = 2 8,Failed_CollapseQuad = 2 9,Failed_WouldCreateBowtie = 3 0,Failed_VertexAlreadyExists = 3 1,Failed_CannotAllocateVertex = 3 2,Failed_VertexStillReferenced = 3 3,Failed_WouldCreateNonmanifoldEdge = 5 0,Failed_TriangleAlreadyExists = 5 1,Failed_CannotAllocateTriangle = 5 2,Failed_UnrecoverableError = 1 0 0 0,Failed_Unsupported = 1 0 0 1 } ; enum class EOperationValidationResult { Ok = 0,Failed_UnknownReason = 1,Failed_InvalidTopology = 2 } ; enum class EValidityCheckFailMode { ReturnOnly = 0,Check = 1,Ensure = 2 } ; template<IntType> struct TIndexMap { protected : TMap<IntType,IntType> ForwardMap ; TMap<IntType,IntType> ReverseMap ; bool bWantForward ; bool bWantReverse ; public :)",
    "insertText": "TIndexMap()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bWantForward = bWantReverse = true ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "UnmappedID()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "UnmappedID()"
  },
  {
    "label": "GetForwardMap()",
    "kind": "Method",
    "detail": "Function (} TMap<IntType,IntType>&)",
    "insertText": "GetForwardMap()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReverseMap .)",
    "insertText": "Add(ToID, FromID)"
  },
  {
    "label": "ContainsFrom()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsFrom(IntType FromID)"
  },
  {
    "label": "ContainsTo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsTo(IntType ToID)"
  },
  {
    "label": "GetTo()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "GetTo(IntType FromID)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const IntType* FoundVal = ForwardMap .)",
    "insertText": "Find(FromID)"
  },
  {
    "label": "GetFrom()",
    "kind": "Method",
    "detail": "Function (} IntType)",
    "insertText": "GetFrom(IntType ToID)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const IntType* FoundVal = ReverseMap .)",
    "insertText": "Find(ToID)"
  },
  {
    "label": "FindTo()",
    "kind": "Method",
    "detail": "Function (} const IntType*)",
    "insertText": "FindTo(IntType FromID)"
  },
  {
    "label": "FindFrom()",
    "kind": "Method",
    "detail": "Function (} const IntType*)",
    "insertText": "FindFrom(IntType ToID)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int NumElements)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bWantReverse)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (ReverseMap .)",
    "insertText": "Reserve(NumElements)"
  }
]