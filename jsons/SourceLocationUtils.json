[
  {
    "label": "ToFullString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" Misc / SourceLocation . h \" # include \" Misc / StringBuilder . h \" namespace UE::SourceLocation { FString)",
    "insertText": "ToFullString(const FSourceLocation& Location)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# if UE_INCLUDE_SOURCE_LOCATION return)",
    "insertText": "FString(WriteToString<512>( Location.GetFileName(), \"(\", Location.GetLine(), \":\", Location.GetColumn(), \") \", Location.GetFunctionName()).ToView())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# else return)",
    "insertText": "FString()"
  },
  {
    "label": "ToFileAndLineString()",
    "kind": "Method",
    "detail": "Function (# endif } FString)",
    "insertText": "ToFileAndLineString(const FSourceLocation& Location)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (# if UE_INCLUDE_SOURCE_LOCATION return)",
    "insertText": "FString(WriteToString<300>( Location.GetFileName(), \"(\", Location.GetLine(), \")\").ToView())"
  }
]