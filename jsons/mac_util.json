[
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetSRGBColorSpace()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MAC_MAC_UTIL_H_ # define BASE_MAC_MAC_UTIL_H_ # include<AvailabilityMacros . h> # import<CoreGraphics / CoreGraphics . h> # include<stdint . h> # include<string> # include \" base / base_export . h \" namespace base { class FilePath ; } namespace base::mac { BASE_EXPORT CGColorSpaceRef)",
    "insertText": "GetSRGBColorSpace()"
  },
  {
    "label": "GetGenericRGBColorSpace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT CGColorSpaceRef)",
    "insertText": "GetGenericRGBColorSpace()"
  },
  {
    "label": "GetSystemColorSpace()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT CGColorSpaceRef)",
    "insertText": "GetSystemColorSpace()"
  },
  {
    "label": "AddToLoginItems()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "AddToLoginItems(const FilePath& app_bundle_file_path, bool hide_on_startup)"
  },
  {
    "label": "RemoveFromLoginItems()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "RemoveFromLoginItems(const FilePath& app_bundle_file_path)"
  },
  {
    "label": "WasLaunchedAsLoginOrResumeItem()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "WasLaunchedAsLoginOrResumeItem()"
  },
  {
    "label": "WasLaunchedAsLoginItemRestoreState()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "WasLaunchedAsLoginItemRestoreState()"
  },
  {
    "label": "WasLaunchedAsHiddenLoginItem()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "WasLaunchedAsHiddenLoginItem()"
  },
  {
    "label": "RemoveQuarantineAttribute()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "RemoveQuarantineAttribute(const FilePath& file_path)"
  },
  {
    "label": "MacOSVersion()",
    "kind": "Method",
    "detail": "Function (namespace internal { BASE_EXPORT int)",
    "insertText": "MacOSVersion()"
  },
  {
    "label": "DEFINE_OLD_IS_OS_FUNCS_CR_MIN_REQUIRED()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "DEFINE_OLD_IS_OS_FUNCS_CR_MIN_REQUIRED(V, DEPLOYMENT_TARGET_TEST) \\ inline bool IsOS10_##V()"
  },
  {
    "label": "DEPLOYMENT_TARGET_TEST()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEPLOYMENT_TARGET_TEST(>, V, false) \\ return internal::MacOSVersion()"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (\\ } \\ bool IsAtMostOS10_ # #)",
    "insertText": "V()"
  },
  {
    "label": "DEFINE_OLD_IS_OS_FUNCS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_OLD_IS_OS_FUNCS(V, DEPLOYMENT_TARGET_TEST) \\ DEFINE_OLD_IS_OS_FUNCS_CR_MIN_REQUIRED(V, DEPLOYMENT_TARGET_TEST) \\ inline bool IsAtLeastOS10_##V()"
  },
  {
    "label": "DEPLOYMENT_TARGET_TEST()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "DEPLOYMENT_TARGET_TEST(>=, V, true) \\ return internal::MacOSVersion()"
  },
  {
    "label": "DEFINE_IS_OS_FUNCS_CR_MIN_REQUIRED()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_IS_OS_FUNCS_CR_MIN_REQUIRED(V, DEPLOYMENT_TARGET_TEST) \\ inline bool IsOS##V()"
  },
  {
    "label": "DEFINE_IS_OS_FUNCS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "DEFINE_IS_OS_FUNCS(V, DEPLOYMENT_TARGET_TEST) \\ DEFINE_IS_OS_FUNCS_CR_MIN_REQUIRED(V, DEPLOYMENT_TARGET_TEST) \\ inline bool IsAtLeastOS##V()"
  },
  {
    "label": "OLD_TEST_DEPLOYMENT_TARGET()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "OLD_TEST_DEPLOYMENT_TARGET(OP, V, RET) \\ if (MAC_OS_X_VERSION_MIN_REQUIRED OP MAC_OS_X_VERSION_10_##V)"
  },
  {
    "label": "TEST_DEPLOYMENT_TARGET()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "TEST_DEPLOYMENT_TARGET(OP, V, RET) \\ if (MAC_OS_X_VERSION_MIN_REQUIRED OP MAC_OS_VERSION_##V##_0)"
  },
  {
    "label": "IGNORE_DEPLOYMENT_TARGET()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "IGNORE_DEPLOYMENT_TARGET(OP, V, RET) DEFINE_OLD_IS_OS_FUNCS_CR_MIN_REQUIRED(13, OLD_TEST_DEPLOYMENT_TARGET) DEFINE_OLD_IS_OS_FUNCS(14, OLD_TEST_DEPLOYMENT_TARGET) DEFINE_OLD_IS_OS_FUNCS(15, OLD_TEST_DEPLOYMENT_TARGET) DEFINE_IS_OS_FUNCS(11, TEST_DEPLOYMENT_TARGET) #ifdef MAC_OS_VERSION_12_0 DEFINE_IS_OS_FUNCS(12, TEST_DEPLOYMENT_TARGET) #else DEFINE_IS_OS_FUNCS(12, IGNORE_DEPLOYMENT_TARGET) #endif #ifdef MAC_OS_VERSION_13_0 DEFINE_IS_OS_FUNCS(13, TEST_DEPLOYMENT_TARGET) #else DEFINE_IS_OS_FUNCS(13, IGNORE_DEPLOYMENT_TARGET) #endif #undef DEFINE_OLD_IS_OS_FUNCS_CR_MIN_REQUIRED #undef DEFINE_OLD_IS_OS_FUNCS #undef DEFINE_IS_OS_FUNCS_CR_MIN_REQUIRED #undef DEFINE_IS_OS_FUNCS #undef OLD_TEST_DEPLOYMENT_TARGET #undef TEST_DEPLOYMENT_TARGET #undef IGNORE_DEPLOYMENT_TARGET inline bool IsOSLaterThan13_DontCallThis()"
  },
  {
    "label": "GetCPUType()",
    "kind": "Method",
    "detail": "Function (} enum class CPUType { kIntel,kTranslatedIntel,kArm,} ; BASE_EXPORT CPUType)",
    "insertText": "GetCPUType()"
  },
  {
    "label": "GetModelIdentifier()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "GetModelIdentifier()"
  },
  {
    "label": "ParseModelIdentifier()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT bool)",
    "insertText": "ParseModelIdentifier(const std::string& ident, std::string* type, int32_t* major, int32_t* minor)"
  },
  {
    "label": "GetOSDisplayName()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "GetOSDisplayName()"
  },
  {
    "label": "GetPlatformSerialNumber()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT std::string)",
    "insertText": "GetPlatformSerialNumber()"
  },
  {
    "label": "OpenSystemSettingsPane()",
    "kind": "Method",
    "detail": "Function (enum class SystemSettingsPane { kAccessibility_Captions,kDateTime,kNetwork_Proxies,kPrintersScanners,kPrivacySecurity_Accessibility,kPrivacySecurity_Bluetooth,kPrivacySecurity_Camera,kPrivacySecurity_Extensions_Sharing,kPrivacySecurity_LocationServices,kPrivacySecurity_Microphone,kPrivacySecurity_ScreenRecording,} ; BASE_EXPORT void)",
    "insertText": "OpenSystemSettingsPane(SystemSettingsPane pane)"
  }
]