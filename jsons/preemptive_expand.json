[
  {
    "label": "AudioMultiVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioMultiVector"
  },
  {
    "label": "BackgroundNoise",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BackgroundNoise"
  },
  {
    "label": "PreemptiveExpand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreemptiveExpand"
  },
  {
    "label": "PreemptiveExpandFactory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PreemptiveExpandFactory"
  },
  {
    "label": "PreemptiveExpand()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_PREEMPTIVE_EXPAND_H_ # define MODULES_AUDIO_CODING_NETEQ_PREEMPTIVE_EXPAND_H_ # include<stddef . h> # include<stdint . h> # include \" modules / audio_coding / neteq / time_stretch . h \" namespace webrtc { class AudioMultiVector ; class BackgroundNoise ; class PreemptiveExpand : public TimeStretch { public :)",
    "insertText": "PreemptiveExpand(int sample_rate_hz, size_t num_channels, const BackgroundNoise& background_noise, size_t overlap_samples) : TimeStretch(sample_rate_hz, num_channels, background_noise), old_data_length_per_channel_(0), overlap_samples_(overlap_samples)"
  },
  {
    "label": "PreemptiveExpand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "PreemptiveExpand(const PreemptiveExpand&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (PreemptiveExpand&)",
    "insertText": "operator(const PreemptiveExpand&)"
  },
  {
    "label": "SetParametersForPassiveSpeech()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetParametersForPassiveSpeech(size_t input_length, int16_t* best_correlation, size_t* peak_index)"
  },
  {
    "label": "PreemptiveExpandFactory()",
    "kind": "Method",
    "detail": "Function (private : size_t old_data_length_per_channel_ ; size_t overlap_samples_ ; } ; struct PreemptiveExpandFactory {)",
    "insertText": "PreemptiveExpandFactory()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} PreemptiveExpand*)",
    "insertText": "Create(int sample_rate_hz, size_t num_channels, const BackgroundNoise& background_noise, size_t overlap_samples)"
  }
]