[
  {
    "label": "FSlabAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlabAllocator"
  },
  {
    "label": "FSlabAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / ScopeLock . h \" # include \" TraceServices / Containers / Allocators . h \" namespace TraceServices { class FSlabAllocator : public ILinearAllocator { public :)",
    "insertText": "FSlabAllocator(uint64 InSlabSize) : SlabSize(InSlabSize)"
  },
  {
    "label": "FSlabAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSlabAllocator()"
  },
  {
    "label": "_()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "_(&Cs)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Slab)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (} } void*)",
    "insertText": "Allocate(uint64 Size)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (uint64 AllocationSize =)",
    "insertText": "Size(-int64(Size) & 15)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (TotalAllocatedSize + = SlabSize ; void* Allocation =)",
    "insertText": "Malloc(SlabSize, 16)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (CurrentSlab = reinterpret_cast<)",
    "insertText": "uint8(Allocation)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CurrentSlabAllocatedSize = 0 ; Slabs .)",
    "insertText": "Add(CurrentSlab)"
  }
]