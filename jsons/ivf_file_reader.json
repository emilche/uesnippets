[
  {
    "label": "IvfFileReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IvfFileReader"
  },
  {
    "label": "FrameHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameHeader"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_UTILITY_IVF_FILE_READER_H_ # define MODULES_VIDEO_CODING_UTILITY_IVF_FILE_READER_H_ # include<memory> # include<utility> # include \" absl / types / optional . h \" # include \" api / video / encoded_image . h \" # include \" api / video_codecs / video_codec . h \" # include \" rtc_base / system / file_wrapper . h \" namespace webrtc { class IvfFileReader { public : std::unique_ptr<IvfFileReader>)",
    "insertText": "Create(FileWrapper file)"
  },
  {
    "label": "IvfFileReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IvfFileReader()"
  },
  {
    "label": "IvfFileReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IvfFileReader(const IvfFileReader&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (IvfFileReader&)",
    "insertText": "operator(const IvfFileReader&)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Reset()"
  },
  {
    "label": "GetVideoCodecType()",
    "kind": "Method",
    "detail": "Function (VideoCodecType)",
    "insertText": "GetVideoCodecType()"
  },
  {
    "label": "HasMoreFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMoreFrames()"
  },
  {
    "label": "IvfFileReader()",
    "kind": "Method",
    "detail": "Function (private : struct FrameHeader { size_t frame_size ; int64_t timestamp ; } ;)",
    "insertText": "IvfFileReader(FileWrapper file) : file_(std::move(file))"
  },
  {
    "label": "ParseCodecType()",
    "kind": "Method",
    "detail": "Function (} absl::optional<VideoCodecType>)",
    "insertText": "ParseCodecType(uint8_t* buffer, size_t start_pos)"
  },
  {
    "label": "ReadNextFrameHeader()",
    "kind": "Method",
    "detail": "Function (absl::optional<FrameHeader>)",
    "insertText": "ReadNextFrameHeader()"
  }
]