[
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "UReporterBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReporterBase"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" ReporterBase . generated . h \" class UCanvas ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Line,Dash,} ; })",
    "insertText": "UCLASS(Abstract)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual void Draw(UCanvas* Canvas)"
  },
  {
    "label": "ToScreenSpace()",
    "kind": "Method",
    "detail": "Function (} bool bVisible ; protected : FVector2D)",
    "insertText": "ToScreenSpace(const FVector2D& InVector, UCanvas* Canvas)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLine(UCanvas* Canvas, const FVector2D& StartPos, const FVector2D& EndPos, const FLinearColor& Color, EReporterLineStyle::Type LineStyle = EReporterLineStyle::Line)"
  },
  {
    "label": "DrawTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawTriangle(UCanvas* Canvas, const FVector2D& Vertex1, const FVector2D& Vertex2, const FVector2D& Vertex3, const FLinearColor& Color)"
  }
]