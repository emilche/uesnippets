[
  {
    "label": "map_traits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "map_traits"
  },
  {
    "label": "value_compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "value_compare"
  },
  {
    "label": "concurrent_multimap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_multimap"
  },
  {
    "label": "concurrent_map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "concurrent_map"
  },
  {
    "label": "InputIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InputIt"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_concurrent_map_H # define __TBB_concurrent_map_H # if ! TBB_PREVIEW_CONCURRENT_ORDERED_CONTAINERS # error Set TBB_PREVIEW_CONCURRENT_ORDERED_CONTAINERS to include concurrent_map . h # endif # include \" tbb_config . h \" # if __TBB_CONCURRENT_ORDERED_CONTAINERS_PRESENT # include \" internal / _concurrent_skip_list_impl . h \" namespace tbb { namespace interface10 { template<Key,Value,KeyCompare,RandomGenerator,size_t MAX_LEVELS,Allocator,bool AllowMultimapping> class map_traits { public : size_t MAX_LEVEL = MAX_LEVELS ; using random_level_generator_type = RandomGenerator ; using key_type = Key ; using mapped_type = Value ; using compare_type = KeyCompare ; using value_type = std::pair<const key_type,mapped_type> ; using reference = value_type& ; using const_reference = const value_type& ; using allocator_type = Allocator ; using mutex_type = tbb::spin_mutex ; using node_type = tbb::internal::node_handle<key_type,value_type,internal::skip_list_node<value_type,mutex_type>,allocator_type> ; const bool allow_multimapping = AllowMultimapping ; class value_compare { public : using result_type = bool ; using first_argument_type = value_type ; using second_argument_type = value_type ; bool)",
    "insertText": "operator()(const value_type& lhs, const value_type& rhs)"
  },
  {
    "label": "value_compare()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "value_compare(compare_type c) : comp(c)"
  },
  {
    "label": "value_comp()",
    "kind": "Method",
    "detail": "Function (} class map_traits ; compare_type comp ; } ; value_compare)",
    "insertText": "value_comp(compare_type comp)"
  },
  {
    "label": "get_key()",
    "kind": "Method",
    "detail": "Function (} const key_type&)",
    "insertText": "get_key(const_reference val)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_map(const key_compare& comp, const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_map(const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_map(InputIt first, InputIt last, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(first, last, comp, alloc)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_map(InputIt first, InputIt last, const allocator_type& alloc) : base_type(first, last, key_compare(), alloc)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_map(const concurrent_map&)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_map(const concurrent_map& other, const allocator_type& alloc) : base_type(other, alloc)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_map(concurrent_map&&)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_map(concurrent_map&& other, const allocator_type& alloc) : base_type(std::move(other), alloc)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_map(std::initializer_list<value_type> init, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insert(init)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_map(std::initializer_list<value_type> init, const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_map&)",
    "insertText": "operator(const concurrent_map& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_map&)",
    "insertText": "operator(concurrent_map&& other)"
  },
  {
    "label": "at()",
    "kind": "Method",
    "detail": "Function (} mapped_type&)",
    "insertText": "at(const key_type& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator it =)",
    "insertText": "find(key)"
  },
  {
    "label": "throw_exception()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "throw_exception(tbb::internal::eid_invalid_key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return it -> second ; } mapped_type&)",
    "insertText": "operator(const key_type& key)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (it =)",
    "insertText": "emplace(std::piecewise_construct, std::forward_as_tuple(key), std::tuple<>())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return it -> second ; } mapped_type&)",
    "insertText": "operator(key_type&& key)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (it =)",
    "insertText": "emplace(std::piecewise_construct, std::forward_as_tuple(std::move(key)), std::tuple<>())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} return it -> second ; } template<P,std::enable_if<std::is_constructible<value_type,P&&>::value>::type> std::pair<iterator,bool>)",
    "insertText": "insert(P&& value)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<P,std::enable_if<std::is_constructible<value_type,P&&>::value>::type> iterator)",
    "insertText": "insert(const_iterator hint, P&& value)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_map<key_type, mapped_type, C2, Allocator>& source)"
  },
  {
    "label": "internal_merge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_merge(source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_map<key_type, mapped_type, C2, Allocator>&& source)"
  },
  {
    "label": "internal_merge()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "internal_merge(std::move(source))"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_multimap<key_type, mapped_type, C2, Allocator>& source)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (} template<C2> void)",
    "insertText": "merge(concurrent_multimap<key_type, mapped_type, C2, Allocator>&& source)"
  },
  {
    "label": "conditional_t()",
    "kind": "Method",
    "detail": "Function (} } ; # if __TBB_CPP17_DEDUCTION_GUIDES_PRESENT namespace internal { using namespace tbb::internal ; template<template<. . .> Map,Key,T,. . . Args> using c_map_t = Map<Key,T,)",
    "insertText": "conditional_t(sizeof...(Args) > 0) && !is_allocator_v<pack_element_t<0, Args...> >, pack_element_t<0, Args...>, std::less<Key> >, std::conditional_t< (sizeof...(Args) > 0) && is_allocator_v<pack_element_t<sizeof...(Args)-1, Args...> >, pack_element_t<sizeof...(Args)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (internal::c_map_t<concurrent_map, internal::iterator_key_t<It>, internal::iterator_mapped_t<It>, Args...>)",
    "insertText": "concurrent_map(It, It, Args...)"
  },
  {
    "label": "concurrent_map()",
    "kind": "Method",
    "detail": "Function (internal::c_map_t<concurrent_map, Key, T, Args...>)",
    "insertText": "concurrent_map(std::initializer_list<std::pair<const Key, T>>, Args...)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (# endif template<Key,Value,Comp = std::less<Key>,Allocator = tbb_allocator<std::pair<const Key,Value>>> class concurrent_multimap : public internal::concurrent_skip_list<map_traits<Key,Value,Comp,internal::concurrent_geometric_level_generator<6 4>,6 4,Allocator,true>> { using traits_type = map_traits<Key,Value,Comp,internal::concurrent_geometric_level_generator<6 4>,6 4,Allocator,true> ; using base_type = internal::concurrent_skip_list<traits_type> ; # if __TBB_EXTRA_DEBUG public : # endif using base_type::allow_multimapping ; public : using key_type = Key ; using mapped_type = Value ; using value_type = traits_type::value_type ; using size_type = base_type::size_type ; using difference_type = base_type::difference_type ; using key_compare = Comp ; using value_compare = base_type::value_compare ; using allocator_type = Allocator ; using reference = base_type::reference ; using const_reference = base_type::const_reference ; using pointer = base_type::pointer ; using const_pointer = base_type::pointer ; using iterator = base_type::iterator ; using const_iterator = base_type::const_iterator ; using reverse_iterator = base_type::reverse_iterator ; using const_reverse_iterator = base_type::const_reverse_iterator ; using node_type = base_type::node_type ; using base_type::end ; using base_type::find ; using base_type::emplace ; using base_type::insert ;)",
    "insertText": "concurrent_multimap()"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_multimap(const key_compare& comp, const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multimap(const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_multimap(InputIt first, InputIt last, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(first, last, comp, alloc)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (} template<class InputIt>)",
    "insertText": "concurrent_multimap(InputIt first, InputIt last, const allocator_type& alloc) : base_type(first, last, key_compare(), alloc)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multimap(const concurrent_multimap&)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_multimap(const concurrent_multimap& other, const allocator_type& alloc) : base_type(other, alloc)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multimap(concurrent_multimap&&)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "concurrent_multimap(concurrent_multimap&& other, const allocator_type& alloc) : base_type(std::move(other), alloc)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multimap(std::initializer_list<value_type> init, const key_compare& comp = Comp(), const allocator_type& alloc = allocator_type()) : base_type(comp, alloc)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "concurrent_multimap(std::initializer_list<value_type> init, const allocator_type& alloc) : base_type(key_compare(), alloc)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_multimap&)",
    "insertText": "operator(const concurrent_multimap& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} concurrent_multimap&)",
    "insertText": "operator(concurrent_multimap&& other)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (internal::c_map_t<concurrent_multimap, internal::iterator_key_t<It>, internal::iterator_mapped_t<It>, Args...>)",
    "insertText": "concurrent_multimap(It, It, Args...)"
  },
  {
    "label": "concurrent_multimap()",
    "kind": "Method",
    "detail": "Function (internal::c_map_t<concurrent_multimap, Key, T, Args...>)",
    "insertText": "concurrent_multimap(std::initializer_list<std::pair<const Key, T>>, Args...)"
  }
]