[
  {
    "label": "WhitespaceForType()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRING_SPLIT_INTERNAL_H_ # define BASE_STRINGS_STRING_SPLIT_INTERNAL_H_ # include<vector> # include \" base / strings / string_piece . h \" # include \" base / strings / string_util . h \" namespace base { namespace internal { template<CharT> BasicStringPiece<CharT>)",
    "insertText": "WhitespaceForType()"
  },
  {
    "label": "char16_t()",
    "kind": "Method",
    "detail": "Function (template<> StringPiece16 WhitespaceForType<)",
    "insertText": "char16_t()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::vector<OutputStringType> result ;)",
    "insertText": "if(str.empty())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t start = 0 ;)",
    "insertText": "while(start != std::basic_string<CharT>::npos)"
  },
  {
    "label": "find_first_of()",
    "kind": "Method",
    "detail": "Function (size_t end = str .)",
    "insertText": "find_first_of(delimiter, start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BasicStringPiece<CharT> piece ;)",
    "insertText": "if(end == std::basic_string<CharT>::npos)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (piece = str .)",
    "insertText": "substr(start)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (start = std::basic_string<CharT>::npos ; } else { piece = str .)",
    "insertText": "substr(start, end - start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (start = end + 1 ; })",
    "insertText": "if(whitespace == TRIM_WHITESPACE) piece = TrimString(piece, WhitespaceForType<CharT>(), TRIM_ALL)"
  },
  {
    "label": "SplitStringUsingSubstrT()",
    "kind": "Method",
    "detail": "Function (} return result ; } template<OutputStringType,T,CharT = T::value_type> std::vector<OutputStringType>)",
    "insertText": "SplitStringUsingSubstrT(T input, T delimiter, WhitespaceHandling whitespace, SplitResult result_type)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using Piece = BasicStringPiece<CharT> ; using size_type = Piece::size_type ; std::vector<OutputStringType> result ;)",
    "insertText": "if(delimiter.size() == 0)"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "emplace_back(input)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (end_index = input .)",
    "insertText": "find(delimiter, begin_index)"
  },
  {
    "label": "substr()",
    "kind": "Method",
    "detail": "Function (Piece term = end_index = = Piece::npos ? input .)",
    "insertText": "substr(begin_index) : input.substr(begin_index, end_index - begin_index)"
  }
]