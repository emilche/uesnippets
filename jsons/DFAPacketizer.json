[
  {
    "label": "MCInstrDesc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCInstrDesc"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "MachineLoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLoopInfo"
  },
  {
    "label": "MachineDominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineDominatorTree"
  },
  {
    "label": "InstrItineraryData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstrItineraryData"
  },
  {
    "label": "DefaultVLIWScheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultVLIWScheduler"
  },
  {
    "label": "SUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnit"
  },
  {
    "label": "DFAPacketizer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DFAPacketizer"
  },
  {
    "label": "VLIWPacketizerList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VLIWPacketizerList"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_CODEGEN_DFAPACKETIZER_H # define LLVM_CODEGEN_DFAPACKETIZER_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / CodeGen / MachineBasicBlock . h \" # include<map> namespace llvm { class MCInstrDesc ; class MachineInstr ; class MachineLoopInfo ; class MachineDominatorTree ; class InstrItineraryData ; class DefaultVLIWScheduler ; class SUnit ; class DFAPacketizer { private : typedef std::pair<unsigned,unsigned> UnsignPair ; const InstrItineraryData* InstrItins ; int CurrentState ; const)",
    "insertText": "int(*DFAStateInputTable)"
  },
  {
    "label": "ReadTable()",
    "kind": "Method",
    "detail": "Function (const unsigned* DFAStateEntryTable ; DenseMap<UnsignPair,unsigned> CachedTable ; void)",
    "insertText": "ReadTable(unsigned int state)"
  },
  {
    "label": "DFAPacketizer()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DFAPacketizer(const InstrItineraryData *I, const int (*SIT)[2], const unsigned *SET)"
  },
  {
    "label": "clearResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearResources()"
  },
  {
    "label": "canReserveResources()",
    "kind": "Method",
    "detail": "Function (CurrentState = 0 ; } bool)",
    "insertText": "canReserveResources(const llvm::MCInstrDesc *MID)"
  },
  {
    "label": "reserveResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserveResources(const llvm::MCInstrDesc *MID)"
  },
  {
    "label": "canReserveResources()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "canReserveResources(llvm::MachineInstr *MI)"
  },
  {
    "label": "reserveResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reserveResources(llvm::MachineInstr *MI)"
  },
  {
    "label": "getInstrItins()",
    "kind": "Method",
    "detail": "Function (const InstrItineraryData*)",
    "insertText": "getInstrItins()"
  },
  {
    "label": "VLIWPacketizerList()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VLIWPacketizerList()"
  },
  {
    "label": "PacketizeMIs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketizeMIs(MachineBasicBlock *MBB, MachineBasicBlock::iterator BeginItr, MachineBasicBlock::iterator EndItr)"
  },
  {
    "label": "getResourceTracker()",
    "kind": "Method",
    "detail": "Function (DFAPacketizer*)",
    "insertText": "getResourceTracker()"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (MachineBasicBlock::iterator MII = MI ; CurrentPacketMIs .)",
    "insertText": "push_back(MI)"
  },
  {
    "label": "reserveResources()",
    "kind": "Method",
    "detail": "Function (ResourceTracker ->)",
    "insertText": "reserveResources(MI)"
  },
  {
    "label": "initPacketizerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initPacketizerState()"
  }
]