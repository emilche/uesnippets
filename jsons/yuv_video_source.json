[
  {
    "label": "YUVVideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "YUVVideoSource"
  },
  {
    "label": "YUVVideoSource()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_YUV_VIDEO_SOURCE_H_ # define VPX_TEST_YUV_VIDEO_SOURCE_H_ # include<cstdio> # include<cstdlib> # include<string> # include \" test / video_source . h \" # include \" vpx / vpx_image . h \" namespace libvpx_test { class YUVVideoSource : public VideoSource { public :)",
    "insertText": "YUVVideoSource(const std::string &file_name, vpx_img_fmt format, unsigned int width, unsigned int height, int rate_numerator, int rate_denominator, unsigned int start, int limit) : file_name_(file_name), input_file_(nullptr), img_(nullptr), start_(start), limit_(limit), frame_(0), width_(0), height_(0), format_(VPX_IMG_FMT_NONE), framerate_numerator_(rate_numerator), framerate_denominator_(rate_denominator)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSize(width, height, format)"
  },
  {
    "label": "YUVVideoSource()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "YUVVideoSource()"
  },
  {
    "label": "vpx_img_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_img_free(img_)"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "OpenTestDataFile()",
    "kind": "Method",
    "detail": "Function (input_file_ =)",
    "insertText": "OpenTestDataFile(file_name_)"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_NE(input_file_, nullptr)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek(input_file_, static_cast<unsigned>(raw_size_) * start_, SEEK_SET)"
  },
  {
    "label": "FillFrame()",
    "kind": "Method",
    "detail": "Function (} frame_ = start_ ;)",
    "insertText": "FillFrame()"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Next()"
  },
  {
    "label": "img()",
    "kind": "Method",
    "detail": "Function (} vpx_image_t*)",
    "insertText": "img()"
  },
  {
    "label": "pts()",
    "kind": "Method",
    "detail": "Function (} vpx_codec_pts_t)",
    "insertText": "pts()"
  },
  {
    "label": "frame()",
    "kind": "Method",
    "detail": "Function (const vpx_rational_t t = { framerate_denominator_,framerate_numerator_ } ; return t ; } unsigned int)",
    "insertText": "frame()"
  },
  {
    "label": "vpx_img_alloc()",
    "kind": "Method",
    "detail": "Function (img_ =)",
    "insertText": "vpx_img_alloc(nullptr, format, width, height, 1)"
  },
  {
    "label": "ASSERT_NE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_NE(img_, nullptr)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (width_ = width ; height_ = height ; format_ = format ;)",
    "insertText": "switch(format)"
  }
]