[
  {
    "label": "FGCFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGCFlags"
  },
  {
    "label": "SetUnreachable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" UObject / GarbageCollection . h \" # include \" UObject / Object . h \" # include \" UObject / UObjectArray . h \" namespace UE::GC::Private { class FGCFlags { EInternalObjectFlags ReachableObjectFlag ; EInternalObjectFlags MaybeUnreachableObjectFlag ; public : void)",
    "insertText": "SetUnreachable(FUObjectItem* ObjectItem)"
  },
  {
    "label": "AtomicallySetFlag_ForGC()",
    "kind": "Method",
    "detail": "Function (ObjectItem ->)",
    "insertText": "AtomicallySetFlag_ForGC(EInternalObjectFlags::Unreachable)"
  },
  {
    "label": "SetReachable_ForGC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetReachable_ForGC(FUObjectItem* ObjectItem)"
  },
  {
    "label": "AtomicallySetFlag_ForGC()",
    "kind": "Method",
    "detail": "Function (ObjectItem ->)",
    "insertText": "AtomicallySetFlag_ForGC(ReachableObjectFlag)"
  },
  {
    "label": "IsReachable_ForGC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsReachable_ForGC(const FUObjectItem* ObjectItem)"
  },
  {
    "label": "SetMaybeUnreachable_ForGC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaybeUnreachable_ForGC(FUObjectItem* ObjectItem)"
  },
  {
    "label": "AtomicallyClearFlag_ForGC()",
    "kind": "Method",
    "detail": "Function (ObjectItem ->)",
    "insertText": "AtomicallyClearFlag_ForGC(ReachableObjectFlag)"
  },
  {
    "label": "AtomicallySetFlag_ForGC()",
    "kind": "Method",
    "detail": "Function (ObjectItem ->)",
    "insertText": "AtomicallySetFlag_ForGC(MaybeUnreachableObjectFlag)"
  },
  {
    "label": "ClearMaybeUnreachable_ForGC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearMaybeUnreachable_ForGC(FUObjectItem* ObjectItem)"
  },
  {
    "label": "AtomicallyClearFlag_ForGC()",
    "kind": "Method",
    "detail": "Function (ObjectItem ->)",
    "insertText": "AtomicallyClearFlag_ForGC(MaybeUnreachableObjectFlag)"
  },
  {
    "label": "IsMaybeUnreachable_ForGC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMaybeUnreachable_ForGC(const FUObjectItem* ObjectItem)"
  },
  {
    "label": "IsMaybeUnreachable_ForGC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMaybeUnreachable_ForGC(const UObject* Object)"
  },
  {
    "label": "IndexToObjectUnsafeForGC()",
    "kind": "Method",
    "detail": "Function (const FUObjectItem* ObjectItem = GUObjectArray .)",
    "insertText": "IndexToObjectUnsafeForGC(GUObjectArray.ObjectToIndex(Object))"
  },
  {
    "label": "ThisThreadAtomicallyClearedRFUnreachable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ThisThreadAtomicallyClearedRFUnreachable(FUObjectItem* ObjectItem)"
  },
  {
    "label": "ThisThreadAtomicallySetFlag_ForGC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ThisThreadAtomicallySetFlag_ForGC(FUObjectItem* ObjectItem, EInternalObjectFlags Flag)"
  },
  {
    "label": "ThisThreadAtomicallyClearedFlag_ForGC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ThisThreadAtomicallyClearedFlag_ForGC(FUObjectItem* ObjectItem, EInternalObjectFlags Flag)"
  },
  {
    "label": "FastMarkAsReachableInterlocked_ForGC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FastMarkAsReachableInterlocked_ForGC(FUObjectItem* ObjectItem)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAnd(&ObjectItem->Flags, ~int32(MaybeUnreachableObjectFlag))"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedOr(&ObjectItem->Flags, int32(ReachableObjectFlag))"
  },
  {
    "label": "FastMarkAsReachableAndClearReachableInClusterInterlocked_ForGC()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FastMarkAsReachableAndClearReachableInClusterInterlocked_ForGC(FUObjectItem* ObjectItem)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedAnd(&ObjectItem->Flags, ~int32(MaybeUnreachableObjectFlag | EInternalObjectFlags::ReachableInCluster))"
  },
  {
    "label": "MarkAsReachableInterlocked_ForGC()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "MarkAsReachableInterlocked_ForGC(FUObjectItem* ObjectItem)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 FlagToClear =)",
    "insertText": "int32(MaybeUnreachableObjectFlag)"
  },
  {
    "label": "InterlockedAnd()",
    "kind": "Method",
    "detail": "Function (int32 Old =)",
    "insertText": "InterlockedAnd(&ObjectItem->Flags, ~FlagToClear)"
  },
  {
    "label": "SwapReachableAndMaybeUnreachable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SwapReachableAndMaybeUnreachable()"
  },
  {
    "label": "LockInternalArray()",
    "kind": "Method",
    "detail": "Function (GUObjectArray .)",
    "insertText": "LockInternalArray()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(ReachableObjectFlag, MaybeUnreachableObjectFlag)"
  },
  {
    "label": "UnlockInternalArray()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS UE::GC::GReachableObjectFlag = ReachableObjectFlag ; UE::GC::GMaybeUnreachableObjectFlag = MaybeUnreachableObjectFlag ; PRAGMA_ENABLE_DEPRECATION_WARNINGS GUObjectArray .)",
    "insertText": "UnlockInternalArray()"
  },
  {
    "label": "GetReachableFlagValue_ForGC()",
    "kind": "Method",
    "detail": "Function (} EInternalObjectFlags)",
    "insertText": "GetReachableFlagValue_ForGC()"
  }
]