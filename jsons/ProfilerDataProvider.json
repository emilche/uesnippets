[
  {
    "label": "IDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDataProvider"
  },
  {
    "label": "FGraphDataSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphDataSource"
  },
  {
    "label": "FEventGraphData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEventGraphData"
  },
  {
    "label": "TDataProviderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDataProviderType"
  },
  {
    "label": "FArrayDataProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayDataProvider"
  },
  {
    "label": "IDataProvider()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if STATS # include \" ProfilerCommon . h \" # include \" ProfilerSample . h \" class IDataProvider : public TSharedFromThis<IDataProvider> { class FGraphDataSource ; class FEventGraphData ; public :)",
    "insertText": "IDataProvider() : ElapsedTimeMS( 0.0f ) , LastSecondFrameTimeMS( 0.0f ) , FrameIndex( 0 ) , LastSecondFrameCounter( 0 ) , bHasAddedSecondStartMarker( false)"
  },
  {
    "label": "IDataProvider()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IDataProvider()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (} protected : template<class TDataProviderType> TSharedRef<IDataProvider>)",
    "insertText": "Duplicate(const uint32 FrameStartIndex, const uint32 NumFrames = 1)"
  },
  {
    "label": "GetNumFrames()",
    "kind": "Method",
    "detail": "Function (const uint32 TotalNumFrames =)",
    "insertText": "GetNumFrames()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const uint32 FrameEndIndex = FrameStartIndex + NumFrames ;)",
    "insertText": "check(FrameEndIndex <= TotalNumFrames)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IDataProvider> DataProvider =)",
    "insertText": "MakeShareable(new TDataProviderType)"
  },
  {
    "label": "InternalDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalDuplicate(DataProvider, FrameStartIndex, FrameEndIndex)"
  },
  {
    "label": "AddHierarchicalSample()",
    "kind": "Method",
    "detail": "Function (public : const uint32)",
    "insertText": "AddHierarchicalSample(const uint32 InThreadID, const uint32 InGroupID, const uint32 InStatID, const uint32 InDurationCycles, const uint32 InCallsPerFrame, const uint32 InParentIndex = FProfilerSample::InvalidIndex)"
  },
  {
    "label": "AddCounterSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCounterSample(const uint32 InGroupID, const uint32 InStatID, const double InCounter, const EProfilerSampleTypes::Type InProfilerSampleType)"
  },
  {
    "label": "AddDuplicatedSample()",
    "kind": "Method",
    "detail": "Function (protected : const uint32)",
    "insertText": "AddDuplicatedSample(const FProfilerSample& ProfilerSample)"
  },
  {
    "label": "GetCollection()",
    "kind": "Method",
    "detail": "Function (public : const FProfilerSampleArray&)",
    "insertText": "GetCollection()"
  },
  {
    "label": "AdvanceFrame()",
    "kind": "Method",
    "detail": "Function (public : const uint32)",
    "insertText": "AdvanceFrame(const float DeltaTimeMS)"
  },
  {
    "label": "GetNumSamples()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "GetNumSamples()"
  },
  {
    "label": "GetTotalTimeMS()",
    "kind": "Method",
    "detail": "Function (} const double)",
    "insertText": "GetTotalTimeMS()"
  },
  {
    "label": "GetSamplesIndicesForFrame()",
    "kind": "Method",
    "detail": "Function (const FIntPoint&)",
    "insertText": "GetSamplesIndicesForFrame(const uint32 InFrameIndex)"
  },
  {
    "label": "FArrayDataProvider()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FIntPoint> FrameIndices ; TArray<float> FrameTimes ; TArray<float> ElapsedFrameTimes ; TArray<uint32> FrameCounters ; TArray<uint32> AccumulatedFrameCounters ; double ElapsedTimeMS ; private : float LastSecondFrameTimeMS ; uint32 FrameIndex ; uint32 LastSecondFrameCounter ; bool bHasAddedSecondStartMarker ; } ; class FArrayDataProvider : public IDataProvider { public :)",
    "insertText": "FArrayDataProvider() : IDataProvider() , ChildrenIndicesMemoryUsage( 0)"
  },
  {
    "label": "FArrayDataProvider()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FArrayDataProvider()"
  },
  {
    "label": "GetMemoryUsage()",
    "kind": "Method",
    "detail": "Function (const SIZE_T)",
    "insertText": "GetMemoryUsage()"
  }
]