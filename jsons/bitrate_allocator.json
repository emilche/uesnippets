[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "BitrateAllocatorObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitrateAllocatorObserver"
  },
  {
    "label": "MediaStreamAllocationConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MediaStreamAllocationConfig"
  },
  {
    "label": "BitrateAllocatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitrateAllocatorInterface"
  },
  {
    "label": "AllocatableTrack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AllocatableTrack"
  },
  {
    "label": "BitrateAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BitrateAllocator"
  },
  {
    "label": "LimitObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LimitObserver"
  },
  {
    "label": "OnBitrateUpdated()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_BITRATE_ALLOCATOR_H_ # define CALL_BITRATE_ALLOCATOR_H_ # include<stdint . h> # include<map> # include<memory> # include<string> # include<utility> # include<vector> # include \" api / call / bitrate_allocation . h \" # include \" api / sequence_checker . h \" # include \" api / transport / network_types . h \" # include \" rtc_base / system / no_unique_address . h \" namespace webrtc { class Clock ; class BitrateAllocatorObserver { public : uint32_t)",
    "insertText": "OnBitrateUpdated(BitrateAllocationUpdate update)"
  },
  {
    "label": "BitrateAllocatorObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "BitrateAllocatorObserver()"
  },
  {
    "label": "AddObserver()",
    "kind": "Method",
    "detail": "Function (} } ; struct MediaStreamAllocationConfig { uint32_t min_bitrate_bps ; uint32_t max_bitrate_bps ; uint32_t pad_up_bitrate_bps ; int64_t priority_bitrate_bps ; bool enforce_min_bitrate ; double bitrate_priority ; } ; class BitrateAllocatorInterface { public : void)",
    "insertText": "AddObserver(BitrateAllocatorObserver* observer, MediaStreamAllocationConfig config)"
  },
  {
    "label": "RemoveObserver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveObserver(BitrateAllocatorObserver* observer)"
  },
  {
    "label": "GetStartBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetStartBitrate(BitrateAllocatorObserver* observer)"
  },
  {
    "label": "BitrateAllocatorInterface()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "BitrateAllocatorInterface()"
  },
  {
    "label": "AllocatableTrack()",
    "kind": "Method",
    "detail": "Function (} ; namespace bitrate_allocator_impl { struct AllocatableTrack {)",
    "insertText": "AllocatableTrack(BitrateAllocatorObserver* observer, MediaStreamAllocationConfig allocation_config) : observer(observer), config(allocation_config), allocated_bitrate_bps(-1), media_ratio(1.0)"
  },
  {
    "label": "LastAllocatedBitrate()",
    "kind": "Method",
    "detail": "Function (} BitrateAllocatorObserver* observer ; MediaStreamAllocationConfig config ; int64_t allocated_bitrate_bps ; double media_ratio ; uint32_t)",
    "insertText": "LastAllocatedBitrate()"
  },
  {
    "label": "MinBitrateWithHysteresis()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "MinBitrateWithHysteresis()"
  },
  {
    "label": "OnAllocationLimitsChanged()",
    "kind": "Method",
    "detail": "Function (} ; } class BitrateAllocator : public BitrateAllocatorInterface { public : class LimitObserver { public : void)",
    "insertText": "OnAllocationLimitsChanged(BitrateAllocationLimits limits)"
  },
  {
    "label": "LimitObserver()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "LimitObserver()"
  },
  {
    "label": "BitrateAllocator()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "BitrateAllocator(LimitObserver* limit_observer)"
  },
  {
    "label": "BitrateAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BitrateAllocator()"
  },
  {
    "label": "UpdateStartRate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStartRate(uint32_t start_rate_bps)"
  },
  {
    "label": "OnNetworkEstimateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworkEstimateChanged(TargetTransferRate msg)"
  },
  {
    "label": "UpdateAllocationLimits()",
    "kind": "Method",
    "detail": "Function (private : using AllocatableTrack = bitrate_allocator_impl::AllocatableTrack ; void)",
    "insertText": "UpdateAllocationLimits() RTC_RUN_ON(&sequenced_checker_)"
  },
  {
    "label": "GetTransmissionMaxBitrateMultiplier()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "GetTransmissionMaxBitrateMultiplier()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS SequenceChecker sequenced_checker_ ; LimitObserver* const limit_observer_)",
    "insertText": "RTC_GUARDED_BY(&sequenced_checker_)"
  }
]