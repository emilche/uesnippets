[
  {
    "label": "SimplicialCholeskyMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SimplicialCholeskyMode"
  },
  {
    "label": "simplicial_cholesky_grab_input",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "simplicial_cholesky_grab_input"
  },
  {
    "label": "SimplicialCholeskyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimplicialCholeskyBase"
  },
  {
    "label": "keep_diag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "keep_diag"
  },
  {
    "label": "SimplicialLLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimplicialLLT"
  },
  {
    "label": "SimplicialLDLT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimplicialLDLT"
  },
  {
    "label": "SimplicialCholesky",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimplicialCholesky"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SIMPLICIAL_CHOLESKY_H # define EIGEN_SIMPLICIAL_CHOLESKY_H namespace Eigen { enum SimplicialCholeskyMode { SimplicialCholeskyLLT,SimplicialCholeskyLDLT } ; namespace internal { template<CholMatrixType,InputMatrixType> struct simplicial_cholesky_grab_input { typedef CholMatrixType const* ConstCholMatrixPtr ; void)",
    "insertText": "run(const InputMatrixType& input, ConstCholMatrixPtr &pmat, CholMatrixType &tmp)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (tmp = input ; pmat =& tmp ; } } ; template<MatrixType> struct simplicial_cholesky_grab_input<MatrixType,MatrixType> { typedef MatrixType const* ConstMatrixPtr ; void)",
    "insertText": "run(const MatrixType& input, ConstMatrixPtr &pmat, MatrixType &)"
  },
  {
    "label": "SimplicialCholeskyBase()",
    "kind": "Method",
    "detail": "Function (pmat =& input ; } } ; } template<Derived> class SimplicialCholeskyBase : public SparseSolverBase<Derived> { typedef SparseSolverBase<Derived> Base ; using Base::m_isInitialized ; public : typedef internal::traits<Derived>::MatrixType MatrixType ; typedef internal::traits<Derived>::OrderingType OrderingType ; enum { UpLo = internal::traits<Derived>::UpLo } ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> CholMatrixType ; typedef CholMatrixType const* ConstCholMatrixPtr ; typedef Matrix<Scalar,Dynamic,1> VectorType ; typedef Matrix<StorageIndex,Dynamic,1> VectorI ; enum { ColsAtCompileTime = MatrixType::ColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; public : using Base::derived ;)",
    "insertText": "SimplicialCholeskyBase() : m_info(Success), m_factorizationIsOk(false), m_analysisIsOk(false), m_shiftOffset(0), m_shiftScale(1)"
  },
  {
    "label": "SimplicialCholeskyBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SimplicialCholeskyBase(const MatrixType& matrix) : m_info(Success), m_factorizationIsOk(false), m_analysisIsOk(false), m_shiftOffset(0), m_shiftScale(1)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived().compute(matrix)"
  },
  {
    "label": "SimplicialCholeskyBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SimplicialCholeskyBase()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (} Derived&)",
    "insertText": "derived()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "cols()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "rows()"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (} ComputationInfo)",
    "insertText": "info()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Decomposition is not initialized.\")"
  },
  {
    "label": "dumpMemory()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN template<Stream> void)",
    "insertText": "dumpMemory(Stream& s)"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (int total = 0 ; s<<\")",
    "insertText": "L((total+=(m_matrix.cols()+1) * sizeof(int) + m_matrix.nonZeros()*(sizeof(int)+sizeof(Scalar))) >> 20)"
  },
  {
    "label": "diag()",
    "kind": "Method",
    "detail": "Function (s<<\")",
    "insertText": "diag((total+=m_diag.size() * sizeof(Scalar)) >> 20)"
  },
  {
    "label": "tree()",
    "kind": "Method",
    "detail": "Function (s<<\")",
    "insertText": "tree((total+=m_parent.size() * sizeof(int)) >> 20)"
  },
  {
    "label": "nonzeros()",
    "kind": "Method",
    "detail": "Function (s<<\")",
    "insertText": "nonzeros((total+=m_nonZerosPerCol.size() * sizeof(int)) >> 20)"
  },
  {
    "label": "perm()",
    "kind": "Method",
    "detail": "Function (s<<\")",
    "insertText": "perm((total+=m_P.size() * sizeof(int)) >> 20)"
  },
  {
    "label": "perm()",
    "kind": "Method",
    "detail": "Function (s<<\")",
    "insertText": "perm((total+=m_Pinv.size() * sizeof(int)) >> 20)"
  },
  {
    "label": "TOTAL()",
    "kind": "Method",
    "detail": "Function (s<<\")",
    "insertText": "TOTAL(total>> 20)"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_impl(const MatrixBase<Rhs> &b, MatrixBase<Dest> &dest)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_factorizationIsOk && \"The decomposition is not in a valid state for solving, you must first call either compute() or symbolic()/numeric()\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_matrix.rows()==b.rows())"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_impl(const SparseMatrixBase<Rhs> &b, SparseMatrixBase<Dest> &dest)"
  },
  {
    "label": "solve_sparse_through_dense_panels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "solve_sparse_through_dense_panels(derived(), b, dest)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} # endif protected : template<bool DoLDLT> void)",
    "insertText": "compute(const MatrixType& matrix)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(matrix.rows()==matrix.cols())"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (CholMatrixType)",
    "insertText": "tmp(size,size)"
  },
  {
    "label": "ordering()",
    "kind": "Method",
    "detail": "Function (ConstCholMatrixPtr pmat ;)",
    "insertText": "ordering(matrix, pmat, tmp)"
  },
  {
    "label": "analyzePattern_preordered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern_preordered(*pmat, DoLDLT)"
  },
  {
    "label": "DoLDLT()",
    "kind": "Method",
    "detail": "Function (factorize_preordered<)",
    "insertText": "DoLDLT(*pmat)"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (} template<bool DoLDLT> void)",
    "insertText": "factorize(const MatrixType& a)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(a.rows()==a.cols())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ConstCholMatrixPtr pmat ;)",
    "insertText": "if(m_P.size() == 0 && (int(UpLo) & int(Upper)) == Upper)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (internal::simplicial_cholesky_grab_input<CholMatrixType,MatrixType)",
    "insertText": "run(a, pmat, tmp)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (} else { tmp . template selfadjointView<)",
    "insertText": "Upper() = a.template selfadjointView<UpLo>().twistedBy(m_P)"
  },
  {
    "label": "factorize_preordered()",
    "kind": "Method",
    "detail": "Function (} template<bool DoLDLT> void)",
    "insertText": "factorize_preordered(const CholMatrixType& a)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(const MatrixType& a, bool doLDLT)"
  },
  {
    "label": "ordering()",
    "kind": "Method",
    "detail": "Function (ConstCholMatrixPtr pmat ;)",
    "insertText": "ordering(a, pmat, tmp)"
  },
  {
    "label": "analyzePattern_preordered()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern_preordered(*pmat,doLDLT)"
  },
  {
    "label": "analyzePattern_preordered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "analyzePattern_preordered(const CholMatrixType& a, bool doLDLT)"
  },
  {
    "label": "ordering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ordering(const MatrixType& a, ConstCholMatrixPtr &pmat, CholMatrixType& ap)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct keep_diag { bool)",
    "insertText": "operator() (const Index& row, const Index& col, const Scalar&)"
  },
  {
    "label": "getU()",
    "kind": "Method",
    "detail": "Function (} MatrixU)",
    "insertText": "getU(const CholMatrixType& m)"
  },
  {
    "label": "getL()",
    "kind": "Method",
    "detail": "Function (} } ; template<_MatrixType,int _UpLo,_Ordering> struct traits<SimplicialLDLT<_MatrixType,_UpLo,_Ordering>> { typedef _MatrixType MatrixType ; typedef _Ordering OrderingType ; enum { UpLo = _UpLo } ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> CholMatrixType ; typedef TriangularView<const CholMatrixType,Eigen::UnitLower> MatrixL ; typedef TriangularView<const CholMatrixType::AdjointReturnType,Eigen::UnitUpper> MatrixU ; MatrixL)",
    "insertText": "getL(const CholMatrixType& m)"
  },
  {
    "label": "SimplicialLLT()",
    "kind": "Method",
    "detail": "Function (} } ; template<_MatrixType,int _UpLo,_Ordering> struct traits<SimplicialCholesky<_MatrixType,_UpLo,_Ordering>> { typedef _MatrixType MatrixType ; typedef _Ordering OrderingType ; enum { UpLo = _UpLo } ; } ; } template<_MatrixType,int _UpLo,_Ordering> class SimplicialLLT : public SimplicialCholeskyBase<SimplicialLLT<_MatrixType,_UpLo,_Ordering>> { public : typedef _MatrixType MatrixType ; enum { UpLo = _UpLo } ; typedef SimplicialCholeskyBase<SimplicialLLT> Base ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,Index> CholMatrixType ; typedef Matrix<Scalar,Dynamic,1> VectorType ; typedef internal::traits<SimplicialLLT> Traits ; typedef Traits::MatrixL MatrixL ; typedef Traits::MatrixU MatrixU ; public :)",
    "insertText": "SimplicialLLT() : Base()"
  },
  {
    "label": "SimplicialLLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SimplicialLLT(const MatrixType& matrix) : Base(matrix)"
  },
  {
    "label": "matrixL()",
    "kind": "Method",
    "detail": "Function (} const MatrixL)",
    "insertText": "matrixL()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Base::m_factorizationIsOk && \"Simplicial LLT not factorized\")"
  },
  {
    "label": "matrixU()",
    "kind": "Method",
    "detail": "Function (} const MatrixU)",
    "insertText": "matrixU()"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (Base::template compute<)",
    "insertText": "false(matrix)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(a, false)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (Base::template factorize<)",
    "insertText": "false(a)"
  },
  {
    "label": "determinant()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "determinant()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (Scalar detL = Base::m_matrix .)",
    "insertText": "diagonal().prod()"
  },
  {
    "label": "SimplicialLDLT()",
    "kind": "Method",
    "detail": "Function (} } ; template<_MatrixType,int _UpLo,_Ordering> class SimplicialLDLT : public SimplicialCholeskyBase<SimplicialLDLT<_MatrixType,_UpLo,_Ordering>> { public : typedef _MatrixType MatrixType ; enum { UpLo = _UpLo } ; typedef SimplicialCholeskyBase<SimplicialLDLT> Base ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> CholMatrixType ; typedef Matrix<Scalar,Dynamic,1> VectorType ; typedef internal::traits<SimplicialLDLT> Traits ; typedef Traits::MatrixL MatrixL ; typedef Traits::MatrixU MatrixU ; public :)",
    "insertText": "SimplicialLDLT() : Base()"
  },
  {
    "label": "SimplicialLDLT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SimplicialLDLT(const MatrixType& matrix) : Base(matrix)"
  },
  {
    "label": "vectorD()",
    "kind": "Method",
    "detail": "Function (} const VectorType)",
    "insertText": "vectorD()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Base::m_factorizationIsOk && \"Simplicial LDLT not factorized\")"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (Base::template compute<)",
    "insertText": "true(matrix)"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(a, true)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (Base::template factorize<)",
    "insertText": "true(a)"
  },
  {
    "label": "SimplicialCholesky()",
    "kind": "Method",
    "detail": "Function (} } ; template<_MatrixType,int _UpLo,_Ordering> class SimplicialCholesky : public SimplicialCholeskyBase<SimplicialCholesky<_MatrixType,_UpLo,_Ordering>> { public : typedef _MatrixType MatrixType ; enum { UpLo = _UpLo } ; typedef SimplicialCholeskyBase<SimplicialCholesky> Base ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef SparseMatrix<Scalar,ColMajor,StorageIndex> CholMatrixType ; typedef Matrix<Scalar,Dynamic,1> VectorType ; typedef internal::traits<SimplicialCholesky> Traits ; typedef internal::traits<SimplicialLDLT<MatrixType,UpLo>> LDLTTraits ; typedef internal::traits<SimplicialLLT<MatrixType,UpLo>> LLTTraits ; public :)",
    "insertText": "SimplicialCholesky() : Base(), m_LDLT(true)"
  },
  {
    "label": "SimplicialCholesky()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SimplicialCholesky(const MatrixType& matrix) : Base(), m_LDLT(true)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix)"
  },
  {
    "label": "setMode()",
    "kind": "Method",
    "detail": "Function (} SimplicialCholesky&)",
    "insertText": "setMode(SimplicialCholeskyMode mode)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Base::m_factorizationIsOk && \"Simplicial Cholesky not factorized\")"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "analyzePattern(a, m_LDLT)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Base::m_factorizationIsOk && \"The decomposition is not in a valid state for solving, you must first call either compute() or symbolic()/numeric()\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Base::m_matrix.rows()==b.rows())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Base::m_diag.size()>0) dest = Base::m_diag.real().asDiagonal().inverse()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Base::m_P.size()>0)"
  },
  {
    "label": "solve_sparse_through_dense_panels()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "solve_sparse_through_dense_panels(*this, b, dest)"
  },
  {
    "label": "CholMatrixType()",
    "kind": "Method",
    "detail": "Function (} else { Scalar detL = Diagonal<const)",
    "insertText": "CholMatrixType(Base::m_matrix).prod()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pmat =& ap ;)",
    "insertText": "if(!internal::is_same<OrderingType,NaturalOrdering<Index> >::value)"
  },
  {
    "label": "UpLo()",
    "kind": "Method",
    "detail": "Function ({ CholMatrixType C ; C = a . template selfadjointView<)",
    "insertText": "UpLo()"
  },
  {
    "label": "ordering()",
    "kind": "Method",
    "detail": "Function (OrderingType ordering ;)",
    "insertText": "ordering(C,m_Pinv)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_Pinv.size()>0) m_P = m_Pinv.inverse()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (ap .)",
    "insertText": "resize(size,size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else { m_Pinv .)",
    "insertText": "resize(0)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (ap . template selfadjointView<)",
    "insertText": "Upper() = a.template selfadjointView<UpLo>()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} else internal::simplicial_cholesky_grab_input<CholMatrixType,MatrixType)",
    "insertText": "run(a, pmat, ap)"
  }
]