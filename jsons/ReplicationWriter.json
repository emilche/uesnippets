[
  {
    "label": "UReplicationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationSystem"
  },
  {
    "label": "UNetObjectBlobHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UNetObjectBlobHandler"
  },
  {
    "label": "UPartialNetObjectAttachmentHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPartialNetObjectAttachmentHandler"
  },
  {
    "label": "UReplicationBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationBridge"
  },
  {
    "label": "FNetBitStreamReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamReader"
  },
  {
    "label": "FNetBitStreamWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitStreamWriter"
  },
  {
    "label": "FNetObjectAttachment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetObjectAttachment"
  },
  {
    "label": "FNetSerializationContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetSerializationContext"
  },
  {
    "label": "FReplicationProtocol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationProtocol"
  },
  {
    "label": "FChangeMaskCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeMaskCache"
  },
  {
    "label": "FNetRefHandleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetRefHandleManager"
  },
  {
    "label": "FReliableNetBlobQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReliableNetBlobQueue"
  },
  {
    "label": "FReplicationConditionals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationConditionals"
  },
  {
    "label": "FReplicationFiltering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationFiltering"
  },
  {
    "label": "FReplicationSystemInternal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationSystemInternal"
  },
  {
    "label": "FDeltaCompressionBaselineManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeltaCompressionBaselineManager"
  },
  {
    "label": "FDeltaCompressionBaseline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeltaCompressionBaseline"
  },
  {
    "label": "FReplicationWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReplicationWriter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EFlushFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFlushFlags"
  },
  {
    "label": "FReplicationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReplicationInfo"
  },
  {
    "label": "FScheduleObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScheduleObjectInfo"
  },
  {
    "label": "FWriteContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWriteContext"
  },
  {
    "label": "FBatchObjectInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchObjectInfo"
  },
  {
    "label": "FBatchInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchInfo"
  },
  {
    "label": "FObjectRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectRecord"
  },
  {
    "label": "FBatchRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchRecord"
  },
  {
    "label": "FBitStreamInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitStreamInfo"
  },
  {
    "label": "FHugeObjectContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHugeObjectContext"
  },
  {
    "label": "FHugeObjectSendQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHugeObjectSendQueue"
  },
  {
    "label": "FStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStats"
  },
  {
    "label": "EWriteObjectFlag",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWriteObjectFlag"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Net / Core / NetBitArray . h \" # include \" Iris / ReplicationSystem / NetRefHandleManager . h \" # include \" Iris / ReplicationSystem / ReplicationTypes . h \" # include \" Iris / ReplicationSystem / ReplicationRecord . h \" # include \" Iris / DataStream / DataStream . h \" # include \" Iris / ReplicationSystem / AttachmentReplication . h \" # include \" Iris / ReplicationSystem / NetBlob / NetBlob . h \" # include \" Iris / ReplicationSystem / NetRefHandle . h \" # include \" Iris / ReplicationSystem / NetExports . h \" # include \" Iris / ReplicationSystem / ObjectReferenceCache . h \" # include \" Iris / Stats / NetStats . h \" # include \" Containers / Array . h \" # include \" Containers / List . h \" # include \" Containers / Set . h \" # include \" Misc / EnumClassFlags . h \" class UReplicationSystem ; class UNetObjectBlobHandler ; class UPartialNetObjectAttachmentHandler ; class UReplicationBridge ; namespace UE::Net { class FNetBitStreamReader ; class FNetBitStreamWriter ; class FNetObjectAttachment ; class FNetSerializationContext ; struct FReplicationProtocol ; namespace Private { struct FChangeMaskCache ; class FNetRefHandleManager ; class FReliableNetBlobQueue ; class FReplicationConditionals ; class FReplicationFiltering ; class FReplicationSystemInternal ; class FDeltaCompressionBaselineManager ; class FDeltaCompressionBaseline ; } } namespace UE::Net::Private { class FReplicationWriter { public : float CreatePriority = 1 . f ; float TearOffPriority = 1 . f ; float LostStatePriorityBump = 1 . f ; float SchedulingThresholdPriority = 1 . f ; const uint32 PartialSortObjectCount = 1 2 8 u ; public : enum class EReplicatedObjectState : uint8 { Invalid = 0,AttachmentToObjectNotInScope,HugeObject,PendingCreate,WaitOnCreateConfirmation,Created,WaitOnFlush,PendingTearOff,SubObjectPendingDestroy,CancelPendingDestroy,PendingDestroy,WaitOnDestroyConfirmation,Destroyed,PermanentlyDestroyed,Count } ;)",
    "insertText": "static_assert((uint8)(EReplicatedObjectState::Count) <= 32, \"EReplicatedObjectState must fit in 5 bits. See FReplicationInfo::State and FReplicationRecord::FRecordInfo::ReplicatedObjectState members.\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(const EReplicatedObjectState State)"
  },
  {
    "label": "FReplicationInfo()",
    "kind": "Method",
    "detail": "Function (enum EFlushFlags : uint32 { FlushFlags_None = 0 U,FlushFlags_FlushState = 1 U<<0 U,FlushFlags_FlushReliable = FlushFlags_FlushState<<1 U,FlushFlags_FlushTornOffSubObjects = FlushFlags_FlushReliable<<1 U,FlushFlags_All = FlushFlags_FlushState | FlushFlags_FlushReliable | FlushFlags_FlushTornOffSubObjects,FlushFlags_Default = FlushFlags_FlushReliable,} ; struct FReplicationInfo {)",
    "insertText": "FReplicationInfo()"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (FChangeMaskStorageOrPointer ChangeMaskOrPtr ; union { uint64 Value ; struct { uint64 ChangeMaskBitCount : 1 6 ; uint64 State : 5 ; uint64 HasDirtySubObjects : 1 ; uint64 IsSubObject : 1 ; uint64 HasDirtyChangeMask : 1 ; uint64 HasAttachments : 1 ; uint64 HasChangemaskFilter : 1 ; uint64 IsDestructionInfo : 1 ; uint64 IsCreationConfirmed : 1 ; uint64 TearOff : 1 ; uint64 SubObjectPendingDestroy : 1 ; uint64 IsDeltaCompressionEnabled : 1 ; uint64 LastAckedBaselineIndex : 2 ; uint64 PendingBaselineIndex : 2 ; uint64 FlushFlags : 3 ; uint64 HasDirtyConditionals : 1 ; } ; } ; const uint32 LocalChangeMaskMaxBitCount = 6 4 u ; void)",
    "insertText": "SetState(EReplicatedObjectState NewState)"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (EReplicatedObjectState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetChangeMaskStoragePointer()",
    "kind": "Method",
    "detail": "Function (} ChangeMaskStorageType*)",
    "insertText": "GetChangeMaskStoragePointer()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "static_assert(sizeof(FReplicationInfo) == 16, \"Expected sizeof FReplicationInfo to be 16 bytes\")"
  },
  {
    "label": "FReplicationWriter()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FReplicationWriter()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FReplicationParameters& InParameters)"
  },
  {
    "label": "Deinit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinit()"
  },
  {
    "label": "UpdateScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateScope(const FNetBitArrayView& ScopedObjects)"
  },
  {
    "label": "ForceUpdateDirtyChangeMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceUpdateDirtyChangeMasks(const FChangeMaskCache& CachedChangeMasks, EFlushFlags ExtraFlushFlags, bool bMarkForTearOff)"
  },
  {
    "label": "InternalUpdateDirtyChangeMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalUpdateDirtyChangeMasks(CachedChangeMasks, ExtraFlushFlags, bMarkForTearOff)"
  },
  {
    "label": "NotifyDestroyedObjectPendingEndReplication()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyDestroyedObjectPendingEndReplication(FInternalNetRefIndex ObjectInternalIndex)"
  },
  {
    "label": "UpdateDirtyGlobalLifetimeConditionals()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDirtyGlobalLifetimeConditionals(TArrayView<FInternalNetRefIndex> ObjectsWithDirtyConditionals)"
  },
  {
    "label": "UpdateDirtyChangeMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDirtyChangeMasks(const FChangeMaskCache& CachedChangeMasks)"
  },
  {
    "label": "InternalUpdateDirtyChangeMasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalUpdateDirtyChangeMasks(CachedChangeMasks, EFlushFlags::FlushFlags_None, false)"
  },
  {
    "label": "GetObjectsRequiringPriorityUpdate()",
    "kind": "Method",
    "detail": "Function (} const FNetBitArray&)",
    "insertText": "GetObjectsRequiringPriorityUpdate()"
  },
  {
    "label": "UpdatePriorities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePriorities(const float* UpdatedPriorities)"
  },
  {
    "label": "BeginWrite()",
    "kind": "Method",
    "detail": "Function (UDataStream::EWriteResult)",
    "insertText": "BeginWrite(const UDataStream::FBeginWriteParameters& Params)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (UDataStream::EWriteResult)",
    "insertText": "Write(FNetSerializationContext& Context)"
  },
  {
    "label": "EndWrite()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndWrite()"
  },
  {
    "label": "ProcessDeliveryNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDeliveryNotification(EPacketDeliveryStatus PacketDeliveryStatus)"
  },
  {
    "label": "SetReplicationEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReplicationEnabled(bool bInReplicationEnabled)"
  },
  {
    "label": "IsReplicationEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReplicationEnabled()"
  },
  {
    "label": "SetNetExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNetExports(FNetExports& InNetExports)"
  },
  {
    "label": "QueueNetObjectAttachments()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueueNetObjectAttachments(FInternalNetRefIndex OwnerInternalIndex, FInternalNetRefIndex SubObjectInternalIndex, TArrayView<const TRefCountPtr<FNetBlob>> Attachments, ENetObjectAttachmentSendPolicyFlags SendFlags)"
  },
  {
    "label": "AreAllReliableAttachmentsSentAndAcked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreAllReliableAttachmentsSentAndAcked()"
  },
  {
    "label": "InternalUpdateDirtyChangeMasks()",
    "kind": "Method",
    "detail": "Function (private : enum : uint32 { ObjectIndexForOOBAttachment = 0 U,} ; void)",
    "insertText": "InternalUpdateDirtyChangeMasks(const FChangeMaskCache& CachedChangeMasks, EFlushFlags ExtraFlushFlags, bool bTearOff)"
  },
  {
    "label": "FWriteContext()",
    "kind": "Method",
    "detail": "Function (struct FScheduleObjectInfo { uint32 Index ; float SortKey ; } ; struct FWriteContext {)",
    "insertText": "FWriteContext() : bIsValid(0)"
  },
  {
    "label": "FHugeObjectContext()",
    "kind": "Method",
    "detail": "Function (} FNetBitArray ObjectsWrittenThisPacket ; TArray<uint32,TInlineAllocator<3 2>> DependentObjectsPendingSend ; FScheduleObjectInfo* ScheduledObjectInfos ; uint32 ScheduledObjectCount ; uint32 SortedObjectCount ; uint32 CurrentIndex ; uint32 WrittenBatchCount ; uint32 FailedToWriteSmallObjectCount ; uint32 NumWrittenPacketsInThisBatch = 0 U ; bool bCanWriteMoreData = false ; EDataStreamWriteMode WriteMode = EDataStreamWriteMode::Full ; uint32 bHasDestroyedObjectsToSend : 1 ; uint32 bHasUpdatedObjectsToSend : 1 ; uint32 bHasHugeObjectToSend : 1 ; uint32 bHasOOBAttachmentsToSend : 1 ; uint32 bIsValid : 1 ; FNetSendStats Stats ; } ; struct FBatchObjectInfo { FNetRefHandle Handle ; uint32 InternalIndex ; FNetObjectAttachmentsWriter::FCommitRecord AttachmentRecord ; ENetObjectAttachmentType AttachmentType ; bool bHasUnsentAttachments ; uint32 NewBaselineIndex : 2 ; uint32 bIsInitialState : 1 ; uint32 bSentState : 1 ; uint32 bSentAttachments : 1 ; uint32 bHasDirtySubObjects : 1 ; uint32 bSentTearOff : 1 ; uint32 bSentDestroySubObject : 1 ; uint32 bSentBatchData : 1 ; } ; enum class EBatchInfoType : uint32 { Object,HugeObject,OOBAttachment,Internal,DestructionInfo,} ; struct FBatchInfo { TArray<FBatchObjectInfo,TInlineAllocator<1 6>> ObjectInfos ; uint32 ParentInternalIndex ; EBatchInfoType Type ; } ; struct FObjectRecord { FReplicationRecord::FRecordInfo Record ; FNetObjectAttachmentsWriter::FReliableReplicationRecord AttachmentRecord ; } ; struct FBatchRecord { TArray<FObjectRecord,TInlineAllocator<1 6>> ObjectReplicationRecords ; uint32 BatchCount = 0 U ; } ; struct FBitStreamInfo { uint32 ReplicationStartPos ; uint32 BatchStartPos ; uint32 ReplicationCapacity ; } ; enum class EHugeObjectSendStatus : uint32 { Idle,Sending,} ; struct FHugeObjectContext {)",
    "insertText": "FHugeObjectContext()"
  },
  {
    "label": "FHugeObjectSendQueue()",
    "kind": "Method",
    "detail": "Function (FInternalNetRefIndex RootObjectInternalIndex = 0 ; FBatchRecord BatchRecord ; FNetExportContext::FBatchExports BatchExports ; TArray<TRefCountPtr<FNetBlob>> Blobs ; } ; class FHugeObjectSendQueue { public :)",
    "insertText": "FHugeObjectSendQueue()"
  },
  {
    "label": "IsFull()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFull()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "NumRootObjectsInTransit()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "NumRootObjectsInTransit()"
  },
  {
    "label": "EnqueueHugeObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueueHugeObject(const FHugeObjectContext& Context)"
  },
  {
    "label": "IsObjectInQueue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectInQueue(FInternalNetRefIndex ObjectIndex, bool bFullSearch)"
  },
  {
    "label": "GetRootObjectInternalIndexForTrace()",
    "kind": "Method",
    "detail": "Function (FInternalNetRefIndex)",
    "insertText": "GetRootObjectInternalIndexForTrace()"
  },
  {
    "label": "AckObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AckObjects(TFunctionRef<void (const FHugeObjectContext& Context)> AckHugeObject)"
  },
  {
    "label": "FreeContexts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeContexts(TFunctionRef<void (const FHugeObjectContext& Context)> FreeHugeObject)"
  },
  {
    "label": "SetNetObjectListsSize()",
    "kind": "Method",
    "detail": "Function (public : struct FStats { uint64 StartSendingTime = 0 ; uint64 EndSendingTime = 0 ; uint64 StartStallTime = 0 ; } ; FStats Stats ; FNetTraceCollector* TraceCollector = nullptr ; const FNetDebugName* DebugName = nullptr ; private : TSet<FInternalNetRefIndex> RootObjectsInTransit ; TDoubleLinkedList<FHugeObjectContext> SendContexts ; } ; enum EWriteObjectFlag : unsigned { WriteObjectFlag_State = 1 U,WriteObjectFlag_Attachments = WriteObjectFlag_State<<1 U,WriteObjectFlag_HugeObject = WriteObjectFlag_Attachments<<1 U,WriteObjectFlag_IsWritingHugeObjectBatch = WriteObjectFlag_HugeObject<<1 U,} ; enum class EWriteObjectRetryMode : unsigned { Abort,TrySmallObject,SplitHugeObject,} ; enum class EWriteObjectStatus : unsigned { Success,InvalidState,BitStreamOverflow,NoInstanceProtocol,InvalidOwner,Error,} ; private : void)",
    "insertText": "SetNetObjectListsSize(FInternalNetRefIndex NewMaxInternalIndex)"
  },
  {
    "label": "OnMaxInternalNetRefIndexIncreased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMaxInternalNetRefIndexIncreased(FInternalNetRefIndex NewMaxInternalIndex)"
  },
  {
    "label": "GetDefaultFlushFlags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDefaultFlushFlags()"
  },
  {
    "label": "GetFlushStatus()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetFlushStatus(uint32 InternalIndex, const FReplicationInfo& Info, uint32 FlushFlagsToTest = EFlushFlags::FlushFlags_Default)"
  },
  {
    "label": "SetPendingDestroyOrSubObjectPendingDestroyState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPendingDestroyOrSubObjectPendingDestroyState(uint32 Index, FReplicationInfo& Info)"
  },
  {
    "label": "IsObjectIndexForOOBAttachment()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectIndexForOOBAttachment(uint32 InternalIndex)"
  },
  {
    "label": "StartReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartReplication(uint32 InternalIndex)"
  },
  {
    "label": "StopReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopReplication(uint32 InternalIndex)"
  },
  {
    "label": "GetReplicationInfo()",
    "kind": "Method",
    "detail": "Function (FReplicationInfo&)",
    "insertText": "GetReplicationInfo(uint32 InternalIndex)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(uint32 InternalIndex, EReplicatedObjectState NewState)"
  },
  {
    "label": "WriteNetRefHandleId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNetRefHandleId(FNetSerializationContext& Context, FNetRefHandle RefHandle)"
  },
  {
    "label": "CreateObjectRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateObjectRecord(const FNetBitArrayView* ChangeMask, const FReplicationInfo& Info, const FBatchObjectInfo& ObjectInfo, FObjectRecord& OutRecord)"
  },
  {
    "label": "CommitObjectRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitObjectRecord(uint32 InternalObjectIndex, const FObjectRecord& Record)"
  },
  {
    "label": "CommitBatchRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommitBatchRecord(const FBatchRecord& BatchRecord)"
  },
  {
    "label": "ScheduleDependentObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleDependentObjects(uint32 Index, float ParentPriority, TArray<float>& LocalPriorities, FScheduleObjectInfo* ScheduledObjectIndices, uint32& OutScheduledObjectCount)"
  },
  {
    "label": "ScheduleObjects()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ScheduleObjects(FScheduleObjectInfo* ScheduledObjectIndices)"
  },
  {
    "label": "SortScheduledObjects()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "SortScheduledObjects(FScheduleObjectInfo* ScheduledObjectIndices, uint32 ScheduledObjectCount, uint32 StartIndex)"
  },
  {
    "label": "WriteObjectsPendingDestroy()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteObjectsPendingDestroy(FNetSerializationContext& Context)"
  },
  {
    "label": "WriteObjectAndSubObjects()",
    "kind": "Method",
    "detail": "Function (EWriteObjectStatus)",
    "insertText": "WriteObjectAndSubObjects(FNetSerializationContext& Context, uint32 InternalIndex, uint32 WriteObjectFlags, FBatchInfo& OutBatchInfo)"
  },
  {
    "label": "WriteObjectInBatch()",
    "kind": "Method",
    "detail": "Function (EWriteObjectStatus)",
    "insertText": "WriteObjectInBatch(FNetSerializationContext& Context, uint32 InternalIndex, uint32 WriteObjectFlags, FBatchInfo& OutBatchInfo)"
  },
  {
    "label": "WriteDestructionInfo()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WriteDestructionInfo(FNetSerializationContext& Context, uint32 InternalIndex)"
  },
  {
    "label": "WriteObjectBatch()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "WriteObjectBatch(FNetSerializationContext& Context, uint32 InternalIndex, uint32 WriteObjectFlags)"
  },
  {
    "label": "PrepareAndSendHugeObjectPayload()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "PrepareAndSendHugeObjectPayload(FNetSerializationContext& Context, uint32 InternalIndex)"
  },
  {
    "label": "WriteOOBAttachments()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteOOBAttachments(FNetSerializationContext& Context)"
  },
  {
    "label": "WriteObjects()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "WriteObjects(FNetSerializationContext& Context)"
  },
  {
    "label": "HandleObjectBatchSuccess()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HandleObjectBatchSuccess(const FBatchInfo& BatchInfo, FBatchRecord& OutRecord)"
  },
  {
    "label": "HandleObjectBatchFailure()",
    "kind": "Method",
    "detail": "Function (EWriteObjectRetryMode)",
    "insertText": "HandleObjectBatchFailure(EWriteObjectStatus WriteObjectStatus, const FBatchInfo& BatchInfo, const FBitStreamInfo& BatchBitStreamInfo)"
  },
  {
    "label": "HandleDroppedRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDroppedRecord(const FReplicationRecord::FRecordInfo& RecordInfo, FReplicationInfo& Info, const FNetObjectAttachmentsWriter::FReliableReplicationRecord& AttachmentRecord)"
  },
  {
    "label": "HandleDroppedRecord()",
    "kind": "Method",
    "detail": "Function (template<EReplicatedObjectState LostState> void)",
    "insertText": "HandleDroppedRecord(EReplicatedObjectState CurrentState, const FReplicationRecord::FRecordInfo& RecordInfo, FReplicationInfo& Info, const FNetObjectAttachmentsWriter::FReliableReplicationRecord& AttachmentRecord)"
  },
  {
    "label": "HandleDeliveredRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDeliveredRecord(const FReplicationRecord::FRecordInfo& RecordInfo, FReplicationInfo& Info, const FNetObjectAttachmentsWriter::FReliableReplicationRecord& AttachmentRecord)"
  },
  {
    "label": "HandleDiscardedRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDiscardedRecord(const FReplicationRecord::FRecordInfo& RecordInfo, FReplicationInfo& Info, const FNetObjectAttachmentsWriter::FReliableReplicationRecord& AttachmentRecord)"
  },
  {
    "label": "SetupReplicationInfoForAttachmentsToObjectsNotInScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupReplicationInfoForAttachmentsToObjectsNotInScope()"
  },
  {
    "label": "ApplyFilterToChangeMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFilterToChangeMask(uint32 ParentInternalIndex, uint32 InternalIndex, FReplicationInfo& Info, const FReplicationProtocol* Protocol, const uint8* InternalStateBuffer, bool bIsInitialState)"
  },
  {
    "label": "PatchupObjectChangeMaskWithInflightChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PatchupObjectChangeMaskWithInflightChanges(uint32 InternalIndex, FReplicationInfo& Info)"
  },
  {
    "label": "InvalidateBaseline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateBaseline(uint32 InternalIndex, FReplicationInfo& Info)"
  },
  {
    "label": "HasInFlightStateChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInFlightStateChanges(uint32 InternalIndex, const FReplicationInfo& Info)"
  },
  {
    "label": "HasInFlightStateChanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasInFlightStateChanges(const FReplicationRecord::FRecordInfo* RecordInfo)"
  },
  {
    "label": "CanSendObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSendObject(uint32 InternalIndex)"
  },
  {
    "label": "IsInitialState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialState(const EReplicatedObjectState State)"
  },
  {
    "label": "IsObjectPartOfActiveHugeObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsObjectPartOfActiveHugeObject(uint32 InternalIndex)"
  },
  {
    "label": "CanQueueHugeObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanQueueHugeObject()"
  },
  {
    "label": "FreeHugeObjectSendQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeHugeObjectSendQueue()"
  },
  {
    "label": "HasDataToSend()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasDataToSend(const FWriteContext& Context)"
  },
  {
    "label": "CollectAndAppendExports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAndAppendExports(FNetSerializationContext& Context, uint8* RESTRICT InternalBuffer, const FReplicationProtocol* Protocol)"
  },
  {
    "label": "IsWriteObjectSuccess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWriteObjectSuccess(EWriteObjectStatus Status)"
  },
  {
    "label": "SerializeObjectStateDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeObjectStateDelta(FNetSerializationContext& Context, uint32 InternalIndex, const FReplicationInfo& Info, const FNetRefHandleManager::FReplicatedObjectData& ObjectData, const uint8* RESTRICT ReplicatedObjectStateBuffer, FDeltaCompressionBaseline& CurrentBaseline, uint32 CreatedBaselineIndex)"
  },
  {
    "label": "DiscardAllRecords()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardAllRecords()"
  },
  {
    "label": "StopAllReplication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopAllReplication()"
  },
  {
    "label": "MarkObjectDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkObjectDirty(FInternalNetRefIndex InternalIndex, const char* Caller)"
  },
  {
    "label": "FReplicationInfo()",
    "kind": "Method",
    "detail": "Function (private : FReplicationParameters Parameters ; FReplicationRecord ReplicationRecord ; TArray<FReplicationInfo> ReplicatedObjects ; TArray<FReplicationRecord::FRecordInfoList> ReplicatedObjectsRecordInfoLists ; TArray<float> SchedulingPriorities ; FNetBitArray ObjectsPendingDestroy ; FNetBitArray ObjectsWithDirtyChanges ; FNetBitArray ObjectsInScope ; FNetObjectAttachmentsWriter Attachments ; FReplicationSystemInternal* ReplicationSystemInternal = nullptr ; FNetRefHandleManager* NetRefHandleManager = nullptr ; UReplicationBridge* ReplicationBridge = nullptr ; FDeltaCompressionBaselineManager* BaselineManager = nullptr ; FObjectReferenceCache* ObjectReferenceCache = nullptr ; const FReplicationFiltering* ReplicationFiltering = nullptr ; FReplicationConditionals* ReplicationConditionals = nullptr ; const UPartialNetObjectAttachmentHandler* PartialNetObjectAttachmentHandler = nullptr ; const UNetObjectBlobHandler* NetObjectBlobHandler = nullptr ; FNetExports* NetExports = nullptr ; FNetTypeStats* NetTypeStats = nullptr ; FWriteContext WriteContext ; FBitStreamInfo WriteBitStreamInfo ; FHugeObjectSendQueue HugeObjectSendQueue ; bool bReplicationEnabled = false ; const bool bHighPrioCreate = false ; } ; FReplicationWriter::)",
    "insertText": "FReplicationInfo() : Value(0U)"
  },
  {
    "label": "HandleDroppedRecord()",
    "kind": "Method",
    "detail": "Function (} template<FReplicationWriter::EReplicatedObjectState LostState> void)",
    "insertText": "HandleDroppedRecord(FReplicationWriter::EReplicatedObjectState CurrentState, const FReplicationRecord::FRecordInfo& RecordInfo, FReplicationWriter::FReplicationInfo& Info, const FNetObjectAttachmentsWriter::FReliableReplicationRecord& AttachmentRecord)"
  }
]