[
  {
    "label": "IStereoLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IStereoLayers"
  },
  {
    "label": "FShapeWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapeWrapper"
  },
  {
    "label": "ELayerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELayerType"
  },
  {
    "label": "ELayerFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELayerFlags"
  },
  {
    "label": "FLayerDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLayerDesc"
  },
  {
    "label": "FShapeWrapper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" StereoLayerShapes . h \" # include \" RHI . h \" class IStereoLayers { struct FShapeWrapper { TUniquePtr<IStereoLayerShape> Wrapped ;)",
    "insertText": "FShapeWrapper(IStereoLayerShape* InWrapped) : Wrapped(InWrapped)"
  },
  {
    "label": "FShapeWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeWrapper(const FShapeWrapper& In) : Wrapped(In.IsValid()?In.Wrapped->Clone():nullptr)"
  },
  {
    "label": "FShapeWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapeWrapper(FShapeWrapper&& In)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Wrapped =)",
    "insertText": "MoveTemp(In.Wrapped)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FShapeWrapper&)",
    "insertText": "operator(IStereoLayerShape* InWrapped)"
  },
  {
    "label": "IStereoLayerShape()",
    "kind": "Method",
    "detail": "Function (Wrapped = TUniquePtr<)",
    "insertText": "IStereoLayerShape(InWrapped)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FShapeWrapper&)",
    "insertText": "operator(FShapeWrapper&& In)"
  },
  {
    "label": "FLayerDesc()",
    "kind": "Method",
    "detail": "Function (} } ; public : enum ELayerType { WorldLocked,TrackerLocked,FaceLocked } ; enum ELayerFlags { LAYER_FLAG_TEX_CONTINUOUS_UPDATE = 0 x00000001,LAYER_FLAG_TEX_NO_ALPHA_CHANNEL = 0 x00000002,LAYER_FLAG_QUAD_PRESERVE_TEX_RATIO = 0 x00000004,LAYER_FLAG_SUPPORT_DEPTH = 0 x00000008,LAYER_FLAG_TEX_EXTERNAL = 0 x00000010,LAYER_FLAG_HIDDEN = 0 x00000020,LAYER_FLAG_MAX_VALUE = LAYER_FLAG_HIDDEN<<1,} ; struct FLayerDesc {)",
    "insertText": "FLayerDesc() : Shape(new FQuadLayer())"
  },
  {
    "label": "FLayerDesc()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLayerDesc(const IStereoLayerShape& InShape) : Shape(InShape.Clone())"
  },
  {
    "label": "SetLayerId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLayerId(uint32 InId)"
  },
  {
    "label": "GetLayerId()",
    "kind": "Method",
    "detail": "Function (Id = InId ; } uint32)",
    "insertText": "GetLayerId()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (} const uint32 INVALID_LAYER_ID = 0 ; uint32 Id = INVALID_LAYER_ID ; FTransform Transform = FTransform::Identity ; FVector2D QuadSize =)",
    "insertText": "FVector2D(1.0f, 1.0f)"
  },
  {
    "label": "FBox2D()",
    "kind": "Method",
    "detail": "Function (FBox2D UVRect =)",
    "insertText": "FBox2D(FVector2D(0.0f, 0.0f), FVector2D(1.0f, 1.0f))"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint LayerSize =)",
    "insertText": "FIntPoint(0, 0)"
  },
  {
    "label": "HasShape()",
    "kind": "Method",
    "detail": "Function (int32 Priority = 0 ; ELayerType PositionType = ELayerType::FaceLocked ; template<T> bool)",
    "insertText": "HasShape()"
  },
  {
    "label": "GetShape()",
    "kind": "Method",
    "detail": "Function (} template<T> T&)",
    "insertText": "GetShape()"
  },
  {
    "label": "SetShape()",
    "kind": "Method",
    "detail": "Function (} template<T,. . . InArgTypes> void)",
    "insertText": "SetShape(InArgTypes&&... Args)"
  },
  {
    "label": "FShapeWrapper()",
    "kind": "Method",
    "detail": "Function (Shape =)",
    "insertText": "FShapeWrapper(new T(Forward<InArgTypes>(Args)...))"
  },
  {
    "label": "IStereoLayers()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef Texture = nullptr ; FTextureRHIRef LeftTexture = nullptr ; uint32 Flags = 0 ; private : FShapeWrapper Shape ; } ; ~)",
    "insertText": "IStereoLayers()"
  },
  {
    "label": "CreateLayer()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CreateLayer(const FLayerDesc& InLayerDesc)"
  },
  {
    "label": "DestroyLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyLayer(uint32 LayerId)"
  },
  {
    "label": "PushLayerState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushLayerState(bool bPreserve = false)"
  },
  {
    "label": "PopLayerState()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PopLayerState()"
  },
  {
    "label": "SupportsLayerState()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "SupportsLayerState()"
  },
  {
    "label": "ShowBackgroundLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowBackgroundLayer()"
  },
  {
    "label": "IsBackgroundLayerVisible()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBackgroundLayerVisible()"
  },
  {
    "label": "GetLayerDesc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetLayerDesc(uint32 LayerId, FLayerDesc& OutLayerDesc)"
  },
  {
    "label": "MarkTextureForUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkTextureForUpdate(uint32 LayerId)"
  },
  {
    "label": "UpdateSplashScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSplashScreen()"
  },
  {
    "label": "ShouldCopyDebugLayersToSpectatorScreen()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "ShouldCopyDebugLayersToSpectatorScreen()"
  },
  {
    "label": "GetDebugCanvasLayerDesc()",
    "kind": "Method",
    "detail": "Function (public : FLayerDesc)",
    "insertText": "GetDebugCanvasLayerDesc(FTextureRHIRef Texture)"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (IStereoLayers::FLayerDesc StereoLayerDesc ; StereoLayerDesc . Transform =)",
    "insertText": "FTransform(FVector(100.f, 0, 0))"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (StereoLayerDesc . QuadSize =)",
    "insertText": "FVector2D(120.f, 120.f)"
  },
  {
    "label": "GetAllocatedTexture()",
    "kind": "Method",
    "detail": "Function (StereoLayerDesc . PositionType = IStereoLayers::ELayerType::FaceLocked ; StereoLayerDesc . Texture = Texture ; StereoLayerDesc . Flags = IStereoLayers::ELayerFlags::LAYER_FLAG_TEX_CONTINUOUS_UPDATE ; StereoLayerDesc . Flags | = IStereoLayers::ELayerFlags::LAYER_FLAG_QUAD_PRESERVE_TEX_RATIO ; return StereoLayerDesc ; } void)",
    "insertText": "GetAllocatedTexture(uint32 LayerId, FTextureRHIRef &Texture, FTextureRHIRef &LeftTexture)"
  }
]