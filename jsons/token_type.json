[
  {
    "label": "TokenType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TokenType"
  },
  {
    "label": "Hasher",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Hasher"
  },
  {
    "label": "TokenType()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TYPES_TOKEN_TYPE_H_ # define BASE_TYPES_TOKEN_TYPE_H_ # include<type_traits> # include \" base / check . h \" # include \" base / types / strong_alias . h \" # include \" base / unguessable_token . h \" namespace base { template<TypeMarker> class TokenType : public StrongAlias<TypeMarker,UnguessableToken> { private : using Super = StrongAlias<TypeMarker,UnguessableToken> ; public :)",
    "insertText": "TokenType() : Super(UnguessableToken::Create())"
  },
  {
    "label": "TokenType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TokenType(const UnguessableToken& token) : Super(token)"
  },
  {
    "label": "TokenType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TokenType(const TokenType& token)"
  },
  {
    "label": "TokenType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TokenType(TokenType&& token)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TokenType&)",
    "insertText": "operator(const TokenType& token)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TokenType&)",
    "insertText": "operator(TokenType&& token)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct Hasher { using argument_type = TokenType ; using result_type = size_t ; result_type)",
    "insertText": "operator()(const argument_type& token)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } ; std::string)",
    "insertText": "ToString()"
  }
]