[
  {
    "label": "FMemoryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryWriter"
  },
  {
    "label": "BoneTrackPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BoneTrackPair"
  },
  {
    "label": "FMemoryReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryReader"
  },
  {
    "label": "AnimEncoding",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnimEncoding"
  },
  {
    "label": "AnimEncodingLegacyBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnimEncodingLegacyBase"
  },
  {
    "label": "BoneTrackPair()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / MemStack . h \" # include \" Animation / AnimTypes . h \" # include \" Animation / AnimSequence . h \" # include \" Animation / AnimSequenceDecompressionContext . h \" # include \" AnimationCompression . h \" # define USE_ANIMATION_CODEC_BATCH_SOLVER 1 # define ANIMATION_ENCODING_PACKAGE_ORIGINAL 0 # define CURRENT_ANIMATION_ENCODING_PACKAGE_VERSION ANIMATION_ENCODING_PACKAGE_ORIGINAL class FMemoryWriter ; struct BoneTrackPair { int32 AtomIndex ; int32 TrackIndex ;)",
    "insertText": "BoneTrackPair()"
  },
  {
    "label": "BoneTrackPair()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BoneTrackPair(int32 Atom, int32 Track):AtomIndex(Atom),TrackIndex(Track)"
  },
  {
    "label": "AnimationFormat_GetStats()",
    "kind": "Method",
    "detail": "Function (} } ; # define MAX_BONES 6 5 5 3 6 typedef TArray<BoneTrackPair> BoneTrackArray ; typedef TArray<FTransform,TMemStackAllocator<>> FTransformArray ; void)",
    "insertText": "AnimationFormat_GetStats(const FUECompressedAnimData& CompressedData, int32& NumTransTracks, int32& NumRotTracks, int32& NumScaleTracks, int32& TotalNumTransKeys, int32& TotalNumRotKeys, int32& TotalNumScaleKeys, float& TranslationKeySize, float& RotationKeySize, float& ScaleKeySize, int32& OverheadSize, int32& NumTransTracksWithOneKey, int32& NumRotTracksWithOneKey, int32& NumScaleTracksWithOneKey)"
  },
  {
    "label": "AnimationFormat_SetInterfaceLinks()",
    "kind": "Method",
    "detail": "Function (template<CompressedDataType> void)",
    "insertText": "AnimationFormat_SetInterfaceLinks(CompressedDataType& CompressedData)"
  },
  {
    "label": "AC_UnalignedSwap()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA # define)",
    "insertText": "AC_UnalignedSwap(MemoryArchive, Data, Len ) \\ MemoryArchive.ByteOrderSerialize( (Data), (Len))"
  },
  {
    "label": "AC_UnalignedSwap()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "AC_UnalignedSwap(MemoryArchive, Data, Len ) \\ MemoryArchive.Serialize( (Data), (Len))"
  },
  {
    "label": "PadMemoryWriter()",
    "kind": "Method",
    "detail": "Function (# endif const int32 CompressedTranslationStrides [ ACF_MAX ] ; const int32 CompressedTranslationNum [ ACF_MAX ] ; const int32 CompressedRotationStrides [ ACF_MAX ] ; const int32 CompressedRotationNum [ ACF_MAX ] ; const int32 CompressedScaleStrides [ ACF_MAX ] ; const int32 CompressedScaleNum [ ACF_MAX ] ; const uint8 PerTrackNumComponentTable [ ACF_MAX* 8 ] ; class FMemoryWriter ; class FMemoryReader ; void)",
    "insertText": "PadMemoryWriter(FMemoryWriter* MemoryWriter, uint8*& TrackData, const int32 Alignment)"
  },
  {
    "label": "PadMemoryReader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PadMemoryReader(FMemoryReader* MemoryReader, uint8*& TrackData, const int32 Alignment)"
  },
  {
    "label": "ByteSwapIn()",
    "kind": "Method",
    "detail": "Function (class AnimEncoding { public : void)",
    "insertText": "ByteSwapIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader) PURE_VIRTUAL(AnimEncoding::ByteSwapIn,)"
  },
  {
    "label": "ByteSwapOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter) PURE_VIRTUAL(AnimEncoding::ByteSwapOut,)"
  },
  {
    "label": "GetPoseRotations()",
    "kind": "Method",
    "detail": "Function (# if USE_ANIMATION_CODEC_BATCH_SOLVER void)",
    "insertText": "GetPoseRotations(TArrayView<FTransform>& Atoms, const BoneTrackArray& DesiredPairs, FAnimSequenceDecompressionContext& DecompContext) PURE_VIRTUAL(AnimEncoding::GetPoseRotations,)"
  },
  {
    "label": "GetPoseTranslations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPoseTranslations(TArrayView<FTransform>& Atoms, const BoneTrackArray& DesiredPairs, FAnimSequenceDecompressionContext& DecompContext) PURE_VIRTUAL(AnimEncoding::GetPoseTranslations,)"
  },
  {
    "label": "GetPoseScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPoseScales(TArrayView<FTransform>& Atoms, const BoneTrackArray& DesiredPairs, FAnimSequenceDecompressionContext& DecompContext) PURE_VIRTUAL(AnimEncoding::GetPoseScales,)"
  },
  {
    "label": "TimeToIndex()",
    "kind": "Method",
    "detail": "Function (# endif protected : float)",
    "insertText": "TimeToIndex(float SequenceLength, float RelativePos, int32 NumKeys, EAnimInterpolationType Interpolation, int32 &PosIndex0Out, int32 &PosIndex1Out)"
  },
  {
    "label": "TimeToIndex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "TimeToIndex(EAnimInterpolationType Interpolation, int32 NumberOfFrames, const uint8* FrameTable, float RelativePos, int32 NumKeys, int32 &PosIndex0Out, int32 &PosIndex1Out)"
  },
  {
    "label": "GetBoneAtomRotation()",
    "kind": "Method",
    "detail": "Function (} ; class AnimEncodingLegacyBase : public AnimEncoding { public : void)",
    "insertText": "GetBoneAtomRotation(FTransform& OutAtom, const FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex) PURE_VIRTUAL(AnimEncoding::GetBoneAtomRotation,)"
  },
  {
    "label": "GetBoneAtomTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneAtomTranslation(FTransform& OutAtom, const FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex) PURE_VIRTUAL(AnimEncoding::GetBoneAtomTranslation,)"
  },
  {
    "label": "GetBoneAtomScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneAtomScale(FTransform& OutAtom, const FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex) PURE_VIRTUAL(AnimEncoding::GetBoneAtomScale,)"
  },
  {
    "label": "ByteSwapIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader)"
  },
  {
    "label": "ByteSwapOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter)"
  },
  {
    "label": "ByteSwapRotationIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapRotationIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader, uint8*& Stream, int32 NumKeys) PURE_VIRTUAL(AnimEncoding::ByteSwapRotationIn,)"
  },
  {
    "label": "ByteSwapTranslationIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapTranslationIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader, uint8*& Stream, int32 NumKeys) PURE_VIRTUAL(AnimEncoding::ByteSwapTranslationIn,)"
  },
  {
    "label": "ByteSwapScaleIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapScaleIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader, uint8*& Stream, int32 NumKeys) PURE_VIRTUAL(AnimEncoding::ByteSwapScaleIn,)"
  },
  {
    "label": "ByteSwapRotationOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapRotationOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter, uint8*& Stream, int32 NumKeys) PURE_VIRTUAL(AnimEncoding::ByteSwapRotationOut,)"
  },
  {
    "label": "ByteSwapTranslationOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapTranslationOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter, uint8*& Stream, int32 NumKeys) PURE_VIRTUAL(AnimEncoding::ByteSwapTranslationOut,)"
  },
  {
    "label": "ByteSwapScaleOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapScaleOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter, uint8*& Stream, int32 NumKeys) PURE_VIRTUAL(AnimEncoding::ByteSwapScaleOut,)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float Alpha ;)",
    "insertText": "if(NumKeys < 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PosIndex0Out = 0 ; PosIndex1Out = 0 ; return 0 . 0 f ; })",
    "insertText": "if(RelativePos <= 0.f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PosIndex0Out = 0 ; PosIndex1Out = 0 ; Alpha = 0 . 0 f ; } else { NumKeys - = 1 ;)",
    "insertText": "if(RelativePos >= 1.0f)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (PosIndex0Out = NumKeys ; PosIndex1Out = NumKeys ; Alpha = 0 . 0 f ; } else { const float KeyPos = RelativePos*)",
    "insertText": "float(NumKeys)"
  },
  {
    "label": "floorf()",
    "kind": "Method",
    "detail": "Function (const float KeyPosFloor =)",
    "insertText": "floorf(KeyPos)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (PosIndex0Out =)",
    "insertText": "Min(FMath::TruncToInt(KeyPosFloor), NumKeys)"
  },
  {
    "label": "Alpha()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Alpha(Interpolation == EAnimInterpolationType::Step)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (PosIndex1Out =)",
    "insertText": "Min(PosIndex0Out + 1, NumKeys)"
  },
  {
    "label": "FindLowKeyIndex()",
    "kind": "Method",
    "detail": "Function (} } return Alpha ; } template<TABLE_TYPE> int32)",
    "insertText": "FindLowKeyIndex(const TABLE_TYPE* FrameTable, int32 NumKeys, int32 SearchFrame, int32 KeyEstimate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 LastKeyIndex = NumKeys - 1 ; int32 LowKeyIndex = KeyEstimate ;)",
    "insertText": "if(FrameTable[KeyEstimate] <= SearchFrame)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LowKeyIndex = LastKeyIndex ;)",
    "insertText": "for(int32 i = KeyEstimate+1; i <= LastKeyIndex; ++i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LowKeyIndex = i - 1 ; break ; } } } else { LowKeyIndex = 0 ;)",
    "insertText": "for(int32 i = KeyEstimate-1; i > 0; --i)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (float Alpha = 0 . 0 f ;)",
    "insertText": "check(NumKeys != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32 LastKey = NumKeys - 1 ; int32 TotalFrames = NumberOfFrames - 1 ; int32 EndingKey = LastKey ;)",
    "insertText": "if(NumKeys < 2 || RelativePos <= 0.f)"
  },
  {
    "label": "RelativePos()",
    "kind": "Method",
    "detail": "Function (PosIndex0Out = EndingKey ; PosIndex1Out = EndingKey ; Alpha = 0 . 0 f ; } else { const int32 LastFrame = TotalFrames - 1 ; const float KeyPos =)",
    "insertText": "RelativePos(float)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const int32 FramePosFloor =)",
    "insertText": "Clamp(FMath::TruncToInt(FramePos), 0, LastFrame)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const int32 KeyEstimate =)",
    "insertText": "Clamp(FMath::TruncToInt(KeyPos), 0, LastKey)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 LowFrame = 0 ; int32 HighFrame = 0 ;)",
    "insertText": "if(NumberOfFrames > 0xFF)"
  },
  {
    "label": "Frames()",
    "kind": "Method",
    "detail": "Function (const uint16*)",
    "insertText": "Frames(uint16*)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (PosIndex0Out = FindLowKeyIndex<)",
    "insertText": "uint16(Frames, NumKeys, FramePosFloor, KeyEstimate)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LowFrame = Frames [ PosIndex0Out ] ; PosIndex1Out = PosIndex0Out + 1 ;)",
    "insertText": "if(PosIndex1Out > LastKey)"
  },
  {
    "label": "Frames()",
    "kind": "Method",
    "detail": "Function (PosIndex1Out = EndingKey ; } HighFrame = Frames [ PosIndex1Out ] ; } else { const uint8*)",
    "insertText": "Frames(uint8*)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (PosIndex0Out = FindLowKeyIndex<)",
    "insertText": "uint8(Frames, NumKeys, FramePosFloor, KeyEstimate)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (PosIndex1Out = EndingKey ; } HighFrame = Frames [ PosIndex1Out ] ; } int32 Delta =)",
    "insertText": "Max(HighFrame - LowFrame, 1)"
  },
  {
    "label": "Remainder()",
    "kind": "Method",
    "detail": "Function (const float)",
    "insertText": "Remainder(FramePos - (float)LowFrame)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (Alpha = Interpolation = = EAnimInterpolationType::Step ? 0 .)",
    "insertText": "f(Remainder / (float)Delta)"
  }
]