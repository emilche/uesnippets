[
  {
    "label": "OUTPUT_BUFFER_MAX_BLOCK_SIZE()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_BLOCKS_OUTPUT_BUFFER_H # define Py_INTERNAL_BLOCKS_OUTPUT_BUFFER_H # ifdef __cplusplus \" C \" { # endif # include \" Python . h \" typedef struct { PyObject* list ; Py_ssize_t allocated ; Py_ssize_t max_length ; } _BlocksOutputBuffer ; const char unable_allocate_msg [ ] = \" Unable to allocate output buffer . \" ; # define)",
    "insertText": "OUTPUT_BUFFER_MAX_BLOCK_SIZE(256*1024*1024) #define KB (1024) #define MB (1024*1024)"
  },
  {
    "label": "_BlocksOutputBuffer_InitAndGrow()",
    "kind": "Method",
    "detail": "Function (3 2* KB,6 4* KB,2 5 6* KB,1* MB,4* MB,8* MB,1 6* MB,1 6* MB,3 2* MB,3 2* MB,3 2* MB,3 2* MB,6 4* MB,6 4* MB,1 2 8* MB,1 2 8* MB,OUTPUT_BUFFER_MAX_BLOCK_SIZE } ; # undef KB # undef MB Py_ssize_t)",
    "insertText": "_BlocksOutputBuffer_InitAndGrow(_BlocksOutputBuffer *buffer, const Py_ssize_t max_length, void **next_out)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (PyObject* b ; Py_ssize_t block_size ;)",
    "insertText": "assert(buffer->list == NULL)"
  },
  {
    "label": "PyBytes_FromStringAndSize()",
    "kind": "Method",
    "detail": "Function (block_size = max_length ; } else { block_size = BUFFER_BLOCK_SIZE [ 0 ] ; } b =)",
    "insertText": "PyBytes_FromStringAndSize(NULL, block_size)"
  },
  {
    "label": "Py_DECREF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Py_DECREF(b)"
  },
  {
    "label": "PyBytes_AS_STRING()",
    "kind": "Method",
    "detail": "Function (buffer -> allocated = block_size ; buffer -> max_length = max_length ;* next_out =)",
    "insertText": "PyBytes_AS_STRING(b)"
  },
  {
    "label": "PyBytes_FromStringAndSize()",
    "kind": "Method",
    "detail": "Function (b =)",
    "insertText": "PyBytes_FromStringAndSize(NULL, init_size)"
  },
  {
    "label": "PyErr_SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyErr_SetString(PyExc_MemoryError, unable_allocate_msg)"
  },
  {
    "label": "Py_SIZE()",
    "kind": "Method",
    "detail": "Function (PyObject* b ; const Py_ssize_t list_len =)",
    "insertText": "Py_SIZE(buffer->list)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t block_size ;)",
    "insertText": "if(avail_out != 0)"
  },
  {
    "label": "PyErr_SetString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PyErr_SetString(PyExc_SystemError, \"avail_out is non-zero in _BlocksOutputBuffer_Grow().\")"
  },
  {
    "label": "Py_ARRAY_LENGTH()",
    "kind": "Method",
    "detail": "Function (block_size = BUFFER_BLOCK_SIZE [ list_len ] ; } else { block_size = BUFFER_BLOCK_SIZE [)",
    "insertText": "Py_ARRAY_LENGTH(BUFFER_BLOCK_SIZE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(buffer->max_length >= 0)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t rest = buffer -> max_length - buffer -> allocated ;)",
    "insertText": "assert(rest > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (block_size = rest ; } })",
    "insertText": "if(block_size > PY_SSIZE_T_MAX - buffer->allocated)"
  },
  {
    "label": "PyList_GET_ITEM()",
    "kind": "Method",
    "detail": "Function (block =)",
    "insertText": "PyList_GET_ITEM(buffer->list, 0)"
  },
  {
    "label": "Py_INCREF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Py_INCREF(block)"
  },
  {
    "label": "Py_CLEAR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Py_CLEAR(buffer->list)"
  },
  {
    "label": "PyBytes_AS_STRING()",
    "kind": "Method",
    "detail": "Function (char* posi =)",
    "insertText": "PyBytes_AS_STRING(result)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t i = 0 ;)",
    "insertText": "for(; i < list_len-1; i++)"
  },
  {
    "label": "PyList_GET_ITEM()",
    "kind": "Method",
    "detail": "Function (block =)",
    "insertText": "PyList_GET_ITEM(buffer->list, i)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(posi, PyBytes_AS_STRING(block), Py_SIZE(block))"
  },
  {
    "label": "Py_SIZE()",
    "kind": "Method",
    "detail": "Function (posi + =)",
    "insertText": "Py_SIZE(block)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(posi, PyBytes_AS_STRING(block), Py_SIZE(block) - avail_out)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "assert(Py_SIZE(result) == 0)"
  }
]