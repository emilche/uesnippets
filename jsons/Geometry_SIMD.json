[
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "OtherDerived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherDerived"
  },
  {
    "label": "quat_product",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "quat_product"
  },
  {
    "label": "quat_conj",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "quat_conj"
  },
  {
    "label": "cross3_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "cross3_impl"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_GEOMETRY_SIMD_H # define EIGEN_GEOMETRY_SIMD_H namespace Eigen { namespace internal { template<class Derived,class OtherDerived> struct quat_product<Architecture::Target,Derived,OtherDerived,float> { enum { AAlignment = traits<Derived>::Alignment,BAlignment = traits<OtherDerived>::Alignment,ResAlignment = traits<Quaternion<float>>::Alignment } ; Quaternion<float>)",
    "insertText": "run(const QuaternionBase<Derived>& _a, const QuaternionBase<OtherDerived>& _b)"
  },
  {
    "label": "ae()",
    "kind": "Method",
    "detail": "Function (evaluator<Derived::Coefficients>)",
    "insertText": "ae(_a.coeffs())"
  },
  {
    "label": "be()",
    "kind": "Method",
    "detail": "Function (evaluator<OtherDerived::Coefficients>)",
    "insertText": "be(_b.coeffs())"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Quaternion<float> res ; const float neg_zero = numext::bit_cast<)",
    "insertText": "float(0x80000000u)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (const float arr [ 4 ] = { 0 . f,0 . f,0 . f,neg_zero } ; const Packet4f mask = ploadu<)",
    "insertText": "Packet4f(arr)"
  },
  {
    "label": "Packet4f()",
    "kind": "Method",
    "detail": "Function (Packet4f a = ae . template packet<AAlignment,)",
    "insertText": "Packet4f(0)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f s1 =)",
    "insertText": "pmul(vec4f_swizzle1(a,1,2,0,2),vec4f_swizzle1(b,2,0,1,2))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f s2 =)",
    "insertText": "pmul(vec4f_swizzle1(a,3,3,3,1),vec4f_swizzle1(b,0,1,2,1))"
  },
  {
    "label": "ResAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<float,Packet4f,)",
    "insertText": "ResAlignment(&res.x(), padd(psub(pmul(a,vec4f_swizzle1(b,3,3,3,3)), pmul(vec4f_swizzle1(a,2,0,1,0), vec4f_swizzle1(b,1,2,0,0))), pxor(mask,padd(s1,s2))))"
  },
  {
    "label": "qe()",
    "kind": "Method",
    "detail": "Function (evaluator<Derived::Coefficients>)",
    "insertText": "qe(q.coeffs())"
  },
  {
    "label": "ResAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<float,Packet4f,)",
    "insertText": "ResAlignment(&res.x(), pxor(mask, qe.template packet<traits<Derived>::Alignment,Packet4f>(0)))"
  },
  {
    "label": "lhs_eval()",
    "kind": "Method",
    "detail": "Function (evaluator<VectorLhs>)",
    "insertText": "lhs_eval(lhs)"
  },
  {
    "label": "rhs_eval()",
    "kind": "Method",
    "detail": "Function (evaluator<VectorRhs>)",
    "insertText": "rhs_eval(rhs)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f mul1 =)",
    "insertText": "pmul(vec4f_swizzle1(a,1,2,0,3),vec4f_swizzle1(b,2,0,1,3))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (Packet4f mul2 =)",
    "insertText": "pmul(vec4f_swizzle1(a,2,0,1,3),vec4f_swizzle1(b,1,2,0,3))"
  },
  {
    "label": "ResAlignment()",
    "kind": "Method",
    "detail": "Function (plain_matrix_type<VectorLhs>::type res ; pstoret<float,Packet4f,)",
    "insertText": "ResAlignment(&res.x(),psub(mul1,mul2))"
  },
  {
    "label": "coeffs()",
    "kind": "Method",
    "detail": "Function (const double* a = _a .)",
    "insertText": "coeffs().data()"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d b_xy = be . template packet<BAlignment,)",
    "insertText": "Packet2d(0)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d b_zw = be . template packet<BAlignment,)",
    "insertText": "Packet2d(2)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d a_xx = pset1<)",
    "insertText": "Packet2d(a[0])"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d a_yy = pset1<)",
    "insertText": "Packet2d(a[1])"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d a_zz = pset1<)",
    "insertText": "Packet2d(a[2])"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (Packet2d a_ww = pset1<)",
    "insertText": "Packet2d(a[3])"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (Packet2d t1,t2 ; t1 =)",
    "insertText": "padd(pmul(a_ww, b_xy), pmul(a_yy, b_zw))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (t2 =)",
    "insertText": "psub(pmul(a_zz, b_xy), pmul(a_xx, b_zw))"
  },
  {
    "label": "ResAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResAlignment(&res.x(), paddsub(t1, preverse(t2)))"
  },
  {
    "label": "psub()",
    "kind": "Method",
    "detail": "Function (t1 =)",
    "insertText": "psub(pmul(a_ww, b_zw), pmul(a_yy, b_xy))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (t2 =)",
    "insertText": "padd(pmul(a_zz, b_zw), pmul(a_xx, b_xy))"
  },
  {
    "label": "ResAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResAlignment(&res.z(), preverse(paddsub(preverse(t1), t2)))"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (Quaternion<double> res ; const double neg_zero = numext::bit_cast<)",
    "insertText": "double(0x8000000000000000ull)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (const double arr1 [ 2 ] = { neg_zero,neg_zero } ; const double arr2 [ 2 ] = { neg_zero,0 . 0 } ; const Packet2d mask0 = ploadu<)",
    "insertText": "Packet2d(arr1)"
  },
  {
    "label": "Packet2d()",
    "kind": "Method",
    "detail": "Function (const Packet2d mask2 = ploadu<)",
    "insertText": "Packet2d(arr2)"
  },
  {
    "label": "ResAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResAlignment(&res.x(), pxor(mask0, qe.template packet<traits<Derived>::Alignment,Packet2d>(0)))"
  },
  {
    "label": "ResAlignment()",
    "kind": "Method",
    "detail": "Function (pstoret<double,Packet2d,)",
    "insertText": "ResAlignment(&res.z(), pxor(mask2, qe.template packet<traits<Derived>::Alignment,Packet2d>(2)))"
  }
]