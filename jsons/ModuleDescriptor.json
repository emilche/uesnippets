[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "value",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "value"
  },
  {
    "label": "FModuleDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleDescriptor"
  },
  {
    "label": "FModuleContextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleContextInfo"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (ELoadingPhase::Type)",
    "insertText": "FromString( const TCHAR *Text )"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (EHostType::Type)",
    "insertText": "FromString( const TCHAR *Text )"
  },
  {
    "label": "FModuleDescriptor()",
    "kind": "Method",
    "detail": "Function (PROJECTS_API)",
    "insertText": "FModuleDescriptor(const FName InName = NAME_None, EHostType::Type InType = EHostType::Runtime, ELoadingPhase::Type InLoadingPhase = ELoadingPhase::Default)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText& OutFailReason)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FModuleDescriptor>& OutModules, FText* OutFailReason = nullptr)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FModuleDescriptor>& OutModules, FText& OutFailReason)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteArray(TJsonWriter<>& Writer, const TCHAR* ArrayName, const TArray<FModuleDescriptor>& Modules)"
  },
  {
    "label": "UpdateArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateArray(FJsonObject& JsonObject, const TCHAR* ArrayName, const TArray<FModuleDescriptor>& Modules)"
  },
  {
    "label": "LoadModulesForPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadModulesForPhase(ELoadingPhase::Type LoadingPhase, const TArray<FModuleDescriptor>& Modules, TMap<FName, EModuleLoadResult>& ModuleLoadErrors)"
  },
  {
    "label": "UnloadModulesForPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadModulesForPhase(ELoadingPhase::Type LoadingPhase, const TArray<FModuleDescriptor>& Modules, TMap<FName, EModuleUnloadResult>& OutErrors, bool bSkipUnload = false, bool bAllowUnloadCode = true)"
  },
  {
    "label": "CheckModuleCompatibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckModuleCompatibility(const TArray<FModuleDescriptor>& Modules, TArray<FString>& OutIncompatibleFiles)"
  }
]