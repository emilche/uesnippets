[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FModuleDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleDescriptor"
  },
  {
    "label": "FModuleContextInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModuleContextInfo"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformMisc . h \" # include \" Serialization / JsonWriter . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FJsonObject ; class FText ; enum class EModuleLoadResult ; enum class EModuleUnloadResult ; namespace ELoadingPhase { enum Type { EarliestPossible,PostConfigInit,PostSplashScreen,PreEarlyLoadingScreen,PreLoadingScreen,PreDefault,Default,PostDefault,PostEngineInit,None,Max } ; ELoadingPhase::Type)",
    "insertText": "FromString(const TCHAR *Text)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ToString(const ELoadingPhase::Type Value)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ToString(const EHostType::Type Value)"
  },
  {
    "label": "FModuleDescriptor()",
    "kind": "Method",
    "detail": "Function (} ; struct FModuleDescriptor { FName Name ; EHostType::Type Type ; ELoadingPhase::Type LoadingPhase ; TArray<FString> PlatformAllowList ; TArray<FString> PlatformDenyList ; TArray<EBuildTargetType> TargetAllowList ; TArray<EBuildTargetType> TargetDenyList ; TArray<EBuildConfiguration> TargetConfigurationAllowList ; TArray<EBuildConfiguration> TargetConfigurationDenyList ; TArray<FString> ProgramAllowList ; TArray<FString> ProgramDenyList ; TArray<FString> GameTargetAllowList ; TArray<FString> GameTargetDenyList ; TArray<FString> AdditionalDependencies ; bool bHasExplicitPlatforms ;)",
    "insertText": "FModuleDescriptor(const FName InName = NAME_None, EHostType::Type InType = EHostType::Runtime, ELoadingPhase::Type InLoadingPhase = ELoadingPhase::Default)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText* OutFailReason = nullptr)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, FText& OutFailReason)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FModuleDescriptor>& OutModules, FText* OutFailReason = nullptr)"
  },
  {
    "label": "ReadArray()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadArray(const FJsonObject& Object, const TCHAR* Name, TArray<FModuleDescriptor>& OutModules, FText& OutFailReason)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(TJsonWriter<>& Writer)"
  },
  {
    "label": "UpdateJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateJson(FJsonObject& JsonObject)"
  },
  {
    "label": "WriteArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteArray(TJsonWriter<>& Writer, const TCHAR* ArrayName, const TArray<FModuleDescriptor>& Modules)"
  },
  {
    "label": "UpdateArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateArray(FJsonObject& JsonObject, const TCHAR* ArrayName, const TArray<FModuleDescriptor>& Modules)"
  },
  {
    "label": "IsCompiledInConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiledInConfiguration(const FString& Platform, EBuildConfiguration Configuration, const FString& TargetName, EBuildTargetType TargetType, bool bBuildDeveloperTools, bool bBuildRequiresCookedData)"
  },
  {
    "label": "IsCompiledInCurrentConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompiledInCurrentConfiguration()"
  },
  {
    "label": "IsLoadedInCurrentConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadedInCurrentConfiguration()"
  },
  {
    "label": "LoadModulesForPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadModulesForPhase(ELoadingPhase::Type LoadingPhase, const TArray<FModuleDescriptor>& Modules, TMap<FName, EModuleLoadResult>& ModuleLoadErrors)"
  },
  {
    "label": "UnloadModulesForPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnloadModulesForPhase(ELoadingPhase::Type LoadingPhase, const TArray<FModuleDescriptor>& Modules, TMap<FName, EModuleUnloadResult>& OutErrors, bool bSkipUnload = false, bool bAllowUnloadCode = true)"
  },
  {
    "label": "CheckModuleCompatibility()",
    "kind": "Method",
    "detail": "Function (# if ! IS_MONOLITHIC bool)",
    "insertText": "CheckModuleCompatibility(const TArray<FModuleDescriptor>& Modules, TArray<FString>& OutIncompatibleFiles)"
  }
]