[
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_STRINGS_STRCAT_WIN_H_ # define BASE_STRINGS_STRCAT_WIN_H_ # include<initializer_list> # include<string> # include \" base / base_export . h \" # include \" base / containers / span . h \" # include \" base / strings / string_piece . h \" namespace base { BASE_EXPORT void)",
    "insertText": "StrAppend(std::wstring* dest, span<const WStringPiece> pieces)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT void)",
    "insertText": "StrAppend(std::wstring* dest, span<const std::wstring> pieces)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(std::wstring* dest, std::initializer_list<WStringPiece> pieces)"
  },
  {
    "label": "StrAppend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StrAppend(dest, make_span(pieces))"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (} [ [ nodiscard ] ] BASE_EXPORT std::wstring)",
    "insertText": "StrCat(span<const WStringPiece> pieces)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] BASE_EXPORT std::wstring)",
    "insertText": "StrCat(span<const std::wstring> pieces)"
  },
  {
    "label": "StrCat()",
    "kind": "Method",
    "detail": "Function (std::wstring)",
    "insertText": "StrCat(std::initializer_list<WStringPiece> pieces)"
  }
]