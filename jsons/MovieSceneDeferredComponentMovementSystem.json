[
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UMovieSceneDeferredComponentMovementSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneDeferredComponentMovementSystem"
  },
  {
    "label": "FScopedSequencerMovementUpdate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedSequencerMovementUpdate"
  },
  {
    "label": "FScopedMovementUpdateContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedMovementUpdateContainer"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EntitySystem / MovieSceneEntitySystem . h \" # include \" Containers / ChunkedArray . h \" # include \" Misc / Optional . h \" # include \" Engine / ScopedMovementUpdate . h \" # include \" MovieSceneDeferredComponentMovementSystem . generated . h \" class USceneComponent ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() UMovieSceneDeferredComponentMovementSystem(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "DeferMovementUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeferMovementUpdates(USceneComponent* InComponent)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "IsRelevantImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRelevantImpl(UMovieSceneEntitySystemLinker* InLinker)"
  },
  {
    "label": "OnSchedulePersistentTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSchedulePersistentTasks(UE::MovieScene::IEntitySystemScheduler* TaskScheduler)"
  },
  {
    "label": "OnRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRun(FSystemTaskPrerequisites& InPrerequisites, FSystemSubsequentTasks& Subsequents)"
  },
  {
    "label": "OnUnlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnlink()"
  },
  {
    "label": "ApplyMovementUpdates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyMovementUpdates()"
  },
  {
    "label": "OutputDeferredMovements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutputDeferredMovements()"
  },
  {
    "label": "EnsureMovementsFlushed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureMovementsFlushed()"
  },
  {
    "label": "FScopedSequencerMovementUpdate()",
    "kind": "Method",
    "detail": "Function (struct FScopedSequencerMovementUpdate : FScopedMovementUpdate {)",
    "insertText": "FScopedSequencerMovementUpdate(USceneComponent* Component) : FScopedMovementUpdate(Component)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FScopedSequencerMovementUpdate&)"
  },
  {
    "label": "FScopedSequencerMovementUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedSequencerMovementUpdate(const FScopedSequencerMovementUpdate&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FScopedSequencerMovementUpdate&&)"
  },
  {
    "label": "FScopedSequencerMovementUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScopedSequencerMovementUpdate(FScopedSequencerMovementUpdate&&)"
  },
  {
    "label": "GetComponent()",
    "kind": "Method",
    "detail": "Function (USceneComponent*)",
    "insertText": "GetComponent()"
  },
  {
    "label": "FScopedMovementUpdateContainer()",
    "kind": "Method",
    "detail": "Function (} ; struct FScopedMovementUpdateContainer {)",
    "insertText": "FScopedMovementUpdateContainer(USceneComponent* Component) : Value(Component)"
  }
]