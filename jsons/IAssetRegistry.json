[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FAssetRegistryState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryState"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FDependsNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDependsNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "FARCompiledFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARCompiledFilter"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetRegistrySerializationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistrySerializationOptions"
  },
  {
    "label": "FPackageFileSummary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageFileSummary"
  },
  {
    "label": "FObjectExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectExport"
  },
  {
    "label": "FObjectImport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectImport"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FAssetRegistryDependencyOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryDependencyOptions"
  },
  {
    "label": "FAssetDependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetDependency"
  },
  {
    "label": "UAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetRegistry"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "FFileLoadProgressUpdateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileLoadProgressUpdateData"
  },
  {
    "label": "FLoadPackageRegistryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadPackageRegistryData"
  },
  {
    "label": "FPauseBackgroundProcessingScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPauseBackgroundProcessingScope"
  },
  {
    "label": "UAssetManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetManager"
  },
  {
    "label": "EReadPackageDataMainErrorCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EReadPackageDataMainErrorCode"
  },
  {
    "label": "FDeserializePackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeserializePackageData"
  },
  {
    "label": "FDeserializeObjectPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeserializeObjectPackageData"
  },
  {
    "label": "FDeserializeTagData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeserializeTagData"
  },
  {
    "label": "FReadPackageDataDependenciesArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadPackageDataDependenciesArgs"
  },
  {
    "label": "ASSET_REGISTRY_STATE_DUMPING_ENABLED()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / ARFilter . h \" # include \" AssetRegistry / AssetIdentifier . h \" # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / StringFwd . h \" # include \" Misc / AssetRegistryInterface . h \" # include \" Misc / Optional . h \" # include \" UObject / Interface . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" AssetRegistry / AssetData . h \" # include \" CoreMinimal . h \" # endif # include \" IAssetRegistry . generated . h \" # ifndef ASSET_REGISTRY_STATE_DUMPING_ENABLED # define)",
    "insertText": "ASSET_REGISTRY_STATE_DUMPING_ENABLED(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (class FAssetRegistryState ; class FCbFieldView ; class FCbWriter ; class FDependsNode ; enum class EAssetRegistryTagsCaller : uint8 ; struct FARFilter ; struct FARCompiledFilter ; struct FAssetData ; struct FAssetRegistrySerializationOptions ; struct FPackageFileSummary ; struct FObjectExport ; struct FObjectImport ; namespace EAssetAvailability { enum Type { DoesNotExist,NotAvailable,LocalSlow,LocalFast } ; } namespace EAssetAvailabilityProgressReportingType { enum Type { ETA,PercentageComplete } ; } namespace UE::AssetRegistry { enum class EScanFlags : uint32 { None = 0,ForceRescan = 1<<0,IgnoreDenyListScanFilters = 1<<1,WaitForInMemoryObjects = 1<<2,IgnoreInvalidPathWarning = 1<<3,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EScanFlags)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(EScanFlags Flags)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() bool GetPackageQuery(UE::AssetRegistry::FDependencyQuery& Flags)"
  },
  {
    "label": "GetSearchableNameQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSearchableNameQuery(UE::AssetRegistry::FDependencyQuery& Flags)"
  },
  {
    "label": "GetManageQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetManageQuery(UE::AssetRegistry::FDependencyQuery& Flags)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FAssetDependency { FAssetIdentifier AssetId ; UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::None ; UE::AssetRegistry::EDependencyProperty Properties = UE::AssetRegistry::EDependencyProperty::None ; bool)",
    "insertText": "operator(const FAssetDependency& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Category != Other.Category)"
  },
  {
    "label": "WriteCompactBinary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteCompactBinary(FCbWriter& Writer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : FCbWriter&)",
    "insertText": "operator(FCbWriter& Writer, const FAssetDependency& Dependency)"
  },
  {
    "label": "WriteCompactBinary()",
    "kind": "Method",
    "detail": "Function (Dependency .)",
    "insertText": "WriteCompactBinary(Writer)"
  },
  {
    "label": "UINTERFACE()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UINTERFACE(MinimalApi, BlueprintType, meta = (CannotImplementInterfaceInBlueprint))"
  },
  {
    "label": "GENERATED_UINTERFACE_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UINTERFACE_BODY()"
  },
  {
    "label": "GENERATED_IINTERFACE_BODY()",
    "kind": "Method",
    "detail": "Function (class IAssetRegistry {)",
    "insertText": "GENERATED_IINTERFACE_BODY() public: static IAssetRegistry* Get()"
  },
  {
    "label": "GetChecked()",
    "kind": "Method",
    "detail": "Function (} IAssetRegistry&)",
    "insertText": "GetChecked()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (IAssetRegistry* Singleton = UE::AssetRegistry::Private::)",
    "insertText": "Get()"
  },
  {
    "label": "GetAssetsByTags()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByTags(const TArray<FName>& AssetTags, TArray<FAssetData>& OutAssetData)"
  },
  {
    "label": "GetAssetsByTagValues()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetsByTagValues(const TMultiMap<FName, FString>& AssetTagsAndValues, TArray<FAssetData>& OutAssetData)"
  },
  {
    "label": "GetAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssets(const FARCompiledFilter& Filter, TArray<FAssetData>& OutAssetData, bool bSkipARFilteredAssets=true)"
  },
  {
    "label": "GetInMemoryAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetInMemoryAssets(const FARCompiledFilter& Filter, TArray<FAssetData>& OutAssetData, bool bSkipARFilteredAssets=true)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARCompiledFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback, UE::AssetRegistry::EEnumerateAssetsFlags InEnumerateFlags)"
  },
  {
    "label": "EnumerateAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAssets(const FARCompiledFilter& Filter, TFunctionRef<bool(const FAssetData&)> Callback, UE::AssetRegistry::EEnumerateAssetsFlags InEnumerateFlags)"
  },
  {
    "label": "GetAssetByObjectPath()",
    "kind": "Method",
    "detail": "Function (FAssetData)",
    "insertText": "GetAssetByObjectPath(const FSoftObjectPath& ObjectPath, bool bIncludeOnlyOnDiskAssets = false, bool bSkipARFilteredAssets = true)"
  },
  {
    "label": "TryGetAssetByObjectPath()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetByObjectPath(const FSoftObjectPath& ObjectPath, FAssetData& OutAssetData)"
  },
  {
    "label": "TryGetAssetPackageData()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetPackageData(FName PackageName, FAssetPackageData& OutAssetPackageData)"
  },
  {
    "label": "TryGetAssetPackageData()",
    "kind": "Method",
    "detail": "Function (UE::AssetRegistry::EExists)",
    "insertText": "TryGetAssetPackageData(FName PackageName, FAssetPackageData& OutAssetPackageData, FName& OutCorrectCasePackageName)"
  },
  {
    "label": "EnumerateAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAllAssets(TFunctionRef<bool(const FAssetData&)> Callback)"
  },
  {
    "label": "EnumerateAllAssets()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnumerateAllAssets(TFunctionRef<bool(const FAssetData&)> Callback, UE::AssetRegistry::EEnumerateAssetsFlags InEnumerateFlags)"
  },
  {
    "label": "GetPackagesByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPackagesByName(FStringView PackageName, TArray<FName>& OutPackageNames)"
  },
  {
    "label": "GetFirstPackageByName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetFirstPackageByName(FStringView PackageName)"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDependencies(const FAssetIdentifier& AssetIdentifier, TArray<FAssetIdentifier>& OutDependencies, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDependencies(const FAssetIdentifier& AssetIdentifier, TArray<FAssetDependency>& OutDependencies, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDependencies(FName PackageName, TArray<FName>& OutDependencies, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::Package, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetReferencers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReferencers(const FAssetIdentifier& AssetIdentifier, TArray<FAssetIdentifier>& OutReferencers, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetReferencers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReferencers(const FAssetIdentifier& AssetIdentifier, TArray<FAssetDependency>& OutReferencers, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::All, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetReferencers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetReferencers(FName PackageName, TArray<FName>& OutReferencers, UE::AssetRegistry::EDependencyCategory Category = UE::AssetRegistry::EDependencyCategory::Package, const UE::AssetRegistry::FDependencyQuery& Flags = UE::AssetRegistry::FDependencyQuery())"
  },
  {
    "label": "GetAssetPackageDataCopy()",
    "kind": "Method",
    "detail": "Function (TOptional<FAssetPackageData>)",
    "insertText": "GetAssetPackageDataCopy(FName PackageName)"
  },
  {
    "label": "GetAssetPackageDatasCopy()",
    "kind": "Method",
    "detail": "Function (TArray<TOptional<FAssetPackageData>>)",
    "insertText": "GetAssetPackageDatasCopy(TArrayView<FName> PackageNames)"
  },
  {
    "label": "EnumerateAllPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllPackages(TFunctionRef<void(FName PackageName, const FAssetPackageData& PackageData)> Callback)"
  },
  {
    "label": "DoesPackageExistOnDisk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesPackageExistOnDisk(FName PackageName, FString* OutCorrectCasePackageName = nullptr, FString* OutExtension = nullptr)"
  },
  {
    "label": "GetRedirectedObjectPath()",
    "kind": "Method",
    "detail": "Function (FSoftObjectPath)",
    "insertText": "GetRedirectedObjectPath(const FSoftObjectPath& ObjectPath)"
  },
  {
    "label": "EnumerateAllCachedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllCachedPaths(TFunctionRef<bool(FString)> Callback)"
  },
  {
    "label": "EnumerateAllCachedPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateAllCachedPaths(TFunctionRef<bool(FName)> Callback)"
  },
  {
    "label": "GetSubPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSubPaths(const FName& InBasePath, TArray<FName>& OutPathList, bool bInRecurse)"
  },
  {
    "label": "EnumerateSubPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSubPaths(const FString& InBasePath, TFunctionRef<bool(FString)> Callback, bool bInRecurse)"
  },
  {
    "label": "EnumerateSubPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSubPaths(const FName InBasePath, TFunctionRef<bool(FName)> Callback, bool bInRecurse)"
  },
  {
    "label": "UseFilterToExcludeAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseFilterToExcludeAssets(TArray<FAssetData>& AssetDataList, const FARCompiledFilter& CompiledFilter)"
  },
  {
    "label": "IsAssetIncludedByFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetIncludedByFilter(const FAssetData& AssetData, const FARCompiledFilter& Filter)"
  },
  {
    "label": "IsAssetExcludedByFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAssetExcludedByFilter(const FAssetData& AssetData, const FARCompiledFilter& Filter)"
  },
  {
    "label": "CompileFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileFilter(const FARFilter& InFilter, FARCompiledFilter& OutCompiledFilter)"
  },
  {
    "label": "SetTemporaryCachingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTemporaryCachingMode(bool bEnable)"
  },
  {
    "label": "SetTemporaryCachingModeInvalidated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTemporaryCachingModeInvalidated()"
  },
  {
    "label": "GetTemporaryCachingMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTemporaryCachingMode()"
  },
  {
    "label": "GetAssetAvailability()",
    "kind": "Method",
    "detail": "Function (EAssetAvailability::Type)",
    "insertText": "GetAssetAvailability(const FAssetData& AssetData)"
  },
  {
    "label": "GetAssetAvailabilityProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAssetAvailabilityProgress(const FAssetData& AssetData, EAssetAvailabilityProgressReportingType::Type ReportType)"
  },
  {
    "label": "GetAssetAvailabilityProgressTypeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAssetAvailabilityProgressTypeSupported(EAssetAvailabilityProgressReportingType::Type ReportType)"
  },
  {
    "label": "PrioritizeAssetInstall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrioritizeAssetInstall(const FAssetData& AssetData)"
  },
  {
    "label": "HasVerseFiles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasVerseFiles(FName PackagePath, bool bRecursive = false)"
  },
  {
    "label": "GetVerseFilesByPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVerseFilesByPath(FName PackagePath, TArray<FName>& OutFilePaths, bool bRecursive = false)"
  },
  {
    "label": "AddPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPath(const FString& PathToAdd)"
  },
  {
    "label": "RemovePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePath(const FString& PathToRemove)"
  },
  {
    "label": "PathExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PathExists(const FString& PathToTest)"
  },
  {
    "label": "PathExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PathExists(const FName PathToTest)"
  },
  {
    "label": "ScanSynchronous()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanSynchronous(const TArray<FString>& InPaths, const TArray<FString>& InFilePaths, UE::AssetRegistry::EScanFlags InScanFlags = UE::AssetRegistry::EScanFlags::None)"
  },
  {
    "label": "WaitForPremadeAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForPremadeAssetRegistry()"
  },
  {
    "label": "ClearGathererCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGathererCache()"
  },
  {
    "label": "ScanModifiedAssetFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScanModifiedAssetFiles(const TArray<FString>& InFilePaths, UE::AssetRegistry::EScanFlags ScanFlags)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IAssetRegistry, FFilesBlockedEvent, const TArray<FString>&)"
  },
  {
    "label": "OnFilesBlocked()",
    "kind": "Method",
    "detail": "Function (FFilesBlockedEvent&)",
    "insertText": "OnFilesBlocked()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FPathsEvent, TConstArrayView<FStringView>)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FPathAddedEvent, const FString&)"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IAssetRegistry, FPathRemovedEvent, const FString&)"
  },
  {
    "label": "OnPathsAdded()",
    "kind": "Method",
    "detail": "Function (FPathsEvent&)",
    "insertText": "OnPathsAdded()"
  },
  {
    "label": "OnPathsRemoved()",
    "kind": "Method",
    "detail": "Function (FPathsEvent&)",
    "insertText": "OnPathsRemoved()"
  },
  {
    "label": "OnPathAdded()",
    "kind": "Method",
    "detail": "Function (FPathAddedEvent&)",
    "insertText": "OnPathAdded()"
  },
  {
    "label": "OnPathRemoved()",
    "kind": "Method",
    "detail": "Function (FPathRemovedEvent&)",
    "insertText": "OnPathRemoved()"
  },
  {
    "label": "AssetCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetCreated(UObject* NewAsset)"
  },
  {
    "label": "AssetDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetDeleted(UObject* DeletedAsset)"
  },
  {
    "label": "AssetRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetRenamed(const UObject* RenamedAsset, const FString& OldObjectPath)"
  },
  {
    "label": "AssetsSaved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetsSaved(TArray<FAssetData>&& Assets)"
  },
  {
    "label": "AssetUpdateTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetUpdateTags(UObject* Object, EAssetRegistryTagsCaller Caller)"
  },
  {
    "label": "VerseCreated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerseCreated(const FString& FilePathOnDisk)"
  },
  {
    "label": "VerseDeleted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "VerseDeleted(const FString& FilePathOnDisk)"
  },
  {
    "label": "PackageDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackageDeleted(UPackage* DeletedPackage)"
  },
  {
    "label": "AssetTagsFinalized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssetTagsFinalized(const UObject& FinalizedAsset)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FAssetsEvent, TConstArrayView<FAssetData>)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FAssetAddedEvent, const FAssetData&)"
  },
  {
    "label": "OnAssetAdded()",
    "kind": "Method",
    "detail": "Function (FAssetAddedEvent&)",
    "insertText": "OnAssetAdded()"
  },
  {
    "label": "OnAssetsAdded()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsAdded()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FAssetRemovedEvent, const FAssetData&)"
  },
  {
    "label": "OnAssetRemoved()",
    "kind": "Method",
    "detail": "Function (FAssetRemovedEvent&)",
    "insertText": "OnAssetRemoved()"
  },
  {
    "label": "OnAssetsRemoved()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsRemoved()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_TwoParams(FAssetRenamedEvent, const FAssetData&, const FString&)"
  },
  {
    "label": "OnAssetRenamed()",
    "kind": "Method",
    "detail": "Function (FAssetRenamedEvent&)",
    "insertText": "OnAssetRenamed()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FAssetUpdatedEvent, const FAssetData&)"
  },
  {
    "label": "OnAssetUpdated()",
    "kind": "Method",
    "detail": "Function (FAssetUpdatedEvent&)",
    "insertText": "OnAssetUpdated()"
  },
  {
    "label": "OnAssetsUpdated()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsUpdated()"
  },
  {
    "label": "OnAssetUpdatedOnDisk()",
    "kind": "Method",
    "detail": "Function (FAssetUpdatedEvent&)",
    "insertText": "OnAssetUpdatedOnDisk()"
  },
  {
    "label": "OnAssetsUpdatedOnDisk()",
    "kind": "Method",
    "detail": "Function (FAssetsEvent&)",
    "insertText": "OnAssetsUpdatedOnDisk()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FInMemoryAssetCreatedEvent, UObject*)"
  },
  {
    "label": "OnInMemoryAssetCreated()",
    "kind": "Method",
    "detail": "Function (FInMemoryAssetCreatedEvent&)",
    "insertText": "OnInMemoryAssetCreated()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FInMemoryAssetDeletedEvent, UObject*)"
  },
  {
    "label": "OnInMemoryAssetDeleted()",
    "kind": "Method",
    "detail": "Function (FInMemoryAssetDeletedEvent&)",
    "insertText": "OnInMemoryAssetDeleted()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FVerseAddedEvent, const FName)"
  },
  {
    "label": "OnVerseAdded()",
    "kind": "Method",
    "detail": "Function (FVerseAddedEvent&)",
    "insertText": "OnVerseAdded()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FVerseRemovedEvent, const FName)"
  },
  {
    "label": "OnVerseRemoved()",
    "kind": "Method",
    "detail": "Function (FVerseRemovedEvent&)",
    "insertText": "OnVerseRemoved()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE(FFilesLoadedEvent)"
  },
  {
    "label": "OnFilesLoaded()",
    "kind": "Method",
    "detail": "Function (FFilesLoadedEvent&)",
    "insertText": "OnFilesLoaded()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE(FScanStartedEvent)"
  },
  {
    "label": "OnScanStarted()",
    "kind": "Method",
    "detail": "Function (FScanStartedEvent&)",
    "insertText": "OnScanStarted()"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE(FScanEndedEvent)"
  },
  {
    "label": "OnScanEnded()",
    "kind": "Method",
    "detail": "Function (FScanEndedEvent&)",
    "insertText": "OnScanEnded()"
  },
  {
    "label": "FFileLoadProgressUpdateData()",
    "kind": "Method",
    "detail": "Function (struct FFileLoadProgressUpdateData {)",
    "insertText": "FFileLoadProgressUpdateData(int32 InNumTotalAssets, int32 InNumAssetsProcessedByAssetRegistry, int32 InNumAssetsPendingDataLoad, bool InIsDiscoveringAssetFiles) : NumTotalAssets(InNumTotalAssets) , NumAssetsProcessedByAssetRegistry(InNumAssetsProcessedByAssetRegistry) , NumAssetsPendingDataLoad(InNumAssetsPendingDataLoad) , bIsDiscoveringAssetFiles(InIsDiscoveringAssetFiles)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FFileLoadProgressUpdateData& Other)"
  },
  {
    "label": "OnFileLoadProgressUpdated()",
    "kind": "Method",
    "detail": "Function (FFileLoadProgressUpdatedEvent&)",
    "insertText": "OnFileLoadProgressUpdated()"
  },
  {
    "label": "ShouldUpdateDiskCacheAfterLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateDiskCacheAfterLoad()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FRecord Record)"
  },
  {
    "label": "AppendState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendState(const FAssetRegistryState& InState)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize(bool bLogDetailed = false)"
  },
  {
    "label": "InitializeTemporaryAssetRegistryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeTemporaryAssetRegistryState(FAssetRegistryState& OutState, const FAssetRegistrySerializationOptions& Options, bool bRefreshExisting = false, const TSet<FName>& RequiredPackages = TSet<FName>(), const TSet<FName>& RemovePackages = TSet<FName>())"
  },
  {
    "label": "DumpState()",
    "kind": "Method",
    "detail": "Function (# if ASSET_REGISTRY_STATE_DUMPING_ENABLED void)",
    "insertText": "DumpState(const TArray<FString>& Arguments, TArray<FString>& OutPages, int32 LinesPerPage = 1)"
  },
  {
    "label": "GetCachedEmptyPackagesCopy()",
    "kind": "Method",
    "detail": "Function (# endif TSet<FName>)",
    "insertText": "GetCachedEmptyPackagesCopy()"
  },
  {
    "label": "ContainsTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsTag(FName TagName)"
  },
  {
    "label": "InitializeSerializationOptions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeSerializationOptions(FAssetRegistrySerializationOptions& Options, const FString& PlatformIniName = FString(), UE::AssetRegistry::ESerializationTarget Target = UE::AssetRegistry::ESerializationTarget::ForGame)"
  },
  {
    "label": "FLoadPackageRegistryData()",
    "kind": "Method",
    "detail": "Function (struct FLoadPackageRegistryData {)",
    "insertText": "FLoadPackageRegistryData(bool bInGetDependencies = false)"
  },
  {
    "label": "FLoadPackageRegistryData()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLoadPackageRegistryData()"
  },
  {
    "label": "LoadPackageRegistryData()",
    "kind": "Method",
    "detail": "Function (TArray<FAssetData> Data ; TArray<FName> DataDependencies ; bool bGetDependencies ; } ; void)",
    "insertText": "LoadPackageRegistryData(FArchive& Ar, FLoadPackageRegistryData& InOutData)"
  },
  {
    "label": "LoadPackageRegistryData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadPackageRegistryData(const FString& PackageFilename, FLoadPackageRegistryData& InOutData)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(const FAssetData* AssetData)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (typedef TFunctionRef<)",
    "insertText": "bool(FAssetDataFunc AssetCallback)"
  },
  {
    "label": "ReadLockEnumerateAllTagToAssetDatas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadLockEnumerateAllTagToAssetDatas(TFunctionRef<bool(FName TagName, FEnumerateAssetDatasFunc EnumerateAssets)> Callback)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (typedef TFunction<)",
    "insertText": "Type(const FAssetIdentifier& Manager, const FAssetIdentifier& Source, const FAssetIdentifier& Target, UE::AssetRegistry::EDependencyCategory Category, UE::AssetRegistry::EDependencyProperty Properties, EAssetSetManagerFlags::Type Flags)"
  },
  {
    "label": "IsPathBeautificationNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPathBeautificationNeeded(const FString& InAssetPath)"
  },
  {
    "label": "FPauseBackgroundProcessingScope()",
    "kind": "Method",
    "detail": "Function (struct FPauseBackgroundProcessingScope {)",
    "insertText": "FPauseBackgroundProcessingScope()"
  },
  {
    "label": "GetChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChecked().RequestPauseBackgroundProcessing()"
  },
  {
    "label": "GetChecked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetChecked().RequestResumeBackgroundProcessing()"
  },
  {
    "label": "RequestPauseBackgroundProcessing()",
    "kind": "Method",
    "detail": "Function (} } ; protected : void)",
    "insertText": "RequestPauseBackgroundProcessing()"
  },
  {
    "label": "RequestResumeBackgroundProcessing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RequestResumeBackgroundProcessing()"
  },
  {
    "label": "SetManageReferences()",
    "kind": "Method",
    "detail": "Function (} class UAssetManager ; void)",
    "insertText": "SetManageReferences(const TMultiMap<FAssetIdentifier, FAssetIdentifier>& ManagerMap, bool bClearExisting, UE::AssetRegistry::EDependencyCategory RecurseType, TSet<FDependsNode*>& ExistingManagedNodes, ShouldSetManagerPredicate ShouldSetManager = nullptr)"
  },
  {
    "label": "SetPrimaryAssetIdForObjectPath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetPrimaryAssetIdForObjectPath(const FSoftObjectPath& ObjectPath, FPrimaryAssetId PrimaryAssetId)"
  },
  {
    "label": "DoSerialize()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::AssetRegistry { enum EReadPackageDataMainErrorCode { Unknown = 0,InvalidObjectCount = 1,InvalidTagCount = 2,InvalidTag = 3,} ; struct FDeserializePackageData { int64 DependencyDataOffset = INDEX_NONE ; int32 ObjectCount = 0 ; bool)",
    "insertText": "DoSerialize(FArchive& BinaryArchive, const FPackageFileSummary& PackageFileSummary, EReadPackageDataMainErrorCode& OutError)"
  },
  {
    "label": "DoSerialize()",
    "kind": "Method",
    "detail": "Function (} ; struct FDeserializeObjectPackageData { FString ObjectPath ; FString ObjectClassName ; int32 TagCount = 0 ; bool)",
    "insertText": "DoSerialize(FArchive& BinaryArchive, EReadPackageDataMainErrorCode& OutError)"
  },
  {
    "label": "ReadPackageDataMain()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "ReadPackageDataMain(FArchive& BinaryArchive, const FString& PackageName, const FPackageFileSummary& PackageFileSummary, int64& OutDependencyDataOffset, TArray<FAssetData*>& OutAssetDataList, EReadPackageDataMainErrorCode& OutError, const TArray<FObjectImport>* InImports = nullptr, const TArray<FObjectExport>* InExports = nullptr)"
  },
  {
    "label": "ReadPackageDataDependencies()",
    "kind": "Method",
    "detail": "Function (struct FReadPackageDataDependenciesArgs { FArchive* BinaryNameAwareArchive = nullptr ; int64 AssetRegistryDependencyDataOffset = - 1 ; int32 NumImports = - 1 ; int32 NumSoftPackageReferences = - 1 ; FPackageFileVersion PackageVersion ; TBitArray<> ImportUsedInGame ; TBitArray<> SoftPackageUsedInGame ; TArray<TPair<FName,EExtraDependencyFlags>> ExtraPackageDependencies ; } ; bool)",
    "insertText": "ReadPackageDataDependencies(FReadPackageDataDependenciesArgs& Args)"
  },
  {
    "label": "GetAssetForPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetForPackages(TConstArrayView<FName> PackageNames, TMap<FName, FAssetData>& OutPackageToAssetData)"
  },
  {
    "label": "GetMostImportantAsset()",
    "kind": "Method",
    "detail": "Function (enum class EGetMostImportantAssetFlags { None = 0,RequireOneTopLevelAsset = 0 x1,IgnoreSkipClasses = 0 x2 } ; const FAssetData*)",
    "insertText": "GetMostImportantAsset(TConstArrayView<const FAssetData*> PackageAssetDatas, EGetMostImportantAssetFlags InFlags = EGetMostImportantAssetFlags::None)"
  },
  {
    "label": "ShouldSearchAllAssetsAtStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSearchAllAssetsAtStart()"
  },
  {
    "label": "GetDevelopmentAssetRegistryFilename()",
    "kind": "Method",
    "detail": "Function (const FName WildcardFName ; const FTopLevelAssetPath WildcardPathName ; const FName Stage_ChunkCountFName ; const FName Stage_ChunkSizeFName ; const FName Stage_ChunkCompressedSizeFName ; const FName Stage_ChunkInstalledSizeFName ; const FName Stage_ChunkStreamingSizeFName ; const FName Stage_ChunkOptionalSizeFName ; } const TCHAR*)",
    "insertText": "GetDevelopmentAssetRegistryFilename()"
  }
]