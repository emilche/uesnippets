[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FAssetRegistryState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetRegistryState"
  },
  {
    "label": "FCbFieldView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbFieldView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FDependsNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDependsNode"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FARFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARFilter"
  },
  {
    "label": "FARCompiledFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FARCompiledFilter"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FAssetRegistrySerializationOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistrySerializationOptions"
  },
  {
    "label": "FPackageFileSummary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageFileSummary"
  },
  {
    "label": "FObjectExport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectExport"
  },
  {
    "label": "FObjectImport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectImport"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "enum"
  },
  {
    "label": "EScanFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EScanFlags"
  },
  {
    "label": "FAssetRegistryDependencyOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetRegistryDependencyOptions"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "to"
  },
  {
    "label": "FAssetDependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetDependency"
  },
  {
    "label": "UAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetRegistry"
  },
  {
    "label": "IAssetRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAssetRegistry"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "name",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "name"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "header",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "header"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "names",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "names"
  },
  {
    "label": "was",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "was"
  },
  {
    "label": "FFileLoadProgressUpdateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFileLoadProgressUpdateData"
  },
  {
    "label": "FLoadPackageRegistryData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadPackageRegistryData"
  },
  {
    "label": "FPauseBackgroundProcessingScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPauseBackgroundProcessingScope"
  },
  {
    "label": "UAssetManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetManager"
  },
  {
    "label": "EReadPackageDataMainErrorCode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EReadPackageDataMainErrorCode"
  },
  {
    "label": "FDeserializePackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeserializePackageData"
  },
  {
    "label": "FDeserializeObjectPackageData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeserializeObjectPackageData"
  },
  {
    "label": "FDeserializeTagData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeserializeTagData"
  },
  {
    "label": "FReadPackageDataDependenciesArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReadPackageDataDependenciesArgs"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "then",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "then"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(EScanFlags Flags)"
  },
  {
    "label": "LoadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadFromCompactBinary(FCbFieldView Field, FAssetDependency& Dependency)"
  },
  {
    "label": "FLoadPackageRegistryData()",
    "kind": "Method",
    "detail": "Function (ASSETREGISTRY_API)",
    "insertText": "FLoadPackageRegistryData(bool bInGetDependencies = false)"
  },
  {
    "label": "DoSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSerialize(FArchive& BinaryArchive, const FPackageFileSummary& PackageFileSummary, EReadPackageDataMainErrorCode& OutError)"
  },
  {
    "label": "DoSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSerialize(FArchive& BinaryArchive, EReadPackageDataMainErrorCode& OutError)"
  },
  {
    "label": "DoSerialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSerialize(FArchive& BinaryArchive, EReadPackageDataMainErrorCode& OutError)"
  },
  {
    "label": "ReadPackageDataMain()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPackageDataMain(FArchive& BinaryArchive, const FString& PackageName, const FPackageFileSummary& PackageFileSummary,\n\t\tint64& OutDependencyDataOffset, TArray<FAssetData*>& OutAssetDataList, EReadPackageDataMainErrorCode& OutError,\n\t\tconst TArray<FObjectImport>* InImports = nullptr, const TArray<FObjectExport>* InExports = nullptr)"
  },
  {
    "label": "ReadPackageDataDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPackageDataDependencies(FReadPackageDataDependenciesArgs& Args)"
  },
  {
    "label": "ReadPackageDataDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPackageDataDependencies(FArchive& BinaryArchive, TBitArray<>& OutImportUsedInGame, TBitArray<>& OutSoftPackageUsedInGame)"
  },
  {
    "label": "GetAssetForPackages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetForPackages(TConstArrayView<FName> PackageNames, TMap<FName, FAssetData>& OutPackageToAssetData)"
  },
  {
    "label": "ShouldSearchAllAssetsAtStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSearchAllAssetsAtStart()"
  }
]