[
  {
    "label": "TMovieSceneInitialValueStore",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneInitialValueStore"
  },
  {
    "label": "TBlendableTokenTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBlendableTokenTraits"
  },
  {
    "label": "TBlendableToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBlendableToken"
  },
  {
    "label": "IData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IData"
  },
  {
    "label": "TData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TData"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Evaluation / Blending / MovieSceneBlendType . h \" # include \" Misc / InlineValue . h \" # include \" Evaluation / MovieScenePlayback . h \" # include \" Evaluation / MovieSceneEvaluationScope . h \" template<DataType> struct TMovieSceneInitialValueStore ; namespace UE { namespace MovieScene { template<InType,WorkingDataType,SourceDataType> void)",
    "insertText": "BlendValue(WorkingDataType& OutBlend, InType InValue, float Weight, EMovieSceneBlendType BlendType, TMovieSceneInitialValueStore<SourceDataType>& InitialValueStore)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendValue(OutBlend, InValue, Weight, BlendType, INDEX_NONE, InitialValueStore)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (} template<InType,WorkingDataType,SourceDataType> void)",
    "insertText": "BlendValue(WorkingDataType& OutBlend, InType InValue, float Weight, EMovieSceneBlendType BlendType, int32 BlendingOrder, TMovieSceneInitialValueStore<SourceDataType>& InitialValueStore)"
  },
  {
    "label": "TBlendableToken()",
    "kind": "Method",
    "detail": "Function (} } } template<DataType> struct TBlendableTokenTraits { typedef DataType WorkingDataType ; } ; template<DataType> struct TBlendableToken { typedef TBlendableTokenTraits<DataType>::WorkingDataType WorkingDataType ;)",
    "insertText": "TBlendableToken()"
  },
  {
    "label": "TBlendableToken()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "TBlendableToken(T&& InValue, EMovieSceneBlendType InBlendType, float InWeight = 1.f, int32 InBlendingOrder = INDEX_NONE) : Value(TData<typename TDecay<T>::Type>(Forward<T>(InValue))) , HierarchicalBias(0) , Weight(InWeight) , BlendType(InBlendType) , BlendingOrder(InBlendingOrder)"
  },
  {
    "label": "TBlendableToken()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "TBlendableToken(T&& InValue, const FMovieSceneEvaluationScope& InCurrentScope, const FMovieSceneContext& InContext, EMovieSceneBlendType InBlendType, float InWeight = 1.f, int32 InBlendingOrder = INDEX_NONE) : Value(TData<typename TDecay<T>::Type>(Forward<T>(InValue))) , AnimatingScope(InCurrentScope) , HierarchicalBias(InContext.GetHierarchicalBias()) , Weight(InWeight) , BlendType(InBlendType) , BlendingOrder(InBlendingOrder)"
  },
  {
    "label": "TBlendableToken()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TBlendableToken(const TBlendableToken&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TBlendableToken&)",
    "insertText": "operator(const TBlendableToken&)"
  },
  {
    "label": "TBlendableToken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TBlendableToken(TBlendableToken&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TBlendableToken&)",
    "insertText": "operator(TBlendableToken&&)"
  },
  {
    "label": "AddTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTo(WorkingDataType& CumulativeBlend, TMovieSceneInitialValueStore<DataType>& InitialValueStore)"
  },
  {
    "label": "AddTo()",
    "kind": "Method",
    "detail": "Function (Value ->)",
    "insertText": "AddTo(CumulativeBlend, Weight, BlendType, BlendingOrder, InitialValueStore)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const TBlendableToken& RHS)"
  },
  {
    "label": "AddTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTo(WorkingDataType& CumulativeBlend, float Weight, EMovieSceneBlendType BlendType, int32 BlendingOrder, TMovieSceneInitialValueStore<DataType>& InitialValueStore)"
  },
  {
    "label": "TData()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct TData : IData {)",
    "insertText": "TData(T In) : Data(MoveTemp(In))"
  },
  {
    "label": "AddTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddTo(WorkingDataType& CumulativeBlend, float InWeight, EMovieSceneBlendType InBlendType, int32 InBlendingOrder, TMovieSceneInitialValueStore<DataType>& InitialValueStore)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using UE::MovieScene::BlendValue ;)",
    "insertText": "if(InBlendingOrder == INDEX_NONE)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlendValue(CumulativeBlend, Data, InWeight, InBlendType, InitialValueStore)"
  },
  {
    "label": "BlendValue()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "BlendValue(CumulativeBlend, Data, InWeight, InBlendType, InBlendingOrder, InitialValueStore)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } T Data ; } ; TInlineValue<IData,)",
    "insertText": "sizeof(DataType)"
  }
]