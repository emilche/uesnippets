[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FKismetCompilerContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FKismetCompilerContext"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnum"
  },
  {
    "label": "UK2Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FToolMenuSection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuSection"
  },
  {
    "label": "TObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObjectPtr"
  },
  {
    "label": "BLUEPRINTGRAPH_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BLUEPRINTGRAPH_API"
  },
  {
    "label": "FBlueprintCallableFunctionRedirect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintCallableFunctionRedirect"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EEdGraphPinDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EEdGraphPinDirection"
  },
  {
    "label": "UGraphNodeContextMenuContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGraphNodeContextMenuContext"
  },
  {
    "label": "UK2Node_Variable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Variable"
  },
  {
    "label": "UK2Node_VariableGet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_VariableGet"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UK2Node_VariableSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_VariableSet"
  },
  {
    "label": "FCreateSplitPinNodeParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCreateSplitPinNodeParams"
  },
  {
    "label": "EFunctionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EFunctionType"
  },
  {
    "label": "EDelegateFilterMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDelegateFilterMode"
  },
  {
    "label": "FSearchForAutocastFunctionResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSearchForAutocastFunctionResults"
  },
  {
    "label": "FFindSpecializedConversionNodeResults",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFindSpecializedConversionNodeResults"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AssetRegistry / AssetData . h \" # include \" Containers / Array . h \" # include \" Containers / EnumAsByte . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraph . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" EdGraph / EdGraphSchema . h \" # include \" HAL / PlatformMath . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Class . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" EdGraphSchema_K2 . generated . h \" class AActor ; class FKismetCompilerContext ; class FMenuBuilder ; class FProperty ; class UBlueprint ; class UClass ; class UEnum ; class UK2Node ; class UScriptStruct ; class UToolMenu ; struct FAssetData ; struct FToolMenuSection ; template<T> struct TObjectPtr ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() static FName StaticGetTypeId()"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "Type(\"FEdGraphSchemaAction_K2Struct\")"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} TObjectPtr<UStruct> Struct ; void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (Collector .)",
    "insertText": "AddReferencedObject(Struct)"
  },
  {
    "label": "GetPathName()",
    "kind": "Method",
    "detail": "Function (} } FName)",
    "insertText": "GetPathName()"
  },
  {
    "label": "FEdGraphSchemaAction_K2Struct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEdGraphSchemaAction_K2Struct() : FEdGraphSchemaAction() , Struct(nullptr)"
  },
  {
    "label": "FEdGraphSchemaAction_K2Struct()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEdGraphSchemaAction_K2Struct(FText InNodeCategory, FText InMenuDesc, FText InToolTip, const int32 InGrouping) : FEdGraphSchemaAction(MoveTemp(InNodeCategory), MoveTemp(InMenuDesc), MoveTemp(InToolTip), InGrouping) , Struct(nullptr)"
  },
  {
    "label": "FBlueprintMetadata()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBlueprintMetadata { public : const FName MD_AllowableBlueprintVariableType ; const FName MD_NotAllowableBlueprintVariableType ; const FName MD_BlueprintSpawnableComponent ; const FName MD_IsBlueprintBase ; const FName MD_RestrictedToClasses ; const FName MD_ChildCanTick ; const FName MD_ChildCannotTick ; const FName MD_IgnoreCategoryKeywordsInSubclasses ; const FName MD_CustomThunkTemplates ; const FName MD_Protected ; const FName MD_Latent ; const FName MD_CustomThunk ; const FName MD_Variadic ; const FName MD_UnsafeForConstructionScripts ; const FName MD_FunctionCategory ; const FName MD_DeprecatedFunction ; const FName MD_DeprecatedProperty ; const FName MD_DeprecationMessage ; const FName MD_CompactNodeTitle ; const FName MD_DisplayName ; const FName MD_ReturnDisplayName ; const FName MD_InternalUseParam ; const FName MD_ForceAsFunction ; const FName MD_IgnoreTypePromotion ; const FName MD_ExposeOnSpawn ; const FName MD_PropertyGetFunction ; const FName MD_PropertySetFunction ; const FName MD_Private ; const FName MD_HideSelfPin ; const FName MD_DefaultToSelf ; const FName MD_WorldContext ; const FName MD_CallableWithoutWorldContext ; const FName MD_DevelopmentOnly ; const FName MD_AutoCreateRefTerm ; const FName MD_HideAssetPicker ; const FName MD_ShowWorldContextPin ; const FName MD_HidePin ; const FName MD_BlueprintInternalUseOnly ; const FName MD_BlueprintInternalUseOnlyHierarchical ; const FName MD_NeedsLatentFixup ; const FName MD_LatentInfo ; const FName MD_LatentCallbackTarget ; const FName MD_AllowPrivateAccess ; const FName MD_ExposeFunctionCategories ; const FName MD_CannotImplementInterfaceInBlueprint ; const FName MD_ProhibitedInterfaces ; const FName MD_FunctionKeywords ; const FName MD_ExpandEnumAsExecs ; const FName MD_ExpandBoolAsExecs ; const FName MD_CommutativeAssociativeBinaryOperator ; const FName MD_MaterialParameterCollectionFunction ; const FName MD_Tooltip ; const FName MD_CallInEditor ; const FName MD_DataTablePin ; const FName MD_NativeMakeFunction ; const FName MD_NativeBreakFunction ; const FName MD_NativeDisableSplitPin ; const FName MD_DynamicOutputType ; const FName MD_DynamicOutputParam ; const FName MD_CustomStructureParam ; const FName MD_ArrayParam ; const FName MD_ArrayDependentParam ; const FName MD_SetParam ; const FName MD_MapParam ; const FName MD_MapKeyParam ; const FName MD_MapValueParam ; const FName MD_Bitmask ; const FName MD_BitmaskEnum ; const FName MD_Bitflags ; const FName MD_UseEnumValuesAsMaskValuesInEditor ; const FName MD_AnimBlueprintFunction ; const FName MD_ShowDisplayNames ; const FName MD_AllowAbstractClasses ; const FName MD_AllowedClasses ; const FName MD_GetOptions ; const FName MD_Namespace ; const FName MD_ThreadSafe ; const FName MD_NotThreadSafe ; const FName MD_FieldNotify ; private :)",
    "insertText": "FBlueprintMetadata()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; enum class EObjectReferenceType : uint8 { NotAnObject = 0 x00,ObjectReference = 0 x01,ClassReference = 0 x02,SoftObject = 0 x04,SoftClass = 0 x08,AllTypes = 0 x0f,} ; enum class ETypeTreeFilter : uint8 { None = 0 x00,AllowExec = 0 x01,AllowWildcard = 0 x02,IndexTypesOnly = 0 x04,RootTypesOnly = 0 x08 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(ETypeTreeFilter)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(config=Editor)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "GetPinType()",
    "kind": "Method",
    "detail": "Function (public : class FPinTypeTreeInfo { private : FEdGraphPinType PinType ; uint8 PossibleObjectReferenceTypes ; FAssetData CachedAssetData ; FText CachedDescription ; TSharedPtr<FString> CachedDescriptionString ; public : TArray<TSharedPtr<FPinTypeTreeInfo>> Children ; bool bReadOnly ; FText Tooltip ; public : const FEdGraphPinType&)",
    "insertText": "GetPinType(bool bForceLoadedSubCategoryObject)"
  },
  {
    "label": "GetPinTypeNoResolve()",
    "kind": "Method",
    "detail": "Function (const FEdGraphPinType&)",
    "insertText": "GetPinTypeNoResolve()"
  },
  {
    "label": "FPinTypeTreeInfo()",
    "kind": "Method",
    "detail": "Function (PinType . PinSubCategory = SubCategory ; })",
    "insertText": "FPinTypeTreeInfo(const FText& InFriendlyName, const FName CategoryName, const UEdGraphSchema_K2* Schema, const FText& InTooltip, bool bInReadOnly = false)"
  },
  {
    "label": "FPinTypeTreeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPinTypeTreeInfo(const FName CategoryName, UObject* SubCategoryObject, const FText& InTooltip, bool bInReadOnly = false, uint8 InPossibleObjectReferenceTypes = 0)"
  },
  {
    "label": "FPinTypeTreeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPinTypeTreeInfo(const FText& InFriendlyName, const FName CategoryName, const FAssetData& AssetData, const FText& InTooltip, bool bInReadOnly = false, uint8 InPossibleObjectReferenceTypes = 0)"
  },
  {
    "label": "FPinTypeTreeInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPinTypeTreeInfo(TSharedPtr<FPinTypeTreeInfo> InInfo)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (const FText&)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetCachedDescriptionString()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetCachedDescriptionString()"
  },
  {
    "label": "GetPossibleObjectReferenceTypes()",
    "kind": "Method",
    "detail": "Function (} } } return Tooltip ; } uint8)",
    "insertText": "GetPossibleObjectReferenceTypes()"
  },
  {
    "label": "FPinTypeTreeInfo()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FPinTypeTreeInfo() : PossibleObjectReferenceTypes(0) , bReadOnly(false)"
  },
  {
    "label": "GenerateDescription()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GenerateDescription()"
  },
  {
    "label": "SelectAllNodesInDirection()",
    "kind": "Method",
    "detail": "Function (} ; public : void)",
    "insertText": "SelectAllNodesInDirection(TEnumAsByte<enum EEdGraphPinDirection> InDirection, UEdGraph* Graph, UEdGraphPin* InGraphPin)"
  },
  {
    "label": "GetContextMenuActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetContextMenuActions(class UToolMenu* Menu, class UGraphNodeContextMenuContext* Context)"
  },
  {
    "label": "CanCreateConnection()",
    "kind": "Method",
    "detail": "Function (const FPinConnectionResponse)",
    "insertText": "CanCreateConnection(const UEdGraphPin* A, const UEdGraphPin* B)"
  },
  {
    "label": "TryCreateConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCreateConnection(UEdGraphPin* A, UEdGraphPin* B)"
  },
  {
    "label": "CreateAutomaticConversionNodeAndConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAutomaticConversionNodeAndConnections(UEdGraphPin* A, UEdGraphPin* B)"
  },
  {
    "label": "CreatePromotedConnection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreatePromotedConnection(UEdGraphPin* A, UEdGraphPin* B)"
  },
  {
    "label": "IsPinDefaultValid()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "IsPinDefaultValid(const UEdGraphPin* Pin, const FString& NewDefaultValue, TObjectPtr<UObject> NewDefaultObject, const FText& InNewDefaultText)"
  },
  {
    "label": "DoesSupportPinWatching()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportPinWatching()"
  },
  {
    "label": "IsPinBeingWatched()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPinBeingWatched(UEdGraphPin const* Pin)"
  },
  {
    "label": "ClearPinWatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPinWatch(UEdGraphPin const* Pin)"
  },
  {
    "label": "TrySetDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrySetDefaultValue(UEdGraphPin& Pin, const FString& NewDefaultValue, bool bMarkAsModified = true)"
  },
  {
    "label": "TrySetDefaultObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrySetDefaultObject(UEdGraphPin& Pin, UObject* NewDefaultObject, bool bMarkAsModified = true)"
  },
  {
    "label": "TrySetDefaultText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrySetDefaultText(UEdGraphPin& InPin, const FText& InNewDefaultText, bool bMarkAsModified = true)"
  },
  {
    "label": "DoesDefaultValueMatchAutogenerated()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesDefaultValueMatchAutogenerated(const UEdGraphPin& InPin)"
  },
  {
    "label": "ResetPinToAutogeneratedDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPinToAutogeneratedDefaultValue(UEdGraphPin* Pin, bool bCallModifyCallbacks = true)"
  },
  {
    "label": "ShouldHidePinDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldHidePinDefaultValue(UEdGraphPin* Pin)"
  },
  {
    "label": "ShouldShowAssetPickerForPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowAssetPickerForPin(UEdGraphPin* Pin)"
  },
  {
    "label": "GetPinTypeColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetPinTypeColor(const FEdGraphPinType& PinType)"
  },
  {
    "label": "GetSecondaryPinTypeColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetSecondaryPinTypeColor(const FEdGraphPinType& PinType)"
  },
  {
    "label": "GetPinDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPinDisplayName(const UEdGraphPin* Pin)"
  },
  {
    "label": "ConstructBasicPinTooltip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructBasicPinTooltip(const UEdGraphPin& Pin, const FText& PinDescription, FString& TooltipOut)"
  },
  {
    "label": "GetGraphType()",
    "kind": "Method",
    "detail": "Function (EGraphType)",
    "insertText": "GetGraphType(const UEdGraph* TestEdGraph)"
  },
  {
    "label": "IsTitleBarPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTitleBarPin(const UEdGraphPin& Pin)"
  },
  {
    "label": "BreakNodeLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakNodeLinks(UEdGraphNode& TargetNode)"
  },
  {
    "label": "BreakPinLinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakPinLinks(UEdGraphPin& TargetPin, bool bSendsNodeNotifcation)"
  },
  {
    "label": "BreakSinglePinLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BreakSinglePinLink(UEdGraphPin* SourcePin, UEdGraphPin* TargetPin)"
  },
  {
    "label": "ReconstructNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconstructNode(UEdGraphNode& TargetNode, bool bIsBatchRequest=false)"
  },
  {
    "label": "CanEncapuslateNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEncapuslateNode(UEdGraphNode const& TestNode)"
  },
  {
    "label": "HandleGraphBeingDeleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleGraphBeingDeleted(UEdGraph& GraphBeingRemoved)"
  },
  {
    "label": "GetGraphDisplayInformation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetGraphDisplayInformation(const UEdGraph& Graph, FGraphDisplayInfo& DisplayInfo)"
  },
  {
    "label": "DroppedAssetsOnGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DroppedAssetsOnGraph(const TArray<FAssetData>& Assets, const FVector2D& GraphPosition, UEdGraph* Graph)"
  },
  {
    "label": "DroppedAssetsOnNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DroppedAssetsOnNode(const TArray<FAssetData>& Assets, const FVector2D& GraphPosition, UEdGraphNode* Node)"
  },
  {
    "label": "DroppedAssetsOnPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DroppedAssetsOnPin(const TArray<FAssetData>& Assets, const FVector2D& GraphPosition, UEdGraphPin* Pin)"
  },
  {
    "label": "GetAssetsNodeHoverMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsNodeHoverMessage(const TArray<FAssetData>& Assets, const UEdGraphNode* HoverNode, FString& OutTooltipText, bool& OutOkIcon)"
  },
  {
    "label": "GetAssetsPinHoverMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsPinHoverMessage(const TArray<FAssetData>& Assets, const UEdGraphPin* HoverPin, FString& OutTooltipText, bool& OutOkIcon)"
  },
  {
    "label": "GetAssetsGraphHoverMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetsGraphHoverMessage(const TArray<FAssetData>& Assets, const UEdGraph* HoverGraph, FString& OutTooltipText, bool& OutOkIcon)"
  },
  {
    "label": "CanDuplicateGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateGraph(UEdGraph* InSourceGraph)"
  },
  {
    "label": "DuplicateGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "DuplicateGraph(UEdGraph* GraphToDuplicate)"
  },
  {
    "label": "CreateSubstituteNode()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "CreateSubstituteNode(UEdGraphNode* Node, const UEdGraph* Graph, FObjectInstancingGraph* InstanceGraph, TSet<FName>& InOutExtraNames)"
  },
  {
    "label": "GetNodeSelectionCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNodeSelectionCount(const UEdGraph* Graph)"
  },
  {
    "label": "GetCreateCommentAction()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FEdGraphSchemaAction>)",
    "insertText": "GetCreateCommentAction()"
  },
  {
    "label": "FadeNodeWhenDraggingOffPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FadeNodeWhenDraggingOffPin(const UEdGraphNode* Node, const UEdGraphPin* Pin)"
  },
  {
    "label": "BackwardCompatibilityNodeConversion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BackwardCompatibilityNodeConversion(UEdGraph* Graph, bool bOnlySafeChanges)"
  },
  {
    "label": "ShouldAlwaysPurgeOnModification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAlwaysPurgeOnModification()"
  },
  {
    "label": "RecombinePin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecombinePin(UEdGraphPin* Pin)"
  },
  {
    "label": "OnPinConnectionDoubleCicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPinConnectionDoubleCicked(UEdGraphPin* PinA, UEdGraphPin* PinB, const FVector2D& GraphPosition)"
  },
  {
    "label": "DropPinOnNode()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "DropPinOnNode(UEdGraphNode* InTargetNode, const FName& InSourcePinName, const FEdGraphPinType& InSourcePinType, EEdGraphPinDirection InSourcePinDirection)"
  },
  {
    "label": "SupportsDropPinOnNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDropPinOnNode(UEdGraphNode* InTargetNode, const FEdGraphPinType& InSourcePinType, EEdGraphPinDirection InSourcePinDirection, FText& OutErrorMessage)"
  },
  {
    "label": "IsCacheVisualizationOutOfDate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCacheVisualizationOutOfDate(int32 InVisualizationCacheID)"
  },
  {
    "label": "GetCurrentVisualizationCacheID()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentVisualizationCacheID()"
  },
  {
    "label": "ForceVisualizationCacheClear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForceVisualizationCacheClear()"
  },
  {
    "label": "SafeDeleteNodeFromGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SafeDeleteNodeFromGraph(UEdGraph* Graph, UEdGraphNode* NodeToDelete)"
  },
  {
    "label": "CanVariableBeDropped()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanVariableBeDropped(UEdGraph* InGraph, FProperty* InVariableToDrop)"
  },
  {
    "label": "GetActionFilteredWeight()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA float)",
    "insertText": "GetActionFilteredWeight(const FEdGraphSchemaAction& InCurrentAction, const TArray<FString>& InFilterTerms, const TArray<FString>& InSanitizedFilterTerms, const TArray<UEdGraphPin*>& DraggedFromPins)"
  },
  {
    "label": "GetSearchWeightModifiers()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FGraphSchemaSearchWeightModifiers)",
    "insertText": "GetSearchWeightModifiers()"
  },
  {
    "label": "DoesSupportCollapsedNodes()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "DoesSupportCollapsedNodes()"
  },
  {
    "label": "SpawnVariableGetNode()",
    "kind": "Method",
    "detail": "Function (class UK2Node_VariableGet*)",
    "insertText": "SpawnVariableGetNode(const FVector2D GraphPosition, class UEdGraph* ParentGraph, FName VariableName, UStruct* Source)"
  },
  {
    "label": "SpawnVariableSetNode()",
    "kind": "Method",
    "detail": "Function (class UK2Node_VariableSet*)",
    "insertText": "SpawnVariableSetNode(const FVector2D GraphPosition, class UEdGraph* ParentGraph, FName VariableName, UStruct* Source)"
  },
  {
    "label": "PinHasSplittableStructType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PinHasSplittableStructType(const UEdGraphPin* InGraphPin)"
  },
  {
    "label": "PinDefaultValueIsEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PinDefaultValueIsEditable(const UEdGraphPin& InGraphPin)"
  },
  {
    "label": "PinHasCustomDefaultFormat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PinHasCustomDefaultFormat(const UEdGraphPin& InGraphPin)"
  },
  {
    "label": "FCreateSplitPinNodeParams()",
    "kind": "Method",
    "detail": "Function (struct FCreateSplitPinNodeParams {)",
    "insertText": "FCreateSplitPinNodeParams(const bool bInTransient) : CompilerContext(nullptr) , SourceGraph(nullptr) , bTransient(bInTransient)"
  },
  {
    "label": "FCreateSplitPinNodeParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCreateSplitPinNodeParams(class FKismetCompilerContext* InCompilerContext, UEdGraph* InSourceGraph) : CompilerContext(InCompilerContext) , SourceGraph(InSourceGraph) , bTransient(false)"
  },
  {
    "label": "CreateSplitPinNode()",
    "kind": "Method",
    "detail": "Function (} FKismetCompilerContext* CompilerContext ; UEdGraph* SourceGraph ; bool bTransient ; } ; UK2Node*)",
    "insertText": "CreateSplitPinNode(UEdGraphPin* Pin, const FCreateSplitPinNodeParams& Params)"
  },
  {
    "label": "GetPinDefaultValuesFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPinDefaultValuesFromString(const FEdGraphPinType& PinType, UObject* OwningObject, const FString& NewValue, FString& UseDefaultValue, TObjectPtr<UObject>& UseDefaultObject, FText& UseDefaultText, bool bPreserveTextIdentity = true)"
  },
  {
    "label": "DefaultValueSimpleValidation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DefaultValueSimpleValidation(const FEdGraphPinType& PinType, const FName PinName, const FString& NewDefaultValue, TObjectPtr<UObject> NewDefaultObject, const FText& InText, FString* OutMsg = nullptr)"
  },
  {
    "label": "IsAutoCreateRefTerm()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAutoCreateRefTerm(const UEdGraphPin* Pin)"
  },
  {
    "label": "ClassHasBlueprintAccessibleMembers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClassHasBlueprintAccessibleMembers(const UClass* InClass)"
  },
  {
    "label": "IsConstructionScript()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstructionScript(const UEdGraph* TestEdGraph)"
  },
  {
    "label": "IsCompositeGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompositeGraph(const UEdGraph* TestEdGraph)"
  },
  {
    "label": "IsConstFunctionGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConstFunctionGraph(const UEdGraph* TestEdGraph, bool* bOutIsEnforcingConstCorrectness = nullptr)"
  },
  {
    "label": "IsStaticFunctionGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsStaticFunctionGraph(const UEdGraph* TestEdGraph)"
  },
  {
    "label": "IsExecPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExecPin(const UEdGraphPin& Pin)"
  },
  {
    "label": "IsMetaPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMetaPin(const UEdGraphPin& Pin)"
  },
  {
    "label": "IsDelegateCategory()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDelegateCategory(const FName Category)"
  },
  {
    "label": "IsIndexWildcardCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIndexWildcardCompatible(const FEdGraphPinType& PinType)"
  },
  {
    "label": "FindExecutionPin()",
    "kind": "Method",
    "detail": "Function (} UEdGraphPin*)",
    "insertText": "FindExecutionPin(const UEdGraphNode& Node, EEdGraphPinDirection PinDirection)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin* Pin = Node . Pins [ PinIndex ] ;)",
    "insertText": "if((Pin->Direction == PinDirection) && IsExecPin(*Pin))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin* Pin = Node . Pins [ PinIndex ] ;)",
    "insertText": "if((Pin->Direction == PinDirection) && IsSelfPin(*Pin))"
  },
  {
    "label": "CanSplitStructPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSplitStructPin(const UEdGraphPin& Pin)"
  },
  {
    "label": "CanRecombineStructPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRecombineStructPin(const UEdGraphPin& Pin)"
  },
  {
    "label": "GetPropertyCategoryInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPropertyCategoryInfo(const FProperty* TestProperty, FName& OutCategory, FName& OutSubCategory, UObject*& OutSubCategoryObject, bool& bOutIsWeakPointer)"
  },
  {
    "label": "ConvertPropertyToPinType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertPropertyToPinType(const FProperty* Property, FEdGraphPinType& TypeOut)"
  },
  {
    "label": "HasWildcardParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasWildcardParams(const UFunction* Function)"
  },
  {
    "label": "IsWildcardProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsWildcardProperty(const FProperty* ParamProperty)"
  },
  {
    "label": "GetCallableParentFunction()",
    "kind": "Method",
    "detail": "Function (enum EFunctionType { FT_Imperative = 0 x01,FT_Pure = 0 x02,FT_Const = 0 x04,FT_Protected = 0 x08,} ; UFunction*)",
    "insertText": "GetCallableParentFunction(UFunction* Function)"
  },
  {
    "label": "IsActorValidForLevelScriptRefs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActorValidForLevelScriptRefs(const AActor* TestActor, const UBlueprint* Blueprint)"
  },
  {
    "label": "AddSelectedReplaceableNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSelectedReplaceableNodes(FToolMenuSection& Section, UBlueprint* Blueprint, const UEdGraphNode* InGraphNode)"
  },
  {
    "label": "ReplaceSelectedNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceSelectedNode(UEdGraphNode* SourceNode, AActor* TargetActor)"
  },
  {
    "label": "FunctionCanBePlacedAsEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FunctionCanBePlacedAsEvent(const UFunction* InFunction)"
  },
  {
    "label": "FunctionCanBeUsedInDelegate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FunctionCanBeUsedInDelegate(const UFunction* InFunction)"
  },
  {
    "label": "CanUserKismetCallFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUserKismetCallFunction(const UFunction* Function)"
  },
  {
    "label": "HasFunctionAnyOutputParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFunctionAnyOutputParameter(const UFunction* Function)"
  },
  {
    "label": "CanUserKismetAccessVariable()",
    "kind": "Method",
    "detail": "Function (enum EDelegateFilterMode { CannotBeDelegate,MustBeDelegate,VariablesAndDelegates } ; bool)",
    "insertText": "CanUserKismetAccessVariable(const FProperty* Property, const UClass* InClass, EDelegateFilterMode FilterMode)"
  },
  {
    "label": "CanKismetOverrideFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanKismetOverrideFunction(const UFunction* Function)"
  },
  {
    "label": "GetFriendlySignatureName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetFriendlySignatureName(const UFunction* Function)"
  },
  {
    "label": "IsAllowableBlueprintVariableType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowableBlueprintVariableType(const UEnum* InEnum)"
  },
  {
    "label": "IsAllowableBlueprintVariableType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowableBlueprintVariableType(const UClass* InClass, bool bAssumeBlueprintType = false)"
  },
  {
    "label": "IsAllowableBlueprintVariableType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAllowableBlueprintVariableType(const UScriptStruct *InStruct, bool bForInternalUse = false)"
  },
  {
    "label": "IsPropertyExposedOnSpawn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPropertyExposedOnSpawn(const FProperty* Property)"
  },
  {
    "label": "GetAutoEmitTermParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAutoEmitTermParameters(const UFunction* Function, TArray<FString>& AutoEmitParameterNames)"
  },
  {
    "label": "FunctionHasParamOfType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FunctionHasParamOfType(const UFunction* InFunction, UEdGraph const* InGraph, const FEdGraphPinType& DesiredPinType, bool bWantOutput)"
  },
  {
    "label": "AddExtraFunctionFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExtraFunctionFlags(const UEdGraph* CurrentGraph, int32 ExtraFlags)"
  },
  {
    "label": "MarkFunctionEntryAsEditable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkFunctionEntryAsEditable(const UEdGraph* CurrentGraph, bool bNewEditable)"
  },
  {
    "label": "CreateMacroGraphTerminators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMacroGraphTerminators(UEdGraph& Graph, UClass* Class)"
  },
  {
    "label": "CreateFunctionGraphTerminators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFunctionGraphTerminators(UEdGraph& Graph, UClass* Class)"
  },
  {
    "label": "CreateFunctionGraphTerminators()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateFunctionGraphTerminators(UEdGraph& Graph, const UFunction* FunctionSignature)"
  },
  {
    "label": "TypeToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TypeToText(const FProperty* const Property)"
  },
  {
    "label": "TerminalTypeToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TerminalTypeToText(const FName Category, const FName SubCategory, UObject* SubCategoryObject, bool bIsWeakPtr)"
  },
  {
    "label": "TypeToText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "TypeToText(const FEdGraphPinType& Type)"
  },
  {
    "label": "GetCategoryText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCategoryText(const FName Category, const bool bForMenu = false)"
  },
  {
    "label": "GetCategoryText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCategoryText(FName Category, FName SubCategory, bool bForMenu = false)"
  },
  {
    "label": "GetVariableTypeTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVariableTypeTree(TArray< TSharedPtr<FPinTypeTreeInfo> >& TypeTree, ETypeTreeFilter TypeTreeFilter = ETypeTreeFilter::None)"
  },
  {
    "label": "DoesTypeHaveSubtypes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesTypeHaveSubtypes(const FName Category)"
  },
  {
    "label": "ArePinsCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePinsCompatible(const UEdGraphPin* PinA, const UEdGraphPin* PinB, const UClass* CallingContext = NULL, bool bIgnoreArray = false)"
  },
  {
    "label": "DetermineConnectionResponseOfCompatibleTypedPins()",
    "kind": "Method",
    "detail": "Function (const FPinConnectionResponse)",
    "insertText": "DetermineConnectionResponseOfCompatibleTypedPins(const UEdGraphPin* PinA, const UEdGraphPin* PinB, const UEdGraphPin* InputPin, const UEdGraphPin* OutputPin)"
  },
  {
    "label": "ArePinTypesCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePinTypesCompatible(const FEdGraphPinType& Output, const FEdGraphPinType& Input, const UClass* CallingContext = NULL, bool bIgnoreArray = false)"
  },
  {
    "label": "ArePinTypesEquivalent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ArePinTypesEquivalent(const FEdGraphPinType& PinA, const FEdGraphPinType& PinB)"
  },
  {
    "label": "SetPinAutogeneratedDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinAutogeneratedDefaultValue(UEdGraphPin* Pin, const FString& NewValue)"
  },
  {
    "label": "SetPinAutogeneratedDefaultValueBasedOnType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinAutogeneratedDefaultValueBasedOnType(UEdGraphPin* Pin)"
  },
  {
    "label": "SetPinDefaultValueAtConstruction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPinDefaultValueAtConstruction(UEdGraphPin* Pin, const FString& DefaultValueString)"
  },
  {
    "label": "HandleParameterDefaultValueChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleParameterDefaultValueChanged(UK2Node* TargetNode)"
  },
  {
    "label": "FindFunctionParameterDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindFunctionParameterDefaultValue(const UFunction* Function, const FProperty* Param, FString& OutString)"
  },
  {
    "label": "ValidateExistingConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateExistingConnections(UEdGraphPin* Pin)"
  },
  {
    "label": "FindSetVariableByNameFunction()",
    "kind": "Method",
    "detail": "Function (UFunction*)",
    "insertText": "FindSetVariableByNameFunction(const FEdGraphPinType& PinType)"
  },
  {
    "label": "SearchForAutocastFunction()",
    "kind": "Method",
    "detail": "Function (struct FSearchForAutocastFunctionResults { FName TargetFunction ; UClass* FunctionOwner = nullptr ; } ; [ [ nodiscard ] ] TOptional<FSearchForAutocastFunctionResults>)",
    "insertText": "SearchForAutocastFunction(const FEdGraphPinType& OutputPinType, const FEdGraphPinType& InputPinType)"
  },
  {
    "label": "FindSpecializedConversionNode()",
    "kind": "Method",
    "detail": "Function (struct FFindSpecializedConversionNodeResults { class UK2Node* TargetNode = nullptr ; } ; [ [ nodiscard ] ] TOptional<FFindSpecializedConversionNodeResults>)",
    "insertText": "FindSpecializedConversionNode(const FEdGraphPinType& OutputPinType, const UEdGraphPin& InputPin, bool bCreateNode)"
  },
  {
    "label": "GetNonExistentVariableMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNonExistentVariableMenu(FToolMenuSection& Section, const UEdGraphNode* InGraphNode, UBlueprint* OwnerBlueprint)"
  },
  {
    "label": "GetReplaceVariableMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReplaceVariableMenu(FToolMenuSection& Section, const UEdGraphNode* InGraphNode, UBlueprint* InOwnerBlueprint, bool bInReplaceExistingVariable = false)"
  },
  {
    "label": "CalculateAveragePositionBetweenNodes()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "CalculateAveragePositionBetweenNodes(UEdGraphPin* InputPin, UEdGraphPin* OutputPin)"
  },
  {
    "label": "AutowireConversionNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutowireConversionNode(UEdGraphPin* InputPin, UEdGraphPin* OutputPin, UEdGraphNode* ConversionNode)"
  },
  {
    "label": "EstimateNodeHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EstimateNodeHeight(UEdGraphNode* Node)"
  },
  {
    "label": "DoesGraphSupportImpureFunctions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesGraphSupportImpureFunctions(const UEdGraph* InGraph)"
  },
  {
    "label": "IsGraphMarkedThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphMarkedThreadSafe(const UEdGraph* InGraph)"
  },
  {
    "label": "CanFunctionBeUsedInGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFunctionBeUsedInGraph(const UClass* InClass, const UFunction* InFunction, const UEdGraph* InDestGraph, uint32 InFunctionTypes, bool bInCalledForEach, FText* OutReason = nullptr)"
  },
  {
    "label": "CollapseGatewayNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CollapseGatewayNode(UK2Node* InNode, UEdGraphNode* InEntryNode, UEdGraphNode* InResultNode, class FKismetCompilerContext* CompilerContext = nullptr, TSet<UEdGraphNode*>* OutExpandedNodes = nullptr)"
  },
  {
    "label": "CombineTwoPinNetsAndRemoveOldPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineTwoPinNetsAndRemoveOldPins(UEdGraphPin* InPinA, UEdGraphPin* InPinB)"
  },
  {
    "label": "LinkDataPinFromOutputToInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkDataPinFromOutputToInput(UEdGraphNode* InOutputNode, UEdGraphNode* InInputNode)"
  },
  {
    "label": "ReplaceOldNodeWithNew()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplaceOldNodeWithNew(UEdGraphNode* OldNode, UEdGraphNode* NewNode, const TMap<FName, FName>& OldPinToNewPinMap)"
  },
  {
    "label": "ConvertDeprecatedNodeToFunctionCall()",
    "kind": "Method",
    "detail": "Function (UK2Node*)",
    "insertText": "ConvertDeprecatedNodeToFunctionCall(UK2Node* OldNode, UFunction* NewFunction, TMap<FName, FName>& OldPinToNewPinMap, UEdGraph* Graph)"
  },
  {
    "label": "DoesSupportAnimNotifyActions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoesSupportAnimNotifyActions()"
  },
  {
    "label": "OnCreateNonExistentLocalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateNonExistentLocalVariable(class UK2Node_Variable* Variable, UBlueprint* OwnerBlueprint)"
  },
  {
    "label": "OnReplaceVariableForVariableNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReplaceVariableForVariableNode(class UK2Node_Variable* Variable, UBlueprint* OwnerBlueprint, FName VariableName, bool bIsSelfMember)"
  },
  {
    "label": "GetReplaceVariableMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReplaceVariableMenu(UToolMenu* Menu, class UK2Node_Variable* Variable, UBlueprint* OwnerBlueprint, bool bReplaceExistingVariable = false)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "DoesFunctionHaveOutParameters()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "DoesFunctionHaveOutParameters(const UFunction* Function)"
  }
]