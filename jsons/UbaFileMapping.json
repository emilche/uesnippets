[
  {
    "label": "Logger",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Logger"
  },
  {
    "label": "WorkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkManager"
  },
  {
    "label": "FileMappingHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FileMappingHandle"
  },
  {
    "label": "MappedView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MappedView"
  },
  {
    "label": "FileMappingType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "FileMappingType"
  },
  {
    "label": "FileMappingBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileMappingBuffer"
  },
  {
    "label": "File",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "File"
  },
  {
    "label": "MappingStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MappingStorage"
  },
  {
    "label": "FileMappingAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileMappingAllocator"
  },
  {
    "label": "Allocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Allocation"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaEvent . h \" # include \" UbaHash . h \" # include \" UbaSynchronization . h \" namespace uba { class Logger ; class WorkManager ; # if PLATFORM_WINDOWS struct FileMappingHandle { HANDLE handle = 0 ; bool)",
    "insertText": "operator(const FileMappingHandle& o)"
  },
  {
    "label": "FromU64()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FromU64(u64 v)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "handle(HANDLE)"
  },
  {
    "label": "FileMappingHandle()",
    "kind": "Method",
    "detail": "Function (} } ; # else u32 FILE_MAP_WRITE = 0 x0002 ; u32 FILE_MAP_READ = 0 x0004 ; u32 FILE_MAP_ALL_ACCESS = FILE_MAP_WRITE | FILE_MAP_READ ; u32 SEC_RESERVE = 0 x04000000 ; u32 PAGE_READWRITE = 0 x04 ; # if PLATFORM_MAC u32 SHM_MAX_FILENAME = PSHMNAMLEN ; # else u32 SHM_MAX_FILENAME = 3 8 ; # endif struct FileMappingHandle {)",
    "insertText": "FileMappingHandle(int shmFd_ = -1, int lockFd_ = -1, u64 uid_ = ~u64(0)) : shmFd(shmFd_), lockFd(lockFd_), uid(uid_)"
  },
  {
    "label": "FileMappingHandle()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FileMappingHandle(const FileMappingHandle& o)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(false)"
  },
  {
    "label": "CreateMemoryMappingW()",
    "kind": "Method",
    "detail": "Function (uid = v ; } } ; # endif FileMappingHandle)",
    "insertText": "CreateMemoryMappingW(Logger& logger, u32 flProtect, u64 maxSize, const tchar* name = nullptr)"
  },
  {
    "label": "CreateFileMappingW()",
    "kind": "Method",
    "detail": "Function (FileMappingHandle)",
    "insertText": "CreateFileMappingW(FileHandle file, u32 flProtect, u64 maxSize = 0, const tchar* hint = TC(\"\"))"
  },
  {
    "label": "MapViewOfFile()",
    "kind": "Method",
    "detail": "Function (u8*)",
    "insertText": "MapViewOfFile(FileMappingHandle fileMappingObject, u32 dwDesiredAccess, u64 offset, u64 dwNumberOfBytesToMap)"
  },
  {
    "label": "MapViewCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MapViewCommit(void* address, u64 size)"
  },
  {
    "label": "UnmapViewOfFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnmapViewOfFile(const void* lpBaseAddress, u64 bytesToUnmap, const tchar* hint)"
  },
  {
    "label": "CloseFileMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CloseFileMapping(FileMappingHandle h)"
  },
  {
    "label": "DuplicateFileMapping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DuplicateFileMapping(ProcHandle hSourceProcessHandle, FileMappingHandle hSourceHandle, ProcHandle hTargetProcessHandle, FileMappingHandle* lpTargetHandle, u32 dwDesiredAccess, bool bInheritHandle, u32 dwOptions)"
  },
  {
    "label": "MapMemoryCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MapMemoryCopy(void* dest, const void* source, u64 size)"
  },
  {
    "label": "FileMappingBuffer()",
    "kind": "Method",
    "detail": "Function (struct MappedView { FileMappingHandle handle ; u64 offset = 0 ; u64 size = 0 ; u8* memory = nullptr ; bool isCompressed = true ; } ; enum FileMappingType : u8 { MappedView_Transient = 0,MappedView_Persistent = 1,} ; class FileMappingBuffer { public :)",
    "insertText": "FileMappingBuffer(Logger& logger, WorkManager* workManager)"
  },
  {
    "label": "FileMappingBuffer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileMappingBuffer()"
  },
  {
    "label": "AddTransient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddTransient(const tchar* name)"
  },
  {
    "label": "AddPersistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPersistent(const tchar* name, FileHandle fileHandle, u64 size, u64 capacity)"
  },
  {
    "label": "CloseDatabase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDatabase()"
  },
  {
    "label": "AllocAndMapView()",
    "kind": "Method",
    "detail": "Function (MappedView)",
    "insertText": "AllocAndMapView(FileMappingType type, u64 size, u64 alignment, const tchar* hint, bool allowShrink = false)"
  },
  {
    "label": "MapView()",
    "kind": "Method",
    "detail": "Function (MappedView)",
    "insertText": "MapView(FileMappingHandle handle, u64 offset, u64 size, const tchar* hint)"
  },
  {
    "label": "UnmapView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapView(MappedView view, const tchar* hint, u64 newSize = InvalidValue)"
  },
  {
    "label": "GetSizeAndCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSizeAndCount(FileMappingType type, u64& outSize, u32& outCount)"
  },
  {
    "label": "GetPersistentHandle()",
    "kind": "Method",
    "detail": "Function (FileMappingHandle)",
    "insertText": "GetPersistentHandle(u32 index)"
  },
  {
    "label": "GetFile()",
    "kind": "Method",
    "detail": "Function (File&)",
    "insertText": "GetFile(FileMappingHandle handle, u8& outStorageIndex)"
  },
  {
    "label": "MappingStorage()",
    "kind": "Method",
    "detail": "Function (Logger& m_logger ; WorkManager* m_workManager ; u64 m_pageSize = 0 ; struct MappingStorage { File files [ 1 2 8 ] ; u32 fileCount = 0 ; ReaderWriterLock availableFilesLock ; Event availableFilesEvent ; File* availableFiles [ 1 2 8 ] = { 0 } ; u32 availableFilesCount = 0 ;)",
    "insertText": "MappingStorage() : availableFilesEvent(false)"
  },
  {
    "label": "PopFile()",
    "kind": "Method",
    "detail": "Function (} } ; File*)",
    "insertText": "PopFile(MappingStorage& storage, u64 size, u64 alignment)"
  },
  {
    "label": "PushFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFile(MappingStorage& storage, File* file)"
  },
  {
    "label": "CloseMappingStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseMappingStorage(MappingStorage& storage)"
  },
  {
    "label": "FileMappingBuffer()",
    "kind": "Method",
    "detail": "Function (MappingStorage m_storage [ 2 ] ;)",
    "insertText": "FileMappingBuffer(const FileMappingBuffer&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FileMappingBuffer&)"
  },
  {
    "label": "FileMappingAllocator()",
    "kind": "Method",
    "detail": "Function (} ; class FileMappingAllocator { public :)",
    "insertText": "FileMappingAllocator(Logger& logger, const tchar* name)"
  },
  {
    "label": "FileMappingAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FileMappingAllocator()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init(u64 blockSize, u64 capacity)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (struct Allocation { FileMappingHandle handle ; u64 offset = 0 ; u8* memory = nullptr ; } ; Allocation)",
    "insertText": "Alloc(const tchar* hint)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Allocation allocation)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetSize()"
  },
  {
    "label": "FileMappingAllocator()",
    "kind": "Method",
    "detail": "Function (private : Logger& m_logger ; const tchar* m_name ; u64 m_pageSize = 0 ; u64 m_capacity = 0 ; u64 m_blockSize = 0 ; ReaderWriterLock m_mappingLock ; FileMappingHandle m_mappingHandle ; u64 m_mappingCount = 0 ; Set<u64> m_availableBlocks ;)",
    "insertText": "FileMappingAllocator(const FileMappingAllocator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const FileMappingAllocator&)"
  }
]