[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMovieScene3DLocationKeyStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScene3DLocationKeyStruct"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FMovieScene3DRotationKeyStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScene3DRotationKeyStruct"
  },
  {
    "label": "FMovieScene3DScaleKeyStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScene3DScaleKeyStruct"
  },
  {
    "label": "FMovieScene3DTransformKeyStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScene3DTransformKeyStruct"
  },
  {
    "label": "FMovieSceneTransformMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTransformMask"
  },
  {
    "label": "UMovieScene3DTransformSectionConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformSectionConstraints"
  },
  {
    "label": "UMovieScene3DTransformSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene3DTransformSection"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Components / SceneComponent . h \" # include \" Curves / KeyHandle . h \" # include \" MovieSceneSection . h \" # include \" MovieSceneConstrainedSection . h \" # include \" MovieSceneKeyStruct . h \" # include \" Channels / MovieSceneDoubleChannel . h \" # include \" Channels / MovieSceneFloatChannel . h \" # include \" Channels / MovieSceneSectionChannelOverrideRegistry . h \" # include \" Channels / IMovieSceneChannelOverrideProvider . h \" # include \" EntitySystem / IMovieSceneEntityProvider . h \" # include \" TransformData . h \" # include \" Misc / LargeWorldCoordinates . h \" # include \" ConstraintsManager . h \" # include \" ConstraintChannel . h \" # include \" MovieScene3DTransformSection . generated . h \" # if WITH_EDITORONLY_DATA)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (EST_OnlyWhenSelected)",
    "insertText": "UMETA(DisplayName=\"Only When Selected\"), EST_Always UMETA(DisplayName=\"Always\"), EST_Never UMETA(DisplayName=\"Never\")"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, Category=Key)"
  },
  {
    "label": "PropagateChanges()",
    "kind": "Method",
    "detail": "Function (FMovieSceneKeyStructHelper KeyStructInterop ; void)",
    "insertText": "PropagateChanges(const FPropertyChangedEvent& ChangeEvent)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct TStructOpsTypeTraits<FMovieScene3DTransformKeyStruct> : public TStructOpsTypeTraitsBase2<FMovieScene3DTransformKeyStruct> { enum { WithCopy = false } ; } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EMovieSceneTransformChannel) USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneTransformMask() : Mask(0)"
  },
  {
    "label": "FMovieSceneTransformMask()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMovieSceneTransformMask(EMovieSceneTransformChannel Channel) : Mask((__underlying_type(EMovieSceneTransformChannel))Channel)"
  },
  {
    "label": "GetChannels()",
    "kind": "Method",
    "detail": "Function (} EMovieSceneTransformChannel)",
    "insertText": "GetChannels()"
  },
  {
    "label": "GetTranslationFactor()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetTranslationFactor()"
  },
  {
    "label": "GetRotationFactor()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetRotationFactor()"
  },
  {
    "label": "GetScaleFactor()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetScaleFactor()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: virtual void PostLoad()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "Modify(bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "ShowCurveForChannel()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "ShowCurveForChannel(const void* Channel)"
  },
  {
    "label": "SetBlendType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBlendType(EMovieSceneBlendType InBlendType)"
  },
  {
    "label": "OnBindingIDsUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBindingIDsUpdated(const TMap<UE::MovieScene::FFixedObjectBindingID, UE::MovieScene::FFixedObjectBindingID>& OldFixedToNewFixedMap, FMovieSceneSequenceID LocalSequenceID, TSharedRef<UE::MovieScene::FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GetReferencedBindings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetReferencedBindings(TArray<FGuid>& OutBindings)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreSave(FObjectPreSaveContext SaveContext)"
  },
  {
    "label": "PostPaste()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "PostPaste()"
  },
  {
    "label": "GetMask()",
    "kind": "Method",
    "detail": "Function (# endif public : FMovieSceneTransformMask)",
    "insertText": "GetMask()"
  },
  {
    "label": "SetMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMask(FMovieSceneTransformMask NewMask)"
  },
  {
    "label": "GetMaskByName()",
    "kind": "Method",
    "detail": "Function (FMovieSceneTransformMask)",
    "insertText": "GetMaskByName(const FName& InName)"
  },
  {
    "label": "GetUseQuaternionInterpolation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseQuaternionInterpolation()"
  },
  {
    "label": "SetUseQuaternionInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseQuaternionInterpolation(bool bInUseQuaternionInterpolation)"
  },
  {
    "label": "GetWeightChannel()",
    "kind": "Method",
    "detail": "Function (FMovieSceneFloatChannel*)",
    "insertText": "GetWeightChannel()"
  },
  {
    "label": "CacheChannelProxy()",
    "kind": "Method",
    "detail": "Function (EMovieSceneChannelProxyType)",
    "insertText": "CacheChannelProxy()"
  },
  {
    "label": "PopulateEvaluationFieldImpl()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "PopulateEvaluationFieldImpl(const TRange<FFrameNumber>& EffectiveRange, const FMovieSceneEvaluationFieldEntityMetaData& InMetaData, FMovieSceneEntityComponentFieldBuilder* OutFieldBuilder)"
  },
  {
    "label": "ImportEntityImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportEntityImpl(UMovieSceneEntitySystemLinker* EntityLinker, const FEntityImportParams& Params, FImportedEntity* OutImportedEntity)"
  },
  {
    "label": "InterrogateEntityImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterrogateEntityImpl(UMovieSceneEntitySystemLinker* EntityLinker, const FEntityImportParams& Params, FImportedEntity* OutImportedEntity)"
  },
  {
    "label": "BuildEntity()",
    "kind": "Method",
    "detail": "Function (template<BaseBuilderType> void)",
    "insertText": "BuildEntity(BaseBuilderType& InBaseBuilder, UMovieSceneEntitySystemLinker* Linker, const FEntityImportParams& Params, FImportedEntity* OutImportedEntity)"
  },
  {
    "label": "PopulateConstraintEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateConstraintEntities(const TRange<FFrameNumber>& EffectiveRange, const FMovieSceneEvaluationFieldEntityMetaData& InMetaData, FMovieSceneEntityComponentFieldBuilder* OutFieldBuilder)"
  },
  {
    "label": "ImportConstraintEntity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportConstraintEntity(UMovieSceneEntitySystemLinker* EntityLinker, const FEntityImportParams& Params, FImportedEntity* OutImportedEntity)"
  },
  {
    "label": "GetChannelOverrideRegistry()",
    "kind": "Method",
    "detail": "Function (private : UE::MovieScene::FChannelOverrideNames ChannelOverrideNames ; UMovieSceneSectionChannelOverrideRegistry*)",
    "insertText": "GetChannelOverrideRegistry(bool bCreateIfMissing)"
  },
  {
    "label": "GetChannelOverrideProviderTraits()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::FChannelOverrideProviderTraitsHandle)",
    "insertText": "GetChannelOverrideProviderTraits()"
  },
  {
    "label": "OnChannelOverridesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChannelOverridesChanged()"
  },
  {
    "label": "HasConstraintChannel()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "HasConstraintChannel(const FGuid& InGuid)"
  },
  {
    "label": "GetConstraintChannel()",
    "kind": "Method",
    "detail": "Function (FConstraintAndActiveChannel*)",
    "insertText": "GetConstraintChannel(const FGuid& InConstraintGuid)"
  },
  {
    "label": "AddConstraintChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConstraintChannel(UTickableConstraint* InConstraint)"
  },
  {
    "label": "RemoveConstraintChannel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveConstraintChannel(const UTickableConstraint* InConstraint)"
  },
  {
    "label": "GetConstraintsChannels()",
    "kind": "Method",
    "detail": "Function (TArray<FConstraintAndActiveChannel>&)",
    "insertText": "GetConstraintsChannels()"
  },
  {
    "label": "ReplaceConstraint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceConstraint(const FName InConstraintName, UTickableConstraint* InConstraint)"
  },
  {
    "label": "OnConstraintsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConstraintsChanged()"
  },
  {
    "label": "GetShow3DTrajectory()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITORONLY_DATA public : EShow3DTrajectory)",
    "insertText": "GetShow3DTrajectory()"
  }
]