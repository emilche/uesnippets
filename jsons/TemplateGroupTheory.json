[
  {
    "label": "Equality",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Equality"
  },
  {
    "label": "strip_identities",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "strip_identities"
  },
  {
    "label": "Multiply",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Multiply"
  },
  {
    "label": "dimino_first_step_elements_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dimino_first_step_elements_helper"
  },
  {
    "label": "dimino_first_step_elements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dimino_first_step_elements"
  },
  {
    "label": "dimino_get_coset_elements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dimino_get_coset_elements"
  },
  {
    "label": "dimino_add_cosets_for_rep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dimino_add_cosets_for_rep"
  },
  {
    "label": "dimino_add_all_coset_spaces",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dimino_add_all_coset_spaces"
  },
  {
    "label": "dimino_add_generator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dimino_add_generator"
  },
  {
    "label": "dimino_add_remaining_generators",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dimino_add_remaining_generators"
  },
  {
    "label": "enumerate_group_elements_noid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "enumerate_group_elements_noid"
  },
  {
    "label": "enumerate_group_elements",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "enumerate_group_elements"
  },
  {
    "label": "EIGEN_TPL_PP_SPEC_HACK_DEFC()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSORSYMMETRY_TEMPLATEGROUPTHEORY_H # define EIGEN_CXX11_TENSORSYMMETRY_TEMPLATEGROUPTHEORY_H namespace Eigen { namespace internal { namespace group_theory { template<template<,> class Equality,id,L> struct strip_identities ; template<template<,> class Equality,id,t,. . . ts> struct strip_identities<Equality,id,type_list<t,ts . . .>> { typedef conditional<Equality<id,t>::value,strip_identities<Equality,id,type_list<ts . . .>>::type,concat<type_list<t>,strip_identities<Equality,id,type_list<ts . . .>>::type>::type>::type type ; int global_flags = Equality<id,t>::global_flags | strip_identities<Equality,id,type_list<ts . . .>>::global_flags ; } ; template<template<,> class Equality,id)",
    "insertText": "EIGEN_TPL_PP_SPEC_HACK_DEFC(typename, ts) > struct strip_identities<Equality, id, type_list<EIGEN_TPL_PP_SPEC_HACK_USE(ts)"
  },
  {
    "label": "EIGEN_TPL_PP_SPEC_HACK_DEFC()",
    "kind": "Method",
    "detail": "Function (typedef type_list<> type ; int global_flags = 0 ; } ; template<template<,> class Multiply,template<,> class Equality,id,g,current_element,elements,bool dont_add_current_element> struct dimino_first_step_elements_helper # ifndef EIGEN_PARSED_BY_DOXYGEN : public dimino_first_step_elements_helper<Multiply,Equality,id,g,Multiply<current_element,g>::type,concat<elements,type_list<current_element>>::type,Equality<Multiply<current_element,g>::type,id>::value> { } ; template<template<,> class Multiply,template<,> class Equality,id,g,current_element,elements> struct dimino_first_step_elements_helper<Multiply,Equality,id,g,current_element,elements,true> # endif { typedef elements type ; int global_flags = Equality<current_element,id>::global_flags ; } ; template<template<,> class Multiply,template<,> class Equality,id,generators> struct dimino_first_step_elements { typedef get<0,generators>::type first_generator ; typedef skip<1,generators>::type next_generators ; typedef type_list<first_generator> generators_done ; typedef dimino_first_step_elements_helper<Multiply,Equality,id,first_generator,first_generator,type_list<id>,false> helper ; typedef helper::type type ; int global_flags = helper::global_flags ; } ; template<template<,> class Multiply,sub_group_elements,new_coset_rep,bool generate_coset> struct dimino_get_coset_elements { typedef apply_op_from_right<Multiply,new_coset_rep,sub_group_elements>::type type ; } ; template<template<,> class Multiply,sub_group_elements,new_coset_rep> struct dimino_get_coset_elements<Multiply,sub_group_elements,new_coset_rep,false> { typedef type_list<> type ; } ; template<template<,> class Multiply,template<,> class Equality,id,sub_group_elements,elements,generators,rep_element,int sub_group_size> struct dimino_add_cosets_for_rep ; template<template<,> class Multiply,template<,> class Equality,id,sub_group_elements,elements,g,. . . gs,rep_element,int sub_group_size> struct dimino_add_cosets_for_rep<Multiply,Equality,id,sub_group_elements,elements,type_list<g,gs . . .>,rep_element,sub_group_size> { typedef Multiply<rep_element,g>::type new_coset_rep ; typedef contained_in_list_gf<Equality,new_coset_rep,elements> _cil ; bool add_coset = ! _cil::value ; typedef dimino_get_coset_elements<Multiply,sub_group_elements,new_coset_rep,add_coset>::type coset_elements ; typedef dimino_add_cosets_for_rep<Multiply,Equality,id,sub_group_elements,concat<elements,coset_elements>::type,type_list<gs . . .>,rep_element,sub_group_size> _helper ; typedef _helper::type type ; int global_flags = _cil::global_flags | _helper::global_flags ; } ; template<template<,> class Multiply,template<,> class Equality,id,sub_group_elements,elements)",
    "insertText": "EIGEN_TPL_PP_SPEC_HACK_DEFC(typename, empty), typename rep_element, int sub_group_size > struct dimino_add_cosets_for_rep<Multiply, Equality, id, sub_group_elements, elements, type_list<EIGEN_TPL_PP_SPEC_HACK_USE(empty)"
  }
]