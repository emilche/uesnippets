[
  {
    "label": "TGAType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TGAType"
  },
  {
    "label": "TgaHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TgaHeader"
  },
  {
    "label": "TgaFile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TgaFile"
  },
  {
    "label": "TgaFile()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_IMAGE_TGAFILE_H # define NV_IMAGE_TGAFILE_H # include<nvcore / Stream . h> namespace nv { enum TGAType { TGA_TYPE_INDEXED = 1,TGA_TYPE_RGB = 2,TGA_TYPE_GREY = 3,TGA_TYPE_RLE_INDEXED = 9,TGA_TYPE_RLE_RGB = 1 0,TGA_TYPE_RLE_GREY = 1 1 } ; # define TGA_INTERLEAVE_MASK 0 xc0 # define TGA_INTERLEAVE_NONE 0 x00 # define TGA_INTERLEAVE_2WAY 0 x40 # define TGA_INTERLEAVE_4WAY 0 x80 # define TGA_ORIGIN_MASK 0 x30 # define TGA_ORIGIN_LEFT 0 x00 # define TGA_ORIGIN_RIGHT 0 x10 # define TGA_ORIGIN_LOWER 0 x00 # define TGA_ORIGIN_UPPER 0 x20 # define TGA_HAS_ALPHA 0 x0F struct TgaHeader { uint8 id_length ; uint8 colormap_type ; uint8 image_type ; uint16 colormap_index ; uint16 colormap_length ; uint8 colormap_size ; uint16 x_origin ; uint16 y_origin ; uint16 width ; uint16 height ; uint8 pixel_size ; uint8 flags ; enum { Size = 1 8 } ; } ; struct TgaFile {)",
    "insertText": "TgaFile()"
  },
  {
    "label": "free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "free()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} uint)",
    "insertText": "size()"
  },
  {
    "label": "allocate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "allocate()"
  },
  {
    "label": "nvCheck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvCheck(mem == NULL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (delete [ ] mem ; mem = NULL ; } TgaHeader head ; uint8* mem ; } ; Stream&)",
    "insertText": "operator(Stream & s, TgaHeader & head)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (s<<head . id_length<<head . colormap_type<<head . image_type ; s<<head . colormap_index<<head . colormap_length<<head . colormap_size ; s<<head . x_origin<<head . y_origin<<head . width<<head . height ; s<<head . pixel_size<<head . flags ; return s ; } Stream&)",
    "insertText": "operator(Stream & s, TgaFile & tga)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s<<tga . head ;)",
    "insertText": "if(s.isLoading())"
  },
  {
    "label": "serialize()",
    "kind": "Method",
    "detail": "Function (} s .)",
    "insertText": "serialize(tga.mem, tga.size())"
  }
]