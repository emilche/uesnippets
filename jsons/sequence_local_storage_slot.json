[
  {
    "label": "SequenceLocalStorageSlot",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequenceLocalStorageSlot"
  },
  {
    "label": "GetNextSequenceLocalStorageSlotNumber()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_SEQUENCE_LOCAL_STORAGE_SLOT_H_ # define BASE_THREADING_SEQUENCE_LOCAL_STORAGE_SLOT_H_ # include<memory> # include<utility> # include \" base / base_export . h \" # include \" base / template_util . h \" # include \" base / threading / sequence_local_storage_map . h \" namespace base { namespace internal { BASE_EXPORT int)",
    "insertText": "GetNextSequenceLocalStorageSlotNumber()"
  },
  {
    "label": "SequenceLocalStorageSlot()",
    "kind": "Method",
    "detail": "Function (} template<T,Deleter = std::default_delete<T>> class SequenceLocalStorageSlot { public :)",
    "insertText": "SequenceLocalStorageSlot() : slot_id_(internal::GetNextSequenceLocalStorageSlotNumber())"
  },
  {
    "label": "SequenceLocalStorageSlot()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SequenceLocalStorageSlot(const SequenceLocalStorageSlot&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceLocalStorageSlot&)",
    "insertText": "operator(const SequenceLocalStorageSlot&)"
  },
  {
    "label": "SequenceLocalStorageSlot()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SequenceLocalStorageSlot()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetOrCreateValue()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "GetOrCreateValue()"
  },
  {
    "label": "GetValuePointer()",
    "kind": "Method",
    "detail": "Function (T* ptr =)",
    "insertText": "GetValuePointer()"
  },
  {
    "label": "GetForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void* ptr = internal::)",
    "insertText": "GetForCurrentThread().Get(slot_id_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "Adopt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Adopt(nullptr)"
  },
  {
    "label": "emplace()",
    "kind": "Method",
    "detail": "Function (} template<class . . . Args> T*)",
    "insertText": "emplace(Args&&... args)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* value_ptr = new)",
    "insertText": "T(std::forward<Args>(args)...)"
  },
  {
    "label": "Adopt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Adopt(value_ptr)"
  },
  {
    "label": "destructor()",
    "kind": "Method",
    "detail": "Function (internal::SequenceLocalStorageMap::ValueDestructorPair::DestructorFunc*)",
    "insertText": "destructor(void* ptr)"
  },
  {
    "label": "Deleter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deleter()(static_cast<T*>(ptr))"
  },
  {
    "label": "value_destructor_pair()",
    "kind": "Method",
    "detail": "Function (} ; internal::SequenceLocalStorageMap::ValueDestructorPair)",
    "insertText": "value_destructor_pair(value_ptr, destructor)"
  },
  {
    "label": "GetForCurrentThread()",
    "kind": "Method",
    "detail": "Function (internal::)",
    "insertText": "GetForCurrentThread().Set( slot_id_, std::move(value_destructor_pair))"
  }
]