[
  {
    "label": "CallbackListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackListBase"
  },
  {
    "label": "OnceCallbackList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OnceCallbackList"
  },
  {
    "label": "RepeatingCallbackList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RepeatingCallbackList"
  },
  {
    "label": "CallbackListSubscription",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallbackListSubscription"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "CallbackListTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CallbackListTraits"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_CEF_CALLBACK_LIST_H_ # define CEF_INCLUDE_BASE_CEF_CALLBACK_LIST_H_ # pragma once # if)",
    "insertText": "defined(USING_CHROMIUM_INCLUDES)"
  },
  {
    "label": "CallbackListSubscription()",
    "kind": "Method",
    "detail": "Function (namespace internal { template<CallbackListImpl> class CallbackListBase ; } template<Signature> class OnceCallbackList ; template<Signature> class RepeatingCallbackList ; class CallbackListSubscription { public :)",
    "insertText": "CallbackListSubscription()"
  },
  {
    "label": "CallbackListSubscription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackListSubscription(CallbackListSubscription&& subscription)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackListSubscription&)",
    "insertText": "operator(CallbackListSubscription&& subscription)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "bool()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run()"
  },
  {
    "label": "EraseIf()",
    "kind": "Method",
    "detail": "Function (OnceClosure closure_ ; } ; namespace internal { template<class T,class Allocator,class Predicate> size_t)",
    "insertText": "EraseIf(std::list<T, Allocator>& container, Predicate pred)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t old_size = container .)",
    "insertText": "size()"
  },
  {
    "label": "remove_if()",
    "kind": "Method",
    "detail": "Function (container .)",
    "insertText": "remove_if(pred)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<CallbackList> struct CallbackListTraits ; template<Signature> struct CallbackListTraits<OnceCallbackList<Signature>> { using CallbackType = OnceCallback<Signature> ; using Callbacks = std::list<CallbackType> ; } ; template<Signature> struct CallbackListTraits<RepeatingCallbackList<Signature>> { using CallbackType = RepeatingCallback<Signature> ; using Callbacks = std::list<CallbackType> ; } ; template<CallbackListImpl> class CallbackListBase { public : using CallbackType = CallbackListTraits<CallbackListImpl>::CallbackType ;)",
    "insertText": "static_assert(IsBaseCallback<CallbackType>::value, \"\")"
  },
  {
    "label": "CallbackListBase()",
    "kind": "Method",
    "detail": "Function (using Subscription = CallbackListSubscription ;)",
    "insertText": "CallbackListBase()"
  },
  {
    "label": "CallbackListBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallbackListBase(const CallbackListBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CallbackListBase&)",
    "insertText": "operator(const CallbackListBase&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} CallbackListSubscription)",
    "insertText": "Add(CallbackType cb)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!cb.is_null())"
  },
  {
    "label": "AddUnsafe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddUnsafe(CallbackType cb)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (callbacks_ .)",
    "insertText": "push_back(std::move(cb))"
  },
  {
    "label": "set_removal_callback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_removal_callback(const RepeatingClosure& removal_callback)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (removal_callback_ = removal_callback ; } bool)",
    "insertText": "empty()"
  },
  {
    "label": "Notify()",
    "kind": "Method",
    "detail": "Function (} template<. . . RunArgs> void)",
    "insertText": "Notify(RunArgs&&... args)"
  },
  {
    "label": "iterating()",
    "kind": "Method",
    "detail": "Function ({ AutoReset<bool>)",
    "insertText": "iterating(&iterating_, true)"
  },
  {
    "label": "this()",
    "kind": "Method",
    "detail": "Function (const auto next_valid = [)",
    "insertText": "this(const auto it)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "for(auto it = next_valid(callbacks_.begin()); it != callbacks_.end(); it = next_valid(it)) static_cast<CallbackListImpl*>(this)->RunCallback(it++, args...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(iterating_)"
  },
  {
    "label": "EraseIf()",
    "kind": "Method",
    "detail": "Function (const size_t erased_callbacks =)",
    "insertText": "EraseIf(callbacks_, [](const auto& cb) { return cb.is_null(); })"
  },
  {
    "label": "CancelCallback()",
    "kind": "Method",
    "detail": "Function (} protected : using Callbacks = CallbackListTraits<CallbackListImpl>::Callbacks ; Callbacks callbacks_ ; private : void)",
    "insertText": "CancelCallback(const typename Callbacks::iterator& it)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (it ->)",
    "insertText": "Reset()"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} else { callbacks_ .)",
    "insertText": "erase(it)"
  },
  {
    "label": "RunCallback()",
    "kind": "Method",
    "detail": "Function (} } bool iterating_ = false ; RepeatingClosure removal_callback_ ; WeakPtrFactory<CallbackListBase> weak_ptr_factory_ { this } ; } ; } template<Signature> class OnceCallbackList : public internal::CallbackListBase<OnceCallbackList<Signature>> { private : internal::CallbackListBase<OnceCallbackList> ; using Traits = internal::CallbackListTraits<OnceCallbackList> ; template<. . . RunArgs> void)",
    "insertText": "RunCallback(typename Traits::Callbacks::iterator it, RunArgs&&... args)"
  },
  {
    "label": "splice()",
    "kind": "Method",
    "detail": "Function (null_callbacks_ .)",
    "insertText": "splice(null_callbacks_.end(), this->callbacks_, it)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(*it).Run(args...)"
  },
  {
    "label": "CancelNullCallback()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CancelNullCallback(const typename Traits::Callbacks::iterator& it)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (it ->)",
    "insertText": "Run(args...)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(!it->is_null())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using RepeatingClosureList = RepeatingCallbackList<)",
    "insertText": "void()"
  }
]