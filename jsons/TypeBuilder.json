[
  {
    "label": "TypeBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TypeBuilder"
  },
  {
    "label": "i",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "i"
  },
  {
    "label": "ieee_float",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ieee_float"
  },
  {
    "label": "ieee_double",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ieee_double"
  },
  {
    "label": "x86_fp80",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "x86_fp80"
  },
  {
    "label": "fp128",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "fp128"
  },
  {
    "label": "ppc_fp128",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ppc_fp128"
  },
  {
    "label": "x86_mmx",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "x86_mmx"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_TYPEBUILDER_H # define LLVM_IR_TYPEBUILDER_H # include \" llvm / IR / DerivedTypes . h \" # include \" llvm / IR / LLVMContext . h \" # include<climits> namespace llvm { template<T,bool cross_compilable> class TypeBuilder { } ; namespace types { template<uint32_t num_bits> class i { } ; class ieee_float { } ; class ieee_double { } ; class x86_fp80 { } ; class fp128 { } ; class ppc_fp128 { } ; class x86_mmx { } ; } template<T,bool cross> class TypeBuilder<const T,cross> : public TypeBuilder<T,cross> { } ; template<T,bool cross> class TypeBuilder<volatile T,cross> : public TypeBuilder<T,cross> { } ; template<T,bool cross> class TypeBuilder<const volatile T,cross> : public TypeBuilder<T,cross> { } ; template<T,bool cross> class TypeBuilder<T*,cross> { public : PointerType*)",
    "insertText": "get(LLVMContext &Context)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(T)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "get(Context, sizeof(T) * CHAR_BIT)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\ template<> class TypeBuilder<T,true> { \\ \\ \\ })",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(char)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(signed char)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(unsigned char)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(short)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(unsigned short)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(int)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(unsigned int)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(long)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(unsigned long)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(__int64)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(unsigned __int64)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(long long)"
  },
  {
    "label": "DEFINE_INTEGRAL_TYPEBUILDER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DEFINE_INTEGRAL_TYPEBUILDER(unsigned long long)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (# endif # undef DEFINE_INTEGRAL_TYPEBUILDER template<uint32_t num_bits,bool cross> class TypeBuilder<types::i<num_bits>,cross> { public : IntegerType*)",
    "insertText": "get(LLVMContext &C)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class TypeBuilder<float,false> { public : Type*)",
    "insertText": "get(LLVMContext& C)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class TypeBuilder<void*,false> : public TypeBuilder<types::i<8>*,false> { } ; template<> class TypeBuilder<const void*,false> : public TypeBuilder<types::i<8>*,false> { } ; template<> class TypeBuilder<volatile void*,false> : public TypeBuilder<types::i<8>*,false> { } ; template<> class TypeBuilder<const volatile void*,false> : public TypeBuilder<types::i<8>*,false> { } ; template<R,bool cross> class TypeBuilder<)",
    "insertText": "R()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,bool cross> class TypeBuilder<)",
    "insertText": "R(A1)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* params [ ] = { TypeBuilder<A1,cross)",
    "insertText": "get(Context)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* params [ ] = { TypeBuilder<A1,cross)",
    "insertText": "get(Context), TypeBuilder<A2, cross>::get(Context)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2, A3)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* params [ ] = { TypeBuilder<A1,cross)",
    "insertText": "get(Context), TypeBuilder<A2, cross>::get(Context), TypeBuilder<A3, cross>::get(Context)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2, A3, A4)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* params [ ] = { TypeBuilder<A1,cross)",
    "insertText": "get(Context), TypeBuilder<A2, cross>::get(Context), TypeBuilder<A3, cross>::get(Context), TypeBuilder<A4, cross>::get(Context)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2, A3, A4, A5)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (Type* params [ ] = { TypeBuilder<A1,cross)",
    "insertText": "get(Context), TypeBuilder<A2, cross>::get(Context), TypeBuilder<A3, cross>::get(Context), TypeBuilder<A4, cross>::get(Context), TypeBuilder<A5, cross>::get(Context)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,bool cross> class TypeBuilder<)",
    "insertText": "R(...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, ...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2, ...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2, A3, ...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2, A3, A4, ...)"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} } ; template<R,A1,A2,A3,A4,A5,bool cross> class TypeBuilder<)",
    "insertText": "R(A1, A2, A3, A4, A5, ...)"
  }
]