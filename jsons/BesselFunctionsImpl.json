[
  {
    "label": "bessel_i0e_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i0e_retval"
  },
  {
    "label": "generic_i0e",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_i0e"
  },
  {
    "label": "bessel_i0e_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i0e_impl"
  },
  {
    "label": "bessel_i0_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i0_retval"
  },
  {
    "label": "generic_i0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_i0"
  },
  {
    "label": "bessel_i0_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i0_impl"
  },
  {
    "label": "bessel_i1e_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i1e_retval"
  },
  {
    "label": "generic_i1e",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_i1e"
  },
  {
    "label": "bessel_i1e_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i1e_impl"
  },
  {
    "label": "bessel_i1_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i1_retval"
  },
  {
    "label": "generic_i1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_i1"
  },
  {
    "label": "bessel_i1_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_i1_impl"
  },
  {
    "label": "bessel_k0e_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k0e_retval"
  },
  {
    "label": "generic_k0e",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_k0e"
  },
  {
    "label": "bessel_k0e_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k0e_impl"
  },
  {
    "label": "bessel_k0_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k0_retval"
  },
  {
    "label": "generic_k0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_k0"
  },
  {
    "label": "bessel_k0_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k0_impl"
  },
  {
    "label": "bessel_k1e_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k1e_retval"
  },
  {
    "label": "generic_k1e",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_k1e"
  },
  {
    "label": "bessel_k1e_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k1e_impl"
  },
  {
    "label": "bessel_k1_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k1_retval"
  },
  {
    "label": "generic_k1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_k1"
  },
  {
    "label": "bessel_k1_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_k1_impl"
  },
  {
    "label": "bessel_j0_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_j0_retval"
  },
  {
    "label": "generic_j0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_j0"
  },
  {
    "label": "bessel_j0_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_j0_impl"
  },
  {
    "label": "bessel_y0_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_y0_retval"
  },
  {
    "label": "generic_y0",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_y0"
  },
  {
    "label": "bessel_y0_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_y0_impl"
  },
  {
    "label": "bessel_j1_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_j1_retval"
  },
  {
    "label": "generic_j1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_j1"
  },
  {
    "label": "bessel_j1_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_j1_impl"
  },
  {
    "label": "bessel_y1_retval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_y1_retval"
  },
  {
    "label": "generic_y1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "generic_y1"
  },
  {
    "label": "bessel_y1_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "bessel_y1_impl"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_BESSEL_FUNCTIONS_H # define EIGEN_BESSEL_FUNCTIONS_H namespace Eigen { namespace internal { template<Scalar> struct bessel_i0e_retval { typedef Scalar type ; } ; template<T,ScalarType = unpacket_traits<T>::type> struct generic_i0e { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "run(const T&)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT((internal::is_same<T, T>::value == false), THIS_TYPE_IS_NOT_SUPPORTED)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct generic_i0e<T,float> { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "run(const T& x)"
  },
  {
    "label": "pabs()",
    "kind": "Method",
    "detail": "Function (const float A [ ] = { - 1 . 3 0 0 0 2 5 0 0 9 9 8 6 2 4 8 0 4 2 1 2 E - 8 f,6 . 0 4 6 9 9 5 0 2 2 5 4 1 9 1 8 9 4 9 3 2 E - 8 f,- 2 . 6 7 0 7 9 3 8 5 3 9 4 0 6 1 1 7 3 3 9 1 E - 7 f,1 . 1 1 7 3 8 7 5 3 9 1 2 0 1 0 3 7 1 8 1 5 E - 6 f,- 4 . 4 1 6 7 3 8 3 5 8 4 5 8 7 5 0 5 6 3 5 9 E - 6 f,1 . 6 4 4 8 4 4 8 0 7 0 7 2 8 8 9 7 0 8 9 3 E - 5 f,- 5 . 7 5 4 1 9 5 0 1 0 0 8 2 1 0 3 7 0 3 9 8 E - 5 f,1 . 8 8 5 0 2 8 8 5 0 9 5 8 4 1 6 5 5 7 2 9 E - 4 f,- 5 . 7 6 3 7 5 5 7 4 5 3 8 5 8 2 3 6 5 8 8 5 E - 4 f,1 . 6 3 9 4 7 5 6 1 6 9 4 1 3 3 5 7 9 8 4 2 E - 3 f,- 4 . 3 2 4 3 0 9 9 9 5 0 5 0 5 7 5 9 4 4 3 0 E - 3 f,1 . 0 5 4 6 4 6 0 3 9 4 5 9 4 9 9 8 3 1 8 3 E - 2 f,- 2 . 3 7 3 7 4 1 4 8 0 5 8 9 9 4 6 8 8 1 5 6 E - 2 f,4 . 9 3 0 5 2 8 4 2 3 9 6 7 0 7 0 8 4 8 7 8 E - 2 f,- 9 . 4 9 0 1 0 9 7 0 4 8 0 4 7 6 4 4 4 2 1 0 E - 2 f,1 . 7 1 6 2 0 9 0 1 5 2 2 2 0 8 7 7 5 3 4 9 E - 1 f,- 3 . 0 4 6 8 2 6 7 2 3 4 3 1 9 8 3 9 8 6 8 3 E - 1 f,6 . 7 6 7 9 5 2 7 4 4 0 9 4 7 6 0 8 4 9 9 5 E - 1 f } ; const float B [ ] = { 3 . 3 9 6 2 3 2 0 2 5 7 0 8 3 8 6 3 4 5 1 5 E - 9 f,2 . 2 6 6 6 6 8 9 9 0 4 9 8 1 7 8 0 6 4 5 9 E - 8 f,2 . 0 4 8 9 1 8 5 8 9 4 6 9 0 6 3 7 4 1 8 3 E - 7 f,2 . 8 9 1 3 7 0 5 2 0 8 3 4 7 5 6 4 8 2 9 7 E - 6 f,6 . 8 8 9 7 5 8 3 4 6 9 1 6 8 2 3 9 8 4 2 6 E - 5 f,3 . 3 6 9 1 1 6 4 7 8 2 5 5 6 9 4 0 8 9 9 0 E - 3 f,8 . 0 4 4 9 0 4 1 1 0 1 4 1 0 8 8 3 1 6 0 8 E - 1 f } ; T y =)",
    "insertText": "pabs(x)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (T y_le_eight = internal::pchebevl<T,1 8)",
    "insertText": "run(pmadd(pset1<T>(0.5f), y, pset1<T>(-2.0f)), A)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T y_gt_eight =)",
    "insertText": "pmul(internal::pchebevl<T, 7>::run( psub(pdiv(pset1<T>(32.0f), y), pset1<T>(2.0f)), B), prsqrt(y))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (T y_le_eight = internal::pchebevl<T,3 0)",
    "insertText": "run(pmadd(pset1<T>(0.5), y, pset1<T>(-2.0)), A)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T y_gt_eight =)",
    "insertText": "pmul(internal::pchebevl<T, 25>::run( psub(pdiv(pset1<T>(32.0), y), pset1<T>(2.0)), B), prsqrt(y))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct bessel_i0e_impl { EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE T)",
    "insertText": "run(const T x)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T y_le_eight =)",
    "insertText": "pmul(y, internal::pchebevl<T, 17>::run( pmadd(pset1<T>(0.5f), y, pset1<T>(-2.0f)), A))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pselect(pcmp_le(y, pset1<T>(8.0f)), y_le_eight, y_gt_eight)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T y_le_eight =)",
    "insertText": "pmul(y, internal::pchebevl<T, 29>::run( pmadd(pset1<T>(0.5), y, pset1<T>(-2.0)), A))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "pselect(pcmp_le(y, pset1<T>(8.0)), y_le_eight, y_gt_eight)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const float A [ ] = { 1 . 9 0 4 5 1 6 3 7 7 2 2 0 2 0 8 8 6 0 2 5 E - 9 f,2 . 5 3 4 7 9 1 0 7 9 0 2 6 1 4 9 4 5 6 7 5 E - 7 f,2 . 2 8 6 2 1 2 1 0 3 1 1 9 4 5 1 7 8 6 0 7 E - 5 f,1 . 2 6 4 6 1 5 4 1 1 4 4 6 9 2 5 9 2 3 3 8 E - 3 f,3 . 5 9 7 9 9 3 6 5 1 5 3 6 1 5 0 1 6 2 6 6 E - 2 f,3 . 4 4 2 8 9 8 9 9 9 2 4 6 2 8 4 8 6 8 8 6 E - 1 f,- 5 . 3 5 3 2 7 3 9 3 2 3 3 9 0 2 7 6 8 7 2 0 E - 1 f } ; const float B [ ] = { - 1 . 6 9 7 5 3 4 5 0 9 3 8 9 0 5 9 8 7 4 6 6 E - 9 f,8 . 5 7 4 0 3 4 0 1 7 4 1 4 2 2 6 0 8 5 1 9 E - 9 f,- 4 . 6 6 0 4 8 9 8 9 7 6 8 7 9 4 7 8 2 9 5 6 E - 8 f,2 . 7 6 6 8 1 3 6 3 9 4 4 5 0 1 5 1 0 3 4 2 E - 7 f,- 1 . 8 3 1 7 5 5 5 2 2 7 1 9 1 1 9 4 8 7 6 7 E - 6 f,1 . 3 9 4 9 8 1 3 7 1 8 8 7 6 4 9 9 3 6 6 2 E - 5 f,- 1 . 2 8 4 9 5 4 9 5 8 1 6 2 7 8 0 2 6 3 8 4 E - 4 f,1 . 5 6 9 8 8 3 8 8 5 7 3 0 0 5 3 3 7 4 9 1 E - 3 f,- 3 . 1 4 4 8 1 0 1 3 1 1 9 6 4 5 0 0 5 4 2 7 E - 2 f,2 . 4 4 0 3 0 3 0 8 2 0 6 5 9 5 5 4 5 4 6 8 E0f } ; const T MAXNUM = pset1<)",
    "insertText": "T(NumTraits<float>::infinity())"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T two = pset1<)",
    "insertText": "T(2.0)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (T x_le_two = internal::pchebevl<T,7)",
    "insertText": "run(pmadd(x, x, pset1<T>(-2.0)), A)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmadd(generic_i0<T, float>::run(x), pnegate( plog(pmul(pset1<T>(0.5), x))), x_le_two)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmul(pexp(x), x_le_two)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_two =)",
    "insertText": "pmul(internal::pchebevl<T, 10>::run( psub(pdiv(pset1<T>(8.0), x), two), B), prsqrt(x))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const double A [ ] = { 1 . 3 7 4 4 6 5 4 3 5 6 1 3 5 2 3 0 7 1 5 6 E - 1 6,4 . 2 5 9 8 1 6 1 4 2 7 9 6 6 1 0 1 8 3 9 9 E - 1 4,1 . 0 3 4 9 6 9 5 2 5 7 6 3 3 8 4 2 0 1 6 7 E - 1 1,1 . 9 0 4 5 1 6 3 7 7 2 2 0 2 0 8 8 6 0 2 5 E - 9,2 . 5 3 4 7 9 1 0 7 9 0 2 6 1 4 9 4 5 6 7 5 E - 7,2 . 2 8 6 2 1 2 1 0 3 1 1 9 4 5 1 7 8 6 0 7 E - 5,1 . 2 6 4 6 1 5 4 1 1 4 4 6 9 2 5 9 2 3 3 8 E - 3,3 . 5 9 7 9 9 3 6 5 1 5 3 6 1 5 0 1 6 2 6 6 E - 2,3 . 4 4 2 8 9 8 9 9 9 2 4 6 2 8 4 8 6 8 8 6 E - 1,- 5 . 3 5 3 2 7 3 9 3 2 3 3 9 0 2 7 6 8 7 2 0 E - 1 } ; const double B [ ] = { 5 . 3 0 0 4 3 3 7 7 2 6 8 6 2 6 2 7 6 1 4 9 E - 1 8,- 1 . 6 4 7 5 8 0 4 3 0 1 5 2 4 2 1 3 4 6 4 6 E - 1 7,5 . 2 1 0 3 9 1 5 0 5 0 3 9 0 2 7 5 6 8 6 1 E - 1 7,- 1 . 6 7 8 2 3 1 0 9 6 8 0 5 4 1 2 1 0 3 8 5 E - 1 6,5 . 5 1 2 0 5 5 9 7 8 5 2 4 3 1 9 4 0 7 8 4 E - 1 6,- 1 . 8 4 8 5 9 3 3 7 7 3 4 3 7 7 9 0 1 4 4 0 E - 1 5,6 . 3 4 0 0 7 6 4 7 7 4 0 5 0 7 0 6 0 5 5 7 E - 1 5,- 2 . 2 2 7 5 1 3 3 2 6 9 9 1 6 6 9 8 5 5 4 8 E - 1 4,8 . 0 3 2 8 9 0 7 7 5 3 6 3 5 7 5 2 1 1 0 0 E - 1 4,- 2 . 9 8 0 0 9 6 9 2 3 1 7 2 7 3 0 4 3 9 2 5 E - 1 3,1 . 1 4 0 3 4 0 5 8 8 2 0 8 4 7 4 9 6 3 0 3 E - 1 2,- 4 . 5 1 4 5 9 7 8 8 3 3 7 3 9 4 4 1 6 5 4 7 E - 1 2,1 . 8 5 5 9 4 9 1 1 4 9 5 4 7 1 7 8 5 2 5 3 E - 1 1,- 7 . 9 5 7 4 8 9 2 4 4 4 7 7 1 0 7 4 7 7 7 6 E - 1 1,3 . 5 7 7 3 9 7 2 8 1 4 0 0 3 0 1 1 6 5 9 7 E - 1 0,- 1 . 6 9 7 5 3 4 5 0 9 3 8 9 0 5 9 8 7 4 6 6 E - 9,8 . 5 7 4 0 3 4 0 1 7 4 1 4 2 2 6 0 8 5 1 9 E - 9,- 4 . 6 6 0 4 8 9 8 9 7 6 8 7 9 4 7 8 2 9 5 6 E - 8,2 . 7 6 6 8 1 3 6 3 9 4 4 5 0 1 5 1 0 3 4 2 E - 7,- 1 . 8 3 1 7 5 5 5 2 2 7 1 9 1 1 9 4 8 7 6 7 E - 6,1 . 3 9 4 9 8 1 3 7 1 8 8 7 6 4 9 9 3 6 6 2 E - 5,- 1 . 2 8 4 9 5 4 9 5 8 1 6 2 7 8 0 2 6 3 8 4 E - 4,1 . 5 6 9 8 8 3 8 8 5 7 3 0 0 5 3 3 7 4 9 1 E - 3,- 3 . 1 4 4 8 1 0 1 3 1 1 9 6 4 5 0 0 5 4 2 7 E - 2,2 . 4 4 0 3 0 3 0 8 2 0 6 5 9 5 5 4 5 4 6 8 E0 } ; const T MAXNUM = pset1<)",
    "insertText": "T(NumTraits<double>::infinity())"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmadd(generic_i0<T, double>::run(x), pmul( pset1<T>(-1.0), plog(pmul(pset1<T>(0.5), x))), x_le_two)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pselect(pcmp_le(x, pset1<T>(0.0)), MAXNUM, x_le_two)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_two =)",
    "insertText": "pmul(internal::pchebevl<T, 25>::run( psub(pdiv(pset1<T>(8.0), x), two), B), prsqrt(x))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_two =)",
    "insertText": "pmul(pmul( pexp(pnegate(x)), internal::pchebevl<T, 10>::run( psub(pdiv(pset1<T>(8.0), x), two), B)), prsqrt(x))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmadd(generic_i0<T, double>::run(x), pnegate( plog(pmul(pset1<T>(0.5), x))), x_le_two)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_two =)",
    "insertText": "pmul(pmul( pexp(-x), internal::pchebevl<T, 25>::run( psub(pdiv(pset1<T>(8.0), x), two), B)), prsqrt(x))"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T x_le_two =)",
    "insertText": "pdiv(internal::pchebevl<T, 7>::run( pmadd(x, x, pset1<T>(-2.0)), A), x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmadd(generic_i1<T, float>::run(x), plog(pmul(pset1<T>(0.5), x)), x_le_two)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmul(x_le_two, pexp(x))"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T x_le_two =)",
    "insertText": "pdiv(internal::pchebevl<T, 11>::run( pmadd(x, x, pset1<T>(-2.0)), A), x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmadd(generic_i1<T, double>::run(x), plog(pmul(pset1<T>(0.5), x)), x_le_two)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_two =)",
    "insertText": "pmul(pexp(pnegate(x)), pmul( internal::pchebevl<T, 10>::run( psub(pdiv(pset1<T>(8.0), x), two), B), prsqrt(x)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_two =)",
    "insertText": "pmul(pexp(-x), pmul( internal::pchebevl<T, 25>::run( psub(pdiv(pset1<T>(8.0), x), two), B), prsqrt(x)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const float JP [ ] = { - 6 . 0 6 8 3 5 0 3 5 0 3 9 3 2 3 5 E - 0 0 8 f,6 . 3 8 8 9 4 5 7 2 0 7 8 3 3 7 5 E - 0 0 6 f,- 3 . 9 6 9 6 4 6 3 4 2 5 1 0 9 4 0 E - 0 0 4 f,1 . 3 3 2 9 1 3 4 2 2 5 1 9 0 0 3 E - 0 0 2 f,- 1 . 7 2 9 1 5 0 6 8 0 2 4 0 7 2 4 E - 0 0 1 f } ; const float MO [ ] = { - 6 . 8 3 8 9 9 9 6 6 9 3 1 8 8 1 0 E - 0 0 2 f,1 . 8 6 4 9 4 9 3 6 1 3 7 9 5 0 2 E - 0 0 1 f,- 2 . 1 4 5 0 0 7 4 8 0 3 4 6 7 3 9 E - 0 0 1 f,1 . 1 9 7 5 4 9 3 6 9 4 7 3 5 4 0 E - 0 0 1 f,- 3 . 5 6 0 2 8 1 8 6 1 5 3 0 1 2 9 E - 0 0 3 f,- 4 . 9 6 9 3 8 2 6 5 5 2 9 6 6 2 0 E - 0 0 2 f,- 3 . 3 5 5 4 2 4 6 2 2 2 9 3 7 0 9 E - 0 0 6 f,7 . 9 7 8 8 4 5 7 1 7 6 2 1 4 4 0 E - 0 0 1 f } ; const float PH [ ] = { 3 . 2 4 2 0 7 7 8 1 6 9 8 8 2 4 7 E + 0 0 1 f,- 3 . 6 3 0 5 9 2 6 3 0 5 1 8 4 3 4 E + 0 0 1 f,1 . 7 5 6 2 2 1 4 8 2 1 0 9 0 9 9 E + 0 0 1 f,- 4 . 9 7 4 9 7 8 4 6 6 2 8 0 9 0 3 E + 0 0 0 f,1 . 0 0 1 9 7 3 4 2 0 6 8 1 8 3 7 E + 0 0 0 f,- 1 . 9 3 9 9 0 6 9 4 1 7 9 1 3 0 8 E - 0 0 1 f,6 . 4 9 0 5 9 8 7 9 2 6 5 4 6 6 6 E - 0 0 2 f,- 1 . 2 4 9 9 9 2 1 8 4 8 7 2 7 3 8 E - 0 0 1 f } ; const T DR1 = pset1<)",
    "insertText": "T(5.78318596294678452118f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T NEG_PIO4F = pset1<)",
    "insertText": "T(-0.7853981633974483096f)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T z =)",
    "insertText": "pmul(y, y)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (T y_le_two =)",
    "insertText": "pselect(pcmp_lt(y, pset1<T>(1.0e-3f)), pmadd(z, pset1<T>(-0.25f), pset1<T>(1.0f)), pmul(psub(z, DR1), internal::ppolevl<T, 4>::run(z, JP)))"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T q =)",
    "insertText": "pdiv(pset1<T>(1.0f), y)"
  },
  {
    "label": "prsqrt()",
    "kind": "Method",
    "detail": "Function (T w =)",
    "insertText": "prsqrt(y)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T p =)",
    "insertText": "pmul(w, internal::ppolevl<T, 7>::run(q, MO))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (w =)",
    "insertText": "pmul(q, q)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (T yn =)",
    "insertText": "pmadd(q, internal::ppolevl<T, 7>::run(w, PH), NEG_PIO4F)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T y_gt_two =)",
    "insertText": "pmul(p, pcos(padd(yn, y)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const double PP [ ] = { 7 . 9 6 9 3 6 7 2 9 2 9 7 3 4 7 0 5 1 6 2 4 E - 4,8 . 2 8 3 5 2 3 9 2 1 0 7 4 4 0 7 9 9 8 0 3 E - 2,1 . 2 3 9 5 3 3 7 1 6 4 6 4 1 4 2 9 9 3 8 8 E0,5 . 4 4 7 2 5 0 0 3 0 5 8 7 6 8 7 7 5 0 9 0 E0,8 . 7 4 7 1 6 5 0 0 1 9 9 8 1 7 0 1 1 9 4 1 E0,5 . 3 0 3 2 4 0 3 8 2 3 5 3 9 4 8 9 2 1 8 3 E0,9 . 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 7 8 2 1 E - 1 } ; const double PQ [ ] = { 9 . 2 4 4 0 8 8 1 0 5 5 8 8 6 3 6 3 7 0 1 3 E - 4,8 . 5 6 2 8 8 4 7 4 3 5 4 4 7 4 4 3 1 4 2 8 E - 2,1 . 2 5 3 5 2 7 4 3 9 0 1 0 5 8 9 5 3 5 3 7 E0,5 . 4 7 0 9 7 7 4 0 3 3 0 4 1 7 1 0 5 1 8 2 E0,8 . 7 6 1 9 0 8 8 3 2 3 7 0 6 9 5 9 4 2 3 2 E0,5 . 3 0 6 0 5 2 8 8 2 3 5 3 9 4 6 1 7 6 1 8 E0,1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 1 8 E0 } ; const double QP [ ] = { - 1 . 1 3 6 6 3 8 3 8 8 9 8 4 6 9 1 4 9 9 3 1 E - 2,- 1 . 2 8 2 5 2 7 1 8 6 7 0 5 0 9 3 1 8 5 1 2 E0,- 1 . 9 5 5 3 9 5 4 4 2 5 7 7 3 5 9 7 2 3 8 5 E1,- 9 . 3 2 0 6 0 1 5 2 1 2 3 7 6 8 2 3 1 3 6 9 E1,- 1 . 7 7 6 8 1 1 6 7 9 8 0 4 8 8 0 5 0 5 9 5 E2,- 1 . 4 7 0 7 7 5 0 5 1 5 4 9 5 1 1 7 0 1 7 5 E2,- 5 . 1 4 1 0 5 3 2 6 7 6 6 5 9 9 3 3 0 2 2 0 E1,- 6 . 0 5 0 1 4 3 5 0 6 0 0 7 2 8 4 8 1 1 8 6 E0 } ; const double QQ [ ] = { 1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 E0,6 . 4 3 1 7 8 2 5 6 1 1 8 1 7 8 0 2 3 1 8 4 E1,8 . 5 6 4 3 0 0 2 5 9 7 6 9 8 0 5 8 7 1 9 8 E2,3 . 8 8 2 4 0 1 8 3 6 0 5 4 0 1 6 0 9 6 8 3 E3,7 . 2 4 0 4 6 7 7 4 1 9 5 6 5 2 4 7 8 1 8 9 E3,5 . 9 3 0 7 2 7 0 1 1 8 7 3 1 6 9 8 4 8 2 7 E3,2 . 0 6 2 0 9 3 3 1 6 6 0 3 2 7 8 4 7 4 1 7 E3,2 . 4 2 0 0 5 7 4 0 2 4 0 2 9 1 3 9 3 1 7 9 E2 } ; const double RP [ ] = { - 4 . 7 9 4 4 3 2 2 0 9 7 8 2 0 1 7 7 3 8 2 1 E9,1 . 9 5 6 1 7 4 9 1 9 4 6 5 5 6 5 7 7 5 4 3 E12,- 2 . 4 9 2 4 8 3 4 4 3 6 0 9 6 7 7 1 6 2 0 4 E14,9 . 7 0 8 6 2 2 5 1 0 4 7 3 0 6 3 2 3 9 5 2 E15 } ; const double RQ [ ] = { 1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 E0,4 . 9 9 5 6 3 1 4 7 1 5 2 6 5 1 0 1 7 2 1 9 E2,1 . 7 3 7 8 5 4 0 1 6 7 6 3 7 4 6 8 3 1 2 3 E5,4 . 8 4 4 0 9 6 5 8 3 3 9 9 6 2 0 4 5 3 0 5 E7,1 . 1 1 8 5 5 5 3 7 0 4 5 3 5 6 8 3 4 8 6 2 E10,2 . 1 1 2 7 7 5 2 0 1 1 5 4 8 9 2 1 7 5 8 7 E12,3 . 1 0 5 1 8 2 2 9 8 5 7 4 2 2 5 8 3 8 1 4 E14,3 . 1 8 1 2 1 9 5 5 9 4 3 2 0 4 9 4 3 3 0 6 E16,1 . 7 1 0 8 6 2 9 4 0 8 1 0 4 3 1 3 6 0 9 1 E18 } ; const T DR1 = pset1<)",
    "insertText": "T(5.78318596294678452118E0)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T DR2 = pset1<)",
    "insertText": "T(3.04712623436620863991E1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T SQ2OPI = pset1<)",
    "insertText": "T(7.9788456080286535587989E-1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T NEG_PIO4 = pset1<)",
    "insertText": "T(-0.7853981633974483096)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (T y_le_five =)",
    "insertText": "pselect(pcmp_lt(y, pset1<T>(1.0e-5)), pmadd(z, pset1<T>(-0.25), pset1<T>(1.0)), pmul(pmul(psub(z, DR1), psub(z, DR2)), pdiv(internal::ppolevl<T, 3>::run(z, RP), internal::ppolevl<T, 8>::run(z, RQ))))"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T s =)",
    "insertText": "pdiv(pset1<T>(25.0), z)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T p =)",
    "insertText": "pdiv(internal::ppolevl<T, 6>::run(s, PP), internal::ppolevl<T, 6>::run(s, PQ))"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T q =)",
    "insertText": "pdiv(internal::ppolevl<T, 7>::run(s, QP), internal::ppolevl<T, 7>::run(s, QQ))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (T yn =)",
    "insertText": "padd(y, NEG_PIO4)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T w =)",
    "insertText": "pdiv(pset1<T>(-5.0), y)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p =)",
    "insertText": "pmadd(p, pcos(yn), pmul(w, pmul(q, psin(yn))))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T y_gt_five =)",
    "insertText": "pmul(p, pmul(SQ2OPI, prsqrt(y)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const float YP [ ] = { 9 . 4 5 4 5 8 3 6 8 3 9 8 0 3 6 9 E - 0 0 8 f,- 9 . 4 1 3 2 1 2 6 5 3 7 9 7 0 5 7 E - 0 0 6 f,5 . 3 4 4 4 8 6 7 0 7 2 1 4 2 7 3 E - 0 0 4 f,- 1 . 5 8 4 2 8 9 2 8 9 8 2 1 3 1 6 E - 0 0 2 f,1 . 7 0 7 5 8 4 6 4 3 7 3 3 5 6 8 E - 0 0 1 f } ; const float MO [ ] = { - 6 . 8 3 8 9 9 9 6 6 9 3 1 8 8 1 0 E - 0 0 2 f,1 . 8 6 4 9 4 9 3 6 1 3 7 9 5 0 2 E - 0 0 1 f,- 2 . 1 4 5 0 0 7 4 8 0 3 4 6 7 3 9 E - 0 0 1 f,1 . 1 9 7 5 4 9 3 6 9 4 7 3 5 4 0 E - 0 0 1 f,- 3 . 5 6 0 2 8 1 8 6 1 5 3 0 1 2 9 E - 0 0 3 f,- 4 . 9 6 9 3 8 2 6 5 5 2 9 6 6 2 0 E - 0 0 2 f,- 3 . 3 5 5 4 2 4 6 2 2 2 9 3 7 0 9 E - 0 0 6 f,7 . 9 7 8 8 4 5 7 1 7 6 2 1 4 4 0 E - 0 0 1 f } ; const float PH [ ] = { 3 . 2 4 2 0 7 7 8 1 6 9 8 8 2 4 7 E + 0 0 1 f,- 3 . 6 3 0 5 9 2 6 3 0 5 1 8 4 3 4 E + 0 0 1 f,1 . 7 5 6 2 2 1 4 8 2 1 0 9 0 9 9 E + 0 0 1 f,- 4 . 9 7 4 9 7 8 4 6 6 2 8 0 9 0 3 E + 0 0 0 f,1 . 0 0 1 9 7 3 4 2 0 6 8 1 8 3 7 E + 0 0 0 f,- 1 . 9 3 9 9 0 6 9 4 1 7 9 1 3 0 8 E - 0 0 1 f,6 . 4 9 0 5 9 8 7 9 2 6 5 4 6 6 6 E - 0 0 2 f,- 1 . 2 4 9 9 9 2 1 8 4 8 7 2 7 3 8 E - 0 0 1 f } ; const T YZ1 = pset1<)",
    "insertText": "T(0.43221455686510834878f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T TWOOPI = pset1<)",
    "insertText": "T(0.636619772367581343075535f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T NEG_MAXNUM = pset1<)",
    "insertText": "T(-NumTraits<float>::infinity())"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T z =)",
    "insertText": "pmul(x, x)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_le_two =)",
    "insertText": "pmul(TWOOPI, pmul(plog(x), generic_j0<T, float>::run(x)))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmadd(psub(z, YZ1), internal::ppolevl<T, 4>::run(z, YP), x_le_two)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pselect(pcmp_le(x, pset1<T>(0.0)), NEG_MAXNUM, x_le_two)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T q =)",
    "insertText": "pdiv(pset1<T>(1.0), x)"
  },
  {
    "label": "prsqrt()",
    "kind": "Method",
    "detail": "Function (T w =)",
    "insertText": "prsqrt(x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (T xn =)",
    "insertText": "pmadd(q, internal::ppolevl<T, 7>::run(u, PH), NEG_PIO4F)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_two =)",
    "insertText": "pmul(p, psin(padd(xn, x)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T TWOOPI = pset1<)",
    "insertText": "T(0.636619772367581343075535)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T NEG_MAXNUM = pset1<)",
    "insertText": "T(-NumTraits<double>::infinity())"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T x_le_five =)",
    "insertText": "pdiv(internal::ppolevl<T, 7>::run(z, YP), internal::ppolevl<T, 7>::run(z, YQ))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_five =)",
    "insertText": "pmadd(pmul(TWOOPI, plog(x)), generic_j0<T, double>::run(x), x_le_five)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (x_le_five =)",
    "insertText": "pselect(pcmp_le(x, pset1<T>(0.0)), NEG_MAXNUM, x_le_five)"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (T xn =)",
    "insertText": "padd(x, NEG_PIO4)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T w =)",
    "insertText": "pdiv(pset1<T>(5.0), x)"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (p =)",
    "insertText": "pmadd(p, psin(xn), pmul(w, pmul(q, pcos(xn))))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_gt_five =)",
    "insertText": "pmul(p, pmul(SQ2OPI, prsqrt(x)))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const float JP [ ] = { - 4 . 8 7 8 7 8 8 1 3 2 1 7 2 1 2 8 E - 0 0 9 f,6 . 0 0 9 0 6 1 8 2 7 8 8 3 6 9 9 E - 0 0 7 f,- 4 . 5 4 1 3 4 3 8 9 6 9 9 7 4 9 7 E - 0 0 5 f,1 . 9 3 7 3 8 3 9 4 7 8 0 4 5 4 1 E - 0 0 3 f,- 3 . 4 0 5 5 3 7 3 8 4 6 1 5 8 2 4 E - 0 0 2 f } ; const float MO1 [ ] = { 6 . 9 1 3 9 4 2 7 4 1 2 6 5 8 0 1 E - 0 0 2 f,- 2 . 2 8 4 8 0 1 5 0 0 0 5 3 3 5 9 E - 0 0 1 f,3 . 1 3 8 2 3 8 4 5 5 4 9 9 6 9 7 E - 0 0 1 f,- 2 . 1 0 2 3 0 2 4 2 0 4 0 3 8 7 5 E - 0 0 1 f,5 . 4 3 5 3 6 4 6 9 0 5 2 3 0 2 6 E - 0 0 3 f,1 . 4 9 3 3 8 9 5 8 5 0 8 9 4 9 8 E - 0 0 1 f,4 . 9 7 6 0 2 9 6 5 0 8 4 7 1 9 1 E - 0 0 6 f,7 . 9 7 8 8 4 5 4 5 3 0 7 3 8 4 8 E - 0 0 1 f } ; const float PH1 [ ] = { - 4 . 4 9 7 0 1 4 1 4 1 9 1 9 5 5 6 E + 0 0 1 f,5 . 0 7 3 4 6 5 6 5 4 0 8 9 3 1 9 E + 0 0 1 f,- 2 . 4 8 5 7 7 4 1 0 8 7 2 0 3 4 0 E + 0 0 1 f,7 . 2 2 2 9 7 3 1 9 6 7 7 0 2 4 0 E + 0 0 0 f,- 1 . 5 4 4 8 4 2 7 8 2 1 8 0 2 1 1 E + 0 0 0 f,3 . 5 0 3 7 8 7 6 9 1 6 5 3 3 3 4 E - 0 0 1 f,- 1 . 6 3 7 9 8 6 7 7 6 9 4 1 2 0 2 E - 0 0 1 f,3 . 7 4 9 9 8 9 5 0 9 0 8 0 8 2 1 E - 0 0 1 f } ; const T Z1 = pset1<)",
    "insertText": "T(1.46819706421238932572E1f)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T NEG_THPIO4F = pset1<)",
    "insertText": "T(-2.35619449019234492885f)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T y_le_two =)",
    "insertText": "pmul(psub(z, Z1), pmul(x, internal::ppolevl<T, 4>::run(z, JP)))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T p =)",
    "insertText": "pmul(w, internal::ppolevl<T, 7>::run(q, MO1))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (T yn =)",
    "insertText": "pmadd(q, internal::ppolevl<T, 7>::run(w, PH1), NEG_THPIO4F)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (y_gt_two =)",
    "insertText": "pselect(pcmp_lt(x, pset1<T>(0.0f)), pnegate(y_gt_two), y_gt_two)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const double PP [ ] = { 7 . 6 2 1 2 5 6 1 6 2 0 8 1 7 3 1 1 2 0 0 3 E - 4,7 . 3 1 3 9 7 0 5 6 9 4 0 9 1 7 5 7 0 4 3 6 E - 2,1 . 1 2 7 1 9 6 0 8 1 2 9 6 8 4 9 2 5 1 9 2 E0,5 . 1 1 2 0 7 9 5 1 1 4 6 8 0 7 6 4 4 8 1 8 E0,8 . 4 2 4 0 4 5 9 0 1 4 1 7 7 2 4 2 0 9 2 7 E0,5 . 2 1 4 5 1 5 9 8 6 8 2 3 6 1 5 0 4 0 6 3 E0,1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 5 4 E0 } ; const double PQ [ ] = { 5 . 7 1 3 2 3 1 2 8 0 7 2 5 4 8 6 9 9 7 1 4 E - 4,6 . 8 8 4 5 5 9 0 8 7 5 4 4 9 5 4 0 4 0 8 2 E - 2,1 . 1 0 5 1 4 2 3 2 6 3 4 0 6 1 6 9 6 9 2 6 E0,5 . 0 7 3 8 6 3 8 6 1 2 8 6 0 1 4 8 8 5 5 7 E0,8 . 3 9 9 8 5 5 5 4 3 2 7 6 0 4 1 5 9 7 5 7 E0,5 . 2 0 9 8 2 8 4 8 6 8 2 3 6 1 8 2 1 6 1 9 E0,9 . 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 7 4 6 1 E - 1 } ; const double QP [ ] = { 5 . 1 0 8 6 2 5 9 4 7 5 0 1 7 6 6 2 1 6 3 5 E - 2,4 . 9 8 2 1 3 8 7 2 9 5 1 2 3 3 4 4 9 4 2 0 E0,7 . 5 8 2 3 8 2 8 4 1 3 2 5 4 5 2 8 3 8 1 8 E1,3 . 6 6 7 7 9 6 0 9 3 6 0 1 5 0 7 7 7 8 0 0 E2,7 . 1 0 8 5 6 3 0 4 9 9 8 9 2 6 1 0 7 2 7 7 E2,5 . 9 7 4 8 9 6 1 2 4 0 0 6 1 3 6 3 9 9 6 5 E2,2 . 1 1 6 8 8 7 5 7 1 0 0 5 7 2 1 3 5 6 9 8 E2,2 . 5 2 0 7 0 2 0 5 8 5 8 0 2 3 7 1 9 7 8 4 E1 } ; const double QQ [ ] = { 1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 E0,7 . 4 2 3 7 3 2 7 7 0 3 5 6 7 5 1 4 9 9 4 3 E1,1 . 0 5 6 4 4 8 8 6 0 3 8 2 6 2 8 1 6 3 5 1 E3,4 . 9 8 6 4 1 0 5 8 3 3 7 6 5 3 6 0 7 6 5 1 E3,9 . 5 6 2 3 1 8 9 2 4 0 4 7 5 6 1 7 0 7 9 5 E3,7 . 9 9 7 0 4 1 6 0 4 4 7 3 5 0 6 8 3 6 5 0 E3,2 . 8 2 6 1 9 2 7 8 5 1 7 6 3 9 0 9 6 6 0 0 E3,3 . 3 6 0 9 3 6 0 7 8 1 0 6 9 8 2 9 3 4 1 9 E2 } ; const double RP [ ] = { - 8 . 9 9 9 7 1 2 2 5 7 0 5 5 5 9 3 9 8 2 2 4 E8,4 . 5 2 2 2 8 2 9 7 9 9 8 1 9 4 0 3 4 3 2 3 E11,- 7 . 2 7 4 9 4 2 4 5 2 2 1 8 1 8 2 7 6 0 1 5 E13,3 . 6 8 2 9 5 7 3 2 8 6 3 8 5 2 8 8 3 2 8 6 E15 } ; const double RQ [ ] = { 1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 E0,6 . 2 0 8 3 6 4 7 8 1 1 8 0 5 4 3 3 5 4 7 6 E2,2 . 5 6 9 8 7 2 5 6 7 5 7 7 4 8 8 3 0 3 8 3 E5,8 . 3 5 1 4 6 7 9 1 4 3 1 9 4 9 2 5 3 0 3 7 E7,2 . 2 1 5 1 1 5 9 5 4 7 9 7 9 2 4 9 9 6 7 5 E10,4 . 7 4 9 1 4 1 2 2 0 7 9 9 9 1 4 1 4 8 9 8 E12,7 . 8 4 3 6 9 6 0 7 8 7 6 2 3 5 8 5 4 8 9 4 E14,8 . 9 5 2 2 2 3 3 6 1 8 4 6 2 7 3 3 8 0 7 8 E16,5 . 3 2 2 7 8 6 2 0 3 3 2 6 8 0 0 8 5 3 9 5 E18 } ; const T Z1 = pset1<)",
    "insertText": "T(1.46819706421238932572E1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T Z2 = pset1<)",
    "insertText": "T(4.92184563216946036703E1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T NEG_THPIO4 = pset1<)",
    "insertText": "T(-2.35619449019234492885)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T y_le_five =)",
    "insertText": "pdiv(internal::ppolevl<T, 3>::run(z, RP), internal::ppolevl<T, 8>::run(z, RQ))"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (y_le_five =)",
    "insertText": "pmul(pmul(pmul(y_le_five, x), psub(z, Z1)), psub(z, Z2))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (T yn =)",
    "insertText": "padd(y, NEG_THPIO4)"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (y_gt_five =)",
    "insertText": "pselect(pcmp_lt(x, pset1<T>(0.0)), pnegate(y_gt_five), y_gt_five)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const float YP [ ] = { 8 . 0 6 1 9 7 8 3 2 3 3 2 6 8 5 2 E - 0 0 9 f,- 9 . 4 9 6 4 6 0 6 2 9 9 1 7 0 1 6 E - 0 0 7 f,6 . 7 1 9 5 4 3 8 0 6 6 7 4 2 4 9 E - 0 0 5 f,- 2 . 6 4 1 7 8 5 7 2 6 4 4 7 8 6 2 E - 0 0 3 f,4 . 2 0 2 3 6 9 9 4 6 5 0 0 0 9 9 E - 0 0 2 f } ; const float MO1 [ ] = { 6 . 9 1 3 9 4 2 7 4 1 2 6 5 8 0 1 E - 0 0 2 f,- 2 . 2 8 4 8 0 1 5 0 0 0 5 3 3 5 9 E - 0 0 1 f,3 . 1 3 8 2 3 8 4 5 5 4 9 9 6 9 7 E - 0 0 1 f,- 2 . 1 0 2 3 0 2 4 2 0 4 0 3 8 7 5 E - 0 0 1 f,5 . 4 3 5 3 6 4 6 9 0 5 2 3 0 2 6 E - 0 0 3 f,1 . 4 9 3 3 8 9 5 8 5 0 8 9 4 9 8 E - 0 0 1 f,4 . 9 7 6 0 2 9 6 5 0 8 4 7 1 9 1 E - 0 0 6 f,7 . 9 7 8 8 4 5 4 5 3 0 7 3 8 4 8 E - 0 0 1 f } ; const float PH1 [ ] = { - 4 . 4 9 7 0 1 4 1 4 1 9 1 9 5 5 6 E + 0 0 1 f,5 . 0 7 3 4 6 5 6 5 4 0 8 9 3 1 9 E + 0 0 1 f,- 2 . 4 8 5 7 7 4 1 0 8 7 2 0 3 4 0 E + 0 0 1 f,7 . 2 2 2 9 7 3 1 9 6 7 7 0 2 4 0 E + 0 0 0 f,- 1 . 5 4 4 8 4 2 7 8 2 1 8 0 2 1 1 E + 0 0 0 f,3 . 5 0 3 7 8 7 6 9 1 6 5 3 3 3 4 E - 0 0 1 f,- 1 . 6 3 7 9 8 6 7 7 6 9 4 1 2 0 2 E - 0 0 1 f,3 . 7 4 9 9 8 9 5 0 9 0 8 0 8 2 1 E - 0 0 1 f } ; const T YO1 = pset1<)",
    "insertText": "T(4.66539330185668857532f)"
  },
  {
    "label": "pmul()",
    "kind": "Method",
    "detail": "Function (T x_le_two =)",
    "insertText": "pmul(psub(z, YO1), internal::ppolevl<T, 4>::run(z, YP))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pmadd(x_le_two, x, pmul(TWOOPI, pmadd( generic_j1<T, float>::run(x), plog(x), pdiv(pset1<T>(-1.0f), x))))"
  },
  {
    "label": "pselect()",
    "kind": "Method",
    "detail": "Function (x_le_two =)",
    "insertText": "pselect(pcmp_lt(x, pset1<T>(0.0f)), NEG_MAXNUM, x_le_two)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const double PP [ ] = { 7 . 6 2 1 2 5 6 1 6 2 0 8 1 7 3 1 1 2 0 0 3 E - 4,7 . 3 1 3 9 7 0 5 6 9 4 0 9 1 7 5 7 0 4 3 6 E - 2,1 . 1 2 7 1 9 6 0 8 1 2 9 6 8 4 9 2 5 1 9 2 E0,5 . 1 1 2 0 7 9 5 1 1 4 6 8 0 7 6 4 4 8 1 8 E0,8 . 4 2 4 0 4 5 9 0 1 4 1 7 7 2 4 2 0 9 2 7 E0,5 . 2 1 4 5 1 5 9 8 6 8 2 3 6 1 5 0 4 0 6 3 E0,1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 2 5 4 E0 } ; const double PQ [ ] = { 5 . 7 1 3 2 3 1 2 8 0 7 2 5 4 8 6 9 9 7 1 4 E - 4,6 . 8 8 4 5 5 9 0 8 7 5 4 4 9 5 4 0 4 0 8 2 E - 2,1 . 1 0 5 1 4 2 3 2 6 3 4 0 6 1 6 9 6 9 2 6 E0,5 . 0 7 3 8 6 3 8 6 1 2 8 6 0 1 4 8 8 5 5 7 E0,8 . 3 9 9 8 5 5 5 4 3 2 7 6 0 4 1 5 9 7 5 7 E0,5 . 2 0 9 8 2 8 4 8 6 8 2 3 6 1 8 2 1 6 1 9 E0,9 . 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 9 7 4 6 1 E - 1 } ; const double QP [ ] = { 5 . 1 0 8 6 2 5 9 4 7 5 0 1 7 6 6 2 1 6 3 5 E - 2,4 . 9 8 2 1 3 8 7 2 9 5 1 2 3 3 4 4 9 4 2 0 E0,7 . 5 8 2 3 8 2 8 4 1 3 2 5 4 5 2 8 3 8 1 8 E1,3 . 6 6 7 7 9 6 0 9 3 6 0 1 5 0 7 7 7 8 0 0 E2,7 . 1 0 8 5 6 3 0 4 9 9 8 9 2 6 1 0 7 2 7 7 E2,5 . 9 7 4 8 9 6 1 2 4 0 0 6 1 3 6 3 9 9 6 5 E2,2 . 1 1 6 8 8 7 5 7 1 0 0 5 7 2 1 3 5 6 9 8 E2,2 . 5 2 0 7 0 2 0 5 8 5 8 0 2 3 7 1 9 7 8 4 E1 } ; const double QQ [ ] = { 1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 E0,7 . 4 2 3 7 3 2 7 7 0 3 5 6 7 5 1 4 9 9 4 3 E1,1 . 0 5 6 4 4 8 8 6 0 3 8 2 6 2 8 1 6 3 5 1 E3,4 . 9 8 6 4 1 0 5 8 3 3 7 6 5 3 6 0 7 6 5 1 E3,9 . 5 6 2 3 1 8 9 2 4 0 4 7 5 6 1 7 0 7 9 5 E3,7 . 9 9 7 0 4 1 6 0 4 4 7 3 5 0 6 8 3 6 5 0 E3,2 . 8 2 6 1 9 2 7 8 5 1 7 6 3 9 0 9 6 6 0 0 E3,3 . 3 6 0 9 3 6 0 7 8 1 0 6 9 8 2 9 3 4 1 9 E2 } ; const double YP [ ] = { 1 . 2 6 3 2 0 4 7 4 7 9 0 1 7 8 0 2 6 4 4 0 E9,- 6 . 4 7 3 5 5 8 7 6 3 7 9 1 6 0 2 9 1 0 3 1 E11,1 . 1 4 5 0 9 5 1 1 5 4 1 8 2 3 7 2 7 5 8 3 E14,- 8 . 1 2 7 7 0 2 5 5 5 0 1 3 2 5 1 0 9 6 2 1 E15,2 . 0 2 4 3 9 4 7 5 7 1 3 5 9 4 8 9 8 1 9 6 E17,- 7 . 7 8 8 7 7 1 9 6 2 6 5 9 5 0 0 2 6 8 2 5 E17 } ; const double YQ [ ] = { 1 . 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 E0,5 . 9 4 3 0 1 5 9 2 3 4 6 1 2 8 1 9 5 3 5 9 E2,2 . 3 5 5 6 4 0 9 2 9 4 3 0 6 8 5 7 7 9 4 3 E5,7 . 3 4 8 1 1 9 4 4 4 5 9 7 2 1 7 0 5 6 6 0 E7,1 . 8 7 6 0 1 3 1 6 1 0 8 7 0 6 1 5 9 4 7 8 E10,3 . 8 8 2 3 1 2 7 7 4 9 6 2 3 8 5 6 6 0 0 8 E12,6 . 2 0 5 5 7 7 2 7 1 4 6 9 5 3 6 9 3 3 6 3 E14,6 . 8 7 1 4 1 0 8 7 3 5 5 3 0 0 4 8 9 8 6 6 E16,3 . 9 7 2 7 0 6 0 8 1 1 6 5 6 0 6 5 5 6 1 2 E18 } ; const T SQ2OPI = pset1<)",
    "insertText": "T(.79788456080286535588)"
  },
  {
    "label": "pdiv()",
    "kind": "Method",
    "detail": "Function (T x_le_five =)",
    "insertText": "pdiv(internal::ppolevl<T, 5>::run(z, YP), internal::ppolevl<T, 8>::run(z, YQ))"
  },
  {
    "label": "pmadd()",
    "kind": "Method",
    "detail": "Function (x_le_five =)",
    "insertText": "pmadd(x_le_five, x, pmul( TWOOPI, pmadd(generic_j1<T, double>::run(x), plog(x), pdiv(pset1<T>(-1.0), x))))"
  },
  {
    "label": "padd()",
    "kind": "Method",
    "detail": "Function (T xn =)",
    "insertText": "padd(x, NEG_THPIO4)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} } ; } namespace numext { template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_i0, Scalar) bessel_i0(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_i0e, Scalar) bessel_i0e(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_i1, Scalar) bessel_i1(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_i1e, Scalar) bessel_i1e(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_k0, Scalar) bessel_k0(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_k0e, Scalar) bessel_k0e(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_k1, Scalar) bessel_k1(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_k1e, Scalar) bessel_k1e(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_j0, Scalar) bessel_j0(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_y0, Scalar) bessel_y0(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_j1, Scalar) bessel_j1(const Scalar& x)"
  },
  {
    "label": "EIGEN_MATHFUNC_RETVAL()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> EIGEN_DEVICE_FUNC)",
    "insertText": "EIGEN_MATHFUNC_RETVAL(bessel_y1, Scalar) bessel_y1(const Scalar& x)"
  }
]