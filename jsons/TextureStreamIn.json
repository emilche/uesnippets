[
  {
    "label": "UTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTexture"
  },
  {
    "label": "FTextureStreamIn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextureStreamIn"
  },
  {
    "label": "FAbortPollMipsTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAbortPollMipsTask"
  },
  {
    "label": "FTextureStreamIn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderAssetUpdate . h \" # include \" TextureMipAllocator . h \" # include \" Streaming / TextureMipDataProvider . h \" class UTexture ; class FTextureStreamIn : public TRenderAssetUpdate<FTextureUpdateContext> { public :)",
    "insertText": "FTextureStreamIn(const UTexture* InTexture, FTextureMipAllocator* InMipAllocator, FTextureMipDataProvider* InCustomMipDataProvider, FTextureMipDataProvider* InDefaultMipDataProvider)"
  },
  {
    "label": "FTextureStreamIn()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTextureStreamIn()"
  },
  {
    "label": "InitMipDataProviders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitMipDataProviders(const FContext& Context)"
  },
  {
    "label": "AllocateNewMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateNewMips(const FContext& Context)"
  },
  {
    "label": "GetMipData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMipData(const FContext& Context)"
  },
  {
    "label": "PollMipData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PollMipData(const FContext& Context)"
  },
  {
    "label": "FinalizeNewMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeNewMips(const FContext& Context)"
  },
  {
    "label": "CleanUpMipDataProviders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpMipDataProviders(const FContext& Context)"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(const FContext& Context)"
  },
  {
    "label": "Abort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Abort()"
  },
  {
    "label": "DoInitMipDataProviders()",
    "kind": "Method",
    "detail": "Function (protected : int32 StartingMipIndex = INDEX_NONE ; TUniquePtr<FTextureMipAllocator> MipAllocator ; FTextureMipDataProviderArray MipDataProviders ; FTextureUpdateSyncOptions SyncOptions ; FTextureMipInfoArray MipInfos ; void)",
    "insertText": "DoInitMipDataProviders(const FContext& Context)"
  },
  {
    "label": "DoAllocateNewMips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoAllocateNewMips(const FContext& Context)"
  },
  {
    "label": "DoGetMipData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoGetMipData(const FContext& Context)"
  },
  {
    "label": "DoPollMipData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoPollMipData(const FContext& Context)"
  },
  {
    "label": "DoFinalizeNewMips()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoFinalizeNewMips(const FContext& Context)"
  },
  {
    "label": "DoCleanUpMipDataProviders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoCleanUpMipDataProviders(const FContext& Context)"
  },
  {
    "label": "GetMipDataProviderThread()",
    "kind": "Method",
    "detail": "Function (EThreadType)",
    "insertText": "GetMipDataProviderThread(FTextureMipDataProvider::ETickState TickState)"
  },
  {
    "label": "GetMipAllocatorThread()",
    "kind": "Method",
    "detail": "Function (EThreadType)",
    "insertText": "GetMipAllocatorThread(FTextureMipAllocator::ETickState TickState)"
  },
  {
    "label": "GetCancelThread()",
    "kind": "Method",
    "detail": "Function (EThreadType)",
    "insertText": "GetCancelThread()"
  },
  {
    "label": "FAbortPollMipsTask()",
    "kind": "Method",
    "detail": "Function (private : class FAbortPollMipsTask : public FNonAbandonableTask { public :)",
    "insertText": "FAbortPollMipsTask(FTextureStreamIn* InPendingUpdate) : PendingUpdate(InPendingUpdate)"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DoWork()"
  },
  {
    "label": "IsSameThread()",
    "kind": "Method",
    "detail": "Function (} protected : TRefCountPtr<FTextureStreamIn> PendingUpdate ; } ; bool bIsPollingMipData = false ; typedef FAutoDeleteAsyncTask<FAbortPollMipsTask> FAsyncAbortPollMipsTask ; class FAbortPollMipsTask ; bool)",
    "insertText": "IsSameThread(FTextureMipAllocator::ETickThread TickThread, int32 TaskThread)"
  }
]