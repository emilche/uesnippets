[
  {
    "label": "DebugEpochBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DebugEpochBase"
  },
  {
    "label": "HandleBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HandleBase"
  },
  {
    "label": "incrementEpoch()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_EPOCH_TRACKER_H # define LLVM_ADT_EPOCH_TRACKER_H # include \" llvm / Config / abi - breaking . h \" # include \" llvm / Config / llvm - config . h \" # include<cstdint> namespace llvm { # ifndef LLVM_ENABLE_ABI_BREAKING_CHECKS class DebugEpochBase { public : void)",
    "insertText": "incrementEpoch()"
  },
  {
    "label": "HandleBase()",
    "kind": "Method",
    "detail": "Function (} class HandleBase { public :)",
    "insertText": "HandleBase()"
  },
  {
    "label": "HandleBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleBase(const DebugEpochBase *)"
  },
  {
    "label": "isHandleInSync()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isHandleInSync()"
  },
  {
    "label": "DebugEpochBase()",
    "kind": "Method",
    "detail": "Function (+ + Epoch ; } ~)",
    "insertText": "DebugEpochBase()"
  },
  {
    "label": "HandleBase()",
    "kind": "Method",
    "detail": "Function (} class HandleBase { const uint64_t* EpochAddress ; uint64_t EpochAtCreation ; public :)",
    "insertText": "HandleBase() : EpochAddress(nullptr), EpochAtCreation(UINT64_MAX)"
  },
  {
    "label": "HandleBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "HandleBase(const DebugEpochBase *Parent) : EpochAddress(&Parent->Epoch), EpochAtCreation(Parent->Epoch)"
  }
]