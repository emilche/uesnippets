[
  {
    "label": "DefaultIceTransport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultIceTransport"
  },
  {
    "label": "DefaultIceTransportFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultIceTransportFactory"
  },
  {
    "label": "DefaultIceTransport()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_DEFAULT_ICE_TRANSPORT_FACTORY_H_ # define P2P_BASE_DEFAULT_ICE_TRANSPORT_FACTORY_H_ # include<memory> # include<string> # include \" api / ice_transport_interface . h \" # include \" p2p / base / p2p_transport_channel . h \" # include \" rtc_base / thread . h \" namespace webrtc { class DefaultIceTransport : public IceTransportInterface { public :)",
    "insertText": "DefaultIceTransport(std::unique_ptr<cricket::P2PTransportChannel> internal)"
  },
  {
    "label": "DefaultIceTransport()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "DefaultIceTransport()"
  },
  {
    "label": "internal()",
    "kind": "Method",
    "detail": "Function (cricket::IceTransportInternal*)",
    "insertText": "internal()"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&thread_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (} private : const SequenceChecker thread_checker_ { } ; std::unique_ptr<cricket::P2PTransportChannel> internal_)",
    "insertText": "RTC_GUARDED_BY(thread_checker_)"
  },
  {
    "label": "DefaultIceTransportFactory()",
    "kind": "Method",
    "detail": "Function (} ; class DefaultIceTransportFactory : public IceTransportFactory { public :)",
    "insertText": "DefaultIceTransportFactory()"
  },
  {
    "label": "CreateIceTransport()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<IceTransportInterface>)",
    "insertText": "CreateIceTransport(const std::string& transport_name, int component, IceTransportInit init)"
  }
]