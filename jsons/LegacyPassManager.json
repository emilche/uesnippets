[
  {
    "label": "Pass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Pass"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "PassManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManagerImpl"
  },
  {
    "label": "FunctionPassManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPassManagerImpl"
  },
  {
    "label": "PassManagerBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManagerBase"
  },
  {
    "label": "PassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PassManager"
  },
  {
    "label": "FunctionPassManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FunctionPassManager"
  },
  {
    "label": "PassManagerBase()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_LEGACYPASSMANAGER_H # define LLVM_IR_LEGACYPASSMANAGER_H # include \" llvm / Pass . h \" # include \" llvm / Support / CBindingWrapping . h \" # include<set> namespace llvm { class Pass ; class Module ; namespace legacy { class PassManagerImpl ; class FunctionPassManagerImpl ; class PassManagerBase { public : bool HLSLPrintBeforeAll = false ; std::set<std::string> HLSLPrintBefore ; bool HLSLPrintAfterAll = false ; std::set<std::string> HLSLPrintAfter ; ~)",
    "insertText": "PassManagerBase()"
  },
  {
    "label": "add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "add(Pass *P)"
  },
  {
    "label": "PassManager()",
    "kind": "Method",
    "detail": "Function (raw_ostream* TrackPassOS = nullptr ; } ; class PassManager : public PassManagerBase { public :)",
    "insertText": "PassManager()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "run(Module &M)"
  },
  {
    "label": "FunctionPassManager()",
    "kind": "Method",
    "detail": "Function (private : PassManagerImpl* PM ; } ; class FunctionPassManager : public PassManagerBase { public :)",
    "insertText": "FunctionPassManager(Module *M)"
  },
  {
    "label": "FunctionPassManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FunctionPassManager()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "run(Function &F)"
  },
  {
    "label": "doInitialization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doInitialization()"
  },
  {
    "label": "doFinalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doFinalization()"
  }
]