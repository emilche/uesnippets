[
  {
    "label": "FToolCommandChangeSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolCommandChangeSequence"
  },
  {
    "label": "FChangeElem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FChangeElem"
  },
  {
    "label": "FToolCommandChangeSequence()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" InteractiveToolChange . h \" class FToolCommandChangeSequence : public FToolCommandChange { protected : struct FChangeElem { TWeakObjectPtr<UObject> TargetObject ; TUniquePtr<FToolCommandChange> Change ; } ; TArray<TSharedPtr<FChangeElem>> Sequence ; public :)",
    "insertText": "FToolCommandChangeSequence()"
  },
  {
    "label": "AppendChange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendChange(UObject* Target, TUniquePtr<FToolCommandChange> Change)"
  },
  {
    "label": "FChangeElem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FChangeElem> Elem = MakeShared<)",
    "insertText": "FChangeElem()"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Elem -> TargetObject = Target ; Elem -> Change =)",
    "insertText": "MoveTemp(Change)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Sequence .)",
    "insertText": "Add(Elem)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(UObject* Object)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FChangeElem> Elem = Sequence [ k ] ;)",
    "insertText": "check(Elem->TargetObject.IsValid())"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (Elem -> Change ->)",
    "insertText": "Apply(Elem->TargetObject.Get())"
  },
  {
    "label": "Revert()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Revert(UObject* Object)"
  },
  {
    "label": "Revert()",
    "kind": "Method",
    "detail": "Function (Elem -> Change ->)",
    "insertText": "Revert(Elem->TargetObject.Get())"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} } } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (FString Result =)",
    "insertText": "TEXT(\"FCommandChangeSequence: \")"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (Result = Result + Sequence [ k ] -> Change ->)",
    "insertText": "ToString() + TEXT(\" \")"
  }
]