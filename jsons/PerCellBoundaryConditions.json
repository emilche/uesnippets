[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPerCellBoundaryConditions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPerCellBoundaryConditions"
  },
  {
    "label": "TPerCellBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / KinematicGeometryParticles . h \" # include \" Chaos / Transform . h \" namespace Chaos { template<class T,int d> class TPerCellBoundaryConditions { public :)",
    "insertText": "TPerCellBoundaryConditions(const TKinematicGeometryParticles<T, d>& CollisionParticles, const TKinematicGeometryParticles<T, d>& SourceParticles) : MParticles(CollisionParticles), MSources(SourceParticles)"
  },
  {
    "label": "TPerCellBoundaryConditions()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TPerCellBoundaryConditions()"
  },
  {
    "label": "ApplyNeumann()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ApplyNeumann(const TUniformGrid<T, d>& Grid, TArrayFaceND<bool, d>& BoundaryConditions, TArrayFaceND<T, d>& Velocity, const T Dt, const Pair<int32, TVector<int32, d>>& Index)"
  },
  {
    "label": "BoundaryConditions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BoundaryConditions(Index)"
  },
  {
    "label": "Location()",
    "kind": "Method",
    "detail": "Function (const TVector<T,d>& X = Grid .)",
    "insertText": "Location(Index)"
  },
  {
    "label": "Frame()",
    "kind": "Method",
    "detail": "Function (TRigidTransform<T,d>)",
    "insertText": "Frame(MParticles.GetX(i), MParticles.GetR(i))"
  },
  {
    "label": "Velocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Velocity(Index) = MParticles.GetV(i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "for(uint32 i = 0; i < MSources.Size(); ++i)"
  },
  {
    "label": "Frame()",
    "kind": "Method",
    "detail": "Function (TRigidTransform<T,d>)",
    "insertText": "Frame(MSources.GetX(i), MSources.GetR(i))"
  },
  {
    "label": "Velocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Velocity(Index) = MSources.GetV(i)"
  },
  {
    "label": "ApplyDirichlet()",
    "kind": "Method",
    "detail": "Function (break ; } } } void)",
    "insertText": "ApplyDirichlet(const TUniformGrid<T, d>& Grid, TArrayND<bool, d>& BoundaryConditions, TArrayND<T, d>& Density, const T Dt, const TVector<int32, d>& Index)"
  },
  {
    "label": "Density()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Density(Index)"
  }
]