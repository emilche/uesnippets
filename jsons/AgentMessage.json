[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FException",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FException"
  },
  {
    "label": "FBlobRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlobRequest"
  },
  {
    "label": "FAgentMessageChannel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAgentMessageChannel"
  },
  {
    "label": "FAgentMessageChannel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include<memory> # include<vector> # include<map> # include<string_view> # include \" ComputeBuffer . h \" # include \" ComputeChannel . h \" enum class EAgentMessageType : unsigned char { None = 0 x00,Ping = 0 x01,Exception = 0 x02,Fork = 0 x03,Attach = 0 x04,WriteFiles = 0 x10,WriteFilesResponse = 0 x11,DeleteFiles = 0 x12,ExecuteV1 = 0 x16,ExecuteV2 = 0 x22,ExecuteOutput = 0 x17,ExecuteResult = 0 x18,ReadBlob = 0 x20,ReadBlobResponse = 0 x21,XorRequest = 0 xf0,XorResponse = 0 xf1,} ; enum class EExecuteProcessFlags : unsigned char { None = 0,UseWine = 1,} ; namespace AgentMessage { struct FException { FUtf8StringView Message ; FUtf8StringView Description ; } ; struct FBlobRequest { FUtf8StringView Locator ; int Offset ; int Length ; } ; } class FAgentMessageChannel { public :)",
    "insertText": "FAgentMessageChannel(TSharedPtr<FComputeChannel> InChannel)"
  },
  {
    "label": "FAgentMessageChannel()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAgentMessageChannel()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Ping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ping()"
  },
  {
    "label": "Exception()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exception(const char* Description, const char* Trace)"
  },
  {
    "label": "Fork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fork(int ChannelId, int BufferSize)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Attach()"
  },
  {
    "label": "UploadFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UploadFiles(const char* Path, const char* Locator)"
  },
  {
    "label": "DeleteFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFiles(const char** Paths, size_t Count)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Execute(const char* Exe, const char** Args, size_t NumArgs, const char* WorkingDir, const char** EnvVars, size_t NumEnvVars, EExecuteProcessFlags Flags)"
  },
  {
    "label": "Blob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Blob(const unsigned char* Data, size_t Length)"
  },
  {
    "label": "Xor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Xor(const unsigned char* Data, size_t Length, unsigned char Value)"
  },
  {
    "label": "ReadResponse()",
    "kind": "Method",
    "detail": "Function (EAgentMessageType)",
    "insertText": "ReadResponse(int32 TimeoutMS = -1)"
  },
  {
    "label": "GetResponseData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetResponseData()"
  },
  {
    "label": "ReadExecuteResult()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadExecuteResult()"
  },
  {
    "label": "ReadBlobRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadBlobRequest(AgentMessage::FBlobRequest& Ex)"
  },
  {
    "label": "CreateMessage()",
    "kind": "Method",
    "detail": "Function (private : const size_t MessageHeaderLength = 5 ; TSharedPtr<FComputeChannel> ChannelBuffers ; unsigned char* RequestData ; size_t RequestSize ; size_t MaxRequestSize ; EAgentMessageType ResponseType ; const unsigned char* ResponseData ; size_t ResponseLength ; void)",
    "insertText": "CreateMessage(EAgentMessageType Type, size_t MaxLength)"
  },
  {
    "label": "FlushMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushMessage()"
  },
  {
    "label": "WriteInt32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteInt32(int Value)"
  },
  {
    "label": "ReadInt32()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ReadInt32(const unsigned char** Pos)"
  },
  {
    "label": "WriteFixedLengthBytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteFixedLengthBytes(const unsigned char* Data, size_t Length)"
  },
  {
    "label": "ReadFixedLengthBytes()",
    "kind": "Method",
    "detail": "Function (const unsigned char*)",
    "insertText": "ReadFixedLengthBytes(const unsigned char** Pos, size_t Length)"
  },
  {
    "label": "MeasureUnsignedVarInt()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MeasureUnsignedVarInt(size_t Value)"
  },
  {
    "label": "WriteUnsignedVarInt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteUnsignedVarInt(size_t Value)"
  },
  {
    "label": "ReadUnsignedVarInt()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadUnsignedVarInt(const unsigned char** Pos)"
  },
  {
    "label": "MeasureString()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MeasureString(const char* Text)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const char* Text)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteString(const std::string_view& Text)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (FUtf8StringView)",
    "insertText": "ReadString(const unsigned char** Pos)"
  },
  {
    "label": "WriteOptionalString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteOptionalString(const char* Text)"
  }
]