[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FStreamingDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingDescriptor"
  },
  {
    "label": "FStreamingActor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingActor"
  },
  {
    "label": "FStreamingCell",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingCell"
  },
  {
    "label": "FStreamingGrid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingGrid"
  },
  {
    "label": "FStreamingDescriptorParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingDescriptorParams"
  },
  {
    "label": "DumpStateLog()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Box . h \" # include \" Misc / HierarchicalLogArchive . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" Templates / SubclassOf . h \" # if WITH_EDITOR class AActor ; class UWorld ; namespace UE::Private::WorldPartition { struct FStreamingDescriptor { struct FStreamingActor { FTopLevelAssetPath BaseClass ; FTopLevelAssetPath NativeClass ; FSoftObjectPath Path ; FName Package ; FString Label ; FGuid ActorGuid ; void)",
    "insertText": "DumpStateLog(FHierarchicalLogArchive& Ar)"
  },
  {
    "label": "GenerateStreamingDescriptor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreamingDescriptor(UWorld* InWorld, FStreamingDescriptor& OutStreamingDescriptor, const FStreamingDescriptorParams& Params = FStreamingDescriptorParams())"
  }
]