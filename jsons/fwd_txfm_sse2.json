[
  {
    "label": "pair_set_epi32()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_FWD_TXFM_SSE2_H_ # define VPX_VPX_DSP_X86_FWD_TXFM_SSE2_H_ # ifdef __cplusplus \" C \" { # endif # define)",
    "insertText": "pair_set_epi32(a, b) \\ _mm_set_epi32((int)(b), (int)(a), (int)(b), (int)(a)) static INLINE __m128i k_madd_epi32(__m128i a, __m128i b)"
  },
  {
    "label": "_mm_mul_epu32()",
    "kind": "Method",
    "detail": "Function (__m128i buf0,buf1 ; buf0 =)",
    "insertText": "_mm_mul_epu32(a, b)"
  },
  {
    "label": "_mm_srli_epi64()",
    "kind": "Method",
    "detail": "Function (a =)",
    "insertText": "_mm_srli_epi64(a, 32)"
  },
  {
    "label": "_mm_srli_epi64()",
    "kind": "Method",
    "detail": "Function (b =)",
    "insertText": "_mm_srli_epi64(b, 32)"
  },
  {
    "label": "k_packs_epi64()",
    "kind": "Method",
    "detail": "Function (} __m128i)",
    "insertText": "k_packs_epi64(__m128i a, __m128i b)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i buf0 =)",
    "insertText": "_mm_shuffle_epi32(a, _MM_SHUFFLE(0, 0, 2, 0))"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i buf1 =)",
    "insertText": "_mm_shuffle_epi32(b, _MM_SHUFFLE(0, 0, 2, 0))"
  },
  {
    "label": "check_epi16_overflow_x2()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "check_epi16_overflow_x2(const __m128i *preg0, const __m128i *preg1)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i max_overflow =)",
    "insertText": "_mm_set1_epi16(0x7fff)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i min_overflow =)",
    "insertText": "_mm_set1_epi16((short)0x8000)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i cmp0 =)",
    "insertText": "_mm_or_si128(_mm_cmpeq_epi16(*preg0, max_overflow), _mm_cmpeq_epi16(*preg0, min_overflow))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i cmp1 =)",
    "insertText": "_mm_or_si128(_mm_cmpeq_epi16(*preg1, max_overflow), _mm_cmpeq_epi16(*preg1, min_overflow))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (cmp0 =)",
    "insertText": "_mm_or_si128(cmp0, cmp1)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "check_epi16_overflow_x4(const __m128i *preg0, const __m128i *preg1, const __m128i *preg2, const __m128i *preg3)"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i cmp2 =)",
    "insertText": "_mm_or_si128(_mm_cmpeq_epi16(*preg2, max_overflow), _mm_cmpeq_epi16(*preg2, min_overflow))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (__m128i cmp3 =)",
    "insertText": "_mm_or_si128(_mm_cmpeq_epi16(*preg3, max_overflow), _mm_cmpeq_epi16(*preg3, min_overflow))"
  },
  {
    "label": "_mm_or_si128()",
    "kind": "Method",
    "detail": "Function (cmp0 =)",
    "insertText": "_mm_or_si128(_mm_or_si128(cmp0, cmp1), _mm_or_si128(cmp2, cmp3))"
  },
  {
    "label": "check_epi16_overflow_x8()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "check_epi16_overflow_x8(const __m128i *preg0, const __m128i *preg1, const __m128i *preg2, const __m128i *preg3, const __m128i *preg4, const __m128i *preg5, const __m128i *preg6, const __m128i *preg7)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (int res0,res1 ; res0 =)",
    "insertText": "check_epi16_overflow_x4(preg0, preg1, preg2, preg3)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (res1 =)",
    "insertText": "check_epi16_overflow_x4(preg4, preg5, preg6, preg7)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (res0 =)",
    "insertText": "check_epi16_overflow_x4(preg8, preg9, preg10, preg11)"
  },
  {
    "label": "check_epi16_overflow_x32()",
    "kind": "Method",
    "detail": "Function (} return res0 + res1 ; } int)",
    "insertText": "check_epi16_overflow_x32(const __m128i *preg0, const __m128i *preg1, const __m128i *preg2, const __m128i *preg3, const __m128i *preg4, const __m128i *preg5, const __m128i *preg6, const __m128i *preg7, const __m128i *preg8, const __m128i *preg9, const __m128i *preg10, const __m128i *preg11, const __m128i *preg12, const __m128i *preg13, const __m128i *preg14, const __m128i *preg15, const __m128i *preg16, const __m128i *preg17, const __m128i *preg18, const __m128i *preg19, const __m128i *preg20, const __m128i *preg21, const __m128i *preg22, const __m128i *preg23, const __m128i *preg24, const __m128i *preg25, const __m128i *preg26, const __m128i *preg27, const __m128i *preg28, const __m128i *preg29, const __m128i *preg30, const __m128i *preg31)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (res1 =)",
    "insertText": "check_epi16_overflow_x4(preg12, preg13, preg14, preg15)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (res0 =)",
    "insertText": "check_epi16_overflow_x4(preg16, preg17, preg18, preg19)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (res1 =)",
    "insertText": "check_epi16_overflow_x4(preg20, preg21, preg22, preg23)"
  },
  {
    "label": "check_epi16_overflow_x4()",
    "kind": "Method",
    "detail": "Function (res0 =)",
    "insertText": "check_epi16_overflow_x4(preg24, preg25, preg26, preg27)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (} } } } } return res0 + res1 ; } int)",
    "insertText": "k_check_epi32_overflow_4(const __m128i *preg0, const __m128i *preg1, const __m128i *preg2, const __m128i *preg3, const __m128i *zero)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i minus_one =)",
    "insertText": "_mm_set1_epi32(-1)"
  },
  {
    "label": "_mm_slli_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i reg0_shifted =)",
    "insertText": "_mm_slli_epi64(*preg0, 1)"
  },
  {
    "label": "_mm_slli_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i reg1_shifted =)",
    "insertText": "_mm_slli_epi64(*preg1, 1)"
  },
  {
    "label": "_mm_slli_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i reg2_shifted =)",
    "insertText": "_mm_slli_epi64(*preg2, 1)"
  },
  {
    "label": "_mm_slli_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i reg3_shifted =)",
    "insertText": "_mm_slli_epi64(*preg3, 1)"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i reg0_top_dwords =)",
    "insertText": "_mm_shuffle_epi32(reg0_shifted, _MM_SHUFFLE(0, 0, 3, 1))"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i reg1_top_dwords =)",
    "insertText": "_mm_shuffle_epi32(reg1_shifted, _MM_SHUFFLE(0, 0, 3, 1))"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i reg2_top_dwords =)",
    "insertText": "_mm_shuffle_epi32(reg2_shifted, _MM_SHUFFLE(0, 0, 3, 1))"
  },
  {
    "label": "_mm_shuffle_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i reg3_top_dwords =)",
    "insertText": "_mm_shuffle_epi32(reg3_shifted, _MM_SHUFFLE(0, 0, 3, 1))"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i top_dwords_01 =)",
    "insertText": "_mm_unpacklo_epi64(reg0_top_dwords, reg1_top_dwords)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i top_dwords_23 =)",
    "insertText": "_mm_unpacklo_epi64(reg2_top_dwords, reg3_top_dwords)"
  },
  {
    "label": "_mm_cmpeq_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i valid_positve_01 =)",
    "insertText": "_mm_cmpeq_epi32(top_dwords_01, *zero)"
  },
  {
    "label": "_mm_cmpeq_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i valid_positve_23 =)",
    "insertText": "_mm_cmpeq_epi32(top_dwords_23, *zero)"
  },
  {
    "label": "_mm_cmpeq_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i valid_negative_01 =)",
    "insertText": "_mm_cmpeq_epi32(top_dwords_01, minus_one)"
  },
  {
    "label": "_mm_cmpeq_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i valid_negative_23 =)",
    "insertText": "_mm_cmpeq_epi32(top_dwords_23, minus_one)"
  },
  {
    "label": "_mm_movemask_epi8()",
    "kind": "Method",
    "detail": "Function (int overflow_01 =)",
    "insertText": "_mm_movemask_epi8(_mm_cmpeq_epi32(valid_positve_01, valid_negative_01))"
  },
  {
    "label": "_mm_movemask_epi8()",
    "kind": "Method",
    "detail": "Function (int overflow_23 =)",
    "insertText": "_mm_movemask_epi8(_mm_cmpeq_epi32(valid_positve_23, valid_negative_23))"
  },
  {
    "label": "k_check_epi32_overflow_8()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "k_check_epi32_overflow_8(const __m128i *preg0, const __m128i *preg1, const __m128i *preg2, const __m128i *preg3, const __m128i *preg4, const __m128i *preg5, const __m128i *preg6, const __m128i *preg7, const __m128i *zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (int overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg0, preg1, preg2, preg3, zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg4, preg5, preg6, preg7, zero)"
  },
  {
    "label": "k_check_epi32_overflow_16()",
    "kind": "Method",
    "detail": "Function (} return overflow ; } int)",
    "insertText": "k_check_epi32_overflow_16(const __m128i *preg0, const __m128i *preg1, const __m128i *preg2, const __m128i *preg3, const __m128i *preg4, const __m128i *preg5, const __m128i *preg6, const __m128i *preg7, const __m128i *preg8, const __m128i *preg9, const __m128i *preg10, const __m128i *preg11, const __m128i *preg12, const __m128i *preg13, const __m128i *preg14, const __m128i *preg15, const __m128i *zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg8, preg9, preg10, preg11, zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg12, preg13, preg14, preg15, zero)"
  },
  {
    "label": "k_check_epi32_overflow_32()",
    "kind": "Method",
    "detail": "Function (} } } return overflow ; } int)",
    "insertText": "k_check_epi32_overflow_32(const __m128i *preg0, const __m128i *preg1, const __m128i *preg2, const __m128i *preg3, const __m128i *preg4, const __m128i *preg5, const __m128i *preg6, const __m128i *preg7, const __m128i *preg8, const __m128i *preg9, const __m128i *preg10, const __m128i *preg11, const __m128i *preg12, const __m128i *preg13, const __m128i *preg14, const __m128i *preg15, const __m128i *preg16, const __m128i *preg17, const __m128i *preg18, const __m128i *preg19, const __m128i *preg20, const __m128i *preg21, const __m128i *preg22, const __m128i *preg23, const __m128i *preg24, const __m128i *preg25, const __m128i *preg26, const __m128i *preg27, const __m128i *preg28, const __m128i *preg29, const __m128i *preg30, const __m128i *preg31, const __m128i *zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg16, preg17, preg18, preg19, zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg20, preg21, preg22, preg23, zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg24, preg25, preg26, preg27, zero)"
  },
  {
    "label": "k_check_epi32_overflow_4()",
    "kind": "Method",
    "detail": "Function (overflow =)",
    "insertText": "k_check_epi32_overflow_4(preg28, preg29, preg30, preg31, zero)"
  },
  {
    "label": "store_output()",
    "kind": "Method",
    "detail": "Function (} } } } } } } return overflow ; } void)",
    "insertText": "store_output(const __m128i *poutput, tran_low_t *dst_ptr)"
  },
  {
    "label": "_mm_setzero_si128()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH const __m128i zero =)",
    "insertText": "_mm_setzero_si128()"
  },
  {
    "label": "_mm_cmplt_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_bits =)",
    "insertText": "_mm_cmplt_epi16(*poutput, zero)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i out0 =)",
    "insertText": "_mm_unpacklo_epi16(*poutput, sign_bits)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i out1 =)",
    "insertText": "_mm_unpackhi_epi16(*poutput, sign_bits)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(dst_ptr), out0)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(dst_ptr + 4), out1)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "_mm_store_si128((__m128i *)(dst_ptr), *poutput)"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (# endif } void)",
    "insertText": "storeu_output(const __m128i *poutput, tran_low_t *dst_ptr)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(dst_ptr), out0)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(dst_ptr + 4), out1)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "_mm_storeu_si128((__m128i *)(dst_ptr), *poutput)"
  },
  {
    "label": "mult_round_shift()",
    "kind": "Method",
    "detail": "Function (# endif } __m128i)",
    "insertText": "mult_round_shift(const __m128i *pin0, const __m128i *pin1, const __m128i *pmultiplier, const __m128i *prounding, const int shift)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u0 =)",
    "insertText": "_mm_madd_epi16(*pin0, *pmultiplier)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i u1 =)",
    "insertText": "_mm_madd_epi16(*pin1, *pmultiplier)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v0 =)",
    "insertText": "_mm_add_epi32(u0, *prounding)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i v1 =)",
    "insertText": "_mm_add_epi32(u1, *prounding)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w0 =)",
    "insertText": "_mm_srai_epi32(v0, shift)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i w1 =)",
    "insertText": "_mm_srai_epi32(v1, shift)"
  },
  {
    "label": "transpose_and_output8x8()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "transpose_and_output8x8(const __m128i *pin00, const __m128i *pin01, const __m128i *pin02, const __m128i *pin03, const __m128i *pin04, const __m128i *pin05, const __m128i *pin06, const __m128i *pin07, const int pass, int16_t *out0_ptr, tran_low_t *out1_ptr)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_0 =)",
    "insertText": "_mm_unpacklo_epi16(*pin00, *pin01)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_1 =)",
    "insertText": "_mm_unpacklo_epi16(*pin02, *pin03)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_2 =)",
    "insertText": "_mm_unpackhi_epi16(*pin00, *pin01)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_3 =)",
    "insertText": "_mm_unpackhi_epi16(*pin02, *pin03)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_4 =)",
    "insertText": "_mm_unpacklo_epi16(*pin04, *pin05)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_5 =)",
    "insertText": "_mm_unpacklo_epi16(*pin06, *pin07)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_6 =)",
    "insertText": "_mm_unpackhi_epi16(*pin04, *pin05)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i tr0_7 =)",
    "insertText": "_mm_unpackhi_epi16(*pin06, *pin07)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_0 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_0, tr0_1)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_1 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_2, tr0_3)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_2 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_0, tr0_1)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_3 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_2, tr0_3)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_4 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_4, tr0_5)"
  },
  {
    "label": "_mm_unpacklo_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_5 =)",
    "insertText": "_mm_unpacklo_epi32(tr0_6, tr0_7)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_6 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_4, tr0_5)"
  },
  {
    "label": "_mm_unpackhi_epi32()",
    "kind": "Method",
    "detail": "Function (const __m128i tr1_7 =)",
    "insertText": "_mm_unpackhi_epi32(tr0_6, tr0_7)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_0 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_0, tr1_4)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_1 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_0, tr1_4)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_2 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_2, tr1_6)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_3 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_2, tr1_6)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_4 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_1, tr1_5)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_5 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_1, tr1_5)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_6 =)",
    "insertText": "_mm_unpacklo_epi64(tr1_3, tr1_7)"
  },
  {
    "label": "_mm_unpackhi_epi64()",
    "kind": "Method",
    "detail": "Function (const __m128i tr2_7 =)",
    "insertText": "_mm_unpackhi_epi64(tr1_3, tr1_7)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 0 * 16), tr2_0)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 1 * 16), tr2_1)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 2 * 16), tr2_2)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 3 * 16), tr2_3)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 4 * 16), tr2_4)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 5 * 16), tr2_5)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 6 * 16), tr2_6)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *)(out0_ptr + 7 * 16), tr2_7)"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "storeu_output(&tr2_0, (out1_ptr + 0 * 16))"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&tr2_1, (out1_ptr + 1 * 16))"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&tr2_2, (out1_ptr + 2 * 16))"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&tr2_3, (out1_ptr + 3 * 16))"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&tr2_4, (out1_ptr + 4 * 16))"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&tr2_5, (out1_ptr + 5 * 16))"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&tr2_6, (out1_ptr + 6 * 16))"
  },
  {
    "label": "storeu_output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "storeu_output(&tr2_7, (out1_ptr + 7 * 16))"
  }
]