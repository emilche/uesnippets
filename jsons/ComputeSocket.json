[
  {
    "label": "FComputeSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FComputeSocket"
  },
  {
    "label": "FWorkerComputeSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorkerComputeSocket"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FComputeSocket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ComputeBuffer . h \" # include \" ComputeChannel . h \" # include \" ComputeTransport . h \" # include<vector> class FComputeSocket { public :)",
    "insertText": "FComputeSocket()"
  },
  {
    "label": "FComputeSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FComputeSocket(const FComputeSocket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FComputeSocket&)",
    "insertText": "operator(const FComputeSocket&)"
  },
  {
    "label": "StartCommunication()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCommunication()"
  },
  {
    "label": "AttachRecvBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachRecvBuffer(int ChannelId, FComputeBuffer RecvBuffer)"
  },
  {
    "label": "AttachSendBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AttachSendBuffer(int ChannelId, FComputeBuffer SendBuffer)"
  },
  {
    "label": "CreateChannel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FComputeChannel>)",
    "insertText": "CreateChannel(int ChannelId)"
  },
  {
    "label": "CreateChannel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FComputeChannel>)",
    "insertText": "CreateChannel(int ChannelId, FComputeBuffer RecvBuffer, FComputeBuffer SendBuffer)"
  },
  {
    "label": "FWorkerComputeSocket()",
    "kind": "Method",
    "detail": "Function (} ; class FWorkerComputeSocket final : public FComputeSocket { public : const char* const IpcEnvVar ;)",
    "insertText": "FWorkerComputeSocket()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open()"
  },
  {
    "label": "Open()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Open(const char* CommandBufferName)"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "RunServer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunServer(FComputeBufferReader& CommandBufferReader, FComputeSocket& Socket)"
  },
  {
    "label": "AttachBuffer()",
    "kind": "Method",
    "detail": "Function (private : enum class EMessageType ; FComputeBufferWriter CommandBufferWriter ; std::vector<FComputeBuffer> Buffers ; void)",
    "insertText": "AttachBuffer(int ChannelId, EMessageType Type, const char* Name)"
  },
  {
    "label": "ReadVarUInt()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadVarUInt(const unsigned char* Pos, unsigned int* OutValue)"
  },
  {
    "label": "ReadString()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "ReadString(const unsigned char* Pos, char* OutText, size_t OutTextMaxLen)"
  },
  {
    "label": "WriteVarUInt()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "WriteVarUInt(unsigned char* Pos, unsigned int Value)"
  },
  {
    "label": "WriteString()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "WriteString(unsigned char* Pos, const char* Text)"
  },
  {
    "label": "CreateComputeSocket()",
    "kind": "Method",
    "detail": "Function (} ; enum class EComputeSocketEndpoint { Local,Remote } ; TUniquePtr<FComputeSocket>)",
    "insertText": "CreateComputeSocket(TUniquePtr<FComputeTransport> Transport, EComputeSocketEndpoint Endpoint)"
  }
]