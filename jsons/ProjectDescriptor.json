[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FProjectDescriptor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProjectDescriptor"
  },
  {
    "label": "FProjectDescriptor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CustomBuildSteps . h \" # include \" HAL / Platform . h \" # include \" ModuleDescriptor . h \" # include \" PluginReferenceDescriptor . h \" # include \" Serialization / JsonWriter . h \" # include \" UObject / NameTypes . h \" class FJsonObject ; class FText ; namespace EProjectDescriptorVersion { enum Type { Invalid = 0,Initial = 1,NameHash = 2,ProjectPluginUnification = 3,LatestPlusOne,Latest = LatestPlusOne - 1 } ; } struct FProjectDescriptor { EProjectDescriptorVersion::Type FileVersion ; FString EngineAssociation ; FString Category ; FString Description ; TArray<FModuleDescriptor> Modules ; TArray<FPluginReferenceDescriptor> Plugins ; TArray<FName> TargetPlatforms ; uint32 EpicSampleNameHash ; FCustomBuildSteps PreBuildSteps ; FCustomBuildSteps PostBuildSteps ; bool bIsEnterpriseProject ; bool bDisableEnginePluginsByDefault ;)",
    "insertText": "FProjectDescriptor()"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sign(const FString& FilePath)"
  },
  {
    "label": "IsSigned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSigned(const FString& FilePath)"
  },
  {
    "label": "FindPluginReferenceIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindPluginReferenceIndex(const FString& PluginName)"
  },
  {
    "label": "UpdateSupportedTargetPlatforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSupportedTargetPlatforms(const FName& InPlatformName, bool bIsSupported)"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Load(const FString& FileName, FText& OutFailReason)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(const FJsonObject& Object, const FString& PathToProject, FText& OutFailReason)"
  },
  {
    "label": "Save()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Save(const FString& FileName, FText& OutFailReason)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Write(TJsonWriter<>& Writer, const FString& PathToProject)"
  },
  {
    "label": "GetExtension()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetExtension()"
  },
  {
    "label": "GetAdditionalPluginDirectories()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetAdditionalPluginDirectories()"
  },
  {
    "label": "RemovePluginDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePluginDirectory(const FString& Dir)"
  },
  {
    "label": "GetAdditionalRootDirectories()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>&)",
    "insertText": "GetAdditionalRootDirectories()"
  },
  {
    "label": "RemoveRootDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRootDirectory(const FString& Dir)"
  },
  {
    "label": "HasModule()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "HasModule(FName ModuleName)"
  },
  {
    "label": "MakePathRelativeToProject()",
    "kind": "Method",
    "detail": "Function (# endif private : const FString)",
    "insertText": "MakePathRelativeToProject(const FString& Dir, const FString& PathToProject)"
  }
]