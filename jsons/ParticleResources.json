[
  {
    "label": "FParticleTexCoordVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleTexCoordVertexBuffer"
  },
  {
    "label": "FParticleEightTexCoordVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleEightTexCoordVertexBuffer"
  },
  {
    "label": "FParticleIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleIndexBuffer"
  },
  {
    "label": "FSixTriangleParticleIndexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSixTriangleParticleIndexBuffer"
  },
  {
    "label": "FParticleScratchVertexBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticleScratchVertexBuffer"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RenderResource . h \" enum { MAX_PARTICLES_PER_INSTANCE = 1 6 } ; const int32 GParticleScratchVertexBufferSize ; class FParticleTexCoordVertexBuffer : public FVertexBuffer { public : void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetShaderParam()",
    "kind": "Method",
    "detail": "Function (} ; TGlobalResource<FParticleIndexBuffer> GParticleIndexBuffer ; TGlobalResource<FSixTriangleParticleIndexBuffer> GSixTriangleParticleIndexBuffer ; typedef FRHIShaderResourceView* FParticleShaderParamRef ; typedef FRHIBuffer* FParticleBufferParamRef ; class FParticleScratchVertexBuffer : public FVertexBuffer { public : FParticleShaderParamRef)",
    "insertText": "GetShaderParam()"
  },
  {
    "label": "GetBufferParam()",
    "kind": "Method",
    "detail": "Function (FParticleBufferParamRef)",
    "insertText": "GetBufferParam()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const uint32 Stride =)",
    "insertText": "sizeof(FVector4f)"
  }
]