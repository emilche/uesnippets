[
  {
    "label": "UsedIds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UsedIds"
  },
  {
    "label": "UsedPayloadTypes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UsedPayloadTypes"
  },
  {
    "label": "UsedRtpHeaderExtensionIds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UsedRtpHeaderExtensionIds"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UsedIds()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_USED_IDS_H_ # define PC_USED_IDS_H_ # include<set> # include<vector> # include \" api / rtp_parameters . h \" # include \" media / base / codec . h \" # include \" rtc_base / checks . h \" # include \" rtc_base / logging . h \" namespace cricket { template<IdStruct> class UsedIds { public :)",
    "insertText": "UsedIds(int min_allowed_id, int max_allowed_id) : min_allowed_id_(min_allowed_id), max_allowed_id_(max_allowed_id), next_id_(max_allowed_id)"
  },
  {
    "label": "UsedIds()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "UsedIds()"
  },
  {
    "label": "FindAndSetIdUsed()",
    "kind": "Method",
    "detail": "Function (} template<Id> void)",
    "insertText": "FindAndSetIdUsed(std::vector<Id>* ids)"
  },
  {
    "label": "FindAndSetIdUsed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindAndSetIdUsed(&id)"
  },
  {
    "label": "FindAndSetIdUsed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "FindAndSetIdUsed(IdStruct* idstruct)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int original_id = idstruct -> id ; int new_id = idstruct -> id ;)",
    "insertText": "if(original_id > max_allowed_id_ || original_id < min_allowed_id_)"
  },
  {
    "label": "FindUnusedId()",
    "kind": "Method",
    "detail": "Function (new_id =)",
    "insertText": "FindUnusedId()"
  },
  {
    "label": "SetIdUsed()",
    "kind": "Method",
    "detail": "Function (idstruct -> id = new_id ; })",
    "insertText": "SetIdUsed(new_id)"
  },
  {
    "label": "IsIdUsed()",
    "kind": "Method",
    "detail": "Function (} protected : bool)",
    "insertText": "IsIdUsed(int new_id)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (- - next_id_ ; })",
    "insertText": "RTC_DCHECK(next_id_ >= min_allowed_id_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(new_id >= min_allowed_id_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(new_id <= max_allowed_id_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(!IsIdUsed(new_id))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (id_set_ .)",
    "insertText": "insert(new_id)"
  },
  {
    "label": "UsedPayloadTypes()",
    "kind": "Method",
    "detail": "Function (} int next_id_ ; std::set<int> id_set_ ; } ; class UsedPayloadTypes : public UsedIds<Codec> { public :)",
    "insertText": "UsedPayloadTypes() : UsedIds<Codec>(kFirstDynamicPayloadTypeLowerRange, kLastDynamicPayloadTypeUpperRange)"
  },
  {
    "label": "UsedRtpHeaderExtensionIds()",
    "kind": "Method",
    "detail": "Function (} private : const int kFirstDynamicPayloadTypeLowerRange = 3 5 ; const int kLastDynamicPayloadTypeLowerRange = 6 3 ; const int kFirstDynamicPayloadTypeUpperRange = 9 6 ; const int kLastDynamicPayloadTypeUpperRange = 1 2 7 ; } ; class UsedRtpHeaderExtensionIds : public UsedIds<webrtc::RtpExtension> { public : enum class IdDomain { kOneByteOnly,kTwoByteAllowed,} ;)",
    "insertText": "UsedRtpHeaderExtensionIds(IdDomain id_domain) : UsedIds<webrtc::RtpExtension>( webrtc::RtpExtension::kMinId, id_domain == IdDomain::kTwoByteAllowed ? webrtc::RtpExtension::kMaxId : webrtc::RtpExtension::kOneByteHeaderExtensionMaxId), id_domain_(id_domain), next_extension_id_(webrtc::RtpExtension::kOneByteHeaderExtensionMaxId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - next_extension_id_ ; } })",
    "insertText": "if(id_domain_ == IdDomain::kTwoByteAllowed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (next_extension_id_ = webrtc::RtpExtension::kOneByteHeaderExtensionMaxId + 1 ; })",
    "insertText": "if(next_extension_id_ > webrtc::RtpExtension::kOneByteHeaderExtensionMaxId)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (+ + next_extension_id_ ; } } })",
    "insertText": "RTC_DCHECK(next_extension_id_ >= min_allowed_id_)"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(next_extension_id_ <= max_allowed_id_)"
  }
]