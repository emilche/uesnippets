[
  {
    "label": "plcrash_async_thread_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_async_thread_state"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef PLCRASH_ASYNC_THREAD_H # define PLCRASH_ASYNC_THREAD_H # ifdef __cplusplus \" C \" { # endif # include<sys / ucontext . h> # include \" PLCrashAsync . h \" # include<Availability . h> # if)",
    "insertText": "defined(__i386__) || defined(__x86_64__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef _STRUCT_UCONTEXT pl_ucontext_t ; # endif # if)",
    "insertText": "defined(__arm__) || defined(__arm64__)"
  },
  {
    "label": "plcrash_async_thread_state_init()",
    "kind": "Method",
    "detail": "Function (typedef _STRUCT_UCONTEXT pl_ucontext_t ; # define PLCRASH_ASYNC_THREAD_ARM_SUPPORT 1 # endif typedef enum { PLCRASH_ASYNC_THREAD_STACK_DIRECTION_UP = 1,PLCRASH_ASYNC_THREAD_STACK_DIRECTION_DOWN = 2 } plcrash_async_thread_stack_direction_t ; typedef struct plcrash_async_thread_state { plcrash_async_thread_stack_direction_t stack_direction ; size_t greg_size ; uint64_t valid_regs ; union { # ifdef PLCRASH_ASYNC_THREAD_ARM_SUPPORT struct { arm_unified_thread_state_t thread ; } arm_state ; # endif # ifdef PLCRASH_ASYNC_THREAD_X86_SUPPORT struct { x86_thread_state_t thread ; x86_exception_state_t exception ; } x86_state ; # endif } ; } plcrash_async_thread_state_t ; typedef uint32_t plcrash_regnum_t ; typedef enum { PLCRASH_REG_IP = 0,PLCRASH_REG_FP = 1,PLCRASH_REG_SP = 2,PLCRASH_REG_INVALID = INT32_MAX } plcrash_gen_regnum_t ; # include \" PLCrashAsyncThread_x86 . h \" # include \" PLCrashAsyncThread_arm . h \" typedef plcrash_pdef_greg_t plcrash_greg_t ; plcrash_error_t)",
    "insertText": "plcrash_async_thread_state_init(plcrash_async_thread_state_t *thread_state, cpu_type_t cpu_type)"
  },
  {
    "label": "plcrash_async_thread_state_mcontext_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_mcontext_init(plcrash_async_thread_state_t *thread_state, pl_mcontext_t *mctx)"
  },
  {
    "label": "plcrash_async_thread_state_mach_thread_init()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_thread_state_mach_thread_init(plcrash_async_thread_state_t *thread_state, thread_t thread)"
  },
  {
    "label": "plcrash_error_t()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "plcrash_error_t(*plcrash_async_thread_state_current_callback)(plcrash_async_thread_state_t *state, void *context)"
  },
  {
    "label": "plcrash_async_thread_state_current()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_thread_state_current(plcrash_async_thread_state_current_callback callback, void *context)"
  },
  {
    "label": "plcrash_async_thread_state_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_copy(plcrash_async_thread_state_t *dest, const plcrash_async_thread_state_t *src)"
  },
  {
    "label": "plcrash_async_thread_state_get_stack_direction()",
    "kind": "Method",
    "detail": "Function (plcrash_async_thread_stack_direction_t)",
    "insertText": "plcrash_async_thread_state_get_stack_direction(const plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_get_greg_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "plcrash_async_thread_state_get_greg_size(const plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_has_reg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_thread_state_has_reg(const plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum)"
  },
  {
    "label": "plcrash_async_thread_state_clear_reg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_clear_reg(plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum)"
  },
  {
    "label": "plcrash_async_thread_state_clear_all_regs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_clear_all_regs(plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_get_reg_name()",
    "kind": "Method",
    "detail": "Function (char const*)",
    "insertText": "plcrash_async_thread_state_get_reg_name(const plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum)"
  },
  {
    "label": "plcrash_async_thread_state_get_reg_count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "plcrash_async_thread_state_get_reg_count(const plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_get_reg()",
    "kind": "Method",
    "detail": "Function (plcrash_greg_t)",
    "insertText": "plcrash_async_thread_state_get_reg(const plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum)"
  },
  {
    "label": "plcrash_async_thread_state_set_reg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_set_reg(plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum, plcrash_greg_t reg)"
  },
  {
    "label": "plcrash_async_thread_state_clear_volatile_regs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_clear_volatile_regs(plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_map_reg_to_dwarf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_thread_state_map_reg_to_dwarf(plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum, uint64_t *dwarf_reg)"
  },
  {
    "label": "plcrash_async_thread_state_map_dwarf_to_reg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_thread_state_map_dwarf_to_reg(const plcrash_async_thread_state_t *thread_state, uint64_t dwarf_reg, plcrash_regnum_t *regnum)"
  }
]