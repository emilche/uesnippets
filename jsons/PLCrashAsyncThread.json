[
  {
    "label": "plcrash_async_thread_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "plcrash_async_thread_state"
  },
  {
    "label": "plcrash_async_thread_state_init()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_thread_state_init(plcrash_async_thread_state_t *thread_state, cpu_type_t cpu_type)"
  },
  {
    "label": "plcrash_async_thread_state_mcontext_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_mcontext_init(plcrash_async_thread_state_t *thread_state, pl_mcontext_t *mctx)"
  },
  {
    "label": "plcrash_async_thread_state_mach_thread_init()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_thread_state_mach_thread_init(plcrash_async_thread_state_t *thread_state, thread_t thread)"
  },
  {
    "label": "plcrash_async_thread_state_current()",
    "kind": "Method",
    "detail": "Function (plcrash_error_t)",
    "insertText": "plcrash_async_thread_state_current(plcrash_async_thread_state_current_callback callback, void *context)"
  },
  {
    "label": "plcrash_async_thread_state_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_copy(plcrash_async_thread_state_t *dest, const plcrash_async_thread_state_t *src)"
  },
  {
    "label": "plcrash_async_thread_state_get_stack_direction()",
    "kind": "Method",
    "detail": "Function (plcrash_async_thread_stack_direction_t)",
    "insertText": "plcrash_async_thread_state_get_stack_direction(const plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_get_greg_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "plcrash_async_thread_state_get_greg_size(const plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_has_reg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_thread_state_has_reg(const plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum)"
  },
  {
    "label": "plcrash_async_thread_state_clear_reg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_clear_reg(plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum)"
  },
  {
    "label": "plcrash_async_thread_state_clear_all_regs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_clear_all_regs(plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_get_reg_count()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "plcrash_async_thread_state_get_reg_count(const plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_get_reg()",
    "kind": "Method",
    "detail": "Function (plcrash_greg_t)",
    "insertText": "plcrash_async_thread_state_get_reg(const plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum)"
  },
  {
    "label": "plcrash_async_thread_state_set_reg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_set_reg(plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum, plcrash_greg_t reg)"
  },
  {
    "label": "plcrash_async_thread_state_clear_volatile_regs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "plcrash_async_thread_state_clear_volatile_regs(plcrash_async_thread_state_t *thread_state)"
  },
  {
    "label": "plcrash_async_thread_state_map_reg_to_dwarf()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_thread_state_map_reg_to_dwarf(plcrash_async_thread_state_t *thread_state, plcrash_regnum_t regnum, uint64_t *dwarf_reg)"
  },
  {
    "label": "plcrash_async_thread_state_map_dwarf_to_reg()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "plcrash_async_thread_state_map_dwarf_to_reg(const plcrash_async_thread_state_t *thread_state, uint64_t dwarf_reg, plcrash_regnum_t *regnum)"
  }
]