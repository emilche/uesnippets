[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (# ifndef API_AUDIO_CODECS_G711_AUDIO_ENCODER_G711_H_ # define API_AUDIO_CODECS_G711_AUDIO_ENCODER_G711_H_ # include<memory> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_codec_pair_id . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / audio_codecs / audio_format . h \" # include \" api / field_trials_view . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { struct RTC_EXPORT AudioEncoderG711 { struct Config { enum class Type { kPcmU,kPcmA } ; bool)",
    "insertText": "IsOk()"
  },
  {
    "label": "SdpToConfig()",
    "kind": "Method",
    "detail": "Function (} Type type = Type::kPcmU ; int num_channels = 1 ; int frame_size_ms = 2 0 ; } ; absl::optional<AudioEncoderG711::Config>)",
    "insertText": "SdpToConfig(const SdpAudioFormat& audio_format)"
  },
  {
    "label": "AppendSupportedEncoders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendSupportedEncoders(std::vector<AudioCodecSpec>* specs)"
  },
  {
    "label": "QueryAudioEncoder()",
    "kind": "Method",
    "detail": "Function (AudioCodecInfo)",
    "insertText": "QueryAudioEncoder(const Config& config)"
  },
  {
    "label": "MakeAudioEncoder()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<AudioEncoder>)",
    "insertText": "MakeAudioEncoder(const Config& config, int payload_type, absl::optional<AudioCodecPairId> codec_pair_id = absl::nullopt, const FieldTrialsView* field_trials = nullptr)"
  }
]