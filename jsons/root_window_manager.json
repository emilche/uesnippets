[
  {
    "label": "RootWindowManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootWindowManager"
  },
  {
    "label": "base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "base"
  },
  {
    "label": "RootWindowManager()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_TESTS_CEFCLIENT_BROWSER_ROOT_WINDOW_MANAGER_H_ # define CEF_TESTS_CEFCLIENT_BROWSER_ROOT_WINDOW_MANAGER_H_ # pragma once # include<set> # include \" include / base / cef_scoped_ptr . h \" # include \" include / cef_command_line . h \" # include \" include / cef_request_context_handler . h \" # include \" tests / cefclient / browser / image_cache . h \" # include \" tests / cefclient / browser / root_window . h \" # include \" tests / cefclient / browser / temp_window . h \" namespace client { class RootWindowManager : public RootWindow::Delegate { public :)",
    "insertText": "RootWindowManager(bool terminate_when_all_windows_closed)"
  },
  {
    "label": "CreateRootWindow()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RootWindow>)",
    "insertText": "CreateRootWindow(const RootWindowConfig& config)"
  },
  {
    "label": "CreateRootWindowAsPopup()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RootWindow>)",
    "insertText": "CreateRootWindowAsPopup(bool with_controls, bool with_osr, const CefPopupFeatures& popupFeatures, CefWindowInfo& windowInfo, CefRefPtr<CefClient>& client, CefBrowserSettings& settings)"
  },
  {
    "label": "CreateRootWindowAsExtension()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RootWindow>)",
    "insertText": "CreateRootWindowAsExtension(CefRefPtr<CefExtension> extension, const CefRect& source_bounds, CefRefPtr<CefWindow> parent_window, const base::Closure& close_callback, bool with_controls, bool with_osr)"
  },
  {
    "label": "HasRootWindowAsExtension()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasRootWindowAsExtension(CefRefPtr<CefExtension> extension)"
  },
  {
    "label": "GetWindowForBrowser()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RootWindow>)",
    "insertText": "GetWindowForBrowser(int browser_id)"
  },
  {
    "label": "GetActiveRootWindow()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<RootWindow>)",
    "insertText": "GetActiveRootWindow()"
  },
  {
    "label": "GetActiveBrowser()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefBrowser>)",
    "insertText": "GetActiveBrowser()"
  },
  {
    "label": "CloseAllWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseAllWindows(bool force)"
  },
  {
    "label": "AddExtension()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddExtension(CefRefPtr<CefExtension> extension)"
  },
  {
    "label": "request_context_per_browser()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "request_context_per_browser()"
  },
  {
    "label": "OnRootWindowCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRootWindowCreated(scoped_refptr<RootWindow> root_window)"
  },
  {
    "label": "NotifyExtensionsChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyExtensionsChanged()"
  },
  {
    "label": "GetRequestContext()",
    "kind": "Method",
    "detail": "Function (CefRefPtr<CefRequestContext>)",
    "insertText": "GetRequestContext(RootWindow* root_window)"
  },
  {
    "label": "GetImageCache()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<ImageCache>)",
    "insertText": "GetImageCache()"
  },
  {
    "label": "OnTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTest(RootWindow* root_window, int test_id)"
  },
  {
    "label": "OnExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExit(RootWindow* root_window)"
  },
  {
    "label": "OnRootWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRootWindowDestroyed(RootWindow* root_window)"
  },
  {
    "label": "OnRootWindowActivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRootWindowActivated(RootWindow* root_window)"
  },
  {
    "label": "OnBrowserCreated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBrowserCreated(RootWindow* root_window, CefRefPtr<CefBrowser> browser)"
  },
  {
    "label": "CreateExtensionWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExtensionWindow(CefRefPtr<CefExtension> extension, const CefRect& source_bounds, CefRefPtr<CefWindow> parent_window, const base::Closure& close_callback, bool with_osr)"
  },
  {
    "label": "CleanupOnUIThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupOnUIThread()"
  },
  {
    "label": "DISALLOW_COPY_AND_ASSIGN()",
    "kind": "Method",
    "detail": "Function (const bool terminate_when_all_windows_closed_ ; bool request_context_per_browser_ ; bool request_context_shared_cache_ ; typedef std::set<scoped_refptr<RootWindow>> RootWindowSet ; RootWindowSet root_windows_ ; scoped_refptr<RootWindow> active_root_window_ ; base::Lock active_browser_lock_ ; CefRefPtr<CefBrowser> active_browser_ ; scoped_ptr<TempWindow> temp_window_ ; CefRefPtr<CefRequestContext> shared_request_context_ ; ExtensionSet extensions_ ; scoped_refptr<ImageCache> image_cache_ ;)",
    "insertText": "DISALLOW_COPY_AND_ASSIGN(RootWindowManager)"
  }
]