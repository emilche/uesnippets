[
  {
    "label": "integer_sequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "integer_sequence"
  },
  {
    "label": "Extend",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Extend"
  },
  {
    "label": "Gen",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Gen"
  },
  {
    "label": "InPlaceTypeTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InPlaceTypeTag"
  },
  {
    "label": "InPlaceIndexTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "InPlaceIndexTag"
  },
  {
    "label": "in_place_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "in_place_t"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_UTILITY_UTILITY_H_ # define ABSL_UTILITY_UTILITY_H_ # include<cstddef> # include<cstdlib> # include<tuple> # include<utility> # include \" absl / base / config . h \" # include \" absl / base / internal / inline_variable . h \" # include \" absl / base / internal / invoke . h \" # include \" absl / meta / type_traits . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<T,T . . . Ints> struct integer_sequence { using value_type = T ; size_t)",
    "insertText": "size()"
  },
  {
    "label": "Ints()",
    "kind": "Method",
    "detail": "Function (} } ; template<size_t . . . Ints> using index_sequence = integer_sequence<size_t,Ints . . .> ; namespace utility_internal { template<Seq,size_t SeqSize,size_t Rem> struct Extend ; template<T,T . . . Ints,size_t SeqSize> struct Extend<integer_sequence<T,Ints . . .>,SeqSize,0> { using type = integer_sequence<T,)",
    "insertText": "Ints(Ints + SeqSize)"
  },
  {
    "label": "InPlaceTypeTag()",
    "kind": "Method",
    "detail": "Function (} ; template<T,size_t N> struct Gen { using type = Extend<Gen<T,N / 2>::type,N / 2,N % 2>::type ; } ; template<T> struct Gen<T,0> { using type = integer_sequence<T> ; } ; template<T> struct InPlaceTypeTag {)",
    "insertText": "InPlaceTypeTag()"
  },
  {
    "label": "InPlaceTypeTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InPlaceTypeTag(const InPlaceTypeTag&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InPlaceTypeTag&)",
    "insertText": "operator(const InPlaceTypeTag&)"
  },
  {
    "label": "InPlaceIndexTag()",
    "kind": "Method",
    "detail": "Function (} ; template<size_t I> struct InPlaceIndexTag {)",
    "insertText": "InPlaceIndexTag()"
  },
  {
    "label": "InPlaceIndexTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InPlaceIndexTag(const InPlaceIndexTag&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InPlaceIndexTag&)",
    "insertText": "operator(const InPlaceIndexTag&)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} ; } template<T,T N> using make_integer_sequence = utility_internal::Gen<T,N>::type ; template<size_t N> using make_index_sequence = make_integer_sequence<size_t,N> ; template<. . . Ts> using index_sequence_for = make_index_sequence<)",
    "insertText": "sizeof(Ts)"
  },
  {
    "label": "ABSL_INTERNAL_INLINE_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (# ifdef ABSL_USES_STD_OPTIONAL using std::in_place_t ; using std::in_place ; # else struct in_place_t { } ;)",
    "insertText": "ABSL_INTERNAL_INLINE_CONSTEXPR(in_place_t, in_place, {})"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(ABSL_USES_STD_ANY) || defined(ABSL_USES_STD_VARIANT)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using std::in_place_type_t ; # else template<T> using in_place_type_t =)",
    "insertText": "void(*)(utility_internal::InPlaceTypeTag<T>)"
  },
  {
    "label": "in_place_type()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "in_place_type(utility_internal::InPlaceTypeTag<T>)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef ABSL_USES_STD_VARIANT using std::in_place_index ; using std::in_place_index_t ; # else template<size_t I> using in_place_index_t =)",
    "insertText": "void(*)(utility_internal::InPlaceIndexTag<I>)"
  },
  {
    "label": "in_place_index()",
    "kind": "Method",
    "detail": "Function (template<size_t I> void)",
    "insertText": "in_place_index(utility_internal::InPlaceIndexTag<I>)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (} # endif template<T> absl::remove_reference_t<T>&&)",
    "insertText": "move(T&& t)"
  },
  {
    "label": "forward()",
    "kind": "Method",
    "detail": "Function (} template<T> T&&)",
    "insertText": "forward(absl::remove_reference_t<T>& t)"
  },
  {
    "label": "apply_helper()",
    "kind": "Method",
    "detail": "Function (} namespace utility_internal { template<Functor,Tuple,std::size_t . . . Indexes> auto)",
    "insertText": "apply_helper(Functor&& functor, Tuple&& t, index_sequence<Indexes...>) -> decltype(absl::base_internal::invoke( absl::forward<Functor>(functor), std::get<Indexes>(absl::forward<Tuple>(t))...))"
  },
  {
    "label": "apply()",
    "kind": "Method",
    "detail": "Function (} } template<Functor,Tuple> auto)",
    "insertText": "apply(Functor&& functor, Tuple&& t) -> decltype(utility_internal::apply_helper( absl::forward<Functor>(functor), absl::forward<Tuple>(t), absl::make_index_sequence<std::tuple_size< typename std::remove_reference<Tuple>::type>::value>{}))"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (} template<T,U = T> T)",
    "insertText": "exchange(T& obj, U&& new_value)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (T old_value =)",
    "insertText": "move(obj)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (obj = absl::forward<)",
    "insertText": "U(new_value)"
  },
  {
    "label": "make_from_tuple()",
    "kind": "Method",
    "detail": "Function (} } template<T,Tuple> T)",
    "insertText": "make_from_tuple(Tuple&& tup)"
  }
]