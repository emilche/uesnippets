[
  {
    "label": "string_VkResult()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifdef __cplusplus # include<string> # endif # include<vulkan / vulkan . h> const char*)",
    "insertText": "string_VkResult(VkResult input_value)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (std::string ret ; int index = 0 ;)",
    "insertText": "while(input_value)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkAccessFlagBits(static_cast<VkAccessFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkAccessFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkImageAspectFlagBits(static_cast<VkImageAspectFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkImageAspectFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkFormatFeatureFlagBits(static_cast<VkFormatFeatureFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkFormatFeatureFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkImageCreateFlagBits(static_cast<VkImageCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkImageCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSampleCountFlagBits(static_cast<VkSampleCountFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSampleCountFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkImageUsageFlagBits(static_cast<VkImageUsageFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkImageUsageFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkInstanceCreateFlagBits(static_cast<VkInstanceCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkInstanceCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkMemoryHeapFlagBits(static_cast<VkMemoryHeapFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkMemoryHeapFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkMemoryPropertyFlagBits(static_cast<VkMemoryPropertyFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkMemoryPropertyFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkQueueFlagBits(static_cast<VkQueueFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkQueueFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDeviceQueueCreateFlagBits(static_cast<VkDeviceQueueCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDeviceQueueCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineStageFlagBits(static_cast<VkPipelineStageFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineStageFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkMemoryMapFlagBits(static_cast<VkMemoryMapFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkMemoryMapFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSparseMemoryBindFlagBits(static_cast<VkSparseMemoryBindFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSparseMemoryBindFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSparseImageFormatFlagBits(static_cast<VkSparseImageFormatFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSparseImageFormatFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkFenceCreateFlagBits(static_cast<VkFenceCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkFenceCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkEventCreateFlagBits(static_cast<VkEventCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkEventCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkQueryPipelineStatisticFlagBits(static_cast<VkQueryPipelineStatisticFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkQueryPipelineStatisticFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkQueryResultFlagBits(static_cast<VkQueryResultFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkQueryResultFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkBufferCreateFlagBits(static_cast<VkBufferCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkBufferCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkBufferUsageFlagBits(static_cast<VkBufferUsageFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkBufferUsageFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkImageViewCreateFlagBits(static_cast<VkImageViewCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkImageViewCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineCacheCreateFlagBits(static_cast<VkPipelineCacheCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineCacheCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkColorComponentFlagBits(static_cast<VkColorComponentFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkColorComponentFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineCreateFlagBits(static_cast<VkPipelineCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineShaderStageCreateFlagBits(static_cast<VkPipelineShaderStageCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineShaderStageCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkShaderStageFlagBits(static_cast<VkShaderStageFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkShaderStageFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkCullModeFlagBits(static_cast<VkCullModeFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkCullModeFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineDepthStencilStateCreateFlagBits(static_cast<VkPipelineDepthStencilStateCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineDepthStencilStateCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineColorBlendStateCreateFlagBits(static_cast<VkPipelineColorBlendStateCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineColorBlendStateCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineLayoutCreateFlagBits(static_cast<VkPipelineLayoutCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineLayoutCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSamplerCreateFlagBits(static_cast<VkSamplerCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSamplerCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDescriptorPoolCreateFlagBits(static_cast<VkDescriptorPoolCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDescriptorPoolCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDescriptorSetLayoutCreateFlagBits(static_cast<VkDescriptorSetLayoutCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDescriptorSetLayoutCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkAttachmentDescriptionFlagBits(static_cast<VkAttachmentDescriptionFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkAttachmentDescriptionFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDependencyFlagBits(static_cast<VkDependencyFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDependencyFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkFramebufferCreateFlagBits(static_cast<VkFramebufferCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkFramebufferCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkRenderPassCreateFlagBits(static_cast<VkRenderPassCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkRenderPassCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSubpassDescriptionFlagBits(static_cast<VkSubpassDescriptionFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSubpassDescriptionFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkCommandPoolCreateFlagBits(static_cast<VkCommandPoolCreateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkCommandPoolCreateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkCommandPoolResetFlagBits(static_cast<VkCommandPoolResetFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkCommandPoolResetFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkCommandBufferUsageFlagBits(static_cast<VkCommandBufferUsageFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkCommandBufferUsageFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkQueryControlFlagBits(static_cast<VkQueryControlFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkQueryControlFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkCommandBufferResetFlagBits(static_cast<VkCommandBufferResetFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkCommandBufferResetFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkStencilFaceFlagBits(static_cast<VkStencilFaceFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkStencilFaceFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSubgroupFeatureFlagBits(static_cast<VkSubgroupFeatureFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSubgroupFeatureFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPeerMemoryFeatureFlagBits(static_cast<VkPeerMemoryFeatureFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPeerMemoryFeatureFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkMemoryAllocateFlagBits(static_cast<VkMemoryAllocateFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkMemoryAllocateFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalMemoryHandleTypeFlagBits(static_cast<VkExternalMemoryHandleTypeFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalMemoryHandleTypeFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalMemoryFeatureFlagBits(static_cast<VkExternalMemoryFeatureFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalMemoryFeatureFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalFenceHandleTypeFlagBits(static_cast<VkExternalFenceHandleTypeFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalFenceHandleTypeFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalFenceFeatureFlagBits(static_cast<VkExternalFenceFeatureFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalFenceFeatureFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkFenceImportFlagBits(static_cast<VkFenceImportFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkFenceImportFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSemaphoreImportFlagBits(static_cast<VkSemaphoreImportFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSemaphoreImportFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalSemaphoreHandleTypeFlagBits(static_cast<VkExternalSemaphoreHandleTypeFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalSemaphoreHandleTypeFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalSemaphoreFeatureFlagBits(static_cast<VkExternalSemaphoreFeatureFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalSemaphoreFeatureFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkResolveModeFlagBits(static_cast<VkResolveModeFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkResolveModeFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDescriptorBindingFlagBits(static_cast<VkDescriptorBindingFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDescriptorBindingFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSemaphoreWaitFlagBits(static_cast<VkSemaphoreWaitFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSemaphoreWaitFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineCreationFeedbackFlagBits(static_cast<VkPipelineCreationFeedbackFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineCreationFeedbackFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkToolPurposeFlagBits(static_cast<VkToolPurposeFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkToolPurposeFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineStageFlagBits2(static_cast<uint64_t>(1ULL << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineStageFlags2(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkAccessFlagBits2(static_cast<uint64_t>(1ULL << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkAccessFlags2(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSubmitFlagBits(static_cast<VkSubmitFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSubmitFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkRenderingFlagBits(static_cast<VkRenderingFlagBits>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkRenderingFlags(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkFormatFeatureFlagBits2(static_cast<uint64_t>(1ULL << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkFormatFeatureFlags2(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSurfaceTransformFlagBitsKHR(static_cast<VkSurfaceTransformFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSurfaceTransformFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkCompositeAlphaFlagBitsKHR(static_cast<VkCompositeAlphaFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkCompositeAlphaFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSwapchainCreateFlagBitsKHR(static_cast<VkSwapchainCreateFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSwapchainCreateFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDeviceGroupPresentModeFlagBitsKHR(static_cast<VkDeviceGroupPresentModeFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDeviceGroupPresentModeFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDisplayPlaneAlphaFlagBitsKHR(static_cast<VkDisplayPlaneAlphaFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDisplayPlaneAlphaFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoCodecOperationFlagBitsKHR(static_cast<VkVideoCodecOperationFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoCodecOperationFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoChromaSubsamplingFlagBitsKHR(static_cast<VkVideoChromaSubsamplingFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoChromaSubsamplingFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoComponentBitDepthFlagBitsKHR(static_cast<VkVideoComponentBitDepthFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoComponentBitDepthFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoCapabilityFlagBitsKHR(static_cast<VkVideoCapabilityFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoCapabilityFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoSessionCreateFlagBitsKHR(static_cast<VkVideoSessionCreateFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoSessionCreateFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoCodingControlFlagBitsKHR(static_cast<VkVideoCodingControlFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoCodingControlFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoDecodeCapabilityFlagBitsKHR(static_cast<VkVideoDecodeCapabilityFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoDecodeCapabilityFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoDecodeUsageFlagBitsKHR(static_cast<VkVideoDecodeUsageFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoDecodeUsageFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH264CapabilityFlagBitsKHR(static_cast<VkVideoEncodeH264CapabilityFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH264CapabilityFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH264StdFlagBitsKHR(static_cast<VkVideoEncodeH264StdFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH264StdFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH264RateControlFlagBitsKHR(static_cast<VkVideoEncodeH264RateControlFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH264RateControlFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH265CapabilityFlagBitsKHR(static_cast<VkVideoEncodeH265CapabilityFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH265CapabilityFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH265StdFlagBitsKHR(static_cast<VkVideoEncodeH265StdFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH265StdFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH265CtbSizeFlagBitsKHR(static_cast<VkVideoEncodeH265CtbSizeFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH265CtbSizeFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH265TransformBlockSizeFlagBitsKHR(static_cast<VkVideoEncodeH265TransformBlockSizeFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH265TransformBlockSizeFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeH265RateControlFlagBitsKHR(static_cast<VkVideoEncodeH265RateControlFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeH265RateControlFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoDecodeH264PictureLayoutFlagBitsKHR(static_cast<VkVideoDecodeH264PictureLayoutFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoDecodeH264PictureLayoutFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPerformanceCounterDescriptionFlagBitsKHR(static_cast<VkPerformanceCounterDescriptionFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPerformanceCounterDescriptionFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkMemoryUnmapFlagBitsKHR(static_cast<VkMemoryUnmapFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkMemoryUnmapFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeCapabilityFlagBitsKHR(static_cast<VkVideoEncodeCapabilityFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeCapabilityFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeRateControlModeFlagBitsKHR(static_cast<VkVideoEncodeRateControlModeFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeRateControlModeFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeFeedbackFlagBitsKHR(static_cast<VkVideoEncodeFeedbackFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeFeedbackFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeUsageFlagBitsKHR(static_cast<VkVideoEncodeUsageFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeUsageFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkVideoEncodeContentFlagBitsKHR(static_cast<VkVideoEncodeContentFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkVideoEncodeContentFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPipelineCreateFlagBits2KHR(static_cast<uint64_t>(1ULL << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPipelineCreateFlags2KHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkBufferUsageFlagBits2KHR(static_cast<uint64_t>(1ULL << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkBufferUsageFlags2KHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDebugReportFlagBitsEXT(static_cast<VkDebugReportFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDebugReportFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalMemoryHandleTypeFlagBitsNV(static_cast<VkExternalMemoryHandleTypeFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalMemoryHandleTypeFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExternalMemoryFeatureFlagBitsNV(static_cast<VkExternalMemoryFeatureFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExternalMemoryFeatureFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkConditionalRenderingFlagBitsEXT(static_cast<VkConditionalRenderingFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkConditionalRenderingFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkSurfaceCounterFlagBitsEXT(static_cast<VkSurfaceCounterFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkSurfaceCounterFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDebugUtilsMessageSeverityFlagBitsEXT(static_cast<VkDebugUtilsMessageSeverityFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDebugUtilsMessageSeverityFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDebugUtilsMessageTypeFlagBitsEXT(static_cast<VkDebugUtilsMessageTypeFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDebugUtilsMessageTypeFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkGeometryFlagBitsKHR(static_cast<VkGeometryFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkGeometryFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkGeometryInstanceFlagBitsKHR(static_cast<VkGeometryInstanceFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkGeometryInstanceFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkBuildAccelerationStructureFlagBitsKHR(static_cast<VkBuildAccelerationStructureFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkBuildAccelerationStructureFlagsKHR(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkHostImageCopyFlagBitsEXT(static_cast<VkHostImageCopyFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkHostImageCopyFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPresentScalingFlagBitsEXT(static_cast<VkPresentScalingFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPresentScalingFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPresentGravityFlagBitsEXT(static_cast<VkPresentGravityFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPresentGravityFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkIndirectStateFlagBitsNV(static_cast<VkIndirectStateFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkIndirectStateFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkIndirectCommandsLayoutUsageFlagBitsNV(static_cast<VkIndirectCommandsLayoutUsageFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkIndirectCommandsLayoutUsageFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDeviceDiagnosticsConfigFlagBitsNV(static_cast<VkDeviceDiagnosticsConfigFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDeviceDiagnosticsConfigFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkExportMetalObjectTypeFlagBitsEXT(static_cast<VkExportMetalObjectTypeFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkExportMetalObjectTypeFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkGraphicsPipelineLibraryFlagBitsEXT(static_cast<VkGraphicsPipelineLibraryFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkGraphicsPipelineLibraryFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkImageCompressionFlagBitsEXT(static_cast<VkImageCompressionFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkImageCompressionFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkImageCompressionFixedRateFlagBitsEXT(static_cast<VkImageCompressionFixedRateFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkImageCompressionFixedRateFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkDeviceAddressBindingFlagBitsEXT(static_cast<VkDeviceAddressBindingFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkDeviceAddressBindingFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkImageConstraintsInfoFlagBitsFUCHSIA(static_cast<VkImageConstraintsInfoFlagBitsFUCHSIA>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkImageConstraintsInfoFlagsFUCHSIA(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkFrameBoundaryFlagBitsEXT(static_cast<VkFrameBoundaryFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkFrameBoundaryFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkBuildMicromapFlagBitsEXT(static_cast<VkBuildMicromapFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkBuildMicromapFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkMicromapCreateFlagBitsEXT(static_cast<VkMicromapCreateFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkMicromapCreateFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkPhysicalDeviceSchedulingControlsFlagBitsARM(static_cast<uint64_t>(1ULL << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkPhysicalDeviceSchedulingControlsFlagsARM(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkMemoryDecompressionMethodFlagBitsNV(static_cast<uint64_t>(1ULL << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkMemoryDecompressionMethodFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkOpticalFlowGridSizeFlagBitsNV(static_cast<VkOpticalFlowGridSizeFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkOpticalFlowGridSizeFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkOpticalFlowUsageFlagBitsNV(static_cast<VkOpticalFlowUsageFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkOpticalFlowUsageFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkOpticalFlowSessionCreateFlagBitsNV(static_cast<VkOpticalFlowSessionCreateFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkOpticalFlowSessionCreateFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkOpticalFlowExecuteFlagBitsNV(static_cast<VkOpticalFlowExecuteFlagBitsNV>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkOpticalFlowExecuteFlagsNV(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkShaderCreateFlagBitsEXT(static_cast<VkShaderCreateFlagBitsEXT>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkShaderCreateFlagsEXT(0)\")"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (ret .)",
    "insertText": "append(string_VkAccelerationStructureCreateFlagBitsKHR(static_cast<VkAccelerationStructureCreateFlagBitsKHR>(1U << index)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} + + index ; input_value>> = 1 ; })",
    "insertText": "if(ret.empty()) ret.append(\"VkAccelerationStructureCreateFlagsKHR(0)\")"
  }
]