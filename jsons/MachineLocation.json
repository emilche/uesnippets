[
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "MachineLocation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineLocation"
  },
  {
    "label": "MachineLocation()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MACHINELOCATION_H # define LLVM_MC_MACHINELOCATION_H # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class MCSymbol ; class MachineLocation { private : bool IsRegister ; unsigned Register ; int Offset ; public : enum : uint32_t { VirtualFP = ~ 0 U } ;)",
    "insertText": "MachineLocation() : IsRegister(false), Register(0), Offset(0)"
  },
  {
    "label": "MachineLocation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MachineLocation(unsigned R) : IsRegister(true), Register(R), Offset(0)"
  },
  {
    "label": "MachineLocation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MachineLocation(unsigned R, int O) : IsRegister(false), Register(R), Offset(O)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const MachineLocation &Other)"
  },
  {
    "label": "setRegister()",
    "kind": "Method",
    "detail": "Function (IsRegister = Is ; } void)",
    "insertText": "setRegister(unsigned R)"
  },
  {
    "label": "setOffset()",
    "kind": "Method",
    "detail": "Function (Register = R ; } void)",
    "insertText": "setOffset(int O)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (Offset = O ; } void)",
    "insertText": "set(unsigned R)"
  },
  {
    "label": "set()",
    "kind": "Method",
    "detail": "Function (IsRegister = true ; Register = R ; Offset = 0 ; } void)",
    "insertText": "set(unsigned R, int O)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (IsRegister = false ; Register = R ; Offset = O ; } # ifndef NDEBUG void)",
    "insertText": "dump()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif } ; bool)",
    "insertText": "operator(const MachineLocation &LHS, const MachineLocation &RHS)"
  }
]