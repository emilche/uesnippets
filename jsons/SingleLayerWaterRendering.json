[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FSingleLayerWaterTileClassification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleLayerWaterTileClassification"
  },
  {
    "label": "FSingleLayerWaterPrePassResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleLayerWaterPrePassResult"
  },
  {
    "label": "FSceneWithoutWaterTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneWithoutWaterTextures"
  },
  {
    "label": "FView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FView"
  },
  {
    "label": "FWaterTileVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaterTileVS"
  },
  {
    "label": "ShouldRenderSingleLayerWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSingleLayerWater(TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "ShouldRenderSingleLayerWaterSkippedRenderEditorNotification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSingleLayerWaterSkippedRenderEditorNotification(TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "ShouldRenderSingleLayerWaterDepthPrepass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSingleLayerWaterDepthPrepass(TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "ShouldUseBilinearSamplerForDepthWithoutSingleLayerWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseBilinearSamplerForDepthWithoutSingleLayerWater(EPixelFormat DepthTextureFormat)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "VertexShader()",
    "kind": "Method",
    "detail": "Function (TShaderMapRef<FWaterTileVS>)",
    "insertText": "VertexShader(GlobalShaderMap, PermutationVector)"
  }
]