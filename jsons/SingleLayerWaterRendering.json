[
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FSingleLayerWaterTileClassification",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleLayerWaterTileClassification"
  },
  {
    "label": "FSingleLayerWaterPrePassResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSingleLayerWaterPrePassResult"
  },
  {
    "label": "FSceneWithoutWaterTextures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneWithoutWaterTextures"
  },
  {
    "label": "FView",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FView"
  },
  {
    "label": "FWaterTileVS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWaterTileVS"
  },
  {
    "label": "ShouldRenderSingleLayerWater()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RenderGraph . h \" # include \" PixelShaderUtils . h \" # include \" ScreenSpaceRayTracing . h \" # include \" SingleLayerWaterDefinitions . h \" # include \" Froxel / Froxel . h \" class FViewInfo ; struct FSingleLayerWaterTileClassification { FTiledReflection TiledReflection = FTiledReflection { nullptr,nullptr,nullptr,SLW_TILE_SIZE_XY } ; FRDGBufferRef TileMaskBuffer = nullptr ; FIntPoint TiledViewRes = FIntPoint { 0,0 } ; } ; struct FSingleLayerWaterPrePassResult { Froxel::FRenderer Froxels ; FRDGTextureMSAA DepthPrepassTexture ; TArray<FSingleLayerWaterTileClassification> ViewTileClassification ; } ; struct FSceneWithoutWaterTextures { struct FView { FIntRect ViewRect ; FVector4f MinMaxUV ; } ; FRDGTextureRef SeparatedMainDirLightTexture = nullptr ; FRDGTextureRef ColorTexture = nullptr ; FRDGTextureRef DepthTexture = nullptr ; TArray<FView> Views ; float RefractionDownsampleFactor = 1 . 0 f ; } ; bool)",
    "insertText": "ShouldRenderSingleLayerWater(TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "ShouldRenderSingleLayerWaterSkippedRenderEditorNotification()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSingleLayerWaterSkippedRenderEditorNotification(TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "ShouldRenderSingleLayerWaterDepthPrepass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSingleLayerWaterDepthPrepass(TArrayView<const FViewInfo> Views)"
  },
  {
    "label": "ShouldUseBilinearSamplerForDepthWithoutSingleLayerWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseBilinearSamplerForDepthWithoutSingleLayerWater(EPixelFormat DepthTextureFormat)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FWaterTileVS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FWaterTileVS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FWaterTileVS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (using FPermutationDomain = TShaderPermutationDomain<> ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER_STRUCT_REF(FViewUniformShaderParameters, ViewUniformBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, TileListData) END_SHADER_PARAMETER_STRUCT() static FPermutationDomain RemapPermutation(FPermutationDomain PermutationVector)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ModifyCompilationEnvironment(const FGlobalShaderPermutationParameters& Parameters, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "SingleLayerWaterAddTiledFullscreenPass()",
    "kind": "Method",
    "detail": "Function (} ; template<TPixelShaderClass,TPassParameters> void)",
    "insertText": "SingleLayerWaterAddTiledFullscreenPass(FRDGBuilder& GraphBuilder, const FGlobalShaderMap* GlobalShaderMap, FRDGEventName&& PassName, TShaderRefBase<TPixelShaderClass, FShaderMapPointerTable> PixelShader, TPassParameters* PassParameters, const TUniformBufferRef<FViewUniformShaderParameters>& ViewUniformBuffer, const FIntRect& Viewport, FTiledReflection* TiledScreenSpaceReflection = nullptr, FRHIBlendState* BlendState = nullptr, FRHIRasterizerState* RasterizerState = nullptr, FRHIDepthStencilState* DepthStencilState = nullptr, uint32 StencilRef = 0)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (PassParameters -> IndirectDrawParameter = TiledScreenSpaceReflection ? TiledScreenSpaceReflection -> DrawIndirectParametersBuffer : nullptr ; PassParameters -> VS . ViewUniformBuffer = ViewUniformBuffer ; PassParameters -> VS . TileListData = TiledScreenSpaceReflection ? TiledScreenSpaceReflection -> TileListDataBufferSRV : nullptr ;)",
    "insertText": "ValidateShaderParameters(PixelShader, PassParameters->PS)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(PixelShader, &PassParameters->PS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bRunTiled = TiledScreenSpaceReflection ! = nullptr ;)",
    "insertText": "if(bRunTiled)"
  },
  {
    "label": "VertexShader()",
    "kind": "Method",
    "detail": "Function (FWaterTileVS::FPermutationDomain PermutationVector ; TShaderMapRef<FWaterTileVS>)",
    "insertText": "VertexShader(GlobalShaderMap, PermutationVector)"
  },
  {
    "label": "ValidateShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateShaderParameters(VertexShader, PassParameters->VS)"
  },
  {
    "label": "ClearUnusedGraphResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearUnusedGraphResources(VertexShader, &PassParameters->VS)"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), PassParameters, ERDGPassFlags::Raster, [PassParameters, GlobalShaderMap, Viewport, TiledScreenSpaceReflection, VertexShader, PixelShader, BlendState, RasterizerState, DepthStencilState, StencilRef](FRDGAsyncTask, FRHICommandList& RHICmdList) { RHICmdList.SetViewport(Viewport.Min.X, Viewport.Min.Y, 0.0f, Viewport.Max.X, Viewport.Max.Y, 1.0f); FGraphicsPipelineStateInitializer GraphicsPSOInit; FPixelShaderUtils::InitFullscreenPipelineState(RHICmdList, GlobalShaderMap, PixelShader, GraphicsPSOInit); GraphicsPSOInit.PrimitiveType = GRHISupportsRectTopology ? PT_RectList : PT_TriangleList; GraphicsPSOInit.BlendState = BlendState ? BlendState : GraphicsPSOInit.BlendState; GraphicsPSOInit.RasterizerState = RasterizerState ? RasterizerState : GraphicsPSOInit.RasterizerState; GraphicsPSOInit.DepthStencilState = DepthStencilState ? DepthStencilState : GraphicsPSOInit.DepthStencilState; GraphicsPSOInit.BoundShaderState.VertexDeclarationRHI = GEmptyVertexDeclaration.VertexDeclarationRHI; GraphicsPSOInit.BoundShaderState.VertexShaderRHI = VertexShader.GetVertexShader(); GraphicsPSOInit.BoundShaderState.PixelShaderRHI = PixelShader.GetPixelShader(); SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit, StencilRef); SetShaderParameters(RHICmdList, VertexShader, VertexShader.GetVertexShader(), PassParameters->VS); SetShaderParameters(RHICmdList, PixelShader, PixelShader.GetPixelShader(), PassParameters->PS); RHICmdList.DrawPrimitiveIndirect(PassParameters->IndirectDrawParameter->GetIndirectRHICallBuffer(), 0); })"
  },
  {
    "label": "AddPass()",
    "kind": "Method",
    "detail": "Function (} else { GraphBuilder .)",
    "insertText": "AddPass(Forward<FRDGEventName>(PassName), PassParameters, ERDGPassFlags::Raster, [PassParameters, GlobalShaderMap, Viewport, PixelShader, BlendState, RasterizerState, DepthStencilState, StencilRef](FRDGAsyncTask, FRHICommandList& RHICmdList) { RHICmdList.SetViewport(Viewport.Min.X, Viewport.Min.Y, 0.0f, Viewport.Max.X, Viewport.Max.Y, 1.0f); FGraphicsPipelineStateInitializer GraphicsPSOInit; FPixelShaderUtils::InitFullscreenPipelineState(RHICmdList, GlobalShaderMap, PixelShader, GraphicsPSOInit); GraphicsPSOInit.BlendState = BlendState ? BlendState : GraphicsPSOInit.BlendState; GraphicsPSOInit.RasterizerState = RasterizerState ? RasterizerState : GraphicsPSOInit.RasterizerState; GraphicsPSOInit.DepthStencilState = DepthStencilState ? DepthStencilState : GraphicsPSOInit.DepthStencilState; SetGraphicsPipelineState(RHICmdList, GraphicsPSOInit, StencilRef); SetShaderParameters(RHICmdList, PixelShader, PixelShader.GetPixelShader(), PassParameters->PS); FPixelShaderUtils::DrawFullscreenTriangle(RHICmdList); })"
  }
]