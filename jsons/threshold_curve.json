[
  {
    "label": "ThresholdCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThresholdCurve"
  },
  {
    "label": "Point",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Point"
  },
  {
    "label": "Point()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_UTIL_THRESHOLD_CURVE_H_ # define MODULES_AUDIO_CODING_AUDIO_NETWORK_ADAPTOR_UTIL_THRESHOLD_CURVE_H_ # include \" rtc_base / checks . h \" namespace webrtc { class ThresholdCurve { public : struct Point {)",
    "insertText": "Point(float x, float y) : x(x), y(y)"
  },
  {
    "label": "ThresholdCurve()",
    "kind": "Method",
    "detail": "Function (} float x ; float y ; } ;)",
    "insertText": "ThresholdCurve(const Point& left, const Point& right) : a(GetPoint(left, right, true)), b(GetPoint(left, right, false)), slope(b.x - a.x == 0.0f ? 0.0f : (b.y - a.y) / (b.x - a.x)), offset(a.y - slope * a.x)"
  },
  {
    "label": "ThresholdCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ThresholdCurve(float a_x, float a_y, float b_x, float b_y) : ThresholdCurve(Point{a_x, a_y}, Point{b_x, b_y})"
  },
  {
    "label": "IsBelowCurve()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBelowCurve(const Point& p)"
  },
  {
    "label": "GetPoint()",
    "kind": "Method",
    "detail": "Function (} private : const Point&)",
    "insertText": "GetPoint(const Point& left, const Point& right, bool is_for_left)"
  },
  {
    "label": "RTC_DCHECK_LE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LE(left.x, right.x)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_GE(left.y, right.y)"
  }
]