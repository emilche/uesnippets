[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__TBB_machine_H) || defined(__TBB_machine_gcc_itsx_H)"
  },
  {
    "label": "__TBB_STRINGIZE_INTERNAL()",
    "kind": "Method",
    "detail": "Function (use public TBB headers instead . # endif # define __TBB_machine_gcc_itsx_H # define __TBB_OP_XACQUIRE 0 xF2 # define __TBB_OP_XRELEASE 0 xF3 # define __TBB_OP_LOCK 0 xF0 # define)",
    "insertText": "__TBB_STRINGIZE_INTERNAL(arg) #arg #define __TBB_STRINGIZE(arg) __TBB_STRINGIZE_INTERNAL(arg) #ifdef __TBB_x86_64 #define __TBB_r_out \"=r\" #else #define __TBB_r_out \"=q\" #endif inline static uint8_t __TBB_machine_try_lock_elided( volatile uint8_t* lk)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (uint8_t value = 1 ; __asm__)",
    "insertText": "volatile(\".byte \" __TBB_STRINGIZE(__TBB_OP_XACQUIRE)\"; lock; xchgb %0, %1;\" : __TBB_r_out(value), \"=m\"(*lk) : \"0\"(value), \"m\"(*lk) : \"memory\")"
  },
  {
    "label": "__TBB_machine_try_lock_elided_cancel()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_try_lock_elided_cancel()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "volatile(\"pause\\n\" : : : \"memory\")"
  },
  {
    "label": "__TBB_machine_unlock_elided()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_unlock_elided(volatile uint8_t* lk)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "volatile(\".byte \" __TBB_STRINGIZE(__TBB_OP_XRELEASE)\"; movb $0, %0\" : \"=m\"(*lk) : \"m\"(*lk) : \"memory\")"
  },
  {
    "label": "__TBB_machine_transaction_conflict_abort()",
    "kind": "Method",
    "detail": "Function (} # if __TBB_TSX_INTRINSICS_PRESENT # include<immintrin . h> # define __TBB_machine_is_in_transaction _xtest # define __TBB_machine_begin_transaction _xbegin # define __TBB_machine_end_transaction _xend # define)",
    "insertText": "__TBB_machine_transaction_conflict_abort() _xabort(0xff) #else inline static bool __TBB_machine_is_in_transaction()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (int8_t res = 0 ; # if __TBB_x86_32 __asm__)",
    "insertText": "volatile(\".byte 0x0F; .byte 0x01; .byte 0xD6;\\n\" \"setz %0\" : \"=q\"(res) : : \"memory\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (# else __asm__)",
    "insertText": "volatile(\".byte 0x0F; .byte 0x01; .byte 0xD6;\\n\" \"setz %0\" : \"=r\"(res) : : \"memory\")"
  },
  {
    "label": "__TBB_machine_begin_transaction()",
    "kind": "Method",
    "detail": "Function (# endif return res = = 0 ; } uint32_t)",
    "insertText": "__TBB_machine_begin_transaction()"
  },
  {
    "label": "uint32_t()",
    "kind": "Method",
    "detail": "Function (uint32_t res = ~)",
    "insertText": "uint32_t(0)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "volatile(\"1: .byte 0xC7; .byte 0xF8;\\n\" \" .long 2f-1b-6\\n\" \" jmp 3f\\n\" \"2: movl %%eax,%0\\n\" \"3:\" :\"=r\"(res):\"0\"(res):\"memory\",\"%eax\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "volatile(\".byte 0x0F; .byte 0x01; .byte 0xD5\" :::\"memory\")"
  },
  {
    "label": "__TBB_machine_transaction_conflict_abort()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "__TBB_machine_transaction_conflict_abort()"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "volatile(\".byte 0xC6; .byte 0xF8; .byte 0xFF\" :::\"memory\")"
  }
]