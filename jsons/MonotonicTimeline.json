[
  {
    "label": "FMonotonicTimelineDefaultSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMonotonicTimelineDefaultSettings"
  },
  {
    "label": "IEditableTimeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IEditableTimeline"
  },
  {
    "label": "TMonotonicTimeline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMonotonicTimeline"
  },
  {
    "label": "FEnumerateAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEnumerateAsyncTask"
  },
  {
    "label": "FEnumerationStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnumerationStackEntry"
  },
  {
    "label": "FStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackEntry"
  },
  {
    "label": "FOutputEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOutputEvent"
  },
  {
    "label": "FIterationState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterationState"
  },
  {
    "label": "FFindBestMatchEventInParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFindBestMatchEventInParams"
  },
  {
    "label": "FFindBestMatchEventOutParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFindBestMatchEventOutParams"
  },
  {
    "label": "DetailLevelResolution()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / QueuedThreadPool . h \" # include \" Common / PagedArray . h \" # include \" Model / AsyncEnumerateTask . h \" # include \" Model / MonotonicTimelineData . h \" # include \" TraceServices / Containers / Timelines . h \" namespace TraceServices { struct FMonotonicTimelineDefaultSettings { enum { MaxDepth = 1 0 2 4,ScopeEntriesPageSize = 6 5 5 3 6,EventsPageSize = 6 5 5 3 6,DetailLevelsCount = 6,} ; double)",
    "insertText": "DetailLevelResolution(int32 Index)"
  },
  {
    "label": "IEditableTimeline()",
    "kind": "Method",
    "detail": "Function (const double DetailLevels [ DetailLevelsCount ] = { 0 . 0,0 . 0 0 0 1,0 . 0 0 1,0 . 0 0 8,0 . 0 4,0 . 2 } ; return DetailLevels [ Index ] ; } } ; template<InEventType> class IEditableTimeline { public : ~)",
    "insertText": "IEditableTimeline()"
  },
  {
    "label": "AppendBeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendBeginEvent(double StartTime, const InEventType& Event)"
  },
  {
    "label": "AppendEndEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendEndEvent(double EndTime)"
  },
  {
    "label": "TMonotonicTimeline()",
    "kind": "Method",
    "detail": "Function (} ; template<InEventType,SettingsType = FMonotonicTimelineDefaultSettings> class TMonotonicTimeline : public ITimeline<InEventType>,public IEditableTimeline<InEventType> { class FEnumerateAsyncTask<InEventType,SettingsType> ; typedef FEventInfoStackEntry<InEventType,SettingsType> FEventInfoStackEntry ; typedef FDetailLevel<InEventType,SettingsType> FDetailLevel ; typedef FDetailLevelDepthState<InEventType> FDetailLevelDepthState ; typedef FEnumerateAsyncTask<InEventType,SettingsType> FEnumarateAsyncTask ; public : using EventType = InEventType ;)",
    "insertText": "TMonotonicTimeline(ILinearAllocator& InAllocator) : Allocator(InAllocator)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (DetailLevels .)",
    "insertText": "Emplace(Allocator, Resolution)"
  },
  {
    "label": "TMonotonicTimeline()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "TMonotonicTimeline()"
  },
  {
    "label": "AppendBeginEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendBeginEvent(double StartTime, const EventType& Event)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 CurrentDepth = DetailLevels [ 0 ] . InsertionState . CurrentDepth ;)",
    "insertText": "if(CurrentDepth >= SettingsType::MaxDepth)"
  },
  {
    "label": "AddScopeEntry()",
    "kind": "Method",
    "detail": "Function (+ + ExtraDepthEvents ; return ; })",
    "insertText": "AddScopeEntry(DetailLevels[0], StartTime, true)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(DetailLevels[0], Event)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FDetailLevelDepthState& Lod0DepthState = DetailLevels [ 0 ] . InsertionState . DepthStates [ CurrentDepth ] ; Lod0DepthState . EnterTime = StartTime ; Lod0DepthState . DominatingEvent = Event ;)",
    "insertText": "for(int32 DetailLevelIndex = 1; DetailLevelIndex < SettingsType::DetailLevelsCount; ++DetailLevelIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FDetailLevel& DetailLevel = DetailLevels [ DetailLevelIndex ] ; FDetailLevelDepthState& CurrentDepthState = DetailLevel . InsertionState . DepthStates [ CurrentDepth ] ;)",
    "insertText": "if(CurrentDepthState.PendingScopeEnterIndex < 0 || StartTime >= CurrentDepthState.EnterTime + DetailLevel.Resolution)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FDetailLevelDepthState& DepthState = DetailLevel . InsertionState . DepthStates [ Depth ] ;)",
    "insertText": "check(DepthState.PendingScopeEnterIndex >= 0)"
  },
  {
    "label": "AddScopeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScopeEntry(DetailLevel, DepthState.ExitTime, false)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (DepthState . PendingScopeEnterIndex = - 1 ; DepthState . PendingEventIndex = - 1 ; } } DetailLevel . InsertionState . PendingDepth = CurrentDepth ; uint64 EnterScopeIndex = DetailLevel . ScopeEntries .)",
    "insertText": "Num()"
  },
  {
    "label": "AddScopeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScopeEntry(DetailLevel, StartTime, true)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvent(DetailLevel, Event)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentDepthState . DominatingEventStartTime = StartTime ; CurrentDepthState . DominatingEventEndTime = StartTime ; CurrentDepthState . DominatingEventDuration = 0 . 0 ; CurrentDepthState . PendingScopeEnterIndex = EnterScopeIndex ; CurrentDepthState . PendingEventIndex = EventIndex ; CurrentDepthState . EnterTime = StartTime ; CurrentDepthState . DominatingEvent = Event ; } else)",
    "insertText": "if(CurrentDepth > DetailLevel.InsertionState.PendingDepth)"
  },
  {
    "label": "SetEvent()",
    "kind": "Method",
    "detail": "Function (DetailLevel . InsertionState . PendingDepth = CurrentDepth ; } DetailLevel .)",
    "insertText": "SetEvent(CurrentDepthState.PendingEventIndex, Event)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (- - ExtraDepthEvents ; return ; })",
    "insertText": "check(DetailLevels[0].InsertionState.CurrentDepth <= SettingsType::MaxDepth)"
  },
  {
    "label": "AddScopeEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddScopeEntry(DetailLevels[0], EndTime, false)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (int32 CurrentDepth = DetailLevels [ 0 ] . InsertionState . CurrentDepth ;)",
    "insertText": "check(CurrentDepth < SettingsType::MaxDepth)"
  },
  {
    "label": "UpdateDominatingEvent()",
    "kind": "Method",
    "detail": "Function (FDetailLevel& DetailLevel = DetailLevels [ DetailLevelIndex ] ; DetailLevel . InsertionState . DepthStates [ CurrentDepth ] . ExitTime = EndTime ;)",
    "insertText": "UpdateDominatingEvent(DetailLevel, CurrentDepth, EndTime)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FDetailLevelDepthState& CurrentDepthState = DetailLevel . InsertionState . DepthStates [ CurrentDepth ] ;)",
    "insertText": "check(CurrentDepthState.PendingScopeEnterIndex >= 0)"
  },
  {
    "label": "GetModCount()",
    "kind": "Method",
    "detail": "Function (DepthState . PendingScopeEnterIndex = - 1 ; DepthState . PendingEventIndex = - 1 ; } DetailLevel . InsertionState . PendingDepth = CurrentDepth - 1 ; } } + + ModCount ; } uint64)",
    "insertText": "GetModCount()"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (} const EventType&)",
    "insertText": "GetEvent(uint64 InIndex)"
  },
  {
    "label": "GetEndTime()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetEndTime()"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEventsDownSampled(double IntervalStart, double IntervalEnd, double Resolution, typename ITimeline<EventType>::EventCallback Callback)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 DetailLevelIndex = SettingsType::DetailLevelsCount - 1 ;)",
    "insertText": "for(; DetailLevelIndex > 0; --DetailLevelIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } const FDetailLevel& DetailLevel = DetailLevels [ DetailLevelIndex ] ;)",
    "insertText": "if(DetailLevel.ScopeEntries.Num() == 0)"
  },
  {
    "label": "GetPage()",
    "kind": "Method",
    "detail": "Function (- - FirstScopePageIndex ; } const FEventScopeEntryPage* ScopePage = DetailLevel . ScopeEntries .)",
    "insertText": "GetPage(FirstScopePageIndex)"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& EnumerationStackEntry = EventStack [ InitialStackIndex ] ; const FEventStackEntry& EventStackEntry = ScopePage -> InitialStack [ InitialStackIndex ] ; EnumerationStackEntry . StartTime = DetailLevel .)",
    "insertText": "GetScopeEntryTime(EventStackEntry.EnterScopeIndex)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (EnumerationStackEntry . Event = DetailLevel .)",
    "insertText": "GetEvent(EventStackEntry.EventIndex)"
  },
  {
    "label": "GetIteratorFromPage()",
    "kind": "Method",
    "detail": "Function (} auto ScopeEntryIterator = DetailLevel . ScopeEntries .)",
    "insertText": "GetIteratorFromPage(FirstScopePageIndex)"
  },
  {
    "label": "GetCurrentItem()",
    "kind": "Method",
    "detail": "Function (const FEventScopeEntry* ScopeEntry = ScopeEntryIterator .)",
    "insertText": "GetCurrentItem()"
  },
  {
    "label": "GetIteratorFromItem()",
    "kind": "Method",
    "detail": "Function (auto EventsIterator = DetailLevel . Events .)",
    "insertText": "GetIteratorFromItem(ScopePage->BeginEventIndex)"
  },
  {
    "label": "NextItem()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ CurrentStackDepth + + ] ; StackEntry . Event =* Event ; StackEntry . StartTime = - ScopeEntry -> Time ; Event = EventsIterator .)",
    "insertText": "NextItem()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(CurrentStackDepth > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(CurrentStackDepth == 1 && EventStack[0].StartTime > IntervalEnd)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ StackIndex ] ;)",
    "insertText": "if(Callback(true, StackEntry.StartTime, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ CurrentStackDepth + + ] ; StackEntry . Event =* Event ;)",
    "insertText": "if(Callback(true, -ScopeEntry->Time, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ - - CurrentStackDepth ] ;)",
    "insertText": "if(Callback(false, ScopeEntry->Time, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "GetCurrentPageIndex()",
    "kind": "Method",
    "detail": "Function (} bool bSearchEndTimeUsingPages = false ; uint64 LastPageIndex = ScopeEntryIterator .)",
    "insertText": "GetCurrentPageIndex()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (uint32 ExitDepth = 0 ;)",
    "insertText": "while(CurrentStackDepth > 0 && ScopeEntry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSearchEndTimeUsingPages = true ; break ; })",
    "insertText": "if(ScopeEntry->Time < 0.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + ExitDepth ; } else {)",
    "insertText": "if(ExitDepth == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bSearchEndTimeUsingPages)"
  },
  {
    "label": "GetCurrentPage()",
    "kind": "Method",
    "detail": "Function (const FEventScopeEntryPage* CurrentScopePage = ScopeEntryIterator .)",
    "insertText": "GetCurrentPage()"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (- - CurrentStackDepth ; EventType CurrentEvent = DetailLevel .)",
    "insertText": "GetEvent(CurrentScopePage->InitialStack[CurrentStackDepth].EventIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(CurrentScopePage != nullptr)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(CurrentStackDepth > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ - - CurrentStackDepth ] ;)",
    "insertText": "if(Callback(false, DetailLevel.InsertionState.LastTime, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "GetIteratorFromItem()",
    "kind": "Method",
    "detail": "Function (struct FEnumerationStackEntry { double EndTime ; EventType Event ; } ; auto ScopeEntryIterator = DetailLevel . ScopeEntries .)",
    "insertText": "GetIteratorFromItem(DetailLevel.ScopeEntries.Num() - 1)"
  },
  {
    "label": "GetIteratorFromItem()",
    "kind": "Method",
    "detail": "Function (auto EventsIterator = DetailLevel . Events .)",
    "insertText": "GetIteratorFromItem(DetailLevel.Events.Num() - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry EventStack [ SettingsType::MaxDepth ] ; int32 CurrentStackDepth = 0 ; const FEventScopeEntry* ScopeEntry = nullptr ;)",
    "insertText": "if(LastScopePageIndex > 0 && LastScopePageIndex < DetailLevel.ScopeEntries.NumPages())"
  },
  {
    "label": "GetIteratorFromPage()",
    "kind": "Method",
    "detail": "Function (ScopeEntryIterator = DetailLevel . ScopeEntries .)",
    "insertText": "GetIteratorFromPage(LastScopePageIndex)"
  },
  {
    "label": "GetPage()",
    "kind": "Method",
    "detail": "Function (const FEventScopeEntryPage* ScopePage = DetailLevel . ScopeEntries .)",
    "insertText": "GetPage(LastScopePageIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (CurrentStackDepth = ScopePage -> InitialStackCount ;)",
    "insertText": "for(int32 InitialStackIndex = 0; InitialStackIndex < CurrentStackDepth; ++InitialStackIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& EnumerationStackEntry = EventStack [ InitialStackIndex ] ; const FEventStackEntry& EventStackEntry = ScopePage -> InitialStack [ InitialStackIndex ] ; EnumerationStackEntry . EndTime = EventStackEntry . EndTime ;)",
    "insertText": "if(EnumerationStackEntry.EndTime < 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (auto PageIterator = ScopeEntryIterator ;)",
    "insertText": "while(const FEventScopeEntryPage* Page = PageIterator.NextPage())"
  },
  {
    "label": "PrevItem()",
    "kind": "Method",
    "detail": "Function (} ScopeEntry = ScopeEntryIterator .)",
    "insertText": "PrevItem()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(CurrentStackDepth < SettingsType::MaxDepth)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 StackIndex = 0; StackIndex < CurrentStackDepth; ++StackIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ StackIndex ] ;)",
    "insertText": "if(Callback(true, StackEntry.EndTime, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ - - CurrentStackDepth ] ; StackEntry . Event =* Event ;)",
    "insertText": "if(Callback(false, -ScopeEntry->Time, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ CurrentStackDepth + + ] ; StackEntry . EndTime = ScopeEntry -> Time ;)",
    "insertText": "if(Callback(true, ScopeEntry->Time, StackEntry.Event) == EEventEnumerate::Stop)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEnumerationStackEntry& StackEntry = EventStack [ - - CurrentStackDepth ] ;)",
    "insertText": "if(Callback(false, -ScopeEntry->Time, *EventsIterator.GetCurrentItem()) == EEventEnumerate::Stop)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bSearchStartTimeUsingPages)"
  },
  {
    "label": "NextPage()",
    "kind": "Method",
    "detail": "Function (ScopeEntryIterator .)",
    "insertText": "NextPage()"
  },
  {
    "label": "EnumerateEventsBackwardsDownSampled()",
    "kind": "Method",
    "detail": "Function (struct FStackEntry { double EndTime ; EventType Event ; } ; FStackEntry EventStack [ SettingsType::MaxDepth ] ; uint32 CurrentDepth = 0 ;)",
    "insertText": "EnumerateEventsBackwardsDownSampled(IntervalEnd, IntervalStart, Resolution, [&EventStack, &CurrentDepth, Callback](bool IsEnter, double Time, const EventType& Event) { if (IsEnter) { FStackEntry& StackEntry = EventStack[CurrentDepth]; StackEntry.Event = Event; StackEntry.EndTime = Time; ++CurrentDepth; } else { FStackEntry& StackEntry = EventStack[--CurrentDepth]; EEventEnumerate Ret = Callback(Time, StackEntry.EndTime, CurrentDepth, Event); if (Ret != EEventEnumerate::Continue) { return Ret; } } return EEventEnumerate::Continue; })"
  },
  {
    "label": "EnumerateEventsDownSampledAsync()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEventsDownSampledAsync(const typename ITimeline<EventType>::EnumerateAsyncParams& EnumerateAsyncParams)"
  },
  {
    "label": "UpperBoundBy()",
    "kind": "Method",
    "detail": "Function (- - FirstScopePageIndex ; } uint64 LastScopePageIndex =)",
    "insertText": "UpperBoundBy(DetailLevel.ScopeEntries, EnumerateAsyncParams.IntervalEnd, [](const FEventScopeEntryPage& Page) { return Page.BeginTime; })"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedRef<FAsyncTask<FEnumarateAsyncTask>>> WorkerTasks ;)",
    "insertText": "check(LastScopePageIndex >= FirstScopePageIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (uint32 NumPages =)",
    "insertText": "Max(static_cast<uint32>(LastScopePageIndex - FirstScopePageIndex), 1u)"
  },
  {
    "label": "GetNumThreads()",
    "kind": "Method",
    "detail": "Function (uint32 NumThreads = GThreadPool ->)",
    "insertText": "GetNumThreads()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (NumThreads =)",
    "insertText": "Max(static_cast<uint32>(NumThreads * EnumerateAsyncParams.MaxOccupancy), 1u)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} uint32 NumTasks =)",
    "insertText": "Min(NumThreads, NumPages)"
  },
  {
    "label": "SetupCallback()",
    "kind": "Method",
    "detail": "Function (uint32 PagesPerTask = NumPages / NumTasks ; uint32 RemainingPages = NumPages % NumTasks ; EnumerateAsyncParams .)",
    "insertText": "SetupCallback(NumTasks)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (uint32 NrPagesToProcess = TaskIndex<RemainingPages ? PagesPerTask + 1 : PagesPerTask ; FAsyncEnumerateTaskData<EventType,SettingsType> TaskData ; TaskData . TaskIndex = TaskIndex ; TaskData . NumTasks = NumTasks ; TaskData . StartPageIndex = FirstScopePageIndex ; TaskData . EndPageIndex =)",
    "insertText": "Min(LastScopePageIndex, FirstScopePageIndex + NrPagesToProcess)"
  },
  {
    "label": "FEnumarateAsyncTask()",
    "kind": "Method",
    "detail": "Function (TaskData . StartTime = EnumerateAsyncParams . IntervalStart ; TaskData . EndTime = EnumerateAsyncParams . IntervalEnd ; TaskData . SortOrder = EnumerateAsyncParams . SortOrder ; TaskData . DetailLevel =& DetailLevel ; TaskData . EventCallback = EnumerateAsyncParams . EventCallback ; TaskData . EventRangeCallback = EnumerateAsyncParams . EventRangeCallback ; TSharedRef<FAsyncTask<FEnumarateAsyncTask>> AsyncTask = MakeShared<FAsyncTask<)",
    "insertText": "FEnumarateAsyncTask(TaskData)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (WorkerTasks .)",
    "insertText": "Add(AsyncTask)"
  },
  {
    "label": "StartBackgroundTask()",
    "kind": "Method",
    "detail": "Function (AsyncTask ->)",
    "insertText": "StartBackgroundTask()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FirstScopePageIndex + = NrPagesToProcess ; })",
    "insertText": "for(uint32 TaskIndex = 0; TaskIndex < NumTasks; ++TaskIndex)"
  },
  {
    "label": "EnsureCompletion()",
    "kind": "Method",
    "detail": "Function (WorkerTasks [ TaskIndex ] ->)",
    "insertText": "EnsureCompletion()"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "EnumerateEventsDownSampled(double IntervalStart, double IntervalEnd, double Resolution, typename ITimeline<EventType>::EventRangeCallback Callback)"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (struct FStackEntry { uint64 LocalEventIndex ; } ; FStackEntry EventStack [ SettingsType::MaxDepth ] ; uint32 CurrentDepth = 0 ; struct FOutputEvent { double StartTime ; double EndTime ; uint32 Depth ; EventType Event ; } ; TArray<FOutputEvent> OutputEvents ;)",
    "insertText": "EnumerateEventsDownSampled(IntervalStart, IntervalEnd, Resolution, [&EventStack, &OutputEvents, &CurrentDepth, Callback](bool IsEnter, double Time, const EventType& Event) { if (IsEnter) { FStackEntry& StackEntry = EventStack[CurrentDepth]; StackEntry.LocalEventIndex = OutputEvents.Num(); FOutputEvent& OutputEvent = OutputEvents.AddDefaulted_GetRef(); OutputEvent.StartTime = Time; OutputEvent.EndTime = Time; OutputEvent.Depth = CurrentDepth; OutputEvent.Event = Event; ++CurrentDepth; } else { { FStackEntry& StackEntry = EventStack[--CurrentDepth]; FOutputEvent* OutputEvent = OutputEvents.GetData() + StackEntry.LocalEventIndex; OutputEvent->EndTime = Time; } if (CurrentDepth == 0) { for (FOutputEvent& OutputEvent : OutputEvents) { EEventEnumerate Ret = Callback(OutputEvent.StartTime, OutputEvent.EndTime, OutputEvent.Depth, OutputEvent.Event); if (Ret != EEventEnumerate::Continue) { return Ret; } } OutputEvents.Empty(OutputEvents.Num()); } } return EEventEnumerate::Continue; })"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEvents(double IntervalStart, double IntervalEnd, typename ITimeline<EventType>::EventCallback Callback)"
  },
  {
    "label": "EnumerateEventsDownSampled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsDownSampled(IntervalStart, IntervalEnd, 0.0, Callback)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEvents(double IntervalStart, double IntervalEnd, typename ITimeline<EventType>::EventRangeCallback Callback)"
  },
  {
    "label": "EnumerateEventsBackwards()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEventsBackwards(double IntervalEnd, double IntervalStart, typename ITimeline<EventType>::EventCallback Callback)"
  },
  {
    "label": "EnumerateEventsBackwardsDownSampled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateEventsBackwardsDownSampled(IntervalEnd, IntervalStart, 0.0, Callback)"
  },
  {
    "label": "EnumerateEventsBackwards()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnumerateEventsBackwards(double IntervalEnd, double IntervalStart, typename ITimeline<EventType>::EventRangeCallback Callback)"
  },
  {
    "label": "GetEventInfo()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetEventInfo(double InTime, double DeltaTime, int32 Depth, typename ITimeline<InEventType>::FTimelineEventInfo& EventInfo)"
  },
  {
    "label": "FindEventUsingPageInitialStack()",
    "kind": "Method",
    "detail": "Function (FEventStackEntry OutScopeEntry ; bool bIsFound =)",
    "insertText": "FindEventUsingPageInitialStack(ScopeEntryIterator, InTime, DeltaTime, Depth, DetailLevel, OutScopeEntry)"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (EventInfo . StartTime = DetailLevel .)",
    "insertText": "GetScopeEntryTime(OutScopeEntry.EnterScopeIndex)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (EventInfo . ExclTime = OutScopeEntry . ExclTime ; EventInfo . EndTime = OutScopeEntry . EndTime ; EventInfo . Event = DetailLevel .)",
    "insertText": "GetEvent(OutScopeEntry.EventIndex)"
  },
  {
    "label": "FEventInfoStackEntry()",
    "kind": "Method",
    "detail": "Function (EventStack [ InitialStackIndex ] =)",
    "insertText": "FEventInfoStackEntry(ScopePage->InitialStack[InitialStackIndex], DetailLevel)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (LastTime =)",
    "insertText": "abs(LastTimeIterator.GetCurrentItem()->Time)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(ScopeEntry && FMath::Abs(ScopeEntry->Time) <= IntervalStart)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEventInfoStackEntry& StackEntry = EventStack [ CurrentStackDepth + + ] ; StackEntry . Event =* Event ; StackEntry . StartTime = - ScopeEntry -> Time ; StackEntry . ExclTime = 0 . 0 ;)",
    "insertText": "if(CurrentStackDepth > 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - CurrentStackDepth ;)",
    "insertText": "if(CurrentStackDepth == Depth)"
  },
  {
    "label": "FindBestMatchEvent()",
    "kind": "Method",
    "detail": "Function (} FFindBestMatchEventInParams InParams ; InParams . IterationState . ScopeIterator = ScopeEntryIterator ; InParams . IterationState . EventsIterator = EventsIterator ; InParams . IterationState . EventStack = EventStack ; InParams . IterationState . StackDepth = CurrentStackDepth ; InParams . IterationState . LastIterationTime = LastTime ; InParams . TargetExactTime = InTime ; InParams . TargetEndTime = InTime + DeltaTime ; InParams . TargetDepth = Depth ; FFindBestMatchEventOutParams OutParams ; bool bMatchFound =)",
    "insertText": "FindBestMatchEvent(InParams, OutParams)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bMatchEventStartsInsidePage = false ; } })",
    "insertText": "if(OutParams.bHasEndTime && bMatchEventStartsInsidePage)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EventInfo . StartTime = OutParams . EventInfo . StartTime ; EventInfo . EndTime = OutParams . EndTime ; EventInfo . ExclTime = OutParams . EventInfo . ExclTime ; EventInfo . Event = OutParams . EventInfo . Event ;)",
    "insertText": "if(EventInfo.EndTime < 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (auto EventLastPageIterator = ScopeEntryIterator ;)",
    "insertText": "while(const FEventScopeEntryPage* CurrentScopePage = ScopeEntryIterator.NextPage())"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (break ; } double StartTime = DetailLevel .)",
    "insertText": "GetScopeEntryTime(CurrentScopePage->InitialStack[Depth].EnterScopeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } EventLastPageIterator = ScopeEntryIterator ; })",
    "insertText": "if(EventLastPageIterator.GetCurrentPageIndex() != FirstScopePageIndex || !bMatchEventStartsInsidePage)"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (FEventStackEntry& TargetStackEntry = ScopePage -> InitialStack [ Depth ] ; EventInfo . StartTime = DetailLevel .)",
    "insertText": "GetScopeEntryTime(TargetStackEntry.EnterScopeIndex)"
  },
  {
    "label": "GetEvent()",
    "kind": "Method",
    "detail": "Function (EventInfo . EndTime = TargetStackEntry . EndTime ; EventInfo . ExclTime = TargetStackEntry . ExclTime ; EventInfo . Event = DetailLevel .)",
    "insertText": "GetEvent(TargetStackEntry.EventIndex)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(ScopeEntry && Depth < CurrentStackDepth)"
  },
  {
    "label": "GetDepthAt()",
    "kind": "Method",
    "detail": "Function (} TargetEntry = EventStack [ Depth ] ; EventInfo . StartTime = TargetEntry . StartTime ; EventInfo . EndTime = LastTime ; EventInfo . ExclTime = TargetEntry . ExclTime ; EventInfo . Event = TargetEntry . Event ; return true ; } int32)",
    "insertText": "GetDepthAt(double Time)"
  },
  {
    "label": "UpdateDominatingEvent()",
    "kind": "Method",
    "detail": "Function (} return CurrentStackDepth ; } private : struct FIterationState { TPagedArray<FEventScopeEntry,FEventScopeEntryPage>::TIterator ScopeIterator ; TPagedArray<EventType>::TIterator EventsIterator ; FEventInfoStackEntry* EventStack ; int32 StackDepth ; double LastIterationTime ; } ; struct FFindBestMatchEventInParams { FIterationState IterationState ; double TargetExactTime ; double TargetEndTime ; int32 TargetDepth ; } ; struct FFindBestMatchEventOutParams { FIterationState IterationState ; FEventInfoStackEntry EventInfo ; bool bHasEndTime ; double EndTime ; } ; void)",
    "insertText": "UpdateDominatingEvent(FDetailLevel& DetailLevel, int32 Depth, double CurrentTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FDetailLevelDepthState& Lod0DepthState = DetailLevels [ 0 ] . InsertionState . DepthStates [ Depth ] ; double Lod0EventDuration = CurrentTime - Lod0DepthState . EnterTime ; FDetailLevelDepthState& CurrentDepthState = DetailLevel . InsertionState . DepthStates [ Depth ] ;)",
    "insertText": "if(Lod0EventDuration > CurrentDepthState.DominatingEventDuration)"
  },
  {
    "label": "SetEvent()",
    "kind": "Method",
    "detail": "Function (CurrentDepthState . DominatingEvent = Lod0DepthState . DominatingEvent ; CurrentDepthState . DominatingEventStartTime = Lod0DepthState . EnterTime ; CurrentDepthState . DominatingEventEndTime = CurrentTime ; CurrentDepthState . DominatingEventDuration = Lod0EventDuration ; DetailLevel .)",
    "insertText": "SetEvent(CurrentDepthState.PendingEventIndex, CurrentDepthState.DominatingEvent)"
  },
  {
    "label": "AddScopeEntry()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddScopeEntry(FDetailLevel& DetailLevel, double Time, bool IsEnter)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (FEventScopeEntry& ScopeEntry = DetailLevel . ScopeEntries .)",
    "insertText": "PushBack()"
  },
  {
    "label": "GetLastPage()",
    "kind": "Method",
    "detail": "Function (ScopeEntry . Time = IsEnter ? - Time : Time ; FEventScopeEntryPage* LastPage = DetailLevel . ScopeEntries .)",
    "insertText": "GetLastPage()"
  },
  {
    "label": "NumPages()",
    "kind": "Method",
    "detail": "Function (uint64 LastPageIndex = DetailLevel . ScopeEntries .)",
    "insertText": "NumPages()"
  },
  {
    "label": "GetPage()",
    "kind": "Method",
    "detail": "Function (FEventScopeEntryPage* CurrentScopeEntryPage = DetailLevel . ScopeEntries .)",
    "insertText": "GetPage(DetailLevel.InsertionState.CurrentScopeEntryPageIndex)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (int32 PreviousPageInitialStackCount = CurrentScopeEntryPage -> InitialStackCount ;)",
    "insertText": "check(DetailLevel.InsertionState.CurrentDepth <= SettingsType::MaxDepth)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 CurrentDepth = DetailLevel . InsertionState . CurrentDepth ; int ii = 0 ;)",
    "insertText": "for(; ii < PreviousPageInitialStackCount && ii < CurrentDepth; ++ii)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEventStackEntry& InsertionStateStackEntry = DetailLevel . InsertionState . EventStack [ ii ] ; FEventStackEntry& PreviousPageStackEntry = CurrentScopeEntryPage -> InitialStack [ ii ] ;)",
    "insertText": "if(InsertionStateStackEntry.EnterScopeIndex == PreviousPageStackEntry.EnterScopeIndex && InsertionStateStackEntry.EventIndex == PreviousPageStackEntry.EventIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LastPage -> EndEventIndex = LastPage -> BeginEventIndex ; LastPage -> InitialStackCount = DetailLevel . InsertionState . CurrentDepth ;)",
    "insertText": "if(LastPage->InitialStackCount)"
  },
  {
    "label": "FEventStackEntry()",
    "kind": "Method",
    "detail": "Function (LastPage -> InitialStack = reinterpret_cast<)",
    "insertText": "FEventStackEntry(Allocator.Allocate(LastPage->InitialStackCount * sizeof(FEventStackEntry)))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(LastPage->InitialStack, DetailLevel.InsertionState.EventStack, LastPage->InitialStackCount * sizeof(FEventStackEntry))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } LastPage -> EndTime = Time ;)",
    "insertText": "if(IsEnter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEventStackEntry& StackEntry = DetailLevel . InsertionState . EventStack [ DetailLevel . InsertionState . CurrentDepth - 1 ] ; StackEntry . EventIndex = EventIndex ; StackEntry . EnterScopeIndex = ScopeIndex ; StackEntry . ExclTime = 0 . 0 ; StackEntry . EndTime = - 1 . 0 ;)",
    "insertText": "if(DetailLevel.InsertionState.CurrentDepth > 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEventStackEntry& PreviousPageStackEntry = CurrentScopeEntryPage -> InitialStack [ DetailLevel . InsertionState . CurrentDepth ] ;)",
    "insertText": "if(StackEntry.EnterScopeIndex == PreviousPageStackEntry.EnterScopeIndex && StackEntry.EventIndex == PreviousPageStackEntry.EventIndex)"
  },
  {
    "label": "AddEvent()",
    "kind": "Method",
    "detail": "Function (PreviousPageStackEntry . ExclTime = StackEntry . ExclTime ; PreviousPageStackEntry . EndTime = Time ; } } } DetailLevel . InsertionState . LastTime = Time ; } void)",
    "insertText": "AddEvent(FDetailLevel& DetailLevel, const EventType& Event)"
  },
  {
    "label": "FindEventUsingPageInitialStack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FindEventUsingPageInitialStack(typename TPagedArray<FEventScopeEntry, FEventScopeEntryPage>::TIterator ScopeEntryIterator, double Time, double DeltaTime, int32 Depth, const FDetailLevel& DetailLevel, FEventStackEntry& OutPageStackEntry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bIsInCurrentPageInitStack = false ;)",
    "insertText": "if(CurrentScopePage->InitialStackCount > Depth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEventStackEntry& CurrentPageStackEntry = CurrentScopePage -> InitialStack [ Depth ] ;)",
    "insertText": "if(CurrentPageStackEntry.EndTime < 0 || CurrentPageStackEntry.EndTime > Time)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsInCurrentPageInitStack = true ; } })",
    "insertText": "if(!bIsInCurrentPageInitStack)"
  },
  {
    "label": "GetScopeEntryTime()",
    "kind": "Method",
    "detail": "Function (FEventStackEntry& NextPageStackEntry = NextScopePage -> InitialStack [ Depth ] ; double StartTime = DetailLevel .)",
    "insertText": "GetScopeEntryTime(NextPageStackEntry.EnterScopeIndex)"
  },
  {
    "label": "FindBestMatchEvent()",
    "kind": "Method",
    "detail": "Function (break ; } CurrentScopePage = NextScopePage ; } OutPageStackEntry = CurrentScopePage -> InitialStack [ Depth ] ; return true ; } bool)",
    "insertText": "FindBestMatchEvent(const FFindBestMatchEventInParams &InParams, FFindBestMatchEventOutParams &OutParams)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FEventInfoStackEntry BestMatchEntry ; double BestMatchEndTime = 0 . 0 ; bool bHasEndEvent = false ;)",
    "insertText": "while(ScopeEntry && FMath::Abs(ScopeEntry->Time) <= InParams.TargetExactTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FEventInfoStackEntry& StackEntry = IterationState . EventStack [ IterationState . StackDepth + + ] ; StackEntry . Event =* Event ; StackEntry . StartTime = - ScopeEntry -> Time ; StackEntry . ExclTime = 0 . 0 ;)",
    "insertText": "if(IterationState.StackDepth > 1)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (IterationState . LastIterationTime = - ScopeEntry -> Time ; } else {)",
    "insertText": "check(IterationState.StackDepth > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - IterationState . StackDepth ;)",
    "insertText": "if(IterationState.StackDepth == InParams.TargetDepth)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IterationState.StackDepth > InParams.TargetDepth)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (OutParams . EventInfo = IterationState . EventStack [ InParams . TargetDepth ] ; OutParams . bHasEndTime = false ; OutParams . IterationState = IterationState ; return true ; } bool bHasStartEvent = false ;)",
    "insertText": "while(ScopeEntry && FMath::Abs(ScopeEntry->Time) <= InParams.TargetEndTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IterationState . LastIterationTime = - ScopeEntry -> Time ;)",
    "insertText": "if(IterationState.StackDepth == InParams.TargetDepth + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(bHasStartEvent == false && bHasEndEvent == false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bHasEndEvent = false ; BestMatchEntry = IterationState . EventStack [ InParams . TargetDepth ] ; } } OutParams . EventInfo = BestMatchEntry ; OutParams . bHasEndTime = bHasEndEvent ;)",
    "insertText": "if(bHasEndEvent)"
  }
]