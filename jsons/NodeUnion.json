[
  {
    "label": "NodeUnion",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeUnion"
  },
  {
    "label": "CopyTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyTraits"
  },
  {
    "label": "NodeUnion()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TREE_NODEUNION_HAS_BEEN_INCLUDED # define OPENVDB_TREE_NODEUNION_HAS_BEEN_INCLUDED # include<openvdb / version . h> # include<openvdb / Types . h> # include<cstring> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tree { # if OPENVDB_ABI_VERSION_NUMBER> = 8 template<ValueT,ChildT,Enable = void> class NodeUnion { private : ChildT* mChild ; ValueT mValue ; public :)",
    "insertText": "NodeUnion(): mChild(nullptr), mValue()"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (} ChildT*)",
    "insertText": "getChild()"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (mChild = child ; } const ValueT&)",
    "insertText": "getValue()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (mValue = val ; })",
    "insertText": "static_assert(!ValueTraits<ValueT>::IsVec && !ValueTraits<ValueT>::IsMat && !ValueTraits<ValueT>::IsQuat && !std::is_same<ValueT, math::Coord>::value && !std::is_arithmetic<ValueT>::value, \"Unexpected instantiation of NodeUnion\")"
  },
  {
    "label": "NodeUnion()",
    "kind": "Method",
    "detail": "Function (} ; template<ValueT,ChildT> class NodeUnion<ValueT,ChildT,std::enable_if<std::is_trivially_copyable<ValueT>::value>::type> { private : union { ChildT* mChild ; ValueT mValue ; } ; public :)",
    "insertText": "NodeUnion(): mChild(nullptr)"
  },
  {
    "label": "NodeUnion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "NodeUnion(const NodeUnion& other): mChild(nullptr)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(this), &other, sizeof(*this))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} NodeUnion&)",
    "insertText": "operator(const NodeUnion& rhs)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(static_cast<void*>(this), &rhs, sizeof(*this))"
  }
]