[
  {
    "label": "FParticlePerfStatsListener_DebugRender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePerfStatsListener_DebugRender"
  },
  {
    "label": "FAccumulatedParticlePerfStats_GT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatedParticlePerfStats_GT"
  },
  {
    "label": "FAccumulatedParticlePerfStats_RT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatedParticlePerfStats_RT"
  },
  {
    "label": "FAccumulatedParticlePerfStats_GPU",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatedParticlePerfStats_GPU"
  },
  {
    "label": "FAccumulatedParticlePerfStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccumulatedParticlePerfStats"
  },
  {
    "label": "FParticlePerfStatsListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePerfStatsListener"
  },
  {
    "label": "FParticlePerfStatsManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePerfStatsManager"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FParticlePerfStatsListener_GatherAll",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePerfStatsListener_GatherAll"
  },
  {
    "label": "FParticlePerfStatsListener_TimedTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePerfStatsListener_TimedTest"
  },
  {
    "label": "FParticlePerfStatsListener_CSVProfiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FParticlePerfStatsListener_CSVProfiler"
  },
  {
    "label": "FAccumulatedParticlePerfStats_GT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Particles / ParticlePerfStats . h \" # include \" ProfilingDebugging / CsvProfiler . h \" # include \" UObject / WeakObjectPtr . h \" # include \" RenderingThread . h \" # if WITH_PARTICLE_PERF_STATS # define ENABLE_PARTICLE_PERF_STATS_RENDER ! UE_BUILD_SHIPPING class FParticlePerfStatsListener_DebugRender ; # define ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES 1 0 struct FAccumulatedParticlePerfStats_GT { uint32 NumFrames ; TArray<uint64,TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>> MaxPerFrameTotalCycles ; TArray<uint64,TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>> MaxPerInstanceCycles ; FParticlePerfStats_GT AccumulatedStats ;)",
    "insertText": "FAccumulatedParticlePerfStats_GT()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(FParticlePerfStats& Stats)"
  },
  {
    "label": "GetTotalCycles_GTOnly()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetTotalCycles_GTOnly()"
  },
  {
    "label": "GetPerFrameAvgCycles()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerFrameAvgCycles()"
  },
  {
    "label": "GetPerFrameAvgCycles_GTOnly()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerFrameAvgCycles_GTOnly()"
  },
  {
    "label": "GetPerFrameMaxCycles()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerFrameMaxCycles(int32 Index = 0)"
  },
  {
    "label": "GetPerFrameAvg_GTOnly()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPerFrameAvg_GTOnly()"
  },
  {
    "label": "GetPerFrameMax()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPerFrameMax(int32 Index = 0)"
  },
  {
    "label": "GetPerInstanceAvgCycles()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerInstanceAvgCycles()"
  },
  {
    "label": "GetPerInstanceMaxCycles()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerInstanceMaxCycles(int32 Index = 0)"
  },
  {
    "label": "GetPerInstanceAvg_GTOnly()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPerInstanceAvg_GTOnly()"
  },
  {
    "label": "GetPerInstanceMax()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetPerInstanceMax(int32 Index = 0)"
  },
  {
    "label": "FAccumulatedParticlePerfStats_RT()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAccumulatedParticlePerfStats_RT { uint32 NumFrames ; FParticlePerfStats_RT AccumulatedStats ; TArray<uint64,TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>> MaxPerFrameTotalCycles ; TArray<uint64,TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>> MaxPerInstanceCycles ;)",
    "insertText": "FAccumulatedParticlePerfStats_RT()"
  },
  {
    "label": "FAccumulatedParticlePerfStats_GPU()",
    "kind": "Method",
    "detail": "Function (} } ; struct FAccumulatedParticlePerfStats_GPU { uint32 NumFrames ; FParticlePerfStats_GPU AccumulatedStats ; TArray<uint64,TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>> MaxPerFrameTotalMicroseconds ; TArray<uint64,TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>> MaxPerInstanceMicroseconds ;)",
    "insertText": "FAccumulatedParticlePerfStats_GPU()"
  },
  {
    "label": "GetPerFrameAvgMicroseconds()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerFrameAvgMicroseconds()"
  },
  {
    "label": "GetPerFrameMaxMicroseconds()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerFrameMaxMicroseconds(int32 Index = 0)"
  },
  {
    "label": "GetPerInstanceMaxMicroseconds()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetPerInstanceMaxMicroseconds(int32 Index = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(bool bSyncWithRT)"
  },
  {
    "label": "ResetGT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetGT()"
  },
  {
    "label": "ResetRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetRT()"
  },
  {
    "label": "TickRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRT(FParticlePerfStats& Stats)"
  },
  {
    "label": "AddMax()",
    "kind": "Method",
    "detail": "Function (FAccumulatedParticlePerfStats_GT GameThreadStats ; FAccumulatedParticlePerfStats_RT RenderThreadStats ; FAccumulatedParticlePerfStats_GPU GPUStats ; void)",
    "insertText": "AddMax(TArray<uint64, TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>>& MaxArray, int64 NewValue)"
  },
  {
    "label": "ResetMaxArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMaxArray(TArray<uint64, TInlineAllocator<ACCUMULATED_PARTICLE_PERF_STAT_MAX_SAMPLES>>& MaxArray)"
  },
  {
    "label": "FlushRenderingCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushRenderingCommands()"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "ensure(IsInRenderingThread())"
  },
  {
    "label": "GetGPUStats()",
    "kind": "Method",
    "detail": "Function (} return RenderThreadStats ; } FAccumulatedParticlePerfStats_GPU&)",
    "insertText": "GetGPUStats(bool bFlushForGameThread = false)"
  },
  {
    "label": "FParticlePerfStatsListener()",
    "kind": "Method",
    "detail": "Function (} return GPUStats ; } } ; class FParticlePerfStatsListener : public TSharedFromThis<FParticlePerfStatsListener,ESPMode::ThreadSafe> { public : ~)",
    "insertText": "FParticlePerfStatsListener()"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Begin()"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "End()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Tick()"
  },
  {
    "label": "OnAddWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAddWorld(const TWeakObjectPtr<const UWorld>& NewWorld)"
  },
  {
    "label": "OnRemoveWorld()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveWorld(const TWeakObjectPtr<const UWorld>& World)"
  },
  {
    "label": "OnAddSystem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAddSystem(const TWeakObjectPtr<const UFXSystemAsset>& NewSystem)"
  },
  {
    "label": "OnRemoveSystem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveSystem(const TWeakObjectPtr<const UFXSystemAsset>& System)"
  },
  {
    "label": "OnAddComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAddComponent(const TWeakObjectPtr<const UFXSystemComponent>& NewComponent)"
  },
  {
    "label": "OnRemoveComponent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveComponent(const TWeakObjectPtr<const UFXSystemComponent>& Component)"
  },
  {
    "label": "NeedsWorldStats()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsWorldStats()"
  },
  {
    "label": "NeedsSystemStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsSystemStats()"
  },
  {
    "label": "NeedsComponentStats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsComponentStats()"
  },
  {
    "label": "AllowOrphaned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowOrphaned()"
  },
  {
    "label": "GetSystemPerfStats()",
    "kind": "Method",
    "detail": "Function (FParticlePerfStats*)",
    "insertText": "GetSystemPerfStats(const UFXSystemAsset* FXAsset)"
  },
  {
    "label": "GetComponentPerfStats()",
    "kind": "Method",
    "detail": "Function (FParticlePerfStats*)",
    "insertText": "GetComponentPerfStats(const UFXSystemComponent* FXComponent)"
  },
  {
    "label": "OnStartup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartup()"
  },
  {
    "label": "OnShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnShutdown()"
  },
  {
    "label": "TogglePerfStatsRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TogglePerfStatsRender(UWorld* World)"
  },
  {
    "label": "RenderStats()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RenderStats(UWorld* World, class FViewport* Viewport, class FCanvas* Canvas, int32 X, int32 Y, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "AddListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddListener(FParticlePerfStatsListenerPtr Listener, bool bReset = true)"
  },
  {
    "label": "RemoveListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveListener(FParticlePerfStatsListener* Listener)"
  },
  {
    "label": "RemoveListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveListener(FParticlePerfStatsListenerPtr Listener)"
  },
  {
    "label": "ForAllWorldStats()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_PARTICLE_PERF_STATS_RENDER TMap<TWeakObjectPtr<UWorld>,TSharedPtr<FParticlePerfStatsListener_DebugRender,ESPMode::ThreadSafe>> DebugRenderListenerUsers ; # endif template<TAction> void)",
    "insertText": "ForAllWorldStats(TAction Func)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&WorldToPerfStatsGuard)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(Pair.Key, Pair.Value)"
  },
  {
    "label": "ForAllSystemStats()",
    "kind": "Method",
    "detail": "Function (} } template<TAction> void)",
    "insertText": "ForAllSystemStats(TAction Func)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# if WITH_PER_SYSTEM_PARTICLE_PERF_STATS FScopeLock)",
    "insertText": "Lock(&SystemToPerfStatsGuard)"
  },
  {
    "label": "ForAllComponentStats()",
    "kind": "Method",
    "detail": "Function (} # endif } template<TAction> void)",
    "insertText": "ForAllComponentStats(TAction Func)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (# if WITH_PER_SYSTEM_PARTICLE_PERF_STATS FScopeLock)",
    "insertText": "Lock(&ComponentToPerfStatsGuard)"
  },
  {
    "label": "FParticlePerfStatsListener_GatherAll()",
    "kind": "Method",
    "detail": "Function (} # endif } } ; class FParticlePerfStatsListener_GatherAll : public FParticlePerfStatsListener { public :)",
    "insertText": "FParticlePerfStatsListener_GatherAll(bool bNeedsWorldStats, bool bNeedsSystemStats, bool bNeedsComponentStats) : bGatherWorldStats(bNeedsWorldStats) , bGatherSystemStats(bNeedsSystemStats) , bGatherComponentStats(bNeedsComponentStats)"
  },
  {
    "label": "FParticlePerfStatsListener_GatherAll()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FParticlePerfStatsListener_GatherAll()"
  },
  {
    "label": "TickRT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickRT()"
  },
  {
    "label": "DumpStatsToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStatsToFile()"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (# if WITH_PARTICLE_PERF_STATS FAccumulatedParticlePerfStats*)",
    "insertText": "GetStats(const UWorld* World)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (# else FAccumulatedParticlePerfStats*)",
    "insertText": "GetStats(const UFXSystemAsset* System)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (# else FAccumulatedParticlePerfStats*)",
    "insertText": "GetStats(const UFXSystemComponent* Component)"
  },
  {
    "label": "FParticlePerfStatsListener_TimedTest()",
    "kind": "Method",
    "detail": "Function (} ; class FParticlePerfStatsListener_TimedTest : public FParticlePerfStatsListener_GatherAll { public :)",
    "insertText": "FParticlePerfStatsListener_TimedTest(int32 NumFrames, bool bInGatherWorldStats, bool bInGatherSystemStats, bool bInGatherComponentStats)"
  },
  {
    "label": "OnCSVStart()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCSVStart()"
  },
  {
    "label": "OnCSVEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCSVEnd()"
  },
  {
    "label": "FParticlePerfStatsListener_DebugRender()",
    "kind": "Method",
    "detail": "Function (# endif private : FParticlePerfStatsListenerPtr CSVListener ; } ; class FParticlePerfStatsListener_DebugRender : public FParticlePerfStatsListener_GatherAll { public :)",
    "insertText": "FParticlePerfStatsListener_DebugRender() : FParticlePerfStatsListener_GatherAll(false, true, false)"
  }
]