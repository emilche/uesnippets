[
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "UExternalDataLayerAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerAsset"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "UExternalDataLayerEngineSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerEngineSubsystem"
  },
  {
    "label": "FRegisteredExternalDataLayers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredExternalDataLayers"
  },
  {
    "label": "UExternalDataLayerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UExternalDataLayerManager"
  },
  {
    "label": "UGameFeatureActionConvertContentBundleWorldPartitionBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameFeatureActionConvertContentBundleWorldPartitionBuilder"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectKey . h \" # include \" Templates / SubclassOf . h \" # include \" Subsystems / EngineSubsystem . h \" # include \" Tickable . h \" # include \" WorldPartition / DataLayer / ExternalDataLayerInjectionPolicy . h \" # include \" ExternalDataLayerEngineSubsystem . generated . h \" struct FAssetData ; class UExternalDataLayerAsset ; enum class EExternalDataLayerRegistrationState : uint8 { Unregistered,Registered,Active } ;)",
    "insertText": "UCLASS(Config = Engine, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ENGINE_API static UExternalDataLayerEngineSubsystem& Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "Initialize(FSubsystemCollectionBase& Collection)"
  },
  {
    "label": "Deinitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deinitialize()"
  },
  {
    "label": "IsTickableInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickableInEditor()"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (} TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "RegisterExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExternalDataLayerAsset(const UExternalDataLayerAsset* InExternalDataLayerAsset, const UObject* InClient)"
  },
  {
    "label": "UnregisterExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterExternalDataLayerAsset(const UExternalDataLayerAsset* InExternalDataLayerAsset, const UObject* InClient)"
  },
  {
    "label": "ActivateExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActivateExternalDataLayerAsset(const UExternalDataLayerAsset* InExternalDataLayerAsset, const UObject* InClient)"
  },
  {
    "label": "DeactivateExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeactivateExternalDataLayerAsset(const UExternalDataLayerAsset* InExternalDataLayerAsset, const UObject* InClient)"
  },
  {
    "label": "IsExternalDataLayerAssetRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalDataLayerAssetRegistered(const UExternalDataLayerAsset* InExternalDataLayerAsset, const UObject* InClient = nullptr)"
  },
  {
    "label": "IsExternalDataLayerAssetActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExternalDataLayerAssetActive(const UExternalDataLayerAsset* InExternalDataLayerAsset, const UObject* InClient = nullptr)"
  },
  {
    "label": "GetExternalDataLayerAssetRegistrationState()",
    "kind": "Method",
    "detail": "Function (EExternalDataLayerRegistrationState)",
    "insertText": "GetExternalDataLayerAssetRegistrationState(const UExternalDataLayerAsset* InExternalDataLayerAsset)"
  },
  {
    "label": "GetClientsForExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*>)",
    "insertText": "GetClientsForExternalDataLayerAsset(const UExternalDataLayerAsset* InExternalDataLayerAsset)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FExternalDataLayerAssetRegistrationStateChangedEventDelegate, const UExternalDataLayerAsset* ExternalDataLayerAsset, EExternalDataLayerRegistrationState OldState, EExternalDataLayerRegistrationState NewState)"
  },
  {
    "label": "OnAssetsPreDelete()",
    "kind": "Method",
    "detail": "Function (FExternalDataLayerAssetRegistrationStateChangedEventDelegate OnExternalDataLayerAssetRegistrationStateChanged ; private : # if WITH_EDITOR void)",
    "insertText": "OnAssetsPreDelete(const TArray<UObject*>& Objects)"
  },
  {
    "label": "OnGetLevelExternalActorsPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGetLevelExternalActorsPaths(const FString& InLevelPackageName, const FString& InPackageShortName, TArray<FString>& OutExternalActorsPaths)"
  },
  {
    "label": "OnResolveLevelMountPoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnResolveLevelMountPoint(const FString& InLevelPackageName, const UObject* InLevelMountPointContext, FString& OutResolvedLevelMountPoint)"
  },
  {
    "label": "CanWorldInjectExternalDataLayerAsset()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CanWorldInjectExternalDataLayerAsset(const UWorld* InWorld, const UExternalDataLayerAsset* InExternalDataLayerAsset, FText* OutFailureReason = nullptr)"
  },
  {
    "label": "GetRegisteredExternalDataLayerAssets()",
    "kind": "Method",
    "detail": "Function (# endif struct FRegisteredExternalDataLayers { TSet<FObjectKey> RegisteredClients ; TSet<FObjectKey> ActiveClients ; EExternalDataLayerRegistrationState State = EExternalDataLayerRegistrationState::Registered ; } ; using FRegisteredExternalDataLayerAssetMap = TMap<TObjectPtr<const UExternalDataLayerAsset>,FRegisteredExternalDataLayers> ; const FRegisteredExternalDataLayerAssetMap&)",
    "insertText": "GetRegisteredExternalDataLayerAssets()"
  }
]