[
  {
    "label": "static",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "static"
  },
  {
    "label": "_mi_fputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_fputs(mi_output_fun* out, void* arg, const char* prefix, const char* message)"
  },
  {
    "label": "_mi_fprintf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_fprintf(mi_output_fun* out, void* arg, const char* fmt, ...)"
  },
  {
    "label": "_mi_warning_message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_warning_message(const char* fmt, ...)"
  },
  {
    "label": "_mi_verbose_message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_verbose_message(const char* fmt, ...)"
  },
  {
    "label": "_mi_trace_message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_trace_message(const char* fmt, ...)"
  },
  {
    "label": "_mi_options_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_options_init(void)"
  },
  {
    "label": "_mi_error_message()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_error_message(int err, const char* fmt, ...)"
  },
  {
    "label": "_mi_random_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_random_init(mi_random_ctx_t* ctx)"
  },
  {
    "label": "_mi_random_split()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_random_split(mi_random_ctx_t* ctx, mi_random_ctx_t* new_ctx)"
  },
  {
    "label": "_mi_random_next()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "_mi_random_next(mi_random_ctx_t* ctx)"
  },
  {
    "label": "_mi_heap_random_next()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "_mi_heap_random_next(mi_heap_t* heap)"
  },
  {
    "label": "_os_random_weak()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "_os_random_weak(uintptr_t extra_seed)"
  },
  {
    "label": "_mi_random_shuffle()",
    "kind": "Method",
    "detail": "Function (uintptr_t)",
    "insertText": "_mi_random_shuffle(uintptr_t x)"
  },
  {
    "label": "_mi_is_main_thread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_is_main_thread(void)"
  },
  {
    "label": "_mi_preloading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_preloading()"
  },
  {
    "label": "_mi_os_page_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "_mi_os_page_size(void)"
  },
  {
    "label": "_mi_os_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_os_init(void)"
  },
  {
    "label": "_mi_os_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_os_free(void* p, size_t size, mi_stats_t* stats)"
  },
  {
    "label": "_mi_os_protect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_os_protect(void* addr, size_t size)"
  },
  {
    "label": "_mi_os_unprotect()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_os_unprotect(void* addr, size_t size)"
  },
  {
    "label": "_mi_os_commit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_os_commit(void* addr, size_t size, bool* is_zero, mi_stats_t* stats)"
  },
  {
    "label": "_mi_os_decommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_os_decommit(void* p, size_t size, mi_stats_t* stats)"
  },
  {
    "label": "_mi_os_reset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_os_reset(void* p, size_t size, mi_stats_t* stats)"
  },
  {
    "label": "_mi_os_unreset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_os_unreset(void* p, size_t size, bool* is_zero, mi_stats_t* stats)"
  },
  {
    "label": "_mi_os_good_alloc_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "_mi_os_good_alloc_size(size_t size)"
  },
  {
    "label": "_mi_arena_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_arena_free(void* p, size_t size, size_t memid, bool is_committed, mi_os_tld_t* tld)"
  },
  {
    "label": "_mi_segment_cache_push()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_segment_cache_push(void* start, size_t size, size_t memid, mi_commit_mask_t commit_mask, bool is_large, bool is_pinned, mi_os_tld_t* tld)"
  },
  {
    "label": "_mi_segment_map_allocated_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_segment_map_allocated_at(const mi_segment_t* segment)"
  },
  {
    "label": "_mi_segment_map_freed_at()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_segment_map_freed_at(const mi_segment_t* segment)"
  },
  {
    "label": "_mi_segment_page_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_segment_page_free(mi_page_t* page, bool force, mi_segments_tld_t* tld)"
  },
  {
    "label": "_mi_segment_page_abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_segment_page_abandon(mi_page_t* page, mi_segments_tld_t* tld)"
  },
  {
    "label": "_mi_segment_try_reclaim_abandoned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_segment_try_reclaim_abandoned( mi_heap_t* heap, bool try_all, mi_segments_tld_t* tld)"
  },
  {
    "label": "_mi_segment_thread_collect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_segment_thread_collect(mi_segments_tld_t* tld)"
  },
  {
    "label": "_mi_segment_huge_page_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_segment_huge_page_free(mi_segment_t* segment, mi_page_t* page, mi_block_t* block)"
  },
  {
    "label": "_mi_abandoned_reclaim_all()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_abandoned_reclaim_all(mi_heap_t* heap, mi_segments_tld_t* tld)"
  },
  {
    "label": "_mi_abandoned_await_readers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_abandoned_await_readers(void)"
  },
  {
    "label": "_mi_page_retire()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_page_retire(mi_page_t* page)"
  },
  {
    "label": "_mi_page_unfull()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_page_unfull(mi_page_t* page)"
  },
  {
    "label": "_mi_page_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_page_free(mi_page_t* page, mi_page_queue_t* pq, bool force)"
  },
  {
    "label": "_mi_page_abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_page_abandon(mi_page_t* page, mi_page_queue_t* pq)"
  },
  {
    "label": "_mi_heap_delayed_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_heap_delayed_free(mi_heap_t* heap)"
  },
  {
    "label": "_mi_heap_collect_retired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_heap_collect_retired(mi_heap_t* heap, bool force)"
  },
  {
    "label": "_mi_page_use_delayed_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_page_use_delayed_free(mi_page_t* page, mi_delayed_t delay, bool override_never)"
  },
  {
    "label": "_mi_page_queue_append()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "_mi_page_queue_append(mi_heap_t* heap, mi_page_queue_t* pq, mi_page_queue_t* append)"
  },
  {
    "label": "_mi_deferred_free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_deferred_free(mi_heap_t* heap, bool force)"
  },
  {
    "label": "_mi_page_free_collect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_page_free_collect(mi_page_t* page,bool force)"
  },
  {
    "label": "_mi_page_reclaim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_page_reclaim(mi_heap_t* heap, mi_page_t* page)"
  },
  {
    "label": "_mi_bin_size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "_mi_bin_size(uint8_t bin)"
  },
  {
    "label": "_mi_bin()",
    "kind": "Method",
    "detail": "Function (uint8_t)",
    "insertText": "_mi_bin(size_t size)"
  },
  {
    "label": "_mi_heap_destroy_pages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_heap_destroy_pages(mi_heap_t* heap)"
  },
  {
    "label": "_mi_heap_collect_abandon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_heap_collect_abandon(mi_heap_t* heap)"
  },
  {
    "label": "_mi_heap_set_default_direct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_heap_set_default_direct(mi_heap_t* heap)"
  },
  {
    "label": "_mi_stats_done()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_stats_done(mi_stats_t* stats)"
  },
  {
    "label": "_mi_clock_now()",
    "kind": "Method",
    "detail": "Function (mi_msecs_t)",
    "insertText": "_mi_clock_now(void)"
  },
  {
    "label": "_mi_clock_end()",
    "kind": "Method",
    "detail": "Function (mi_msecs_t)",
    "insertText": "_mi_clock_end(mi_msecs_t start)"
  },
  {
    "label": "_mi_clock_start()",
    "kind": "Method",
    "detail": "Function (mi_msecs_t)",
    "insertText": "_mi_clock_start(void)"
  },
  {
    "label": "_mi_free_delayed_block()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_free_delayed_block(mi_block_t* block)"
  },
  {
    "label": "_mi_block_zero_init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mi_block_zero_init(const mi_page_t* page, void* p, size_t size)"
  },
  {
    "label": "_mi_page_is_valid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "_mi_page_is_valid(mi_page_t* page)"
  },
  {
    "label": "__builtin_umul_overflow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_umul_overflow(count, size, total)"
  },
  {
    "label": "__builtin_umull_overflow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_umull_overflow(count, size, total)"
  },
  {
    "label": "__builtin_umulll_overflow()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_umulll_overflow(count, size, total)"
  },
  {
    "label": "_mi_heap_main_get()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mi_heap_main_get()"
  },
  {
    "label": "mi_assert_internal()",
    "kind": "Method",
    "detail": "Function (data)",
    "insertText": "mi_assert_internal(slice->slice_offset == 0)"
  },
  {
    "label": "mi_slice_to_page()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mi_slice_to_page(slice)"
  },
  {
    "label": "_mi_segment_page_start()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mi_segment_page_start(segment, page, page_size)"
  },
  {
    "label": "UNUSED()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "UNUSED(keys)"
  },
  {
    "label": "UNUSED()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "UNUSED(keys)"
  },
  {
    "label": "UNUSED()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "UNUSED(page)"
  },
  {
    "label": "mi_block_nextx()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mi_block_nextx(page,block,NULL)"
  },
  {
    "label": "mi_block_set_nextx()",
    "kind": "Method",
    "detail": "Function (MI_ENCODE_FREELIST)",
    "insertText": "mi_block_set_nextx(page,block,next, page->keys)"
  },
  {
    "label": "UNUSED()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "UNUSED(page)"
  },
  {
    "label": "mi_commit_mask_full()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mi_commit_mask_full()"
  },
  {
    "label": "mi_commit_mask_empty()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "mi_commit_mask_empty()"
  },
  {
    "label": "_mi_os_numa_node_get()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_mi_os_numa_node_get(mi_os_tld_t* tld)"
  },
  {
    "label": "_mi_os_numa_node_count_get()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "_mi_os_numa_node_count_get(void)"
  },
  {
    "label": "_mi_os_numa_node_get()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mi_os_numa_node_get(tld)"
  },
  {
    "label": "_mi_os_numa_node_count_get()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mi_os_numa_node_count_get()"
  },
  {
    "label": "__builtin_clzl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_clzl(x)"
  },
  {
    "label": "__builtin_clzll()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_clzll(x)"
  },
  {
    "label": "__builtin_ctzl()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_ctzl(x)"
  },
  {
    "label": "__builtin_ctzll()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "__builtin_ctzll(x)"
  },
  {
    "label": "_BitScanReverse64()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "_BitScanReverse64(&idx, x)"
  },
  {
    "label": "_BitScanForward64()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "_BitScanForward64(&idx, x)"
  }
]