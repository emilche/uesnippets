[
  {
    "label": "HashtableDebugProbeSummary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashtableDebugProbeSummary"
  },
  {
    "label": "GetHashtableDebugNumProbes()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_HASHTABLE_DEBUG_H_ # define ABSL_CONTAINER_INTERNAL_HASHTABLE_DEBUG_H_ # include<cstddef> # include<algorithm> # include<type_traits> # include<vector> # include \" absl / container / internal / hashtable_debug_hooks . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<C> size_t)",
    "insertText": "GetHashtableDebugNumProbes(const C& c, const typename C::key_type& key)"
  },
  {
    "label": "GetHashtableDebugNumProbesHistogram()",
    "kind": "Method",
    "detail": "Function (} template<C> std::vector<size_t>)",
    "insertText": "GetHashtableDebugNumProbesHistogram(const C& container)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (std::vector<size_t> v ;)",
    "insertText": "for(auto it = container.begin(); it != container.end(); ++it)"
  },
  {
    "label": "GetHashtableDebugNumProbes()",
    "kind": "Method",
    "detail": "Function (size_t num_probes =)",
    "insertText": "GetHashtableDebugNumProbes(container, absl::container_internal::hashtable_debug_internal::GetKey<C>(*it, 0))"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (v .)",
    "insertText": "resize((std::max)(v.size(), num_probes + 1))"
  },
  {
    "label": "GetHashtableDebugProbeSummary()",
    "kind": "Method",
    "detail": "Function (v [ num_probes ] + + ; } return v ; } struct HashtableDebugProbeSummary { size_t total_elements ; size_t total_num_probes ; double mean ; } ; template<C> HashtableDebugProbeSummary)",
    "insertText": "GetHashtableDebugProbeSummary(const C& container)"
  },
  {
    "label": "GetHashtableDebugNumProbesHistogram()",
    "kind": "Method",
    "detail": "Function (auto probes =)",
    "insertText": "GetHashtableDebugNumProbesHistogram(container)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (HashtableDebugProbeSummary summary = { } ;)",
    "insertText": "for(size_t i = 0; i < probes.size(); ++i)"
  },
  {
    "label": "AllocatedByteSize()",
    "kind": "Method",
    "detail": "Function (summary . total_elements + = probes [ i ] ; summary . total_num_probes + = probes [ i ]* i ; } summary . mean = 1 . 0* summary . total_num_probes / summary . total_elements ; return summary ; } template<C> size_t)",
    "insertText": "AllocatedByteSize(const C& c)"
  },
  {
    "label": "LowerBoundAllocatedByteSize()",
    "kind": "Method",
    "detail": "Function (} template<C> size_t)",
    "insertText": "LowerBoundAllocatedByteSize(size_t num_elements)"
  }
]