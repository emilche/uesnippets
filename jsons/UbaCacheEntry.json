[
  {
    "label": "HashMap2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashMap2"
  },
  {
    "label": "LogLinesType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LogLinesType"
  },
  {
    "label": "CacheEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CacheEntry"
  },
  {
    "label": "CacheEntries",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CacheEntries"
  },
  {
    "label": "CacheEntriesTraverser",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CacheEntriesTraverser"
  },
  {
    "label": "GetSharedSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaBinaryReaderWriter . h \" # include \" UbaLogger . h \" # include \" UbaProcessHandle . h \" namespace uba { template<Key,Value> struct HashMap2 ; enum LogLinesType : u8 { LogLinesType_Empty,LogLinesType_Shared,LogLinesType_Owned,} ; struct CacheEntry { u64 creationTime = 0 ; u64 lastUsedTime = 0 ; u32 id = 0 ; LogLinesType logLinesType = LogLinesType_Empty ; Vector<u8> sharedInputCasKeyOffsetRanges ; Vector<u8> extraInputCasKeyOffsets ; Vector<u8> outputCasKeyOffsets ; Vector<u8> logLines ; } ; struct CacheEntries { ReaderWriterLock lock ; List<CacheEntry> entries ; Vector<u8> sharedInputCasKeyOffsets ; Vector<u8> sharedLogLines ; u32 idCounter = 0 ; u32 primaryId = ~ 0 u ; u64)",
    "insertText": "GetSharedSize()"
  },
  {
    "label": "GetEntrySize()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetEntrySize(CacheEntry& entry, u32 clientVersion, bool toDisk)"
  },
  {
    "label": "GetTotalSize()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetTotalSize(u32 clientVersion, bool toDisk)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Write(BinaryWriter& writer, u32 clientVersion, bool toDisk)"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Read(Logger& logger, BinaryReader& reader, u32 databaseVersion)"
  },
  {
    "label": "BuildInputs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildInputs(CacheEntry& entry, const Set<u32>& inputs)"
  },
  {
    "label": "UpdateEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateEntries(Logger& logger, const HashMap2<u32, u32>& oldToNewCasKeyOffset, Vector<u32>& temp, Vector<u8>& temp2)"
  },
  {
    "label": "Flatten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flatten(Vector<u8>& out, const CacheEntry& entry)"
  },
  {
    "label": "Flatten()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flatten(Vector<u32>& out, const CacheEntry& entry, const Vector<u8>& sharedOffsets)"
  },
  {
    "label": "BuildInputsT()",
    "kind": "Method",
    "detail": "Function (template<Container> void)",
    "insertText": "BuildInputsT(CacheEntry& entry, const Container& sortedInputs, bool populateShared)"
  },
  {
    "label": "BuildRangesFromExcludedT()",
    "kind": "Method",
    "detail": "Function (template<Container> void)",
    "insertText": "BuildRangesFromExcludedT(CacheEntry& entry, const Container& sortedExcludedInputs)"
  },
  {
    "label": "ValidateEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateEntry(Logger& logger, CacheEntry& entry, Vector<u8>& inputCasKeyOffsets)"
  },
  {
    "label": "CacheEntriesTraverser()",
    "kind": "Method",
    "detail": "Function (} ; struct CacheEntriesTraverser {)",
    "insertText": "CacheEntriesTraverser(BinaryReader& r) : reader(r)"
  },
  {
    "label": "ReadU16()",
    "kind": "Method",
    "detail": "Function (entryCount = reader .)",
    "insertText": "ReadU16()"
  },
  {
    "label": "Read7BitEncoded()",
    "kind": "Method",
    "detail": "Function (u64 sharedSize = r .)",
    "insertText": "Read7BitEncoded()"
  },
  {
    "label": "GetPositionData()",
    "kind": "Method",
    "detail": "Function (sharedInputOffsets = r .)",
    "insertText": "GetPositionData()"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "Skip(sharedSize)"
  },
  {
    "label": "TraverseEntryInputs()",
    "kind": "Method",
    "detail": "Function (} template<Func> bool)",
    "insertText": "TraverseEntryInputs(const Func& func)"
  },
  {
    "label": "u32()",
    "kind": "Method",
    "detail": "Function (lastId =)",
    "insertText": "u32(reader.Read7BitEncoded())"
  },
  {
    "label": "extraReader()",
    "kind": "Method",
    "detail": "Function (BinaryReader)",
    "insertText": "extraReader(reader.GetPositionData(), 0, extraSize)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "Skip(extraSize)"
  },
  {
    "label": "rangeReader()",
    "kind": "Method",
    "detail": "Function (BinaryReader)",
    "insertText": "rangeReader(reader.GetPositionData(), 0, rangeSize)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "Skip(rangeSize)"
  },
  {
    "label": "rangeReader2()",
    "kind": "Method",
    "detail": "Function (BinaryReader)",
    "insertText": "rangeReader2(sharedInputOffsets + begin, 0, end - begin)"
  },
  {
    "label": "TraverseEntryOutputs()",
    "kind": "Method",
    "detail": "Function (} return true ; } template<Func> bool)",
    "insertText": "TraverseEntryOutputs(const Func& func)"
  },
  {
    "label": "outReader()",
    "kind": "Method",
    "detail": "Function (BinaryReader)",
    "insertText": "outReader(reader.GetPositionData(), 0, outSize)"
  },
  {
    "label": "Skip()",
    "kind": "Method",
    "detail": "Function (reader .)",
    "insertText": "Skip(outSize)"
  }
]