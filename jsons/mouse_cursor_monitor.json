[
  {
    "label": "DesktopCaptureOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopCaptureOptions"
  },
  {
    "label": "DesktopFrame",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DesktopFrame"
  },
  {
    "label": "MouseCursor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MouseCursor"
  },
  {
    "label": "MouseCursorMonitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MouseCursorMonitor"
  },
  {
    "label": "CursorState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CursorState"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "Callback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Callback"
  },
  {
    "label": "OnMouseCursor()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_MOUSE_CURSOR_MONITOR_H_ # define MODULES_DESKTOP_CAPTURE_MOUSE_CURSOR_MONITOR_H_ # include<memory> # include \" modules / desktop_capture / desktop_capture_types . h \" # include \" modules / desktop_capture / desktop_geometry . h \" # include \" rtc_base / system / rtc_export . h \" namespace webrtc { class DesktopCaptureOptions ; class DesktopFrame ; class MouseCursor ; class MouseCursorMonitor { public : enum CursorState { INSIDE,OUTSIDE,} ; enum Mode { SHAPE_ONLY,SHAPE_AND_POSITION,} ; class Callback { public : void)",
    "insertText": "OnMouseCursor(MouseCursor* cursor)"
  },
  {
    "label": "OnMouseCursorPosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseCursorPosition(CursorState state, const DesktopVector& position)"
  },
  {
    "label": "OnMouseCursorPosition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMouseCursorPosition(const DesktopVector& position)"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (} protected : ~)",
    "insertText": "Callback()"
  },
  {
    "label": "MouseCursorMonitor()",
    "kind": "Method",
    "detail": "Function (} } ; ~)",
    "insertText": "MouseCursorMonitor()"
  },
  {
    "label": "CreateForWindow()",
    "kind": "Method",
    "detail": "Function (} MouseCursorMonitor*)",
    "insertText": "CreateForWindow(const DesktopCaptureOptions& options, WindowId window)"
  },
  {
    "label": "CreateForScreen()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT MouseCursorMonitor*)",
    "insertText": "CreateForScreen(const DesktopCaptureOptions& options, ScreenId screen)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<MouseCursorMonitor>)",
    "insertText": "Create(const DesktopCaptureOptions& options)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(Callback* callback, Mode mode)"
  },
  {
    "label": "Capture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Capture()"
  }
]