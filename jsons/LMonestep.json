[
  {
    "label": "minimizeOneStep()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_LMONESTEP_H # define EIGEN_LMONESTEP_H namespace Eigen { template<FunctorType> LevenbergMarquardtSpace::Status LevenbergMarquardt<FunctorType)",
    "insertText": "minimizeOneStep(FVectorType &x)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (using std::abs ; using std::sqrt ; RealScalar temp,temp1,temp2 ; RealScalar ratio ; RealScalar pnorm,xnorm,fnorm1,actred,dirder,prered ;)",
    "insertText": "eigen_assert(x.size()==n)"
  },
  {
    "label": "df()",
    "kind": "Method",
    "detail": "Function (temp = 0 . 0 ; xnorm = 0 . 0 ; Index df_ret = m_functor .)",
    "insertText": "df(x, m_fjac)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (QRSolver)",
    "insertText": "qrfac(m_fjac)"
  },
  {
    "label": "matrixR()",
    "kind": "Method",
    "detail": "Function (m_info = NumericalIssue ; return LevenbergMarquardtSpace::ImproperInputParameters ; } m_rfactor = qrfac .)",
    "insertText": "matrixR()"
  },
  {
    "label": "m_permutation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "m_permutation(qrfac.colsPermutation())"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (xnorm = m_diag .)",
    "insertText": "cwiseProduct(x).stableNorm()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_delta = m_factor* xnorm ;)",
    "insertText": "if(m_delta == 0.)"
  },
  {
    "label": "matrixQ()",
    "kind": "Method",
    "detail": "Function (} m_wa4 = m_fvec ; m_wa4 = qrfac .)",
    "insertText": "matrixQ().adjoint()"
  },
  {
    "label": "head()",
    "kind": "Method",
    "detail": "Function (m_qtf = m_wa4 .)",
    "insertText": "head(n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_gnorm = 0 . ;)",
    "insertText": "if(m_fnorm != 0.) for (Index j = 0; j < n; ++j) if (m_wa2[m_permutation.indices()[j]] != 0.) m_gnorm = (std::max)(m_gnorm, abs( m_rfactor.col(j).head(j+1).dot(m_qtf.head(j+1)/m_fnorm) / m_wa2[m_permutation.indices()[j]]))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return LevenbergMarquardtSpace::CosinusTooSmall ; })",
    "insertText": "if(!m_useExternalScaling) m_diag = m_diag.cwiseMax(m_wa2)"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (m_wa1 = - m_wa1 ; m_wa2 = x + m_wa1 ; pnorm = m_diag .)",
    "insertText": "cwiseProduct(m_wa1).stableNorm()"
  },
  {
    "label": "stableNorm()",
    "kind": "Method",
    "detail": "Function (+ + m_nfev ; fnorm1 = m_wa4 .)",
    "insertText": "stableNorm()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (actred = - 1 . ;)",
    "insertText": "if(Scalar(.1) * fnorm1 < m_fnorm) actred = 1. - numext::abs2(fnorm1 / m_fnorm)"
  },
  {
    "label": "Upper()",
    "kind": "Method",
    "detail": "Function (m_wa3 = m_rfactor . template triangularView<)",
    "insertText": "Upper() * (m_permutation.inverse() *m_wa1)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (temp1 =)",
    "insertText": "abs2(m_wa3.stableNorm() / m_fnorm)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (temp2 =)",
    "insertText": "abs2(sqrt(m_par) * pnorm / m_fnorm)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (prered = temp1 + temp2 /)",
    "insertText": "Scalar(.5)"
  },
  {
    "label": "dirder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dirder(temp1 + temp2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ratio = 0 . ;)",
    "insertText": "if(prered != 0.)"
  },
  {
    "label": "temp()",
    "kind": "Method",
    "detail": "Function (m_delta =)",
    "insertText": "temp(std::min)(m_delta, pnorm / RealScalar(.1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_par / = temp ; } else)",
    "insertText": "if(!(m_par != 0. && ratio < RealScalar(.75)))"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (m_delta = pnorm /)",
    "insertText": "RealScalar(.5)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ratio >= RealScalar(1e-4))"
  },
  {
    "label": "cwiseProduct()",
    "kind": "Method",
    "detail": "Function (x = m_wa2 ; m_wa2 = m_diag .)",
    "insertText": "cwiseProduct(x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_fnorm = fnorm1 ; + + m_iter ; })",
    "insertText": "if(abs(actred) <= m_ftol && prered <= m_ftol && Scalar(.5) * ratio <= 1. && m_delta <= m_xtol * xnorm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return LevenbergMarquardtSpace::RelativeErrorAndReductionTooSmall ; })",
    "insertText": "if(abs(actred) <= m_ftol && prered <= m_ftol && Scalar(.5) * ratio <= 1.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return LevenbergMarquardtSpace::RelativeReductionTooSmall ; })",
    "insertText": "if(m_delta <= m_xtol * xnorm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return LevenbergMarquardtSpace::RelativeErrorTooSmall ; })",
    "insertText": "if(m_nfev >= m_maxfev)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = NoConvergence ; return LevenbergMarquardtSpace::TooManyFunctionEvaluation ; })",
    "insertText": "if(abs(actred) <= NumTraits<Scalar>::epsilon() && prered <= NumTraits<Scalar>::epsilon() && Scalar(.5) * ratio <= 1.)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return LevenbergMarquardtSpace::FtolTooSmall ; })",
    "insertText": "if(m_delta <= NumTraits<Scalar>::epsilon() * xnorm)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return LevenbergMarquardtSpace::XtolTooSmall ; })",
    "insertText": "if(m_gnorm <= NumTraits<Scalar>::epsilon())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (m_info = Success ; return LevenbergMarquardtSpace::GtolTooSmall ; } })",
    "insertText": "while(ratio < Scalar(1e-4))"
  }
]