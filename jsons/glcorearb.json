[
  {
    "label": "__GLsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__GLsync"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __glcorearb_h_ # define __glcorearb_h_ 1 # ifdef __cplusplus \" C \" { # endif # if)",
    "insertText": "defined(_WIN32) && !defined(APIENTRY) && !defined(__CYGWIN__) && !defined(__SCITECH_SNAP__)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef unsigned int GLenum ; typedef float GLfloat ; typedef int GLint ; typedef int GLsizei ; typedef unsigned int GLbitfield ; typedef double GLdouble ; typedef unsigned int GLuint ; typedef unsigned char GLboolean ; typedef unsigned char GLubyte ; typedef)",
    "insertText": "void(APIENTRYP PFNGLCULLFACEPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRONTFACEPROC) (GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLHINTPROC) (GLenum target, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLINEWIDTHPROC) (GLfloat width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTSIZEPROC) (GLfloat size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOLYGONMODEPROC) (GLenum face, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCISSORPROC) (GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERFPROC) (GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERFVPROC) (GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIVPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE1DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE2DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWBUFFERPROC) (GLenum buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARPROC) (GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARSTENCILPROC) (GLint s)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARDEPTHPROC) (GLdouble depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILMASKPROC) (GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORMASKPROC) (GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHMASKPROC) (GLboolean flag)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEPROC) (GLenum cap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEPROC) (GLenum cap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFINISHPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCPROC) (GLenum sfactor, GLenum dfactor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLOGICOPPROC) (GLenum opcode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILFUNCPROC) (GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILOPPROC) (GLenum fail, GLenum zfail, GLenum zpass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHFUNCPROC) (GLenum func)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELSTOREFPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPIXELSTOREIPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREADBUFFERPROC) (GLenum src)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREADPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBOOLEANVPROC) (GLenum pname, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETDOUBLEVPROC) (GLenum pname, GLdouble *data)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLGETERRORPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFLOATVPROC) (GLenum pname, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGERVPROC) (GLenum pname, GLint *data)"
  },
  {
    "label": "GLubyte()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "GLubyte(APIENTRYP PFNGLGETSTRINGPROC) (GLenum name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERFVPROC) (GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXLEVELPARAMETERFVPROC) (GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXLEVELPARAMETERIVPROC) (GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISENABLEDPROC) (GLenum cap)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEPROC) (GLdouble near, GLdouble far)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTPROC) (GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCullFace()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glCullFace(GLenum mode)"
  },
  {
    "label": "glFrontFace()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFrontFace(GLenum mode)"
  },
  {
    "label": "glHint()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glHint(GLenum target, GLenum mode)"
  },
  {
    "label": "glLineWidth()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLineWidth(GLfloat width)"
  },
  {
    "label": "glPointSize()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointSize(GLfloat size)"
  },
  {
    "label": "glPolygonMode()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPolygonMode(GLenum face, GLenum mode)"
  },
  {
    "label": "glScissor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScissor(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterf(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glDrawBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawBuffer(GLenum buf)"
  },
  {
    "label": "glClear()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClear(GLbitfield mask)"
  },
  {
    "label": "glClearColor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glClearStencil()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearStencil(GLint s)"
  },
  {
    "label": "glClearDepth()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearDepth(GLdouble depth)"
  },
  {
    "label": "glStencilMask()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilMask(GLuint mask)"
  },
  {
    "label": "glColorMask()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "glDepthMask()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthMask(GLboolean flag)"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisable(GLenum cap)"
  },
  {
    "label": "glEnable()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnable(GLenum cap)"
  },
  {
    "label": "glFinish()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFinish(void)"
  },
  {
    "label": "glFlush()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlush(void)"
  },
  {
    "label": "glBlendFunc()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFunc(GLenum sfactor, GLenum dfactor)"
  },
  {
    "label": "glLogicOp()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLogicOp(GLenum opcode)"
  },
  {
    "label": "glStencilFunc()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilFunc(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilOp()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)"
  },
  {
    "label": "glDepthFunc()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthFunc(GLenum func)"
  },
  {
    "label": "glPixelStoref()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelStoref(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelStorei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPixelStorei(GLenum pname, GLint param)"
  },
  {
    "label": "glReadBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReadBuffer(GLenum src)"
  },
  {
    "label": "glReadPixels()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetBooleanv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBooleanv(GLenum pname, GLboolean *data)"
  },
  {
    "label": "glGetDoublev()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetDoublev(GLenum pname, GLdouble *data)"
  },
  {
    "label": "glGetError()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glGetError(void)"
  },
  {
    "label": "glGetFloatv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFloatv(GLenum pname, GLfloat *data)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetIntegerv(GLenum pname, GLint *data)"
  },
  {
    "label": "glGetString()",
    "kind": "Method",
    "detail": "Function (GLAPI const GLubyte* APIENTRY)",
    "insertText": "glGetString(GLenum name)"
  },
  {
    "label": "glGetTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetTexParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsEnabled(GLenum cap)"
  },
  {
    "label": "glDepthRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRange(GLdouble near, GLdouble far)"
  },
  {
    "label": "glViewport()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glViewport(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_1 # define GL_VERSION_1_1 1 typedef float GLclampf ; typedef double GLclampd ; # define GL_DEPTH_BUFFER_BIT 0 x00000100 # define GL_STENCIL_BUFFER_BIT 0 x00000400 # define GL_COLOR_BUFFER_BIT 0 x00004000 # define GL_FALSE 0 # define GL_TRUE 1 # define GL_POINTS 0 x0000 # define GL_LINES 0 x0001 # define GL_LINE_LOOP 0 x0002 # define GL_LINE_STRIP 0 x0003 # define GL_TRIANGLES 0 x0004 # define GL_TRIANGLE_STRIP 0 x0005 # define GL_TRIANGLE_FAN 0 x0006 # define GL_QUADS 0 x0007 # define GL_NEVER 0 x0200 # define GL_LESS 0 x0201 # define GL_EQUAL 0 x0202 # define GL_LEQUAL 0 x0203 # define GL_GREATER 0 x0204 # define GL_NOTEQUAL 0 x0205 # define GL_GEQUAL 0 x0206 # define GL_ALWAYS 0 x0207 # define GL_ZERO 0 # define GL_ONE 1 # define GL_SRC_COLOR 0 x0300 # define GL_ONE_MINUS_SRC_COLOR 0 x0301 # define GL_SRC_ALPHA 0 x0302 # define GL_ONE_MINUS_SRC_ALPHA 0 x0303 # define GL_DST_ALPHA 0 x0304 # define GL_ONE_MINUS_DST_ALPHA 0 x0305 # define GL_DST_COLOR 0 x0306 # define GL_ONE_MINUS_DST_COLOR 0 x0307 # define GL_SRC_ALPHA_SATURATE 0 x0308 # define GL_NONE 0 # define GL_FRONT_LEFT 0 x0400 # define GL_FRONT_RIGHT 0 x0401 # define GL_BACK_LEFT 0 x0402 # define GL_BACK_RIGHT 0 x0403 # define GL_FRONT 0 x0404 # define GL_BACK 0 x0405 # define GL_LEFT 0 x0406 # define GL_RIGHT 0 x0407 # define GL_FRONT_AND_BACK 0 x0408 # define GL_NO_ERROR 0 # define GL_INVALID_ENUM 0 x0500 # define GL_INVALID_VALUE 0 x0501 # define GL_INVALID_OPERATION 0 x0502 # define GL_OUT_OF_MEMORY 0 x0505 # define GL_CW 0 x0900 # define GL_CCW 0 x0901 # define GL_POINT_SIZE 0 x0B11 # define GL_POINT_SIZE_RANGE 0 x0B12 # define GL_POINT_SIZE_GRANULARITY 0 x0B13 # define GL_LINE_SMOOTH 0 x0B20 # define GL_LINE_WIDTH 0 x0B21 # define GL_LINE_WIDTH_RANGE 0 x0B22 # define GL_LINE_WIDTH_GRANULARITY 0 x0B23 # define GL_POLYGON_MODE 0 x0B40 # define GL_POLYGON_SMOOTH 0 x0B41 # define GL_CULL_FACE 0 x0B44 # define GL_CULL_FACE_MODE 0 x0B45 # define GL_FRONT_FACE 0 x0B46 # define GL_DEPTH_RANGE 0 x0B70 # define GL_DEPTH_TEST 0 x0B71 # define GL_DEPTH_WRITEMASK 0 x0B72 # define GL_DEPTH_CLEAR_VALUE 0 x0B73 # define GL_DEPTH_FUNC 0 x0B74 # define GL_STENCIL_TEST 0 x0B90 # define GL_STENCIL_CLEAR_VALUE 0 x0B91 # define GL_STENCIL_FUNC 0 x0B92 # define GL_STENCIL_VALUE_MASK 0 x0B93 # define GL_STENCIL_FAIL 0 x0B94 # define GL_STENCIL_PASS_DEPTH_FAIL 0 x0B95 # define GL_STENCIL_PASS_DEPTH_PASS 0 x0B96 # define GL_STENCIL_REF 0 x0B97 # define GL_STENCIL_WRITEMASK 0 x0B98 # define GL_VIEWPORT 0 x0BA2 # define GL_DITHER 0 x0BD0 # define GL_BLEND_DST 0 x0BE0 # define GL_BLEND_SRC 0 x0BE1 # define GL_BLEND 0 x0BE2 # define GL_LOGIC_OP_MODE 0 x0BF0 # define GL_COLOR_LOGIC_OP 0 x0BF2 # define GL_DRAW_BUFFER 0 x0C01 # define GL_READ_BUFFER 0 x0C02 # define GL_SCISSOR_BOX 0 x0C10 # define GL_SCISSOR_TEST 0 x0C11 # define GL_COLOR_CLEAR_VALUE 0 x0C22 # define GL_COLOR_WRITEMASK 0 x0C23 # define GL_DOUBLEBUFFER 0 x0C32 # define GL_STEREO 0 x0C33 # define GL_LINE_SMOOTH_HINT 0 x0C52 # define GL_POLYGON_SMOOTH_HINT 0 x0C53 # define GL_UNPACK_SWAP_BYTES 0 x0CF0 # define GL_UNPACK_LSB_FIRST 0 x0CF1 # define GL_UNPACK_ROW_LENGTH 0 x0CF2 # define GL_UNPACK_SKIP_ROWS 0 x0CF3 # define GL_UNPACK_SKIP_PIXELS 0 x0CF4 # define GL_UNPACK_ALIGNMENT 0 x0CF5 # define GL_PACK_SWAP_BYTES 0 x0D00 # define GL_PACK_LSB_FIRST 0 x0D01 # define GL_PACK_ROW_LENGTH 0 x0D02 # define GL_PACK_SKIP_ROWS 0 x0D03 # define GL_PACK_SKIP_PIXELS 0 x0D04 # define GL_PACK_ALIGNMENT 0 x0D05 # define GL_MAX_TEXTURE_SIZE 0 x0D33 # define GL_MAX_VIEWPORT_DIMS 0 x0D3A # define GL_SUBPIXEL_BITS 0 x0D50 # define GL_TEXTURE_1D 0 x0DE0 # define GL_TEXTURE_2D 0 x0DE1 # define GL_POLYGON_OFFSET_UNITS 0 x2A00 # define GL_POLYGON_OFFSET_POINT 0 x2A01 # define GL_POLYGON_OFFSET_LINE 0 x2A02 # define GL_POLYGON_OFFSET_FILL 0 x8037 # define GL_POLYGON_OFFSET_FACTOR 0 x8038 # define GL_TEXTURE_BINDING_1D 0 x8068 # define GL_TEXTURE_BINDING_2D 0 x8069 # define GL_TEXTURE_WIDTH 0 x1000 # define GL_TEXTURE_HEIGHT 0 x1001 # define GL_TEXTURE_INTERNAL_FORMAT 0 x1003 # define GL_TEXTURE_BORDER_COLOR 0 x1004 # define GL_TEXTURE_RED_SIZE 0 x805C # define GL_TEXTURE_GREEN_SIZE 0 x805D # define GL_TEXTURE_BLUE_SIZE 0 x805E # define GL_TEXTURE_ALPHA_SIZE 0 x805F # define GL_DONT_CARE 0 x1100 # define GL_FASTEST 0 x1101 # define GL_NICEST 0 x1102 # define GL_BYTE 0 x1400 # define GL_UNSIGNED_BYTE 0 x1401 # define GL_SHORT 0 x1402 # define GL_UNSIGNED_SHORT 0 x1403 # define GL_INT 0 x1404 # define GL_UNSIGNED_INT 0 x1405 # define GL_FLOAT 0 x1406 # define GL_DOUBLE 0 x140A # define GL_STACK_OVERFLOW 0 x0503 # define GL_STACK_UNDERFLOW 0 x0504 # define GL_CLEAR 0 x1500 # define GL_AND 0 x1501 # define GL_AND_REVERSE 0 x1502 # define GL_COPY 0 x1503 # define GL_AND_INVERTED 0 x1504 # define GL_NOOP 0 x1505 # define GL_XOR 0 x1506 # define GL_OR 0 x1507 # define GL_NOR 0 x1508 # define GL_EQUIV 0 x1509 # define GL_INVERT 0 x150A # define GL_OR_REVERSE 0 x150B # define GL_COPY_INVERTED 0 x150C # define GL_OR_INVERTED 0 x150D # define GL_NAND 0 x150E # define GL_SET 0 x150F # define GL_TEXTURE 0 x1702 # define GL_COLOR 0 x1800 # define GL_DEPTH 0 x1801 # define GL_STENCIL 0 x1802 # define GL_STENCIL_INDEX 0 x1901 # define GL_DEPTH_COMPONENT 0 x1902 # define GL_RED 0 x1903 # define GL_GREEN 0 x1904 # define GL_BLUE 0 x1905 # define GL_ALPHA 0 x1906 # define GL_RGB 0 x1907 # define GL_RGBA 0 x1908 # define GL_POINT 0 x1B00 # define GL_LINE 0 x1B01 # define GL_FILL 0 x1B02 # define GL_KEEP 0 x1E00 # define GL_REPLACE 0 x1E01 # define GL_INCR 0 x1E02 # define GL_DECR 0 x1E03 # define GL_VENDOR 0 x1F00 # define GL_RENDERER 0 x1F01 # define GL_VERSION 0 x1F02 # define GL_EXTENSIONS 0 x1F03 # define GL_NEAREST 0 x2600 # define GL_LINEAR 0 x2601 # define GL_NEAREST_MIPMAP_NEAREST 0 x2700 # define GL_LINEAR_MIPMAP_NEAREST 0 x2701 # define GL_NEAREST_MIPMAP_LINEAR 0 x2702 # define GL_LINEAR_MIPMAP_LINEAR 0 x2703 # define GL_TEXTURE_MAG_FILTER 0 x2800 # define GL_TEXTURE_MIN_FILTER 0 x2801 # define GL_TEXTURE_WRAP_S 0 x2802 # define GL_TEXTURE_WRAP_T 0 x2803 # define GL_PROXY_TEXTURE_1D 0 x8063 # define GL_PROXY_TEXTURE_2D 0 x8064 # define GL_REPEAT 0 x2901 # define GL_R3_G3_B2 0 x2A10 # define GL_RGB4 0 x804F # define GL_RGB5 0 x8050 # define GL_RGB8 0 x8051 # define GL_RGB10 0 x8052 # define GL_RGB12 0 x8053 # define GL_RGB16 0 x8054 # define GL_RGBA2 0 x8055 # define GL_RGBA4 0 x8056 # define GL_RGB5_A1 0 x8057 # define GL_RGBA8 0 x8058 # define GL_RGB10_A2 0 x8059 # define GL_RGBA12 0 x805A # define GL_RGBA16 0 x805B # define GL_VERTEX_ARRAY 0 x8074 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSPROC) (GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPOINTERVPROC) (GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOLYGONOFFSETPROC) (GLfloat factor, GLfloat units)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTEXTUREPROC) (GLenum target, GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETETEXTURESPROC) (GLsizei n, const GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENTEXTURESPROC) (GLsizei n, GLuint *textures)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTEXTUREPROC) (GLuint texture)"
  },
  {
    "label": "glDrawArrays()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawArrays(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glDrawElements()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glGetPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetPointerv(GLenum pname, void **params)"
  },
  {
    "label": "glPolygonOffset()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPolygonOffset(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glCopyTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glBindTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTexture(GLenum target, GLuint texture)"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteTextures(GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenTextures(GLsizei n, GLuint *textures)"
  },
  {
    "label": "glIsTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTexture(GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_2 # define GL_VERSION_1_2 1 # define GL_UNSIGNED_BYTE_3_3_2 0 x8032 # define GL_UNSIGNED_SHORT_4_4_4_4 0 x8033 # define GL_UNSIGNED_SHORT_5_5_5_1 0 x8034 # define GL_UNSIGNED_INT_8_8_8_8 0 x8035 # define GL_UNSIGNED_INT_10_10_10_2 0 x8036 # define GL_TEXTURE_BINDING_3D 0 x806A # define GL_PACK_SKIP_IMAGES 0 x806B # define GL_PACK_IMAGE_HEIGHT 0 x806C # define GL_UNPACK_SKIP_IMAGES 0 x806D # define GL_UNPACK_IMAGE_HEIGHT 0 x806E # define GL_TEXTURE_3D 0 x806F # define GL_PROXY_TEXTURE_3D 0 x8070 # define GL_TEXTURE_DEPTH 0 x8071 # define GL_TEXTURE_WRAP_R 0 x8072 # define GL_MAX_3D_TEXTURE_SIZE 0 x8073 # define GL_UNSIGNED_BYTE_2_3_3_REV 0 x8362 # define GL_UNSIGNED_SHORT_5_6_5 0 x8363 # define GL_UNSIGNED_SHORT_5_6_5_REV 0 x8364 # define GL_UNSIGNED_SHORT_4_4_4_4_REV 0 x8365 # define GL_UNSIGNED_SHORT_1_5_5_5_REV 0 x8366 # define GL_UNSIGNED_INT_8_8_8_8_REV 0 x8367 # define GL_UNSIGNED_INT_2_10_10_10_REV 0 x8368 # define GL_BGR 0 x80E0 # define GL_BGRA 0 x80E1 # define GL_MAX_ELEMENTS_VERTICES 0 x80E8 # define GL_MAX_ELEMENTS_INDICES 0 x80E9 # define GL_CLAMP_TO_EDGE 0 x812F # define GL_TEXTURE_MIN_LOD 0 x813A # define GL_TEXTURE_MAX_LOD 0 x813B # define GL_TEXTURE_BASE_LEVEL 0 x813C # define GL_TEXTURE_MAX_LEVEL 0 x813D # define GL_SMOOTH_POINT_SIZE_RANGE 0 x0B12 # define GL_SMOOTH_POINT_SIZE_GRANULARITY 0 x0B13 # define GL_SMOOTH_LINE_WIDTH_RANGE 0 x0B22 # define GL_SMOOTH_LINE_WIDTH_GRANULARITY 0 x0B23 # define GL_ALIASED_LINE_WIDTH_RANGE 0 x846E typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWRANGEELEMENTSPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE3DPROC) (GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glDrawRangeElements()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_3 # define GL_VERSION_1_3 1 # define GL_TEXTURE0 0 x84C0 # define GL_TEXTURE1 0 x84C1 # define GL_TEXTURE2 0 x84C2 # define GL_TEXTURE3 0 x84C3 # define GL_TEXTURE4 0 x84C4 # define GL_TEXTURE5 0 x84C5 # define GL_TEXTURE6 0 x84C6 # define GL_TEXTURE7 0 x84C7 # define GL_TEXTURE8 0 x84C8 # define GL_TEXTURE9 0 x84C9 # define GL_TEXTURE10 0 x84CA # define GL_TEXTURE11 0 x84CB # define GL_TEXTURE12 0 x84CC # define GL_TEXTURE13 0 x84CD # define GL_TEXTURE14 0 x84CE # define GL_TEXTURE15 0 x84CF # define GL_TEXTURE16 0 x84D0 # define GL_TEXTURE17 0 x84D1 # define GL_TEXTURE18 0 x84D2 # define GL_TEXTURE19 0 x84D3 # define GL_TEXTURE20 0 x84D4 # define GL_TEXTURE21 0 x84D5 # define GL_TEXTURE22 0 x84D6 # define GL_TEXTURE23 0 x84D7 # define GL_TEXTURE24 0 x84D8 # define GL_TEXTURE25 0 x84D9 # define GL_TEXTURE26 0 x84DA # define GL_TEXTURE27 0 x84DB # define GL_TEXTURE28 0 x84DC # define GL_TEXTURE29 0 x84DD # define GL_TEXTURE30 0 x84DE # define GL_TEXTURE31 0 x84DF # define GL_ACTIVE_TEXTURE 0 x84E0 # define GL_MULTISAMPLE 0 x809D # define GL_SAMPLE_ALPHA_TO_COVERAGE 0 x809E # define GL_SAMPLE_ALPHA_TO_ONE 0 x809F # define GL_SAMPLE_COVERAGE 0 x80A0 # define GL_SAMPLE_BUFFERS 0 x80A8 # define GL_SAMPLES 0 x80A9 # define GL_SAMPLE_COVERAGE_VALUE 0 x80AA # define GL_SAMPLE_COVERAGE_INVERT 0 x80AB # define GL_TEXTURE_CUBE_MAP 0 x8513 # define GL_TEXTURE_BINDING_CUBE_MAP 0 x8514 # define GL_TEXTURE_CUBE_MAP_POSITIVE_X 0 x8515 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_X 0 x8516 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Y 0 x8517 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Y 0 x8518 # define GL_TEXTURE_CUBE_MAP_POSITIVE_Z 0 x8519 # define GL_TEXTURE_CUBE_MAP_NEGATIVE_Z 0 x851A # define GL_PROXY_TEXTURE_CUBE_MAP 0 x851B # define GL_MAX_CUBE_MAP_TEXTURE_SIZE 0 x851C # define GL_COMPRESSED_RGB 0 x84ED # define GL_COMPRESSED_RGBA 0 x84EE # define GL_TEXTURE_COMPRESSION_HINT 0 x84EF # define GL_TEXTURE_COMPRESSED_IMAGE_SIZE 0 x86A0 # define GL_TEXTURE_COMPRESSED 0 x86A1 # define GL_NUM_COMPRESSED_TEXTURE_FORMATS 0 x86A2 # define GL_COMPRESSED_TEXTURE_FORMATS 0 x86A3 # define GL_CLAMP_TO_BORDER 0 x812D typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVETEXTUREPROC) (GLenum texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLECOVERAGEPROC) (GLfloat value, GLboolean invert)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE3DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE2DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXIMAGE1DPROC) (GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC) (GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint level, void *img)"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glActiveTexture(GLenum texture)"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSampleCoverage(GLfloat value, GLboolean invert)"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glGetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTexImage(GLenum target, GLint level, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_4 # define GL_VERSION_1_4 1 # define GL_BLEND_DST_RGB 0 x80C8 # define GL_BLEND_SRC_RGB 0 x80C9 # define GL_BLEND_DST_ALPHA 0 x80CA # define GL_BLEND_SRC_ALPHA 0 x80CB # define GL_POINT_FADE_THRESHOLD_SIZE 0 x8128 # define GL_DEPTH_COMPONENT16 0 x81A5 # define GL_DEPTH_COMPONENT24 0 x81A6 # define GL_DEPTH_COMPONENT32 0 x81A7 # define GL_MIRRORED_REPEAT 0 x8370 # define GL_MAX_TEXTURE_LOD_BIAS 0 x84FD # define GL_TEXTURE_LOD_BIAS 0 x8501 # define GL_INCR_WRAP 0 x8507 # define GL_DECR_WRAP 0 x8508 # define GL_TEXTURE_DEPTH_SIZE 0 x884A # define GL_TEXTURE_COMPARE_MODE 0 x884C # define GL_TEXTURE_COMPARE_FUNC 0 x884D # define GL_FUNC_ADD 0 x8006 # define GL_FUNC_SUBTRACT 0 x800A # define GL_FUNC_REVERSE_SUBTRACT 0 x800B # define GL_MIN 0 x8007 # define GL_MAX 0 x8008 # define GL_CONSTANT_COLOR 0 x8001 # define GL_ONE_MINUS_CONSTANT_COLOR 0 x8002 # define GL_CONSTANT_ALPHA 0 x8003 # define GL_ONE_MINUS_CONSTANT_ALPHA 0 x8004 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEPROC) (GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSPROC) (GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFPROC) (GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERFVPROC) (GLenum pname, const GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERIPROC) (GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOINTPARAMETERIVPROC) (GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDCOLORPROC) (GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONPROC) (GLenum mode)"
  },
  {
    "label": "glBlendFuncSeparate()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glMultiDrawArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)"
  },
  {
    "label": "glMultiDrawElements()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)"
  },
  {
    "label": "glPointParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterf(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameterfv(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPointParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameteri(GLenum pname, GLint param)"
  },
  {
    "label": "glPointParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPointParameteriv(GLenum pname, const GLint *params)"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquation(GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_1_5 # define GL_VERSION_1_5 1 # include<stddef . h> typedef ptrdiff_t GLsizeiptr ; typedef ptrdiff_t GLintptr ; # define GL_BUFFER_SIZE 0 x8764 # define GL_BUFFER_USAGE 0 x8765 # define GL_QUERY_COUNTER_BITS 0 x8864 # define GL_CURRENT_QUERY 0 x8865 # define GL_QUERY_RESULT 0 x8866 # define GL_QUERY_RESULT_AVAILABLE 0 x8867 # define GL_ARRAY_BUFFER 0 x8892 # define GL_ELEMENT_ARRAY_BUFFER 0 x8893 # define GL_ARRAY_BUFFER_BINDING 0 x8894 # define GL_ELEMENT_ARRAY_BUFFER_BINDING 0 x8895 # define GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING 0 x889F # define GL_READ_ONLY 0 x88B8 # define GL_WRITE_ONLY 0 x88B9 # define GL_READ_WRITE 0 x88BA # define GL_BUFFER_ACCESS 0 x88BB # define GL_BUFFER_MAPPED 0 x88BC # define GL_BUFFER_MAP_POINTER 0 x88BD # define GL_STREAM_DRAW 0 x88E0 # define GL_STREAM_READ 0 x88E1 # define GL_STREAM_COPY 0 x88E2 # define GL_STATIC_DRAW 0 x88E4 # define GL_STATIC_READ 0 x88E5 # define GL_STATIC_COPY 0 x88E6 # define GL_DYNAMIC_DRAW 0 x88E8 # define GL_DYNAMIC_READ 0 x88E9 # define GL_DYNAMIC_COPY 0 x88EA # define GL_SAMPLES_PASSED 0 x8914 # define GL_SRC1_ALPHA 0 x8589 typedef)",
    "insertText": "void(APIENTRYP PFNGLGENQUERIESPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEQUERIESPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISQUERYPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINQUERYPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDQUERYPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTIVPROC) (GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTUIVPROC) (GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERPROC) (GLenum target, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEBUFFERSPROC) (GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENBUFFERSPROC) (GLsizei n, GLuint *buffers)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISBUFFERPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERDATAPROC) (GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERSUBDATAPROC) (GLenum target, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPBUFFERPROC) (GLenum target, GLenum access)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLUNMAPBUFFERPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPOINTERVPROC) (GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glGenQueries()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glGenQueries(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteQueries()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteQueries(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsQuery()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsQuery(GLuint id)"
  },
  {
    "label": "glBeginQuery()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginQuery(GLenum target, GLuint id)"
  },
  {
    "label": "glEndQuery()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndQuery(GLenum target)"
  },
  {
    "label": "glGetQueryiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBuffer(GLenum target, GLuint buffer)"
  },
  {
    "label": "glDeleteBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteBuffers(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glIsBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsBuffer(GLuint buffer)"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glGetBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glMapBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapBuffer(GLenum target, GLenum access)"
  },
  {
    "label": "glUnmapBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glUnmapBuffer(GLenum target)"
  },
  {
    "label": "glGetBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetBufferPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferPointerv(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_2_0 # define GL_VERSION_2_0 1 typedef char GLchar ; typedef short GLshort ; typedef signed char GLbyte ; typedef unsigned short GLushort ; # define GL_BLEND_EQUATION_RGB 0 x8009 # define GL_VERTEX_ATTRIB_ARRAY_ENABLED 0 x8622 # define GL_VERTEX_ATTRIB_ARRAY_SIZE 0 x8623 # define GL_VERTEX_ATTRIB_ARRAY_STRIDE 0 x8624 # define GL_VERTEX_ATTRIB_ARRAY_TYPE 0 x8625 # define GL_CURRENT_VERTEX_ATTRIB 0 x8626 # define GL_VERTEX_PROGRAM_POINT_SIZE 0 x8642 # define GL_VERTEX_ATTRIB_ARRAY_POINTER 0 x8645 # define GL_STENCIL_BACK_FUNC 0 x8800 # define GL_STENCIL_BACK_FAIL 0 x8801 # define GL_STENCIL_BACK_PASS_DEPTH_FAIL 0 x8802 # define GL_STENCIL_BACK_PASS_DEPTH_PASS 0 x8803 # define GL_MAX_DRAW_BUFFERS 0 x8824 # define GL_DRAW_BUFFER0 0 x8825 # define GL_DRAW_BUFFER1 0 x8826 # define GL_DRAW_BUFFER2 0 x8827 # define GL_DRAW_BUFFER3 0 x8828 # define GL_DRAW_BUFFER4 0 x8829 # define GL_DRAW_BUFFER5 0 x882A # define GL_DRAW_BUFFER6 0 x882B # define GL_DRAW_BUFFER7 0 x882C # define GL_DRAW_BUFFER8 0 x882D # define GL_DRAW_BUFFER9 0 x882E # define GL_DRAW_BUFFER10 0 x882F # define GL_DRAW_BUFFER11 0 x8830 # define GL_DRAW_BUFFER12 0 x8831 # define GL_DRAW_BUFFER13 0 x8832 # define GL_DRAW_BUFFER14 0 x8833 # define GL_DRAW_BUFFER15 0 x8834 # define GL_BLEND_EQUATION_ALPHA 0 x883D # define GL_MAX_VERTEX_ATTRIBS 0 x8869 # define GL_VERTEX_ATTRIB_ARRAY_NORMALIZED 0 x886A # define GL_MAX_TEXTURE_IMAGE_UNITS 0 x8872 # define GL_FRAGMENT_SHADER 0 x8B30 # define GL_VERTEX_SHADER 0 x8B31 # define GL_MAX_FRAGMENT_UNIFORM_COMPONENTS 0 x8B49 # define GL_MAX_VERTEX_UNIFORM_COMPONENTS 0 x8B4A # define GL_MAX_VARYING_FLOATS 0 x8B4B # define GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS 0 x8B4C # define GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS 0 x8B4D # define GL_SHADER_TYPE 0 x8B4F # define GL_FLOAT_VEC2 0 x8B50 # define GL_FLOAT_VEC3 0 x8B51 # define GL_FLOAT_VEC4 0 x8B52 # define GL_INT_VEC2 0 x8B53 # define GL_INT_VEC3 0 x8B54 # define GL_INT_VEC4 0 x8B55 # define GL_BOOL 0 x8B56 # define GL_BOOL_VEC2 0 x8B57 # define GL_BOOL_VEC3 0 x8B58 # define GL_BOOL_VEC4 0 x8B59 # define GL_FLOAT_MAT2 0 x8B5A # define GL_FLOAT_MAT3 0 x8B5B # define GL_FLOAT_MAT4 0 x8B5C # define GL_SAMPLER_1D 0 x8B5D # define GL_SAMPLER_2D 0 x8B5E # define GL_SAMPLER_3D 0 x8B5F # define GL_SAMPLER_CUBE 0 x8B60 # define GL_SAMPLER_1D_SHADOW 0 x8B61 # define GL_SAMPLER_2D_SHADOW 0 x8B62 # define GL_DELETE_STATUS 0 x8B80 # define GL_COMPILE_STATUS 0 x8B81 # define GL_LINK_STATUS 0 x8B82 # define GL_VALIDATE_STATUS 0 x8B83 # define GL_INFO_LOG_LENGTH 0 x8B84 # define GL_ATTACHED_SHADERS 0 x8B85 # define GL_ACTIVE_UNIFORMS 0 x8B86 # define GL_ACTIVE_UNIFORM_MAX_LENGTH 0 x8B87 # define GL_SHADER_SOURCE_LENGTH 0 x8B88 # define GL_ACTIVE_ATTRIBUTES 0 x8B89 # define GL_ACTIVE_ATTRIBUTE_MAX_LENGTH 0 x8B8A # define GL_FRAGMENT_SHADER_DERIVATIVE_HINT 0 x8B8B # define GL_SHADING_LANGUAGE_VERSION 0 x8B8C # define GL_CURRENT_PROGRAM 0 x8B8D # define GL_POINT_SPRITE_COORD_ORIGIN 0 x8CA0 # define GL_LOWER_LEFT 0 x8CA1 # define GL_UPPER_LEFT 0 x8CA2 # define GL_STENCIL_BACK_REF 0 x8CA3 # define GL_STENCIL_BACK_VALUE_MASK 0 x8CA4 # define GL_STENCIL_BACK_WRITEMASK 0 x8CA5 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEPROC) (GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWBUFFERSPROC) (GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILOPSEPARATEPROC) (GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILFUNCSEPARATEPROC) (GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSTENCILMASKSEPARATEPROC) (GLenum face, GLuint mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLATTACHSHADERPROC) (GLuint program, GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDATTRIBLOCATIONPROC) (GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPILESHADERPROC) (GLuint shader)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLCREATEPROGRAMPROC) (void)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLCREATESHADERPROC) (GLenum type)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETESHADERPROC) (GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDETACHSHADERPROC) (GLuint program, GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXATTRIBARRAYPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXATTRIBARRAYPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEATTRIBPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETATTACHEDSHADERSPROC) (GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETATTRIBLOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMIVPROC) (GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMINFOLOGPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERIVPROC) (GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERINFOLOGPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERSOURCEPROC) (GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETUNIFORMLOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMFVPROC) (GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMIVPROC) (GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBDVPROC) (GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBFVPROC) (GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIVPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBPOINTERVPROC) (GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISSHADERPROC) (GLuint shader)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLLINKPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADERSOURCEPROC) (GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUSEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1FPROC) (GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2FPROC) (GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4FPROC) (GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1IPROC) (GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2IPROC) (GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3IPROC) (GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4IPROC) (GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4FVPROC) (GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4IVPROC) (GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVALIDATEPROGRAMPROC) (GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DPROC) (GLuint index, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FPROC) (GLuint index, GLfloat x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SPROC) (GLuint index, GLshort x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB1SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DPROC) (GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FPROC) (GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SPROC) (GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB2SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SPROC) (GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB3SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NBVPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NIVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NSVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUBPROC) (GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUBVPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4NUSVPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4BVPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4FVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SPROC) (GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UBVPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIB4USVPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBPOINTERPROC) (GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glBlendEquationSeparate()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glDrawBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawBuffers(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glStencilOpSeparate()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glStencilFuncSeparate()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilMaskSeparate()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glStencilMaskSeparate(GLenum face, GLuint mask)"
  },
  {
    "label": "glAttachShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glAttachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glBindAttribLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "glCompileShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompileShader(GLuint shader)"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glCreateProgram(void)"
  },
  {
    "label": "glCreateShader()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glCreateShader(GLenum type)"
  },
  {
    "label": "glDeleteProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteProgram(GLuint program)"
  },
  {
    "label": "glDeleteShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteShader(GLuint shader)"
  },
  {
    "label": "glDetachShader()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDetachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glDisableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glEnableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glGetActiveAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetActiveUniform()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetAttachedShaders()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "glGetAttribLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetAttribLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetProgramiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramiv(GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramInfoLog()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderiv(GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderInfoLog()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderSource()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "glGetUniformLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetUniformLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetUniformfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformfv(GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformiv(GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "glGetVertexAttribdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glIsProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsProgram(GLuint program)"
  },
  {
    "label": "glIsShader()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsShader(GLuint shader)"
  },
  {
    "label": "glLinkProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glLinkProgram(GLuint program)"
  },
  {
    "label": "glShaderSource()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "glUseProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUseProgram(GLuint program)"
  },
  {
    "label": "glUniform1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1f(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2f(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1i(GLint location, GLint v0)"
  },
  {
    "label": "glUniform2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2i(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glValidateProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glValidateProgram(GLuint program)"
  },
  {
    "label": "glVertexAttrib1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1f(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1s(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib1sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2s(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib2sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib3sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nbv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nbv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4Niv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Niv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4Nsv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nsv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nub()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4Nubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4Nuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nuiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4Nusv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4Nusv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttrib4bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4s()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4usv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttrib4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_2_1 # define GL_VERSION_2_1 1 # define GL_PIXEL_PACK_BUFFER 0 x88EB # define GL_PIXEL_UNPACK_BUFFER 0 x88EC # define GL_PIXEL_PACK_BUFFER_BINDING 0 x88ED # define GL_PIXEL_UNPACK_BUFFER_BINDING 0 x88EF # define GL_FLOAT_MAT2x3 0 x8B65 # define GL_FLOAT_MAT2x4 0 x8B66 # define GL_FLOAT_MAT3x2 0 x8B67 # define GL_FLOAT_MAT3x4 0 x8B68 # define GL_FLOAT_MAT4x2 0 x8B69 # define GL_FLOAT_MAT4x3 0 x8B6A # define GL_SRGB 0 x8C40 # define GL_SRGB8 0 x8C41 # define GL_SRGB_ALPHA 0 x8C42 # define GL_SRGB8_ALPHA8 0 x8C43 # define GL_COMPRESSED_SRGB 0 x8C48 # define GL_COMPRESSED_SRGB_ALPHA 0 x8C49 typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X2FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X4FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X3FVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_0 # define GL_VERSION_3_0 1 typedef unsigned short GLhalf ; # define GL_COMPARE_REF_TO_TEXTURE 0 x884E # define GL_CLIP_DISTANCE0 0 x3000 # define GL_CLIP_DISTANCE1 0 x3001 # define GL_CLIP_DISTANCE2 0 x3002 # define GL_CLIP_DISTANCE3 0 x3003 # define GL_CLIP_DISTANCE4 0 x3004 # define GL_CLIP_DISTANCE5 0 x3005 # define GL_CLIP_DISTANCE6 0 x3006 # define GL_CLIP_DISTANCE7 0 x3007 # define GL_MAX_CLIP_DISTANCES 0 x0D32 # define GL_MAJOR_VERSION 0 x821B # define GL_MINOR_VERSION 0 x821C # define GL_NUM_EXTENSIONS 0 x821D # define GL_CONTEXT_FLAGS 0 x821E # define GL_COMPRESSED_RED 0 x8225 # define GL_COMPRESSED_RG 0 x8226 # define GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT 0 x00000001 # define GL_RGBA32F 0 x8814 # define GL_RGB32F 0 x8815 # define GL_RGBA16F 0 x881A # define GL_RGB16F 0 x881B # define GL_VERTEX_ATTRIB_ARRAY_INTEGER 0 x88FD # define GL_MAX_ARRAY_TEXTURE_LAYERS 0 x88FF # define GL_MIN_PROGRAM_TEXEL_OFFSET 0 x8904 # define GL_MAX_PROGRAM_TEXEL_OFFSET 0 x8905 # define GL_CLAMP_READ_COLOR 0 x891C # define GL_FIXED_ONLY 0 x891D # define GL_MAX_VARYING_COMPONENTS 0 x8B4B # define GL_TEXTURE_1D_ARRAY 0 x8C18 # define GL_PROXY_TEXTURE_1D_ARRAY 0 x8C19 # define GL_TEXTURE_2D_ARRAY 0 x8C1A # define GL_PROXY_TEXTURE_2D_ARRAY 0 x8C1B # define GL_TEXTURE_BINDING_1D_ARRAY 0 x8C1C # define GL_TEXTURE_BINDING_2D_ARRAY 0 x8C1D # define GL_R11F_G11F_B10F 0 x8C3A # define GL_UNSIGNED_INT_10F_11F_11F_REV 0 x8C3B # define GL_RGB9_E5 0 x8C3D # define GL_UNSIGNED_INT_5_9_9_9_REV 0 x8C3E # define GL_TEXTURE_SHARED_SIZE 0 x8C3F # define GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH 0 x8C76 # define GL_TRANSFORM_FEEDBACK_BUFFER_MODE 0 x8C7F # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS 0 x8C80 # define GL_TRANSFORM_FEEDBACK_VARYINGS 0 x8C83 # define GL_TRANSFORM_FEEDBACK_BUFFER_START 0 x8C84 # define GL_TRANSFORM_FEEDBACK_BUFFER_SIZE 0 x8C85 # define GL_PRIMITIVES_GENERATED 0 x8C87 # define GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN 0 x8C88 # define GL_RASTERIZER_DISCARD 0 x8C89 # define GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS 0 x8C8A # define GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS 0 x8C8B # define GL_INTERLEAVED_ATTRIBS 0 x8C8C # define GL_SEPARATE_ATTRIBS 0 x8C8D # define GL_TRANSFORM_FEEDBACK_BUFFER 0 x8C8E # define GL_TRANSFORM_FEEDBACK_BUFFER_BINDING 0 x8C8F # define GL_RGBA32UI 0 x8D70 # define GL_RGB32UI 0 x8D71 # define GL_RGBA16UI 0 x8D76 # define GL_RGB16UI 0 x8D77 # define GL_RGBA8UI 0 x8D7C # define GL_RGB8UI 0 x8D7D # define GL_RGBA32I 0 x8D82 # define GL_RGB32I 0 x8D83 # define GL_RGBA16I 0 x8D88 # define GL_RGB16I 0 x8D89 # define GL_RGBA8I 0 x8D8E # define GL_RGB8I 0 x8D8F # define GL_RED_INTEGER 0 x8D94 # define GL_GREEN_INTEGER 0 x8D95 # define GL_BLUE_INTEGER 0 x8D96 # define GL_RGB_INTEGER 0 x8D98 # define GL_RGBA_INTEGER 0 x8D99 # define GL_BGR_INTEGER 0 x8D9A # define GL_BGRA_INTEGER 0 x8D9B # define GL_SAMPLER_1D_ARRAY 0 x8DC0 # define GL_SAMPLER_2D_ARRAY 0 x8DC1 # define GL_SAMPLER_1D_ARRAY_SHADOW 0 x8DC3 # define GL_SAMPLER_2D_ARRAY_SHADOW 0 x8DC4 # define GL_SAMPLER_CUBE_SHADOW 0 x8DC5 # define GL_UNSIGNED_INT_VEC2 0 x8DC6 # define GL_UNSIGNED_INT_VEC3 0 x8DC7 # define GL_UNSIGNED_INT_VEC4 0 x8DC8 # define GL_INT_SAMPLER_1D 0 x8DC9 # define GL_INT_SAMPLER_2D 0 x8DCA # define GL_INT_SAMPLER_3D 0 x8DCB # define GL_INT_SAMPLER_CUBE 0 x8DCC # define GL_INT_SAMPLER_1D_ARRAY 0 x8DCE # define GL_INT_SAMPLER_2D_ARRAY 0 x8DCF # define GL_UNSIGNED_INT_SAMPLER_1D 0 x8DD1 # define GL_UNSIGNED_INT_SAMPLER_2D 0 x8DD2 # define GL_UNSIGNED_INT_SAMPLER_3D 0 x8DD3 # define GL_UNSIGNED_INT_SAMPLER_CUBE 0 x8DD4 # define GL_UNSIGNED_INT_SAMPLER_1D_ARRAY 0 x8DD6 # define GL_UNSIGNED_INT_SAMPLER_2D_ARRAY 0 x8DD7 # define GL_QUERY_WAIT 0 x8E13 # define GL_QUERY_NO_WAIT 0 x8E14 # define GL_QUERY_BY_REGION_WAIT 0 x8E15 # define GL_QUERY_BY_REGION_NO_WAIT 0 x8E16 # define GL_BUFFER_ACCESS_FLAGS 0 x911F # define GL_BUFFER_MAP_LENGTH 0 x9120 # define GL_BUFFER_MAP_OFFSET 0 x9121 # define GL_DEPTH_COMPONENT32F 0 x8CAC # define GL_DEPTH32F_STENCIL8 0 x8CAD # define GL_FLOAT_32_UNSIGNED_INT_24_8_REV 0 x8DAD # define GL_INVALID_FRAMEBUFFER_OPERATION 0 x0506 # define GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING 0 x8210 # define GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE 0 x8211 # define GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE 0 x8212 # define GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE 0 x8213 # define GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE 0 x8214 # define GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE 0 x8215 # define GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE 0 x8216 # define GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE 0 x8217 # define GL_FRAMEBUFFER_DEFAULT 0 x8218 # define GL_FRAMEBUFFER_UNDEFINED 0 x8219 # define GL_DEPTH_STENCIL_ATTACHMENT 0 x821A # define GL_MAX_RENDERBUFFER_SIZE 0 x84E8 # define GL_DEPTH_STENCIL 0 x84F9 # define GL_UNSIGNED_INT_24_8 0 x84FA # define GL_DEPTH24_STENCIL8 0 x88F0 # define GL_TEXTURE_STENCIL_SIZE 0 x88F1 # define GL_TEXTURE_RED_TYPE 0 x8C10 # define GL_TEXTURE_GREEN_TYPE 0 x8C11 # define GL_TEXTURE_BLUE_TYPE 0 x8C12 # define GL_TEXTURE_ALPHA_TYPE 0 x8C13 # define GL_TEXTURE_DEPTH_TYPE 0 x8C16 # define GL_UNSIGNED_NORMALIZED 0 x8C17 # define GL_FRAMEBUFFER_BINDING 0 x8CA6 # define GL_DRAW_FRAMEBUFFER_BINDING 0 x8CA6 # define GL_RENDERBUFFER_BINDING 0 x8CA7 # define GL_READ_FRAMEBUFFER 0 x8CA8 # define GL_DRAW_FRAMEBUFFER 0 x8CA9 # define GL_READ_FRAMEBUFFER_BINDING 0 x8CAA # define GL_RENDERBUFFER_SAMPLES 0 x8CAB # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE 0 x8CD0 # define GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME 0 x8CD1 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL 0 x8CD2 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE 0 x8CD3 # define GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER 0 x8CD4 # define GL_FRAMEBUFFER_COMPLETE 0 x8CD5 # define GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT 0 x8CD6 # define GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT 0 x8CD7 # define GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER 0 x8CDB # define GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER 0 x8CDC # define GL_FRAMEBUFFER_UNSUPPORTED 0 x8CDD # define GL_MAX_COLOR_ATTACHMENTS 0 x8CDF # define GL_COLOR_ATTACHMENT0 0 x8CE0 # define GL_COLOR_ATTACHMENT1 0 x8CE1 # define GL_COLOR_ATTACHMENT2 0 x8CE2 # define GL_COLOR_ATTACHMENT3 0 x8CE3 # define GL_COLOR_ATTACHMENT4 0 x8CE4 # define GL_COLOR_ATTACHMENT5 0 x8CE5 # define GL_COLOR_ATTACHMENT6 0 x8CE6 # define GL_COLOR_ATTACHMENT7 0 x8CE7 # define GL_COLOR_ATTACHMENT8 0 x8CE8 # define GL_COLOR_ATTACHMENT9 0 x8CE9 # define GL_COLOR_ATTACHMENT10 0 x8CEA # define GL_COLOR_ATTACHMENT11 0 x8CEB # define GL_COLOR_ATTACHMENT12 0 x8CEC # define GL_COLOR_ATTACHMENT13 0 x8CED # define GL_COLOR_ATTACHMENT14 0 x8CEE # define GL_COLOR_ATTACHMENT15 0 x8CEF # define GL_COLOR_ATTACHMENT16 0 x8CF0 # define GL_COLOR_ATTACHMENT17 0 x8CF1 # define GL_COLOR_ATTACHMENT18 0 x8CF2 # define GL_COLOR_ATTACHMENT19 0 x8CF3 # define GL_COLOR_ATTACHMENT20 0 x8CF4 # define GL_COLOR_ATTACHMENT21 0 x8CF5 # define GL_COLOR_ATTACHMENT22 0 x8CF6 # define GL_COLOR_ATTACHMENT23 0 x8CF7 # define GL_COLOR_ATTACHMENT24 0 x8CF8 # define GL_COLOR_ATTACHMENT25 0 x8CF9 # define GL_COLOR_ATTACHMENT26 0 x8CFA # define GL_COLOR_ATTACHMENT27 0 x8CFB # define GL_COLOR_ATTACHMENT28 0 x8CFC # define GL_COLOR_ATTACHMENT29 0 x8CFD # define GL_COLOR_ATTACHMENT30 0 x8CFE # define GL_COLOR_ATTACHMENT31 0 x8CFF # define GL_DEPTH_ATTACHMENT 0 x8D00 # define GL_STENCIL_ATTACHMENT 0 x8D20 # define GL_FRAMEBUFFER 0 x8D40 # define GL_RENDERBUFFER 0 x8D41 # define GL_RENDERBUFFER_WIDTH 0 x8D42 # define GL_RENDERBUFFER_HEIGHT 0 x8D43 # define GL_RENDERBUFFER_INTERNAL_FORMAT 0 x8D44 # define GL_STENCIL_INDEX1 0 x8D46 # define GL_STENCIL_INDEX4 0 x8D47 # define GL_STENCIL_INDEX8 0 x8D48 # define GL_STENCIL_INDEX16 0 x8D49 # define GL_RENDERBUFFER_RED_SIZE 0 x8D50 # define GL_RENDERBUFFER_GREEN_SIZE 0 x8D51 # define GL_RENDERBUFFER_BLUE_SIZE 0 x8D52 # define GL_RENDERBUFFER_ALPHA_SIZE 0 x8D53 # define GL_RENDERBUFFER_DEPTH_SIZE 0 x8D54 # define GL_RENDERBUFFER_STENCIL_SIZE 0 x8D55 # define GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE 0 x8D56 # define GL_MAX_SAMPLES 0 x8D57 # define GL_FRAMEBUFFER_SRGB 0 x8DB9 # define GL_HALF_FLOAT 0 x140B # define GL_MAP_READ_BIT 0 x0001 # define GL_MAP_WRITE_BIT 0 x0002 # define GL_MAP_INVALIDATE_RANGE_BIT 0 x0004 # define GL_MAP_INVALIDATE_BUFFER_BIT 0 x0008 # define GL_MAP_FLUSH_EXPLICIT_BIT 0 x0010 # define GL_MAP_UNSYNCHRONIZED_BIT 0 x0020 # define GL_COMPRESSED_RED_RGTC1 0 x8DBB # define GL_COMPRESSED_SIGNED_RED_RGTC1 0 x8DBC # define GL_COMPRESSED_RG_RGTC2 0 x8DBD # define GL_COMPRESSED_SIGNED_RG_RGTC2 0 x8DBE # define GL_RG 0 x8227 # define GL_RG_INTEGER 0 x8228 # define GL_R8 0 x8229 # define GL_R16 0 x822A # define GL_RG8 0 x822B # define GL_RG16 0 x822C # define GL_R16F 0 x822D # define GL_R32F 0 x822E # define GL_RG16F 0 x822F # define GL_RG32F 0 x8230 # define GL_R8I 0 x8231 # define GL_R8UI 0 x8232 # define GL_R16I 0 x8233 # define GL_R16UI 0 x8234 # define GL_R32I 0 x8235 # define GL_R32UI 0 x8236 # define GL_RG8I 0 x8237 # define GL_RG8UI 0 x8238 # define GL_RG16I 0 x8239 # define GL_RG16UI 0 x823A # define GL_RG32I 0 x823B # define GL_RG32UI 0 x823C # define GL_VERTEX_ARRAY_BINDING 0 x85B5 typedef)",
    "insertText": "void(APIENTRYP PFNGLCOLORMASKIPROC) (GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBOOLEANI_VPROC) (GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGERI_VPROC) (GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEIPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEIPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISENABLEDIPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINTRANSFORMFEEDBACKPROC) (GLenum primitiveMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDTRANSFORMFEEDBACKPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERRANGEPROC) (GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERBASEPROC) (GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKVARYINGSPROC) (GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKVARYINGPROC) (GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLAMPCOLORPROC) (GLenum target, GLenum clamp)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINCONDITIONALRENDERPROC) (GLuint id, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDCONDITIONALRENDERPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBIPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIIVPROC) (GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBIUIVPROC) (GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1IPROC) (GLuint index, GLint x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2IPROC) (GLuint index, GLint x, GLint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3IPROC) (GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4IPROC) (GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1UIPROC) (GLuint index, GLuint x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2UIPROC) (GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UIPROC) (GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4IVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI1UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI2UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI3UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UIVPROC) (GLuint index, const GLuint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4BVPROC) (GLuint index, const GLbyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4SVPROC) (GLuint index, const GLshort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4UBVPROC) (GLuint index, const GLubyte *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBI4USVPROC) (GLuint index, const GLushort *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMUIVPROC) (GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAGDATALOCATIONPROC) (GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETFRAGDATALOCATIONPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UIPROC) (GLint location, GLuint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UIPROC) (GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UIPROC) (GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4UIVPROC) (GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERIIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXPARAMETERIUIVPROC) (GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERIVPROC) (GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERUIVPROC) (GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERFVPROC) (GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERFIPROC) (GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "GLubyte()",
    "kind": "Method",
    "detail": "Function (typedef const)",
    "insertText": "GLubyte(APIENTRYP PFNGLGETSTRINGIPROC) (GLenum name, GLuint index)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISRENDERBUFFERPROC) (GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDRENDERBUFFERPROC) (GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETERENDERBUFFERSPROC) (GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENRENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRENDERBUFFERSTORAGEPROC) (GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETRENDERBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISFRAMEBUFFERPROC) (GLuint framebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAMEBUFFERPROC) (GLenum target, GLuint framebuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEFRAMEBUFFERSPROC) (GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCHECKFRAMEBUFFERSTATUSPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE1DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE2DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURE3DPROC) (GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERRENDERBUFFERPROC) (GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENERATEMIPMAPPROC) (GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLITFRAMEBUFFERPROC) (GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTURELAYERPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHMAPPEDBUFFERRANGEPROC) (GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXARRAYPROC) (GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEVERTEXARRAYSPROC) (GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISVERTEXARRAYPROC) (GLuint array)"
  },
  {
    "label": "glColorMaski()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glGetBooleani_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "glGetIntegeri_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetIntegeri_v(GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "glEnablei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnablei(GLenum target, GLuint index)"
  },
  {
    "label": "glDisablei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisablei(GLenum target, GLuint index)"
  },
  {
    "label": "glIsEnabledi()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsEnabledi(GLenum target, GLuint index)"
  },
  {
    "label": "glBeginTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginTransformFeedback(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndTransformFeedback(void)"
  },
  {
    "label": "glBindBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferBase()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBufferBase(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryings()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "glGetTransformFeedbackVarying()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glClampColor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClampColor(GLenum target, GLenum clamp)"
  },
  {
    "label": "glBeginConditionalRender()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginConditionalRender(GLuint id, GLenum mode)"
  },
  {
    "label": "glEndConditionalRender()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndConditionalRender(void)"
  },
  {
    "label": "glVertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "glVertexAttribI1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1i(GLuint index, GLint x)"
  },
  {
    "label": "glVertexAttribI2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2i(GLuint index, GLint x, GLint y)"
  },
  {
    "label": "glVertexAttribI3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexAttribI4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexAttribI1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1ui(GLuint index, GLuint x)"
  },
  {
    "label": "glVertexAttribI2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "glVertexAttribI3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "glVertexAttribI4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glVertexAttribI1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI1uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI2uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI3uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4bv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttribI4sv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttribI4ubv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribI4usv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribI4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glGetUniformuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformuiv(GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "glBindFragDataLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "glGetFragDataLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetFragDataLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glUniform1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1ui(GLint location, GLuint v0)"
  },
  {
    "label": "glUniform2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2ui(GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glUniform3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glUniform4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glUniform1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glClearBufferiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearBufferuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearBufferfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearBufferfi()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glGetStringi()",
    "kind": "Method",
    "detail": "Function (GLAPI const GLubyte* APIENTRY)",
    "insertText": "glGetStringi(GLenum name, GLuint index)"
  },
  {
    "label": "glIsRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsRenderbuffer(GLuint renderbuffer)"
  },
  {
    "label": "glBindRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindRenderbuffer(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glDeleteRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glGenRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsFramebuffer(GLuint framebuffer)"
  },
  {
    "label": "glBindFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindFramebuffer(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glDeleteFramebuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glGenFramebuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glCheckFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glCheckFramebufferStatus(GLenum target)"
  },
  {
    "label": "glFramebufferTexture1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenerateMipmap(GLenum target)"
  },
  {
    "label": "glBlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glMapBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glFlushMappedBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glBindVertexArray()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVertexArray(GLuint array)"
  },
  {
    "label": "glDeleteVertexArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteVertexArrays(GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "glGenVertexArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glIsVertexArray()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsVertexArray(GLuint array)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_1 # define GL_VERSION_3_1 1 # define GL_SAMPLER_2D_RECT 0 x8B63 # define GL_SAMPLER_2D_RECT_SHADOW 0 x8B64 # define GL_SAMPLER_BUFFER 0 x8DC2 # define GL_INT_SAMPLER_2D_RECT 0 x8DCD # define GL_INT_SAMPLER_BUFFER 0 x8DD0 # define GL_UNSIGNED_INT_SAMPLER_2D_RECT 0 x8DD5 # define GL_UNSIGNED_INT_SAMPLER_BUFFER 0 x8DD8 # define GL_TEXTURE_BUFFER 0 x8C2A # define GL_MAX_TEXTURE_BUFFER_SIZE 0 x8C2B # define GL_TEXTURE_BINDING_BUFFER 0 x8C2C # define GL_TEXTURE_BUFFER_DATA_STORE_BINDING 0 x8C2D # define GL_TEXTURE_RECTANGLE 0 x84F5 # define GL_TEXTURE_BINDING_RECTANGLE 0 x84F6 # define GL_PROXY_TEXTURE_RECTANGLE 0 x84F7 # define GL_MAX_RECTANGLE_TEXTURE_SIZE 0 x84F8 # define GL_R8_SNORM 0 x8F94 # define GL_RG8_SNORM 0 x8F95 # define GL_RGB8_SNORM 0 x8F96 # define GL_RGBA8_SNORM 0 x8F97 # define GL_R16_SNORM 0 x8F98 # define GL_RG16_SNORM 0 x8F99 # define GL_RGB16_SNORM 0 x8F9A # define GL_RGBA16_SNORM 0 x8F9B # define GL_SIGNED_NORMALIZED 0 x8F9C # define GL_PRIMITIVE_RESTART 0 x8F9D # define GL_PRIMITIVE_RESTART_INDEX 0 x8F9E # define GL_COPY_READ_BUFFER 0 x8F36 # define GL_COPY_WRITE_BUFFER 0 x8F37 # define GL_UNIFORM_BUFFER 0 x8A11 # define GL_UNIFORM_BUFFER_BINDING 0 x8A28 # define GL_UNIFORM_BUFFER_START 0 x8A29 # define GL_UNIFORM_BUFFER_SIZE 0 x8A2A # define GL_MAX_VERTEX_UNIFORM_BLOCKS 0 x8A2B # define GL_MAX_GEOMETRY_UNIFORM_BLOCKS 0 x8A2C # define GL_MAX_FRAGMENT_UNIFORM_BLOCKS 0 x8A2D # define GL_MAX_COMBINED_UNIFORM_BLOCKS 0 x8A2E # define GL_MAX_UNIFORM_BUFFER_BINDINGS 0 x8A2F # define GL_MAX_UNIFORM_BLOCK_SIZE 0 x8A30 # define GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS 0 x8A31 # define GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS 0 x8A32 # define GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS 0 x8A33 # define GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT 0 x8A34 # define GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH 0 x8A35 # define GL_ACTIVE_UNIFORM_BLOCKS 0 x8A36 # define GL_UNIFORM_TYPE 0 x8A37 # define GL_UNIFORM_SIZE 0 x8A38 # define GL_UNIFORM_NAME_LENGTH 0 x8A39 # define GL_UNIFORM_BLOCK_INDEX 0 x8A3A # define GL_UNIFORM_OFFSET 0 x8A3B # define GL_UNIFORM_ARRAY_STRIDE 0 x8A3C # define GL_UNIFORM_MATRIX_STRIDE 0 x8A3D # define GL_UNIFORM_IS_ROW_MAJOR 0 x8A3E # define GL_UNIFORM_BLOCK_BINDING 0 x8A3F # define GL_UNIFORM_BLOCK_DATA_SIZE 0 x8A40 # define GL_UNIFORM_BLOCK_NAME_LENGTH 0 x8A41 # define GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS 0 x8A42 # define GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES 0 x8A43 # define GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER 0 x8A44 # define GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER 0 x8A45 # define GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER 0 x8A46 # define GL_INVALID_INDEX 0 xFFFFFFFFu typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINSTANCEDPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUFFERPROC) (GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPRIMITIVERESTARTINDEXPROC) (GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYBUFFERSUBDATAPROC) (GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMINDICESPROC) (GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMSIVPROC) (GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMNAMEPROC) (GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETUNIFORMBLOCKINDEXPROC) (GLuint program, const GLchar *uniformBlockName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKIVPROC) (GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC) (GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMBLOCKBINDINGPROC) (GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)"
  },
  {
    "label": "glDrawArraysInstanced()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)"
  },
  {
    "label": "glDrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)"
  },
  {
    "label": "glTexBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glPrimitiveRestartIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPrimitiveRestartIndex(GLuint index)"
  },
  {
    "label": "glCopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glGetUniformIndices()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)"
  },
  {
    "label": "glGetActiveUniformsiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)"
  },
  {
    "label": "glGetUniformBlockIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)"
  },
  {
    "label": "glGetActiveUniformBlockiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformBlockName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)"
  },
  {
    "label": "glUniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_2 # define GL_VERSION_3_2 1 typedef struct __GLsync* GLsync ; # ifndef GLEXT_64_TYPES_DEFINED # define GLEXT_64_TYPES_DEFINED # if)",
    "insertText": "defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L #include <inttypes.h> #elif defined(__sun__) || defined(__digital__) #include <inttypes.h> #if defined(__STDC__) #if defined(__arch64__) || defined(_LP64)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef unsigned long int uint64_t ; # else typedef long long int int64_t ; typedef unsigned long long int uint64_t ; # endif # endif # elif)",
    "insertText": "defined(__VMS ) || defined(__sgi) #include <inttypes.h> #elif defined(__SCO__) || defined(__USLC__) #include <stdint.h> #elif defined(__UNIXOS2__) || defined(__SOL64__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (typedef long long int int64_t ; typedef unsigned long long int uint64_t ; # elif)",
    "insertText": "defined(_WIN32) && defined(__GNUC__) #include <stdint.h> #elif defined(_WIN32)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef __int64 int64_t ; typedef unsigned __int64 uint64_t ; # else # include<inttypes . h> # endif # endif typedef uint64_t GLuint64 ; typedef int64_t GLint64 ; # define GL_CONTEXT_CORE_PROFILE_BIT 0 x00000001 # define GL_CONTEXT_COMPATIBILITY_PROFILE_BIT 0 x00000002 # define GL_LINES_ADJACENCY 0 x000A # define GL_LINE_STRIP_ADJACENCY 0 x000B # define GL_TRIANGLES_ADJACENCY 0 x000C # define GL_TRIANGLE_STRIP_ADJACENCY 0 x000D # define GL_PROGRAM_POINT_SIZE 0 x8642 # define GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS 0 x8C29 # define GL_FRAMEBUFFER_ATTACHMENT_LAYERED 0 x8DA7 # define GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS 0 x8DA8 # define GL_GEOMETRY_SHADER 0 x8DD9 # define GL_GEOMETRY_VERTICES_OUT 0 x8916 # define GL_GEOMETRY_INPUT_TYPE 0 x8917 # define GL_GEOMETRY_OUTPUT_TYPE 0 x8918 # define GL_MAX_GEOMETRY_UNIFORM_COMPONENTS 0 x8DDF # define GL_MAX_GEOMETRY_OUTPUT_VERTICES 0 x8DE0 # define GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS 0 x8DE1 # define GL_MAX_VERTEX_OUTPUT_COMPONENTS 0 x9122 # define GL_MAX_GEOMETRY_INPUT_COMPONENTS 0 x9123 # define GL_MAX_GEOMETRY_OUTPUT_COMPONENTS 0 x9124 # define GL_MAX_FRAGMENT_INPUT_COMPONENTS 0 x9125 # define GL_CONTEXT_PROFILE_MASK 0 x9126 # define GL_DEPTH_CLAMP 0 x864F # define GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION 0 x8E4C # define GL_FIRST_VERTEX_CONVENTION 0 x8E4D # define GL_LAST_VERTEX_CONVENTION 0 x8E4E # define GL_PROVOKING_VERTEX 0 x8E4F # define GL_TEXTURE_CUBE_MAP_SEAMLESS 0 x884F # define GL_MAX_SERVER_WAIT_TIMEOUT 0 x9111 # define GL_OBJECT_TYPE 0 x9112 # define GL_SYNC_CONDITION 0 x9113 # define GL_SYNC_STATUS 0 x9114 # define GL_SYNC_FLAGS 0 x9115 # define GL_SYNC_FENCE 0 x9116 # define GL_SYNC_GPU_COMMANDS_COMPLETE 0 x9117 # define GL_UNSIGNALED 0 x9118 # define GL_SIGNALED 0 x9119 # define GL_ALREADY_SIGNALED 0 x911A # define GL_TIMEOUT_EXPIRED 0 x911B # define GL_CONDITION_SATISFIED 0 x911C # define GL_WAIT_FAILED 0 x911D # define GL_TIMEOUT_IGNORED 0 xFFFFFFFFFFFFFFFFull # define GL_SYNC_FLUSH_COMMANDS_BIT 0 x00000001 # define GL_SAMPLE_POSITION 0 x8E50 # define GL_SAMPLE_MASK 0 x8E51 # define GL_SAMPLE_MASK_VALUE 0 x8E52 # define GL_MAX_SAMPLE_MASK_WORDS 0 x8E59 # define GL_TEXTURE_2D_MULTISAMPLE 0 x9100 # define GL_PROXY_TEXTURE_2D_MULTISAMPLE 0 x9101 # define GL_TEXTURE_2D_MULTISAMPLE_ARRAY 0 x9102 # define GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY 0 x9103 # define GL_TEXTURE_BINDING_2D_MULTISAMPLE 0 x9104 # define GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY 0 x9105 # define GL_TEXTURE_SAMPLES 0 x9106 # define GL_TEXTURE_FIXED_SAMPLE_LOCATIONS 0 x9107 # define GL_SAMPLER_2D_MULTISAMPLE 0 x9108 # define GL_INT_SAMPLER_2D_MULTISAMPLE 0 x9109 # define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE 0 x910A # define GL_SAMPLER_2D_MULTISAMPLE_ARRAY 0 x910B # define GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0 x910C # define GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY 0 x910D # define GL_MAX_COLOR_TEXTURE_SAMPLES 0 x910E # define GL_MAX_DEPTH_TEXTURE_SAMPLES 0 x910F # define GL_MAX_INTEGER_SAMPLES 0 x9110 typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC) (GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC) (GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROVOKINGVERTEXPROC) (GLenum mode)"
  },
  {
    "label": "GLsync()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLsync(APIENTRYP PFNGLFENCESYNCPROC) (GLenum condition, GLbitfield flags)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISSYNCPROC) (GLsync sync)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETESYNCPROC) (GLsync sync)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCLIENTWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLWAITSYNCPROC) (GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGER64VPROC) (GLenum pname, GLint64 *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSYNCIVPROC) (GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTEGER64I_VPROC) (GLenum target, GLuint index, GLint64 *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETBUFFERPARAMETERI64VPROC) (GLenum target, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERTEXTUREPROC) (GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXIMAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETMULTISAMPLEFVPROC) (GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLEMASKIPROC) (GLuint maskNumber, GLbitfield mask)"
  },
  {
    "label": "glDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawRangeElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "glMultiDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "glProvokingVertex()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProvokingVertex(GLenum mode)"
  },
  {
    "label": "glFenceSync()",
    "kind": "Method",
    "detail": "Function (GLAPI GLsync APIENTRY)",
    "insertText": "glFenceSync(GLenum condition, GLbitfield flags)"
  },
  {
    "label": "glIsSync()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsSync(GLsync sync)"
  },
  {
    "label": "glDeleteSync()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteSync(GLsync sync)"
  },
  {
    "label": "glClientWaitSync()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glWaitSync()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glGetInteger64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInteger64v(GLenum pname, GLint64 *data)"
  },
  {
    "label": "glGetSynciv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "glGetInteger64i_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)"
  },
  {
    "label": "glGetBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glTexImage2DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexImage3DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glGetMultisamplefv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "glSampleMaski()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSampleMaski(GLuint maskNumber, GLbitfield mask)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_3_3 # define GL_VERSION_3_3 1 # define GL_VERTEX_ATTRIB_ARRAY_DIVISOR 0 x88FE # define GL_SRC1_COLOR 0 x88F9 # define GL_ONE_MINUS_SRC1_COLOR 0 x88FA # define GL_ONE_MINUS_SRC1_ALPHA 0 x88FB # define GL_MAX_DUAL_SOURCE_DRAW_BUFFERS 0 x88FC # define GL_ANY_SAMPLES_PASSED 0 x8C2F # define GL_SAMPLER_BINDING 0 x8919 # define GL_RGB10_A2UI 0 x906F # define GL_TEXTURE_SWIZZLE_R 0 x8E42 # define GL_TEXTURE_SWIZZLE_G 0 x8E43 # define GL_TEXTURE_SWIZZLE_B 0 x8E44 # define GL_TEXTURE_SWIZZLE_A 0 x8E45 # define GL_TEXTURE_SWIZZLE_RGBA 0 x8E46 # define GL_TIME_ELAPSED 0 x88BF # define GL_TIMESTAMP 0 x8E28 # define GL_INT_2_10_10_10_REV 0 x8D9F typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDFRAGDATALOCATIONINDEXEDPROC) (GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETFRAGDATAINDEXPROC) (GLuint program, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENSAMPLERSPROC) (GLsizei count, GLuint *samplers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETESAMPLERSPROC) (GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISSAMPLERPROC) (GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDSAMPLERPROC) (GLuint unit, GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIPROC) (GLuint sampler, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERFPROC) (GLuint sampler, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERIVPROC) (GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERIIVPROC) (GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERFVPROC) (GLuint sampler, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSAMPLERPARAMETERIUIVPROC) (GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLQUERYCOUNTERPROC) (GLuint id, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTI64VPROC) (GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYOBJECTUI64VPROC) (GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBDIVISORPROC) (GLuint index, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP1UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP1UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP2UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP2UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP3UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP3UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP4UIPROC) (GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBP4UIVPROC) (GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glBindFragDataLocationIndexed()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "glGetFragDataIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetFragDataIndex(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGenSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenSamplers(GLsizei count, GLuint *samplers)"
  },
  {
    "label": "glDeleteSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteSamplers(GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glIsSampler()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsSampler(GLuint sampler)"
  },
  {
    "label": "glBindSampler()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindSampler(GLuint unit, GLuint sampler)"
  },
  {
    "label": "glSamplerParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)"
  },
  {
    "label": "glSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)"
  },
  {
    "label": "glSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "glGetSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "glQueryCounter()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glQueryCounter(GLuint id, GLenum target)"
  },
  {
    "label": "glGetQueryObjecti64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetQueryObjectui64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glVertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribDivisor(GLuint index, GLuint divisor)"
  },
  {
    "label": "glVertexAttribP1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_0 # define GL_VERSION_4_0 1 # define GL_SAMPLE_SHADING 0 x8C36 # define GL_MIN_SAMPLE_SHADING_VALUE 0 x8C37 # define GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET 0 x8E5E # define GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET 0 x8E5F # define GL_TEXTURE_CUBE_MAP_ARRAY 0 x9009 # define GL_TEXTURE_BINDING_CUBE_MAP_ARRAY 0 x900A # define GL_PROXY_TEXTURE_CUBE_MAP_ARRAY 0 x900B # define GL_SAMPLER_CUBE_MAP_ARRAY 0 x900C # define GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW 0 x900D # define GL_INT_SAMPLER_CUBE_MAP_ARRAY 0 x900E # define GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY 0 x900F # define GL_DRAW_INDIRECT_BUFFER 0 x8F3F # define GL_DRAW_INDIRECT_BUFFER_BINDING 0 x8F43 # define GL_GEOMETRY_SHADER_INVOCATIONS 0 x887F # define GL_MAX_GEOMETRY_SHADER_INVOCATIONS 0 x8E5A # define GL_MIN_FRAGMENT_INTERPOLATION_OFFSET 0 x8E5B # define GL_MAX_FRAGMENT_INTERPOLATION_OFFSET 0 x8E5C # define GL_FRAGMENT_INTERPOLATION_OFFSET_BITS 0 x8E5D # define GL_MAX_VERTEX_STREAMS 0 x8E71 # define GL_DOUBLE_VEC2 0 x8FFC # define GL_DOUBLE_VEC3 0 x8FFD # define GL_DOUBLE_VEC4 0 x8FFE # define GL_DOUBLE_MAT2 0 x8F46 # define GL_DOUBLE_MAT3 0 x8F47 # define GL_DOUBLE_MAT4 0 x8F48 # define GL_DOUBLE_MAT2x3 0 x8F49 # define GL_DOUBLE_MAT2x4 0 x8F4A # define GL_DOUBLE_MAT3x2 0 x8F4B # define GL_DOUBLE_MAT3x4 0 x8F4C # define GL_DOUBLE_MAT4x2 0 x8F4D # define GL_DOUBLE_MAT4x3 0 x8F4E # define GL_ACTIVE_SUBROUTINES 0 x8DE5 # define GL_ACTIVE_SUBROUTINE_UNIFORMS 0 x8DE6 # define GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS 0 x8E47 # define GL_ACTIVE_SUBROUTINE_MAX_LENGTH 0 x8E48 # define GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH 0 x8E49 # define GL_MAX_SUBROUTINES 0 x8DE7 # define GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS 0 x8DE8 # define GL_NUM_COMPATIBLE_SUBROUTINES 0 x8E4A # define GL_COMPATIBLE_SUBROUTINES 0 x8E4B # define GL_PATCHES 0 x000E # define GL_PATCH_VERTICES 0 x8E72 # define GL_PATCH_DEFAULT_INNER_LEVEL 0 x8E73 # define GL_PATCH_DEFAULT_OUTER_LEVEL 0 x8E74 # define GL_TESS_CONTROL_OUTPUT_VERTICES 0 x8E75 # define GL_TESS_GEN_MODE 0 x8E76 # define GL_TESS_GEN_SPACING 0 x8E77 # define GL_TESS_GEN_VERTEX_ORDER 0 x8E78 # define GL_TESS_GEN_POINT_MODE 0 x8E79 # define GL_ISOLINES 0 x8E7A # define GL_FRACTIONAL_ODD 0 x8E7B # define GL_FRACTIONAL_EVEN 0 x8E7C # define GL_MAX_PATCH_VERTICES 0 x8E7D # define GL_MAX_TESS_GEN_LEVEL 0 x8E7E # define GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS 0 x8E7F # define GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS 0 x8E80 # define GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS 0 x8E81 # define GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS 0 x8E82 # define GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS 0 x8E83 # define GL_MAX_TESS_PATCH_COMPONENTS 0 x8E84 # define GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS 0 x8E85 # define GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS 0 x8E86 # define GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS 0 x8E89 # define GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS 0 x8E8A # define GL_MAX_TESS_CONTROL_INPUT_COMPONENTS 0 x886C # define GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS 0 x886D # define GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS 0 x8E1E # define GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS 0 x8E1F # define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER 0 x84F0 # define GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER 0 x84F1 # define GL_TESS_EVALUATION_SHADER 0 x8E87 # define GL_TESS_CONTROL_SHADER 0 x8E88 # define GL_TRANSFORM_FEEDBACK 0 x8E22 # define GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED 0 x8E23 # define GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE 0 x8E24 # define GL_TRANSFORM_FEEDBACK_BINDING 0 x8E25 # define GL_MAX_TRANSFORM_FEEDBACK_BUFFERS 0 x8E70 typedef)",
    "insertText": "void(APIENTRYP PFNGLMINSAMPLESHADINGPROC) (GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONIPROC) (GLuint buf, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEIPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCIPROC) (GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEIPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1DPROC) (GLint location, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2DPROC) (GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4DPROC) (GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM1DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM2DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM3DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORM4DVPROC) (GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX2X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX3X4DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X2DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMMATRIX4X3DVPROC) (GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMDVPROC) (GLuint program, GLint location, GLdouble *params)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC) (GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETSUBROUTINEINDEXPROC) (GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC) (GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVESUBROUTINENAMEPROC) (GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMSUBROUTINESUIVPROC) (GLenum shadertype, GLsizei count, const GLuint *indices)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETUNIFORMSUBROUTINEUIVPROC) (GLenum shadertype, GLint location, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMSTAGEIVPROC) (GLuint program, GLenum shadertype, GLenum pname, GLint *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATCHPARAMETERIPROC) (GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPATCHPARAMETERFVPROC) (GLenum pname, const GLfloat *values)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTRANSFORMFEEDBACKPROC) (GLenum target, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETETRANSFORMFEEDBACKSPROC) (GLsizei n, const GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENTRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTRANSFORMFEEDBACKPROC) (GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPAUSETRANSFORMFEEDBACKPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLRESUMETRANSFORMFEEDBACKPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKPROC) (GLenum mode, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC) (GLenum mode, GLuint id, GLuint stream)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBEGINQUERYINDEXEDPROC) (GLenum target, GLuint index, GLuint id)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENDQUERYINDEXEDPROC) (GLenum target, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYINDEXEDIVPROC) (GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glMinSampleShading()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMinSampleShading(GLfloat value)"
  },
  {
    "label": "glBlendEquationi()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationi(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparatei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunci()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFunci(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparatei()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawArraysIndirect(GLenum mode, const void *indirect)"
  },
  {
    "label": "glDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect)"
  },
  {
    "label": "glUniform1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1d(GLint location, GLdouble x)"
  },
  {
    "label": "glUniform2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2d(GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "glUniform3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glUniform4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glUniform1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform1dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform2dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform3dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniform4dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glGetUniformdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformdv(GLuint program, GLint location, GLdouble *params)"
  },
  {
    "label": "glGetSubroutineUniformLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetSubroutineIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineUniformiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)"
  },
  {
    "label": "glGetActiveSubroutineUniformName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glUniformSubroutinesuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices)"
  },
  {
    "label": "glGetUniformSubroutineuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params)"
  },
  {
    "label": "glGetProgramStageiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values)"
  },
  {
    "label": "glPatchParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPatchParameteri(GLenum pname, GLint value)"
  },
  {
    "label": "glPatchParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPatchParameterfv(GLenum pname, const GLfloat *values)"
  },
  {
    "label": "glBindTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTransformFeedback(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glGenTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glIsTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTransformFeedback(GLuint id)"
  },
  {
    "label": "glPauseTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPauseTransformFeedback(void)"
  },
  {
    "label": "glResumeTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glResumeTransformFeedback(void)"
  },
  {
    "label": "glDrawTransformFeedback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedback(GLenum mode, GLuint id)"
  },
  {
    "label": "glDrawTransformFeedbackStream()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)"
  },
  {
    "label": "glBeginQueryIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)"
  },
  {
    "label": "glEndQueryIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEndQueryIndexed(GLenum target, GLuint index)"
  },
  {
    "label": "glGetQueryIndexediv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_1 # define GL_VERSION_4_1 1 # define GL_FIXED 0 x140C # define GL_IMPLEMENTATION_COLOR_READ_TYPE 0 x8B9A # define GL_IMPLEMENTATION_COLOR_READ_FORMAT 0 x8B9B # define GL_LOW_FLOAT 0 x8DF0 # define GL_MEDIUM_FLOAT 0 x8DF1 # define GL_HIGH_FLOAT 0 x8DF2 # define GL_LOW_INT 0 x8DF3 # define GL_MEDIUM_INT 0 x8DF4 # define GL_HIGH_INT 0 x8DF5 # define GL_SHADER_COMPILER 0 x8DFA # define GL_SHADER_BINARY_FORMATS 0 x8DF8 # define GL_NUM_SHADER_BINARY_FORMATS 0 x8DF9 # define GL_MAX_VERTEX_UNIFORM_VECTORS 0 x8DFB # define GL_MAX_VARYING_VECTORS 0 x8DFC # define GL_MAX_FRAGMENT_UNIFORM_VECTORS 0 x8DFD # define GL_RGB565 0 x8D62 # define GL_PROGRAM_BINARY_RETRIEVABLE_HINT 0 x8257 # define GL_PROGRAM_BINARY_LENGTH 0 x8741 # define GL_NUM_PROGRAM_BINARY_FORMATS 0 x87FE # define GL_PROGRAM_BINARY_FORMATS 0 x87FF # define GL_VERTEX_SHADER_BIT 0 x00000001 # define GL_FRAGMENT_SHADER_BIT 0 x00000002 # define GL_GEOMETRY_SHADER_BIT 0 x00000004 # define GL_TESS_CONTROL_SHADER_BIT 0 x00000008 # define GL_TESS_EVALUATION_SHADER_BIT 0 x00000010 # define GL_ALL_SHADER_BITS 0 xFFFFFFFF # define GL_PROGRAM_SEPARABLE 0 x8258 # define GL_ACTIVE_PROGRAM 0 x8259 # define GL_PROGRAM_PIPELINE_BINDING 0 x825A # define GL_MAX_VIEWPORTS 0 x825B # define GL_VIEWPORT_SUBPIXEL_BITS 0 x825C # define GL_VIEWPORT_BOUNDS_RANGE 0 x825D # define GL_LAYER_PROVOKING_VERTEX 0 x825E # define GL_VIEWPORT_INDEX_PROVOKING_VERTEX 0 x825F # define GL_UNDEFINED_VERTEX 0 x8260 typedef)",
    "insertText": "void(APIENTRYP PFNGLRELEASESHADERCOMPILERPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADERBINARYPROC) (GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETSHADERPRECISIONFORMATPROC) (GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEFPROC) (GLfloat n, GLfloat f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARDEPTHFPROC) (GLfloat d)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMBINARYPROC) (GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMBINARYPROC) (GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMPARAMETERIPROC) (GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUSEPROGRAMSTAGESPROC) (GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLACTIVESHADERPROGRAMPROC) (GLuint pipeline, GLuint program)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLCREATESHADERPROGRAMVPROC) (GLenum type, GLsizei count, const GLchar *const*strings)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDPROGRAMPIPELINEPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETEPROGRAMPIPELINESPROC) (GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISPROGRAMPIPELINEPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMPIPELINEIVPROC) (GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1IPROC) (GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1FPROC) (GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1DPROC) (GLuint program, GLint location, GLdouble v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UIPROC) (GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM1UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2IPROC) (GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM2UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM3UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4IPROC) (GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4IVPROC) (GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4FPROC) (GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4FVPROC) (GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4DPROC) (GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4DVPROC) (GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UIPROC) (GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORM4UIVPROC) (GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC) (GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVALIDATEPROGRAMPIPELINEPROC) (GLuint pipeline)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMPIPELINEINFOLOGPROC) (GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1DPROC) (GLuint index, GLdouble x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2DPROC) (GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4DPROC) (GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL2DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL3DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL4DVPROC) (GLuint index, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBLPOINTERPROC) (GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBLDVPROC) (GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTARRAYVPROC) (GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTINDEXEDFPROC) (GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVIEWPORTINDEXEDFVPROC) (GLuint index, const GLfloat *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCISSORARRAYVPROC) (GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCISSORINDEXEDPROC) (GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSCISSORINDEXEDVPROC) (GLuint index, const GLint *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEARRAYVPROC) (GLuint first, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEPTHRANGEINDEXEDPROC) (GLuint index, GLdouble n, GLdouble f)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFLOATI_VPROC) (GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETDOUBLEI_VPROC) (GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "glReleaseShaderCompiler()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glReleaseShaderCompiler(void)"
  },
  {
    "label": "glShaderBinary()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)"
  },
  {
    "label": "glGetShaderPrecisionFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "glDepthRangef()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangef(GLfloat n, GLfloat f)"
  },
  {
    "label": "glClearDepthf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearDepthf(GLfloat d)"
  },
  {
    "label": "glGetProgramBinary()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "glProgramBinary()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "glProgramParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramParameteri(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glUseProgramStages()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "glActiveShaderProgram()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glActiveShaderProgram(GLuint pipeline, GLuint program)"
  },
  {
    "label": "glCreateShaderProgramv()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings)"
  },
  {
    "label": "glBindProgramPipeline()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glDeleteProgramPipelines()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "glGenProgramPipelines()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glIsProgramPipeline()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "glProgramUniform1i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1i(GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "glProgramUniform1iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform1f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1f(GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "glProgramUniform1fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1d(GLuint program, GLint location, GLdouble v0)"
  },
  {
    "label": "glProgramUniform1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform1ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1ui(GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "glProgramUniform1uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform2i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glProgramUniform2iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform2f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glProgramUniform2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)"
  },
  {
    "label": "glProgramUniform2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform2ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glProgramUniform2uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform3i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glProgramUniform3iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform3f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glProgramUniform3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)"
  },
  {
    "label": "glProgramUniform3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform3ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glProgramUniform3uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform4i()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glProgramUniform4iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform4f()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glProgramUniform4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)"
  },
  {
    "label": "glProgramUniform4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform4ui()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glProgramUniform4uiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glValidateProgramPipeline()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glValidateProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineInfoLog()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glVertexAttribL1d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttribL2d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttribL3d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttribL4d()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttribL1dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL2dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL3dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL4dv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribLPointer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribLdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glViewportArrayv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glViewportIndexedf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "glViewportIndexedfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glViewportIndexedfv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glScissorArrayv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScissorArrayv(GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "glScissorIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "glScissorIndexedv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glScissorIndexedv(GLuint index, const GLint *v)"
  },
  {
    "label": "glDepthRangeArrayv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glDepthRangeIndexed()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)"
  },
  {
    "label": "glGetFloati_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFloati_v(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glGetDoublei_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetDoublei_v(GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_2 # define GL_VERSION_4_2 1 # define GL_COPY_READ_BUFFER_BINDING 0 x8F36 # define GL_COPY_WRITE_BUFFER_BINDING 0 x8F37 # define GL_TRANSFORM_FEEDBACK_ACTIVE 0 x8E24 # define GL_TRANSFORM_FEEDBACK_PAUSED 0 x8E23 # define GL_UNPACK_COMPRESSED_BLOCK_WIDTH 0 x9127 # define GL_UNPACK_COMPRESSED_BLOCK_HEIGHT 0 x9128 # define GL_UNPACK_COMPRESSED_BLOCK_DEPTH 0 x9129 # define GL_UNPACK_COMPRESSED_BLOCK_SIZE 0 x912A # define GL_PACK_COMPRESSED_BLOCK_WIDTH 0 x912B # define GL_PACK_COMPRESSED_BLOCK_HEIGHT 0 x912C # define GL_PACK_COMPRESSED_BLOCK_DEPTH 0 x912D # define GL_PACK_COMPRESSED_BLOCK_SIZE 0 x912E # define GL_NUM_SAMPLE_COUNTS 0 x9380 # define GL_MIN_MAP_BUFFER_ALIGNMENT 0 x90BC # define GL_ATOMIC_COUNTER_BUFFER 0 x92C0 # define GL_ATOMIC_COUNTER_BUFFER_BINDING 0 x92C1 # define GL_ATOMIC_COUNTER_BUFFER_START 0 x92C2 # define GL_ATOMIC_COUNTER_BUFFER_SIZE 0 x92C3 # define GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE 0 x92C4 # define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS 0 x92C5 # define GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES 0 x92C6 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER 0 x92C7 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER 0 x92C8 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER 0 x92C9 # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER 0 x92CA # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER 0 x92CB # define GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS 0 x92CC # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS 0 x92CD # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS 0 x92CE # define GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS 0 x92CF # define GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS 0 x92D0 # define GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS 0 x92D1 # define GL_MAX_VERTEX_ATOMIC_COUNTERS 0 x92D2 # define GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS 0 x92D3 # define GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS 0 x92D4 # define GL_MAX_GEOMETRY_ATOMIC_COUNTERS 0 x92D5 # define GL_MAX_FRAGMENT_ATOMIC_COUNTERS 0 x92D6 # define GL_MAX_COMBINED_ATOMIC_COUNTERS 0 x92D7 # define GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE 0 x92D8 # define GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS 0 x92DC # define GL_ACTIVE_ATOMIC_COUNTER_BUFFERS 0 x92D9 # define GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX 0 x92DA # define GL_UNSIGNED_INT_ATOMIC_COUNTER 0 x92DB # define GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT 0 x00000001 # define GL_ELEMENT_ARRAY_BARRIER_BIT 0 x00000002 # define GL_UNIFORM_BARRIER_BIT 0 x00000004 # define GL_TEXTURE_FETCH_BARRIER_BIT 0 x00000008 # define GL_SHADER_IMAGE_ACCESS_BARRIER_BIT 0 x00000020 # define GL_COMMAND_BARRIER_BIT 0 x00000040 # define GL_PIXEL_BUFFER_BARRIER_BIT 0 x00000080 # define GL_TEXTURE_UPDATE_BARRIER_BIT 0 x00000100 # define GL_BUFFER_UPDATE_BARRIER_BIT 0 x00000200 # define GL_FRAMEBUFFER_BARRIER_BIT 0 x00000400 # define GL_TRANSFORM_FEEDBACK_BARRIER_BIT 0 x00000800 # define GL_ATOMIC_COUNTER_BARRIER_BIT 0 x00001000 # define GL_ALL_BARRIER_BITS 0 xFFFFFFFF # define GL_MAX_IMAGE_UNITS 0 x8F38 # define GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS 0 x8F39 # define GL_IMAGE_BINDING_NAME 0 x8F3A # define GL_IMAGE_BINDING_LEVEL 0 x8F3B # define GL_IMAGE_BINDING_LAYERED 0 x8F3C # define GL_IMAGE_BINDING_LAYER 0 x8F3D # define GL_IMAGE_BINDING_ACCESS 0 x8F3E # define GL_IMAGE_1D 0 x904C # define GL_IMAGE_2D 0 x904D # define GL_IMAGE_3D 0 x904E # define GL_IMAGE_2D_RECT 0 x904F # define GL_IMAGE_CUBE 0 x9050 # define GL_IMAGE_BUFFER 0 x9051 # define GL_IMAGE_1D_ARRAY 0 x9052 # define GL_IMAGE_2D_ARRAY 0 x9053 # define GL_IMAGE_CUBE_MAP_ARRAY 0 x9054 # define GL_IMAGE_2D_MULTISAMPLE 0 x9055 # define GL_IMAGE_2D_MULTISAMPLE_ARRAY 0 x9056 # define GL_INT_IMAGE_1D 0 x9057 # define GL_INT_IMAGE_2D 0 x9058 # define GL_INT_IMAGE_3D 0 x9059 # define GL_INT_IMAGE_2D_RECT 0 x905A # define GL_INT_IMAGE_CUBE 0 x905B # define GL_INT_IMAGE_BUFFER 0 x905C # define GL_INT_IMAGE_1D_ARRAY 0 x905D # define GL_INT_IMAGE_2D_ARRAY 0 x905E # define GL_INT_IMAGE_CUBE_MAP_ARRAY 0 x905F # define GL_INT_IMAGE_2D_MULTISAMPLE 0 x9060 # define GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0 x9061 # define GL_UNSIGNED_INT_IMAGE_1D 0 x9062 # define GL_UNSIGNED_INT_IMAGE_2D 0 x9063 # define GL_UNSIGNED_INT_IMAGE_3D 0 x9064 # define GL_UNSIGNED_INT_IMAGE_2D_RECT 0 x9065 # define GL_UNSIGNED_INT_IMAGE_CUBE 0 x9066 # define GL_UNSIGNED_INT_IMAGE_BUFFER 0 x9067 # define GL_UNSIGNED_INT_IMAGE_1D_ARRAY 0 x9068 # define GL_UNSIGNED_INT_IMAGE_2D_ARRAY 0 x9069 # define GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY 0 x906A # define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE 0 x906B # define GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY 0 x906C # define GL_MAX_IMAGE_SAMPLES 0 x906D # define GL_IMAGE_BINDING_FORMAT 0 x906E # define GL_IMAGE_FORMAT_COMPATIBILITY_TYPE 0 x90C7 # define GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE 0 x90C8 # define GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS 0 x90C9 # define GL_MAX_VERTEX_IMAGE_UNIFORMS 0 x90CA # define GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS 0 x90CB # define GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS 0 x90CC # define GL_MAX_GEOMETRY_IMAGE_UNIFORMS 0 x90CD # define GL_MAX_FRAGMENT_IMAGE_UNIFORMS 0 x90CE # define GL_MAX_COMBINED_IMAGE_UNIFORMS 0 x90CF # define GL_COMPRESSED_RGBA_BPTC_UNORM 0 x8E8C # define GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM 0 x8E8D # define GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT 0 x8E8E # define GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT 0 x8E8F # define GL_TEXTURE_IMMUTABLE_FORMAT 0 x912F typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC) (GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTERNALFORMATIVPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC) (GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDIMAGETEXTUREPROC) (GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMEMORYBARRIERPROC) (GLbitfield barriers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE1DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE2DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE3DPROC) (GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC) (GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC) (GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)"
  },
  {
    "label": "glDrawArraysInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertexBaseInstance()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "glGetInternalformativ()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetActiveAtomicCounterBufferiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glBindImageTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)"
  },
  {
    "label": "glMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMemoryBarrier(GLbitfield barriers)"
  },
  {
    "label": "glTexStorage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTexStorage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexStorage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glDrawTransformFeedbackInstanced()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "glDrawTransformFeedbackStreamInstanced()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_3 # define GL_VERSION_4_3 1 typedef)",
    "insertText": "void(APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# define GL_NUM_SHADING_LANGUAGE_VERSIONS 0 x82E9 # define GL_VERTEX_ATTRIB_ARRAY_LONG 0 x874E # define GL_COMPRESSED_RGB8_ETC2 0 x9274 # define GL_COMPRESSED_SRGB8_ETC2 0 x9275 # define GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 0 x9276 # define GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 0 x9277 # define GL_COMPRESSED_RGBA8_ETC2_EAC 0 x9278 # define GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC 0 x9279 # define GL_COMPRESSED_R11_EAC 0 x9270 # define GL_COMPRESSED_SIGNED_R11_EAC 0 x9271 # define GL_COMPRESSED_RG11_EAC 0 x9272 # define GL_COMPRESSED_SIGNED_RG11_EAC 0 x9273 # define GL_PRIMITIVE_RESTART_FIXED_INDEX 0 x8D69 # define GL_ANY_SAMPLES_PASSED_CONSERVATIVE 0 x8D6A # define GL_MAX_ELEMENT_INDEX 0 x8D6B # define GL_COMPUTE_SHADER 0 x91B9 # define GL_MAX_COMPUTE_UNIFORM_BLOCKS 0 x91BB # define GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS 0 x91BC # define GL_MAX_COMPUTE_IMAGE_UNIFORMS 0 x91BD # define GL_MAX_COMPUTE_SHARED_MEMORY_SIZE 0 x8262 # define GL_MAX_COMPUTE_UNIFORM_COMPONENTS 0 x8263 # define GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS 0 x8264 # define GL_MAX_COMPUTE_ATOMIC_COUNTERS 0 x8265 # define GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS 0 x8266 # define GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS 0 x90EB # define GL_MAX_COMPUTE_WORK_GROUP_COUNT 0 x91BE # define GL_MAX_COMPUTE_WORK_GROUP_SIZE 0 x91BF # define GL_COMPUTE_WORK_GROUP_SIZE 0 x8267 # define GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER 0 x90EC # define GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER 0 x90ED # define GL_DISPATCH_INDIRECT_BUFFER 0 x90EE # define GL_DISPATCH_INDIRECT_BUFFER_BINDING 0 x90EF # define GL_COMPUTE_SHADER_BIT 0 x00000020 # define GL_DEBUG_OUTPUT_SYNCHRONOUS 0 x8242 # define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH 0 x8243 # define GL_DEBUG_CALLBACK_FUNCTION 0 x8244 # define GL_DEBUG_CALLBACK_USER_PARAM 0 x8245 # define 0 x8246 # define GL_DEBUG_SOURCE_WINDOW_SYSTEM 0 x8247 # define GL_DEBUG_SOURCE_SHADER_COMPILER 0 x8248 # define GL_DEBUG_SOURCE_THIRD_PARTY 0 x8249 # define GL_DEBUG_SOURCE_APPLICATION 0 x824A # define GL_DEBUG_SOURCE_OTHER 0 x824B # define GL_DEBUG_TYPE_ERROR 0 x824C # define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR 0 x824D # define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR 0 x824E # define GL_DEBUG_TYPE_PORTABILITY 0 x824F # define GL_DEBUG_TYPE_PERFORMANCE 0 x8250 # define GL_DEBUG_TYPE_OTHER 0 x8251 # define GL_MAX_DEBUG_MESSAGE_LENGTH 0 x9143 # define GL_MAX_DEBUG_LOGGED_MESSAGES 0 x9144 # define GL_DEBUG_LOGGED_MESSAGES 0 x9145 # define GL_DEBUG_SEVERITY_HIGH 0 x9146 # define GL_DEBUG_SEVERITY_MEDIUM 0 x9147 # define GL_DEBUG_SEVERITY_LOW 0 x9148 # define GL_DEBUG_TYPE_MARKER 0 x8268 # define GL_DEBUG_TYPE_PUSH_GROUP 0 x8269 # define GL_DEBUG_TYPE_POP_GROUP 0 x826A # define GL_DEBUG_SEVERITY_NOTIFICATION 0 x826B # define GL_MAX_DEBUG_GROUP_STACK_DEPTH 0 x826C # define GL_DEBUG_GROUP_STACK_DEPTH 0 x826D # define GL_BUFFER 0 x82E0 # define GL_SHADER 0 x82E1 # define GL_PROGRAM 0 x82E2 # define GL_QUERY 0 x82E3 # define GL_PROGRAM_PIPELINE 0 x82E4 # define GL_SAMPLER 0 x82E6 # define GL_MAX_LABEL_LENGTH 0 x82E8 # define GL_DEBUG_OUTPUT 0 x92E0 # define GL_CONTEXT_FLAG_DEBUG_BIT 0 x00000002 # define GL_MAX_UNIFORM_LOCATIONS 0 x826E # define GL_FRAMEBUFFER_DEFAULT_WIDTH 0 x9310 # define GL_FRAMEBUFFER_DEFAULT_HEIGHT 0 x9311 # define GL_FRAMEBUFFER_DEFAULT_LAYERS 0 x9312 # define GL_FRAMEBUFFER_DEFAULT_SAMPLES 0 x9313 # define GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS 0 x9314 # define GL_MAX_FRAMEBUFFER_WIDTH 0 x9315 # define GL_MAX_FRAMEBUFFER_HEIGHT 0 x9316 # define GL_MAX_FRAMEBUFFER_LAYERS 0 x9317 # define GL_MAX_FRAMEBUFFER_SAMPLES 0 x9318 # define GL_INTERNALFORMAT_SUPPORTED 0 x826F # define GL_INTERNALFORMAT_PREFERRED 0 x8270 # define GL_INTERNALFORMAT_RED_SIZE 0 x8271 # define GL_INTERNALFORMAT_GREEN_SIZE 0 x8272 # define GL_INTERNALFORMAT_BLUE_SIZE 0 x8273 # define GL_INTERNALFORMAT_ALPHA_SIZE 0 x8274 # define GL_INTERNALFORMAT_DEPTH_SIZE 0 x8275 # define GL_INTERNALFORMAT_STENCIL_SIZE 0 x8276 # define GL_INTERNALFORMAT_SHARED_SIZE 0 x8277 # define GL_INTERNALFORMAT_RED_TYPE 0 x8278 # define GL_INTERNALFORMAT_GREEN_TYPE 0 x8279 # define GL_INTERNALFORMAT_BLUE_TYPE 0 x827A # define GL_INTERNALFORMAT_ALPHA_TYPE 0 x827B # define GL_INTERNALFORMAT_DEPTH_TYPE 0 x827C # define GL_INTERNALFORMAT_STENCIL_TYPE 0 x827D # define GL_MAX_WIDTH 0 x827E # define GL_MAX_HEIGHT 0 x827F # define GL_MAX_DEPTH 0 x8280 # define GL_MAX_LAYERS 0 x8281 # define GL_MAX_COMBINED_DIMENSIONS 0 x8282 # define GL_COLOR_COMPONENTS 0 x8283 # define GL_DEPTH_COMPONENTS 0 x8284 # define GL_STENCIL_COMPONENTS 0 x8285 # define GL_COLOR_RENDERABLE 0 x8286 # define GL_DEPTH_RENDERABLE 0 x8287 # define GL_STENCIL_RENDERABLE 0 x8288 # define GL_FRAMEBUFFER_RENDERABLE 0 x8289 # define GL_FRAMEBUFFER_RENDERABLE_LAYERED 0 x828A # define GL_FRAMEBUFFER_BLEND 0 x828B # define GL_READ_PIXELS 0 x828C # define GL_READ_PIXELS_FORMAT 0 x828D # define GL_READ_PIXELS_TYPE 0 x828E # define GL_TEXTURE_IMAGE_FORMAT 0 x828F # define GL_TEXTURE_IMAGE_TYPE 0 x8290 # define GL_GET_TEXTURE_IMAGE_FORMAT 0 x8291 # define GL_GET_TEXTURE_IMAGE_TYPE 0 x8292 # define GL_MIPMAP 0 x8293 # define GL_MANUAL_GENERATE_MIPMAP 0 x8294 # define GL_AUTO_GENERATE_MIPMAP 0 x8295 # define GL_COLOR_ENCODING 0 x8296 # define GL_SRGB_READ 0 x8297 # define GL_SRGB_WRITE 0 x8298 # define GL_FILTER 0 x829A # define GL_VERTEX_TEXTURE 0 x829B # define GL_TESS_CONTROL_TEXTURE 0 x829C # define GL_TESS_EVALUATION_TEXTURE 0 x829D # define GL_GEOMETRY_TEXTURE 0 x829E # define GL_FRAGMENT_TEXTURE 0 x829F # define GL_COMPUTE_TEXTURE 0 x82A0 # define GL_TEXTURE_SHADOW 0 x82A1 # define GL_TEXTURE_GATHER 0 x82A2 # define GL_TEXTURE_GATHER_SHADOW 0 x82A3 # define GL_SHADER_IMAGE_LOAD 0 x82A4 # define GL_SHADER_IMAGE_STORE 0 x82A5 # define GL_SHADER_IMAGE_ATOMIC 0 x82A6 # define GL_IMAGE_TEXEL_SIZE 0 x82A7 # define GL_IMAGE_COMPATIBILITY_CLASS 0 x82A8 # define GL_IMAGE_PIXEL_FORMAT 0 x82A9 # define GL_IMAGE_PIXEL_TYPE 0 x82AA # define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST 0 x82AC # define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST 0 x82AD # define GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE 0 x82AE # define GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE 0 x82AF # define GL_TEXTURE_COMPRESSED_BLOCK_WIDTH 0 x82B1 # define GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT 0 x82B2 # define GL_TEXTURE_COMPRESSED_BLOCK_SIZE 0 x82B3 # define GL_CLEAR_BUFFER 0 x82B4 # define GL_TEXTURE_VIEW 0 x82B5 # define GL_VIEW_COMPATIBILITY_CLASS 0 x82B6 # define GL_FULL_SUPPORT 0 x82B7 # define GL_CAVEAT_SUPPORT 0 x82B8 # define GL_IMAGE_CLASS_4_X_32 0 x82B9 # define GL_IMAGE_CLASS_2_X_32 0 x82BA # define GL_IMAGE_CLASS_1_X_32 0 x82BB # define GL_IMAGE_CLASS_4_X_16 0 x82BC # define GL_IMAGE_CLASS_2_X_16 0 x82BD # define GL_IMAGE_CLASS_1_X_16 0 x82BE # define GL_IMAGE_CLASS_4_X_8 0 x82BF # define GL_IMAGE_CLASS_2_X_8 0 x82C0 # define GL_IMAGE_CLASS_1_X_8 0 x82C1 # define GL_IMAGE_CLASS_11_11_10 0 x82C2 # define GL_IMAGE_CLASS_10_10_10_2 0 x82C3 # define GL_VIEW_CLASS_128_BITS 0 x82C4 # define GL_VIEW_CLASS_96_BITS 0 x82C5 # define GL_VIEW_CLASS_64_BITS 0 x82C6 # define GL_VIEW_CLASS_48_BITS 0 x82C7 # define GL_VIEW_CLASS_32_BITS 0 x82C8 # define GL_VIEW_CLASS_24_BITS 0 x82C9 # define GL_VIEW_CLASS_16_BITS 0 x82CA # define GL_VIEW_CLASS_8_BITS 0 x82CB # define GL_VIEW_CLASS_S3TC_DXT1_RGB 0 x82CC # define GL_VIEW_CLASS_S3TC_DXT1_RGBA 0 x82CD # define GL_VIEW_CLASS_S3TC_DXT3_RGBA 0 x82CE # define GL_VIEW_CLASS_S3TC_DXT5_RGBA 0 x82CF # define GL_VIEW_CLASS_RGTC1_RED 0 x82D0 # define GL_VIEW_CLASS_RGTC2_RG 0 x82D1 # define GL_VIEW_CLASS_BPTC_UNORM 0 x82D2 # define GL_VIEW_CLASS_BPTC_FLOAT 0 x82D3 # define GL_UNIFORM 0 x92E1 # define GL_UNIFORM_BLOCK 0 x92E2 # define GL_PROGRAM_INPUT 0 x92E3 # define GL_PROGRAM_OUTPUT 0 x92E4 # define GL_BUFFER_VARIABLE 0 x92E5 # define GL_SHADER_STORAGE_BLOCK 0 x92E6 # define GL_VERTEX_SUBROUTINE 0 x92E8 # define GL_TESS_CONTROL_SUBROUTINE 0 x92E9 # define GL_TESS_EVALUATION_SUBROUTINE 0 x92EA # define GL_GEOMETRY_SUBROUTINE 0 x92EB # define GL_FRAGMENT_SUBROUTINE 0 x92EC # define GL_COMPUTE_SUBROUTINE 0 x92ED # define GL_VERTEX_SUBROUTINE_UNIFORM 0 x92EE # define GL_TESS_CONTROL_SUBROUTINE_UNIFORM 0 x92EF # define GL_TESS_EVALUATION_SUBROUTINE_UNIFORM 0 x92F0 # define GL_GEOMETRY_SUBROUTINE_UNIFORM 0 x92F1 # define GL_FRAGMENT_SUBROUTINE_UNIFORM 0 x92F2 # define GL_COMPUTE_SUBROUTINE_UNIFORM 0 x92F3 # define GL_TRANSFORM_FEEDBACK_VARYING 0 x92F4 # define GL_ACTIVE_RESOURCES 0 x92F5 # define GL_MAX_NAME_LENGTH 0 x92F6 # define GL_MAX_NUM_ACTIVE_VARIABLES 0 x92F7 # define GL_MAX_NUM_COMPATIBLE_SUBROUTINES 0 x92F8 # define GL_NAME_LENGTH 0 x92F9 # define GL_TYPE 0 x92FA # define GL_ARRAY_SIZE 0 x92FB # define GL_OFFSET 0 x92FC # define GL_BLOCK_INDEX 0 x92FD # define GL_ARRAY_STRIDE 0 x92FE # define GL_MATRIX_STRIDE 0 x92FF # define GL_IS_ROW_MAJOR 0 x9300 # define GL_ATOMIC_COUNTER_BUFFER_INDEX 0 x9301 # define GL_BUFFER_BINDING 0 x9302 # define GL_BUFFER_DATA_SIZE 0 x9303 # define GL_NUM_ACTIVE_VARIABLES 0 x9304 # define GL_ACTIVE_VARIABLES 0 x9305 # define GL_REFERENCED_BY_VERTEX_SHADER 0 x9306 # define GL_REFERENCED_BY_TESS_CONTROL_SHADER 0 x9307 # define GL_REFERENCED_BY_TESS_EVALUATION_SHADER 0 x9308 # define GL_REFERENCED_BY_GEOMETRY_SHADER 0 x9309 # define GL_REFERENCED_BY_FRAGMENT_SHADER 0 x930A # define GL_REFERENCED_BY_COMPUTE_SHADER 0 x930B # define GL_TOP_LEVEL_ARRAY_SIZE 0 x930C # define GL_TOP_LEVEL_ARRAY_STRIDE 0 x930D # define GL_LOCATION 0 x930E # define GL_LOCATION_INDEX 0 x930F # define GL_IS_PER_PATCH 0 x92E7 # define GL_SHADER_STORAGE_BUFFER 0 x90D2 # define GL_SHADER_STORAGE_BUFFER_BINDING 0 x90D3 # define GL_SHADER_STORAGE_BUFFER_START 0 x90D4 # define GL_SHADER_STORAGE_BUFFER_SIZE 0 x90D5 # define GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS 0 x90D6 # define GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS 0 x90D7 # define GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS 0 x90D8 # define GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS 0 x90D9 # define GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS 0 x90DA # define GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS 0 x90DB # define GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS 0 x90DC # define GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS 0 x90DD # define GL_MAX_SHADER_STORAGE_BLOCK_SIZE 0 x90DE # define GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT 0 x90DF # define GL_SHADER_STORAGE_BARRIER_BIT 0 x00002000 # define GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES 0 x8F39 # define GL_DEPTH_STENCIL_TEXTURE_MODE 0 x90EA # define GL_TEXTURE_BUFFER_OFFSET 0 x919D # define GL_TEXTURE_BUFFER_SIZE 0 x919E # define GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT 0 x919F # define GL_TEXTURE_VIEW_MIN_LEVEL 0 x82DB # define GL_TEXTURE_VIEW_NUM_LEVELS 0 x82DC # define GL_TEXTURE_VIEW_MIN_LAYER 0 x82DD # define GL_TEXTURE_VIEW_NUM_LAYERS 0 x82DE # define GL_TEXTURE_IMMUTABLE_LEVELS 0 x82DF # define GL_VERTEX_ATTRIB_BINDING 0 x82D4 # define GL_VERTEX_ATTRIB_RELATIVE_OFFSET 0 x82D5 # define GL_VERTEX_BINDING_DIVISOR 0 x82D6 # define GL_VERTEX_BINDING_OFFSET 0 x82D7 # define GL_VERTEX_BINDING_STRIDE 0 x82D8 # define GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET 0 x82D9 # define GL_MAX_VERTEX_ATTRIB_BINDINGS 0 x82DA # define GL_VERTEX_BINDING_BUFFER 0 x8F4F typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERDATAPROC) (GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARBUFFERSUBDATAPROC) (GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISPATCHCOMPUTEPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISPATCHCOMPUTEINDIRECTPROC) (GLintptr indirect)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYIMAGESUBDATAPROC) (GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFRAMEBUFFERPARAMETERIPROC) (GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETFRAMEBUFFERPARAMETERIVPROC) (GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETINTERNALFORMATI64VPROC) (GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATETEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATETEXIMAGEPROC) (GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATEBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATEBUFFERDATAPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATEFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATESUBFRAMEBUFFERPROC) (GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTPROC) (GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTPROC) (GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMINTERFACEIVPROC) (GLuint program, GLenum programInterface, GLenum pname, GLint *params)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETPROGRAMRESOURCEINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMRESOURCENAMEPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETPROGRAMRESOURCEIVPROC) (GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONPROC) (GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "GLint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLint(APIENTRYP PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC) (GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLSHADERSTORAGEBLOCKBINDINGPROC) (GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXBUFFERRANGEPROC) (GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE2DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXSTORAGE3DMULTISAMPLEPROC) (GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREVIEWPROC) (GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXBUFFERPROC) (GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBIFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBLFORMATPROC) (GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBBINDINGPROC) (GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXBINDINGDIVISORPROC) (GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECONTROLPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGEINSERTPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECALLBACKPROC) (GLDEBUGPROC callback, const void *userParam)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPUSHDEBUGGROUPPROC) (GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPOPDEBUGGROUPPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTLABELPROC) (GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLOBJECTPTRLABELPROC) (const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETOBJECTPTRLABELPROC) (const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glClearBufferData()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glDispatchCompute()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)"
  },
  {
    "label": "glDispatchComputeIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDispatchComputeIndirect(GLintptr indirect)"
  },
  {
    "label": "glCopyImageSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "glFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFramebufferParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glGetFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetInternalformati64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "glInvalidateTexSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glInvalidateTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateTexImage(GLuint texture, GLint level)"
  },
  {
    "label": "glInvalidateBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glInvalidateBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateBufferData(GLuint buffer)"
  },
  {
    "label": "glInvalidateFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateSubFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glMultiDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glGetProgramInterfaceiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramResourceIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceName()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetProgramResourceiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)"
  },
  {
    "label": "glGetProgramResourceLocation()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceLocationIndex()",
    "kind": "Method",
    "detail": "Function (GLAPI GLint APIENTRY)",
    "insertText": "glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glShaderStorageBlockBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)"
  },
  {
    "label": "glTexBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTexStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureView()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "glBindVertexBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexAttribFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribIFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribLFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexBindingDivisor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glDebugMessageControl()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsert()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallback()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLog()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glPushDebugGroup()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "glPopDebugGroup()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glPopDebugGroup(void)"
  },
  {
    "label": "glObjectLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_4 # define GL_VERSION_4_4 1 # define GL_MAX_VERTEX_ATTRIB_STRIDE 0 x82E5 # define GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED 0 x8221 # define GL_TEXTURE_BUFFER_BINDING 0 x8C2A # define GL_MAP_PERSISTENT_BIT 0 x0040 # define GL_MAP_COHERENT_BIT 0 x0080 # define GL_DYNAMIC_STORAGE_BIT 0 x0100 # define GL_CLIENT_STORAGE_BIT 0 x0200 # define GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT 0 x00004000 # define GL_BUFFER_IMMUTABLE_STORAGE 0 x821F # define GL_BUFFER_STORAGE_FLAGS 0 x8220 # define GL_CLEAR_TEXTURE 0 x9365 # define GL_LOCATION_COMPONENT 0 x934A # define GL_TRANSFORM_FEEDBACK_BUFFER_INDEX 0 x934B # define GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE 0 x934C # define GL_QUERY_BUFFER 0 x9192 # define GL_QUERY_BUFFER_BARRIER_BIT 0 x00008000 # define GL_QUERY_BUFFER_BINDING 0 x9193 # define GL_QUERY_RESULT_NO_WAIT 0 x9194 # define GL_MIRROR_CLAMP_TO_EDGE 0 x8743 typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERSTORAGEPROC) (GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARTEXIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARTEXSUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERSBASEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDBUFFERSRANGEPROC) (GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDSAMPLERSPROC) (GLuint first, GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDIMAGETEXTURESPROC) (GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDVERTEXBUFFERSPROC) (GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glBufferStorage()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glClearTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearTexSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glBindBuffersBase()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)"
  },
  {
    "label": "glBindBuffersRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)"
  },
  {
    "label": "glBindTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glBindImageTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindVertexBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_VERSION_4_5 # define GL_VERSION_4_5 1 # define GL_CONTEXT_LOST 0 x0507 # define GL_NEGATIVE_ONE_TO_ONE 0 x935E # define GL_ZERO_TO_ONE 0 x935F # define GL_CLIP_ORIGIN 0 x935C # define GL_CLIP_DEPTH_MODE 0 x935D # define GL_QUERY_WAIT_INVERTED 0 x8E17 # define GL_QUERY_NO_WAIT_INVERTED 0 x8E18 # define GL_QUERY_BY_REGION_WAIT_INVERTED 0 x8E19 # define GL_QUERY_BY_REGION_NO_WAIT_INVERTED 0 x8E1A # define GL_MAX_CULL_DISTANCES 0 x82F9 # define GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES 0 x82FA # define GL_TEXTURE_TARGET 0 x1006 # define GL_QUERY_TARGET 0 x82EA # define GL_GUILTY_CONTEXT_RESET 0 x8253 # define GL_INNOCENT_CONTEXT_RESET 0 x8254 # define GL_UNKNOWN_CONTEXT_RESET 0 x8255 # define GL_RESET_NOTIFICATION_STRATEGY 0 x8256 # define GL_LOSE_CONTEXT_ON_RESET 0 x8252 # define GL_NO_RESET_NOTIFICATION 0 x8261 # define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT 0 x00000004 # define GL_CONTEXT_RELEASE_BEHAVIOR 0 x82FB # define GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH 0 x82FC typedef)",
    "insertText": "void(APIENTRYP PFNGLCLIPCONTROLPROC) (GLenum origin, GLenum depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATETRANSFORMFEEDBACKSPROC) (GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC) (GLuint xfb, GLuint index, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC) (GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKIVPROC) (GLuint xfb, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKI_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTRANSFORMFEEDBACKI64_VPROC) (GLuint xfb, GLenum pname, GLuint index, GLint64 *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEBUFFERSPROC) (GLsizei n, GLuint *buffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERSTORAGEPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERDATAPROC) (GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYNAMEDBUFFERSUBDATAPROC) (GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDBUFFERDATAPROC) (GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPNAMEDBUFFERPROC) (GLuint buffer, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAPNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLUNMAPNAMEDBUFFERPROC) (GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC) (GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERIVPROC) (GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPARAMETERI64VPROC) (GLuint buffer, GLenum pname, GLint64 *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERPOINTERVPROC) (GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDBUFFERSUBDATAPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEFRAMEBUFFERSPROC) (GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC) (GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC) (GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTUREPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC) (GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC) (GLuint framebuffer, GLenum buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC) (GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC) (GLuint framebuffer, GLenum src)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC) (GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFVPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCLEARNAMEDFRAMEBUFFERFIPROC) (GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLITNAMEDFRAMEBUFFERPROC) (GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC) (GLuint framebuffer, GLenum target)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC) (GLuint framebuffer, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC) (GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATERENDERBUFFERSPROC) (GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEPROC) (GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC) (GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC) (GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATETEXTURESPROC) (GLenum target, GLsizei n, GLuint *textures)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBUFFERPROC) (GLuint texture, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBUFFERRANGEPROC) (GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE1DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE2DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE3DPROC) (GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC) (GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE1DPROC) (GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE2DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOPYTEXTURESUBIMAGE3DPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERFPROC) (GLuint texture, GLenum pname, GLfloat param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIPROC) (GLuint texture, GLenum pname, GLint param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, const GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, const GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, const GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGENERATETEXTUREMIPMAPPROC) (GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBINDTEXTUREUNITPROC) (GLuint unit, GLuint texture)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC) (GLuint texture, GLint level, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURELEVELPARAMETERFVPROC) (GLuint texture, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURELEVELPARAMETERIVPROC) (GLuint texture, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERFVPROC) (GLuint texture, GLenum pname, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIIVPROC) (GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIUIVPROC) (GLuint texture, GLenum pname, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTUREPARAMETERIVPROC) (GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEVERTEXARRAYSPROC) (GLsizei n, GLuint *arrays)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDISABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLENABLEVERTEXARRAYATTRIBPROC) (GLuint vaobj, GLuint index)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYELEMENTBUFFERPROC) (GLuint vaobj, GLuint buffer)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERPROC) (GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYVERTEXBUFFERSPROC) (GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBBINDINGPROC) (GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBIFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYATTRIBLFORMATPROC) (GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXARRAYBINDINGDIVISORPROC) (GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYIVPROC) (GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYINDEXEDIVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXARRAYINDEXED64IVPROC) (GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATESAMPLERSPROC) (GLsizei n, GLuint *samplers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEPROGRAMPIPELINESPROC) (GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCREATEQUERIESPROC) (GLenum target, GLsizei n, GLuint *ids)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTUI64VPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETQUERYBUFFEROBJECTUIVPROC) (GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMEMORYBARRIERBYREGIONPROC) (GLbitfield barriers)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC) (GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEPROC) (GLenum target, GLint lod, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNTEXIMAGEPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMDVPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMFVPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMUIVPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREADNPIXELSPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXTUREBARRIERPROC) (void)"
  },
  {
    "label": "glClipControl()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glClipControl(GLenum origin, GLenum depth)"
  },
  {
    "label": "glCreateTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glTransformFeedbackBufferBase()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glGetTransformFeedbackiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki64_v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param)"
  },
  {
    "label": "glCreateBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glNamedBufferStorage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glNamedBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glCopyNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glClearNamedBufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glMapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapNamedBuffer(GLuint buffer, GLenum access)"
  },
  {
    "label": "glMapNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void* APIENTRY)",
    "insertText": "glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glUnmapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glUnmapNamedBuffer(GLuint buffer)"
  },
  {
    "label": "glFlushMappedNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glGetNamedBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetNamedBufferPointerv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "glGetNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glCreateFramebuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glNamedFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glNamedFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "glNamedFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glNamedFramebufferDrawBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)"
  },
  {
    "label": "glNamedFramebufferDrawBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glNamedFramebufferReadBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src)"
  },
  {
    "label": "glInvalidateNamedFramebufferData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateNamedFramebufferSubData()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glClearNamedFramebufferiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearNamedFramebufferuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearNamedFramebufferfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearNamedFramebufferfi()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glBlitNamedFramebuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glCheckNamedFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)"
  },
  {
    "label": "glGetNamedFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetNamedFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateRenderbuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glNamedRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetNamedRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateTextures()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateTextures(GLenum target, GLsizei n, GLuint *textures)"
  },
  {
    "label": "glTextureBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTextureBufferRange()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTextureStorage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTextureStorage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureStorage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTextureStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCompressedTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCopyTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCopyTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureParameterf()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterf(GLuint texture, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glTextureParameteri()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameteri(GLuint texture, GLenum pname, GLint param)"
  },
  {
    "label": "glTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param)"
  },
  {
    "label": "glGenerateTextureMipmap()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGenerateTextureMipmap(GLuint texture)"
  },
  {
    "label": "glBindTextureUnit()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBindTextureUnit(GLuint unit, GLuint texture)"
  },
  {
    "label": "glGetTextureImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetTextureLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGetTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateVertexArrays()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glDisableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDisableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glEnableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glEnableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glVertexArrayElementBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)"
  },
  {
    "label": "glVertexArrayVertexBuffer()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexArrayVertexBuffers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glVertexArrayAttribBinding()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexArrayAttribFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribIFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribLFormat()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayBindingDivisor()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glGetVertexArrayiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexediv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexed64iv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)"
  },
  {
    "label": "glCreateSamplers()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateSamplers(GLsizei n, GLuint *samplers)"
  },
  {
    "label": "glCreateProgramPipelines()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glCreateQueries()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCreateQueries(GLenum target, GLsizei n, GLuint *ids)"
  },
  {
    "label": "glGetQueryBufferObjecti64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectui64v()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glMemoryBarrierByRegion()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMemoryBarrierByRegion(GLbitfield barriers)"
  },
  {
    "label": "glGetTextureSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureSubImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetGraphicsResetStatus()",
    "kind": "Method",
    "detail": "Function (GLAPI GLenum APIENTRY)",
    "insertText": "glGetGraphicsResetStatus(void)"
  },
  {
    "label": "glGetnCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnTexImage()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnUniformdv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glGetnUniformfv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuiv()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glReadnPixels()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glTextureBarrier()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glTextureBarrier(void)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_ES2_compatibility # define GL_ARB_ES2_compatibility 1 # endif # ifndef GL_ARB_ES3_1_compatibility # define GL_ARB_ES3_1_compatibility 1 # endif # ifndef GL_ARB_ES3_compatibility # define GL_ARB_ES3_compatibility 1 # endif # ifndef GL_ARB_arrays_of_arrays # define GL_ARB_arrays_of_arrays 1 # endif # ifndef GL_ARB_base_instance # define GL_ARB_base_instance 1 # endif # ifndef GL_ARB_bindless_texture # define GL_ARB_bindless_texture 1 typedef uint64_t GLuint64EXT ; # define GL_UNSIGNED_INT64_ARB 0 x140F typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETTEXTUREHANDLEARBPROC) (GLuint texture)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETTEXTURESAMPLERHANDLEARBPROC) (GLuint texture, GLuint sampler)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKETEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "GLuint64()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint64(APIENTRYP PFNGLGETIMAGEHANDLEARBPROC) (GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle, GLenum access)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMHANDLEUI64ARBPROC) (GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLUNIFORMHANDLEUI64VARBPROC) (GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC) (GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC) (GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISTEXTUREHANDLERESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISIMAGEHANDLERESIDENTARBPROC) (GLuint64 handle)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1UI64ARBPROC) (GLuint index, GLuint64EXT x)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLVERTEXATTRIBL1UI64VARBPROC) (GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETVERTEXATTRIBLUI64VARBPROC) (GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glGetTextureHandleARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetTextureHandleARB(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glMakeTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeTextureHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glGetImageHandleARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint64 APIENTRY)",
    "insertText": "glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "glMakeImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)"
  },
  {
    "label": "glMakeImageHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMakeImageHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformHandleui64ARB(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glIsTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glIsImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsImageHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glVertexAttribL1ui64ARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)"
  },
  {
    "label": "glVertexAttribL1ui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glGetVertexAttribLui64vARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "GLsync()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_blend_func_extended # define GL_ARB_blend_func_extended 1 # endif # ifndef GL_ARB_buffer_storage # define GL_ARB_buffer_storage 1 # endif # ifndef GL_ARB_cl_event # define GL_ARB_cl_event 1 struct _cl_context ; struct _cl_event ; # define GL_SYNC_CL_EVENT_ARB 0 x8240 # define GL_SYNC_CL_EVENT_COMPLETE_ARB 0 x8241 typedef)",
    "insertText": "GLsync(APIENTRYP PFNGLCREATESYNCFROMCLEVENTARBPROC) (struct _cl_context *context, struct _cl_event *event, GLbitfield flags)"
  },
  {
    "label": "glCreateSyncFromCLeventARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLsync APIENTRY)",
    "insertText": "glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_clear_buffer_object # define GL_ARB_clear_buffer_object 1 # endif # ifndef GL_ARB_clear_texture # define GL_ARB_clear_texture 1 # endif # ifndef GL_ARB_clip_control # define GL_ARB_clip_control 1 # endif # ifndef GL_ARB_compressed_texture_pixel_storage # define GL_ARB_compressed_texture_pixel_storage 1 # endif # ifndef GL_ARB_compute_shader # define GL_ARB_compute_shader 1 # endif # ifndef GL_ARB_compute_variable_group_size # define GL_ARB_compute_variable_group_size 1 # define GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB 0 x9344 # define GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB 0 x90EB # define GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB 0 x9345 # define GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB 0 x91BF typedef)",
    "insertText": "void(APIENTRYP PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC) (GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)"
  },
  {
    "label": "glDispatchComputeGroupSizeARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_conditional_render_inverted # define GL_ARB_conditional_render_inverted 1 # endif # ifndef GL_ARB_conservative_depth # define GL_ARB_conservative_depth 1 # endif # ifndef GL_ARB_copy_buffer # define GL_ARB_copy_buffer 1 # endif # ifndef GL_ARB_copy_image # define GL_ARB_copy_image 1 # endif # ifndef GL_ARB_cull_distance # define GL_ARB_cull_distance 1 # endif # ifndef GL_ARB_debug_output # define GL_ARB_debug_output 1 typedef)",
    "insertText": "void(APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# define GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB 0 x8242 # define GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB 0 x8243 # define GL_DEBUG_CALLBACK_FUNCTION_ARB 0 x8244 # define GL_DEBUG_CALLBACK_USER_PARAM_ARB 0 x8245 # define GL_DEBUG_SOURCE_API_ARB 0 x8246 # define GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB 0 x8247 # define GL_DEBUG_SOURCE_SHADER_COMPILER_ARB 0 x8248 # define GL_DEBUG_SOURCE_THIRD_PARTY_ARB 0 x8249 # define GL_DEBUG_SOURCE_APPLICATION_ARB 0 x824A # define GL_DEBUG_SOURCE_OTHER_ARB 0 x824B # define GL_DEBUG_TYPE_ERROR_ARB 0 x824C # define GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB 0 x824D # define GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB 0 x824E # define GL_DEBUG_TYPE_PORTABILITY_ARB 0 x824F # define GL_DEBUG_TYPE_PERFORMANCE_ARB 0 x8250 # define GL_DEBUG_TYPE_OTHER_ARB 0 x8251 # define GL_MAX_DEBUG_MESSAGE_LENGTH_ARB 0 x9143 # define GL_MAX_DEBUG_LOGGED_MESSAGES_ARB 0 x9144 # define GL_DEBUG_LOGGED_MESSAGES_ARB 0 x9145 # define GL_DEBUG_SEVERITY_HIGH_ARB 0 x9146 # define GL_DEBUG_SEVERITY_MEDIUM_ARB 0 x9147 # define GL_DEBUG_SEVERITY_LOW_ARB 0 x9148 typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECONTROLARBPROC) (GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGEINSERTARBPROC) (GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDEBUGMESSAGECALLBACKARBPROC) (GLDEBUGPROCARB callback, const void *userParam)"
  },
  {
    "label": "GLuint()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLuint(APIENTRYP PFNGLGETDEBUGMESSAGELOGARBPROC) (GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glDebugMessageControlARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsertARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallbackARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLogARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLuint APIENTRY)",
    "insertText": "glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_depth_buffer_float # define GL_ARB_depth_buffer_float 1 # endif # ifndef GL_ARB_depth_clamp # define GL_ARB_depth_clamp 1 # endif # ifndef GL_ARB_derivative_control # define GL_ARB_derivative_control 1 # endif # ifndef GL_ARB_direct_state_access # define GL_ARB_direct_state_access 1 # endif # ifndef GL_ARB_draw_buffers_blend # define GL_ARB_draw_buffers_blend 1 typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONIARBPROC) (GLuint buf, GLenum mode)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDEQUATIONSEPARATEIARBPROC) (GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCIARBPROC) (GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLBLENDFUNCSEPARATEIARBPROC) (GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glBlendEquationiARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBlendEquationiARB(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateiARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunciARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateiARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_draw_elements_base_vertex # define GL_ARB_draw_elements_base_vertex 1 # endif # ifndef GL_ARB_draw_indirect # define GL_ARB_draw_indirect 1 # endif # ifndef GL_ARB_enhanced_layouts # define GL_ARB_enhanced_layouts 1 # endif # ifndef GL_ARB_explicit_attrib_location # define GL_ARB_explicit_attrib_location 1 # endif # ifndef GL_ARB_explicit_uniform_location # define GL_ARB_explicit_uniform_location 1 # endif # ifndef GL_ARB_fragment_coord_conventions # define GL_ARB_fragment_coord_conventions 1 # endif # ifndef GL_ARB_fragment_layer_viewport # define GL_ARB_fragment_layer_viewport 1 # endif # ifndef GL_ARB_framebuffer_no_attachments # define GL_ARB_framebuffer_no_attachments 1 # endif # ifndef GL_ARB_framebuffer_object # define GL_ARB_framebuffer_object 1 # endif # ifndef GL_ARB_framebuffer_sRGB # define GL_ARB_framebuffer_sRGB 1 # endif # ifndef GL_ARB_get_program_binary # define GL_ARB_get_program_binary 1 # endif # ifndef GL_ARB_get_texture_sub_image # define GL_ARB_get_texture_sub_image 1 # endif # ifndef GL_ARB_gpu_shader5 # define GL_ARB_gpu_shader5 1 # endif # ifndef GL_ARB_gpu_shader_fp64 # define GL_ARB_gpu_shader_fp64 1 # endif # ifndef GL_ARB_half_float_vertex # define GL_ARB_half_float_vertex 1 # endif # ifndef GL_ARB_imaging # define GL_ARB_imaging 1 # define GL_BLEND_COLOR 0 x8005 # define GL_BLEND_EQUATION 0 x8009 # endif # ifndef GL_ARB_indirect_parameters # define GL_ARB_indirect_parameters 1 # define GL_PARAMETER_BUFFER_ARB 0 x80EE # define GL_PARAMETER_BUFFER_BINDING_ARB 0 x80EF typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC) (GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC) (GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawArraysIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "GLenum()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_internalformat_query # define GL_ARB_internalformat_query 1 # endif # ifndef GL_ARB_internalformat_query2 # define GL_ARB_internalformat_query2 1 # define GL_SRGB_DECODE_ARB 0 x8299 # endif # ifndef GL_ARB_invalidate_subdata # define GL_ARB_invalidate_subdata 1 # endif # ifndef GL_ARB_map_buffer_alignment # define GL_ARB_map_buffer_alignment 1 # endif # ifndef GL_ARB_map_buffer_range # define GL_ARB_map_buffer_range 1 # endif # ifndef GL_ARB_multi_bind # define GL_ARB_multi_bind 1 # endif # ifndef GL_ARB_multi_draw_indirect # define GL_ARB_multi_draw_indirect 1 # endif # ifndef GL_ARB_occlusion_query2 # define GL_ARB_occlusion_query2 1 # endif # ifndef GL_ARB_pipeline_statistics_query # define GL_ARB_pipeline_statistics_query 1 # define GL_VERTICES_SUBMITTED_ARB 0 x82EE # define GL_PRIMITIVES_SUBMITTED_ARB 0 x82EF # define GL_VERTEX_SHADER_INVOCATIONS_ARB 0 x82F0 # define GL_TESS_CONTROL_SHADER_PATCHES_ARB 0 x82F1 # define GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB 0 x82F2 # define GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB 0 x82F3 # define GL_FRAGMENT_SHADER_INVOCATIONS_ARB 0 x82F4 # define GL_COMPUTE_SHADER_INVOCATIONS_ARB 0 x82F5 # define GL_CLIPPING_INPUT_PRIMITIVES_ARB 0 x82F6 # define GL_CLIPPING_OUTPUT_PRIMITIVES_ARB 0 x82F7 # endif # ifndef GL_ARB_program_interface_query # define GL_ARB_program_interface_query 1 # endif # ifndef GL_ARB_provoking_vertex # define GL_ARB_provoking_vertex 1 # endif # ifndef GL_ARB_query_buffer_object # define GL_ARB_query_buffer_object 1 # endif # ifndef GL_ARB_robust_buffer_access_behavior # define GL_ARB_robust_buffer_access_behavior 1 # endif # ifndef GL_ARB_robustness # define GL_ARB_robustness 1 # define GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB 0 x00000004 # define GL_LOSE_CONTEXT_ON_RESET_ARB 0 x8252 # define GL_GUILTY_CONTEXT_RESET_ARB 0 x8253 # define GL_INNOCENT_CONTEXT_RESET_ARB 0 x8254 # define GL_UNKNOWN_CONTEXT_RESET_ARB 0 x8255 # define GL_RESET_NOTIFICATION_STRATEGY_ARB 0 x8256 # define GL_NO_RESET_NOTIFICATION_ARB 0 x8261 typedef)",
    "insertText": "GLenum(APIENTRYP PFNGLGETGRAPHICSRESETSTATUSARBPROC) (void)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNTEXIMAGEARBPROC) (GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLREADNPIXELSARBPROC) (GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC) (GLenum target, GLint lod, GLsizei bufSize, void *img)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMFVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMUIVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNUNIFORMDVARBPROC) (GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glGetGraphicsResetStatusARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI GLenum APIENTRY)",
    "insertText": "glGetGraphicsResetStatusARB(void)"
  },
  {
    "label": "glGetnTexImageARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)"
  },
  {
    "label": "glReadnPixelsARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnCompressedTexImageARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img)"
  },
  {
    "label": "glGetnUniformfvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glGetnUniformdvARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_robustness_isolation # define GL_ARB_robustness_isolation 1 # endif # ifndef GL_ARB_sample_shading # define GL_ARB_sample_shading 1 # define GL_SAMPLE_SHADING_ARB 0 x8C36 # define GL_MIN_SAMPLE_SHADING_VALUE_ARB 0 x8C37 typedef)",
    "insertText": "void(APIENTRYP PFNGLMINSAMPLESHADINGARBPROC) (GLfloat value)"
  },
  {
    "label": "glMinSampleShadingARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glMinSampleShadingARB(GLfloat value)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_sampler_objects # define GL_ARB_sampler_objects 1 # endif # ifndef GL_ARB_seamless_cube_map # define GL_ARB_seamless_cube_map 1 # endif # ifndef GL_ARB_seamless_cubemap_per_texture # define GL_ARB_seamless_cubemap_per_texture 1 # endif # ifndef GL_ARB_separate_shader_objects # define GL_ARB_separate_shader_objects 1 # endif # ifndef GL_ARB_shader_atomic_counters # define GL_ARB_shader_atomic_counters 1 # endif # ifndef GL_ARB_shader_bit_encoding # define GL_ARB_shader_bit_encoding 1 # endif # ifndef GL_ARB_shader_draw_parameters # define GL_ARB_shader_draw_parameters 1 # endif # ifndef GL_ARB_shader_group_vote # define GL_ARB_shader_group_vote 1 # endif # ifndef GL_ARB_shader_image_load_store # define GL_ARB_shader_image_load_store 1 # endif # ifndef GL_ARB_shader_image_size # define GL_ARB_shader_image_size 1 # endif # ifndef GL_ARB_shader_precision # define GL_ARB_shader_precision 1 # endif # ifndef GL_ARB_shader_stencil_export # define GL_ARB_shader_stencil_export 1 # endif # ifndef GL_ARB_shader_storage_buffer_object # define GL_ARB_shader_storage_buffer_object 1 # endif # ifndef GL_ARB_shader_subroutine # define GL_ARB_shader_subroutine 1 # endif # ifndef GL_ARB_shader_texture_image_samples # define GL_ARB_shader_texture_image_samples 1 # endif # ifndef GL_ARB_shading_language_420pack # define GL_ARB_shading_language_420pack 1 # endif # ifndef GL_ARB_shading_language_include # define GL_ARB_shading_language_include 1 # define GL_SHADER_INCLUDE_ARB 0 x8DAE # define GL_NAMED_STRING_LENGTH_ARB 0 x8DE9 # define GL_NAMED_STRING_TYPE_ARB 0 x8DEA typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDSTRINGARBPROC) (GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLDELETENAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLCOMPILESHADERINCLUDEARBPROC) (GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)"
  },
  {
    "label": "GLboolean()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "GLboolean(APIENTRYP PFNGLISNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDSTRINGARBPROC) (GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLGETNAMEDSTRINGIVARBPROC) (GLint namelen, const GLchar *name, GLenum pname, GLint *params)"
  },
  {
    "label": "glNamedStringARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)"
  },
  {
    "label": "glDeleteNamedStringARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glDeleteNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glCompileShaderIncludeARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)"
  },
  {
    "label": "glIsNamedStringARB()",
    "kind": "Method",
    "detail": "Function (GLAPI GLboolean APIENTRY)",
    "insertText": "glIsNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glGetNamedStringARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)"
  },
  {
    "label": "glGetNamedStringivARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_shading_language_packing # define GL_ARB_shading_language_packing 1 # endif # ifndef GL_ARB_sparse_buffer # define GL_ARB_sparse_buffer 1 # define GL_SPARSE_STORAGE_BIT_ARB 0 x0400 # define GL_SPARSE_BUFFER_PAGE_SIZE_ARB 0 x82F8 typedef)",
    "insertText": "void(APIENTRYP PFNGLBUFFERPAGECOMMITMENTARBPROC) (GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(APIENTRYP PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC) (GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentEXT()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (GLAPI void APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef GL_ARB_sparse_texture # define GL_ARB_sparse_texture 1 # define GL_TEXTURE_SPARSE_ARB 0 x91A6 # define GL_VIRTUAL_PAGE_SIZE_INDEX_ARB 0 x91A7 # define GL_NUM_SPARSE_LEVELS_ARB 0 x91AA # define GL_NUM_VIRTUAL_PAGE_SIZES_ARB 0 x91A8 # define GL_VIRTUAL_PAGE_SIZE_X_ARB 0 x9195 # define GL_VIRTUAL_PAGE_SIZE_Y_ARB 0 x9196 # define GL_VIRTUAL_PAGE_SIZE_Z_ARB 0 x9197 # define GL_MAX_SPARSE_TEXTURE_SIZE_ARB 0 x9198 # define GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB 0 x9199 # define GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB 0 x919A # define GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB 0 x91A9 typedef)",
    "insertText": "void(APIENTRYP PFNGLTEXPAGECOMMITMENTARBPROC) (GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  },
  {
    "label": "glTexPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (# ifdef GL_GLEXT_PROTOTYPES GLAPI void APIENTRY)",
    "insertText": "glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  }
]