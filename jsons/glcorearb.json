[
  {
    "label": "__GLsync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__GLsync"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "_cl_context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_context"
  },
  {
    "label": "_cl_event",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_cl_event"
  },
  {
    "label": "glCullFace()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCullFace(GLenum mode)"
  },
  {
    "label": "glFrontFace()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFrontFace(GLenum mode)"
  },
  {
    "label": "glHint()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glHint(GLenum target, GLenum mode)"
  },
  {
    "label": "glLineWidth()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLineWidth(GLfloat width)"
  },
  {
    "label": "glPointSize()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointSize(GLfloat size)"
  },
  {
    "label": "glPolygonMode()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPolygonMode(GLenum face, GLenum mode)"
  },
  {
    "label": "glScissor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScissor(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterf(GLenum target, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTexParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterfv(GLenum target, GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glTexParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameteriv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage1D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage2D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glDrawBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawBuffer(GLenum buf)"
  },
  {
    "label": "glClear()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClear(GLbitfield mask)"
  },
  {
    "label": "glClearColor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glClearStencil()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearStencil(GLint s)"
  },
  {
    "label": "glClearDepth()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearDepth(GLdouble depth)"
  },
  {
    "label": "glStencilMask()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilMask(GLuint mask)"
  },
  {
    "label": "glColorMask()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorMask(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha)"
  },
  {
    "label": "glDepthMask()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthMask(GLboolean flag)"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisable(GLenum cap)"
  },
  {
    "label": "glEnable()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnable(GLenum cap)"
  },
  {
    "label": "glFinish()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFinish(void)"
  },
  {
    "label": "glFlush()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlush(void)"
  },
  {
    "label": "glBlendFunc()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFunc(GLenum sfactor, GLenum dfactor)"
  },
  {
    "label": "glLogicOp()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLogicOp(GLenum opcode)"
  },
  {
    "label": "glStencilFunc()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilFunc(GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilOp()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilOp(GLenum fail, GLenum zfail, GLenum zpass)"
  },
  {
    "label": "glDepthFunc()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthFunc(GLenum func)"
  },
  {
    "label": "glPixelStoref()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelStoref(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPixelStorei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPixelStorei(GLenum pname, GLint param)"
  },
  {
    "label": "glReadBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReadBuffer(GLenum src)"
  },
  {
    "label": "glReadPixels()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReadPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetBooleanv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBooleanv(GLenum pname, GLboolean *data)"
  },
  {
    "label": "glGetDoublev()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDoublev(GLenum pname, GLdouble *data)"
  },
  {
    "label": "glGetError()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetError(void)"
  },
  {
    "label": "glGetFloatv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFloatv(GLenum pname, GLfloat *data)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetIntegerv(GLenum pname, GLint *data)"
  },
  {
    "label": "glGetString()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetString(GLenum name)"
  },
  {
    "label": "glGetTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexImage(GLenum target, GLint level, GLenum format, GLenum type, void *pixels)"
  },
  {
    "label": "glGetTexParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterfv(GLenum target, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexLevelParameterfv(GLenum target, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTexLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexLevelParameteriv(GLenum target, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsEnabled()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsEnabled(GLenum cap)"
  },
  {
    "label": "glDepthRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRange(GLdouble near, GLdouble far)"
  },
  {
    "label": "glViewport()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewport(GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glDrawArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArrays(GLenum mode, GLint first, GLsizei count)"
  },
  {
    "label": "glDrawElements()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElements(GLenum mode, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glGetPointerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetPointerv(GLenum pname, void **params)"
  },
  {
    "label": "glPolygonOffset()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPolygonOffset(GLfloat factor, GLfloat units)"
  },
  {
    "label": "glCopyTexImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexImage1D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border)"
  },
  {
    "label": "glCopyTexImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexImage2D(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border)"
  },
  {
    "label": "glCopyTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glBindTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTexture(GLenum target, GLuint texture)"
  },
  {
    "label": "glDeleteTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteTextures(GLsizei n, const GLuint *textures)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenTextures(GLsizei n, GLuint *textures)"
  },
  {
    "label": "glIsTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTexture(GLuint texture)"
  },
  {
    "label": "glDrawRangeElements()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawRangeElements(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage3D(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glActiveTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveTexture(GLenum texture)"
  },
  {
    "label": "glSampleCoverage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleCoverage(GLfloat value, GLboolean invert)"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage3D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage2D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexImage1D(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage3D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage2D(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTexSubImage1D(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glGetCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTexImage(GLenum target, GLint level, void *img)"
  },
  {
    "label": "glBlendFuncSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparate(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha)"
  },
  {
    "label": "glMultiDrawArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArrays(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount)"
  },
  {
    "label": "glMultiDrawElements()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElements(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount)"
  },
  {
    "label": "glPointParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterf(GLenum pname, GLfloat param)"
  },
  {
    "label": "glPointParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameterfv(GLenum pname, const GLfloat *params)"
  },
  {
    "label": "glPointParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameteri(GLenum pname, GLint param)"
  },
  {
    "label": "glPointParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPointParameteriv(GLenum pname, const GLint *params)"
  },
  {
    "label": "glBlendColor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendColor(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha)"
  },
  {
    "label": "glBlendEquation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquation(GLenum mode)"
  },
  {
    "label": "glGenQueries()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenQueries(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glDeleteQueries()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteQueries(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glIsQuery()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsQuery(GLuint id)"
  },
  {
    "label": "glBeginQuery()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginQuery(GLenum target, GLuint id)"
  },
  {
    "label": "glEndQuery()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndQuery(GLenum target)"
  },
  {
    "label": "glGetQueryiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectiv(GLuint id, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetQueryObjectuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectuiv(GLuint id, GLenum pname, GLuint *params)"
  },
  {
    "label": "glBindBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBuffer(GLenum target, GLuint buffer)"
  },
  {
    "label": "glDeleteBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteBuffers(GLsizei n, const GLuint *buffers)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glIsBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsBuffer(GLuint buffer)"
  },
  {
    "label": "glBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferData(GLenum target, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glGetBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferSubData(GLenum target, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glMapBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapBuffer(GLenum target, GLenum access)"
  },
  {
    "label": "glUnmapBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapBuffer(GLenum target)"
  },
  {
    "label": "glGetBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetBufferPointerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferPointerv(GLenum target, GLenum pname, void **params)"
  },
  {
    "label": "glBlendEquationSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparate(GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glDrawBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawBuffers(GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glStencilOpSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilOpSeparate(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass)"
  },
  {
    "label": "glStencilFuncSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilFuncSeparate(GLenum face, GLenum func, GLint ref, GLuint mask)"
  },
  {
    "label": "glStencilMaskSeparate()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glStencilMaskSeparate(GLenum face, GLuint mask)"
  },
  {
    "label": "glAttachShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glAttachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glBindAttribLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindAttribLocation(GLuint program, GLuint index, const GLchar *name)"
  },
  {
    "label": "glCompileShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompileShader(GLuint shader)"
  },
  {
    "label": "glCreateProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateProgram(void)"
  },
  {
    "label": "glCreateShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateShader(GLenum type)"
  },
  {
    "label": "glDeleteProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteProgram(GLuint program)"
  },
  {
    "label": "glDeleteShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteShader(GLuint shader)"
  },
  {
    "label": "glDetachShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDetachShader(GLuint program, GLuint shader)"
  },
  {
    "label": "glDisableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glEnableVertexAttribArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexAttribArray(GLuint index)"
  },
  {
    "label": "glGetActiveAttrib()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveAttrib(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetActiveUniform()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniform(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glGetAttachedShaders()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetAttachedShaders(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders)"
  },
  {
    "label": "glGetAttribLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetAttribLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetProgramiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramiv(GLuint program, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramInfoLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramInfoLog(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderiv(GLuint shader, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetShaderInfoLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderInfoLog(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glGetShaderSource()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderSource(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source)"
  },
  {
    "label": "glGetUniformLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGetUniformfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformfv(GLuint program, GLint location, GLfloat *params)"
  },
  {
    "label": "glGetUniformiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformiv(GLuint program, GLint location, GLint *params)"
  },
  {
    "label": "glGetVertexAttribdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glGetVertexAttribfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribfv(GLuint index, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetVertexAttribiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribPointerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribPointerv(GLuint index, GLenum pname, void **pointer)"
  },
  {
    "label": "glIsProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsProgram(GLuint program)"
  },
  {
    "label": "glIsShader()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsShader(GLuint shader)"
  },
  {
    "label": "glLinkProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glLinkProgram(GLuint program)"
  },
  {
    "label": "glShaderSource()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderSource(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length)"
  },
  {
    "label": "glUseProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUseProgram(GLuint program)"
  },
  {
    "label": "glUniform1f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1f(GLint location, GLfloat v0)"
  },
  {
    "label": "glUniform2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2f(GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glUniform3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glUniform4f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4f(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glUniform1i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1i(GLint location, GLint v0)"
  },
  {
    "label": "glUniform2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2i(GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glUniform3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3i(GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glUniform4i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4i(GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glUniform1fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4fv(GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glUniform1iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniform4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4iv(GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glValidateProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glValidateProgram(GLuint program)"
  },
  {
    "label": "glVertexAttrib1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttrib1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib1f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1f(GLuint index, GLfloat x)"
  },
  {
    "label": "glVertexAttrib1fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib1s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1s(GLuint index, GLshort x)"
  },
  {
    "label": "glVertexAttrib1sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib1sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttrib2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2f(GLuint index, GLfloat x, GLfloat y)"
  },
  {
    "label": "glVertexAttrib2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib2s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2s(GLuint index, GLshort x, GLshort y)"
  },
  {
    "label": "glVertexAttrib2sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib2sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttrib3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3f(GLuint index, GLfloat x, GLfloat y, GLfloat z)"
  },
  {
    "label": "glVertexAttrib3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib3s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3s(GLuint index, GLshort x, GLshort y, GLshort z)"
  },
  {
    "label": "glVertexAttrib3sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib3sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nbv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nbv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4Niv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Niv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4Nsv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nsv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4Nub()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nub(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w)"
  },
  {
    "label": "glVertexAttrib4Nubv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4Nuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nuiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4Nusv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4Nusv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttrib4bv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttrib4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttrib4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttrib4f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4f(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w)"
  },
  {
    "label": "glVertexAttrib4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4fv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glVertexAttrib4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttrib4s()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4s(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w)"
  },
  {
    "label": "glVertexAttrib4sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttrib4ubv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttrib4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttrib4usv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttrib4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribPointer(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x2fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x4fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x3fv(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glColorMaski()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glColorMaski(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a)"
  },
  {
    "label": "glGetBooleani_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBooleani_v(GLenum target, GLuint index, GLboolean *data)"
  },
  {
    "label": "glGetIntegeri_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetIntegeri_v(GLenum target, GLuint index, GLint *data)"
  },
  {
    "label": "glEnablei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnablei(GLenum target, GLuint index)"
  },
  {
    "label": "glDisablei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisablei(GLenum target, GLuint index)"
  },
  {
    "label": "glIsEnabledi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsEnabledi(GLenum target, GLuint index)"
  },
  {
    "label": "glBeginTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginTransformFeedback(GLenum primitiveMode)"
  },
  {
    "label": "glEndTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndTransformFeedback(void)"
  },
  {
    "label": "glBindBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferRange(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glBindBufferBase()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBufferBase(GLenum target, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackVaryings()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackVaryings(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode)"
  },
  {
    "label": "glGetTransformFeedbackVarying()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbackVarying(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name)"
  },
  {
    "label": "glClampColor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClampColor(GLenum target, GLenum clamp)"
  },
  {
    "label": "glBeginConditionalRender()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginConditionalRender(GLuint id, GLenum mode)"
  },
  {
    "label": "glEndConditionalRender()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndConditionalRender(void)"
  },
  {
    "label": "glVertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribIPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribIiv(GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetVertexAttribIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribIuiv(GLuint index, GLenum pname, GLuint *params)"
  },
  {
    "label": "glVertexAttribI1i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1i(GLuint index, GLint x)"
  },
  {
    "label": "glVertexAttribI2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2i(GLuint index, GLint x, GLint y)"
  },
  {
    "label": "glVertexAttribI3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3i(GLuint index, GLint x, GLint y, GLint z)"
  },
  {
    "label": "glVertexAttribI4i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4i(GLuint index, GLint x, GLint y, GLint z, GLint w)"
  },
  {
    "label": "glVertexAttribI1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1ui(GLuint index, GLuint x)"
  },
  {
    "label": "glVertexAttribI2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2ui(GLuint index, GLuint x, GLuint y)"
  },
  {
    "label": "glVertexAttribI3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3ui(GLuint index, GLuint x, GLuint y, GLuint z)"
  },
  {
    "label": "glVertexAttribI4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4ui(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w)"
  },
  {
    "label": "glVertexAttribI1iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4iv(GLuint index, const GLint *v)"
  },
  {
    "label": "glVertexAttribI1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI1uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI2uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI3uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4uiv(GLuint index, const GLuint *v)"
  },
  {
    "label": "glVertexAttribI4bv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4bv(GLuint index, const GLbyte *v)"
  },
  {
    "label": "glVertexAttribI4sv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4sv(GLuint index, const GLshort *v)"
  },
  {
    "label": "glVertexAttribI4ubv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4ubv(GLuint index, const GLubyte *v)"
  },
  {
    "label": "glVertexAttribI4usv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribI4usv(GLuint index, const GLushort *v)"
  },
  {
    "label": "glGetUniformuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformuiv(GLuint program, GLint location, GLuint *params)"
  },
  {
    "label": "glBindFragDataLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFragDataLocation(GLuint program, GLuint color, const GLchar *name)"
  },
  {
    "label": "glGetFragDataLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragDataLocation(GLuint program, const GLchar *name)"
  },
  {
    "label": "glUniform1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1ui(GLint location, GLuint v0)"
  },
  {
    "label": "glUniform2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2ui(GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glUniform3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3ui(GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glUniform4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4ui(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glUniform1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glUniform4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4uiv(GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterIiv(GLenum target, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexParameterIuiv(GLenum target, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glGetTexParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterIiv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTexParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTexParameterIuiv(GLenum target, GLenum pname, GLuint *params)"
  },
  {
    "label": "glClearBufferiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferiv(GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearBufferuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferuiv(GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearBufferfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferfv(GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearBufferfi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferfi(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glGetStringi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetStringi(GLenum name, GLuint index)"
  },
  {
    "label": "glIsRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsRenderbuffer(GLuint renderbuffer)"
  },
  {
    "label": "glBindRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindRenderbuffer(GLenum target, GLuint renderbuffer)"
  },
  {
    "label": "glDeleteRenderbuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteRenderbuffers(GLsizei n, const GLuint *renderbuffers)"
  },
  {
    "label": "glGenRenderbuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRenderbufferStorage(GLenum target, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetRenderbufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glIsFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsFramebuffer(GLuint framebuffer)"
  },
  {
    "label": "glBindFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFramebuffer(GLenum target, GLuint framebuffer)"
  },
  {
    "label": "glDeleteFramebuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteFramebuffers(GLsizei n, const GLuint *framebuffers)"
  },
  {
    "label": "glGenFramebuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glCheckFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCheckFramebufferStatus(GLenum target)"
  },
  {
    "label": "glFramebufferTexture1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture1D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture2D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level)"
  },
  {
    "label": "glFramebufferTexture3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture3D(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset)"
  },
  {
    "label": "glFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferRenderbuffer(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glGetFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFramebufferAttachmentParameteriv(GLenum target, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenerateMipmap(GLenum target)"
  },
  {
    "label": "glBlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlitFramebuffer(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glRenderbufferStorageMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTextureLayer(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glMapBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapBufferRange(GLenum target, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glFlushMappedBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushMappedBufferRange(GLenum target, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glBindVertexArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexArray(GLuint array)"
  },
  {
    "label": "glDeleteVertexArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteVertexArrays(GLsizei n, const GLuint *arrays)"
  },
  {
    "label": "glGenVertexArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glIsVertexArray()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsVertexArray(GLuint array)"
  },
  {
    "label": "glDrawArraysInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysInstanced(GLenum mode, GLint first, GLsizei count, GLsizei instancecount)"
  },
  {
    "label": "glDrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstanced(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount)"
  },
  {
    "label": "glTexBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBuffer(GLenum target, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glPrimitiveRestartIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPrimitiveRestartIndex(GLuint index)"
  },
  {
    "label": "glCopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyBufferSubData(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glGetUniformIndices()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformIndices(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices)"
  },
  {
    "label": "glGetActiveUniformsiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformsiv(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformName(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName)"
  },
  {
    "label": "glGetUniformBlockIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformBlockIndex(GLuint program, const GLchar *uniformBlockName)"
  },
  {
    "label": "glGetActiveUniformBlockiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformBlockiv(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetActiveUniformBlockName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveUniformBlockName(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName)"
  },
  {
    "label": "glUniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformBlockBinding(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding)"
  },
  {
    "label": "glDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawRangeElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawRangeElementsBaseVertex(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertex(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex)"
  },
  {
    "label": "glMultiDrawElementsBaseVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsBaseVertex(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex)"
  },
  {
    "label": "glProvokingVertex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProvokingVertex(GLenum mode)"
  },
  {
    "label": "glFenceSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFenceSync(GLenum condition, GLbitfield flags)"
  },
  {
    "label": "glIsSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsSync(GLsync sync)"
  },
  {
    "label": "glDeleteSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteSync(GLsync sync)"
  },
  {
    "label": "glClientWaitSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClientWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glWaitSync()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glWaitSync(GLsync sync, GLbitfield flags, GLuint64 timeout)"
  },
  {
    "label": "glGetInteger64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInteger64v(GLenum pname, GLint64 *data)"
  },
  {
    "label": "glGetSynciv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSynciv(GLsync sync, GLenum pname, GLsizei bufSize, GLsizei *length, GLint *values)"
  },
  {
    "label": "glGetInteger64i_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInteger64i_v(GLenum target, GLuint index, GLint64 *data)"
  },
  {
    "label": "glGetBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetBufferParameteri64v(GLenum target, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferTexture(GLenum target, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glTexImage2DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexImage3DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexImage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glGetMultisamplefv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetMultisamplefv(GLenum pname, GLuint index, GLfloat *val)"
  },
  {
    "label": "glSampleMaski()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSampleMaski(GLuint maskNumber, GLbitfield mask)"
  },
  {
    "label": "glBindFragDataLocationIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindFragDataLocationIndexed(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name)"
  },
  {
    "label": "glGetFragDataIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFragDataIndex(GLuint program, const GLchar *name)"
  },
  {
    "label": "glGenSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenSamplers(GLsizei count, GLuint *samplers)"
  },
  {
    "label": "glDeleteSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteSamplers(GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glIsSampler()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsSampler(GLuint sampler)"
  },
  {
    "label": "glBindSampler()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindSampler(GLuint unit, GLuint sampler)"
  },
  {
    "label": "glSamplerParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameteri(GLuint sampler, GLenum pname, GLint param)"
  },
  {
    "label": "glSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameteriv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterf(GLuint sampler, GLenum pname, GLfloat param)"
  },
  {
    "label": "glSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterfv(GLuint sampler, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterIiv(GLuint sampler, GLenum pname, const GLint *param)"
  },
  {
    "label": "glSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glSamplerParameterIuiv(GLuint sampler, GLenum pname, const GLuint *param)"
  },
  {
    "label": "glGetSamplerParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameteriv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameterIiv(GLuint sampler, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetSamplerParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameterfv(GLuint sampler, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetSamplerParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSamplerParameterIuiv(GLuint sampler, GLenum pname, GLuint *params)"
  },
  {
    "label": "glQueryCounter()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glQueryCounter(GLuint id, GLenum target)"
  },
  {
    "label": "glGetQueryObjecti64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjecti64v(GLuint id, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetQueryObjectui64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryObjectui64v(GLuint id, GLenum pname, GLuint64 *params)"
  },
  {
    "label": "glVertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribDivisor(GLuint index, GLuint divisor)"
  },
  {
    "label": "glVertexAttribP1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP1ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP1uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP2ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP2uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP3ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP3uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glVertexAttribP4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP4ui(GLuint index, GLenum type, GLboolean normalized, GLuint value)"
  },
  {
    "label": "glVertexAttribP4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribP4uiv(GLuint index, GLenum type, GLboolean normalized, const GLuint *value)"
  },
  {
    "label": "glMinSampleShading()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMinSampleShading(GLfloat value)"
  },
  {
    "label": "glBlendEquationi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationi(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparatei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparatei(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunci()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFunci(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparatei()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparatei(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysIndirect(GLenum mode, const void *indirect)"
  },
  {
    "label": "glDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect)"
  },
  {
    "label": "glUniform1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1d(GLint location, GLdouble x)"
  },
  {
    "label": "glUniform2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2d(GLint location, GLdouble x, GLdouble y)"
  },
  {
    "label": "glUniform3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3d(GLint location, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glUniform4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4d(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glUniform1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform1dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform2dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform3dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniform4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniform4dv(GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix2x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix3x4dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x2dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformMatrix4x3dv(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glGetUniformdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformdv(GLuint program, GLint location, GLdouble *params)"
  },
  {
    "label": "glGetSubroutineUniformLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSubroutineUniformLocation(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetSubroutineIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetSubroutineIndex(GLuint program, GLenum shadertype, const GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineUniformiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformiv(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values)"
  },
  {
    "label": "glGetActiveSubroutineUniformName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveSubroutineUniformName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetActiveSubroutineName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveSubroutineName(GLuint program, GLenum shadertype, GLuint index, GLsizei bufsize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glUniformSubroutinesuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformSubroutinesuiv(GLenum shadertype, GLsizei count, const GLuint *indices)"
  },
  {
    "label": "glGetUniformSubroutineuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetUniformSubroutineuiv(GLenum shadertype, GLint location, GLuint *params)"
  },
  {
    "label": "glGetProgramStageiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramStageiv(GLuint program, GLenum shadertype, GLenum pname, GLint *values)"
  },
  {
    "label": "glPatchParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPatchParameteri(GLenum pname, GLint value)"
  },
  {
    "label": "glPatchParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPatchParameterfv(GLenum pname, const GLfloat *values)"
  },
  {
    "label": "glBindTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTransformFeedback(GLenum target, GLuint id)"
  },
  {
    "label": "glDeleteTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteTransformFeedbacks(GLsizei n, const GLuint *ids)"
  },
  {
    "label": "glGenTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glIsTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTransformFeedback(GLuint id)"
  },
  {
    "label": "glPauseTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPauseTransformFeedback(void)"
  },
  {
    "label": "glResumeTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glResumeTransformFeedback(void)"
  },
  {
    "label": "glDrawTransformFeedback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedback(GLenum mode, GLuint id)"
  },
  {
    "label": "glDrawTransformFeedbackStream()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedbackStream(GLenum mode, GLuint id, GLuint stream)"
  },
  {
    "label": "glBeginQueryIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBeginQueryIndexed(GLenum target, GLuint index, GLuint id)"
  },
  {
    "label": "glEndQueryIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEndQueryIndexed(GLenum target, GLuint index)"
  },
  {
    "label": "glGetQueryIndexediv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryIndexediv(GLenum target, GLuint index, GLenum pname, GLint *params)"
  },
  {
    "label": "glReleaseShaderCompiler()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReleaseShaderCompiler(void)"
  },
  {
    "label": "glShaderBinary()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderBinary(GLsizei count, const GLuint *shaders, GLenum binaryformat, const void *binary, GLsizei length)"
  },
  {
    "label": "glGetShaderPrecisionFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetShaderPrecisionFormat(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision)"
  },
  {
    "label": "glDepthRangef()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangef(GLfloat n, GLfloat f)"
  },
  {
    "label": "glClearDepthf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearDepthf(GLfloat d)"
  },
  {
    "label": "glGetProgramBinary()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramBinary(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary)"
  },
  {
    "label": "glProgramBinary()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramBinary(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length)"
  },
  {
    "label": "glProgramParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramParameteri(GLuint program, GLenum pname, GLint value)"
  },
  {
    "label": "glUseProgramStages()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUseProgramStages(GLuint pipeline, GLbitfield stages, GLuint program)"
  },
  {
    "label": "glActiveShaderProgram()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glActiveShaderProgram(GLuint pipeline, GLuint program)"
  },
  {
    "label": "glCreateShaderProgramv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateShaderProgramv(GLenum type, GLsizei count, const GLchar *const*strings)"
  },
  {
    "label": "glBindProgramPipeline()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glDeleteProgramPipelines()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteProgramPipelines(GLsizei n, const GLuint *pipelines)"
  },
  {
    "label": "glGenProgramPipelines()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glIsProgramPipeline()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramPipelineiv(GLuint pipeline, GLenum pname, GLint *params)"
  },
  {
    "label": "glProgramUniform1i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1i(GLuint program, GLint location, GLint v0)"
  },
  {
    "label": "glProgramUniform1iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform1f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1f(GLuint program, GLint location, GLfloat v0)"
  },
  {
    "label": "glProgramUniform1fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1d(GLuint program, GLint location, GLdouble v0)"
  },
  {
    "label": "glProgramUniform1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform1ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1ui(GLuint program, GLint location, GLuint v0)"
  },
  {
    "label": "glProgramUniform1uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform1uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform2i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2i(GLuint program, GLint location, GLint v0, GLint v1)"
  },
  {
    "label": "glProgramUniform2iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform2f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2f(GLuint program, GLint location, GLfloat v0, GLfloat v1)"
  },
  {
    "label": "glProgramUniform2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2d(GLuint program, GLint location, GLdouble v0, GLdouble v1)"
  },
  {
    "label": "glProgramUniform2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform2ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2ui(GLuint program, GLint location, GLuint v0, GLuint v1)"
  },
  {
    "label": "glProgramUniform2uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform2uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform3i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2)"
  },
  {
    "label": "glProgramUniform3iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform3f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2)"
  },
  {
    "label": "glProgramUniform3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2)"
  },
  {
    "label": "glProgramUniform3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform3ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2)"
  },
  {
    "label": "glProgramUniform3uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform3uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniform4i()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4i(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3)"
  },
  {
    "label": "glProgramUniform4iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4iv(GLuint program, GLint location, GLsizei count, const GLint *value)"
  },
  {
    "label": "glProgramUniform4f()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4f(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3)"
  },
  {
    "label": "glProgramUniform4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4fv(GLuint program, GLint location, GLsizei count, const GLfloat *value)"
  },
  {
    "label": "glProgramUniform4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4d(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3)"
  },
  {
    "label": "glProgramUniform4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4dv(GLuint program, GLint location, GLsizei count, const GLdouble *value)"
  },
  {
    "label": "glProgramUniform4ui()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4ui(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3)"
  },
  {
    "label": "glProgramUniform4uiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniform4uiv(GLuint program, GLint location, GLsizei count, const GLuint *value)"
  },
  {
    "label": "glProgramUniformMatrix2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3fv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3fv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value)"
  },
  {
    "label": "glProgramUniformMatrix2x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix2x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix2x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x2dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix3x4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix3x4dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glProgramUniformMatrix4x3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformMatrix4x3dv(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value)"
  },
  {
    "label": "glValidateProgramPipeline()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glValidateProgramPipeline(GLuint pipeline)"
  },
  {
    "label": "glGetProgramPipelineInfoLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramPipelineInfoLog(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog)"
  },
  {
    "label": "glVertexAttribL1d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1d(GLuint index, GLdouble x)"
  },
  {
    "label": "glVertexAttribL2d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2d(GLuint index, GLdouble x, GLdouble y)"
  },
  {
    "label": "glVertexAttribL3d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3d(GLuint index, GLdouble x, GLdouble y, GLdouble z)"
  },
  {
    "label": "glVertexAttribL4d()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4d(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w)"
  },
  {
    "label": "glVertexAttribL1dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL2dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL2dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL3dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL3dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribL4dv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL4dv(GLuint index, const GLdouble *v)"
  },
  {
    "label": "glVertexAttribLPointer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribLPointer(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer)"
  },
  {
    "label": "glGetVertexAttribLdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribLdv(GLuint index, GLenum pname, GLdouble *params)"
  },
  {
    "label": "glViewportArrayv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportArrayv(GLuint first, GLsizei count, const GLfloat *v)"
  },
  {
    "label": "glViewportIndexedf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportIndexedf(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h)"
  },
  {
    "label": "glViewportIndexedfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glViewportIndexedfv(GLuint index, const GLfloat *v)"
  },
  {
    "label": "glScissorArrayv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScissorArrayv(GLuint first, GLsizei count, const GLint *v)"
  },
  {
    "label": "glScissorIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScissorIndexed(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height)"
  },
  {
    "label": "glScissorIndexedv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glScissorIndexedv(GLuint index, const GLint *v)"
  },
  {
    "label": "glDepthRangeArrayv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangeArrayv(GLuint first, GLsizei count, const GLdouble *v)"
  },
  {
    "label": "glDepthRangeIndexed()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDepthRangeIndexed(GLuint index, GLdouble n, GLdouble f)"
  },
  {
    "label": "glGetFloati_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFloati_v(GLenum target, GLuint index, GLfloat *data)"
  },
  {
    "label": "glGetDoublei_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDoublei_v(GLenum target, GLuint index, GLdouble *data)"
  },
  {
    "label": "glDrawArraysInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawArraysInstancedBaseInstance(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseInstance()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance)"
  },
  {
    "label": "glDrawElementsInstancedBaseVertexBaseInstance()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawElementsInstancedBaseVertexBaseInstance(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance)"
  },
  {
    "label": "glGetInternalformativ()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInternalformativ(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetActiveAtomicCounterBufferiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetActiveAtomicCounterBufferiv(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params)"
  },
  {
    "label": "glBindImageTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindImageTexture(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format)"
  },
  {
    "label": "glMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMemoryBarrier(GLbitfield barriers)"
  },
  {
    "label": "glTexStorage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage1D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTexStorage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage2D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTexStorage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage3D(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glDrawTransformFeedbackInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedbackInstanced(GLenum mode, GLuint id, GLsizei instancecount)"
  },
  {
    "label": "glDrawTransformFeedbackStreamInstanced()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDrawTransformFeedbackStreamInstanced(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount)"
  },
  {
    "label": "glClearBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferData(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearBufferSubData(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glDispatchCompute()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDispatchCompute(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z)"
  },
  {
    "label": "glDispatchComputeIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDispatchComputeIndirect(GLintptr indirect)"
  },
  {
    "label": "glCopyImageSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyImageSubData(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth)"
  },
  {
    "label": "glFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFramebufferParameteri(GLenum target, GLenum pname, GLint param)"
  },
  {
    "label": "glGetFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetFramebufferParameteriv(GLenum target, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetInternalformati64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetInternalformati64v(GLenum target, GLenum internalformat, GLenum pname, GLsizei bufSize, GLint64 *params)"
  },
  {
    "label": "glInvalidateTexSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glInvalidateTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateTexImage(GLuint texture, GLint level)"
  },
  {
    "label": "glInvalidateBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glInvalidateBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateBufferData(GLuint buffer)"
  },
  {
    "label": "glInvalidateFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateSubFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateSubFramebuffer(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glMultiDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysIndirect(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsIndirect(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride)"
  },
  {
    "label": "glGetProgramInterfaceiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramInterfaceiv(GLuint program, GLenum programInterface, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetProgramResourceIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceName()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceName(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name)"
  },
  {
    "label": "glGetProgramResourceiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceiv(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei bufSize, GLsizei *length, GLint *params)"
  },
  {
    "label": "glGetProgramResourceLocation()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceLocation(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glGetProgramResourceLocationIndex()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetProgramResourceLocationIndex(GLuint program, GLenum programInterface, const GLchar *name)"
  },
  {
    "label": "glShaderStorageBlockBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glShaderStorageBlockBinding(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding)"
  },
  {
    "label": "glTexBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexBufferRange(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTexStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage2DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTexStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexStorage3DMultisample(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureView()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureView(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers)"
  },
  {
    "label": "glBindVertexBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexBuffer(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexAttribFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribFormat(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribIFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribIFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribLFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribLFormat(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexAttribBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribBinding(GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexBindingDivisor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexBindingDivisor(GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glDebugMessageControl()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageControl(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsert()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageInsert(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallback()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageCallback(GLDEBUGPROC callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLog()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDebugMessageLog(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glPushDebugGroup()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPushDebugGroup(GLenum source, GLuint id, GLsizei length, const GLchar *message)"
  },
  {
    "label": "glPopDebugGroup()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glPopDebugGroup(void)"
  },
  {
    "label": "glObjectLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glObjectLabel(GLenum identifier, GLuint name, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectLabel(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glObjectPtrLabel(const void *ptr, GLsizei length, const GLchar *label)"
  },
  {
    "label": "glGetObjectPtrLabel()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetObjectPtrLabel(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label)"
  },
  {
    "label": "glBufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferStorage(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glClearTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearTexImage(GLuint texture, GLint level, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearTexSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearTexSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glBindBuffersBase()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBuffersBase(GLenum target, GLuint first, GLsizei count, const GLuint *buffers)"
  },
  {
    "label": "glBindBuffersRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindBuffersRange(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes)"
  },
  {
    "label": "glBindTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindSamplers(GLuint first, GLsizei count, const GLuint *samplers)"
  },
  {
    "label": "glBindImageTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindImageTextures(GLuint first, GLsizei count, const GLuint *textures)"
  },
  {
    "label": "glBindVertexBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindVertexBuffers(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glClipControl()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClipControl(GLenum origin, GLenum depth)"
  },
  {
    "label": "glCreateTransformFeedbacks()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateTransformFeedbacks(GLsizei n, GLuint *ids)"
  },
  {
    "label": "glTransformFeedbackBufferBase()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackBufferBase(GLuint xfb, GLuint index, GLuint buffer)"
  },
  {
    "label": "glTransformFeedbackBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTransformFeedbackBufferRange(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glGetTransformFeedbackiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbackiv(GLuint xfb, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbacki_v(GLuint xfb, GLenum pname, GLuint index, GLint *param)"
  },
  {
    "label": "glGetTransformFeedbacki64_v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTransformFeedbacki64_v(GLuint xfb, GLenum pname, GLuint index, GLint64 *param)"
  },
  {
    "label": "glCreateBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateBuffers(GLsizei n, GLuint *buffers)"
  },
  {
    "label": "glNamedBufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferStorage(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags)"
  },
  {
    "label": "glNamedBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferData(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage)"
  },
  {
    "label": "glNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data)"
  },
  {
    "label": "glCopyNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyNamedBufferSubData(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size)"
  },
  {
    "label": "glClearNamedBufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedBufferData(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glClearNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedBufferSubData(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data)"
  },
  {
    "label": "glMapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapNamedBuffer(GLuint buffer, GLenum access)"
  },
  {
    "label": "glMapNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMapNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length, GLbitfield access)"
  },
  {
    "label": "glUnmapNamedBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUnmapNamedBuffer(GLuint buffer)"
  },
  {
    "label": "glFlushMappedNamedBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glFlushMappedNamedBufferRange(GLuint buffer, GLintptr offset, GLsizeiptr length)"
  },
  {
    "label": "glGetNamedBufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferParameteriv(GLuint buffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetNamedBufferParameteri64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferParameteri64v(GLuint buffer, GLenum pname, GLint64 *params)"
  },
  {
    "label": "glGetNamedBufferPointerv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferPointerv(GLuint buffer, GLenum pname, void **params)"
  },
  {
    "label": "glGetNamedBufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedBufferSubData(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data)"
  },
  {
    "label": "glCreateFramebuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateFramebuffers(GLsizei n, GLuint *framebuffers)"
  },
  {
    "label": "glNamedFramebufferRenderbuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferRenderbuffer(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer)"
  },
  {
    "label": "glNamedFramebufferParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferParameteri(GLuint framebuffer, GLenum pname, GLint param)"
  },
  {
    "label": "glNamedFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTexture(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level)"
  },
  {
    "label": "glNamedFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferTextureLayer(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer)"
  },
  {
    "label": "glNamedFramebufferDrawBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffer(GLuint framebuffer, GLenum buf)"
  },
  {
    "label": "glNamedFramebufferDrawBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferDrawBuffers(GLuint framebuffer, GLsizei n, const GLenum *bufs)"
  },
  {
    "label": "glNamedFramebufferReadBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedFramebufferReadBuffer(GLuint framebuffer, GLenum src)"
  },
  {
    "label": "glInvalidateNamedFramebufferData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments)"
  },
  {
    "label": "glInvalidateNamedFramebufferSubData()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glInvalidateNamedFramebufferSubData(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glClearNamedFramebufferiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value)"
  },
  {
    "label": "glClearNamedFramebufferuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferuiv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value)"
  },
  {
    "label": "glClearNamedFramebufferfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferfv(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value)"
  },
  {
    "label": "glClearNamedFramebufferfi()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glClearNamedFramebufferfi(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil)"
  },
  {
    "label": "glBlitNamedFramebuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlitNamedFramebuffer(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter)"
  },
  {
    "label": "glCheckNamedFramebufferStatus()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCheckNamedFramebufferStatus(GLuint framebuffer, GLenum target)"
  },
  {
    "label": "glGetNamedFramebufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedFramebufferParameteriv(GLuint framebuffer, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetNamedFramebufferAttachmentParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedFramebufferAttachmentParameteriv(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateRenderbuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateRenderbuffers(GLsizei n, GLuint *renderbuffers)"
  },
  {
    "label": "glNamedRenderbufferStorage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedRenderbufferStorage(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glNamedRenderbufferStorageMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedRenderbufferStorageMultisample(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glGetNamedRenderbufferParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedRenderbufferParameteriv(GLuint renderbuffer, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateTextures()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateTextures(GLenum target, GLsizei n, GLuint *textures)"
  },
  {
    "label": "glTextureBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBuffer(GLuint texture, GLenum internalformat, GLuint buffer)"
  },
  {
    "label": "glTextureBufferRange()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBufferRange(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size)"
  },
  {
    "label": "glTextureStorage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage1D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width)"
  },
  {
    "label": "glTextureStorage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage2D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureStorage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage3D(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth)"
  },
  {
    "label": "glTextureStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage2DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureStorage3DMultisample()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureStorage3DMultisample(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations)"
  },
  {
    "label": "glTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels)"
  },
  {
    "label": "glCompressedTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCompressedTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompressedTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data)"
  },
  {
    "label": "glCopyTextureSubImage1D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage1D(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width)"
  },
  {
    "label": "glCopyTextureSubImage2D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage2D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glCopyTextureSubImage3D()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCopyTextureSubImage3D(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height)"
  },
  {
    "label": "glTextureParameterf()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterf(GLuint texture, GLenum pname, GLfloat param)"
  },
  {
    "label": "glTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterfv(GLuint texture, GLenum pname, const GLfloat *param)"
  },
  {
    "label": "glTextureParameteri()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameteri(GLuint texture, GLenum pname, GLint param)"
  },
  {
    "label": "glTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterIiv(GLuint texture, GLenum pname, const GLint *params)"
  },
  {
    "label": "glTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameterIuiv(GLuint texture, GLenum pname, const GLuint *params)"
  },
  {
    "label": "glTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureParameteriv(GLuint texture, GLenum pname, const GLint *param)"
  },
  {
    "label": "glGenerateTextureMipmap()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGenerateTextureMipmap(GLuint texture)"
  },
  {
    "label": "glBindTextureUnit()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBindTextureUnit(GLuint unit, GLuint texture)"
  },
  {
    "label": "glGetTextureImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureImage(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTextureImage(GLuint texture, GLint level, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetTextureLevelParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureLevelParameterfv(GLuint texture, GLint level, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureLevelParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureLevelParameteriv(GLuint texture, GLint level, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterfv(GLuint texture, GLenum pname, GLfloat *params)"
  },
  {
    "label": "glGetTextureParameterIiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterIiv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glGetTextureParameterIuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameterIuiv(GLuint texture, GLenum pname, GLuint *params)"
  },
  {
    "label": "glGetTextureParameteriv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureParameteriv(GLuint texture, GLenum pname, GLint *params)"
  },
  {
    "label": "glCreateVertexArrays()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateVertexArrays(GLsizei n, GLuint *arrays)"
  },
  {
    "label": "glDisableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDisableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glEnableVertexArrayAttrib()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glEnableVertexArrayAttrib(GLuint vaobj, GLuint index)"
  },
  {
    "label": "glVertexArrayElementBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayElementBuffer(GLuint vaobj, GLuint buffer)"
  },
  {
    "label": "glVertexArrayVertexBuffer()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexBuffer(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride)"
  },
  {
    "label": "glVertexArrayVertexBuffers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayVertexBuffers(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides)"
  },
  {
    "label": "glVertexArrayAttribBinding()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribBinding(GLuint vaobj, GLuint attribindex, GLuint bindingindex)"
  },
  {
    "label": "glVertexArrayAttribFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribIFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribIFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayAttribLFormat()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayAttribLFormat(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset)"
  },
  {
    "label": "glVertexArrayBindingDivisor()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexArrayBindingDivisor(GLuint vaobj, GLuint bindingindex, GLuint divisor)"
  },
  {
    "label": "glGetVertexArrayiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayiv(GLuint vaobj, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexediv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayIndexediv(GLuint vaobj, GLuint index, GLenum pname, GLint *param)"
  },
  {
    "label": "glGetVertexArrayIndexed64iv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexArrayIndexed64iv(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param)"
  },
  {
    "label": "glCreateSamplers()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateSamplers(GLsizei n, GLuint *samplers)"
  },
  {
    "label": "glCreateProgramPipelines()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateProgramPipelines(GLsizei n, GLuint *pipelines)"
  },
  {
    "label": "glCreateQueries()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateQueries(GLenum target, GLsizei n, GLuint *ids)"
  },
  {
    "label": "glGetQueryBufferObjecti64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjecti64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjectiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectui64v()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjectui64v(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glGetQueryBufferObjectuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetQueryBufferObjectuiv(GLuint id, GLuint buffer, GLenum pname, GLintptr offset)"
  },
  {
    "label": "glMemoryBarrierByRegion()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMemoryBarrierByRegion(GLbitfield barriers)"
  },
  {
    "label": "glGetTextureSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetCompressedTextureSubImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetCompressedTextureSubImage(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetGraphicsResetStatus()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetGraphicsResetStatus(void)"
  },
  {
    "label": "glGetnCompressedTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnCompressedTexImage(GLenum target, GLint lod, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnTexImage()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnTexImage(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels)"
  },
  {
    "label": "glGetnUniformdv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformdv(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glGetnUniformfv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformfv(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformiv(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuiv()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformuiv(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glReadnPixels()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReadnPixels(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glTextureBarrier()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTextureBarrier(void)"
  },
  {
    "label": "glGetTextureHandleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureHandleARB(GLuint texture)"
  },
  {
    "label": "glGetTextureSamplerHandleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetTextureSamplerHandleARB(GLuint texture, GLuint sampler)"
  },
  {
    "label": "glMakeTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glMakeTextureHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeTextureHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glGetImageHandleARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetImageHandleARB(GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum format)"
  },
  {
    "label": "glMakeImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeImageHandleResidentARB(GLuint64 handle, GLenum access)"
  },
  {
    "label": "glMakeImageHandleNonResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMakeImageHandleNonResidentARB(GLuint64 handle)"
  },
  {
    "label": "glUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformHandleui64ARB(GLint location, GLuint64 value)"
  },
  {
    "label": "glUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glUniformHandleui64vARB(GLint location, GLsizei count, const GLuint64 *value)"
  },
  {
    "label": "glProgramUniformHandleui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformHandleui64ARB(GLuint program, GLint location, GLuint64 value)"
  },
  {
    "label": "glProgramUniformHandleui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glProgramUniformHandleui64vARB(GLuint program, GLint location, GLsizei count, const GLuint64 *values)"
  },
  {
    "label": "glIsTextureHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsTextureHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glIsImageHandleResidentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsImageHandleResidentARB(GLuint64 handle)"
  },
  {
    "label": "glVertexAttribL1ui64ARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1ui64ARB(GLuint index, GLuint64EXT x)"
  },
  {
    "label": "glVertexAttribL1ui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glVertexAttribL1ui64vARB(GLuint index, const GLuint64EXT *v)"
  },
  {
    "label": "glGetVertexAttribLui64vARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetVertexAttribLui64vARB(GLuint index, GLenum pname, GLuint64EXT *params)"
  },
  {
    "label": "glCreateSyncFromCLeventARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCreateSyncFromCLeventARB(struct _cl_context *context, struct _cl_event *event, GLbitfield flags)"
  },
  {
    "label": "glDispatchComputeGroupSizeARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDispatchComputeGroupSizeARB(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z, GLuint group_size_x, GLuint group_size_y, GLuint group_size_z)"
  },
  {
    "label": "glDebugMessageControlARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageControlARB(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled)"
  },
  {
    "label": "glDebugMessageInsertARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageInsertARB(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf)"
  },
  {
    "label": "glDebugMessageCallbackARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDebugMessageCallbackARB(GLDEBUGPROCARB callback, const void *userParam)"
  },
  {
    "label": "glGetDebugMessageLogARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetDebugMessageLogARB(GLuint count, GLsizei bufSize, GLenum *sources, GLenum *types, GLuint *ids, GLenum *severities, GLsizei *lengths, GLchar *messageLog)"
  },
  {
    "label": "glBlendEquationiARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationiARB(GLuint buf, GLenum mode)"
  },
  {
    "label": "glBlendEquationSeparateiARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendEquationSeparateiARB(GLuint buf, GLenum modeRGB, GLenum modeAlpha)"
  },
  {
    "label": "glBlendFunciARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFunciARB(GLuint buf, GLenum src, GLenum dst)"
  },
  {
    "label": "glBlendFuncSeparateiARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBlendFuncSeparateiARB(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha)"
  },
  {
    "label": "glMultiDrawArraysIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawArraysIndirectCountARB(GLenum mode, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glMultiDrawElementsIndirectCountARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMultiDrawElementsIndirectCountARB(GLenum mode, GLenum type, GLintptr indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride)"
  },
  {
    "label": "glGetGraphicsResetStatusARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetGraphicsResetStatusARB(void)"
  },
  {
    "label": "glGetnTexImageARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnTexImageARB(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *img)"
  },
  {
    "label": "glReadnPixelsARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glReadnPixelsARB(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data)"
  },
  {
    "label": "glGetnCompressedTexImageARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnCompressedTexImageARB(GLenum target, GLint lod, GLsizei bufSize, void *img)"
  },
  {
    "label": "glGetnUniformfvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformfvARB(GLuint program, GLint location, GLsizei bufSize, GLfloat *params)"
  },
  {
    "label": "glGetnUniformivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformivARB(GLuint program, GLint location, GLsizei bufSize, GLint *params)"
  },
  {
    "label": "glGetnUniformuivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformuivARB(GLuint program, GLint location, GLsizei bufSize, GLuint *params)"
  },
  {
    "label": "glGetnUniformdvARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetnUniformdvARB(GLuint program, GLint location, GLsizei bufSize, GLdouble *params)"
  },
  {
    "label": "glMinSampleShadingARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glMinSampleShadingARB(GLfloat value)"
  },
  {
    "label": "glNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedStringARB(GLenum type, GLint namelen, const GLchar *name, GLint stringlen, const GLchar *string)"
  },
  {
    "label": "glDeleteNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glDeleteNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glCompileShaderIncludeARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glCompileShaderIncludeARB(GLuint shader, GLsizei count, const GLchar *const*path, const GLint *length)"
  },
  {
    "label": "glIsNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glIsNamedStringARB(GLint namelen, const GLchar *name)"
  },
  {
    "label": "glGetNamedStringARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedStringARB(GLint namelen, const GLchar *name, GLsizei bufSize, GLint *stringlen, GLchar *string)"
  },
  {
    "label": "glGetNamedStringivARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glGetNamedStringivARB(GLint namelen, const GLchar *name, GLenum pname, GLint *params)"
  },
  {
    "label": "glBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glBufferPageCommitmentARB(GLenum target, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentEXT()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentEXT(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glNamedBufferPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glNamedBufferPageCommitmentARB(GLuint buffer, GLintptr offset, GLsizeiptr size, GLboolean commit)"
  },
  {
    "label": "glTexPageCommitmentARB()",
    "kind": "Method",
    "detail": "Function (APIENTRY)",
    "insertText": "glTexPageCommitmentARB(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLboolean commit)"
  }
]