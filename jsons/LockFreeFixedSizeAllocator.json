[
  {
    "label": "TLockFreeFixedSizeAllocator_TLSCacheBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLockFreeFixedSizeAllocator_TLSCacheBase"
  },
  {
    "label": "FThreadLocalCache",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FThreadLocalCache"
  },
  {
    "label": "TLockFreeFixedSizeAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLockFreeFixedSizeAllocator"
  },
  {
    "label": "TLockFreeFixedSizeAllocator_TLSCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLockFreeFixedSizeAllocator_TLSCache"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TLockFreeClassAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLockFreeClassAllocator"
  },
  {
    "label": "TLockFreeClassAllocator_TLSCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TLockFreeClassAllocator_TLSCache"
  },
  {
    "label": "USE_NAIVE_TLockFreeFixedSizeAllocator_TLSCacheBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AutoRTFM / AutoRTFM . h \" # include \" Misc / AssertionMacros . h \" # include \" HAL / UnrealMemory . h \" # include \" Misc / NoopCounter . h \" # include \" Containers / LockFreeList . h \" # ifndef USE_NAIVE_TLockFreeFixedSizeAllocator_TLSCacheBase # define)",
    "insertText": "USE_NAIVE_TLockFreeFixedSizeAllocator_TLSCacheBase(0)"
  },
  {
    "label": "TLockFreeFixedSizeAllocator_TLSCacheBase()",
    "kind": "Method",
    "detail": "Function (enum { SIZE_PER_BUNDLE = 6 5 5 3 6,NUM_PER_BUNDLE = SIZE_PER_BUNDLE / SIZE } ; public :)",
    "insertText": "TLockFreeFixedSizeAllocator_TLSCacheBase()"
  },
  {
    "label": "AllocTlsSlot()",
    "kind": "Method",
    "detail": "Function (TlsSlot =)",
    "insertText": "AllocTlsSlot()"
  },
  {
    "label": "FreeTlsSlot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeTlsSlot(TlsSlot)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (TlsSlot = FPlatformTLS::InvalidTlsSlot ; } void*)",
    "insertText": "Allocate()"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (# if USE_NAIVE_TLockFreeFixedSizeAllocator_TLSCacheBase return)",
    "insertText": "Malloc(SIZE)"
  },
  {
    "label": "GetTLS()",
    "kind": "Method",
    "detail": "Function (# else FThreadLocalCache& TLS =)",
    "insertText": "GetTLS()"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (TLS . PartialBundle = TLS . FullBundle ; TLS . FullBundle = nullptr ; } else { TLS . PartialBundle = GlobalFreeListBundles .)",
    "insertText": "Pop()"
  },
  {
    "label": "PartialBundle()",
    "kind": "Method",
    "detail": "Function (TLS .)",
    "insertText": "PartialBundle(void**)FMemory::Malloc(SIZE_PER_BUNDLE)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (void** Next = TLS . PartialBundle ;)",
    "insertText": "for(int32 Index = 0; Index < NUM_PER_BUNDLE - 1; Index++)"
  },
  {
    "label": "NextNext()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "NextNext(void*)(((uint8*)Next) + SIZE)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (* Next = NextNext ;)",
    "insertText": "Next(void**)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (}* Next = nullptr ; NumFree .)",
    "insertText": "Add(NUM_PER_BUNDLE)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} } TLS . NumPartial = NUM_PER_BUNDLE ; } NumUsed .)",
    "insertText": "Increment()"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (NumFree .)",
    "insertText": "Decrement()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Result(void*)"
  },
  {
    "label": "PartialBundle()",
    "kind": "Method",
    "detail": "Function (TLS .)",
    "insertText": "PartialBundle(void**)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (TLS . NumPartial - - ;)",
    "insertText": "check(TLS.NumPartial >= 0 && ((!!TLS.NumPartial) == (!!TLS.PartialBundle)))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (# if USE_NAIVE_TLockFreeFixedSizeAllocator_TLSCacheBase return)",
    "insertText": "Free(Item)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (GlobalFreeListBundles .)",
    "insertText": "Push(TLS.FullBundle)"
  },
  {
    "label": "NumPartial()",
    "kind": "Method",
    "detail": "Function (} TLS . FullBundle = TLS . PartialBundle ; TLS . PartialBundle = nullptr ; TLS .)",
    "insertText": "NumPartial(void**)Item = (void*)"
  },
  {
    "label": "GetNumUsed()",
    "kind": "Method",
    "detail": "Function (TLS . NumPartial + + ; # endif } const TTrackingCounter&)",
    "insertText": "GetNumUsed()"
  },
  {
    "label": "TLS()",
    "kind": "Method",
    "detail": "Function (FThreadLocalCache*)",
    "insertText": "TLS(FThreadLocalCache*)FPlatformTLS::GetTlsValue(TlsSlot)"
  },
  {
    "label": "FThreadLocalCache()",
    "kind": "Method",
    "detail": "Function (TLS = new)",
    "insertText": "FThreadLocalCache()"
  },
  {
    "label": "SetTlsValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTlsValue(TlsSlot, TLS)"
  },
  {
    "label": "TLockFreeFixedSizeAllocator()",
    "kind": "Method",
    "detail": "Function (} return* TLS ; } uint32 TlsSlot ; TBundleRecycler GlobalFreeListBundles ; TTrackingCounter NumUsed ; TTrackingCounter NumFree ; } ; template<int32 SIZE,int TPaddingForCacheContention,TTrackingCounter = FNoopCounter> class TLockFreeFixedSizeAllocator { public : ~)",
    "insertText": "TLockFreeFixedSizeAllocator()"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "check(!NumUsed.GetValue())"
  },
  {
    "label": "Trim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Trim()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "if(AutoRTFM::IsClosed() && AutoRTFM::IsOnCurrentTransactionStack(this))"
  },
  {
    "label": "PopAllOnAbortHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopAllOnAbortHandlers(this)"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PushOnAbortHandler(this, [this]() { NumUsed.Decrement(); })"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} return Memory ; } void)",
    "insertText": "Free(void* Item)"
  },
  {
    "label": "PushOnAbortHandler()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "PushOnAbortHandler(this, [this]() { NumUsed.Increment(); })"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} else { FreeList .)",
    "insertText": "Push(Item)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (UE_AUTORTFM_OPEN {)",
    "insertText": "while(void* Mem = FreeList.Pop())"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Mem)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "New()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Free(T *Item)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Item -> ~)",
    "insertText": "T()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (TLockFreeFixedSizeAllocator<)",
    "insertText": "sizeof(T), TPaddingForCacheContention>::Free(Item)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,int TPaddingForCacheContention> class TLockFreeClassAllocator_TLSCache : private TLockFreeFixedSizeAllocator_TLSCache<)",
    "insertText": "sizeof(T)"
  }
]