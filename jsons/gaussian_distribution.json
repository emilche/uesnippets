[
  {
    "label": "ABSL_DLL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_DLL"
  },
  {
    "label": "TableGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TableGenerator"
  },
  {
    "label": "Tables",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tables"
  },
  {
    "label": "gaussian_distribution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "gaussian_distribution"
  },
  {
    "label": "param_type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "param_type"
  },
  {
    "label": "zignor()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_GAUSSIAN_DISTRIBUTION_H_ # define ABSL_RANDOM_GAUSSIAN_DISTRIBUTION_H_ # include<cmath> # include<cstdint> # include<istream> # include<limits> # include<type_traits> # include \" absl / base / config . h \" # include \" absl / random / internal / fast_uniform_bits . h \" # include \" absl / random / internal / generate_real . h \" # include \" absl / random / internal / iostream_state_saver . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace random_internal { class ABSL_DLL gaussian_distribution_base { public : template<URBG> double)",
    "insertText": "zignor(URBG& g)"
  },
  {
    "label": "zignor_fallback()",
    "kind": "Method",
    "detail": "Function (private : class TableGenerator ; template<URBG> double)",
    "insertText": "zignor_fallback(URBG& g, bool neg)"
  },
  {
    "label": "param_type()",
    "kind": "Method",
    "detail": "Function (double kR = 3 . 4 4 2 6 1 9 8 5 5 8 9 9 ; double kRInv = 0 . 2 9 0 4 7 6 4 5 1 6 1 4 7 4 3 1 7 ; double kV = 9 . 9 1 2 5 6 3 0 3 5 2 6 2 1 7 e - 3 ; uint64_t kMask = 0 x07f ; struct Tables { double x [ kMask + 2 ] ; double f [ kMask + 2 ] ; } ; const Tables zg_ ; random_internal::FastUniformBits<uint64_t> fast_u64_ ; } ; } template<RealType = double> class gaussian_distribution : random_internal::gaussian_distribution_base { public : using result_type = RealType ; class param_type { public : using distribution_type = gaussian_distribution ;)",
    "insertText": "param_type(result_type mean = 0, result_type stddev = 1) : mean_(mean), stddev_(stddev)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "mean()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : result_type mean_ ; result_type stddev_ ;)",
    "insertText": "static_assert(std::is_floating_point<RealType>::value, \"Class-template absl::gaussian_distribution<> must be parameterized \" \"using a floating-point type.\")"
  },
  {
    "label": "gaussian_distribution()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "gaussian_distribution() : gaussian_distribution(0)"
  },
  {
    "label": "gaussian_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "gaussian_distribution(result_type mean, result_type stddev = 1) : param_(mean, stddev)"
  },
  {
    "label": "gaussian_distribution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "gaussian_distribution(const param_type& p) : param_(p)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<URBG> result_type)",
    "insertText": "operator()(URBG& g, const param_type& p)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (param_type)",
    "insertText": "param()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (param_ = p ; })",
    "insertText": "result_type(min)()"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "result_type(max)()"
  },
  {
    "label": "stddev()",
    "kind": "Method",
    "detail": "Function (} result_type)",
    "insertText": "stddev()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const gaussian_distribution& a, const gaussian_distribution& b)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<CharT,Traits,RealType> std::basic_ostream<CharT,Traits>&)",
    "insertText": "operator(std::basic_ostream<CharT, Traits>& os, const gaussian_distribution<RealType>& x)"
  },
  {
    "label": "make_ostream_state_saver()",
    "kind": "Method",
    "detail": "Function (auto saver =)",
    "insertText": "make_ostream_state_saver(os)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (os .)",
    "insertText": "precision(random_internal::stream_precision_helper<RealType>::kPrecision)"
  },
  {
    "label": "mean()",
    "kind": "Method",
    "detail": "Function (os<<x .)",
    "insertText": "mean() << os.fill() << x.stddev()"
  },
  {
    "label": "make_istream_state_saver()",
    "kind": "Method",
    "detail": "Function (using result_type = gaussian_distribution<RealType>::result_type ; using param_type = gaussian_distribution<RealType>::param_type ; auto saver =)",
    "insertText": "make_istream_state_saver(is)"
  },
  {
    "label": "result_type()",
    "kind": "Method",
    "detail": "Function (auto mean = random_internal::read_floating_point<)",
    "insertText": "result_type(is)"
  },
  {
    "label": "param()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "param(param_type(mean, stddev))"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (using random_internal::GeneratePositiveTag ; using random_internal::GenerateRealFromBits ; double x,y ; do { x = kRInv*)",
    "insertText": "log(GenerateRealFromBits<double, GeneratePositiveTag, false>( fast_u64_(g)))"
  },
  {
    "label": "log()",
    "kind": "Method",
    "detail": "Function (y = -)",
    "insertText": "log(GenerateRealFromBits<double, GeneratePositiveTag, false>(fast_u64_(g)))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while((y + y) < (x * x))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (using random_internal::GeneratePositiveTag ; using random_internal::GenerateRealFromBits ; using random_internal::GenerateSignedTag ;)",
    "insertText": "while(true)"
  },
  {
    "label": "fast_u64_()",
    "kind": "Method",
    "detail": "Function (uint64_t bits =)",
    "insertText": "fast_u64_(g)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (int i = static_cast<)",
    "insertText": "int(bits & kMask)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const double x = j* zg_ . x [ i ] ;)",
    "insertText": "if(std::abs(x) < zg_.x[i + 1])"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} double v = GenerateRealFromBits<double,GeneratePositiveTag,)",
    "insertText": "false(fast_u64_(g))"
  }
]