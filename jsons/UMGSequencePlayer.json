[
  {
    "label": "UWidgetAnimation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetAnimation"
  },
  {
    "label": "UUMGSequencePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUMGSequencePlayer"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" Blueprint / UserWidget . h \" # include \" IMovieScenePlayer . h \" # include \" Animation / UMGSequenceTickManager . h \" # include \" Evaluation / MovieSceneEvaluationTemplateInstance . h \" # include \" Misc / QualifiedFrameTime . h \" # include \" UMGSequencePlayer . generated . h \" class UWidgetAnimation ;)",
    "insertText": "UCLASS(Transient, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UMG_API void InitSequencePlayer(UWidgetAnimation& InAnimation, UUserWidget& InUserWidget)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(float StartAtTime, int32 InNumLoopsToPlay, EUMGSequencePlayMode::Type InPlayMode, float InPlaybackSpeed, bool bRestoreState)"
  },
  {
    "label": "PlayTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayTo(float StartAtTime, float EndAtTime, int32 InNumLoopsToPlay, EUMGSequencePlayMode::Type InPlayMode, float InPlaybackSpeed, bool bRestoreState)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Pause()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Pause()"
  },
  {
    "label": "Reverse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reverse()"
  },
  {
    "label": "SetCurrentTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentTime(float InTime)"
  },
  {
    "label": "AsFrameTime()",
    "kind": "Method",
    "detail": "Function (TimeCursorPosition = AnimationResolution .)",
    "insertText": "AsFrameTime(InTime)"
  },
  {
    "label": "GetCurrentTime()",
    "kind": "Method",
    "detail": "Function (} FQualifiedFrameTime)",
    "insertText": "GetCurrentTime()"
  },
  {
    "label": "GetAnimation()",
    "kind": "Method",
    "detail": "Function (} const UWidgetAnimation*)",
    "insertText": "GetAnimation()"
  },
  {
    "label": "SetNumLoopsToPlay()",
    "kind": "Method",
    "detail": "Function (UserTag = InUserTag ; } void)",
    "insertText": "SetNumLoopsToPlay(int32 InNumLoopsToPlay)"
  },
  {
    "label": "SetPlaybackSpeed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackSpeed(float PlaybackSpeed)"
  },
  {
    "label": "IsPlayingForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayingForward()"
  },
  {
    "label": "AsUObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "AsUObject()"
  },
  {
    "label": "GetViewportSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetViewportSettings(TMap<FViewportClient*, EMovieSceneViewportParams>& ViewportParamsMap)"
  },
  {
    "label": "GetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (} EMovieScenePlayerStatus::Type)",
    "insertText": "GetPlaybackStatus()"
  },
  {
    "label": "GetPlaybackContext()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetPlaybackContext()"
  },
  {
    "label": "GetEventContexts()",
    "kind": "Method",
    "detail": "Function (TArray<UObject*>)",
    "insertText": "GetEventContexts()"
  },
  {
    "label": "SetPlaybackStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackStatus(EMovieScenePlayerStatus::Type InPlaybackStatus)"
  },
  {
    "label": "PopulateUpdateFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateUpdateFlags(UE::MovieScene::ESequenceInstanceUpdateFlags& OutFlags)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "RemoveEvaluationData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveEvaluationData()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UUMGSequencePlayer, FOnSequenceFinishedPlaying, UUMGSequencePlayer&)"
  },
  {
    "label": "OnSequenceFinishedPlaying()",
    "kind": "Method",
    "detail": "Function (FOnSequenceFinishedPlaying&)",
    "insertText": "OnSequenceFinishedPlaying()"
  },
  {
    "label": "UpdateInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateInternal(FFrameTime LastTimePosition, FFrameTime NextTimePosition, bool bHasJumped)"
  },
  {
    "label": "NeedsQueueLatentAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsQueueLatentAction()"
  },
  {
    "label": "QueueLatentAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueLatentAction(FMovieSceneSequenceLatentActionDelegate Delegate)"
  },
  {
    "label": "ApplyLatentActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyLatentActions()"
  },
  {
    "label": "HandleLatentStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleLatentStop()"
  }
]