[
  {
    "label": "FShaderCompilerEnvironment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerEnvironment"
  },
  {
    "label": "FShaderPermutationBool",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPermutationBool"
  },
  {
    "label": "TShaderPermutationInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TShaderPermutationInt"
  },
  {
    "label": "TShaderPermutationSparseInt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TShaderPermutationSparseInt"
  },
  {
    "label": "TShaderPermutationDomain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TShaderPermutationDomain"
  },
  {
    "label": "DimensionToSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DimensionToSet"
  },
  {
    "label": "DimensionToGet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DimensionToGet"
  },
  {
    "label": "TShaderPermutationDomainSpetialization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TShaderPermutationDomainSpetialization"
  },
  {
    "label": "ToDimensionValueId()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ShaderCore . h \" bool bLogPermutations = false ; struct FShaderCompilerEnvironment ; struct FShaderPermutationBool { using Type = bool ; int32 PermutationCount = 2 ; bool IsMultiDimensional = false ; int32)",
    "insertText": "ToDimensionValueId(Type E)"
  },
  {
    "label": "Type()",
    "kind": "Method",
    "detail": "Function (Type MaxValue = static_cast<)",
    "insertText": "Type(TFirstValue + TDimensionSize - 1)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 PermutationId = static_cast<)",
    "insertText": "int32(E)"
  },
  {
    "label": "FromDimensionValueId()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "FromDimensionValueId(int32 PermutationId)"
  },
  {
    "label": "ToDefineValue()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ToDefineValue(Type E)"
  },
  {
    "label": "Ts()",
    "kind": "Method",
    "detail": "Function (} } ; template<. . . Ts> struct TShaderPermutationDomain { using Type = TShaderPermutationDomain<Ts . . .> ; bool IsMultiDimensional = true ; int32 PermutationCount = 1 ; TShaderPermutationDomain<)",
    "insertText": "Ts()"
  },
  {
    "label": "Ts()",
    "kind": "Method",
    "detail": "Function (} TShaderPermutationDomain<)",
    "insertText": "Ts(int32 PermutationId)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<class DimensionToSet> void)",
    "insertText": "Set(typename DimensionToSet::Type)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<class DimensionToGet> const DimensionToGet::Type)",
    "insertText": "Get()"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ModifyCompilationEnvironment(FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ToDimensionValueId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ToDimensionValueId(const Type& PermutationVector)"
  },
  {
    "label": "FromDimensionValueId()",
    "kind": "Method",
    "detail": "Function (} Type)",
    "insertText": "FromDimensionValueId(const int32 PermutationId)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Type& Other)"
  },
  {
    "label": "SetDefine()",
    "kind": "Method",
    "detail": "Function (} OutEnvironment .)",
    "insertText": "SetDefine(TDimension::DefineName, TDimension::ToDefineValue(PermutationVector.DimensionValue))"
  },
  {
    "label": "GetDimension()",
    "kind": "Method",
    "detail": "Function (} template<TPermutationVector,TDimensionToGet> const TDimensionToGet::Type&)",
    "insertText": "GetDimension(const TPermutationVector& PermutationVector)"
  },
  {
    "label": "SetDimension()",
    "kind": "Method",
    "detail": "Function (} template<TPermutationVector,TDimensionToSet> void)",
    "insertText": "SetDimension(TPermutationVector& PermutationVector, const typename TDimensionToSet::Type& Value)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (} } ; template<> class TShaderPermutationDomainSpetialization<true> { public : template<TPermutationVector,TDimension> void)",
    "insertText": "ModifyCompilationEnvironment(const TPermutationVector& PermutationVector, FShaderCompilerEnvironment& OutEnvironment)"
  },
  {
    "label": "ModifyCompilationEnvironment()",
    "kind": "Method",
    "detail": "Function (PermutationVector . DimensionValue .)",
    "insertText": "ModifyCompilationEnvironment(OutEnvironment)"
  },
  {
    "label": "Ts()",
    "kind": "Method",
    "detail": "Function (PermutationVector . DimensionValue = Value ; } } ; template<TDimension,. . . Ts> struct TShaderPermutationDomain<TDimension,Ts . . .> { using Type = TShaderPermutationDomain<TDimension,Ts . . .> ; bool IsMultiDimensional = true ; using Super = TShaderPermutationDomain<Ts . . .> ; int32 PermutationCount = Super::PermutationCount* TDimension::PermutationCount ; TShaderPermutationDomain<TDimension,)",
    "insertText": "Ts() : DimensionValue(TDimension::FromDimensionValueId(0))"
  },
  {
    "label": "Ts()",
    "kind": "Method",
    "detail": "Function (} TShaderPermutationDomain<TDimension,)",
    "insertText": "Ts(int32 PermutationId) : DimensionValue(TDimension::FromDimensionValueId(PermutationId % TDimension::PermutationCount)) , Tail(PermutationId / TDimension::PermutationCount)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} template<class DimensionToSet> void)",
    "insertText": "Set(typename DimensionToSet::Type Value)"
  },
  {
    "label": "TDimension()",
    "kind": "Method",
    "detail": "Function (TShaderPermutationDomainSpetialization<TDimension::IsMultiDimensional>::template ModifyCompilationEnvironment<Type,)",
    "insertText": "TDimension(*this, OutEnvironment)"
  },
  {
    "label": "ToDimensionValueId()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ToDimensionValueId()"
  },
  {
    "label": "DECLARE_SHADER_PERMUTATION_IMPL()",
    "kind": "Method",
    "detail": "Function (} private : template<bool BooleanSpetialization> class TShaderPermutationDomainSpetialization ; TDimension::Type DimensionValue ; Super Tail ; } ; using FShaderPermutationNone = TShaderPermutationDomain<> ; # define)",
    "insertText": "DECLARE_SHADER_PERMUTATION_IMPL(InDefineName,PermutationMetaType,...)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (\\ public : \\ const TCHAR* DefineName =)",
    "insertText": "TEXT(InDefineName)"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "SHADER_PERMUTATION_BOOL(InDefineName)"
  }
]