[
  {
    "label": "IsRefCountedType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsRefCountedType"
  },
  {
    "label": "NeedsScopedRefptrButGetsRawPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NeedsScopedRefptrButGetsRawPtr"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# ifndef CEF_INCLUDE_BASE_INTERNAL_CEF_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_ # define CEF_INCLUDE_BASE_INTERNAL_CEF_RAW_SCOPED_REFPTR_MISMATCH_CHECKER_H_ # include<type_traits> # include \" include / base / cef_template_util . h \" namespace base { namespace internal { template<T,= void> struct IsRefCountedType : std::false_type { } ; template<T> struct IsRefCountedType<T,void_t<)",
    "insertText": "decltype(std::declval<T*>()->AddRef()), decltype(std::declval<T*>()->Release())"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} ; template<T> struct NeedsScopedRefptrButGetsRawPtr : conjunction<std::is_pointer<T>,IsRefCountedType<std::remove_pointer_t<T>>> {)",
    "insertText": "static_assert(!std::is_reference<T>::value, \"NeedsScopedRefptrButGetsRawPtr requires non-reference type.\")"
  }
]