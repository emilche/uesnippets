[
  {
    "label": "FDynamicMeshOctree3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshOctree3"
  },
  {
    "label": "FCellReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCellReference"
  },
  {
    "label": "FTreeCutSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTreeCutSet"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Spatial / MeshAABBTree3 . h \" # include \" Spatial / SparseDynamicOctree3 . h \" # include \" MeshQueries . h \" # include \" DynamicMesh / DynamicMesh3 . h \" # include \" Async / ParallelFor . h \" namespace UE { namespace Geometry { class FDynamicMeshOctree3 : public FSparseDynamicOctree3 { public : const FDynamicMesh3* Mesh ; FAxisAlignedBox3d ModifiedBounds ; void)",
    "insertText": "Initialize(const FDynamicMesh3* MeshIn)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (this -> Mesh = MeshIn ;)",
    "insertText": "for(int tid : Mesh->TriangleIndicesItr())"
  },
  {
    "label": "InsertTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertTriangle(tid)"
  },
  {
    "label": "ResetModifiedBounds()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ResetModifiedBounds()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (ModifiedBounds =)",
    "insertText": "Empty()"
  },
  {
    "label": "InsertTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertTriangle(int32 TriangleID)"
  },
  {
    "label": "GetTriBounds()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d Bounds = Mesh ->)",
    "insertText": "GetTriBounds(TriangleID)"
  },
  {
    "label": "Contain()",
    "kind": "Method",
    "detail": "Function (ModifiedBounds .)",
    "insertText": "Contain(Bounds)"
  },
  {
    "label": "InsertObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertObject(TriangleID, Bounds)"
  },
  {
    "label": "InsertTriangles()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InsertTriangles(const TArray<int>& Triangles)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int N = Triangles .)",
    "insertText": "Num()"
  },
  {
    "label": "GetTriBounds()",
    "kind": "Method",
    "detail": "Function (FAxisAlignedBox3d Bounds = Mesh ->)",
    "insertText": "GetTriBounds(Triangles[i])"
  },
  {
    "label": "InsertObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertObject(Triangles[i], Bounds)"
  },
  {
    "label": "InsertTriangles()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "InsertTriangles(const TSet<int>& Triangles)"
  },
  {
    "label": "RemoveTriangle()",
    "kind": "Method",
    "detail": "Function (} } } bool)",
    "insertText": "RemoveTriangle(int32 TriangleID)"
  },
  {
    "label": "RemoveObject()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "RemoveObject(TriangleID)"
  },
  {
    "label": "RemoveTriangles()",
    "kind": "Method",
    "detail": "Function (} template<EnumerableType> void)",
    "insertText": "RemoveTriangles(const EnumerableType& Triangles, bool bMarkModifiedBounds = true)"
  },
  {
    "label": "ReinsertTriangles()",
    "kind": "Method",
    "detail": "Function (} } } template<EnumerableType> void)",
    "insertText": "ReinsertTriangles(const EnumerableType& Triangles)"
  },
  {
    "label": "ReinsertObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinsertObject(TriangleID, Bounds)"
  },
  {
    "label": "ReinsertTrianglesParallel()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ReinsertTrianglesParallel(const TArray<int32>& Triangles, TArray<uint32>& TempBuffer, TArray<bool>& TempFlagBuffer)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TempBuffer .)",
    "insertText": "SetNum(NumTriangles, EAllowShrinking::No)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParallelFor(NumTriangles, [&](int k) { FAxisAlignedBox3d Bounds = Mesh->GetTriBounds(Triangles[k]); TempFlagBuffer[k] = CheckIfObjectNeedsReinsert(Triangles[k], Bounds, TempBuffer[k]); })"
  },
  {
    "label": "ReinsertObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReinsertObject(Triangles[k], Mesh->GetTriBounds(Triangles[k]), TempBuffer[k])"
  },
  {
    "label": "NotifyPendingModification()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "NotifyPendingModification(int TriangleID)"
  },
  {
    "label": "NotifyPendingModification()",
    "kind": "Method",
    "detail": "Function (} } template<EnumerableType> void)",
    "insertText": "NotifyPendingModification(const EnumerableType& Triangles)"
  },
  {
    "label": "FindNearestHitObject()",
    "kind": "Method",
    "detail": "Function (} } } int32)",
    "insertText": "FindNearestHitObject(const FRay3d& Ray, double MaxDistance = TNumericLimits<double>::Max())"
  },
  {
    "label": "FindNearestHitObject()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindNearestHitObject(const FRay3d& Ray, TFunctionRef<bool(int)> IncludeTriangleIDFunc, double MaxDistance = TNumericLimits<double>::Max())"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CheckValidity(EValidityCheckFailMode FailMode = EValidityCheckFailMode::Check, bool bVerbose = false, bool bFailOnMissingObjects = false)"
  },
  {
    "label": "CheckValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckValidity([&](int tid) {return Mesh->IsTriangle(tid); }, [&](int tid) {return Mesh->GetTriBounds(tid); }, FailMode, bVerbose, bFailOnMissingObjects)"
  },
  {
    "label": "BuildLevelCutSet()",
    "kind": "Method",
    "detail": "Function (} struct FCellReference { uint32 CellID ; } ; class FTreeCutSet { public : TArray<FCellReference> CutCells ; protected : TSet<uint32> CutCellIDs ; int FixedCutLevel ; class FDynamicMeshOctree3 ; } ; FTreeCutSet)",
    "insertText": "BuildLevelCutSet(uint32 CutLevel = 5)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FTreeCutSet CutSet ; CutSet . FixedCutLevel = CutLevel ;)",
    "insertText": "for(const FSparseOctreeCell& Cell : Cells)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (FCellReference CellRef ; CellRef . CellID = Cell . CellID ; CutSet . CutCells .)",
    "insertText": "Add(CellRef)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CutSet . CutCellIDs .)",
    "insertText": "Add(Cell.CellID)"
  },
  {
    "label": "UpdateLevelCutSet()",
    "kind": "Method",
    "detail": "Function (} } return CutSet ; } void)",
    "insertText": "UpdateLevelCutSet(FTreeCutSet& CutSet, TArray<FCellReference>& NewCutCellsOut)"
  },
  {
    "label": "TestCellIntersection()",
    "kind": "Method",
    "detail": "Function (} } } } bool)",
    "insertText": "TestCellIntersection(const FCellReference& CellRef, const FAxisAlignedBox3d& Bounds)"
  },
  {
    "label": "GetCellBox()",
    "kind": "Method",
    "detail": "Function (const FSparseOctreeCell& Cell = Cells [ CellRef . CellID ] ; return)",
    "insertText": "GetCellBox(Cell, MaxExpandFactor).Intersects(Bounds)"
  },
  {
    "label": "CollectTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CollectTriangles(const FCellReference& CellRef, TFunctionRef<void(int)> TriangleFunc)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (TArray<const FSparseOctreeCell*> Queue ; Queue .)",
    "insertText": "Add(&Cells[CellRef.CellID])"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const FSparseOctreeCell* CurCell = Queue .)",
    "insertText": "Pop(EAllowShrinking::No)"
  },
  {
    "label": "TriangleFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleFunc(ObjectID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int k = 0; k < 8; ++k)"
  },
  {
    "label": "GetChildCellID()",
    "kind": "Method",
    "detail": "Function (const FSparseOctreeCell* ChildCell =& Cells [ CurCell ->)",
    "insertText": "GetChildCellID(k)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Queue .)",
    "insertText": "Add(ChildCell)"
  },
  {
    "label": "CollectRootTriangles()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "CollectRootTriangles(const FTreeCutSet& CutSet, TFunctionRef<void(int)> TriangleFunc)"
  },
  {
    "label": "AllocatedIteration()",
    "kind": "Method",
    "detail": "Function (TArray<const FSparseOctreeCell*> Queue ; RootCells .)",
    "insertText": "AllocatedIteration([&](const uint32* RootCellID) { const FSparseOctreeCell* RootCell = &Cells[*RootCellID]; Queue.Add(&Cells[*RootCellID]); })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "for(int TriangleID : CellObjectLists.Values(CurCell->CellID))"
  },
  {
    "label": "TriangleFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleFunc(TriangleID)"
  },
  {
    "label": "CollectSpillTriangles()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "CollectSpillTriangles(TFunctionRef<void(int)> TriangleFunc)"
  },
  {
    "label": "TriangleFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangleFunc(tid)"
  }
]