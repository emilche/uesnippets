[
  {
    "label": "True()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / SimdTypes . h \" namespace Chaos { namespace Private { using FSimd4Realf = TSimdRealf<4> ; using FSimd4Vec3f = TSimdVec3f<4> ; using FSimd4Int32 = TSimdInt32<4> ; using FSimd4Selector = TSimdSelector<4> ; template<> TSimdSelector<4> TSimdSelector<4)",
    "insertText": "True()"
  },
  {
    "label": "VectorIntStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdSelector<4> Selector ;)",
    "insertText": "VectorIntStoreAligned(GlobalVectorConstants::IntAllMask, Selector.V)"
  },
  {
    "label": "VectorIntStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdSelector<4> Selector ;)",
    "insertText": "VectorIntStoreAligned(GlobalVectorConstants::IntZero, Selector.V)"
  },
  {
    "label": "VectorIntStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdInt32<4> R ;)",
    "insertText": "VectorIntStoreAligned(MakeVectorRegisterInt(I, I, I, I), R.V)"
  },
  {
    "label": "VectorIntStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdInt32<4> I ;)",
    "insertText": "VectorIntStoreAligned(GlobalVectorConstants::IntZero, I.V)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdRealf<4> Out ;)",
    "insertText": "VectorStoreAligned(VectorSetFloat1(F), Out.V)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdRealf<4> Out ;)",
    "insertText": "VectorStoreAligned(VectorZeroFloat(), Out.V)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdRealf<4> Out ;)",
    "insertText": "VectorStoreAligned(VectorOneFloat(), Out.V)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f V0 =)",
    "insertText": "VectorLoadFloat3(InV0)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f V1 =)",
    "insertText": "VectorLoadFloat3(InV1)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f V2 =)",
    "insertText": "VectorLoadFloat3(InV2)"
  },
  {
    "label": "VectorLoadFloat3()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f V3 =)",
    "insertText": "VectorLoadFloat3(InV3)"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask0100 =)",
    "insertText": "MakeVectorRegister((uint32)-1, (uint32)0, (uint32)-1, (uint32)-1)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f X =)",
    "insertText": "VectorSelect(Mask0100, VectorReplicate(V0, 0), VectorReplicate(V1, 0))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Y =)",
    "insertText": "VectorSelect(Mask0100, VectorReplicate(V0, 1), VectorReplicate(V1, 1))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Z =)",
    "insertText": "VectorSelect(Mask0100, VectorReplicate(V0, 2), VectorReplicate(V1, 2))"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask0010 =)",
    "insertText": "MakeVectorRegister((uint32)-1, (uint32)-1, (uint32)0, (uint32)-1)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "VectorSelect(Mask0010, X, VectorReplicate(V2, 0))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "VectorSelect(Mask0010, Y, VectorReplicate(V2, 1))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (Z =)",
    "insertText": "VectorSelect(Mask0010, Z, VectorReplicate(V2, 2))"
  },
  {
    "label": "MakeVectorRegister()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask0001 =)",
    "insertText": "MakeVectorRegister((uint32)-1, (uint32)-1, (uint32)-1, (uint32)0)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (X =)",
    "insertText": "VectorSelect(Mask0001, X, VectorReplicate(V3, 0))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (Y =)",
    "insertText": "VectorSelect(Mask0001, Y, VectorReplicate(V3, 1))"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (Z =)",
    "insertText": "VectorSelect(Mask0001, Z, VectorReplicate(V3, 2))"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (TSimdVec3f<4> Out ;)",
    "insertText": "VectorStoreAligned(X, Out.VX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Y, Out.VY)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(Z, Out.VZ)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f L =)",
    "insertText": "VectorLoadAligned(InL.V)"
  },
  {
    "label": "SimdAllTrue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SimdAllTrue(const FSimd4Selector& InL)"
  },
  {
    "label": "SimdNot()",
    "kind": "Method",
    "detail": "Function (} FSimd4Selector)",
    "insertText": "SimdNot(const FSimd4Selector& InL)"
  },
  {
    "label": "VectorBitwiseNotAnd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorBitwiseNotAnd(L, GlobalVectorConstants::AllMask())"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Selector Out ;)",
    "insertText": "VectorStoreAligned(Mask, Out.V)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f R =)",
    "insertText": "VectorLoadAligned(InR.V)"
  },
  {
    "label": "VectorBitwiseOr()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorBitwiseOr(L, R)"
  },
  {
    "label": "VectorBitwiseAnd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorBitwiseAnd(L, R)"
  },
  {
    "label": "VectorCompareEQ()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorCompareEQ(L, R)"
  },
  {
    "label": "VectorCompareNE()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorCompareNE(L, R)"
  },
  {
    "label": "VectorIntLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4i L =)",
    "insertText": "VectorIntLoadAligned(InL.V)"
  },
  {
    "label": "VectorIntLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4i R =)",
    "insertText": "VectorIntLoadAligned(InR.V)"
  },
  {
    "label": "VectorIntCompareGE()",
    "kind": "Method",
    "detail": "Function (union { VectorRegister4Float V ; VectorRegister4Int I ; } Mask ; Mask . I =)",
    "insertText": "VectorIntCompareGE(L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Selector Out ;)",
    "insertText": "VectorStoreAligned(Mask.V, Out.V)"
  },
  {
    "label": "VectorCompareGE()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorCompareGE(L, R)"
  },
  {
    "label": "VectorIntCompareGT()",
    "kind": "Method",
    "detail": "Function (union { VectorRegister4Float V ; VectorRegister4Int I ; } Mask ; Mask . I =)",
    "insertText": "VectorIntCompareGT(L, R)"
  },
  {
    "label": "VectorCompareGT()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorCompareGT(L, R)"
  },
  {
    "label": "VectorIntCompareLT()",
    "kind": "Method",
    "detail": "Function (VectorRegister4i Mask =)",
    "insertText": "VectorIntCompareLT(L, R)"
  },
  {
    "label": "VectorIntStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Selector Out ;)",
    "insertText": "VectorIntStoreAligned(Mask, Out.V)"
  },
  {
    "label": "VectorCompareLT()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorCompareLT(L, R)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Mask =)",
    "insertText": "VectorLoadAligned(InSelector.V)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Selected =)",
    "insertText": "VectorSelect(Mask, L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Selected, Out.V)"
  },
  {
    "label": "VectorNegate()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Neg =)",
    "insertText": "VectorNegate(L)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Neg, Out.V)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Sum =)",
    "insertText": "VectorAdd(L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Sum, Out.V)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f LX =)",
    "insertText": "VectorLoadAligned(L.VX)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f LY =)",
    "insertText": "VectorLoadAligned(L.VY)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f LZ =)",
    "insertText": "VectorLoadAligned(L.VZ)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f RX =)",
    "insertText": "VectorLoadAligned(R.VX)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f RY =)",
    "insertText": "VectorLoadAligned(R.VY)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f RZ =)",
    "insertText": "VectorLoadAligned(R.VZ)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Vec3f Out ;)",
    "insertText": "VectorStoreAligned(VectorAdd(LX, RX), Out.VX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorAdd(LY, RY), Out.VY)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorAdd(LZ, RZ), Out.VZ)"
  },
  {
    "label": "VectorSubtract()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Diff =)",
    "insertText": "VectorSubtract(L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Diff, Out.V)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Vec3f Out ;)",
    "insertText": "VectorStoreAligned(VectorSubtract(LX, RX), Out.VX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorSubtract(LY, RY), Out.VY)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorSubtract(LZ, RZ), Out.VZ)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Product =)",
    "insertText": "VectorMultiply(L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Product, Out.V)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Vec3f Out ;)",
    "insertText": "VectorStoreAligned(VectorMultiply(LX, R), Out.VX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMultiply(LY, R), Out.VY)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMultiply(LZ, R), Out.VZ)"
  },
  {
    "label": "SimdMultiply()",
    "kind": "Method",
    "detail": "Function (} FSimd4Vec3f)",
    "insertText": "SimdMultiply(const FSimd4Vec3f& L, const FSimd4Vec3f& R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Vec3f Out ;)",
    "insertText": "VectorStoreAligned(VectorMultiply(LX, RX), Out.VX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMultiply(LY, RY), Out.VY)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMultiply(LZ, RZ), Out.VZ)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f AX =)",
    "insertText": "VectorLoadAligned(Acc.VX)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f AY =)",
    "insertText": "VectorLoadAligned(Acc.VY)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f AZ =)",
    "insertText": "VectorLoadAligned(Acc.VZ)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Vec3f Out ;)",
    "insertText": "VectorStoreAligned(VectorMultiplyAdd(LX, RX, AX), Out.VX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMultiplyAdd(LY, RY, AY), Out.VY)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorMultiplyAdd(LZ, RZ, AZ), Out.VZ)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Ratio =)",
    "insertText": "VectorDivide(L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Ratio, Out.V)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Vec3f Out ;)",
    "insertText": "VectorStoreAligned(VectorSubtract(VectorMultiply(LY, RZ), VectorMultiply(LZ, RY)), Out.VX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorSubtract(VectorMultiply(LZ, RX), VectorMultiply(LX, RZ)), Out.VY)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(VectorSubtract(VectorMultiply(LX, RY), VectorMultiply(LY, RX)), Out.VZ)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Dot =)",
    "insertText": "VectorMultiply(LX, RX)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Dot, Out.V)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f V =)",
    "insertText": "VectorLoadAligned(InV.V)"
  },
  {
    "label": "VectorMultiply()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Product =)",
    "insertText": "VectorMultiply(V, V)"
  },
  {
    "label": "VectorSqrt()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Sqrt =)",
    "insertText": "VectorSqrt(V)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Sqrt, Out.V)"
  },
  {
    "label": "VectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Sqrt =)",
    "insertText": "VectorReciprocalSqrt(V)"
  },
  {
    "label": "VectorMin()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Min =)",
    "insertText": "VectorMin(L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Min, Out.V)"
  },
  {
    "label": "VectorMax()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Max =)",
    "insertText": "VectorMax(L, R)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (FSimd4Realf Out ;)",
    "insertText": "VectorStoreAligned(Max, Out.V)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f A =)",
    "insertText": "VectorLoadAligned(&InA.X)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f B =)",
    "insertText": "VectorLoadAligned(&InB.X)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f C =)",
    "insertText": "VectorLoadAligned(&InC.X)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f D =)",
    "insertText": "VectorLoadAligned(&InD.X)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f P =)",
    "insertText": "VectorUnpackLo(A, C)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Q =)",
    "insertText": "VectorUnpackLo(B, D)"
  },
  {
    "label": "VectorUnpackHi()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f R =)",
    "insertText": "VectorUnpackHi(A, C)"
  },
  {
    "label": "VectorUnpackHi()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f S =)",
    "insertText": "VectorUnpackHi(B, D)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f X =)",
    "insertText": "VectorUnpackLo(P, Q)"
  },
  {
    "label": "VectorUnpackHi()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Y =)",
    "insertText": "VectorUnpackHi(P, Q)"
  },
  {
    "label": "VectorUnpackLo()",
    "kind": "Method",
    "detail": "Function (VectorRegister4f Z =)",
    "insertText": "VectorUnpackLo(R, S)"
  }
]