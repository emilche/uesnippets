[
  {
    "label": "ULANGCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULANGCORE_API"
  },
  {
    "label": "SArenaHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SArenaHeader"
  },
  {
    "label": "CArenaAllocator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Memory / Allocator . h \" # include \" uLang / Common / Templates / Storage . h \" namespace uLang { class CArenaAllocator : public CAllocatorInstance { public :)",
    "insertText": "CArenaAllocator(uint32_t ArenaSize)"
  },
  {
    "label": "CArenaAllocator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CArenaAllocator()"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Merge(CArenaAllocator && Other)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Allocate(uint32_t NumBytes)"
  },
  {
    "label": "DeallocateAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeallocateAll()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (protected : enum { Alignment = 8 } ; void*)",
    "insertText": "Allocate(const CAllocatorInstance * This, size_t NumBytes)"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Reallocate(const CAllocatorInstance * This, void * Memory, size_t NumBytes)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(const CAllocatorInstance * This, void * Memory)"
  },
  {
    "label": "AllocateNewArena()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllocateNewArena()"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (NumBytes =)",
    "insertText": "AlignUp(NumBytes, Alignment)"
  },
  {
    "label": "ULANG_ASSERTF()",
    "kind": "Method",
    "detail": "Function (# if ULANG_DO_CHECK)",
    "insertText": "ULANG_ASSERTF(NumBytes <= _ArenaSize, \"Must not allocate a memory block larger than the arena size!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "if(NumBytes > _BytesLeftInFirstArena)"
  },
  {
    "label": "Memory()",
    "kind": "Method",
    "detail": "Function (} uint8_t*)",
    "insertText": "Memory((uint8_t *)(_First + 1)) + (_ArenaSize - _BytesLeftInFirstArena)"
  }
]