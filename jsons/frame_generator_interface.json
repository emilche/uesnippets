[
  {
    "label": "FrameGeneratorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FrameGeneratorInterface"
  },
  {
    "label": "VideoFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VideoFrameData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "VideoFrameData()",
    "kind": "Method",
    "detail": "Function (# ifndef API_TEST_FRAME_GENERATOR_INTERFACE_H_ # define API_TEST_FRAME_GENERATOR_INTERFACE_H_ # include<utility> # include \" absl / types / optional . h \" # include \" api / scoped_refptr . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_frame_buffer . h \" namespace webrtc { namespace test { class FrameGeneratorInterface { public : struct VideoFrameData {)",
    "insertText": "VideoFrameData(rtc::scoped_refptr<VideoFrameBuffer> buffer, absl::optional<VideoFrame::UpdateRect> update_rect) : buffer(std::move(buffer)), update_rect(update_rect)"
  },
  {
    "label": "OutputTypeToString()",
    "kind": "Method",
    "detail": "Function (} rtc::scoped_refptr<VideoFrameBuffer> buffer ; absl::optional<VideoFrame::UpdateRect> update_rect ; } ; enum class OutputType { kI420,kI420A,kI010,kNV12 } ; const char*)",
    "insertText": "OutputTypeToString(OutputType type)"
  },
  {
    "label": "FrameGeneratorInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameGeneratorInterface()"
  },
  {
    "label": "NextFrame()",
    "kind": "Method",
    "detail": "Function (VideoFrameData)",
    "insertText": "NextFrame()"
  },
  {
    "label": "ChangeResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeResolution(size_t width, size_t height)"
  }
]