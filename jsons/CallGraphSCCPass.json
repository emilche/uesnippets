[
  {
    "label": "CallGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraphNode"
  },
  {
    "label": "CallGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraph"
  },
  {
    "label": "PMStack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PMStack"
  },
  {
    "label": "CallGraphSCC",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraphSCC"
  },
  {
    "label": "CallGraphSCCPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraphSCCPass"
  },
  {
    "label": "CallGraphSCCPass()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_CALLGRAPHSCCPASS_H # define LLVM_ANALYSIS_CALLGRAPHSCCPASS_H # include \" llvm / Analysis / CallGraph . h \" # include \" llvm / Pass . h \" namespace llvm { class CallGraphNode ; class CallGraph ; class PMStack ; class CallGraphSCC ; class CallGraphSCCPass : public Pass { public :)",
    "insertText": "CallGraphSCCPass(char &pid) : Pass(PT_CallGraphSCC, pid)"
  },
  {
    "label": "createPrinterPass()",
    "kind": "Method",
    "detail": "Function (} Pass*)",
    "insertText": "createPrinterPass(raw_ostream &O, const std::string &Banner)"
  },
  {
    "label": "doInitialization()",
    "kind": "Method",
    "detail": "Function (using llvm::Pass::doInitialization ; using llvm::Pass::doFinalization ; bool)",
    "insertText": "doInitialization(CallGraph &CG)"
  },
  {
    "label": "doFinalization()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doFinalization(CallGraph &CG)"
  },
  {
    "label": "getPotentialPassManagerType()",
    "kind": "Method",
    "detail": "Function (PassManagerType)",
    "insertText": "getPotentialPassManagerType()"
  },
  {
    "label": "CallGraphSCC()",
    "kind": "Method",
    "detail": "Function (} ; class CallGraphSCC { void* Context ; std::vector<CallGraphNode*> Nodes ; public :)",
    "insertText": "CallGraphSCC(void *context) : Context(context)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "initialize(CallGraphNode*const*I, CallGraphNode*const*E)"
  },
  {
    "label": "assign()",
    "kind": "Method",
    "detail": "Function (Nodes .)",
    "insertText": "assign(I, E)"
  },
  {
    "label": "isSingular()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isSingular()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "ReplaceNode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceNode(CallGraphNode *Old, CallGraphNode *New)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef std::vector<CallGraphNode*>::const_iterator iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  }
]