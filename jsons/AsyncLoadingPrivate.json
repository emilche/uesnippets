[
  {
    "label": "FAsyncArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncArchive"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLinkerExportArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerExportArchive"
  },
  {
    "label": "FLinkerLoad",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerLoad"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / ArchiveProxy . h \" # include \" UObject / Linker . h \" # include \" Async / AsyncFileHandle . h \")",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLoadingDev, Fatal, All)"
  },
  {
    "label": "FAsyncArchive()",
    "kind": "Method",
    "detail": "Function (class FAsyncArchive final : public FArchive { public : enum class ELoadPhase { WaitingForSize,WaitingForSummary,WaitingForHeader,WaitingForFirstExport,ProcessingExports,} ; enum class ELoadError : uint8 { Unknown,UnsupportedFormat,FileDoesNotExist,CorruptData,Cancelled,} ;)",
    "insertText": "FAsyncArchive(const FPackagePath& InPackagePath, FLinkerLoad* InOwner, TFunction<void()>&& InSummaryReadyCallback)"
  },
  {
    "label": "FAsyncArchive()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAsyncArchive()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Close()"
  },
  {
    "label": "SetCompressionMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetCompressionMap(TArray<FCompressedChunk>* CompressedChunks, ECompressionFlags CompressionFlags)"
  },
  {
    "label": "Precache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Precache(int64 PrecacheOffset, int64 PrecacheSize)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(void* Data, int64 Num)"
  },
  {
    "label": "CurrentPos()",
    "kind": "Method",
    "detail": "Function (# if DEVIRTUALIZE_FLinkerLoad_Serialize return)",
    "insertText": "CurrentPos(ActiveFPLB->StartFastPathLoadBuffer - ActiveFPLB->OriginalFastPathLoadBuffer)"
  },
  {
    "label": "TotalSize()",
    "kind": "Method",
    "detail": "Function (# else return CurrentPos ; # endif } int64)",
    "insertText": "TotalSize()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 InPos)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCache()"
  },
  {
    "label": "GetArchiveName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetArchiveName()"
  },
  {
    "label": "PrecacheWithTimeLimit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "PrecacheWithTimeLimit(int64 PrecacheOffset, int64 PrecacheSize, bool bUseTimeLimit, bool bUseFullTimeLimit, double TickStartTime, double TimeLimit)"
  },
  {
    "label": "PrecacheForEvent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrecacheForEvent(IAsyncReadRequest* Read, int64 PrecacheOffset, int64 PrecacheSize)"
  },
  {
    "label": "FlushPrecacheBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushPrecacheBlock()"
  },
  {
    "label": "ReadyToStartReadingHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadyToStartReadingHeader(bool bUseTimeLimit, bool bUseFullTimeLimit, double TickStartTime, double TimeLimit)"
  },
  {
    "label": "StartReadingHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartReadingHeader()"
  },
  {
    "label": "EndReadingHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndReadingHeader()"
  },
  {
    "label": "MakeEventDrivenPrecacheRequest()",
    "kind": "Method",
    "detail": "Function (IAsyncReadRequest*)",
    "insertText": "MakeEventDrivenPrecacheRequest(int64 Offset, int64 BytesToRead, FAsyncFileCallBack* CompleteCallback)"
  },
  {
    "label": "LogItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogItem(const TCHAR* Item, int64 Offset = 0, int64 Size = 0, double StartTime = 0.0)"
  },
  {
    "label": "IsCookedForEDLInEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCookedForEDLInEditor()"
  },
  {
    "label": "SetPosAndUpdatePrecacheBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPosAndUpdatePrecacheBuffer(int64 Pos)"
  },
  {
    "label": "FirstExportStarting()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "FirstExportStarting()"
  },
  {
    "label": "WaitRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitRead(double TimeLimit = 0.0)"
  },
  {
    "label": "CompleteRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteRead()"
  },
  {
    "label": "CancelRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelRead()"
  },
  {
    "label": "CompleteCancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompleteCancel()"
  },
  {
    "label": "WaitForIntialPhases()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForIntialPhases(double TimeLimit = 0.0)"
  },
  {
    "label": "ReadCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadCallback(bool bWasCancelled, IAsyncReadRequest*)"
  },
  {
    "label": "PrecacheInternal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PrecacheInternal(int64 PrecacheOffset, int64 PrecacheSize, bool bApplyMinReadSize = true, IAsyncReadRequest* Read = nullptr)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} IAsyncReadFileHandle* Handle ; IAsyncReadRequest* SizeRequestPtr ; IAsyncReadRequest* EditorPrecacheRequestPtr ; IAsyncReadRequest* SummaryRequestPtr ; IAsyncReadRequest* SummaryPrecacheRequestPtr ; IAsyncReadRequest* ReadRequestPtr ; IAsyncReadRequest* CanceledReadRequestPtr ; uint8* PrecacheBuffer ; int64 FileSize ; int64 CurrentPos ; int64 PrecacheStartPos ; int64 PrecacheEndPos ; int64 ReadRequestOffset ; int64 ReadRequestSize ; int64 HeaderSize ; int64 HeaderSizeWhenReadingExportsFromSplitFile ; ELoadPhase LoadPhase ; ELoadError LoadError ; bool bCookedForEDLInEditor ; bool bNeedsEngineVersionChecks ; FAsyncFileCallBack ReadCallbackFunction ; FPackagePath PackagePath ; double OpenTime ; double SummaryReadTime ; double ExportReadTime ; TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "FLinkerExportArchive()",
    "kind": "Method",
    "detail": "Function (FAsyncFileCallBack ReadCallbackFunctionForLinkerLoad ; FLinkerLoad* OwnerLinker ; } ; class FLinkerExportArchive final : public FArchiveProxy { public :)",
    "insertText": "FLinkerExportArchive(class FLinkerLoad& InLinker, int64 InExportSerialOffset, int64 InExportSerialSize)"
  },
  {
    "label": "Tell()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "Tell()"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Seek(int64 Position)"
  }
]