[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "dtProximityGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtProximityGrid"
  },
  {
    "label": "dtCrowdNeighbour",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdNeighbour"
  },
  {
    "label": "CrowdAgentState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CrowdAgentState"
  },
  {
    "label": "dtCrowdAgentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentParams"
  },
  {
    "label": "MoveRequestState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MoveRequestState"
  },
  {
    "label": "dtCrowdAgent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgent"
  },
  {
    "label": "dtCrowdAgentAnimation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentAnimation"
  },
  {
    "label": "UpdateFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UpdateFlags"
  },
  {
    "label": "CrowdBoundaryFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CrowdBoundaryFlags"
  },
  {
    "label": "dtCrowdAgentDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentDebugInfo"
  },
  {
    "label": "dtCrowd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtCrowd"
  },
  {
    "label": "updateTopologyOptimization()",
    "kind": "Method",
    "detail": "Function (# ifndef DETOURCROWD_H # define DETOURCROWD_H # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Detour / DetourLargeWorldCoordinates . h \" # include \" Detour / DetourNavMesh . h \" # include \" Detour / DetourNavMeshQuery . h \" # include \" DetourCrowd / DetourLocalBoundary . h \" # include \" DetourCrowd / DetourObstacleAvoidance . h \" # include \" DetourCrowd / DetourPathCorridor . h \" # include \" DetourCrowd / DetourPathQueue . h \" # include \" DetourCrowd / DetourSharedBoundary . h \" # include \" HAL / Platform . h \" # include \" Templates / SharedPointer . h \" class FString ; class dtProximityGrid ; const int DT_CROWDAGENT_MAX_NEIGHBOURS = 6 ; const int DT_CROWDAGENT_MAX_CORNERS = 4 ; const int DT_CROWD_MAX_OBSTAVOIDANCE_PARAMS = 8 ; const int DT_CROWD_MAX_FILTERS = 1 6 ; struct dtCrowdNeighbour { int idx ; dtReal dist ; } ; enum CrowdAgentState { DT_CROWDAGENT_STATE_INVALID,DT_CROWDAGENT_STATE_WALKING,DT_CROWDAGENT_STATE_OFFMESH,DT_CROWDAGENT_STATE_WAITING,} ; struct dtCrowdAgentParams { void* userData ; TSharedPtr<dtQuerySpecialLinkFilter> linkFilter ; dtReal radius ; dtReal height ; dtReal maxAcceleration ; dtReal maxSpeed ; dtReal collisionQueryRange ; dtReal pathOptimizationRange ; dtReal separationWeight ; dtReal avoidanceQueryMultiplier ; unsigned int avoidanceGroup ; unsigned int groupsToAvoid ; unsigned int groupsToIgnore ; unsigned short updateFlags ; unsigned char obstacleAvoidanceType ; unsigned char filter ; } ; enum MoveRequestState { DT_CROWDAGENT_TARGET_NONE = 0,DT_CROWDAGENT_TARGET_FAILED,DT_CROWDAGENT_TARGET_VALID,DT_CROWDAGENT_TARGET_REQUESTING,DT_CROWDAGENT_TARGET_WAITING_FOR_QUEUE,DT_CROWDAGENT_TARGET_WAITING_FOR_PATH,DT_CROWDAGENT_TARGET_VELOCITY,} ; struct dtCrowdAgent { dtPathCorridor corridor ; dtLocalBoundary boundary ; dtReal topologyOptTime ; dtCrowdNeighbour neis [ DT_CROWDAGENT_MAX_NEIGHBOURS ] ; dtReal desiredSpeed ; dtReal npos [ 3 ] ; dtReal disp [ 3 ] ; dtReal dvel [ 3 ] ; dtReal nvel [ 3 ] ; dtReal vel [ 3 ] ; dtCrowdAgentParams params ; dtReal cornerVerts [ DT_CROWDAGENT_MAX_CORNERS* 3 ] ; dtPolyRef cornerPolys [ DT_CROWDAGENT_MAX_CORNERS ] ; dtReal targetReplanTime ; dtReal targetPos [ 3 ] ; dtPolyRef targetRef ; dtPathQueueRef targetPathqRef ; int nneis ; unsigned char cornerFlags [ DT_CROWDAGENT_MAX_CORNERS ] ; int ncorners ; unsigned char targetReplan ; unsigned char targetState ; unsigned char active ; unsigned char state ; } ; struct dtCrowdAgentAnimation { dtReal initPos [ 3 ],startPos [ 3 ],endPos [ 3 ] ; dtPolyRef polyRef ; dtReal t,tmax ; unsigned char active ; } ; enum UpdateFlags { DT_CROWD_ANTICIPATE_TURNS = 1<<0,DT_CROWD_OBSTACLE_AVOIDANCE = 1<<1,DT_CROWD_SEPARATION = 1<<2,DT_CROWD_OPTIMIZE_VIS = 1<<3,DT_CROWD_OPTIMIZE_TOPO = 1<<4,DT_CROWD_OPTIMIZE_VIS_MULTI = 1<<5,DT_CROWD_OFFSET_PATH = 1<<6,DT_CROWD_SLOWDOWN_AT_GOAL = 1<<7,} ; enum CrowdBoundaryFlags { DT_CROWD_BOUNDARY_IGNORE = 1<<0,} ; struct dtCrowdAgentDebugInfo { int idx ; dtReal optStart [ 3 ],optEnd [ 3 ] ; dtObstacleAvoidanceDebugData* vod ; TMap<int32,FString> agentLog ; } ; class dtCrowd { int m_maxAgents ; int m_numActiveAgents ; dtCrowdAgent* m_agents ; dtCrowdAgent** m_activeAgents ; dtCrowdAgentAnimation* m_agentAnims ; dtPathQueue m_pathq ; dtSharedBoundary m_sharedBoundary ; dtObstacleAvoidanceParams m_obstacleQueryParams [ DT_CROWD_MAX_OBSTAVOIDANCE_PARAMS ] ; dtObstacleAvoidanceQuery* m_obstacleQuery ; dtProximityGrid* m_grid ; dtPolyRef* m_pathResult ; dtReal m_ext [ 3 ] ; dtQueryFilter m_filters [ DT_CROWD_MAX_FILTERS ] ; dtQueryFilter m_raycastFilter ; dtReal m_maxAgentRadius ; dtReal m_agentStateCheckInterval ; dtReal m_pathOffsetRadiusMultiplier ; dtReal m_separationDirFilter ; int m_maxPathResult ; int m_velocitySampleCount ; dtNavMeshQuery* m_navquery ; bool m_raycastSingleArea ; bool m_keepOffmeshConnections ; bool m_earlyReachTest ; void)",
    "insertText": "updateTopologyOptimization(dtCrowdAgent** agents, const int nagents, const dtReal dt)"
  },
  {
    "label": "updateMoveRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateMoveRequest(const dtReal dt)"
  },
  {
    "label": "checkPathValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkPathValidity(dtCrowdAgent** agents, const int nagents, const dtReal dt)"
  },
  {
    "label": "requestMoveTargetReplan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requestMoveTargetReplan(const int idx, dtPolyRef ref, const dtReal* pos)"
  },
  {
    "label": "purge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "purge()"
  },
  {
    "label": "dtCrowd()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "dtCrowd()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "init(const int maxAgents, const dtReal maxAgentRadius, dtNavMesh* nav)"
  },
  {
    "label": "initAvoidance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initAvoidance(const int maxNeighbors, const int maxWalls, const int maxCustomPatterns)"
  },
  {
    "label": "setObstacleAvoidanceParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setObstacleAvoidanceParams(const int idx, const dtObstacleAvoidanceParams* params)"
  },
  {
    "label": "getObstacleAvoidanceParams()",
    "kind": "Method",
    "detail": "Function (const dtObstacleAvoidanceParams*)",
    "insertText": "getObstacleAvoidanceParams(const int idx)"
  },
  {
    "label": "setObstacleAvoidancePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setObstacleAvoidancePattern(int idx, const dtReal* angles, const dtReal* radii, int nsamples)"
  },
  {
    "label": "getObstacleAvoidancePattern()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getObstacleAvoidancePattern(int idx, dtReal* angles, dtReal* radii, int* nsamples)"
  },
  {
    "label": "getAgent()",
    "kind": "Method",
    "detail": "Function (const dtCrowdAgent*)",
    "insertText": "getAgent(const int idx)"
  },
  {
    "label": "getAgentCount()",
    "kind": "Method",
    "detail": "Function (const int)",
    "insertText": "getAgentCount()"
  },
  {
    "label": "addAgent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "addAgent(const dtReal* pos, const dtCrowdAgentParams& params, const dtQueryFilter* filter)"
  },
  {
    "label": "updateAgentParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateAgentParameters(const int idx, const dtCrowdAgentParams& params)"
  },
  {
    "label": "updateAgentFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "updateAgentFilter(const int idx, const dtQueryFilter* filter)"
  },
  {
    "label": "updateAgentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateAgentState(const int idx, bool repath)"
  },
  {
    "label": "removeAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeAgent(const int idx)"
  },
  {
    "label": "requestMoveTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requestMoveTarget(const int idx, dtPolyRef ref, const dtReal* pos)"
  },
  {
    "label": "requestMoveVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requestMoveVelocity(const int idx, const dtReal* vel)"
  },
  {
    "label": "resetMoveTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "resetMoveTarget(const int idx)"
  },
  {
    "label": "setAgentWaiting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setAgentWaiting(const int idx)"
  },
  {
    "label": "setAgentBackOnLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setAgentBackOnLink(const int idx)"
  },
  {
    "label": "resetAgentVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "resetAgentVelocity(const int idx)"
  },
  {
    "label": "getActiveAgents()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getActiveAgents(dtCrowdAgent** agents, const int maxAgents)"
  },
  {
    "label": "cacheActiveAgents()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "cacheActiveAgents()"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepPaths(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepProximityData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepProximityData(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepNextMovePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepNextMovePoint(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepSteering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepSteering(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepAvoidance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepAvoidance(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepMove(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepCorridor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepCorridor(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepOffMeshAnim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepOffMeshAnim(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepOffMeshVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepOffMeshVelocity(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "setAgentCheckInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAgentCheckInterval(const dtReal t)"
  },
  {
    "label": "setAgentCorridor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setAgentCorridor(const int idx, const dtPolyRef* path, const int npath)"
  },
  {
    "label": "setSingleAreaVisibilityOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSingleAreaVisibilityOptimization(bool bEnable)"
  },
  {
    "label": "setPruneStartedOffmeshConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPruneStartedOffmeshConnections(bool bRemoveFromCorridor)"
  },
  {
    "label": "setEarlyReachTestOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEarlyReachTestOptimization(bool bEnable)"
  },
  {
    "label": "setPathOffsetRadiusMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPathOffsetRadiusMultiplier(dtReal RadiusMultiplier)"
  },
  {
    "label": "setSeparationFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSeparationFilter(dtReal InFilter)"
  },
  {
    "label": "isOutsideCorridor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isOutsideCorridor(const int idx)"
  },
  {
    "label": "getFilter()",
    "kind": "Method",
    "detail": "Function (const dtQueryFilter*)",
    "insertText": "getFilter(const int idx)"
  },
  {
    "label": "getEditableFilter()",
    "kind": "Method",
    "detail": "Function (dtQueryFilter*)",
    "insertText": "getEditableFilter(const int idx)"
  },
  {
    "label": "getQueryExtents()",
    "kind": "Method",
    "detail": "Function (const dtReal*)",
    "insertText": "getQueryExtents()"
  },
  {
    "label": "getAgentAnims()",
    "kind": "Method",
    "detail": "Function (} const dtCrowdAgentAnimation*)",
    "insertText": "getAgentAnims()"
  },
  {
    "label": "dtFreeCrowd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeCrowd(dtCrowd* ptr)"
  }
]