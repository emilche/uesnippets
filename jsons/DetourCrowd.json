[
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "dtProximityGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtProximityGrid"
  },
  {
    "label": "dtCrowdNeighbour",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdNeighbour"
  },
  {
    "label": "CrowdAgentState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CrowdAgentState"
  },
  {
    "label": "dtCrowdAgentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentParams"
  },
  {
    "label": "MoveRequestState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MoveRequestState"
  },
  {
    "label": "dtCrowdAgent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgent"
  },
  {
    "label": "dtCrowdAgentAnimation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentAnimation"
  },
  {
    "label": "UpdateFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UpdateFlags"
  },
  {
    "label": "CrowdBoundaryFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CrowdBoundaryFlags"
  },
  {
    "label": "dtCrowdAgentDebugInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentDebugInfo"
  },
  {
    "label": "dtCrowd",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "dtCrowd"
  },
  {
    "label": "dtCrowdAgentParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "dtCrowdAgentParams"
  },
  {
    "label": "updateTopologyOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateTopologyOptimization(dtCrowdAgent** agents, const int nagents, const dtReal dt)"
  },
  {
    "label": "updateMoveRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateMoveRequest(const dtReal dt)"
  },
  {
    "label": "checkPathValidity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "checkPathValidity(dtCrowdAgent** agents, const int nagents, const dtReal dt)"
  },
  {
    "label": "requestMoveTargetReplan()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requestMoveTargetReplan(const int idx, dtPolyRef ref, const dtReal* pos)"
  },
  {
    "label": "purge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "purge()"
  },
  {
    "label": "dtCrowd()",
    "kind": "Method",
    "detail": "Function (NAVMESH_API)",
    "insertText": "dtCrowd()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "init(const int maxAgents, const dtReal maxAgentRadius, dtNavMesh* nav)"
  },
  {
    "label": "initAvoidance()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "initAvoidance(const int maxNeighbors, const int maxWalls, const int maxCustomPatterns)"
  },
  {
    "label": "setObstacleAvoidanceParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setObstacleAvoidanceParams(const int idx, const dtObstacleAvoidanceParams* params)"
  },
  {
    "label": "setObstacleAvoidancePattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setObstacleAvoidancePattern(int idx, const dtReal* angles, const dtReal* radii, int nsamples)"
  },
  {
    "label": "getObstacleAvoidancePattern()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getObstacleAvoidancePattern(int idx, dtReal* angles, dtReal* radii, int* nsamples)"
  },
  {
    "label": "addAgent()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "addAgent(const dtReal* pos, const dtCrowdAgentParams& params, const dtQueryFilter* filter)"
  },
  {
    "label": "updateAgentParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateAgentParameters(const int idx, const dtCrowdAgentParams& params)"
  },
  {
    "label": "updateAgentFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "updateAgentFilter(const int idx, const dtQueryFilter* filter)"
  },
  {
    "label": "updateAgentState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateAgentState(const int idx, bool repath)"
  },
  {
    "label": "removeAgent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeAgent(const int idx)"
  },
  {
    "label": "requestMoveTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requestMoveTarget(const int idx, dtPolyRef ref, const dtReal* pos)"
  },
  {
    "label": "requestMoveVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "requestMoveVelocity(const int idx, const dtReal* vel)"
  },
  {
    "label": "resetMoveTarget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "resetMoveTarget(const int idx)"
  },
  {
    "label": "setAgentWaiting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setAgentWaiting(const int idx)"
  },
  {
    "label": "setAgentBackOnLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setAgentBackOnLink(const int idx)"
  },
  {
    "label": "resetAgentVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "resetAgentVelocity(const int idx)"
  },
  {
    "label": "getActiveAgents()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "getActiveAgents(dtCrowdAgent** agents, const int maxAgents)"
  },
  {
    "label": "cacheActiveAgents()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "cacheActiveAgents()"
  },
  {
    "label": "update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "update(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepPaths(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepProximityData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepProximityData(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepNextMovePoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepNextMovePoint(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepSteering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepSteering(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepAvoidance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepAvoidance(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepMove(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepCorridor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepCorridor(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepOffMeshAnim()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepOffMeshAnim(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "updateStepOffMeshVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStepOffMeshVelocity(const dtReal dt, dtCrowdAgentDebugInfo* debug)"
  },
  {
    "label": "setAgentCheckInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setAgentCheckInterval(const dtReal t)"
  },
  {
    "label": "setAgentCorridor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "setAgentCorridor(const int idx, const dtPolyRef* path, const int npath)"
  },
  {
    "label": "setSingleAreaVisibilityOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSingleAreaVisibilityOptimization(bool bEnable)"
  },
  {
    "label": "setPruneStartedOffmeshConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPruneStartedOffmeshConnections(bool bRemoveFromCorridor)"
  },
  {
    "label": "setEarlyReachTestOptimization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setEarlyReachTestOptimization(bool bEnable)"
  },
  {
    "label": "setPathOffsetRadiusMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPathOffsetRadiusMultiplier(dtReal RadiusMultiplier)"
  },
  {
    "label": "setSeparationFilter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setSeparationFilter(dtReal InFilter)"
  },
  {
    "label": "dtFreeCrowd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dtFreeCrowd(dtCrowd* ptr)"
  }
]