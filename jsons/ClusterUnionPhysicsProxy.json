[
  {
    "label": "FDirtyClusterUnionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirtyClusterUnionData"
  },
  {
    "label": "FClusterUnionChildData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionChildData"
  },
  {
    "label": "FClusterUnionInitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionInitData"
  },
  {
    "label": "FClusterUnionSyncedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClusterUnionSyncedData"
  },
  {
    "label": "FClusterUnionPhysicsProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterUnionPhysicsProxy"
  },
  {
    "label": "FClusterUnionPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ClusterCreationParameters . h \" # include \" Chaos / ClusterUnionManager . h \" # include \" Chaos / Framework / PhysicsProxy . h \" # include \" Chaos / ParticleHandleFwd . h \" # include \" Chaos / PhysicsObject . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Framework / Threading . h \" # include \" PBDRigidsSolver . h \" # include \" Templates / UniquePtr . h \" namespace Chaos { struct FDirtyClusterUnionData ; struct FClusterUnionChildData { FUniqueIdx ParticleIdx ; FTransform ChildToParent ; IPhysicsProxyBase* Proxy = nullptr ; void* CachedOwner = nullptr ; int32 BoneId = INDEX_NONE ; } ; struct FClusterUnionInitData { void* UserData ; FTransform InitialTransform ; uint32 ActorId = INDEX_NONE ; uint32 ComponentId = INDEX_NONE ; bool bCheckConnectivity = true ; bool bUnbreakable = false ; bool bGenerateConnectivityEdges = true ; int32 GravityGroupOverride = INDEX_NONE ; # if CHAOS_DEBUG_NAME TSharedPtr<FString,ESPMode::ThreadSafe> DebugName ; # endif } ; struct FClusterUnionSyncedData { bool bIsAnchored = true ; bool bDidSyncGeometry = false ; TArray<FClusterUnionChildData> ChildParticles ; } ; class FClusterUnionPhysicsProxy : public TPhysicsProxy<FClusterUnionPhysicsProxy,void,FClusterUnionProxyTimestamp> { using Base = TPhysicsProxy<FClusterUnionPhysicsProxy,void,FClusterUnionProxyTimestamp> ; public : using FExternalParticle = TPBDRigidParticle<FReal,3> ; using FInternalParticle = TPBDRigidClusteredParticleHandle<Chaos::FReal,3> ;)",
    "insertText": "FClusterUnionPhysicsProxy()"
  },
  {
    "label": "FClusterUnionPhysicsProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FClusterUnionPhysicsProxy(UObject* InOwner, const FClusterCreationParameters& InParameters, const FClusterUnionInitData& InInitData)"
  },
  {
    "label": "AddPhysicsObjects_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPhysicsObjects_External(const TArray<FPhysicsObjectHandle>& Objects)"
  },
  {
    "label": "GetSyncedData_External()",
    "kind": "Method",
    "detail": "Function (const FClusterUnionSyncedData&)",
    "insertText": "GetSyncedData_External()"
  },
  {
    "label": "SetIsAnchored_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsAnchored_External(bool bIsAnchored)"
  },
  {
    "label": "GetObjectState_External()",
    "kind": "Method",
    "detail": "Function (EObjectStateType)",
    "insertText": "GetObjectState_External()"
  },
  {
    "label": "SetObjectState_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectState_External(EObjectStateType State)"
  },
  {
    "label": "Wake_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Wake_External()"
  },
  {
    "label": "SetMass_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMass_External(Chaos::FReal Mass)"
  },
  {
    "label": "SetGeometry_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGeometry_External(const Chaos::FImplicitObjectPtr& Geometry, const TArray<FPBDRigidParticle*>& ShapeParticles)"
  },
  {
    "label": "MergeGeometry_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeGeometry_External(TArray<Chaos::FImplicitObjectPtr>&& ImplicitGeometries, const TArray<FPBDRigidParticle*>& ShapeParticles)"
  },
  {
    "label": "RemoveShapes_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveShapes_External(const TArray<FPBDRigidParticle*>& ShapeParticles)"
  },
  {
    "label": "Initialize_External()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize_External()"
  },
  {
    "label": "IsInitializedOnPhysicsThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitializedOnPhysicsThread()"
  },
  {
    "label": "GetParticle_External()",
    "kind": "Method",
    "detail": "Function (FExternalParticle*)",
    "insertText": "GetParticle_External()"
  },
  {
    "label": "GetParticle_Internal()",
    "kind": "Method",
    "detail": "Function (} FInternalParticle*)",
    "insertText": "GetParticle_Internal()"
  },
  {
    "label": "HasChildren_External()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasChildren_External()"
  },
  {
    "label": "HasChildren_Internal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasChildren_Internal()"
  },
  {
    "label": "IsAnchored_External()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAnchored_External()"
  },
  {
    "label": "SetLinearVelocity_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLinearVelocity_External(const FVector& V)"
  },
  {
    "label": "SetAngularVelocity_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularVelocity_External(const FVector& W)"
  },
  {
    "label": "SetChildToParent_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetChildToParent_External(FPhysicsObjectHandle Child, const FTransform& RelativeTransform, bool bLock)"
  },
  {
    "label": "BulkSetChildToParent_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BulkSetChildToParent_External(const TArray<FPhysicsObjectHandle>& Objects, const TArray<FTransform>& Transforms, bool bLock)"
  },
  {
    "label": "ChangeMainParticleStatus_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ChangeMainParticleStatus_External(const TArray<FPhysicsObjectHandle>& Objects, bool bIsMain)"
  },
  {
    "label": "PushToPhysicsState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushToPhysicsState(const FDirtyPropertiesManager& Manager, int32 DataIdx, const FDirtyProxy& Dirty)"
  },
  {
    "label": "PullFromPhysicsState()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PullFromPhysicsState(const FDirtyClusterUnionData& PullData, int32 SolverSyncTimestamp, const FDirtyClusterUnionData* NextPullData = nullptr, const FRealSingle* Alpha = nullptr, const FDirtyRigidParticleReplicationErrorData* Error = nullptr, const Chaos::FReal AsyncFixedTimeStep = 0)"
  },
  {
    "label": "BufferPhysicsResults_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferPhysicsResults_Internal(FDirtyClusterUnionData& BufferData)"
  },
  {
    "label": "BufferPhysicsResults_External()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BufferPhysicsResults_External(FDirtyClusterUnionData& BufferData)"
  },
  {
    "label": "SyncRemoteData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SyncRemoteData(FDirtyPropertiesManager& Manager, int32 DataIdx, FDirtyChaosProperties& RemoteData)"
  },
  {
    "label": "ClearAccumulatedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAccumulatedData()"
  },
  {
    "label": "GetInterpolationData()",
    "kind": "Method",
    "detail": "Function (FProxyInterpolationBase*)",
    "insertText": "GetInterpolationData()"
  },
  {
    "label": "GetClusterUnionIndex()",
    "kind": "Method",
    "detail": "Function (} FClusterUnionIndex)",
    "insertText": "GetClusterUnionIndex()"
  },
  {
    "label": "SetEnableStrainOnCollision_External()",
    "kind": "Method",
    "detail": "Function (GeometryChildParticles_External = InParticles ; } void)",
    "insertText": "SetEnableStrainOnCollision_External(bool bEnable)"
  },
  {
    "label": "GetEnableStrainOnCollision_Internal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableStrainOnCollision_Internal()"
  },
  {
    "label": "ErrorDataType()",
    "kind": "Method",
    "detail": "Function (InterpolationData = MakeUnique<)",
    "insertText": "ErrorDataType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InterpolationData.Get()->GetInterpolationType() != ErrorDataType::InterpolationType)"
  },
  {
    "label": "ErrorDataType()",
    "kind": "Method",
    "detail": "Function (InterpolationData = MakeUnique<)",
    "insertText": "ErrorDataType(InterpolationData.Get()->GetPullDataInterpIdx_External(), InterpolationData.Get()->GetInterpChannel_External())"
  },
  {
    "label": "ErrorDataType()",
    "kind": "Method",
    "detail": "Function (} return static_cast<)",
    "insertText": "ErrorDataType(InterpolationData.Get())"
  },
  {
    "label": "IsSimulating()",
    "kind": "Method",
    "detail": "Function (} TArray<FExternalParticle*> GeometryChildParticles_External ; public : bool)",
    "insertText": "IsSimulating()"
  },
  {
    "label": "StartFrameCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartFrameCallback(const float InDt, const float InTime)"
  },
  {
    "label": "EndFrameCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndFrameCallback(const float InDt)"
  },
  {
    "label": "CreateRigidBodyCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateRigidBodyCallback(FParticlesType& InOutParticles)"
  },
  {
    "label": "DisableCollisionsCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableCollisionsCallback(TSet<TTuple<int32, int32>>& InPairs)"
  },
  {
    "label": "AddForceCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddForceCallback(FParticlesType& InParticles, const float InDt, const int32 InIndex)"
  },
  {
    "label": "BindParticleCallbackMapping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindParticleCallbackMapping(Chaos::TArrayCollectionArray<PhysicsProxyWrapper>& PhysicsProxyReverseMap, Chaos::TArrayCollectionArray<int32>& ParticleIDReverseMap)"
  },
  {
    "label": "ConcreteType()",
    "kind": "Method",
    "detail": "Function (} EPhysicsProxyType)",
    "insertText": "ConcreteType()"
  },
  {
    "label": "OnRemoveFromScene()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRemoveFromScene()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsDirty()"
  }
]