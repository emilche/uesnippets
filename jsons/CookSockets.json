[
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "CloseSocket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" HAL / Platform . h \" # include \" IPAddress . h \" # include \" Templates / SharedPointer . h \" class FSocket ; namespace UE::Cook::Sockets { int32 COOKDIRECTOR_DEFAULT_REQUEST_CONNECTION_PORT = 4 1 8 9 7 ; void)",
    "insertText": "CloseSocket(FSocket*& Socket)"
  },
  {
    "label": "CreateListenSocket()",
    "kind": "Method",
    "detail": "Function (FSocket*)",
    "insertText": "CreateListenSocket(int32& InOutPort, TSharedPtr<FInternetAddr>& OutAddr, FString& OutConnectAuthority, const TCHAR* SocketDebugName, FString& OutErrorReason)"
  },
  {
    "label": "ConnectToHost()",
    "kind": "Method",
    "detail": "Function (FSocket*)",
    "insertText": "ConnectToHost(FInternetAddr& Host, const TCHAR* SocketDebugName)"
  },
  {
    "label": "GetAddressFromStringWithPort()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInternetAddr>)",
    "insertText": "GetAddressFromStringWithPort(FStringView Text)"
  }
]