[
  {
    "label": "FuncT_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuncT_"
  },
  {
    "label": "RegionTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegionTraits"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "DominanceFrontier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominanceFrontier"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "PostDominatorTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PostDominatorTree"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "Region",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Region"
  },
  {
    "label": "RegionTr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionTr"
  },
  {
    "label": "RegionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionBase"
  },
  {
    "label": "RegionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNode"
  },
  {
    "label": "RegionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfo"
  },
  {
    "label": "RegionInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoBase"
  },
  {
    "label": "GraphType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphType"
  },
  {
    "label": "FlatIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlatIt"
  },
  {
    "label": "Tr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tr"
  },
  {
    "label": "RegionNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNodeBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "PrintStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PrintStyle"
  },
  {
    "label": "block_iterator_wrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "block_iterator_wrapper"
  },
  {
    "label": "MachineRegionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegionInfo"
  },
  {
    "label": "RegionInfoPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoPass"
  },
  {
    "label": "getNumSuccessors()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_REGIONINFO_H # define LLVM_ANALYSIS_REGIONINFO_H # include \" llvm / ADT / DepthFirstIterator . h \" # include \" llvm / ADT / PointerIntPair . h \" # include \" llvm / IR / CFG . h \" # include \" llvm / IR / Dominators . h \" # include<map> # include<memory> # include<set> namespace llvm { template<class FuncT_> struct RegionTraits { typedef FuncT_::UnknownRegionTypeError BrokenT ; } ; class DominatorTree ; class DominanceFrontier ; class Loop ; class LoopInfo ; struct PostDominatorTree ; class raw_ostream ; class Region ; template<class RegionTr> class RegionBase ; class RegionNode ; class RegionInfo ; template<class RegionTr> class RegionInfoBase ; template<> struct RegionTraits<Function> { typedef Function FuncT ; typedef BasicBlock BlockT ; typedef Region RegionT ; typedef RegionNode RegionNodeT ; typedef RegionInfo RegionInfoT ; typedef DominatorTree DomTreeT ; typedef DomTreeNode DomTreeNodeT ; typedef DominanceFrontier DomFrontierT ; typedef PostDominatorTree PostDomTreeT ; typedef Instruction InstT ; typedef Loop LoopT ; typedef LoopInfo LoopInfoT ; unsigned)",
    "insertText": "getNumSuccessors(BasicBlock *BB)"
  },
  {
    "label": "RegionNodeBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<class GraphType> class FlatIt { } ; template<class Tr> class RegionNodeBase { class RegionBase<Tr> ; public : typedef Tr::BlockT BlockT ; typedef Tr::RegionT RegionT ; private :)",
    "insertText": "RegionNodeBase(const RegionNodeBase &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const RegionNodeBase&)",
    "insertText": "operator(const RegionNodeBase &)"
  },
  {
    "label": "RegionNodeBase()",
    "kind": "Method",
    "detail": "Function (PointerIntPair<BlockT*,1,bool> entry ; RegionT* parent ; protected :)",
    "insertText": "RegionNodeBase(RegionT *Parent, BlockT *Entry, bool isSubRegion = false) : entry(Entry, isSubRegion), parent(Parent)"
  },
  {
    "label": "getParent()",
    "kind": "Method",
    "detail": "Function (} public : RegionT*)",
    "insertText": "getParent()"
  },
  {
    "label": "getNodeAs()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "getNodeAs()"
  },
  {
    "label": "isSubRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSubRegion()"
  },
  {
    "label": "RegionBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<class Tr> class RegionBase : public RegionNodeBase<Tr> { typedef Tr::FuncT FuncT ; typedef Tr::BlockT BlockT ; typedef Tr::RegionInfoT RegionInfoT ; typedef Tr::RegionT RegionT ; typedef Tr::RegionNodeT RegionNodeT ; typedef Tr::DomTreeT DomTreeT ; typedef Tr::LoopT LoopT ; typedef Tr::LoopInfoT LoopInfoT ; typedef Tr::InstT InstT ; typedef GraphTraits<BlockT*> BlockTraits ; typedef GraphTraits<Inverse<BlockT*>> InvBlockTraits ; typedef BlockTraits::ChildIteratorType SuccIterTy ; typedef InvBlockTraits::ChildIteratorType PredIterTy ; class RegionInfoBase<Tr> ;)",
    "insertText": "RegionBase(const RegionBase &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const RegionBase&)",
    "insertText": "operator(const RegionBase &)"
  },
  {
    "label": "verifyBBInRegion()",
    "kind": "Method",
    "detail": "Function (RegionInfoT* RI ; DomTreeT* DT ; BlockT* exit ; typedef std::vector<std::unique_ptr<RegionT>> RegionSet ; RegionSet children ; typedef std::map<BlockT*,RegionNodeT*> BBNodeMapT ; BBNodeMapT BBNodeMap ; void)",
    "insertText": "verifyBBInRegion(BlockT *BB)"
  },
  {
    "label": "verifyWalk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyWalk(BlockT *BB, std::set<BlockT *> *visitedBB)"
  },
  {
    "label": "verifyRegionNest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyRegionNest()"
  },
  {
    "label": "RegionBase()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "RegionBase(BlockT *Entry, BlockT *Exit, RegionInfoT *RI, DomTreeT *DT, RegionT *Parent = nullptr)"
  },
  {
    "label": "RegionBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RegionBase()"
  },
  {
    "label": "getEntry()",
    "kind": "Method",
    "detail": "Function (BlockT*)",
    "insertText": "getEntry()"
  },
  {
    "label": "replaceEntry()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "replaceEntry(BlockT *BB)"
  },
  {
    "label": "replaceExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceExit(BlockT *BB)"
  },
  {
    "label": "replaceEntryRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceEntryRecursive(BlockT *NewEntry)"
  },
  {
    "label": "replaceExitRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceExitRecursive(BlockT *NewExit)"
  },
  {
    "label": "getExit()",
    "kind": "Method",
    "detail": "Function (BlockT*)",
    "insertText": "getExit()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (} RegionNodeT*)",
    "insertText": "getNode()"
  },
  {
    "label": "getDepth()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getDepth()"
  },
  {
    "label": "isTopLevelRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTopLevelRegion()"
  },
  {
    "label": "getEnteringBlock()",
    "kind": "Method",
    "detail": "Function (BlockT*)",
    "insertText": "getEnteringBlock()"
  },
  {
    "label": "getExitingBlock()",
    "kind": "Method",
    "detail": "Function (BlockT*)",
    "insertText": "getExitingBlock()"
  },
  {
    "label": "isSimple()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isSimple()"
  },
  {
    "label": "getNameStr()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "getNameStr()"
  },
  {
    "label": "getRegionInfo()",
    "kind": "Method",
    "detail": "Function (RegionInfoT*)",
    "insertText": "getRegionInfo()"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(NDEBUG) || defined(LLVM_ENABLE_DUMP) void dump()"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "contains(const BlockT *BB)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "contains(const RegionT *SubRegion)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "contains(const InstT *Inst)"
  },
  {
    "label": "contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "contains(const LoopT *L)"
  },
  {
    "label": "outermostLoopInRegion()",
    "kind": "Method",
    "detail": "Function (LoopT*)",
    "insertText": "outermostLoopInRegion(LoopT *L)"
  },
  {
    "label": "outermostLoopInRegion()",
    "kind": "Method",
    "detail": "Function (LoopT*)",
    "insertText": "outermostLoopInRegion(LoopInfoT *LI, BlockT *BB)"
  },
  {
    "label": "getSubRegionNode()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "getSubRegionNode(BlockT *BB)"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (RegionNodeT*)",
    "insertText": "getNode(BlockT *BB)"
  },
  {
    "label": "getBBNode()",
    "kind": "Method",
    "detail": "Function (RegionNodeT*)",
    "insertText": "getBBNode(BlockT *BB)"
  },
  {
    "label": "addSubRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSubRegion(RegionT *SubRegion, bool moveChildren = false)"
  },
  {
    "label": "removeSubRegion()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "removeSubRegion(RegionT *SubRegion)"
  },
  {
    "label": "transferChildrenTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transferChildrenTo(RegionT *To)"
  },
  {
    "label": "verifyRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "verifyRegion()"
  },
  {
    "label": "clearNodeCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearNodeCache()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (typedef RegionSet::iterator iterator ; typedef RegionSet::const_iterator const_iterator ; iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "block_iterator_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<bool IsConst> class block_iterator_wrapper : public df_iterator<std::conditional<IsConst,const BlockT,BlockT>::type*> { typedef df_iterator<std::conditional<IsConst,const BlockT,BlockT>::type*> super ; public : typedef block_iterator_wrapper<IsConst> Self ; typedef super::pointer pointer ;)",
    "insertText": "block_iterator_wrapper(pointer Entry, pointer Exit) : super(df_begin(Entry))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (super::Visited .)",
    "insertText": "insert(Exit)"
  },
  {
    "label": "block_iterator_wrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "block_iterator_wrapper() : super(df_end<pointer>((BlockT *)nullptr))"
  },
  {
    "label": "block_iterator_wrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "block_iterator_wrapper(super I) : super(I)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BlockT*)",
    "insertText": "operator()"
  },
  {
    "label": "block_begin()",
    "kind": "Method",
    "detail": "Function (} } ; typedef block_iterator_wrapper<false> block_iterator ; typedef block_iterator_wrapper<true> const_block_iterator ; block_iterator)",
    "insertText": "block_begin()"
  },
  {
    "label": "block_end()",
    "kind": "Method",
    "detail": "Function (} block_iterator)",
    "insertText": "block_end()"
  },
  {
    "label": "blocks()",
    "kind": "Method",
    "detail": "Function (} typedef iterator_range<block_iterator> block_range ; typedef iterator_range<const_block_iterator> const_block_range ; block_range)",
    "insertText": "blocks()"
  },
  {
    "label": "element_begin()",
    "kind": "Method",
    "detail": "Function (} typedef df_iterator<RegionNodeT*,SmallPtrSet<RegionNodeT*,8>,false,GraphTraits<RegionNodeT*>> element_iterator ; typedef df_iterator<const RegionNodeT*,SmallPtrSet<const RegionNodeT*,8>,false,GraphTraits<const RegionNodeT*>> const_element_iterator ; element_iterator)",
    "insertText": "element_begin()"
  },
  {
    "label": "element_end()",
    "kind": "Method",
    "detail": "Function (element_iterator)",
    "insertText": "element_end()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; template<class Tr> raw_ostream&)",
    "insertText": "operator(raw_ostream &OS, const RegionNodeBase<Tr> &Node)"
  },
  {
    "label": "RegionInfoBase()",
    "kind": "Method",
    "detail": "Function (template<class Tr> class RegionInfoBase { typedef Tr::BlockT BlockT ; typedef Tr::FuncT FuncT ; typedef Tr::RegionT RegionT ; typedef Tr::RegionInfoT RegionInfoT ; typedef Tr::DomTreeT DomTreeT ; typedef Tr::DomTreeNodeT DomTreeNodeT ; typedef Tr::PostDomTreeT PostDomTreeT ; typedef Tr::DomFrontierT DomFrontierT ; typedef GraphTraits<BlockT*> BlockTraits ; typedef GraphTraits<Inverse<BlockT*>> InvBlockTraits ; typedef BlockTraits::ChildIteratorType SuccIterTy ; typedef InvBlockTraits::ChildIteratorType PredIterTy ; class RegionInfo ; class MachineRegionInfo ; typedef DenseMap<BlockT*,BlockT*> BBtoBBMap ; typedef DenseMap<BlockT*,RegionT*> BBtoRegionMap ; typedef SmallPtrSet<RegionT*,4> RegionSet ;)",
    "insertText": "RegionInfoBase()"
  },
  {
    "label": "RegionInfoBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegionInfoBase(const RegionInfoBase &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const RegionInfoBase&)",
    "insertText": "operator(const RegionInfoBase &)"
  },
  {
    "label": "isRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isRegion(BlockT *entry, BlockT *exit)"
  },
  {
    "label": "insertShortCut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "insertShortCut(BlockT *entry, BlockT *exit, BBtoBBMap *ShortCut)"
  },
  {
    "label": "isTrivialRegion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isTrivialRegion(BlockT *entry, BlockT *exit)"
  },
  {
    "label": "createRegion()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "createRegion(BlockT *entry, BlockT *exit)"
  },
  {
    "label": "findRegionsWithEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findRegionsWithEntry(BlockT *entry, BBtoBBMap *ShortCut)"
  },
  {
    "label": "scanForRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scanForRegions(FuncT &F, BBtoBBMap *ShortCut)"
  },
  {
    "label": "getTopMostParent()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "getTopMostParent(RegionT *region)"
  },
  {
    "label": "buildRegionsTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildRegionsTree(DomTreeNodeT *N, RegionT *region)"
  },
  {
    "label": "updateStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStatistics(RegionT *R)"
  },
  {
    "label": "calculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calculate(FuncT &F)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (public : bool VerifyRegionInfo ; RegionT::PrintStyle printStyle ; void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "getRegionFor()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "getRegionFor(BlockT *BB)"
  },
  {
    "label": "setRegionFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRegionFor(BlockT *BB, RegionT *R)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "operator(BlockT *BB)"
  },
  {
    "label": "getMaxRegionExit()",
    "kind": "Method",
    "detail": "Function (BlockT*)",
    "insertText": "getMaxRegionExit(BlockT *BB)"
  },
  {
    "label": "getCommonRegion()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "getCommonRegion(RegionT *A, RegionT *B)"
  },
  {
    "label": "getCommonRegion()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "getCommonRegion(BlockT *A, BlockT *B)"
  },
  {
    "label": "getCommonRegion()",
    "kind": "Method",
    "detail": "Function (} RegionT*)",
    "insertText": "getCommonRegion(SmallVectorImpl<RegionT *> &Regions)"
  },
  {
    "label": "getCommonRegion()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "getCommonRegion(SmallVectorImpl<BlockT *> &BBs)"
  },
  {
    "label": "getTopLevelRegion()",
    "kind": "Method",
    "detail": "Function (RegionT*)",
    "insertText": "getTopLevelRegion()"
  },
  {
    "label": "verifyAnalysis()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "verifyAnalysis()"
  },
  {
    "label": "RegionNode()",
    "kind": "Method",
    "detail": "Function (} ; class Region ; class RegionNode : public RegionNodeBase<RegionTraits<Function>> { public :)",
    "insertText": "RegionNode(Region *Parent, BasicBlock *Entry, bool isSubRegion = false) : RegionNodeBase<RegionTraits<Function>>(Parent, Entry, isSubRegion)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const Region &RN)"
  },
  {
    "label": "Region()",
    "kind": "Method",
    "detail": "Function (} } ; class Region : public RegionBase<RegionTraits<Function>> { public :)",
    "insertText": "Region(BasicBlock *Entry, BasicBlock *Exit, RegionInfo *RI, DominatorTree *DT, Region *Parent = nullptr)"
  },
  {
    "label": "Region()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Region()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const RegionNode &RN)"
  },
  {
    "label": "RegionInfo()",
    "kind": "Method",
    "detail": "Function (} } ; class RegionInfo : public RegionInfoBase<RegionTraits<Function>> { public :)",
    "insertText": "RegionInfo()"
  },
  {
    "label": "updateStatistics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateStatistics(Region *R)"
  },
  {
    "label": "recalculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recalculate(Function &F, DominatorTree *DT, PostDominatorTree *PDT, DominanceFrontier *DF)"
  },
  {
    "label": "RegionInfoPass()",
    "kind": "Method",
    "detail": "Function (} ; class RegionInfoPass : public FunctionPass { RegionInfo RI ; public : char ID ;)",
    "insertText": "RegionInfoPass()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS, const Module *)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "BasicBlock()",
    "kind": "Method",
    "detail": "Function (} ; template<> template<> BasicBlock* RegionNodeBase<RegionTraits<Function>>::getNodeAs<)",
    "insertText": "BasicBlock()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isSubRegion() && \"This is not a BasicBlock RegionNode!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isSubRegion() && \"This is not a subregion RegionNode!\")"
  },
  {
    "label": "Function()",
    "kind": "Method",
    "detail": "Function (auto Unconst = const_cast<RegionNodeBase<RegionTraits<)",
    "insertText": "Function(this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef Tr::BlockT BlockT ; typedef Tr::RegionT RegionT ;)",
    "insertText": "if(Node.isSubRegion()) return OS << Node.template getNodeAs<RegionT>()->getNameStr()"
  }
]