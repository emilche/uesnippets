[
  {
    "label": "FuncT_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FuncT_"
  },
  {
    "label": "RegionTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegionTraits"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "DominanceFrontier",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominanceFrontier"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "PostDominatorTree",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PostDominatorTree"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "Region",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Region"
  },
  {
    "label": "RegionTr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionTr"
  },
  {
    "label": "RegionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionBase"
  },
  {
    "label": "RegionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNode"
  },
  {
    "label": "RegionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfo"
  },
  {
    "label": "RegionTr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionTr"
  },
  {
    "label": "RegionInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoBase"
  },
  {
    "label": "RegionTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegionTraits"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "GraphType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GraphType"
  },
  {
    "label": "FlatIt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlatIt"
  },
  {
    "label": "Tr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tr"
  },
  {
    "label": "RegionNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNodeBase"
  },
  {
    "label": "RegionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Tr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tr"
  },
  {
    "label": "RegionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionBase"
  },
  {
    "label": "RegionInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoBase"
  },
  {
    "label": "PrintStyle",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PrintStyle"
  },
  {
    "label": "block_iterator_wrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "block_iterator_wrapper"
  },
  {
    "label": "Tr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tr"
  },
  {
    "label": "Tr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tr"
  },
  {
    "label": "RegionInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoBase"
  },
  {
    "label": "RegionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfo"
  },
  {
    "label": "MachineRegionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineRegionInfo"
  },
  {
    "label": "Region",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Region"
  },
  {
    "label": "RegionNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNode"
  },
  {
    "label": "Region",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Region"
  },
  {
    "label": "RegionInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfo"
  },
  {
    "label": "RegionInfoPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoPass"
  },
  {
    "label": "Tr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tr"
  },
  {
    "label": "RegionBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionBase"
  },
  {
    "label": "RegionNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionNodeBase"
  },
  {
    "label": "RegionInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegionInfoBase"
  },
  {
    "label": "replaceEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceEntry(BlockT *BB)"
  },
  {
    "label": "replaceExit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceExit(BlockT *BB)"
  },
  {
    "label": "replaceEntryRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceEntryRecursive(BlockT *NewEntry)"
  },
  {
    "label": "replaceExitRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceExitRecursive(BlockT *NewExit)"
  },
  {
    "label": "addSubRegion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addSubRegion(RegionT *SubRegion, bool moveChildren = false)"
  },
  {
    "label": "transferChildrenTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "transferChildrenTo(RegionT *To)"
  },
  {
    "label": "clearNodeCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clearNodeCache()"
  },
  {
    "label": "block_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "block_iterator()"
  },
  {
    "label": "const_block_iterator()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "const_block_iterator()"
  },
  {
    "label": "element_begin()",
    "kind": "Method",
    "detail": "Function (element_iterator)",
    "insertText": "element_begin()"
  },
  {
    "label": "element_end()",
    "kind": "Method",
    "detail": "Function (element_iterator)",
    "insertText": "element_end()"
  },
  {
    "label": "findRegionsWithEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "findRegionsWithEntry(BlockT *entry, BBtoBBMap *ShortCut)"
  },
  {
    "label": "scanForRegions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scanForRegions(FuncT &F, BBtoBBMap *ShortCut)"
  },
  {
    "label": "buildRegionsTree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "buildRegionsTree(DomTreeNodeT *N, RegionT *region)"
  },
  {
    "label": "calculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calculate(FuncT &F)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "setRegionFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setRegionFor(BlockT *BB, RegionT *R)"
  },
  {
    "label": "splitBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "splitBlock(BlockT *NewBB, BlockT *OldBB)"
  },
  {
    "label": "Region()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "Region(BasicBlock *Entry, BasicBlock *Exit, RegionInfo *RI, DominatorTree *DT,\n         Region *Parent = nullptr)"
  },
  {
    "label": "RegionInfo()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RegionInfo()"
  },
  {
    "label": "recalculate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "recalculate(Function &F, DominatorTree *DT, PostDominatorTree *PDT,\n                   DominanceFrontier *DF)"
  },
  {
    "label": "RegionInfoPass()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RegionInfoPass()"
  },
  {
    "label": "getEntry()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getEntry()"
  }
]