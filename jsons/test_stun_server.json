[
  {
    "label": "TestStunServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestStunServer"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef P2P_BASE_TEST_STUN_SERVER_H_ # define P2P_BASE_TEST_STUN_SERVER_H_ # include \" api / transport / stun . h \" # include \" p2p / base / stun_server . h \" # include \" rtc_base / async_udp_socket . h \" # include \" rtc_base / socket_address . h \" # include \" rtc_base / socket_server . h \" namespace cricket { class TestStunServer : StunServer { public : TestStunServer*)",
    "insertText": "Create(rtc::SocketServer* ss, const rtc::SocketAddress& addr)"
  },
  {
    "label": "set_fake_stun_addr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_fake_stun_addr(const rtc::SocketAddress& addr)"
  },
  {
    "label": "TestStunServer()",
    "kind": "Method",
    "detail": "Function (fake_stun_addr_ = addr ; } private :)",
    "insertText": "TestStunServer(rtc::AsyncUDPSocket* socket) : StunServer(socket)"
  },
  {
    "label": "OnBindingRequest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBindingRequest(StunMessage* msg, const rtc::SocketAddress& remote_addr)"
  }
]