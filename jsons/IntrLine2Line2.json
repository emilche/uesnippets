[
  {
    "label": "TIntrLine2Line2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIntrLine2Line2"
  },
  {
    "label": "TIntrLine2Line2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" LineTypes . h \" # include \" VectorUtil . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> class TIntrLine2Line2 { protected : TLine2<RealType> Line1 ; TLine2<RealType> Line2 ; RealType dotThresh = TMathUtil<RealType>::ZeroTolerance ; RealType DistThresh = TMathUtil<RealType>::ZeroTolerance ; public : TVector2<RealType> Point ; RealType Segment1Parameter ; RealType Segment2Parameter ; int Quantity = 0 ; EIntersectionResult Result = EIntersectionResult::NotComputed ; EIntersectionType Type = EIntersectionType::Empty ;)",
    "insertText": "TIntrLine2Line2(const TLine2<RealType>& Line1In, const TLine2<RealType>& Line2In) : Line1(Line1In), Line2(Line2In)"
  },
  {
    "label": "GetLine1()",
    "kind": "Method",
    "detail": "Function (} const TLine2<RealType>&)",
    "insertText": "GetLine1()"
  },
  {
    "label": "GetLine2()",
    "kind": "Method",
    "detail": "Function (Line1 = Value ; Result = EIntersectionResult::NotComputed ; } const TLine2<RealType>&)",
    "insertText": "GetLine2()"
  },
  {
    "label": "GetDotThreshold()",
    "kind": "Method",
    "detail": "Function (Line2 = Value ; Result = EIntersectionResult::NotComputed ; } RealType)",
    "insertText": "GetDotThreshold()"
  },
  {
    "label": "SetDistThreshold()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; } void)",
    "insertText": "SetDistThreshold(RealType Value)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (DistThresh =)",
    "insertText": "Max(Value, (RealType)0)"
  },
  {
    "label": "IsSimpleIntersection()",
    "kind": "Method",
    "detail": "Function (Result = EIntersectionResult::NotComputed ; } bool)",
    "insertText": "IsSimpleIntersection()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Find()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsNormalized(Line1.Direction) == false || IsNormalized(Line2.Direction) == false)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (Type = EIntersectionType::Empty ; Result = EIntersectionResult::InvalidQuery ; return false ; } TVector2<RealType> s = TVector2<RealType)",
    "insertText": "Zero()"
  },
  {
    "label": "Classify()",
    "kind": "Method",
    "detail": "Function (Type =)",
    "insertText": "Classify(Line1.Origin, Line1.Direction, Line2.Origin, Line2.Direction, dotThresh, DistThresh, s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Quantity = 1 ; Point = Line1 . Origin + s . X* Line1 . Direction ; Segment1Parameter = s . X ; Segment2Parameter = s . Y ; } else)",
    "insertText": "if(Type == EIntersectionType::Line)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (Quantity = TNumericLimits<int32)",
    "insertText": "Max()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (} else { Quantity = 0 ; })",
    "insertText": "Result(Type != EIntersectionType::Empty)"
  },
  {
    "label": "Classify()",
    "kind": "Method",
    "detail": "Function (} EIntersectionType)",
    "insertText": "Classify(const TVector2<RealType>& P0, const TVector2<RealType>& D0, const TVector2<RealType>& P1, const TVector2<RealType>& D1, RealType DotThreshold, RealType DistThreshold, TVector2<RealType>& s)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (TVector2<RealType> diff = P1 - P0 ; RealType D0DotPerpD1 =)",
    "insertText": "DotPerp(D0, D1)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (RealType invD0DotPerpD1 = 1 . 0 / D0DotPerpD1 ; RealType diffDotPerpD0 =)",
    "insertText": "DotPerp(diff, D0)"
  },
  {
    "label": "DotPerp()",
    "kind": "Method",
    "detail": "Function (RealType diffDotPerpD1 =)",
    "insertText": "DotPerp(diff, D1)"
  }
]