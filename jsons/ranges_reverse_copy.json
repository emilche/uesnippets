[
  {
    "label": "_InIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_InIter"
  },
  {
    "label": "_OutIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_OutIter"
  },
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_REVERSE_COPY_H # define _LIBCPP___ALGORITHM_RANGES_REVERSE_COPY_H # include<__algorithm / in_out_result . h> # include<__algorithm / ranges_copy . h> # include<__config> # include<__iterator / concepts . h> # include<__iterator / next . h> # include<__iterator / reverse_iterator . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__ranges / dangling . h> # include<__ranges / subrange . h> # include<__utility / move . h> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<class _InIter,class _OutIter> using reverse_copy_result = in_out_result<_InIter,_OutIter> ; namespace __reverse_copy { struct __fn { template<bidirectional_iterator _InIter,sentinel_for<_InIter> _Sent,weakly_incrementable _OutIter> requires indirectly_copyable<_InIter,_OutIter> _LIBCPP_HIDE_FROM_ABI reverse_copy_result<_InIter,_OutIter>)",
    "insertText": "operator()(_InIter __first, _Sent __last, _OutIter __result)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<bidirectional_range _Range,weakly_incrementable _OutIter> requires indirectly_copyable<iterator_t<_Range>,_OutIter> _LIBCPP_HIDE_FROM_ABI reverse_copy_result<borrowed_iterator_t<_Range>,_OutIter>)",
    "insertText": "operator()(_Range&& __range, _OutIter __result)"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (auto __ret =)",
    "insertText": "copy(std::__reverse_range(__range), std::move(__result))"
  }
]