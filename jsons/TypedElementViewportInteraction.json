[
  {
    "label": "UTypedElementSelectionSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTypedElementSelectionSet"
  },
  {
    "label": "FInputDeviceState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputDeviceState"
  },
  {
    "label": "FTypedElementHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTypedElementHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EDITORFRAMEWORK_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EDITORFRAMEWORK_API"
  },
  {
    "label": "FTypedElementViewportInteractionCustomization()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ArrayView . h \" # include \" Elements / Framework / TypedElementAssetEditorToolkitHostMixin . h \" # include \" Elements / Framework / TypedElementInterfaceCustomization . h \" # include \" Elements / Framework / TypedElementListFwd . h \" # include \" Elements / Interfaces / TypedElementWorldInterface . h \" # include \" InputState . h \" # include \" Math / Axis . h \" # include \" Math / Transform . h \" # include \" Math / UnrealMathSSE . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" UnrealWidgetFwd . h \" # include \" TypedElementViewportInteraction . generated . h \" class UTypedElementSelectionSet ; struct FInputDeviceState ; struct FTypedElementHandle ; enum class ETypedElementViewportInteractionGizmoManipulationType : uint8 { Drag,Click,} ; class FTypedElementViewportInteractionCustomization : public FTypedElementAssetEditorToolkitHostMixin { public : ~)",
    "insertText": "FTypedElementViewportInteractionCustomization()"
  },
  {
    "label": "GetGizmoPivotLocation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetGizmoPivotLocation(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode, FVector& OutPivotLocation)"
  },
  {
    "label": "PreGizmoManipulationStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreGizmoManipulationStarted(TArrayView<const FTypedElementHandle> InElementHandles, const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GizmoManipulationStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GizmoManipulationStarted(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GizmoManipulationDeltaUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GizmoManipulationDeltaUpdate(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode, const EAxisList::Type InDragAxis, const FInputDeviceState& InInputState, const FTransform& InDeltaTransform, const FVector& InPivotLocation)"
  },
  {
    "label": "GizmoManipulationStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GizmoManipulationStopped(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const UE::Widget::EWidgetMode InWidgetMode, const ETypedElementViewportInteractionGizmoManipulationType InManipulationType)"
  },
  {
    "label": "PostGizmoManipulationStopped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostGizmoManipulationStopped(TArrayView<const FTypedElementHandle> InElementHandles, const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "MirrorElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorElement(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, const FVector& InMirrorScale, const FVector& InPivotLocation)"
  },
  {
    "label": "GetFocusBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFocusBounds(const TTypedElement<ITypedElementWorldInterface>& InElementWorldHandle, FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "FTypedElementViewportInteractionElement()",
    "kind": "Method",
    "detail": "Function (} ; struct FTypedElementViewportInteractionElement { public :)",
    "insertText": "FTypedElementViewportInteractionElement()"
  },
  {
    "label": "FTypedElementViewportInteractionElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementViewportInteractionElement(TTypedElement<ITypedElementWorldInterface> InElementWorldHandle, FTypedElementViewportInteractionCustomization* InViewportInteractionCustomization) : ElementWorldHandle(MoveTemp(InElementWorldHandle)) , ViewportInteractionCustomization(InViewportInteractionCustomization)"
  },
  {
    "label": "FTypedElementViewportInteractionElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTypedElementViewportInteractionElement(const FTypedElementViewportInteractionElement&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementViewportInteractionElement&)",
    "insertText": "operator(const FTypedElementViewportInteractionElement&)"
  },
  {
    "label": "FTypedElementViewportInteractionElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementViewportInteractionElement(FTypedElementViewportInteractionElement&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementViewportInteractionElement&)",
    "insertText": "operator(FTypedElementViewportInteractionElement&&)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "GetGizmoPivotLocation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetGizmoPivotLocation(const UE::Widget::EWidgetMode InWidgetMode, FVector& OutPivotLocation)"
  },
  {
    "label": "GizmoManipulationStarted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GizmoManipulationStarted(const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GizmoManipulationStarted()",
    "kind": "Method",
    "detail": "Function (ViewportInteractionCustomization ->)",
    "insertText": "GizmoManipulationStarted(ElementWorldHandle, InWidgetMode)"
  },
  {
    "label": "GizmoManipulationDeltaUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GizmoManipulationDeltaUpdate(const UE::Widget::EWidgetMode InWidgetMode, const EAxisList::Type InDragAxis, const FInputDeviceState& InInputState, const FTransform& InDeltaTransform, const FVector& InPivotLocation)"
  },
  {
    "label": "GizmoManipulationDeltaUpdate()",
    "kind": "Method",
    "detail": "Function (ViewportInteractionCustomization ->)",
    "insertText": "GizmoManipulationDeltaUpdate(ElementWorldHandle, InWidgetMode, InDragAxis, InInputState, InDeltaTransform, InPivotLocation)"
  },
  {
    "label": "GizmoManipulationStopped()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GizmoManipulationStopped(const UE::Widget::EWidgetMode InWidgetMode, const ETypedElementViewportInteractionGizmoManipulationType InManipulationType)"
  },
  {
    "label": "GizmoManipulationStopped()",
    "kind": "Method",
    "detail": "Function (ViewportInteractionCustomization ->)",
    "insertText": "GizmoManipulationStopped(ElementWorldHandle, InWidgetMode, InManipulationType)"
  },
  {
    "label": "MirrorElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MirrorElement(const FVector& InMirrorScale, const FVector& InPivotLocation)"
  },
  {
    "label": "MirrorElement()",
    "kind": "Method",
    "detail": "Function (ViewportInteractionCustomization ->)",
    "insertText": "MirrorElement(ElementWorldHandle, InMirrorScale, InPivotLocation)"
  },
  {
    "label": "GetFocusBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetFocusBounds(FBoxSphereBounds& OutBounds)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} private : TTypedElement<ITypedElementWorldInterface> ElementWorldHandle ; FTypedElementViewportInteractionCustomization* ViewportInteractionCustomization = nullptr ; } ;)",
    "insertText": "UCLASS(Transient)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: void BeginGizmoManipulation(FTypedElementListConstRef InElementsToMove, const UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "UpdateGizmoManipulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGizmoManipulation(FTypedElementListConstRef InElementsToMove, const UE::Widget::EWidgetMode InWidgetMode, const EAxisList::Type InDragAxis, const FInputDeviceState& InInputState, const FTransform& InDeltaTransform)"
  },
  {
    "label": "EndGizmoManipulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndGizmoManipulation(FTypedElementListConstRef InElementsToMove, const UE::Widget::EWidgetMode InWidgetMode, const ETypedElementViewportInteractionGizmoManipulationType InManipulationType)"
  },
  {
    "label": "ApplyDeltaToElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDeltaToElement(const FTypedElementHandle& InElementHandle, const UE::Widget::EWidgetMode InWidgetMode, const EAxisList::Type InDragAxis, const FInputDeviceState& InInputState, const FTransform& InDeltaTransform)"
  },
  {
    "label": "MirrorElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MirrorElement(const FTypedElementHandle& InElementHandle, const FVector& InMirrorScale)"
  },
  {
    "label": "GetFocusBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFocusBounds(FTypedElementListConstRef InElements, FBoxSphereBounds& OutBox)"
  },
  {
    "label": "ResolveViewportInteractionElement()",
    "kind": "Method",
    "detail": "Function (private : FTypedElementViewportInteractionElement)",
    "insertText": "ResolveViewportInteractionElement(const FTypedElementHandle& InElementHandle)"
  }
]