[
  {
    "label": "set_slot_policy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "set_slot_policy"
  },
  {
    "label": "set_params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "set_params"
  },
  {
    "label": "btree_set",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_set"
  },
  {
    "label": "btree_multiset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "btree_multiset"
  },
  {
    "label": "btree_set()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_BTREE_SET_H_ # define ABSL_CONTAINER_BTREE_SET_H_ # include \" absl / container / internal / btree . h \" # include \" absl / container / internal / btree_container . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { template<Key> struct set_slot_policy ; template<Key,Compare,Alloc,int TargetNodeSize,bool IsMulti> struct set_params ; } template<Key,Compare = std::less<Key>,Alloc = std::allocator<Key>> class btree_set : public container_internal::btree_set_container<container_internal::btree<container_internal::set_params<Key,Compare,Alloc,2 5 6,false>>> { using Base = btree_set::btree_set_container ; public :)",
    "insertText": "btree_set()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} using Base::Base ; using Base::begin ; using Base::cbegin ; using Base::end ; using Base::cend ; using Base::empty ; using Base::max_size ; using Base::size ; using Base::clear ; using Base::erase ; using Base::insert ; using Base::emplace ; using Base::emplace_hint ; using Base::extract ; using Base::merge ; using Base::swap ; using Base::contains ; using Base::count ; using Base::equal_range ; using Base::find ; using Base::lower_bound ; using Base::upper_bound ; using Base::get_allocator ; using Base::key_comp ; using Base::value_comp ; } ; template<K,C,A> void)",
    "insertText": "swap(btree_set<K, C, A> &x, btree_set<K, C, A> &y)"
  },
  {
    "label": "erase_if()",
    "kind": "Method",
    "detail": "Function (} template<K,C,A,Pred> btree_set<K,C,A>::size_type)",
    "insertText": "erase_if(btree_set<K, C, A> &set, Pred pred)"
  },
  {
    "label": "btree_multiset()",
    "kind": "Method",
    "detail": "Function (} template<Key,Compare = std::less<Key>,Alloc = std::allocator<Key>> class btree_multiset : public container_internal::btree_multiset_container<container_internal::btree<container_internal::set_params<Key,Compare,Alloc,2 5 6,true>>> { using Base = btree_multiset::btree_multiset_container ; public :)",
    "insertText": "btree_multiset()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} using Base::Base ; using Base::begin ; using Base::cbegin ; using Base::end ; using Base::cend ; using Base::empty ; using Base::max_size ; using Base::size ; using Base::clear ; using Base::erase ; using Base::insert ; using Base::emplace ; using Base::emplace_hint ; using Base::extract ; using Base::merge ; using Base::swap ; using Base::contains ; using Base::count ; using Base::equal_range ; using Base::find ; using Base::lower_bound ; using Base::upper_bound ; using Base::get_allocator ; using Base::key_comp ; using Base::value_comp ; } ; template<K,C,A> void)",
    "insertText": "swap(btree_multiset<K, C, A> &x, btree_multiset<K, C, A> &y)"
  },
  {
    "label": "erase_if()",
    "kind": "Method",
    "detail": "Function (} template<K,C,A,Pred> btree_multiset<K,C,A>::size_type)",
    "insertText": "erase_if(btree_multiset<K, C, A> & set, Pred pred)"
  },
  {
    "label": "element()",
    "kind": "Method",
    "detail": "Function (} namespace container_internal { template<Key> struct set_slot_policy { using slot_type = Key ; using value_type = Key ; using mutable_value_type = Key ; value_type&)",
    "insertText": "element(slot_type *slot)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Alloc)",
    "insertText": "construct(*alloc, slot, std::forward<Args>(args)...)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "construct(Alloc *alloc, slot_type *slot, slot_type *other)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Alloc)",
    "insertText": "construct(*alloc, slot, std::move(*other))"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "construct(Alloc *alloc, slot_type *slot, const slot_type *other)"
  },
  {
    "label": "construct()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Alloc)",
    "insertText": "construct(*alloc, slot, *other)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "destroy(Alloc *alloc, slot_type *slot)"
  },
  {
    "label": "destroy()",
    "kind": "Method",
    "detail": "Function (absl::allocator_traits<Alloc)",
    "insertText": "destroy(*alloc, slot)"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} } ; template<Key,Compare,Alloc,int TargetNodeSize,bool IsMulti> struct set_params : common_params<Key,Compare,Alloc,TargetNodeSize,IsMulti,false,set_slot_policy<Key>> { using value_type = Key ; using slot_type = set_params::common_params::slot_type ; template<V> const V&)",
    "insertText": "key(const V &value)"
  }
]