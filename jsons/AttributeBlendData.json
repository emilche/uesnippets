[
  {
    "label": "FAttributeBlendData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeBlendData"
  },
  {
    "label": "Attributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Attributes"
  },
  {
    "label": "FAttributeSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAttributeSet"
  },
  {
    "label": "FUniqueAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueAttribute"
  },
  {
    "label": "TAttributeSetIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAttributeSetIterator"
  },
  {
    "label": "TAttributeSetRawIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TAttributeSetRawIterator"
  },
  {
    "label": "TSingleIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSingleIterator"
  },
  {
    "label": "TSingleRawIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSingleRawIterator"
  },
  {
    "label": "PerContainerWeighted()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Animation / AttributesRuntime . h \" namespace UE { namespace Anim { struct FAttributeBlendData { struct Attributes ; protected : FAttributeBlendData)",
    "insertText": "PerContainerWeighted(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const float> SourceWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "PerContainerPtrWeighted()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "PerContainerPtrWeighted(const TArrayView<const FStackAttributeContainer* const> SourceAttributes, const TArrayView<const float> SourceWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "PerContainerRemappedWeighted()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "PerContainerRemappedWeighted(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const float> SourceWeights, const TArrayView<const int32> SourceWeightsIndices, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "SingleContainerUniformWeighted()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "SingleContainerUniformWeighted(const TArrayView<const FStackAttributeContainer* const> SourceAttributes, const float InUniformWeight, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "SingleAdditiveContainerUniformWeighted()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "SingleAdditiveContainerUniformWeighted(const TArrayView<const FStackAttributeContainer* const> SourceAttributes, const float InUniformWeight, EAdditiveAnimationType AdditiveType, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "PerBoneWeighted()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "PerBoneWeighted(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const FPerBoneBlendWeight> InPerBoneBlendWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "PerBoneBlendSamples()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "PerBoneBlendSamples(const TArrayView<const FStackAttributeContainer> SourceAttributes, TArrayView<const int32> InPerBoneInterpolationIndices, const TArrayView<const FBlendSampleData> InBlendSampleDataCache, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "PerBoneRemappedBlendSamples()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "PerBoneRemappedBlendSamples(const TArrayView<const FStackAttributeContainer> SourceAttributes, TArrayView<const int32> InPerBoneInterpolationIndices, const TArrayView<const FBlendSampleData> InBlendSampleDataCache, TArrayView<const int32> InBlendSampleDataCacheIndices, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "PerBoneFilteredWeighted()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "PerBoneFilteredWeighted(const FStackAttributeContainer& BaseAttributes, const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const FPerBoneBlendWeight> InPerBoneBlendWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "PerBoneSingleContainerWeighted()",
    "kind": "Method",
    "detail": "Function (} FAttributeBlendData)",
    "insertText": "PerBoneSingleContainerWeighted(const FStackAttributeContainer& SourceAttributes1, const FStackAttributeContainer& SourceAttributes2, const TArrayView<const float> WeightsOfSource2, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const float> SourceWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer* const> SourceAttributes, const TArrayView<const float> SourceWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const float> SourceWeights, const TArrayView<const int32> SourceWeightsIndices, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer* const> SourceAttributes, const float InUniformWeight, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer* const> SourceAttributes, const float InUniformWeight, EAdditiveAnimationType InAdditiveType, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const FPerBoneBlendWeight> InPerBoneBlendWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer> SourceAttributes, TArrayView<const int32> InPerBoneInterpolationIndices, const TArrayView<const FBlendSampleData> InBlendSampleDataCache, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const TArrayView<const FStackAttributeContainer> SourceAttributes, TArrayView<const int32> InPerBoneInterpolationIndices, const TArrayView<const FBlendSampleData> InBlendSampleDataCache, TArrayView<const int32> InBlendSampleDataCacheIndices, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const FStackAttributeContainer& BaseAttributes, const TArrayView<const FStackAttributeContainer> SourceAttributes, const TArrayView<const FPerBoneBlendWeight> InPerBoneBlendWeights, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData(const FStackAttributeContainer& SourceAttributes1, const FStackAttributeContainer& SourceAttributes2, const TArrayView<const float> WeightsOfSource2, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "FAttributeBlendData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAttributeBlendData()"
  },
  {
    "label": "ProcessAttributes()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ProcessAttributes(const FStackAttributeContainer& AttributeContainers, int32 SourceAttributesIndex, const UScriptStruct* AttributeScriptStruct)"
  },
  {
    "label": "GetContainerWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetContainerWeight(int32 ContainerIndex)"
  },
  {
    "label": "GetBoneWeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBoneWeight(int32 AttributeIndex, int32 BoneIndex)"
  },
  {
    "label": "HasBoneWeights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoneWeights()"
  },
  {
    "label": "HasContainerWeights()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasContainerWeights()"
  },
  {
    "label": "GetBoneWeights()",
    "kind": "Method",
    "detail": "Function (private : struct FAttributeSet { TArray<const uint8*> DataPtrs ; TArray<int32> WeightIndices ; const FAttributeId* Identifier ; float HighestWeight ; int32 HighestWeightedIndex ; } ; struct FUniqueAttribute { const FAttributeId* Identifier ; int32 WeightIndex ; const uint8* DataPtr ; } ; TArray<FAttributeSet> AttributeSets ; TArray<FUniqueAttribute> UniqueAttributes ; float UniformWeight ; TArrayView<const float> Weights ; TArrayView<const int32> WeightIndices ; EAdditiveAnimationType AdditiveType ; TArrayView<const FPerBoneBlendWeight> PerBoneWeights ; TArray<int32> HighestBoneWeightedIndices ; const TArrayView<const float>&)",
    "insertText": "GetBoneWeights()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} public : const AttributeType&)",
    "insertText": "GetValue()"
  },
  {
    "label": "GetWeight()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "GetWeight()"
  },
  {
    "label": "GetBoneWeight()",
    "kind": "Method",
    "detail": "Function (} const float)",
    "insertText": "GetBoneWeight()"
  },
  {
    "label": "GetHighestWeightedValue()",
    "kind": "Method",
    "detail": "Function (} const AttributeType&)",
    "insertText": "GetHighestWeightedValue()"
  },
  {
    "label": "GetHighestBoneWeightedValue()",
    "kind": "Method",
    "detail": "Function (} const AttributeType&)",
    "insertText": "GetHighestBoneWeightedValue()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 HighestIndex = INDEX_NONE ; float Weight = - 1 . f ;)",
    "insertText": "for(const int32 Index : Collection.WeightIndices)"
  },
  {
    "label": "GetBoneWeight()",
    "kind": "Method",
    "detail": "Function (const float BoneWeight = Data .)",
    "insertText": "GetBoneWeight(Index, Collection.Identifier->GetIndex())"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (Weight = BoneWeight ; HighestIndex = Index ; } })",
    "insertText": "ensure(HighestIndex != INDEX_NONE)"
  },
  {
    "label": "GetHighestBoneWeighted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetHighestBoneWeighted(const AttributeType*& OutAttributePtr, float& OutWeight)"
  },
  {
    "label": "OutAttributePtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutAttributePtr(const AttributeType*)Collection.DataPtrs[Collection.WeightIndices.IndexOfByKey(HighestIndex)"
  },
  {
    "label": "GetIdentifier()",
    "kind": "Method",
    "detail": "Function (OutWeight = Weight ; } const FAttributeId&)",
    "insertText": "GetIdentifier()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (+ + CurrentIndex ; return CurrentIndex<Collection . DataPtrs .)",
    "insertText": "Num()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetValuePtr()",
    "kind": "Method",
    "detail": "Function (} public : const uint8*)",
    "insertText": "GetValuePtr()"
  },
  {
    "label": "GetHighestBoneWeighted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetHighestBoneWeighted(const uint8* OutAttributePtr, float& OutWeight)"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (OutAttributePtr = Collection . DataPtrs [ Collection . WeightIndices .)",
    "insertText": "IndexOfByKey(HighestIndex)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "Next()"
  },
  {
    "label": "IsHighestBoneWeighted()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsHighestBoneWeighted()"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (TAttributeSetIterator<AttributeType>)",
    "insertText": "It(*this, Collection)"
  },
  {
    "label": "ForEachUniqueAttribute()",
    "kind": "Method",
    "detail": "Function (} } template<AttributeType> void)",
    "insertText": "ForEachUniqueAttribute(TFunctionRef<void(TSingleIterator<AttributeType>&)> ForEachFunction)"
  },
  {
    "label": "It()",
    "kind": "Method",
    "detail": "Function (TSingleIterator<AttributeType>)",
    "insertText": "It(*this, UniqueAttributes)"
  },
  {
    "label": "ForEachAttributeSet()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachAttributeSet(TFunctionRef<void(TAttributeSetRawIterator&)> ForEachFunction)"
  },
  {
    "label": "ForEachUniqueAttribute()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ForEachUniqueAttribute(TFunctionRef<void(TSingleRawIterator&)> ForEachFunction)"
  }
]