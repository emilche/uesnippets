[
  {
    "label": "GridType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridType"
  },
  {
    "label": "DiracDelta",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiracDelta"
  },
  {
    "label": "LevelSetMeasure",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevelSetMeasure"
  },
  {
    "label": "MeasureArea",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MeasureArea"
  },
  {
    "label": "MeasureCurvatures",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MeasureCurvatures"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "GridT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GridT"
  },
  {
    "label": "levelSetArea()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_LEVELSETMEASURE_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_LEVELSETMEASURE_HAS_BEEN_INCLUDED # include<openvdb / math / Math . h> # include<openvdb / Types . h> # include<openvdb / Grid . h> # include<openvdb / tree / LeafManager . h> # include<openvdb / tree / ValueAccessor . h> # include<openvdb / math / FiniteDifference . h> # include<openvdb / math / Operators . h> # include<openvdb / math / Stencils . h> # include<openvdb / util / NullInterrupter . h> # include<tbb / parallel_for . h> # include<tbb / parallel_sort . h> # include<tbb / parallel_invoke . h> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<class GridType> Real)",
    "insertText": "levelSetArea(const GridType& grid, bool useWorldSpace = true)"
  },
  {
    "label": "levelSetVolume()",
    "kind": "Method",
    "detail": "Function (template<class GridType> Real)",
    "insertText": "levelSetVolume(const GridType& grid, bool useWorldSpace = true)"
  },
  {
    "label": "levelSetEulerCharacteristic()",
    "kind": "Method",
    "detail": "Function (template<class GridType> int)",
    "insertText": "levelSetEulerCharacteristic(const GridType& grid)"
  },
  {
    "label": "levelSetGenus()",
    "kind": "Method",
    "detail": "Function (template<class GridType> int)",
    "insertText": "levelSetGenus(const GridType& grid)"
  },
  {
    "label": "DiracDelta()",
    "kind": "Method",
    "detail": "Function (template<RealT> class DiracDelta { public :)",
    "insertText": "DiracDelta(RealT eps) : mC(0.5/eps), mD(2*math::pi<RealT>()*mC), mE(eps)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RealT)",
    "insertText": "operator()(RealT phi)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : const RealT mC,mD,mE ; } ; template<GridT,InterruptT = util::NullInterrupter> class LevelSetMeasure { public : using GridType = GridT ; using TreeType = GridType::TreeType ; using ValueType = TreeType::ValueType ; using ManagerType = tree::LeafManager<const TreeType> ;)",
    "insertText": "static_assert(std::is_floating_point<ValueType>::value, \"level set measure is supported only for scalar, floating-point grids\")"
  },
  {
    "label": "LevelSetMeasure()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LevelSetMeasure(const GridType& grid, InterruptT* interrupt = nullptr)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(const GridType& grid)"
  },
  {
    "label": "LevelSetMeasure()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LevelSetMeasure()"
  },
  {
    "label": "getGrainSize()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "getGrainSize()"
  },
  {
    "label": "area()",
    "kind": "Method",
    "detail": "Function (mGrainSize = grainsize ; } Real)",
    "insertText": "area(bool useWorldUnits = true)"
  },
  {
    "label": "volume()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "volume(bool useWorldUnits = true)"
  },
  {
    "label": "totMeanCurvature()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "totMeanCurvature(bool useWorldUnits = true)"
  },
  {
    "label": "totGaussianCurvature()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "totGaussianCurvature(bool useWorldUnits = true)"
  },
  {
    "label": "avgMeanCurvature()",
    "kind": "Method",
    "detail": "Function (Real)",
    "insertText": "avgMeanCurvature(bool useWorldUnits = true)"
  },
  {
    "label": "avgGaussianCurvature()",
    "kind": "Method",
    "detail": "Function (} Real)",
    "insertText": "avgGaussianCurvature(bool useWorldUnits = true)"
  },
  {
    "label": "eulerCharacteristic()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "eulerCharacteristic()"
  },
  {
    "label": "genus()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "genus()"
  },
  {
    "label": "LevelSetMeasure()",
    "kind": "Method",
    "detail": "Function (} private : using LeafT = TreeType::LeafNodeType ; using VoxelCIterT = LeafT::ValueOnCIter ; using LeafRange = ManagerType::LeafRange ; using LeafIterT = LeafRange::Iterator ; using ManagerPtr = std::unique_ptr<ManagerType> ; using BufferPtr = std::unique_ptr<double [ ]> ;)",
    "insertText": "LevelSetMeasure(const LevelSetMeasure&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (LevelSetMeasure&)",
    "insertText": "operator(const LevelSetMeasure&)"
  },
  {
    "label": "checkInterrupter()",
    "kind": "Method",
    "detail": "Function (const GridType* mGrid ; ManagerPtr mLeafs ; BufferPtr mBuffer ; InterruptT* mInterrupter ; double mDx,mArea,mVolume,mTotMeanCurvature,mTotGausCurvature ; int mGrainSize ; bool mUpdateArea,mUpdateCurvature ; bool)",
    "insertText": "checkInterrupter()"
  },
  {
    "label": "MeasureArea()",
    "kind": "Method",
    "detail": "Function (struct MeasureArea {)",
    "insertText": "MeasureArea(LevelSetMeasure* parent) : mParent(parent), mStencil(*mParent->mGrid)"
  },
  {
    "label": "parallel_for()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_for(parent->mLeafs->leafRange(parent->mGrainSize), *this)"
  },
  {
    "label": "else()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "else(*this)(parent->mLeafs->leafRange())"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "parallel_invoke([&](){parent->mArea = parent->reduce(0);}, [&](){parent->mVolume = parent->reduce(1)/3.0;})"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (parent -> mUpdateArea = false ;)",
    "insertText": "if(parent->mInterrupter) parent->mInterrupter->end()"
  },
  {
    "label": "MeasureArea()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MeasureArea(const MeasureArea& other) : mParent(other.mParent), mStencil(*mParent->mGrid)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()(const LeafRange& range)"
  },
  {
    "label": "MeasureCurvatures()",
    "kind": "Method",
    "detail": "Function (LevelSetMeasure* mParent ; math::GradStencil<GridT,false> mStencil ; } ; struct MeasureCurvatures {)",
    "insertText": "MeasureCurvatures(LevelSetMeasure* parent) : mParent(parent), mStencil(*mParent->mGrid)"
  },
  {
    "label": "parallel_invoke()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "parallel_invoke([&](){parent->mTotMeanCurvature = parent->reduce(0);}, [&](){parent->mTotGausCurvature = parent->reduce(1);})"
  },
  {
    "label": "MeasureCurvatures()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MeasureCurvatures(const MeasureCurvatures& other) : mParent(other.mParent), mStencil(*mParent->mGrid)"
  },
  {
    "label": "reduce()",
    "kind": "Method",
    "detail": "Function (LevelSetMeasure* mParent ; math::CurvatureStencil<GridT,false> mStencil ; } ; double)",
    "insertText": "reduce(int offset)"
  },
  {
    "label": "parallel_sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "parallel_sort(first, last)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Real sum = 0 . 0 ;)",
    "insertText": "while(first != last)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "init(grid)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"The transform must have uniform scale for the LevelSetMeasure to function\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(grid.getGridClass() != GRID_LEVEL_SET)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"LevelSetMeasure only supports level sets;\" \" try setting the grid class to \\\"level set\\\"\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(grid.empty())"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(RuntimeError, \"LevelSetMeasure does not support empty grids;\")"
  },
  {
    "label": "voxelSize()",
    "kind": "Method",
    "detail": "Function (} mGrid =& grid ; mDx = grid .)",
    "insertText": "voxelSize()"
  },
  {
    "label": "ManagerType()",
    "kind": "Method",
    "detail": "Function (mLeafs = std::make_unique<)",
    "insertText": "ManagerType(mGrid->tree())"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (mBuffer = std::make_unique<)",
    "insertText": "double(2*mLeafs->leafCount())"
  },
  {
    "label": "area()",
    "kind": "Method",
    "detail": "Function (mUpdateArea = mUpdateCurvature = true ; } template<GridT,InterruptT> Real LevelSetMeasure<GridT,InterruptT)",
    "insertText": "area(bool useWorldUnits)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (MeasureArea)",
    "insertText": "m(this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; double area = mArea ;)",
    "insertText": "if(useWorldUnits) area *= math::Pow2(mDx)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ; double volume = mVolume ;)",
    "insertText": "if(useWorldUnits) volume *= math::Pow3(mDx)"
  },
  {
    "label": "mTotMeanCurvature()",
    "kind": "Method",
    "detail": "Function (} ; return)",
    "insertText": "mTotMeanCurvature(useWorldUnits ? mDx : 1)"
  },
  {
    "label": "totGaussianCurvature()",
    "kind": "Method",
    "detail": "Function (} template<GridT,InterruptT> Real LevelSetMeasure<GridT,InterruptT)",
    "insertText": "totGaussianCurvature(bool)"
  },
  {
    "label": "totGaussianCurvature()",
    "kind": "Method",
    "detail": "Function (const Real x = this ->)",
    "insertText": "totGaussianCurvature(true) / (2.0*math::pi<Real>())"
  },
  {
    "label": "self()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "self().cancel_group_execution()"
  },
  {
    "label": "DD()",
    "kind": "Method",
    "detail": "Function (const Real invDx = 1 . 0 / mParent -> mDx ; const DiracDelta<Real>)",
    "insertText": "DD(1.5)"
  },
  {
    "label": "leafCount()",
    "kind": "Method",
    "detail": "Function (const size_t leafCount = mParent -> mLeafs ->)",
    "insertText": "leafCount()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Real sumA = 0,sumV = 0 ;)",
    "insertText": "for(VoxelCIterT voxelIter = leafIter->cbeginValueOn(); voxelIter; ++voxelIter)"
  },
  {
    "label": "DD()",
    "kind": "Method",
    "detail": "Function (const Real dd =)",
    "insertText": "DD(invDx * (*voxelIter))"
  },
  {
    "label": "moveTo()",
    "kind": "Method",
    "detail": "Function (mStencil .)",
    "insertText": "moveTo(voxelIter)"
  },
  {
    "label": "getCenterCoord()",
    "kind": "Method",
    "detail": "Function (const Coord& p = mStencil .)",
    "insertText": "getCenterCoord()"
  },
  {
    "label": "gradient()",
    "kind": "Method",
    "detail": "Function (const Vec3T g = mStencil .)",
    "insertText": "gradient()"
  },
  {
    "label": "length()",
    "kind": "Method",
    "detail": "Function (sumA + = dd* g .)",
    "insertText": "length()"
  },
  {
    "label": "dd()",
    "kind": "Method",
    "detail": "Function (sumV + =)",
    "insertText": "dd(g[0]*Real(p[0]) + g[1]*Real(p[1]) + g[2]*Real(p[2]))"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (} } double* ptr = mParent -> mBuffer .)",
    "insertText": "get() + leafIter.pos()"
  },
  {
    "label": "curvatures()",
    "kind": "Method",
    "detail": "Function (mStencil .)",
    "insertText": "curvatures(mean, gauss)"
  },
  {
    "label": "doLevelSetArea()",
    "kind": "Method",
    "detail": "Function (* ptr = sumM ; ptr + = leafCount ;* ptr = sumG ; } } template<class GridT> std::enable_if<std::is_floating_point<GridT::ValueType>::value,Real>::type)",
    "insertText": "doLevelSetArea(const GridT& grid, bool useWorldUnits)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (LevelSetMeasure<GridT>)",
    "insertText": "m(grid)"
  },
  {
    "label": "doLevelSetArea()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<! std::is_floating_point<GridT::ValueType>::value,Real>::type)",
    "insertText": "doLevelSetArea(const GridT&, bool)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, \"level set area is supported only for scalar, floating-point grids\")"
  },
  {
    "label": "levelSetArea()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> Real)",
    "insertText": "levelSetArea(const GridT& grid, bool useWorldUnits)"
  },
  {
    "label": "doLevelSetVolume()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<std::is_floating_point<GridT::ValueType>::value,Real>::type)",
    "insertText": "doLevelSetVolume(const GridT& grid, bool useWorldUnits)"
  },
  {
    "label": "doLevelSetVolume()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<! std::is_floating_point<GridT::ValueType>::value,Real>::type)",
    "insertText": "doLevelSetVolume(const GridT&, bool)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, \"level set volume is supported only for scalar, floating-point grids\")"
  },
  {
    "label": "levelSetVolume()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> Real)",
    "insertText": "levelSetVolume(const GridT& grid, bool useWorldUnits)"
  },
  {
    "label": "doLevelSetEulerCharacteristic()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<std::is_floating_point<GridT::ValueType>::value,int>::type)",
    "insertText": "doLevelSetEulerCharacteristic(const GridT& grid)"
  },
  {
    "label": "doLevelSetEulerCharacteristic()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<! std::is_floating_point<GridT::ValueType>::value,int>::type)",
    "insertText": "doLevelSetEulerCharacteristic(const GridT&)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, \"level set euler characteristic is supported only for scalar, floating-point grids\")"
  },
  {
    "label": "levelSetEulerCharacteristic()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> int)",
    "insertText": "levelSetEulerCharacteristic(const GridT& grid)"
  },
  {
    "label": "doLevelSetEuler()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<std::is_floating_point<GridT::ValueType>::value,int>::type)",
    "insertText": "doLevelSetEuler(const GridT& grid)"
  },
  {
    "label": "doLevelSetGenus()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<std::is_floating_point<GridT::ValueType>::value,int>::type)",
    "insertText": "doLevelSetGenus(const GridT& grid)"
  },
  {
    "label": "doLevelSetGenus()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> std::enable_if<! std::is_floating_point<GridT::ValueType>::value,int>::type)",
    "insertText": "doLevelSetGenus(const GridT&)"
  },
  {
    "label": "OPENVDB_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OPENVDB_THROW(TypeError, \"level set genus is supported only for scalar, floating-point grids\")"
  },
  {
    "label": "levelSetGenus()",
    "kind": "Method",
    "detail": "Function (} template<class GridT> int)",
    "insertText": "levelSetGenus(const GridT& grid)"
  }
]