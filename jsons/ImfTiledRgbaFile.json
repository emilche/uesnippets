[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "IMF_HIDDEN",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_HIDDEN"
  },
  {
    "label": "FromYa",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FromYa"
  },
  {
    "label": "TiledRgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_TILED_RGBA_FILE_H # define INCLUDED_IMF_TILED_RGBA_FILE_H # include \" ImfForward . h \" # include \" ImfCompression . h \" # include \" ImfLineOrder . h \" # include \" ImfRgba . h \" # include \" ImfThreading . h \" # include \" ImfTileDescription . h \" # include<ImathBox . h> # include<ImathVec . h> # include<half . h> # include<string> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class IMF_EXPORT_TYPE TiledRgbaOutputFile { public : IMF_EXPORT)",
    "insertText": "TiledRgbaOutputFile(const char name[], const Header& header, RgbaChannels rgbaChannels, int tileXSize, int tileYSize, LevelMode mode, LevelRoundingMode rmode = ROUND_DOWN, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "TiledRgbaOutputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::OStream& os, const Header& header, RgbaChannels rgbaChannels, int tileXSize, int tileYSize, LevelMode mode, LevelRoundingMode rmode = ROUND_DOWN, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "TiledRgbaOutputFile(const char name[], int tileXSize, int tileYSize, LevelMode mode, LevelRoundingMode rmode, const IMATH_NAMESPACE::Box2i& displayWindow, const IMATH_NAMESPACE::Box2i& dataWindow = IMATH_NAMESPACE::Box2i (), RgbaChannels rgbaChannels = WRITE_RGBA, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression compression = ZIP_COMPRESSION, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "TiledRgbaOutputFile(const char name[], int width, int height, int tileXSize, int tileYSize, LevelMode mode, LevelRoundingMode rmode = ROUND_DOWN, RgbaChannels rgbaChannels = WRITE_RGBA, float pixelAspectRatio = 1, const IMATH_NAMESPACE::V2f screenWindowCenter = IMATH_NAMESPACE::V2f (0, 0), float screenWindowWidth = 1, LineOrder lineOrder = INCREASING_Y, Compression compression = ZIP_COMPRESSION, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "TiledRgbaOutputFile()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(const Rgba* base, size_t xStride, size_t yStride)"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Header&)",
    "insertText": "header()"
  },
  {
    "label": "frameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const FrameBuffer&)",
    "insertText": "frameBuffer()"
  },
  {
    "label": "displayWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::Box2i&)",
    "insertText": "displayWindow()"
  },
  {
    "label": "dataWindow()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::Box2i&)",
    "insertText": "dataWindow()"
  },
  {
    "label": "pixelAspectRatio()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float)",
    "insertText": "pixelAspectRatio()"
  },
  {
    "label": "screenWindowCenter()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const IMATH_NAMESPACE::V2f)",
    "insertText": "screenWindowCenter()"
  },
  {
    "label": "screenWindowWidth()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT float)",
    "insertText": "screenWindowWidth()"
  },
  {
    "label": "lineOrder()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LineOrder)",
    "insertText": "lineOrder()"
  },
  {
    "label": "compression()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT Compression)",
    "insertText": "compression()"
  },
  {
    "label": "channels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT RgbaChannels)",
    "insertText": "channels()"
  },
  {
    "label": "tileXSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "tileXSize()"
  },
  {
    "label": "tileYSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "tileYSize()"
  },
  {
    "label": "levelMode()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LevelMode)",
    "insertText": "levelMode()"
  },
  {
    "label": "levelRoundingMode()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LevelRoundingMode)",
    "insertText": "levelRoundingMode()"
  },
  {
    "label": "numLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numLevels()"
  },
  {
    "label": "numXLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numXLevels()"
  },
  {
    "label": "numYLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numYLevels()"
  },
  {
    "label": "isValidLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isValidLevel(int lx, int ly)"
  },
  {
    "label": "levelWidth()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "levelWidth(int lx)"
  },
  {
    "label": "levelHeight()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "levelHeight(int ly)"
  },
  {
    "label": "numXTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numXTiles(int lx = 0)"
  },
  {
    "label": "numYTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numYTiles(int ly = 0)"
  },
  {
    "label": "dataWindowForLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForLevel(int l = 0)"
  },
  {
    "label": "dataWindowForLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForLevel(int lx, int ly)"
  },
  {
    "label": "dataWindowForTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForTile(int dx, int dy, int l = 0)"
  },
  {
    "label": "dataWindowForTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "writeTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTile(int dx, int dy, int l = 0)"
  },
  {
    "label": "writeTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "writeTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTiles(int dxMin, int dxMax, int dyMin, int dyMax, int lx, int ly)"
  },
  {
    "label": "writeTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTiles(int dxMin, int dxMax, int dyMin, int dyMax, int l = 0)"
  },
  {
    "label": "updatePreviewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "updatePreviewImage(const PreviewRgba[])"
  },
  {
    "label": "breakTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "breakTile(int dx, int dy, int lx, int ly, int offset, int length, char c)"
  },
  {
    "label": "TiledRgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "TiledRgbaOutputFile(const TiledRgbaOutputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TiledRgbaOutputFile&)",
    "insertText": "operator(const TiledRgbaOutputFile&)"
  },
  {
    "label": "TiledRgbaOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TiledRgbaOutputFile(TiledRgbaOutputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TiledRgbaOutputFile&)",
    "insertText": "operator(TiledRgbaOutputFile&&)"
  },
  {
    "label": "TiledRgbaInputFile()",
    "kind": "Method",
    "detail": "Function (class IMF_HIDDEN ToYa ; TiledOutputFile* _outputFile ; ToYa* _toYa ; } ; class IMF_EXPORT_TYPE TiledRgbaInputFile { public : IMF_EXPORT)",
    "insertText": "TiledRgbaInputFile(const char name[], int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "TiledRgbaInputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "TiledRgbaInputFile(const char name[], const std::string& layerName, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "TiledRgbaInputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::IStream& is, const std::string& layerName, int numThreads = globalThreadCount ())"
  },
  {
    "label": "TiledRgbaInputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "TiledRgbaInputFile()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(Rgba* base, size_t xStride, size_t yStride)"
  },
  {
    "label": "setLayerName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setLayerName(const std::string& layerName)"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "isComplete()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isComplete()"
  },
  {
    "label": "version()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "version()"
  },
  {
    "label": "readTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTile(int dx, int dy, int l = 0)"
  },
  {
    "label": "readTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "readTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTiles(int dxMin, int dxMax, int dyMin, int dyMax, int lx, int ly)"
  },
  {
    "label": "readTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "readTiles(int dxMin, int dxMax, int dyMin, int dyMax, int l = 0)"
  },
  {
    "label": "TiledRgbaInputFile()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "TiledRgbaInputFile(const TiledRgbaInputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TiledRgbaInputFile&)",
    "insertText": "operator(const TiledRgbaInputFile&)"
  },
  {
    "label": "TiledRgbaInputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TiledRgbaInputFile(TiledRgbaInputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TiledRgbaInputFile&)",
    "insertText": "operator(TiledRgbaInputFile&&)"
  }
]