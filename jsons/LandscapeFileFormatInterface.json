[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FLandscapeFileTypeInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeFileTypeInfo"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLandscapeFileResolution",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeFileResolution"
  },
  {
    "label": "FLandscapeFileInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeFileInfo"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FLandscapeImportData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeImportData"
  },
  {
    "label": "ILandscapeFileFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILandscapeFileFormat"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Containers / ArrayView . h \" # include \" Misc / Paths . h \" # include \" LandscapeFileFormatInterface . generated . h \" class Error ; struct FLandscapeFileTypeInfo { FText Description ; TArray<FString,TInlineAllocator<2>> Extensions ; bool bSupportsExport = false ; } ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (Success = 0,Warning,Error,} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FLandscapeFileResolution()"
  },
  {
    "label": "FLandscapeFileResolution()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeFileResolution(uint32 InWidth, uint32 InHeight) : Width(InWidth), Height(InHeight)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "operator(const FLandscapeFileResolution& Lhs, const FLandscapeFileResolution& Rhs)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} struct FLandscapeFileInfo { ELandscapeImportResult ResultCode = ELandscapeImportResult::Success ; FText ErrorMessage ; TArray<FLandscapeFileResolution> PossibleResolutions ; TOptional<FVector> DataScale ; } ; template<class T> struct FLandscapeImportData { ELandscapeImportResult ResultCode = ELandscapeImportResult::Success ; FText ErrorMessage ; TArray<T> Data ; } ; using FLandscapeHeightmapImportData = FLandscapeImportData<uint16> ; using FLandscapeWeightmapImportData = FLandscapeImportData<uint8> ; using FLandscapeHeightmapInfo = FLandscapeFileInfo ; using FLandscapeWeightmapInfo = FLandscapeFileInfo ; template<class T> class ILandscapeFileFormat { public : const FLandscapeFileTypeInfo&)",
    "insertText": "GetInfo()"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (FLandscapeFileInfo)",
    "insertText": "Validate(const TCHAR* Filename, FName LayerName)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (FLandscapeFileInfo)",
    "insertText": "Validate(const TCHAR* Filename)"
  },
  {
    "label": "Import()",
    "kind": "Method",
    "detail": "Function (} FLandscapeImportData<T>)",
    "insertText": "Import(const TCHAR* Filename, FName LayerName, FLandscapeFileResolution ExpectedResolution)"
  },
  {
    "label": "Import()",
    "kind": "Method",
    "detail": "Function (FLandscapeImportData<T>)",
    "insertText": "Import(const TCHAR* Filename, FLandscapeFileResolution ExpectedResolution)"
  },
  {
    "label": "Export()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Export(const TCHAR* Filename, FName LayerName, TArrayView<const T> Data, FLandscapeFileResolution DataResolution, FVector Scale)"
  },
  {
    "label": "Export()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Export(const TCHAR* Filename, TArrayView<const T> Data, FLandscapeFileResolution DataResolution, FVector Scale)"
  },
  {
    "label": "Export()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Export(Filename, NAME_None, Data, DataResolution, Scale)"
  },
  {
    "label": "ILandscapeFileFormat()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ILandscapeFileFormat()"
  }
]