[
  {
    "label": "TDiGraphTopologicalIterator_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDiGraphTopologicalIterator_Base"
  },
  {
    "label": "TDirectedGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDirectedGraph"
  },
  {
    "label": "SNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SNode"
  },
  {
    "label": "TDiGraphTopologicalIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDiGraphTopologicalIterator"
  },
  {
    "label": "TDiGraphConstTopologicalIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDiGraphConstTopologicalIterator"
  },
  {
    "label": "SStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SStackEntry"
  },
  {
    "label": "TDiGraphVisitor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDiGraphVisitor"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / Array . h \" namespace uLang { template<InElementType> struct TDiGraphTopologicalIterator_Base ; template<InElementType> class TDirectedGraph { public : using NodeId = int32_t ; NodeId InvalidNodeId = uLang::IndexNone ; NodeId)",
    "insertText": "AddNode(const InElementType& Item)"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (} NodeId)",
    "insertText": "AddNode(InElementType&& Item)"
  },
  {
    "label": "AddDirectedEdge()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddDirectedEdge(const NodeId From, const NodeId To)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (_Nodes [ From ] . _Successors .)",
    "insertText": "Add(To)"
  },
  {
    "label": "AddDirectedEdgeUnique()",
    "kind": "Method",
    "detail": "Function (+ + _Nodes [ To ] . _InDegree ; return true ; } return false ; } bool)",
    "insertText": "AddDirectedEdgeUnique(const NodeId From, const NodeId To)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TArrayG<int32_t,TInlineElementAllocator<4>>& FromSuccessors = _Nodes [ From ] . _Successors ; int32_t PrevNumSuccessors = FromSuccessors .)",
    "insertText": "Num()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (FromSuccessors .)",
    "insertText": "AddUnique(To)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (+ + _Nodes [ To ] . _InDegree ; return true ; } } return false ; } void)",
    "insertText": "Reserve(int32_t NodesSlack, int32_t EdgesSlack = 0)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (_Nodes .)",
    "insertText": "Reserve(NodesSlack)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32_t NodesSlack = 0, int32_t EdgesSlack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (_Nodes .)",
    "insertText": "Empty(NodesSlack)"
  },
  {
    "label": "NumNodes()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "NumNodes()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const InElementType&)",
    "insertText": "operator(NodeId Index)"
  },
  {
    "label": "TopologicalSort_Pointers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TopologicalSort_Pointers(TArray<const InElementType*>& OutItems)"
  },
  {
    "label": "TopologicalSort_Pointers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TopologicalSort_Pointers(TArray<InElementType*>& OutItems)"
  },
  {
    "label": "FindCycles()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<NodeId>>)",
    "insertText": "FindCycles()"
  },
  {
    "label": "SNode()",
    "kind": "Method",
    "detail": "Function (private : struct TDiGraphTopologicalIterator_Base<InElementType> ; struct SNode {)",
    "insertText": "SNode(const InElementType& Item) : _Item(Item)"
  },
  {
    "label": "SNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SNode(InElementType&& Item) : _Item(Move(Item))"
  },
  {
    "label": "TDiGraphTopologicalIterator_Base()",
    "kind": "Method",
    "detail": "Function (} InElementType _Item ; int32_t _InDegree = 0 ; TArrayG<int32_t,TInlineElementAllocator<4>> _Successors ; } ; TArray<SNode> _Nodes ; } ; template<InElementType> struct TDiGraphTopologicalIterator_Base { using DiGraphType = TDirectedGraph<InElementType> ;)",
    "insertText": "TDiGraphTopologicalIterator_Base(const DiGraphType& InContainer)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(InContainer)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "SkipCurrent()",
    "kind": "Method",
    "detail": "Function (} DiGraphType::NodeId)",
    "insertText": "SkipCurrent()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Enqueue(TArray<typename DiGraphType::NodeId>&& NodesToVisit)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (_NodesToVisit .)",
    "insertText": "Append(NodesToVisit)"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Increment(const DiGraphType& Container)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (const int32_t NodeIndex = _NodesToVisit .)",
    "insertText": "Pop(false)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const DiGraphType::SNode& Node = Container . _Nodes [ NodeIndex ] ;)",
    "insertText": "for(int32_t SuccessorIndex : Node._Successors)"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (_NodesToVisit .)",
    "insertText": "Push(SuccessorIndex)"
  },
  {
    "label": "CurrentNodeIndex()",
    "kind": "Method",
    "detail": "Function (} } } } DiGraphType::NodeId)",
    "insertText": "CurrentNodeIndex()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset(const DiGraphType& Container)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (_NodesToVisit .)",
    "insertText": "Empty(Container._Nodes.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (_NodesToVisit .)",
    "insertText": "Add(NodeIndex)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} } _VisitCounters .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (_VisitCounters .)",
    "insertText": "AddDefaulted(Container._Nodes.Num())"
  },
  {
    "label": "TDiGraphTopologicalIterator()",
    "kind": "Method",
    "detail": "Function (} private : TArray<DiGraphType::NodeId> _NodesToVisit ; TArray<int32_t> _VisitCounters ; } ; template<InElementType> struct TDiGraphTopologicalIterator : public TDiGraphTopologicalIterator_Base<InElementType> { using Super = TDiGraphTopologicalIterator_Base<InElementType> ; using DiGraphType = Super::DiGraphType ;)",
    "insertText": "TDiGraphTopologicalIterator(DiGraphType& InContainer) : TDiGraphTopologicalIterator_Base<InElementType>(InContainer) , _Container(InContainer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TDiGraphTopologicalIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Increment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Increment(_Container)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(_Container)"
  },
  {
    "label": "TDiGraphConstTopologicalIterator()",
    "kind": "Method",
    "detail": "Function (} private : DiGraphType& _Container ; } ; template<InElementType> struct TDiGraphConstTopologicalIterator : public TDiGraphTopologicalIterator_Base<InElementType> { using Super = TDiGraphTopologicalIterator_Base<InElementType> ; using DiGraphType = Super::DiGraphType ;)",
    "insertText": "TDiGraphConstTopologicalIterator(const DiGraphType& InContainer) : TDiGraphTopologicalIterator_Base<InElementType>(InContainer) , _Container(InContainer)"
  },
  {
    "label": "TopologicalSort()",
    "kind": "Method",
    "detail": "Function (} private : const DiGraphType& _Container ; } ; template<InElementType> bool TDirectedGraph<InElementType)",
    "insertText": "TopologicalSort(TArray<InElementType>& OutItems)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32_t ExpectedSize = OutItems .)",
    "insertText": "Num() + _Nodes.Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutItems .)",
    "insertText": "Reserve(ExpectedSize)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutItems .)",
    "insertText": "Add(*It)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutItems .)",
    "insertText": "Add(&(*It))"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (TArray<bool> NodeVisitedMap ; NodeVisitedMap .)",
    "insertText": "Reset(_Nodes.Num())"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (NodeVisitedMap .)",
    "insertText": "AddZeroed(_Nodes.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (struct SStackEntry { int32_t _NodeIndex ; int32_t _NextSuccessorIndex ; } ; TArray<SStackEntry> Stack ; TArray<TArray<NodeId>> Cycles ;)",
    "insertText": "for(int32_t RootNodeIndex = 0; RootNodeIndex < _Nodes.Num(); ++RootNodeIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodeVisitedMap [ RootNodeIndex ] = true ; Stack .)",
    "insertText": "Add(SStackEntry{RootNodeIndex,0})"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (SStackEntry& StackTop = Stack .)",
    "insertText": "Top()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const SNode& Node = _Nodes [ StackTop . _NodeIndex ] ;)",
    "insertText": "if(StackTop._NextSuccessorIndex < Node._Successors.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int32_t SuccessorNodeIndex = Node . _Successors [ StackTop . _NextSuccessorIndex ] ; + + StackTop . _NextSuccessorIndex ;)",
    "insertText": "if(!NodeVisitedMap[SuccessorNodeIndex])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (NodeVisitedMap [ SuccessorNodeIndex ] = true ; Stack .)",
    "insertText": "Add(SStackEntry{SuccessorNodeIndex, 0})"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(int32_t StackIndex = 0; StackIndex < Stack.Num(); ++StackIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArray<NodeId> CycleNodeIds ;)",
    "insertText": "for(int32_t CycleStackIndex = StackIndex; CycleStackIndex < Stack.Num(); ++CycleStackIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (CycleNodeIds .)",
    "insertText": "Add(Stack[CycleStackIndex]._NodeIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Cycles .)",
    "insertText": "Add(CycleNodeIds)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (break ; } } } } else { Stack .)",
    "insertText": "Pop()"
  },
  {
    "label": "TDiGraphVisitor()",
    "kind": "Method",
    "detail": "Function (} } ; } } return Cycles ; } template<InElementType> struct TDiGraphVisitor { using DiGraphType = TDirectedGraph<InElementType> ; using IteratorType = TDiGraphTopologicalIterator<InElementType> ;)",
    "insertText": "TDiGraphVisitor(DiGraphType& DiGraph) : _GraphIterator(DiGraph)"
  },
  {
    "label": "Iterate()",
    "kind": "Method",
    "detail": "Function (} template<VisitorType> bool)",
    "insertText": "Iterate(VisitorType Visitor)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TArray<DiGraphType::NodeId> SkippedNodes ;)",
    "insertText": "while(_GraphIterator)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (+ + _GraphIterator ; } else { SkippedNodes .)",
    "insertText": "Add(_GraphIterator.SkipCurrent())"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (} } _GraphIterator .)",
    "insertText": "Enqueue(Move(SkippedNodes))"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsComplete()"
  }
]