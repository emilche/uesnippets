[
  {
    "label": "MD5CE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MD5CE"
  },
  {
    "label": "IntermediateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IntermediateData"
  },
  {
    "label": "GetPaddedMessageLength()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_HASH_MD5_CONSTEXPR_INTERNAL_H_ # define BASE_HASH_MD5_CONSTEXPR_INTERNAL_H_ # include<stdint . h> # include<array> # include \" base / check . h \" # include \" base / check_op . h \" namespace base { namespace internal { struct MD5CE { struct IntermediateData { uint32_t a ; uint32_t b ; uint32_t c ; uint32_t d ; } ; using RoundData = std::array<uint32_t,1 6> ; std::array<uint32_t,6 4> kConstants = { { 0 xd76aa478,0 xe8c7b756,0 x242070db,0 xc1bdceee,0 xf57c0faf,0 x4787c62a,0 xa8304613,0 xfd469501,0 x698098d8,0 x8b44f7af,0 xffff5bb1,0 x895cd7be,0 x6b901122,0 xfd987193,0 xa679438e,0 x49b40821,0 xf61e2562,0 xc040b340,0 x265e5a51,0 xe9b6c7aa,0 xd62f105d,0 x02441453,0 xd8a1e681,0 xe7d3fbc8,0 x21e1cde6,0 xc33707d6,0 xf4d50d87,0 x455a14ed,0 xa9e3e905,0 xfcefa3f8,0 x676f02d9,0 x8d2a4c8a,0 xfffa3942,0 x8771f681,0 x6d9d6122,0 xfde5380c,0 xa4beea44,0 x4bdecfa9,0 xf6bb4b60,0 xbebfbc70,0 x289b7ec6,0 xeaa127fa,0 xd4ef3085,0 x04881d05,0 xd9d4d039,0 xe6db99e5,0 x1fa27cf8,0 xc4ac5665,0 xf4292244,0 x432aff97,0 xab9423a7,0 xfc93a039,0 x655b59c3,0 x8f0ccc92,0 xffeff47d,0 x85845dd1,0 x6fa87e4f,0 xfe2ce6e0,0 xa3014314,0 x4e0811a1,0 xf7537e82,0 xbd3af235,0 x2ad7d2bb,0 xeb86d391 } } ; std::array<uint32_t,1 6> kShifts = { { 7,1 2,1 7,2 2,5,9,1 4,2 0,4,1 1,1 6,2 3,6,1 0,1 5,2 1 } } ; IntermediateData kInitialIntermediateData { 0 x67452301,0 xefcdab89,0 x98badcfe,0 x10325476 } ; uint32_t)",
    "insertText": "GetPaddedMessageLength(const uint32_t n)"
  },
  {
    "label": "ExtractByte()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "ExtractByte(const uint64_t value, const uint32_t i)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(i, 8u)"
  },
  {
    "label": "GetPaddedMessageByte()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "GetPaddedMessageByte(const char* data, const uint32_t n, const uint32_t m, const uint32_t i)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(i, m)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(n, m)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(m % 64, 0u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(i == n)"
  },
  {
    "label": "GetPaddedMessageWord()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } } uint32_t)",
    "insertText": "GetPaddedMessageWord(const char* data, const uint32_t n, const uint32_t m, const uint32_t i)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(i % 4, 0u)"
  },
  {
    "label": "GetRoundData()",
    "kind": "Method",
    "detail": "Function (} RoundData)",
    "insertText": "GetRoundData(const char* data, const uint32_t n, const uint32_t m, const uint32_t i)"
  },
  {
    "label": "DCHECK_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_EQ(i % 64, 0u)"
  },
  {
    "label": "CalcF()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "CalcF(const uint32_t i, const uint32_t b, const uint32_t c, const uint32_t d)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(i, 64u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(i < 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(i < 48)"
  },
  {
    "label": "CalcF()",
    "kind": "Method",
    "detail": "Function (} } uint32_t)",
    "insertText": "CalcF(const uint32_t i, const IntermediateData& intermediate)"
  },
  {
    "label": "CalcG()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "CalcG(const uint32_t i)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "return(7 * i)"
  },
  {
    "label": "GetShift()",
    "kind": "Method",
    "detail": "Function (} } uint32_t)",
    "insertText": "GetShift(const uint32_t i)"
  },
  {
    "label": "LeftRotate()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "LeftRotate(const uint32_t value, const uint32_t bits)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(bits, 32u)"
  },
  {
    "label": "ApplyStep()",
    "kind": "Method",
    "detail": "Function (} IntermediateData)",
    "insertText": "ApplyStep(const uint32_t i, const RoundData& data, const IntermediateData& intermediate)"
  },
  {
    "label": "CalcG()",
    "kind": "Method",
    "detail": "Function (const uint32_t g =)",
    "insertText": "CalcG(i)"
  },
  {
    "label": "DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_LT(g, 16u)"
  },
  {
    "label": "CalcF()",
    "kind": "Method",
    "detail": "Function (const uint32_t f =)",
    "insertText": "CalcF(i, intermediate)"
  },
  {
    "label": "GetShift()",
    "kind": "Method",
    "detail": "Function (const uint32_t s =)",
    "insertText": "GetShift(i)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} IntermediateData)",
    "insertText": "Add(const IntermediateData& intermediate1, const IntermediateData& intermediate2)"
  },
  {
    "label": "GetPaddedMessageLength()",
    "kind": "Method",
    "detail": "Function (const uint32_t m =)",
    "insertText": "GetPaddedMessageLength(n)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IntermediateData intermediate0 = kInitialIntermediateData ;)",
    "insertText": "for(uint32_t offset = 0; offset < m; offset += 64)"
  },
  {
    "label": "GetRoundData()",
    "kind": "Method",
    "detail": "Function (RoundData data =)",
    "insertText": "GetRoundData(message, n, m, offset)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (IntermediateData intermediate1 = intermediate0 ;)",
    "insertText": "for(uint32_t i = 0; i < 64; ++i) intermediate1 = ApplyStep(i, data, intermediate1)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (intermediate0 =)",
    "insertText": "Add(intermediate0, intermediate1)"
  },
  {
    "label": "StringLength()",
    "kind": "Method",
    "detail": "Function (} return intermediate0 ; } uint32_t)",
    "insertText": "StringLength(const char* string)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (const char* end = string ;)",
    "insertText": "while(*end != 0)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(end >= string)"
  },
  {
    "label": "DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK(static_cast<std::ptrdiff_t>(static_cast<uint32_t>(end - string)) == (end - string))"
  },
  {
    "label": "SwapEndian()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "SwapEndian(uint32_t a)"
  },
  {
    "label": "Hash64()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "Hash64(const char* data, uint32_t n)"
  },
  {
    "label": "ProcessMessage()",
    "kind": "Method",
    "detail": "Function (IntermediateData intermediate =)",
    "insertText": "ProcessMessage(data, n)"
  },
  {
    "label": "Hash32()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "Hash32(const char* data, uint32_t n)"
  },
  {
    "label": "MD5Hash64Constexpr()",
    "kind": "Method",
    "detail": "Function (} } ; } uint64_t)",
    "insertText": "MD5Hash64Constexpr(const char* string)"
  },
  {
    "label": "MD5Hash64Constexpr()",
    "kind": "Method",
    "detail": "Function (} uint64_t)",
    "insertText": "MD5Hash64Constexpr(const char* string, uint32_t length)"
  },
  {
    "label": "MD5Hash32Constexpr()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "MD5Hash32Constexpr(const char* string)"
  },
  {
    "label": "MD5Hash32Constexpr()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "MD5Hash32Constexpr(const char* string, uint32_t length)"
  }
]