[
  {
    "label": "SProjectLauncherDeployTargetListRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherDeployTargetListRow"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" ILauncherDeviceGroup . h \" # include \" ITargetDeviceProxy . h \" # include \" Misc / Attribute . h \" # include \" Widgets / SNullWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Layout / Margin . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / StyleDefaults . h \" # include \" Widgets / SBoxPanel . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Widgets / Views / SListView . h \" # include \" Widgets / Images / SImage . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / Input / SCheckBox . h \" # include \" PlatformInfo . h \" # include \" Widgets / Shared / SProjectLauncherVariantSelector . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherDeployTargetListRow \" class SProjectLauncherDeployTargetListRow : public SMultiColumnTableRow<TSharedPtr<ITargetDeviceProxy>> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherDeployTargetListRow)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(ILauncherDeviceGroupPtr, DeviceGroup) SLATE_ARGUMENT(TSharedPtr<ITargetDeviceProxy>, DeviceProxy) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (DeviceGroup = InArgs . _DeviceGroup ; DeviceProxy = InArgs . _DeviceProxy ; HighlightText = InArgs . _HighlightText ; SelectedVariant = NAME_None ; ILauncherDeviceGroupPtr ActiveGroup = DeviceGroup .)",
    "insertText": "Get()"
  },
  {
    "label": "GetDeviceIDs()",
    "kind": "Method",
    "detail": "Function (const TArray<FString>& DeviceIDs = ActiveGroup ->)",
    "insertText": "GetDeviceIDs()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FString& DeviceID = DeviceIDs [ Index ] ;)",
    "insertText": "if(DeviceProxy->HasDeviceId(DeviceID))"
  },
  {
    "label": "GetTargetDeviceVariant()",
    "kind": "Method",
    "detail": "Function (SelectedVariant = DeviceProxy ->)",
    "insertText": "GetTargetDeviceVariant(DeviceID)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (break ; } } } SMultiColumnTableRow<TSharedPtr<ITargetDeviceProxy>)",
    "insertText": "Construct(FSuperRowType::FArguments(), InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (} public : TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Device\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Variant\")"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "SNew(SBox) .Padding(FMargin(4.0, 0.0)) .VAlign(VAlign_Center) [ SNew(STextBlock) .Text(this, &SProjectLauncherDeployTargetListRow::HandleHostNoVariantText)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(ColumnName == \"Platform\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Host\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(ColumnName == \"Owner\")"
  },
  {
    "label": "HandleCheckBoxStateChanged()",
    "kind": "Method",
    "detail": "Function (} return SNullWidget::NullWidget ; } private : void)",
    "insertText": "HandleCheckBoxStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "GetTargetDeviceId()",
    "kind": "Method",
    "detail": "Function (const FString& DeviceID = DeviceProxy ->)",
    "insertText": "GetTargetDeviceId(SelectedVariant)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (ActiveGroup ->)",
    "insertText": "AddDevice(DeviceID)"
  },
  {
    "label": "RemoveDevice()",
    "kind": "Method",
    "detail": "Function (} else { ActiveGroup ->)",
    "insertText": "RemoveDevice(DeviceID)"
  },
  {
    "label": "HandleCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (} } } ECheckBoxState)",
    "insertText": "HandleCheckBoxIsChecked()"
  },
  {
    "label": "HandleVariantSelectorText()",
    "kind": "Method",
    "detail": "Function (} } return ECheckBoxState::Unchecked ; } FText)",
    "insertText": "HandleVariantSelectorText()"
  },
  {
    "label": "FromName()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromName(SelectedVariant)"
  },
  {
    "label": "GetEmpty()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetEmpty()"
  },
  {
    "label": "HandleVariantSelectorVariantSelected()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleVariantSelectorVariantSelected(FName InVariant)"
  },
  {
    "label": "GetTargetDeviceId()",
    "kind": "Method",
    "detail": "Function (const FString& NewDeviceID = DeviceProxy ->)",
    "insertText": "GetTargetDeviceId(InVariant)"
  },
  {
    "label": "RemoveDevice()",
    "kind": "Method",
    "detail": "Function (ActiveGroup ->)",
    "insertText": "RemoveDevice(OldDeviceID)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (ActiveGroup ->)",
    "insertText": "AddDevice(NewDeviceID)"
  },
  {
    "label": "HandleDeviceImage()",
    "kind": "Method",
    "detail": "Function (} } SelectedVariant = InVariant ; } } const FSlateBrush*)",
    "insertText": "HandleDeviceImage()"
  },
  {
    "label": "FindPlatformInfo()",
    "kind": "Method",
    "detail": "Function (const PlatformInfo::FTargetPlatformInfo* const PlatformInfo =)",
    "insertText": "FindPlatformInfo(*DeviceProxy->GetTargetPlatformName(NAME_None))"
  },
  {
    "label": "GetBrush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBrush(PlatformInfo->GetIconStyleName(EPlatformIconSize::Normal))"
  },
  {
    "label": "GetNoBrush()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "GetNoBrush()"
  },
  {
    "label": "HandleDeviceNameText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleDeviceNameText()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString& Name = DeviceProxy ->)",
    "insertText": "GetName()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FromString(Name)"
  },
  {
    "label": "HandleHostNameText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleHostNameText()"
  },
  {
    "label": "HandleHostUserText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleHostUserText()"
  },
  {
    "label": "HandleHostPlatformText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleHostPlatformText()"
  },
  {
    "label": "LOCTEXT()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "LOCTEXT(\"InvalidVariant\", \"Invalid Variant\")"
  },
  {
    "label": "HandleHostNoVariantText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "HandleHostNoVariantText()"
  }
]