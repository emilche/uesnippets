[
  {
    "label": "ABSL_MUST_USE_RESULT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ABSL_MUST_USE_RESULT"
  },
  {
    "label": "HasConversionOperatorToStatusOr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HasConversionOperatorToStatusOr"
  },
  {
    "label": "IsDirectInitializationAmbiguous",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsDirectInitializationAmbiguous"
  },
  {
    "label": "IsForwardingAssignmentAmbiguous",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IsForwardingAssignmentAmbiguous"
  },
  {
    "label": "Helper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Helper"
  },
  {
    "label": "StatusOrData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StatusOrData"
  },
  {
    "label": "Dummy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Dummy"
  },
  {
    "label": "CopyCtorBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyCtorBase"
  },
  {
    "label": "MoveCtorBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveCtorBase"
  },
  {
    "label": "CopyAssignBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CopyAssignBase"
  },
  {
    "label": "MoveAssignBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MoveAssignBase"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_STATUS_INTERNAL_STATUSOR_INTERNAL_H_ # define ABSL_STATUS_INTERNAL_STATUSOR_INTERNAL_H_ # include<type_traits> # include<utility> # include \" absl / base / attributes . h \" # include \" absl / meta / type_traits . h \" # include \" absl / status / status . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN template<T> class ABSL_MUST_USE_RESULT StatusOr ; namespace internal_statusor { template<T,U,= void> struct HasConversionOperatorToStatusOr : std::false_type { } ; template<T,U> void)",
    "insertText": "test(char (*)[sizeof(std::declval<U>().operator absl::StatusOr<T>())])"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<T,U> struct HasConversionOperatorToStatusOr<T,U,)",
    "insertText": "decltype(test<T, U>(0))"
  },
  {
    "label": "HandleInvalidStatusCtorArg()",
    "kind": "Method",
    "detail": "Function (} ; template<T,U> using IsConstructibleOrConvertibleFromStatusOr = absl::disjunction<std::is_constructible<T,StatusOr<U>&>,std::is_constructible<T,const StatusOr<U>&>,std::is_constructible<T,StatusOr<U>&&>,std::is_constructible<T,const StatusOr<U>&&>,std::is_convertible<StatusOr<U>&,T>,std::is_convertible<const StatusOr<U>&,T>,std::is_convertible<StatusOr<U>&&,T>,std::is_convertible<const StatusOr<U>&&,T>> ; template<T,U> using IsConstructibleOrConvertibleOrAssignableFromStatusOr = absl::disjunction<IsConstructibleOrConvertibleFromStatusOr<T,U>,std::is_assignable<T&,StatusOr<U>&>,std::is_assignable<T&,const StatusOr<U>&>,std::is_assignable<T&,StatusOr<U>&&>,std::is_assignable<T&,const StatusOr<U>&&>> ; template<T,U> struct IsDirectInitializationAmbiguous : public absl::conditional_t<std::is_same<absl::remove_cv_t<absl::remove_reference_t<U>>,U>::value,std::false_type,IsDirectInitializationAmbiguous<T,absl::remove_cv_t<absl::remove_reference_t<U>>>> { } ; template<T,V> struct IsDirectInitializationAmbiguous<T,absl::StatusOr<V>> : public IsConstructibleOrConvertibleFromStatusOr<T,V> { } ; template<T,U> using IsDirectInitializationValid = absl::disjunction<std::is_same<T,absl::remove_cv_t<absl::remove_reference_t<U>>>,absl::negation<absl::disjunction<std::is_same<absl::StatusOr<T>,absl::remove_cv_t<absl::remove_reference_t<U>>>,std::is_same<absl::Status,absl::remove_cv_t<absl::remove_reference_t<U>>>,std::is_same<absl::in_place_t,absl::remove_cv_t<absl::remove_reference_t<U>>>,IsDirectInitializationAmbiguous<T,U>>>> ; template<T,U> struct IsForwardingAssignmentAmbiguous : public absl::conditional_t<std::is_same<absl::remove_cv_t<absl::remove_reference_t<U>>,U>::value,std::false_type,IsForwardingAssignmentAmbiguous<T,absl::remove_cv_t<absl::remove_reference_t<U>>>> { } ; template<T,U> struct IsForwardingAssignmentAmbiguous<T,absl::StatusOr<U>> : public IsConstructibleOrConvertibleOrAssignableFromStatusOr<T,U> { } ; template<T,U> using IsForwardingAssignmentValid = absl::disjunction<std::is_same<T,absl::remove_cv_t<absl::remove_reference_t<U>>>,absl::negation<absl::disjunction<std::is_same<absl::StatusOr<T>,absl::remove_cv_t<absl::remove_reference_t<U>>>,std::is_same<absl::Status,absl::remove_cv_t<absl::remove_reference_t<U>>>,std::is_same<absl::in_place_t,absl::remove_cv_t<absl::remove_reference_t<U>>>,IsForwardingAssignmentAmbiguous<T,U>>>> ; class Helper { public : void)",
    "insertText": "HandleInvalidStatusCtorArg(Status*)"
  },
  {
    "label": "Crash()",
    "kind": "Method",
    "detail": "Function (ABSL_ATTRIBUTE_NORETURN void)",
    "insertText": "Crash(const absl::Status& status)"
  },
  {
    "label": "ABSL_ATTRIBUTE_NONNULL()",
    "kind": "Method",
    "detail": "Function (} ; template<T,. . . Args>)",
    "insertText": "ABSL_ATTRIBUTE_NONNULL(1) void PlacementNew(void* p, Args&&... args)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(p) T(std::forward<Args>(args)...)"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (} template<T> class StatusOrData { template<U> class StatusOrData ; public :)",
    "insertText": "StatusOrData()"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StatusOrData(const StatusOrData& other)"
  },
  {
    "label": "MakeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeValue(other.data_)"
  },
  {
    "label": "MakeStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeStatus()"
  },
  {
    "label": "MakeStatus()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "MakeStatus(other.status_)"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "StatusOrData(StatusOrData&& other)"
  },
  {
    "label": "MakeValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeValue(std::move(other.data_))"
  },
  {
    "label": "MakeStatus()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "MakeStatus(std::move(other.status_))"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (} } template<U>)",
    "insertText": "StatusOrData(const StatusOrData<U>& other)"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (} } template<U>)",
    "insertText": "StatusOrData(StatusOrData<U>&& other)"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (} } template<. . . Args>)",
    "insertText": "StatusOrData(absl::in_place_t, Args&&... args) : data_(std::forward<Args>(args)...)"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StatusOrData(const T& value) : data_(value)"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "StatusOrData(T&& value) : data_(std::move(value))"
  },
  {
    "label": "StatusOrData()",
    "kind": "Method",
    "detail": "Function (} template<U,absl::enable_if_t<std::is_constructible<absl::Status,U&&>::value,int> = 0>)",
    "insertText": "StatusOrData(U&& v) : status_(std::forward<U>(v))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} StatusOrData&)",
    "insertText": "operator(const StatusOrData& other)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (status_ . ~)",
    "insertText": "Status()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (data_ . ~)",
    "insertText": "T()"
  },
  {
    "label": "Assign()",
    "kind": "Method",
    "detail": "Function (} } template<U> void)",
    "insertText": "Assign(U&& value)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (data_ = std::forward<)",
    "insertText": "U(value)"
  },
  {
    "label": "MakeValue()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "MakeValue(std::forward<U>(value))"
  },
  {
    "label": "OkStatus()",
    "kind": "Method",
    "detail": "Function (status_ =)",
    "insertText": "OkStatus()"
  },
  {
    "label": "AssignStatus()",
    "kind": "Method",
    "detail": "Function (} } template<U> void)",
    "insertText": "AssignStatus(U&& v)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (status_ = static_cast<)",
    "insertText": "Status(std::forward<U>(v))"
  },
  {
    "label": "ok()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ok()"
  },
  {
    "label": "EnsureOk()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnsureOk()"
  },
  {
    "label": "EnsureNotOk()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnsureNotOk()"
  },
  {
    "label": "MakeValue()",
    "kind": "Method",
    "detail": "Function (} template<. . . Arg> void)",
    "insertText": "MakeValue(Arg&&... arg)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (internal_statusor::PlacementNew<)",
    "insertText": "T(&dummy_, std::forward<Arg>(arg)...)"
  },
  {
    "label": "MakeStatus()",
    "kind": "Method",
    "detail": "Function (} template<. . . Args> void)",
    "insertText": "MakeStatus(Args&&... args)"
  },
  {
    "label": "Status()",
    "kind": "Method",
    "detail": "Function (internal_statusor::PlacementNew<)",
    "insertText": "Status(&status_, std::forward<Args>(args)...)"
  },
  {
    "label": "CopyCtorBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,bool = std::is_copy_constructible<T>::value> struct CopyCtorBase {)",
    "insertText": "CopyCtorBase()"
  },
  {
    "label": "CopyCtorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCtorBase(const CopyCtorBase&)"
  },
  {
    "label": "CopyCtorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCtorBase(CopyCtorBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyCtorBase&)",
    "insertText": "operator(const CopyCtorBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyCtorBase&)",
    "insertText": "operator(CopyCtorBase&&)"
  },
  {
    "label": "MoveCtorBase()",
    "kind": "Method",
    "detail": "Function (} ; template<T,bool = std::is_move_constructible<T>::value> struct MoveCtorBase {)",
    "insertText": "MoveCtorBase()"
  },
  {
    "label": "MoveCtorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCtorBase(const MoveCtorBase&)"
  },
  {
    "label": "MoveCtorBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveCtorBase(MoveCtorBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MoveCtorBase&)",
    "insertText": "operator(const MoveCtorBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MoveCtorBase&)",
    "insertText": "operator(MoveCtorBase&&)"
  },
  {
    "label": "CopyAssignBase()",
    "kind": "Method",
    "detail": "Function (} ; template<T,bool = std::is_copy_constructible<T>::value&& std::is_copy_assignable<T>::value> struct CopyAssignBase {)",
    "insertText": "CopyAssignBase()"
  },
  {
    "label": "CopyAssignBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAssignBase(const CopyAssignBase&)"
  },
  {
    "label": "CopyAssignBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyAssignBase(CopyAssignBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyAssignBase&)",
    "insertText": "operator(const CopyAssignBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CopyAssignBase&)",
    "insertText": "operator(CopyAssignBase&&)"
  },
  {
    "label": "MoveAssignBase()",
    "kind": "Method",
    "detail": "Function (} ; template<T,bool = std::is_move_constructible<T>::value&& std::is_move_assignable<T>::value> struct MoveAssignBase {)",
    "insertText": "MoveAssignBase()"
  },
  {
    "label": "MoveAssignBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAssignBase(const MoveAssignBase&)"
  },
  {
    "label": "MoveAssignBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveAssignBase(MoveAssignBase&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MoveAssignBase&)",
    "insertText": "operator(const MoveAssignBase&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (MoveAssignBase&)",
    "insertText": "operator(MoveAssignBase&&)"
  },
  {
    "label": "ThrowBadStatusOrAccess()",
    "kind": "Method",
    "detail": "Function (} ; ABSL_ATTRIBUTE_NORETURN void)",
    "insertText": "ThrowBadStatusOrAccess(absl::Status status)"
  }
]