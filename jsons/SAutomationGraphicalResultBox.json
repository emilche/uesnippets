[
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "SAutomationGraphicalResultBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SAutomationGraphicalResultBox"
  },
  {
    "label": "FTestResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTestResults"
  },
  {
    "label": "FDeviceResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeviceResults"
  },
  {
    "label": "FClusterResults",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClusterResults"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" IAutomationControllerManager . h \" # include \" Styling / SlateColor . h \" # include \" Widgets / SCompoundWidget . h \" class SVerticalBox ; namespace EAutomationGrapicalDisplayType { enum Type { DisplayName,DisplayTime } ; } class SAutomationGraphicalResultBox : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SAutomationGraphicalResultBox)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FString, Text) SLATE_END_ARGS() virtual ~SAutomationGraphicalResultBox()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const IAutomationControllerManagerRef& InAutomationController)"
  },
  {
    "label": "ClearResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearResults()"
  },
  {
    "label": "HasResults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasResults()"
  },
  {
    "label": "GetDisplayType()",
    "kind": "Method",
    "detail": "Function (EAutomationGrapicalDisplayType::Type)",
    "insertText": "GetDisplayType()"
  },
  {
    "label": "SetDisplayType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDisplayType(EAutomationGrapicalDisplayType::Type NewDisplayType)"
  },
  {
    "label": "FTestResults()",
    "kind": "Method",
    "detail": "Function (private : class FTestResults { public :)",
    "insertText": "FTestResults(const FString& InName)"
  },
  {
    "label": "FDeviceResults()",
    "kind": "Method",
    "detail": "Function (TestName = InName ; Duration = 0 . f ; TestState = EAutomationState::NotRun ; bHasWarnings = false ; } FString TestName ; float Duration ; EAutomationState TestState ; bool bHasWarnings ; } ; class FDeviceResults { public :)",
    "insertText": "FDeviceResults(const FGuid& InGameInstanceId, const FString& InGameInstanceName)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (GameInstanceName = InGameInstanceName ; GameInstanceId = InGameInstanceId .)",
    "insertText": "ToString()"
  },
  {
    "label": "FClusterResults()",
    "kind": "Method",
    "detail": "Function (TotalTime = 0 . f ; TotalTestSkips = 0 ; TotalTestSuccesses = 0 ; } FString GameInstanceName ; FString GameInstanceId ; float TotalTime ; uint32 TotalTestSkips ; uint32 TotalTestSuccesses ; TArray<FTestResults> Tests ; } ; class FClusterResults { public :)",
    "insertText": "FClusterResults(const FString& InName)"
  },
  {
    "label": "GetEnabledReports()",
    "kind": "Method",
    "detail": "Function (ClusterName = InName ; TotalTime = 0 . f ; ParallelTime = 0 . f ; TotalNumTests = 0 ; TotalTestSkips = 0 ; TotalTestSuccesses = 0 ; } FString ClusterName ; uint32 TotalNumTests ; uint32 TotalTestSkips ; uint32 TotalTestSuccesses ; float TotalTime ; float ParallelTime ; TArray<FDeviceResults> Devices ; } ; void)",
    "insertText": "GetEnabledReports(TSharedPtr<IAutomationReport> InReport, TArray< TSharedPtr< IAutomationReport > >& OutReports)"
  },
  {
    "label": "PopulateData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateData()"
  },
  {
    "label": "CreateWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateWidgets()"
  },
  {
    "label": "OnFillResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFillResults()"
  },
  {
    "label": "GetColorForTestState()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetColorForTestState(const EAutomationState TestState, const bool bHasWarnings)"
  },
  {
    "label": "GetTestDisplayText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTestDisplayText(const FString TestName, const float TestTime)"
  }
]