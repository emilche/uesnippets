[
  {
    "label": "TScopeGuard",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TScopeGuard"
  },
  {
    "label": "FScopeGuardSyntaxSupport",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopeGuardSyntaxSupport"
  },
  {
    "label": "TScopeGuard()",
    "kind": "Method",
    "detail": "Function (# pragma once namespace ScopeExitSupport { template<FuncType> class TScopeGuard {)",
    "insertText": "TScopeGuard(TScopeGuard&&)"
  },
  {
    "label": "TScopeGuard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TScopeGuard(const TScopeGuard&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TScopeGuard&)",
    "insertText": "operator(TScopeGuard&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TScopeGuard&)",
    "insertText": "operator(const TScopeGuard&)"
  },
  {
    "label": "TScopeGuard()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "TScopeGuard(FuncType&& InFunc) : Func((FuncType&&)InFunc)"
  },
  {
    "label": "TScopeGuard()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TScopeGuard()"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} private : FuncType Func ; } ; struct FScopeGuardSyntaxSupport { template<FuncType> TScopeGuard<FuncType>)",
    "insertText": "operator(FuncType&& InFunc)"
  }
]