[
  {
    "label": "FSolverTrailingFilterSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverTrailingFilterSettings"
  },
  {
    "label": "FSolverCollisionFilterSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverCollisionFilterSettings"
  },
  {
    "label": "FSolverBreakingFilterSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverBreakingFilterSettings"
  },
  {
    "label": "FSolverRemovalFilterSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSolverRemovalFilterSettings"
  },
  {
    "label": "FCollidingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCollidingData"
  },
  {
    "label": "FTrailingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTrailingData"
  },
  {
    "label": "FBreakingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBreakingData"
  },
  {
    "label": "FRemovalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRemovalData"
  },
  {
    "label": "FSolverCollisionEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverCollisionEventFilter"
  },
  {
    "label": "FSolverTrailingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverTrailingEventFilter"
  },
  {
    "label": "FSolverBreakingEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverBreakingEventFilter"
  },
  {
    "label": "FSolverRemovalEventFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverRemovalEventFilter"
  },
  {
    "label": "FSolverEventFilters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSolverEventFilters"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Real . h \" # include \" UObject / ObjectMacros . h \" # include \" SolverEventFilters . generated . h \")",
    "insertText": "USTRUCT(Blueprintable)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSolverTrailingFilterSettings() : FilterEnabled(false) , MinMass(0.0f) , MinSpeed(0.f) , MinVolume(0.f)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSolverCollisionFilterSettings() : FilterEnabled(false) , MinMass(0.0f) , MinSpeed(0.0f) , MinImpulse(0.0f)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSolverBreakingFilterSettings() : FilterEnabled(false) , MinMass(0.0f) , MinSpeed(0.0f) , MinVolume(0.0f)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FSolverRemovalFilterSettings() : FilterEnabled(false) , MinMass(0.0f) , MinVolume(0.0f)"
  },
  {
    "label": "FSolverCollisionEventFilter()",
    "kind": "Method",
    "detail": "Function (} ; namespace Chaos { struct FCollidingData ; struct FTrailingData ; struct FBreakingData ; struct FRemovalData ; class FSolverCollisionEventFilter { public :)",
    "insertText": "FSolverCollisionEventFilter()"
  },
  {
    "label": "FSolverCollisionEventFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverCollisionEventFilter(const FSolverCollisionFilterSettings& InSettings) : Settings(InSettings)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Pass(const Chaos::FCollidingData& InData)"
  },
  {
    "label": "Enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Enabled()"
  },
  {
    "label": "FSolverTrailingEventFilter()",
    "kind": "Method",
    "detail": "Function (Settings = InSettings ; } FSolverCollisionFilterSettings Settings ; } ; class FSolverTrailingEventFilter { public :)",
    "insertText": "FSolverTrailingEventFilter()"
  },
  {
    "label": "FSolverTrailingEventFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverTrailingEventFilter(const FSolverTrailingFilterSettings &InSettings) : Settings(InSettings)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Pass(const Chaos::FTrailingData& InData)"
  },
  {
    "label": "FSolverBreakingEventFilter()",
    "kind": "Method",
    "detail": "Function (Settings = InSettings ; } FSolverTrailingFilterSettings Settings ; } ; class FSolverBreakingEventFilter { public :)",
    "insertText": "FSolverBreakingEventFilter()"
  },
  {
    "label": "FSolverBreakingEventFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverBreakingEventFilter(const FSolverBreakingFilterSettings& InSettings) : Settings(InSettings)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Pass(const Chaos::FBreakingData& InData)"
  },
  {
    "label": "FSolverRemovalEventFilter()",
    "kind": "Method",
    "detail": "Function (Settings = InSettings ; } FSolverBreakingFilterSettings Settings ; } ; class FSolverRemovalEventFilter { public :)",
    "insertText": "FSolverRemovalEventFilter()"
  },
  {
    "label": "FSolverRemovalEventFilter()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSolverRemovalEventFilter(const FSolverRemovalFilterSettings& InSettings) : Settings(InSettings)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Pass(const Chaos::FRemovalData& InData)"
  },
  {
    "label": "FSolverEventFilters()",
    "kind": "Method",
    "detail": "Function (Settings = InSettings ; } FSolverRemovalFilterSettings Settings ; } ; class FSolverEventFilters { public :)",
    "insertText": "FSolverEventFilters() : CollisionFilter(new FSolverCollisionEventFilter()) , BreakingFilter(new FSolverBreakingEventFilter()) , TrailingFilter(new FSolverTrailingEventFilter()) , RemovalFilter(new FSolverRemovalEventFilter()) , CollisionEventsEnabled(false) , BreakingEventsEnabled(false) , TrailingEventsEnabled(false) , RemovalEventsEnabled(false)"
  },
  {
    "label": "SetGenerateCollisionEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetGenerateCollisionEvents(bool bDoGenerate)"
  },
  {
    "label": "SetGenerateBreakingEvents()",
    "kind": "Method",
    "detail": "Function (CollisionEventsEnabled = bDoGenerate ; } void)",
    "insertText": "SetGenerateBreakingEvents(bool bDoGenerate)"
  },
  {
    "label": "SetGenerateTrailingEvents()",
    "kind": "Method",
    "detail": "Function (BreakingEventsEnabled = bDoGenerate ; } void)",
    "insertText": "SetGenerateTrailingEvents(bool bDoGenerate)"
  },
  {
    "label": "SetGenerateRemovalEvents()",
    "kind": "Method",
    "detail": "Function (TrailingEventsEnabled = bDoGenerate ; } void)",
    "insertText": "SetGenerateRemovalEvents(bool bDoGenerate)"
  },
  {
    "label": "GetCollisionFilter()",
    "kind": "Method",
    "detail": "Function (RemovalEventsEnabled = bDoGenerate ; } FSolverCollisionEventFilter*)",
    "insertText": "GetCollisionFilter()"
  },
  {
    "label": "GetBreakingFilter()",
    "kind": "Method",
    "detail": "Function (} FSolverBreakingEventFilter*)",
    "insertText": "GetBreakingFilter()"
  },
  {
    "label": "GetTrailingFilter()",
    "kind": "Method",
    "detail": "Function (} FSolverTrailingEventFilter*)",
    "insertText": "GetTrailingFilter()"
  },
  {
    "label": "GetRemovalFilter()",
    "kind": "Method",
    "detail": "Function (} FSolverRemovalEventFilter*)",
    "insertText": "GetRemovalFilter()"
  },
  {
    "label": "IsCollisionEventEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCollisionEventEnabled()"
  }
]