[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSceneOutlinerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneOutlinerFilter"
  },
  {
    "label": "FSceneOutlinerFilters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSceneOutlinerFilters"
  },
  {
    "label": "SCENEOUTLINER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCENEOUTLINER_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TSceneOutlinerFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSceneOutlinerFilter"
  },
  {
    "label": "TSceneOutlinerPredicateFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSceneOutlinerPredicateFilter"
  },
  {
    "label": "FSceneOutlinerFilterInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" HAL / Platform . h \" # include \" ISceneOutlinerTreeItem . h \" # include \" Internationalization / Text . h \" # include \" Misc / FilterCollection . h \" # include \" Misc / IFilter . h \" # include \" SceneOutlinerFwd . h \" # include \" Templates / SharedPointer . h \" class FMenuBuilder ; class FSceneOutlinerFilter ; struct FSceneOutlinerFilters ; class FSceneOutlinerFilterInfo { public :)",
    "insertText": "FSceneOutlinerFilterInfo(const FText& InFilterTitle, const FText& InFilterTooltip, bool bInActive, const FCreateSceneOutlinerFilter& InFactory = FCreateSceneOutlinerFilter()) : FilterTitle(InFilterTitle) , FilterTooltip(InFilterTooltip) , bActive(bInActive) , Factory(InFactory)"
  },
  {
    "label": "InitFilter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitFilter(TSharedPtr<FSceneOutlinerFilters> InFilters)"
  },
  {
    "label": "AddMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMenu(FMenuBuilder& InMenuBuilder)"
  },
  {
    "label": "IsFilterActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFilterActive()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(FSceneOutlinerFilterInfo, FOnToggle, bool)"
  },
  {
    "label": "OnToggle()",
    "kind": "Method",
    "detail": "Function (FOnToggle&)",
    "insertText": "OnToggle()"
  },
  {
    "label": "ToggleFilterActive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleFilterActive()"
  },
  {
    "label": "DECLARE_DERIVED_EVENT()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FSceneOutlinerFilters> Filters ; TSharedPtr<FSceneOutlinerFilter> Filter ; FText FilterTitle ; FText FilterTooltip ; bool bActive ; FOnToggle OnToggleEvent ; FCreateSceneOutlinerFilter Factory ; } ; class FSceneOutlinerFilter : public IFilter<const ISceneOutlinerTreeItem&> { public : enum class EDefaultBehaviour : uint8 { Pass,Fail } ;)",
    "insertText": "DECLARE_DERIVED_EVENT(FSceneOutlinerFilter, IFilter<const ISceneOutlinerTreeItem&>::FChangedEvent, FChangedEvent)"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (FChangedEvent&)",
    "insertText": "OnChanged()"
  },
  {
    "label": "PassesFilter()",
    "kind": "Method",
    "detail": "Function (} private : bool bTransientFilterResult ; bool)",
    "insertText": "PassesFilter(const ISceneOutlinerTreeItem& InItem)"
  },
  {
    "label": "bTransientFilterResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bTransientFilterResult(DefaultBehaviour == EDefaultBehaviour::Pass)"
  },
  {
    "label": "TSceneOutlinerFilter()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct TSceneOutlinerFilter : public FSceneOutlinerFilter {)",
    "insertText": "TSceneOutlinerFilter(EDefaultBehaviour InDefaultBehaviour) : FSceneOutlinerFilter(InDefaultBehaviour)"
  },
  {
    "label": "PassesFilterImpl()",
    "kind": "Method",
    "detail": "Function (} return DefaultBehaviour = = EDefaultBehaviour::Pass ; } bool)",
    "insertText": "PassesFilterImpl(const T& InItem)"
  },
  {
    "label": "GetInteractiveStateImpl()",
    "kind": "Method",
    "detail": "Function (} return DefaultBehaviour = = EDefaultBehaviour::Pass ; } bool)",
    "insertText": "GetInteractiveStateImpl(const T& InItem)"
  },
  {
    "label": "TSceneOutlinerPredicateFilter()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T> struct TSceneOutlinerPredicateFilter : public TSceneOutlinerFilter<T> { using TFilterPredicate = T::FFilterPredicate ; using TInteractivePredicate = T::FInteractivePredicate ; TFilterPredicate FilterPred ; TInteractivePredicate InteractivePred ;)",
    "insertText": "TSceneOutlinerPredicateFilter(TFilterPredicate InFilterPred, FSceneOutlinerFilter::EDefaultBehaviour InDefaultBehaviour, TInteractivePredicate InInteractivePredicate = TInteractivePredicate()) : TSceneOutlinerFilter<T>(InDefaultBehaviour) , FilterPred(InFilterPred) , InteractivePred(InInteractivePredicate)"
  },
  {
    "label": "PassesFilterImpl()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "PassesFilterImpl(InItem)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSceneOutlinerFilters : public TFilterCollection<const ISceneOutlinerTreeItem&> { int32)",
    "insertText": "Add(const TSharedPtr<FSceneOutlinerFilter>& Filter)"
  },
  {
    "label": "GetInteractiveState()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "GetInteractiveState(const ISceneOutlinerTreeItem& InItem)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(MakeShareable(new TSceneOutlinerPredicateFilter<T>(InFilterPred, InDefaultBehaviour, InInteractivePred)))"
  }
]