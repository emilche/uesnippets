[
  {
    "label": "FSpatialAccelerationCollisionDetector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSpatialAccelerationCollisionDetector"
  },
  {
    "label": "FSpatialAccelerationCollisionDetector()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Collision / CollisionDetector . h \" # include \" Chaos / Collision / CollisionContext . h \" # include \" Chaos / Collision / SpatialAccelerationBroadPhase . h \" # include \" Chaos / EvolutionResimCache . h \" # include \" Chaos / PBDCollisionConstraints . h \" # include \" ProfilingDebugging / CsvProfiler . h \" namespace Chaos { class FSpatialAccelerationCollisionDetector : public FCollisionDetector { public :)",
    "insertText": "FSpatialAccelerationCollisionDetector(FSpatialAccelerationBroadPhase& InBroadPhase, FPBDCollisionConstraints& InCollisionContainer) : FCollisionDetector(InCollisionContainer) , BroadPhase(InBroadPhase)"
  },
  {
    "label": "GetBroadPhase()",
    "kind": "Method",
    "detail": "Function (} FSpatialAccelerationBroadPhase&)",
    "insertText": "GetBroadPhase()"
  },
  {
    "label": "ProduceOverlaps()",
    "kind": "Method",
    "detail": "Function (BroadPhase .)",
    "insertText": "ProduceOverlaps(Dt, &GetCollisionContainer().GetConstraintAllocator(), GetCollisionContainer().GetDetectorSettings(), ResimCache)"
  },
  {
    "label": "RunNarrowPhase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RunNarrowPhase(const FReal Dt, FEvolutionResimCache* ResimCache)"
  },
  {
    "label": "GetCollisionContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollisionContainer().EndDetectCollisions()"
  },
  {
    "label": "GetCollisionContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollisionContainer().GetConstraintAllocator().SetMaxContexts(1)"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (FCollisionContext Context ; Context .)",
    "insertText": "SetSettings(GetCollisionContainer().GetDetectorSettings())"
  },
  {
    "label": "SetAllocator()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetAllocator(GetCollisionContainer().GetConstraintAllocator().GetContextAllocator(0))"
  },
  {
    "label": "GetCollisionContainer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCollisionContainer().GetConstraintAllocator().AddResimConstraints(ResimCache->GetAndSanitizeConstraints(), Context)"
  },
  {
    "label": "SaveConstraints()",
    "kind": "Method",
    "detail": "Function (ResimCache ->)",
    "insertText": "SaveConstraints(GetCollisionContainer().GetConstraints())"
  },
  {
    "label": "DetectCollisions()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DetectCollisions(const FReal Dt, FEvolutionResimCache* ResimCache)"
  },
  {
    "label": "SCOPE_CYCLE_COUNTER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPE_CYCLE_COUNTER(STAT_Collisions_Detect)"
  },
  {
    "label": "CHAOS_SCOPED_TIMER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CHAOS_SCOPED_TIMER(DetectCollisions)"
  },
  {
    "label": "CSV_SCOPED_TIMING_STAT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSV_SCOPED_TIMING_STAT(Chaos, DetectCollisions)"
  },
  {
    "label": "RunBroadPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunBroadPhase(Dt, ResimCache)"
  },
  {
    "label": "RunNarrowPhase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunNarrowPhase(Dt, ResimCache)"
  }
]