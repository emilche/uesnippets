[
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "FNullDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullDynamicRHI"
  },
  {
    "label": "FNullTexture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNullTexture"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "FNullDynamicRHI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / ResourceArray . h \" # include \" Serialization / LargeMemoryData . h \" # include \" RHI . h \" # include \" RHITypes . h \" # include \" Async / TaskGraphInterfaces . h \" struct Rect ; class FNullDynamicRHI : public FDynamicRHIPSOFallback,public IRHICommandContextPSOFallback { public :)",
    "insertText": "FNullDynamicRHI()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetInterfaceType()",
    "kind": "Method",
    "detail": "Function (} ERHIInterfaceType)",
    "insertText": "GetInterfaceType()"
  },
  {
    "label": "RHICreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (} FRasterizerStateRHIRef)",
    "insertText": "RHICreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (} FDepthStencilStateRHIRef)",
    "insertText": "RHICreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateBlendState()",
    "kind": "Method",
    "detail": "Function (} FBlendStateRHIRef)",
    "insertText": "RHICreateBlendState(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (} FVertexDeclarationRHIRef)",
    "insertText": "RHICreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "RHICreatePixelShader()",
    "kind": "Method",
    "detail": "Function (} FPixelShaderRHIRef)",
    "insertText": "RHICreatePixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateVertexShader()",
    "kind": "Method",
    "detail": "Function (} FVertexShaderRHIRef)",
    "insertText": "RHICreateVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (} FGeometryShaderRHIRef)",
    "insertText": "RHICreateGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateComputeShader()",
    "kind": "Method",
    "detail": "Function (} FComputeShaderRHIRef)",
    "insertText": "RHICreateComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (} FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader)"
  },
  {
    "label": "RHISetComputeShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetComputeShader(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "RHIDispatchComputeShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchComputeShader(uint32 ThreadGroupCountX, uint32 ThreadGroupCountY, uint32 ThreadGroupCountZ)"
  },
  {
    "label": "RHIDispatchIndirectComputeShader()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDispatchIndirectComputeShader(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICreateTransition(FRHITransition* Transition, const FRHITransitionCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReleaseTransition(FRHITransition* Transition)"
  },
  {
    "label": "RHIBeginTransitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHIEndTransitions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndTransitions(TArrayView<const FRHITransition*> Transitions)"
  },
  {
    "label": "RHISetMultipleViewports()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetMultipleViewports(uint32 Count, const FViewportBounds* Data)"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} FUniformBufferRHIRef)",
    "insertText": "RHICreateUniformBuffer(const void* Contents, const FRHIUniformBufferLayout* Layout, EUniformBufferUsage Usage, EUniformBufferValidation Validation)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateUniformBuffer(FRHICommandListBase& RHICmdList, FRHIUniformBuffer* UniformBufferRHI, const void* Contents)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (} FBufferRHIRef)",
    "insertText": "RHICreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& Desc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (CreateInfo . ResourceArray ->)",
    "insertText": "Discard()"
  },
  {
    "label": "FRHIBuffer()",
    "kind": "Method",
    "detail": "Function (} return new)",
    "insertText": "FRHIBuffer(Desc)"
  },
  {
    "label": "LockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "UnlockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockBuffer_BottomOfPipe(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "RHIReplaceResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReplaceResources(FRHICommandListBase& RHICmdList, TArray<FRHIResourceReplaceInfo>&& ReplaceInfos)"
  },
  {
    "label": "RHIClearUAVFloat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIClearUAVFloat(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FVector4f& Values)"
  },
  {
    "label": "RHIClearUAVUint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIClearUAVUint(FRHIUnorderedAccessView* UnorderedAccessViewRHI, const FUintVector4& Values)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (} FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(FRHITextureDesc const& Desc, uint32 FirstMipIndex)"
  },
  {
    "label": "RHIGetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIGetTextureMemoryVisualizeData(FColor* TextureData,int32 SizeX,int32 SizeY,int32 Pitch,int32 PixelSize)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (} } ; FTextureRHIRef)",
    "insertText": "RHICreateTexture(FRHICommandListBase&, const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHIAsyncCreateTexture2D(uint32 SizeX, uint32 SizeY, uint8 Format, uint32 NumMips, ETextureCreateFlags Flags, ERHIAccess InResourceState, void** InitialMipData, uint32 NumInitialMips, const TCHAR* DebugName, FGraphEventRef& OutCompletionEvent)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (const FRHITextureCreateDesc Desc =)",
    "insertText": "Create2D(DebugName, SizeX, SizeY, (EPixelFormat)Format) .SetClearValue(FClearValueBinding::None) .SetFlags(Flags) .SetNumMips(NumMips) .SetInitialState(InResourceState)"
  },
  {
    "label": "FNullTexture()",
    "kind": "Method",
    "detail": "Function (OutCompletionEvent = nullptr ; return new)",
    "insertText": "FNullTexture(Desc)"
  },
  {
    "label": "RHICreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (} FShaderResourceViewRHIRef)",
    "insertText": "RHICreateShaderResourceView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "RHICreateUnorderedAccessView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHIComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIComputeMemorySize(FRHITexture* TextureRHI)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (const FRHITextureCreateDesc Desc =)",
    "insertText": "Create2D(TEXT(\"FNullDynamicRHI::RHIAsyncReallocateTexture2D\"), NewSizeX, NewSizeY, Texture2D->GetFormat()) .SetClearValue(Texture2D->GetClearBinding()) .SetFlags(Texture2D->GetFlags()) .SetNumMips(NewMipCount) .SetNumSamples(Texture2D->GetNumSamples())"
  },
  {
    "label": "RHIFinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (} ETextureReallocationStatus)",
    "insertText": "RHIFinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "GetStaticTextureBuffer()",
    "kind": "Method",
    "detail": "Function (DestStride = 0 ; return)",
    "insertText": "GetStaticTextureBuffer(Texture->GetSizeX(), Texture->GetSizeY(), Texture->GetFormat(), DestStride, OutLockedByteCount)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "GetStaticTextureBuffer()",
    "kind": "Method",
    "detail": "Function (DestStride = 0 ; return)",
    "insertText": "GetStaticTextureBuffer(Texture->GetSizeX(), Texture->GetSizeY(), Texture->GetFormat(), DestStride)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTexture2D(FRHICommandListBase&, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTexture3D(FRHICommandListBase&, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "GetStaticTextureBuffer()",
    "kind": "Method",
    "detail": "Function (DestStride = 0 ; return)",
    "insertText": "GetStaticTextureBuffer(Texture->GetSize(), Texture->GetSize(), Texture->GetFormat(), DestStride)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHICopyTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICopyTexture(FRHITexture* SourceTexture, FRHITexture* DestTexture, const FRHICopyTextureInfo& CopyInfo)"
  },
  {
    "label": "RHICopyBufferRegion()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICopyBufferRegion(FRHIBuffer* DestBuffer, uint64 DstOffset, FRHIBuffer* SourceBuffer, uint64 SrcOffset, uint64 NumBytes)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList, FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture,FIntRect Rect,TArray<FColor>& OutData,FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (OutData .)",
    "insertText": "AddZeroed(Rect.Width() * Rect.Height())"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIMapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,TArray<FFloat16Color>& OutData,ECubeFace CubeFace,int32 ArrayIndex,int32 MipIndex)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture,FIntRect Rect,FIntPoint ZMinMax,TArray<FFloat16Color>& OutData)"
  },
  {
    "label": "RHICreateRenderQuery()",
    "kind": "Method",
    "detail": "Function (} FRenderQueryRHIRef)",
    "insertText": "RHICreateRenderQuery(ERenderQueryType QueryType)"
  },
  {
    "label": "RHIBeginRenderQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndRenderQuery(FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIGetRenderQueryResult()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIGetRenderQueryResult(FRHIRenderQuery* RenderQuery, uint64& OutResult, bool bWait, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIEndDrawingViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndDrawingViewport(FRHIViewport* Viewport, bool bPresent, bool bLockToVsync)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHIGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "Create2D()",
    "kind": "Method",
    "detail": "Function (const FRHITextureCreateDesc Desc =)",
    "insertText": "Create2D(TEXT(\"FNullDynamicRHI::RHIGetViewportBackBuffer\"), 1, 1, PF_B8G8R8A8) .SetFlags(ETextureCreateFlags::RenderTargetable)"
  },
  {
    "label": "RHIEndFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndFrame(const FRHIEndFrameArgs& Args)"
  },
  {
    "label": "RHIAliasTextureResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIAliasTextureResources(FTextureRHIRef& DestTexture, FTextureRHIRef& SrcTexture)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIGetGPUFrameCycles()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIGetGPUFrameCycles(uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen)"
  },
  {
    "label": "RHICheckViewportHDRStatus()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHICheckViewportHDRStatus(FRHIViewport* Viewport)"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHITick(float DeltaTime)"
  },
  {
    "label": "RHISetStreamSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetStreamSource(uint32 StreamIndex, FRHIBuffer* VertexBuffer, uint32 Offset)"
  },
  {
    "label": "RHISetRasterizerState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetRasterizerState(FRHIRasterizerState* NewState)"
  },
  {
    "label": "RHISetViewport()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetViewport(float MinX, float MinY, float MinZ, float MaxX, float MaxY, float MaxZ)"
  },
  {
    "label": "RHISetScissorRect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetScissorRect(bool bEnable, uint32 MinX, uint32 MinY, uint32 MaxX, uint32 MaxY)"
  },
  {
    "label": "RHISetBoundShaderState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetBoundShaderState(FRHIBoundShaderState* BoundShaderState)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderParameters(FRHIGraphicsShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetShaderParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShaderParameters(FRHIComputeShader* Shader, TConstArrayView<uint8> InParametersData, TConstArrayView<FRHIShaderParameter> InParameters, TConstArrayView<FRHIShaderParameterResource> InResourceParameters, TConstArrayView<FRHIShaderParameterResource> InBindlessParameters)"
  },
  {
    "label": "RHISetDepthStencilState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetDepthStencilState(FRHIDepthStencilState* NewState, uint32 StencilRef)"
  },
  {
    "label": "RHISetBlendState()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetBlendState(FRHIBlendState* NewState, const FLinearColor& BlendFactor)"
  },
  {
    "label": "RHIBeginRenderPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderPass(const FRHIRenderPassInfo& InInfo, const TCHAR* InName)"
  },
  {
    "label": "RHIEndRenderPass()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndRenderPass()"
  },
  {
    "label": "RHIDrawPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawPrimitive(uint32 BaseVertexIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawPrimitiveIndirect(FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIDrawIndexedIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawIndexedIndirect(FRHIBuffer* IndexBufferRHI, FRHIBuffer* ArgumentsBufferRHI, int32 DrawArgumentsIndex, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitive()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawIndexedPrimitive(FRHIBuffer* IndexBuffer, int32 BaseVertexIndex, uint32 FirstInstance, uint32 NumVertices, uint32 StartIndex, uint32 NumPrimitives, uint32 NumInstances)"
  },
  {
    "label": "RHIDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset)"
  },
  {
    "label": "RHIMultiDrawIndexedPrimitiveIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIMultiDrawIndexedPrimitiveIndirect(FRHIBuffer* IndexBuffer, FRHIBuffer* ArgumentBuffer, uint32 ArgumentOffset, FRHIBuffer* CountBuffer, uint32 CountBufferOffset, uint32 MaxDrawArguments)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "RHIGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "RHIEnableDepthBoundsTest()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEnableDepthBoundsTest(bool bEnable)"
  },
  {
    "label": "RHISetDepthBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetDepthBounds(float MinDepth, float MaxDepth)"
  },
  {
    "label": "RHISetShadingRate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISetShadingRate(EVRSShadingRate ShadingRate, EVRSRateCombiner Combiner)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIEndBreadcrumbGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndBreadcrumbGPU(FRHIBreadcrumbNode* Breadcrumb)"
  },
  {
    "label": "RHIGetDefaultContext()",
    "kind": "Method",
    "detail": "Function (} # endif class IRHICommandContext*)",
    "insertText": "RHIGetDefaultContext()"
  },
  {
    "label": "RHISubmitCommandLists()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISubmitCommandLists(FRHISubmitCommandListsArgs&& Args)"
  },
  {
    "label": "GetStaticBuffer()",
    "kind": "Method",
    "detail": "Function (} private : FLargeMemoryData MemoryBuffer ; void*)",
    "insertText": "GetStaticBuffer(size_t Size)"
  },
  {
    "label": "GetStaticTextureBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetStaticTextureBuffer(int32 SizeX, int32 SizeY, EPixelFormat Format, uint32& DestStride, uint64* OutLockedByteCount = nullptr)"
  }
]