[
  {
    "label": "TestCanRunPolicyBasic()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_CAN_RUN_POLICY_TEST_H_ # define BASE_TASK_THREAD_POOL_CAN_RUN_POLICY_TEST_H_ # include \" base / synchronization / atomic_flag . h \" # include \" base / task / task_runner . h \" # include \" base / task / thread_pool / task_tracker . h \" # include \" base / task / thread_pool / test_utils . h \" # include \" base / test / bind . h \" # include \" base / test / test_timeouts . h \" # include \" base / test / test_waitable_event . h \" # include \" base / threading / platform_thread . h \" # include \" build / build_config . h \" namespace base { namespace internal { namespace test { template<Target,CreateTaskRunner> void)",
    "insertText": "TestCanRunPolicyBasic(Target* target, CreateTaskRunner create_task_runner, TaskTracker* task_tracker)"
  },
  {
    "label": "SetCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (AtomicFlag foreground_can_run ; TestWaitableEvent foreground_did_run ; AtomicFlag best_effort_can_run ; TestWaitableEvent best_effort_did_run ; task_tracker ->)",
    "insertText": "SetCanRunPolicy(CanRunPolicy::kNone)"
  },
  {
    "label": "DidUpdateCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (target ->)",
    "insertText": "DidUpdateCanRunPolicy()"
  },
  {
    "label": "create_task_runner()",
    "kind": "Method",
    "detail": "Function (const auto user_visible_task_runner =)",
    "insertText": "create_task_runner(TaskPriority::USER_VISIBLE)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (user_visible_task_runner ->)",
    "insertText": "PostTask(FROM_HERE, BindLambdaForTesting([&]() { EXPECT_TRUE(foreground_can_run.IsSet()); foreground_did_run.Signal(); }))"
  },
  {
    "label": "create_task_runner()",
    "kind": "Method",
    "detail": "Function (const auto best_effort_task_runner =)",
    "insertText": "create_task_runner(TaskPriority::BEST_EFFORT)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (best_effort_task_runner ->)",
    "insertText": "PostTask(FROM_HERE, BindLambdaForTesting([&]() { EXPECT_TRUE(best_effort_can_run.IsSet()); best_effort_did_run.Signal(); }))"
  },
  {
    "label": "Sleep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sleep(TestTimeouts::tiny_timeout())"
  },
  {
    "label": "SetCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (task_tracker ->)",
    "insertText": "SetCanRunPolicy(CanRunPolicy::kForegroundOnly)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (best_effort_can_run .)",
    "insertText": "Set()"
  },
  {
    "label": "SetCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (task_tracker ->)",
    "insertText": "SetCanRunPolicy(CanRunPolicy::kAll)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (best_effort_did_run .)",
    "insertText": "Wait()"
  },
  {
    "label": "TestCanRunPolicyChangedBeforeRun()",
    "kind": "Method",
    "detail": "Function (} template<Target,CreateTaskRunner> void)",
    "insertText": "TestCanRunPolicyChangedBeforeRun(Target* target, CreateTaskRunner create_task_runner, TaskTracker* task_tracker)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (struct { const char* descriptor ; TaskPriority priority ; CanRunPolicy disallow_policy ; CanRunPolicy allow_policy ; } kTestCases [ ] = { { \" BestEffort / kNone / kAll \",TaskPriority::BEST_EFFORT,CanRunPolicy::kNone,CanRunPolicy::kAll },{ \" BestEffort / kForegroundOnly / kAll \",TaskPriority::BEST_EFFORT,CanRunPolicy::kForegroundOnly,CanRunPolicy::kAll },{ \" UserVisible / kNone / kForegroundOnly \",TaskPriority::USER_VISIBLE,CanRunPolicy::kNone,CanRunPolicy::kForegroundOnly },{ \" UserVisible / kNone / kAll \",TaskPriority::USER_VISIBLE,CanRunPolicy::kNone,CanRunPolicy::kAll } } ;)",
    "insertText": "for(auto& test_case : kTestCases)"
  },
  {
    "label": "SCOPED_TRACE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_TRACE(test_case.descriptor)"
  },
  {
    "label": "SetCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (TestWaitableEvent first_task_started ; TestWaitableEvent first_task_blocked ; AtomicFlag second_task_can_run ; task_tracker ->)",
    "insertText": "SetCanRunPolicy(test_case.allow_policy)"
  },
  {
    "label": "create_task_runner()",
    "kind": "Method",
    "detail": "Function (const auto task_runner =)",
    "insertText": "create_task_runner(test_case.priority)"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (task_runner ->)",
    "insertText": "PostTask(FROM_HERE, BindLambdaForTesting([&]() { first_task_started.Signal(); first_task_blocked.Wait(); }))"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (task_runner ->)",
    "insertText": "PostTask(FROM_HERE, BindLambdaForTesting([&]() { EXPECT_TRUE(second_task_can_run.IsSet()); }))"
  },
  {
    "label": "SetCanRunPolicy()",
    "kind": "Method",
    "detail": "Function (task_tracker ->)",
    "insertText": "SetCanRunPolicy(test_case.disallow_policy)"
  },
  {
    "label": "Signal()",
    "kind": "Method",
    "detail": "Function (first_task_blocked .)",
    "insertText": "Signal()"
  },
  {
    "label": "FlushForTesting()",
    "kind": "Method",
    "detail": "Function (task_tracker ->)",
    "insertText": "FlushForTesting()"
  },
  {
    "label": "TestCanRunPolicyLoad()",
    "kind": "Method",
    "detail": "Function (} } template<Target,CreateTaskRunner> void)",
    "insertText": "TestCanRunPolicyLoad(Target* target, CreateTaskRunner create_task_runner, TaskTracker* task_tracker)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (const size_t kLargeNumber = # if)",
    "insertText": "BUILDFLAG(IS_IOS)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# else 2 5 6 ; # endif)",
    "insertText": "for(size_t i = 0; i < kLargeNumber; ++i) task_runner->PostTask(FROM_HERE, DoNothing())"
  }
]