[
  {
    "label": "calculate_dqcoeff_and_store_32x32()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_VPX_DSP_X86_QUANTIZE_SSSE3_H_ # define VPX_VPX_DSP_X86_QUANTIZE_SSSE3_H_ # include<emmintrin . h> # include \" . / vpx_config . h \" # include \" vpx / vpx_integer . h \" # include \" vpx_dsp / x86 / quantize_sse2 . h \" void)",
    "insertText": "calculate_dqcoeff_and_store_32x32(const __m128i qcoeff, const __m128i dequant, const __m128i zero, tran_low_t *dqcoeff)"
  },
  {
    "label": "_mm_abs_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i coeff =)",
    "insertText": "_mm_abs_epi16(qcoeff)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_0 =)",
    "insertText": "_mm_unpacklo_epi16(zero, qcoeff)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i sign_1 =)",
    "insertText": "_mm_unpackhi_epi16(zero, qcoeff)"
  },
  {
    "label": "_mm_mullo_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i low =)",
    "insertText": "_mm_mullo_epi16(coeff, dequant)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (const __m128i high =)",
    "insertText": "_mm_mulhi_epi16(coeff, dequant)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i dqcoeff32_0 =)",
    "insertText": "_mm_unpacklo_epi16(low, high)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i dqcoeff32_1 =)",
    "insertText": "_mm_unpackhi_epi16(low, high)"
  },
  {
    "label": "_mm_srli_epi32()",
    "kind": "Method",
    "detail": "Function (dqcoeff32_0 =)",
    "insertText": "_mm_srli_epi32(dqcoeff32_0, 1)"
  },
  {
    "label": "_mm_srli_epi32()",
    "kind": "Method",
    "detail": "Function (dqcoeff32_1 =)",
    "insertText": "_mm_srli_epi32(dqcoeff32_1, 1)"
  },
  {
    "label": "_mm_sign_epi32()",
    "kind": "Method",
    "detail": "Function (dqcoeff32_0 =)",
    "insertText": "_mm_sign_epi32(dqcoeff32_0, sign_0)"
  },
  {
    "label": "_mm_sign_epi32()",
    "kind": "Method",
    "detail": "Function (dqcoeff32_1 =)",
    "insertText": "_mm_sign_epi32(dqcoeff32_1, sign_1)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (# if CONFIG_VP9_HIGHBITDEPTH)",
    "insertText": "_mm_store_si128((__m128i *)(dqcoeff), dqcoeff32_0)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_store_si128((__m128i *)(dqcoeff + 4), dqcoeff32_1)"
  },
  {
    "label": "_mm_store_si128()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "_mm_store_si128((__m128i *)(dqcoeff), _mm_packs_epi32(dqcoeff32_0, dqcoeff32_1))"
  }
]