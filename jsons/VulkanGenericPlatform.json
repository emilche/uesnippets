[
  {
    "label": "FOptionalVulkanDeviceExtensions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOptionalVulkanDeviceExtensions"
  },
  {
    "label": "FVulkanDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDevice"
  },
  {
    "label": "FVulkanRenderTargetLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanRenderTargetLayout"
  },
  {
    "label": "FGfxPipelineDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGfxPipelineDesc"
  },
  {
    "label": "FVulkanPhysicalDeviceFeatures",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanPhysicalDeviceFeatures"
  },
  {
    "label": "FVulkanCmdBuffer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanCmdBuffer"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FVulkanDeviceExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanDeviceExtension"
  },
  {
    "label": "FVulkanInstanceExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanInstanceExtension"
  },
  {
    "label": "FVulkanGenericPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVulkanGenericPlatform"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" PixelFormat . h \" # include \" Templates / UniquePtr . h \" # include \" VulkanThirdParty . h \" struct FOptionalVulkanDeviceExtensions ; class FVulkanDevice ; class FVulkanRenderTargetLayout ; struct FGfxPipelineDesc ; class FVulkanPhysicalDeviceFeatures ; class FVulkanCmdBuffer ; enum EShaderPlatform : uint16 ; enum class EGpuVendorId : uint32 ; namespace ERHIFeatureLevel { enum Type : int ; } using FVulkanDeviceExtensionArray = TArray<TUniquePtr<class FVulkanDeviceExtension>> ; using FVulkanInstanceExtensionArray = TArray<TUniquePtr<class FVulkanInstanceExtension>> ; class FVulkanGenericPlatform { public : bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "ClearVulkanInstanceFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearVulkanInstanceFunctions()"
  },
  {
    "label": "FreeVulkanLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeVulkanLibrary()"
  },
  {
    "label": "InitDevice()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitDevice(FVulkanDevice* InDevice)"
  },
  {
    "label": "PostInitGPU()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostInitGPU(const FVulkanDevice& InDevice)"
  },
  {
    "label": "NotifyFoundInstanceLayersAndExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyFoundInstanceLayersAndExtensions(const TArray<const ANSICHAR*>& Layers, const TArray<const ANSICHAR*>& Extensions)"
  },
  {
    "label": "NotifyFoundDeviceLayersAndExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyFoundDeviceLayersAndExtensions(VkPhysicalDevice PhysicalDevice, const TArray<const ANSICHAR*>& Layers, const TArray<const ANSICHAR*>& Extensions)"
  },
  {
    "label": "GetInstanceExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetInstanceExtensions(FVulkanInstanceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetInstanceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInstanceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "GetDeviceExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetDeviceExtensions(FVulkanDevice* Device, FVulkanDeviceExtensionArray& OutExtensions)"
  },
  {
    "label": "GetDeviceLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDeviceLayers(TArray<const ANSICHAR*>& OutLayers)"
  },
  {
    "label": "CreateSurface()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CreateSurface(VkSurfaceKHR* OutSurface)"
  },
  {
    "label": "SupportsBCTextureFormats()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsBCTextureFormats()"
  },
  {
    "label": "SupportsTimestampRenderQueries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsTimestampRenderQueries()"
  },
  {
    "label": "OverridePlatformHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverridePlatformHandlers(bool bInit)"
  },
  {
    "label": "RequiresPresentLayoutFix()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresPresentLayoutFix()"
  },
  {
    "label": "WriteCrashMarkerWithoutExtensions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WriteCrashMarkerWithoutExtensions(FVulkanCmdBuffer* CmdBuffer, VkBuffer DestBuffer, const TArrayView<uint32>& Entries, bool bAdding)"
  },
  {
    "label": "RestrictEnabledPhysicalDeviceFeatures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestrictEnabledPhysicalDeviceFeatures(FVulkanPhysicalDeviceFeatures* InOutFeaturesToEnable)"
  },
  {
    "label": "SupportParallelRenderingTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportParallelRenderingTasks()"
  },
  {
    "label": "CreateSwapchainKHR()",
    "kind": "Method",
    "detail": "Function (VkResult)",
    "insertText": "CreateSwapchainKHR(void* WindowHandle, VkPhysicalDevice PhysicalDevice, VkDevice Device, const VkSwapchainCreateInfoKHR* CreateInfo, const VkAllocationCallbacks* Allocator, VkSwapchainKHR* Swapchain)"
  },
  {
    "label": "DestroySwapchainKHR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySwapchainKHR(VkDevice Device, VkSwapchainKHR Swapchain, const VkAllocationCallbacks* Allocator)"
  },
  {
    "label": "RecreateSwapchainOnFail()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateSwapchainOnFail()"
  },
  {
    "label": "CreatePSOBinaryCacheFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreatePSOBinaryCacheFilename(FVulkanDevice* Device, FString CacheFilename)"
  },
  {
    "label": "GetPSOCacheFilenames()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetPSOCacheFilenames()"
  },
  {
    "label": "PrecompilePSO()",
    "kind": "Method",
    "detail": "Function (VkPipelineCache)",
    "insertText": "PrecompilePSO(FVulkanDevice* Device, const uint8* OptionalPSOCacheData,VkGraphicsPipelineCreateInfo* PipelineInfo, const FGfxPipelineDesc* GfxEntry, const FVulkanRenderTargetLayout* RTLayout, TArrayView<uint32_t> VS, TArrayView<uint32_t> PS, size_t& AfterSize, FString* FailureMessageOUT = nullptr)"
  },
  {
    "label": "SupportsProfileChecks()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "SupportsProfileChecks()"
  },
  {
    "label": "GetVulkanProfileNameForFeatureLevel()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetVulkanProfileNameForFeatureLevel(ERHIFeatureLevel::Type FeatureLevel, bool bRaytracing)"
  },
  {
    "label": "RequiredWaveOpsShaderStageFlags()",
    "kind": "Method",
    "detail": "Function (VkShaderStageFlags)",
    "insertText": "RequiredWaveOpsShaderStageFlags(VkShaderStageFlags VulkanDeviceShaderStageFlags)"
  }
]