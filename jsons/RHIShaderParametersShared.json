[
  {
    "label": "GetBindlessParameterHandle()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" RHIShaderParameters . h \" namespace UE::RHICore { FRHIDescriptorHandle)",
    "insertText": "GetBindlessParameterHandle(const FRHIShaderParameterResource& Parameter)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkf(false, TEXT(\"Unhandled resource type?\"))"
  },
  {
    "label": "FRHIDescriptorHandle()",
    "kind": "Method",
    "detail": "Function (break ; } } return)",
    "insertText": "FRHIDescriptorHandle()"
  },
  {
    "label": "SetShaderUAV()",
    "kind": "Method",
    "detail": "Function (} template<FContextRHI> void)",
    "insertText": "SetShaderUAV(FContextRHI& Context, FRHIGraphicsShader* ShaderRHI, uint16 Index, FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "RHISetUAVParameter()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "RHISetUAVParameter(static_cast<FRHIPixelShader*>(ShaderRHI), Index, UAV)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "checkf(false, TEXT(\"TShaderRHI Can't have compute shader to be set. UAVs are not supported on vertex, tessellation and geometry shaders.\"))"
  },
  {
    "label": "SetShaderUAV()",
    "kind": "Method",
    "detail": "Function (} } template<FContextRHI> void)",
    "insertText": "SetShaderUAV(FContextRHI& Context, FRHIComputeShader* ShaderRHI, uint16 Index, FRHIUnorderedAccessView* UAV)"
  },
  {
    "label": "RHISetUAVParameter()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "RHISetUAVParameter(ShaderRHI, Index, UAV)"
  },
  {
    "label": "RHISetShaderParametersShared()",
    "kind": "Method",
    "detail": "Function (} template<FContextRHI,TShaderRHI> void)",
    "insertText": "RHISetShaderParametersShared(FContextRHI& Context , TShaderRHI* ShaderRHI , TConstArrayView<uint8> InParametersData , TConstArrayView<FRHIShaderParameter> InParameters , TConstArrayView<FRHIShaderParameterResource> InResourceParameters , TConstArrayView<FRHIShaderParameterResource> InBindlessParameters , bool bBindUAVsFirst = true)"
  },
  {
    "label": "RHISetShaderParameter()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "RHISetShaderParameter(ShaderRHI, Parameter.BufferIndex, Parameter.BaseIndex, Parameter.ByteSize, &InParametersData[Parameter.ByteOffset])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } # if PLATFORM_SUPPORTS_BINDLESS_RENDERING)",
    "insertText": "for(const FRHIShaderParameterResource& Parameter : InBindlessParameters)"
  },
  {
    "label": "GetBindlessParameterHandle()",
    "kind": "Method",
    "detail": "Function (const FRHIDescriptorHandle Handle =)",
    "insertText": "GetBindlessParameterHandle(Parameter)"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 BindlessIndex = Handle .)",
    "insertText": "GetIndex()"
  },
  {
    "label": "RHISetShaderParameter()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "RHISetShaderParameter(ShaderRHI, 0, Parameter.Index, 4, &BindlessIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } # endif)",
    "insertText": "if(bBindUAVsFirst)"
  },
  {
    "label": "SetShaderUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShaderUAV(Context, ShaderRHI, Parameter.Index, static_cast<FRHIUnorderedAccessView*>(Parameter.Resource))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(const FRHIShaderParameterResource& Parameter : InResourceParameters)"
  },
  {
    "label": "RHISetShaderResourceViewParameter()",
    "kind": "Method",
    "detail": "Function (break ; case FRHIShaderParameterResource::EType::ResourceView : Context .)",
    "insertText": "RHISetShaderResourceViewParameter(ShaderRHI, Parameter.Index, static_cast<FRHIShaderResourceView*>(Parameter.Resource))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case FRHIShaderParameterResource::EType::UnorderedAccessView :)",
    "insertText": "if(!bBindUAVsFirst)"
  },
  {
    "label": "RHISetShaderSampler()",
    "kind": "Method",
    "detail": "Function (} break ; case FRHIShaderParameterResource::EType::Sampler : Context .)",
    "insertText": "RHISetShaderSampler(ShaderRHI, Parameter.Index, static_cast<FRHISamplerState*>(Parameter.Resource))"
  },
  {
    "label": "RHISetShaderUniformBuffer()",
    "kind": "Method",
    "detail": "Function (break ; case FRHIShaderParameterResource::EType::UniformBuffer : Context .)",
    "insertText": "RHISetShaderUniformBuffer(ShaderRHI, Parameter.Index, static_cast<FRHIUniformBuffer*>(Parameter.Resource))"
  },
  {
    "label": "RHISetShaderUnbindsShared()",
    "kind": "Method",
    "detail": "Function (break ; } } } template<FContextRHI,TShaderRHI> void)",
    "insertText": "RHISetShaderUnbindsShared(FContextRHI& Context, TShaderRHI* ShaderRHI, TConstArrayView<FRHIShaderParameterUnbind> InUnbinds)"
  },
  {
    "label": "SetShaderUAV()",
    "kind": "Method",
    "detail": "Function (break ; case FRHIShaderParameterUnbind::EType::UnorderedAccessView :)",
    "insertText": "SetShaderUAV(Context, ShaderRHI, Unbind.Index, nullptr)"
  }
]