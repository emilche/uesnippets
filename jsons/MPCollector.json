[
  {
    "label": "FCbObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObject"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FCookWorkerClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerClient"
  },
  {
    "label": "FCookWorkerServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookWorkerServer"
  },
  {
    "label": "FWorkerId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorkerId"
  },
  {
    "label": "FMPCollectorClientTickContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMPCollectorClientTickContext"
  },
  {
    "label": "FMPCollectorServerTickContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMPCollectorServerTickContext"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCookDirector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookDirector"
  },
  {
    "label": "FMPCollectorClientTickPackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMPCollectorClientTickPackageContext"
  },
  {
    "label": "FPlatformData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformData"
  },
  {
    "label": "FMPCollectorServerTickPackageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMPCollectorServerTickPackageContext"
  },
  {
    "label": "FMPCollectorClientMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMPCollectorClientMessageContext"
  },
  {
    "label": "FMPCollectorServerMessageContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMPCollectorServerMessageContext"
  },
  {
    "label": "IMPCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMPCollector"
  },
  {
    "label": "IMPCollectorMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMPCollectorMessage"
  },
  {
    "label": "IMPCollectorForMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMPCollectorForMessage"
  },
  {
    "label": "TMPCollectorClientMessageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMPCollectorClientMessageCallback"
  },
  {
    "label": "TMPCollectorServerMessageCallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMPCollectorServerMessageCallback"
  },
  {
    "label": "FWorkerId()",
    "kind": "Method",
    "detail": "Function (# pragma once # if WITH_EDITOR # include \" Async / Future . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" Misc / Guid . h \" # include \" Serialization / CompactBinary . h \" # include \" Templates / Function . h \" # include \" Templates / RefCounting . h \" # include \" UObject / CookEnums . h \" # endif # if WITH_EDITOR class FCbObject ; class FCbObjectView ; class FCbWriter ; class ITargetPlatform ; namespace UE::Cook { class FCookWorkerClient ; } namespace UE::Cook { class FCookWorkerServer ; } namespace UE::Cook { struct FWorkerId { public :)",
    "insertText": "FWorkerId()"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (Id = InvalidId ; } FWorkerId)",
    "insertText": "Invalid()"
  },
  {
    "label": "Local()",
    "kind": "Method",
    "detail": "Function (} FWorkerId)",
    "insertText": "Local()"
  },
  {
    "label": "FromRemoteIndex()",
    "kind": "Method",
    "detail": "Function (} FWorkerId)",
    "insertText": "FromRemoteIndex(uint8 Index)"
  },
  {
    "label": "FromLocalOrRemoteIndex()",
    "kind": "Method",
    "detail": "Function (} FWorkerId)",
    "insertText": "FromLocalOrRemoteIndex(uint8 Index)"
  },
  {
    "label": "GetMaxCookWorkerCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetMaxCookWorkerCount()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FWorkerId()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FWorkerId(uint8 InId) : Id(InId)"
  },
  {
    "label": "GetPlatforms()",
    "kind": "Method",
    "detail": "Function (} private : uint8 Id ; uint8 InvalidId = 2 5 5 ; uint8 LocalId = 0 ; } ; class FMPCollectorClientTickContext { public : TConstArrayView<const ITargetPlatform*>)",
    "insertText": "GetPlatforms()"
  },
  {
    "label": "PlatformToInt()",
    "kind": "Method",
    "detail": "Function (uint8)",
    "insertText": "PlatformToInt(const ITargetPlatform* Platform)"
  },
  {
    "label": "IntToPlatform()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform*)",
    "insertText": "IntToPlatform(uint8 PlatformAsInt)"
  },
  {
    "label": "FMPCollectorServerTickContext()",
    "kind": "Method",
    "detail": "Function (private : TConstArrayView<const ITargetPlatform*> Platforms ; TArray<FCbObject> Messages ; bool bFlush = false ; class FCookWorkerClient ; } ; class FMPCollectorServerTickContext { public : enum class EServerEventType : uint8 { WorkerStartup,Count } ;)",
    "insertText": "FMPCollectorServerTickContext(EServerEventType InEventType) : EventType(InEventType)"
  },
  {
    "label": "GetEventType()",
    "kind": "Method",
    "detail": "Function (EServerEventType)",
    "insertText": "GetEventType()"
  },
  {
    "label": "AddAsyncMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsyncMessage(TFuture<FCbObject>&& ObjectFuture)"
  },
  {
    "label": "AddPlatformMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPlatformMessage(const ITargetPlatform* Platform, FCbObject Object)"
  },
  {
    "label": "AddAsyncPlatformMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAsyncPlatformMessage(const ITargetPlatform* Platform, TFuture<FCbObject>&& ObjectFuture)"
  },
  {
    "label": "GetPackageName()",
    "kind": "Method",
    "detail": "Function (private : TArray<TPair<const ITargetPlatform*,FCbObject>> Messages ; TArray<TPair<const ITargetPlatform*,TFuture<FCbObject>>> AsyncMessages ; TConstArrayView<const ITargetPlatform*> Platforms ; TConstArrayView<FPlatformData> PlatformDatas ; FName PackageName ; class FCookWorkerClient ; } ; class FMPCollectorServerTickPackageContext { public : struct FPlatformData { const ITargetPlatform* TargetPlatform = nullptr ; ECookResult CookResults = ECookResult::NotAttempted ; } ; FName)",
    "insertText": "GetPackageName()"
  },
  {
    "label": "GetWorkerId()",
    "kind": "Method",
    "detail": "Function (FWorkerId)",
    "insertText": "GetWorkerId()"
  },
  {
    "label": "GetMessageType()",
    "kind": "Method",
    "detail": "Function (} FGuid)",
    "insertText": "GetMessageType()"
  },
  {
    "label": "GetDebugName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetDebugName()"
  },
  {
    "label": "ServerTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerTick(FMPCollectorServerTickContext& Context)"
  },
  {
    "label": "ClientTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientTick(FMPCollectorClientTickContext& Context)"
  },
  {
    "label": "ServerTickPackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ServerTickPackage(FMPCollectorServerTickPackageContext& Context)"
  },
  {
    "label": "ClientTickPackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientTickPackage(FMPCollectorClientTickPackageContext& Context)"
  },
  {
    "label": "ClientReceiveMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientReceiveMessage(FMPCollectorClientMessageContext& Context, FCbObjectView Message)"
  },
  {
    "label": "ServerReceiveMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ServerReceiveMessage(FMPCollectorServerMessageContext& Context, FCbObjectView Message)"
  },
  {
    "label": "IMPCollectorMessage()",
    "kind": "Method",
    "detail": "Function (} } ; class IMPCollectorMessage { public : ~)",
    "insertText": "IMPCollectorMessage()"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Write(FCbWriter& Writer)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryRead(FCbObjectView Object)"
  },
  {
    "label": "ClientReceiveMessage()",
    "kind": "Method",
    "detail": "Function (} ; template<MessageType> class IMPCollectorForMessage : public IMPCollector { public : void)",
    "insertText": "ClientReceiveMessage(FMPCollectorClientMessageContext& Context, bool bReadSuccessful, MessageType&& Message)"
  },
  {
    "label": "ServerReceiveMessage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ServerReceiveMessage(FMPCollectorServerMessageContext& Context, bool bReadSuccessful, MessageType&& Message)"
  },
  {
    "label": "TryRead()",
    "kind": "Method",
    "detail": "Function (MessageType CBMessage ; bool bReadSuccessful = CBMessage .)",
    "insertText": "TryRead(Message)"
  },
  {
    "label": "ClientReceiveMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientReceiveMessage(Context, bReadSuccessful, MoveTemp(CBMessage))"
  },
  {
    "label": "ServerReceiveMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerReceiveMessage(Context, bReadSuccessful, MoveTemp(CBMessage))"
  },
  {
    "label": "TMPCollectorClientMessageCallback()",
    "kind": "Method",
    "detail": "Function (} } ; template<MessageType> class TMPCollectorClientMessageCallback : public IMPCollectorForMessage<MessageType> { public :)",
    "insertText": "TMPCollectorClientMessageCallback(TUniqueFunction<void(FMPCollectorClientMessageContext& Context, bool bReadSuccessful, MessageType&& Message)>&& InCallback) : Callback(MoveTemp(InCallback))"
  },
  {
    "label": "Callback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Callback(Context, bReadSuccessful, MoveTemp(Message))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : TUniqueFunction<)",
    "insertText": "void(FMPCollectorClientMessageContext& Context, bool bReadSuccessful, MessageType&& Message)"
  },
  {
    "label": "TMPCollectorServerMessageCallback()",
    "kind": "Method",
    "detail": "Function (} ; template<MessageType> class TMPCollectorServerMessageCallback : public IMPCollectorForMessage<MessageType> { public :)",
    "insertText": "TMPCollectorServerMessageCallback(TUniqueFunction<void(FMPCollectorServerMessageContext& Context, bool bReadSuccessful, MessageType&& Message)>&& InCallback) : Callback(MoveTemp(InCallback))"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} private : TUniqueFunction<)",
    "insertText": "void(FMPCollectorServerMessageContext& Context, bool bReadSuccessful, MessageType&& Message)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} ; FString)",
    "insertText": "ToString()"
  }
]