[
  {
    "label": "CodecSpecificInfoVP8",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CodecSpecificInfoVP8"
  },
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "ScreenshareLayers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScreenshareLayers"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "DependencyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DependencyInfo"
  },
  {
    "label": "TemporalLayer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TemporalLayer"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "ScreenshareLayers()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP8_SCREENSHARE_LAYERS_H_ # define MODULES_VIDEO_CODING_CODECS_VP8_SCREENSHARE_LAYERS_H_ # include<map> # include<memory> # include<utility> # include<vector> # include \" api / video_codecs / vp8_frame_config . h \" # include \" api / video_codecs / vp8_temporal_layers . h \" # include \" modules / video_coding / codecs / vp8 / include / temporal_layers_checker . h \" # include \" modules / video_coding / include / video_codec_interface . h \" # include \" modules / video_coding / utility / frame_dropper . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / time_utils . h \" namespace webrtc { struct CodecSpecificInfoVP8 ; class Clock ; class ScreenshareLayers final : public Vp8FrameBufferController { public : const double kMaxTL0FpsReduction ; const double kAcceptableTargetOvershoot ; const int kMaxFrameIntervalMs ;)",
    "insertText": "ScreenshareLayers(int num_temporal_layers)"
  },
  {
    "label": "ScreenshareLayers()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScreenshareLayers()"
  },
  {
    "label": "SetQpLimits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQpLimits(size_t stream_index, int min_qp, int max_qp)"
  },
  {
    "label": "StreamCount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "StreamCount()"
  },
  {
    "label": "SupportsEncoderFrameDropping()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsEncoderFrameDropping(size_t stream_index)"
  },
  {
    "label": "NextFrameConfig()",
    "kind": "Method",
    "detail": "Function (Vp8FrameConfig)",
    "insertText": "NextFrameConfig(size_t stream_index, uint32_t rtp_timestamp)"
  },
  {
    "label": "OnRatesUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRatesUpdated(size_t stream_index, const std::vector<uint32_t>& bitrates_bps, int framerate_fps)"
  },
  {
    "label": "UpdateConfiguration()",
    "kind": "Method",
    "detail": "Function (Vp8EncoderConfig)",
    "insertText": "UpdateConfiguration(size_t stream_index)"
  },
  {
    "label": "OnEncodeDone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEncodeDone(size_t stream_index, uint32_t rtp_timestamp, size_t size_bytes, bool is_keyframe, int qp, CodecSpecificInfo* info)"
  },
  {
    "label": "OnFrameDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFrameDropped(size_t stream_index, uint32_t rtp_timestamp)"
  },
  {
    "label": "OnPacketLossRateUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPacketLossRateUpdate(float packet_loss_rate)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRttUpdate(int64_t rtt_ms)"
  },
  {
    "label": "OnLossNotification()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLossNotification(const VideoEncoder::LossNotification& loss_notification)"
  },
  {
    "label": "DependencyInfo()",
    "kind": "Method",
    "detail": "Function (private : enum class TemporalLayerState : int { kDrop,kTl0,kTl1,kTl1Sync } ; struct DependencyInfo {)",
    "insertText": "DependencyInfo()"
  },
  {
    "label": "DependencyInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DependencyInfo(absl::string_view indication_symbols, Vp8FrameConfig frame_config) : decode_target_indications( webrtc_impl::StringToDecodeTargetIndications(indication_symbols)), frame_config(frame_config)"
  },
  {
    "label": "TimeToSync()",
    "kind": "Method",
    "detail": "Function (} absl::InlinedVector<DecodeTargetIndication,1 0> decode_target_indications ; Vp8FrameConfig frame_config ; } ; bool)",
    "insertText": "TimeToSync(int64_t timestamp)"
  },
  {
    "label": "GetCodecTargetBitrateKbps()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetCodecTargetBitrateKbps()"
  },
  {
    "label": "TemporalLayer()",
    "kind": "Method",
    "detail": "Function (const int number_of_temporal_layers_ ; absl::optional<int> min_qp_ ; absl::optional<int> max_qp_ ; int active_layer_ ; int64_t last_timestamp_ ; int64_t last_sync_timestamp_ ; int64_t last_emitted_tl0_timestamp_ ; int64_t last_frame_time_ms_ ; rtc::TimestampWrapAroundHandler time_wrap_handler_ ; uint32_t max_debt_bytes_ ; std::map<uint32_t,DependencyInfo> pending_frame_configs_ ; absl::optional<uint32_t> target_framerate_ ; absl::optional<uint32_t> capture_framerate_ ; RateStatistics encode_framerate_ ; bool bitrate_updated_ ; int kMaxNumTemporalLayers = 2 ; struct TemporalLayer {)",
    "insertText": "TemporalLayer() : state(State::kNormal), enhanced_max_qp(-1), last_qp(-1), debt_bytes_(0), target_rate_kbps_(0)"
  },
  {
    "label": "UpdateDebt()",
    "kind": "Method",
    "detail": "Function (} enum class State { kNormal,kDropped,kReencoded,kQualityBoost,kKeyFrame } state ; int enhanced_max_qp ; int last_qp ; uint32_t debt_bytes_ ; uint32_t target_rate_kbps_ ; void)",
    "insertText": "UpdateDebt(int64_t delta_ms)"
  },
  {
    "label": "UpdateHistograms()",
    "kind": "Method",
    "detail": "Function (} layers_ [ kMaxNumTemporalLayers ] ; void)",
    "insertText": "UpdateHistograms()"
  },
  {
    "label": "GetTemplateStructure()",
    "kind": "Method",
    "detail": "Function (FrameDependencyStructure)",
    "insertText": "GetTemplateStructure(int num_layers)"
  }
]