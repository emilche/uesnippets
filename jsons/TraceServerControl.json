[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FStoreClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreClient"
  },
  {
    "label": "TRACEINSIGHTSFRONTEND_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TRACEINSIGHTSFRONTEND_API"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTraceServerControl()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" HAL / CriticalSection . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include<atomic> class FMenuBuilder ; namespace UE::Trace { class FStoreClient ; } namespace UE::Insights { class FTraceServerControl { public :)",
    "insertText": "FTraceServerControl(const TCHAR* Host, uint32 Port = 0, FName StyleSet = NAME_None)"
  },
  {
    "label": "FTraceServerControl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTraceServerControl()"
  },
  {
    "label": "MakeMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeMenu(FMenuBuilder& Builder)"
  },
  {
    "label": "ChangeState()",
    "kind": "Method",
    "detail": "Function (private : enum class EState : uint8 { NotConnected,Connecting,Connected,CheckStatus,Command } ; bool)",
    "insertText": "ChangeState(EState Expected, EState ChangeTo, uint32 Attempts = 1)"
  },
  {
    "label": "TriggerStatusUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriggerStatusUpdate()"
  },
  {
    "label": "UpdateStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStatus()"
  },
  {
    "label": "ResetStatus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStatus()"
  },
  {
    "label": "CanServerBeStarted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanServerBeStarted()"
  },
  {
    "label": "CanServerBeStopped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanServerBeStopped()"
  },
  {
    "label": "AreControlsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreControlsEnabled()"
  },
  {
    "label": "IsSponsored()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSponsored()"
  },
  {
    "label": "OnStart_Clicked()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnStart_Clicked()"
  },
  {
    "label": "OnStop_Clicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStop_Clicked()"
  },
  {
    "label": "OnSponsored_Changed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSponsored_Changed()"
  },
  {
    "label": "LexState()",
    "kind": "Method",
    "detail": "Function (std::atomic<EState> State = EState::NotConnected ; std::atomic<bool> bCanServerBeStarted = false ; std::atomic<bool> bCanServerBeStopped = false ; std::atomic<bool> bSponsored = false ; std::atomic<bool> bIsCancelRequested = false ; FCriticalSection AsyncTaskLock ; FCriticalSection StringsLock ; FString StatusString ; FString Host ; uint32 Port = 0 ; FName StyleSet ; bool bIsLocalHost = false ; TUniquePtr<UE::Trace::FStoreClient> Client ; const TCHAR*)",
    "insertText": "LexState(EState)"
  }
]