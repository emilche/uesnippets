[
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FInstanceCullingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceCullingManager"
  },
  {
    "label": "FHairGroupPublicData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHairGroupPublicData"
  },
  {
    "label": "FMeshBatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatch"
  },
  {
    "label": "FMeshBatchAndRelevance",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshBatchAndRelevance"
  },
  {
    "label": "FHairStrandsTiles",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsTiles"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FHairStrandsVisibilityData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsVisibilityData"
  },
  {
    "label": "FPackedVirtualVoxelNodeDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackedVirtualVoxelNodeDesc"
  },
  {
    "label": "FHairStrandsVoxelResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsVoxelResources"
  },
  {
    "label": "FMinHairRadiusAtDepth1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMinHairRadiusAtDepth1"
  },
  {
    "label": "FHairStrandsDeepShadowData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsDeepShadowData"
  },
  {
    "label": "FHairStrandsDeepShadowResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsDeepShadowResources"
  },
  {
    "label": "FHairStrandsMacroGroupResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsMacroGroupResources"
  },
  {
    "label": "FHairStrandsMacroGroupData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsMacroGroupData"
  },
  {
    "label": "PrimitiveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PrimitiveInfo"
  },
  {
    "label": "FHairStrandsDebugData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsDebugData"
  },
  {
    "label": "ShadingInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ShadingInfo"
  },
  {
    "label": "Sample",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Sample"
  },
  {
    "label": "FPlotData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlotData"
  },
  {
    "label": "FPPLLData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPPLLData"
  },
  {
    "label": "FCullData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCullData"
  },
  {
    "label": "FBound",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBound"
  },
  {
    "label": "FLight",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLight"
  },
  {
    "label": "FCommon",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCommon"
  },
  {
    "label": "FHairStrandsViewData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsViewData"
  },
  {
    "label": "FDirectionalLightCullData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDirectionalLightCullData"
  },
  {
    "label": "FHairStrandsViewStateData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FHairStrandsViewStateData"
  },
  {
    "label": "FPositionChangedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPositionChangedData"
  },
  {
    "label": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" RendererInterface . h \" # include \" RenderGraphResources . h \" # include \" RHIGPUReadback . h \" # include \" Shader . h \" # include \" ConvexVolume . h \" # include \" HairStrandsDefinitions . h \" # include \" HairStrandsInterface . h \" class FLightSceneInfo ; class FPrimitiveSceneProxy ; class FViewInfo ; class FScene ; class FInstanceCullingManager ; class FHairGroupPublicData ; struct FMeshBatch ; struct FMeshBatchAndRelevance ;)",
    "insertText": "BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FHairStrandsViewUniformParameters, ) SHADER_PARAMETER(FIntPoint, HairTileCountXY) SHADER_PARAMETER(uint32, MaxSamplePerPixelCount) SHADER_PARAMETER(float, HairDualScatteringRoughnessOverride) SHADER_PARAMETER(FIntPoint, HairSampleViewportResolution) SHADER_PARAMETER(uint32, bHairTileValid) SHADER_PARAMETER(FVector4f, HairOnlyDepthHZBParameters) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<float>, HairCoverageTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, HairOnlyDepthTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, HairOnlyDepthClosestHZBTexture) SHADER_PARAMETER_RDG_TEXTURE(Texture2D, HairOnlyDepthFurthestHZBTexture) SHADER_PARAMETER_SAMPLER(SamplerState, HairOnlyDepthHZBSampler) SHADER_PARAMETER_RDG_TEXTURE(Texture2D<uint>, HairSampleOffset) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<uint>, HairSampleCount) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FPackedHairSample>, HairSampleData) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint2>, HairSampleCoords) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint2>, HairTileData) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, HairTileCount) END_GLOBAL_SHADER_PARAMETER_STRUCT() void GetHairStrandsInstanceCommon(FRDGBuilder& GraphBuilder, const FViewInfo& ViewInfo, const FHairGroupPublicData* HairGroupPublicData, FHairStrandsInstanceCommonParameters& OutCommon)"
  },
  {
    "label": "GetHairStrandsInstanceResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHairStrandsInstanceResources(FRDGBuilder& GraphBuilder, const FViewInfo& ViewInfo, const FHairGroupPublicData* HairGroupPublicData, bool bForceRegister, FHairStrandsInstanceResourceParameters& OutResources)"
  },
  {
    "label": "GetHairStrandsInstanceCulling()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHairStrandsInstanceCulling(FRDGBuilder& GraphBuilder, const FViewInfo& ViewInfo, const FHairGroupPublicData* HairGroupPublicData, bool bCullingEnable, FHairStrandsInstanceCullingParameters& OutCulling)"
  },
  {
    "label": "GetHairStrandsInstanceParameters()",
    "kind": "Method",
    "detail": "Function (FHairStrandsInstanceParameters)",
    "insertText": "GetHairStrandsInstanceParameters(FRDGBuilder& GraphBuilder, const FViewInfo& ViewInfo, const FHairGroupPublicData* HairGroupPublicData, bool bCullingEnable, bool bForceRegister)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (struct FHairStrandsTiles { enum class ETileType : uint8 { HairAll,HairFull,HairPartial,Other,Count } ; const uint32 TileTypeCount =)",
    "insertText": "uint32(ETileType::Count)"
  },
  {
    "label": "FIntPoint()",
    "kind": "Method",
    "detail": "Function (FIntPoint BufferResolution =)",
    "insertText": "FIntPoint(0, 0)"
  },
  {
    "label": "GetIndirectDrawArgOffset()",
    "kind": "Method",
    "detail": "Function (bool bRectPrimitive = false ; FRDGBufferSRVRef TileDataSRV [ TileTypeCount ] = { nullptr,nullptr } ; FRDGBufferRef TileDataBuffer [ TileTypeCount ] = { nullptr,nullptr } ; FRDGBufferSRVRef TileCountSRV = nullptr ; FRDGBufferRef TileCountBuffer = nullptr ; FRDGBufferRef TileIndirectDrawBuffer = nullptr ; FRDGBufferRef TileIndirectDispatchBuffer = nullptr ; FRDGBufferRef TileIndirectRayDispatchBuffer = nullptr ; FRDGBufferRef TilePerThreadIndirectDispatchBuffer = nullptr ; uint32)",
    "insertText": "GetIndirectDrawArgOffset(ETileType Type)"
  },
  {
    "label": "GetIndirectDispatchArgOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetIndirectDispatchArgOffset(ETileType Type)"
  },
  {
    "label": "GetIndirectRayDispatchArgOffset()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetIndirectRayDispatchArgOffset(ETileType Type)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTileBuffer()",
    "kind": "Method",
    "detail": "Function (} FRDGBufferRef)",
    "insertText": "GetTileBuffer(ETileType Type)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 Index =)",
    "insertText": "uint32(Type)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "ToString(FHairStrandsTiles::ETileType Type)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (struct FHairStrandsVisibilityData { FRDGTextureRef VelocityTexture = nullptr ; FRDGTextureRef ResolveMaskTexture = nullptr ; FRDGTextureRef CoverageTexture = nullptr ; FRDGTextureRef ViewHairCountTexture = nullptr ; FRDGTextureRef ViewHairCountUintTexture = nullptr ; FRDGTextureRef HairOnlyDepthTexture = nullptr ; FRDGTextureRef HairOnlyDepthClosestHZBTexture = nullptr ; FRDGTextureRef HairOnlyDepthFurthestHZBTexture = nullptr ; FRDGTextureRef LightChannelMaskTexture = nullptr ; uint32 MaxSampleCount = 8 ; uint32 MaxNodeCount = 0 ; FRDGBufferRef NodeCount = nullptr ; FRDGTextureRef NodeIndex = nullptr ; FRDGBufferRef NodeData = nullptr ; FRDGBufferRef NodeVisData = nullptr ; FRDGBufferRef NodeCoord = nullptr ; FRDGBufferRef NodeIndirectArg = nullptr ; uint32 NodeGroupSize = 0 ; FVector4f HairOnlyDepthHZBParameters =)",
    "insertText": "Zero()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (uint32 RasterizedInstanceCount = 0 ; uint32 MaxControlPointCount = 0 ; FRDGBufferSRVRef ControlPointsSRV = nullptr ; FRDGBufferSRVRef ControlPointCount = nullptr ; FRDGBufferSRVRef ControlPointVelocitySRV = nullptr ; FHairStrandsTiles TileData ; const EPixelFormat NodeCoordFormat = PF_R16G16_UINT ; const EPixelFormat CoverageFormat = PF_R16F ; FIntPoint SampleLightingViewportResolution ; FRDGTextureRef SampleLightingTexture = nullptr ; } ; struct FPackedVirtualVoxelNodeDesc { const EPixelFormat Format = PF_R32G32B32A32_UINT ; const uint32 ComponentCount = 2 ; FVector3f MinAABB ; uint32 PackedPageIndexResolution ; FVector3f MaxAABB ; uint32 PageIndexOffset ; } ;)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FHairStrandsVoxelCommonParameters, ) SHADER_PARAMETER(FIntVector, PageCountResolution) SHADER_PARAMETER(float, CPUMinVoxelWorldSize) SHADER_PARAMETER(FIntVector, PageTextureResolution) SHADER_PARAMETER(uint32, PageCount) SHADER_PARAMETER(uint32, PageResolution) SHADER_PARAMETER(uint32, PageResolutionLog2) SHADER_PARAMETER(uint32, PageIndexCount) SHADER_PARAMETER(uint32, IndirectDispatchGroupSize) SHADER_PARAMETER(uint32, NodeDescCount) SHADER_PARAMETER(uint32, JitterMode) SHADER_PARAMETER(float, DensityScale) SHADER_PARAMETER(float, DensityScale_AO) SHADER_PARAMETER(float, DensityScale_Shadow) SHADER_PARAMETER(float, DensityScale_Transmittance) SHADER_PARAMETER(float, DensityScale_Environment) SHADER_PARAMETER(float, DensityScale_Raytracing) SHADER_PARAMETER(float, DepthBiasScale_Shadow) SHADER_PARAMETER(float, DepthBiasScale_Transmittance) SHADER_PARAMETER(float, DepthBiasScale_Environment) SHADER_PARAMETER(float, SteppingScale_Shadow) SHADER_PARAMETER(float, SteppingScale_Transmittance) SHADER_PARAMETER(float, SteppingScale_Environment) SHADER_PARAMETER(float, SteppingScale_Raytracing) SHADER_PARAMETER(float, HairCoveragePixelRadiusAtDepth1) SHADER_PARAMETER(float, Raytracing_ShadowOcclusionThreshold) SHADER_PARAMETER(float, Raytracing_SkyOcclusionThreshold) SHADER_PARAMETER(FVector3f, TranslatedWorldOffset) SHADER_PARAMETER(FVector3f, TranslatedWorldOffsetStereoCorrection) SHADER_PARAMETER(uint32, AllocationFeedbackEnable) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, AllocatedPageCountBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, PageIndexBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<uint>, PageIndexCoordBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer<FPackedVirtualVoxelNodeDesc>, NodeDescBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<float>, CurrGPUMinVoxelSize) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer<float>, NextGPUMinVoxelSize) END_SHADER_PARAMETER_STRUCT() BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FVirtualVoxelParameters, RENDERER_API) SHADER_PARAMETER_STRUCT_INCLUDE(FHairStrandsVoxelCommonParameters, Common) SHADER_PARAMETER_RDG_TEXTURE(Texture3D<uint>, PageTexture) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (} ; typedef TArray<PrimitiveInfo,SceneRenderingAllocator> TPrimitiveInfos ; FHairStrandsDeepShadowDatas DeepShadowDatas ; TPrimitiveInfos PrimitivesInfos ; FBoxSphereBounds Bounds ; FIntRect ScreenRect ; uint32 MacroGroupId = 0 ; uint32 Flags = 0 ; bool bSupportVoxelization = false ; } ; struct FHairStrandsDebugData {)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FWriteParameters, ) SHADER_PARAMETER(uint32, Debug_MaxShadingPointCount) SHADER_PARAMETER(uint32, Debug_MaxSampleCount) SHADER_PARAMETER_RDG_BUFFER_UAV(RWStructuredBuffer, Debug_ShadingPointBuffer) SHADER_PARAMETER_RDG_BUFFER_UAV(RWBuffer, Debug_ShadingPointCounter) SHADER_PARAMETER_RDG_BUFFER_UAV(RWStructuredBuffer, Debug_SampleBuffer) SHADER_PARAMETER_RDG_BUFFER_UAV(RWBuffer, Debug_SampleCounter) END_SHADER_PARAMETER_STRUCT() BEGIN_SHADER_PARAMETER_STRUCT(FReadParameters, ) SHADER_PARAMETER(uint32, Debug_MaxShadingPointCount) SHADER_PARAMETER(uint32, Debug_MaxSampleCount) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer, Debug_ShadingPointBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer, Debug_ShadingPointCounter) SHADER_PARAMETER_RDG_BUFFER_SRV(StructuredBuffer, Debug_SampleBuffer) SHADER_PARAMETER_RDG_BUFFER_SRV(Buffer, Debug_SampleCounter) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "IsPlotDataValid()",
    "kind": "Method",
    "detail": "Function (FVector3f BaseColor ; float Roughness ; FVector3f T ; uint32 SampleCount ; FVector3f V ; float SampleOffset ; } ; struct Sample { FVector3f Direction ; float Pdf ; FVector3f Weights ; float Pad ; } ; const uint32 MaxShadingPointCount = 3 2 ; const uint32 MaxSampleCount = 1 0 2 4* 3 2 ; struct FPlotData { FRDGBufferRef ShadingPointBuffer = nullptr ; FRDGBufferRef ShadingPointCounter = nullptr ; FRDGBufferRef SampleBuffer = nullptr ; FRDGBufferRef SampleCounter = nullptr ; } PlotData ; bool)",
    "insertText": "IsPlotDataValid()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRDGBuilder& GraphBuilder, const FPlotData& In, FWriteParameters& Out)"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetParameters(FRDGBuilder& GraphBuilder, const FPlotData& In, FReadParameters& Out)"
  },
  {
    "label": "IsPPLLDataValid()",
    "kind": "Method",
    "detail": "Function (struct FPPLLData { FRDGTextureRef NodeCounterTexture = nullptr ; FRDGTextureRef NodeIndexTexture = nullptr ; FRDGBufferRef NodeDataBuffer = nullptr ; } PPLLData ; bool)",
    "insertText": "IsPPLLDataValid()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Release()"
  },
  {
    "label": "EnqueuePositionsChanged()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer> VoxelFeedbackBuffer = nullptr ; struct FPositionChangedData { FRHIGPUBufferReadback* ReadbackBuffer = nullptr ; bool bHasPendingReadback = false ; } ; void)",
    "insertText": "EnqueuePositionsChanged(FRDGBuilder& GraphBuilder, FRDGBufferRef InBuffer)"
  },
  {
    "label": "ReadPositionsChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadPositionsChanged()"
  },
  {
    "label": "CreateDefaultHairStrandsViewUniformBuffer()",
    "kind": "Method",
    "detail": "Function (TArray<FPositionChangedData> PositionsChangedDatas ; } ; namespace HairStrands { TRDGUniformBufferRef<FHairStrandsViewUniformParameters>)",
    "insertText": "CreateDefaultHairStrandsViewUniformBuffer(FRDGBuilder& GraphBuilder, FViewInfo& View)"
  },
  {
    "label": "BindHairStrandsViewUniformParameters()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FHairStrandsViewUniformParameters>)",
    "insertText": "BindHairStrandsViewUniformParameters(const FViewInfo& View)"
  },
  {
    "label": "BindHairStrandsVoxelUniformParameters()",
    "kind": "Method",
    "detail": "Function (TRDGUniformBufferRef<FVirtualVoxelParameters>)",
    "insertText": "BindHairStrandsVoxelUniformParameters(const FViewInfo& View)"
  },
  {
    "label": "HasViewHairStrandsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasViewHairStrandsData(const FViewInfo& View)"
  },
  {
    "label": "HasViewHairStrandsData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasViewHairStrandsData(const TArray<FViewInfo>& Views)"
  },
  {
    "label": "HasViewHairStrandsVoxelData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasViewHairStrandsVoxelData(const FViewInfo& View)"
  },
  {
    "label": "HasPositionsChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPositionsChanged(FRDGBuilder& GraphBuilder, const FScene& Scene, const FViewInfo& View)"
  },
  {
    "label": "DrawHitProxies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHitProxies(FRDGBuilder& GraphBuilder, const FScene& Scene, const FViewInfo& View, FInstanceCullingManager& InstanceCullingManager, FRDGTextureRef HitProxyTexture, FRDGTextureRef HitProxyDepthTexture)"
  },
  {
    "label": "DrawEditorSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawEditorSelection(FRDGBuilder& GraphBuilder, const FViewInfo& View, const FIntRect& ViewportRect, FRDGTextureRef SelectionDepthTexture)"
  },
  {
    "label": "GetHairData()",
    "kind": "Method",
    "detail": "Function (FHairGroupPublicData*)",
    "insertText": "GetHairData(const FMeshBatch* In)"
  },
  {
    "label": "IsHairCompatible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairCompatible(const FMeshBatch* Mesh)"
  },
  {
    "label": "IsHairStrandsVF()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairStrandsVF(const FMeshBatch* Mesh)"
  },
  {
    "label": "IsHairCardsVF()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairCardsVF(const FMeshBatch* Mesh)"
  },
  {
    "label": "IsHairVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsHairVisible(const FMeshBatchAndRelevance& MeshBatch, bool bCheckLengthScale)"
  },
  {
    "label": "HasHairInstanceInScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHairInstanceInScene(const FScene& Scene)"
  },
  {
    "label": "HasHairCardsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHairCardsVisible(const TArray<FViewInfo>& Views)"
  },
  {
    "label": "HasHairStrandsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasHairStrandsVisible(const TArray<FViewInfo>& Views)"
  },
  {
    "label": "AddVisibleShadowCastingLight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddVisibleShadowCastingLight(const FScene& Scene, TArray<FViewInfo>& Views, const FLightSceneInfo* LightSceneInfo)"
  },
  {
    "label": "PostRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRender(FScene& Scene)"
  }
]