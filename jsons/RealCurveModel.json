[
  {
    "label": "FCurveEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCurveEditor"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FCurveEditorScreenSpace",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveEditorScreenSpace"
  },
  {
    "label": "FKeyAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyAttributes"
  },
  {
    "label": "FKeyDrawInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyDrawInfo"
  },
  {
    "label": "FKeyHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyHandle"
  },
  {
    "label": "FKeyPosition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FKeyPosition"
  },
  {
    "label": "FRealCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRealCurve"
  },
  {
    "label": "FRealCurveModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRealCurveModel"
  },
  {
    "label": "FRealCurveModel()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" CurveEditorTypes . h \" # include \" CurveModel . h \" # include \" Misc / OptionalFwd . h \" # include \" Templates / Tuple . h \" # include \" UObject / UnrealType . h \" # include \" UObject / WeakObjectPtrTemplates . h \" class FCurveEditor ; class UObject ; struct FCurveEditorScreenSpace ; struct FKeyAttributes ; struct FKeyDrawInfo ; struct FKeyHandle ; struct FKeyPosition ; struct FRealCurve ; class FRealCurveModel : public FCurveModel { public : ECurveEditorViewID EventView ;)",
    "insertText": "FRealCurveModel(FRealCurve* InRealCurve, UObject* InOwner)"
  },
  {
    "label": "GetCurve()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetCurve()"
  },
  {
    "label": "Modify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Modify()"
  },
  {
    "label": "DrawCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCurve(const FCurveEditor& CurveEditor, const FCurveEditorScreenSpace& ScreenSpace, TArray<TTuple<double, double>>& InterpolatingPoints)"
  },
  {
    "label": "GetKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeys(double MinTime, double MaxTime, double MinValue, double MaxValue, TArray<FKeyHandle>& OutKeyHandles)"
  },
  {
    "label": "AddKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddKeys(TArrayView<const FKeyPosition> InKeyPositions, TArrayView<const FKeyAttributes> InAttributes, TArrayView<TOptional<FKeyHandle>>* OutKeyHandles)"
  },
  {
    "label": "RemoveKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveKeys(TArrayView<const FKeyHandle> InKeys)"
  },
  {
    "label": "GetKeyPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyPosition> OutKeyPositions)"
  },
  {
    "label": "SetKeyPositions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyPositions(TArrayView<const FKeyHandle> InKeys, TArrayView<const FKeyPosition> InKeyPositions, EPropertyChangeType::Type ChangeType)"
  },
  {
    "label": "GetKeyDrawInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyDrawInfo(ECurvePointType PointType, const FKeyHandle InKeyHandle, FKeyDrawInfo& OutDrawInfo)"
  },
  {
    "label": "GetKeyAttributes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetKeyAttributes(TArrayView<const FKeyHandle> InKeys, TArrayView<FKeyAttributes> OutAttributes)"
  },
  {
    "label": "GetTimeRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTimeRange(double& MinTime, double& MaxTime)"
  },
  {
    "label": "GetValueRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValueRange(double& MinValue, double& MaxValue)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "GetNeighboringKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetNeighboringKeys(const FKeyHandle InKeyHandle, TOptional<FKeyHandle>& OutPreviousKeyHandle, TOptional<FKeyHandle>& OutNextKeyHandle)"
  },
  {
    "label": "Evaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Evaluate(double ProspectiveTime, double& OutValue)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  }
]