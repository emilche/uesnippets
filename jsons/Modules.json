[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FResolvedSymbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FResolvedSymbol"
  },
  {
    "label": "IResolvedSymbolFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IResolvedSymbolFilter"
  },
  {
    "label": "FModule",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModule"
  },
  {
    "label": "SymbolStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SymbolStats"
  },
  {
    "label": "IModuleProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModuleProvider"
  },
  {
    "label": "FStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStats"
  },
  {
    "label": "QueryResultToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / TaskGraphInterfaces . h \" # include \" HAL / Platform . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include \" TraceServices / Model / AnalysisSession . h \" # include \" UObject / NameTypes . h \" # include<atomic> namespace TraceServices { enum class ESymbolQueryResult : uint8 { Pending,OK,NotLoaded,Mismatch,NotFound,StatusNum } ; const TCHAR*)",
    "insertText": "QueryResultToString(ESymbolQueryResult Result)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* DisplayStrings [ ] = {)",
    "insertText": "TEXT(\"Pending...\"), TEXT(\"Ok\"), TEXT(\"Not loaded\"), TEXT(\"Version mismatch\"), TEXT(\"Not found\")"
  },
  {
    "label": "GetResult()",
    "kind": "Method",
    "detail": "Function (} enum class EResolvedSymbolFilterStatus : uint8 { Unknown = 0,Filtered,NotFiltered,} ; struct FResolvedSymbol { const TCHAR* Module ; const TCHAR* Name ; const TCHAR* File ; uint16 Line ; std::atomic<ESymbolQueryResult> Result ; std::atomic<EResolvedSymbolFilterStatus> FilterStatus ; ESymbolQueryResult)",
    "insertText": "GetResult()"
  },
  {
    "label": "FResolvedSymbol()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FResolvedSymbol(ESymbolQueryResult InResult, const TCHAR* InModule, const TCHAR* InName, const TCHAR* InFile, uint16 InLine, EResolvedSymbolFilterStatus InFilterStatus) : Module(InModule) , Name(InName) , File(InFile) , Line(InLine) , Result(InResult) , FilterStatus(InFilterStatus)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (} } ; class IResolvedSymbolFilter { public : void)",
    "insertText": "Update(FResolvedSymbol& InSymbol)"
  },
  {
    "label": "ModuleStatusToString()",
    "kind": "Method",
    "detail": "Function (} ; enum class EModuleStatus { Discovered,Pending,Loaded,VersionMismatch,NotFound,Failed,StatusNum,FailedStatusStart = VersionMismatch } ; const TCHAR*)",
    "insertText": "ModuleStatusToString(EModuleStatus Result)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* DisplayStrings [ ] = {)",
    "insertText": "TEXT(\"Discovered\"), TEXT(\"Pending...\"), TEXT(\"Loaded\"), TEXT(\"Version mismatch\"), TEXT(\"Not found\"), TEXT(\"Failed\")"
  },
  {
    "label": "FModule()",
    "kind": "Method",
    "detail": "Function (} struct FModule { const TCHAR* Name ; const TCHAR* FullName ; uint64 Base ; uint32 Size ; std::atomic<EModuleStatus> Status ; const TCHAR* StatusMessage ; struct SymbolStats { std::atomic<uint32> Discovered ; std::atomic<uint32> Cached ; std::atomic<uint32> Resolved ; std::atomic<uint32> Failed ; } Stats ;)",
    "insertText": "FModule(const TCHAR* InName, const TCHAR* InFullName, uint64 InBase, uint32 InSize, EModuleStatus InStatus) : Name(InName) , FullName(InFullName) , Base(InBase) , Size(InSize) , Status(InStatus) , StatusMessage(nullptr)"
  },
  {
    "label": "IModuleProvider()",
    "kind": "Method",
    "detail": "Function (} } ; class IModuleProvider : public IProvider,public IEditableProvider { public : struct FStats { uint32 ModulesDiscovered ; uint32 ModulesLoaded ; uint32 ModulesFailed ; uint32 SymbolsDiscovered ; uint32 SymbolsResolved ; uint32 SymbolsFailed ; } ; ~)",
    "insertText": "IModuleProvider()"
  },
  {
    "label": "GetSymbol()",
    "kind": "Method",
    "detail": "Function (const FResolvedSymbol*)",
    "insertText": "GetSymbol(uint64 Address)"
  },
  {
    "label": "GetNumModules()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumModules()"
  },
  {
    "label": "EnumerateModules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateModules(uint32 Start, TFunctionRef<void(const FModule& Module)> Callback)"
  },
  {
    "label": "LoadSymbolsForModuleUsingPath()",
    "kind": "Method",
    "detail": "Function (FGraphEventRef)",
    "insertText": "LoadSymbolsForModuleUsingPath(uint64 Base, const TCHAR* Path)"
  },
  {
    "label": "EnumerateSymbolSearchPaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnumerateSymbolSearchPaths(TFunctionRef<void(FStringView Path)> Callback)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStats(FStats* OutStats)"
  },
  {
    "label": "GetModuleProviderName()",
    "kind": "Method",
    "detail": "Function (} ; FName)",
    "insertText": "GetModuleProviderName()"
  },
  {
    "label": "ReadModuleProvider()",
    "kind": "Method",
    "detail": "Function (const IModuleProvider*)",
    "insertText": "ReadModuleProvider(const IAnalysisSession& Session)"
  }
]