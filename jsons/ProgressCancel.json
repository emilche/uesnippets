[
  {
    "label": "FProgressCancel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressCancel"
  },
  {
    "label": "FGeometryError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryError"
  },
  {
    "label": "FGeometryWarning",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryWarning"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGeometryResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometryResult"
  },
  {
    "label": "FProgressData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProgressData"
  },
  {
    "label": "FProgressScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProgressScope"
  },
  {
    "label": "FMessageInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMessageInfo"
  },
  {
    "label": "FGeometryError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / Platform . h \" # include \" Internationalization / Text . h \" # include \" MathUtil . h \" # include \" Misc / DateTime . h \" # include \" Misc / ScopeLock . h \" # include \" Templates / Function . h \" # include \" Templates / UnrealTemplate . h \" # include<atomic> class FProgressCancel ; namespace UE { namespace Geometry { struct FGeometryError { int32 ErrorCode = 0 ; FText Message ; FDateTime Timestamp ; TArray<unsigned char> CustomData ;)",
    "insertText": "FGeometryError()"
  },
  {
    "label": "Now()",
    "kind": "Method",
    "detail": "Function (Timestamp =)",
    "insertText": "Now()"
  },
  {
    "label": "FGeometryError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGeometryError(int32 Code, const FText& MessageIn) : ErrorCode(Code), Message(MessageIn)"
  },
  {
    "label": "FGeometryWarning()",
    "kind": "Method",
    "detail": "Function (} } ; struct FGeometryWarning { int32 WarningCode = 0 ; FText Message ; FDateTime Timestamp ; TArray<unsigned char> CustomData ;)",
    "insertText": "FGeometryWarning()"
  },
  {
    "label": "FGeometryWarning()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGeometryWarning(int32 Code, const FText& MessageIn) : WarningCode(Code), Message(MessageIn)"
  },
  {
    "label": "FGeometryResult()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EGeometryResultType { Success = 0,InProgress = 1,Cancelled = 2,PartialResult = 3,Failure = 4 } ; struct FGeometryResult { EGeometryResultType Result ; TArray<FGeometryError> Errors ; TArray<FGeometryWarning> Warnings ;)",
    "insertText": "FGeometryResult()"
  },
  {
    "label": "FGeometryResult()",
    "kind": "Method",
    "detail": "Function (Result = EGeometryResultType::Success ; })",
    "insertText": "FGeometryResult(EGeometryResultType ResultType)"
  },
  {
    "label": "UpdateResultType()",
    "kind": "Method",
    "detail": "Function (Result = ResultType ; } void)",
    "insertText": "UpdateResultType(EGeometryResultType NewType)"
  },
  {
    "label": "SetFailed()",
    "kind": "Method",
    "detail": "Function (Result = NewType ; } void)",
    "insertText": "SetFailed()"
  },
  {
    "label": "SetCancelled()",
    "kind": "Method",
    "detail": "Function (Result = EGeometryResultType::Failure ; } void)",
    "insertText": "SetCancelled()"
  },
  {
    "label": "SetSuccess()",
    "kind": "Method",
    "detail": "Function (Result = EGeometryResultType::Cancelled ; } void)",
    "insertText": "SetSuccess()"
  },
  {
    "label": "SetSuccess()",
    "kind": "Method",
    "detail": "Function (Result = EGeometryResultType::Success ; } void)",
    "insertText": "SetSuccess(bool bSuccess, FProgressCancel* Progress = nullptr)"
  },
  {
    "label": "SetFailed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFailed(FText ErrorMessage, int ResultCode = 0)"
  },
  {
    "label": "CheckAndSetCancelled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckAndSetCancelled(FProgressCancel* Progress)"
  },
  {
    "label": "AddError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddError(FGeometryError Error)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Errors .)",
    "insertText": "Add(Error)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddWarning(FGeometryWarning Warning)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Warnings .)",
    "insertText": "Add(Warning)"
  },
  {
    "label": "HasFailed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFailed()"
  },
  {
    "label": "Cancelled()",
    "kind": "Method",
    "detail": "Function (} FGeometryResult)",
    "insertText": "Cancelled()"
  },
  {
    "label": "Range()",
    "kind": "Method",
    "detail": "Function (} } ; } } class FProgressCancel { private : bool WasCancelled = false ; struct FProgressData { float CurrentMin = 0 ; float CurrentMax = 1 ; int ScopeDepth = 0 ; FText Message ; float)",
    "insertText": "Range()"
  },
  {
    "label": "StartWorkScope()",
    "kind": "Method",
    "detail": "Function (} } ; FProgressData Progress ; FText ProgressMessage ; int MaxMessageDepth = - 1 ; std::atomic<float> ProgressFraction = 0 ; FCriticalSection MessageCS ; void)",
    "insertText": "StartWorkScope(FProgressData& SaveProgressFrameOut, float StepSize, const FText& Message)"
  },
  {
    "label": "EndWorkScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndWorkScope(const FProgressData& SavedProgressFrame)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (public : TFunction<)",
    "insertText": "bool()> CancelF = []()"
  },
  {
    "label": "ClearMaxMessageDepth()",
    "kind": "Method",
    "detail": "Function (MaxMessageDepth = ScopeDepth ; } void)",
    "insertText": "ClearMaxMessageDepth()"
  },
  {
    "label": "FProgressScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProgressScope() : ProgressCancel(nullptr)"
  },
  {
    "label": "FProgressScope()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProgressScope(const FProgressScope& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FProgressScope&)",
    "insertText": "operator(const FProgressScope& Other)"
  },
  {
    "label": "FProgressScope()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FProgressScope(FProgressScope&& Other) noexcept : ProgressCancel(Other.ProgressCancel), SavedProgressData(MoveTemp(Other.SavedProgressData)), bEnded(Other.bEnded)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Other . ProgressCancel = nullptr ; Other . bEnded = true ; } FProgressScope&)",
    "insertText": "operator(FProgressScope&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (ProgressCancel = Other . ProgressCancel ; SavedProgressData =)",
    "insertText": "MoveTemp(Other.SavedProgressData)"
  },
  {
    "label": "FProgressScope()",
    "kind": "Method",
    "detail": "Function (bEnded = Other . bEnded ; Other . ProgressCancel = nullptr ; Other . bEnded = true ; } return* this ; } ~)",
    "insertText": "FProgressScope()"
  },
  {
    "label": "Done()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Done()"
  },
  {
    "label": "AdvanceProgressBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceProgressBy(float Amount)"
  },
  {
    "label": "AdvanceCurrentScopeProgressBy()",
    "kind": "Method",
    "detail": "Function (ProgressCancel ->)",
    "insertText": "AdvanceCurrentScopeProgressBy(Amount)"
  },
  {
    "label": "AdvanceProgressToward()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AdvanceProgressToward(float TargetProgressFrac, float FractionToward)"
  },
  {
    "label": "AdvanceCurrentScopeProgressToward()",
    "kind": "Method",
    "detail": "Function (ProgressCancel ->)",
    "insertText": "AdvanceCurrentScopeProgressToward(TargetProgressFrac, FractionToward)"
  },
  {
    "label": "GetDistanceTo()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetDistanceTo(float TargetProgressFrac)"
  },
  {
    "label": "GetProgress()",
    "kind": "Method",
    "detail": "Function (} return 0 ; } float)",
    "insertText": "GetProgress()"
  },
  {
    "label": "SetProgressTo()",
    "kind": "Method",
    "detail": "Function (} return 1 ; } void)",
    "insertText": "SetProgressTo(float NewProgressFrac)"
  },
  {
    "label": "SetCurrentScopeProgressTo()",
    "kind": "Method",
    "detail": "Function (ProgressCancel ->)",
    "insertText": "SetCurrentScopeProgressTo(NewProgressFrac)"
  },
  {
    "label": "CreateScopeTo()",
    "kind": "Method",
    "detail": "Function (} } } ; FProgressScope)",
    "insertText": "CreateScopeTo(FProgressCancel* ProgressCancel, float ProgressTo, const FText& Message = FText())"
  },
  {
    "label": "GetProgressMessage()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetProgressMessage()"
  },
  {
    "label": "MessageLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "MessageLock(&MessageCS)"
  },
  {
    "label": "AdvanceCurrentScopeProgressBy()",
    "kind": "Method",
    "detail": "Function (ProgressMessage = Message ; } } void)",
    "insertText": "AdvanceCurrentScopeProgressBy(float Amount)"
  },
  {
    "label": "SafeAdvance()",
    "kind": "Method",
    "detail": "Function (ProgressFraction = Progress .)",
    "insertText": "SafeAdvance(ProgressFraction, Amount)"
  },
  {
    "label": "AdvanceCurrentScopeProgressToward()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AdvanceCurrentScopeProgressToward(float TargetProgressFrac, float FractionToward)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (float TargetProgressFraction =)",
    "insertText": "Max(ProgressFraction, Progress.CurrentMin + Progress.Range() * TargetProgressFrac)"
  },
  {
    "label": "SafeAdvance()",
    "kind": "Method",
    "detail": "Function (ProgressFraction = Progress .)",
    "insertText": "SafeAdvance(ProgressFraction, FMathf::Lerp(ProgressFraction, TargetProgressFraction, FractionToward))"
  },
  {
    "label": "GetCurrentScopeProgress()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentScopeProgress()"
  },
  {
    "label": "GetCurrentScopeDistanceTo()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentScopeDistanceTo(float TargetProgressFrac)"
  },
  {
    "label": "SetCurrentScopeProgressTo()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCurrentScopeProgressTo(float NewProgressFrac)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (ProgressFraction =)",
    "insertText": "Clamp(Progress.CurrentMin + Progress.Range() * NewProgressFrac, ProgressFraction, Progress.CurrentMax)"
  },
  {
    "label": "AddWarning()",
    "kind": "Method",
    "detail": "Function (} public : enum class EMessageLevel { Internal = 0,UserMessage = 1,UserNotification = 2,UserWarning = 3,UserError = 4 } ; struct FMessageInfo { FText MessageText ; EMessageLevel MessageLevel ; FDateTime Timestamp ; } ; void)",
    "insertText": "AddWarning(const FText& MessageText, EMessageLevel MessageLevel)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Warnings .)",
    "insertText": "Add(FMessageInfo{ MessageText , MessageLevel, FDateTime::Now() })"
  },
  {
    "label": "SetSuccess()",
    "kind": "Method",
    "detail": "Function (} TArray<FMessageInfo> Warnings ; } ; void UE::Geometry::)",
    "insertText": "SetSuccess(bool bSuccess, FProgressCancel* Progress)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (Result = EGeometryResultType::Cancelled ; } else {)",
    "insertText": "Result(bSuccess)"
  },
  {
    "label": "SetFailed()",
    "kind": "Method",
    "detail": "Function (} } void UE::Geometry::)",
    "insertText": "SetFailed(FText ErrorMessage, int ResultCode)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result = EGeometryResultType::Failure ; Errors .)",
    "insertText": "Add(FGeometryError(ResultCode, ErrorMessage))"
  }
]