[
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "MachineFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineFunction"
  },
  {
    "label": "MachineInstr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MachineInstr"
  },
  {
    "label": "SDep",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDep"
  },
  {
    "label": "SUnit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUnit"
  },
  {
    "label": "TargetFrameLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetFrameLowering"
  },
  {
    "label": "TargetInstrInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetInstrInfo"
  },
  {
    "label": "TargetLowering",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLowering"
  },
  {
    "label": "TargetRegisterClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterClass"
  },
  {
    "label": "TargetRegisterInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetRegisterInfo"
  },
  {
    "label": "TargetSchedModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSchedModel"
  },
  {
    "label": "TargetSelectionDAGInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSelectionDAGInfo"
  },
  {
    "label": "MachineSchedPolicy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MachineSchedPolicy"
  },
  {
    "label": "SmallVectorImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallVectorImpl"
  },
  {
    "label": "TargetSubtargetInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetSubtargetInfo"
  },
  {
    "label": "TargetSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_TARGET_TARGETSUBTARGETINFO_H # define LLVM_TARGET_TARGETSUBTARGETINFO_H # include \" llvm / CodeGen / PBQPRAConstraint . h \" # include \" llvm / MC / MCSubtargetInfo . h \" # include \" llvm / Support / CodeGen . h \" namespace llvm { class DataLayout ; class MachineFunction ; class MachineInstr ; class SDep ; class SUnit ; class TargetFrameLowering ; class TargetInstrInfo ; class TargetLowering ; class TargetRegisterClass ; class TargetRegisterInfo ; class TargetSchedModel ; class TargetSelectionDAGInfo ; struct MachineSchedPolicy ; template<T> class SmallVectorImpl ; class TargetSubtargetInfo : public MCSubtargetInfo {)",
    "insertText": "TargetSubtargetInfo(const TargetSubtargetInfo &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TargetSubtargetInfo &)"
  },
  {
    "label": "TargetSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetSubtargetInfo()"
  },
  {
    "label": "TargetSubtargetInfo()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "TargetSubtargetInfo(const Triple &TT, StringRef CPU, StringRef FS, ArrayRef<SubtargetFeatureKV> PF, ArrayRef<SubtargetFeatureKV> PD, const SubtargetInfoKV *ProcSched, const MCWriteProcResEntry *WPR, const MCWriteLatencyEntry *WL, const MCReadAdvanceEntry *RA, const InstrStage *IS, const unsigned *OC, const unsigned *FP)"
  },
  {
    "label": "getInstrInfo()",
    "kind": "Method",
    "detail": "Function (const TargetInstrInfo*)",
    "insertText": "getInstrInfo()"
  },
  {
    "label": "enableMachineSchedDefaultSched()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "enableMachineSchedDefaultSched()"
  },
  {
    "label": "enablePostRAScheduler()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "enablePostRAScheduler()"
  },
  {
    "label": "enableAtomicExpand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "enableAtomicExpand()"
  },
  {
    "label": "overrideSchedPolicy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "overrideSchedPolicy(MachineSchedPolicy &Policy, MachineInstr *begin, MachineInstr *end, unsigned NumRegionInstrs)"
  },
  {
    "label": "adjustSchedDependency()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "adjustSchedDependency(SUnit *def, SUnit *use, SDep &dep)"
  },
  {
    "label": "getAntiDepBreakMode()",
    "kind": "Method",
    "detail": "Function (} AntiDepBreakMode)",
    "insertText": "getAntiDepBreakMode()"
  },
  {
    "label": "getOptLevelToEnablePostRAScheduler()",
    "kind": "Method",
    "detail": "Function (} CodeGenOpt::Level)",
    "insertText": "getOptLevelToEnablePostRAScheduler()"
  },
  {
    "label": "useAA()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "useAA()"
  },
  {
    "label": "enableEarlyIfConversion()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "enableEarlyIfConversion()"
  }
]