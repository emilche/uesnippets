[
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FTransformGizmoMeasurement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformGizmoMeasurement"
  },
  {
    "label": "UTextRenderComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextRenderComponent"
  },
  {
    "label": "VIEWPORTINTERACTION_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VIEWPORTINTERACTION_API"
  },
  {
    "label": "UViewportDragOperationComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportDragOperationComponent"
  },
  {
    "label": "UViewportWorldInteraction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UViewportWorldInteraction"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UGizmoHandleGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGizmoHandleGroup"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" GameFramework / Actor . h \" # include \" UnrealWidgetFwd . h \" # include \" ViewportInteractionTypes . h \" # include \" VIBaseTransformGizmo . generated . h \" class UMaterialInterface ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (All = 0,Translate = 1,Rotate = 2,Scale = 3 } ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(Abstract, NotPlaceable)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: ABaseTransformGizmo()"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "GetInteractionType()",
    "kind": "Method",
    "detail": "Function (class UViewportDragOperationComponent*)",
    "insertText": "GetInteractionType(UActorComponent* DraggedComponent, TOptional<FTransformGizmoHandlePlacement>& OutHandlePlacement)"
  },
  {
    "label": "GetAnimationAlpha()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAnimationAlpha()"
  },
  {
    "label": "SetOwnerWorldInteraction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerWorldInteraction(class UViewportWorldInteraction* InWorldInteraction)"
  },
  {
    "label": "GetOwnerWorldInteraction()",
    "kind": "Method",
    "detail": "Function (class UViewportWorldInteraction*)",
    "insertText": "GetOwnerWorldInteraction()"
  },
  {
    "label": "UpdateGizmo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGizmo(const EGizmoHandleTypes InGizmoType, const ECoordSystem InGizmoCoordinateSpace, const FTransform& InLocalToWorld, const FBox& InLocalBounds, const FVector& InViewLocation, const float InScaleMultiplier, bool bInAllHandlesVisible, const bool bInAllowRotationAndScaleHandles, class UActorComponent* DraggingHandle, const TArray<UActorComponent*>& InHoveringOverHandles, const float InGizmoHoverScale, const float InGizmoHoverAnimationDuration)"
  },
  {
    "label": "GetGizmoType()",
    "kind": "Method",
    "detail": "Function (} EGizmoHandleTypes)",
    "insertText": "GetGizmoType()"
  },
  {
    "label": "GetBoundingBoxEdge()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "GetBoundingBoxEdge(const FBox& Box, const int32 AxisIndex, const int32 EdgeIndex, FVector& OutVertex0, FVector& OutVertex1)"
  },
  {
    "label": "UpdateHandleVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHandleVisibility(const EGizmoHandleTypes InGizmoType, const ECoordSystem InGizmoCoordinateSpace, bool bInAllHandlesVisible, UActorComponent* DraggingHandle)"
  },
  {
    "label": "GetShowMeasurementText()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShowMeasurementText()"
  }
]