[
  {
    "label": "AudioVector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioVector"
  },
  {
    "label": "AudioVector()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_NETEQ_AUDIO_VECTOR_H_ # define MODULES_AUDIO_CODING_NETEQ_AUDIO_VECTOR_H_ # include<string . h> # include<cstdint> # include<memory> # include \" rtc_base / checks . h \" namespace webrtc { class AudioVector { public :)",
    "insertText": "AudioVector()"
  },
  {
    "label": "AudioVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioVector(size_t initial_size)"
  },
  {
    "label": "AudioVector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioVector(const AudioVector&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioVector&)",
    "insertText": "operator(const AudioVector&)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(AudioVector* copy_to)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyTo(size_t length, size_t position, int16_t* copy_to)"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFront(const AudioVector& prepend_this)"
  },
  {
    "label": "PushFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushFront(const int16_t* prepend_this, size_t length)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBack(const AudioVector& append_this)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBack(const AudioVector& append_this, size_t length, size_t position)"
  },
  {
    "label": "PushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushBack(const int16_t* append_this, size_t length)"
  },
  {
    "label": "PopFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopFront(size_t length)"
  },
  {
    "label": "PopBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopBack(size_t length)"
  },
  {
    "label": "Extend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Extend(size_t extra_length)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertAt(const int16_t* insert_this, size_t length, size_t position)"
  },
  {
    "label": "InsertZerosAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertZerosAt(size_t length, size_t position)"
  },
  {
    "label": "OverwriteAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverwriteAt(const AudioVector& insert_this, size_t length, size_t position)"
  },
  {
    "label": "OverwriteAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OverwriteAt(const int16_t* insert_this, size_t length, size_t position)"
  },
  {
    "label": "CrossFade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CrossFade(const AudioVector& append_this, size_t fade_length)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Size()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Empty()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const int16_t&)",
    "insertText": "operator(size_t index)"
  },
  {
    "label": "WrapIndex()",
    "kind": "Method",
    "detail": "Function (} private : const size_t kDefaultInitialSize = 1 0 ; size_t)",
    "insertText": "WrapIndex(size_t index, size_t begin_index, size_t capacity)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(index, capacity)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_LT(begin_index, capacity)"
  },
  {
    "label": "RTC_DCHECK_GE()",
    "kind": "Method",
    "detail": "Function (size_t ix = begin_index + index ;)",
    "insertText": "RTC_DCHECK_GE(ix, index)"
  },
  {
    "label": "RTC_DCHECK_LT()",
    "kind": "Method",
    "detail": "Function (ix - = capacity ; })",
    "insertText": "RTC_DCHECK_LT(ix, capacity)"
  },
  {
    "label": "InsertByPushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertByPushBack(const int16_t* insert_this, size_t length, size_t position)"
  },
  {
    "label": "InsertByPushFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertByPushFront(const int16_t* insert_this, size_t length, size_t position)"
  },
  {
    "label": "InsertZerosByPushBack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertZerosByPushBack(size_t length, size_t position)"
  },
  {
    "label": "InsertZerosByPushFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertZerosByPushFront(size_t length, size_t position)"
  }
]