[
  {
    "label": "VideoTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoTrack"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_VIDEO_TRACK_H_ # define PC_VIDEO_TRACK_H_ # include<string> # include \" absl / types / optional . h \" # include \" api / media_stream_interface . h \" # include \" api / media_stream_track . h \" # include \" api / scoped_refptr . h \" # include \" api / sequence_checker . h \" # include \" api / video / video_frame . h \" # include \" api / video / video_sink_interface . h \" # include \" api / video / video_source_interface . h \" # include \" media / base / video_source_base . h \" # include \" pc / video_track_source_proxy . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" rtc_base / thread . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class VideoTrack : public MediaStreamTrack<VideoTrackInterface>,public rtc::VideoSourceBaseGuarded,public ObserverInterface { public : rtc::scoped_refptr<VideoTrack>)",
    "insertText": "Create(absl::string_view label, rtc::scoped_refptr<VideoTrackSourceInterface> source, rtc::Thread* worker_thread)"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateSink(rtc::VideoSinkInterface<VideoFrame>* sink, const rtc::VideoSinkWants& wants)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(rtc::VideoSinkInterface<VideoFrame>* sink)"
  },
  {
    "label": "RequestRefreshFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRefreshFrame()"
  },
  {
    "label": "GetSource()",
    "kind": "Method",
    "detail": "Function (VideoTrackSourceInterface*)",
    "insertText": "GetSource()"
  },
  {
    "label": "content_hint()",
    "kind": "Method",
    "detail": "Function (ContentHint)",
    "insertText": "content_hint()"
  },
  {
    "label": "set_content_hint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_content_hint(ContentHint hint)"
  },
  {
    "label": "set_enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "set_enabled(bool enable)"
  },
  {
    "label": "enabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "enabled()"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (MediaStreamTrackInterface::TrackState)",
    "insertText": "state()"
  },
  {
    "label": "kind()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "kind()"
  },
  {
    "label": "GetSourceInternal()",
    "kind": "Method",
    "detail": "Function (VideoTrackSourceInterface*)",
    "insertText": "GetSourceInternal()"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "VideoTrack(absl::string_view id, rtc::scoped_refptr< VideoTrackSourceProxyWithInternal<VideoTrackSourceInterface>> source, rtc::Thread* worker_thread)"
  },
  {
    "label": "VideoTrack()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoTrack()"
  },
  {
    "label": "OnChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnChanged()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker signaling_thread_ ; rtc::Thread* const worker_thread_ ; const rtc::scoped_refptr<VideoTrackSourceProxyWithInternal<VideoTrackSourceInterface>> video_source_ ; ContentHint content_hint_)",
    "insertText": "RTC_GUARDED_BY(&signaling_thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (bool enabled_w_)",
    "insertText": "RTC_GUARDED_BY(worker_thread_)"
  }
]