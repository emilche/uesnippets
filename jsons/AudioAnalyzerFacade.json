[
  {
    "label": "FAnalyzerFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnalyzerFacade"
  },
  {
    "label": "GetAnalyzerFactory()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" CoreMinimal . h \" # include \" HAL / Platform . h \" # include \" IAudioAnalyzerInterface . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" namespace Audio { IAnalyzerFactory*)",
    "insertText": "GetAnalyzerFactory(FName InFactoryName)"
  },
  {
    "label": "FAnalyzerFacade()",
    "kind": "Method",
    "detail": "Function (class FAnalyzerFacade { public :)",
    "insertText": "FAnalyzerFacade(TUniquePtr<IAnalyzerSettings> InSettings, IAnalyzerFactory* InFactory)"
  },
  {
    "label": "AnalyzeAudioBuffer()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IAnalyzerResult>)",
    "insertText": "AnalyzeAudioBuffer(const TArray<float>& InAudioBuffer, int32 InNumChannels, float InSampleRate, TSharedPtr<IAnalyzerControls> InControls)"
  }
]