[
  {
    "label": "VideoCodecTestFixtureImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoCodecTestFixtureImpl"
  },
  {
    "label": "H264KeyframeChecker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "H264KeyframeChecker"
  },
  {
    "label": "CpuProcessTime",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CpuProcessTime"
  },
  {
    "label": "CheckEncodedFrame()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_TEST_VIDEOCODEC_TEST_FIXTURE_IMPL_H_ # define MODULES_VIDEO_CODING_CODECS_TEST_VIDEOCODEC_TEST_FIXTURE_IMPL_H_ # include<memory> # include<string> # include<vector> # include \" api / test / videocodec_test_fixture . h \" # include \" api / video_codecs / video_decoder_factory . h \" # include \" api / video_codecs / video_encoder_factory . h \" # include \" common_video / h264 / h264_common . h \" # include \" modules / video_coding / codecs / test / videocodec_test_stats_impl . h \" # include \" modules / video_coding / codecs / test / videoprocessor . h \" # include \" modules / video_coding / utility / ivf_file_writer . h \" # include \" rtc_base / task_queue_for_test . h \" # include \" test / testsupport / frame_reader . h \" # include \" test / testsupport / frame_writer . h \" namespace webrtc { namespace test { class VideoCodecTestFixtureImpl : public VideoCodecTestFixture { public : class H264KeyframeChecker : public EncodedFrameChecker { public : void)",
    "insertText": "CheckEncodedFrame(webrtc::VideoCodecType codec, const EncodedImage& encoded_frame)"
  },
  {
    "label": "VideoCodecTestFixtureImpl()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "VideoCodecTestFixtureImpl(Config config)"
  },
  {
    "label": "VideoCodecTestFixtureImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoCodecTestFixtureImpl(Config config, std::unique_ptr<VideoDecoderFactory> decoder_factory, std::unique_ptr<VideoEncoderFactory> encoder_factory)"
  },
  {
    "label": "VideoCodecTestFixtureImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "VideoCodecTestFixtureImpl()"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RunTest(const std::vector<RateProfile>& rate_profiles, const std::vector<RateControlThresholds>* rc_thresholds, const std::vector<QualityThresholds>* quality_thresholds, const BitstreamThresholds* bs_thresholds)"
  },
  {
    "label": "GetStats()",
    "kind": "Method",
    "detail": "Function (VideoCodecTestStats&)",
    "insertText": "GetStats()"
  },
  {
    "label": "CreateEncoderAndDecoder()",
    "kind": "Method",
    "detail": "Function (private : class CpuProcessTime ; bool)",
    "insertText": "CreateEncoderAndDecoder()"
  },
  {
    "label": "DestroyEncoderAndDecoder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyEncoderAndDecoder()"
  },
  {
    "label": "SetUpAndInitObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUpAndInitObjects(TaskQueueForTest* task_queue, size_t initial_bitrate_kbps, double initial_framerate_fps)"
  },
  {
    "label": "ReleaseAndCloseObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAndCloseObjects(TaskQueueForTest* task_queue)"
  },
  {
    "label": "ProcessAllFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAllFrames(TaskQueueForTest* task_queue, const std::vector<RateProfile>& rate_profiles)"
  },
  {
    "label": "AnalyzeAllFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyzeAllFrames(const std::vector<RateProfile>& rate_profiles, const std::vector<RateControlThresholds>* rc_thresholds, const std::vector<QualityThresholds>* quality_thresholds, const BitstreamThresholds* bs_thresholds)"
  },
  {
    "label": "VerifyVideoStatistic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyVideoStatistic(const VideoCodecTestStats::VideoStatistics& video_stat, const RateControlThresholds* rc_thresholds, const QualityThresholds* quality_thresholds, const BitstreamThresholds* bs_thresholds, size_t target_bitrate_kbps, double input_framerate_fps)"
  },
  {
    "label": "GetCodecName()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GetCodecName(TaskQueueForTest* task_queue, bool is_encoder)"
  },
  {
    "label": "PrintSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSettings(TaskQueueForTest* task_queue)"
  }
]