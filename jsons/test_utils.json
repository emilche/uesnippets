[
  {
    "label": "StreamSinkEvent",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "StreamSinkEvent"
  },
  {
    "label": "StreamSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamSink"
  },
  {
    "label": "StreamSink()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_TEST_UTILS_H_ # define RTC_BASE_TEST_UTILS_H_ # include<map> # include<utility> # include \" rtc_base / socket . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" namespace webrtc { namespace testing { enum StreamSinkEvent { SSE_OPEN = 1,SSE_READ = 2,SSE_WRITE = 4,SSE_CLOSE = 8,SSE_ERROR = 1 6 } ; class StreamSink : public sigslot::has_slots<> { public :)",
    "insertText": "StreamSink()"
  },
  {
    "label": "Monitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Monitor(rtc::Socket* socket)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (socket -> SignalConnectEvent .)",
    "insertText": "connect(this, &StreamSink::OnConnectEvent)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (socket -> SignalReadEvent .)",
    "insertText": "connect(this, &StreamSink::OnReadEvent)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (socket -> SignalWriteEvent .)",
    "insertText": "connect(this, &StreamSink::OnWriteEvent)"
  },
  {
    "label": "connect()",
    "kind": "Method",
    "detail": "Function (socket -> SignalCloseEvent .)",
    "insertText": "connect(this, &StreamSink::OnCloseEvent)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (events_ .)",
    "insertText": "erase(socket)"
  },
  {
    "label": "Unmonitor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Unmonitor(rtc::Socket* socket)"
  },
  {
    "label": "disconnect()",
    "kind": "Method",
    "detail": "Function (socket -> SignalConnectEvent .)",
    "insertText": "disconnect(this)"
  },
  {
    "label": "Check()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Check(rtc::Socket* socket, StreamSinkEvent event, bool reset = true)"
  },
  {
    "label": "OnConnectEvent()",
    "kind": "Method",
    "detail": "Function (} private : typedef std::map<rtc::Socket*,int> EventMap ; void)",
    "insertText": "OnConnectEvent(rtc::Socket* socket)"
  },
  {
    "label": "AddEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvents(socket, SSE_OPEN)"
  },
  {
    "label": "OnReadEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReadEvent(rtc::Socket* socket)"
  },
  {
    "label": "AddEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvents(socket, SSE_READ)"
  },
  {
    "label": "OnWriteEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnWriteEvent(rtc::Socket* socket)"
  },
  {
    "label": "AddEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvents(socket, SSE_WRITE)"
  },
  {
    "label": "OnCloseEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCloseEvent(rtc::Socket* socket, int error)"
  },
  {
    "label": "AddEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddEvents(socket, (0 == error) ? SSE_CLOSE : SSE_ERROR)"
  },
  {
    "label": "AddEvents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddEvents(rtc::Socket* obj, int events)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (EventMap::iterator it = events_ .)",
    "insertText": "find(obj)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (events_ .)",
    "insertText": "insert(EventMap::value_type(obj, events))"
  },
  {
    "label": "DoCheck()",
    "kind": "Method",
    "detail": "Function (} else { it -> second | = events ; } } bool)",
    "insertText": "DoCheck(rtc::Socket* obj, StreamSinkEvent event, bool reset)"
  }
]