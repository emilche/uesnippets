[
  {
    "label": "FVectorVMSerializeState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMSerializeState"
  },
  {
    "label": "EVectorVMSerializeFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVectorVMSerializeFlags"
  },
  {
    "label": "EVectorVMSerializeInstructionFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVectorVMSerializeInstructionFlags"
  },
  {
    "label": "EVectorVMSerializeError",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EVectorVMSerializeError"
  },
  {
    "label": "FVectorVMSerializeInstruction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMSerializeInstruction"
  },
  {
    "label": "FVectorVMSerializeExternalData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMSerializeExternalData"
  },
  {
    "label": "FVectorVMSerializeDataSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMSerializeDataSet"
  },
  {
    "label": "FVectorVMSerializeChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMSerializeChunk"
  },
  {
    "label": "FVectorVMOptimizeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorVMOptimizeContext"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorVMCommon . h \" # if VECTORVM_SUPPORTS_SERIALIZATION typedef)",
    "insertText": "uint32(VectorVMSerializeErrorCallback) (struct FVectorVMSerializeState *SerializeState, uint32 ErrorFlags)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(VectorVMSerializeMismatchCallback) (bool IntVal, EVectorVMOp OpCode, uint32 InstructionIndex, int RegisterIndex, int InstanceIndex)"
  },
  {
    "label": "VVMSer_batchStart()",
    "kind": "Method",
    "detail": "Function (enum EVectorVMSerializeFlags { VVMSer_SyncRandom = 1<<0,VVMSer_SyncExtFns = 1<<1,VVMSer_OptimizedBytecode = 1<<2,VVMSer_IncludeOptContext = 1<<3,VVMSer_DiffRegsPerIns = 1<<4,} ; enum EVectorVMSerializeInstructionFlags { VVMSerIns_Float = 1<<0,VVMSerIns_Int = 1<<1,} ; enum EVectorVMSerializeError { VVMSerErr_OutOfMemory = 1<<0,VVMSerErr_Init = 1<<1,VVMSerErr_InputDataSets = 1<<2,VVMSerErr_OutputDataSets = 1<<3,VVMSerErr_Instruction = 1<<4,VVMSerErr_ConstData = 1<<5,VVMSerErr_Fatal = 1<<3 1 } ; struct FVectorVMSerializeInstruction { uint32 OpStart ; uint32 NumOps ; uint64 Dt ; uint64 DtDecode ; uint32* RegisterTable ; uint8* RegisterFlags ; } ; struct FVectorVMSerializeExternalData { wchar_t* Name ; uint16 NameLen ; uint16 NumInputs ; uint16 NumOutputs ; } ; struct FVectorVMSerializeDataSet { uint32* InputBuffers ; uint32* OutputBuffers ; uint32 InputOffset [ 4 ] ; uint32 OutputOffset [ 4 ] ; int32 InputInstanceOffset ; int32 InputDataSetAccessIndex ; int32 InputIDAcquireTag ; int32 OutputInstanceOffset ; int32 OutputDataSetAccessIndex ; int32 OutputIDAcquireTag ; int32* InputIDTable ; int32* InputFreeIDTable ; int32* InputSpawnedIDTable ; int32 InputIDTableNum ; int32 InputFreeIDTableNum ; int32 InputSpawnedIDTableNum ; int32 InputNumFreeIDs ; int32 InputMaxUsedIDs ; int32 InputNumSpawnedIDs ; int32* OutputIDTable ; int32* OutputFreeIDTable ; int32* OutputSpawnedIDTable ; int32 OutputIDTableNum ; int32 OutputFreeIDTableNum ; int32 OutputSpawnedIDTableNum ; int32 OutputNumFreeIDs ; int32 OutputMaxUsedIDs ; int32 OutputNumSpawnedIDs ; } ; struct FVectorVMSerializeChunk { uint32 ChunkIdx ; uint32 BatchIdx ; uint32 ExecIdx ; uint32 StartInstance ; uint32 NumInstances ; uint32 StartThreadID ; uint32 EndThreadID ; uint64 StartClock ; uint64 EndClock ; uint64 InsExecTime ; } ; struct FVectorVMSerializeState { uint32 NumInstances ; uint32 NumTempRegisters ; uint32 NumInputBuffers ; uint32 NumOutputBuffers ; uint32 NumConstBuffers ; uint32 NumRegisterTable ; uint32 Flags ; FVectorVMSerializeInstruction* Instructions ; uint32 NumInstructions ; uint32 NumInstructionsAllocated ; uint32 NumExternalData ; FVectorVMSerializeExternalData* ExternalData ; uint32 MaxExtFnRegisters ; uint32 MaxExtFnUsed ; uint64 OptimizerHashId ; uint64 ExecDt ; uint64 SerializeDt ; uint8* RegisterTableFlags ; uint8* Bytecode ; uint32 NumBytecodeBytes ; FVectorVMSerializeDataSet* DataSets ; uint32 NumDataSets ; uint32* ConstTableSizesInBytes ; uint32* PreExecConstData ; uint32* PostExecConstData ; uint8* OutputRemapDataSetIdx ; uint16* OutputRemapDataType ; uint16* OutputRemapDst ; uint32 NumChunks ; FVectorVMSerializeChunk* Chunks ; const struct FVectorVMOptimizeContext* OptimizeCtx ; volatile int64 ChunkComplete ; VectorVMReallocFn* ReallocFn ; VectorVMFreeFn* FreeFn ; VectorVMSerializeMismatchCallback* MismatchFn ; struct { const uint8* StartOpPtr ; uint64 StartCycles ; FVectorVMSerializeChunk* Chunk ; int NumInstructionsThisChunk ; int NumChunks ; } Running ; struct { uint32 Flags ; uint32 Line ; VectorVMSerializeErrorCallback* CallbackFn ; } Error ; } ; # define)",
    "insertText": "VVMSer_batchStart(...) #define VVMSer_batchEnd(...) #define VVMSer_chunkStart(...) #define VVMSer_chunkEnd(...) #define VVMSer_insStart(...) #define VVMSer_insEndDecode(...) #define VVMSer_insEnd(...) #define VVMSer_batchStartExp(SerializeState, ...) #define VVMSer_batchEndExp(SerializeState, ...) #define VVMIsRegIdxTempReg(Idx) ((Idx) < ExecCtx->VVMState->NumTempRegisters) #define VVMIsRegIdxConst(Idx) ((Idx) >= ExecCtx->VVMState->NumTempRegisters && (Idx) < ExecCtx->VVMState->NumTempRegisters + ExecCtx->VVMState->NumConstsRemapped) #define VVMIsRegIdxInput(Idx) ((Idx) >= ExecCtx->VVMState->NumTempRegisters + ExecCtx->VVMState->NumConstsRemapped) #if VECTORVM_DEBUG_PRINTF #define VVMSer_instruction(Type, NumParams) for (int vi = 0; vi <= (int)(NumParams); ++vi)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (\\ int)",
    "insertText": "r(int)((uint16 *)InsPtr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ char c = ' R ' ; \\)",
    "insertText": "if(r >= (int)(ExecCtx->VVMState->NumTempRegisters + ExecCtx->VVMState->NumConstBuffers + ExecCtx->VVMState->NumInputBuffers * 2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ c = ' O ' ; \\ r - = ExecCtx -> VVMState -> NumTempRegisters + ExecCtx -> VVMState -> NumConstBuffers + ExecCtx -> VVMState -> NumInputBuffers* 2 ; \\ } else)",
    "insertText": "if(r >= (int)(ExecCtx->VVMState->NumTempRegisters + ExecCtx->VVMState->NumConstBuffers))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ c = ' I ' ; \\ r - = ExecCtx -> VVMState -> NumTempRegisters + ExecCtx -> VVMState -> NumConstBuffers ; \\ } else)",
    "insertText": "if(r >= (int)ExecCtx->VVMState->NumTempRegisters)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (\\ c = ' C ' ; \\ r - = ExecCtx -> VVMState -> NumTempRegisters ; \\ } \\)",
    "insertText": "printf(\", %c%d\", c, r)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (\\ \\ } \\)",
    "insertText": "printf(\"\\n\")"
  },
  {
    "label": "VVMSer_instruction()",
    "kind": "Method",
    "detail": "Function (# else # define)",
    "insertText": "VVMSer_instruction(...) #endif #define VVMSer_chunkStartExp(SerializeState, ChunkIdx_, BatchIdx_) \\ if (SerializeState)"
  },
  {
    "label": "GetCurrentThreadId()",
    "kind": "Method",
    "detail": "Function (\\ SerializeState -> Running . NumInstructionsThisChunk = 0 ; \\ SerializeState -> Running . Chunk = SerializeState -> Chunks + SerializeState -> Running . NumChunks ; \\ SerializeState -> Running . Chunk -> ChunkIdx = SerializeState -> Running . NumChunks + + ; \\ SerializeState -> Running . Chunk -> BatchIdx = BatchIdx_ ; \\ SerializeState -> Running . Chunk -> NumInstances = BatchState -> ChunkLocalData . NumInstancesThisChunk ; \\ SerializeState -> Running . Chunk -> StartInstance = BatchState -> ChunkLocalData . StartInstanceThisChunk ; \\ SerializeState -> Running . Chunk -> StartThreadID =)",
    "insertText": "GetCurrentThreadId()"
  },
  {
    "label": "Cycles64()",
    "kind": "Method",
    "detail": "Function (\\ SerializeState -> Running . Chunk -> StartClock =)",
    "insertText": "Cycles64()"
  },
  {
    "label": "VVMSer_chunkEndExp()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VVMSer_chunkEndExp(SerializeState, ...) \\ if (SerializeState && SerializeState->Running.Chunk)"
  },
  {
    "label": "InterlockedOr()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "InterlockedOr(&SerializeState->ChunkComplete, (int64)((1ULL << (uint64)SerializeState->Running.Chunk->ChunkIdx)))"
  },
  {
    "label": "VVMSer_insStartExp()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VVMSer_insStartExp(SerializeState, ...) \\ if (SerializeState)"
  },
  {
    "label": "VVMSer_insEndExp()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VVMSer_insEndExp(SerializeState, OpStart, NumOps, ...) \\ if (SerializeState)"
  },
  {
    "label": "VVMSer_serializeInstruction()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "VVMSer_serializeInstruction(SerializeState, CmpSerializeState, \\ ExecCtx->VVMState, BatchState, \\ BatchState->ChunkLocalData.StartInstanceThisChunk, BatchState->ChunkLocalData.NumInstancesThisChunk, NumLoops, \\ OpStart, NumOps, SerializeState->Running.StartCycles, VVMSerEndExecCycles)"
  },
  {
    "label": "VVMSer_initSerializationState()",
    "kind": "Method",
    "detail": "Function (\\ SerializeState -> SerializeDt + = VVMSerEndSerializeCycles - VVMSerEndExecCycles ; \\ SerializeState -> Running . Chunk -> InsExecTime + = VVMSerEndExecCycles - SerializeState -> Running . StartCycles ; \\ } # define)",
    "insertText": "VVMSer_initSerializationState(ExecCtx, SerializeState, OptimizeContext, Flags) VVMSer_initSerializationState_(SerializeState, ExecCtx, SerializeState ? OptimizeContext : NULL, SerializeState ? (uint32)Flags : 0)"
  }
]