[
  {
    "label": "Spline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Spline"
  },
  {
    "label": "representing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "representing"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "Spline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Spline"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (DenseIndex)",
    "insertText": "Span(typename SplineTraits<Spline>::Scalar u, DenseIndex degree, const typename SplineTraits<Spline>::KnotVectorType& knots)"
  },
  {
    "label": "BasisFunctions()",
    "kind": "Method",
    "detail": "Function (BasisVectorType)",
    "insertText": "BasisFunctions(Scalar u, DenseIndex degree, const KnotVectorType& knots)"
  },
  {
    "label": "BasisFunctionDerivatives()",
    "kind": "Method",
    "detail": "Function (BasisDerivativeType)",
    "insertText": "BasisFunctionDerivatives(\n      const Scalar u, const DenseIndex order, const DenseIndex degree, const KnotVectorType& knots)"
  },
  {
    "label": "BasisFunctionDerivativesImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BasisFunctionDerivativesImpl(\n      const typename Spline<_Scalar, _Dim, _Degree>::Scalar u,\n      const DenseIndex order,\n      const DenseIndex p, \n      const typename Spline<_Scalar, _Dim, _Degree>::KnotVectorType& U,\n      DerivativeType& N_)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (BasisVectorType)",
    "insertText": "left(p+1)"
  },
  {
    "label": "right()",
    "kind": "Method",
    "detail": "Function (BasisVectorType)",
    "insertText": "right(p+1)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (BasisVectorType)",
    "insertText": "N(1,p+1)"
  },
  {
    "label": "ndu()",
    "kind": "Method",
    "detail": "Function (Order>)",
    "insertText": "ndu(p+1,p+1)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (DerivativeType)",
    "insertText": "a(n+1,p+1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (derivative)",
    "insertText": "for(DenseIndex k=1; k<=static_cast<DenseIndex>(n)"
  }
]