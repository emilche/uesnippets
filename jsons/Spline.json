[
  {
    "label": "Spline",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Spline"
  },
  {
    "label": "Spline()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPLINE_H # define EIGEN_SPLINE_H # include \" SplineFwd . h \" namespace Eigen { template<_Scalar,int _Dim,int _Degree> class Spline { public : typedef _Scalar Scalar ; enum { Dimension = _Dim } ; enum { Degree = _Degree } ; typedef SplineTraits<Spline>::PointType PointType ; typedef SplineTraits<Spline>::KnotVectorType KnotVectorType ; typedef SplineTraits<Spline>::ParameterVectorType ParameterVectorType ; typedef SplineTraits<Spline>::BasisVectorType BasisVectorType ; typedef SplineTraits<Spline>::BasisDerivativeType BasisDerivativeType ; typedef SplineTraits<Spline>::ControlPointVectorType ControlPointVectorType ;)",
    "insertText": "Spline() : m_knots(1, (Degree==Dynamic ? 2 : 2*Degree+2)) , m_ctrls(ControlPointVectorType::Zero(Dimension,(Degree==Dynamic ? 1 : Degree+1)))"
  },
  {
    "label": "MinDegree()",
    "kind": "Method",
    "detail": "Function (enum {)",
    "insertText": "MinDegree(Degree==Dynamic ? 0 : Degree)"
  },
  {
    "label": "MinDegree()",
    "kind": "Method",
    "detail": "Function (m_knots . template segment<)",
    "insertText": "MinDegree(0) = Array<Scalar,1,MinDegree+1>::Zero()"
  },
  {
    "label": "MinDegree()",
    "kind": "Method",
    "detail": "Function (m_knots . template segment<)",
    "insertText": "MinDegree(MinDegree+1) = Array<Scalar,1,MinDegree+1>::Ones()"
  },
  {
    "label": "Spline()",
    "kind": "Method",
    "detail": "Function (} template<OtherVectorType,OtherArrayType>)",
    "insertText": "Spline(const OtherVectorType& knots, const OtherArrayType& ctrls) : m_knots(knots), m_ctrls(ctrls)"
  },
  {
    "label": "Spline()",
    "kind": "Method",
    "detail": "Function (} template<int OtherDegree>)",
    "insertText": "Spline(const Spline<Scalar, Dimension, OtherDegree>& spline) : m_knots(spline.knots()), m_ctrls(spline.ctrls())"
  },
  {
    "label": "knots()",
    "kind": "Method",
    "detail": "Function (} const KnotVectorType&)",
    "insertText": "knots()"
  },
  {
    "label": "derivatives()",
    "kind": "Method",
    "detail": "Function (SplineTraits<Spline>::DerivativeType)",
    "insertText": "derivatives(Scalar u, DenseIndex order)"
  },
  {
    "label": "derivatives()",
    "kind": "Method",
    "detail": "Function (template<int DerivativeOrder> SplineTraits<Spline,DerivativeOrder>::DerivativeType)",
    "insertText": "derivatives(Scalar u, DenseIndex order = DerivativeOrder)"
  },
  {
    "label": "basisFunctions()",
    "kind": "Method",
    "detail": "Function (SplineTraits<Spline>::BasisVectorType)",
    "insertText": "basisFunctions(Scalar u)"
  },
  {
    "label": "basisFunctionDerivatives()",
    "kind": "Method",
    "detail": "Function (SplineTraits<Spline>::BasisDerivativeType)",
    "insertText": "basisFunctionDerivatives(Scalar u, DenseIndex order)"
  },
  {
    "label": "basisFunctionDerivatives()",
    "kind": "Method",
    "detail": "Function (template<int DerivativeOrder> SplineTraits<Spline,DerivativeOrder>::BasisDerivativeType)",
    "insertText": "basisFunctionDerivatives(Scalar u, DenseIndex order = DerivativeOrder)"
  },
  {
    "label": "degree()",
    "kind": "Method",
    "detail": "Function (DenseIndex)",
    "insertText": "degree()"
  },
  {
    "label": "span()",
    "kind": "Method",
    "detail": "Function (DenseIndex)",
    "insertText": "span(Scalar u)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (DenseIndex)",
    "insertText": "Span(typename SplineTraits<Spline>::Scalar u, DenseIndex degree, const typename SplineTraits<Spline>::KnotVectorType& knots)"
  },
  {
    "label": "BasisFunctions()",
    "kind": "Method",
    "detail": "Function (BasisVectorType)",
    "insertText": "BasisFunctions(Scalar u, DenseIndex degree, const KnotVectorType& knots)"
  },
  {
    "label": "BasisFunctionDerivatives()",
    "kind": "Method",
    "detail": "Function (BasisDerivativeType)",
    "insertText": "BasisFunctionDerivatives(const Scalar u, const DenseIndex order, const DenseIndex degree, const KnotVectorType& knots)"
  },
  {
    "label": "BasisFunctionDerivativesImpl()",
    "kind": "Method",
    "detail": "Function (private : KnotVectorType m_knots ; ControlPointVectorType m_ctrls ; template<DerivativeType> void)",
    "insertText": "BasisFunctionDerivativesImpl(const typename Spline<_Scalar, _Dim, _Degree>::Scalar u, const DenseIndex order, const DenseIndex p, const typename Spline<_Scalar, _Dim, _Degree>::KnotVectorType& U, DerivativeType& N_)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (} ; template<_Scalar,int _Dim,int _Degree> DenseIndex Spline<_Scalar,_Dim,_Degree)",
    "insertText": "Span(typename SplineTraits< Spline<_Scalar, _Dim, _Degree> >::Scalar u, DenseIndex degree, const typename SplineTraits< Spline<_Scalar, _Dim, _Degree> >::KnotVectorType& knots)"
  },
  {
    "label": "upper_bound()",
    "kind": "Method",
    "detail": "Function (const Scalar* pos =)",
    "insertText": "upper_bound(knots.data()+degree-1, knots.data()+knots.size()-degree-1, u)"
  },
  {
    "label": "BasisFunctions()",
    "kind": "Method",
    "detail": "Function (} template<_Scalar,int _Dim,int _Degree> Spline<_Scalar,_Dim,_Degree>::BasisVectorType Spline<_Scalar,_Dim,_Degree)",
    "insertText": "BasisFunctions(typename Spline<_Scalar, _Dim, _Degree>::Scalar u, DenseIndex degree, const typename Spline<_Scalar, _Dim, _Degree>::KnotVectorType& knots)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (const DenseIndex p = degree ; const DenseIndex i =)",
    "insertText": "Span(u, degree, knots)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (const KnotVectorType& U = knots ; BasisVectorType)",
    "insertText": "left(p+1)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "left(0) = Scalar(0)"
  },
  {
    "label": "right()",
    "kind": "Method",
    "detail": "Function (BasisVectorType)",
    "insertText": "right(p+1)"
  },
  {
    "label": "right()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "right(0) = Scalar(0)"
  },
  {
    "label": "Degree()",
    "kind": "Method",
    "detail": "Function (VectorBlock<BasisVectorType,)",
    "insertText": "Degree(left,1,p) = u - VectorBlock<const KnotVectorType,Degree>(U,i+1-p,p).reverse()"
  },
  {
    "label": "Degree()",
    "kind": "Method",
    "detail": "Function (VectorBlock<BasisVectorType,)",
    "insertText": "Degree(right,1,p) = VectorBlock<const KnotVectorType,Degree>(U,i+1,p)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (BasisVectorType)",
    "insertText": "N(1,p+1)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "N(0) = Scalar(1)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar saved =)",
    "insertText": "Scalar(0)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (const Scalar tmp =)",
    "insertText": "N(r)/(right(r+1)+left(j-r))"
  },
  {
    "label": "right()",
    "kind": "Method",
    "detail": "Function (N [ r ] = saved +)",
    "insertText": "right(r+1)"
  },
  {
    "label": "left()",
    "kind": "Method",
    "detail": "Function (saved =)",
    "insertText": "left(j-r)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "N(j)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<_Scalar,int _Dim,int _Degree> Spline<_Scalar,_Dim,_Degree>::PointType Spline<_Scalar,_Dim,_Degree)",
    "insertText": "operator()(Scalar u)"
  },
  {
    "label": "span()",
    "kind": "Method",
    "detail": "Function (enum { Order = SplineTraits<Spline>::OrderAtCompileTime } ; const DenseIndex span = this ->)",
    "insertText": "span(u)"
  },
  {
    "label": "basisFunctions()",
    "kind": "Method",
    "detail": "Function (const BasisVectorType basis_funcs =)",
    "insertText": "basisFunctions(u)"
  },
  {
    "label": "ctrl_weights()",
    "kind": "Method",
    "detail": "Function (const Replicate<BasisVectorType,Dimension,1>)",
    "insertText": "ctrl_weights(basis_funcs)"
  },
  {
    "label": "ctrl_pts()",
    "kind": "Method",
    "detail": "Function (const Block<const ControlPointVectorType,Dimension,Order>)",
    "insertText": "ctrl_pts(ctrls(),0,span-p,Dimension,p+1)"
  },
  {
    "label": "derivativesImpl()",
    "kind": "Method",
    "detail": "Function (} template<SplineType,DerivativeType> void)",
    "insertText": "derivativesImpl(const SplineType& spline, typename SplineType::Scalar u, DenseIndex order, DerivativeType& der)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (const DenseIndex)",
    "insertText": "n(std::min)(p, order)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (der .)",
    "insertText": "resize(Dimension,n+1)"
  },
  {
    "label": "DerivativeOrder()",
    "kind": "Method",
    "detail": "Function (const BasisDerivativeType basis_func_ders = spline . template basisFunctionDerivatives<)",
    "insertText": "DerivativeOrder(u, n+1)"
  },
  {
    "label": "ctrl_weights()",
    "kind": "Method",
    "detail": "Function (const Replicate<BasisDerivativeRowXpr,Dimension,1>)",
    "insertText": "ctrl_weights(basis_func_ders.row(der_order))"
  },
  {
    "label": "ctrl_pts()",
    "kind": "Method",
    "detail": "Function (const Block<const ControlPointVectorType,Dimension,Order>)",
    "insertText": "ctrl_pts(spline.ctrls(),0,span-p,Dimension,p+1)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (der .)",
    "insertText": "col(der_order) = (ctrl_weights * ctrl_pts).rowwise().sum()"
  },
  {
    "label": "derivativesImpl()",
    "kind": "Method",
    "detail": "Function (SplineTraits<Spline>::DerivativeType res ;)",
    "insertText": "derivativesImpl(*this, u, order, res)"
  },
  {
    "label": "Span()",
    "kind": "Method",
    "detail": "Function (typedef Spline<_Scalar,_Dim,_Degree> SplineType ; enum { Order = SplineTraits<SplineType>::OrderAtCompileTime } ; const DenseIndex span =)",
    "insertText": "Span(u, p, U)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (N_ .)",
    "insertText": "resize(n+1, p+1)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (BasisVectorType left =)",
    "insertText": "Zero(p+1)"
  },
  {
    "label": "ndu()",
    "kind": "Method",
    "detail": "Function (Matrix<Scalar,Order,Order>)",
    "insertText": "ndu(p+1,p+1)"
  },
  {
    "label": "ndu()",
    "kind": "Method",
    "detail": "Function (Scalar saved,temp ;)",
    "insertText": "ndu(0,0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DenseIndex j ;)",
    "insertText": "for(j=1; j<=p; ++j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (left [ j ] = u - U [ span + 1 - j ] ; right [ j ] = U [ span + j ] - u ; saved = 0 . 0 ;)",
    "insertText": "for(DenseIndex r=0; r<j; ++r)"
  },
  {
    "label": "ndu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ndu(j,r)"
  },
  {
    "label": "ndu()",
    "kind": "Method",
    "detail": "Function (temp =)",
    "insertText": "ndu(r,j-1)/ndu(j,r)"
  },
  {
    "label": "ndu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ndu(r,j) = static_cast<Scalar>(saved+right[r+1] * temp)"
  },
  {
    "label": "ndu()",
    "kind": "Method",
    "detail": "Function (saved = left [ j - r ]* temp ; })",
    "insertText": "ndu(j,j) = static_cast<Scalar>(saved)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(j = p; j>=0; --j) N_(0,j) = ndu(j,p)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (DerivativeType)",
    "insertText": "a(n+1,p+1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (DenseIndex r = 0 ;)",
    "insertText": "for(; r<=p; ++r)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (DenseIndex s1,s2 ; s1 = 0 ; s2 = 1 ;)",
    "insertText": "a(0,0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Scalar d = 0 . 0 ; DenseIndex rk,pk,j1,j2 ; rk = r - k ; pk = p - k ;)",
    "insertText": "if(r>=k)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(s2,0) = a(s1,0)/ndu(pk+1,rk)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (d =)",
    "insertText": "a(s2,0)*ndu(rk,pk)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(rk>=-1)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(s2,j) = (a(s1,j)-a(s1,j-1))/ndu(pk+1,rk+j)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (d + =)",
    "insertText": "a(s2,j)*ndu(rk+j,pk)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(r<=pk)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(s2,k) = -a(s1,k-1)/ndu(pk+1,r)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (d + =)",
    "insertText": "a(s2,k)*ndu(r,pk)"
  },
  {
    "label": "N_()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "N_(k,r) = static_cast<Scalar>(d)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (j = s1 ; s1 = s2 ; s2 = j ; } } r = p ;)",
    "insertText": "for(DenseIndex k=1; k<=static_cast<DenseIndex>(n); ++k)"
  },
  {
    "label": "BasisFunctionDerivativesImpl()",
    "kind": "Method",
    "detail": "Function (SplineTraits<Spline<_Scalar,_Dim,_Degree>>::BasisDerivativeType der ;)",
    "insertText": "BasisFunctionDerivativesImpl(u, order, degree(), knots(), der)"
  },
  {
    "label": "BasisFunctionDerivativesImpl()",
    "kind": "Method",
    "detail": "Function (SplineTraits<Spline>::BasisDerivativeType der ;)",
    "insertText": "BasisFunctionDerivativesImpl(u, order, degree, knots, der)"
  }
]