[
  {
    "label": "FAnimationFileHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimationFileHeader"
  },
  {
    "label": "FSerializedAnimationPerFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedAnimationPerFrame"
  },
  {
    "label": "FSerializedAnimation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSerializedAnimation"
  },
  {
    "label": "FAnimationFileHeader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / FrameRate . h \" # include \" UObject / UnrealType . h \" # include \" MovieSceneSectionSerialization . h \" struct FAnimationFileHeader { const int32 cVersion = 1 ;)",
    "insertText": "FAnimationFileHeader() : Version(cVersion)"
  },
  {
    "label": "FAnimationFileHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimationFileHeader(const FName& InSerializedType, FGuid& InGuid, float InIntervalTime) : Version(cVersion) , SerializedType(InSerializedType) , Guid(InGuid) , IntervalTime(InIntervalTime)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FAnimationFileHeader& Header)"
  },
  {
    "label": "AddNewRawTrack()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . Version ; Ar<<Header . SerializedType ; Ar<<Header . Guid ; Ar<<Header . ActorGuid ; Ar<<Header . IntervalTime ; Ar<<Header . StartTime ; Ar<<Header . AnimationTrackNames ; return Ar ; } void)",
    "insertText": "AddNewRawTrack(const FName& BoneTreeName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AnimationTrackNames .)",
    "insertText": "Add(BoneTreeName)"
  },
  {
    "label": "FSerializedAnimationPerFrame()",
    "kind": "Method",
    "detail": "Function (} int32 Version ; FName SerializedType ; FGuid Guid ; FGuid ActorGuid ; float IntervalTime ; float StartTime ; TArray<FName> AnimationTrackNames ; } ; struct FSerializedAnimationPerFrame {)",
    "insertText": "FSerializedAnimationPerFrame()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FSerializedAnimationPerFrame& Animation)"
  },
  {
    "label": "FSerializedAnimation()",
    "kind": "Method",
    "detail": "Function (Ar<<Animation . BoneIndex ; Ar<<Animation . PosKey ; Ar<<Animation . RotKey ; Ar<<Animation . ScaleKey ; return Ar ; } int32 BoneIndex ; FVector PosKey ; FQuat RotKey ; FVector ScaleKey ; } ; struct FSerializedAnimation {)",
    "insertText": "FSerializedAnimation()"
  },
  {
    "label": "AddTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTransform(int32 BoneIndex, const FTransform& InTransform)"
  },
  {
    "label": "GetTranslation()",
    "kind": "Method",
    "detail": "Function (FSerializedAnimationPerFrame Frame ; Frame . BoneIndex = BoneIndex ; Frame . PosKey = InTransform .)",
    "insertText": "GetTranslation()"
  },
  {
    "label": "GetRotation()",
    "kind": "Method",
    "detail": "Function (Frame . RotKey = InTransform .)",
    "insertText": "GetRotation()"
  },
  {
    "label": "GetScale3D()",
    "kind": "Method",
    "detail": "Function (Frame . ScaleKey = InTransform .)",
    "insertText": "GetScale3D()"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (AnimationData .)",
    "insertText": "Emplace(Frame)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FSerializedAnimation& Animation)"
  }
]