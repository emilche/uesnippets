[
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef __VALGRIND_H # define __VALGRIND_H # define __VALGRIND_MAJOR__ 3 # define __VALGRIND_MINOR__ 6 # include<stdarg . h> # undef PLAT_ppc64_aix5 # undef PLAT_ppc32_aix5 # undef PLAT_x86_darwin # undef PLAT_amd64_darwin # undef PLAT_x86_win32 # undef PLAT_x86_linux # undef PLAT_amd64_linux # undef PLAT_ppc32_linux # undef PLAT_ppc64_linux # undef PLAT_arm_linux # if)",
    "insertText": "defined(_AIX) && defined(__64BIT__) # define PLAT_ppc64_aix5 1 #elif defined(_AIX) && !defined(__64BIT__) # define PLAT_ppc32_aix5 1 #elif defined(__APPLE__) && defined(__i386__) # define PLAT_x86_darwin 1 #elif defined(__APPLE__) && defined(__x86_64__) # define PLAT_amd64_darwin 1 #elif defined(__MINGW32__) || defined(__CYGWIN32__) || defined(_WIN32) && defined(_M_IX86) # define PLAT_x86_win32 1 #elif defined(__linux__) && defined(__i386__) # define PLAT_x86_linux 1 #elif defined(__linux__) && defined(__x86_64__) # define PLAT_amd64_linux 1 #elif defined(__linux__) && defined(__powerpc__) && !defined(__powerpc64__) # define PLAT_ppc32_linux 1 #elif defined(__linux__) && defined(__powerpc__) && defined(__powerpc64__) # define PLAT_ppc64_linux 1 #elif defined(__linux__) && defined(__arm__) # define PLAT_arm_linux 1 #else # if !defined(NVALGRIND) # define NVALGRIND 1 # endif #endif #if defined(NVALGRIND) #define VALGRIND_DO_CLIENT_REQUEST( \\ _zzq_rlval, _zzq_default, _zzq_request, \\ _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ } # else # if)",
    "insertText": "defined(PLAT_x86_linux) || defined(PLAT_x86_darwin) \\ || (defined(PLAT_x86_win32) && defined(__GNUC__))"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int nraddr ; } OrigFn ; # define __SPECIAL_INSTRUCTION_PREAMBLE \\ \" roll $ 3,% % edi ; roll $ 1 3,% % edi \\ n \\ t \" \\ \" roll $ 2 9,% % edi ; roll $ 1 9,% % edi \\ n \\ t \" # define)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(\\ _zzq_rlval, _zzq_default, _zzq_request, \\ _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (volatile unsigned int _zzq_args [ 6 ] ; \\ volatile unsigned int _zzq_result ; \\)",
    "insertText": "_zzq_args(unsigned int)(_zzq_request)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int)(_zzq_arg1)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int)(_zzq_arg2)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int)(_zzq_arg3)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int)(_zzq_arg4)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int)(_zzq_arg5)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"xchgl %%ebx,%%ebx\" \\ : \"=d\" (_zzq_result) \\ : \"a\" (&_zzq_args[0]), \"0\" (_zzq_default) \\ : \"cc\", \"memory\" \\)"
  },
  {
    "label": "VALGRIND_GET_NR_CONTEXT()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_rlval = _zzq_result ; \\ } # define)",
    "insertText": "VALGRIND_GET_NR_CONTEXT(_zzq_rlval)"
  },
  {
    "label": "_zzq_orig()",
    "kind": "Method",
    "detail": "Function (volatile OrigFn*)",
    "insertText": "_zzq_orig(_zzq_rlval)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ volatile unsigned int __addr ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"xchgl %%ecx,%%ecx\" \\ : \"=a\" (__addr) \\ : \\ : \"cc\", \"memory\" \\)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> nraddr = __addr ; \\ } # define VALGRIND_CALL_NOREDIR_EAX \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \" xchgl % % edx,% % edx \\ n \\ t \" # endif # if)",
    "insertText": "defined(PLAT_x86_win32) && !defined(__GNUC__)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (unsigned int nraddr ; } OrigFn ; # if)",
    "insertText": "defined(_MSC_VER) #define __SPECIAL_INSTRUCTION_PREAMBLE \\ __asm rol edi, 3 __asm rol edi, 13 \\ __asm rol edi, 29 __asm rol edi, 19 #define VALGRIND_DO_CLIENT_REQUEST( \\ _zzq_rlval, _zzq_default, _zzq_request, \\ _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (volatile uintptr_t _zzq_args [ 6 ] ; \\ volatile unsigned int _zzq_result ; \\)",
    "insertText": "_zzq_args(uintptr_t)(_zzq_request)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(uintptr_t)(_zzq_arg1)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(uintptr_t)(_zzq_arg2)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(uintptr_t)(_zzq_arg3)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(uintptr_t)(_zzq_arg4)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(uintptr_t)(_zzq_arg5)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ volatile unsigned int __addr ; \\ __asm { __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ __asm xchg ecx,ecx \\ __asm mov __addr,eax \\ } \\ _zzq_orig -> nraddr = __addr ; \\ } # define VALGRIND_CALL_NOREDIR_EAX ERROR # else # error Unsupported compiler . # endif # endif # if)",
    "insertText": "defined(PLAT_amd64_linux) || defined(PLAT_amd64_darwin)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long long int _zzq_args [ 6 ] ; \\ volatile unsigned long long int _zzq_result ; \\)",
    "insertText": "_zzq_args(unsigned long long int)(_zzq_request)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned long long int)(_zzq_arg1)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned long long int)(_zzq_arg2)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned long long int)(_zzq_arg3)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned long long int)(_zzq_arg4)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned long long int)(_zzq_arg5)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"xchgq %%rbx,%%rbx\" \\ : \"=d\" (_zzq_result) \\ : \"a\" (&_zzq_args[0]), \"0\" (_zzq_default) \\ : \"cc\", \"memory\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ volatile unsigned long long int __addr ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"xchgq %%rcx,%%rcx\" \\ : \"=a\" (__addr) \\ : \\ : \"cc\", \"memory\" \\)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> nraddr = __addr ; \\ } # define VALGRIND_CALL_NOREDIR_RAX \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \" xchgq % % rdx,% % rdx \\ n \\ t \" # endif # if)",
    "insertText": "defined(PLAT_ppc32_linux)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_ptr = _zzq_args ; \\ __asm__)",
    "insertText": "volatile(\"mr 3,%1\\n\\t\" \\ \"mr 4,%2\\n\\t\" \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 1,1,1\\n\\t\" \\ \"mr %0,3\" \\ : \"=b\" (_zzq_result) \\ : \"b\" (_zzq_default), \"b\" (_zzq_ptr) \\ : \"cc\", \"memory\", \"r3\", \"r4\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ unsigned int __addr ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 2,2,2\\n\\t\" \\ \"mr %0,3\" \\ : \"=b\" (__addr) \\ : \\ : \"cc\", \"memory\", \"r3\" \\)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> nraddr = __addr ; \\ } # define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \" or 3,3,3 \\ n \\ t \" # endif # if)",
    "insertText": "defined(PLAT_ppc64_linux)"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (unsigned long long int _zzq_args [ 6 ] ; \\ register unsigned long long int _zzq_result)",
    "insertText": "__asm__(\"r3\")"
  },
  {
    "label": "__asm__()",
    "kind": "Method",
    "detail": "Function (\\ register unsigned long long int* _zzq_ptr)",
    "insertText": "__asm__(\"r4\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_ptr = _zzq_args ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 1,1,1\" \\ : \"=r\" (_zzq_result) \\ : \"0\" (_zzq_default), \"r\" (_zzq_ptr) \\ : \"cc\", \"memory\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 2,2,2\" \\ : \"=r\" (__addr) \\ : \\ : \"cc\", \"memory\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> nraddr = __addr ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 4,4,4\" \\ : \"=r\" (__addr) \\ : \\ : \"cc\", \"memory\" \\)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> r2 = __addr ; \\ } # define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \" or 3,3,3 \\ n \\ t \" # endif # if)",
    "insertText": "defined(PLAT_arm_linux)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\"mov r3, %1\\n\\t\" \\ \"mov r4, %2\\n\\t\" \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"orr r10, r10, r10\\n\\t\" \\ \"mov %0, r3\" \\ : \"=r\" (_zzq_result) \\ : \"r\" (_zzq_default), \"r\" (&_zzq_args[0]) \\ : \"cc\",\"memory\", \"r3\", \"r4\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ unsigned int __addr ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"orr r11, r11, r11\\n\\t\" \\ \"mov %0, r3\" \\ : \"=r\" (__addr) \\ : \\ : \"cc\", \"memory\", \"r3\" \\)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> nraddr = __addr ; \\ } # define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \" orr r12,r12,r12 \\ n \\ t \" # endif # if)",
    "insertText": "defined(PLAT_ppc32_aix5)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int)(_zzq_default)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_ptr = _zzq_args ; \\ __asm__)",
    "insertText": "volatile(\"mr 4,%1\\n\\t\" \\ \"lwz 3, 24(4)\\n\\t\" \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 1,1,1\\n\\t\" \\ \"mr %0,3\" \\ : \"=b\" (_zzq_result) \\ : \"b\" (_zzq_ptr) \\ : \"r3\", \"r4\", \"cc\", \"memory\")"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ register unsigned int __addr ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 2,2,2\\n\\t\" \\ \"mr %0,3\" \\ : \"=b\" (__addr) \\ : \\ : \"r3\", \"cc\", \"memory\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> nraddr = __addr ; \\ __asm__)",
    "insertText": "volatile(__SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 4,4,4\\n\\t\" \\ \"mr %0,3\" \\ : \"=b\" (__addr) \\ : \\ : \"r3\", \"cc\", \"memory\" \\)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> r2 = __addr ; \\ } # define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \" or 3,3,3 \\ n \\ t \" # endif # if)",
    "insertText": "defined(PLAT_ppc64_aix5)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (unsigned long long int _zzq_args [ 7 ] ; \\ register unsigned long long int _zzq_result ; \\ register unsigned long long int* _zzq_ptr ; \\)",
    "insertText": "_zzq_args(unsigned int long long)(_zzq_request)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int long long)(_zzq_arg1)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int long long)(_zzq_arg2)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int long long)(_zzq_arg3)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int long long)(_zzq_arg4)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int long long)(_zzq_arg5)"
  },
  {
    "label": "_zzq_args()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_zzq_args(unsigned int long long)(_zzq_default)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_ptr = _zzq_args ; \\ __asm__)",
    "insertText": "volatile(\"mr 4,%1\\n\\t\" \\ \"ld 3, 48(4)\\n\\t\" \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \"or 1,1,1\\n\\t\" \\ \"mr %0,3\" \\ : \"=b\" (_zzq_result) \\ : \"b\" (_zzq_ptr) \\ : \"r3\", \"r4\", \"cc\", \"memory\")"
  },
  {
    "label": "VG_CONCAT4()",
    "kind": "Method",
    "detail": "Function (\\ _zzq_orig -> r2 = __addr ; \\ } # define VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ __SPECIAL_INSTRUCTION_PREAMBLE \\ \\ \" or 3,3,3 \\ n \\ t \" # endif # endif # define)",
    "insertText": "VG_CONCAT4(_aa,_bb,_cc,_dd) _aa##_bb##_cc##_dd #define I_WRAP_SONAME_FNNAME_ZU(soname,fnname) \\ VG_CONCAT4(_vgwZU_,soname,_,fnname) #define I_WRAP_SONAME_FNNAME_ZZ(soname,fnname) \\ VG_CONCAT4(_vgwZZ_,soname,_,fnname) #define VALGRIND_GET_ORIG_FN(_lval) VALGRIND_GET_NR_CONTEXT(_lval) #define CALL_FN_v_v(fnptr)"
  },
  {
    "label": "CALL_FN_W_v()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_v(_junk,fnptr)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define CALL_FN_v_W(fnptr, arg1)"
  },
  {
    "label": "CALL_FN_W_W()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_W(_junk,fnptr,arg1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define CALL_FN_v_WW(fnptr, arg1,arg2)"
  },
  {
    "label": "CALL_FN_W_WW()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_WW(_junk,fnptr,arg1,arg2)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define CALL_FN_v_WWW(fnptr, arg1,arg2,arg3)"
  },
  {
    "label": "CALL_FN_W_WWW()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_WWW(_junk,fnptr,arg1,arg2,arg3)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define CALL_FN_v_WWWW(fnptr, arg1,arg2,arg3,arg4)"
  },
  {
    "label": "CALL_FN_W_WWWW()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_WWWW(_junk,fnptr,arg1,arg2,arg3,arg4)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define CALL_FN_v_5W(fnptr, arg1,arg2,arg3,arg4,arg5)"
  },
  {
    "label": "CALL_FN_W_5W()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_5W(_junk,fnptr,arg1,arg2,arg3,arg4,arg5)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define CALL_FN_v_6W(fnptr, arg1,arg2,arg3,arg4,arg5,arg6)"
  },
  {
    "label": "CALL_FN_W_6W()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_6W(_junk,fnptr,arg1,arg2,arg3,arg4,arg5,arg6)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #define CALL_FN_v_7W(fnptr, arg1,arg2,arg3,arg4,arg5,arg6,arg7)"
  },
  {
    "label": "CALL_FN_W_7W()",
    "kind": "Method",
    "detail": "Function (volatile unsigned long _junk ; \\)",
    "insertText": "CALL_FN_W_7W(_junk,fnptr,arg1,arg2,arg3,arg4,arg5,arg6,arg7)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(0) #if defined(PLAT_x86_linux) || defined(PLAT_x86_darwin) #define __CALLER_SAVED_REGS \"ecx\", \"edx\" #define CALL_FN_W_v(lval, orig)"
  },
  {
    "label": "_orig()",
    "kind": "Method",
    "detail": "Function (\\ volatile OrigFn)",
    "insertText": "_orig(orig)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\ volatile unsigned long _argvec [ 1 ] ; \\ volatile unsigned long _res ; \\)",
    "insertText": "_argvec(unsigned long)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "lval()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "lval(__typeof__(lval))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_W(lval, orig, arg1)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg1)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $12, %%esp\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $16, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_WW(lval, orig, arg1,arg2)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg2)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $8, %%esp\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $16, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_WWW(lval, orig, arg1,arg2,arg3)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg3)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $4, %%esp\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $16, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_WWWW(lval, orig, arg1,arg2,arg3,arg4)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg4)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $16, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_5W(lval, orig, arg1,arg2,arg3,arg4,arg5)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg5)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $12, %%esp\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $32, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_6W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg6)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $8, %%esp\\n\\t\" \\ \"pushl 24(%%eax)\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $32, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_7W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6, \\ arg7)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg7)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $4, %%esp\\n\\t\" \\ \"pushl 28(%%eax)\\n\\t\" \\ \"pushl 24(%%eax)\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $32, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_8W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6, \\ arg7,arg8)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg8)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"pushl 32(%%eax)\\n\\t\" \\ \"pushl 28(%%eax)\\n\\t\" \\ \"pushl 24(%%eax)\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $32, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_9W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6, \\ arg7,arg8,arg9)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg9)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $12, %%esp\\n\\t\" \\ \"pushl 36(%%eax)\\n\\t\" \\ \"pushl 32(%%eax)\\n\\t\" \\ \"pushl 28(%%eax)\\n\\t\" \\ \"pushl 24(%%eax)\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $48, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_10W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6, \\ arg7,arg8,arg9,arg10)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg10)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $8, %%esp\\n\\t\" \\ \"pushl 40(%%eax)\\n\\t\" \\ \"pushl 36(%%eax)\\n\\t\" \\ \"pushl 32(%%eax)\\n\\t\" \\ \"pushl 28(%%eax)\\n\\t\" \\ \"pushl 24(%%eax)\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $48, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5, \\ arg6,arg7,arg8,arg9,arg10, \\ arg11)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg11)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"subl $4, %%esp\\n\\t\" \\ \"pushl 44(%%eax)\\n\\t\" \\ \"pushl 40(%%eax)\\n\\t\" \\ \"pushl 36(%%eax)\\n\\t\" \\ \"pushl 32(%%eax)\\n\\t\" \\ \"pushl 28(%%eax)\\n\\t\" \\ \"pushl 24(%%eax)\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $48, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5, \\ arg6,arg7,arg8,arg9,arg10, \\ arg11,arg12)"
  },
  {
    "label": "_argvec()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "_argvec(unsigned long)(arg12)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"pushl 48(%%eax)\\n\\t\" \\ \"pushl 44(%%eax)\\n\\t\" \\ \"pushl 40(%%eax)\\n\\t\" \\ \"pushl 36(%%eax)\\n\\t\" \\ \"pushl 32(%%eax)\\n\\t\" \\ \"pushl 28(%%eax)\\n\\t\" \\ \"pushl 24(%%eax)\\n\\t\" \\ \"pushl 20(%%eax)\\n\\t\" \\ \"pushl 16(%%eax)\\n\\t\" \\ \"pushl 12(%%eax)\\n\\t\" \\ \"pushl 8(%%eax)\\n\\t\" \\ \"pushl 4(%%eax)\\n\\t\" \\ \"movl (%%eax), %%eax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_EAX \\ \"addl $48, %%esp\\n\" \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if defined(PLAT_amd64_linux) || defined(PLAT_amd64_darwin) #define __CALLER_SAVED_REGS \"rcx\", \"rdx\", \"rsi\", \\ \"rdi\", \"r8\", \"r9\", \"r10\", \"r11\" #if defined(__GNUC__) && defined(__GCC_HAVE_DWARF2_CFI_ASM) # define __FRAME_POINTER \\ ,\"r\"(__builtin_dwarf_cfa()) # define VALGRIND_CFI_PROLOGUE \\ \"movq %%rbp, %%r15\\n\\t\" \\ \"movq %2, %%rbp\\n\\t\" \\ \".cfi_remember_state\\n\\t\" \\ \".cfi_def_cfa rbp, 0\\n\\t\" # define VALGRIND_CFI_EPILOGUE \\ \"movq %%r15, %%rbp\\n\\t\" \\ \".cfi_restore_state\\n\\t\" #else # define __FRAME_POINTER # define VALGRIND_CFI_PROLOGUE # define VALGRIND_CFI_EPILOGUE #endif #define CALL_FN_W_v(lval, orig)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"movq 48(%%rax), %%r9\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $136,%%rsp\\n\\t\" \\ \"pushq 56(%%rax)\\n\\t\" \\ \"movq 48(%%rax), %%r9\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $8, %%rsp\\n\" \\ \"addq $136,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"pushq 64(%%rax)\\n\\t\" \\ \"pushq 56(%%rax)\\n\\t\" \\ \"movq 48(%%rax), %%r9\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $16, %%rsp\\n\" \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $136,%%rsp\\n\\t\" \\ \"pushq 72(%%rax)\\n\\t\" \\ \"pushq 64(%%rax)\\n\\t\" \\ \"pushq 56(%%rax)\\n\\t\" \\ \"movq 48(%%rax), %%r9\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $24, %%rsp\\n\" \\ \"addq $136,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"pushq 80(%%rax)\\n\\t\" \\ \"pushq 72(%%rax)\\n\\t\" \\ \"pushq 64(%%rax)\\n\\t\" \\ \"pushq 56(%%rax)\\n\\t\" \\ \"movq 48(%%rax), %%r9\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $32, %%rsp\\n\" \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_11W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6, \\ arg7,arg8,arg9,arg10,arg11)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $136,%%rsp\\n\\t\" \\ \"pushq 88(%%rax)\\n\\t\" \\ \"pushq 80(%%rax)\\n\\t\" \\ \"pushq 72(%%rax)\\n\\t\" \\ \"pushq 64(%%rax)\\n\\t\" \\ \"pushq 56(%%rax)\\n\\t\" \\ \"movq 48(%%rax), %%r9\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $40, %%rsp\\n\" \\ \"addq $136,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define CALL_FN_W_12W(lval, orig, arg1,arg2,arg3,arg4,arg5,arg6, \\ arg7,arg8,arg9,arg10,arg11,arg12)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ VALGRIND_CFI_PROLOGUE \\ \"subq $128,%%rsp\\n\\t\" \\ \"pushq 96(%%rax)\\n\\t\" \\ \"pushq 88(%%rax)\\n\\t\" \\ \"pushq 80(%%rax)\\n\\t\" \\ \"pushq 72(%%rax)\\n\\t\" \\ \"pushq 64(%%rax)\\n\\t\" \\ \"pushq 56(%%rax)\\n\\t\" \\ \"movq 48(%%rax), %%r9\\n\\t\" \\ \"movq 40(%%rax), %%r8\\n\\t\" \\ \"movq 32(%%rax), %%rcx\\n\\t\" \\ \"movq 24(%%rax), %%rdx\\n\\t\" \\ \"movq 16(%%rax), %%rsi\\n\\t\" \\ \"movq 8(%%rax), %%rdi\\n\\t\" \\ \"movq (%%rax), %%rax\\n\\t\" \\ VALGRIND_CALL_NOREDIR_RAX \\ \"addq $48, %%rsp\\n\" \\ \"addq $128,%%rsp\\n\\t\" \\ VALGRIND_CFI_EPILOGUE \\ : \"=a\" (_res) \\ : \"a\" (&_argvec[0]) __FRAME_POINTER \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS, \"r15\" \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if defined(PLAT_ppc32_linux) #define __CALLER_SAVED_REGS \\ \"lr\", \"ctr\", \"xer\", \\ \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\", \\ \"r0\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\", \\ \"r11\", \"r12\", \"r13\" #define CALL_FN_W_v(lval, orig)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 8,24(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 8,24(11)\\n\\t\" \\ \"lwz 9,28(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 8,24(11)\\n\\t\" \\ \"lwz 9,28(11)\\n\\t\" \\ \"lwz 10,32(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"addi 1,1,-16\\n\\t\" \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,8(1)\\n\\t\" \\ \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 8,24(11)\\n\\t\" \\ \"lwz 9,28(11)\\n\\t\" \\ \"lwz 10,32(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"addi 1,1,16\\n\\t\" \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"addi 1,1,-16\\n\\t\" \\ \\ \"lwz 3,40(11)\\n\\t\" \\ \"stw 3,12(1)\\n\\t\" \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,8(1)\\n\\t\" \\ \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 8,24(11)\\n\\t\" \\ \"lwz 9,28(11)\\n\\t\" \\ \"lwz 10,32(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"addi 1,1,16\\n\\t\" \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"addi 1,1,-32\\n\\t\" \\ \\ \"lwz 3,44(11)\\n\\t\" \\ \"stw 3,16(1)\\n\\t\" \\ \\ \"lwz 3,40(11)\\n\\t\" \\ \"stw 3,12(1)\\n\\t\" \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,8(1)\\n\\t\" \\ \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 8,24(11)\\n\\t\" \\ \"lwz 9,28(11)\\n\\t\" \\ \"lwz 10,32(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"addi 1,1,32\\n\\t\" \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"addi 1,1,-32\\n\\t\" \\ \\ \"lwz 3,48(11)\\n\\t\" \\ \"stw 3,20(1)\\n\\t\" \\ \\ \"lwz 3,44(11)\\n\\t\" \\ \"stw 3,16(1)\\n\\t\" \\ \\ \"lwz 3,40(11)\\n\\t\" \\ \"stw 3,12(1)\\n\\t\" \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,8(1)\\n\\t\" \\ \\ \"lwz 3,4(11)\\n\\t\" \\ \"lwz 4,8(11)\\n\\t\" \\ \"lwz 5,12(11)\\n\\t\" \\ \"lwz 6,16(11)\\n\\t\" \\ \"lwz 7,20(11)\\n\\t\" \\ \"lwz 8,24(11)\\n\\t\" \\ \"lwz 9,28(11)\\n\\t\" \\ \"lwz 10,32(11)\\n\\t\" \\ \"lwz 11,0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"addi 1,1,32\\n\\t\" \\ \"mr %0,3\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if defined(PLAT_ppc64_linux) #define __CALLER_SAVED_REGS \\ \"lr\", \"ctr\", \"xer\", \\ \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\", \\ \"r0\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\", \\ \"r11\", \"r12\", \"r13\" #define CALL_FN_W_v(lval, orig)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"addi 1,1,-128\\n\\t\" \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ \"addi 1,1,128\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"addi 1,1,-128\\n\\t\" \\ \\ \"ld 3,80(11)\\n\\t\" \\ \"std 3,120(1)\\n\\t\" \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ \"addi 1,1,128\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"addi 1,1,-144\\n\\t\" \\ \\ \"ld 3,88(11)\\n\\t\" \\ \"std 3,128(1)\\n\\t\" \\ \\ \"ld 3,80(11)\\n\\t\" \\ \"std 3,120(1)\\n\\t\" \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ \"addi 1,1,144\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"addi 1,1,-144\\n\\t\" \\ \\ \"ld 3,96(11)\\n\\t\" \\ \"std 3,136(1)\\n\\t\" \\ \\ \"ld 3,88(11)\\n\\t\" \\ \"std 3,128(1)\\n\\t\" \\ \\ \"ld 3,80(11)\\n\\t\" \\ \"std 3,120(1)\\n\\t\" \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ \"addi 1,1,144\" \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if defined(PLAT_arm_linux) #define __CALLER_SAVED_REGS \"r0\", \"r1\", \"r2\", \"r3\",\"r4\",\"r14\" #define CALL_FN_W_v(lval, orig)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"mov %0, r0\\n\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"mov %0, r0\\n\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"mov %0, r0\\n\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"mov %0, r0\\n\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"push {r0} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #4 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"ldr r1, [%1, #24] \\n\\t\" \\ \"push {r0, r1} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #8 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"ldr r1, [%1, #24] \\n\\t\" \\ \"ldr r2, [%1, #28] \\n\\t\" \\ \"push {r0, r1, r2} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #12 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"ldr r1, [%1, #24] \\n\\t\" \\ \"ldr r2, [%1, #28] \\n\\t\" \\ \"ldr r3, [%1, #32] \\n\\t\" \\ \"push {r0, r1, r2, r3} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #16 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"ldr r1, [%1, #24] \\n\\t\" \\ \"ldr r2, [%1, #28] \\n\\t\" \\ \"ldr r3, [%1, #32] \\n\\t\" \\ \"ldr r4, [%1, #36] \\n\\t\" \\ \"push {r0, r1, r2, r3, r4} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #20 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #40] \\n\\t\" \\ \"push {r0} \\n\\t\" \\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"ldr r1, [%1, #24] \\n\\t\" \\ \"ldr r2, [%1, #28] \\n\\t\" \\ \"ldr r3, [%1, #32] \\n\\t\" \\ \"ldr r4, [%1, #36] \\n\\t\" \\ \"push {r0, r1, r2, r3, r4} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #24 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #40] \\n\\t\" \\ \"ldr r1, [%1, #44] \\n\\t\" \\ \"push {r0, r1} \\n\\t\" \\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"ldr r1, [%1, #24] \\n\\t\" \\ \"ldr r2, [%1, #28] \\n\\t\" \\ \"ldr r3, [%1, #32] \\n\\t\" \\ \"ldr r4, [%1, #36] \\n\\t\" \\ \"push {r0, r1, r2, r3, r4} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #28 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\",__CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"ldr r0, [%1, #40] \\n\\t\" \\ \"ldr r1, [%1, #44] \\n\\t\" \\ \"ldr r2, [%1, #48] \\n\\t\" \\ \"push {r0, r1, r2} \\n\\t\" \\ \"ldr r0, [%1, #20] \\n\\t\" \\ \"ldr r1, [%1, #24] \\n\\t\" \\ \"ldr r2, [%1, #28] \\n\\t\" \\ \"ldr r3, [%1, #32] \\n\\t\" \\ \"ldr r4, [%1, #36] \\n\\t\" \\ \"push {r0, r1, r2, r3, r4} \\n\\t\" \\ \"ldr r0, [%1, #4] \\n\\t\" \\ \"ldr r1, [%1, #8] \\n\\t\" \\ \"ldr r2, [%1, #12] \\n\\t\" \\ \"ldr r3, [%1, #16] \\n\\t\" \\ \"ldr r4, [%1] \\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R4 \\ \"add sp, sp, #32 \\n\\t\" \\ \"mov %0, r0\" \\ : \"=r\" (_res) \\ : \"0\" (&_argvec[0]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if defined(PLAT_ppc32_aix5) #define __CALLER_SAVED_REGS \\ \"lr\", \"ctr\", \"xer\", \\ \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\", \\ \"r0\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\", \\ \"r11\", \"r12\", \"r13\" #define VG_EXPAND_FRAME_BY_trashes_r3(_n_fr) \\ \"addi 1,1,-\" #_n_fr \"\\n\\t\" \\ \"lwz 3,\" #_n_fr \"(1)\\n\\t\" \\ \"stw 3,0(1)\\n\\t\" #define VG_CONTRACT_FRAME_BY(_n_fr) \\ \"addi 1,1,\" #_n_fr \"\\n\\t\" #define CALL_FN_W_v(lval, orig)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 8, 24(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 8, 24(11)\\n\\t\" \\ \"lwz 9, 28(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 8, 24(11)\\n\\t\" \\ \"lwz 9, 28(11)\\n\\t\" \\ \"lwz 10, 32(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(64) \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,56(1)\\n\\t\" \\ \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 8, 24(11)\\n\\t\" \\ \"lwz 9, 28(11)\\n\\t\" \\ \"lwz 10, 32(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(64) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(64) \\ \\ \"lwz 3,40(11)\\n\\t\" \\ \"stw 3,60(1)\\n\\t\" \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,56(1)\\n\\t\" \\ \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 8, 24(11)\\n\\t\" \\ \"lwz 9, 28(11)\\n\\t\" \\ \"lwz 10, 32(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(64) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(72) \\ \\ \"lwz 3,44(11)\\n\\t\" \\ \"stw 3,64(1)\\n\\t\" \\ \\ \"lwz 3,40(11)\\n\\t\" \\ \"stw 3,60(1)\\n\\t\" \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,56(1)\\n\\t\" \\ \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 8, 24(11)\\n\\t\" \\ \"lwz 9, 28(11)\\n\\t\" \\ \"lwz 10, 32(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(72) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"stw 2,-8(11)\\n\\t\" \\ \"lwz 2,-4(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(72) \\ \\ \"lwz 3,48(11)\\n\\t\" \\ \"stw 3,68(1)\\n\\t\" \\ \\ \"lwz 3,44(11)\\n\\t\" \\ \"stw 3,64(1)\\n\\t\" \\ \\ \"lwz 3,40(11)\\n\\t\" \\ \"stw 3,60(1)\\n\\t\" \\ \\ \"lwz 3,36(11)\\n\\t\" \\ \"stw 3,56(1)\\n\\t\" \\ \\ \"lwz 3, 4(11)\\n\\t\" \\ \"lwz 4, 8(11)\\n\\t\" \\ \"lwz 5, 12(11)\\n\\t\" \\ \"lwz 6, 16(11)\\n\\t\" \\ \"lwz 7, 20(11)\\n\\t\" \\ \"lwz 8, 24(11)\\n\\t\" \\ \"lwz 9, 28(11)\\n\\t\" \\ \"lwz 10, 32(11)\\n\\t\" \\ \"lwz 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"lwz 2,-8(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(72) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #if defined(PLAT_ppc64_aix5) #define __CALLER_SAVED_REGS \\ \"lr\", \"ctr\", \"xer\", \\ \"cr0\", \"cr1\", \"cr2\", \"cr3\", \"cr4\", \"cr5\", \"cr6\", \"cr7\", \\ \"r0\", \"r2\", \"r3\", \"r4\", \"r5\", \"r6\", \"r7\", \"r8\", \"r9\", \"r10\", \\ \"r11\", \"r12\", \"r13\" #define VG_EXPAND_FRAME_BY_trashes_r3(_n_fr) \\ \"addi 1,1,-\" #_n_fr \"\\n\\t\" \\ \"ld 3,\" #_n_fr \"(1)\\n\\t\" \\ \"std 3,0(1)\\n\\t\" #define VG_CONTRACT_FRAME_BY(_n_fr) \\ \"addi 1,1,\" #_n_fr \"\\n\\t\" #define CALL_FN_W_v(lval, orig)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(128) \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(128) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(128) \\ \\ \"ld 3,80(11)\\n\\t\" \\ \"std 3,120(1)\\n\\t\" \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(128) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(144) \\ \\ \"ld 3,88(11)\\n\\t\" \\ \"std 3,128(1)\\n\\t\" \\ \\ \"ld 3,80(11)\\n\\t\" \\ \"std 3,120(1)\\n\\t\" \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(144) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "volatile()",
    "kind": "Method",
    "detail": "Function (\\ __asm__)",
    "insertText": "volatile(\\ \"mr 11,%1\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(512) \\ \"std 2,-16(11)\\n\\t\" \\ \"ld 2,-8(11)\\n\\t\" \\ VG_EXPAND_FRAME_BY_trashes_r3(144) \\ \\ \"ld 3,96(11)\\n\\t\" \\ \"std 3,136(1)\\n\\t\" \\ \\ \"ld 3,88(11)\\n\\t\" \\ \"std 3,128(1)\\n\\t\" \\ \\ \"ld 3,80(11)\\n\\t\" \\ \"std 3,120(1)\\n\\t\" \\ \\ \"ld 3,72(11)\\n\\t\" \\ \"std 3,112(1)\\n\\t\" \\ \\ \"ld 3, 8(11)\\n\\t\" \\ \"ld 4, 16(11)\\n\\t\" \\ \"ld 5, 24(11)\\n\\t\" \\ \"ld 6, 32(11)\\n\\t\" \\ \"ld 7, 40(11)\\n\\t\" \\ \"ld 8, 48(11)\\n\\t\" \\ \"ld 9, 56(11)\\n\\t\" \\ \"ld 10, 64(11)\\n\\t\" \\ \"ld 11, 0(11)\\n\\t\" \\ VALGRIND_BRANCH_AND_LINK_TO_NOREDIR_R11 \\ \"mr 11,%1\\n\\t\" \\ \"mr %0,3\\n\\t\" \\ \"ld 2,-16(11)\\n\\t\" \\ VG_CONTRACT_FRAME_BY(144) \\ VG_CONTRACT_FRAME_BY(512) \\ : \"=r\" (_res) \\ : \"r\" (&_argvec[2]) \\ : \"cc\", \"memory\", __CALLER_SAVED_REGS \\)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #endif #define VG_USERREQ_TOOL_BASE(a,b) \\ ((unsigned int)(((a)&0xff) << 24 | ((b)&0xff) << 16)) #define VG_IS_TOOL_USERREQ(a, b, v) \\ (VG_USERREQ_TOOL_BASE(a,b) == ((v) & 0xffff0000))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (VG_USERREQ__RUNNING_ON_VALGRIND = 0 x1001,VG_USERREQ__DISCARD_TRANSLATIONS = 0 x1002,VG_USERREQ__CLIENT_CALL0 = 0 x1101,VG_USERREQ__CLIENT_CALL1 = 0 x1102,VG_USERREQ__CLIENT_CALL2 = 0 x1103,VG_USERREQ__CLIENT_CALL3 = 0 x1104,VG_USERREQ__COUNT_ERRORS = 0 x1201,VG_USERREQ__MALLOCLIKE_BLOCK = 0 x1301,VG_USERREQ__FREELIKE_BLOCK = 0 x1302,VG_USERREQ__CREATE_MEMPOOL = 0 x1303,VG_USERREQ__DESTROY_MEMPOOL = 0 x1304,VG_USERREQ__MEMPOOL_ALLOC = 0 x1305,VG_USERREQ__MEMPOOL_FREE = 0 x1306,VG_USERREQ__MEMPOOL_TRIM = 0 x1307,VG_USERREQ__MOVE_MEMPOOL = 0 x1308,VG_USERREQ__MEMPOOL_CHANGE = 0 x1309,VG_USERREQ__MEMPOOL_EXISTS = 0 x130a,VG_USERREQ__PRINTF = 0 x1401,VG_USERREQ__PRINTF_BACKTRACE = 0 x1402,VG_USERREQ__PRINTF_VALIST_BY_REF = 0 x1403,VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF = 0 x1404,VG_USERREQ__STACK_REGISTER = 0 x1501,VG_USERREQ__STACK_DEREGISTER = 0 x1502,VG_USERREQ__STACK_CHANGE = 0 x1503,VG_USERREQ__LOAD_PDB_DEBUGINFO = 0 x1601,VG_USERREQ__MAP_IP_TO_SRCLOC = 0 x1701 } Vg_ClientRequest ; # if !)",
    "insertText": "defined(__GNUC__) # define __extension__ #endif #if defined(NVALGRIND) #define VALGRIND_DO_CLIENT_REQUEST_EXPR( \\ _zzq_default, _zzq_request, \\ _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5) \\ (_zzq_default) #else #if defined(_MSC_VER) #define VALGRIND_DO_CLIENT_REQUEST_EXPR( \\ _zzq_default, _zzq_request, \\ _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5) \\ (vg_VALGRIND_DO_CLIENT_REQUEST_EXPR((uintptr_t)(_zzq_default), \\ (_zzq_request), (uintptr_t)(_zzq_arg1), (uintptr_t)(_zzq_arg2), \\ (uintptr_t)(_zzq_arg3), (uintptr_t)(_zzq_arg4), \\ (uintptr_t)(_zzq_arg5))) static __inline unsigned vg_VALGRIND_DO_CLIENT_REQUEST_EXPR(uintptr_t _zzq_default, unsigned _zzq_request, uintptr_t _zzq_arg1, uintptr_t _zzq_arg2, uintptr_t _zzq_arg3, uintptr_t _zzq_arg4, uintptr_t _zzq_arg5)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned _zzq_rlval ;)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_zzq_rlval, _zzq_default, _zzq_request, _zzq_arg1, _zzq_arg2, _zzq_arg3, _zzq_arg4, _zzq_arg5)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__DISCARD_TRANSLATIONS, \\ _qzz_addr, _qzz_len, 0, 0, 0)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (\\ } # if)",
    "insertText": "defined(NVALGRIND) # define VALGRIND_PRINTF(...) # define VALGRIND_PRINTF_BACKTRACE(...) #else #if !defined(_MSC_VER) static int VALGRIND_PRINTF(const char *format, ...) __attribute__((format(__printf__, 1, 2), __unused__))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif int # if)",
    "insertText": "defined(_MSC_VER) __inline #endif VALGRIND_PRINTF(const char *format, ...)"
  },
  {
    "label": "va_start()",
    "kind": "Method",
    "detail": "Function (unsigned long _qzz_res ; va_list vargs ;)",
    "insertText": "va_start(vargs, format)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, VG_USERREQ__PRINTF_VALIST_BY_REF, (uintptr_t)format, (uintptr_t)&vargs, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, VG_USERREQ__PRINTF_VALIST_BY_REF, (unsigned long)format, (unsigned long)&vargs, 0, 0, 0)"
  },
  {
    "label": "va_end()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "va_end(vargs)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(_MSC_VER) static int VALGRIND_PRINTF_BACKTRACE(const char *format, ...) __attribute__((format(__printf__, 1, 2), __unused__))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif int # if)",
    "insertText": "defined(_MSC_VER) __inline #endif VALGRIND_PRINTF_BACKTRACE(const char *format, ...)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(_MSC_VER) VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF, (uintptr_t)format, (uintptr_t)&vargs, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, VG_USERREQ__PRINTF_BACKTRACE_VALIST_BY_REF, (unsigned long)format, (unsigned long)&vargs, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_NON_SIMD_CALL0()",
    "kind": "Method",
    "detail": "Function (} # endif # define)",
    "insertText": "VALGRIND_NON_SIMD_CALL0(_qyy_fn) \\ __extension__ \\ ({unsigned long _qyy_res; \\ VALGRIND_DO_CLIENT_REQUEST(_qyy_res, 0 , \\ VG_USERREQ__CLIENT_CALL0, \\ _qyy_fn, \\ 0, 0, 0, 0); \\ _qyy_res; \\ }) #define VALGRIND_NON_SIMD_CALL1(_qyy_fn, _qyy_arg1) \\ __extension__ \\ ({unsigned long _qyy_res; \\ VALGRIND_DO_CLIENT_REQUEST(_qyy_res, 0 , \\ VG_USERREQ__CLIENT_CALL1, \\ _qyy_fn, \\ _qyy_arg1, 0, 0, 0); \\ _qyy_res; \\ }) #define VALGRIND_NON_SIMD_CALL2(_qyy_fn, _qyy_arg1, _qyy_arg2) \\ __extension__ \\ ({unsigned long _qyy_res; \\ VALGRIND_DO_CLIENT_REQUEST(_qyy_res, 0 , \\ VG_USERREQ__CLIENT_CALL2, \\ _qyy_fn, \\ _qyy_arg1, _qyy_arg2, 0, 0); \\ _qyy_res; \\ }) #define VALGRIND_NON_SIMD_CALL3(_qyy_fn, _qyy_arg1, _qyy_arg2, _qyy_arg3) \\ __extension__ \\ ({unsigned long _qyy_res; \\ VALGRIND_DO_CLIENT_REQUEST(_qyy_res, 0 , \\ VG_USERREQ__CLIENT_CALL3, \\ _qyy_fn, \\ _qyy_arg1, _qyy_arg2, \\ _qyy_arg3, 0); \\ _qyy_res; \\ }) #define VALGRIND_COUNT_ERRORS \\ __extension__ \\ ({unsigned int _qyy_res; \\ VALGRIND_DO_CLIENT_REQUEST(_qyy_res, 0 , \\ VG_USERREQ__COUNT_ERRORS, \\ 0, 0, 0, 0, 0); \\ _qyy_res; \\ }) #define VALGRIND_MALLOCLIKE_BLOCK(addr, sizeB, rzB, is_zeroed)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MALLOCLIKE_BLOCK, \\ addr, sizeB, rzB, is_zeroed, 0)"
  },
  {
    "label": "VALGRIND_FREELIKE_BLOCK()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_FREELIKE_BLOCK(addr, rzB)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__FREELIKE_BLOCK, \\ addr, rzB, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_CREATE_MEMPOOL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_CREATE_MEMPOOL(pool, rzB, is_zeroed)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__CREATE_MEMPOOL, \\ pool, rzB, is_zeroed, 0, 0)"
  },
  {
    "label": "VALGRIND_DESTROY_MEMPOOL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_DESTROY_MEMPOOL(pool)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__DESTROY_MEMPOOL, \\ pool, 0, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_MEMPOOL_ALLOC()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_MEMPOOL_ALLOC(pool, addr, size)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MEMPOOL_ALLOC, \\ pool, addr, size, 0, 0)"
  },
  {
    "label": "VALGRIND_MEMPOOL_FREE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_MEMPOOL_FREE(pool, addr)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MEMPOOL_FREE, \\ pool, addr, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_MEMPOOL_TRIM()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_MEMPOOL_TRIM(pool, addr, size)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MEMPOOL_TRIM, \\ pool, addr, size, 0, 0)"
  },
  {
    "label": "VALGRIND_MOVE_MEMPOOL()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_MOVE_MEMPOOL(poolA, poolB)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MOVE_MEMPOOL, \\ poolA, poolB, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_MEMPOOL_CHANGE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_MEMPOOL_CHANGE(pool, addrA, addrB, size)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MEMPOOL_CHANGE, \\ pool, addrA, addrB, size, 0)"
  },
  {
    "label": "VALGRIND_MEMPOOL_EXISTS()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_MEMPOOL_EXISTS(pool) \\ __extension__ \\ ({unsigned int _qzz_res; \\ VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MEMPOOL_EXISTS, \\ pool, 0, 0, 0, 0); \\ _qzz_res; \\ }) #define VALGRIND_STACK_REGISTER(start, end) \\ __extension__ \\ ({unsigned int _qzz_res; \\ VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__STACK_REGISTER, \\ start, end, 0, 0, 0); \\ _qzz_res; \\ }) #define VALGRIND_STACK_DEREGISTER(id)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__STACK_DEREGISTER, \\ id, 0, 0, 0, 0)"
  },
  {
    "label": "VALGRIND_STACK_CHANGE()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_STACK_CHANGE(id, start, end)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__STACK_CHANGE, \\ id, start, end, 0, 0)"
  },
  {
    "label": "VALGRIND_LOAD_PDB_DEBUGINFO()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_LOAD_PDB_DEBUGINFO(fd, ptr, total_size, delta)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__LOAD_PDB_DEBUGINFO, \\ fd, ptr, total_size, delta, 0)"
  },
  {
    "label": "VALGRIND_MAP_IP_TO_SRCLOC()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "VALGRIND_MAP_IP_TO_SRCLOC(addr, buf64)"
  },
  {
    "label": "VALGRIND_DO_CLIENT_REQUEST()",
    "kind": "Method",
    "detail": "Function (unsigned int _qzz_res ; \\)",
    "insertText": "VALGRIND_DO_CLIENT_REQUEST(_qzz_res, 0, \\ VG_USERREQ__MAP_IP_TO_SRCLOC, \\ addr, buf64, 0, 0, 0)"
  }
]