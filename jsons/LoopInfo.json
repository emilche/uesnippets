[
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "AnalysisManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AnalysisManager"
  },
  {
    "label": "PreservedAnalyses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreservedAnalyses"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "MDNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MDNode"
  },
  {
    "label": "PHINode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PHINode"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "DominatorTreeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTreeBase"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "LoopInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfoBase"
  },
  {
    "label": "N",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "N"
  },
  {
    "label": "M",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "M"
  },
  {
    "label": "LoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBase"
  },
  {
    "label": "are",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "are"
  },
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "LoopT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopT"
  },
  {
    "label": "LoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBase"
  },
  {
    "label": "InstT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InstT"
  },
  {
    "label": "LoopInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfoBase"
  },
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "LoopT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopT"
  },
  {
    "label": "LoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBase"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfoBase"
  },
  {
    "label": "builds",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "builds"
  },
  {
    "label": "BlockT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockT"
  },
  {
    "label": "LoopT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopT"
  },
  {
    "label": "LoopInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfoBase"
  },
  {
    "label": "LoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBase"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "LoopInfoBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfoBase"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "LoopBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopBase"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "LoopAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopAnalysis"
  },
  {
    "label": "LoopPrinterPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopPrinterPass"
  },
  {
    "label": "LoopInfoWrapperPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfoWrapperPass"
  },
  {
    "label": "addBasicBlockToLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addBasicBlockToLoop(BlockT *NewBB, LoopInfoBase<BlockT, LoopT> &LI)"
  },
  {
    "label": "replaceChildLoopWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceChildLoopWith(LoopT *OldChild, LoopT *NewChild)"
  },
  {
    "label": "DebugLoc()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DebugLoc()"
  },
  {
    "label": "getLoopFor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getLoopFor(BB)"
  },
  {
    "label": "Analyze()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Analyze(DominatorTreeBase<BlockT> &DomTree)"
  },
  {
    "label": "updateUnloop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "updateUnloop(Loop *Unloop)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (LoopInfo)",
    "insertText": "run(Function &F, AnalysisManager<Function> *AM)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (PreservedAnalyses)",
    "insertText": "run(Function &F, AnalysisManager<Function> *AM)"
  }
]