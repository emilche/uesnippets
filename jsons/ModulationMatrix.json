[
  {
    "label": "FPatchSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchSource"
  },
  {
    "label": "FPatchDestination",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatchDestination"
  },
  {
    "label": "FPatch",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPatch"
  },
  {
    "label": "FModulationMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModulationMatrix"
  },
  {
    "label": "FDestData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDestData"
  },
  {
    "label": "FPatchSource()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # define MOD_MATRIX_DEBUG_NAMES 1 namespace Audio { struct FPatchSource {)",
    "insertText": "FPatchSource() : Id(INDEX_NONE)"
  },
  {
    "label": "FPatchSource()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPatchSource(const uint32 InId) : Id(InId)"
  },
  {
    "label": "SetName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetName(const FString& InName)"
  },
  {
    "label": "FPatchDestination()",
    "kind": "Method",
    "detail": "Function (# if MOD_MATRIX_DEBUG_NAMES Name = InName ; # endif } uint32 Id ; # if MOD_MATRIX_DEBUG_NAMES FString Name ; # endif } ; struct FPatchDestination {)",
    "insertText": "FPatchDestination() : Id(INDEX_NONE) , Stage(INDEX_NONE) , Depth(0.0f)"
  },
  {
    "label": "FPatchDestination()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPatchDestination(const uint32 InId) : Id(InId) , Stage(INDEX_NONE) , Depth(0.0f)"
  },
  {
    "label": "FPatch()",
    "kind": "Method",
    "detail": "Function (# if MOD_MATRIX_DEBUG_NAMES Name = InName ; # endif } # if MOD_MATRIX_DEBUG_NAMES FString Name ; # endif } ; struct FPatch {)",
    "insertText": "FPatch() : Source(INDEX_NONE) , bEnabled(true)"
  },
  {
    "label": "FPatch()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPatch(const FPatchSource& InSourceId, const FPatchDestination& InDestinationId) : Source(InSourceId) , bEnabled(true)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Destinations .)",
    "insertText": "Add(InDestinationId)"
  },
  {
    "label": "FModulationMatrix()",
    "kind": "Method",
    "detail": "Function (# if MOD_MATRIX_DEBUG_NAMES Name = InName ; # endif } FPatchSource Source ; TArray<FPatchDestination> Destinations ; # if MOD_MATRIX_DEBUG_NAMES FString Name ; # endif bool bEnabled ; } ; class FModulationMatrix { public :)",
    "insertText": "FModulationMatrix()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const int32 NumVoices)"
  },
  {
    "label": "GetNumPatches()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPatches(const int32 VoiceId)"
  },
  {
    "label": "CreatePatchSource()",
    "kind": "Method",
    "detail": "Function (FPatchSource)",
    "insertText": "CreatePatchSource(const int32 VoiceId)"
  },
  {
    "label": "CreatePatchDestination()",
    "kind": "Method",
    "detail": "Function (FPatchDestination)",
    "insertText": "CreatePatchDestination(const int32 VoiceId, const int32 Stage, const float DefaultDepth)"
  },
  {
    "label": "AddPatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddPatch(const int32 VoiceId, FPatch* Patch)"
  },
  {
    "label": "RemovePatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePatch(const int32 VoiceId, FPatch* Patch)"
  },
  {
    "label": "ResetPatchSourceState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetPatchSourceState()"
  },
  {
    "label": "ClearPatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPatches(const int32 VoiceId)"
  },
  {
    "label": "SetSourceValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSourceValue(const int32 VoiceId, const FPatchSource& Source, const float Value)"
  },
  {
    "label": "GetDestinationValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDestinationValue(const int32 VoiceId, const FPatchDestination& Destination, float& OutValue)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(const int32 VoiceId, const int32 Stage = INDEX_NONE)"
  },
  {
    "label": "ResetDestinations()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ResetDestinations(const int32 VoiceId)"
  },
  {
    "label": "ValidatePatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidatePatch(const int32 VoiceId, FPatch* Patch)"
  },
  {
    "label": "FDestData()",
    "kind": "Method",
    "detail": "Function (int32 NumVoices ; TArray<TArray<FPatch*>> Patches ; TArray<TArray<float>> Sources ; struct FDestData { float Value ; bool bDirty ;)",
    "insertText": "FDestData() : Value(0.0f) , bDirty(false)"
  }
]