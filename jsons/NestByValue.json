[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "NestByValue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NestByValue"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "EIGEN_DENSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_NESTBYVALUE_H # define EIGEN_NESTBYVALUE_H namespace Eigen { namespace internal { template<ExpressionType> struct traits<NestByValue<ExpressionType>> : public traits<ExpressionType> { enum { Flags = traits<ExpressionType>::Flags& ~ NestByRefBit } ; } ; } template<ExpressionType> class NestByValue : public internal::dense_xpr_base<NestByValue<ExpressionType>>::type { public : typedef internal::dense_xpr_base<NestByValue>::type Base ;)",
    "insertText": "EIGEN_DENSE_PUBLIC_INTERFACE(NestByValue) EIGEN_DEVICE_FUNC explicit inline NestByValue(const ExpressionType& matrix) : m_expression(matrix)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "ExpressionType()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC operator const)",
    "insertText": "ExpressionType()"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} namespace internal { template<ArgType> struct evaluator<NestByValue<ArgType>> : public evaluator<ArgType> { typedef evaluator<ArgType> Base ; EIGEN_DEVICE_FUNC)",
    "insertText": "evaluator(const NestByValue<ArgType>& xpr) : Base(xpr.nestedExpression())"
  }
]