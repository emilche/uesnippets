[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FObjectPreSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPreSaveContext"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UK2Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node"
  },
  {
    "label": "UMovieSceneFolder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneFolder"
  },
  {
    "label": "UMovieSceneSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSection"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "UMovieSceneGroupCondition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneGroupCondition"
  },
  {
    "label": "ISequenceDataEventHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISequenceDataEventHandler"
  },
  {
    "label": "FMovieSceneChannelMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelMetaData"
  },
  {
    "label": "FMovieSceneTimeController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeController"
  },
  {
    "label": "FMovieSceneTimecodeSource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimecodeSource"
  },
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "FMovieSceneExpansionState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneExpansionState"
  },
  {
    "label": "FMovieSceneEditorData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneEditorData"
  },
  {
    "label": "FMovieSceneTrackLabels",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTrackLabels"
  },
  {
    "label": "FMovieSceneObjectBindingIDs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneObjectBindingIDs"
  },
  {
    "label": "FMovieSceneSectionGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSectionGroup"
  },
  {
    "label": "UMovieSceneNodeGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneNodeGroup"
  },
  {
    "label": "UMovieSceneNodeGroupCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneNodeGroupCollection"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "FMovieScenePossessable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieScenePossessable"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" EventHandlers / MovieSceneDataEventContainer . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / Text . h \" # include \" Math / Color . h \" # include \" Math / Range . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / FrameRate . h \" # include \" Misc / Guid . h \" # include \" MovieSceneBinding . h \" # include \" MovieSceneFrameMigration . h \" # include \" MovieSceneFwd . h \" # include \" MovieSceneMarkedFrame . h \" # include \" MovieSceneObjectBindingID . h \" # include \" MovieScenePossessable . h \" # include \" MovieSceneSequenceID . h \" # include \" MovieSceneSignedObject . h \" # include \" MovieSceneSpawnable . h \" # include \" MovieSceneTimeController . h \" # include \" MovieSceneTrack . h \" # include \" Templates / Casts . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ObjectPtr . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / UObjectGlobals . h \" # include \" UObject / UnrealNames . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" MovieScene . generated . h \" class FArchive ; class FObjectPreSaveContext ; class UClass ; class UK2Node ; class UMovieSceneFolder ; class UMovieSceneSection ; class UMovieSceneTrack ; class UMovieSceneGroupCondition ; namespace UE { namespace MovieScene { class ISequenceDataEventHandler ; } } struct FMovieSceneChannelMetaData ; struct FMovieSceneTimeController ; struct FMovieSceneTimecodeSource ; template<FuncType> class TFunctionRef ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FMovieSceneOnChannelChanged, const FMovieSceneChannelMetaData* MetaData, UMovieSceneSection*) USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FMovieSceneExpansionState(bool bInExpanded = true) : bExpanded(bInExpanded)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() FMovieSceneEditorData() : ViewStart(0.0), ViewEnd(0.0) , WorkStart(0.0), WorkEnd(0.0)"
  },
  {
    "label": "GetViewRange()",
    "kind": "Method",
    "detail": "Function (} TRange<double>)",
    "insertText": "GetViewRange()"
  },
  {
    "label": "GetWorkingRange()",
    "kind": "Method",
    "detail": "Function (} TRange<double>)",
    "insertText": "GetWorkingRange()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FromString(const FString& LabelString)"
  },
  {
    "label": "ParseIntoArray()",
    "kind": "Method",
    "detail": "Function (LabelString .)",
    "insertText": "ParseIntoArray(Strings, TEXT(\" \"))"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: MOVIESCENE_API bool Contains(const UMovieSceneSection& Section)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(UMovieSceneSection& Section)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(const UMovieSceneSection& Section)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(const FMovieSceneSectionGroup& SectionGroup)"
  },
  {
    "label": "Clean()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clean()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "operator(const FMovieSceneSectionGroup& Other)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} TArray<TWeakObjectPtr<UMovieSceneSection>>::RangedForConstIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TArray<TWeakObjectPtr<UMovieSceneSection>>::RangedForIteratorType)",
    "insertText": "end()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() virtual bool IsEditorOnly()"
  },
  {
    "label": "AddNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNode(const FString& Path)"
  },
  {
    "label": "RemoveNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNode(const FString& Path)"
  },
  {
    "label": "GetNodes()",
    "kind": "Method",
    "detail": "Function (TArrayView<FString>)",
    "insertText": "GetNodes()"
  },
  {
    "label": "UpdateNodePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNodePath(const FString& OldPath, const FString& NewPath)"
  },
  {
    "label": "GetEnableFilter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetEnableFilter()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(UMovieSceneNodeGroup, FOnNodeGroupChanged) FOnNodeGroupChanged& OnNodeGroupChanged()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool bEnableFilter ; FOnNodeGroupChanged OnNodeGroupChangedEvent ; bool)",
    "insertText": "operator(const UMovieSceneNodeGroup& Other)"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "AddNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNodeGroup(UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "RemoveNodeGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNodeGroup(UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Contains(UMovieSceneNodeGroup* NodeGroup)"
  },
  {
    "label": "HasAnyActiveFilter()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyActiveFilter()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(UMovieSceneNodeGroupCollection, FOnNodeGroupCollectionChanged) FOnNodeGroupCollectionChanged& OnNodeGroupCollectionChanged()"
  },
  {
    "label": "OnNodeGroupChanged()",
    "kind": "Method",
    "detail": "Function (bool bAnyActiveFilter ; void)",
    "insertText": "OnNodeGroupChanged()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} # endif } ;)",
    "insertText": "UCLASS(DefaultToInstanced, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: MOVIESCENE_API virtual void Serialize( FArchive& Ar)"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "AddSpawnable()",
    "kind": "Method",
    "detail": "Function (# endif public : UE::MovieScene::TDataEventContainer<UE::MovieScene::ISequenceDataEventHandler> EventHandlers ; FGuid)",
    "insertText": "AddSpawnable(const FString& Name, UObject& ObjectTemplate)"
  },
  {
    "label": "AddSpawnable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSpawnable(const FMovieSceneSpawnable& InNewSpawnable, const FMovieSceneBinding& InNewBinding)"
  },
  {
    "label": "RemoveSpawnable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveSpawnable(const FGuid& Guid)"
  },
  {
    "label": "FindSpawnable()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSpawnable*)",
    "insertText": "FindSpawnable(const TFunctionRef<bool(FMovieSceneSpawnable&)>& InPredicate)"
  },
  {
    "label": "FindSpawnable()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSpawnable*)",
    "insertText": "FindSpawnable(const FGuid& Guid)"
  },
  {
    "label": "GetSpawnable()",
    "kind": "Method",
    "detail": "Function (FMovieSceneSpawnable&)",
    "insertText": "GetSpawnable(int32 Index)"
  },
  {
    "label": "GetSpawnableCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSpawnableCount()"
  },
  {
    "label": "AddPossessable()",
    "kind": "Method",
    "detail": "Function (public : FGuid)",
    "insertText": "AddPossessable(const FString& Name, UClass* Class)"
  },
  {
    "label": "AddPossessable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPossessable(const FMovieScenePossessable& InNewPossessable, const FMovieSceneBinding& InNewBinding)"
  },
  {
    "label": "RemovePossessable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemovePossessable(const FGuid& PossessableGuid)"
  },
  {
    "label": "ReplacePossessable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReplacePossessable(const FGuid& OldGuid, const FMovieScenePossessable& InNewPosessable)"
  },
  {
    "label": "FindPossessable()",
    "kind": "Method",
    "detail": "Function (struct FMovieScenePossessable*)",
    "insertText": "FindPossessable(const FGuid& Guid)"
  },
  {
    "label": "FindPossessable()",
    "kind": "Method",
    "detail": "Function (FMovieScenePossessable*)",
    "insertText": "FindPossessable(const TFunctionRef<bool(FMovieScenePossessable&)>& InPredicate)"
  },
  {
    "label": "GetPossessable()",
    "kind": "Method",
    "detail": "Function (FMovieScenePossessable&)",
    "insertText": "GetPossessable(const int32 Index)"
  },
  {
    "label": "GetPossessableCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPossessableCount()"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (public : UMovieSceneTrack*)",
    "insertText": "AddTrack(TSubclassOf<UMovieSceneTrack> TrackClass, const FGuid& ObjectGuid)"
  },
  {
    "label": "AddGivenTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddGivenTrack(UMovieSceneTrack* InTrack, const FGuid& ObjectGuid)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (template<TrackClass> TrackClass*)",
    "insertText": "AddTrack(const FGuid& ObjectGuid)"
  },
  {
    "label": "FindTrack()",
    "kind": "Method",
    "detail": "Function (} UMovieSceneTrack*)",
    "insertText": "FindTrack(TSubclassOf<UMovieSceneTrack> TrackClass, const FGuid& ObjectGuid, const FName& TrackName = NAME_None)"
  },
  {
    "label": "FindTrack()",
    "kind": "Method",
    "detail": "Function (template<TrackClass> TrackClass*)",
    "insertText": "FindTrack(const FGuid& ObjectGuid, const FName& TrackName = NAME_None)"
  },
  {
    "label": "FindTracks()",
    "kind": "Method",
    "detail": "Function (} TArray<UMovieSceneTrack*>)",
    "insertText": "FindTracks(TSubclassOf<UMovieSceneTrack> TrackClass, const FGuid& ObjectGuid, const FName& TrackName = NAME_None)"
  },
  {
    "label": "RemoveTrack()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTrack(UMovieSceneTrack& Track)"
  },
  {
    "label": "FindTrackBinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindTrackBinding(const UMovieSceneTrack& InTrack, FGuid& OutGuid)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FIsTrackClassAllowedEvent, UClass*)"
  },
  {
    "label": "IsTrackClassAllowed()",
    "kind": "Method",
    "detail": "Function (FIsTrackClassAllowedEvent IsTrackClassAllowedEvent ; bool)",
    "insertText": "IsTrackClassAllowed(UClass* InClass)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FIsCustomBindingClassAllowedEvent, UClass*)"
  },
  {
    "label": "IsCustomBindingClassAllowed()",
    "kind": "Method",
    "detail": "Function (FIsCustomBindingClassAllowedEvent IsCustomBindingClassAllowedEvent ; bool)",
    "insertText": "IsCustomBindingClassAllowed(UClass* InClass)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FIsConditionClassAllowedEvent, const UClass*)"
  },
  {
    "label": "IsConditionClassAllowed()",
    "kind": "Method",
    "detail": "Function (FIsConditionClassAllowedEvent IsConditionClassAllowedEvent ; bool)",
    "insertText": "IsConditionClassAllowed(const UClass* InClass)"
  },
  {
    "label": "OnDynamicBindingUserDefinedPinRenamed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDynamicBindingUserDefinedPinRenamed(UK2Node* InNode, FName OldPinName, FName NewPinName)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (FixupDynamicBindingPayloadParameterNameEvent .)",
    "insertText": "Broadcast(this, InNode, OldPinName, NewPinName)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FourParams(FFixupDynamicBindingPayloadParameterNameEvent, UMovieScene*, UK2Node*, FName, FName)"
  },
  {
    "label": "OnDirectorBlueprintConditionUserDefinedPinRenamed()",
    "kind": "Method",
    "detail": "Function (FFixupDynamicBindingPayloadParameterNameEvent FixupDynamicBindingPayloadParameterNameEvent ; void)",
    "insertText": "OnDirectorBlueprintConditionUserDefinedPinRenamed(UK2Node* InNode, FName OldPinName, FName NewPinName)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FourParams(FFixupDirectorBlueprintConditionPayloadParameterNameEvent, UMovieScene*, UK2Node*, FName, FName)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (FFixupDirectorBlueprintConditionPayloadParameterNameEvent FixupDirectorBlueprintConditionPayloadParameterNameEvent ; # endif public : UMovieSceneTrack*)",
    "insertText": "AddTrack(TSubclassOf<UMovieSceneTrack> TrackClass)"
  },
  {
    "label": "AddTrack()",
    "kind": "Method",
    "detail": "Function (template<TrackClass> TrackClass*)",
    "insertText": "AddTrack()"
  },
  {
    "label": "AddGivenTrack()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddGivenTrack(UMovieSceneTrack* InTrack)"
  },
  {
    "label": "FindTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneTrack*)",
    "insertText": "FindTrack(TSubclassOf<UMovieSceneTrack> TrackClass)"
  },
  {
    "label": "FindTrack()",
    "kind": "Method",
    "detail": "Function (template<TrackClass> TrackClass*)",
    "insertText": "FindTrack()"
  },
  {
    "label": "GetTracks()",
    "kind": "Method",
    "detail": "Function (} const TArray<UMovieSceneTrack*>&)",
    "insertText": "GetTracks()"
  },
  {
    "label": "MoveBindingContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveBindingContents(const FGuid& SourceBindingId, const FGuid& DestinationBindingId)"
  },
  {
    "label": "FindBinding()",
    "kind": "Method",
    "detail": "Function (FMovieSceneBinding*)",
    "insertText": "FindBinding(const FGuid& ForGuid)"
  },
  {
    "label": "AddCameraCutTrack()",
    "kind": "Method",
    "detail": "Function (public : UMovieSceneTrack*)",
    "insertText": "AddCameraCutTrack(TSubclassOf<UMovieSceneTrack> TrackClass)"
  },
  {
    "label": "GetCameraCutTrack()",
    "kind": "Method",
    "detail": "Function (UMovieSceneTrack*)",
    "insertText": "GetCameraCutTrack()"
  },
  {
    "label": "RemoveCameraCutTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCameraCutTrack()"
  },
  {
    "label": "SetCameraCutTrack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCameraCutTrack(UMovieSceneTrack* Track)"
  },
  {
    "label": "GetAllSections()",
    "kind": "Method",
    "detail": "Function (public : TArray<UMovieSceneSection*>)",
    "insertText": "GetAllSections()"
  },
  {
    "label": "GetBindings()",
    "kind": "Method",
    "detail": "Function (const TArray<FMovieSceneBinding>&)",
    "insertText": "GetBindings()"
  },
  {
    "label": "GetPlaybackRange()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameNumber>)",
    "insertText": "GetPlaybackRange()"
  },
  {
    "label": "GetDisplayRate()",
    "kind": "Method",
    "detail": "Function (TickResolution = InTickResolution ; } FFrameRate)",
    "insertText": "GetDisplayRate()"
  },
  {
    "label": "GetEvaluationType()",
    "kind": "Method",
    "detail": "Function (DisplayRate = InDisplayRate ; } EMovieSceneEvaluationType)",
    "insertText": "GetEvaluationType()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (EvaluationType = InNewEvaluationType ;)",
    "insertText": "if(EvaluationType == EMovieSceneEvaluationType::FrameLocked && ClockSource == EUpdateClockSource::Tick)"
  },
  {
    "label": "GetClockSource()",
    "kind": "Method",
    "detail": "Function (ClockSource = EUpdateClockSource::Platform ; } } EUpdateClockSource)",
    "insertText": "GetClockSource()"
  },
  {
    "label": "SetClockSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClockSource(EUpdateClockSource InNewClockSource)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ClockSource = InNewClockSource ;)",
    "insertText": "if(ClockSource != EUpdateClockSource::Custom)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (CustomClockSourcePath .)",
    "insertText": "Reset()"
  },
  {
    "label": "SetClockSource()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetClockSource(UObject* InNewClockSource)"
  },
  {
    "label": "GetEarliestTimecodeSource()",
    "kind": "Method",
    "detail": "Function (ClockSource = EUpdateClockSource::Custom ; CustomClockSourcePath = InNewClockSource ; } FMovieSceneTimecodeSource)",
    "insertText": "GetEarliestTimecodeSource()"
  },
  {
    "label": "ReplaceBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceBinding(const FGuid& OldGuid, const FGuid& NewGuid, const FString& Name)"
  },
  {
    "label": "ReplaceBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReplaceBinding(const FGuid& BindingToReplaceGuid, const FMovieSceneBinding& NewBinding)"
  },
  {
    "label": "GetObjectsToLabels()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA TMap<FString,FMovieSceneTrackLabels>&)",
    "insertText": "GetObjectsToLabels()"
  },
  {
    "label": "SetObjectDisplayName()",
    "kind": "Method",
    "detail": "Function (SelectionRange . Value = Range ; } void)",
    "insertText": "SetObjectDisplayName(const FGuid& ObjectId, const FText& DisplayName)"
  },
  {
    "label": "GetRootFolders()",
    "kind": "Method",
    "detail": "Function (TArrayView<UMovieSceneFolder* const>)",
    "insertText": "GetRootFolders()"
  },
  {
    "label": "GetRootFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRootFolders(TArray<UMovieSceneFolder*>& InRootFolders)"
  },
  {
    "label": "GetNumRootFolders()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumRootFolders()"
  },
  {
    "label": "GetRootFolder()",
    "kind": "Method",
    "detail": "Function (UMovieSceneFolder*)",
    "insertText": "GetRootFolder(int32 FolderIndex)"
  },
  {
    "label": "AddRootFolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRootFolder(UMovieSceneFolder* Folder)"
  },
  {
    "label": "RemoveRootFolder()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveRootFolder(UMovieSceneFolder* Folder)"
  },
  {
    "label": "RemoveRootFolder()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveRootFolder(int32 FolderIndex)"
  },
  {
    "label": "EmptyRootFolders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EmptyRootFolders()"
  },
  {
    "label": "GetSoloNodes()",
    "kind": "Method",
    "detail": "Function (TArray<FString>&)",
    "insertText": "GetSoloNodes()"
  },
  {
    "label": "SetPlaybackRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRange(const TRange<FFrameNumber>& NewRange, bool bAlwaysMarkDirty = true)"
  },
  {
    "label": "SetWorkingRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorkingRange(double Start, double End)"
  },
  {
    "label": "SetViewRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewRange(double Start, double End)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA public : bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "IsPlaybackRangeLocked()",
    "kind": "Method",
    "detail": "Function (bReadOnly = bInReadOnly ; } bool)",
    "insertText": "IsPlaybackRangeLocked()"
  },
  {
    "label": "SetPlaybackRangeLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackRangeLocked(bool bLocked)"
  },
  {
    "label": "AreMarkedFramesLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMarkedFramesLocked()"
  },
  {
    "label": "SetMarkedFramesLocked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMarkedFramesLocked(bool bLocked)"
  },
  {
    "label": "GetEditorData()",
    "kind": "Method",
    "detail": "Function (FMovieSceneEditorData&)",
    "insertText": "GetEditorData()"
  },
  {
    "label": "IsSectionInGroup()",
    "kind": "Method",
    "detail": "Function (EditorData = InEditorData ; } bool)",
    "insertText": "IsSectionInGroup(const UMovieSceneSection& InSection)"
  },
  {
    "label": "GroupSections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GroupSections(const TArray<UMovieSceneSection*> InSections)"
  },
  {
    "label": "UngroupSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UngroupSection(const UMovieSceneSection& InSection)"
  },
  {
    "label": "GetSectionGroup()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneSectionGroup*)",
    "insertText": "GetSectionGroup(const UMovieSceneSection& InSection)"
  },
  {
    "label": "CleanSectionGroups()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanSectionGroups()"
  },
  {
    "label": "GetNodeGroups()",
    "kind": "Method",
    "detail": "Function (UMovieSceneNodeGroupCollection&)",
    "insertText": "GetNodeGroups()"
  },
  {
    "label": "AddMarkedFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddMarkedFrame(const FMovieSceneMarkedFrame& InMarkedFrame)"
  },
  {
    "label": "DeleteMarkedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMarkedFrame(int32 DeleteIndex)"
  },
  {
    "label": "DeleteMarkedFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteMarkedFrames()"
  },
  {
    "label": "SortMarkedFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortMarkedFrames()"
  },
  {
    "label": "FindMarkedFrameByLabel()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindMarkedFrameByLabel(const FString& InLabel)"
  },
  {
    "label": "FindMarkedFrameByFrameNumber()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindMarkedFrameByFrameNumber(FFrameNumber InFrameNumber)"
  },
  {
    "label": "FindNextMarkedFrame()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindNextMarkedFrame(FFrameNumber InFrameNumber, bool bForward)"
  },
  {
    "label": "SetGloballyShowMarkedFrames()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "SetGloballyShowMarkedFrames(bool bShowMarkedFrames)"
  },
  {
    "label": "ToggleGloballyShowMarkedFrames()",
    "kind": "Method",
    "detail": "Function (bGloballyShowMarkedFrames = bShowMarkedFrames ; } void)",
    "insertText": "ToggleGloballyShowMarkedFrames()"
  },
  {
    "label": "GetGloballyShowMarkedFrames()",
    "kind": "Method",
    "detail": "Function (bGloballyShowMarkedFrames = ! bGloballyShowMarkedFrames ; } bool)",
    "insertText": "GetGloballyShowMarkedFrames()"
  },
  {
    "label": "TagBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TagBinding(const FName& NewTag, const UE::MovieScene::FFixedObjectBindingID& BindingToTag)"
  },
  {
    "label": "UntagBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UntagBinding(const FName& Tag, const UE::MovieScene::FFixedObjectBindingID& Binding)"
  },
  {
    "label": "RemoveTag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTag(const FName& TagToRemove)"
  },
  {
    "label": "AddGeneratedCondition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddGeneratedCondition(UMovieSceneGroupCondition* InGeneratedCondition)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (GeneratedConditions .)",
    "insertText": "Add(InGeneratedCondition)"
  },
  {
    "label": "ResetGeneratedConditions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetGeneratedConditions()"
  },
  {
    "label": "RemoveBinding()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "RemoveBinding(const FGuid& Guid)"
  },
  {
    "label": "IndexOfBinding()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IndexOfBinding(const FGuid& ForGuid)"
  },
  {
    "label": "IndexOfSpawnable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IndexOfSpawnable(const FGuid& ForGuid)"
  },
  {
    "label": "IndexOfPossessable()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "IndexOfPossessable(const FGuid& ForGuid)"
  },
  {
    "label": "PreSave()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "PreSave(FObjectPreSaveContext ObjectSaveContext)"
  },
  {
    "label": "UpgradeTimeRanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpgradeTimeRanges()"
  },
  {
    "label": "OptimizeForCook()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR void)",
    "insertText": "OptimizeForCook()"
  },
  {
    "label": "RemoveNullTracks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNullTracks()"
  }
]