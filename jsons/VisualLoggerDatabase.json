[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FVisualLoggerDBRow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerDBRow"
  },
  {
    "label": "FVisualLoggerDBEvents",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerDBEvents"
  },
  {
    "label": "FVisualLoggerDatabase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerDatabase"
  },
  {
    "label": "FVisualLoggerGraphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerGraphData"
  },
  {
    "label": "FVisualLoggerGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerGraph"
  },
  {
    "label": "FVisualLoggerGraphsDatabase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerGraphsDatabase"
  },
  {
    "label": "FVisualLoggerGraphHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerGraphHelper"
  },
  {
    "label": "FVisualLoggerEditorInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLoggerEditorInterface"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" VisualLogger / VisualLoggerTypes . h \" class AActor ; struct FVisualLoggerDBRow ; struct FVisualLoggerDBEvents {)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FItemSelectionChangedEvent, const FVisualLoggerDBRow&, int32)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FNewItemEvent, const FVisualLoggerDBRow&, int32)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FNewRowEvent, const FVisualLoggerDBRow&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnRowSelectionChangedEvent, const TArray<FName>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnRowChangedVisibilityEvent, const FName&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnRowRemovedEvent, const FName&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnGraphChangedVisibilityEvent, const FName&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnGraphAddedEvent, const FName&, const FName&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnGraphDataNameAddedEvent, const FName&, const FName&, const FName&)"
  },
  {
    "label": "FVisualLoggerDBRow()",
    "kind": "Method",
    "detail": "Function (FNewItemEvent OnNewItem ; FItemSelectionChangedEvent OnItemSelectionChanged ; FNewRowEvent OnNewRow ; FOnRowSelectionChangedEvent OnRowSelectionChanged ; FOnRowChangedVisibilityEvent OnRowChangedVisibility ; FOnRowRemovedEvent OnRowRemoved ; FOnGraphChangedVisibilityEvent OnGraphChangedVisibilityEvent ; FOnGraphAddedEvent OnGraphAddedEvent ; FOnGraphDataNameAddedEvent OnGraphDataNameAddedEvent ; } ; struct FVisualLoggerDBRow { public :)",
    "insertText": "FVisualLoggerDBRow(FVisualLoggerDBEvents& InEvents, const FName& InOwnerName, const FName& InOwnerClassName) : DBEvents(InEvents), OwnerName(InOwnerName), OwnerClassName(InOwnerClassName), CurrentItemIndex(INDEX_NONE)"
  },
  {
    "label": "GetOwnerName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetOwnerName()"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (const TArray<FVisualLogDevice::FVisualLogEntryItem>&)",
    "insertText": "GetItems()"
  },
  {
    "label": "GetCurrentItem()",
    "kind": "Method",
    "detail": "Function (const FVisualLogDevice::FVisualLogEntryItem&)",
    "insertText": "GetCurrentItem()"
  },
  {
    "label": "GetCurrentItemIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentItemIndex()"
  },
  {
    "label": "IsItemVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItemVisible(int32 ItemIndex)"
  },
  {
    "label": "GetClosestItem()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetClosestItem(double Time, double ScrubTime)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (protected : FVisualLoggerDBEvents& DBEvents ; FName OwnerName ; FName OwnerClassName ; int32 CurrentItemIndex ; TArray<FVisualLogDevice::FVisualLogEntryItem> Items ; TBitArray<> HiddenItems ; int32 NumHiddenItems = 0 ; } ; struct FVisualLoggerDatabase { typedef TArray<FVisualLoggerDBRow>::TConstIterator FConstRowIterator ; typedef TArray<FVisualLoggerDBRow>::TIterator FRowIterator ; FVisualLoggerDatabase&)",
    "insertText": "Get()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetEvents()",
    "kind": "Method",
    "detail": "Function (FVisualLoggerDBEvents&)",
    "insertText": "GetEvents()"
  },
  {
    "label": "AddItem()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddItem(const FVisualLogDevice::FVisualLogEntryItem& NewItem)"
  },
  {
    "label": "GetConstRowIterator()",
    "kind": "Method",
    "detail": "Function (FConstRowIterator)",
    "insertText": "GetConstRowIterator()"
  },
  {
    "label": "GetRowIterator()",
    "kind": "Method",
    "detail": "Function (} FRowIterator)",
    "insertText": "GetRowIterator()"
  },
  {
    "label": "ContainsRowByName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ContainsRowByName(FName InName)"
  },
  {
    "label": "GetRowByName()",
    "kind": "Method",
    "detail": "Function (FVisualLoggerDBRow&)",
    "insertText": "GetRowByName(FName InName)"
  },
  {
    "label": "SelectRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectRow(FName InName, bool bDeselectOtherNodes = false)"
  },
  {
    "label": "DeselectRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectRow(FName InName)"
  },
  {
    "label": "IsRowSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowSelected(FName InName)"
  },
  {
    "label": "GetSelectedRows()",
    "kind": "Method",
    "detail": "Function (} const TArray<FName>&)",
    "insertText": "GetSelectedRows()"
  },
  {
    "label": "IsRowVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRowVisible(FName RowName)"
  },
  {
    "label": "SetRowVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetRowVisibility(FName RowName, bool IsVisible)"
  },
  {
    "label": "RemoveRow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveRow(FName RowName)"
  },
  {
    "label": "FVisualLoggerGraphData()",
    "kind": "Method",
    "detail": "Function (protected : TArray<FVisualLoggerDBRow> Rows ; TMap<FName,int32> RowNameToIndex ; TArray<FName> SelectedRows ; TArray<FName> HiddenRows ; FVisualLoggerDBEvents DBEvents ; private : TSharedPtr<struct FVisualLoggerDatabase> StaticInstance ; } ; struct FVisualLoggerGraphData { FName DataName ; TArray<FVector2D> Samples ; TArray<double> TimeStamps ;)",
    "insertText": "FVisualLoggerGraphData(FName InDataName) : DataName(InDataName)"
  },
  {
    "label": "FVisualLoggerGraph()",
    "kind": "Method",
    "detail": "Function (} } ; struct FVisualLoggerGraph { typedef TArray<FVisualLoggerGraphData>::TConstIterator FConstDataIterator ; typedef TArray<FVisualLoggerGraphData>::TIterator FDataIterator ;)",
    "insertText": "FVisualLoggerGraph(FName InOwnerName) : OwnerName(InOwnerName)"
  },
  {
    "label": "IsDataVisible()",
    "kind": "Method",
    "detail": "Function (GraphName = InGraphName ; } bool)",
    "insertText": "IsDataVisible(FName DataName)"
  },
  {
    "label": "SetDataVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDataVisibility(FName DataName, bool IsVisible)"
  },
  {
    "label": "ContainsDataByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsDataByName(FName DataName)"
  },
  {
    "label": "FindOrAddDataByName()",
    "kind": "Method",
    "detail": "Function (} ; FVisualLoggerGraphData&)",
    "insertText": "FindOrAddDataByName(FName DataName)"
  },
  {
    "label": "GetConstDataIterator()",
    "kind": "Method",
    "detail": "Function (FConstDataIterator)",
    "insertText": "GetConstDataIterator()"
  },
  {
    "label": "GetDataIterator()",
    "kind": "Method",
    "detail": "Function (} FDataIterator)",
    "insertText": "GetDataIterator()"
  },
  {
    "label": "IsGraphVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphVisible(FName OwnerName, FName GraphName)"
  },
  {
    "label": "SetGraphVisibility()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphVisibility(FName OwnerName, FName GraphName, bool IsVisible)"
  },
  {
    "label": "ContainsGraphByName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsGraphByName(FName OwnerName, FName GraphName)"
  },
  {
    "label": "GetGraphByName()",
    "kind": "Method",
    "detail": "Function (FVisualLoggerGraph&)",
    "insertText": "GetGraphByName(FName OwnerName, FName GraphName)"
  },
  {
    "label": "ContainsHistogramGraphs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsHistogramGraphs()"
  },
  {
    "label": "GetGraphsByOwnerName()",
    "kind": "Method",
    "detail": "Function (} const TArray<FVisualLoggerGraph>&)",
    "insertText": "GetGraphsByOwnerName(FName OwnerName)"
  },
  {
    "label": "GetConstGraphsIterator()",
    "kind": "Method",
    "detail": "Function (FConstGraphIterator)",
    "insertText": "GetConstGraphsIterator(FName OwnerName)"
  },
  {
    "label": "GetGraphsIterator()",
    "kind": "Method",
    "detail": "Function (} FGraphIterator)",
    "insertText": "GetGraphsIterator(FName OwnerName)"
  },
  {
    "label": "GetConstOwnersIterator()",
    "kind": "Method",
    "detail": "Function (} FConstOwnersIterator)",
    "insertText": "GetConstOwnersIterator()"
  },
  {
    "label": "GetOwnersIterator()",
    "kind": "Method",
    "detail": "Function (} FOwnersIterator)",
    "insertText": "GetOwnersIterator()"
  },
  {
    "label": "GetRowClassName()",
    "kind": "Method",
    "detail": "Function (FVisualLoggerEditorInterface EditorInterface ; return& EditorInterface ; } const FName&)",
    "insertText": "GetRowClassName(FName RowName)"
  },
  {
    "label": "GetSelectedItemIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSelectedItemIndex(FName RowName)"
  },
  {
    "label": "GetRowItems()",
    "kind": "Method",
    "detail": "Function (const TArray<FVisualLogDevice::FVisualLogEntryItem>&)",
    "insertText": "GetRowItems(FName RowName)"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (const FVisualLogDevice::FVisualLogEntryItem&)",
    "insertText": "GetSelectedItem(FName RowName)"
  },
  {
    "label": "IsItemVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsItemVisible(FName RowName, int32 ItemIndex)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "GetHelperActor()",
    "kind": "Method",
    "detail": "Function (AActor*)",
    "insertText": "GetHelperActor(UWorld* InWorld = nullptr)"
  },
  {
    "label": "MatchCategoryFilters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MatchCategoryFilters(const FString& String, ELogVerbosity::Type Verbosity = ELogVerbosity::All)"
  }
]