[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FLinkerInstancingContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinkerInstancingContext"
  },
  {
    "label": "FObjectPreSaveContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectPreSaveContext"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FPackagePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackagePath"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEnum"
  },
  {
    "label": "UFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFunction"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "UObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectBase"
  },
  {
    "label": "UPackage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackage"
  },
  {
    "label": "UPackageMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPackageMap"
  },
  {
    "label": "UScriptStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UScriptStruct"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "FCustomPropertyListNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomPropertyListNode"
  },
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FObjectInstancingGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectInstancingGraph"
  },
  {
    "label": "FObjectPostCDOCompiledContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPostCDOCompiledContext"
  },
  {
    "label": "FObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPtr"
  },
  {
    "label": "FPrimaryAssetId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetId"
  },
  {
    "label": "FStaticConstructObjectParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticConstructObjectParameters"
  },
  {
    "label": "FUObjectSerializeContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUObjectSerializeContext"
  },
  {
    "label": "FWorldContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldContext"
  },
  {
    "label": "TObjectPtr",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TObjectPtr"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FObjectDuplicationParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectDuplicationParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLoadPackageAsyncProgressParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadPackageAsyncProgressParams"
  },
  {
    "label": "FLoadPackageAsyncOptionalParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadPackageAsyncOptionalParams"
  },
  {
    "label": "FLoadAssetAsyncOptionalParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadAssetAsyncOptionalParams"
  },
  {
    "label": "FScopedAllowAbstractClassAllocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedAllowAbstractClassAllocation"
  },
  {
    "label": "FGCObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGCObject"
  },
  {
    "label": "FObjectInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectInitializer"
  },
  {
    "label": "TReturnType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TReturnType"
  },
  {
    "label": "TClassToConstructByDefault",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClassToConstructByDefault"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FScriptIntegrationObjectHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptIntegrationObjectHelper"
  },
  {
    "label": "FOverrides",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverrides"
  },
  {
    "label": "FOverrideDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverrideDetails"
  },
  {
    "label": "FOverride",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOverride"
  },
  {
    "label": "FSubobjectsToInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubobjectsToInit"
  },
  {
    "label": "FSubobjectInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubobjectInit"
  },
  {
    "label": "constructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "constructor"
  },
  {
    "label": "FScopedObjectFlagMarker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedObjectFlagMarker"
  },
  {
    "label": "FStoredObjectFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoredObjectFlags"
  },
  {
    "label": "TObjectClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectClass"
  },
  {
    "label": "TObjectArrayIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TObjectArrayIterator"
  },
  {
    "label": "FReferenceCollectorArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollectorArchive"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FVerySlowReferenceCollectorArchiveScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVerySlowReferenceCollectorArchiveScope"
  },
  {
    "label": "UObjectType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObjectType"
  },
  {
    "label": "VCellType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VCellType"
  },
  {
    "label": "AROPrivate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AROPrivate"
  },
  {
    "label": "FReferenceFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceFinder"
  },
  {
    "label": "FGarbageCollectionTracer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGarbageCollectionTracer"
  },
  {
    "label": "FPackageReloadedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageReloadedEvent"
  },
  {
    "label": "FEndLoadPackageContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEndLoadPackageContext"
  },
  {
    "label": "FCoreUObjectDelegates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCoreUObjectDelegates"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FEditPropertyChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditPropertyChain"
  },
  {
    "label": "FTransactionObjectEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransactionObjectEvent"
  },
  {
    "label": "re",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "re"
  },
  {
    "label": "FGarbageReferenceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGarbageReferenceInfo"
  },
  {
    "label": "FAssetLog",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetLog"
  },
  {
    "label": "FAssetMsg",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetMsg"
  },
  {
    "label": "FFieldClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFieldClass"
  },
  {
    "label": "FClassFunctionLinkInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassFunctionLinkInfo"
  },
  {
    "label": "FCppClassTypeInfoStatic",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCppClassTypeInfoStatic"
  },
  {
    "label": "FMetaDataPairParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetaDataPairParam"
  },
  {
    "label": "FEnumeratorParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnumeratorParam"
  },
  {
    "label": "FPropertyParamsBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyParamsBase"
  },
  {
    "label": "FPropertyParamsBaseWithoutOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyParamsBaseWithoutOffset"
  },
  {
    "label": "FPropertyParamsBaseWithOffset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyParamsBaseWithOffset"
  },
  {
    "label": "FGenericPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPropertyParams"
  },
  {
    "label": "FBytePropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBytePropertyParams"
  },
  {
    "label": "FBoolPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoolPropertyParams"
  },
  {
    "label": "FObjectPropertyParamsWithoutClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPropertyParamsWithoutClass"
  },
  {
    "label": "FObjectPropertyParamsWithClass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPropertyParamsWithClass"
  },
  {
    "label": "FObjectPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FObjectPropertyParams"
  },
  {
    "label": "FClassPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassPropertyParams"
  },
  {
    "label": "FSoftClassPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoftClassPropertyParams"
  },
  {
    "label": "FInterfacePropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInterfacePropertyParams"
  },
  {
    "label": "FStructPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructPropertyParams"
  },
  {
    "label": "FDelegatePropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDelegatePropertyParams"
  },
  {
    "label": "FMulticastDelegatePropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMulticastDelegatePropertyParams"
  },
  {
    "label": "FEnumPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnumPropertyParams"
  },
  {
    "label": "FFieldPathPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFieldPathPropertyParams"
  },
  {
    "label": "FArrayPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArrayPropertyParams"
  },
  {
    "label": "FMapPropertyParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMapPropertyParams"
  },
  {
    "label": "FFunctionParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFunctionParams"
  },
  {
    "label": "FEnumParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEnumParams"
  },
  {
    "label": "FStructParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStructParams"
  },
  {
    "label": "FPackageParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageParams"
  },
  {
    "label": "FImplementedInterfaceParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImplementedInterfaceParams"
  },
  {
    "label": "FClassParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FClassParams"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" Containers / UnrealString . h \" # include \" Containers / VersePathFwd . h \" # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Internationalization / Text . h \" # include \" Logging / LogMacros . h \" # include \" Logging / LogVerbosity . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / OutputDeviceRedirector . h \" # include \" Misc / PackagePath . h \" # include \" Serialization / ArchiveUObject . h \" # include \" Serialization / MemoryLayout . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Templates / Function . h \" # include \" Templates / IsArrayOrRefOfTypeByPredicate . h \" # include \" Templates / PointerIsConvertibleFromTo . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" Templates / IsTObjectPtr . h \" # include \" Traits / IsCharEncodingCompatibleWith . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / PrimaryAssetId . h \" # include \" UObject / Script . h \" # include \" UObject / TopLevelAssetPath . h \" # include \" UObject / UnrealNames . h \" # include \" VerseTypesFwd . h \" class FArchive ; class FCbWriter ; class FLinkerInstancingContext ; class FObjectPreSaveContext ; class FOutputDevice ; class FPackagePath ; class FProperty ; class ITargetPlatform ; class UClass ; class UEnum ; class UFunction ; class UObject ; class UObjectBase ; class UPackage ; class UPackageMap ; class UScriptStruct ; class UWorld ; struct FCustomPropertyListNode ; struct FGuid ; struct FObjectInstancingGraph ; struct FObjectPostCDOCompiledContext ; struct FObjectPtr ; struct FPrimaryAssetId ; struct FStaticConstructObjectParameters ; struct FUObjectSerializeContext ; struct FWorldContext ; template<T> struct TObjectPtr ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogUObjectGlobals, Log, All)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"ConstructObject\"),STAT_ConstructObject,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"AllocateObject\"),STAT_AllocateObject,STATGROUP_ObjectVerbose,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"PostConstructInitializeProperties\"),STAT_PostConstructInitializeProperties,STATGROUP_ObjectVerbose,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"LoadConfig\"),STAT_LoadConfig,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"LoadObject\"),STAT_LoadObject,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"InitProperties\"),STAT_InitProperties,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"NameTable Entries\"),STAT_NameTableEntries,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"NameTable ANSI Entries\"),STAT_NameTableAnsiEntries,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_ACCUMULATOR_STAT_EXTERN(TEXT(\"NameTable Wide Entries\"),STAT_NameTableWideEntries,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_MEMORY_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MEMORY_STAT_EXTERN(TEXT(\"NameTable Memory Size\"),STAT_NameTableMemorySize,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_CYCLE_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_CYCLE_STAT_EXTERN(TEXT(\"~UObject\"),STAT_DestroyObject,STATGROUP_Object,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"FindObject\"),STAT_FindObject,STATGROUP_ObjectVerbose,)"
  },
  {
    "label": "DECLARE_DWORD_COUNTER_STAT_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DWORD_COUNTER_STAT_EXTERN(TEXT(\"FindObjectFast\"),STAT_FindObjectFast,STATGROUP_ObjectVerbose,)"
  },
  {
    "label": "INVALID_OBJECT()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INVALID_OBJECT(UObject*)-1 #define PERF_TRACK_DETAILED_ASYNC_STATS (0) #ifndef UE_GC_RUN_WEAKPTR_BARRIERS #define UE_GC_RUN_WEAKPTR_BARRIERS 0 #endif #if UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR #define UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() UE_DEPRECATED(5.3, \"WARNING: Your program will randomly crash if this function is called when incremental gc is enabled. Pass TObjectPtr<...> instead of UObject* to AddReferencedObject(s) API's.\") #else #define UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED(...)"
  },
  {
    "label": "FObjectDuplicationParameters()",
    "kind": "Method",
    "detail": "Function (int32 GAllowUnversionedContentInEditor ; int32 GAllowCookedDataInEditorBuilds ; namespace EDuplicateMode { enum Type { Normal,World,PIE } ; } ; struct FObjectDuplicationParameters { UObject* SourceObject ; UObject* DestOuter ; FName DestName ; EObjectFlags FlagMask ; EInternalObjectFlags InternalFlagMask ; EObjectFlags ApplyFlags ; EInternalObjectFlags ApplyInternalFlags ; uint32 PortFlags ; EDuplicateMode::Type DuplicateMode ; bool bAssignExternalPackages = true ; bool bSkipPostLoad = false ; UClass* DestClass ; TMap<UObject*,UObject*> DuplicationSeed ; TMap<UObject*,UObject*>* CreatedObjects ;)",
    "insertText": "FObjectDuplicationParameters(UObject* InSourceObject, UObject* InDestOuter)"
  },
  {
    "label": "IsSavingPackage()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE { bool)",
    "insertText": "IsSavingPackage(UObject* InOuter = nullptr)"
  },
  {
    "label": "ParsePropertyFlags()",
    "kind": "Method",
    "detail": "Function (} TArray<const TCHAR*>)",
    "insertText": "ParsePropertyFlags(EPropertyFlags Flags)"
  },
  {
    "label": "GetTransientPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "GetTransientPackage()"
  },
  {
    "label": "GetTransientOuterForRename()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetTransientOuterForRename(UClass* ForClass)"
  },
  {
    "label": "GetIniFilenameFromObjectsReference()",
    "kind": "Method",
    "detail": "Function (const FString*)",
    "insertText": "GetIniFilenameFromObjectsReference(const FString& ObjectsReferenceString)"
  },
  {
    "label": "ResolveIniObjectsReference()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ResolveIniObjectsReference(const FString& ObjectReference, const FString* IniFilename = nullptr, bool bThrow = false)"
  },
  {
    "label": "ResolveName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResolveName(UObject*& Outer, FString& ObjectsReferenceString, bool Create, bool Throw, uint32 LoadFlags = LOAD_None, const FLinkerInstancingContext* InstancingContext = nullptr)"
  },
  {
    "label": "SafeLoadError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SafeLoadError(UObject* Outer, uint32 LoadFlags, const TCHAR* ErrorMessage)"
  },
  {
    "label": "UpdateSuffixForNextNewObject()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "UpdateSuffixForNextNewObject(UObject* Parent, const UClass* Class, TFunctionRef<void(int32&)> IndexMutator)"
  },
  {
    "label": "StaticFindObjectFast()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObjectFast(UClass* Class, UObject* InOuter, FName InName, bool bExactClass = false, EObjectFlags ExclusiveFlags = RF_NoFlags, EInternalObjectFlags ExclusiveInternalFlags = EInternalObjectFlags::None)"
  },
  {
    "label": "StaticFindObjectFastSafe()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObjectFastSafe(UClass* Class, UObject* InOuter, FName InName, bool bExactClass = false, EObjectFlags ExclusiveFlags = RF_NoFlags, EInternalObjectFlags ExclusiveInternalFlags = EInternalObjectFlags::None)"
  },
  {
    "label": "StaticFindObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObject(UClass* Class, UObject* InOuter, const TCHAR* Name, bool ExactClass=false)"
  },
  {
    "label": "StaticFindObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObject(UClass* Class, FTopLevelAssetPath ObjectPath, bool ExactClass)"
  },
  {
    "label": "StaticFindObjectChecked()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObjectChecked(UClass* Class, UObject* InOuter, const TCHAR* Name, bool ExactClass=false)"
  },
  {
    "label": "StaticFindObjectSafe()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObjectSafe(UClass* Class, UObject* InOuter, const TCHAR* Name, bool ExactClass=false)"
  },
  {
    "label": "StaticFindObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObject(UClass* Class, const UE::Core::FVersePath& VersePath)"
  },
  {
    "label": "StaticFindObjectSafe()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindObjectSafe(UClass* Class, FTopLevelAssetPath ObjectPath, bool ExactClass)"
  },
  {
    "label": "StaticFindAllObjectsFast()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticFindAllObjectsFast(TArray<UObject*>& OutFoundObjects, UClass* ObjectClass, FName ObjectName, bool ExactClass = false, EObjectFlags ExclusiveFlags = RF_NoFlags, EInternalObjectFlags ExclusiveInternalFlags = EInternalObjectFlags::None)"
  },
  {
    "label": "StaticFindAllObjectsFastSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticFindAllObjectsFastSafe(TArray<UObject*>& OutFoundObjects, UClass* ObjectClass, FName ObjectName, bool ExactClass = false, EObjectFlags ExclusiveFlags = RF_NoFlags, EInternalObjectFlags ExclusiveInternalFlags = EInternalObjectFlags::None)"
  },
  {
    "label": "StaticFindAllObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticFindAllObjects(TArray<UObject*>& OutFoundObjects, UClass* Class, const TCHAR* Name, bool ExactClass = false)"
  },
  {
    "label": "StaticFindAllObjectsSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticFindAllObjectsSafe(TArray<UObject*>& OutFoundObjects, UClass* Class, const TCHAR* Name, bool ExactClass = false)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EFindFirstObjectOptions { None = 0,ExactClass = 1<<1,NativeFirst = 1<<2,EnsureIfAmbiguous = 1<<3 } ;)",
    "insertText": "ENUM_CLASS_FLAGS(EFindFirstObjectOptions)"
  },
  {
    "label": "StaticFindFirstObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindFirstObject(UClass* Class, const TCHAR* Name, EFindFirstObjectOptions Options = EFindFirstObjectOptions::None, ELogVerbosity::Type AmbiguousMessageVerbosity = ELogVerbosity::NoLogging, const TCHAR* InCurrentOperation = nullptr)"
  },
  {
    "label": "StaticFindFirstObjectSafe()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticFindFirstObjectSafe(UClass* Class, const TCHAR* Name, EFindFirstObjectOptions Options = EFindFirstObjectOptions::None, ELogVerbosity::Type AmbiguousMessageVerbosity = ELogVerbosity::NoLogging, const TCHAR* InCurrentOperation = nullptr)"
  },
  {
    "label": "ParseObject()",
    "kind": "Method",
    "detail": "Function (enum class EParseObjectLoadingPolicy : uint8 { Find,FindOrLoad,} ; bool)",
    "insertText": "ParseObject(const TCHAR* Stream, const TCHAR* Match, UClass* Class, UObject*& DestRes, UObject* InParent, EParseObjectLoadingPolicy LoadingPolicy, bool* bInvalidObject=nullptr)"
  },
  {
    "label": "ParseObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseObject(const TCHAR* Stream, const TCHAR* Match, UClass* Class, UObject*& DestRes, UObject* InParent, bool* bInvalidObject=nullptr)"
  },
  {
    "label": "StaticLoadObject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "StaticLoadObject(UClass* Class, UObject* InOuter, const TCHAR* Name, const TCHAR* Filename = nullptr, uint32 LoadFlags = LOAD_None, UPackageMap* Sandbox = nullptr, bool bAllowObjectReconciliation = true, const FLinkerInstancingContext* InstancingContext = nullptr)"
  },
  {
    "label": "StaticLoadClass()",
    "kind": "Method",
    "detail": "Function (UClass*)",
    "insertText": "StaticLoadClass(UClass* BaseClass, UObject* InOuter, const TCHAR* Name, const TCHAR* Filename = nullptr, uint32 LoadFlags = LOAD_None, UPackageMap* Sandbox = nullptr)"
  },
  {
    "label": "StaticLoadAsset()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticLoadAsset(UClass* Class, FTopLevelAssetPath InPath, uint32 LoadFlags = LOAD_None, const FLinkerInstancingContext* InstancingContext = nullptr)"
  },
  {
    "label": "StaticConstructObject_Internal()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticConstructObject_Internal(const FStaticConstructObjectParameters& Params)"
  },
  {
    "label": "StaticDuplicateObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticDuplicateObject(UObject const* SourceObject, UObject* DestOuter, const FName DestName = NAME_None, EObjectFlags FlagMask = RF_AllFlags, UClass* DestClass = nullptr, EDuplicateMode::Type DuplicateMode = EDuplicateMode::Normal, EInternalObjectFlags InternalFlagsMask = EInternalObjectFlags_AllFlags)"
  },
  {
    "label": "InitStaticDuplicateObjectParams()",
    "kind": "Method",
    "detail": "Function (FObjectDuplicationParameters)",
    "insertText": "InitStaticDuplicateObjectParams(UObject const* SourceObject, UObject* DestOuter, const FName DestName = NAME_None, EObjectFlags FlagMask = RF_AllFlags, UClass* DestClass = nullptr, EDuplicateMode::Type DuplicateMode = EDuplicateMode::Normal, EInternalObjectFlags InternalFlagsMask = EInternalObjectFlags_AllFlags)"
  },
  {
    "label": "StaticDuplicateObjectEx()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticDuplicateObjectEx(FObjectDuplicationParameters& Parameters)"
  },
  {
    "label": "StaticExec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StaticExec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar=*GLog)"
  },
  {
    "label": "StaticTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticTick(float DeltaTime, bool bUseFullTimeLimit = true, float AsyncLoadingTime = 0.005f)"
  },
  {
    "label": "LoadPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "LoadPackage(UPackage* InOuter, const TCHAR* InLongPackageName, uint32 LoadFlags, FArchive* InReaderOverride = nullptr, const FLinkerInstancingContext* InstancingContext = nullptr)"
  },
  {
    "label": "LoadPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "LoadPackage(UPackage* InOuter, const FPackagePath& InPackagePath, uint32 LoadFlags, FArchive* InReaderOverride = nullptr, const FLinkerInstancingContext* InstancingContext = nullptr, const FPackagePath* DiffPackagePath = nullptr)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (namespace EAsyncLoadingResult { enum Type { Failed,Succeeded,Canceled } ; } enum class EAsyncLoadingProgress : uint32 { Failed,Started,Read,Serialized,FullyLoaded,Canceled } ; typedef int32 TAsyncLoadPriority ;)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FLoadPackageAsyncDelegate, const FName& , UPackage* , EAsyncLoadingResult::Type)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (FName PackageName { NAME_None } ; UPackage* LoadedPackage { nullptr } ; EAsyncLoadingProgress ProgressType { EAsyncLoadingProgress::Failed } ; } ; using FLoadPackageAsyncProgressDelegate = TTSDelegate<)",
    "insertText": "void(const FLoadPackageAsyncProgressParams& Params)"
  },
  {
    "label": "LoadPackageAsync()",
    "kind": "Method",
    "detail": "Function (struct FLoadPackageAsyncOptionalParams { FName CustomPackageName { NAME_None } ; TUniquePtr<FLoadPackageAsyncDelegate> CompletionDelegate ; TUniquePtr<FLoadPackageAsyncProgressDelegate> ProgressDelegate ; EPackageFlags PackageFlags { PKG_None } ; int32 PIEInstanceID { INDEX_NONE } ; int32 PackagePriority { 0 } ; const FLinkerInstancingContext* InstancingContext { nullptr } ; uint32 LoadFlags { LOAD_None } ; } ; int32)",
    "insertText": "LoadPackageAsync(const FPackagePath& InPackagePath, FLoadPackageAsyncOptionalParams InOptionalParams)"
  },
  {
    "label": "LoadPackageAsync()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadPackageAsync(const FPackagePath& InPackagePath, FName InPackageNameToCreate = NAME_None, FLoadPackageAsyncDelegate InCompletionDelegate = FLoadPackageAsyncDelegate(), EPackageFlags InPackageFlags = PKG_None, int32 InPIEInstanceID = INDEX_NONE, TAsyncLoadPriority InPackagePriority = 0, const FLinkerInstancingContext* InstancingContext = nullptr, uint32 LoadFlags = LOAD_None)"
  },
  {
    "label": "LoadPackageAsync()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadPackageAsync(const FString& InName, const FGuid* InGuid = nullptr)"
  },
  {
    "label": "LoadPackageAsync()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadPackageAsync(const FString& InName, FLoadPackageAsyncDelegate InCompletionDelegate, TAsyncLoadPriority InPackagePriority = 0, EPackageFlags InPackageFlags = PKG_None, int32 InPIEInstanceID = INDEX_NONE)"
  },
  {
    "label": "LoadPackageAsync()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "LoadPackageAsync(const FString& InName, FLoadPackageAsyncOptionalParams InOptionalParams)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FLoadAssetAsyncDelegate, const FTopLevelAssetPath& , UObject* , EAsyncLoadingResult::Type)"
  },
  {
    "label": "LoadAssetAsync()",
    "kind": "Method",
    "detail": "Function (int32 PackagePriority { 0 } ; const FLinkerInstancingContext* InstancingContext { nullptr } ; uint32 LoadFlags { LOAD_None } ; } ; int32)",
    "insertText": "LoadAssetAsync(FTopLevelAssetPath InAssetPath, FLoadAssetAsyncDelegate InCompletionDelegate, FLoadAssetAsyncOptionalParams InOptionalParams = FLoadAssetAsyncOptionalParams())"
  },
  {
    "label": "CancelAsyncLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAsyncLoading()"
  },
  {
    "label": "IsEventDrivenLoaderEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEventDrivenLoaderEnabled()"
  },
  {
    "label": "GetAsyncLoadPercentage()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAsyncLoadPercentage(const FName& PackageName)"
  },
  {
    "label": "CollectGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectGarbage(EObjectFlags KeepFlags, bool bPerformFullPurge = true)"
  },
  {
    "label": "TryCollectGarbage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TryCollectGarbage(EObjectFlags KeepFlags, bool bPerformFullPurge = true)"
  },
  {
    "label": "UnhashUnreachableObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnhashUnreachableObjects(bool bUseTimeLimit, double TimeLimit = 0.0)"
  },
  {
    "label": "IsIncrementalUnhashPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncrementalUnhashPending()"
  },
  {
    "label": "IsIncrementalPurgePending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncrementalPurgePending()"
  },
  {
    "label": "GatherUnreachableObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherUnreachableObjects(bool bForceSingleThreaded)"
  },
  {
    "label": "IsIncrementalReachabilityAnalysisPending()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIncrementalReachabilityAnalysisPending()"
  },
  {
    "label": "PerformIncrementalReachabilityAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PerformIncrementalReachabilityAnalysis(double TimeLimit)"
  },
  {
    "label": "FinalizeIncrementalReachabilityAnalysis()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeIncrementalReachabilityAnalysis()"
  },
  {
    "label": "IncrementalPurgeGarbage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementalPurgeGarbage(bool bUseTimeLimit, double TimeLimit = 0.002)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EUniqueObjectNameOptions { None = 0,GloballyUnique = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EUniqueObjectNameOptions)"
  },
  {
    "label": "MakeUniqueObjectName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "MakeUniqueObjectName(UObject* Outer, const UClass* Class, FName BaseName = NAME_None, EUniqueObjectNameOptions Options = EUniqueObjectNameOptions::None)"
  },
  {
    "label": "MakeObjectNameFromDisplayLabel()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "MakeObjectNameFromDisplayLabel(const FString& DisplayLabel, const FName CurrentObjectName)"
  },
  {
    "label": "IsReferenced()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReferenced(UObject*& Res, EObjectFlags KeepFlags, EInternalObjectFlags InternalKeepFlags, bool bCheckSubObjects = false, FReferencerInformationList* FoundReferences = nullptr)"
  },
  {
    "label": "FlushAsyncLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAsyncLoading(int32 PackageID = INDEX_NONE)"
  },
  {
    "label": "FlushAsyncLoading()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushAsyncLoading(TConstArrayView<int32> RequestIds)"
  },
  {
    "label": "GetNumAsyncPackages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAsyncPackages()"
  },
  {
    "label": "IsLoading()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoading()"
  },
  {
    "label": "SetAsyncLoadingAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAsyncLoadingAllowed(bool bAllowAsyncLoading)"
  },
  {
    "label": "ProcessAsyncLoading()",
    "kind": "Method",
    "detail": "Function (namespace EAsyncPackageState { enum Type { TimeOut = 0,PendingImports,Complete,} ; } EAsyncPackageState::Type)",
    "insertText": "ProcessAsyncLoading(bool bUseTimeLimit, bool bUseFullTimeLimit, double TimeLimit)"
  },
  {
    "label": "ProcessAsyncLoadingUntilComplete()",
    "kind": "Method",
    "detail": "Function (EAsyncPackageState::Type)",
    "insertText": "ProcessAsyncLoadingUntilComplete(TFunctionRef<bool()> CompletionPredicate, double TimeLimit)"
  },
  {
    "label": "BeginLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginLoad(FUObjectSerializeContext* LoadContext, const TCHAR* DebugContext = nullptr)"
  },
  {
    "label": "EndLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndLoad(FUObjectSerializeContext* LoadContext)"
  },
  {
    "label": "FindPackage()",
    "kind": "Method",
    "detail": "Function (UPackage*)",
    "insertText": "FindPackage(UObject* InOuter, const TCHAR* PackageName)"
  },
  {
    "label": "SetMountPointDefaultPackageFlags()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "SetMountPointDefaultPackageFlags(const TMap<FString, EPackageFlags>& InMountPointToDefaultPackageFlags)"
  },
  {
    "label": "RemoveMountPointDefaultPackageFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveMountPointDefaultPackageFlags(const TArrayView<FString> InMountPoints)"
  },
  {
    "label": "CreatePackage()",
    "kind": "Method",
    "detail": "Function (# endif UPackage*)",
    "insertText": "CreatePackage(const TCHAR* PackageName)"
  },
  {
    "label": "GlobalSetProperty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalSetProperty(const TCHAR* Value, UClass* Class, FProperty* Property, bool bNotifyObjectOfChange)"
  },
  {
    "label": "SaveToTransactionBuffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SaveToTransactionBuffer(UObject* Object, bool bMarkDirty)"
  },
  {
    "label": "SnapshotTransactionBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapshotTransactionBuffer(UObject* Object)"
  },
  {
    "label": "SnapshotTransactionBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SnapshotTransactionBuffer(UObject* Object, TArrayView<const FProperty*> Properties)"
  },
  {
    "label": "FScopedAllowAbstractClassAllocation()",
    "kind": "Method",
    "detail": "Function (struct FScopedAllowAbstractClassAllocation : public FNoncopyable {)",
    "insertText": "FScopedAllowAbstractClassAllocation()"
  },
  {
    "label": "IsDisallowedAbstractClass()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDisallowedAbstractClass(const UClass* InClass, EObjectFlags InFlags)"
  },
  {
    "label": "StaticAllocateObjectErrorTests()",
    "kind": "Method",
    "detail": "Function (private : int32 AllowAbstractCount ; } ; bool)",
    "insertText": "StaticAllocateObjectErrorTests(const UClass* Class, UObject* InOuter, FName Name, EObjectFlags SetFlags)"
  },
  {
    "label": "StaticAllocateObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "StaticAllocateObject(const UClass* Class, UObject* InOuter, FName Name, EObjectFlags SetFlags, EInternalObjectFlags InternalSetFlags = EInternalObjectFlags::None, bool bCanReuseSubobjects = false, bool* bOutReusedSubobject = nullptr, UPackage* ExternalPackage = nullptr)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (enum class EObjectInitializerOptions { None = 0,CopyTransientsFromClassDefaults = 1<<0,InitializeProperties = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EObjectInitializerOptions)"
  },
  {
    "label": "FObjectInitializer()",
    "kind": "Method",
    "detail": "Function (class FObjectInitializer { public :)",
    "insertText": "FObjectInitializer()"
  },
  {
    "label": "FObjectInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FObjectInitializer(UObject* InObj, UObject* InObjectArchetype, EObjectInitializerOptions InOptions, struct FObjectInstancingGraph* InInstanceGraph = nullptr)"
  },
  {
    "label": "FObjectInitializer()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FObjectInitializer(UObject* InObj, const FStaticConstructObjectParameters& StaticConstructParams)"
  },
  {
    "label": "Construct_Internal()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Construct_Internal()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (PropertyPostInitCallbacks .)",
    "insertText": "Add(MoveTemp(Callback))"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (} UClass*)",
    "insertText": "GetClass()"
  },
  {
    "label": "CreateDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (template<class TReturnType> TReturnType*)",
    "insertText": "CreateDefaultSubobject(UObject* Outer, FName SubobjectName, bool bTransient = false)"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (UClass* ReturnType =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "CreateOptionalDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (} template<class TReturnType> TReturnType*)",
    "insertText": "CreateOptionalDefaultSubobject(UObject* Outer, FName SubobjectName, bool bTransient = false)"
  },
  {
    "label": "CreateEditorOnlyDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (} template<class TReturnType> TReturnType*)",
    "insertText": "CreateEditorOnlyDefaultSubobject(UObject* Outer, FName SubobjectName, bool bTransient = false)"
  },
  {
    "label": "CreateEditorOnlyDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (} UObject*)",
    "insertText": "CreateEditorOnlyDefaultSubobject(UObject* Outer, FName SubobjectName, const UClass* ReturnType, bool bTransient = false)"
  },
  {
    "label": "CreateDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "CreateDefaultSubobject(UObject* Outer, FName SubobjectFName, const UClass* ReturnType, const UClass* ClassToCreateByDefault, bool bIsRequired = true, bool bIsTransient = false)"
  },
  {
    "label": "SetDefaultSubobjectClass()",
    "kind": "Method",
    "detail": "Function (const FObjectInitializer&)",
    "insertText": "SetDefaultSubobjectClass(FName SubobjectName, const UClass* Class)"
  },
  {
    "label": "AssertIfSubobjectSetupIsNotAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertIfSubobjectSetupIsNotAllowed(SubobjectName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SubobjectOverrides .)",
    "insertText": "Add(SubobjectName, Class)"
  },
  {
    "label": "DoNotCreateDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (} const FObjectInitializer&)",
    "insertText": "DoNotCreateDefaultSubobject(FName SubobjectName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SubobjectOverrides .)",
    "insertText": "Add(SubobjectName, nullptr)"
  },
  {
    "label": "AssertIfSubobjectSetupIsNotAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertIfSubobjectSetupIsNotAllowed(SubobjectNames)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SubobjectOverrides .)",
    "insertText": "Add(SubobjectNames, Class)"
  },
  {
    "label": "SetNestedDefaultSubobjectClass()",
    "kind": "Method",
    "detail": "Function (} template<class T> const FObjectInitializer&)",
    "insertText": "SetNestedDefaultSubobjectClass(TArrayView<const FName> SubobjectNames)"
  },
  {
    "label": "DoNotCreateNestedDefaultSubobject()",
    "kind": "Method",
    "detail": "Function (} const FObjectInitializer&)",
    "insertText": "DoNotCreateNestedDefaultSubobject(FStringView SubobjectName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SubobjectOverrides .)",
    "insertText": "Add(SubobjectNames, nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (bSubobjectClassInitializationAllowed = false ; } FObjectInitializer&)",
    "insertText": "Get()"
  },
  {
    "label": "InternalConstructor()",
    "kind": "Method",
    "detail": "Function (private : class UObject ; class FScriptIntegrationObjectHelper ; template<class T> void)",
    "insertText": "InternalConstructor(const class FObjectInitializer& X)"
  },
  {
    "label": "InitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitProperties(UObject* Obj, UClass* DefaultsClass, UObject* DefaultData, bool bCopyTransientsFromClassDefaults)"
  },
  {
    "label": "IsInstancingAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInstancingAllowed()"
  },
  {
    "label": "InitSubobjectProperties()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitSubobjectProperties(bool bAllowInstancing)"
  },
  {
    "label": "InstanceSubobjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InstanceSubobjects(UClass* Class, bool bNeedInstancing, bool bNeedSubobjectInstancing)"
  },
  {
    "label": "InitNonNativeProperty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitNonNativeProperty(FProperty* Property, UObject* Data)"
  },
  {
    "label": "PostConstructInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostConstructInit()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (private : struct FOverrides { void)",
    "insertText": "Add(FName InComponentName, const UClass* InComponentClass, const TArrayView<const FName>* FullPath = nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FStringView InComponentPath, const UClass* InComponentClass)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(TArrayView<const FName> InComponentPath, const UClass* InComponentClass, const TArrayView<const FName>* FullPath = nullptr)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (struct FOverrideDetails { const UClass* Class = nullptr ; FOverrides* SubOverrides = nullptr ; } ; FOverrideDetails)",
    "insertText": "Get(FName InComponentName, const UClass* ReturnType, const UClass* ClassToConstructByDefault, bool bOptional)"
  },
  {
    "label": "IsLegalOverride()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsLegalOverride(const UClass* DerivedComponentClass, const UClass* BaseComponentClass)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Find(FName InComponentName)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FOverride&)",
    "insertText": "operator(const FOverride& Other)"
  },
  {
    "label": "SubOverrides()",
    "kind": "Method",
    "detail": "Function (ComponentName = Other . ComponentName ; ComponentClass = Other . ComponentClass ;)",
    "insertText": "SubOverrides(Other.SubOverrides ? MakeUnique<FOverrides>(*Other.SubOverrides) : nullptr)"
  },
  {
    "label": "FOverride()",
    "kind": "Method",
    "detail": "Function (bDoNotCreate = Other . bDoNotCreate ; return* this ; })",
    "insertText": "FOverride(const FOverride& Other)"
  },
  {
    "label": "FOverride()",
    "kind": "Method",
    "detail": "Function (* this = Other ; })",
    "insertText": "FOverride(FOverride&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FOverride&)",
    "insertText": "operator(FOverride&&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ; TArray<FOverride,TInlineAllocator<8>> Overrides ; } ; struct FSubobjectsToInit { void)",
    "insertText": "Add(UObject* Subobject, UObject* Template)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (} SubobjectInits .)",
    "insertText": "Emplace(Subobject, Template)"
  },
  {
    "label": "FSubobjectInit()",
    "kind": "Method",
    "detail": "Function (} struct FSubobjectInit { UObject* Subobject ; UObject* Template ;)",
    "insertText": "FSubobjectInit(UObject* InSubobject, UObject* InTemplate) : Subobject(InSubobject) , Template(InTemplate)"
  },
  {
    "label": "AssertIfSubobjectSetupIsNotAllowed()",
    "kind": "Method",
    "detail": "Function (} } ; TArray<FSubobjectInit,TInlineAllocator<8>> SubobjectInits ; } ; void)",
    "insertText": "AssertIfSubobjectSetupIsNotAllowed(const FName SubobjectName)"
  },
  {
    "label": "AssertIfSubobjectSetupIsNotAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertIfSubobjectSetupIsNotAllowed(FStringView SubobjectName)"
  },
  {
    "label": "AssertIfSubobjectSetupIsNotAllowed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertIfSubobjectSetupIsNotAllowed(TArrayView<const FName> SubobjectNames)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (UObject* Obj ; UObject* ObjectArchetype ; bool bCopyTransientsFromClassDefaults ; bool bShouldInitializePropsFromArchetype ; bool bSubobjectClassInitializationAllowed = true ; # if USE_CIRCULAR_DEPENDENCY_LOAD_DEFERRING bool bIsDeferredInitializer = false ; # endif struct FObjectInstancingGraph* InstanceGraph ; FOverrides SubobjectOverrides ; FSubobjectsToInit ComponentInits ; # if ! UE_BUILD_SHIPPING TArray<FName,TInlineAllocator<8>> ConstructedSubobjects ; # endif UObject* LastConstructedObject = nullptr ; TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "OnGCObjectCreated()",
    "kind": "Method",
    "detail": "Function (struct FStaticConstructObjectParameters ; # if WITH_EDITORONLY_DATA void)",
    "insertText": "OnGCObjectCreated(FGCObject* InObject)"
  },
  {
    "label": "FStaticConstructObjectParameters()",
    "kind": "Method",
    "detail": "Function (private : FObjectInitializer::FOverrides* SubobjectOverrides = nullptr ; public :)",
    "insertText": "FStaticConstructObjectParameters(const UClass* InClass)"
  },
  {
    "label": "InitProperties()",
    "kind": "Method",
    "detail": "Function (FObjectInitializer ; } ; class FScriptIntegrationObjectHelper { public : void)",
    "insertText": "InitProperties(const FObjectInitializer& ObjectInitializer, UObject* Obj, UClass* DefaultsClass, UObject* DefaultData)"
  },
  {
    "label": "InitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitProperties(Obj, DefaultsClass, DefaultData, ObjectInitializer.bCopyTransientsFromClassDefaults)"
  },
  {
    "label": "InitSubobjectProperties()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "InitSubobjectProperties(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "InstanceSubobjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InstanceSubobjects(const FObjectInitializer& ObjectInitializer, UClass* Class, bool bNeedInstancing, bool bNeedSubobjectInstancing)"
  },
  {
    "label": "InstanceSubobjects()",
    "kind": "Method",
    "detail": "Function (ObjectInitializer .)",
    "insertText": "InstanceSubobjects(Class, bNeedInstancing, bNeedSubobjectInstancing)"
  },
  {
    "label": "PostConstructInitObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostConstructInitObject(FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "CheckIsClassChildOf_Internal()",
    "kind": "Method",
    "detail": "Function (} } ; # if DO_CHECK void)",
    "insertText": "CheckIsClassChildOf_Internal(const UClass* Parent, const UClass* Child)"
  },
  {
    "label": "NewObject()",
    "kind": "Method",
    "detail": "Function (# endif template<class T> FUNCTION_NON_NULL_RETURN_START T*)",
    "insertText": "NewObject(UObject* Outer, const UClass* Class, FName Name = NAME_None, EObjectFlags Flags = RF_NoFlags, UObject* Template = nullptr, bool bCopyTransientsFromClassDefaults = false, FObjectInstancingGraph* InInstanceGraph = nullptr, UPackage* ExternalPackage = nullptr)"
  },
  {
    "label": "AssertIfInConstructor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssertIfInConstructor(Outer, TEXT(\"NewObject with empty name can't be used to create default subobjects (inside of UObject derived class constructor) as it produces inconsistent object names. Use ObjectInitializer.CreateDefaultSubobject<> instead.\"))"
  },
  {
    "label": "CheckIsClassChildOf_Internal()",
    "kind": "Method",
    "detail": "Function (} # if DO_CHECK)",
    "insertText": "CheckIsClassChildOf_Internal(T::StaticClass(), Class)"
  },
  {
    "label": "Params()",
    "kind": "Method",
    "detail": "Function (# endif FStaticConstructObjectParameters)",
    "insertText": "Params(Class)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (Params . Outer = Outer ; Params . Name = Name ; Params . SetFlags = Flags ; Params . Template = Template ; Params . bCopyTransientsFromClassDefaults = bCopyTransientsFromClassDefaults ; Params . InstanceGraph = InInstanceGraph ; Params . ExternalPackage = ExternalPackage ; T* Result = static_cast<)",
    "insertText": "T(StaticConstructObject_Internal(Params))"
  },
  {
    "label": "Params()",
    "kind": "Method",
    "detail": "Function (FStaticConstructObjectParameters)",
    "insertText": "Params(T::StaticClass())"
  },
  {
    "label": "DuplicateObject()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "DuplicateObject(T const* SourceObject,UObject* Outer, const FName Name = NAME_None)"
  },
  {
    "label": "DuplicateObject()",
    "kind": "Method",
    "detail": "Function (} template<T> T*)",
    "insertText": "DuplicateObject(const TObjectPtr<T>& SourceObject,UObject* Outer, const FName Name = NAME_None)"
  },
  {
    "label": "UsesPerObjectConfig()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UsesPerObjectConfig(UObject* SourceObject)"
  },
  {
    "label": "GetConfigFilename()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetConfigFilename(UObject* SourceObject)"
  },
  {
    "label": "ParseObject()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "ParseObject(const TCHAR* Stream, const TCHAR* Match, T*& Obj, UObject* Outer, EParseObjectLoadingPolicy LoadingPolicy, bool* bInvalidObject=nullptr)"
  },
  {
    "label": "ParseObject()",
    "kind": "Method",
    "detail": "Function (} template<class T> bool)",
    "insertText": "ParseObject(const TCHAR* Stream, const TCHAR* Match, T*& Obj, UObject* Outer, bool* bInvalidObject=nullptr)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "return(T*)StaticFindObjectFast( T::StaticClass(), Outer, Name, ExactClass, AnyPackage, ExclusiveFlags)"
  },
  {
    "label": "FindObjectFast()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS } template<class T> T*)",
    "insertText": "FindObjectFast(UObject* Outer, FName Name, bool ExactClass = false, EObjectFlags ExclusiveFlags = RF_NoFlags)"
  },
  {
    "label": "FindObject()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindObject(UObject* Outer, const TCHAR* Name, bool ExactClass=false)"
  },
  {
    "label": "FindObject()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindObject(FTopLevelAssetPath InPath, bool ExactClass = false)"
  },
  {
    "label": "FindObjectChecked()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindObjectChecked(UObject* Outer, const TCHAR* Name, bool ExactClass=false)"
  },
  {
    "label": "FindObjectSafe()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindObjectSafe(UObject* Outer, const TCHAR* Name, bool ExactClass=false)"
  },
  {
    "label": "FindObjectSafe()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindObjectSafe(FTopLevelAssetPath InPath, bool ExactClass = false)"
  },
  {
    "label": "FindFirstObject()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindFirstObject(const TCHAR* Name, EFindFirstObjectOptions Options = EFindFirstObjectOptions::None, ELogVerbosity::Type AmbiguousMessageVerbosity = ELogVerbosity::NoLogging, const TCHAR* CurrentOperation = nullptr)"
  },
  {
    "label": "FindFirstObjectSafe()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "FindFirstObjectSafe(const TCHAR* Name, EFindFirstObjectOptions Options = EFindFirstObjectOptions::None, ELogVerbosity::Type AmbiguousMessageVerbosity = ELogVerbosity::NoLogging, const TCHAR* CurrentOperation = nullptr)"
  },
  {
    "label": "LoadObject()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "LoadObject(UObject* Outer, const TCHAR* Name, const TCHAR* Filename=nullptr, uint32 LoadFlags=LOAD_None, UPackageMap* Sandbox=nullptr, const FLinkerInstancingContext* InstancingContext=nullptr)"
  },
  {
    "label": "LoadClass()",
    "kind": "Method",
    "detail": "Function (} template<class T> UClass*)",
    "insertText": "LoadClass(UObject* Outer, const TCHAR* Name, const TCHAR* Filename=nullptr, uint32 LoadFlags=LOAD_None, UPackageMap* Sandbox=nullptr)"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T*)",
    "insertText": "GetDefault()"
  },
  {
    "label": "GetDefault()",
    "kind": "Method",
    "detail": "Function (} template<class T> const T*)",
    "insertText": "GetDefault(UClass *Class)"
  },
  {
    "label": "GetMutableDefault()",
    "kind": "Method",
    "detail": "Function (template<class T> T*)",
    "insertText": "GetMutableDefault()"
  },
  {
    "label": "GetMutableDefault()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "GetMutableDefault(UClass *Class)"
  },
  {
    "label": "IsClassLoaded()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "IsClassLoaded()"
  },
  {
    "label": "FindDelegateSignature()",
    "kind": "Method",
    "detail": "Function (} UFunction*)",
    "insertText": "FindDelegateSignature(FName DelegateSignatureName)"
  },
  {
    "label": "ContainsObjectOfClass()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "ContainsObjectOfClass(const TArray<T*>& ObjectArray, UClass* ClassToCheck, bool bExactClass=false, TArray<T*>* out_Objects=nullptr)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bResult = false ;)",
    "insertText": "for(int32 ArrayIndex = 0; ArrayIndex < ObjectArray.Num(); ArrayIndex++)"
  },
  {
    "label": "GetClass()",
    "kind": "Method",
    "detail": "Function (bool bMatchesSearchCriteria = bExactClass ? ObjectArray [ ArrayIndex ] ->)",
    "insertText": "GetClass() == ClassToCheck : ObjectArray[ArrayIndex]->IsA(ClassToCheck)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bResult = true ;)",
    "insertText": "if(out_Objects != nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (out_Objects ->)",
    "insertText": "Add(ObjectArray[ArrayIndex])"
  },
  {
    "label": "FStoredObjectFlags()",
    "kind": "Method",
    "detail": "Function (} else { break ; } } } } return bResult ; } class FScopedObjectFlagMarker { struct FStoredObjectFlags {)",
    "insertText": "FStoredObjectFlags() : Flags(RF_NoFlags) , InternalFlags(EInternalObjectFlags::None)"
  },
  {
    "label": "FStoredObjectFlags()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStoredObjectFlags(EObjectFlags InFlags, EInternalObjectFlags InInternalFlags) : Flags(InFlags) , InternalFlags(InInternalFlags)"
  },
  {
    "label": "SaveObjectFlags()",
    "kind": "Method",
    "detail": "Function (} EObjectFlags Flags ; EInternalObjectFlags InternalFlags ; } ; TMap<UObject*,FStoredObjectFlags> StoredObjectFlags ; void)",
    "insertText": "SaveObjectFlags()"
  },
  {
    "label": "RestoreObjectFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreObjectFlags()"
  },
  {
    "label": "FScopedObjectFlagMarker()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FScopedObjectFlagMarker()"
  },
  {
    "label": "TObjectArrayIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class TObjectClass> class TObjectArrayIterator { public :)",
    "insertText": "TObjectArrayIterator(TArray<TObjectClass*>& InArray, UClass* InClassToCheck = nullptr, bool InbExactClass = false) : Array(InArray), Index(-1), ClassToCheck(InClassToCheck), bExactClass(InbExactClass)"
  },
  {
    "label": "Advance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Advance()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(Index--)"
  },
  {
    "label": "RemoveCurrentSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCurrentSwap()"
  },
  {
    "label": "RemoveSwap()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveSwap(Index--)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (} protected : TObjectClass*)",
    "insertText": "GetObject()"
  },
  {
    "label": "SetSerializingObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSerializingObject(const UObject* InSerializingObject)"
  },
  {
    "label": "GetSerializingObject()",
    "kind": "Method",
    "detail": "Function (SerializingObject = InSerializingObject ; } const UObject*)",
    "insertText": "GetSerializingObject()"
  },
  {
    "label": "GetSerializedDataContainer()",
    "kind": "Method",
    "detail": "Function (SerializedDataContainer = InDataContainer ; } const UObject*)",
    "insertText": "GetSerializedDataContainer()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FObjectPtr& Object)"
  },
  {
    "label": "FVerySlowReferenceCollectorArchiveScope()",
    "kind": "Method",
    "detail": "Function (} ; class FVerySlowReferenceCollectorArchiveScope { FReferenceCollectorArchive& Archive ; const UObject* OldSerializingObject ; FProperty* OldSerializedProperty ; const UObject* OldSerializedDataContainer ; public :)",
    "insertText": "FVerySlowReferenceCollectorArchiveScope(FReferenceCollectorArchive& InArchive, const UObject* InSerializingObject, FProperty* InSerializedProperty = nullptr, const UObject* InSerializedDataContainer = nullptr) : Archive(InArchive) , OldSerializingObject(InArchive.GetSerializingObject()) , OldSerializedProperty(InArchive.GetSerializedProperty()) , OldSerializedDataContainer(InArchive.GetSerializedDataContainer())"
  },
  {
    "label": "SetSerializingObject()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetSerializingObject(InSerializingObject)"
  },
  {
    "label": "SetSerializedProperty()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetSerializedProperty(InSerializedProperty)"
  },
  {
    "label": "SetSerializedDataContainer()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetSerializedDataContainer(InSerializedDataContainer)"
  },
  {
    "label": "FVerySlowReferenceCollectorArchiveScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FVerySlowReferenceCollectorArchiveScope()"
  },
  {
    "label": "SetSerializingObject()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetSerializingObject(OldSerializingObject)"
  },
  {
    "label": "SetSerializedProperty()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetSerializedProperty(OldSerializedProperty)"
  },
  {
    "label": "SetSerializedDataContainer()",
    "kind": "Method",
    "detail": "Function (Archive .)",
    "insertText": "SetSerializedDataContainer(OldSerializedDataContainer)"
  },
  {
    "label": "GetArchive()",
    "kind": "Method",
    "detail": "Function (} FReferenceCollectorArchive&)",
    "insertText": "GetArchive()"
  },
  {
    "label": "AddStableReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReference(TObjectPtr<UObject>* Object)"
  },
  {
    "label": "AddStableReferenceArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceArray(TArray<TObjectPtr<UObject>>* Objects)"
  },
  {
    "label": "AddStableReferenceSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceSet(TSet<TObjectPtr<UObject>>* Objects)"
  },
  {
    "label": "AddStableReferenceMap()",
    "kind": "Method",
    "detail": "Function (template<KeyType,ValueType,Allocator,KeyFuncs> void)",
    "insertText": "AddStableReferenceMap(TMapBase<KeyType, ValueType, Allocator, KeyFuncs>& Map)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# if UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR bool bKeyReference = TIsTObjectPtr<KeyType>::Value ; bool bValueReference = TIsTObjectPtr<ValueType>::Value ;)",
    "insertText": "static_assert(bKeyReference || bValueReference)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# else bool bKeyReference = std::is_convertible_v<KeyType,const UObjectBase*> ; bool bValueReference = std::is_convertible_v<ValueType,const UObjectBase*> ;)",
    "insertText": "static_assert(bKeyReference || bValueReference, \"Key or value must be pointer to fully-defined UObject type\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "for(TPair<KeyType, ValueType>& Pair : Map)"
  },
  {
    "label": "AddStableReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReference(&Pair.Key)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} if)",
    "insertText": "constexpr(bValueReference)"
  },
  {
    "label": "AddStableReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReference(&Pair.Value)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() COREUOBJECT_API virtual void AddStableReference(UObject** Object)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() COREUOBJECT_API virtual void AddStableReferenceArray(TArray<UObject*>* Objects)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() COREUOBJECT_API virtual void AddStableReferenceSet(TSet<UObject*>* Objects)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() FORCEINLINE void AddStableReference(UObjectType** Object)"
  },
  {
    "label": "AddStableReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReference(reinterpret_cast<UObject**>(Object))"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() FORCEINLINE void AddStableReferenceArray(TArray<UObjectType*>* Objects)"
  },
  {
    "label": "AddStableReferenceArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceArray(reinterpret_cast<TArray<UObject*>*>(Objects))"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() FORCEINLINE void AddStableReferenceSet(TSet<UObjectType*>* Objects)"
  },
  {
    "label": "AddStableReferenceSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceSet(reinterpret_cast<TSet<UObject*>*>(Objects))"
  },
  {
    "label": "AddStableReference()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddStableReference(TObjectPtr<UObjectType>* Object)"
  },
  {
    "label": "AddStableReferenceFwd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceFwd(reinterpret_cast<FObjectPtr*>(Object))"
  },
  {
    "label": "AddStableReferenceArray()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddStableReferenceArray(TArray<TObjectPtr<UObjectType>>* Objects)"
  },
  {
    "label": "AddStableReferenceArrayFwd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceArrayFwd(reinterpret_cast<TArray<FObjectPtr>*>(Objects))"
  },
  {
    "label": "AddStableReferenceSet()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddStableReferenceSet(TSet<TObjectPtr<UObjectType>>* Objects)"
  },
  {
    "label": "AddStableReferenceSetFwd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceSetFwd(reinterpret_cast<TSet<FObjectPtr>*>(Objects))"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObject(UObjectType*& Object, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "UObjectType()",
    "kind": "Method",
    "detail": "Function (AROPrivate::AddReferencedObject<)",
    "insertText": "UObjectType(*this, Object, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObject(const UObjectType*& Object, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObjects(TArray<UObjectType*>& ObjectArray, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "UObjectType()",
    "kind": "Method",
    "detail": "Function (AROPrivate::AddReferencedObjects<)",
    "insertText": "UObjectType(*this, ObjectArray, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObjects(TArray<const UObjectType*>& ObjectArray, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObjects(TSet<UObjectType*>& ObjectSet, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "UObjectType()",
    "kind": "Method",
    "detail": "Function (AROPrivate::AddReferencedObjects<)",
    "insertText": "UObjectType(*this, ObjectSet, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<KeyType,ValueType,Allocator,KeyFuncs>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObjects(TMapBase<KeyType*, ValueType, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "KeyFuncs()",
    "kind": "Method",
    "detail": "Function (AROPrivate::AddReferencedObjects<KeyType,ValueType,Allocator,)",
    "insertText": "KeyFuncs(*this, Map, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<KeyType,ValueType,Allocator,KeyFuncs>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObjects(TMapBase<KeyType, ValueType*, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (} template<KeyType,ValueType,Allocator,KeyFuncs>)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() void AddReferencedObjects(TMapBase<KeyType*, ValueType*, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddReferencedObject(TObjectPtr<UObjectType>& Object, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectReference(*reinterpret_cast<UObject**>(&Object), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (} } template<class UObjectType> void)",
    "insertText": "AddReferencedObject(TObjectPtr<const UObjectType>& Object, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__) template<class VCellType> void AddReferencedVerseValue(Verse::TWriteBarrier<VCellType>& Value, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (# endif template<class UObjectType> void)",
    "insertText": "AddReferencedObjects(TArray<TObjectPtr<UObjectType>>& ObjectArray, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectReferences((FObjectPtr*)(ObjectArray.GetData()), ObjectArray.Num(), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddReferencedObjects(TArray<TObjectPtr<const UObjectType>>& ObjectArray, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddReferencedObjects(TSet<TObjectPtr<UObjectType>>& ObjectSet, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } } template<KeyType,ValueType,Allocator,KeyFuncs> void)",
    "insertText": "AddReferencedObjects(TMapBase<TObjectPtr<KeyType>, ValueType, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectReference(*reinterpret_cast<UObject**>(&It.Key), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } } template<KeyType,ValueType,Allocator,KeyFuncs> void)",
    "insertText": "AddReferencedObjects(TMapBase<KeyType, TObjectPtr<ValueType>, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectReference(*reinterpret_cast<UObject**>(&It.Value), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } } template<KeyType,ValueType,Allocator,KeyFuncs> void)",
    "insertText": "AddReferencedObjects(TMapBase<TObjectPtr<KeyType>, TObjectPtr<ValueType>, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(It.Value.IsResolved())"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (} } } template<T> void)",
    "insertText": "AddReferencedObject(TWeakObjectPtr<T>& P, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObject(reinterpret_cast<FWeakObjectPtr&>(P), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObject(FWeakObjectPtr& P, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_REFERENCE_COLLECTOR_REQUIRE_OBJECTPTR_DEPRECATED() COREUOBJECT_API void AddReferencedObjects(const UScriptStruct*& ScriptStruct, void* Instance, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(TObjectPtr<const UScriptStruct>& ScriptStruct, void* Instance, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(TWeakObjectPtr<const UScriptStruct>& ScriptStruct, void* Instance, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddPropertyReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPropertyReferences(const UStruct* Struct, void* Instance, const UObject* ReferencingObject = nullptr)"
  },
  {
    "label": "AddPropertyReferencesWithStructARO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPropertyReferencesWithStructARO(const UScriptStruct* Struct, void* Instance, const UObject* ReferencingObject = nullptr)"
  },
  {
    "label": "AddPropertyReferencesWithStructARO()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPropertyReferencesWithStructARO(const UClass* Class, void* Instance, const UObject* ReferencingObject = nullptr)"
  },
  {
    "label": "AddPropertyReferencesLimitedToObjectProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPropertyReferencesLimitedToObjectProperties(const UStruct* Struct, void* Instance, const UObject* ReferencingObject = nullptr)"
  },
  {
    "label": "NeedsPropertyReferencer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsPropertyReferencer()"
  },
  {
    "label": "IsIgnoringTransient()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIgnoringTransient()"
  },
  {
    "label": "AllowEliminatingReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AllowEliminatingReferences(bool bAllow)"
  },
  {
    "label": "SetSerializedProperty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSerializedProperty(class FProperty* Inproperty)"
  },
  {
    "label": "GetSerializedProperty()",
    "kind": "Method",
    "detail": "Function (} class FProperty*)",
    "insertText": "GetSerializedProperty()"
  },
  {
    "label": "IsProcessingNativeReferences()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsProcessingNativeReferences()"
  },
  {
    "label": "CreateVerySlowReferenceCollectorArchive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVerySlowReferenceCollectorArchive()"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (} return* DefaultReferenceCollectorArchive ; } struct AROPrivate final { template<class UObjectType> void)",
    "insertText": "AddReferencedObject(FReferenceCollector& Coll, UObjectType*& Object, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (Coll .)",
    "insertText": "HandleObjectReference(*(UObject**)&Object, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObject()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddReferencedObject(FReferenceCollector& Coll, const UObjectType*& Object, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (Coll .)",
    "insertText": "HandleObjectReference(*(UObject**)const_cast<UObjectType**>(&Object), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Coll, TArray<UObjectType*>& ObjectArray, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReferences()",
    "kind": "Method",
    "detail": "Function (Coll .)",
    "insertText": "HandleObjectReferences(reinterpret_cast<UObject**>(ObjectArray.GetData()), ObjectArray.Num(), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Coll, TArray<const UObjectType*>& ObjectArray, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReferences()",
    "kind": "Method",
    "detail": "Function (Coll .)",
    "insertText": "HandleObjectReferences(reinterpret_cast<UObject**>(const_cast<UObjectType**>(ObjectArray.GetData())), ObjectArray.Num(), ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} template<class UObjectType> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Coll, TSet<UObjectType*>& ObjectSet, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } template<KeyType,ValueType,Allocator,KeyFuncs> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Coll, TMapBase<KeyType*, ValueType, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (Coll .)",
    "insertText": "HandleObjectReference(*(UObject**)&It.Key, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } template<KeyType,ValueType,Allocator,KeyFuncs> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Coll, TMapBase<KeyType, ValueType*, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (Coll .)",
    "insertText": "HandleObjectReference(*(UObject**)&It.Value, ReferencingObject, ReferencingProperty)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } template<KeyType,ValueType,Allocator,KeyFuncs> void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Coll, TMapBase<KeyType*, ValueType*, Allocator, KeyFuncs>& Map, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Coll, const UScriptStruct*& ScriptStruct, void* Instance, const UObject* ReferencingObject = nullptr, const FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (} ; protected : void)",
    "insertText": "HandleObjectReference(UObject*& InObject, const UObject* InReferencingObject, const FProperty* InReferencingProperty)"
  },
  {
    "label": "HandleObjectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectReferences(UObject** InObjects, const int32 ObjectNum, const UObject* InReferencingObject, const FProperty* InReferencingProperty)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (UObject*& Object = InObjects [ ObjectIndex ] ;)",
    "insertText": "HandleObjectReference(Object, InReferencingObject, InReferencingProperty)"
  },
  {
    "label": "HandleObjectReferences()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "HandleObjectReferences(FObjectPtr* InObjects, const int32 ObjectNum, const UObject* InReferencingObject, const FProperty* InReferencingProperty)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if WITH_VERSE_VM | |)",
    "insertText": "defined(__INTELLISENSE__) virtual void HandleVCellReference(Verse::VCell* InCell, const UObject* InReferencingObject, const FProperty* InReferencingProperty)"
  },
  {
    "label": "AddStableReferenceSetFwd()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FReferenceCollectorArchive> DefaultReferenceCollectorArchive ; void)",
    "insertText": "AddStableReferenceSetFwd(TSet<FObjectPtr>* Objects)"
  },
  {
    "label": "AddStableReferenceArrayFwd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceArrayFwd(TArray<FObjectPtr>* Objects)"
  },
  {
    "label": "AddStableReferenceFwd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStableReferenceFwd(FObjectPtr* Object)"
  },
  {
    "label": "FReferenceFinder()",
    "kind": "Method",
    "detail": "Function (} ; class FReferenceFinder : public FReferenceCollector { public :)",
    "insertText": "FReferenceFinder(TArray<UObject*>& InObjectArray, UObject* InOuter = nullptr, bool bInRequireDirectOuter = true, bool bInShouldIgnoreArchetype = false, bool bInSerializeRecursively = false, bool bInShouldIgnoreTransient = false)"
  },
  {
    "label": "FReferenceFinder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FReferenceFinder()"
  },
  {
    "label": "FindReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindReferences(UObject* Object, UObject* ReferencingObject = nullptr, FProperty* ReferencingProperty = nullptr)"
  },
  {
    "label": "HandleObjectReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleObjectReference(UObject*& Object, const UObject* ReferencingObject, const FProperty* InReferencingProperty)"
  },
  {
    "label": "IsIgnoringArchetypeRef()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIgnoringArchetypeRef()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (None,HotReloadAutomatic,HotReloadManual,} ; struct FEndLoadPackageContext { TConstArrayView<UPackage*> LoadedPackages ; int32 RecursiveDepth ; bool bSynchronous ; } ; enum class ECompiledInUObjectsRegisteredStatus { Delayed,PreCDO,PostCDO,} ; struct FCoreUObjectDelegates { # if WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnObjectPropertyChanged, UObject*, struct FPropertyChangedEvent&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnObjectPropertyChanged OnObjectPropertyChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnPreObjectPropertyChanged, UObject*, const class FEditPropertyChain&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnPreObjectPropertyChanged OnPreObjectPropertyChanged ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnObjectModified, UObject*)"
  },
  {
    "label": "BroadcastOnObjectModified()",
    "kind": "Method",
    "detail": "Function (FOnObjectModified OnObjectModified ; TSet<UObject*> ObjectsModifiedThisFrame ; void)",
    "insertText": "BroadcastOnObjectModified(UObject* Object)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ObjectsModifiedThisFrame .)",
    "insertText": "Add(Object)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnObjectModified .)",
    "insertText": "Broadcast(Object)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnObjectTransacted, UObject*, const class FTransactionObjectEvent&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnObjectTransacted OnObjectTransacted ; using FReplacementObjectMap = TMap<UObject*,UObject*> ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnObjectsReplaced, const FReplacementObjectMap&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnObjectsReplaced OnObjectsReplaced ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnObjectsReinstanced, const FReplacementObjectMap&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnObjectsReinstanced OnObjectsReinstanced ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnObjectPostCDOCompiled, UObject*, const FObjectPostCDOCompiledContext&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnObjectPostCDOCompiled OnObjectPostCDOCompiled ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnObjectSaved, UObject*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnObjectPreSave, UObject*, FObjectPreSaveContext)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnObjectPreSave OnObjectPreSave ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAssetLoaded, UObject*)"
  },
  {
    "label": "DECLARE_TS_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnAssetLoaded OnAssetLoaded ;)",
    "insertText": "DECLARE_TS_MULTICAST_DELEGATE_OneParam(FOnObjectConstructed, UObject*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnObjectConstructed OnObjectConstructed ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnEndLoadPackage, const FEndLoadPackageContext&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnEndLoadPackage OnEndLoadPackage ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FAutoPackageBackupDelegate, const UPackage&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnPostInitSparseClassData, UClass*, UScriptStruct*, void*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FOnPostInitSparseClassData OnPostInitSparseClassData ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnPackageReloaded, EPackageReloadPhase, FPackageReloadedEvent*)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnPackageReloaded OnPackageReloaded ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FNetworkFileRequestPackageReload, const TArray<FString>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (FNetworkFileRequestPackageReload NetworkFileRequestPackageReload ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(bool, FIsPackageOKToSaveDelegate, UPackage*, const FString&, FOutputDevice*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FIsPackageOKToSaveDelegate IsPackageOKToSaveDelegate ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FReloadAddedClassesDelegate, const TArray<UClass*>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FReloadAddedClassesDelegate ReloadAddedClassesDelegate ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FReloadReinstancingCompleteDelegate)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FReloadReinstancingCompleteDelegate ReloadReinstancingCompleteDelegate ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FReloadCompleteDelegate, EReloadCompleteReason)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FReloadCompleteDelegate ReloadCompleteDelegate ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FRegisterHotReloadAddedClassesDelegate, const TArray<UClass*>&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FRegisterClassForHotReloadReinstancingDelegate, UClass*, UClass*, EHotReloadedClassFlags)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FReinstanceHotReloadedClassesDelegate)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FCompiledInUObjectsRegisteredDelegate, FName , ECompiledInUObjectsRegisteredStatus Status)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FCompiledInUObjectsRegisteredDelegate CompiledInUObjectsRegisteredDelegate ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPreLoadMapDelegate, const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (FPreLoadMapDelegate PreLoadMap ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FPreLoadMapWithContextDelegate, const FWorldContext& , const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FPreLoadMapWithContextDelegate PreLoadMapWithContext ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPostLoadMapDelegate, UWorld*)"
  },
  {
    "label": "GetPreGarbageCollectDelegate()",
    "kind": "Method",
    "detail": "Function (FPostLoadMapDelegate PostLoadMapWithWorld ; FSimpleMulticastDelegate PostDemoPlay ; FSimpleMulticastDelegate&)",
    "insertText": "GetPreGarbageCollectDelegate()"
  },
  {
    "label": "GetGarbageCollectStartedDelegate()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "GetGarbageCollectStartedDelegate()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FTraceExternalRootsForReachabilityAnalysisDelegate, FGarbageCollectionTracer&, EObjectFlags, bool)"
  },
  {
    "label": "GetPostGarbageCollect()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate PostReachabilityAnalysis ; FSimpleMulticastDelegate&)",
    "insertText": "GetPostGarbageCollect()"
  },
  {
    "label": "GetPostPurgeGarbageDelegate()",
    "kind": "Method",
    "detail": "Function (FSimpleMulticastDelegate&)",
    "insertText": "GetPostPurgeGarbageDelegate()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnReportGarbageReferencers, TConstArrayView<struct FGarbageReferenceInfo>)"
  },
  {
    "label": "GetGarbageCollectReportGarbageReferencers()",
    "kind": "Method",
    "detail": "Function (FOnReportGarbageReferencers&)",
    "insertText": "GetGarbageCollectReportGarbageReferencers()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# endif FSimpleMulticastDelegate PreGarbageCollectConditionalBeginDestroy ; FSimpleMulticastDelegate PostGarbageCollectConditionalBeginDestroy ; FSimpleMulticastDelegate GarbageCollectComplete ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FOnLoadObjectsOnTop, const FString&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FOnLoadObjectsOnTop ShouldLoadOnTop ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FPackageCreatedForLoad, class UPackage*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (FPackageCreatedForLoad PackageCreatedForLoad ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FPrimaryAssetId, FGetPrimaryAssetIdForObject, const UObject*)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (FGetPrimaryAssetIdForObject GetPrimaryAssetIdForObject ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FShouldCookPackageForPlatform, const UPackage*, const ITargetPlatform*)"
  },
  {
    "label": "GetFallbackStruct()",
    "kind": "Method",
    "detail": "Function (FShouldCookPackageForPlatform ShouldCookPackageForPlatform ; } ; bool GShouldVerifyGCAssumptions ; int32 GCreateGCClusters ; int32 GAssetClustreringEnabled ; UScriptStruct*)",
    "insertText": "GetFallbackStruct()"
  },
  {
    "label": "GetAllowNativeComponentClassOverrides()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAllowNativeComponentClassOverrides()"
  },
  {
    "label": "FAssetLog()",
    "kind": "Method",
    "detail": "Function (namespace UE { class FAssetLog { public :)",
    "insertText": "FAssetLog(const TCHAR* InPath UE_LIFETIMEBOUND) : Path(InPath)"
  },
  {
    "label": "FAssetLog()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetLog(const FPackagePath& InPath UE_LIFETIMEBOUND) : PackagePath(&InPath)"
  },
  {
    "label": "FAssetLog()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAssetLog(const UObject* InObject UE_LIFETIMEBOUND) : Object(InObject)"
  },
  {
    "label": "SerializeForLog()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeForLog(FCbWriter& Writer, const FAssetLog& AssetLog)"
  },
  {
    "label": "RecordAssetLog()",
    "kind": "Method",
    "detail": "Function (private : const TCHAR* Path = nullptr ; const FPackagePath* PackagePath = nullptr ; const UObject* Object = nullptr ; } ; } namespace UE::Core::Private { void)",
    "insertText": "RecordAssetLog(const FName& CategoryName, ELogVerbosity::Type Verbosity, const FAssetLog& AssetLog, const FString& Message, const ANSICHAR* File, int32 Line)"
  },
  {
    "label": "FormatPathForAssetLog()",
    "kind": "Method",
    "detail": "Function (} struct FAssetMsg { FString)",
    "insertText": "FormatPathForAssetLog(const TCHAR* Path)"
  },
  {
    "label": "FormatPathForAssetLog()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatPathForAssetLog(const FPackagePath& Path)"
  },
  {
    "label": "FormatPathForAssetLog()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FormatPathForAssetLog(const UObject* Object)"
  },
  {
    "label": "GetAssetLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetLogString(const TCHAR* Path, const FString& Message)"
  },
  {
    "label": "GetAssetLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetLogString(const FPackagePath& Path, const FString& Message)"
  },
  {
    "label": "GetAssetLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetAssetLogString(const UObject* Object, const FString& Message)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} ; # define ASSET_LOG_FORMAT_STRING_ANSI \" [ AssetLog ] % s : \" # define ASSET_LOG_FORMAT_STRING)",
    "insertText": "TEXT(ASSET_LOG_FORMAT_STRING_ANSI) #if NO_LOGGING #define UE_ASSET_LOG(...) #else #define UE_ASSET_LOG(CategoryName, Verbosity, Asset, Format, ...)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(TIsArrayOrRefOfTypeByPredicate<decltype(Format), TIsCharEncodingCompatibleWithTCHAR>::Value, \"Formatting string must be a TCHAR array.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert((ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask) < ELogVerbosity::NumVerbosity && ELogVerbosity::Verbosity > 0, \"Verbosity must be constant and in range.\")"
  },
  {
    "label": "CA_CONSTANT_IF()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CA_CONSTANT_IF((ELogVerbosity::Verbosity & ELogVerbosity::VerbosityMask) <= ELogVerbosity::COMPILED_IN_MINIMUM_VERBOSITY && (ELogVerbosity::Warning & ELogVerbosity::VerbosityMask) <= FLogCategory##CategoryName::CompileTimeVerbosity)"
  },
  {
    "label": "UE_LOG_EXPAND_IS_FATAL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_LOG_EXPAND_IS_FATAL(Verbosity, PREPROCESSOR_NOTHING, if (!CategoryName.IsSuppressed(ELogVerbosity::Verbosity)))"
  },
  {
    "label": "RecordAssetLog()",
    "kind": "Method",
    "detail": "Function (\\::UE::Core::)",
    "insertText": "RecordAssetLog(CategoryName.GetCategoryName(), ELogVerbosity::Verbosity, ::UE::FAssetLog(Asset), FString::Printf(Format, ##__VA_ARGS__), __FILE__, __LINE__)"
  },
  {
    "label": "UE_LOG_EXPAND_IS_FATAL()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_LOG_EXPAND_IS_FATAL(Verbosity, \\ { \\ UE_DEBUG_BREAK_AND_PROMPT_FOR_REMOTE(); \\ FDebug::AssertFailed(\"\", __FILE__, __LINE__, TEXT(\"%s: %s\"), *FAssetMsg::FormatPathForAssetLog(Asset), *FString::Printf(Format, ##__VA_ARGS__)); \\ CA_ASSUME(false); \\ }, \\ PREPROCESSOR_NOTHING \\)"
  },
  {
    "label": "IsEditorOnlyObject()",
    "kind": "Method",
    "detail": "Function (enum class EEditorOnlyObjectResult { Uninitialized,EditorOnly,NonEditorOnly,} ; } # endif # if WITH_EDITOR bool)",
    "insertText": "IsEditorOnlyObject(const UObject* InObject, bool bCheckRecursive = true)"
  },
  {
    "label": "IsEditorOnlyObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnlyObject(const UObject* InObject, bool bCheckRecursive, bool bCheckMarks)"
  },
  {
    "label": "IsEditorOnlyObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnlyObject(const UObject* InObject, bool bCheckRecursive, TFunctionRef<UE::SavePackageUtilities::EEditorOnlyObjectResult(const UObject* Object)> LookupInCache, TFunctionRef<void(const UObject* Object, bool bEditorOnly)> AddToCache)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# endif class FFieldClass ; struct FClassFunctionLinkInfo ; struct FCppClassTypeInfoStatic ; typedef)",
    "insertText": "void(*SetterFuncPtr)(void* InContainer, const void* InValue)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*GetterFuncPtr)(const void* InContainer, void* OutValue)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (namespace UECodeGen_Private { enum class EPropertyGenFlags : uint8 { None = 0 x00,Byte = 0 x00,Int8 = 0 x01,Int16 = 0 x02,Int = 0 x03,Int64 = 0 x04,UInt16 = 0 x05,UInt32 = 0 x06,UInt64 = 0 x07,Float = 0 x0A,Double = 0 x0B,Bool = 0 x0C,SoftClass = 0 x0D,WeakObject = 0 x0E,LazyObject = 0 x0F,SoftObject = 0 x10,Class = 0 x11,Object = 0 x12,Interface = 0 x13,Name = 0 x14,Str = 0 x15,Array = 0 x16,Map = 0 x17,Set = 0 x18,Struct = 0 x19,Delegate = 0 x1A,InlineMulticastDelegate = 0 x1B,SparseMulticastDelegate = 0 x1C,Text = 0 x1D,Enum = 0 x1E,FieldPath = 0 x1F,LargeWorldCoordinatesReal = 0 x20,Optional = 0 x21,VValue = 0 x22,Utf8Str = 0 x23,AnsiStr = 0 x24,NativeBool = 0 x40,ObjectPtr = 0 x40,} ;)",
    "insertText": "static_assert(std::is_same_v<int32, int >, \"CoreUObject property system expects int32 to be an int\")"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ENUM_CLASS_FLAGS(EPropertyGenFlags) inline constexpr EPropertyGenFlags PropertyTypeMask = (EPropertyGenFlags)"
  },
  {
    "label": "UEnum()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA struct FMetaDataPairParam { const char* NameUTF8 ; const char* ValueUTF8 ; } ; # endif struct FEnumeratorParam { const char* NameUTF8 ; int64 Value ; } ; struct FPropertyParamsBase { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; } ; struct FPropertyParamsBaseWithoutOffset { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; } ; struct FPropertyParamsBaseWithOffset { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ; } ; struct FGenericPropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ; # if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FBytePropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ;)",
    "insertText": "UEnum(*EnumFunc)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FBoolPropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 ElementSize ; uint16 SizeOfOuter ;)",
    "insertText": "void(*SetBitFunc)(void* Obj)"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FObjectPropertyParamsWithoutClass { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ; # if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FObjectPropertyParamsWithClass { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ;)",
    "insertText": "UClass(*ClassFunc)()"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UClass(*MetaClassFunc)()"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FInterfacePropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ;)",
    "insertText": "UClass(*InterfaceClassFunc)()"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FStructPropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ;)",
    "insertText": "UScriptStruct(*ScriptStructFunc)()"
  },
  {
    "label": "UFunction()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FDelegatePropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ;)",
    "insertText": "UFunction(*SignatureFunctionFunc)()"
  },
  {
    "label": "FFieldClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FFieldPathPropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ;)",
    "insertText": "FFieldClass(*PropertyClassFunc)()"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (# if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FArrayPropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ; EArrayPropertyFlags ArrayFlags ; # if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FMapPropertyParams { const char* NameUTF8 ; const char* RepNotifyFuncUTF8 ; EPropertyFlags PropertyFlags ; EPropertyGenFlags Flags ; EObjectFlags ObjectFlags ; SetterFuncPtr SetterFunc ; GetterFuncPtr GetterFunc ; uint16 ArrayDim ; uint16 Offset ; EMapPropertyFlags MapFlags ; # if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; typedef FGenericPropertyParams FInt8PropertyParams ; typedef FGenericPropertyParams FInt16PropertyParams ; typedef FGenericPropertyParams FIntPropertyParams ; typedef FGenericPropertyParams FInt64PropertyParams ; typedef FGenericPropertyParams FUInt16PropertyParams ; typedef FGenericPropertyParams FUInt32PropertyParams ; typedef FGenericPropertyParams FUInt64PropertyParams ; typedef FGenericPropertyParams FFloatPropertyParams ; typedef FGenericPropertyParams FDoublePropertyParams ; typedef FGenericPropertyParams FLargeWorldCoordinatesRealPropertyParams ; typedef FGenericPropertyParams FNamePropertyParams ; typedef FGenericPropertyParams FStrPropertyParams ; typedef FGenericPropertyParams FSetPropertyParams ; typedef FGenericPropertyParams FTextPropertyParams ; typedef FObjectPropertyParams FWeakObjectPropertyParams ; typedef FObjectPropertyParams FLazyObjectPropertyParams ; typedef FObjectPropertyParams FObjectPtrPropertyParams ; typedef FClassPropertyParams FClassPtrPropertyParams ; typedef FObjectPropertyParams FSoftObjectPropertyParams ; typedef FGenericPropertyParams FVerseValuePropertyParams ; typedef FGenericPropertyParams FUtf8StrPropertyParams ; typedef FGenericPropertyParams FAnsiStrPropertyParams ; struct FFunctionParams {)",
    "insertText": "UObject(*OuterFunc)()"
  },
  {
    "label": "UFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UFunction(*SuperFunc)()"
  },
  {
    "label": "FText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FText(*DisplayNameFunc)(int32)"
  },
  {
    "label": "UScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UScriptStruct(*SuperFunc)()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*StructOpsFunc)()"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (const char* NameUTF8 ; const FPropertyParamsBase* const* PropertyArray ; uint16 NumProperties ; uint16 SizeOf ; uint8 AlignOf ; EObjectFlags ObjectFlags ; uint32 StructFlags ; # if WITH_METADATA uint16 NumMetaData ; const FMetaDataPairParam* MetaDataArray ; # endif } ; struct FPackageParams { const char* NameUTF8 ;)",
    "insertText": "UObject(*const *SingletonFuncArray)()"
  },
  {
    "label": "UClass()",
    "kind": "Method",
    "detail": "Function (int32 Offset ; bool bImplementedByK2 ; } ; struct FClassParams {)",
    "insertText": "UClass(*ClassNoRegisterFunc)()"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (const char* ClassConfigNameUTF8 ; const FCppClassTypeInfoStatic* CppClassInfo ;)",
    "insertText": "UObject(*const *DependencySingletonFuncArray)()"
  },
  {
    "label": "ConstructUFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructUFunction(UFunction** SingletonPtr, const FFunctionParams& Params)"
  },
  {
    "label": "ConstructUEnum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructUEnum(UEnum*& OutEnum, const FEnumParams& Params)"
  },
  {
    "label": "ConstructUScriptStruct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructUScriptStruct(UScriptStruct*& OutStruct, const FStructParams& Params)"
  },
  {
    "label": "ConstructUPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructUPackage(UPackage*& OutPackage, const FPackageParams& Params)"
  },
  {
    "label": "ConstructUClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructUClass(UClass*& OutClass, const FClassParams& Params)"
  },
  {
    "label": "METADATA_PARAMS()",
    "kind": "Method",
    "detail": "Function (} # if WITH_METADATA # define)",
    "insertText": "METADATA_PARAMS(x, y) x, y, #else #define METADATA_PARAMS(x, y) #endif #if WITH_EDITOR #define IF_WITH_EDITOR(x, y) x #else #define IF_WITH_EDITOR(x, y) y #endif #if WITH_EDITORONLY_DATA #define IF_WITH_EDITORONLY_DATA(x, y) x #else #define IF_WITH_EDITORONLY_DATA(x, y)"
  },
  {
    "label": "CombineDataValidationResults()",
    "kind": "Method",
    "detail": "Function (Invalid,Valid,NotValidated } ; EDataValidationResult)",
    "insertText": "CombineDataValidationResults(EDataValidationResult Result1, EDataValidationResult Result2)"
  }
]