[
  {
    "label": "FWindowsPlatformFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWindowsPlatformFile"
  },
  {
    "label": "FNormalizedFilename",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNormalizedFilename"
  },
  {
    "label": "FNormalizedDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNormalizedDirectory"
  },
  {
    "label": "USE_OVERLAPPED_IO()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Windows / WindowsPlatformFile . h \" # include \" Containers / StringView . h \" # include \" GenericPlatform / GenericPlatformFile . h \" # include \" Misc / DateTime . h \" # include \" Misc / StringBuilder . h \" # include \" Windows / WindowsHWrapper . h \" # define USE_WINDOWS_ASYNC_IMPL 0 # define)",
    "insertText": "USE_OVERLAPPED_IO(!IS_PROGRAM && !WITH_EDITOR)"
  },
  {
    "label": "NormalizeWindowsPath()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "NormalizeWindowsPath(FStringBuilderBase& Path, bool bIsFilename)"
  },
  {
    "label": "FNormalizedFilename()",
    "kind": "Method",
    "detail": "Function (class FNormalizedFilename : public TStringBuilder<2 5 6> { public :)",
    "insertText": "FNormalizedFilename(const TCHAR* Filename)"
  },
  {
    "label": "FNormalizedFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNormalizedFilename(FStringView Filename)"
  },
  {
    "label": "FNormalizedFilename()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNormalizedFilename(FStringView Dir, FStringView Filename)"
  },
  {
    "label": "FNormalizedDirectory()",
    "kind": "Method",
    "detail": "Function (} ; class FNormalizedDirectory : public TStringBuilder<2 5 6> { public :)",
    "insertText": "FNormalizedDirectory(const TCHAR* Directory)"
  },
  {
    "label": "FileExists()",
    "kind": "Method",
    "detail": "Function (} ; public : using IPhysicalPlatformFile::IterateDirectory ; using IPhysicalPlatformFile::IterateDirectoryStat ; bool)",
    "insertText": "FileExists(const TCHAR* Filename)"
  },
  {
    "label": "FileSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "FileSize(const TCHAR* Filename)"
  },
  {
    "label": "DeleteFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteFile(const TCHAR* Filename)"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadOnly(const TCHAR* Filename)"
  },
  {
    "label": "MoveFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MoveFile(const TCHAR* To, const TCHAR* From)"
  },
  {
    "label": "SetReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetReadOnly(const TCHAR* Filename, bool bNewReadOnlyValue)"
  },
  {
    "label": "GetTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "SetTimeStamp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeStamp(const TCHAR* Filename, FDateTime DateTime)"
  },
  {
    "label": "GetAccessTimeStamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "GetAccessTimeStamp(const TCHAR* Filename)"
  },
  {
    "label": "GetFilenameOnDisk()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilenameOnDisk(const TCHAR* Filename)"
  },
  {
    "label": "IsSymlink()",
    "kind": "Method",
    "detail": "Function (ESymlinkResult)",
    "insertText": "IsSymlink(const TCHAR* Filename)"
  },
  {
    "label": "HasMarkOfTheWeb()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasMarkOfTheWeb(FStringView Filename, FString* OutSourceURL = nullptr)"
  },
  {
    "label": "SetMarkOfTheWeb()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetMarkOfTheWeb(FStringView Filename, bool bNewStatus, const FString* InSourceURL = nullptr)"
  },
  {
    "label": "OpenAsyncRead()",
    "kind": "Method",
    "detail": "Function (# if USE_WINDOWS_ASYNC_IMPL IAsyncReadFileHandle*)",
    "insertText": "OpenAsyncRead(const TCHAR* Filename)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (# endif FFileOpenResult)",
    "insertText": "OpenRead(const TCHAR* Filename, EOpenReadFlags Flags)"
  },
  {
    "label": "OpenRead()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenRead(const TCHAR* Filename, bool bAllowWrite = false)"
  },
  {
    "label": "OpenReadNoBuffering()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenReadNoBuffering(const TCHAR* Filename, bool bAllowWrite = false)"
  },
  {
    "label": "OpenWrite()",
    "kind": "Method",
    "detail": "Function (IFileHandle*)",
    "insertText": "OpenWrite(const TCHAR* Filename, bool bAppend = false, bool bAllowRead = false)"
  },
  {
    "label": "OpenMapped()",
    "kind": "Method",
    "detail": "Function (IMappedFileHandle*)",
    "insertText": "OpenMapped(const TCHAR* Filename)"
  },
  {
    "label": "DirectoryExists()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DirectoryExists(const TCHAR* Directory)"
  },
  {
    "label": "CreateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateDirectory(const TCHAR* Directory)"
  },
  {
    "label": "DeleteDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteDirectory(const TCHAR* Directory)"
  },
  {
    "label": "GetStatData()",
    "kind": "Method",
    "detail": "Function (FFileStatData)",
    "insertText": "GetStatData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "IterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectory(const TCHAR* Directory, FDirectoryVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryStat(const TCHAR* Directory, FDirectoryStatVisitor& Visitor)"
  },
  {
    "label": "IterateDirectoryCommon()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryCommon(const TCHAR* Directory, const TFunctionRef<bool(const WIN32_FIND_DATAW&)>& Visitor)"
  },
  {
    "label": "FileJournalIsAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileJournalIsAvailable(const TCHAR* VolumeOrPath = nullptr, ELogVerbosity::Type* OutErrorLevel = nullptr, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalGetLatestEntry()",
    "kind": "Method",
    "detail": "Function (EFileJournalResult)",
    "insertText": "FileJournalGetLatestEntry(const TCHAR* VolumeName, FFileJournalId& OutJournalId, FFileJournalEntryHandle& OutEntryHandle, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalIterateDirectory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FileJournalIterateDirectory(const TCHAR* Directory, FDirectoryJournalVisitorFunc Visitor)"
  },
  {
    "label": "FileJournalGetFileData()",
    "kind": "Method",
    "detail": "Function (FFileJournalData)",
    "insertText": "FileJournalGetFileData(const TCHAR* FilenameOrDirectory)"
  },
  {
    "label": "FileJournalReadModified()",
    "kind": "Method",
    "detail": "Function (EFileJournalResult)",
    "insertText": "FileJournalReadModified(const TCHAR* VolumeName, const FFileJournalId& JournalIdOfStartingEntry, const FFileJournalEntryHandle& StartingJournalEntry, TMap<FFileJournalFileHandle, FString>& KnownDirectories, TSet<FString>& OutModifiedDirectories, FFileJournalEntryHandle& OutNextJournalEntry, FString* OutError = nullptr)"
  },
  {
    "label": "FileJournalGetVolumeName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FileJournalGetVolumeName(FStringView InPath)"
  },
  {
    "label": "UEDayOfWeekToWindowsSystemTimeDayOfWeek()",
    "kind": "Method",
    "detail": "Function (} ; namespace UE::WindowsPlatformFile::Private { int32)",
    "insertText": "UEDayOfWeekToWindowsSystemTimeDayOfWeek(const EDayOfWeek InDayOfWeek)"
  },
  {
    "label": "WindowsFileTimeToUEDateTime()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "WindowsFileTimeToUEDateTime(const FILETIME& InFileTime)"
  },
  {
    "label": "UEDateTimeToWindowsFileTime()",
    "kind": "Method",
    "detail": "Function (FILETIME)",
    "insertText": "UEDateTimeToWindowsFileTime(const FDateTime& InDateTime)"
  }
]