[
  {
    "label": "FLinuxApplication",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinuxApplication"
  },
  {
    "label": "FGenericWindowDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericWindowDefinition"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FLinuxWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLinuxWindow"
  },
  {
    "label": "NativeResizeDirection",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NativeResizeDirection"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Logging / LogMacros . h \" # include \" Templates / SharedPointer . h \" # include \" GenericPlatform / GenericWindow . h \" # include \" SDL . h \" class FLinuxApplication ; struct FGenericWindowDefinition ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLinuxWindow, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLinuxWindowType, Log, All)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogLinuxWindowEvent, Log, All)"
  },
  {
    "label": "FLinuxWindow()",
    "kind": "Method",
    "detail": "Function (typedef SDL_Window* SDL_HWindow ; enum class EWindowActivationPolicy ; class FLinuxWindow : public FGenericWindow { public : ~)",
    "insertText": "FLinuxWindow()"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FLinuxWindow>)",
    "insertText": "Make()"
  },
  {
    "label": "GetHWnd()",
    "kind": "Method",
    "detail": "Function (SDL_HWindow)",
    "insertText": "GetHWnd()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(class FLinuxApplication* const Application, const TSharedRef< FGenericWindowDefinition >& InDefinition, const TSharedPtr< FLinuxWindow >& InParent, const bool bShowImmediately)"
  },
  {
    "label": "IsRegularWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRegularWindow()"
  },
  {
    "label": "IsPopupMenuWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPopupMenuWindow()"
  },
  {
    "label": "IsTooltipWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTooltipWindow()"
  },
  {
    "label": "IsNotificationWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNotificationWindow()"
  },
  {
    "label": "IsTopLevelWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTopLevelWindow()"
  },
  {
    "label": "IsModalWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsModalWindow()"
  },
  {
    "label": "IsDialogWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDialogWindow()"
  },
  {
    "label": "IsDragAndDropWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDragAndDropWindow()"
  },
  {
    "label": "IsUtilityWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUtilityWindow()"
  },
  {
    "label": "GetActivationPolicy()",
    "kind": "Method",
    "detail": "Function (EWindowActivationPolicy)",
    "insertText": "GetActivationPolicy()"
  },
  {
    "label": "IsFocusWhenFirstShown()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFocusWhenFirstShown()"
  },
  {
    "label": "GetParent()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<FLinuxWindow>&)",
    "insertText": "GetParent()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetID()"
  },
  {
    "label": "LogInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogInfo()"
  },
  {
    "label": "IsNativeMoving()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNativeMoving()"
  },
  {
    "label": "BeginNativeMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginNativeMove()"
  },
  {
    "label": "AfterNativeMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterNativeMove()"
  },
  {
    "label": "EndNativeMove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNativeMove()"
  },
  {
    "label": "IsNativeResizing()",
    "kind": "Method",
    "detail": "Function (enum NativeResizeDirection { ResizeSouthWest = 0,ResizeSouth,ResizeSouthEast,ResizeEast,ResizeNorthEast,ResizeNorth,ResizeNorthWest,ResizeWest,InvalidDirection } ; bool)",
    "insertText": "IsNativeResizing()"
  },
  {
    "label": "BeginNativeResize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BeginNativeResize(NativeResizeDirection Direction)"
  },
  {
    "label": "AfterNativeResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AfterNativeResize()"
  },
  {
    "label": "EndNativeResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndNativeResize()"
  },
  {
    "label": "ReshapeWindow()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ReshapeWindow(int32 X, int32 Y, int32 Width, int32 Height)"
  },
  {
    "label": "GetOSWindowHandle()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetOSWindowHandle()"
  },
  {
    "label": "MoveWindowTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWindowTo(int32 X, int32 Y)"
  },
  {
    "label": "BringToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BringToFront(bool bForce = false)"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "Minimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Minimize()"
  },
  {
    "label": "Maximize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Maximize()"
  },
  {
    "label": "Restore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Restore()"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "Hide()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Hide()"
  },
  {
    "label": "SetWindowMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMode(EWindowMode::Type NewWindowMode)"
  },
  {
    "label": "GetWindowMode()",
    "kind": "Method",
    "detail": "Function (EWindowMode::Type)",
    "insertText": "GetWindowMode()"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsMinimized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMinimized()"
  },
  {
    "label": "GetRestoredDimensions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetRestoredDimensions(int32& X, int32& Y, int32& Width, int32& Height)"
  },
  {
    "label": "SetWindowFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowFocus()"
  },
  {
    "label": "SetOpacity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpacity(const float InOpacity)"
  },
  {
    "label": "Enable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Enable(bool bEnable)"
  },
  {
    "label": "IsPointInWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPointInWindow(int32 X, int32 Y)"
  },
  {
    "label": "GetWindowBorderSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWindowBorderSize()"
  },
  {
    "label": "IsForegroundWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsForegroundWindow()"
  },
  {
    "label": "SetText()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetText(const TCHAR* const Text)"
  },
  {
    "label": "AdjustCachedSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustCachedSize(FVector2D& Size)"
  },
  {
    "label": "GetDPIScaleFactor()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetDPIScaleFactor()"
  },
  {
    "label": "GetNativeBordersSize()",
    "kind": "Method",
    "detail": "Function (DPIScaleFactor = Value ; } void)",
    "insertText": "GetNativeBordersSize(int32& OutLeftBorderWidth, int32& OutTopBorderHeight)"
  },
  {
    "label": "CacheNativeProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheNativeProperties()"
  },
  {
    "label": "HitTest()",
    "kind": "Method",
    "detail": "Function (private : FLinuxApplication* OwningApplication ; SDL_HWindow HWnd ; int32 RegionWidth ; int32 RegionHeight ; EWindowMode::Type WindowMode ; RECT PreFullscreenWindowRect ; int32 VirtualWidth ; int32 VirtualHeight ; bool bIsVisible ; bool bWasFullscreen ; bool bIsPopupWindow ; bool bIsTooltipWindow ; bool bIsConsoleWindow ; bool bIsDialogWindow ; bool bIsNotificationWindow ; bool bIsTopLevelWindow ; bool bIsDragAndDropWindow ; bool bIsUtilityWindow ; bool bIsPointerInsideWindow ; uint32 WindowSDLID ; TSharedPtr<FLinuxWindow> ParentWindow ; SDL_HitTestResult)",
    "insertText": "HitTest(SDL_Window *SDLwin, const SDL_Point *point, void *data)"
  }
]