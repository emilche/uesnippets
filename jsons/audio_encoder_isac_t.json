[
  {
    "label": "AudioEncoderIsacT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderIsacT"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_H_ # define MODULES_AUDIO_CODING_CODECS_ISAC_AUDIO_ENCODER_ISAC_T_H_ # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / scoped_refptr . h \" # include \" api / units / time_delta . h \" # include \" system_wrappers / include / field_trial . h \" namespace webrtc { template<T> class AudioEncoderIsacT final : public AudioEncoder { public : struct Config { bool)",
    "insertText": "IsOk()"
  },
  {
    "label": "AudioEncoderIsacT()",
    "kind": "Method",
    "detail": "Function (int payload_type = 1 0 3 ; int sample_rate_hz = 1 6 0 0 0 ; int frame_size_ms = 3 0 ; int bit_rate = kDefaultBitRate ; int max_payload_size_bytes = - 1 ; int max_bit_rate = - 1 ; } ;)",
    "insertText": "AudioEncoderIsacT(const Config& config)"
  },
  {
    "label": "AudioEncoderIsacT()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AudioEncoderIsacT()"
  },
  {
    "label": "AudioEncoderIsacT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AudioEncoderIsacT(const AudioEncoderIsacT&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderIsacT&)",
    "insertText": "operator(const AudioEncoderIsacT&)"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumChannels()"
  },
  {
    "label": "Num10MsFramesInNextPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10MsFramesInNextPacket()"
  },
  {
    "label": "Max10MsFramesInAPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Max10MsFramesInAPacket()"
  },
  {
    "label": "GetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetBitrate()"
  },
  {
    "label": "SetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTargetBitrate(int target_bps)"
  },
  {
    "label": "OnReceivedTargetAudioBitrate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedTargetAudioBitrate(int target_bps)"
  },
  {
    "label": "OnReceivedUplinkBandwidth()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkBandwidth(int target_audio_bitrate_bps, absl::optional<int64_t> bwe_period_ms)"
  },
  {
    "label": "OnReceivedUplinkAllocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedUplinkAllocation(BitrateAllocationUpdate update)"
  },
  {
    "label": "OnReceivedOverhead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReceivedOverhead(size_t overhead_bytes_per_packet)"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (EncodedInfo)",
    "insertText": "EncodeImpl(uint32_t rtp_timestamp, rtc::ArrayView<const int16_t> audio, rtc::Buffer* encoded)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::pair<TimeDelta,TimeDelta>>)",
    "insertText": "GetFrameLengthRange()"
  },
  {
    "label": "MaxBitrateBps()",
    "kind": "Method",
    "detail": "Function (private : const size_t kSufficientEncodeBufferSizeBytes = 4 0 0 ; int kDefaultBitRate = 3 2 0 0 0 ; int kMinBitrateBps = 1 0 0 0 0 ; int)",
    "insertText": "MaxBitrateBps(int sample_rate_hz)"
  },
  {
    "label": "RecreateEncoderInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecreateEncoderInstance(const Config& config)"
  },
  {
    "label": "IsDisabled()",
    "kind": "Method",
    "detail": "Function (Config config_ ; T::instance_type* isac_state_ = nullptr ; bool packet_in_progress_ = false ; uint32_t packet_timestamp_ ; uint32_t last_encoded_timestamp_ ; const bool send_side_bwe_with_overhead_ = !)",
    "insertText": "IsDisabled(\"WebRTC-SendSideBwe-WithOverhead\")"
  },
  {
    "label": "Bytes()",
    "kind": "Method",
    "detail": "Function (DataSize overhead_per_packet_ =)",
    "insertText": "Bytes(28)"
  }
]