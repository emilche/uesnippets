[
  {
    "label": "OstreamValueToString()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TRACE_EVENT_TRACE_CONVERSION_HELPER_H_ # define BASE_TRACE_EVENT_TRACE_CONVERSION_HELPER_H_ # include<sstream> # include<string> # include \" base / strings / string_number_conversions . h \" # include \" base / template_util . h \" # include \" base / trace_event / traced_value . h \" namespace base { namespace trace_event { namespace internal { template<ValueType> std::string)",
    "insertText": "OstreamValueToString(const ValueType& value)"
  },
  {
    "label": "str()",
    "kind": "Method",
    "detail": "Function (std::stringstream ss ; ss<<value ; return ss .)",
    "insertText": "str()"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<ValueType>)",
    "insertText": "decltype(base::NumberToString(std::declval<const ValueType>()), std::string()) ValueToStringHelper(base::internal::priority_tag<5>, const ValueType& value, std::string)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<ValueType>)",
    "insertText": "decltype(std::string(std::declval<const ValueType>().ToString())) ValueToStringHelper(base::internal::priority_tag<4>, const ValueType& value, std::string)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<ValueType>)",
    "insertText": "decltype(std::declval<std::ostream>().operator<<(std::declval<const ValueType>()), std::string()) ValueToStringHelper(base::internal::priority_tag<3>, const ValueType& value, std::string)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<ValueType>)",
    "insertText": "decltype(operator<<(std::declval<std::ostream&>(), std::declval<const ValueType&>()), std::string()) ValueToStringHelper(base::internal::priority_tag<2>, const ValueType& value, std::string)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<ValueType>)",
    "insertText": "decltype(std::string(std::declval<const ValueType>().data())) ValueToStringHelper(base::internal::priority_tag<1>, const ValueType& value, std::string)"
  },
  {
    "label": "ValueToStringHelper()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> std::string)",
    "insertText": "ValueToStringHelper(base::internal::priority_tag<0>, const ValueType& , std::string fallback_value)"
  },
  {
    "label": "SetBoolean()",
    "kind": "Method",
    "detail": "Function (traced_value ->)",
    "insertText": "SetBoolean(name, value)"
  },
  {
    "label": "SetTracedValueArgHelper()",
    "kind": "Method",
    "detail": "Function (} template<T> std::enable_if<std::is_integral<T>::value>::type)",
    "insertText": "SetTracedValueArgHelper(base::internal::priority_tag<5>, TracedValue* traced_value, const char* name, const T& value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (traced_value ->)",
    "insertText": "SetString(name, base::NumberToString(value))"
  },
  {
    "label": "SetInteger()",
    "kind": "Method",
    "detail": "Function (} else { traced_value ->)",
    "insertText": "SetInteger(name, value)"
  },
  {
    "label": "SetTracedValueArgHelper()",
    "kind": "Method",
    "detail": "Function (} } template<T> std::enable_if<std::is_floating_point<T>::value>::type)",
    "insertText": "SetTracedValueArgHelper(base::internal::priority_tag<4>, TracedValue* traced_value, const char* name, const T& value)"
  },
  {
    "label": "SetDouble()",
    "kind": "Method",
    "detail": "Function (traced_value ->)",
    "insertText": "SetDouble(name, static_cast<double>(value))"
  },
  {
    "label": "SetTracedValueArgHelper()",
    "kind": "Method",
    "detail": "Function (} template<T> std::enable_if<std::is_same<T,void*>::value>::type)",
    "insertText": "SetTracedValueArgHelper(base::internal::priority_tag<3>, TracedValue* traced_value, const char* name, const T& value)"
  },
  {
    "label": "SetPointer()",
    "kind": "Method",
    "detail": "Function (traced_value ->)",
    "insertText": "SetPointer(name, value)"
  },
  {
    "label": "SetTracedValueArgHelper()",
    "kind": "Method",
    "detail": "Function (} template<T> std::enable_if<std::is_same<T,const char*>::value>::type)",
    "insertText": "SetTracedValueArgHelper(base::internal::priority_tag<2>, TracedValue* traced_value, const char* name, const T& value)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (traced_value ->)",
    "insertText": "SetString(name, value)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} template<T>)",
    "insertText": "decltype(base::StringPiece(std::declval<const T>()), void()) SetTracedValueArgHelper(base::internal::priority_tag<1>, TracedValue* traced_value, const char* name, const T& value)"
  },
  {
    "label": "SetTracedValueArgHelper()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "SetTracedValueArgHelper(base::internal::priority_tag<0>, TracedValue* traced_value, const char* name, const T&)"
  },
  {
    "label": "SetString()",
    "kind": "Method",
    "detail": "Function (traced_value ->)",
    "insertText": "SetString(name, \"<value>\")"
  },
  {
    "label": "ValueToString()",
    "kind": "Method",
    "detail": "Function (} } template<ValueType> std::string)",
    "insertText": "ValueToString(const ValueType& value, std::string fallback_value = \"<value>\")"
  },
  {
    "label": "SetTracedValueArg()",
    "kind": "Method",
    "detail": "Function (} template<ValueType> void)",
    "insertText": "SetTracedValueArg(TracedValue* traced_value, const char* name, const ValueType& value)"
  },
  {
    "label": "SetTracedValueArgHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTracedValueArgHelper(base::internal::priority_tag<6>(), traced_value, name, value)"
  },
  {
    "label": "SetTracedValueArg()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTracedValueArg(TracedValue* traced_value, const char* name)"
  },
  {
    "label": "SetTracedValueArg()",
    "kind": "Method",
    "detail": "Function (} template<ValueType,. . . ValueTypes> void)",
    "insertText": "SetTracedValueArg(TracedValue* traced_value, const char* name, const ValueType& value, const ValueTypes&... args)"
  },
  {
    "label": "SetTracedValueArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTracedValueArg(traced_value, name, value)"
  },
  {
    "label": "SetTracedValueArg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTracedValueArg(traced_value, name, args...)"
  }
]