[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCanvas"
  },
  {
    "label": "SPaintSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPaintSurface"
  },
  {
    "label": "SRuler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRuler"
  },
  {
    "label": "SZoomPan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SZoomPan"
  },
  {
    "label": "UPanelWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPanelWidget"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "FHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHittestGrid"
  },
  {
    "label": "FOnPaintHandlerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnPaintHandlerParams"
  },
  {
    "label": "FWidgetHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetHitResult"
  },
  {
    "label": "UWidgetEditingProjectSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetEditingProjectSettings"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "FWidgetBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetBlueprintEditor"
  },
  {
    "label": "FDropPreview",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDropPreview"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Templates / SubclassOf . h \" # include \" Styling / SlateColor . h \" # include \" Layout / SlateRect . h \" # include \" Layout / Visibility . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Layout / ArrangedWidget . h \" # include \" Widgets / SWidget . h \" # include \" UObject / GCObject . h \" # include \" Types / SlateStructs . h \" # include \" Animation / CurveSequence . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Styling / SlateBrush . h \" # include \" Components / Widget . h \" # include \" WidgetReference . h \" # include \" WidgetBlueprintEditor . h \" # include \" Settings / LevelEditorPlaySettings . h \" # include \" Layout / WidgetPath . h \" # include \" IUMGDesigner . h \" # include \" DesignerExtension . h \" # include \" Designer / SDesignSurface . h \" # include \" UMGEditorProjectSettings . h \" class FMenuBuilder ; class FScopedTransaction ; class SBox ; class SCanvas ; class SPaintSurface ; class SRuler ; class SZoomPan ; class UPanelWidget ; class UWidgetBlueprint ; class FHittestGrid ; struct FOnPaintHandlerParams ; struct FWidgetHitResult ; class UWidgetEditingProjectSettings ; class SDesignerView : public SDesignSurface,public FGCObject,public IUMGDesigner { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SDesignerView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedPtr<class FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "SDesignerView()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SDesignerView()"
  },
  {
    "label": "EnsureTick()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureTick(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "CreateOverlayUI()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateOverlayUI()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(TSharedRef<FDesignerExtension> Extension)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(TSharedRef<FDesignerExtension> Extension)"
  },
  {
    "label": "GetPreviewScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPreviewScale()"
  },
  {
    "label": "GetSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (const TSet<FWidgetReference>&)",
    "insertText": "GetSelectedWidgets()"
  },
  {
    "label": "GetSelectedWidget()",
    "kind": "Method",
    "detail": "Function (FWidgetReference)",
    "insertText": "GetSelectedWidget()"
  },
  {
    "label": "GetTransformMode()",
    "kind": "Method",
    "detail": "Function (ETransformMode::Type)",
    "insertText": "GetTransformMode()"
  },
  {
    "label": "GetDesignerGeometry()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "GetDesignerGeometry()"
  },
  {
    "label": "GetWidgetOriginAbsolute()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetWidgetOriginAbsolute()"
  },
  {
    "label": "GetWidgetGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetGeometry(const FWidgetReference& Widget, FGeometry& Geometry)"
  },
  {
    "label": "GetWidgetGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetGeometry(const UWidget* PreviewWidget, FGeometry& Geometry)"
  },
  {
    "label": "GetWidgetParentGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWidgetParentGeometry(const FWidgetReference& Widget, FGeometry& Geometry)"
  },
  {
    "label": "MakeGeometryWindowLocal()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "MakeGeometryWindowLocal(const FGeometry& WidgetGeometry)"
  },
  {
    "label": "MarkDesignModifed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkDesignModifed(bool bRequiresRecompile)"
  },
  {
    "label": "PushDesignerMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushDesignerMessage(const FText& Message)"
  },
  {
    "label": "PopDesignerMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopDesignerMessage()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetPreviewAreaWidth()",
    "kind": "Method",
    "detail": "Function (} public : FOptionalSize)",
    "insertText": "GetPreviewAreaWidth()"
  },
  {
    "label": "GetPreviewAreaHeight()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetPreviewAreaHeight()"
  },
  {
    "label": "GetPreviewSizeWidth()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetPreviewSizeWidth()"
  },
  {
    "label": "GetPreviewSizeHeight()",
    "kind": "Method",
    "detail": "Function (FOptionalSize)",
    "insertText": "GetPreviewSizeHeight()"
  },
  {
    "label": "GetPreviewDPIScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPreviewDPIScale()"
  },
  {
    "label": "SetPreviewAreaSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewAreaSize(int32 Width, int32 Height)"
  },
  {
    "label": "BeginResizingArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginResizingArea()"
  },
  {
    "label": "EndResizingArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndResizingArea()"
  },
  {
    "label": "GetRelevantSettings()",
    "kind": "Method",
    "detail": "Function (const UWidgetEditingProjectSettings*)",
    "insertText": "GetRelevantSettings()"
  },
  {
    "label": "OnPaintBackground()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPaintBackground(const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "DrawResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawResolution(const FDebugResolution& Resolution, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId)"
  },
  {
    "label": "ComputeAreaBounds()",
    "kind": "Method",
    "detail": "Function (FSlateRect)",
    "insertText": "ComputeAreaBounds()"
  },
  {
    "label": "GetGraphRulePeriod()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGraphRulePeriod()"
  },
  {
    "label": "GetGridScaleAmount()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGridScaleAmount()"
  },
  {
    "label": "GetSnapGridSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSnapGridSize()"
  },
  {
    "label": "RegisterExtensions()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegisterExtensions()"
  },
  {
    "label": "SetStartupResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartupResolution()"
  },
  {
    "label": "GetAreaResizeHandlePosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetAreaResizeHandlePosition()"
  },
  {
    "label": "GetAreaResizeHandleVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetAreaResizeHandleVisibility()"
  },
  {
    "label": "GetPreviewBackground()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetPreviewBackground()"
  },
  {
    "label": "ResolvePendingSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolvePendingSelectedWidgets()"
  },
  {
    "label": "UpdatePreviewWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreviewWidget(bool bForceUpdate)"
  },
  {
    "label": "BroadcastDesignerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastDesignerChanged()"
  },
  {
    "label": "ClearExtensionWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExtensionWidgets()"
  },
  {
    "label": "CreateExtensionWidgetsForSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExtensionWidgetsForSelection()"
  },
  {
    "label": "GetInfoBarVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetInfoBarVisibility()"
  },
  {
    "label": "GetInfoBarText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetInfoBarText()"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnEditorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorSelectionChanged()"
  },
  {
    "label": "OnHoveredWidgetSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHoveredWidgetSet(const FWidgetReference& InHoveredWidget)"
  },
  {
    "label": "OnHoveredWidgetCleared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHoveredWidgetCleared()"
  },
  {
    "label": "GetBlueprint()",
    "kind": "Method",
    "detail": "Function (UWidgetBlueprint*)",
    "insertText": "GetBlueprint()"
  },
  {
    "label": "OnPreviewNeedsRecreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewNeedsRecreation()"
  },
  {
    "label": "PopulateWidgetGeometryCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateWidgetGeometryCache(FArrangedWidget& Root)"
  },
  {
    "label": "PopulateWidgetGeometryCache_Loop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateWidgetGeometryCache_Loop(FArrangedWidget& Parent)"
  },
  {
    "label": "GetResolutionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetResolutionText(int32 Width, int32 Height, const FString& AspectRatio)"
  },
  {
    "label": "NudgeSelectedWidget()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NudgeSelectedWidget(FVector2D Nudge)"
  },
  {
    "label": "GetCurrentResolutionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentResolutionText()"
  },
  {
    "label": "GetCurrentDPIScaleText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentDPIScaleText()"
  },
  {
    "label": "GetCurrentDPIScaleColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetCurrentDPIScaleColor()"
  },
  {
    "label": "GetCurrentScaleFactorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentScaleFactorText()"
  },
  {
    "label": "GetCurrentSafeZoneText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCurrentSafeZoneText()"
  },
  {
    "label": "GetResolutionTextColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetResolutionTextColorAndOpacity()"
  },
  {
    "label": "GetResolutionTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetResolutionTextVisibility()"
  },
  {
    "label": "GetCustomResolutionWidth()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetCustomResolutionWidth()"
  },
  {
    "label": "GetCustomResolutionHeight()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetCustomResolutionHeight()"
  },
  {
    "label": "OnCustomResolutionWidthChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomResolutionWidthChanged(int32 InValue)"
  },
  {
    "label": "OnCustomResolutionHeightChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomResolutionHeightChanged(int32 InValue)"
  },
  {
    "label": "GetCustomResolutionEntryVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCustomResolutionEntryVisibility()"
  },
  {
    "label": "HandleOnCommonResolutionSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnCommonResolutionSelected(const FPlayScreenResolution InResolution)"
  },
  {
    "label": "HandleIsCommonResolutionSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleIsCommonResolutionSelected(const FPlayScreenResolution InResolution)"
  },
  {
    "label": "GetResolutionMenuAction()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "GetResolutionMenuAction(const FPlayScreenResolution& ScreenResolution)"
  },
  {
    "label": "GetResolutionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetResolutionsMenu()"
  },
  {
    "label": "GetScreenSizingFillMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetScreenSizingFillMenu()"
  },
  {
    "label": "CreateScreenFillEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateScreenFillEntry(FMenuBuilder& MenuBuilder, EDesignPreviewSizeMode SizeMode)"
  },
  {
    "label": "GetScreenSizingFillText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetScreenSizingFillText()"
  },
  {
    "label": "GetIsScreenFillRuleSelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsScreenFillRuleSelected(EDesignPreviewSizeMode SizeMode)"
  },
  {
    "label": "OnScreenFillRuleSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScreenFillRuleSelected(EDesignPreviewSizeMode SizeMode)"
  },
  {
    "label": "GetAspectRatioSwitchImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetAspectRatioSwitchImage()"
  },
  {
    "label": "GetAspectRatioSwitchEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAspectRatioSwitchEnabled()"
  },
  {
    "label": "GetFlipDeviceEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFlipDeviceEnabled()"
  },
  {
    "label": "GetDesignerOutlineVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetDesignerOutlineVisibility()"
  },
  {
    "label": "GetDesignerOutlineColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetDesignerOutlineColor()"
  },
  {
    "label": "GetDesignerOutlineText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDesignerOutlineText()"
  },
  {
    "label": "GetCursorPositionText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetCursorPositionText()"
  },
  {
    "label": "GetCursorPositionTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCursorPositionTextVisibility()"
  },
  {
    "label": "GetSelectedWidgetDimensionsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedWidgetDimensionsText()"
  },
  {
    "label": "GetSelectedWidgetDimensionsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSelectedWidgetDimensionsVisibility()"
  },
  {
    "label": "HandleEffectsPainting()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HandleEffectsPainting(const FOnPaintHandlerParams& PaintArgs)"
  },
  {
    "label": "DrawSelectionAndHoverOutline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSelectionAndHoverOutline(const FOnPaintHandlerParams& PaintArgs)"
  },
  {
    "label": "DrawSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeZone(const FOnPaintHandlerParams& PaintArgs)"
  },
  {
    "label": "HandleDPISettingsClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDPISettingsClicked()"
  },
  {
    "label": "GetDefaultWidget()",
    "kind": "Method",
    "detail": "Function (UUserWidget*)",
    "insertText": "GetDefaultWidget()"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTransaction(const FText& SessionName)"
  },
  {
    "label": "InTransaction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InTransaction()"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransaction(bool bCancel)"
  },
  {
    "label": "GetWidgetInDesignScopeFromSlateWidget()",
    "kind": "Method",
    "detail": "Function (UWidget*)",
    "insertText": "GetWidgetInDesignScopeFromSlateWidget(TSharedRef<SWidget>& InWidget)"
  },
  {
    "label": "GetExtensionCanvasVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetExtensionCanvasVisibility()"
  },
  {
    "label": "FWidgetHitResult()",
    "kind": "Method",
    "detail": "Function (private : struct FWidgetHitResult { public : FWidgetReference Widget ; FArrangedWidget WidgetArranged ; FName NamedSlot ; public :)",
    "insertText": "FWidgetHitResult()"
  },
  {
    "label": "FindWidgetUnderCursor()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "FindWidgetUnderCursor(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, TSubclassOf<UWidget> FindType, FWidgetHitResult& HitResult)"
  },
  {
    "label": "HandleZoomToFitClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "HandleZoomToFitClicked()"
  },
  {
    "label": "HandleSwapAspectRatioClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleSwapAspectRatioClicked()"
  },
  {
    "label": "HandleFlipSafeZonesClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleFlipSafeZonesClicked()"
  },
  {
    "label": "GetRulerVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetRulerVisibility()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (private : const FString ConfigSectionName ; const FString DefaultPreviewOverrideName ; TArray<TSharedRef<FDesignerExtension>> DesignerExtensions ; private : void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "SetTransformMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformMode(ETransformMode::Type InTransformMode)"
  },
  {
    "label": "CanSetTransformMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSetTransformMode(ETransformMode::Type InTransformMode)"
  },
  {
    "label": "IsTransformModeActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTransformModeActive(ETransformMode::Type InTransformMode)"
  },
  {
    "label": "ToggleShowingOutlines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowingOutlines()"
  },
  {
    "label": "IsShowingOutlines()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShowingOutlines()"
  },
  {
    "label": "ToggleRespectingLocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleRespectingLocks()"
  },
  {
    "label": "IsRespectingLocks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRespectingLocks()"
  },
  {
    "label": "ProcessDropAndAddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDropAndAddWidget(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent, const bool bIsPreview)"
  },
  {
    "label": "MoveWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWidgets(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent, const bool bIsPreview, UWidget* Target, const bool bAnyWidgetChangingParent)"
  },
  {
    "label": "GetExtensionPosition()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetExtensionPosition(TSharedRef<FDesignerSurfaceElement> ExtensionElement)"
  },
  {
    "label": "GetExtensionSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetExtensionSize(TSharedRef<FDesignerSurfaceElement> ExtensionElement)"
  },
  {
    "label": "ClearDropPreviews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDropPreviews()"
  },
  {
    "label": "DetermineDragDropPreviewWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineDragDropPreviewWidgets(TArray<UWidget*>& OutWidgets, const FDragDropEvent& DragDropEvent, UWidgetTree* RootWidgetTree)"
  },
  {
    "label": "SwapSafeZoneTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSafeZoneTypes()"
  },
  {
    "label": "IsSelectableInSequencer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSelectableInSequencer(UWidget* const InWidget)"
  },
  {
    "label": "OnSelectedAnimationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedAnimationChanged()"
  },
  {
    "label": "OnSelectionLimitedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionLimitedChanged(const bool bInEnabled)"
  },
  {
    "label": "DeselectNonSequencerWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectNonSequencerWidgets()"
  },
  {
    "label": "GetSelectionLimitedTextVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetSelectionLimitedTextVisibility()"
  }
]