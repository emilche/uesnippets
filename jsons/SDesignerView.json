[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FScopedTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedTransaction"
  },
  {
    "label": "SBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBox"
  },
  {
    "label": "SCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCanvas"
  },
  {
    "label": "SPaintSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPaintSurface"
  },
  {
    "label": "SRuler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRuler"
  },
  {
    "label": "SZoomPan",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SZoomPan"
  },
  {
    "label": "UPanelWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPanelWidget"
  },
  {
    "label": "UWidgetBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetBlueprint"
  },
  {
    "label": "FHittestGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHittestGrid"
  },
  {
    "label": "FOnPaintHandlerParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnPaintHandlerParams"
  },
  {
    "label": "FWidgetHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetHitResult"
  },
  {
    "label": "UWidgetEditingProjectSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWidgetEditingProjectSettings"
  },
  {
    "label": "UMGEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMGEDITOR_API"
  },
  {
    "label": "FWidgetBlueprintEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetBlueprintEditor"
  },
  {
    "label": "FWidgetHitResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWidgetHitResult"
  },
  {
    "label": "FDropPreview",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDropPreview"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedPtr<class FWidgetBlueprintEditor> InBlueprintEditor)"
  },
  {
    "label": "EnsureTick()",
    "kind": "Method",
    "detail": "Function (EActiveTimerReturnType)",
    "insertText": "EnsureTick(double InCurrentTime, float InDeltaTime)"
  },
  {
    "label": "CreateOverlayUI()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateOverlayUI()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Register(TSharedRef<FDesignerExtension> Extension)"
  },
  {
    "label": "Unregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unregister(TSharedRef<FDesignerExtension> Extension)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"SDesignerView\")"
  },
  {
    "label": "SetPreviewAreaSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewAreaSize(int32 Width, int32 Height)"
  },
  {
    "label": "BeginResizingArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginResizingArea()"
  },
  {
    "label": "EndResizingArea()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndResizingArea()"
  },
  {
    "label": "RegisterExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExtensions()"
  },
  {
    "label": "SetStartupResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartupResolution()"
  },
  {
    "label": "ResolvePendingSelectedWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResolvePendingSelectedWidgets()"
  },
  {
    "label": "UpdatePreviewWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePreviewWidget(bool bForceUpdate)"
  },
  {
    "label": "BroadcastDesignerChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastDesignerChanged()"
  },
  {
    "label": "ClearExtensionWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearExtensionWidgets()"
  },
  {
    "label": "CreateExtensionWidgetsForSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateExtensionWidgetsForSelection()"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnEditorSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditorSelectionChanged()"
  },
  {
    "label": "OnHoveredWidgetSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHoveredWidgetSet(const FWidgetReference& InHoveredWidget)"
  },
  {
    "label": "OnHoveredWidgetCleared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnHoveredWidgetCleared()"
  },
  {
    "label": "OnPreviewNeedsRecreation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreviewNeedsRecreation()"
  },
  {
    "label": "PopulateWidgetGeometryCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateWidgetGeometryCache(FArrangedWidget& Root)"
  },
  {
    "label": "PopulateWidgetGeometryCache_Loop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PopulateWidgetGeometryCache_Loop(FArrangedWidget& Parent)"
  },
  {
    "label": "NudgeSelectedWidget()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NudgeSelectedWidget(FVector2D Nudge)"
  },
  {
    "label": "OnCustomResolutionWidthChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomResolutionWidthChanged(int32 InValue)"
  },
  {
    "label": "OnCustomResolutionHeightChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomResolutionHeightChanged(int32 InValue)"
  },
  {
    "label": "HandleOnCommonResolutionSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleOnCommonResolutionSelected(const FPlayScreenResolution InResolution)"
  },
  {
    "label": "GetResolutionMenuAction()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "GetResolutionMenuAction( const FPlayScreenResolution& ScreenResolution )"
  },
  {
    "label": "GetResolutionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetResolutionsMenu()"
  },
  {
    "label": "GetScreenSizingFillMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetScreenSizingFillMenu()"
  },
  {
    "label": "CreateScreenFillEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateScreenFillEntry(FMenuBuilder& MenuBuilder, EDesignPreviewSizeMode SizeMode)"
  },
  {
    "label": "OnScreenFillRuleSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnScreenFillRuleSelected(EDesignPreviewSizeMode SizeMode)"
  },
  {
    "label": "HandleEffectsPainting()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "HandleEffectsPainting(const FOnPaintHandlerParams& PaintArgs)"
  },
  {
    "label": "DrawSelectionAndHoverOutline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSelectionAndHoverOutline(const FOnPaintHandlerParams& PaintArgs)"
  },
  {
    "label": "DrawSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSafeZone(const FOnPaintHandlerParams& PaintArgs)"
  },
  {
    "label": "HandleDPISettingsClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDPISettingsClicked()"
  },
  {
    "label": "BeginTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginTransaction(const FText& SessionName)"
  },
  {
    "label": "EndTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndTransaction(bool bCancel)"
  },
  {
    "label": "FWidgetHitResult()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FWidgetHitResult()"
  },
  {
    "label": "FindWidgetUnderCursor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindWidgetUnderCursor(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent, TSubclassOf<UWidget> FindType, FWidgetHitResult& HitResult)"
  },
  {
    "label": "HandleZoomToFitClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleZoomToFitClicked()"
  },
  {
    "label": "HandleSwapAspectRatioClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleSwapAspectRatioClicked()"
  },
  {
    "label": "HandleFlipSafeZonesClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleFlipSafeZonesClicked()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "SetTransformMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransformMode(ETransformMode::Type InTransformMode)"
  },
  {
    "label": "ToggleShowingOutlines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleShowingOutlines()"
  },
  {
    "label": "ToggleRespectingLocks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleRespectingLocks()"
  },
  {
    "label": "ProcessDropAndAddWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessDropAndAddWidget(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent, const bool bIsPreview)"
  },
  {
    "label": "MoveWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveWidgets(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent, const bool bIsPreview, UWidget* Target, const bool bAnyWidgetChangingParent)"
  },
  {
    "label": "ClearDropPreviews()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDropPreviews()"
  },
  {
    "label": "DetermineDragDropPreviewWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DetermineDragDropPreviewWidgets(TArray<UWidget*>& OutWidgets, const FDragDropEvent& DragDropEvent, UWidgetTree* RootWidgetTree)"
  },
  {
    "label": "SwapSafeZoneTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SwapSafeZoneTypes()"
  },
  {
    "label": "OnSelectedAnimationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedAnimationChanged()"
  },
  {
    "label": "OnSelectionLimitedChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionLimitedChanged(const bool bInEnabled)"
  },
  {
    "label": "DeselectNonSequencerWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeselectNonSequencerWidgets()"
  }
]