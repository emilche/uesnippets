[
  {
    "label": "FCollectionTransformFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCollectionTransformFacade"
  },
  {
    "label": "FCollectionTransformFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" namespace GeometryCollection::Facades { class FCollectionTransformFacade { public :)",
    "insertText": "FCollectionTransformFacade(FManagedArrayCollection& InCollection)"
  },
  {
    "label": "FCollectionTransformFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FCollectionTransformFacade(const FManagedArrayCollection& InCollection)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetRootIndices()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetRootIndices()"
  },
  {
    "label": "GetParents()",
    "kind": "Method",
    "detail": "Function (const TManagedArray<int32>*)",
    "insertText": "GetParents()"
  },
  {
    "label": "FindChildren()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<TSet<int32>>*)",
    "insertText": "FindChildren()"
  },
  {
    "label": "FindTransforms()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<FTransform3f>*)",
    "insertText": "FindTransforms()"
  },
  {
    "label": "FindBoneNames()",
    "kind": "Method",
    "detail": "Function (} const TManagedArray<FString>*)",
    "insertText": "FindBoneNames()"
  },
  {
    "label": "ComputeCollectionSpaceTransforms()",
    "kind": "Method",
    "detail": "Function (} TArray<FTransform>)",
    "insertText": "ComputeCollectionSpaceTransforms()"
  },
  {
    "label": "ComputeCollectionSpaceTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "ComputeCollectionSpaceTransform(int32 BoneIdx)"
  },
  {
    "label": "SetPivot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPivot(const FTransform& InTransform)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transform(const FTransform& InTransform)"
  },
  {
    "label": "Transform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Transform(const FTransform& InTransform, const TArray<int32>& InSelection)"
  },
  {
    "label": "HasBoneNameAttribute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasBoneNameAttribute()"
  },
  {
    "label": "BoneName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "BoneName(int32 Index)"
  },
  {
    "label": "BoneNameIndexMap()",
    "kind": "Method",
    "detail": "Function (TMap<FString,int32>)",
    "insertText": "BoneNameIndexMap()"
  },
  {
    "label": "BuildMatrix()",
    "kind": "Method",
    "detail": "Function (FMatrix)",
    "insertText": "BuildMatrix(const FVector& Translate, const uint8 RotationOrder, const FVector& Rotate, const FVector& Scale, const FVector& Shear, const float UniformScale, const FVector& RotatePivot, const FVector& ScalePivot, const bool InvertTransformation)"
  },
  {
    "label": "BuildTransform()",
    "kind": "Method",
    "detail": "Function (FTransform)",
    "insertText": "BuildTransform(const FVector& Translate, const uint8 RotationOrder, const FVector& Rotate, const FVector& Scale, const float UniformScale, const FVector& RotatePivot, const FVector& ScalePivot, const bool InvertTransformation)"
  },
  {
    "label": "SetBoneTransformToIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTransformToIdentity(int32 BoneIdx)"
  },
  {
    "label": "HasCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCycle(const TManagedArray<int32>& Parents, int32 Node)"
  },
  {
    "label": "HasCycle()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasCycle(const TManagedArray<int32>& Parents, const TArray<int32>& SelectedBones)"
  },
  {
    "label": "ParentTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParentTransform(const int32 TransformIndex, const int32 ChildIndex)"
  },
  {
    "label": "ParentTransforms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParentTransforms(const int32 TransformIndex, const TArray<int32>& SelectedBones)"
  },
  {
    "label": "UnparentTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnparentTransform(const int32 ChildIndex)"
  },
  {
    "label": "EnforceSingleRoot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnforceSingleRoot(const FString & RootName)"
  }
]