[
  {
    "label": "ifaddrs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ifaddrs"
  },
  {
    "label": "IfAddrsConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IfAddrsConverter"
  },
  {
    "label": "Network",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Network"
  },
  {
    "label": "NetworkMonitorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkMonitorInterface"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "DefaultLocalAddressProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultLocalAddressProvider"
  },
  {
    "label": "MdnsResponderProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MdnsResponderProvider"
  },
  {
    "label": "NetworkMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkMask"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "indicates",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "indicates"
  },
  {
    "label": "EnumerationPermission",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EnumerationPermission"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "NetworkTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkTest"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "ifaddrs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ifaddrs"
  },
  {
    "label": "NetworkTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkTest"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "NetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkManager"
  },
  {
    "label": "CompareNetworks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompareNetworks(const std::unique_ptr<Network>& a,\n                     const std::unique_ptr<Network>& b)"
  },
  {
    "label": "MakeNetworkKey()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "MakeNetworkKey(absl::string_view name,\n                           const IPAddress& prefix,\n                           int prefix_length)"
  },
  {
    "label": "GetAdapterTypeFromName()",
    "kind": "Method",
    "detail": "Function (AdapterType)",
    "insertText": "GetAdapterTypeFromName(absl::string_view network_name)"
  },
  {
    "label": "NetworkManagerBase()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "NetworkManagerBase(const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "IsVpnMacAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVpnMacAddress(rtc::ArrayView<const uint8_t> address)"
  },
  {
    "label": "MergeNetworkList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeNetworkList(std::vector<std::unique_ptr<Network>> list,\n                        bool* changed)"
  },
  {
    "label": "MergeNetworkList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeNetworkList(std::vector<std::unique_ptr<Network>> list,\n                        bool* changed,\n                        NetworkManager::Stats* stats)"
  },
  {
    "label": "set_default_local_addresses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_default_local_addresses(const IPAddress& ipv4,\n                                   const IPAddress& ipv6)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(thread_)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(thread_)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(thread_)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(thread_)"
  },
  {
    "label": "RTC_RUN_ON()",
    "kind": "Method",
    "detail": "Function (const)",
    "insertText": "RTC_RUN_ON(thread_)"
  },
  {
    "label": "OnNetworksChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworksChanged()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (network_monitor_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "SetIPs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetIPs(const std::vector<InterfaceAddress>& ips, bool already_changed)"
  },
  {
    "label": "IsCellular()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "IsCellular(type_)"
  }
]