[
  {
    "label": "ifaddrs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ifaddrs"
  },
  {
    "label": "IfAddrsConverter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IfAddrsConverter"
  },
  {
    "label": "Network",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Network"
  },
  {
    "label": "NetworkMonitorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkMonitorInterface"
  },
  {
    "label": "Thread",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Thread"
  },
  {
    "label": "DefaultLocalAddressProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DefaultLocalAddressProvider"
  },
  {
    "label": "MdnsResponderProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MdnsResponderProvider"
  },
  {
    "label": "NetworkMask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkMask"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "EnumerationPermission",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EnumerationPermission"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "NetworkTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkTest"
  },
  {
    "label": "NetworkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkManager"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NETWORK_H_ # define RTC_BASE_NETWORK_H_ # include<stdint . h> # include<deque> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / base / attributes . h \" # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / field_trials_view . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / pending_task_safety_flag . h \" # include \" api / transport / field_trial_based_config . h \" # include \" rtc_base / ip_address . h \" # include \" rtc_base / mdns_responder_interface . h \" # include \" rtc_base / memory / always_valid_pointer . h \" # include \" rtc_base / network_monitor . h \" # include \" rtc_base / network_monitor_factory . h \" # include \" rtc_base / socket_factory . h \" # include \" rtc_base / system / rtc_export . h \" # include \" rtc_base / third_party / sigslot / sigslot . h \" # include \" rtc_base / thread_annotations . h \" # if)",
    "insertText": "defined(WEBRTC_POSIX)"
  },
  {
    "label": "CompareNetworks()",
    "kind": "Method",
    "detail": "Function (# endif namespace rtc { const char kPublicIPv4Host [ ] ; const char kPublicIPv6Host [ ] ; class IfAddrsConverter ; class Network ; class NetworkMonitorInterface ; class Thread ; const int kDefaultNetworkIgnoreMask = ADAPTER_TYPE_LOOPBACK ; namespace webrtc_network_internal { bool)",
    "insertText": "CompareNetworks(const std::unique_ptr<Network>& a, const std::unique_ptr<Network>& b)"
  },
  {
    "label": "MakeNetworkKey()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "MakeNetworkKey(absl::string_view name, const IPAddress& prefix, int prefix_length)"
  },
  {
    "label": "GetAdapterTypeFromName()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT AdapterType)",
    "insertText": "GetAdapterTypeFromName(absl::string_view network_name)"
  },
  {
    "label": "DefaultLocalAddressProvider()",
    "kind": "Method",
    "detail": "Function (class DefaultLocalAddressProvider { public : ~)",
    "insertText": "DefaultLocalAddressProvider()"
  },
  {
    "label": "GetDefaultLocalAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDefaultLocalAddress(int family, IPAddress* ipaddr)"
  },
  {
    "label": "MdnsResponderProvider()",
    "kind": "Method",
    "detail": "Function (} ; class MdnsResponderProvider { public : ~)",
    "insertText": "MdnsResponderProvider()"
  },
  {
    "label": "GetMdnsResponder()",
    "kind": "Method",
    "detail": "Function (webrtc::MdnsResponderInterface*)",
    "insertText": "GetMdnsResponder()"
  },
  {
    "label": "NetworkMask()",
    "kind": "Method",
    "detail": "Function (} ; class NetworkMask { public :)",
    "insertText": "NetworkMask(const IPAddress& addr, int prefix_length) : address_(addr), prefix_length_(prefix_length)"
  },
  {
    "label": "address()",
    "kind": "Method",
    "detail": "Function (} const IPAddress&)",
    "insertText": "address()"
  },
  {
    "label": "StartUpdating()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartUpdating()"
  },
  {
    "label": "StopUpdating()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopUpdating()"
  },
  {
    "label": "GetNetworks()",
    "kind": "Method",
    "detail": "Function (std::vector<const Network*>)",
    "insertText": "GetNetworks()"
  },
  {
    "label": "enumeration_permission()",
    "kind": "Method",
    "detail": "Function (EnumerationPermission)",
    "insertText": "enumeration_permission()"
  },
  {
    "label": "GetAnyAddressNetworks()",
    "kind": "Method",
    "detail": "Function (std::vector<const Network*>)",
    "insertText": "GetAnyAddressNetworks()"
  },
  {
    "label": "DumpNetworks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpNetworks()"
  },
  {
    "label": "Stats()",
    "kind": "Method",
    "detail": "Function (struct Stats { int ipv4_network_count ; int ipv6_network_count ;)",
    "insertText": "Stats()"
  },
  {
    "label": "set_vpn_list()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_vpn_list(const std::vector<NetworkMask>& vpn)"
  },
  {
    "label": "NetworkManagerBase()",
    "kind": "Method",
    "detail": "Function (} } ; class RTC_EXPORT NetworkManagerBase : public NetworkManager { public :)",
    "insertText": "NetworkManagerBase(const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "IsVpnMacAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVpnMacAddress(rtc::ArrayView<const uint8_t> address)"
  },
  {
    "label": "MergeNetworkList()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "MergeNetworkList(std::vector<std::unique_ptr<Network>> list, bool* changed)"
  },
  {
    "label": "MergeNetworkList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergeNetworkList(std::vector<std::unique_ptr<Network>> list, bool* changed, NetworkManager::Stats* stats)"
  },
  {
    "label": "set_enumeration_permission()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_enumeration_permission(EnumerationPermission state)"
  },
  {
    "label": "set_default_local_addresses()",
    "kind": "Method",
    "detail": "Function (enumeration_permission_ = state ; } void)",
    "insertText": "set_default_local_addresses(const IPAddress& ipv4, const IPAddress& ipv6)"
  },
  {
    "label": "GetNetworkFromAddress()",
    "kind": "Method",
    "detail": "Function (Network*)",
    "insertText": "GetNetworkFromAddress(const rtc::IPAddress& ip)"
  },
  {
    "label": "GetNetworksInternal()",
    "kind": "Method",
    "detail": "Function (const std::vector<Network*>&)",
    "insertText": "GetNetworksInternal()"
  },
  {
    "label": "BasicNetworkManager()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BasicNetworkManager(NetworkMonitorFactory* network_monitor_factory, SocketFactory* socket_factory, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "BasicNetworkManager()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "BasicNetworkManager()"
  },
  {
    "label": "started()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "started()"
  },
  {
    "label": "RTC_DCHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK(thread_ == nullptr)"
  },
  {
    "label": "IsConfiguredVpn()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConfiguredVpn(IPAddress prefix, int prefix_length)"
  },
  {
    "label": "BindSocketToNetwork()",
    "kind": "Method",
    "detail": "Function (NetworkBindingResult)",
    "insertText": "BindSocketToNetwork(int socket_fd, const IPAddress& address)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (protected : # if)",
    "insertText": "defined(WEBRTC_POSIX) void ConvertIfAddrs(ifaddrs* interfaces, IfAddrsConverter* converter, bool include_ignored, std::vector<std::unique_ptr<Network>>* networks) const RTC_RUN_ON(thread_)"
  },
  {
    "label": "GetInterfaceInfo()",
    "kind": "Method",
    "detail": "Function (NetworkMonitorInterface::InterfaceInfo)",
    "insertText": "GetInterfaceInfo(struct ifaddrs* cursor) const RTC_RUN_ON(thread_)"
  },
  {
    "label": "CreateNetworks()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CreateNetworks(bool include_ignored, std::vector<std::unique_ptr<Network>>* networks) const RTC_RUN_ON(thread_)"
  },
  {
    "label": "IsIgnoredNetwork()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsIgnoredNetwork(const Network& network) const RTC_RUN_ON(thread_)"
  },
  {
    "label": "QueryDefaultLocalAddress()",
    "kind": "Method",
    "detail": "Function (IPAddress)",
    "insertText": "QueryDefaultLocalAddress(int family) const RTC_RUN_ON(thread_)"
  },
  {
    "label": "StartNetworkMonitor()",
    "kind": "Method",
    "detail": "Function (private : class NetworkTest ; void)",
    "insertText": "StartNetworkMonitor() RTC_RUN_ON(thread_)"
  },
  {
    "label": "StopNetworkMonitor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopNetworkMonitor() RTC_RUN_ON(thread_)"
  },
  {
    "label": "OnNetworksChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNetworksChanged()"
  },
  {
    "label": "UpdateNetworksContinually()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworksContinually() RTC_RUN_ON(thread_)"
  },
  {
    "label": "UpdateNetworksOnce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNetworksOnce() RTC_RUN_ON(thread_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Thread* thread_ = nullptr ; bool sent_first_update_ = true ; int start_count_ = 0 ; webrtc::AlwaysValidPointer<const webrtc::FieldTrialsView,webrtc::FieldTrialBasedConfig> field_trials_ ; std::vector<std::string> network_ignore_list_ ; NetworkMonitorFactory* const network_monitor_factory_ ; SocketFactory* const socket_factory_ ; std::unique_ptr<NetworkMonitorInterface> network_monitor_)",
    "insertText": "RTC_GUARDED_BY(thread_)"
  },
  {
    "label": "Network()",
    "kind": "Method",
    "detail": "Function (std::vector<NetworkMask> vpn_ ; rtc::scoped_refptr<webrtc::PendingTaskSafetyFlag> task_safety_flag_ ; } ; class RTC_EXPORT Network { public :)",
    "insertText": "Network(absl::string_view name, absl::string_view description, const IPAddress& prefix, int prefix_length, const webrtc::FieldTrialsView* field_trials = nullptr) : Network(name, description, prefix, prefix_length, rtc::ADAPTER_TYPE_UNKNOWN, field_trials)"
  },
  {
    "label": "Network()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Network(absl::string_view name, absl::string_view description, const IPAddress& prefix, int prefix_length, AdapterType type, const webrtc::FieldTrialsView* field_trials = nullptr)"
  },
  {
    "label": "Network()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Network(const Network&)"
  },
  {
    "label": "Network()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "Network()"
  },
  {
    "label": "default_local_address_provider()",
    "kind": "Method",
    "detail": "Function (sigslot::signal1<const Network*> SignalTypeChanged ; sigslot::signal1<const Network*> SignalNetworkPreferenceChanged ; const DefaultLocalAddressProvider*)",
    "insertText": "default_local_address_provider()"
  },
  {
    "label": "set_mdns_responder_provider()",
    "kind": "Method",
    "detail": "Function (default_local_address_provider_ = provider ; } void)",
    "insertText": "set_mdns_responder_provider(const MdnsResponderProvider* provider)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (mdns_responder_provider_ = provider ; } const std::string&)",
    "insertText": "name()"
  },
  {
    "label": "key()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "key()"
  },
  {
    "label": "AddIP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddIP(const InterfaceAddress& ip)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ips_ .)",
    "insertText": "push_back(ip)"
  },
  {
    "label": "AddIP()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddIP(const IPAddress& ip)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (ips_ .)",
    "insertText": "push_back(rtc::InterfaceAddress(ip))"
  },
  {
    "label": "SetIPs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetIPs(const std::vector<InterfaceAddress>& ips, bool already_changed)"
  },
  {
    "label": "GetIPs()",
    "kind": "Method",
    "detail": "Function (const std::vector<InterfaceAddress>&)",
    "insertText": "GetIPs()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (ips_ .)",
    "insertText": "clear()"
  },
  {
    "label": "scope_id()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "scope_id()"
  },
  {
    "label": "ignored()",
    "kind": "Method",
    "detail": "Function (scope_id_ = id ; } bool)",
    "insertText": "ignored()"
  },
  {
    "label": "type()",
    "kind": "Method",
    "detail": "Function (ignored_ = ignored ; } AdapterType)",
    "insertText": "type()"
  },
  {
    "label": "SignalTypeChanged()",
    "kind": "Method",
    "detail": "Function (underlying_type_for_vpn_ = ADAPTER_TYPE_UNKNOWN ; })",
    "insertText": "SignalTypeChanged(this)"
  },
  {
    "label": "set_underlying_type_for_vpn()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "set_underlying_type_for_vpn(AdapterType type)"
  },
  {
    "label": "IsVpn()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVpn()"
  },
  {
    "label": "IsCellular()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCellular(AdapterType type)"
  },
  {
    "label": "GetCost()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "GetCost(const webrtc::FieldTrialsView& field_trials)"
  },
  {
    "label": "id()",
    "kind": "Method",
    "detail": "Function (uint16_t)",
    "insertText": "id()"
  },
  {
    "label": "preference()",
    "kind": "Method",
    "detail": "Function (id_ = id ; } int)",
    "insertText": "preference()"
  },
  {
    "label": "active()",
    "kind": "Method",
    "detail": "Function (preference_ = preference ; } bool)",
    "insertText": "active()"
  },
  {
    "label": "network_preference()",
    "kind": "Method",
    "detail": "Function (active_ = active ; } } NetworkPreference)",
    "insertText": "network_preference()"
  },
  {
    "label": "GuessAdapterFromNetworkCost()",
    "kind": "Method",
    "detail": "Function (} std::pair<rtc::AdapterType,bool>)",
    "insertText": "GuessAdapterFromNetworkCost(int network_cost)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "ToString()"
  }
]