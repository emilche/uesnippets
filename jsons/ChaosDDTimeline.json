[
  {
    "label": "CHAOS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHAOS_API"
  },
  {
    "label": "FChaosDDTimeline()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ChaosDebugDraw / ChaosDDTypes . h \" # include \" ChaosDebugDraw / ChaosDDFrame . h \" # include \" ChaosDebugDraw / ChaosDDLog . h \" # include \" Containers / Map . h \" # include \" HAL / CriticalSection . h \" # include \" Math / Sphere . h \" # include \" Misc / ScopeLock . h \" # if CHAOS_DEBUG_DRAW namespace ChaosDD::Private { class FChaosDDTimeline : public TSharedFromThis<FChaosDDTimeline> { public :)",
    "insertText": "FChaosDDTimeline(const FString& InName, int32 InCommandBudget) : Name(InName) , MaxFrames(1) , NextFrameIndex(0) , DrawRegion(FSphere3d(FVector::Zero(), 0.0)) , CommandBudget(InCommandBudget) , CommandQueueLength(0)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (} const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "Lock(&FramesCS)"
  },
  {
    "label": "SetCommandBudget()",
    "kind": "Method",
    "detail": "Function (DrawRegion = InDrawRegion ; } void)",
    "insertText": "SetCommandBudget(int32 InCommandBudget)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (CommandBudget = InCommandBudget ; } void)",
    "insertText": "BeginFrame(double InTime, double InDt)"
  },
  {
    "label": "FChaosDDFrame()",
    "kind": "Method",
    "detail": "Function (ActiveFrame = MakeShared<)",
    "insertText": "FChaosDDFrame(this->AsShared(), NextFrameIndex++, InTime, InDt, DrawRegion, CommandBudget, CommandQueueLength)"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (CommandQueueLength =)",
    "insertText": "RoundUpToPowerOfTwo(FMath::Max(CommandQueueLength, ActiveFrame->GetNumCommands()))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Frames .)",
    "insertText": "Add(ActiveFrame)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (ActiveFrame .)",
    "insertText": "Reset()"
  },
  {
    "label": "PruneFrames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PruneFrames()"
  },
  {
    "label": "GetActiveFrame()",
    "kind": "Method",
    "detail": "Function (} const FChaosDDFramePtr&)",
    "insertText": "GetActiveFrame()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InOutFrames .)",
    "insertText": "Add(Frame)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 NumToRemove = Frames .)",
    "insertText": "Num()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Frames .)",
    "insertText": "RemoveAt(0, NumToRemove, EAllowShrinking::No)"
  }
]