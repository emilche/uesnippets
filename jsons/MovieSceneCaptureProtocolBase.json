[
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FFrameRate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameRate"
  },
  {
    "label": "FFrameMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameMetrics"
  },
  {
    "label": "ICaptureProtocolHost",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICaptureProtocolHost"
  },
  {
    "label": "FMovieSceneCaptureSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneCaptureSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCaptureProtocolInitSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCaptureProtocolInitSettings"
  },
  {
    "label": "UMovieSceneCaptureProtocolBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCaptureProtocolBase"
  },
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "UMovieSceneImageCaptureProtocolBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneImageCaptureProtocolBase"
  },
  {
    "label": "UMovieSceneAudioCaptureProtocolBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneAudioCaptureProtocolBase"
  },
  {
    "label": "ICaptureStrategy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ICaptureStrategy"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / Interface . h \" # include \" MovieSceneCaptureSettings . h \" # include \" MovieSceneCaptureProtocolBase . generated . h \" class FSceneViewport ; struct FFrameRate ; struct FFrameMetrics ; struct ICaptureProtocolHost ; struct FMovieSceneCaptureSettings ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "FromSlateViewport()",
    "kind": "Method",
    "detail": "Function (Idle,Initialized,Capturing,Finalizing,} ; struct FCaptureProtocolInitSettings { FCaptureProtocolInitSettings)",
    "insertText": "FromSlateViewport(TSharedRef<FSceneViewport> InSceneViewport)"
  },
  {
    "label": "FCaptureProtocolInitSettings()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSceneViewport> SceneViewport ; FIntPoint DesiredSize ; private :)",
    "insertText": "FCaptureProtocolInitSettings()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(config=EditorPerProjectUserSettings, PerObjectConfig, Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() MOVIESCENECAPTURE_API UMovieSceneCaptureProtocolBase(const FObjectInitializer& ObjInit)"
  },
  {
    "label": "GetWorld()",
    "kind": "Method",
    "detail": "Function (class UWorld*)",
    "insertText": "GetWorld()"
  },
  {
    "label": "PreTick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "PreTick()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "WarmUp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WarmUp()"
  },
  {
    "label": "StartCapture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StartCapture()"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame(const FFrameMetrics& FrameMetrics)"
  },
  {
    "label": "BeginFinalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFinalize()"
  },
  {
    "label": "HasFinishedProcessing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFinishedProcessing()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "AddFormatMappings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFormatMappings(TMap<FString, FStringFormatArg>& FormatMappings)"
  },
  {
    "label": "OnReleaseConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReleaseConfig(FMovieSceneCaptureSettings& InSettings)"
  },
  {
    "label": "OnLoadConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLoadConfig(FMovieSceneCaptureSettings& InSettings)"
  },
  {
    "label": "CanWriteToFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanWriteToFile(const TCHAR* InFilename, bool bOverwriteExisting)"
  },
  {
    "label": "SetupImpl()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SetupImpl()"
  },
  {
    "label": "TickImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TickImpl()"
  },
  {
    "label": "WarmUpImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WarmUpImpl()"
  },
  {
    "label": "StartCaptureImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartCaptureImpl()"
  },
  {
    "label": "PauseCaptureImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PauseCaptureImpl()"
  },
  {
    "label": "BeginFinalizeImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BeginFinalizeImpl()"
  },
  {
    "label": "HasFinishedProcessingImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasFinishedProcessingImpl()"
  },
  {
    "label": "AddFormatMappingsImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddFormatMappingsImpl(TMap<FString, FStringFormatArg>& FormatMappings)"
  },
  {
    "label": "OnReleaseConfigImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReleaseConfigImpl(FMovieSceneCaptureSettings& InSettings)"
  },
  {
    "label": "OnLoadConfigImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnLoadConfigImpl(FMovieSceneCaptureSettings& InSettings)"
  },
  {
    "label": "CanWriteToFileImpl()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanWriteToFileImpl(const TCHAR* InFilename, bool bOverwriteExisting)"
  },
  {
    "label": "GenerateFilenameImpl()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateFilenameImpl(const FFrameMetrics& FrameMetrics, const TCHAR* Extension, const FString* NameFormatString = nullptr)"
  },
  {
    "label": "EnsureFileWritableImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureFileWritableImpl(const FString& File)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (bool bFrameRequested [ 2 ] ; } ;)",
    "insertText": "UCLASS(config = EditorPerProjectUserSettings, PerObjectConfig, Abstract, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMovieSceneImageCaptureProtocolBase(const FObjectInitializer& ObjInit) : UMovieSceneCaptureProtocolBase(ObjInit)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UMovieSceneAudioCaptureProtocolBase(const FObjectInitializer& ObjInit) : UMovieSceneCaptureProtocolBase(ObjInit)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FFrameMetrics() : TotalElapsedTime(0), FrameDelta(0), FrameNumber(0), NumDroppedFrames(0)"
  },
  {
    "label": "FFrameMetrics()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameMetrics(float InTotalElapsedTime, float InFrameDelta, int32 InFrameNumber, int32 InNumDroppedFrames) : TotalElapsedTime(InTotalElapsedTime), FrameDelta(InFrameDelta), FrameNumber(InFrameNumber), NumDroppedFrames(InNumDroppedFrames)"
  },
  {
    "label": "ICaptureStrategy()",
    "kind": "Method",
    "detail": "Function (} ; struct ICaptureStrategy { ~)",
    "insertText": "ICaptureStrategy()"
  },
  {
    "label": "OnInitialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnInitialize()"
  },
  {
    "label": "OnStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStop()"
  },
  {
    "label": "ShouldSynchronizeFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSynchronizeFrames()"
  },
  {
    "label": "GetDroppedFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDroppedFrames(double CurrentTimeSeconds, uint32 FrameIndex)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (} ; struct ICaptureProtocolHost { const FMovieSceneCaptureSettings&)",
    "insertText": "GetSettings()"
  },
  {
    "label": "GetFrameNumberOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "GetFrameNumberOffset()"
  },
  {
    "label": "GetCaptureFrameRate()",
    "kind": "Method",
    "detail": "Function (FFrameRate)",
    "insertText": "GetCaptureFrameRate()"
  },
  {
    "label": "GetCaptureStrategy()",
    "kind": "Method",
    "detail": "Function (const ICaptureStrategy&)",
    "insertText": "GetCaptureStrategy()"
  },
  {
    "label": "ResolveFileFormat()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ResolveFileFormat(const FString& Format, const FFrameMetrics& FrameMetrics)"
  },
  {
    "label": "GetEstimatedCaptureDurationSeconds()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetEstimatedCaptureDurationSeconds()"
  }
]