[
  {
    "label": "FPBDTriangleMeshIntersections",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDTriangleMeshIntersections"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDTriangleMeshCollisions . h \" # include \" Chaos / CollectionPropertyFacade . h \" namespace Chaos::Softs { class FPBDTriangleMeshIntersections { public : bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FPBDTriangleMeshIntersections()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPBDTriangleMeshIntersections(const int32 InOffset, const int32 InNumParticles, const FTriangleMesh& InTriangleMesh ) :TriangleMesh(InTriangleMesh) , Offset(InOffset) , NumParticles(InNumParticles)"
  },
  {
    "label": "FPBDTriangleMeshIntersections()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDTriangleMeshIntersections()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const TArray<FPBDTriangleMeshCollisions::FContourMinimizationIntersection>& Intersections, const FSolverReal Dt)"
  }
]