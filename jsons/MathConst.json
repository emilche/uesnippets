[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "GetMinMax()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" namespace UE::CADKernel { template<ValueType> const void)",
    "insertText": "GetMinMax(const ValueType& ValueA, const ValueType& ValueB, ValueType& OutMin, ValueType& OutMax)"
  },
  {
    "label": "GetMinMax()",
    "kind": "Method",
    "detail": "Function (OutMin = ValueA ; OutMax = ValueB ; } else { OutMin = ValueB ; OutMax = ValueA ; } } template<ValueType> const void)",
    "insertText": "GetMinMax(ValueType& Min, ValueType& Max)"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Swap(Min, Max)"
  },
  {
    "label": "IsWithinExclusive()",
    "kind": "Method",
    "detail": "Function (} } template<ValueType> bool)",
    "insertText": "IsWithinExclusive(const ValueType& TestValue, const ValueType& MinValue, const ValueType& MaxValue)"
  },
  {
    "label": "RealCompare()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RealCompare(const double Value1, const double Value2, const double Tolerance = DOUBLE_SMALL_NUMBER)"
  },
  {
    "label": "WrapTo()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "WrapTo(double Slope, const double StartOfPeriod, const double EndOfPeriod, const double PeriodLength)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Slope + = PeriodLength ; })",
    "insertText": "while(Slope >= EndOfPeriod)"
  }
]