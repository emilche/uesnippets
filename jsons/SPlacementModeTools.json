[
  {
    "label": "STextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextBlock"
  },
  {
    "label": "FCategoryDrivenContentBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCategoryDrivenContentBuilder"
  },
  {
    "label": "SPlacementAssetEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPlacementAssetEntry"
  },
  {
    "label": "SPlacementAssetMenuEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPlacementAssetMenuEntry"
  },
  {
    "label": "SPlacementModeTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPlacementModeTools"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Visibility . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" ActorPlacementInfo . h \" # include \" IPlacementModeModule . h \" # include \" Widgets / Layout / SUniformWrapPanel . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Misc / TextFilter . h \" class STextBlock ; class FCategoryDrivenContentBuilder ; class SPlacementAssetEntry : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPlacementAssetEntry)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FText, HighlightText) SLATE_EVENT( FOnGetContent, OnGetMenuContent ) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedPtr<const FPlaceableItem>& InItem)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "IsPressed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPressed()"
  },
  {
    "label": "GetBorder()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FPlaceableItem> Item ; private : FOnGetContent OnGetMenuContent ; const FSlateBrush*)",
    "insertText": "GetBorder()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (bool bIsPressed ; const FSlateBrush* NormalImage ; const FSlateBrush* HoverImage ; const FSlateBrush* PressedImage ; } ; class SPlacementAssetMenuEntry : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPlacementAssetMenuEntry)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedPtr<const FPlaceableItem>& InItem)"
  },
  {
    "label": "GetForegroundColor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FPlaceableItem> Item ; FSlateColor)",
    "insertText": "GetForegroundColor()"
  },
  {
    "label": "GetIcon()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetIcon()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (bool bIsPressed ; const FButtonStyle* Style ; const FSlateBrush* AssetImage ; } ; class SPlacementModeTools : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPlacementModeTools)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedRef<SDockTab> ParentTab)"
  },
  {
    "label": "SPlacementModeTools()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SPlacementModeTools()"
  },
  {
    "label": "GetPlacementAssetWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GetPlacementAssetWidget(const TSharedPtr<FPlaceableItem>& InItem)"
  },
  {
    "label": "UpdateContentForCategory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContentForCategory(FName CategoryName, FText CategoryLabel)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "GetActiveTab()",
    "kind": "Method",
    "detail": "Function (private : FName)",
    "insertText": "GetActiveTab()"
  },
  {
    "label": "SetActiveTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveTab(FName TabName)"
  },
  {
    "label": "IsSearchActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSearchActive()"
  },
  {
    "label": "IsFavoritesCategorySelected()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFavoritesCategorySelected()"
  },
  {
    "label": "UpdateShownItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateShownItems()"
  },
  {
    "label": "RequestUpdateShownItems()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestUpdateShownItems()"
  },
  {
    "label": "RequestRefreshRecentlyPlaced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRefreshRecentlyPlaced(const TArray< FActorPlacementInfo >& RecentlyPlaced)"
  },
  {
    "label": "RequestRefreshAllClasses()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRefreshAllClasses()"
  },
  {
    "label": "OnCategoryRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCategoryRefresh(FName CategoryName)"
  },
  {
    "label": "UpdatePlacementCategories()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePlacementCategories()"
  },
  {
    "label": "OnCategoryChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCategoryChanged(const ECheckBoxState NewState, FName InCategory)"
  },
  {
    "label": "OnTabDrawerOpened()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTabDrawerOpened()"
  },
  {
    "label": "GetPlacementTabCheckedState()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetPlacementTabCheckedState(FName CategoryName)"
  },
  {
    "label": "OnSearchChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnSearchChanged(const FText& InFilterText)"
  },
  {
    "label": "OnSearchCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSearchCommitted(const FText& InFilterText, ETextCommit::Type InCommitType)"
  },
  {
    "label": "GetHighlightText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHighlightText()"
  }
]