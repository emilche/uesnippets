[
  {
    "label": "SInlineEditableTextBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SInlineEditableTextBlock"
  },
  {
    "label": "FSkeletonTreeVirtualBoneItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonTreeVirtualBoneItem"
  },
  {
    "label": "ISkeletonTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISkeletonTree"
  },
  {
    "label": "SKELETON_TREE_ITEM_TYPE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / SlateColor . h \" # include \" Layout / Visibility . h \" # include \" Widgets / SWidget . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" ISkeletonTreeItem . h \" # include \" SkeletonTreeItem . h \" # include \" IEditableSkeleton . h \" # include \" BoneProxy . h \" # include \" UObject / GCObject . h \" class SInlineEditableTextBlock ; class FSkeletonTreeVirtualBoneItem : public FSkeletonTreeItem,public FGCObject { public :)",
    "insertText": "SKELETON_TREE_ITEM_TYPE(FSkeletonTreeVirtualBoneItem, FSkeletonTreeItem) FSkeletonTreeVirtualBoneItem(const FName& InBoneName, const TSharedRef<class ISkeletonTree>& InSkeletonTree)"
  },
  {
    "label": "GenerateWidgetForNameColumn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateWidgetForNameColumn(TSharedPtr< SHorizontalBox > Box, const TAttribute<FText>& FilterText, FIsSelected InIsSelected)"
  },
  {
    "label": "GenerateWidgetForDataColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForDataColumn(const FName& DataColumnName, FIsSelected InIsSelected)"
  },
  {
    "label": "GetRowItemName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetRowItemName()"
  },
  {
    "label": "OnItemDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnItemDoubleClicked()"
  },
  {
    "label": "HandleDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragEnter(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "HandleDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleDrop(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetObject()"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "GetVirtualBoneNameAsText()",
    "kind": "Method",
    "detail": "Function (} FText)",
    "insertText": "GetVirtualBoneNameAsText()"
  },
  {
    "label": "EnableBoneProxyTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableBoneProxyTick(bool bEnable)"
  },
  {
    "label": "OnBlendSliderCommitted()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnBlendSliderCommitted(float NewValue, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnBlendSliderChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlendSliderChanged(float NewValue)"
  },
  {
    "label": "OnBeginBlendSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginBlendSliderMovement()"
  },
  {
    "label": "OnEndBlendSliderMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndBlendSliderMovement(float NewValue)"
  },
  {
    "label": "SetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTranslationRetargetingMode(EBoneTranslationRetargetingMode::Type NewRetargetingMode)"
  },
  {
    "label": "GetBoneBlendProfileScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBoneBlendProfileScale()"
  },
  {
    "label": "GetBlendProfileMaxSliderValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetBlendProfileMaxSliderValue()"
  },
  {
    "label": "GetBlendProfileMinSliderValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "GetBlendProfileMinSliderValue()"
  },
  {
    "label": "GetBoneBlendProfileVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetBoneBlendProfileVisibility()"
  },
  {
    "label": "OnVirtualBoneNameEditing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVirtualBoneNameEditing()"
  },
  {
    "label": "OnVerifyBoneNameChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVerifyBoneNameChanged(const FText& InText, FText& OutErrorMessage)"
  },
  {
    "label": "OnCommitVirtualBoneName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommitVirtualBoneName(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "GetVirtualBonePrefixVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetVirtualBonePrefixVisibility()"
  },
  {
    "label": "GetBoneTextFont()",
    "kind": "Method",
    "detail": "Function (FSlateFontInfo)",
    "insertText": "GetBoneTextFont()"
  },
  {
    "label": "GetBoneTextColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetBoneTextColor(FIsSelected InIsSelected)"
  },
  {
    "label": "GetLODIconVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetLODIconVisibility()"
  },
  {
    "label": "GetBoneToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBoneToolTip()"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (FName BoneName ; FName CachedBoneNameForRename ; TSharedPtr<SInlineEditableTextBlock> InlineWidget ;)",
    "insertText": "DECLARE_DELEGATE(FOnRenameRequested)"
  }
]