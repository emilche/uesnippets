[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "GetFeatureLevelFromName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFeatureLevelFromName(const FString& Name, ERHIFeatureLevel::Type& OutFeatureLevel)"
  },
  {
    "label": "GetFeatureLevelFromName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFeatureLevelFromName(FName Name, ERHIFeatureLevel::Type& OutFeatureLevel)"
  },
  {
    "label": "GetFeatureLevelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFeatureLevelName(ERHIFeatureLevel::Type InFeatureLevel, FString& OutName)"
  },
  {
    "label": "GetFeatureLevelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFeatureLevelName(ERHIFeatureLevel::Type InFeatureLevel, FName& OutName)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(ERHIFeatureLevel::Type Level)"
  },
  {
    "label": "LegacyShaderPlatformToShaderFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "LegacyShaderPlatformToShaderFormat(EShaderPlatform Platform)"
  },
  {
    "label": "ShaderFormatToLegacyShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "ShaderFormatToLegacyShaderPlatform(FName ShaderFormat)"
  },
  {
    "label": "ShaderPlatformToPlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ShaderPlatformToPlatformName(EShaderPlatform Platform)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(EShaderPlatform Platform, bool bError = true)"
  },
  {
    "label": "GetShadingPathFromName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShadingPathFromName(FName Name, ERHIShadingPath::Type& OutShadingPath)"
  },
  {
    "label": "GetShadingPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadingPathName(ERHIShadingPath::Type InShadingPath, FString& OutName)"
  },
  {
    "label": "GetShadingPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadingPathName(ERHIShadingPath::Type InShadingPath, FName& OutName)"
  },
  {
    "label": "GetBufferUsageFlagsName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBufferUsageFlagsName(EBufferUsageFlags BufferUsage)"
  },
  {
    "label": "GetTextureCreateFlagsName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTextureCreateFlagsName(ETextureCreateFlags TextureCreateFlags)"
  },
  {
    "label": "RHIResourceTypeFromString()",
    "kind": "Method",
    "detail": "Function (ERHIResourceType)",
    "insertText": "RHIResourceTypeFromString(const FString& InString)"
  },
  {
    "label": "GetRHIAccessName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRHIAccessName(ERHIAccess Access)"
  },
  {
    "label": "GetResourceTransitionFlagsName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetResourceTransitionFlagsName(EResourceTransitionFlags Flags)"
  },
  {
    "label": "GetRHIPipelineName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRHIPipelineName(ERHIPipeline Pipeline)"
  }
]