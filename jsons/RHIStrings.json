[
  {
    "label": "FName",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FName"
  },
  {
    "label": "FString",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FString"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EShaderPlatform",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EShaderPlatform"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "RHIVendorIdToString()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" HAL / Platform . h \" # include \" RHIDefinitions . h \" class FName ; class FString ; enum class ERHIAccess : uint32 ; enum class ERHIPipeline : uint8 ; enum EShaderPlatform : uint16 ; namespace ERHIFeatureLevel { enum Type : int ; } const TCHAR*)",
    "insertText": "RHIVendorIdToString()"
  },
  {
    "label": "RHIVendorIdToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "RHIVendorIdToString(EGpuVendorId VendorId)"
  },
  {
    "label": "GetFeatureLevelFromName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFeatureLevelFromName(const FString& Name, ERHIFeatureLevel::Type& OutFeatureLevel)"
  },
  {
    "label": "GetFeatureLevelFromName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetFeatureLevelFromName(FName Name, ERHIFeatureLevel::Type& OutFeatureLevel)"
  },
  {
    "label": "GetFeatureLevelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFeatureLevelName(ERHIFeatureLevel::Type InFeatureLevel, FString& OutName)"
  },
  {
    "label": "GetFeatureLevelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetFeatureLevelName(ERHIFeatureLevel::Type InFeatureLevel, FName& OutName)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(ERHIFeatureLevel::Type Level)"
  },
  {
    "label": "LegacyShaderPlatformToShaderFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "LegacyShaderPlatformToShaderFormat(EShaderPlatform Platform)"
  },
  {
    "label": "ShaderFormatToLegacyShaderPlatform()",
    "kind": "Method",
    "detail": "Function (EShaderPlatform)",
    "insertText": "ShaderFormatToLegacyShaderPlatform(FName ShaderFormat)"
  },
  {
    "label": "ShaderPlatformToPlatformName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ShaderPlatformToPlatformName(EShaderPlatform Platform)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "LexToString(EShaderPlatform Platform, bool bError = true)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(ERHIDescriptorHeapType InHeapType)"
  },
  {
    "label": "GetShadingPathFromName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShadingPathFromName(FName Name, ERHIShadingPath::Type& OutShadingPath)"
  },
  {
    "label": "GetShadingPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadingPathName(ERHIShadingPath::Type InShadingPath, FString& OutName)"
  },
  {
    "label": "GetShadingPathName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadingPathName(ERHIShadingPath::Type InShadingPath, FName& OutName)"
  },
  {
    "label": "GetBufferUsageFlagsName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetBufferUsageFlagsName(EBufferUsageFlags BufferUsage)"
  },
  {
    "label": "GetTextureCreateFlagsName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetTextureCreateFlagsName(ETextureCreateFlags TextureCreateFlags)"
  },
  {
    "label": "StringFromRHIResourceType()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "StringFromRHIResourceType(ERHIResourceType ResourceType)"
  },
  {
    "label": "RHIResourceTypeFromString()",
    "kind": "Method",
    "detail": "Function (ERHIResourceType)",
    "insertText": "RHIResourceTypeFromString(const FString& InString)"
  },
  {
    "label": "GetRHIAccessName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRHIAccessName(ERHIAccess Access)"
  },
  {
    "label": "GetResourceTransitionFlagsName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetResourceTransitionFlagsName(EResourceTransitionFlags Flags)"
  },
  {
    "label": "GetRHIPipelineName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetRHIPipelineName(ERHIPipeline Pipeline)"
  },
  {
    "label": "GetTextureDimensionString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTextureDimensionString(ETextureDimension Dimension)"
  },
  {
    "label": "GetTextureCreateFlagString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetTextureCreateFlagString(ETextureCreateFlags TextureCreateFlag)"
  },
  {
    "label": "GetBufferUsageFlagString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetBufferUsageFlagString(EBufferUsageFlags BufferUsage)"
  },
  {
    "label": "GetUniformBufferBaseTypeString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetUniformBufferBaseTypeString(EUniformBufferBaseType BaseType)"
  },
  {
    "label": "GetShaderCodeResourceBindingTypeName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetShaderCodeResourceBindingTypeName(EShaderCodeResourceBindingType BindingType)"
  },
  {
    "label": "GetShaderFrequencyString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetShaderFrequencyString(EShaderFrequency Frequency, bool bIncludePrefix = true)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* String =)",
    "insertText": "TEXT(\"SF_NumFrequencies\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Mesh : String =)",
    "insertText": "TEXT(\"SF_Mesh\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Amplification : String =)",
    "insertText": "TEXT(\"SF_Amplification\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Geometry : String =)",
    "insertText": "TEXT(\"SF_Geometry\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Pixel : String =)",
    "insertText": "TEXT(\"SF_Pixel\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_Compute : String =)",
    "insertText": "TEXT(\"SF_Compute\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_RayGen : String =)",
    "insertText": "TEXT(\"SF_RayGen\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_RayMiss : String =)",
    "insertText": "TEXT(\"SF_RayMiss\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_RayHitGroup : String =)",
    "insertText": "TEXT(\"SF_RayHitGroup\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_RayCallable : String =)",
    "insertText": "TEXT(\"SF_RayCallable\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_WorkGraphRoot : String =)",
    "insertText": "TEXT(\"SF_WorkGraphRoot\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (break ; case SF_WorkGraphComputeNode : String =)",
    "insertText": "TEXT(\"SF_WorkGraphComputeNode\")"
  }
]