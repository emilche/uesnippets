[
  {
    "label": "FNetBitArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArray"
  },
  {
    "label": "FNetBitArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayView"
  },
  {
    "label": "FNetBitArrayRangedForConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayRangedForConstIterator"
  },
  {
    "label": "FNetBitArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayBase"
  },
  {
    "label": "ENoResetNoValidateType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ENoResetNoValidateType"
  },
  {
    "label": "EResetOnInitType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EResetOnInitType"
  },
  {
    "label": "FNetBitArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArray"
  },
  {
    "label": "FNetBitArrayView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayView"
  },
  {
    "label": "FNetBitArrayHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayHelper"
  },
  {
    "label": "FNetBitArrayRangedForConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetBitArrayRangedForConstIterator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetBitArray()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FNetBitArray(uint32 BitCount)"
  },
  {
    "label": "FNetBitArray()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FNetBitArray(uint32 BitCountIn, const ENoResetNoValidateType)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(uint32 BitCount)"
  },
  {
    "label": "InitAndCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAndCopy(const FNetBitArray& Source)"
  },
  {
    "label": "InitAndCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitAndCopy(const FNetBitArrayView& Source)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "SetNumBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNumBits(uint32 BitCount)"
  },
  {
    "label": "AddBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddBits(uint32 BitCount)"
  },
  {
    "label": "ClearAllBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllBits()"
  },
  {
    "label": "SetAllBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllBits()"
  },
  {
    "label": "GetBit()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetBit(Index)"
  },
  {
    "label": "SetBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBit(uint32 Index)"
  },
  {
    "label": "SetBitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitValue(uint32 Index, bool bValue)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(uint32 StartIndex, uint32 Count)"
  },
  {
    "label": "ClearBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBits(uint32 StartIndex, uint32 Count)"
  },
  {
    "label": "ClearBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBit(uint32 Index)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FNetBitArray& Other)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FNetBitArrayView& Other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FNetBitArray& First, WordOpFunctor&& WordOp, const FNetBitArray& Second)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Combine(const FNetBitArray& Other, WordOpFunctor&& WordOp)"
  },
  {
    "label": "CombineMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineMultiple(WordOpFunctor1&& Op, const FNetBitArray& ArrayA, WordOpFunctor2&& Op2, const FNetBitArray& ArrayB)"
  },
  {
    "label": "ForAllSetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllSetBits(const FNetBitArray& A, const FNetBitArray& B, T&& WordOpFunctor, V&& Functor)"
  },
  {
    "label": "ForAllExclusiveBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllExclusiveBits(const FNetBitArray& A, const FNetBitArray& B, T&& FunctorA, V&& FunctorB)"
  },
  {
    "label": "ClearPaddingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPaddingBits()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reserve(uint32 BitCount)"
  },
  {
    "label": "FNetBitArrayView()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "FNetBitArrayView()"
  },
  {
    "label": "FNetBitArrayView()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "FNetBitArrayView(StorageWordType* StorageIn, uint32 BitCountIn, const ENoResetNoValidateType)"
  },
  {
    "label": "FNetBitArrayView()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "FNetBitArrayView(StorageWordType* StorageIn, uint32 BitCountIn, const EResetOnInitType)"
  },
  {
    "label": "FNetBitArrayView()",
    "kind": "Method",
    "detail": "Function (inline)",
    "insertText": "FNetBitArrayView(StorageWordType* StorageIn, uint32 BitCountIn)"
  },
  {
    "label": "GetBit()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetBit(Index)"
  },
  {
    "label": "ClearAllBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllBits()"
  },
  {
    "label": "ClearPaddingBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPaddingBits()"
  },
  {
    "label": "SetAllBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAllBits()"
  },
  {
    "label": "SetBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBit(uint32 Index)"
  },
  {
    "label": "SetBitValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitValue(uint32 Index, bool bValue)"
  },
  {
    "label": "SetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBits(uint32 StartIndex, uint32 Count)"
  },
  {
    "label": "ClearBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBits(uint32 StartIndex, uint32 Count)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FNetBitArrayView& Other)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const FNetBitArray& Other)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(const FNetBitArrayView& First, WordOpFunctor&& WordOp, const FNetBitArrayView& Second)"
  },
  {
    "label": "Combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Combine(const FNetBitArrayView& Other, WordOpFunctor&& WordOp)"
  },
  {
    "label": "CombineMultiple()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CombineMultiple(WordOpFunctor1&& Op, const FNetBitArrayView& ArrayA, WordOpFunctor2&& Op2, const FNetBitArrayView& ArrayB)"
  },
  {
    "label": "ForAllSetBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllSetBits(const FNetBitArrayView& A, const FNetBitArrayView& B, T&& WordOpFunctor, V&& Functor)"
  },
  {
    "label": "ForAllExclusiveBits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForAllExclusiveBits(const FNetBitArrayView& A, const FNetBitArrayView& B, T&& FunctorA, V&& FunctorB)"
  },
  {
    "label": "CalculateRequiredWordCount()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CalculateRequiredWordCount(uint32 BitCount)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bounds)",
    "insertText": "return(Index < BitCount ? Index : FNetBitArrayBase::InvalidIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bounds)",
    "insertText": "return(Index < BitCount ? Index : FNetBitArrayBase::InvalidIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bounds)",
    "insertText": "return(Index < BitCount ? Index : FNetBitArrayBase::InvalidIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bounds)",
    "insertText": "return(Index < BitCount ? Index : FNetBitArrayBase::InvalidIndex)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (bounds)",
    "insertText": "return(Index < BitCount ? Index : FNetBitArrayBase::InvalidIndex)"
  },
  {
    "label": "GetSetBitIndices()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetSetBitIndices(const StorageWordType* Storage, const uint32 BitCount, const uint32 StartIndex, const uint32 Count, uint32* const OutIndices, const uint32 OutIndicesCapacity)"
  },
  {
    "label": "CountSetBits()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "CountSetBits(const StorageWordType* Storage, const uint32 BitCount, const uint32 StartIndex, const uint32 Count)"
  },
  {
    "label": "FNetBitArrayRangedForConstIterator()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FNetBitArrayRangedForConstIterator()"
  },
  {
    "label": "AdvanceToNextSetBit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceToNextSetBit()"
  }
]