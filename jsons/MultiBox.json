[
  {
    "label": "FDropPreviewBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDropPreviewBlock"
  },
  {
    "label": "ITableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITableRow"
  },
  {
    "label": "SClippingHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SClippingHorizontalBox"
  },
  {
    "label": "SHorizontalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SHorizontalBox"
  },
  {
    "label": "SMultiBoxWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiBoxWidget"
  },
  {
    "label": "STableViewBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STableViewBase"
  },
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "UToolMenuBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenuBase"
  },
  {
    "label": "SUniformWrapPanel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SUniformWrapPanel"
  },
  {
    "label": "FToolBarComboButtonBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FToolBarComboButtonBlock"
  },
  {
    "label": "FMultiBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiBlock"
  },
  {
    "label": "FMultiBlockParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMultiBlockParams"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "IMultiBlockBaseWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMultiBlockBaseWidget"
  },
  {
    "label": "FMultiBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultiBox"
  },
  {
    "label": "SMultiBlockBaseWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMultiBlockBaseWidget"
  },
  {
    "label": "FDraggedMultiBlockPreview",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDraggedMultiBlockPreview"
  },
  {
    "label": "FFlattenSearchableBlockInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFlattenSearchableBlockInfo"
  },
  {
    "label": "SClippingVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SClippingVerticalBox"
  },
  {
    "label": "FMultiBlock()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Layout / Visibility . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SLinkedBox . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Layout / SMenuOwner . h \" # include \" Widgets / Layout / SUniformWrapPanel . h \" # include \" Framework / Commands / UIAction . h \" # include \" Framework / Commands / UICommandInfo . h \" # include \" Framework / Commands / UICommandList . h \" # include \" Framework / MultiBox / MultiBoxDefs . h \" class FDropPreviewBlock ; class ITableRow ; class SClippingHorizontalBox ; class SHorizontalBox ; class SMultiBoxWidget ; class STableViewBase ; class SVerticalBox ; class UToolMenuBase ; class SUniformWrapPanel ; class FToolBarComboButtonBlock ; namespace MultiBoxConstants { const float SubMenuOpenTime = 0 . 0 f ; const float SubMenuClobberTime = 0 . 5 f ; const float SubMenuClobberMinLifetime = 0 . 5 f ; const float EditableTextMinWidth = 3 0 . 0 f ; } class FMultiBlock : public TSharedFromThis<FMultiBlock> { public : struct FMultiBlockParams { FUIAction DirectActions ; const TSharedPtr<const FUICommandInfo> Action ; const TSharedPtr<const FUICommandList> ActionList ; FName ExtensionHook ; EMultiBlockType Type = EMultiBlockType::None ; bool bIsPartOfHeading = false ; } ;)",
    "insertText": "FMultiBlock(const TSharedPtr< const FUICommandInfo > InCommand, TSharedPtr< const FUICommandList > InCommandList, FName InExtensionHook = NAME_None, EMultiBlockType InType = EMultiBlockType::None, bool bInIsPartOfHeading = false) : Action( InCommand ) , ActionList( InCommandList ) , ExtensionHook( InExtensionHook ) , Type( InType ) , TutorialHighlightName( NAME_None ) , bSearchable(true) , bIsPartOfHeading(bInIsPartOfHeading)"
  },
  {
    "label": "FMultiBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMultiBlock(const FUIAction& InAction, FName InExtensionHook = NAME_None, EMultiBlockType InType = EMultiBlockType::None, bool bInIsPartOfHeading = false, TSharedPtr< const FUICommandList > InCommandList = nullptr ) : DirectActions( InAction ) , ActionList( InCommandList ) , ExtensionHook( InExtensionHook ) , Type( InType ) , TutorialHighlightName( NAME_None ) , bSearchable(true) , bIsPartOfHeading(bInIsPartOfHeading)"
  },
  {
    "label": "FMultiBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMultiBlock(const FMultiBlockParams& InMultiBlockParams) : DirectActions(InMultiBlockParams.DirectActions) , Action(InMultiBlockParams.Action) , ActionList(InMultiBlockParams.ActionList) , ExtensionHook(InMultiBlockParams.ExtensionHook) , Type(InMultiBlockParams.Type) , TutorialHighlightName(NAME_None) , bSearchable(true) , bIsPartOfHeading(InMultiBlockParams.bIsPartOfHeading)"
  },
  {
    "label": "FMultiBlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMultiBlock()"
  },
  {
    "label": "GetActionList()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<const FUICommandList>)",
    "insertText": "GetActionList()"
  },
  {
    "label": "IsGroupStartBlock()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsGroupStartBlock()"
  },
  {
    "label": "GetTutorialHighlightName()",
    "kind": "Method",
    "detail": "Function (TutorialHighlightName = InTutorialName ; } FName)",
    "insertText": "GetTutorialHighlightName()"
  },
  {
    "label": "GetStyleNameOverride()",
    "kind": "Method",
    "detail": "Function (StyleNameOverride = InStyleNameOverride ; } FName)",
    "insertText": "GetStyleNameOverride()"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (const EMultiBlockType)",
    "insertText": "GetType()"
  },
  {
    "label": "SetSearchable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSearchable(bool bSearchable)"
  },
  {
    "label": "GetSearchable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSearchable()"
  },
  {
    "label": "GetExtensionHook()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetExtensionHook()"
  },
  {
    "label": "SetVisibilityOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVisibilityOverride(TAttribute<EVisibility> InVisibilityOverride)"
  },
  {
    "label": "ConstructWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<class IMultiBlockBaseWidget>)",
    "insertText": "ConstructWidget()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FMultiBox>)",
    "insertText": "Create(const EMultiBoxType InType, FMultiBoxCustomization InCustomization, const bool bInShouldCloseWindowAfterMenuSelection)"
  },
  {
    "label": "SetLastSelectedCommandIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLastSelectedCommandIndex(int32 LastSelectedCommandIndex)"
  },
  {
    "label": "AddMultiBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMultiBlock(TSharedRef< const FMultiBlock > InBlock)"
  },
  {
    "label": "AddMultiBlockToFront()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddMultiBlockToFront(TSharedRef< const FMultiBlock > InBlock)"
  },
  {
    "label": "RemoveCustomMultiBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCustomMultiBlock(TSharedRef< const FMultiBlock> InBlock)"
  },
  {
    "label": "InsertCustomMultiBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertCustomMultiBlock(TSharedRef<const FMultiBlock> InBlock, int32 Index)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FOnMakeMultiBoxBuilderOverride, const TSharedRef<FMultiBox>&, const TSharedRef<SMultiBoxWidget>&)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_ThreeParams(TSharedRef<SWidget>, FOnModifyBlockWidgetAfterMake, const TSharedRef<SMultiBoxWidget>&, const FMultiBlock&, const TSharedRef<SWidget>&)"
  },
  {
    "label": "MakeWidget()",
    "kind": "Method",
    "detail": "Function (FOnModifyBlockWidgetAfterMake ModifyBlockWidgetAfterMake ; TSharedRef<class SMultiBoxWidget>)",
    "insertText": "MakeWidget(bool bSearchable, FOnMakeMultiBoxBuilderOverride* InMakeMultiBoxBuilderOverride = nullptr, TAttribute<float> InMaxHeight = TAttribute<float>())"
  },
  {
    "label": "GetBlocks()",
    "kind": "Method",
    "detail": "Function (const TArray<TSharedRef<const FMultiBlock>>&)",
    "insertText": "GetBlocks()"
  },
  {
    "label": "GetCustomizationName()",
    "kind": "Method",
    "detail": "Function (StyleSet = InStyleSet ; StyleName = InStyleName ; } FName)",
    "insertText": "GetCustomizationName()"
  },
  {
    "label": "MakeMultiBlockFromCommand()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FMultiBlock>)",
    "insertText": "MakeMultiBlockFromCommand(TSharedPtr<const FUICommandInfo> Command, bool bCommandMustBeBound)"
  },
  {
    "label": "FindBlockFromNameAndType()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FMultiBlock>)",
    "insertText": "FindBlockFromNameAndType(const FName InName, const EMultiBlockType InType)"
  },
  {
    "label": "IsInEditMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInEditMode()"
  },
  {
    "label": "GetToolMenu()",
    "kind": "Method",
    "detail": "Function (UToolMenuBase*)",
    "insertText": "GetToolMenu()"
  },
  {
    "label": "GetSectionEditBounds()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSectionEditBounds(const int32 Index, int32& OutSectionEndIndex)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FEditSelectionChangedDelegate, TSharedRef<const FMultiBlock>)"
  },
  {
    "label": "OnEditSelectionChanged()",
    "kind": "Method",
    "detail": "Function (const FEditSelectionChangedDelegate&)",
    "insertText": "OnEditSelectionChanged()"
  },
  {
    "label": "FMultiBox()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FMultiBox(const EMultiBoxType InType, FMultiBoxCustomization InCustomization, const bool bInShouldCloseWindowAfterMenuSelection)"
  },
  {
    "label": "IsCustomizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCustomizable()"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (private : TArray<TSharedPtr<const FUICommandList>> CommandLists ; TArray<TSharedRef<const FMultiBlock>> Blocks ; const ISlateStyle* StyleSet ; FName StyleName ; EMultiBoxType Type ; FEditSelectionChangedDelegate EditSelectionChanged ; bool bShouldCloseWindowAfterMenuSelection ; int32 LastSelectedCommandIndex ; } ; class IMultiBlockBaseWidget { public : TSharedRef<SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "SetOwnerMultiBoxWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOwnerMultiBoxWidget(TSharedRef<SMultiBoxWidget> InOwnerMultiBoxWidget)"
  },
  {
    "label": "SetMultiBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultiBlock(TSharedRef<const FMultiBlock> InMultiBlock)"
  },
  {
    "label": "SetOptionsBlockWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOptionsBlockWidget(TSharedPtr<SWidget> InOptionsBlockWidget)"
  },
  {
    "label": "BuildMultiBlockWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildMultiBlockWidget(const ISlateStyle* StyleSet, const FName& StyleName)"
  },
  {
    "label": "SetMultiBlockLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultiBlockLocation(EMultiBlockLocation::Type InLocation, bool bSectionContainsIcons)"
  },
  {
    "label": "GetMultiBlockLocation()",
    "kind": "Method",
    "detail": "Function (EMultiBlockLocation::Type)",
    "insertText": "GetMultiBlockLocation()"
  },
  {
    "label": "GetBlock()",
    "kind": "Method",
    "detail": "Function (} ; class SMultiBlockBaseWidget : public IMultiBlockBaseWidget,public SCompoundWidget { public : TSharedPtr<const FMultiBlock>)",
    "insertText": "GetBlock()"
  },
  {
    "label": "SetOptionsBlockWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOptionsBlockWidget(TSharedPtr<SWidget> InOptionsBlock)"
  },
  {
    "label": "SetMultiBlockLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultiBlockLocation(EMultiBlockLocation::Type InLocation, bool bInSectionContainsIcons)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (protected : TWeakPtr<SMultiBoxWidget> OwnerMultiBoxWidget ; TSharedPtr<const FMultiBlock> MultiBlock ; TSharedPtr<SWidget> OptionsBlockWidget ; EMultiBlockLocation::Type Location ; bool bSectionContainsIcons ; } ; class SMultiBoxWidget : public SMenuOwner { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMultiBoxWidget ) : _ContentScale( FVector2D::UnitVector)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FVector2D, ContentScale ) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "SetMultiBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultiBox(TSharedRef< FMultiBox > InMultiBox)"
  },
  {
    "label": "SetContent()",
    "kind": "Method",
    "detail": "Function (MultiBox = InMultiBox ; } void)",
    "insertText": "SetContent(TSharedRef< SWidget > InContent)"
  },
  {
    "label": "GetMultiBox()",
    "kind": "Method",
    "detail": "Function (ChildSlot [ InContent ] ; } TSharedRef<const FMultiBox>)",
    "insertText": "GetMultiBox()"
  },
  {
    "label": "GetLinkedBoxManager()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FLinkedBoxManager>)",
    "insertText": "GetLinkedBoxManager()"
  },
  {
    "label": "SetMaxHeight()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMaxHeight(TAttribute<float> InMaxHeight)"
  },
  {
    "label": "BuildMultiBoxWidget()",
    "kind": "Method",
    "detail": "Function (MaxHeight = InMaxHeight ; } void)",
    "insertText": "BuildMultiBoxWidget()"
  },
  {
    "label": "GenerateTiles()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ITableRow>)",
    "insertText": "GenerateTiles(TSharedPtr<SWidget> Item, const TSharedRef<STableViewBase>& OwnerTable)"
  },
  {
    "label": "GetItemWidth()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetItemWidth()"
  },
  {
    "label": "GetItemHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetItemHeight()"
  },
  {
    "label": "OnWrapButtonClicked()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "OnWrapButtonClicked()"
  },
  {
    "label": "GetStyleSet()",
    "kind": "Method",
    "detail": "Function (const ISlateStyle*)",
    "insertText": "GetStyleSet()"
  },
  {
    "label": "GetStyleName()",
    "kind": "Method",
    "detail": "Function (} const FName&)",
    "insertText": "GetStyleName()"
  },
  {
    "label": "OnCustomCommandDragEnter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnCustomCommandDragEnter(TSharedRef<const FMultiBlock> MultiBlock, const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnCustomCommandDragged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomCommandDragged(TSharedRef<const FMultiBlock> MultiBlock, const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnCustomCommandDropped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCustomCommandDropped()"
  },
  {
    "label": "OnDropExternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDropExternal()"
  },
  {
    "label": "FocusNextWidget()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "FocusNextWidget(EUINavigation NavigationType)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "OnFocusReceived()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFocusReceived(const FGeometry& MyGeometry, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnFocusChanging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusChanging(const FWeakWidgetPath& PreviousFocusPath, const FWidgetPath& NewWidgetPath, const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& KeyEvent)"
  },
  {
    "label": "OnKeyChar()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyChar(const FGeometry& MyGeometry, const FCharacterEvent& InCharacterEvent)"
  },
  {
    "label": "OnVisualizeTooltip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnVisualizeTooltip(const TSharedPtr<SWidget>& TooltipContent)"
  },
  {
    "label": "BeginSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSearch(const TCHAR InChar)"
  },
  {
    "label": "ResetSearch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetSearch()"
  },
  {
    "label": "FilterMultiBoxEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FilterMultiBoxEntries()"
  },
  {
    "label": "GetSearchText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSearchText()"
  },
  {
    "label": "GetSearchTextWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSearchTextWidget()"
  },
  {
    "label": "SetSearchBlockWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSearchBlockWidget(TSharedPtr<SWidget>)"
  },
  {
    "label": "AddElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddElement(TSharedPtr<SWidget> BlockWidget, FText BlockDisplayText, bool bInSearchable = true)"
  },
  {
    "label": "IsBlockBeingDragged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlockBeingDragged(TSharedPtr<const FMultiBlock> Block)"
  },
  {
    "label": "GetCustomizationVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCustomizationVisibility(TWeakPtr<const FMultiBlock> BlockWeakPtr, TWeakPtr<SWidget> BlockWidgetWeakPtr)"
  },
  {
    "label": "GetCustomizationBorderDragVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetCustomizationBorderDragVisibility(const FName InBlockName, const EMultiBlockType InBlockType, bool& bOutInsertAfter)"
  },
  {
    "label": "SetSummonedMenuTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSummonedMenuTime(double InSummonedMenuTime)"
  },
  {
    "label": "GetSummonedMenuTime()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetSummonedMenuTime()"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(5.5, \"This function will be made private in the future.\") bool ShouldShowMenuSearchField()"
  },
  {
    "label": "AddBlockWidget()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "AddBlockWidget(const FMultiBlock& Block, TSharedPtr<SHorizontalBox> HorizontalBox, TSharedPtr<SVerticalBox> VerticalBox, EMultiBlockLocation::Type InLocation, bool bSectionContainsIcons, TSharedPtr<const FToolBarComboButtonBlock> OptionsBlock)"
  },
  {
    "label": "UpdateDropAreaPreviewBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDropAreaPreviewBlock(TSharedRef<const FMultiBlock> MultiBlock, TSharedPtr<FUICommandDragDropOp> DragDropContent, const FGeometry& DragArea, const FVector2D& DragPos)"
  },
  {
    "label": "CreateSearchTextWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSearchTextWidget()"
  },
  {
    "label": "OnFilterTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextCommitted(const FText& InFilterText, ETextCommit::Type CommitType)"
  },
  {
    "label": "OnFilterTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFilterTextChanged(const FText& InFilterText)"
  },
  {
    "label": "FlattenSubMenusRecursive()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlattenSubMenusRecursive(uint32 MaxRecursionLevels)"
  },
  {
    "label": "FDraggedMultiBlockPreview()",
    "kind": "Method",
    "detail": "Function (private : struct FDraggedMultiBlockPreview { FName BlockName ; EMultiBlockType BlockType ; TSharedPtr<class FDropPreviewBlock> PreviewBlock ; int32 InsertIndex ; EOrientation InsertOrientation ;)",
    "insertText": "FDraggedMultiBlockPreview() : BlockType(EMultiBlockType::None) , InsertIndex( INDEX_NONE)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsSameBlockAs()",
    "kind": "Method",
    "detail": "Function (InsertIndex = INDEX_NONE ; } bool)",
    "insertText": "IsSameBlockAs(const FName InName, const EMultiBlockType InType)"
  }
]