[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SkylineMatrix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SkylineMatrix"
  },
  {
    "label": "InnerUpperIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerUpperIterator"
  },
  {
    "label": "InnerLowerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerLowerIterator"
  },
  {
    "label": "OuterUpperIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OuterUpperIterator"
  },
  {
    "label": "OuterLowerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OuterLowerIterator"
  },
  {
    "label": "EIGEN_SKYLINE_GENERIC_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SKYLINEMATRIX_H # define EIGEN_SKYLINEMATRIX_H # include \" SkylineStorage . h \" # include \" SkylineMatrixBase . h \" namespace Eigen { namespace internal { template<_Scalar,int _Options> struct traits<SkylineMatrix<_Scalar,_Options>> { typedef _Scalar Scalar ; typedef Sparse StorageKind ; enum { RowsAtCompileTime = Dynamic,ColsAtCompileTime = Dynamic,MaxRowsAtCompileTime = Dynamic,MaxColsAtCompileTime = Dynamic,Flags = SkylineBit | _Options,CoeffReadCost = NumTraits<Scalar>::ReadCost,} ; } ; } template<_Scalar,int _Options> class SkylineMatrix : public SkylineMatrixBase<SkylineMatrix<_Scalar,_Options>> { public :)",
    "insertText": "EIGEN_SKYLINE_GENERIC_PUBLIC_INTERFACE(SkylineMatrix) EIGEN_SKYLINE_INHERIT_ASSIGNMENT_OPERATOR(SkylineMatrix, +=) EIGEN_SKYLINE_INHERIT_ASSIGNMENT_OPERATOR(SkylineMatrix, -=)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (protected : typedef SkylineMatrix<)",
    "insertText": "Scalar(Flags&~RowMajorBit) | (IsRowMajor ? RowMajorBit : 0)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index m_outerSize ; Index m_innerSize ; public : Index* m_colStartIndex ; Index* m_rowStartIndex ; SkylineStorage<Scalar> m_data ; public : Index)",
    "insertText": "rows()"
  },
  {
    "label": "lowerNonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "lowerNonZeros()"
  },
  {
    "label": "upperNonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "upperNonZeros(Index j)"
  },
  {
    "label": "_diagPtr()",
    "kind": "Method",
    "detail": "Function (} Scalar*)",
    "insertText": "_diagPtr()"
  },
  {
    "label": "_upperPtr()",
    "kind": "Method",
    "detail": "Function (} const Scalar*)",
    "insertText": "_upperPtr()"
  },
  {
    "label": "_lowerPtr()",
    "kind": "Method",
    "detail": "Function (} const Scalar*)",
    "insertText": "_lowerPtr()"
  },
  {
    "label": "_upperProfilePtr()",
    "kind": "Method",
    "detail": "Function (} const Index*)",
    "insertText": "_upperProfilePtr()"
  },
  {
    "label": "_lowerProfilePtr()",
    "kind": "Method",
    "detail": "Function (} const Index*)",
    "insertText": "_lowerProfilePtr()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const Index outer = IsRowMajor ? row : col ; const Index inner = IsRowMajor ? col : row ;)",
    "insertText": "eigen_assert(outer < outerSize())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(inner < innerSize())"
  },
  {
    "label": "upperProfile()",
    "kind": "Method",
    "detail": "Function (const Index minOuterIndex = inner - m_data .)",
    "insertText": "upperProfile(inner)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(inner < outer)"
  },
  {
    "label": "lowerProfile()",
    "kind": "Method",
    "detail": "Function (const Index minInnerIndex = outer - m_data .)",
    "insertText": "lowerProfile(outer)"
  },
  {
    "label": "upper()",
    "kind": "Method",
    "detail": "Function (} return m_data .)",
    "insertText": "upper(m_colStartIndex[inner] + outer - inner)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(outer > inner)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(outer < inner)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} } } Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(outer >= minOuterIndex && \"You tried to access a coeff that does not exist in the storage\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(col < row)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(inner >= minInnerIndex && \"You tried to access a coeff that does not exist in the storage\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(outer <= maxOuterIndex && \"You tried to access a coeff that does not exist in the storage\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(inner <= maxInnerIndex && \"You tried to access a coeff that does not exist in the storage\")"
  },
  {
    "label": "coeffDiag()",
    "kind": "Method",
    "detail": "Function (} } } Scalar)",
    "insertText": "coeffDiag(Index idx)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(idx < outerSize())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(idx < innerSize())"
  },
  {
    "label": "coeffLower()",
    "kind": "Method",
    "detail": "Function (} Scalar)",
    "insertText": "coeffLower(Index row, Index col)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(inner != outer)"
  },
  {
    "label": "coeffUpper()",
    "kind": "Method",
    "detail": "Function (} } Scalar)",
    "insertText": "coeffUpper(Index row, Index col)"
  },
  {
    "label": "coeffRefDiag()",
    "kind": "Method",
    "detail": "Function (} } Scalar&)",
    "insertText": "coeffRefDiag(Index idx)"
  },
  {
    "label": "coeffRefLower()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "coeffRefLower(Index row, Index col)"
  },
  {
    "label": "coeffExistLower()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "coeffExistLower(Index row, Index col)"
  },
  {
    "label": "coeffExistUpper()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "coeffExistUpper(Index row, Index col)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "clear()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_colStartIndex, 0, (m_outerSize + 1) * sizeof (Index))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_rowStartIndex, 0, (m_outerSize + 1) * sizeof (Index))"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "reserve(Index reserveSize, Index reserveUpperSize, Index reserveLowerSize)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "reserve(reserveSize, reserveUpperSize, reserveLowerSize)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DONT_INLINE Scalar&)",
    "insertText": "insert(Index row, Index col)"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (const Index stop = m_colStartIndex [)",
    "insertText": "cols()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const Index start = m_colStartIndex [ inner ] ;)",
    "insertText": "for(Index innerIdx = stop; innerIdx >= start; innerIdx--)"
  },
  {
    "label": "upper()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "upper(innerIdx + bandIncrement) = m_data.upper(innerIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index innerIdx = cols(); innerIdx > inner; innerIdx--)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (m_colStartIndex [ innerIdx ] + = bandIncrement ; })",
    "insertText": "memset(this->_upperPtr() + start, 0, (bandIncrement - 1) * sizeof (Scalar))"
  },
  {
    "label": "upper()",
    "kind": "Method",
    "detail": "Function (} else { return m_data .)",
    "insertText": "upper(m_colStartIndex[inner] + outer - (inner - m_data.upperProfile(inner)))"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "lower(innerIdx + bandIncrement) = m_data.lower(innerIdx)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index innerIdx = rows(); innerIdx > outer; innerIdx--)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (m_rowStartIndex [ innerIdx ] + = bandIncrement ; })",
    "insertText": "memset(this->_lowerPtr() + start, 0, (bandIncrement - 1) * sizeof (Scalar))"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (} else { return m_data .)",
    "insertText": "lower(m_rowStartIndex[outer] + inner - (outer - m_data.lowerProfile(outer)))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index innerIdx = inner + 1; innerIdx < outerSize() + 1; innerIdx++)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (m_rowStartIndex [ innerIdx ] + = bandIncrement ; })",
    "insertText": "memset(this->_upperPtr() + m_rowStartIndex[inner] + previousProfile + 1, 0, (bandIncrement - 1) * sizeof (Scalar))"
  },
  {
    "label": "upper()",
    "kind": "Method",
    "detail": "Function (} else { return m_data .)",
    "insertText": "upper(m_rowStartIndex[inner] + (outer - inner))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(Index innerIdx = outer + 1; innerIdx < outerSize() + 1; innerIdx++)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (m_colStartIndex [ innerIdx ] + = bandIncrement ; })",
    "insertText": "memset(this->_lowerPtr() + m_colStartIndex[outer] + previousProfile + 1, 0, (bandIncrement - 1) * sizeof (Scalar))"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (} else { return m_data .)",
    "insertText": "lower(m_colStartIndex[outer] + (inner - outer))"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "finalize()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(rows() > cols()) m_data.resize(cols(), rows(), cols(), m_rowStartIndex[cols()] + 1, m_colStartIndex[cols()] + 1)"
  },
  {
    "label": "squeeze()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "squeeze()"
  },
  {
    "label": "prune()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "prune(Scalar reference, RealScalar epsilon = dummy_precision<RealScalar > ())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(size_t rows, size_t cols)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const Index diagSize = rows> cols ? cols : rows ; m_innerSize = IsRowMajor ? cols : rows ;)",
    "insertText": "eigen_assert(rows == cols && \"Skyline matrix must be square matrix\")"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (const Index)",
    "insertText": "k(diagSize - 1)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "resize(diagSize, IsRowMajor ? cols : rows, IsRowMajor ? rows : cols, 2 * k * k + k + 1, 2 * k * k + k + 1)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else { const Index k = diagSize / 2 ; m_data .)",
    "insertText": "resize(diagSize, IsRowMajor ? cols : rows, IsRowMajor ? rows : cols, 2 * k * k - k + 1, 2 * k * k - k + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(m_colStartIndex && m_rowStartIndex)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_colStartIndex ; delete [ ] m_rowStartIndex ; } m_colStartIndex = new Index [ cols + 1 ] ; m_rowStartIndex = new Index [ rows + 1 ] ; m_outerSize = diagSize ; m_data .)",
    "insertText": "reset()"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (m_outerSize = diagSize ;)",
    "insertText": "memset(m_colStartIndex, 0, (cols + 1) * sizeof (Index))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(m_rowStartIndex, 0, (rows + 1) * sizeof (Index))"
  },
  {
    "label": "resizeNonZeros()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resizeNonZeros(Index size)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "resize(size)"
  },
  {
    "label": "SkylineMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SkylineMatrix() : m_outerSize(-1), m_innerSize(0), m_colStartIndex(0), m_rowStartIndex(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(0, 0)"
  },
  {
    "label": "SkylineMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SkylineMatrix(size_t rows, size_t cols) : m_outerSize(0), m_innerSize(0), m_colStartIndex(0), m_rowStartIndex(0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "resize(rows, cols)"
  },
  {
    "label": "SkylineMatrix()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived>)",
    "insertText": "SkylineMatrix(const SkylineMatrixBase<OtherDerived>& other) : m_outerSize(0), m_innerSize(0), m_colStartIndex(0), m_rowStartIndex(0)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (* this = other .)",
    "insertText": "derived()"
  },
  {
    "label": "SkylineMatrix()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SkylineMatrix(const SkylineMatrix & other) : Base(), m_outerSize(0), m_innerSize(0), m_colStartIndex(0), m_rowStartIndex(0)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(SkylineMatrix & other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_colStartIndex, other.m_colStartIndex)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_rowStartIndex, other.m_rowStartIndex)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_innerSize, other.m_innerSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(m_outerSize, other.m_outerSize)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (m_data .)",
    "insertText": "swap(other.m_data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SkylineMatrix&)",
    "insertText": "operator(const SkylineMatrix & other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (std::cout<<\" SkylineMatrix&)",
    "insertText": "operator(const SkylineMatrix& other)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(other.const_cast_derived())"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "resize(other.rows(), other.cols())"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_colStartIndex, other.m_colStartIndex, (m_outerSize + 1) * sizeof (Index))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(m_rowStartIndex, other.m_rowStartIndex, (m_outerSize + 1) * sizeof (Index))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_data = other . m_data ; } return* this ; } template<OtherDerived> SkylineMatrix&)",
    "insertText": "operator(const SkylineMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "needToTranspose()",
    "kind": "Method",
    "detail": "Function (const bool)",
    "insertText": "needToTranspose(Flags & RowMajorBit) != (OtherDerived::Flags & RowMajorBit)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} else { return SkylineMatrixBase<SkylineMatrix)",
    "insertText": "operator(other.derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } std::ostream&)",
    "insertText": "operator(std::ostream & s, const SkylineMatrix & m)"
  },
  {
    "label": "EIGEN_DBG_SKYLINE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_DBG_SKYLINE(std::cout << \"upper elements : \" << std::endl; for (Index i = 0; i < m.m_data.upperSize(); i++) std::cout << m.m_data.upper(i) << \"\\t\"; std::cout << std::endl; std::cout << \"upper profile : \" << std::endl; for (Index i = 0; i < m.m_data.upperProfileSize(); i++) std::cout << m.m_data.upperProfile(i) << \"\\t\"; std::cout << std::endl; std::cout << \"lower startIdx : \" << std::endl; for (Index i = 0; i < m.m_data.upperProfileSize(); i++) std::cout << (IsRowMajor ? m.m_colStartIndex[i] : m.m_rowStartIndex[i]) << \"\\t\"; std::cout << std::endl; std::cout << \"lower elements : \" << std::endl; for (Index i = 0; i < m.m_data.lowerSize(); i++) std::cout << m.m_data.lower(i) << \"\\t\"; std::cout << std::endl; std::cout << \"lower profile : \" << std::endl; for (Index i = 0; i < m.m_data.lowerProfileSize(); i++) std::cout << m.m_data.lowerProfile(i) << \"\\t\"; std::cout << std::endl; std::cout << \"lower startIdx : \" << std::endl; for (Index i = 0; i < m.m_data.lowerProfileSize(); i++) std::cout << (IsRowMajor ? m.m_rowStartIndex[i] : m.m_colStartIndex[i]) << \"\\t\"; std::cout << std::endl;)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (s<<m .)",
    "insertText": "coeff(rowIdx, colIdx)"
  },
  {
    "label": "SkylineMatrix()",
    "kind": "Method",
    "detail": "Function (} s<<std::endl ; } return s ; } ~)",
    "insertText": "SkylineMatrix()"
  },
  {
    "label": "sum()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_colStartIndex ; delete [ ] m_rowStartIndex ; } Scalar)",
    "insertText": "sum()"
  },
  {
    "label": "InnerUpperIterator()",
    "kind": "Method",
    "detail": "Function (} ; template<Scalar,int _Options> class SkylineMatrix<Scalar,_Options>::InnerUpperIterator { public :)",
    "insertText": "InnerUpperIterator(const SkylineMatrix& mat, Index outer) : m_matrix(mat), m_outer(outer), m_id(_Options == RowMajor ? mat.m_colStartIndex[outer] : mat.m_rowStartIndex[outer] + 1), m_start(m_id), m_end(_Options == RowMajor ? mat.m_colStartIndex[outer + 1] : mat.m_rowStartIndex[outer + 1] + 1)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} InnerUpperIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (m_id + + ; return* this ; } InnerUpperIterator&)",
    "insertText": "operator(Index shift)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (m_id + = shift ; return* this ; } Scalar)",
    "insertText": "value()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (} Scalar*)",
    "insertText": "valuePtr()"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "valueRef()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "index()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "size()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "InnerLowerIterator()",
    "kind": "Method",
    "detail": "Function (} protected : const SkylineMatrix& m_matrix ; const Index m_outer ; Index m_id ; const Index m_start ; const Index m_end ; } ; template<Scalar,int _Options> class SkylineMatrix<Scalar,_Options>::InnerLowerIterator { public :)",
    "insertText": "InnerLowerIterator(const SkylineMatrix& mat, Index outer) : m_matrix(mat), m_outer(outer), m_id(_Options == RowMajor ? mat.m_rowStartIndex[outer] : mat.m_colStartIndex[outer] + 1), m_start(m_id), m_end(_Options == RowMajor ? mat.m_rowStartIndex[outer + 1] : mat.m_colStartIndex[outer + 1] + 1)"
  }
]