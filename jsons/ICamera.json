[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "ICameraSchema()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcGeom_ICamera_h # define Alembic_AbcGeom_ICamera_h # include<Alembic / Util / Export . h> # include<Alembic / AbcGeom / Foundation . h> # include<Alembic / AbcGeom / SchemaInfoDeclarations . h> # include<Alembic / AbcGeom / CameraSample . h> namespace Alembic { namespace AbcGeom { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT ICameraSchema : public Abc::ISchema<CameraSchemaInfo> { public : typedef ICameraSchema this_type ;)",
    "insertText": "ICameraSchema()"
  },
  {
    "label": "ICameraSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ICameraSchema(const ICompoundProperty & iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : Abc::ISchema<CameraSchemaInfo>( iParent, iName, iArg0, iArg1)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(iArg0, iArg1)"
  },
  {
    "label": "ICameraSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ICameraSchema(const ICompoundProperty & iProp, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument() ) : Abc::ISchema<CameraSchemaInfo>( iProp, iArg0, iArg1)"
  },
  {
    "label": "getTimeSampling()",
    "kind": "Method",
    "detail": "Function (} AbcA::TimeSamplingPtr)",
    "insertText": "getTimeSampling()"
  },
  {
    "label": "getNumSamples()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "getNumSamples()"
  },
  {
    "label": "isConstant()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isConstant()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "get(CameraSample &oSample, const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "getValue()",
    "kind": "Method",
    "detail": "Function (CameraSample)",
    "insertText": "getValue(const Abc::ISampleSelector &iSS = Abc::ISampleSelector())"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (CameraSample smp ;)",
    "insertText": "get(smp, iSS)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (m_coreProperties .)",
    "insertText": "reset()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (m_ops .)",
    "insertText": "clear()"
  },
  {
    "label": "valid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "valid()"
  },
  {
    "label": "ALEMBIC_OVERRIDE_OPERATOR_BOOL()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ALEMBIC_OVERRIDE_OPERATOR_BOOL(ICameraSchema::valid())"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "init(const Abc::Argument &iArg0, const Abc::Argument &iArg1)"
  }
]