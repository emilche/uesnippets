[
  {
    "label": "DispatchToMethodImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TUPLE_H_ # define BASE_TUPLE_H_ # include<stddef . h> # include<tuple> # include<utility> # include \" build / build_config . h \" namespace base { template<ObjT,Method,Tuple,size_t . . . Ns> void)",
    "insertText": "DispatchToMethodImpl(const ObjT& obj, Method method, Tuple&& args, std::index_sequence<Ns...>)"
  },
  {
    "label": "DispatchToMethod()",
    "kind": "Method",
    "detail": "Function (} template<ObjT,Method,Tuple> void)",
    "insertText": "DispatchToMethod(const ObjT& obj, Method method, Tuple&& args)"
  },
  {
    "label": "DispatchToMethodImpl()",
    "kind": "Method",
    "detail": "Function (size_t size = std::tuple_size<std::decay_t<Tuple>>::value ;)",
    "insertText": "DispatchToMethodImpl(obj, method, std::forward<Tuple>(args), std::make_index_sequence<size>())"
  },
  {
    "label": "DispatchToFunctionImpl()",
    "kind": "Method",
    "detail": "Function (} template<Function,Tuple,size_t . . . Ns> void)",
    "insertText": "DispatchToFunctionImpl(Function function, Tuple&& args, std::index_sequence<Ns...>)"
  },
  {
    "label": "DispatchToFunction()",
    "kind": "Method",
    "detail": "Function (} template<Function,Tuple> void)",
    "insertText": "DispatchToFunction(Function function, Tuple&& args)"
  },
  {
    "label": "DispatchToFunctionImpl()",
    "kind": "Method",
    "detail": "Function (size_t size = std::tuple_size<std::decay_t<Tuple>>::value ;)",
    "insertText": "DispatchToFunctionImpl(function, std::forward<Tuple>(args), std::make_index_sequence<size>())"
  },
  {
    "label": "DispatchToMethodImpl()",
    "kind": "Method",
    "detail": "Function (} template<ObjT,Method,InTuple,OutTuple,size_t . . . InNs,size_t . . . OutNs> void)",
    "insertText": "DispatchToMethodImpl(const ObjT& obj, Method method, InTuple&& in, OutTuple* out, std::index_sequence<InNs...>, std::index_sequence<OutNs...>)"
  },
  {
    "label": "DispatchToMethod()",
    "kind": "Method",
    "detail": "Function (} template<ObjT,Method,InTuple,OutTuple> void)",
    "insertText": "DispatchToMethod(const ObjT& obj, Method method, InTuple&& in, OutTuple* out)"
  },
  {
    "label": "DispatchToMethodImpl()",
    "kind": "Method",
    "detail": "Function (size_t in_size = std::tuple_size<std::decay_t<InTuple>>::value ; size_t out_size = std::tuple_size<OutTuple>::value ;)",
    "insertText": "DispatchToMethodImpl(obj, method, std::forward<InTuple>(in), out, std::make_index_sequence<in_size>(), std::make_index_sequence<out_size>())"
  }
]