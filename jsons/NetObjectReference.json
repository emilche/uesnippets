[
  {
    "label": "UReplicationSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UReplicationSystem"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FObjectReferenceCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObjectReferenceCache"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetObjectReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetObjectReference"
  },
  {
    "label": "Private",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Private"
  },
  {
    "label": "FNetDependencyInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetDependencyInfo"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Iris / ReplicationSystem / NetRefHandle . h \" # include \" Net / Core / NetToken / NetToken . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / IsPODType . h \" class UReplicationSystem ; class UObject ; namespace UE::Net::Private { class FObjectReferenceCache ; } namespace UE::Net { enum class ENetObjectReferenceTraits : uint32 { None = 0 U,CanBeExported = 1 U,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ENetObjectReferenceTraits)"
  },
  {
    "label": "FNetObjectReference()",
    "kind": "Method",
    "detail": "Function (class FNetObjectReference { public :)",
    "insertText": "FNetObjectReference()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FNetObjectReference& Other)"
  },
  {
    "label": "GetRefHandle()",
    "kind": "Method",
    "detail": "Function (} FNetRefHandle)",
    "insertText": "GetRefHandle()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "Result(PathToken.ToString())"
  },
  {
    "label": "Appendf()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Appendf(TEXT(\" : %s\"), ToCStr(RefHandle.ToString()))"
  },
  {
    "label": "FNetObjectReference()",
    "kind": "Method",
    "detail": "Function (} } private : class Private::FObjectReferenceCache ;)",
    "insertText": "FNetObjectReference(FNetRefHandle InHandle, FNetToken InPathToken, ENetObjectReferenceTraits InTraits) : RefHandle(InHandle) , PathToken(InPathToken) , Traits(InTraits)"
  },
  {
    "label": "FNetObjectReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetObjectReference(FNetRefHandle Handle) : FNetObjectReference(Handle, FNetToken(), ENetObjectReferenceTraits::None)"
  },
  {
    "label": "FNetDependencyInfo()",
    "kind": "Method",
    "detail": "Function (} FNetRefHandle RefHandle ; FNetToken PathToken ; ENetObjectReferenceTraits Traits = ENetObjectReferenceTraits::None ; } ; struct FNetDependencyInfo {)",
    "insertText": "FNetDependencyInfo(const FNetObjectReference& InObjectRef) : ObjectRef(InObjectRef)"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (} FNetObjectReference ObjectRef ; } ; enum class ENetObjectReferenceResolveResult : uint32 { None = 0 U,HasUnresolvedReferences = 1<<0 U,HasUnresolvedMustBeMappedReferences = HasUnresolvedReferences<<1 U,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(ENetObjectReferenceResolveResult)"
  }
]