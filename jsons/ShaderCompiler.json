[
  {
    "label": "FAsyncCompilationNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncCompilationNotification"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "IDistributedBuildController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDistributedBuildController"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderCompilerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerStats"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FShaderPipelineCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCompileJob"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FJobObjectLimitationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJobObjectLimitationInfo"
  },
  {
    "label": "FShaderJobCacheStoredOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderJobCacheStoredOutput"
  },
  {
    "label": "FShaderJobCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderJobCache"
  },
  {
    "label": "FShaderCompileJobCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJobCollection"
  },
  {
    "label": "IConsoleObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleObject"
  },
  {
    "label": "FGlobalShaderTypeCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderTypeCompiler"
  },
  {
    "label": "FShaderCompileMemoryUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompileMemoryUsage"
  },
  {
    "label": "FShaderCompileThreadRunnableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileThreadRunnableBase"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompileThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileThreadRunnable"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompileWorkerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompileWorkerInfo"
  },
  {
    "label": "FMemoryMonitoringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryMonitoringState"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompileUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileUtilities"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FShaderCompileDistributedThreadRunnable_Interface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileDistributedThreadRunnable_Interface"
  },
  {
    "label": "FDistributedShaderCompilerTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistributedShaderCompilerTask"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "IDistributedBuildController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDistributedBuildController"
  },
  {
    "label": "FDistributedBuildStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDistributedBuildStats"
  },
  {
    "label": "FShaderCompilerCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerCounters"
  },
  {
    "label": "FShaderCompilerMaterialCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerMaterialCounters"
  },
  {
    "label": "FShaderTimings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderTimings"
  },
  {
    "label": "FShaderCompilerSinglePermutationStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerSinglePermutationStat"
  },
  {
    "label": "FShaderStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderStats"
  },
  {
    "label": "FShaderCompilerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerStats"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderJobCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderJobCache"
  },
  {
    "label": "contains",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "contains"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompileThreadRunnableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileThreadRunnableBase"
  },
  {
    "label": "FShaderCompileThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileThreadRunnable"
  },
  {
    "label": "FShaderCompileXGEThreadRunnable_XmlInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileXGEThreadRunnable_XmlInterface"
  },
  {
    "label": "FShaderCompileDistributedThreadRunnable_Interface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileDistributedThreadRunnable_Interface"
  },
  {
    "label": "FShaderCompileFASTBuildThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileFASTBuildThreadRunnable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FODSCRequestPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCRequestPayload"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderRecompileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderRecompileData"
  },
  {
    "label": "AreShaderErrorsFatal()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreShaderErrorsFatal()"
  },
  {
    "label": "IsShaderJobCacheDDCEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShaderJobCacheDDCEnabled()"
  },
  {
    "label": "IsMaterialMapDDCEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialMapDDCEnabled()"
  },
  {
    "label": "FShaderCompileJobCollection()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FShaderCompileJobCollection(FCriticalSection& InCompileQueueSection)"
  },
  {
    "label": "RemoveJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveJob(FShaderCommonCompileJob* InJob)"
  },
  {
    "label": "RemoveAllPendingJobsWithId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllPendingJobsWithId(uint32 InId)"
  },
  {
    "label": "SubmitJobs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitJobs(const TArray<FShaderCommonCompileJobPtr>& InJobs)"
  },
  {
    "label": "ProcessFinishedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFinishedJob(FShaderCommonCompileJob* FinishedJob, bool bCompilationSkipped = false)"
  },
  {
    "label": "AddToCacheAndProcessPending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToCacheAndProcessPending(FShaderCommonCompileJob* FinishedJob)"
  },
  {
    "label": "GetPendingJobs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPendingJobs(EShaderCompilerWorkerType InWorkerType, EShaderCompileJobPriority InPriority, int32 MinNumJobs, int32 MaxNumJobs, TArray<FShaderCommonCompileJobPtr>& OutJobs)"
  },
  {
    "label": "HandlePrintStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePrintStats()"
  },
  {
    "label": "BeginCompileShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCompileShader(const FGlobalShaderType* ShaderType, int32 PermutationId, EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, TArray<FShaderCommonCompileJobPtr>& NewJobs)"
  },
  {
    "label": "BeginCompileShaderPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCompileShaderPipeline(EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, const FShaderPipelineType* ShaderPipeline, TArray<FShaderCommonCompileJobPtr>& NewJobs)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"ShaderCompilingThread\")"
  },
  {
    "label": "FShaderCompileThreadRunnableBase()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "FShaderCompileThreadRunnableBase(class FShaderCompilingManager* InManager)"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartThread()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "PullTasksFromQueue()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "PullTasksFromQueue()"
  },
  {
    "label": "PushCompletedJobsToManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCompletedJobsToManager()"
  },
  {
    "label": "WriteNewTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNewTasks()"
  },
  {
    "label": "LaunchWorkersIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchWorkersIfNeeded()"
  },
  {
    "label": "ReadAvailableResults()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReadAvailableResults()"
  },
  {
    "label": "CompileDirectlyThroughDll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileDirectlyThroughDll()"
  },
  {
    "label": "PrintWorkerMemoryUsageWithLockTaken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintWorkerMemoryUsageWithLockTaken()"
  },
  {
    "label": "SuspendWorkersAndBacklogJobs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SuspendWorkersAndBacklogJobs(int32 NumWorkers, int32* OutNumBackloggedJobs = nullptr)"
  },
  {
    "label": "ResumeSuspendedWorkers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ResumeSuspendedWorkers(int32 NumWorkers)"
  },
  {
    "label": "DiscardWorkerOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardWorkerOutputFile(int32 WorkerIndex)"
  },
  {
    "label": "CheckMemoryLimitViolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckMemoryLimitViolation()"
  },
  {
    "label": "QueryMemoryStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryMemoryStatus(FJobObjectLimitationInfo& OutInfo)"
  },
  {
    "label": "QueryMemoryLimitViolationStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryMemoryLimitViolationStatus(FJobObjectLimitationInfo& OutInfo)"
  },
  {
    "label": "DoWriteTasks()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoWriteTasks(const TArray<FShaderCommonCompileJobPtr>& QueuedJobs, FArchive& TransferFile, IDistributedBuildController* BuildDistributionController = nullptr, bool bUseRelativePaths = false, bool bCompressTaskFile = false)"
  },
  {
    "label": "DoReadTaskResults()",
    "kind": "Method",
    "detail": "Function (FSCWErrorCode::ECode)",
    "insertText": "DoReadTaskResults(const TArray<FShaderCommonCompileJobPtr>& QueuedJobs, FArchive& OutputFile)"
  },
  {
    "label": "ExecuteShaderCompileJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteShaderCompileJob(FShaderCommonCompileJob& Job)"
  },
  {
    "label": "MoveFileHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFileHelper(const FString& To, const FString& From)"
  },
  {
    "label": "DeleteFileHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFileHelper(const FString& Filename)"
  },
  {
    "label": "GenerateBrdfHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBrdfHeaders(const EShaderPlatform Platform)"
  },
  {
    "label": "GenerateBrdfHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBrdfHeaders(const FName& ShaderFormat)"
  },
  {
    "label": "ApplyDerivedDefines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDerivedDefines(FShaderCompilerEnvironment& OutEnvironment, FShaderCompilerEnvironment* SharedEnvironment, const EShaderPlatform Platform)"
  },
  {
    "label": "AppendGBufferDDCKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendGBufferDDCKeyString(const EShaderPlatform Platform, FString& KeyString)"
  },
  {
    "label": "AppendGBufferDDCKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendGBufferDDCKey(const EShaderPlatform Platform, FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "WriteGBufferInfoAutogen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteGBufferInfoAutogen(EShaderPlatform TargetPlatform, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderMaterialPropertyDefines& DefineData, const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderGlobalDefines& DefineData, const FShaderCompilerEnvironment& Environment, const EShaderPlatform Platform)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderLightmapPropertyDefines& DefineData, const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderCompilerDefines& DefineData, const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "FetchGBufferLayout()",
    "kind": "Method",
    "detail": "Function (EGBufferLayout)",
    "insertText": "FetchGBufferLayout(const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "FetchGBufferParamsRuntime()",
    "kind": "Method",
    "detail": "Function (FGBufferParams)",
    "insertText": "FetchGBufferParamsRuntime(EShaderPlatform Platform, EGBufferLayout Layout)"
  },
  {
    "label": "FetchGBufferParamsPipeline()",
    "kind": "Method",
    "detail": "Function (FGBufferParams)",
    "insertText": "FetchGBufferParamsPipeline(EShaderPlatform Platform, EGBufferLayout Layout)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "GetDependencyFilesForJobs()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetDependencyFilesForJobs(TArray<FShaderCommonCompileJobPtr>& Jobs)"
  },
  {
    "label": "DispatchShaderCompileJobsBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchShaderCompileJobsBatch(TArray<FShaderCommonCompileJobPtr>& JobsToSerialize)"
  },
  {
    "label": "WriteStatSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStatSummary(const TCHAR* AggregatedSuffix)"
  },
  {
    "label": "GatherAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAnalytics(TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "IncrementMaterialCook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMaterialCook()"
  },
  {
    "label": "IncrementMaterialTranslated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMaterialTranslated(double InTotalTime, double InTranslationOnlyTime, double InSerializeTime)"
  },
  {
    "label": "IncrementMaterialCacheHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMaterialCacheHit()"
  },
  {
    "label": "WriteStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStats(class FOutputDevice* Ar = nullptr)"
  },
  {
    "label": "WriteStatSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStatSummary()"
  },
  {
    "label": "GetTotalShadersCompiled()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTotalShadersCompiled()"
  },
  {
    "label": "Aggregate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Aggregate(FShaderCompilerStats& Other)"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer)"
  },
  {
    "label": "ReadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFromCompactBinary(FCbObjectView& Reader)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject>)",
    "insertText": "ToJson()"
  },
  {
    "label": "AddDDCMiss()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDDCMiss(uint32 NumMisses)"
  },
  {
    "label": "AddDDCHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDDCHit(uint32 NumHits)"
  },
  {
    "label": "GetTimeShaderCompilationWasActive()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetTimeShaderCompilationWasActive()"
  },
  {
    "label": "RegisterLocalWorkerIdleTime()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterLocalWorkerIdleTime(double IdleTime)"
  },
  {
    "label": "RegisterNewPendingJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNewPendingJob(FShaderCommonCompileJob& InOutJob)"
  },
  {
    "label": "RegisterAssignedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAssignedJob(FShaderCommonCompileJob& InOutJob)"
  },
  {
    "label": "RegisterFinishedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFinishedJob(FShaderCommonCompileJob& InOutJob, bool bCompilationSkipped)"
  },
  {
    "label": "RegisterJobBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterJobBatch(int32 NumJobs, EExecutionType ExecType)"
  },
  {
    "label": "RegisterDistributedBuildStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDistributedBuildStats(const FDistributedBuildStats& InStats)"
  },
  {
    "label": "GatherAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAnalytics(const FString& BaseName, TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "GetStaticAssetTypeName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetStaticAssetTypeName()"
  },
  {
    "label": "ReleaseJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseJob(FShaderCommonCompileJobPtr& Job)"
  },
  {
    "label": "ReleaseJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseJob(FShaderCommonCompileJob* Job)"
  },
  {
    "label": "CalculateNumberOfCompilingThreads()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CalculateNumberOfCompilingThreads(int32 NumberOfCores, int32 NumberOfCoresIncludingHyperthreads)"
  },
  {
    "label": "LaunchWorker()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "LaunchWorker(const FString& WorkingDirectory, uint32 ProcessId, uint32 ThreadId, const FString& WorkerInputFile, const FString& WorkerOutputFile)"
  },
  {
    "label": "BlockOnShaderMapCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnShaderMapCompletion(const TArray<int32>& ShaderMapIdsToFinishCompiling, TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps)"
  },
  {
    "label": "BlockOnAllShaderMapCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnAllShaderMapCompletion(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps)"
  },
  {
    "label": "AddCompiledResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompiledResults(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps, int32 ShaderMapIdx, const FShaderMapFinalizeResults& Results)"
  },
  {
    "label": "ProcessCompiledShaderMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCompiledShaderMaps(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps, float TimeBudget)"
  },
  {
    "label": "ProcessCompiledNiagaraShaderMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCompiledNiagaraShaderMaps(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps, float TimeBudget)"
  },
  {
    "label": "PropagateMaterialChangesToPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateMaterialChangesToPrimitives(TMap<TRefCountPtr<FMaterial>, TRefCountPtr<FMaterialShaderMap>>& MaterialsToUpdate)"
  },
  {
    "label": "HandlePotentialRetryOnError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePotentialRetryOnError(TMap<int32, FShaderMapFinalizeResults>& CompletedShaderMaps)"
  },
  {
    "label": "AllTargetPlatformSupportsRemoteShaderCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllTargetPlatformSupportsRemoteShaderCompiling()"
  },
  {
    "label": "UpdateNumRemainingAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNumRemainingAssets()"
  },
  {
    "label": "ReportMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMemoryUsage()"
  },
  {
    "label": "FShaderCompilingManager()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FShaderCompilingManager()"
  },
  {
    "label": "OnMachineResourcesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMachineResourcesChanged(int32 NumberOfCores, int32 NumberOfCoresIncludingHyperthreads)"
  },
  {
    "label": "IsCompilingShaderMap()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompilingShaderMap(uint32 Id)"
  },
  {
    "label": "ProcessFinishedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFinishedJob(FShaderCommonCompileJob* FinishedJob)"
  },
  {
    "label": "CancelCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCompilation(const TCHAR* MaterialName, const TArray<int32>& ShaderMapIdsToCancel)"
  },
  {
    "label": "FinishCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCompilation(const TCHAR* MaterialName, const TArray<int32>& ShaderMapIdsToFinishCompiling)"
  },
  {
    "label": "PrintStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintStats()"
  },
  {
    "label": "GetExternalMemoryUsage()",
    "kind": "Method",
    "detail": "Function (FShaderCompileMemoryUsage)",
    "insertText": "GetExternalMemoryUsage()"
  },
  {
    "label": "ProcessAsyncResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncResults(float TimeSlice, bool bBlockOnGlobalShaderCompletion)"
  },
  {
    "label": "ProcessAsyncResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncResults(bool bLimitExecutionTime, bool bBlockOnGlobalShaderCompletion)"
  },
  {
    "label": "IsShaderCompilerWorkerRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShaderCompilerWorkerRunning(FProcHandle & WorkerHandle)"
  },
  {
    "label": "GlobalBeginCompileShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalBeginCompileShader(\n\tconst FString& DebugGroupName,\n\tconst class FVertexFactoryType* VFType,\n\tconst class FShaderType* ShaderType,\n\tconst class FShaderPipelineType* ShaderPipelineType,\n\tint32 PermutationId,\n\tconst TCHAR* SourceFilename,\n\tconst TCHAR* FunctionName,\n\tFShaderTarget Target,\n\tFShaderCompilerInput& Input,\n\tbool bAllowDevelopmentShaderCompile,\n\tconst FString& DebugDescription,\n\tconst FString& DebugExtension\n\t)"
  },
  {
    "label": "GlobalBeginCompileShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalBeginCompileShader(\n\tconst FString& DebugGroupName,\n\tconst class FVertexFactoryType* VFType,\n\tconst class FShaderType* ShaderType,\n\tconst class FShaderPipelineType* ShaderPipelineType,\n\tint32 PermutationId,\n\tconst TCHAR* SourceFilename,\n\tconst TCHAR* FunctionName,\n\tFShaderTarget Target,\n\tFShaderCompilerInput& Input,\n\tbool bAllowDevelopmentShaderCompile = true,\n\tconst TCHAR* DebugDescription = nullptr,\n\tconst TCHAR* DebugExtension = nullptr\n)"
  },
  {
    "label": "GetOutdatedShaderTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOutdatedShaderTypes(TArray<const FShaderType*>& OutdatedShaderTypes, TArray<const FShaderPipelineType*>& OutdatedShaderPipelineTypes, TArray<const FVertexFactoryType*>& OutdatedFactoryTypes)"
  },
  {
    "label": "RecompileShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecompileShaders(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "IsGlobalShaderMapComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGlobalShaderMapComplete(const TCHAR* TypeNameSubstring = nullptr)"
  },
  {
    "label": "VerifyGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyGlobalShaders(EShaderPlatform Platform, bool bLoadedFromCacheFile, const TArray<const FShaderType*>* OutdatedShaderTypes = nullptr, const TArray<const FShaderPipelineType*>* OutdatedShaderPipelineTypes = nullptr)"
  },
  {
    "label": "VerifyGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyGlobalShaders(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, bool bLoadedFromCacheFile, const TArray<const FShaderType*>* OutdatedShaderTypes = nullptr, const TArray<const FShaderPipelineType*>* OutdatedShaderPipelineTypes = nullptr)"
  },
  {
    "label": "PrecacheComputePipelineStatesForGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecacheComputePipelineStatesForGlobalShaders(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "RecompileGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecompileGlobalShaders()"
  },
  {
    "label": "RecompileChangedShadersForPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecompileChangedShadersForPlatform(const FString& PlatformName)"
  },
  {
    "label": "BeginRecompileGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRecompileGlobalShaders(const TArray<const FShaderType*>& OutdatedShaderTypes, const TArray<const FShaderPipelineType*>& OutdatedShaderPipelineTypes, EShaderPlatform ShaderPlatform, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "FinishRecompileGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRecompileGlobalShaders()"
  },
  {
    "label": "ProcessCompiledGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCompiledGlobalShaders(const TArray<FShaderCommonCompileJobPtr>& CompilationResults)"
  },
  {
    "label": "SaveGlobalShadersForRemoteRecompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveGlobalShadersForRemoteRecompile(FArchive& Ar, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "LoadGlobalShadersForRemoteRecompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadGlobalShadersForRemoteRecompile(FArchive& Ar, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "SaveGlobalShaderFile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SaveGlobalShaderFile(EShaderPlatform Platform, FString SavePath, class ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "FODSCRequestPayload()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FODSCRequestPayload(\n\t\tEShaderPlatform InShaderPlatform,\n\t\tERHIFeatureLevel::Type InFeatureLevel,\n\t\tEMaterialQualityLevel::Type InQualityLevel,\n\t\tconst FString& InMaterialName,\n\t\tconst FString& InVertexFactoryName,\n\t\tconst FString& InPipelineName,\n\t\tconst TArray<FString>& InShaderTypeNames,\n\t\tint32 InPermutationId,\n\t\tconst FString& InRequestHash\n\t)"
  },
  {
    "label": "FShaderRecompileData()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FShaderRecompileData(const FString& InPlatformName, TArray<FString>* OutModifiedFiles, TArray<uint8>* OutMeshMaterialMaps, TArray<uint8>* OutGlobalShaderMap)"
  },
  {
    "label": "FShaderRecompileData()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FShaderRecompileData(const FString& InPlatformName, EShaderPlatform InShaderPlatform, ODSCRecompileCommand InCommandType, TArray<FString>* OutModifiedFiles, TArray<uint8>* OutMeshMaterialMaps, TArray<uint8>* OutGlobalShaderMap)"
  },
  {
    "label": "RecompileShadersForRemote()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecompileShadersForRemote(FShaderRecompileData& Args, const FString& OutputDirectory)"
  },
  {
    "label": "ShutdownShaderCompilers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownShaderCompilers(TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileGlobalShaderMap(bool bRefreshShaderMap=false)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileGlobalShaderMap(ERHIFeatureLevel::Type InFeatureLevel, bool bRefreshShaderMap=false)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileGlobalShaderMap(EShaderPlatform Platform, bool bRefreshShaderMap = false)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileGlobalShaderMap(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, bool bRefreshShaderMap)"
  },
  {
    "label": "ShutdownGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownGlobalShaderMap()"
  },
  {
    "label": "ShouldDumpShaderDDCKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDumpShaderDDCKeys()"
  },
  {
    "label": "DumpShaderDDCKeyToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpShaderDDCKeyToFile(const EShaderPlatform InPlatform, bool bWithEditor, const FString& FileName, const FString& DDCKey)"
  },
  {
    "label": "DumpShaderDDCKeyToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpShaderDDCKeyToFile(const EShaderPlatform InPlatform, bool bWithEditor, const TCHAR* DebugGroupName, const FString& DDCKey)"
  },
  {
    "label": "ProcessCookOnTheFlyShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCookOnTheFlyShaders(bool bReloadGlobalShaders, const TArray<uint8>& MeshMaterialMaps, const TArray<FString>& MaterialsToLoad, const TArray<uint8>& GlobalShaderMap)"
  }
]