[
  {
    "label": "FAsyncCompilationNotification",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncCompilationNotification"
  },
  {
    "label": "FCbObjectView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbObjectView"
  },
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FVertexFactoryType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVertexFactoryType"
  },
  {
    "label": "IDistributedBuildController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDistributedBuildController"
  },
  {
    "label": "FMaterialShaderMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialShaderMap"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderCompilerStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerStats"
  },
  {
    "label": "FShaderKeyGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderKeyGenerator"
  },
  {
    "label": "FShaderPipelineCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCompileJob"
  },
  {
    "label": "UMaterialInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMaterialInterface"
  },
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FJobObjectLimitationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJobObjectLimitationInfo"
  },
  {
    "label": "FShaderJobCacheStoredOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderJobCacheStoredOutput"
  },
  {
    "label": "FShaderJobCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderJobCache"
  },
  {
    "label": "FShaderCompileJobCollection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJobCollection"
  },
  {
    "label": "IConsoleObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleObject"
  },
  {
    "label": "FGlobalShaderTypeCompiler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGlobalShaderTypeCompiler"
  },
  {
    "label": "FShaderCompileMemoryUsage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompileMemoryUsage"
  },
  {
    "label": "FShaderCompileThreadRunnableBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileThreadRunnableBase"
  },
  {
    "label": "FShaderCompilingManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompilingManager"
  },
  {
    "label": "FShaderCompileThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileThreadRunnable"
  },
  {
    "label": "FShaderCompileWorkerInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompileWorkerInfo"
  },
  {
    "label": "FMemoryMonitoringState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryMonitoringState"
  },
  {
    "label": "FShaderCompileUtilities",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileUtilities"
  },
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FShaderCompileDistributedThreadRunnable_Interface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileDistributedThreadRunnable_Interface"
  },
  {
    "label": "FDistributedShaderCompilerTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDistributedShaderCompilerTask"
  },
  {
    "label": "FDistributedBuildStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDistributedBuildStats"
  },
  {
    "label": "FShaderCompilerCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerCounters"
  },
  {
    "label": "FShaderCompilerMaterialCounters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerMaterialCounters"
  },
  {
    "label": "FShaderTimings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderTimings"
  },
  {
    "label": "FShaderCompilerSinglePermutationStat",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerSinglePermutationStat"
  },
  {
    "label": "FShaderStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderStats"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderCompileXGEThreadRunnable_XmlInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileXGEThreadRunnable_XmlInterface"
  },
  {
    "label": "FShaderCompileFASTBuildThreadRunnable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileFASTBuildThreadRunnable"
  },
  {
    "label": "FShaderType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderType"
  },
  {
    "label": "FShaderPipelineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineType"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FODSCRequestPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCRequestPayload"
  },
  {
    "label": "FShaderRecompileData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderRecompileData"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / RefCounting . h \" # include \" HAL / PlatformProcess . h \" # include \" ShaderCore . h \" # include \" ShaderCompilerCore . h \" # include \" ShaderCompilerJobTypes . h \" # include \" Shader . h \" # include \" HAL / RunnableThread . h \" # include \" HAL / Runnable . h \" # include \" Templates / Atomic . h \" # include \" Templates / UniquePtr . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" RHIDefinitions . h \" # include \" GBufferInfo . h \" # include \" ShaderMaterial . h \" # include \" Misc / ScopeRWLock . h \" # include \" IAssetCompilingManager . h \" # include \" Containers / HashTable . h \" # include \" Containers / List . h \" # include \" Containers / Deque . h \" # include \" Hash / Blake3 . h \" # include \" SceneTypes . h \" # include \" UObject / StrongObjectPtr . h \" # include \" ShaderCompiler . generated . h \" class FAsyncCompilationNotification ; class FCbObjectView ; class FCbWriter ; class FVertexFactoryType ; class IDistributedBuildController ; class FMaterialShaderMap ; class FShaderCompileJob ; struct FShaderCompilerStats ; class FShaderKeyGenerator ; class FShaderPipelineCompileJob ; class UMaterialInterface ; class FJsonObject ; struct FAnalyticsEventAttribute ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogShaderCompilers, Log, All)"
  },
  {
    "label": "AreShaderErrorsFatal()",
    "kind": "Method",
    "detail": "Function (# define DEBUG_INFINITESHADERCOMPILE 0 bool)",
    "insertText": "AreShaderErrorsFatal()"
  },
  {
    "label": "IsShaderJobCacheDDCEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShaderJobCacheDDCEnabled()"
  },
  {
    "label": "IsMaterialMapDDCEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaterialMapDDCEnabled()"
  },
  {
    "label": "FShaderCompileJobCollection()",
    "kind": "Method",
    "detail": "Function (struct FJobObjectLimitationInfo ; struct FShaderJobCacheStoredOutput ; class FShaderJobCache ; class FShaderCompileJobCollection { public :)",
    "insertText": "FShaderCompileJobCollection(FCriticalSection& InCompileQueueSection)"
  },
  {
    "label": "PrepareJob()",
    "kind": "Method",
    "detail": "Function (FShaderCompileJob*)",
    "insertText": "PrepareJob(uint32 InId, const FShaderCompileJobKey& InKey, EShaderCompileJobPriority InPriority)"
  },
  {
    "label": "PrepareJob()",
    "kind": "Method",
    "detail": "Function (FShaderPipelineCompileJob*)",
    "insertText": "PrepareJob(uint32 InId, const FShaderPipelineCompileJobKey& InKey, EShaderCompileJobPriority InPriority)"
  },
  {
    "label": "RemoveJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveJob(FShaderCommonCompileJob* InJob)"
  },
  {
    "label": "RemoveAllPendingJobsWithId()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RemoveAllPendingJobsWithId(uint32 InId)"
  },
  {
    "label": "SubmitJobs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitJobs(const TArray<FShaderCommonCompileJobPtr>& InJobs)"
  },
  {
    "label": "ProcessFinishedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFinishedJob(FShaderCommonCompileJob* FinishedJob, bool bCompilationSkipped = false)"
  },
  {
    "label": "AddToCacheAndProcessPending()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToCacheAndProcessPending(FShaderCommonCompileJob* FinishedJob)"
  },
  {
    "label": "GetCachingStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCachingStats(FShaderCompilerStats& OutStats)"
  },
  {
    "label": "GetNumPendingJobs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPendingJobs(EShaderCompileJobPriority InPriority)"
  },
  {
    "label": "GetNumOutstandingJobs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumOutstandingJobs()"
  },
  {
    "label": "GetNumPendingJobs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumPendingJobs()"
  },
  {
    "label": "GetPendingJobs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPendingJobs(EShaderCompilerWorkerType InWorkerType, EShaderCompileJobPriority InPriority, int32 MinNumJobs, int32 MaxNumJobs, TArray<FShaderCommonCompileJobPtr>& OutJobs)"
  },
  {
    "label": "HandlePrintStats()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandlePrintStats()"
  },
  {
    "label": "BeginCompileShader()",
    "kind": "Method",
    "detail": "Function (TPimplPtr<FShaderJobCache> JobsCache ; class IConsoleObject* PrintStatsCmd ; } ; # if WITH_EDITOR class FGlobalShaderTypeCompiler { public : void)",
    "insertText": "BeginCompileShader(const FGlobalShaderType* ShaderType, int32 PermutationId, EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, TArray<FShaderCommonCompileJobPtr>& NewJobs)"
  },
  {
    "label": "BeginCompileShaderPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginCompileShaderPipeline(EShaderPlatform Platform, EShaderPermutationFlags PermutationFlags, const FShaderPipelineType* ShaderPipeline, TArray<FShaderCommonCompileJobPtr>& NewJobs)"
  },
  {
    "label": "FinishCompileShader()",
    "kind": "Method",
    "detail": "Function (FShader*)",
    "insertText": "FinishCompileShader(const FGlobalShaderType* ShaderType, const FShaderCompileJob& CompileJob, const FShaderPipelineType* ShaderPipelineType)"
  },
  {
    "label": "PrintWorkerMemoryUsage()",
    "kind": "Method",
    "detail": "Function (} ; # endif struct FShaderCompileMemoryUsage { uint64 VirtualMemory ; uint64 PhysicalMemory ; } ; class FShaderCompileThreadRunnableBase : public FRunnable { class FShaderCompilingManager ; protected : class FShaderCompilingManager* Manager ; FRunnableThread* Thread ; int32 MinPriorityIndex ; int32 MaxPriorityIndex ; TAtomic<bool> bForceFinish ; bool)",
    "insertText": "PrintWorkerMemoryUsage(bool bAllowToWaitForLock=true)"
  },
  {
    "label": "FShaderCompileThreadRunnableBase()",
    "kind": "Method",
    "detail": "Function (} public :)",
    "insertText": "FShaderCompileThreadRunnableBase(class FShaderCompilingManager* InManager)"
  },
  {
    "label": "FShaderCompileThreadRunnableBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderCompileThreadRunnableBase()"
  },
  {
    "label": "SetPriorityRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPriorityRange(EShaderCompileJobPriority MinPriority, EShaderCompileJobPriority MaxPriority)"
  },
  {
    "label": "MinPriorityIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinPriorityIndex(int32)"
  },
  {
    "label": "MaxPriorityIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaxPriorityIndex(int32)"
  },
  {
    "label": "StartThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StartThread()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (bForceFinish = true ; } uint32)",
    "insertText": "Run()"
  },
  {
    "label": "WaitForCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForCompletion()"
  },
  {
    "label": "CompilingLoop()",
    "kind": "Method",
    "detail": "Function (} } int32)",
    "insertText": "CompilingLoop()"
  },
  {
    "label": "OnMachineResourcesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMachineResourcesChanged()"
  },
  {
    "label": "FShaderCompileThreadRunnable()",
    "kind": "Method",
    "detail": "Function (} } ; class FShaderCompileThreadRunnable : public FShaderCompileThreadRunnableBase { class FShaderCompilingManager ; private : const bool bEstimateCommittedMemory = false ; TArray<TUniquePtr<struct FShaderCompileWorkerInfo>> WorkerInfos ; FCriticalSection WorkerInfosLock ; double LastCheckForWorkersTime = 0 . 0 ; bool bParallelizeIO = false ; TArray<FShaderCommonCompileJobPtr> BackloggedJobs ; struct FMemoryMonitoringState { double LastTimeOfMemoryLimitPoll = 0 . 0 ; double LastTimeOfSuspeningOrResumingWorkers = 0 . 0 ; bool bHasFailedToSuspendWorkers = false ; bool bHasSuspendedWorkers = false ; } MemoryMonitoringState ; public :)",
    "insertText": "FShaderCompileThreadRunnable(class FShaderCompilingManager* InManager)"
  },
  {
    "label": "FShaderCompileThreadRunnable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderCompileThreadRunnable()"
  },
  {
    "label": "PrintWorkerMemoryUsage()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "PrintWorkerMemoryUsage(bool bAllowToWaitForLock = true)"
  },
  {
    "label": "GetExternalWorkerMemoryUsage()",
    "kind": "Method",
    "detail": "Function (FShaderCompileMemoryUsage)",
    "insertText": "GetExternalWorkerMemoryUsage()"
  },
  {
    "label": "PullTasksFromQueue()",
    "kind": "Method",
    "detail": "Function (private : int32)",
    "insertText": "PullTasksFromQueue()"
  },
  {
    "label": "PushCompletedJobsToManager()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushCompletedJobsToManager()"
  },
  {
    "label": "WriteNewTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteNewTasks()"
  },
  {
    "label": "LaunchWorkersIfNeeded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LaunchWorkersIfNeeded()"
  },
  {
    "label": "ReadAvailableResults()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ReadAvailableResults()"
  },
  {
    "label": "CompileDirectlyThroughDll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileDirectlyThroughDll()"
  },
  {
    "label": "PrintWorkerMemoryUsageWithLockTaken()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintWorkerMemoryUsageWithLockTaken()"
  },
  {
    "label": "GetNumberOfWorkers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfWorkers()"
  },
  {
    "label": "GetNumberOfAvailableWorkersUnsafe()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfAvailableWorkersUnsafe()"
  },
  {
    "label": "GetNumberOfAvailableWorkers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfAvailableWorkers()"
  },
  {
    "label": "GetNumberOfSuspendedWorkersUnsafe()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfSuspendedWorkersUnsafe()"
  },
  {
    "label": "SuspendWorkersAndBacklogJobs()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SuspendWorkersAndBacklogJobs(int32 NumWorkers, int32* OutNumBackloggedJobs = nullptr)"
  },
  {
    "label": "ResumeSuspendedWorkers()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ResumeSuspendedWorkers(int32 NumWorkers)"
  },
  {
    "label": "DiscardWorkerOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscardWorkerOutputFile(int32 WorkerIndex)"
  },
  {
    "label": "GetWorkingDirectoryForWorker()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorkingDirectoryForWorker(int32 WorkerIndex, bool bRelativePath = false)"
  },
  {
    "label": "CheckMemoryLimitViolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckMemoryLimitViolation()"
  },
  {
    "label": "QueryMemoryStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryMemoryStatus(FJobObjectLimitationInfo& OutInfo)"
  },
  {
    "label": "QueryMemoryLimitViolationStatus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "QueryMemoryLimitViolationStatus(FJobObjectLimitationInfo& OutInfo)"
  },
  {
    "label": "DoWriteTasks()",
    "kind": "Method",
    "detail": "Function (} ; class FShaderCompileUtilities { public : bool)",
    "insertText": "DoWriteTasks(const TArray<FShaderCommonCompileJobPtr>& QueuedJobs, FArchive& TransferFile, IDistributedBuildController* BuildDistributionController = nullptr, bool bUseRelativePaths = false, bool bCompressTaskFile = false)"
  },
  {
    "label": "DoReadTaskResults()",
    "kind": "Method",
    "detail": "Function (FSCWErrorCode::ECode)",
    "insertText": "DoReadTaskResults(const TArray<FShaderCommonCompileJobPtr>& QueuedJobs, FArchive& OutputFile)"
  },
  {
    "label": "ExecuteShaderCompileJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExecuteShaderCompileJob(FShaderCommonCompileJob& Job)"
  },
  {
    "label": "CreateFileHelper()",
    "kind": "Method",
    "detail": "Function (class FArchive*)",
    "insertText": "CreateFileHelper(const FString& Filename)"
  },
  {
    "label": "MoveFileHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveFileHelper(const FString& To, const FString& From)"
  },
  {
    "label": "DeleteFileHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteFileHelper(const FString& Filename)"
  },
  {
    "label": "GenerateBrdfHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBrdfHeaders(const EShaderPlatform Platform)"
  },
  {
    "label": "GenerateBrdfHeaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateBrdfHeaders(const FName& ShaderFormat)"
  },
  {
    "label": "ApplyDerivedDefines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyDerivedDefines(FShaderCompilerEnvironment& OutEnvironment, FShaderCompilerEnvironment* SharedEnvironment, const EShaderPlatform Platform)"
  },
  {
    "label": "AppendGBufferDDCKeyString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendGBufferDDCKeyString(const EShaderPlatform Platform, FString& KeyString)"
  },
  {
    "label": "AppendGBufferDDCKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendGBufferDDCKey(const EShaderPlatform Platform, FShaderKeyGenerator& KeyGen)"
  },
  {
    "label": "WriteGBufferInfoAutogen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteGBufferInfoAutogen(EShaderPlatform TargetPlatform, ERHIFeatureLevel::Type FeatureLevel)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderMaterialPropertyDefines& DefineData, const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderGlobalDefines& DefineData, const FShaderCompilerEnvironment& Environment, const EShaderPlatform Platform)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderLightmapPropertyDefines& DefineData, const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "ApplyFetchEnvironment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyFetchEnvironment(FShaderCompilerDefines& DefineData, const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "FetchGBufferLayout()",
    "kind": "Method",
    "detail": "Function (EGBufferLayout)",
    "insertText": "FetchGBufferLayout(const FShaderCompilerEnvironment& Environment)"
  },
  {
    "label": "FetchGBufferParamsRuntime()",
    "kind": "Method",
    "detail": "Function (FGBufferParams)",
    "insertText": "FetchGBufferParamsRuntime(EShaderPlatform Platform, EGBufferLayout Layout)"
  },
  {
    "label": "FetchGBufferParamsPipeline()",
    "kind": "Method",
    "detail": "Function (FGBufferParams)",
    "insertText": "FetchGBufferParamsPipeline(EShaderPlatform Platform, EGBufferLayout Layout)"
  },
  {
    "label": "FShaderCompileDistributedThreadRunnable_Interface()",
    "kind": "Method",
    "detail": "Function (} ; class FShaderCompileDistributedThreadRunnable_Interface : public FShaderCompileThreadRunnableBase { uint32 NumDispatchedJobs ; TSparseArray<class FDistributedShaderCompilerTask*> DispatchedTasks ; double LastTimeTaskCompleted ; bool bIsHung ; public :)",
    "insertText": "FShaderCompileDistributedThreadRunnable_Interface(class FShaderCompilingManager* InManager, class IDistributedBuildController& InController)"
  },
  {
    "label": "FShaderCompileDistributedThreadRunnable_Interface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShaderCompileDistributedThreadRunnable_Interface()"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "GetDependencyFilesForJobs()",
    "kind": "Method",
    "detail": "Function (protected : IDistributedBuildController& CachedController ; TMap<EShaderPlatform,TArray<FString>> PlatformShaderInputFilesCache ; private : TArray<FString>)",
    "insertText": "GetDependencyFilesForJobs(TArray<FShaderCommonCompileJobPtr>& Jobs)"
  },
  {
    "label": "DispatchShaderCompileJobsBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchShaderCompileJobsBatch(TArray<FShaderCommonCompileJobPtr>& JobsToSerialize)"
  },
  {
    "label": "GetThreadName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetThreadName()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; using FShaderMapFinalizeResults = FShaderMapCompileResults ; struct FDistributedBuildStats ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerCounters&)",
    "insertText": "operator(const FShaderCompilerCounters& Other)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (AccumulatedLocalWorkerIdleTime + = Other . AccumulatedLocalWorkerIdleTime ; TimesLocalWorkersWereIdle + = Other . TimesLocalWorkersWereIdle ; JobsAssigned + = Other . JobsAssigned ; JobsCompleted + = Other . JobsCompleted ; AccumulatedPendingTime + = Other . AccumulatedPendingTime ; MaxPendingTime =)",
    "insertText": "Max(Other.MaxPendingTime, MaxPendingTime)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (AccumulatedJobExecutionTime + = Other . AccumulatedJobExecutionTime ; MaxJobExecutionTime =)",
    "insertText": "Max(Other.MaxJobExecutionTime, MaxJobExecutionTime)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (AccumulatedJobLifeTime + = Other . AccumulatedJobLifeTime ; MaxJobLifeTime =)",
    "insertText": "Max(Other.MaxJobLifeTime, MaxJobLifeTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (AccumulatedTaskSubmitJobs + = Other . AccumulatedTaskSubmitJobs ; AccumulatedTaskSubmitJobsStall + = Other . AccumulatedTaskSubmitJobsStall ; LocalJobBatchesSeen + = Other . LocalJobBatchesSeen ; TotalJobsReportedInLocalJobBatches + = Other . TotalJobsReportedInLocalJobBatches ; DistributedJobBatchesSeen + = Other . DistributedJobBatchesSeen ; TotalJobsReportedInDistributedJobBatches + = Other . TotalJobsReportedInDistributedJobBatches ;)",
    "insertText": "if(Other.MinShaderCodeSize > 0)"
  },
  {
    "label": "MinShaderCodeSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MinShaderCodeSize(MinShaderCodeSize > 0 ? FMath::Min(MinShaderCodeSize, Other.MinShaderCodeSize) : Other.MinShaderCodeSize)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} MaxShaderCodeSize =)",
    "insertText": "Max(Other.MaxShaderCodeSize, MaxShaderCodeSize)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerMaterialCounters&)",
    "insertText": "operator(const FShaderCompilerMaterialCounters& Other)"
  },
  {
    "label": "WriteStatSummary()",
    "kind": "Method",
    "detail": "Function (NumMaterialsCooked + = Other . NumMaterialsCooked ; MaterialTranslateCalls + = Other . MaterialTranslateCalls ; MaterialTranslateTotalTimeSec + = Other . MaterialTranslateTotalTimeSec ; MaterialTranslateTranslationOnlyTimeSec + = Other . MaterialTranslateTranslationOnlyTimeSec ; MaterialTranslateSerializationOnlyTimeSec + = Other . MaterialTranslateSerializationOnlyTimeSec ; MaterialCacheHits + = Other . MaterialCacheHits ; return* this ; } void)",
    "insertText": "WriteStatSummary(const TCHAR* AggregatedSuffix)"
  },
  {
    "label": "GatherAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAnalytics(TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderTimings&)",
    "insertText": "operator(const FShaderTimings& Other)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (MinCompileTime =)",
    "insertText": "Min(MinCompileTime, Other.MinCompileTime)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (MaxCompileTime =)",
    "insertText": "Max(MaxCompileTime, Other.MaxCompileTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TotalCompileTime + = Other . TotalCompileTime ; TotalPreprocessTime + = Other . TotalPreprocessTime ; NumCompiled + = Other . NumCompiled ;)",
    "insertText": "if(NumCompiled)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (AverageCompileTime = TotalCompileTime / static_cast<)",
    "insertText": "float(NumCompiled)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() FShaderCompilerSinglePermutationStat() : PermutationString() , Compiled(0) , Cooked(0) , CompiledDouble(0) , CookedDouble(0)"
  },
  {
    "label": "FShaderCompilerSinglePermutationStat()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderCompilerSinglePermutationStat(FString PermutationString, uint32 Compiled, uint32 Cooked) : PermutationString(PermutationString) , Compiled(Compiled) , Cooked(Cooked) , CompiledDouble(0) , CookedDouble(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderStats&)",
    "insertText": "operator(const FShaderStats& Other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CompiledDouble + = Other . Compiled ; } else { Compiled + = Other . Compiled ; })",
    "insertText": "if(Cooked)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (CookedDouble + = Other . Cooked ; } else { Cooked + = Other . Cooked ; } CompiledDouble + = Other . CompiledDouble ; CookedDouble + = Other . CookedDouble ; CompileTime + = Other . CompileTime ; PermutationCompilations .)",
    "insertText": "Append(Other.PermutationCompilations)"
  },
  {
    "label": "IncrementMaterialTranslated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMaterialTranslated(double InTotalTime, double InTranslationOnlyTime, double InSerializeTime)"
  },
  {
    "label": "IncrementMaterialCacheHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementMaterialCacheHit()"
  },
  {
    "label": "RegisterCookedShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCookedShaders(uint32 NumCooked, float CompileTime, EShaderPlatform Platform, const FString MaterialPath, FString PermutationString = FString(\"\"))"
  },
  {
    "label": "RegisterCompiledShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterCompiledShaders(uint32 NumPermutations, EShaderPlatform Platform, const FString MaterialPath, FString PermutationString = FString(\"\"))"
  },
  {
    "label": "GetShaderCompilerStats()",
    "kind": "Method",
    "detail": "Function (const TSparseArray<ShaderCompilerStats>&)",
    "insertText": "GetShaderCompilerStats()"
  },
  {
    "label": "WriteStatSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteStatSummary()"
  },
  {
    "label": "GetTotalShadersCompiled()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTotalShadersCompiled()"
  },
  {
    "label": "Aggregate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Aggregate(FShaderCompilerStats& Other)"
  },
  {
    "label": "WriteToCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteToCompactBinary(FCbWriter& Writer)"
  },
  {
    "label": "ReadFromCompactBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadFromCompactBinary(FCbObjectView& Reader)"
  },
  {
    "label": "ToJson()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FJsonObject>)",
    "insertText": "ToJson()"
  },
  {
    "label": "SetMultiProcessAggregated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMultiProcessAggregated()"
  },
  {
    "label": "AddDDCMiss()",
    "kind": "Method",
    "detail": "Function (bMultiProcessAggregated = true ; } void)",
    "insertText": "AddDDCMiss(uint32 NumMisses)"
  },
  {
    "label": "GetDDCMisses()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDDCMisses()"
  },
  {
    "label": "AddDDCHit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDDCHit(uint32 NumHits)"
  },
  {
    "label": "GetDDCHits()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetDDCHits()"
  },
  {
    "label": "RegisterLocalWorkerIdleTime()",
    "kind": "Method",
    "detail": "Function (enum class EExecutionType { Local,Distributed } ; void)",
    "insertText": "RegisterLocalWorkerIdleTime(double IdleTime)"
  },
  {
    "label": "RegisterNewPendingJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterNewPendingJob(FShaderCommonCompileJob& InOutJob)"
  },
  {
    "label": "RegisterAssignedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAssignedJob(FShaderCommonCompileJob& InOutJob)"
  },
  {
    "label": "RegisterFinishedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterFinishedJob(FShaderCommonCompileJob& InOutJob, bool bCompilationSkipped)"
  },
  {
    "label": "RegisterJobBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterJobBatch(int32 NumJobs, EExecutionType ExecType)"
  },
  {
    "label": "RegisterDistributedBuildStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterDistributedBuildStats(const FDistributedBuildStats& InStats)"
  },
  {
    "label": "GatherAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherAnalytics(const FString& BaseName, TArray<FAnalyticsEventAttribute>& Attributes)"
  },
  {
    "label": "GetStaticAssetTypeName()",
    "kind": "Method",
    "detail": "Function (private : class FShaderJobCache ; FCriticalSection CompileStatsLock ; TSparseArray<ShaderCompilerStats> CompileStats ; FShaderCompilerCounters Counters ; FShaderCompilerMaterialCounters MaterialCounters ; TArray<TInterval<double>> JobLifeTimeIntervals ; TMap<FString,FShaderTimings> ShaderTimings ; bool bMultiProcessAggregated = false ; } ; class FShaderCompilingManager : IAssetCompilingManager { class FShaderCompileThreadRunnableBase ; class FShaderCompileThreadRunnable ; # if PLATFORM_WINDOWS class FShaderCompileXGEThreadRunnable_XmlInterface ; # endif class FShaderCompileDistributedThreadRunnable_Interface ; class FShaderCompileFASTBuildThreadRunnable ; public : FName)",
    "insertText": "GetStaticAssetTypeName()"
  },
  {
    "label": "GetAssetTypeName()",
    "kind": "Method",
    "detail": "Function (private : FName)",
    "insertText": "GetAssetTypeName()"
  },
  {
    "label": "GetAssetNameFormat()",
    "kind": "Method",
    "detail": "Function (FTextFormat)",
    "insertText": "GetAssetNameFormat()"
  },
  {
    "label": "GetDependentTypeNames()",
    "kind": "Method",
    "detail": "Function (TArrayView<FName>)",
    "insertText": "GetDependentTypeNames()"
  },
  {
    "label": "GetNumRemainingAssets()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumRemainingAssets()"
  },
  {
    "label": "ProcessAsyncTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncTasks(bool bLimitExecutionTime = false)"
  },
  {
    "label": "ProcessAsyncTasks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncTasks(const AssetCompilation::FProcessAsyncTaskParams& Params)"
  },
  {
    "label": "ReleaseJob()",
    "kind": "Method",
    "detail": "Function (bool bCompilingDuringGame ; TMap<int32,FPendingShaderMapCompileResultsPtr> ShaderMapJobs ; int32 NumExternalJobs ; void)",
    "insertText": "ReleaseJob(FShaderCommonCompileJobPtr& Job)"
  },
  {
    "label": "ReleaseJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseJob(FShaderCommonCompileJob* Job)"
  },
  {
    "label": "CalculateNumberOfCompilingThreads()",
    "kind": "Method",
    "detail": "Function (FCriticalSection CompileQueueSection ; FShaderCompileJobCollection AllJobs ; TMap<int32,FShaderMapFinalizeResults> PendingFinalizeShaderMaps ; TArray<TUniquePtr<FShaderCompileThreadRunnableBase>> Threads ; uint32 NumShaderCompilingThreads ; uint32 NumShaderCompilingThreadsDuringGame ; int32 MaxShaderJobBatchSize ; int32 NumSingleThreadedRunsBeforeRetry ; std::atomic<int32> NumDumpedShaderSources = 0 ; uint32 ProcessId ; bool bAllowCompilingThroughWorkers ; bool bAllowAsynchronousShaderCompiling ; bool bPromptToRetryFailedShaderCompiles ; bool bDebugBreakOnPromptToRetryShaderCompile = false ; bool bLogJobCompletionTimes ; float ProcessGameThreadTargetTime ; FString ShaderBaseWorkingDirectory ; FString AbsoluteShaderBaseWorkingDirectory ; FString AbsoluteShaderDebugInfoDirectory ; FString ShaderCompileWorkerName ; int32 LastNumRemainingAssets = 0 ; FString WorkerCrashLogBaseDirectory ; double WorkersBusyTime ; uint64 SuppressedShaderPlatforms ; bool bIsEngineLoopInitialized ; IDistributedBuildController* BuildDistributionController ; bool bNoShaderCompilation ; bool bAllowForIncompleteShaderMaps ; TUniquePtr<FAsyncCompilationNotification> Notification ; FDelegateHandle OutOfMemoryDelegateHandle ; # if WITH_EDITOR TMap<FString,FDelegateHandle> DirectoryWatcherHandles ; # endif void)",
    "insertText": "CalculateNumberOfCompilingThreads(int32 NumberOfCores, int32 NumberOfCoresIncludingHyperthreads)"
  },
  {
    "label": "LaunchWorker()",
    "kind": "Method",
    "detail": "Function (FProcHandle)",
    "insertText": "LaunchWorker(const FString& WorkingDirectory, uint32 ProcessId, uint32 ThreadId, const FString& WorkerInputFile, const FString& WorkerOutputFile)"
  },
  {
    "label": "BlockOnShaderMapCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnShaderMapCompletion(const TArray<int32>& ShaderMapIdsToFinishCompiling, TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps)"
  },
  {
    "label": "BlockOnAllShaderMapCompletion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnAllShaderMapCompletion(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps)"
  },
  {
    "label": "AddCompiledResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompiledResults(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps, int32 ShaderMapIdx, const FShaderMapFinalizeResults& Results)"
  },
  {
    "label": "ProcessCompiledShaderMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCompiledShaderMaps(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps, float TimeBudget)"
  },
  {
    "label": "ProcessCompiledNiagaraShaderMaps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCompiledNiagaraShaderMaps(TMap<int32, FShaderMapFinalizeResults>& CompiledShaderMaps, float TimeBudget)"
  },
  {
    "label": "PropagateMaterialChangesToPrimitives()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PropagateMaterialChangesToPrimitives(TMap<TRefCountPtr<FMaterial>, TRefCountPtr<FMaterialShaderMap>>& MaterialsToUpdate)"
  },
  {
    "label": "HandlePotentialRetryOnError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandlePotentialRetryOnError(TMap<int32, FShaderMapFinalizeResults>& CompletedShaderMaps)"
  },
  {
    "label": "AllTargetPlatformSupportsRemoteShaderCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllTargetPlatformSupportsRemoteShaderCompiling()"
  },
  {
    "label": "UpdateNumRemainingAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNumRemainingAssets()"
  },
  {
    "label": "FindRemoteCompilerController()",
    "kind": "Method",
    "detail": "Function (IDistributedBuildController*)",
    "insertText": "FindRemoteCompilerController()"
  },
  {
    "label": "ReportMemoryUsage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportMemoryUsage()"
  },
  {
    "label": "FShaderCompilingManager()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FShaderCompilingManager()"
  },
  {
    "label": "OnMachineResourcesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMachineResourcesChanged(int32 NumberOfCores, int32 NumberOfCoresIncludingHyperthreads)"
  },
  {
    "label": "ShouldDisplayCompilingNotification()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldDisplayCompilingNotification()"
  },
  {
    "label": "AllowAsynchronousShaderCompiling()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AllowAsynchronousShaderCompiling()"
  },
  {
    "label": "IsRemoteCompilingEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsRemoteCompilingEnabled()"
  },
  {
    "label": "GetNumRemainingJobs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumRemainingJobs()"
  },
  {
    "label": "GetNumLocalWorkers()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumLocalWorkers()"
  },
  {
    "label": "GetDumpShaderDebugInfo()",
    "kind": "Method",
    "detail": "Function (NumExternalJobs = NumJobs ; } enum class EDumpShaderDebugInfo : int32 { Never = 0,Always = 1,OnError = 2,OnErrorOrWarning = 3 } ; EDumpShaderDebugInfo)",
    "insertText": "GetDumpShaderDebugInfo()"
  },
  {
    "label": "GetDumpShaderDebugInfoFlags()",
    "kind": "Method",
    "detail": "Function (EShaderDebugInfoFlags)",
    "insertText": "GetDumpShaderDebugInfoFlags()"
  },
  {
    "label": "CreateShaderDebugInfoPath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CreateShaderDebugInfoPath(const FShaderCompilerInput& ShaderCompilerInput)"
  },
  {
    "label": "ShouldRecompileToDumpShaderDebugInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecompileToDumpShaderDebugInfo(const FShaderCompileJob& Job)"
  },
  {
    "label": "ShouldRecompileToDumpShaderDebugInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRecompileToDumpShaderDebugInfo(const FShaderCompilerInput& Input, const FShaderCompilerOutput& Output, bool bSucceeded)"
  },
  {
    "label": "IncrementNumDumpedShaderSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementNumDumpedShaderSources()"
  },
  {
    "label": "GetAbsoluteShaderDebugInfoDirectory()",
    "kind": "Method",
    "detail": "Function (NumDumpedShaderSources + + ; } const FString&)",
    "insertText": "GetAbsoluteShaderDebugInfoDirectory()"
  },
  {
    "label": "SuppressWarnings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SuppressWarnings(const EShaderPlatform Platform)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (SuppressedShaderPlatforms | = static_cast<)",
    "insertText": "uint64(1)"
  },
  {
    "label": "IsShaderCompilationSkipped()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsShaderCompilationSkipped()"
  },
  {
    "label": "SetAllowForIncompleteShaderMaps()",
    "kind": "Method",
    "detail": "Function (bNoShaderCompilation = toggle ; } } void)",
    "insertText": "SetAllowForIncompleteShaderMaps(bool toggle)"
  },
  {
    "label": "IsCompilingShaderMap()",
    "kind": "Method",
    "detail": "Function (bAllowForIncompleteShaderMaps = toggle ; } bool)",
    "insertText": "IsCompilingShaderMap(uint32 Id)"
  },
  {
    "label": "PrepareShaderCompileJob()",
    "kind": "Method",
    "detail": "Function (FShaderCompileJob*)",
    "insertText": "PrepareShaderCompileJob(uint32 Id, const FShaderCompileJobKey& Key, EShaderCompileJobPriority Priority)"
  },
  {
    "label": "PreparePipelineCompileJob()",
    "kind": "Method",
    "detail": "Function (FShaderPipelineCompileJob*)",
    "insertText": "PreparePipelineCompileJob(uint32 Id, const FShaderPipelineCompileJobKey& Key, EShaderCompileJobPriority Priority)"
  },
  {
    "label": "ProcessFinishedJob()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessFinishedJob(FShaderCommonCompileJob* FinishedJob)"
  },
  {
    "label": "SubmitJobs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubmitJobs(TArray<FShaderCommonCompileJobPtr>& NewJobs, const FString MaterialBasePath, FString PermutationString = FString(\"\"))"
  },
  {
    "label": "CancelCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelCompilation(const TCHAR* MaterialName, const TArray<int32>& ShaderMapIdsToCancel)"
  },
  {
    "label": "FinishCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishCompilation(const TCHAR* MaterialName, const TArray<int32>& ShaderMapIdsToFinishCompiling)"
  },
  {
    "label": "FinishAllCompilation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishAllCompilation()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "PrintStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintStats()"
  },
  {
    "label": "GetLocalStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLocalStats(FShaderCompilerStats & OutStats)"
  },
  {
    "label": "GetExternalMemoryUsage()",
    "kind": "Method",
    "detail": "Function (FShaderCompileMemoryUsage)",
    "insertText": "GetExternalMemoryUsage()"
  },
  {
    "label": "ProcessAsyncResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncResults(float TimeSlice, bool bBlockOnGlobalShaderCompletion)"
  },
  {
    "label": "ProcessAsyncResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAsyncResults(bool bLimitExecutionTime, bool bBlockOnGlobalShaderCompletion)"
  },
  {
    "label": "IsShaderCompilerWorkerRunning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsShaderCompilerWorkerRunning(FProcHandle & WorkerHandle)"
  },
  {
    "label": "GlobalBeginCompileShader()",
    "kind": "Method",
    "detail": "Function (} ; FShaderCompilingManager* GShaderCompilingManager ; FShaderCompilerStats* GShaderCompilerStats ; # if WITH_EDITOR void)",
    "insertText": "GlobalBeginCompileShader(const FString& DebugGroupName, const class FVertexFactoryType* VFType, const class FShaderType* ShaderType, const class FShaderPipelineType* ShaderPipelineType, int32 PermutationId, const TCHAR* SourceFilename, const TCHAR* FunctionName, FShaderTarget Target, FShaderCompilerInput& Input, bool bAllowDevelopmentShaderCompile, const FString& DebugDescription, const FString& DebugExtension)"
  },
  {
    "label": "GlobalBeginCompileShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GlobalBeginCompileShader(const FString& DebugGroupName, const class FVertexFactoryType* VFType, const class FShaderType* ShaderType, const class FShaderPipelineType* ShaderPipelineType, int32 PermutationId, const TCHAR* SourceFilename, const TCHAR* FunctionName, FShaderTarget Target, FShaderCompilerInput& Input, bool bAllowDevelopmentShaderCompile = true, const TCHAR* DebugDescription = nullptr, const TCHAR* DebugExtension = nullptr)"
  },
  {
    "label": "GetOutdatedShaderTypes()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "GetOutdatedShaderTypes(TArray<const FShaderType*>& OutdatedShaderTypes, TArray<const FShaderPipelineType*>& OutdatedShaderPipelineTypes, TArray<const FVertexFactoryType*>& OutdatedFactoryTypes)"
  },
  {
    "label": "RecompileShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecompileShaders(const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "IsGlobalShaderMapComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGlobalShaderMapComplete(const TCHAR* TypeNameSubstring = nullptr)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnGlobalShadersCompilation)"
  },
  {
    "label": "GetOnGlobalShaderCompilation()",
    "kind": "Method",
    "detail": "Function (FOnGlobalShadersCompilation&)",
    "insertText": "GetOnGlobalShaderCompilation()"
  },
  {
    "label": "VerifyGlobalShaders()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "VerifyGlobalShaders(EShaderPlatform Platform, bool bLoadedFromCacheFile, const TArray<const FShaderType*>* OutdatedShaderTypes = nullptr, const TArray<const FShaderPipelineType*>* OutdatedShaderPipelineTypes = nullptr)"
  },
  {
    "label": "VerifyGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VerifyGlobalShaders(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, bool bLoadedFromCacheFile, const TArray<const FShaderType*>* OutdatedShaderTypes = nullptr, const TArray<const FShaderPipelineType*>* OutdatedShaderPipelineTypes = nullptr)"
  },
  {
    "label": "PrecacheComputePipelineStatesForGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrecacheComputePipelineStatesForGlobalShaders(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "RecompileGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecompileGlobalShaders()"
  },
  {
    "label": "RecompileChangedShadersForPlatform()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecompileChangedShadersForPlatform(const FString& PlatformName)"
  },
  {
    "label": "BeginRecompileGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginRecompileGlobalShaders(const TArray<const FShaderType*>& OutdatedShaderTypes, const TArray<const FShaderPipelineType*>& OutdatedShaderPipelineTypes, EShaderPlatform ShaderPlatform, const ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "FinishRecompileGlobalShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishRecompileGlobalShaders()"
  },
  {
    "label": "ProcessCompiledGlobalShaders()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ProcessCompiledGlobalShaders(const TArray<FShaderCommonCompileJobPtr>& CompilationResults)"
  },
  {
    "label": "SaveGlobalShadersForRemoteRecompile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveGlobalShadersForRemoteRecompile(FArchive& Ar, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "LoadGlobalShadersForRemoteRecompile()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "LoadGlobalShadersForRemoteRecompile(FArchive& Ar, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "SaveGlobalShaderFile()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SaveGlobalShaderFile(EShaderPlatform Platform, FString SavePath, class ITargetPlatform* TargetPlatform = nullptr)"
  },
  {
    "label": "FODSCRequestPayload()",
    "kind": "Method",
    "detail": "Function (struct FODSCRequestPayload { EShaderPlatform ShaderPlatform ; ERHIFeatureLevel::Type FeatureLevel ; EMaterialQualityLevel::Type QualityLevel ; FString MaterialName ; FString VertexFactoryName ; FString PipelineName ; TArray<FString> ShaderTypeNames ; int32 PermutationId ; FString RequestHash ;)",
    "insertText": "FODSCRequestPayload()"
  },
  {
    "label": "FODSCRequestPayload()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FODSCRequestPayload(EShaderPlatform InShaderPlatform, ERHIFeatureLevel::Type InFeatureLevel, EMaterialQualityLevel::Type InQualityLevel, const FString& InMaterialName, const FString& InVertexFactoryName, const FString& InPipelineName, const TArray<FString>& InShaderTypeNames, int32 InPermutationId, const FString& InRequestHash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FODSCRequestPayload& Elem)"
  },
  {
    "label": "ODSCCmdEnumToString()",
    "kind": "Method",
    "detail": "Function (} ; enum class ODSCRecompileCommand { None,Changed,Global,Material,SingleShader,ResetMaterialCache } ; const TCHAR*)",
    "insertText": "ODSCCmdEnumToString(ODSCRecompileCommand Cmd)"
  },
  {
    "label": "UMaterialInterface()",
    "kind": "Method",
    "detail": "Function (struct FShaderRecompileData { FString PlatformName ; EShaderPlatform ShaderPlatform = SP_NumPlatforms ; ERHIFeatureLevel::Type FeatureLevel = ERHIFeatureLevel::SM5 ; EMaterialQualityLevel::Type QualityLevel = EMaterialQualityLevel::High ; TArray<FString>* ModifiedFiles = nullptr ; TArray<uint8>* MeshMaterialMaps = nullptr ; TArray<FString> MaterialsToLoad ; FString ShaderTypesToLoad ; ODSCRecompileCommand CommandType = ODSCRecompileCommand::Changed ; TArray<uint8>* GlobalShaderMap = nullptr ; TArray<FODSCRequestPayload> ShadersToRecompile ; TArray<TStrongObjectPtr<UMaterialInterface>>* LoadedMaterialsToRecompile = nullptr ; # if WITH_EDITOR TFunction<)",
    "insertText": "UMaterialInterface(const FString&)"
  },
  {
    "label": "FShaderRecompileData()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "FShaderRecompileData()"
  },
  {
    "label": "FShaderRecompileData()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FShaderRecompileData(const FString& InPlatformName, TArray<FString>* OutModifiedFiles, TArray<uint8>* OutMeshMaterialMaps, TArray<uint8>* OutGlobalShaderMap)"
  },
  {
    "label": "FShaderRecompileData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderRecompileData(const FString& InPlatformName, EShaderPlatform InShaderPlatform, ODSCRecompileCommand InCommandType, TArray<FString>* OutModifiedFiles, TArray<uint8>* OutMeshMaterialMaps, TArray<uint8>* OutGlobalShaderMap)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderRecompileData& Elem)"
  },
  {
    "label": "RecompileShadersForRemote()",
    "kind": "Method",
    "detail": "Function (} ; # if WITH_EDITOR void)",
    "insertText": "RecompileShadersForRemote(FShaderRecompileData& Args, const FString& OutputDirectory)"
  },
  {
    "label": "ShutdownShaderCompilers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownShaderCompilers(TConstArrayView<const ITargetPlatform*> TargetPlatforms)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "CompileGlobalShaderMap(bool bRefreshShaderMap=false)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileGlobalShaderMap(ERHIFeatureLevel::Type InFeatureLevel, bool bRefreshShaderMap=false)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileGlobalShaderMap(EShaderPlatform Platform, bool bRefreshShaderMap = false)"
  },
  {
    "label": "CompileGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileGlobalShaderMap(EShaderPlatform Platform, const ITargetPlatform* TargetPlatform, bool bRefreshShaderMap)"
  },
  {
    "label": "ShutdownGlobalShaderMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShutdownGlobalShaderMap()"
  },
  {
    "label": "GetGlobalShaderMapDDCGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetGlobalShaderMapDDCGuid()"
  },
  {
    "label": "GetMaterialShaderMapDDCGuid()",
    "kind": "Method",
    "detail": "Function (const FGuid&)",
    "insertText": "GetMaterialShaderMapDDCGuid()"
  },
  {
    "label": "ShouldDumpShaderDDCKeys()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldDumpShaderDDCKeys()"
  },
  {
    "label": "DumpShaderDDCKeyToFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpShaderDDCKeyToFile(const EShaderPlatform InPlatform, bool bWithEditor, const TCHAR* DebugGroupName, const FString& DDCKey)"
  },
  {
    "label": "ProcessCookOnTheFlyShaders()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCookOnTheFlyShaders(bool bReloadGlobalShaders, const TArray<uint8>& MeshMaterialMaps, const TArray<FString>& MaterialsToLoad, const TArray<uint8>& GlobalShaderMap)"
  }
]