[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "Instruction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Instruction"
  },
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "Value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Value"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "StringRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StringRef"
  },
  {
    "label": "DIBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DIBuilder"
  },
  {
    "label": "DebugEmissionKind",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DebugEmissionKind"
  },
  {
    "label": "NodeTy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NodeTy"
  },
  {
    "label": "DIBuilder()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_DIBUILDER_H # define LLVM_IR_DIBUILDER_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / IR / DebugInfo . h \" # include \" llvm / IR / TrackingMDRef . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Support / DataTypes . h \" namespace llvm { class BasicBlock ; class Instruction ; class Function ; class Module ; class Value ; class Constant ; class LLVMContext ; class StringRef ; class DIBuilder { Module& M ; LLVMContext& VMContext ; DICompileUnit* CUNode ; Function* DeclareFn ; Function* ValueFn ; SmallVector<Metadata*,4> AllEnumTypes ; SmallVector<TrackingMDNodeRef,4> AllRetainTypes ; SmallVector<Metadata*,4> AllSubprograms ; SmallVector<Metadata*,4> AllGVs ; SmallVector<TrackingMDNodeRef,4> AllImportedModules ; SmallVector<TrackingMDNodeRef,4> UnresolvedNodes ; bool AllowUnresolvedNodes ; DenseMap<MDNode*,std::vector<TrackingMDNodeRef>> PreservedVariables ;)",
    "insertText": "DIBuilder(const DIBuilder &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const DIBuilder &)"
  },
  {
    "label": "trackIfUnresolved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "trackIfUnresolved(MDNode *N)"
  },
  {
    "label": "DIBuilder()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DIBuilder(Module &M, bool AllowUnresolved = true)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (enum DebugEmissionKind { FullDebug = 1,LineTablesOnly } ; void)",
    "insertText": "finalize()"
  },
  {
    "label": "createCompileUnit()",
    "kind": "Method",
    "detail": "Function (DICompileUnit*)",
    "insertText": "createCompileUnit(unsigned Lang, StringRef File, StringRef Dir, StringRef Producer, bool isOptimized, StringRef Flags, unsigned RV, StringRef SplitName = StringRef(), DebugEmissionKind Kind = FullDebug, uint64_t DWOId = 0, bool EmitDebugInfo = true)"
  },
  {
    "label": "createFile()",
    "kind": "Method",
    "detail": "Function (DIFile*)",
    "insertText": "createFile(StringRef Filename, StringRef Directory)"
  },
  {
    "label": "createEnumerator()",
    "kind": "Method",
    "detail": "Function (DIEnumerator*)",
    "insertText": "createEnumerator(StringRef Name, int64_t Val)"
  },
  {
    "label": "createUnspecifiedType()",
    "kind": "Method",
    "detail": "Function (DIBasicType*)",
    "insertText": "createUnspecifiedType(StringRef Name)"
  },
  {
    "label": "createNullPtrType()",
    "kind": "Method",
    "detail": "Function (DIBasicType*)",
    "insertText": "createNullPtrType()"
  },
  {
    "label": "createBasicType()",
    "kind": "Method",
    "detail": "Function (DIBasicType*)",
    "insertText": "createBasicType(StringRef Name, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Encoding)"
  },
  {
    "label": "createQualifiedType()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createQualifiedType(unsigned Tag, DIType *FromTy)"
  },
  {
    "label": "createPointerType()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createPointerType(DIType *PointeeTy, uint64_t SizeInBits, uint64_t AlignInBits = 0, StringRef Name = \"\")"
  },
  {
    "label": "createMemberPointerType()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createMemberPointerType(DIType *PointeeTy, DIType *Class, uint64_t SizeInBits, uint64_t AlignInBits = 0)"
  },
  {
    "label": "createReferenceType()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createReferenceType(unsigned Tag, DIType *RTy)"
  },
  {
    "label": "createTypedef()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createTypedef(DIType *Ty, StringRef Name, DIFile *File, unsigned LineNo, DIScope *Context)"
  },
  {
    "label": "createFriend()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createFriend(DIType *Ty, DIType *FriendTy)"
  },
  {
    "label": "createInheritance()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createInheritance(DIType *Ty, DIType *BaseTy, uint64_t BaseOffset, unsigned Flags)"
  },
  {
    "label": "createMemberType()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createMemberType(DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNo, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, DIType *Ty)"
  },
  {
    "label": "createStaticMemberType()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createStaticMemberType(DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNo, DIType *Ty, unsigned Flags, llvm::Constant *Val)"
  },
  {
    "label": "createObjCIVar()",
    "kind": "Method",
    "detail": "Function (DIDerivedType*)",
    "insertText": "createObjCIVar(StringRef Name, DIFile *File, unsigned LineNo, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, DIType *Ty, MDNode *PropertyNode)"
  },
  {
    "label": "createObjCProperty()",
    "kind": "Method",
    "detail": "Function (DIObjCProperty*)",
    "insertText": "createObjCProperty(StringRef Name, DIFile *File, unsigned LineNumber, StringRef GetterName, StringRef SetterName, unsigned PropertyAttributes, DIType *Ty)"
  },
  {
    "label": "createClassType()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createClassType(DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNumber, uint64_t SizeInBits, uint64_t AlignInBits, uint64_t OffsetInBits, unsigned Flags, DIType *DerivedFrom, DINodeArray Elements, DIType *VTableHolder = nullptr, MDNode *TemplateParms = nullptr, StringRef UniqueIdentifier = \"\")"
  },
  {
    "label": "createStructType()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createStructType(DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNumber, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Flags, DIType *DerivedFrom, DINodeArray Elements, unsigned RunTimeLang = 0, DIType *VTableHolder = nullptr, StringRef UniqueIdentifier = \"\")"
  },
  {
    "label": "createUnionType()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createUnionType(DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNumber, uint64_t SizeInBits, uint64_t AlignInBits, unsigned Flags, DINodeArray Elements, unsigned RunTimeLang = 0, StringRef UniqueIdentifier = \"\")"
  },
  {
    "label": "createTemplateTypeParameter()",
    "kind": "Method",
    "detail": "Function (DITemplateTypeParameter*)",
    "insertText": "createTemplateTypeParameter(DIScope *Scope, StringRef Name, DIType *Ty)"
  },
  {
    "label": "createTemplateValueParameter()",
    "kind": "Method",
    "detail": "Function (DITemplateValueParameter*)",
    "insertText": "createTemplateValueParameter(DIScope *Scope, StringRef Name, DIType *Ty, Constant *Val)"
  },
  {
    "label": "createTemplateTemplateParameter()",
    "kind": "Method",
    "detail": "Function (DITemplateValueParameter*)",
    "insertText": "createTemplateTemplateParameter(DIScope *Scope, StringRef Name, DIType *Ty, StringRef Val)"
  },
  {
    "label": "createTemplateParameterPack()",
    "kind": "Method",
    "detail": "Function (DITemplateValueParameter*)",
    "insertText": "createTemplateParameterPack(DIScope *Scope, StringRef Name, DIType *Ty, DINodeArray Val)"
  },
  {
    "label": "createArrayType()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createArrayType(uint64_t Size, uint64_t AlignInBits, DIType *Ty, DINodeArray Subscripts)"
  },
  {
    "label": "createVectorType()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createVectorType(uint64_t Size, uint64_t AlignInBits, DIType *Ty, DINodeArray Subscripts)"
  },
  {
    "label": "createEnumerationType()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createEnumerationType(DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNumber, uint64_t SizeInBits, uint64_t AlignInBits, DINodeArray Elements, DIType *UnderlyingType, StringRef UniqueIdentifier = \"\")"
  },
  {
    "label": "createSubroutineType()",
    "kind": "Method",
    "detail": "Function (DISubroutineType*)",
    "insertText": "createSubroutineType(DIFile *File, DITypeRefArray ParameterTypes, unsigned Flags = 0)"
  },
  {
    "label": "createArtificialType()",
    "kind": "Method",
    "detail": "Function (DIType*)",
    "insertText": "createArtificialType(DIType *Ty)"
  },
  {
    "label": "createObjectPointerType()",
    "kind": "Method",
    "detail": "Function (DIType*)",
    "insertText": "createObjectPointerType(DIType *Ty)"
  },
  {
    "label": "createForwardDecl()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createForwardDecl(unsigned Tag, StringRef Name, DIScope *Scope, DIFile *F, unsigned Line, unsigned RuntimeLang = 0, uint64_t SizeInBits = 0, uint64_t AlignInBits = 0, StringRef UniqueIdentifier = \"\")"
  },
  {
    "label": "createReplaceableCompositeType()",
    "kind": "Method",
    "detail": "Function (DICompositeType*)",
    "insertText": "createReplaceableCompositeType(unsigned Tag, StringRef Name, DIScope *Scope, DIFile *F, unsigned Line, unsigned RuntimeLang = 0, uint64_t SizeInBits = 0, uint64_t AlignInBits = 0, unsigned Flags = DINode::FlagFwdDecl, StringRef UniqueIdentifier = \"\")"
  },
  {
    "label": "retainType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "retainType(DIType *T)"
  },
  {
    "label": "createUnspecifiedParameter()",
    "kind": "Method",
    "detail": "Function (DIBasicType*)",
    "insertText": "createUnspecifiedParameter()"
  },
  {
    "label": "getOrCreateArray()",
    "kind": "Method",
    "detail": "Function (DINodeArray)",
    "insertText": "getOrCreateArray(ArrayRef<Metadata *> Elements)"
  },
  {
    "label": "getOrCreateTypeArray()",
    "kind": "Method",
    "detail": "Function (DITypeRefArray)",
    "insertText": "getOrCreateTypeArray(ArrayRef<Metadata *> Elements)"
  },
  {
    "label": "getOrCreateSubrange()",
    "kind": "Method",
    "detail": "Function (DISubrange*)",
    "insertText": "getOrCreateSubrange(int64_t Lo, int64_t Count)"
  },
  {
    "label": "createGlobalVariable()",
    "kind": "Method",
    "detail": "Function (DIGlobalVariable*)",
    "insertText": "createGlobalVariable(DIScope *Context, StringRef Name, StringRef LinkageName, DIFile *File, unsigned LineNo, DIType *Ty, bool isLocalToUnit, llvm::Constant *Val, MDNode *Decl = nullptr)"
  },
  {
    "label": "createTempGlobalVariableFwdDecl()",
    "kind": "Method",
    "detail": "Function (DIGlobalVariable*)",
    "insertText": "createTempGlobalVariableFwdDecl(DIScope *Context, StringRef Name, StringRef LinkageName, DIFile *File, unsigned LineNo, DIType *Ty, bool isLocalToUnit, llvm::Constant *Val, MDNode *Decl = nullptr)"
  },
  {
    "label": "createLocalVariable()",
    "kind": "Method",
    "detail": "Function (DILocalVariable*)",
    "insertText": "createLocalVariable(unsigned Tag, DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNo, DIType *Ty, bool AlwaysPreserve = false, unsigned Flags = 0, unsigned ArgNo = 0)"
  },
  {
    "label": "createExpression()",
    "kind": "Method",
    "detail": "Function (DIExpression*)",
    "insertText": "createExpression(ArrayRef<uint64_t> Addr = None)"
  },
  {
    "label": "createExpression()",
    "kind": "Method",
    "detail": "Function (DIExpression*)",
    "insertText": "createExpression(ArrayRef<int64_t> Addr)"
  },
  {
    "label": "createBitPieceExpression()",
    "kind": "Method",
    "detail": "Function (DIExpression*)",
    "insertText": "createBitPieceExpression(unsigned OffsetInBits, unsigned SizeInBits)"
  },
  {
    "label": "createFunction()",
    "kind": "Method",
    "detail": "Function (DISubprogram*)",
    "insertText": "createFunction(DIScope *Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned LineNo, DISubroutineType *Ty, bool isLocalToUnit, bool isDefinition, unsigned ScopeLine, unsigned Flags = 0, bool isOptimized = false, Function *Fn = nullptr, MDNode *TParam = nullptr, MDNode *Decl = nullptr)"
  },
  {
    "label": "createTempFunctionFwdDecl()",
    "kind": "Method",
    "detail": "Function (DISubprogram*)",
    "insertText": "createTempFunctionFwdDecl(DIScope *Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned LineNo, DISubroutineType *Ty, bool isLocalToUnit, bool isDefinition, unsigned ScopeLine, unsigned Flags = 0, bool isOptimized = false, Function *Fn = nullptr, MDNode *TParam = nullptr, MDNode *Decl = nullptr)"
  },
  {
    "label": "createFunction()",
    "kind": "Method",
    "detail": "Function (DISubprogram*)",
    "insertText": "createFunction(DIScopeRef Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned LineNo, DISubroutineType *Ty, bool isLocalToUnit, bool isDefinition, unsigned ScopeLine, unsigned Flags = 0, bool isOptimized = false, Function *Fn = nullptr, MDNode *TParam = nullptr, MDNode *Decl = nullptr)"
  },
  {
    "label": "createMethod()",
    "kind": "Method",
    "detail": "Function (DISubprogram*)",
    "insertText": "createMethod(DIScope *Scope, StringRef Name, StringRef LinkageName, DIFile *File, unsigned LineNo, DISubroutineType *Ty, bool isLocalToUnit, bool isDefinition, unsigned Virtuality = 0, unsigned VTableIndex = 0, DIType *VTableHolder = nullptr, unsigned Flags = 0, bool isOptimized = false, Function *Fn = nullptr, MDNode *TParam = nullptr)"
  },
  {
    "label": "createNameSpace()",
    "kind": "Method",
    "detail": "Function (DINamespace*)",
    "insertText": "createNameSpace(DIScope *Scope, StringRef Name, DIFile *File, unsigned LineNo)"
  },
  {
    "label": "createModule()",
    "kind": "Method",
    "detail": "Function (DIModule*)",
    "insertText": "createModule(DIScope *Scope, StringRef Name, StringRef ConfigurationMacros, StringRef IncludePath, StringRef ISysRoot)"
  },
  {
    "label": "createLexicalBlockFile()",
    "kind": "Method",
    "detail": "Function (DILexicalBlockFile*)",
    "insertText": "createLexicalBlockFile(DIScope *Scope, DIFile *File, unsigned Discriminator = 0)"
  },
  {
    "label": "createLexicalBlock()",
    "kind": "Method",
    "detail": "Function (DILexicalBlock*)",
    "insertText": "createLexicalBlock(DIScope *Scope, DIFile *File, unsigned Line, unsigned Col)"
  },
  {
    "label": "createImportedModule()",
    "kind": "Method",
    "detail": "Function (DIImportedEntity*)",
    "insertText": "createImportedModule(DIScope *Context, DINamespace *NS, unsigned Line)"
  },
  {
    "label": "createImportedModule()",
    "kind": "Method",
    "detail": "Function (DIImportedEntity*)",
    "insertText": "createImportedModule(DIScope *Context, DIImportedEntity *NS, unsigned Line)"
  },
  {
    "label": "createImportedModule()",
    "kind": "Method",
    "detail": "Function (DIImportedEntity*)",
    "insertText": "createImportedModule(DIScope *Context, DIModule *M, unsigned Line)"
  },
  {
    "label": "createImportedDeclaration()",
    "kind": "Method",
    "detail": "Function (DIImportedEntity*)",
    "insertText": "createImportedDeclaration(DIScope *Context, DINode *Decl, unsigned Line, StringRef Name = \"\")"
  },
  {
    "label": "insertDeclare()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "insertDeclare(llvm::Value *Storage, DILocalVariable *VarInfo, DIExpression *Expr, const DILocation *DL, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "insertDeclare()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "insertDeclare(llvm::Value *Storage, DILocalVariable *VarInfo, DIExpression *Expr, const DILocation *DL, Instruction *InsertBefore)"
  },
  {
    "label": "insertDbgValueIntrinsic()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "insertDbgValueIntrinsic(llvm::Value *Val, uint64_t Offset, DILocalVariable *VarInfo, DIExpression *Expr, const DILocation *DL, BasicBlock *InsertAtEnd)"
  },
  {
    "label": "insertDbgValueIntrinsic()",
    "kind": "Method",
    "detail": "Function (Instruction*)",
    "insertText": "insertDbgValueIntrinsic(llvm::Value *Val, uint64_t Offset, DILocalVariable *VarInfo, DIExpression *Expr, const DILocation *DL, Instruction *InsertBefore)"
  },
  {
    "label": "replaceVTableHolder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceVTableHolder(DICompositeType *&T, DICompositeType *VTableHolder)"
  },
  {
    "label": "replaceArrays()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceArrays(DICompositeType *&T, DINodeArray Elements, DINodeArray TParems = DINodeArray())"
  },
  {
    "label": "replaceTemporary()",
    "kind": "Method",
    "detail": "Function (template<class NodeTy> NodeTy*)",
    "insertText": "replaceTemporary(TempMDNode &&N, NodeTy *Replacement)"
  },
  {
    "label": "replaceAllUsesWith()",
    "kind": "Method",
    "detail": "Function (N ->)",
    "insertText": "replaceAllUsesWith(Replacement)"
  }
]