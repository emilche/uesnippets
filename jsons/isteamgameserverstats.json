[
  {
    "label": "ISteamGameServerStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISteamGameServerStats"
  },
  {
    "label": "GSStatsReceived_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSStatsReceived_t"
  },
  {
    "label": "GSStatsStored_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSStatsStored_t"
  },
  {
    "label": "GSStatsUnloaded_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GSStatsUnloaded_t"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (# ifndef ISTEAMGAMESERVERSTATS_H # define ISTEAMGAMESERVERSTATS_H # ifdef _WIN32 # pragma once # endif # include \" steam_api_common . h \" class ISteamGameServerStats { public :)",
    "insertText": "STEAM_CALL_RESULT(GSStatsReceived_t ) virtual SteamAPICall_t RequestUserStats( CSteamID steamIDUser)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetUserStatInt32 ) virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, int32 *pData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(GetUserStatFloat ) virtual bool GetUserStat( CSteamID steamIDUser, const char *pchName, float *pData)"
  },
  {
    "label": "GetUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUserAchievement(CSteamID steamIDUser, const char *pchName, bool *pbAchieved)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetUserStatInt32 ) virtual bool SetUserStat( CSteamID steamIDUser, const char *pchName, int32 nData)"
  },
  {
    "label": "STEAM_FLAT_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_FLAT_NAME(SetUserStatFloat ) virtual bool SetUserStat( CSteamID steamIDUser, const char *pchName, float fData)"
  },
  {
    "label": "UpdateUserAvgRateStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateUserAvgRateStat(CSteamID steamIDUser, const char *pchName, float flCountThisSession, double dSessionLength)"
  },
  {
    "label": "SetUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetUserAchievement(CSteamID steamIDUser, const char *pchName)"
  },
  {
    "label": "ClearUserAchievement()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ClearUserAchievement(CSteamID steamIDUser, const char *pchName)"
  },
  {
    "label": "STEAM_CALL_RESULT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_CALL_RESULT(GSStatsStored_t ) virtual SteamAPICall_t StoreUserStats( CSteamID steamIDUser)"
  },
  {
    "label": "SteamGameServerStats()",
    "kind": "Method",
    "detail": "Function (} ; # define STEAMGAMESERVERSTATS_INTERFACE_VERSION \" SteamGameServerStats001 \" ISteamGameServerStats*)",
    "insertText": "SteamGameServerStats()"
  },
  {
    "label": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STEAM_DEFINE_GAMESERVER_INTERFACE_ACCESSOR(ISteamGameServerStats *, SteamGameServerStats, STEAMGAMESERVERSTATS_INTERFACE_VERSION)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(VALVE_CALLBACK_PACK_SMALL ) #pragma pack( push, 4 ) #elif defined( VALVE_CALLBACK_PACK_LARGE ) #pragma pack( push, 8)"
  }
]