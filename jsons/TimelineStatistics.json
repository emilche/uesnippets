[
  {
    "label": "FAggregatedTimingStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAggregatedTimingStats"
  },
  {
    "label": "FFrameData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameData"
  },
  {
    "label": "FTimelineStatistics",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTimelineStatistics"
  },
  {
    "label": "FInternalAggregationEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternalAggregationEntry"
  },
  {
    "label": "FInternalFrameAggregationEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInternalFrameAggregationEntry"
  },
  {
    "label": "FStackEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStackEntry"
  },
  {
    "label": "CreateAggregation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Containers / Queue . h \" # include \" CoreTypes . h \" # include<cfloat> # include \" Misc / QueuedThreadPool . h \" # include \" Tasks / Task . h \" # include \" Templates / SharedPointer . h \" # include \" TraceServices / Common / CancellationToken . h \" # include \" TraceServices / Containers / Timelines . h \" namespace TraceServices { struct FAggregatedTimingStats { uint64 InstanceCount = 0 ; double TotalInclusiveTime = 0 . 0 ; double MinInclusiveTime = DBL_MAX ; double MaxInclusiveTime = - DBL_MAX ; double AverageInclusiveTime = 0 . 0 ; double MedianInclusiveTime = 0 . 0 ; double TotalExclusiveTime = 0 . 0 ; double MinExclusiveTime = DBL_MAX ; double MaxExclusiveTime = - DBL_MAX ; double AverageExclusiveTime = 0 . 0 ; double MedianExclusiveTime = 0 . 0 ; } ; struct FFrameData { double StartTime ; double EndTime ; } ; class FTimelineStatistics { public : template<TimelineType,BucketMappingFunc,BucketKeyType> void)",
    "insertText": "CreateAggregation(const TArray<const TimelineType*>& Timelines, BucketMappingFunc BucketMapper, double IntervalStart, double IntervalEnd, TSharedPtr<FCancellationToken> CancellationToken, TMap<BucketKeyType, FAggregatedTimingStats>& Result)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TMap<BucketKeyType,FInternalAggregationEntry> InternalResult ;)",
    "insertText": "for(const TimelineType* Timeline : Timelines)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} const bool ComputeMedian = true ;)",
    "insertText": "if(ComputeMedian)"
  },
  {
    "label": "PreComputeHistogram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreComputeHistogram(KV.Value)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(auto& KV : InternalResult)"
  },
  {
    "label": "PostProcessTimerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostProcessTimerStats(KV.Value, ComputeMedian)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Result .)",
    "insertText": "Add(KV.Key, KV.Value.Stats)"
  },
  {
    "label": "CreateFrameStatsAggregation()",
    "kind": "Method",
    "detail": "Function (} } ; template<TimelineType,BucketMappingFunc,BucketKeyType> void)",
    "insertText": "CreateFrameStatsAggregation(const TArray<const TimelineType*>& Timelines, BucketMappingFunc BucketMapper, const TArray<FFrameData>& Frames, TSharedPtr<FCancellationToken> CancellationToken, TMap<BucketKeyType, FAggregatedTimingStats>& Result)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (TMap<BucketKeyType,FInternalFrameAggregationEntry> GlobalResult ; TMap<BucketKeyType,FAggregatedTimingStats> InitialTimerMap ; double StartTime = Frames [ 0 ] . StartTime ; double EndTime = Frames [ Frames .)",
    "insertText": "Num()"
  },
  {
    "label": "GatherKeysFromTimeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherKeysFromTimeline(Timeline, BucketMapper, StartTime, EndTime, InitialTimerMap)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int64 MaxSize = 5* 1 0 0* 1 0 0 0* 1 0 0 0 ; bool bComputeMedian = InitialTimerMap .)",
    "insertText": "Num() * (int64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FInternalFrameAggregationEntry Entry ;)",
    "insertText": "if(bComputeMedian)"
  },
  {
    "label": "AddUninitialized()",
    "kind": "Method",
    "detail": "Function (Entry . FrameInclusiveTimes .)",
    "insertText": "AddUninitialized(Frames.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} Entry . Inner . Stats = KV . Value ; GlobalResult .)",
    "insertText": "Add(KV.Key, MoveTemp(Entry))"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} TQueue<TSharedPtr<TMap<BucketKeyType,FAggregatedTimingStats>>,EQueueMode::Mpsc> FrameResultsQueue ; float RatioOfThreadsToUse = 0 . 7 5 f ; int32 NumTasks =)",
    "insertText": "Max(1, (int32)((float)GThreadPool->GetNumThreads() * RatioOfThreadsToUse))"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (NumTasks =)",
    "insertText": "Min((int32)NumTasks, Frames.Num())"
  },
  {
    "label": "FramesPerTask()",
    "kind": "Method",
    "detail": "Function (int32 StartIndex = 0 ; int32 EndIndex =)",
    "insertText": "FramesPerTask(ExtraFrameTasks > 0 ? 1 : 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - ExtraFrameTasks ; TArray<UE::Tasks::TTask<void>> AsyncTasks ;)",
    "insertText": "for(int32 Index = 0; Index < NumTasks; ++Index)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (AsyncTasks .)",
    "insertText": "Add(UE::Tasks::Launch(UE_SOURCE_LOCATION, [StartIndex, EndIndex, &Timelines, bComputeMedian, BucketMapper, &Frames, &FrameResultsQueue, &InitialTimerMap, &GlobalResult, CancellationToken]() { if (CancellationToken.IsValid() && CancellationToken->ShouldCancel()) { return; } TSharedPtr<TMap<BucketKeyType, FAggregatedTimingStats>> TaskResult = MakeShared<TMap<BucketKeyType, FAggregatedTimingStats>>(InitialTimerMap); TMap<BucketKeyType, FAggregatedTimingStats> FrameResult(InitialTimerMap); for(int FrameIndex = StartIndex; FrameIndex < EndIndex; ++FrameIndex) { if (CancellationToken.IsValid() && CancellationToken->ShouldCancel()) { return; } for (const TimelineType* Timeline : Timelines) { ProcessTimelineForFrameStats(Timeline, BucketMapper, UpdateTotalMinMaxTimerStats, Frames[FrameIndex].StartTime, Frames[FrameIndex].EndTime, FrameResult); } typename TMap<BucketKeyType, FAggregatedTimingStats>::TIterator FrameResultIterator(FrameResult); typename TMap<BucketKeyType, FAggregatedTimingStats>::TIterator TaskResultIterator(*TaskResult); typename TMap<BucketKeyType, FInternalFrameAggregationEntry>::TIterator GlobalResultIterator(GlobalResult); while (FrameResultIterator) { FAggregatedTimingStats& FrameStats = FrameResultIterator->Value; FAggregatedTimingStats& TaskResultStats = TaskResultIterator->Value; TaskResultStats.InstanceCount += FrameStats.InstanceCount; TaskResultStats.TotalInclusiveTime += FrameStats.TotalInclusiveTime; TaskResultStats.MinInclusiveTime = FMath::Min(TaskResultStats.MinInclusiveTime, FrameStats.TotalInclusiveTime); TaskResultStats.MaxInclusiveTime = FMath::Max(TaskResultStats.MaxInclusiveTime, FrameStats.TotalInclusiveTime); TaskResultStats.TotalExclusiveTime += FrameStats.TotalExclusiveTime; TaskResultStats.MinExclusiveTime = FMath::Min(TaskResultStats.MinExclusiveTime, FrameStats.TotalExclusiveTime); TaskResultStats.MaxExclusiveTime = FMath::Max(TaskResultStats.MaxExclusiveTime, FrameStats.TotalExclusiveTime); if (bComputeMedian) { GlobalResultIterator->Value.FrameInclusiveTimes[FrameIndex] = FrameStats.TotalInclusiveTime; GlobalResultIterator->Value.FrameExclusiveTimes[FrameIndex] = FrameStats.TotalExclusiveTime; } FrameStats = FAggregatedTimingStats(); ++FrameResultIterator; ++TaskResultIterator; ++GlobalResultIterator; } } FrameResultsQueue.Enqueue(MoveTemp(TaskResult)); }))"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (- - ExtraFrameTasks ; })",
    "insertText": "check(StartIndex == Frames.Num())"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int ProcessedResults = 0 ;)",
    "insertText": "while(ProcessedResults < NumTasks)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "Wait(AsyncTasks)"
  },
  {
    "label": "SleepNoStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SleepNoStats(0.1f)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (continue ; } TSharedPtr<TMap<BucketKeyType,FAggregatedTimingStats>> TaskResult ;)",
    "insertText": "ensure(FrameResultsQueue.Dequeue(TaskResult))"
  },
  {
    "label": "TaskResultIterator()",
    "kind": "Method",
    "detail": "Function (+ + ProcessedResults ; TMap<BucketKeyType,FAggregatedTimingStats>::TIterator)",
    "insertText": "TaskResultIterator(*TaskResult)"
  },
  {
    "label": "ResultIterator()",
    "kind": "Method",
    "detail": "Function (TMap<BucketKeyType,FInternalFrameAggregationEntry>::TIterator)",
    "insertText": "ResultIterator(GlobalResult)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (FAggregatedTimingStats& TaskStats = TaskResultIterator -> Value ; FAggregatedTimingStats& ResultStats = ResultIterator -> Value . Inner . Stats ; ResultStats . InstanceCount + = TaskStats . InstanceCount ; ResultStats . TotalInclusiveTime + = TaskStats . TotalInclusiveTime ; ResultStats . MinInclusiveTime =)",
    "insertText": "Min(ResultStats.MinInclusiveTime, TaskStats.MinInclusiveTime)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ResultStats . MaxInclusiveTime =)",
    "insertText": "Max(ResultStats.MaxInclusiveTime, TaskStats.MaxInclusiveTime)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (ResultStats . TotalExclusiveTime + = TaskStats . TotalExclusiveTime ; ResultStats . MinExclusiveTime =)",
    "insertText": "Min(ResultStats.MinExclusiveTime, TaskStats.MinExclusiveTime)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (ResultStats . MaxExclusiveTime =)",
    "insertText": "Max(ResultStats.MaxExclusiveTime, TaskStats.MaxExclusiveTime)"
  },
  {
    "label": "PreComputeHistogram()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "PreComputeHistogram(KV.Value.Inner)"
  },
  {
    "label": "UpdateHistogramForTimerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHistogramForTimerStats(KV.Value.Inner, KV.Value.FrameInclusiveTimes[Index], KV.Value.FrameExclusiveTimes[Index])"
  },
  {
    "label": "ComputeFrameStatsMedian()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ComputeFrameStatsMedian(KV.Value.Inner, FramesNum)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(auto& KV : GlobalResult)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (KV . Value . Inner . Stats . AverageInclusiveTime = KV . Value . Inner . Stats . TotalInclusiveTime / FramesNum ; KV . Value . Inner . Stats . AverageExclusiveTime = KV . Value . Inner . Stats . TotalExclusiveTime / FramesNum ; Result .)",
    "insertText": "Add(KV.Key, KV.Value.Inner.Stats)"
  },
  {
    "label": "FInternalAggregationEntry()",
    "kind": "Method",
    "detail": "Function (} } private : enum { HistogramLen = 1 0 0 } ; struct FInternalAggregationEntry {)",
    "insertText": "FInternalAggregationEntry()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(InclHistogram, sizeof(int32) * HistogramLen)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (InclDT = 1 . 0 ;)",
    "insertText": "Memzero(ExclHistogram, sizeof(int32) * HistogramLen)"
  },
  {
    "label": "ProcessTimeline()",
    "kind": "Method",
    "detail": "Function (ExclDT = 1 . 0 ; } int32 InclHistogram [ HistogramLen ] ; double InclDT ; int32 ExclHistogram [ HistogramLen ] ; double ExclDT ; FAggregatedTimingStats Stats ; } ; struct FInternalFrameAggregationEntry { FInternalAggregationEntry Inner ; TArray<double> FrameInclusiveTimes ; TArray<double> FrameExclusiveTimes ; } ; template<TimelineType,BucketMappingFunc,BucketKeyType,CallbackType> void)",
    "insertText": "ProcessTimeline(const TimelineType* Timeline, BucketMappingFunc BucketMapper, CallbackType Callback, double IntervalStart, double IntervalEnd, TMap<BucketKeyType, FInternalAggregationEntry>& InternalResult)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (struct FStackEntry { double StartTime ; double ExclusiveTime ; BucketKeyType BucketKey ; } ; TArray<FStackEntry> Stack ; Stack .)",
    "insertText": "Reserve(1024)"
  },
  {
    "label": "ProcessTimelineForFrameStats()",
    "kind": "Method",
    "detail": "Function (} template<TimelineType,BucketMappingFunc,BucketKeyType,CallbackType> void)",
    "insertText": "ProcessTimelineForFrameStats(const TimelineType* Timeline, BucketMappingFunc BucketMapper, CallbackType Callback, double IntervalStart, double IntervalEnd, TMap<BucketKeyType, FAggregatedTimingStats>& InternalResult)"
  },
  {
    "label": "UpdateTotalMinMaxTimerAggregationStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateTotalMinMaxTimerAggregationStats(FInternalAggregationEntry& AggregationEntry, double InclTime, double ExclTime)"
  },
  {
    "label": "UpdateTotalMinMaxTimerStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateTotalMinMaxTimerStats(AggregationEntry.Stats, InclTime, ExclTime)"
  },
  {
    "label": "UpdateTotalMinMaxTimerStats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateTotalMinMaxTimerStats(FAggregatedTimingStats& Stats, double InclTime, double ExclTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . TotalInclusiveTime + = InclTime ;)",
    "insertText": "if(InclTime < Stats.MinInclusiveTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . MinInclusiveTime = InclTime ; })",
    "insertText": "if(InclTime > Stats.MaxInclusiveTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . MaxInclusiveTime = InclTime ; } Stats . TotalExclusiveTime + = ExclTime ;)",
    "insertText": "if(ExclTime < Stats.MinExclusiveTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . MinExclusiveTime = ExclTime ; })",
    "insertText": "if(ExclTime > Stats.MaxExclusiveTime)"
  },
  {
    "label": "PreComputeHistogram()",
    "kind": "Method",
    "detail": "Function (Stats . MaxExclusiveTime = ExclTime ; } Stats . InstanceCount + + ; } void)",
    "insertText": "PreComputeHistogram(FInternalAggregationEntry& AggregationEntry)"
  },
  {
    "label": "double()",
    "kind": "Method",
    "detail": "Function (const FAggregatedTimingStats& Stats = AggregationEntry . Stats ; double InvHistogramLen = 1 . 0 / static_cast<)",
    "insertText": "double(HistogramLen - 1)"
  },
  {
    "label": "InclDT()",
    "kind": "Method",
    "detail": "Function (AggregationEntry . InclDT = 1 . 0 ; } else { AggregationEntry .)",
    "insertText": "InclDT(Stats.MaxInclusiveTime - Stats.MinInclusiveTime)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Stats.MaxExclusiveTime == Stats.MinExclusiveTime)"
  },
  {
    "label": "ExclDT()",
    "kind": "Method",
    "detail": "Function (AggregationEntry . ExclDT = 1 . 0 ; } else { AggregationEntry .)",
    "insertText": "ExclDT(Stats.MaxExclusiveTime - Stats.MinExclusiveTime)"
  },
  {
    "label": "UpdateHistogramForTimerStats()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "UpdateHistogramForTimerStats(FInternalAggregationEntry& AggregationEntry, double InclTime, double ExclTime)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const FAggregatedTimingStats& Stats = AggregationEntry . Stats ; int32 InclIndex = static_cast<)",
    "insertText": "int32((InclTime - Stats.MinInclusiveTime + AggregationEntry.InclDT / 2) / AggregationEntry.InclDT)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (InclIndex = 0 ; })",
    "insertText": "ensure(InclIndex < HistogramLen)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (InclIndex = HistogramLen - 1 ; } AggregationEntry . InclHistogram [ InclIndex ] + + ; int32 ExclIndex = static_cast<)",
    "insertText": "int32((ExclTime - Stats.MinExclusiveTime + AggregationEntry.ExclDT / 2) / AggregationEntry.ExclDT)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (ExclIndex = 0 ; })",
    "insertText": "ensure(ExclIndex < HistogramLen)"
  },
  {
    "label": "PostProcessTimerStats()",
    "kind": "Method",
    "detail": "Function (ExclIndex = HistogramLen - 1 ; } AggregationEntry . ExclHistogram [ ExclIndex ] + + ; } void)",
    "insertText": "PostProcessTimerStats(FInternalAggregationEntry& AggregationEntry, bool ComputeMedian)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (FAggregatedTimingStats& Stats = AggregationEntry . Stats ;)",
    "insertText": "ensure(Stats.InstanceCount > 0)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const int32 HalfCount = static_cast<)",
    "insertText": "int32(Stats.InstanceCount / 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 InclCount = 0 ;)",
    "insertText": "for(int32 HistogramIndex = 0; HistogramIndex < HistogramLen; HistogramIndex++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (InclCount + = AggregationEntry . InclHistogram [ HistogramIndex ] ;)",
    "insertText": "if(InclCount > HalfCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . MedianInclusiveTime = Stats . MinInclusiveTime + HistogramIndex* AggregationEntry . InclDT ;)",
    "insertText": "if(HistogramIndex > 0 && Stats.InstanceCount % 2 == 0 && InclCount - AggregationEntry.InclHistogram[HistogramIndex] == HalfCount)"
  },
  {
    "label": "MinInclusiveTime()",
    "kind": "Method",
    "detail": "Function (const double PrevMedian = Stats .)",
    "insertText": "MinInclusiveTime(HistogramIndex - 1)"
  },
  {
    "label": "MedianInclusiveTime()",
    "kind": "Method",
    "detail": "Function (Stats .)",
    "insertText": "MedianInclusiveTime(Stats.MedianInclusiveTime + PrevMedian)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ExclCount + = AggregationEntry . ExclHistogram [ HistogramIndex ] ;)",
    "insertText": "if(ExclCount > HalfCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . MedianExclusiveTime = Stats . MinExclusiveTime + HistogramIndex* AggregationEntry . ExclDT ;)",
    "insertText": "if(HistogramIndex > 0 && Stats.InstanceCount % 2 == 0 && ExclCount - AggregationEntry.ExclHistogram[HistogramIndex] == HalfCount)"
  },
  {
    "label": "MinExclusiveTime()",
    "kind": "Method",
    "detail": "Function (const double PrevMedian = Stats .)",
    "insertText": "MinExclusiveTime(HistogramIndex - 1)"
  },
  {
    "label": "MedianExclusiveTime()",
    "kind": "Method",
    "detail": "Function (Stats .)",
    "insertText": "MedianExclusiveTime(Stats.MedianExclusiveTime + PrevMedian)"
  },
  {
    "label": "ComputeFrameStatsMedian()",
    "kind": "Method",
    "detail": "Function (} break ; } } } } void)",
    "insertText": "ComputeFrameStatsMedian(FInternalAggregationEntry& AggregationEntry, uint32 NumFrames)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (FAggregatedTimingStats& Stats = AggregationEntry . Stats ; const int32 HalfCount = static_cast<)",
    "insertText": "int32(NumFrames / 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . MedianInclusiveTime = Stats . MinInclusiveTime + HistogramIndex* AggregationEntry . InclDT ;)",
    "insertText": "if(HistogramIndex > 0 && NumFrames % 2 == 0 && InclCount - AggregationEntry.InclHistogram[HistogramIndex] == HalfCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Stats . MedianExclusiveTime = Stats . MinExclusiveTime + HistogramIndex* AggregationEntry . ExclDT ;)",
    "insertText": "if(HistogramIndex > 0 && NumFrames % 2 == 0 && ExclCount - AggregationEntry.ExclHistogram[HistogramIndex] == HalfCount)"
  },
  {
    "label": "GatherKeysFromTimeline()",
    "kind": "Method",
    "detail": "Function (} break ; } } } template<TimelineType,BucketMappingFunc,BucketKeyType> void)",
    "insertText": "GatherKeysFromTimeline(const TimelineType* Timeline, BucketMappingFunc BucketMapper, double IntervalStart, double IntervalEnd, TMap<BucketKeyType, FAggregatedTimingStats>& InternalResult)"
  },
  {
    "label": "EnumerateEvents()",
    "kind": "Method",
    "detail": "Function (Timeline ->)",
    "insertText": "EnumerateEvents(IntervalStart, IntervalEnd, [BucketMapper, IntervalStart, IntervalEnd, &InternalResult](bool IsEnter, double Time, const typename TimelineType::EventType& Event) { BucketKeyType BucketKey = BucketMapper(Event); if (IsEnter) { if (!InternalResult.Contains(BucketKey)) { InternalResult.Add(BucketKey); } } return EEventEnumerate::Continue; })"
  }
]