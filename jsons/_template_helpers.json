[
  {
    "label": "enable_if",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "enable_if"
  },
  {
    "label": "strip",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "strip"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "V",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "V"
  },
  {
    "label": "is_same_type",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_same_type"
  },
  {
    "label": "W",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "W"
  },
  {
    "label": "is_ref",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_ref"
  },
  {
    "label": "is_integral_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_integral_impl"
  },
  {
    "label": "is_integral",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_integral"
  },
  {
    "label": "void_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "void_t"
  },
  {
    "label": "supports_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "supports_impl"
  },
  {
    "label": "stored_pack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stored_pack"
  },
  {
    "label": "index_sequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "index_sequence"
  },
  {
    "label": "make_index_sequence_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "make_index_sequence_impl"
  },
  {
    "label": "pack_element",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pack_element"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB_template_helpers_H # define __TBB_template_helpers_H # include<utility> # include<cstddef> # include \" . . / tbb_config . h \" # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT&& __TBB_CPP11_TEMPLATE_ALIASES_PRESENT # include<type_traits> # endif # if __TBB_CPP11_PRESENT # include<iterator> # include<memory> # endif namespace tbb { namespace internal { template<bool Condition,T = void> struct enable_if { } ; template<T> struct enable_if<true,T> { typedef T type ; } ; template<T> struct strip { typedef T type ; } ; template<T> struct strip<const T> { typedef T type ; } ; template<T> struct strip<volatile T> { typedef T type ; } ; template<T> struct strip<const volatile T> { typedef T type ; } ; template<T> struct strip<T&> { typedef T type ; } ; template<T> struct strip<const T&> { typedef T type ; } ; template<T> struct strip<volatile T&> { typedef T type ; } ; template<T> struct strip<const volatile T&> { typedef T type ; } ; template<T> struct strip<)",
    "insertText": "T(&)()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "T(*type)()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} ; # if __TBB_CPP11_RVALUE_REF_PRESENT template<T> struct strip<T&&> { typedef T type ; } ; template<T> struct strip<const T&&> { typedef T type ; } ; template<T> struct strip<volatile T&&> { typedef T type ; } ; template<T> struct strip<const volatile T&&> { typedef T type ; } ; # endif template<T,std::size_t N> struct strip<)",
    "insertText": "T(&)"
  },
  {
    "label": "stored_pack()",
    "kind": "Method",
    "detail": "Function (typedef const volatile T* type ; } ; template<class U,class V> struct is_same_type { const bool value = false ; } ; template<class W> struct is_same_type<W,W> { const bool value = true ; } ; template<T> struct is_ref { const bool value = false ; } ; template<U> struct is_ref<U&> { const bool value = true ; } ; template<T> struct is_integral_impl { const bool value = false ; } ; template<> struct is_integral_impl<bool> { const bool value = true ; } ; template<> struct is_integral_impl<char> { const bool value = true ; } ; # if __TBB_CPP11_PRESENT template<> struct is_integral_impl<char16_t> { const bool value = true ; } ; template<> struct is_integral_impl<char32_t> { const bool value = true ; } ; # endif template<> struct is_integral_impl<wchar_t> { const bool value = true ; } ; template<> struct is_integral_impl<short> { const bool value = true ; } ; template<> struct is_integral_impl<int> { const bool value = true ; } ; template<> struct is_integral_impl<long> { const bool value = true ; } ; template<> struct is_integral_impl<long long> { const bool value = true ; } ; template<T> struct is_integral : is_integral_impl<strip<T>::type> { } ; # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT template<. . .> struct void_t { typedef void type ; } ; # endif # if __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT&& __TBB_CPP11_TEMPLATE_ALIASES_PRESENT template<T,,template<> class . . . Checks> struct supports_impl { typedef std::false_type type ; } ; template<T,template<> class . . . Checks> struct supports_impl<T,void_t<Checks<T> . . .>::type,Checks . . .> { typedef std::true_type type ; } ; template<T,template<> class . . . Checks> using supports = supports_impl<T,void,Checks . . .>::type ; # endif # if __TBB_CPP11_RVALUE_REF_PRESENT&& __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT template<. . . Types> struct stored_pack ; template<> struct stored_pack<> { typedef stored_pack<> pack_type ;)",
    "insertText": "stored_pack()"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (} template<F,Pack> void)",
    "insertText": "call(F&& f, Pack&& p)"
  },
  {
    "label": "call_and_return()",
    "kind": "Method",
    "detail": "Function (template<Ret,F,Pack> Ret)",
    "insertText": "call_and_return(F&& f, Pack&& p)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (protected : template<Ret,F,. . . Preceding> Ret)",
    "insertText": "call(F&& f, const pack_type& , Preceding&&... params)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (} template<Ret,F,. . . Preceding> Ret)",
    "insertText": "call(F&& f, pack_type&& , Preceding&&... params)"
  },
  {
    "label": "stored_pack()",
    "kind": "Method",
    "detail": "Function (} } ; template<T,. . . Types> struct stored_pack<T,Types . . .> : stored_pack<Types . . .> { typedef stored_pack<T,Types . . .> pack_type ; typedef stored_pack<Types . . .> pack_remainder ; strip<T>::type leftmost_value ;)",
    "insertText": "stored_pack(T&& t, Types&&... types ) : pack_remainder(std::forward<Types>(types)...), leftmost_value(std::forward<T>(t))"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (protected : template<Ret,F,. . . Preceding> Ret)",
    "insertText": "call(F&& f, pack_type& pack, Preceding&&... params)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (} template<Ret,F,. . . Preceding> Ret)",
    "insertText": "call(F&& f, const pack_type& pack, Preceding&&... params)"
  },
  {
    "label": "call()",
    "kind": "Method",
    "detail": "Function (} template<Ret,F,. . . Preceding> Ret)",
    "insertText": "call(F&& f, pack_type&& pack, Preceding&&... params)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (strip<Pack>::type::template call<)",
    "insertText": "void(std::forward<F>(f), std::forward<Pack>(p))"
  },
  {
    "label": "save_pack()",
    "kind": "Method",
    "detail": "Function (} template<. . . Types> stored_pack<Types . . .>)",
    "insertText": "save_pack(Types&&... types)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} # endif # if __TBB_CPP14_INTEGER_SEQUENCE_PRESENT using std::index_sequence ; using std::make_index_sequence ; # elif __TBB_CPP11_VARIADIC_TEMPLATES_PRESENT&& __TBB_CPP11_TEMPLATE_ALIASES_PRESENT template<std::size_t . . . S> class index_sequence { } ; template<std::size_t N,std::size_t . . . S> struct make_index_sequence_impl : make_index_sequence_impl<N - 1,N - 1,S . . .> { } ; template<std::size_t . . . S> struct make_index_sequence_impl<0,S . . .> { using type = index_sequence<S . . .> ; } ; template<std::size_t N> using make_index_sequence = tbb::internal::make_index_sequence_impl<N>::type ; # endif # if __TBB_CPP11_PRESENT template<Iter> using iterator_value_t = std::iterator_traits<Iter>::value_type ; template<Iter> using iterator_key_t = std::remove_const<iterator_value_t<Iter>::first_type>::type ; template<Iter> using iterator_mapped_t = iterator_value_t<Iter>::second_type ; template<A> using value_type = A::value_type ; template<A> using alloc_ptr_t = std::allocator_traits<A>::pointer ; template<A> using has_allocate =)",
    "insertText": "decltype(std::declval<alloc_ptr_t<A>&>() = std::declval<A>().allocate(0))"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (template<A> using has_deallocate =)",
    "insertText": "decltype(std::declval<A>().deallocate(std::declval<alloc_ptr_t<A>>(), 0))"
  }
]