[
  {
    "label": "UAnimCurveMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCurveMetaData"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "URig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URig"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FPackageReloadedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageReloadedEvent"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FSkeletonRemapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonRemapping"
  },
  {
    "label": "FEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditableSkeleton"
  },
  {
    "label": "FSkeletonToMeshLinkup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonToMeshLinkup"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBoneNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneNode"
  },
  {
    "label": "FReferencePose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferencePose"
  },
  {
    "label": "FBoneReductionSetting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneReductionSetting"
  },
  {
    "label": "FNameMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameMapping"
  },
  {
    "label": "FAnimSlotGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSlotGroup"
  },
  {
    "label": "FVirtualBone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualBone"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "UAnimationBlueprintLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationBlueprintLibrary"
  },
  {
    "label": "FSkeletonDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonDetails"
  },
  {
    "label": "FBoneNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneNode"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UDataAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataAsset"
  },
  {
    "label": "FSkeletonToMeshLinkup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonToMeshLinkup"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "and"
  },
  {
    "label": "FReferenceSkeletonModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeletonModifier"
  },
  {
    "label": "FEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditableSkeleton"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (compatibility)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FAreAllSkeletonsCompatible)"
  },
  {
    "label": "SerializeReferencePose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeReferencePose(FArchive& Ar, FReferencePose& P, UObject* Outer)"
  },
  {
    "label": "AddVirtualBonePrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "AddVirtualBonePrefix(const FString& InName)"
  },
  {
    "label": "RemoveVirtualBonePrefix()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "RemoveVirtualBonePrefix(const FString& InName)"
  },
  {
    "label": "CheckVirtualBonePrefix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckVirtualBonePrefix(const FString& InName)"
  },
  {
    "label": "ConvertToFReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToFReferenceSkeleton()"
  },
  {
    "label": "AddCurveMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCurveMetaData(FName CurveName, bool bTransact = true)"
  },
  {
    "label": "RenameCurveMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameCurveMetaData(FName OldName, FName NewName)"
  },
  {
    "label": "RemoveCurveMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCurveMetaData(FName CurveName)"
  },
  {
    "label": "RemoveCurveMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCurveMetaData(TArrayView<FName> CurveNames)"
  },
  {
    "label": "AccumulateCurveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccumulateCurveMetaData(FName CurveName, bool bMaterialSet, bool bMorphtargetSet)"
  },
  {
    "label": "AddNewVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewVirtualBone(const FName SourceBoneName, const FName TargetBoneName)"
  },
  {
    "label": "AddNewVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewVirtualBone(const FName SourceBoneName, const FName TargetBoneName, FName& NewVirtualBoneName)"
  },
  {
    "label": "AddNewNamedVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewNamedVirtualBone(const FName SourceBoneName, const FName TargetBoneName, const FName NewVirtualBoneName)"
  },
  {
    "label": "RemoveVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVirtualBones(const TArray<FName>& BonesToRemove)"
  },
  {
    "label": "RenameVirtualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameVirtualBone(const FName OriginalBoneName, const FName NewBoneName)"
  },
  {
    "label": "HandleVirtualBoneChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtualBoneChanges()"
  },
  {
    "label": "RemoveMarkerName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveMarkerName(FName MarkerName)"
  },
  {
    "label": "RenameMarkerName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameMarkerName(FName InOldName, FName InNewName)"
  },
  {
    "label": "RefreshSkeletonMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshSkeletonMetaData()"
  },
  {
    "label": "BuildSlotToGroupMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSlotToGroupMap(bool bInRemoveDuplicates = false)"
  },
  {
    "label": "RegisterSlotNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSlotNode(const FName& InSlotName)"
  },
  {
    "label": "SetSlotGroupName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlotGroupName(const FName& InSlotName, const FName& InGroupName)"
  },
  {
    "label": "AddSlotGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSlotGroupName(const FName& InNewGroupName)"
  },
  {
    "label": "RemoveSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSlotName(const FName& InSlotName)"
  },
  {
    "label": "RemoveSlotGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSlotGroup(const FName& InSlotName)"
  },
  {
    "label": "RenameSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameSlotName(const FName& OldName, const FName& NewName)"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(USkeletalMesh* PreviewMesh, bool bMarkAsDirty=true)"
  },
  {
    "label": "CollectAnimationNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAnimationNotifies()"
  },
  {
    "label": "AddNewAnimationNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewAnimationNotify(FName NewAnimNotifyName)"
  },
  {
    "label": "RemoveAnimationNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAnimationNotify(FName AnimNotifyName)"
  },
  {
    "label": "RenameAnimationNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameAnimationNotify(FName OldAnimNotifyName, FName NewAnimNotifyName)"
  },
  {
    "label": "LoadAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAdditionalPreviewSkeletalMeshes()"
  },
  {
    "label": "SetAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalPreviewSkeletalMeshes(UDataAsset* InPreviewCollectionAsset)"
  },
  {
    "label": "ValidatePreviewAttachedObjects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ValidatePreviewAttachedObjects()"
  },
  {
    "label": "AddCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompatibleSkeleton(const USkeleton* SourceSkeleton)"
  },
  {
    "label": "AddCompatibleSkeletonSoft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCompatibleSkeletonSoft(const TSoftObjectPtr<USkeleton>& SourceSkeleton)"
  },
  {
    "label": "RemoveCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleSkeleton(const USkeleton* SourceSkeleton)"
  },
  {
    "label": "RemoveCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleSkeleton(const TSoftObjectPtr<USkeleton>& SourceSkeleton)"
  },
  {
    "label": "ClearCacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCacheData()"
  },
  {
    "label": "GetMeshLinkupIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshLinkupIndex(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "MergeBonesToBoneTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeBonesToBoneTree(const USkinnedAsset* InSkinnedAsset, const TArray<int32> &RequiredRefBones, bool bShowProgress = true)"
  },
  {
    "label": "MergeAllBonesToBoneTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeAllBonesToBoneTree(const USkinnedAsset* InSkinnedAsset, bool bShowProgress = true)"
  },
  {
    "label": "RecreateBoneTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateBoneTree(USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "GetRawAnimationTrackIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRawAnimationTrackIndex(const int32 InSkeletonBoneIndex, const UAnimSequence* InAnimSeq)"
  },
  {
    "label": "GetSkeletonBoneIndexFromMeshBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSkeletonBoneIndexFromMeshBoneIndex(const USkinnedAsset* InSkinnedAsset, const int32 MeshBoneIndex)"
  },
  {
    "label": "GetMeshBoneIndexFromSkeletonBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshBoneIndexFromSkeletonBoneIndex(const USkinnedAsset* InSkinnedAsset, const int32 SkeletonBoneIndex)"
  },
  {
    "label": "RebuildLinkup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildLinkup(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "RemoveLinkup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLinkup(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "SetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTranslationRetargetingMode(const int32 BoneIndex, EBoneTranslationRetargetingMode::Type NewRetargetingMode, bool bChildrenToo=false)"
  },
  {
    "label": "UpdateReferencePoseFromMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReferencePoseFromMesh(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "UpdateRetargetSource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateRetargetSource( const FName InName )"
  },
  {
    "label": "BuildLinkup()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "BuildLinkup(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "BuildLinkupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLinkupData(const USkinnedAsset* InSkinnedAsset, FSkeletonToMeshLinkup& NewMeshLinkup)"
  },
  {
    "label": "RefreshAllRetargetSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllRetargetSources()"
  },
  {
    "label": "CreateReferenceSkeletonFromMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateReferenceSkeletonFromMesh(const USkinnedAsset* InSkinnedAsset, const TArray<int32> & RequiredRefBones)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE( FOnSkeletonHierarchyChangedMulticaster )"
  },
  {
    "label": "HandleSkeletonHierarchyChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSkeletonHierarchyChange(bool bShowProgress = true)"
  },
  {
    "label": "RegisterOnSkeletonHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterOnSkeletonHierarchyChanged(const FOnSkeletonHierarchyChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSkeletonHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSkeletonHierarchyChanged(void* Unregister)"
  },
  {
    "label": "RemoveBonesFromSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBonesFromSkeleton(const TArray<FName>& BonesToRemove, bool bRemoveChildBones)"
  },
  {
    "label": "RegenerateGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateGuid()"
  },
  {
    "label": "RegenerateVirtualBoneGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateVirtualBoneGuid()"
  },
  {
    "label": "HandlePackageReloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePackageReloaded(const EPackageReloadPhase InPackageReloadPhase, FPackageReloadedEvent* InPackageReloadedEvent)"
  }
]