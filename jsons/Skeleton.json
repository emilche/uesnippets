[
  {
    "label": "UAnimCurveMetaData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimCurveMetaData"
  },
  {
    "label": "UAnimSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequence"
  },
  {
    "label": "UBlendProfile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlendProfile"
  },
  {
    "label": "URig",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "URig"
  },
  {
    "label": "USkeletalMeshSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshSocket"
  },
  {
    "label": "USkinnedAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkinnedAsset"
  },
  {
    "label": "FPackageReloadedEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPackageReloadedEvent"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FSkeletonRemapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonRemapping"
  },
  {
    "label": "FEditableSkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditableSkeleton"
  },
  {
    "label": "FSkeletonToMeshLinkup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkeletonToMeshLinkup"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FBoneNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneNode"
  },
  {
    "label": "FReferencePose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferencePose"
  },
  {
    "label": "FBoneReductionSetting",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneReductionSetting"
  },
  {
    "label": "FNameMapping",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNameMapping"
  },
  {
    "label": "FAnimSlotGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimSlotGroup"
  },
  {
    "label": "FVirtualBone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVirtualBone"
  },
  {
    "label": "UAnimationBlueprintLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimationBlueprintLibrary"
  },
  {
    "label": "FSkeletonDetails",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletonDetails"
  },
  {
    "label": "USkeletalMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMesh"
  },
  {
    "label": "UDataAsset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDataAsset"
  },
  {
    "label": "FReferenceSkeletonModifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceSkeletonModifier"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" HAL / CriticalSection . h \" # include \" Misc / Guid . h \" # include \" Misc / TransactionallySafeRWLock . h \" # include \" ReferenceSkeleton . h \" # include \" Animation / PreviewAssetAttachComponent . h \" # include \" Animation / SmartName . h \" # include \" Engine / AssetUserData . h \" # include \" HAL / CriticalSection . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" Interfaces / Interface_PreviewMeshProvider . h \" # include \" Delegates / DelegateCombinations . h \" # include \" UObject / ObjectKey . h \" # include \" Skeleton . generated . h \" class UAnimCurveMetaData ; class UAnimSequence ; class UBlendProfile ; class URig ; class USkeletalMeshSocket ; class USkinnedAsset ; class FPackageReloadedEvent ; struct FAssetData ; enum class EPackageReloadPhase : uint8 ; class USkeleton ; typedef SmartName::UID_Type SkeletonAnimCurveUID ; class USkeleton ; struct FSkeletonRemapping ; class FEditableSkeleton ;)",
    "insertText": "DECLARE_DELEGATE_RetVal(bool, FAreAllSkeletonsCompatible)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "BONE_TRANS_RT_ORIENT_AND_SCALE_PRECISION()",
    "kind": "Method",
    "detail": "Function (enum Type : int { Animation,Skeleton,AnimationScaled,AnimationRelative,OrientAndScale,} ; } # define)",
    "insertText": "BONE_TRANS_RT_ORIENT_AND_SCALE_PRECISION(0.001f) USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() #if WITH_EDITORONLY_DATA UPROPERTY()"
  },
  {
    "label": "FBoneNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBoneNode() : #if WITH_EDITORONLY_DATA ParentIndex_DEPRECATED(INDEX_NONE), #endif TranslationRetargetingMode(EBoneTranslationRetargetingMode::Animation)"
  },
  {
    "label": "FBoneNode()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBoneNode(FName InBoneName, int32 InParentIndex) : #if WITH_EDITORONLY_DATA Name_DEPRECATED(InBoneName), ParentIndex_DEPRECATED(InParentIndex), #endif TranslationRetargetingMode(EBoneTranslationRetargetingMode::Animation)"
  },
  {
    "label": "SerializeReferencePose()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "SerializeReferencePose(FArchive& Ar, FReferencePose& P, UObject* Outer)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Add(FName BoneName)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BonesToRemove .)",
    "insertText": "Add(BoneName)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (BonesToRemove .)",
    "insertText": "Remove(BoneName)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(FName BoneName)"
  },
  {
    "label": "FNameMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FNameMapping() : NodeName(NAME_None) , BoneName(NAME_None)"
  },
  {
    "label": "FNameMapping()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNameMapping(FName InNodeName) : NodeName(InNodeName) , BoneName(NAME_None)"
  },
  {
    "label": "FNameMapping()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNameMapping(FName InNodeName, FName InBoneName) : NodeName(InNodeName) , BoneName(InBoneName)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FAnimSlotGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FAnimSlotGroup() : GroupName(DefaultGroupName)"
  },
  {
    "label": "FAnimSlotGroup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAnimSlotGroup(FName InGroupName) : GroupName(InGroupName)"
  },
  {
    "label": "AddVirtualBonePrefix()",
    "kind": "Method",
    "detail": "Function (} } ; namespace VirtualBoneNameHelpers { const FString VirtualBonePrefix ; FString)",
    "insertText": "AddVirtualBonePrefix(const FString& InName)"
  },
  {
    "label": "RemoveVirtualBonePrefix()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "RemoveVirtualBonePrefix(const FString& InName)"
  },
  {
    "label": "CheckVirtualBonePrefix()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckVirtualBonePrefix(const FString& InName)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() public: UPROPERTY()"
  },
  {
    "label": "FVirtualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVirtualBone()"
  },
  {
    "label": "FVirtualBone()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVirtualBone(FName InSource, FName InTarget, FName InVirtual) : SourceBoneName(InSource) , TargetBoneName(InTarget) , VirtualBoneName(InVirtual)"
  },
  {
    "label": "FVirtualBone()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVirtualBone(FName InSource, FName InTarget) : SourceBoneName(InSource) , TargetBoneName(InTarget)"
  },
  {
    "label": "AddVirtualBonePrefix()",
    "kind": "Method",
    "detail": "Function (FString VBNameString =)",
    "insertText": "AddVirtualBonePrefix(SourceBoneName.ToString() + TEXT(\"_\") + TargetBoneName.ToString())"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (VirtualBoneName =)",
    "insertText": "FName(*VBNameString)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(hidecategories=Object, MinimalAPI, BlueprintType)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (class UAnimationBlueprintLibrary ; class FSkeletonDetails ;)",
    "insertText": "GENERATED_UCLASS_BODY() protected: UPROPERTY(VisibleAnywhere, Category=Skeleton)"
  },
  {
    "label": "ConvertToFReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertToFReferenceSkeleton()"
  },
  {
    "label": "PreEditUndo()",
    "kind": "Method",
    "detail": "Function (public : # if WITH_EDITOR void)",
    "insertText": "PreEditUndo()"
  },
  {
    "label": "PostEditUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostEditUndo()"
  },
  {
    "label": "GetPreviewForwardAxis()",
    "kind": "Method",
    "detail": "Function (EAxis::Type)",
    "insertText": "GetPreviewForwardAxis()"
  },
  {
    "label": "GetReferenceSkeleton()",
    "kind": "Method",
    "detail": "Function (const FReferenceSkeleton&)",
    "insertText": "GetReferenceSkeleton()"
  },
  {
    "label": "GetCurveMetaData()",
    "kind": "Method",
    "detail": "Function (FCurveMetaData*)",
    "insertText": "GetCurveMetaData(FName CurveName)"
  },
  {
    "label": "ForEachCurveMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachCurveMetaData(TFunctionRef<void(FName, const FCurveMetaData&)> InFunction)"
  },
  {
    "label": "GetNumCurveMetaData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumCurveMetaData()"
  },
  {
    "label": "AddCurveMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCurveMetaData(FName CurveName, bool bTransact = true)"
  },
  {
    "label": "GetCurveMetaDataNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCurveMetaDataNames(TArray<FName>& OutNames)"
  },
  {
    "label": "RenameCurveMetaData()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR bool)",
    "insertText": "RenameCurveMetaData(FName OldName, FName NewName)"
  },
  {
    "label": "RemoveCurveMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCurveMetaData(FName CurveName)"
  },
  {
    "label": "RemoveCurveMetaData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveCurveMetaData(TArrayView<FName> CurveNames)"
  },
  {
    "label": "AccumulateCurveMetaData()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "AccumulateCurveMetaData(FName CurveName, bool bMaterialSet, bool bMorphtargetSet)"
  },
  {
    "label": "AddNewVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewVirtualBone(const FName SourceBoneName, const FName TargetBoneName)"
  },
  {
    "label": "AddNewVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewVirtualBone(const FName SourceBoneName, const FName TargetBoneName, FName& NewVirtualBoneName)"
  },
  {
    "label": "AddNewNamedVirtualBone()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewNamedVirtualBone(const FName SourceBoneName, const FName TargetBoneName, const FName NewVirtualBoneName)"
  },
  {
    "label": "RemoveVirtualBones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveVirtualBones(const TArray<FName>& BonesToRemove)"
  },
  {
    "label": "RenameVirtualBone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameVirtualBone(const FName OriginalBoneName, const FName NewBoneName)"
  },
  {
    "label": "HandleVirtualBoneChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtualBoneChanges()"
  },
  {
    "label": "GetAnimCurveUidVersion()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetAnimCurveUidVersion()"
  },
  {
    "label": "GetCompatibleSkeletons()",
    "kind": "Method",
    "detail": "Function (const TArray<TSoftObjectPtr<USkeleton>>&)",
    "insertText": "GetCompatibleSkeletons()"
  },
  {
    "label": "GetExistingMarkerNames()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR const TArray<FName>&)",
    "insertText": "GetExistingMarkerNames()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ExistingMarkerNames .)",
    "insertText": "AddUnique(MarkerName)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (ExistingMarkerNames .)",
    "insertText": "Sort(FNameLexicalLess())"
  },
  {
    "label": "RemoveMarkerName()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveMarkerName(FName MarkerName)"
  },
  {
    "label": "RenameMarkerName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RenameMarkerName(FName InOldName, FName InNewName)"
  },
  {
    "label": "RefreshSkeletonMetaData()",
    "kind": "Method",
    "detail": "Function (TArray<FName> ExistingMarkerNames ; private : void)",
    "insertText": "RefreshSkeletonMetaData()"
  },
  {
    "label": "GetOrCreateCurveMetaDataObject()",
    "kind": "Method",
    "detail": "Function (UAnimCurveMetaData*)",
    "insertText": "GetOrCreateCurveMetaDataObject()"
  },
  {
    "label": "CreateNewBlendProfile()",
    "kind": "Method",
    "detail": "Function (UBlendProfile*)",
    "insertText": "CreateNewBlendProfile(const FName& InProfileName)"
  },
  {
    "label": "RenameBlendProfile()",
    "kind": "Method",
    "detail": "Function (UBlendProfile*)",
    "insertText": "RenameBlendProfile(const FName& InProfileName, const FName& InNewProfileName)"
  },
  {
    "label": "BuildSlotToGroupMap()",
    "kind": "Method",
    "detail": "Function (TMap<FName,FName> SlotToGroupNameMap ; void)",
    "insertText": "BuildSlotToGroupMap(bool bInRemoveDuplicates = false)"
  },
  {
    "label": "FindAnimSlotGroup()",
    "kind": "Method",
    "detail": "Function (public : FAnimSlotGroup*)",
    "insertText": "FindAnimSlotGroup(const FName& InGroupName)"
  },
  {
    "label": "GetSlotGroups()",
    "kind": "Method",
    "detail": "Function (const TArray<FAnimSlotGroup>&)",
    "insertText": "GetSlotGroups()"
  },
  {
    "label": "ContainsSlotName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContainsSlotName(const FName& InSlotName)"
  },
  {
    "label": "RegisterSlotNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterSlotNode(const FName& InSlotName)"
  },
  {
    "label": "SetSlotGroupName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlotGroupName(const FName& InSlotName, const FName& InGroupName)"
  },
  {
    "label": "AddSlotGroupName()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddSlotGroupName(const FName& InNewGroupName)"
  },
  {
    "label": "GetSlotGroupName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSlotGroupName(const FName& InSlotName)"
  },
  {
    "label": "RemoveSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSlotName(const FName& InSlotName)"
  },
  {
    "label": "RemoveSlotGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSlotGroup(const FName& InSlotName)"
  },
  {
    "label": "RenameSlotName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameSlotName(const FName& OldName, const FName& NewName)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# endif private :)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnRetargetSourceChangedMulticaster)"
  },
  {
    "label": "RegisterOnRetargetSourceChanged()",
    "kind": "Method",
    "detail": "Function (public : typedef FOnRetargetSourceChangedMulticaster::FDelegate FOnRetargetSourceChanged ; FDelegateHandle)",
    "insertText": "RegisterOnRetargetSourceChanged(const FOnRetargetSourceChanged& Delegate)"
  },
  {
    "label": "GetGuid()",
    "kind": "Method",
    "detail": "Function (} const FGuid)",
    "insertText": "GetGuid()"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (OnRetargetSourceChanged .)",
    "insertText": "Remove(Handle)"
  },
  {
    "label": "CallbackRetargetSourceChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CallbackRetargetSourceChanged()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnRetargetSourceChanged .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "GetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (TSoftObjectPtr<USkeleton> CachedSoftObjectPtr ; USkeletalMesh*)",
    "insertText": "GetPreviewMesh(bool bFindIfNotSet = false)"
  },
  {
    "label": "GetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "GetPreviewMesh()"
  },
  {
    "label": "SetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreviewMesh(USkeletalMesh* PreviewMesh, bool bMarkAsDirty=true)"
  },
  {
    "label": "CollectAnimationNotifies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAnimationNotifies(TArray<FName>& OutNotifies)"
  },
  {
    "label": "AddNewAnimationNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewAnimationNotify(FName NewAnimNotifyName)"
  },
  {
    "label": "RemoveAnimationNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAnimationNotify(FName AnimNotifyName)"
  },
  {
    "label": "RenameAnimationNotify()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameAnimationNotify(FName OldAnimNotifyName, FName NewAnimNotifyName)"
  },
  {
    "label": "GetAssetPreviewMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "GetAssetPreviewMesh(UObject* InAsset)"
  },
  {
    "label": "FindCompatibleMesh()",
    "kind": "Method",
    "detail": "Function (USkeletalMesh*)",
    "insertText": "FindCompatibleMesh()"
  },
  {
    "label": "LoadAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAdditionalPreviewSkeletalMeshes()"
  },
  {
    "label": "GetAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (UDataAsset*)",
    "insertText": "GetAdditionalPreviewSkeletalMeshes()"
  },
  {
    "label": "SetAdditionalPreviewSkeletalMeshes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAdditionalPreviewSkeletalMeshes(UDataAsset* InPreviewCollectionAsset)"
  },
  {
    "label": "ValidatePreviewAttachedObjects()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ValidatePreviewAttachedObjects()"
  },
  {
    "label": "GetChildBones()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetChildBones(int32 ParentBoneIndex, TArray<int32> & Children)"
  },
  {
    "label": "IsCompatibleForEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleForEditor(const USkeleton* InSkeleton)"
  },
  {
    "label": "IsCompatibleForEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleForEditor(const FAssetData& AssetData, const TCHAR* InTag = TEXT(\"Skeleton\"))"
  },
  {
    "label": "IsCompatibleForEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleForEditor(const FString& SkeletonAssetString)"
  },
  {
    "label": "ShouldFilterAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFilterAsset(const FAssetData& InAssetData, const TCHAR* InTag = TEXT(\"Skeleton\"))"
  },
  {
    "label": "GetCompatibleSkeletonAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompatibleSkeletonAssets(TArray<FAssetData>& OutAssets)"
  },
  {
    "label": "GetCompatibleAssets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCompatibleAssets(UClass* AssetClass, const TCHAR* InTag, TArray<FAssetData>& OutAssets)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(USkeleton, FSmartNamesChangedEvent)"
  },
  {
    "label": "RemoveCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleSkeleton(const USkeleton* SourceSkeleton)"
  },
  {
    "label": "RemoveCompatibleSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveCompatibleSkeleton(const TSoftObjectPtr<USkeleton>& SourceSkeleton)"
  },
  {
    "label": "IsCompatibleMesh()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompatibleMesh(const USkinnedAsset* InSkinnedAsset, bool bDoParentChainCheck=true)"
  },
  {
    "label": "ClearCacheData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearCacheData()"
  },
  {
    "label": "FindOrAddMeshLinkupData()",
    "kind": "Method",
    "detail": "Function (const FSkeletonToMeshLinkup&)",
    "insertText": "FindOrAddMeshLinkupData(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "AddMeshLinkupData()",
    "kind": "Method",
    "detail": "Function (const FSkeletonToMeshLinkup&)",
    "insertText": "AddMeshLinkupData(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "MergeBonesToBoneTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeBonesToBoneTree(const USkinnedAsset* InSkinnedAsset, const TArray<int32> &RequiredRefBones, bool bShowProgress = true)"
  },
  {
    "label": "MergeAllBonesToBoneTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MergeAllBonesToBoneTree(const USkinnedAsset* InSkinnedAsset, bool bShowProgress = true)"
  },
  {
    "label": "RecreateBoneTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RecreateBoneTree(USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "GetRefLocalPoses()",
    "kind": "Method",
    "detail": "Function (const TArray<FTransform>&)",
    "insertText": "GetRefLocalPoses(FName RetargetSource = NAME_None)"
  },
  {
    "label": "GetRetargetSourceForMesh()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FName)",
    "insertText": "GetRetargetSourceForMesh(USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "GetRetargetSources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRetargetSources(TArray<FName>& OutRetargetSources)"
  },
  {
    "label": "GetSkeletonBoneIndexFromMeshBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSkeletonBoneIndexFromMeshBoneIndex(const USkinnedAsset* InSkinnedAsset, const int32 MeshBoneIndex)"
  },
  {
    "label": "GetMeshBoneIndexFromSkeletonBoneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeshBoneIndexFromSkeletonBoneIndex(const USkinnedAsset* InSkinnedAsset, const int32 SkeletonBoneIndex)"
  },
  {
    "label": "GetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (EBoneTranslationRetargetingMode::Type)",
    "insertText": "GetBoneTranslationRetargetingMode(const int32 BoneTreeIdx, bool bDisableRetargeting = false)"
  },
  {
    "label": "RemoveLinkup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveLinkup(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "SetBoneTranslationRetargetingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoneTranslationRetargetingMode(const int32 BoneIndex, EBoneTranslationRetargetingMode::Type NewRetargetingMode, bool bChildrenToo=false)"
  },
  {
    "label": "IsPostLoadThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPostLoadThreadSafe()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "UpdateReferencePoseFromMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReferencePoseFromMesh(const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "UpdateRetargetSource()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "UpdateRetargetSource(const FName InName)"
  },
  {
    "label": "DoesParentChainMatch()",
    "kind": "Method",
    "detail": "Function (# endif protected : bool)",
    "insertText": "DoesParentChainMatch(int32 StartBoneTreeIndex, const USkinnedAsset* InSkinnedAsset)"
  },
  {
    "label": "BuildLinkupData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildLinkupData(const USkinnedAsset* InSkinnedAsset, FSkeletonToMeshLinkup& NewMeshLinkup)"
  },
  {
    "label": "RefreshAllRetargetSources()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "RefreshAllRetargetSources()"
  },
  {
    "label": "CreateReferenceSkeletonFromMesh()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "CreateReferenceSkeletonFromMesh(const USkinnedAsset* InSkinnedAsset, const TArray<int32> & RequiredRefBones)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnSkeletonHierarchyChangedMulticaster)"
  },
  {
    "label": "HandleSkeletonHierarchyChange()",
    "kind": "Method",
    "detail": "Function (FOnSkeletonHierarchyChangedMulticaster OnSkeletonHierarchyChanged ; void)",
    "insertText": "HandleSkeletonHierarchyChange(bool bShowProgress = true)"
  },
  {
    "label": "RegisterOnSkeletonHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (public : typedef FOnSkeletonHierarchyChangedMulticaster::FDelegate FOnSkeletonHierarchyChanged ; void)",
    "insertText": "RegisterOnSkeletonHierarchyChanged(const FOnSkeletonHierarchyChanged& Delegate)"
  },
  {
    "label": "UnregisterOnSkeletonHierarchyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterOnSkeletonHierarchyChanged(void* Unregister)"
  },
  {
    "label": "RemoveBonesFromSkeleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBonesFromSkeleton(const TArray<FName>& BonesToRemove, bool bRemoveChildBones)"
  },
  {
    "label": "FindSocketAndIndex()",
    "kind": "Method",
    "detail": "Function (const FName AnimNotifyTag ; const FString AnimNotifyTagDelimiter ; const FName AnimSyncMarkerTag ; const FString AnimSyncMarkerTagDelimiter ; const FName CurveNameTag ; const FString CurveTagDelimiter ; const FName CompatibleSkeletonsNameTag ; const FString CompatibleSkeletonsTagDelimiter ; # endif public : USkeletalMeshSocket*)",
    "insertText": "FindSocketAndIndex(FName InSocketName, int32& OutIndex)"
  },
  {
    "label": "FindSocket()",
    "kind": "Method",
    "detail": "Function (USkeletalMeshSocket*)",
    "insertText": "FindSocket(FName InSocketName)"
  },
  {
    "label": "RegenerateGuid()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "RegenerateGuid()"
  },
  {
    "label": "RegenerateVirtualBoneGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegenerateVirtualBoneGuid()"
  },
  {
    "label": "HandlePackageReloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandlePackageReloaded(const EPackageReloadPhase InPackageReloadPhase, FPackageReloadedEvent* InPackageReloadedEvent)"
  },
  {
    "label": "AddAssetUserData()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "AddAssetUserData(UAssetUserData* InUserData)"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataArray()",
    "kind": "Method",
    "detail": "Function (const TArray<UAssetUserData*>*)",
    "insertText": "GetAssetUserDataArray()"
  }
]