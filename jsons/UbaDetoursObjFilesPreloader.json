[
  {
    "label": "ObjFilesPreloader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ObjFilesPreloader"
  },
  {
    "label": "Preload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Preload"
  },
  {
    "label": "GetLargePageSize()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaCompressedObjFileHeader . h \" # include \" UbaDetoursUtilsWin . h \" # include \" UbaEvent . h \" # include \" UbaProcessUtils . h \" # include<oodle2 . h> # define _NTDEF_ # include<ntsecapi . h> namespace uba { bool UseLargePages = false ; u64)",
    "insertText": "GetLargePageSize()"
  },
  {
    "label": "LoadLibrary()",
    "kind": "Method",
    "detail": "Function (HINSTANCE hDll =)",
    "insertText": "LoadLibrary(TEXT(\"kernel32.dll\"))"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto lg =)",
    "insertText": "MakeGuard([hDll]() { FreeLibrary(hDll); })"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (using GetLargePageMinimumType =)",
    "insertText": "int(void)"
  },
  {
    "label": "getLargePageMinimumFunc()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "getLargePageMinimumFunc(GetLargePageMinimumType*)GetProcAddress(hDll, \"GetLargePageMinimum\")"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (DWORD)",
    "insertText": "size(*getLargePageMinimumFunc)()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (HANDLE hToken ;)",
    "insertText": "if(!OpenProcessToken(GetCurrentProcess(), TOKEN_ADJUST_PRIVILEGES | TOKEN_QUERY, &hToken))"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto tg =)",
    "insertText": "MakeGuard([hToken]() { CloseHandle(hToken); })"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TOKEN_PRIVILEGES tp ; tp . PrivilegeCount = 1 ; tp . Privileges [ 0 ] . Attributes = SE_PRIVILEGE_ENABLED ;)",
    "insertText": "if(!LookupPrivilegeValue(NULL, L\"SeLockMemoryPrivilege\", &tp.Privileges[0].Luid))"
  },
  {
    "label": "CreateFileW()",
    "kind": "Method",
    "detail": "Function (HANDLE rspFileHandle =)",
    "insertText": "CreateFileW(rspFile.data, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER rspFileSize ;)",
    "insertText": "if(!GetFileSizeEx(rspFileHandle, &rspFileSize))"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(rspFileHandle)"
  },
  {
    "label": "MapViewOfFile()",
    "kind": "Method",
    "detail": "Function (const void* rspMem =)",
    "insertText": "MapViewOfFile(rspFileMappingHandle, FILE_MAP_READ, 0, 0, rspFileSize.QuadPart)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(rspFileMappingHandle)"
  },
  {
    "label": "ParseArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseArguments((const char*)rspMem, rspFileSize.QuadPart, [&](const char* arg, u32 argLen) { StringBuffer<> sb; sb.Append(arg, argLen); HandleLine(sb); })"
  },
  {
    "label": "UnmapViewOfFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapViewOfFile(rspMem)"
  },
  {
    "label": "HandleLine()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "HandleLine(const StringView& line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const wchar_t* begin = line . data + 1 ; const wchar_t* end = line . data + line . count ; StringBuffer<> rspFile ;)",
    "insertText": "if(*begin == '\\\"')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + begin ; - - end ;)",
    "insertText": "if(!end)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} rspFile .)",
    "insertText": "Append(begin, end - begin)"
  },
  {
    "label": "ParseRsp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseRsp(rspFile)"
  },
  {
    "label": "FixPath()",
    "kind": "Method",
    "detail": "Function (StringBuffer<> fileFull ;)",
    "insertText": "FixPath(fileFull, file.data)"
  },
  {
    "label": "CreateFileW()",
    "kind": "Method",
    "detail": "Function (HANDLE fileHandle =)",
    "insertText": "CreateFileW(fileFull.data, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(fileHandle != INVALID_HANDLE_VALUE)"
  },
  {
    "label": "ToStringKey()",
    "kind": "Method",
    "detail": "Function (StringKey fileNameKey =)",
    "insertText": "ToStringKey(fileFull.MakeLower())"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (auto insres = m_preloadedObjFiles .)",
    "insertText": "try_emplace(fileNameKey)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(insres.second)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (insres . first -> second . handle = fileHandle ; insres . first -> second . event .)",
    "insertText": "Create(true)"
  },
  {
    "label": "SCOPED_READ_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_READ_LOCK(g_mappedFileTable.m_lookupLock, _)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto findIt = g_mappedFileTable . m_lookup .)",
    "insertText": "find(fileNameKey)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (insres . first -> second . fileInfo =& findIt -> second ; } void)",
    "insertText": "Start(const wchar_t* cmdLine)"
  },
  {
    "label": "Oodle_SetUsageWarnings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Oodle_SetUsageWarnings(Oodle_UsageWarnings_Disabled)"
  },
  {
    "label": "ParseArguments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseArguments(cmdLine, [&](const tchar* arg, u32 argLen) { HandleLine(StringView(arg, argLen)); })"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Stop()"
  },
  {
    "label": "WaitForSingleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForSingleObject(m_threadHandle, INFINITE)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(m_threadHandle)"
  },
  {
    "label": "WaitForMultipleObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForMultipleObjects(sizeof_array(m_helperThreadHandles), m_helperThreadHandles, true, INFINITE)"
  },
  {
    "label": "ThreadPreload()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ThreadPreload()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (u64 totalMemSize = 0 ;)",
    "insertText": "for(auto& kv : m_preloadedObjFiles)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Preload& preload = kv . second ; HANDLE objFileHandle = preload . handle ;)",
    "insertText": "if(!objFileHandle)"
  },
  {
    "label": "GetFileSizeEx()",
    "kind": "Method",
    "detail": "Function (LARGE_INTEGER objFileSize ; BOOL res =)",
    "insertText": "GetFileSizeEx(objFileHandle, &objFileSize)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(res)"
  },
  {
    "label": "CreateFileMappingW()",
    "kind": "Method",
    "detail": "Function (HANDLE objFileMappingHandle =)",
    "insertText": "CreateFileMappingW(objFileHandle, NULL, PAGE_READONLY, objFileSize.HighPart, objFileSize.LowPart, NULL)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(objFileMappingHandle)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseHandle(objFileHandle)"
  },
  {
    "label": "objMem()",
    "kind": "Method",
    "detail": "Function (preload . handle = NULL ; preload .)",
    "insertText": "objMem(u8*)MapViewOfFile(objFileMappingHandle, FILE_MAP_READ, 0, 0, objFileSize.QuadPart)"
  },
  {
    "label": "UBA_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UBA_ASSERT(preload.objMem)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (preload . event .)",
    "insertText": "Set()"
  },
  {
    "label": "objDecompressedSize()",
    "kind": "Method",
    "detail": "Function (continue ; } preload . objCompressedSize = objFileSize . QuadPart ; preload .)",
    "insertText": "objDecompressedSize(u64*)(preload.objMem + sizeof(CompressedObjFileHeader))"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (preload . objReadOffset = 8 +)",
    "insertText": "sizeof(CompressedObjFileHeader)"
  },
  {
    "label": "CloseHandle()",
    "kind": "Method",
    "detail": "Function (preload . objWriteOffset = 0 ; preload . objLeft = preload . objDecompressedSize ;)",
    "insertText": "CloseHandle(objFileMappingHandle)"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (totalMemSize + = preload . objDecompressedSize ; } u64 alignedMem =)",
    "insertText": "AlignUp(totalMemSize, 64*1024)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (DWORD allocationType = MEM_RESERVE | MEM_COMMIT ;)",
    "insertText": "if(UseLargePages)"
  },
  {
    "label": "AlignUp()",
    "kind": "Method",
    "detail": "Function (alignedMem =)",
    "insertText": "AlignUp(totalMemSize, largePageSize)"
  },
  {
    "label": "m_totalMem()",
    "kind": "Method",
    "detail": "Function (allocationType | = MEM_LARGE_PAGES ; } })",
    "insertText": "m_totalMem(u8*)VirtualAlloc(NULL, alignedMem, allocationType, PAGE_READWRITE)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (m_it = m_preloadedObjFiles .)",
    "insertText": "begin()"
  },
  {
    "label": "ThreadHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThreadHelper()"
  },
  {
    "label": "OodleLZDecoder_MemorySizeNeeded()",
    "kind": "Method",
    "detail": "Function (OO_SINTa decoredMemSize =)",
    "insertText": "OodleLZDecoder_MemorySizeNeeded(OodleLZ_Compressor_Kraken)"
  },
  {
    "label": "malloc()",
    "kind": "Method",
    "detail": "Function (void* decoderMem =)",
    "insertText": "malloc(decoredMemSize)"
  },
  {
    "label": "MakeGuard()",
    "kind": "Method",
    "detail": "Function (auto mg =)",
    "insertText": "MakeGuard([decoderMem]() { free(decoderMem); })"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_WRITE_LOCK(m_threadLock, lock)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Preload& preload = m_it -> second ;)",
    "insertText": "if(preload.objReadOffset == preload.objCompressedSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + m_it ; continue ; } FileInfo& info =* preload . fileInfo ;)",
    "insertText": "if(preload.objWriteOffset == 0)"
  },
  {
    "label": "reader()",
    "kind": "Method",
    "detail": "Function (info . fileMapMem = m_totalMem + m_totalMemOffset ; m_totalMemOffset + = preload . objDecompressedSize ; } BinaryReader)",
    "insertText": "reader(preload.objMem, preload.objReadOffset, preload.objCompressedSize)"
  },
  {
    "label": "ReadU32()",
    "kind": "Method",
    "detail": "Function (u32 compressedBlockSize = reader .)",
    "insertText": "ReadU32()"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (u8* destMem = info . fileMapMem + preload . objWriteOffset ; preload . objReadOffset + = compressedBlockSize + 8 ; preload . objWriteOffset + = decompressedBlockSize ; lock .)",
    "insertText": "Leave()"
  },
  {
    "label": "OodleLZ_Decompress()",
    "kind": "Method",
    "detail": "Function (OO_SINTa decompLen =)",
    "insertText": "OodleLZ_Decompress(reader.GetPositionData(), (OO_SINTa)compressedBlockSize, destMem, (OO_SINTa)decompressedBlockSize, OodleLZ_FuzzSafe_Yes, OodleLZ_CheckCRC_No, OodleLZ_Verbosity_None, NULL, 0, NULL, NULL, decoderMem, decoredMemSize)"
  },
  {
    "label": "FatalError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FatalError(1356, TC(\"Failed to decompress .obj file %s (%s)\"), info.name, info.originalName)"
  },
  {
    "label": "fetch_sub()",
    "kind": "Method",
    "detail": "Function (} bool isDone = preload . objLeft .)",
    "insertText": "fetch_sub(decompressedBlockSize)"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (info . size = preload . objDecompressedSize ; info . memoryFile = nullptr ; info . name = L \" : \" ; info . isFileMap = true ; info . fileMapMemEnd = info . fileMapMem + info . size ; info . trueFileMapHandle = nullptr ; info . trueFileMapOffset = 0 ; {)",
    "insertText": "SCOPED_WRITE_LOCK(g_mappedFileTable.m_memLookupLock, lock3)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (auto insres = g_mappedFileTable . m_memLookup .)",
    "insertText": "try_emplace(destMem)"
  },
  {
    "label": "UnmapViewOfFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapViewOfFile(preload.objMem)"
  },
  {
    "label": "Wait()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Wait(const StringKey& key)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (auto findIt = m_preloadedObjFiles .)",
    "insertText": "find(key)"
  },
  {
    "label": "ts()",
    "kind": "Method",
    "detail": "Function (TimerScope)",
    "insertText": "ts(g_stats.waitDecompress)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (findIt -> second . event .)",
    "insertText": "IsSet()"
  }
]