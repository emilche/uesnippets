[
  {
    "label": "Clock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Clock"
  },
  {
    "label": "PacketReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PacketReceiver"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "NetworkPacket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkPacket"
  },
  {
    "label": "FakeNetworkPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeNetworkPipe"
  },
  {
    "label": "StoredPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "StoredPacket"
  },
  {
    "label": "NetworkPacket()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_FAKE_NETWORK_PIPE_H_ # define CALL_FAKE_NETWORK_PIPE_H_ # include<deque> # include<map> # include<memory> # include<queue> # include<set> # include<string> # include<vector> # include \" api / call / transport . h \" # include \" api / test / simulated_network . h \" # include \" call / call . h \" # include \" call / simulated_packet_receiver . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" namespace webrtc { class Clock ; class PacketReceiver ; enum class MediaType ; class NetworkPacket { public :)",
    "insertText": "NetworkPacket(rtc::CopyOnWriteBuffer packet, int64_t send_time, int64_t arrival_time, absl::optional<PacketOptions> packet_options, bool is_rtcp, MediaType media_type, absl::optional<int64_t> packet_time_us, Transport* transport)"
  },
  {
    "label": "NetworkPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkPacket(const NetworkPacket&)"
  },
  {
    "label": "NetworkPacket()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NetworkPacket()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NetworkPacket&)",
    "insertText": "operator(const NetworkPacket&)"
  },
  {
    "label": "NetworkPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NetworkPacket(NetworkPacket&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NetworkPacket&)",
    "insertText": "operator(NetworkPacket&&)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "data()"
  },
  {
    "label": "data_length()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "data_length()"
  },
  {
    "label": "raw_packet()",
    "kind": "Method",
    "detail": "Function (} rtc::CopyOnWriteBuffer*)",
    "insertText": "raw_packet()"
  },
  {
    "label": "packet_options()",
    "kind": "Method",
    "detail": "Function (arrival_time_ + = extra_delay ; } PacketOptions)",
    "insertText": "packet_options()"
  },
  {
    "label": "is_rtcp()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "is_rtcp()"
  },
  {
    "label": "FakeNetworkPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeNetworkPipe(Clock* clock, std::unique_ptr<NetworkBehaviorInterface> network_behavior, PacketReceiver* receiver)"
  },
  {
    "label": "FakeNetworkPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeNetworkPipe(Clock* clock, std::unique_ptr<NetworkBehaviorInterface> network_behavior, PacketReceiver* receiver, uint64_t seed)"
  },
  {
    "label": "FakeNetworkPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeNetworkPipe(Clock* clock, std::unique_ptr<NetworkBehaviorInterface> network_behavior, Transport* transport)"
  },
  {
    "label": "FakeNetworkPipe()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeNetworkPipe()"
  },
  {
    "label": "FakeNetworkPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeNetworkPipe(const FakeNetworkPipe&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FakeNetworkPipe&)",
    "insertText": "operator(const FakeNetworkPipe&)"
  },
  {
    "label": "SetClockOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetClockOffset(int64_t offset_ms)"
  },
  {
    "label": "SetReceiver()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetReceiver(PacketReceiver* receiver)"
  },
  {
    "label": "AddActiveTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddActiveTransport(Transport* transport)"
  },
  {
    "label": "RemoveActiveTransport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActiveTransport(Transport* transport)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* packet, size_t length, const PacketOptions& options)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* packet, size_t length)"
  },
  {
    "label": "SendRtp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtp(const uint8_t* packet, size_t length, const PacketOptions& options, Transport* transport)"
  },
  {
    "label": "SendRtcp()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendRtcp(const uint8_t* packet, size_t length, Transport* transport)"
  },
  {
    "label": "DeliverPacket()",
    "kind": "Method",
    "detail": "Function (PacketReceiver::DeliveryStatus)",
    "insertText": "DeliverPacket(MediaType media_type, rtc::CopyOnWriteBuffer packet, int64_t packet_time_us)"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (using PacketReceiver::DeliverPacket ; void)",
    "insertText": "Process()"
  },
  {
    "label": "TimeUntilNextProcess()",
    "kind": "Method",
    "detail": "Function (absl::optional<int64_t>)",
    "insertText": "TimeUntilNextProcess()"
  },
  {
    "label": "PercentageLoss()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PercentageLoss()"
  },
  {
    "label": "AverageDelay()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "AverageDelay()"
  },
  {
    "label": "DroppedPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "DroppedPackets()"
  },
  {
    "label": "SentPackets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SentPackets()"
  },
  {
    "label": "ResetStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStats()"
  },
  {
    "label": "DeliverPacketWithLock()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "DeliverPacketWithLock(NetworkPacket* packet)"
  },
  {
    "label": "GetTimeInMicroseconds()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetTimeInMicroseconds()"
  },
  {
    "label": "ShouldProcess()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldProcess(int64_t time_now_us)"
  },
  {
    "label": "SetTimeToNextProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTimeToNextProcess(int64_t skip_us)"
  },
  {
    "label": "StoredPacket()",
    "kind": "Method",
    "detail": "Function (private : struct StoredPacket { NetworkPacket packet ; bool removed = false ;)",
    "insertText": "StoredPacket(NetworkPacket&& packet)"
  },
  {
    "label": "StoredPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoredPacket(StoredPacket&&)"
  },
  {
    "label": "StoredPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoredPacket(const StoredPacket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StoredPacket&)",
    "insertText": "operator(const StoredPacket&)"
  },
  {
    "label": "StoredPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoredPacket()"
  },
  {
    "label": "EnqueuePacket()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "EnqueuePacket(rtc::CopyOnWriteBuffer packet, absl::optional<PacketOptions> options, bool is_rtcp, MediaType media_type, absl::optional<int64_t> packet_time_us)"
  },
  {
    "label": "EnqueuePacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueuePacket(rtc::CopyOnWriteBuffer packet, absl::optional<PacketOptions> options, bool is_rtcp, Transport* transport)"
  },
  {
    "label": "EnqueuePacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueuePacket(NetworkPacket&& net_packet) RTC_EXCLUSIVE_LOCKS_REQUIRED(process_lock_)"
  },
  {
    "label": "DeliverNetworkPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverNetworkPacket(NetworkPacket* packet) RTC_EXCLUSIVE_LOCKS_REQUIRED(config_lock_)"
  },
  {
    "label": "HasReceiver()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasReceiver()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Clock* const clock_ ; Mutex config_lock_ ; const std::unique_ptr<NetworkBehaviorInterface> network_behavior_ ; PacketReceiver* receiver_)",
    "insertText": "RTC_GUARDED_BY(config_lock_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Transport* const global_transport_ ; Mutex process_lock_ ; std::deque<StoredPacket> packets_in_flight_)",
    "insertText": "RTC_GUARDED_BY(process_lock_)"
  }
]