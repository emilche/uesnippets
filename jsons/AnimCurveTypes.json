[
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "FBoneContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBoneContainer"
  },
  {
    "label": "FCurveUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveUtils"
  },
  {
    "label": "FCurveFilter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveFilter"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EAnimAssetCurveFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EAnimAssetCurveFlags"
  },
  {
    "label": "FAnimCurveParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimCurveParam"
  },
  {
    "label": "FAnimCurveBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimCurveBase"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FFloatCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFloatCurve"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FVectorCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVectorCurve"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FTransformCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTransformCurve"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "FCachedFloatCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedFloatCurve"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FCurveElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveElement"
  },
  {
    "label": "FCurveElementIndexed",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurveElementIndexed"
  },
  {
    "label": "FBaseBlendedCurve_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBaseBlendedCurve_DEPRECATED"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is"
  },
  {
    "label": "TBaseBlendedCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBaseBlendedCurve"
  },
  {
    "label": "TBaseBlendedCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBaseBlendedCurve"
  },
  {
    "label": "UE",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "FBlendedCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedCurve"
  },
  {
    "label": "FBlendedHeapCurve",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlendedHeapCurve"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FRawCurveTracks",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawCurveTracks"
  },
  {
    "label": "PostSerializeFixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerializeFixup(FArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "SetCurveTypeFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveTypeFlag(EAnimAssetCurveFlags InFlag, bool bValue)"
  },
  {
    "label": "ToggleCurveTypeFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleCurveTypeFlag(EAnimAssetCurveFlags InFlag)"
  },
  {
    "label": "SetCurveTypeFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurveTypeFlags(int32 NewCurveTypeFlags)"
  },
  {
    "label": "MakeColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "MakeColor(const FName& CurveName)"
  },
  {
    "label": "CopyCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurve(const FFloatCurve& SourceCurve)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOrAddKey(float NewKey, float CurrentTime)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(float NewLength, bool bInsert/* whether insert or remove*/, float OldStartTime, float OldEndTime)"
  },
  {
    "label": "CopyCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurve(const FVectorCurve& SourceCurve)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOrAddKey(const FVector& NewKey, float CurrentTime)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(float NewLength, bool bInsert/* whether insert or remove*/, float OldStartTime, float OldEndTime)"
  },
  {
    "label": "CopyCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyCurve(const FTransformCurve& SourceCurve)"
  },
  {
    "label": "UpdateOrAddKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOrAddKey(const FTransform& NewKey, float CurrentTime)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(float NewLength, bool bInsert/* whether insert or remove*/, float OldStartTime, float OldEndTime)"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (atoms)",
    "insertText": "Override(A)"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (atoms)",
    "insertText": "Override(B)"
  },
  {
    "label": "Override()",
    "kind": "Method",
    "detail": "Function (atoms)",
    "insertText": "Override(Other)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(const FBoneContainer& InBoneContainer)"
  },
  {
    "label": "InitFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitFrom(const FBoneContainer& InBoneContainer)"
  },
  {
    "label": "AddFloatCurveKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddFloatCurveKey(const FName& NewCurve, int32 CurveFlags, float Time, float Value)"
  },
  {
    "label": "AddCurveData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCurveData(const FName& NewCurve, int32 CurveFlags = AACF_DefaultCurve, ERawCurveTrackTypes SupportedCurveType = ERawCurveTrackTypes::RCT_Float)"
  },
  {
    "label": "AddCurveData()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AddCurveData(NewCurve.DisplayName, CurveFlags, SupportedCurveType)"
  },
  {
    "label": "DeleteCurveData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteCurveData(const FName& CurveToDelete, ERawCurveTrackTypes SupportedCurveType = ERawCurveTrackTypes::RCT_Float)"
  },
  {
    "label": "DeleteCurveData()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DeleteCurveData(CurveToDelete.DisplayName, SupportedCurveType)"
  },
  {
    "label": "DeleteAllCurveData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteAllCurveData(ERawCurveTrackTypes SupportedCurveType = ERawCurveTrackTypes::RCT_Float)"
  },
  {
    "label": "DuplicateCurveData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DuplicateCurveData(const FName& CurveToCopy, const FName& NewCurve, ERawCurveTrackTypes SupportedCurveType = ERawCurveTrackTypes::RCT_Float)"
  },
  {
    "label": "DuplicateCurveData()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "DuplicateCurveData(CurveToCopy.DisplayName, NewCurve.DisplayName, SupportedCurveType)"
  },
  {
    "label": "PostSerializeFixup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerializeFixup(FArchive& Ar)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(float TotalLength, bool bInsert/* whether insert or remove*/, float OldStartTime, float OldEndTime)"
  },
  {
    "label": "AddCurveDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddCurveDataImpl(TArray<DataType>& Curves, const FName& NewCurve, int32 CurveFlags)"
  },
  {
    "label": "DeleteCurveDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteCurveDataImpl(TArray<DataType>& Curves, const FName& CurveToDelete)"
  },
  {
    "label": "DuplicateCurveDataImpl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DuplicateCurveDataImpl(TArray<DataType>& Curves, const FName& CurveToCopy, const FName& NewCurve)"
  }
]