[
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" template<T>)",
    "insertText": "decltype(auto) AnalyticsConversionToString(const T& Value)"
  },
  {
    "label": "AnalyticsConversionToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "AnalyticsConversionToString(FString&& Value)"
  },
  {
    "label": "AnalyticsConversionToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "AnalyticsConversionToString(const FString& Value)"
  },
  {
    "label": "LexToSanitizedString()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "LexToSanitizedString(Value)"
  },
  {
    "label": "AnalyticsConversionToString()",
    "kind": "Method",
    "detail": "Function (} } else { return \" null \" ; } } FString)",
    "insertText": "AnalyticsConversionToString(double Value)"
  },
  {
    "label": "AnalyticsConversionToString()",
    "kind": "Method",
    "detail": "Function (} } else { return \" null \" ; } } template<T,AllocatorType> FString)",
    "insertText": "AnalyticsConversionToString(const TArray<T, AllocatorType>& ValueArray)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString Result ;)",
    "insertText": "for(const T& Value : ValueArray)"
  },
  {
    "label": "AnalyticsConversionToString()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "AnalyticsConversionToString(Value)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "TEXT(\",\")"
  },
  {
    "label": "LeftChopInline()",
    "kind": "Method",
    "detail": "Function (} Result .)",
    "insertText": "LeftChopInline(1, EAllowShrinking::No)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FString Result ;)",
    "insertText": "for(auto& KVP : ValueMap)"
  },
  {
    "label": "AnalyticsConversionToString()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "AnalyticsConversionToString(KVP.Key)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "TEXT(\":\")"
  },
  {
    "label": "AnalyticsConversionToString()",
    "kind": "Method",
    "detail": "Function (Result + =)",
    "insertText": "AnalyticsConversionToString(KVP.Value)"
  }
]