[
  {
    "label": "FReferenceBoneFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReferenceBoneFrame"
  },
  {
    "label": "FAnimNode_TwistCorrectiveNode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_TwistCorrectiveNode"
  },
  {
    "label": "TStructOpsTypeTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TStructOpsTypeTraits"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" BoneContainer . h \" # include \" Animation / AnimCurveTypes . h \" # include \" CommonAnimTypes . h \" # include \" BonePose . h \" # include \" BoneControllers / AnimNode_SkeletalControlBase . h \" # include \" AnimNode_TwistCorrectiveNode . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category = \"FReferenceBoneFrame\")"
  },
  {
    "label": "FReferenceBoneFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FReferenceBoneFrame()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY(EditAnywhere, Category=\"Reference Frame\")"
  },
  {
    "label": "FAnimNode_TwistCorrectiveNode()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FAnimNode_TwistCorrectiveNode()"
  },
  {
    "label": "GatherDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherDebugData(FNodeDebugData& DebugData)"
  },
  {
    "label": "CacheBones_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheBones_AnyThread(const FAnimationCacheBonesContext& Context)"
  },
  {
    "label": "Initialize_AnyThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize_AnyThread(const FAnimationInitializeContext& Context)"
  },
  {
    "label": "EvaluateComponentSpaceInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateComponentSpaceInternal(FComponentSpacePoseContext& Context)"
  },
  {
    "label": "IsValidToEvaluate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidToEvaluate(const USkeleton* Skeleton, const FBoneContainer& RequiredBones)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "PostSerialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostSerialize(const FArchive& Ar)"
  },
  {
    "label": "InitializeBoneReferences()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitializeBoneReferences(const FBoneContainer& RequiredBones)"
  },
  {
    "label": "GetReferenceAxis()",
    "kind": "Method",
    "detail": "Function (private : float ReferenceAngle ; float RangeMaxInRadian ; FVector)",
    "insertText": "GetReferenceAxis(FCSPose<FCompactPose>& MeshBases, const FReferenceBoneFrame& Reference)"
  },
  {
    "label": "GetAngle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAngle(const FVector& Base, const FVector& Twist, const FTransform& ReferencetBoneTransform)"
  }
]