[
  {
    "label": "IBuildInstaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBuildInstaller"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FBuildInstallStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInstallStats"
  },
  {
    "label": "FBuildInstallerConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBuildInstallerConfiguration"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" BuildPatchState . h \" # include \" BuildPatchMessage . h \" class IBuildInstaller ; typedef TSharedPtr<IBuildInstaller,ESPMode::ThreadSafe> IBuildInstallerPtr ; typedef TSharedRef<IBuildInstaller,ESPMode::ThreadSafe> IBuildInstallerRef ; typedef TWeakPtr<IBuildInstaller,ESPMode::ThreadSafe> IBuildInstallerWeakPtr ; enum class EBuildPatchInstallError { NoError = 0,DownloadError = 1,FileConstructionFail = 2,MoveFileToInstall = 3,BuildVerifyFail = 4,ApplicationClosing = 5,ApplicationError = 6,UserCanceled = 7,PrerequisiteError = 8,InitializationError = 9,PathLengthExceeded = 1 0,OutOfDiskSpace = 1 1,NumInstallErrors } ; namespace InstallErrorPrefixes { const TCHAR* ErrorTypeStrings [ ] = {)",
    "insertText": "TEXT(\"OK\"), TEXT(\"DL\"), TEXT(\"FC\"), TEXT(\"MF\"), TEXT(\"BV\"), TEXT(\"SD\"), TEXT(\"FA\"), TEXT(\"UC\"), TEXT(\"PQ\"), TEXT(\"IZ\"), TEXT(\"PL\"), TEXT(\"DS\")"
  },
  {
    "label": "FBuildInstallStats()",
    "kind": "Method",
    "detail": "Function (} ; enum class EBuildPatchDownloadHealth { Disconnected = 0,Poor,OK,Good,Excellent,NUM_Values } ; struct FBuildInstallStats {)",
    "insertText": "FBuildInstallStats() : NumFilesInBuild(0) , NumFilesOutdated(0) , NumFilesToRemove(0) , NumChunksRequired(0) , ChunksQueuedForDownload(0) , ChunksLocallyAvailable(0) , ChunksInChunkDbs(0) , NumChunksDownloaded(0) , NumChunksRecycled(0) , NumChunksReadFromChunkDbs(0) , NumFailedDownloads(0) , NumBadDownloads(0) , NumAbortedDownloads(0) , NumRecycleFailures(0) , NumChunksStoreBooted(0) , NumDriveStoreChunkLoads(0) , NumDriveStoreLoadFailures(0) , NumChunkDbChunksFailed(0) , TotalDownloadedData(0) , ActiveRequestCountPeak(0) , AverageDownloadSpeed(0.0) , PeakDownloadSpeed(0.0) , FinalDownloadSpeed(-1.0) , TheoreticalDownloadTime(0.0f) , TotalReadData(0) , AverageDiskReadSpeed(0.0) , PeakDiskReadSpeed(0.0) , TotalWrittenData(0) , AverageDiskWriteSpeed(0.0) , PeakDiskWriteSpeed(0.0) , NumFilesConstructed(0) , InitializeTime(0.0f) , ConstructTime(0.0f) , MoveFromStageTime(0.0f) , FileAttributesTime(0.0f) , VerifyTime(0.0f) , CleanUpTime(0.0f) , PrereqTime(0.0f) , ProcessPausedTime(0.0f) , ProcessActiveTime(0.0f) , ProcessExecuteTime(0.0f) , ProcessSuccess(false) , NumInstallRetries(0) , FailureType(EBuildPatchInstallError::InitializationError) , RetryFailureTypes() , ErrorCode() , RetryErrorCodes() , FailureReasonText() , FinalProgress(0.0f) , OverallRequestSuccessRate(0.0f) , ExcellentDownloadHealthTime(0.0f) , GoodDownloadHealthTime(0.0f) , OkDownloadHealthTime(0.0f) , PoorDownloadHealthTime(0.0f) , DisconnectedDownloadHealthTime(0.0f) , AverageMemoryStoreUse(0.0f) , PeakMemoryStoreUse(0) , AverageMemoryStoreRetained(0.0f) , PeakMemoryStoreRetained(0) , MemoryStoreSize(0) , ProcessRequiredDiskSpace(0) , ProcessAvailableDiskSpace(0)"
  },
  {
    "label": "IBuildInstaller()",
    "kind": "Method",
    "detail": "Function (} uint32 NumFilesInBuild ; uint32 NumFilesOutdated ; uint32 NumFilesToRemove ; uint32 NumChunksRequired ; uint32 ChunksQueuedForDownload ; uint32 ChunksLocallyAvailable ; uint32 ChunksInChunkDbs ; uint32 NumChunksDownloaded ; uint32 NumChunksRecycled ; uint32 NumChunksReadFromChunkDbs ; uint32 NumFailedDownloads ; uint32 NumBadDownloads ; uint32 NumAbortedDownloads ; uint32 NumRecycleFailures ; uint32 NumChunksStoreBooted ; uint32 NumDriveStoreChunkLoads ; uint32 NumDriveStoreLoadFailures ; uint32 NumChunkDbChunksFailed ; uint64 TotalDownloadedData ; uint32 ActiveRequestCountPeak ; double AverageDownloadSpeed ; double PeakDownloadSpeed ; double FinalDownloadSpeed ; float TheoreticalDownloadTime ; uint64 TotalReadData ; double AverageDiskReadSpeed ; double PeakDiskReadSpeed ; uint64 TotalWrittenData ; double AverageDiskWriteSpeed ; double PeakDiskWriteSpeed ; uint32 NumFilesConstructed ; uint64 MaxDiskSpaceNeededWhenDeletingChunkDbsIfRequested = 0 ; float InitializeTime ; float ConstructTime ; float MoveFromStageTime ; float FileAttributesTime ; float VerifyTime ; float CleanUpTime ; float PrereqTime ; float ProcessPausedTime ; float ProcessActiveTime ; float ProcessExecuteTime ; bool ProcessSuccess ; uint32 NumInstallRetries ; EBuildPatchInstallError FailureType ; TArray<EBuildPatchInstallError> RetryFailureTypes ; FString ErrorCode ; TArray<FString> RetryErrorCodes ; FText FailureReasonText ; float FinalProgress ; float OverallRequestSuccessRate ; float ExcellentDownloadHealthTime ; float GoodDownloadHealthTime ; float OkDownloadHealthTime ; float PoorDownloadHealthTime ; float DisconnectedDownloadHealthTime ; float AverageMemoryStoreUse ; uint32 PeakMemoryStoreUse ; float AverageMemoryStoreRetained ; uint32 PeakMemoryStoreRetained ; uint32 MemoryStoreSize ; uint64 ProcessRequiredDiskSpace ; uint64 ProcessAvailableDiskSpace ; } ; namespace BuildPatchServices { struct FBuildInstallerConfiguration ; } class IBuildInstaller { public : ~)",
    "insertText": "IBuildInstaller()"
  },
  {
    "label": "StartInstallation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "StartInstallation()"
  },
  {
    "label": "IsComplete()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsComplete()"
  },
  {
    "label": "IsCanceled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCanceled()"
  },
  {
    "label": "IsPaused()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPaused()"
  },
  {
    "label": "IsResumable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResumable()"
  },
  {
    "label": "IsUpdate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUpdate()"
  },
  {
    "label": "CompletedSuccessfully()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CompletedSuccessfully()"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasError()"
  },
  {
    "label": "GetErrorType()",
    "kind": "Method",
    "detail": "Function (EBuildPatchInstallError)",
    "insertText": "GetErrorType()"
  },
  {
    "label": "GetDownloadSpeed()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "GetDownloadSpeed()"
  },
  {
    "label": "GetTotalDownloadRequired()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "GetTotalDownloadRequired()"
  },
  {
    "label": "GetTotalDownloaded()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetTotalDownloaded()"
  },
  {
    "label": "GetState()",
    "kind": "Method",
    "detail": "Function (BuildPatchServices::EBuildPatchState)",
    "insertText": "GetState()"
  },
  {
    "label": "GetUpdateProgress()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetUpdateProgress()"
  },
  {
    "label": "GetBuildStatistics()",
    "kind": "Method",
    "detail": "Function (FBuildInstallStats)",
    "insertText": "GetBuildStatistics()"
  },
  {
    "label": "GetDownloadHealth()",
    "kind": "Method",
    "detail": "Function (EBuildPatchDownloadHealth)",
    "insertText": "GetDownloadHealth()"
  },
  {
    "label": "GetErrorText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetErrorText()"
  },
  {
    "label": "GetErrorCode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetErrorCode()"
  },
  {
    "label": "CancelInstall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelInstall()"
  },
  {
    "label": "TogglePauseInstall()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "TogglePauseInstall()"
  },
  {
    "label": "RegisterMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMessageHandler(BuildPatchServices::FMessageHandler* MessageHandler)"
  },
  {
    "label": "UnregisterMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterMessageHandler(BuildPatchServices::FMessageHandler* MessageHandler)"
  },
  {
    "label": "GetConfiguration()",
    "kind": "Method",
    "detail": "Function (const BuildPatchServices::FBuildInstallerConfiguration&)",
    "insertText": "GetConfiguration()"
  },
  {
    "label": "GetDebugText()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "GetDebugText(TArray<FString>& Output)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} # endif } ;)",
    "insertText": "static_assert((uint32)EBuildPatchInstallError::NumInstallErrors == 12, \"Please add support for the extra values to the Lex functions below.\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EBuildPatchInstallError Error)"
  },
  {
    "label": "CASE_ENUM_TO_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CASE_ENUM_TO_STR(Value) case EBuildPatchInstallError::Value: return TEXT(#Value) switch (Error)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"InvalidOrMax\")"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} # undef CASE_ENUM_TO_STR } void)",
    "insertText": "LexFromString(EBuildPatchInstallError& Error, const TCHAR* Buffer)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "RETURN_IF_EQUAL(Value) if (FCString::Stricmp(Buffer, TEXT(#Value)) == 0)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Error = EBuildPatchInstallError::Value ; return ; } const TCHAR* const Prefix =)",
    "insertText": "TEXT(\"EBuildPatchInstallError::\")"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (const SIZE_T PrefixLen =)",
    "insertText": "Strlen(Prefix)"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (Buffer + = PrefixLen ; })",
    "insertText": "RETURN_IF_EQUAL(NoError)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (Error = EBuildPatchInstallError::NumInstallErrors ; return ; # undef RETURN_IF_EQUAL })",
    "insertText": "static_assert((uint32)EBuildPatchDownloadHealth::NUM_Values == 5, \"Please add support for the extra values to the Lex functions below.\")"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "LexToString(EBuildPatchDownloadHealth Error)"
  },
  {
    "label": "CASE_ENUM_TO_STR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "CASE_ENUM_TO_STR(Value) case EBuildPatchDownloadHealth::Value: return TEXT(#Value) switch (Error)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (} # undef CASE_ENUM_TO_STR } void)",
    "insertText": "LexFromString(EBuildPatchDownloadHealth& Error, const TCHAR* Buffer)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Error = EBuildPatchDownloadHealth::Value ; return ; } const TCHAR* const Prefix =)",
    "insertText": "TEXT(\"EBuildPatchDownloadHealth::\")"
  },
  {
    "label": "RETURN_IF_EQUAL()",
    "kind": "Method",
    "detail": "Function (Buffer + = PrefixLen ; })",
    "insertText": "RETURN_IF_EQUAL(Disconnected)"
  }
]