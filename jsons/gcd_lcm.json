[
  {
    "label": "__ct_abs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__ct_abs"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Up",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Up"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___NUMERIC_GCD_LCM_H # define _LIBCPP___NUMERIC_GCD_LCM_H # include<__assert> # include<__config> # include<limits> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<_Result,_Source> struct __ct_abs<_Result,_Source,true> { _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY _Result)",
    "insertText": "operator()(_Source __t)"
  },
  {
    "label": "gcd()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY common_type_t<_Tp,_Up>)",
    "insertText": "gcd(_Tp __m, _Up __n)"
  },
  {
    "label": "_Rp()",
    "kind": "Method",
    "detail": "Function (using _Rp = common_type_t<_Tp,_Up> ; using _Wp = make_unsigned_t<_Rp> ; return static_cast<)",
    "insertText": "_Rp(_VSTD::__gcd( static_cast<_Wp>(__ct_abs<_Rp, _Tp>()(__m)), static_cast<_Wp>(__ct_abs<_Rp, _Up>()(__n))))"
  },
  {
    "label": "lcm()",
    "kind": "Method",
    "detail": "Function (} template<class _Tp,class _Up> _LIBCPP_CONSTEXPR _LIBCPP_INLINE_VISIBILITY common_type_t<_Tp,_Up>)",
    "insertText": "lcm(_Tp __m, _Up __n)"
  },
  {
    "label": "_Tp()",
    "kind": "Method",
    "detail": "Function (using _Rp = common_type_t<_Tp,_Up> ; _Rp __val1 = __ct_abs<_Rp,)",
    "insertText": "_Tp()(__m) / _VSTD::gcd(__m, __n)"
  },
  {
    "label": "_Up()",
    "kind": "Method",
    "detail": "Function (_Rp __val2 = __ct_abs<_Rp,)",
    "insertText": "_Up()(__n)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT((numeric_limits<_Rp>::max() / __val1 > __val2), \"Overflow in lcm\")"
  }
]