[
  {
    "label": "VarArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VarArray"
  },
  {
    "label": "SpecData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpecData"
  },
  {
    "label": "SpecElem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpecElem"
  },
  {
    "label": "StrBufDict",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrBufDict"
  },
  {
    "label": "SpecType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SpecType"
  },
  {
    "label": "SpecOpt",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SpecOpt"
  },
  {
    "label": "SpecFmt",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SpecFmt"
  },
  {
    "label": "SpecOpen",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SpecOpen"
  },
  {
    "label": "Spec",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Spec"
  },
  {
    "label": "SpecWords",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpecWords"
  },
  {
    "label": "SpecDataTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpecDataTable"
  },
  {
    "label": "Spec()",
    "kind": "Method",
    "detail": "Function (# ifndef _spec_h_ # define _spec_h_ class VarArray ; class SpecData ; class SpecElem ; class StrBufDict ; const int SpecWordsMax = 1 0 ; enum SpecType { SDT_WORD,SDT_WLIST,SDT_SELECT,SDT_LINE,SDT_LLIST,SDT_DATE,SDT_TEXT,SDT_BULK } ; enum SpecOpt { SDO_OPTIONAL,SDO_DEFAULT,SDO_REQUIRED,SDO_ONCE,SDO_ALWAYS,SDO_KEY,SDO_EMPTY,} ; enum SpecFmt { SDF_NORMAL,SDF_LEFT,SDF_RIGHT,SDF_INDENT,SDF_COMMENT } ; enum SpecOpen { SDO_NOTOPEN,SDO_ISOLATE,SDO_PROPAGATE } ; class Spec { public :)",
    "insertText": "Spec()"
  },
  {
    "label": "Spec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Spec(const char *encoded, const char *cmt, Error *e)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (StrBuf*)",
    "insertText": "Format(SpecData *data)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (StrBuf* s = new StrBuf ;)",
    "insertText": "Format(data, s)"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Format(SpecData *data, StrDict *result)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(const char *buf, SpecData *data, Error *e, int valid)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(const char *buf, SpecData *data, Error *e)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(buf, data, e, 1)"
  },
  {
    "label": "ParseNoValid()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ParseNoValid(const char *buf, SpecData *data, Error *e)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Parse(buf, data, e, 0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} SpecElem*)",
    "insertText": "Add(const StrPtr &tag)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (SpecElem*)",
    "insertText": "Add(const SpecElem *se, int atIndex, Error *e)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (SpecElem*)",
    "insertText": "Get(int i)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (SpecElem*)",
    "insertText": "Find(const StrPtr &tag, Error *e = 0)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (SpecElem*)",
    "insertText": "Find(int code, Error *e=0, const StrPtr *fixedTag=0)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Count()"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Decode(StrPtr *encoded, Error *e)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode(StrBuf *encoded)"
  },
  {
    "label": "ExtractFieldMapToDict()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractFieldMapToDict(StrDict *map, Error *e, int skipAuto=0)"
  },
  {
    "label": "EncodeFieldMapToString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeFieldMapToString(StrBuf *s, Error *e)"
  },
  {
    "label": "GetComment()",
    "kind": "Method",
    "detail": "Function (const StrPtr*)",
    "insertText": "GetComment()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (comment = c ; } SpecElem*)",
    "insertText": "Add(char *t)"
  },
  {
    "label": "Dump()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Dump(const char *msg)"
  },
  {
    "label": "IsDate()",
    "kind": "Method",
    "detail": "Function (private : StrRef comment ; VarArray* elems ; StrBuf decoderBuffer ; } ; class SpecElem { public : int)",
    "insertText": "IsDate()"
  },
  {
    "label": "IsRequired()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "IsRequired()"
  },
  {
    "label": "HasPreset()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HasPreset()"
  },
  {
    "label": "SetPresets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPresets(const char *x)"
  },
  {
    "label": "GetPresets()",
    "kind": "Method",
    "detail": "Function (presets = x ; } StrPtr&)",
    "insertText": "GetPresets()"
  },
  {
    "label": "GetFmt()",
    "kind": "Method",
    "detail": "Function (} SpecFmt)",
    "insertText": "GetFmt()"
  },
  {
    "label": "FmtType()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "FmtType()"
  },
  {
    "label": "FmtFmt()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "FmtFmt()"
  },
  {
    "label": "FmtOpen()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "FmtOpen()"
  },
  {
    "label": "SetSeq()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSeq(int s)"
  },
  {
    "label": "SetOpt()",
    "kind": "Method",
    "detail": "Function (seq = s ; } void)",
    "insertText": "SetOpt(const char *optName, Error *e)"
  },
  {
    "label": "SetFmt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFmt(const char *fmtName, Error *e)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(const char *s, Error *e)"
  },
  {
    "label": "SetOpen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOpen(const char *openName, Error *e)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Compare(const SpecElem &other)"
  },
  {
    "label": "Decode()",
    "kind": "Method",
    "detail": "Function (public : SpecType type ; StrBuf tag ; StrBuf fixed ; StrBuf presets ; StrBuf values ; int code ; StrBuf subCode ; char nWords ; short maxLength ; SpecOpt opt ; SpecOpen open ; char maxWords ; private : class Spec ; void)",
    "insertText": "Decode(StrRef *s, Error *e)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Encode(StrBuf *s, int code)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (SpecFmt fmt ; int seq ; int index ; StrBuf preset ; } ; class SpecWords : public StrBuf { public : int)",
    "insertText": "Split()"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Join(int wc)"
  },
  {
    "label": "SpecData()",
    "kind": "Method",
    "detail": "Function (const char* wv [ SpecWordsMax + 1 ] ; } ; class SpecData { public : ~)",
    "insertText": "SpecData()"
  },
  {
    "label": "GetLine()",
    "kind": "Method",
    "detail": "Function (} StrPtr*)",
    "insertText": "GetLine(SpecElem *sd, int x, const char **cmt)"
  },
  {
    "label": "SetLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLine(SpecElem *sd, int x, const StrPtr *val, Error *e)"
  },
  {
    "label": "SetComment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetComment(SpecElem *sd, int x, const StrPtr *val, int nl, Error *e)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Get(SpecElem *sd, int x, const char **wv, const char **cmt)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(SpecElem *sd, int x, const char **wv, Error *e)"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Comment(SpecElem *sd, int x, const char **wv, int nl, Error *e)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Get(SpecElem *sd, int x, char **wv, char **cmt)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(SpecElem *sd, int x, char **wv, Error *e)"
  },
  {
    "label": "Comment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Comment(SpecElem *sd, int x, char **wv, int nl, Error *e)"
  },
  {
    "label": "SpecDataTable()",
    "kind": "Method",
    "detail": "Function (protected : SpecWords tVal ; } ; class SpecDataTable : public SpecData { public :)",
    "insertText": "SpecDataTable(StrDict *dict = 0)"
  },
  {
    "label": "SpecDataTable()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SpecDataTable()"
  },
  {
    "label": "Dict()",
    "kind": "Method",
    "detail": "Function (StrDict*)",
    "insertText": "Dict()"
  }
]