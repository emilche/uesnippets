[
  {
    "label": "DuplexPipe",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DuplexPipe"
  },
  {
    "label": "FileAttributeCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FileAttributeCache"
  },
  {
    "label": "DirectoryCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DirectoryCache"
  },
  {
    "label": "ModulePatch",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ModulePatch"
  },
  {
    "label": "LiveProcess",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveProcess"
  },
  {
    "label": "VirtualMemoryRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VirtualMemoryRange"
  },
  {
    "label": "LiveModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LiveModule"
  },
  {
    "label": "PerProcessData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerProcessData"
  },
  {
    "label": "ErrorType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ErrorType"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "UpdateType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UpdateType"
  },
  {
    "label": "Enum",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Enum"
  },
  {
    "label": "CompileResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CompileResult"
  },
  {
    "label": "actions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "actions"
  },
  {
    "label": "_name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_name"
  },
  {
    "label": "Load()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Load(symbols::Provider* provider, symbols::DiaCompilandDB* diaCompilandDb)"
  },
  {
    "label": "Unload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unload(void)"
  },
  {
    "label": "RegisterProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterProcess(LiveProcess* liveProcess, void* moduleBase, const std::wstring& modulePath)"
  },
  {
    "label": "UnregisterProcess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterProcess(LiveProcess* liveProcess)"
  },
  {
    "label": "DisableControlFlowGuard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableControlFlowGuard(LiveProcess* liveProcess, void* moduleBase)"
  },
  {
    "label": "UpdateDirectoryCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDirectoryCache(DirectoryCache* cache)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (ErrorType::Enum)",
    "insertText": "Update(FileAttributeCache* fileCache, DirectoryCache* directoryCache, UpdateType::Enum updateType, const types::vector<symbols::ModifiedObjFile>& modifiedOrNewObjFiles, const types::vector<std::wstring>& additionalLibraries)"
  },
  {
    "label": "InstallCompiledPatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InstallCompiledPatches(LiveProcess* liveProcess, void* originalModuleBase)"
  },
  {
    "label": "UpdateDirectoryCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDirectoryCache(const ImmutableString& path, symbols::Dependency* dependency, DirectoryCache* cache)"
  },
  {
    "label": "OnCompiledFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCompiledFile(const symbols::ObjPath& objPath, symbols::Compiland* compiland, const CompileResult& compileResult, double compileTime, bool forceAmalgamationPartsLinkage)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Execute(const CommandType* command, const DuplexPipe* pipe, void* context, const void* payload, size_t payloadSize)"
  }
]