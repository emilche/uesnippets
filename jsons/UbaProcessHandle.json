[
  {
    "label": "Process",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Process"
  },
  {
    "label": "ProcessLogLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessLogLine"
  },
  {
    "label": "ProcessStartInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessStartInfo"
  },
  {
    "label": "ProcessExecutionType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ProcessExecutionType"
  },
  {
    "label": "ProcessHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessHandle"
  },
  {
    "label": "ProcessImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessImpl"
  },
  {
    "label": "Scheduler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Scheduler"
  },
  {
    "label": "Session",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Session"
  },
  {
    "label": "SessionClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SessionClient"
  },
  {
    "label": "SessionServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SessionServer"
  },
  {
    "label": "GetStartInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaLogWriter . h \" # include \" UbaMemory . h \" namespace uba { class Process ; struct ProcessLogLine ; struct ProcessStartInfo ; u32 ProcessCancelExitCode = 9 9 9 9 9 ; struct ProcessLogLine { TString text ; LogEntryType type = LogEntryType_Info ; } ; enum ProcessExecutionType : u8 { ProcessExecutionType_Native,ProcessExecutionType_Detoured,ProcessExecutionType_FromCache,} ; class ProcessHandle { public : const ProcessStartInfo&)",
    "insertText": "GetStartInfo()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetId()"
  },
  {
    "label": "GetExitCode()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetExitCode()"
  },
  {
    "label": "HasExited()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasExited()"
  },
  {
    "label": "WaitForExit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "WaitForExit(u32 millisecondsTimeout)"
  },
  {
    "label": "GetLogLines()",
    "kind": "Method",
    "detail": "Function (const Vector<ProcessLogLine>&)",
    "insertText": "GetLogLines()"
  },
  {
    "label": "GetTrackedInputs()",
    "kind": "Method",
    "detail": "Function (const Vector<u8>&)",
    "insertText": "GetTrackedInputs()"
  },
  {
    "label": "GetTrackedOutputs()",
    "kind": "Method",
    "detail": "Function (const Vector<u8>&)",
    "insertText": "GetTrackedOutputs()"
  },
  {
    "label": "GetTotalProcessorTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetTotalProcessorTime()"
  },
  {
    "label": "GetTotalWallTime()",
    "kind": "Method",
    "detail": "Function (u64)",
    "insertText": "GetTotalWallTime()"
  },
  {
    "label": "Cancel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cancel(bool terminate)"
  },
  {
    "label": "GetExecutingHost()",
    "kind": "Method",
    "detail": "Function (const tchar*)",
    "insertText": "GetExecutingHost()"
  },
  {
    "label": "IsRemote()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRemote()"
  },
  {
    "label": "GetExecutionType()",
    "kind": "Method",
    "detail": "Function (ProcessExecutionType)",
    "insertText": "GetExecutionType()"
  },
  {
    "label": "ProcessHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHandle()"
  },
  {
    "label": "ProcessHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHandle(const ProcessHandle& o)"
  },
  {
    "label": "ProcessHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessHandle(ProcessHandle&& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProcessHandle&)",
    "insertText": "operator(const ProcessHandle& o)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProcessHandle&)",
    "insertText": "operator(ProcessHandle&& o)"
  },
  {
    "label": "ProcessHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ProcessHandle(Process* process)"
  }
]