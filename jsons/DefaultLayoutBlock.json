[
  {
    "label": "FDefaultLayoutBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultLayoutBlock"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Framework / Text / IRun . h \" # include \" Framework / Text / ILayoutBlock . h \" class FDefaultLayoutBlock : public ILayoutBlock { public : TSharedRef<FDefaultLayoutBlock>)",
    "insertText": "Create(const TSharedRef< IRun >& InRun, const FTextRange& InRange, FVector2D InSize, const FLayoutBlockTextContext& InTextContext, const TSharedPtr< IRunRenderer >& InRenderer)"
  },
  {
    "label": "FDefaultLayoutBlock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDefaultLayoutBlock()"
  },
  {
    "label": "GetRun()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<IRun>)",
    "insertText": "GetRun()"
  },
  {
    "label": "GetLocationOffset()",
    "kind": "Method",
    "detail": "Function (LocationOffset = InLocationOffset ; } FVector2D)",
    "insertText": "GetLocationOffset()"
  },
  {
    "label": "FDefaultLayoutBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDefaultLayoutBlock(const TSharedRef< IRun >& InRun, const FTextRange& InRange, FVector2D InSize, const FLayoutBlockTextContext& InTextContext, const TSharedPtr< IRunRenderer >& InRenderer ) : Run( InRun ) , Range( InRange ) , Size( InSize ) , LocationOffset( ForceInitToZero ) , TextContext( InTextContext ) , Renderer( InRenderer)"
  },
  {
    "label": "FDefaultLayoutBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDefaultLayoutBlock(const FDefaultLayoutBlock& Block ) : Run( Block.Run ) , Range( Block.Range ) , Size( Block.Size ) , LocationOffset( ForceInitToZero ) , TextContext( Block.TextContext ) , Renderer( Block.Renderer)"
  }
]