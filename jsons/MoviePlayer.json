[
  {
    "label": "EMoviePlaybackType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMoviePlaybackType"
  },
  {
    "label": "FMovieViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieViewport"
  },
  {
    "label": "FSlateShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResource"
  },
  {
    "label": "IMovieStreamer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMovieStreamer"
  },
  {
    "label": "ISlateViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateViewport"
  },
  {
    "label": "FLoadingScreenAttributes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoadingScreenAttributes"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "IGameMoviePlayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IGameMoviePlayer"
  },
  {
    "label": "FSlateRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRenderer"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Rendering / RenderingCommon . h \" # include \" Rendering / SlateRenderer . h \" # include \" Widgets / SWidget . h \" # include \" Slate / SlateTextures . h \" # include \" MoviePlayer . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (MT_Normal)",
    "insertText": "UMETA(DisplayName=\"Normal Playback\"), MT_Looped UMETA(DisplayName = \"Looped Playback\"), MT_LoadingLoop UMETA(DisplayName = \"Looped Last Playback\"), MT_MAX UMETA(Hidden)"
  },
  {
    "label": "FMovieViewport()",
    "kind": "Method",
    "detail": "Function (class FMovieViewport : public ISlateViewport,public TSharedFromThis<FMovieViewport> { public :)",
    "insertText": "FMovieViewport() : DefaultSize(ForceInitToZero)"
  },
  {
    "label": "FMovieViewport()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMovieViewport()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (} FIntPoint)",
    "insertText": "GetSize()"
  },
  {
    "label": "Pin()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateTexture2DRHIRef,ESPMode::ThreadSafe> SlateTextureSharedPtr = SlateTexture .)",
    "insertText": "Pin()"
  },
  {
    "label": "GetViewportRenderTargetTexture()",
    "kind": "Method",
    "detail": "Function (} class FSlateShaderResource*)",
    "insertText": "GetViewportRenderTargetTexture()"
  },
  {
    "label": "RequiresVsync()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RequiresVsync()"
  },
  {
    "label": "SetDefaultSize()",
    "kind": "Method",
    "detail": "Function (SlateTexture = InTexture ; } void)",
    "insertText": "SetDefaultSize(FIntPoint InSize)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (DefaultSize = InSize ; } private : TWeakPtr<FSlateTexture2DRHIRef,ESPMode::ThreadSafe> SlateTexture ; FIntPoint DefaultSize ; } ; class IMovieStreamer { public : bool)",
    "insertText": "Init(const TArray<FString>& MoviePaths, TEnumAsByte<EMoviePlaybackType> inPlaybackType)"
  },
  {
    "label": "PreviousViewportInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviousViewportInterface(const TSharedPtr<ISlateViewport>& PreviousViewportInterface)"
  },
  {
    "label": "ForceCompletion()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ForceCompletion()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetViewportInterface()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ISlateViewport>)",
    "insertText": "GetViewportInterface()"
  },
  {
    "label": "GetAspectRatio()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAspectRatio()"
  },
  {
    "label": "GetMovieName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetMovieName()"
  },
  {
    "label": "IsLastMovieInPlaylist()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLastMovieInPlaylist()"
  },
  {
    "label": "Cleanup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cleanup()"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "GetTexture()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(IMovieStreamer, FOnCurrentMovieClipFinished, const FString&) virtual FOnCurrentMovieClipFinished& OnCurrentMovieClipFinished()"
  },
  {
    "label": "BroadcastCurrentMovieClipFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastCurrentMovieClipFinished(const FString& MovieClipThatFinished)"
  },
  {
    "label": "OnCurrentMovieClipFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCurrentMovieClipFinished().Broadcast(MovieClipThatFinished)"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Suspend()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Resume()"
  },
  {
    "label": "TickPreEngine()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "TickPreEngine()"
  },
  {
    "label": "TickPostEngine()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "TickPostEngine()"
  },
  {
    "label": "TickPostRender()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "TickPostRender()"
  },
  {
    "label": "FLoadingScreenAttributes()",
    "kind": "Method",
    "detail": "Function (} ; } ; struct FLoadingScreenAttributes {)",
    "insertText": "FLoadingScreenAttributes() : MinimumLoadingScreenDisplayTime(-1.0f) , bAutoCompleteWhenLoadingCompletes(true) , bMoviesAreSkippable(true) , bWaitForManualStop(false) , bAllowInEarlyStartup(false) , bAllowEngineTick(false) , PlaybackType(EMoviePlaybackType::MT_Normal)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<class SWidget> WidgetLoadingScreen ; TArray<FString> MoviePaths ; float MinimumLoadingScreenDisplayTime ; bool bAutoCompleteWhenLoadingCompletes ; bool bMoviesAreSkippable ; bool bWaitForManualStop ; bool bAllowInEarlyStartup ; bool bAllowEngineTick ; TEnumAsByte<EMoviePlaybackType> PlaybackType ; bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "NewTestLoadingScreenWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<class SWidget>)",
    "insertText": "NewTestLoadingScreenWidget()"
  },
  {
    "label": "RegisterMovieStreamer()",
    "kind": "Method",
    "detail": "Function (} ; class IGameMoviePlayer { public : void)",
    "insertText": "RegisterMovieStreamer(TSharedPtr<IMovieStreamer, ESPMode::ThreadSafe> InMovieStreamer)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(class FSlateRenderer& InSlateRenderer, TSharedPtr<SWindow> RenderTarget = nullptr)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "PassLoadingScreenWindowBackToGame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PassLoadingScreenWindowBackToGame()"
  },
  {
    "label": "SetupLoadingScreen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLoadingScreen(const FLoadingScreenAttributes& InLoadingScreenAttributes)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IGameMoviePlayer, FOnPrepareLoadingScreen) virtual FOnPrepareLoadingScreen& OnPrepareLoadingScreen()"
  },
  {
    "label": "HasEarlyStartupMovie()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasEarlyStartupMovie()"
  },
  {
    "label": "PlayEarlyStartupMovies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayEarlyStartupMovies()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "PlayMovie()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlayMovie()"
  },
  {
    "label": "StopMovie()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMovie()"
  },
  {
    "label": "WaitForMovieToFinish()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForMovieToFinish(bool bAllowEngineTick = false)"
  },
  {
    "label": "IsLoadingFinished()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadingFinished()"
  },
  {
    "label": "IsMovieCurrentlyPlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMovieCurrentlyPlaying()"
  },
  {
    "label": "LoadingScreenIsPrepared()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadingScreenIsPrepared()"
  },
  {
    "label": "SetupLoadingScreenFromIni()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupLoadingScreenFromIni()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IGameMoviePlayer, FOnMoviePlaybackStarted) virtual FOnMoviePlaybackStarted& OnMoviePlaybackStarted()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IGameMoviePlayer, FOnMoviePlaybackTick, float DeltaTime) virtual FOnMoviePlaybackTick& OnMoviePlaybackTick()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(IGameMoviePlayer, FOnMoviePlaybackFinished) virtual FOnMoviePlaybackFinished& OnMoviePlaybackFinished()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(IGameMoviePlayer, FOnMovieClipFinished, const FString&) virtual FOnMovieClipFinished& OnMovieClipFinished()"
  },
  {
    "label": "SetSlateOverlayWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateOverlayWidget(TSharedPtr<SWidget> NewOverlayWidget)"
  },
  {
    "label": "SetViewportDPIScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewportDPIScale(float InViewportDPIScale)"
  },
  {
    "label": "BroadcastMoviePlaybackFinished()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastMoviePlaybackFinished()"
  },
  {
    "label": "OnMoviePlaybackFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMoviePlaybackFinished().Broadcast()"
  },
  {
    "label": "BroadcastMovieClipFinished()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BroadcastMovieClipFinished(const FString& MovieClipThatFinished)"
  },
  {
    "label": "OnMovieClipFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMovieClipFinished().Broadcast(MovieClipThatFinished)"
  },
  {
    "label": "WillAutoCompleteWhenLoadFinishes()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "WillAutoCompleteWhenLoadFinishes()"
  },
  {
    "label": "IGameMoviePlayer()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "IGameMoviePlayer()"
  },
  {
    "label": "IsStartupMoviePlaying()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsStartupMoviePlaying()"
  },
  {
    "label": "SetIsPlayOnBlockingEnabled()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetIsPlayOnBlockingEnabled(bool bIsEnabled)"
  },
  {
    "label": "CreateMoviePlayer()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "CreateMoviePlayer()"
  },
  {
    "label": "DestroyMoviePlayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyMoviePlayer()"
  },
  {
    "label": "GetMoviePlayer()",
    "kind": "Method",
    "detail": "Function (IGameMoviePlayer*)",
    "insertText": "GetMoviePlayer()"
  },
  {
    "label": "GetMoviePlayerRef()",
    "kind": "Method",
    "detail": "Function (IGameMoviePlayer&)",
    "insertText": "GetMoviePlayerRef()"
  },
  {
    "label": "IsMoviePlayerEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMoviePlayerEnabled()"
  }
]