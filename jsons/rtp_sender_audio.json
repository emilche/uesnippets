[
  {
    "label": "RTPSenderAudio",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RTPSenderAudio"
  },
  {
    "label": "RTPSenderAudio()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTP_SENDER_AUDIO_H_ # define MODULES_RTP_RTCP_SOURCE_RTP_SENDER_AUDIO_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include \" absl / strings / string_view . h \" # include \" api / transport / field_trial_based_config . h \" # include \" modules / audio_coding / include / audio_coding_module_typedefs . h \" # include \" modules / rtp_rtcp / source / absolute_capture_time_sender . h \" # include \" modules / rtp_rtcp / source / dtmf_queue . h \" # include \" modules / rtp_rtcp / source / rtp_sender . h \" # include \" rtc_base / one_time_event . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / thread_annotations . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { class RTPSenderAudio { public :)",
    "insertText": "RTPSenderAudio(Clock* clock, RTPSender* rtp_sender)"
  },
  {
    "label": "RTPSenderAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTPSenderAudio()"
  },
  {
    "label": "RTPSenderAudio()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTPSenderAudio(const RTPSenderAudio&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RTPSenderAudio&)",
    "insertText": "operator(const RTPSenderAudio&)"
  },
  {
    "label": "RegisterAudioPayload()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "RegisterAudioPayload(absl::string_view payload_name, int8_t payload_type, uint32_t frequency, size_t channels, uint32_t rate)"
  },
  {
    "label": "SendAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendAudio(AudioFrameType frame_type, int8_t payload_type, uint32_t rtp_timestamp, const uint8_t* payload_data, size_t payload_size)"
  },
  {
    "label": "SendAudio()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendAudio(AudioFrameType frame_type, int8_t payload_type, uint32_t rtp_timestamp, const uint8_t* payload_data, size_t payload_size, int64_t absolute_capture_timestamp_ms)"
  },
  {
    "label": "SetAudioLevel()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SetAudioLevel(uint8_t level_dbov)"
  },
  {
    "label": "SendTelephoneEvent()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "SendTelephoneEvent(uint8_t key, uint16_t time_ms, uint8_t level)"
  },
  {
    "label": "SendTelephoneEventPacket()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SendTelephoneEventPacket(bool ended, uint32_t dtmf_timestamp, uint16_t duration, bool marker_bit)"
  },
  {
    "label": "MarkerBit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MarkerBit(AudioFrameType frame_type, int8_t payload_type)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Clock* const clock_ = nullptr ; RTPSender* const rtp_sender_ = nullptr ; Mutex send_audio_mutex_ ; bool dtmf_event_is_on_ = false ; bool dtmf_event_first_packet_sent_ = false ; int8_t dtmf_payload_type_)",
    "insertText": "RTC_GUARDED_BY(send_audio_mutex_)"
  }
]