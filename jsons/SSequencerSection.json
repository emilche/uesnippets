[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSequencer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencer"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "SCompoundTrackLaneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCompoundTrackLaneView"
  },
  {
    "label": "STrackAreaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STrackAreaView"
  },
  {
    "label": "FSectionModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSectionModel"
  },
  {
    "label": "FTrackAreaViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTrackAreaViewModel"
  },
  {
    "label": "ITrackAreaHotspot",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ITrackAreaHotspot"
  },
  {
    "label": "SSequencerSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSequencerSection"
  },
  {
    "label": "FSequencerSectionPainterImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSequencerSectionPainterImpl"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Layout / Geometry . h \" # include \" Input / Reply . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Rendering / RenderingCommon . h \" # include \" ISequencerSection . h \" # include \" EventHandlers / ISignedObjectEventHandler . h \" # include \" MVVM / ViewModels / SectionModel . h \" # include \" MVVM / Extensions / ITrackLaneExtension . h \" class FPaintArgs ; class FSequencer ; class FSequencerSectionPainter ; class FSlateWindowElementList ; namespace UE { namespace Sequencer { class SCompoundTrackLaneView ; class STrackAreaView ; class FSectionModel ; class FTrackAreaViewModel ; struct ITrackAreaHotspot ; class SSequencerSection : public SCompoundWidget,public ITrackLaneWidget,public UE::Sequencer::ISectionView,public UE::MovieScene::ISignedObjectEventHandler { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSequencerSection)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct( const FArguments& InArgs, TSharedPtr<FSequencer> Sequencer, TSharedPtr<FSectionModel> InSectionModel, TSharedPtr<STrackLane> InOwningTrackLane)"
  },
  {
    "label": "SSequencerSection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SSequencerSection()"
  },
  {
    "label": "GetSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<ISequencerSection>)",
    "insertText": "GetSectionInterface()"
  },
  {
    "label": "CheckForEasingHandleInteraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForEasingHandleInteraction(const FPointerEvent& MousePosition, const FGeometry& SectionGeometry)"
  },
  {
    "label": "CheckForEasingAreaInteraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForEasingAreaInteraction(const FPointerEvent& MousePosition, const FGeometry& SectionGeometry)"
  },
  {
    "label": "CheckForSectionInteraction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckForSectionInteraction(const FPointerEvent& MousePosition, const FGeometry& SectionGeometry)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetAlignment()",
    "kind": "Method",
    "detail": "Function (FTrackLaneScreenAlignment)",
    "insertText": "GetAlignment(const FTimeToPixel& TimeToPixel, const FGeometry& InParentGeometry)"
  },
  {
    "label": "GetOverlapPriority()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetOverlapPriority()"
  },
  {
    "label": "ReportParentGeometry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReportParentGeometry(const FGeometry& InParentGeometry)"
  },
  {
    "label": "AsWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const SWidget>)",
    "insertText": "AsWidget()"
  },
  {
    "label": "AcceptsChildren()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AcceptsChildren()"
  },
  {
    "label": "OnModifiedIndirectly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnModifiedIndirectly(UMovieSceneSignedObject* Object)"
  },
  {
    "label": "GetTimeToPixel()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FTimeToPixel>)",
    "insertText": "GetTimeToPixel()"
  },
  {
    "label": "PaintEasingHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PaintEasingHandles(FSequencerSectionPainter& InPainter, FLinearColor SelectionColor, TSharedPtr<ITrackAreaHotspot> Hotspot)"
  },
  {
    "label": "DrawSectionHandles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSectionHandles(const FGeometry& AllottedGeometry, FSlateWindowElementList& OutDrawElements, int32 LayerId, ESlateDrawEffect DrawEffects, FLinearColor SelectionColor, TSharedPtr<ITrackAreaHotspot> Hotspot)"
  },
  {
    "label": "GetSequencer()",
    "kind": "Method",
    "detail": "Function (FSequencer&)",
    "insertText": "GetSequencer()"
  },
  {
    "label": "GetTrackAreaView()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<STrackAreaView>)",
    "insertText": "GetTrackAreaView()"
  },
  {
    "label": "GetTrackAreaViewModel()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTrackAreaViewModel>)",
    "insertText": "GetTrackAreaViewModel()"
  },
  {
    "label": "UpdateUnderlappingSegments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateUnderlappingSegments()"
  },
  {
    "label": "GetToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolTipText()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "GetTopLevelChannelGroupVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetTopLevelChannelGroupVisibility()"
  },
  {
    "label": "GetTopLevelKeyBarColor()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetTopLevelKeyBarColor()"
  },
  {
    "label": "GetHandleOffsetPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetHandleOffsetPadding()"
  },
  {
    "label": "MakeSectionGeometryWithoutHandles()",
    "kind": "Method",
    "detail": "Function (FGeometry)",
    "insertText": "MakeSectionGeometryWithoutHandles(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "ThrobSectionSelection()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ThrobSectionSelection(int32 ThrobCount = 1)"
  },
  {
    "label": "ThrobKeySelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrobKeySelection(int32 ThrobCount = 1)"
  },
  {
    "label": "GetKeySelectionThrobValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeySelectionThrobValue()"
  },
  {
    "label": "GetSectionSelectionThrobValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionSelectionThrobValue()"
  },
  {
    "label": "IsSectionHighlighted()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionHighlighted(UMovieSceneSection* InSection, TSharedPtr<ITrackAreaHotspot> Hotspot)"
  }
]