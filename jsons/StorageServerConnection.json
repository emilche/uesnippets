[
  {
    "label": "FPackageStoreEntryResource",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageStoreEntryResource"
  },
  {
    "label": "FStorageServerConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStorageServerConnection"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Compression / CompressedBuffer . h \" # include \" Containers / UnrealString . h \" # include \" Containers / AnsiString . h \" # include \" Misc / StringBuilder . h \" # include \" Memory / MemoryFwd . h \" # include \" Templates / SharedPointer . h \" # include \" SocketTypes . h \" # include \" HAL / PlatformTime . h \" # include \" StorageServerHttpClient . h \" # include \" IO / IoChunkId . h \" # include \" IStorageServerPlatformFile . h \" # if ! UE_BUILD_SHIPPING)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogStorageServerConnection, Log, All)"
  },
  {
    "label": "FStorageServerConnection()",
    "kind": "Method",
    "detail": "Function (struct FPackageStoreEntryResource ; class FStorageServerConnection { public :)",
    "insertText": "FStorageServerConnection()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(TArrayView<const FString> HostAddresses, const int32 Port, const FAnsiStringView& InBaseURI)"
  },
  {
    "label": "PackageStoreRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PackageStoreRequest(TFunctionRef<void(FPackageStoreEntryResource&&)> Callback)"
  },
  {
    "label": "FileManifestRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FileManifestRequest(TFunctionRef<void(FIoChunkId Id, FStringView Path, int64 RawSize)> Callback)"
  },
  {
    "label": "ChunkSizeRequest()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "ChunkSizeRequest(const FIoChunkId& ChunkId)"
  },
  {
    "label": "ReadChunkRequest()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoBuffer>)",
    "insertText": "ReadChunkRequest(const FIoChunkId& ChunkId, const uint64 Offset, const uint64 Size, const TOptional<FIoBuffer> OptDestination, const bool bHardwareTargetBuffer)"
  },
  {
    "label": "ReadChunkRequestAsync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReadChunkRequestAsync(const FIoChunkId& ChunkId, const uint64 Offset, const uint64 Size, const TOptional<FIoBuffer> OptDestination, const bool bHardwareTargetBuffer, TFunctionRef<void(TIoStatusOr<FIoBuffer> Data)> OnResponse)"
  },
  {
    "label": "GetHostAddr()",
    "kind": "Method",
    "detail": "Function (FStringView)",
    "insertText": "GetHostAddr()"
  },
  {
    "label": "SortHostAddressesByLocalSubnet()",
    "kind": "Method",
    "detail": "Function (private : TUniquePtr<IStorageServerHttpClient> HttpClient ; FAnsiString BaseURI ; FString CurrentHostAddr ; std::atomic<uint64> AccumulatedBytes = 0 ; std::atomic<uint32> RequestCount = 0 ; std::atomic<double> MinRequestThroughput = DBL_MAX ; std::atomic<double> MaxRequestThroughput = - DBL_MAX ; TArray<FString>)",
    "insertText": "SortHostAddressesByLocalSubnet(TArrayView<const FString> HostAddresses, const int32 Port)"
  },
  {
    "label": "IsPlatformSocketAddress()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlatformSocketAddress(const FString Address)"
  },
  {
    "label": "CreateHttpClient()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IStorageServerHttpClient>)",
    "insertText": "CreateHttpClient(const FString Address, const int32 Port)"
  },
  {
    "label": "StringToInternetAddr()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInternetAddr>)",
    "insertText": "StringToInternetAddr(const FString Address, const int32 Port)"
  },
  {
    "label": "HandshakeRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandshakeRequest()"
  },
  {
    "label": "BuildReadChunkRequestUrl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildReadChunkRequestUrl(FAnsiStringBuilderBase& Builder, const FIoChunkId& ChunkId, const uint64 Offset, const uint64 Size)"
  },
  {
    "label": "ReadChunkRequestProcessHttpResult()",
    "kind": "Method",
    "detail": "Function (TIoStatusOr<FIoBuffer>)",
    "insertText": "ReadChunkRequestProcessHttpResult(IStorageServerHttpClient::FResult ResultTuple, const uint64 Offset, const uint64 Size, const TOptional<FIoBuffer> OptDestination, const bool bHardwareTargetBuffer)"
  },
  {
    "label": "GetCompressedOffset()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetCompressedOffset(const FCompressedBuffer& Buffer, uint64 RawOffset)"
  },
  {
    "label": "AddTimingInstance()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddTimingInstance(const double Duration, const uint64 Bytes)"
  }
]