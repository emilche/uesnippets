[
  {
    "label": "TestTaskFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestTaskFactory"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TestTaskFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_THREAD_POOL_TEST_TASK_FACTORY_H_ # define BASE_TASK_THREAD_POOL_TEST_TASK_FACTORY_H_ # include<stddef . h> # include<unordered_set> # include \" base / callback_forward . h \" # include \" base / memory / ref_counted . h \" # include \" base / synchronization / condition_variable . h \" # include \" base / synchronization / lock . h \" # include \" base / task / task_runner . h \" # include \" base / task / task_traits . h \" # include \" base / task / thread_pool / test_utils . h \" # include \" base / threading / thread_checker_impl . h \" namespace base { namespace internal { namespace test { class TestTaskFactory { public : enum class PostNestedTask { YES,NO,} ;)",
    "insertText": "TestTaskFactory(scoped_refptr<TaskRunner> task_runner, TaskSourceExecutionMode execution_mode)"
  },
  {
    "label": "TestTaskFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestTaskFactory(const TestTaskFactory&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TestTaskFactory&)",
    "insertText": "operator(const TestTaskFactory&)"
  },
  {
    "label": "TestTaskFactory()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "TestTaskFactory()"
  },
  {
    "label": "PostTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostTask(PostNestedTask post_nested_task, OnceClosure after_task_closure)"
  },
  {
    "label": "WaitForAllTasksToRun()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitForAllTasksToRun()"
  },
  {
    "label": "task_runner()",
    "kind": "Method",
    "detail": "Function (const TaskRunner*)",
    "insertText": "task_runner()"
  },
  {
    "label": "RunTaskCallback()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "RunTaskCallback(size_t task_index, PostNestedTask post_nested_task, OnceClosure after_task_closure)"
  }
]