[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "Module",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Module"
  },
  {
    "label": "CallGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraphNode"
  },
  {
    "label": "CallGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraph"
  },
  {
    "label": "CallGraphAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraphAnalysis"
  },
  {
    "label": "CallGraphWrapperPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CallGraphWrapperPass"
  },
  {
    "label": "GraphTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GraphTraits"
  },
  {
    "label": "spliceFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_CALLGRAPH_H # define LLVM_ANALYSIS_CALLGRAPH_H # include \" llvm / ADT / GraphTraits . h \" # include \" llvm / ADT / STLExtras . h \" # include \" llvm / IR / CallSite . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Intrinsics . h \" # include \" llvm / IR / ValueHandle . h \" # include \" llvm / Pass . h \" # include<map> namespace llvm { class Function ; class Module ; class CallGraphNode ; class CallGraph { Module& M ; typedef std::map<const Function*,std::unique_ptr<CallGraphNode>> FunctionMapTy ; FunctionMapTy FunctionMap ; CallGraphNode* Root ; CallGraphNode* ExternalCallingNode ; std::unique_ptr<CallGraphNode> CallsExternalNode ; void)",
    "insertText": "spliceFunction(const Function *From, const Function *To)"
  },
  {
    "label": "addToCallGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addToCallGraph(Function *F)"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "reset()"
  },
  {
    "label": "CallGraph()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CallGraph(Module &M)"
  },
  {
    "label": "CallGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallGraph(CallGraph &&Arg)"
  },
  {
    "label": "CallGraph()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CallGraph()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &OS)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "getModule()",
    "kind": "Method",
    "detail": "Function (typedef FunctionMapTy::iterator iterator ; typedef FunctionMapTy::const_iterator const_iterator ; Module&)",
    "insertText": "getModule()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const CallGraphNode*)",
    "insertText": "operator(const Function *F)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (const_iterator I = FunctionMap .)",
    "insertText": "find(F)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(I != FunctionMap.end() && \"Function not in callgraph!\")"
  },
  {
    "label": "getExternalCallingNode()",
    "kind": "Method",
    "detail": "Function (} CallGraphNode*)",
    "insertText": "getExternalCallingNode()"
  },
  {
    "label": "removeFunctionFromModule()",
    "kind": "Method",
    "detail": "Function (} Function*)",
    "insertText": "removeFunctionFromModule(CallGraphNode *CGN)"
  },
  {
    "label": "getOrInsertFunction()",
    "kind": "Method",
    "detail": "Function (CallGraphNode*)",
    "insertText": "getOrInsertFunction(const Function *F)"
  },
  {
    "label": "CallGraphNode()",
    "kind": "Method",
    "detail": "Function (} ; class CallGraphNode { public : typedef std::pair<WeakVH,CallGraphNode*> CallRecord ; public : typedef std::vector<CallRecord> CalledFunctionsVector ;)",
    "insertText": "CallGraphNode(Function *F) : F(F), NumReferences(0)"
  },
  {
    "label": "CallGraphNode()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CallGraphNode()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(NumReferences == 0 && \"Node deleted while references remain\")"
  },
  {
    "label": "getFunction()",
    "kind": "Method",
    "detail": "Function (} typedef std::vector<CallRecord>::iterator iterator ; typedef std::vector<CallRecord>::const_iterator const_iterator ; Function*)",
    "insertText": "getFunction()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "getNumReferences()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumReferences()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(i < CalledFunctions.size() && \"Invalid index\")"
  },
  {
    "label": "removeAllCalledFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeAllCalledFunctions()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (CalledFunctions .)",
    "insertText": "back().second->DropRef()"
  },
  {
    "label": "pop_back()",
    "kind": "Method",
    "detail": "Function (CalledFunctions .)",
    "insertText": "pop_back()"
  },
  {
    "label": "stealCalledFunctionsFrom()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "stealCalledFunctionsFrom(CallGraphNode *N)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(CalledFunctions.empty() && \"Cannot steal callsite information if I already have some\")"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(CalledFunctions, N->CalledFunctions)"
  },
  {
    "label": "addCalledFunction()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "addCalledFunction(CallSite CS, CallGraphNode *M)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!CS.getInstruction() || !CS.getCalledFunction() || !CS.getCalledFunction()->isIntrinsic() || !Intrinsic::isLeaf(CS.getCalledFunction()->getIntrinsicID()))"
  },
  {
    "label": "emplace_back()",
    "kind": "Method",
    "detail": "Function (CalledFunctions .)",
    "insertText": "emplace_back(CS.getInstruction(), M)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (M ->)",
    "insertText": "AddRef()"
  },
  {
    "label": "removeCallEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeCallEdge(iterator I)"
  },
  {
    "label": "DropRef()",
    "kind": "Method",
    "detail": "Function (I -> second ->)",
    "insertText": "DropRef()"
  },
  {
    "label": "back()",
    "kind": "Method",
    "detail": "Function (* I = CalledFunctions .)",
    "insertText": "back()"
  },
  {
    "label": "removeCallEdgeFor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeCallEdgeFor(CallSite CS)"
  },
  {
    "label": "removeAnyCallEdgeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeAnyCallEdgeTo(CallGraphNode *Callee)"
  },
  {
    "label": "removeOneAbstractEdgeTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "removeOneAbstractEdgeTo(CallGraphNode *Callee)"
  },
  {
    "label": "replaceCallEdge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "replaceCallEdge(CallSite CS, CallSite NewCS, CallGraphNode *NewNode)"
  },
  {
    "label": "CallGraphNode()",
    "kind": "Method",
    "detail": "Function (private : class CallGraph ; AssertingVH<Function> F ; std::vector<CallRecord> CalledFunctions ; unsigned NumReferences ;)",
    "insertText": "CallGraphNode(const CallGraphNode &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const CallGraphNode &)"
  },
  {
    "label": "allReferencesDropped()",
    "kind": "Method",
    "detail": "Function (+ + NumReferences ; } void)",
    "insertText": "allReferencesDropped()"
  },
  {
    "label": "ID()",
    "kind": "Method",
    "detail": "Function (NumReferences = 0 ; } } ; class CallGraphAnalysis { public : typedef CallGraph Result ; void*)",
    "insertText": "ID()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} CallGraph)",
    "insertText": "run(Module *M)"
  },
  {
    "label": "CallGraphWrapperPass()",
    "kind": "Method",
    "detail": "Function (} private : char PassID ; } ; class CallGraphWrapperPass : public ModulePass { std::unique_ptr<CallGraph> G ; public : char ID ;)",
    "insertText": "CallGraphWrapperPass()"
  },
  {
    "label": "getCallGraph()",
    "kind": "Method",
    "detail": "Function (const CallGraph&)",
    "insertText": "getCallGraph()"
  },
  {
    "label": "getCallsExternalNode()",
    "kind": "Method",
    "detail": "Function (} CallGraphNode*)",
    "insertText": "getCallsExternalNode()"
  },
  {
    "label": "getAnalysisUsage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "getAnalysisUsage(AnalysisUsage &AU)"
  },
  {
    "label": "runOnModule()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "runOnModule(Module &M)"
  },
  {
    "label": "releaseMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "releaseMemory()"
  },
  {
    "label": "print()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "print(raw_ostream &o, const Module *)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} ; template<> struct GraphTraits<CallGraphNode*> { typedef CallGraphNode NodeType ; typedef CallGraphNode::CallRecord CGNPairTy ; NodeType*)",
    "insertText": "getEntryNode(CallGraphNode *CGN)"
  },
  {
    "label": "child_begin()",
    "kind": "Method",
    "detail": "Function (ChildIteratorType)",
    "insertText": "child_begin(NodeType *N)"
  },
  {
    "label": "child_end()",
    "kind": "Method",
    "detail": "Function (} ChildIteratorType)",
    "insertText": "child_end(NodeType *N)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<const CallGraphNode*> { typedef const CallGraphNode NodeType ; typedef CallGraphNode::CallRecord CGNPairTy ; NodeType*)",
    "insertText": "getEntryNode(const CallGraphNode *CGN)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<CallGraph*> : public GraphTraits<CallGraphNode*> { NodeType*)",
    "insertText": "getEntryNode(CallGraph *CGN)"
  },
  {
    "label": "CGGetValuePtr()",
    "kind": "Method",
    "detail": "Function (} typedef std::pair<const Function* const,std::unique_ptr<CallGraphNode>> PairTy ; CallGraphNode*)",
    "insertText": "CGGetValuePtr(const PairTy &P)"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} typedef mapped_iterator<CallGraph::iterator,)",
    "insertText": "decltype(&CGGetValuePtr)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (nodes_iterator)",
    "insertText": "nodes_begin(CallGraph *CG)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(CallGraph *CG)"
  },
  {
    "label": "getEntryNode()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct GraphTraits<const CallGraph*> : public GraphTraits<const CallGraphNode*> { NodeType*)",
    "insertText": "getEntryNode(const CallGraph *CGN)"
  },
  {
    "label": "nodes_begin()",
    "kind": "Method",
    "detail": "Function (nodes_iterator)",
    "insertText": "nodes_begin(const CallGraph *CG)"
  },
  {
    "label": "nodes_end()",
    "kind": "Method",
    "detail": "Function (} nodes_iterator)",
    "insertText": "nodes_end(const CallGraph *CG)"
  }
]