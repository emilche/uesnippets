[
  {
    "label": "LibvpxVp9Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibvpxVp9Encoder"
  },
  {
    "label": "RefFrameBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RefFrameBuffer"
  },
  {
    "label": "VariableFramerateExperiment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariableFramerateExperiment"
  },
  {
    "label": "QualityScalerExperiment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QualityScalerExperiment"
  },
  {
    "label": "PerformanceFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerformanceFlags"
  },
  {
    "label": "ParameterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParameterSet"
  },
  {
    "label": "LibvpxVp9Encoder()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "LibvpxVp9Encoder(const cricket::VideoCodec& codec,\n                   std::unique_ptr<LibvpxInterface> interface,\n                   const FieldTrialsView& trials)"
  },
  {
    "label": "NumberOfThreads()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "NumberOfThreads(int width, int height, int number_of_cores)"
  },
  {
    "label": "InitAndSetControlSettings()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitAndSetControlSettings(const VideoCodec* inst)"
  },
  {
    "label": "PopulateCodecSpecific()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateCodecSpecific(CodecSpecificInfo* codec_specific,\n                             absl::optional<int>* spatial_idx,\n                             absl::optional<int>* temporal_idx,\n                             const vpx_codec_cx_pkt& pkt)"
  },
  {
    "label": "FillReferenceIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillReferenceIndices(const vpx_codec_cx_pkt& pkt,\n                            size_t pic_num,\n                            bool inter_layer_predicted,\n                            CodecSpecificInfoVP9* vp9_info)"
  },
  {
    "label": "UpdateReferenceBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReferenceBuffers(const vpx_codec_cx_pkt& pkt, size_t pic_num)"
  },
  {
    "label": "SetReferences()",
    "kind": "Method",
    "detail": "Function (vpx_svc_ref_frame_config_t)",
    "insertText": "SetReferences(bool is_key_pic,\n                                           int first_active_spatial_layer_id)"
  },
  {
    "label": "SetSvcRates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSvcRates(const VideoBitrateAllocation& bitrate_allocation)"
  },
  {
    "label": "EnableSpatialLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSpatialLayer(int sid)"
  },
  {
    "label": "DisableSpatialLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableSpatialLayer(int sid)"
  },
  {
    "label": "SetActiveSpatialLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveSpatialLayers()"
  },
  {
    "label": "GetEncodedLayerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEncodedLayerFrame(const vpx_codec_cx_pkt* pkt)"
  },
  {
    "label": "EncoderOutputCodedPacketCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncoderOutputCodedPacketCallback(vpx_codec_cx_pkt* pkt,\n                                               void* user_data)"
  },
  {
    "label": "DeliverBufferedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverBufferedFrame(bool end_of_picture)"
  },
  {
    "label": "DropFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropFrame(uint8_t spatial_idx, uint32_t rtp_timestamp)"
  },
  {
    "label": "MaxIntraTarget()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "MaxIntraTarget(uint32_t optimal_buffer_size)"
  },
  {
    "label": "SteadyStateSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SteadyStateSize(int sid, int tid)"
  },
  {
    "label": "MaybeRewrapRawWithFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeRewrapRawWithFormat(vpx_img_fmt fmt)"
  },
  {
    "label": "PrepareBufferForProfile0()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<VideoFrameBuffer>)",
    "insertText": "PrepareBufferForProfile0(\n      rtc::scoped_refptr<VideoFrameBuffer> buffer)"
  },
  {
    "label": "ParseVariableFramerateConfig()",
    "kind": "Method",
    "detail": "Function (VariableFramerateExperiment)",
    "insertText": "ParseVariableFramerateConfig(\n      const FieldTrialsView& trials)"
  },
  {
    "label": "ParseQualityScalerConfig()",
    "kind": "Method",
    "detail": "Function (QualityScalerExperiment)",
    "insertText": "ParseQualityScalerConfig(\n      const FieldTrialsView& trials)"
  },
  {
    "label": "UpdatePerformanceFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePerformanceFlags()"
  },
  {
    "label": "ParsePerformanceFlagsFromTrials()",
    "kind": "Method",
    "detail": "Function (PerformanceFlags)",
    "insertText": "ParsePerformanceFlagsFromTrials(\n      const FieldTrialsView& trials)"
  },
  {
    "label": "GetDefaultPerformanceFlags()",
    "kind": "Method",
    "detail": "Function (PerformanceFlags)",
    "insertText": "GetDefaultPerformanceFlags()"
  }
]