[
  {
    "label": "LibvpxVp9Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LibvpxVp9Encoder"
  },
  {
    "label": "RefFrameBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RefFrameBuffer"
  },
  {
    "label": "VariableFramerateExperiment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VariableFramerateExperiment"
  },
  {
    "label": "QualityScalerExperiment",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "QualityScalerExperiment"
  },
  {
    "label": "PerformanceFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PerformanceFlags"
  },
  {
    "label": "ParameterSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ParameterSet"
  },
  {
    "label": "LibvpxVp9Encoder()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_VIDEO_CODING_CODECS_VP9_LIBVPX_VP9_ENCODER_H_ # define MODULES_VIDEO_CODING_CODECS_VP9_LIBVPX_VP9_ENCODER_H_ # ifdef RTC_ENABLE_VP9 # include<array> # include<memory> # include<vector> # include \" api / fec_controller_override . h \" # include \" api / field_trials_view . h \" # include \" api / video_codecs / video_encoder . h \" # include \" api / video_codecs / vp9_profile . h \" # include \" common_video / include / video_frame_buffer_pool . h \" # include \" modules / video_coding / codecs / interface / libvpx_interface . h \" # include \" modules / video_coding / codecs / vp9 / include / vp9 . h \" # include \" modules / video_coding / codecs / vp9 / vp9_frame_buffer_pool . h \" # include \" modules / video_coding / svc / scalable_video_controller . h \" # include \" modules / video_coding / utility / framerate_controller_deprecated . h \" # include \" rtc_base / containers / flat_map . h \" # include \" rtc_base / experiments / encoder_info_settings . h \" # include \" vpx / vp8cx . h \" namespace webrtc { class LibvpxVp9Encoder : public VP9Encoder { public :)",
    "insertText": "LibvpxVp9Encoder(const cricket::VideoCodec& codec, std::unique_ptr<LibvpxInterface> interface, const FieldTrialsView& trials)"
  },
  {
    "label": "LibvpxVp9Encoder()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "LibvpxVp9Encoder()"
  },
  {
    "label": "SetFecControllerOverride()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFecControllerOverride(FecControllerOverride* fec_controller_override)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Release()"
  },
  {
    "label": "InitEncode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitEncode(const VideoCodec* codec_settings, const Settings& settings)"
  },
  {
    "label": "Encode()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Encode(const VideoFrame& input_image, const std::vector<VideoFrameType>* frame_types)"
  },
  {
    "label": "RegisterEncodeCompleteCallback()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "RegisterEncodeCompleteCallback(EncodedImageCallback* callback)"
  },
  {
    "label": "SetRates()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRates(const RateControlParameters& parameters)"
  },
  {
    "label": "GetEncoderInfo()",
    "kind": "Method",
    "detail": "Function (EncoderInfo)",
    "insertText": "GetEncoderInfo()"
  },
  {
    "label": "NumberOfThreads()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "NumberOfThreads(int width, int height, int number_of_cores)"
  },
  {
    "label": "InitAndSetControlSettings()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "InitAndSetControlSettings(const VideoCodec* inst)"
  },
  {
    "label": "PopulateCodecSpecific()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PopulateCodecSpecific(CodecSpecificInfo* codec_specific, absl::optional<int>* spatial_idx, absl::optional<int>* temporal_idx, const vpx_codec_cx_pkt& pkt)"
  },
  {
    "label": "FillReferenceIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillReferenceIndices(const vpx_codec_cx_pkt& pkt, size_t pic_num, bool inter_layer_predicted, CodecSpecificInfoVP9* vp9_info)"
  },
  {
    "label": "UpdateReferenceBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReferenceBuffers(const vpx_codec_cx_pkt& pkt, size_t pic_num)"
  },
  {
    "label": "SetReferences()",
    "kind": "Method",
    "detail": "Function (vpx_svc_ref_frame_config_t)",
    "insertText": "SetReferences(bool is_key_pic, int first_active_spatial_layer_id)"
  },
  {
    "label": "ExplicitlyConfiguredSpatialLayers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExplicitlyConfiguredSpatialLayers()"
  },
  {
    "label": "SetSvcRates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetSvcRates(const VideoBitrateAllocation& bitrate_allocation)"
  },
  {
    "label": "EnableSpatialLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSpatialLayer(int sid)"
  },
  {
    "label": "DisableSpatialLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableSpatialLayer(int sid)"
  },
  {
    "label": "SetActiveSpatialLayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetActiveSpatialLayers()"
  },
  {
    "label": "GetEncodedLayerFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetEncodedLayerFrame(const vpx_codec_cx_pkt* pkt)"
  },
  {
    "label": "EncoderOutputCodedPacketCallback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncoderOutputCodedPacketCallback(vpx_codec_cx_pkt* pkt, void* user_data)"
  },
  {
    "label": "DeliverBufferedFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverBufferedFrame(bool end_of_picture)"
  },
  {
    "label": "DropFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DropFrame(uint8_t spatial_idx, uint32_t rtp_timestamp)"
  },
  {
    "label": "MaxIntraTarget()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "MaxIntraTarget(uint32_t optimal_buffer_size)"
  },
  {
    "label": "SteadyStateSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "SteadyStateSize(int sid, int tid)"
  },
  {
    "label": "MaybeRewrapRawWithFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeRewrapRawWithFormat(vpx_img_fmt fmt)"
  },
  {
    "label": "PrepareBufferForProfile0()",
    "kind": "Method",
    "detail": "Function (rtc::scoped_refptr<VideoFrameBuffer>)",
    "insertText": "PrepareBufferForProfile0(rtc::scoped_refptr<VideoFrameBuffer> buffer)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const std::unique_ptr<LibvpxInterface> libvpx_ ; EncodedImage encoded_image_ ; CodecSpecificInfo codec_specific_ ; EncodedImageCallback* encoded_complete_callback_ ; VideoCodec codec_ ; const VP9Profile profile_ ; bool inited_ ; int64_t timestamp_ ; uint32_t rc_max_intra_target_ ; vpx_codec_ctx_t* encoder_ ; vpx_codec_enc_cfg_t* config_ ; vpx_image_t* raw_ ; vpx_svc_extra_cfg_t svc_params_ ; const VideoFrame* input_image_ ; GofInfoVP9 gof_ ; bool force_key_frame_ ; size_t pics_since_key_ ; uint8_t num_temporal_layers_ ; uint8_t num_spatial_layers_ ; uint8_t num_active_spatial_layers_ ; uint8_t first_active_layer_ ; bool layer_deactivation_requires_key_frame_ ; bool is_svc_ ; InterLayerPredMode inter_layer_pred_ ; bool external_ref_control_ ; const bool trusted_rate_controller_ ; bool layer_buffering_ ; const bool full_superframe_drop_ ; vpx_svc_frame_drop_t svc_drop_frame_ ; bool first_frame_in_picture_ ; VideoBitrateAllocation current_bitrate_allocation_ ; bool ss_info_needed_ ; bool force_all_active_layers_ ; std::unique_ptr<ScalableVideoController> svc_controller_ ; std::vector<FramerateControllerDeprecated> framerate_controller_ ; bool is_flexible_mode_ ; struct RefFrameBuffer { bool)",
    "insertText": "operator(const RefFrameBuffer& o)"
  },
  {
    "label": "ParseQualityScalerConfig()",
    "kind": "Method",
    "detail": "Function (FramerateControllerDeprecated variable_framerate_controller_ ; const struct QualityScalerExperiment { int low_qp ; int high_qp ; bool enabled ; } quality_scaler_experiment_ ; QualityScalerExperiment)",
    "insertText": "ParseQualityScalerConfig(const FieldTrialsView& trials)"
  },
  {
    "label": "UpdatePerformanceFlags()",
    "kind": "Method",
    "detail": "Function (const bool external_ref_ctrl_ ; struct PerformanceFlags { bool use_per_layer_speed = false ; struct ParameterSet { int base_layer_speed = - 1 ; int high_layer_speed = - 1 ; int deblock_mode = 0 ; bool allow_denoising = true ; } ; flat_map<int,ParameterSet> settings_by_resolution ; } ; const PerformanceFlags performance_flags_ ; std::vector<PerformanceFlags::ParameterSet> performance_flags_by_spatial_index_ ; void)",
    "insertText": "UpdatePerformanceFlags()"
  },
  {
    "label": "ParsePerformanceFlagsFromTrials()",
    "kind": "Method",
    "detail": "Function (PerformanceFlags)",
    "insertText": "ParsePerformanceFlagsFromTrials(const FieldTrialsView& trials)"
  },
  {
    "label": "GetDefaultPerformanceFlags()",
    "kind": "Method",
    "detail": "Function (PerformanceFlags)",
    "insertText": "GetDefaultPerformanceFlags()"
  }
]