[
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "FSimpleEngineConfig()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / UnrealMathSSE . h \" # include \" VehicleSystemTemplate . h \" # include \" VehicleUtility . h \" # if VEHICLE_DEBUGGING_ENABLED UE_DISABLE_OPTIMIZATION # endif namespace Chaos { struct FSimpleEngineConfig {)",
    "insertText": "FSimpleEngineConfig() : MaxTorque(0.f) , MaxRPM(6000) , EngineIdleRPM(1200) , EngineBrakeEffect(0.2f) , EngineRevUpMOI(1.0f) , EngineRevDownRate(1.0f)"
  },
  {
    "label": "FSimpleEngineSim()",
    "kind": "Method",
    "detail": "Function (} FNormalisedGraph TorqueCurve ; float MaxTorque ; uint16 MaxRPM ; uint16 EngineIdleRPM ; float EngineBrakeEffect ; float EngineRevUpMOI ; float EngineRevDownRate ; } ; class FSimpleEngineSim : public TVehicleSystem<FSimpleEngineConfig> { public :)",
    "insertText": "FSimpleEngineSim(const FSimpleEngineConfig* StaticDataIn)"
  },
  {
    "label": "StartEngine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEngine()"
  },
  {
    "label": "StopEngine()",
    "kind": "Method",
    "detail": "Function (EngineStarted = true ; } void)",
    "insertText": "StopEngine()"
  },
  {
    "label": "SetThrottle()",
    "kind": "Method",
    "detail": "Function (EngineStarted = false ; } void)",
    "insertText": "SetThrottle(float InThrottle)"
  },
  {
    "label": "ClampNormalRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClampNormalRange(InThrottle)"
  },
  {
    "label": "SetEngineRPM()",
    "kind": "Method",
    "detail": "Function (ThrottlePosition = InThrottle ; } void)",
    "insertText": "SetEngineRPM(bool FreeRunningIn, float InEngineRPM)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FreeRunning = FreeRunningIn ;)",
    "insertText": "if(!FreeRunning)"
  },
  {
    "label": "RPMToOmega()",
    "kind": "Method",
    "detail": "Function (TargetSpeed =)",
    "insertText": "RPMToOmega(FMath::Clamp(FMath::Abs(InEngineRPM), (float)Setup().EngineIdleRPM, (float)Setup().MaxRPM))"
  },
  {
    "label": "SetMaxTorque()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetMaxTorque(float InTorque)"
  },
  {
    "label": "GetEngineTorque()",
    "kind": "Method",
    "detail": "Function (MaxTorque = InTorque ; } float)",
    "insertText": "GetEngineTorque()"
  },
  {
    "label": "GetEngineRevRate()",
    "kind": "Method",
    "detail": "Function (} return 0 . f ; } float)",
    "insertText": "GetEngineRevRate()"
  },
  {
    "label": "GetTorqueFromRPM()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetTorqueFromRPM(float RPM, bool LimitToIdle = true)"
  },
  {
    "label": "GetEngineRPM()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetEngineRPM()"
  },
  {
    "label": "Simulate()",
    "kind": "Method",
    "detail": "Function (Omega = EngineOmega ; } void)",
    "insertText": "Simulate(float DeltaTime)"
  }
]