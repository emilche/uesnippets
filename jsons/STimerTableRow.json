[
  {
    "label": "IToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolTip"
  },
  {
    "label": "FTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTable"
  },
  {
    "label": "FTableColumn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTableColumn"
  },
  {
    "label": "STimerTableRowToolTip",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimerTableRowToolTip"
  },
  {
    "label": "STimerTableRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimerTableRow"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Views / SHeaderRow . h \" # include \" Widgets / Views / STableViewBase . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" Insights / TimingProfiler / ViewModels / TimerNodeHelper . h \" class IToolTip ; namespace UE::Insights { class FTable ; class FTableColumn ; } namespace UE::Insights::TimingProfiler { class STimerTableRowToolTip ;)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FTimerNodeShouldBeEnabledDelegate, FTimerNodePtr)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FIsColumnVisibleDelegate, const FName)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(EHorizontalAlignment, FGetColumnOutlineHAlignmentDelegate, const FName)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FSetHoveredTimerTableCell, TSharedPtr<FTable> , TSharedPtr<FTableColumn> , FTimerNodePtr)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (class STimerTableRow : public SMultiColumnTableRow<FTimerNodePtr> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(STimerTableRow)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FTimerNodeShouldBeEnabledDelegate, OnShouldBeEnabled) SLATE_EVENT(FIsColumnVisibleDelegate, OnIsColumnVisible) SLATE_EVENT(FGetColumnOutlineHAlignmentDelegate, OnGetColumnOutlineHAlignmentDelegate) SLATE_EVENT(FSetHoveredTimerTableCell, OnSetHoveredCell) SLATE_ATTRIBUTE(FText, HighlightText) SLATE_ATTRIBUTE(FName, HighlightedNodeName) SLATE_ARGUMENT(TSharedPtr<FTable>, TablePtr) SLATE_ARGUMENT(FTimerNodePtr, TimerNodePtr) SLATE_END_ARGS() public: void Construct(const FArguments& InArgs, const TSharedRef<STableViewBase>& InOwnerTableView)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnId)"
  },
  {
    "label": "OnDragDetected()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragDetected(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetRowToolTip()",
    "kind": "Method",
    "detail": "Function (TSharedRef<IToolTip>)",
    "insertText": "GetRowToolTip()"
  },
  {
    "label": "InvalidateContent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateContent()"
  },
  {
    "label": "GetBackgroundColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (protected : FSlateColor)",
    "insertText": "GetBackgroundColorAndOpacity()"
  },
  {
    "label": "GetBackgroundColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetBackgroundColorAndOpacity(double Time)"
  },
  {
    "label": "GetOutlineColorAndOpacity()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetOutlineColorAndOpacity()"
  },
  {
    "label": "GetOutlineBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetOutlineBrush(const FName ColumnId)"
  },
  {
    "label": "HandleShouldBeEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleShouldBeEnabled()"
  },
  {
    "label": "IsColumnVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsColumnVisible(const FName ColumnId)"
  },
  {
    "label": "OnSetHoveredCell()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetHoveredCell(TSharedPtr<FTable> InTablePtr, TSharedPtr<FTableColumn> InColumnPtr, FTimerNodePtr InTimerNodePtr)"
  }
]