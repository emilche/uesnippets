[
  {
    "label": "is_ref_compatible_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_ref_compatible_impl"
  },
  {
    "label": "any_conversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "any_conversion"
  },
  {
    "label": "yes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "yes"
  },
  {
    "label": "no",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "no"
  },
  {
    "label": "is_ref_compatible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_ref_compatible"
  },
  {
    "label": "generic_matrix_wrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_matrix_wrapper"
  },
  {
    "label": "ConstSelfAdjointViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstSelfAdjointViewReturnType"
  },
  {
    "label": "IterativeSolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IterativeSolverBase"
  },
  {
    "label": "any_conversion()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ITERATIVE_SOLVER_BASE_H # define EIGEN_ITERATIVE_SOLVER_BASE_H namespace Eigen { namespace internal { template<MatrixType> struct is_ref_compatible_impl { private : template<T0> struct any_conversion { template<T>)",
    "insertText": "any_conversion(const volatile T&)"
  },
  {
    "label": "any_conversion()",
    "kind": "Method",
    "detail": "Function (template<T>)",
    "insertText": "any_conversion(T&)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (} ; struct yes { int a [ 1 ] ; } ; struct no { int a [ 2 ] ; } ; template<T> yes)",
    "insertText": "test(const Ref<const T>&, int)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (template<T> no)",
    "insertText": "test(any_conversion<T>, ...)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (public : MatrixType ms_from ; enum { value =)",
    "insertText": "sizeof(test<MatrixType>(ms_from, 0))==sizeof(yes)"
  },
  {
    "label": "generic_matrix_wrapper()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType> struct is_ref_compatible { enum { value = is_ref_compatible_impl<remove_all<MatrixType>::type>::value } ; } ; template<MatrixType,bool MatrixFree = ! internal::is_ref_compatible<MatrixType>::value> class generic_matrix_wrapper ; template<MatrixType> class generic_matrix_wrapper<MatrixType,false> { public : typedef Ref<const MatrixType> ActualMatrixType ; template<int UpLo> struct ConstSelfAdjointViewReturnType { typedef ActualMatrixType::template ConstSelfAdjointViewReturnType<UpLo>::Type Type ; } ; enum { MatrixFree = false } ;)",
    "insertText": "generic_matrix_wrapper() : m_dummy(0,0), m_matrix(m_dummy)"
  },
  {
    "label": "generic_matrix_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "generic_matrix_wrapper(const InputType &mat) : m_matrix(mat)"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (} const ActualMatrixType&)",
    "insertText": "matrix()"
  },
  {
    "label": "MatrixType()",
    "kind": "Method",
    "detail": "Function (m_matrix . ~ Ref<const)",
    "insertText": "MatrixType()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&m_matrix) Ref<const MatrixType>(mat.derived())"
  },
  {
    "label": "grab()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "grab(const Ref<const MatrixType> &mat)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&m_matrix) Ref<const MatrixType>(mat)"
  },
  {
    "label": "generic_matrix_wrapper()",
    "kind": "Method",
    "detail": "Function (} } protected : MatrixType m_dummy ; ActualMatrixType m_matrix ; } ; template<MatrixType> class generic_matrix_wrapper<MatrixType,true> { public : typedef MatrixType ActualMatrixType ; template<int UpLo> struct ConstSelfAdjointViewReturnType { typedef ActualMatrixType Type ; } ; enum { MatrixFree = true } ;)",
    "insertText": "generic_matrix_wrapper() : mp_matrix(0)"
  },
  {
    "label": "generic_matrix_wrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "generic_matrix_wrapper(const MatrixType &mat) : mp_matrix(&mat)"
  },
  {
    "label": "IterativeSolverBase()",
    "kind": "Method",
    "detail": "Function (mp_matrix =& mat ; } protected : const ActualMatrixType* mp_matrix ; } ; } template<Derived> class IterativeSolverBase : public SparseSolverBase<Derived> { protected : typedef SparseSolverBase<Derived> Base ; using Base::m_isInitialized ; public : typedef internal::traits<Derived>::MatrixType MatrixType ; typedef internal::traits<Derived>::Preconditioner Preconditioner ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::StorageIndex StorageIndex ; typedef MatrixType::RealScalar RealScalar ; enum { ColsAtCompileTime = MatrixType::ColsAtCompileTime,MaxColsAtCompileTime = MatrixType::MaxColsAtCompileTime } ; public : using Base::derived ;)",
    "insertText": "IterativeSolverBase()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init()"
  },
  {
    "label": "IterativeSolverBase()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived>)",
    "insertText": "IterativeSolverBase(const EigenBase<MatrixDerived>& A) : m_matrixWrapper(A.derived())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "compute(matrix())"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived> Derived&)",
    "insertText": "analyzePattern(const EigenBase<MatrixDerived>& A)"
  },
  {
    "label": "grab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "grab(A.derived())"
  },
  {
    "label": "analyzePattern()",
    "kind": "Method",
    "detail": "Function (m_preconditioner .)",
    "insertText": "analyzePattern(matrix())"
  },
  {
    "label": "info()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; m_analysisIsOk = true ; m_info = m_preconditioner .)",
    "insertText": "info()"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived> Derived&)",
    "insertText": "factorize(const EigenBase<MatrixDerived>& A)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_analysisIsOk && \"You must first call analyzePattern()\")"
  },
  {
    "label": "factorize()",
    "kind": "Method",
    "detail": "Function (m_preconditioner .)",
    "insertText": "factorize(matrix())"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (} template<MatrixDerived> Derived&)",
    "insertText": "compute(const EigenBase<MatrixDerived>& A)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  },
  {
    "label": "tolerance()",
    "kind": "Method",
    "detail": "Function (} RealScalar)",
    "insertText": "tolerance()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_tolerance = tolerance ; return)",
    "insertText": "derived()"
  },
  {
    "label": "preconditioner()",
    "kind": "Method",
    "detail": "Function (} Preconditioner&)",
    "insertText": "preconditioner()"
  },
  {
    "label": "setMaxIterations()",
    "kind": "Method",
    "detail": "Function (} Derived&)",
    "insertText": "setMaxIterations(Index maxIters)"
  },
  {
    "label": "iterations()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "iterations()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"ConjugateGradient is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Solver is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(derived().rows()==b.rows() && \"solve(): invalid number of rows of the right hand side matrix b\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"IterativeSolverBase is not initialized.\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(rows()==b.rows())"
  },
  {
    "label": "dest()",
    "kind": "Method",
    "detail": "Function (DestDerived&)",
    "insertText": "dest(aDest.derived())"
  },
  {
    "label": "tb()",
    "kind": "Method",
    "detail": "Function (typedef DestDerived::Scalar DestScalar ; Eigen::Matrix<DestScalar,Dynamic,1>)",
    "insertText": "tb(size)"
  },
  {
    "label": "tx()",
    "kind": "Method",
    "detail": "Function (Eigen::Matrix<DestScalar,Dynamic,1>)",
    "insertText": "tx(cols())"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (DestDerived::PlainObject)",
    "insertText": "tmp(cols(),rhsCols)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ComputationInfo global_info = Success ;)",
    "insertText": "for(Index k=0; k<rhsCols; ++k)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (tb = b .)",
    "insertText": "col(k)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived()._solve_vector_with_guess_impl(tb,tx)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (tmp .)",
    "insertText": "col(k) = tx.sparseView(0)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} m_info = global_info ; dest .)",
    "insertText": "swap(tmp)"
  },
  {
    "label": "_solve_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,DestDerived> internal::enable_if<Rhs::ColsAtCompileTime ! = 1&& DestDerived::ColsAtCompileTime ! = 1>::type)",
    "insertText": "_solve_with_guess_impl(const Rhs& b, MatrixBase<DestDerived> &aDest)"
  },
  {
    "label": "xk()",
    "kind": "Method",
    "detail": "Function (DestDerived::ColXpr)",
    "insertText": "xk(dest,k)"
  },
  {
    "label": "bk()",
    "kind": "Method",
    "detail": "Function (Rhs::ConstColXpr)",
    "insertText": "bk(b,k)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived()._solve_vector_with_guess_impl(bk,xk)"
  },
  {
    "label": "_solve_with_guess_impl()",
    "kind": "Method",
    "detail": "Function (} m_info = global_info ; } template<Rhs,DestDerived> internal::enable_if<Rhs::ColsAtCompileTime = = 1 | | DestDerived::ColsAtCompileTime = = 1>::type)",
    "insertText": "_solve_with_guess_impl(const Rhs& b, MatrixBase<DestDerived> &dest)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived()._solve_vector_with_guess_impl(b,dest.derived())"
  },
  {
    "label": "_solve_impl()",
    "kind": "Method",
    "detail": "Function (} template<Rhs,Dest> void)",
    "insertText": "_solve_impl(const Rhs& b, Dest& x)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (x .)",
    "insertText": "setZero()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "derived()._solve_with_guess_impl(b,x)"
  },
  {
    "label": "epsilon()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = false ; m_analysisIsOk = false ; m_factorizationIsOk = false ; m_maxIterations = - 1 ; m_tolerance = NumTraits<Scalar)",
    "insertText": "epsilon()"
  },
  {
    "label": "grab()",
    "kind": "Method",
    "detail": "Function (} template<InputType> void)",
    "insertText": "grab(const InputType &A)"
  },
  {
    "label": "grab()",
    "kind": "Method",
    "detail": "Function (m_matrixWrapper .)",
    "insertText": "grab(A)"
  }
]