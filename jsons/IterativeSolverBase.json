[
  {
    "label": "is_ref_compatible_impl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_ref_compatible_impl"
  },
  {
    "label": "any_conversion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "any_conversion"
  },
  {
    "label": "yes",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "yes"
  },
  {
    "label": "no",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "no"
  },
  {
    "label": "is_ref_compatible",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "is_ref_compatible"
  },
  {
    "label": "generic_matrix_wrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_matrix_wrapper"
  },
  {
    "label": "generic_matrix_wrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_matrix_wrapper"
  },
  {
    "label": "ConstSelfAdjointViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstSelfAdjointViewReturnType"
  },
  {
    "label": "generic_matrix_wrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_matrix_wrapper"
  },
  {
    "label": "ConstSelfAdjointViewReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConstSelfAdjointViewReturnType"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "SimplicialCholesky",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SimplicialCholesky"
  },
  {
    "label": "IterativeSolverBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IterativeSolverBase"
  },
  {
    "label": "stores",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "stores"
  },
  {
    "label": "becomes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "becomes"
  },
  {
    "label": "stores",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "stores"
  },
  {
    "label": "becomes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "becomes"
  },
  {
    "label": "stores",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "stores"
  },
  {
    "label": "becomes",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "becomes"
  },
  {
    "label": "any_conversion()",
    "kind": "Method",
    "detail": "Function (T>)",
    "insertText": "any_conversion(const volatile T&)"
  },
  {
    "label": "any_conversion()",
    "kind": "Method",
    "detail": "Function (T>)",
    "insertText": "any_conversion(T&)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (yes)",
    "insertText": "test(const Ref<const T>&, int)"
  },
  {
    "label": "test()",
    "kind": "Method",
    "detail": "Function (no)",
    "insertText": "test(any_conversion<T>, ...)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "derived()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "derived()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "derived()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "derived()"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "derived()"
  },
  {
    "label": "xk()",
    "kind": "Method",
    "detail": "Function (DestDerived::ColXpr)",
    "insertText": "xk(dest,k)"
  },
  {
    "label": "bk()",
    "kind": "Method",
    "detail": "Function (Rhs::ConstColXpr)",
    "insertText": "bk(b,k)"
  }
]