[
  {
    "label": "FPrimitiveSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveSceneProxy"
  },
  {
    "label": "FBatchedLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedLine"
  },
  {
    "label": "FBatchedPoint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedPoint"
  },
  {
    "label": "FBatchedMesh",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBatchedMesh"
  },
  {
    "label": "ULineBatchComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULineBatchComponent"
  },
  {
    "label": "ELevelTick",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ELevelTick"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Components / PrimitiveComponent . h \" # include \" LineBatchComponent . generated . h \" class FPrimitiveSceneProxy ;)",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY() UPROPERTY()"
  },
  {
    "label": "FBatchedLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBatchedLine() : Start(ForceInit) , End(ForceInit) , Color(ForceInit) , Thickness(0) , RemainingLifeTime(0) , DepthPriority(0) , BatchID(0)"
  },
  {
    "label": "FBatchedLine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBatchedLine(const FVector& InStart, const FVector& InEnd, const FLinearColor& InColor, float InLifeTime, float InThickness, uint8 InDepthPriority, uint32 InBatchID = 0) : Start(InStart) , End(InEnd) , Color(InColor) , Thickness(InThickness) , RemainingLifeTime(InLifeTime) , DepthPriority(InDepthPriority) , BatchID(InBatchID)"
  },
  {
    "label": "FBatchedPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBatchedPoint() : Position(ForceInit) , Color(ForceInit) , PointSize(0) , RemainingLifeTime(0) , DepthPriority(0) , BatchID(0)"
  },
  {
    "label": "FBatchedPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FBatchedPoint(const FVector& InPosition, const FLinearColor& InColor, float InPointSize, float InLifeTime, uint8 InDepthPriority, uint32 InBatchID = 0) : Position(InPosition) , Color(InColor) , PointSize(InPointSize) , RemainingLifeTime(InLifeTime) , DepthPriority(InDepthPriority) , BatchID(InBatchID)"
  },
  {
    "label": "FBatchedMesh()",
    "kind": "Method",
    "detail": "Function (} } ; struct FBatchedMesh {)",
    "insertText": "FBatchedMesh()"
  },
  {
    "label": "FBatchedMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBatchedMesh(TArray<FVector> const& InMeshVerts, TArray<int32> const& InMeshIndices, FColor const& InColor, uint8 InDepthPriority, float LifeTime, uint32 InBatchID = 0) : MeshVerts(InMeshVerts), MeshIndices(InMeshIndices), Color(InColor), RemainingLifeTime(LifeTime), DepthPriority(InDepthPriority), BatchID(InBatchID)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} TArray<FVector> MeshVerts ; TArray<int32> MeshIndices ; FColor Color ; float RemainingLifeTime = 0 . f ; uint8 DepthPriority = 0 ; uint32 BatchID = 0 ; } ;)",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY()"
  },
  {
    "label": "DrawLines()",
    "kind": "Method",
    "detail": "Function (TArray<FBatchedPoint> BatchedPoints ; float DefaultLifeTime ; TArray<FBatchedMesh> BatchedMeshes ; uint32 bCalculateAccurateBounds : 1 ; uint32 INVALID_ID = 0 ; void)",
    "insertText": "DrawLines(TArrayView<FBatchedLine> InLines)"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBox(const FBox& Box, const FMatrix& TM, FLinearColor Color, uint8 InDepthPriorityGroup, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBox(const FVector& Center, const FVector& Box, FLinearColor Color, float LifeTime, uint8 DepthPriority, float Thickness, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBox(const FVector& Center, const FVector& Box, const FQuat& Rotation, FLinearColor Color, float LifeTime, uint8 DepthPriority, float Thickness, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDirectionalArrow(const FMatrix& ArrowToWorld, FLinearColor InColor, float Length, float ArrowSize, uint8 DepthPriority, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawDirectionalArrow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawDirectionalArrow(const FVector& LineStart, const FVector& LineEnd, float ArrowSize, FLinearColor Color, float LifeTime, uint8 DepthPriority, float Thickness, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCircle(const FVector& Base, const FVector& X, const FVector& Y, FLinearColor Color, float Radius, int32 NumSides, uint8 DepthPriority, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawSphere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSphere(const FVector& Center, float Radius, int32 Segments, FLinearColor Color, float LifeTime, uint8 DepthPriority, float Thickness, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCylinder(const FVector& Start, const FVector& End, float Radius, int32 Segments, FLinearColor Color, float LifeTime, uint8 DepthPriority, float Thickness, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawCone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCone(const FVector& Origin, const FVector& Direction, float Length, float AngleWidth, float AngleHeight, int32 NumSides, FLinearColor DrawColor, float LifeTime, uint8 DepthPriority, float Thickness, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawCapsule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawCapsule(const FVector& Center, float HalfHeight, float Radius, const FQuat& Rotation, FLinearColor Color, float LifeTime, uint8 DepthPriority, float Thickness, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawLine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawLine(const FVector& Start, const FVector& End, const FLinearColor& Color, uint8 DepthPriority, float Thickness = 0.0f, float LifeTime = 0.0f, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawPoint(const FVector& Position, const FLinearColor& Color, float PointSize, uint8 DepthPriority, float LifeTime = 0.0f, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawSolidBox()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawSolidBox(FBox const& Box, FTransform const& Xform, const FColor& Color, uint8 DepthPriority, float LifeTime, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "DrawMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawMesh(TArray<FVector> const& Verts, TArray<int32> const& Indices, FColor const& Color, uint8 DepthPriority, float LifeTime, uint32 BatchID = INVALID_ID)"
  },
  {
    "label": "CreateSceneProxy()",
    "kind": "Method",
    "detail": "Function (FPrimitiveSceneProxy*)",
    "insertText": "CreateSceneProxy()"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "TickComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickComponent(float DeltaTime, enum ELevelTick TickType, FActorComponentTickFunction *ThisTickFunction)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset, bool bWorldShift)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "ClearBatch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearBatch(uint32 InBatchID)"
  },
  {
    "label": "AddHalfCircle()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "AddHalfCircle(const FVector& Base, const FVector& X, const FVector& Y, const FLinearColor& Color, const float Radius, int32 NumSides, const float LifeTime, uint8 DepthPriority, const float Thickness, const uint32 BatchID)"
  },
  {
    "label": "AddCircle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCircle(const FVector& Base, const FVector& X, const FVector& Y, const FLinearColor& Color, const float Radius, int32 NumSides, const float LifeTime, uint8 DepthPriority, const float Thickness, const uint32 BatchID)"
  }
]