[
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_INCLUDE_STB_IMAGE_H # define STBI_INCLUDE_STB_IMAGE_H # ifndef STBI_NO_STDIO # include<stdio . h> # endif # define STBI_VERSION 1 enum { STBI_default = 0,STBI_grey = 1,STBI_grey_alpha = 2,STBI_rgb = 3,STBI_rgb_alpha = 4 } ; # include<stdlib . h> typedef unsigned char stbi_uc ; typedef unsigned short stbi_us ; # ifdef __cplusplus \" C \" { # endif # ifndef STBIDEF # ifdef STB_IMAGE_STATIC # define STBIDEF # else # define STBIDEF # endif # endif typedef struct {)",
    "insertText": "int(*read) (void *user,char *data,int size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*skip) (void *user,int n)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "int(*eof) (void *user)"
  },
  {
    "label": "stbi_load_from_memory()",
    "kind": "Method",
    "detail": "Function (} stbi_io_callbacks ; STBIDEF stbi_uc*)",
    "insertText": "stbi_load_from_memory(stbi_uc const *buffer, int len , int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_load_from_callbacks()",
    "kind": "Method",
    "detail": "Function (STBIDEF stbi_uc*)",
    "insertText": "stbi_load_from_callbacks(stbi_io_callbacks const *clbk , void *user, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_load()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_STDIO STBIDEF stbi_uc*)",
    "insertText": "stbi_load(char const *filename, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_load_from_file()",
    "kind": "Method",
    "detail": "Function (STBIDEF stbi_uc*)",
    "insertText": "stbi_load_from_file(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_load_gif_from_memory()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_GIF STBIDEF stbi_uc*)",
    "insertText": "stbi_load_gif_from_memory(stbi_uc const *buffer, int len, int **delays, int *x, int *y, int *z, int *comp, int req_comp)"
  },
  {
    "label": "stbi_convert_wchar_to_utf8()",
    "kind": "Method",
    "detail": "Function (# endif # ifdef STBI_WINDOWS_UTF8 STBIDEF int)",
    "insertText": "stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)"
  },
  {
    "label": "stbi_load_16_from_memory()",
    "kind": "Method",
    "detail": "Function (# endif STBIDEF stbi_us*)",
    "insertText": "stbi_load_16_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_load_16_from_callbacks()",
    "kind": "Method",
    "detail": "Function (STBIDEF stbi_us*)",
    "insertText": "stbi_load_16_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_load_16()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_STDIO STBIDEF stbi_us*)",
    "insertText": "stbi_load_16(char const *filename, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_load_from_file_16()",
    "kind": "Method",
    "detail": "Function (STBIDEF stbi_us*)",
    "insertText": "stbi_load_from_file_16(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_loadf_from_memory()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_LINEAR STBIDEF float*)",
    "insertText": "stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_loadf_from_callbacks()",
    "kind": "Method",
    "detail": "Function (STBIDEF float*)",
    "insertText": "stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_loadf()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_STDIO STBIDEF float*)",
    "insertText": "stbi_loadf(char const *filename, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_loadf_from_file()",
    "kind": "Method",
    "detail": "Function (STBIDEF float*)",
    "insertText": "stbi_loadf_from_file(FILE *f, int *x, int *y, int *channels_in_file, int desired_channels)"
  },
  {
    "label": "stbi_hdr_to_ldr_gamma()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifndef STBI_NO_HDR STBIDEF void)",
    "insertText": "stbi_hdr_to_ldr_gamma(float gamma)"
  },
  {
    "label": "stbi_hdr_to_ldr_scale()",
    "kind": "Method",
    "detail": "Function (STBIDEF void)",
    "insertText": "stbi_hdr_to_ldr_scale(float scale)"
  },
  {
    "label": "stbi_ldr_to_hdr_gamma()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_LINEAR STBIDEF void)",
    "insertText": "stbi_ldr_to_hdr_gamma(float gamma)"
  },
  {
    "label": "stbi_ldr_to_hdr_scale()",
    "kind": "Method",
    "detail": "Function (STBIDEF void)",
    "insertText": "stbi_ldr_to_hdr_scale(float scale)"
  },
  {
    "label": "stbi_is_hdr_from_callbacks()",
    "kind": "Method",
    "detail": "Function (# endif STBIDEF int)",
    "insertText": "stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)"
  },
  {
    "label": "stbi_is_hdr_from_memory()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)"
  },
  {
    "label": "stbi_is_hdr()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_STDIO STBIDEF int)",
    "insertText": "stbi_is_hdr(char const *filename)"
  },
  {
    "label": "stbi_is_hdr_from_file()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_is_hdr_from_file(FILE *f)"
  },
  {
    "label": "stbi_failure_reason()",
    "kind": "Method",
    "detail": "Function (# endif STBIDEF const char*)",
    "insertText": "stbi_failure_reason(void)"
  },
  {
    "label": "stbi_image_free()",
    "kind": "Method",
    "detail": "Function (STBIDEF void)",
    "insertText": "stbi_image_free(void *retval_from_stbi_load)"
  },
  {
    "label": "stbi_info_from_memory()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi_info_from_callbacks()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_info_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi_is_16_bit_from_memory()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_is_16_bit_from_memory(stbi_uc const *buffer, int len)"
  },
  {
    "label": "stbi_is_16_bit_from_callbacks()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *clbk, void *user)"
  },
  {
    "label": "stbi_info()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_STDIO STBIDEF int)",
    "insertText": "stbi_info(char const *filename, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi_info_from_file()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_info_from_file(FILE *f, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi_is_16_bit()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_is_16_bit(char const *filename)"
  },
  {
    "label": "stbi_is_16_bit_from_file()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_is_16_bit_from_file(FILE *f)"
  },
  {
    "label": "stbi_set_unpremultiply_on_load()",
    "kind": "Method",
    "detail": "Function (# endif STBIDEF void)",
    "insertText": "stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)"
  },
  {
    "label": "stbi_convert_iphone_png_to_rgb()",
    "kind": "Method",
    "detail": "Function (STBIDEF void)",
    "insertText": "stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)"
  },
  {
    "label": "stbi_set_flip_vertically_on_load()",
    "kind": "Method",
    "detail": "Function (STBIDEF void)",
    "insertText": "stbi_set_flip_vertically_on_load(int flag_true_if_should_flip)"
  },
  {
    "label": "stbi_zlib_decode_malloc_guesssize()",
    "kind": "Method",
    "detail": "Function (STBIDEF char*)",
    "insertText": "stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)"
  },
  {
    "label": "stbi_zlib_decode_malloc_guesssize_headerflag()",
    "kind": "Method",
    "detail": "Function (STBIDEF char*)",
    "insertText": "stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)"
  },
  {
    "label": "stbi_zlib_decode_malloc()",
    "kind": "Method",
    "detail": "Function (STBIDEF char*)",
    "insertText": "stbi_zlib_decode_malloc(const char *buffer, int len, int *outlen)"
  },
  {
    "label": "stbi_zlib_decode_buffer()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_zlib_decode_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)"
  },
  {
    "label": "stbi_zlib_decode_noheader_malloc()",
    "kind": "Method",
    "detail": "Function (STBIDEF char*)",
    "insertText": "stbi_zlib_decode_noheader_malloc(const char *buffer, int len, int *outlen)"
  },
  {
    "label": "stbi_zlib_decode_noheader_buffer()",
    "kind": "Method",
    "detail": "Function (STBIDEF int)",
    "insertText": "stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } # endif # endif # ifdef STB_IMAGE_IMPLEMENTATION # if)",
    "insertText": "defined(STBI_ONLY_JPEG) || defined(STBI_ONLY_PNG) || defined(STBI_ONLY_BMP) \\ || defined(STBI_ONLY_TGA) || defined(STBI_ONLY_GIF) || defined(STBI_ONLY_PSD) \\ || defined(STBI_ONLY_HDR) || defined(STBI_ONLY_PIC) || defined(STBI_ONLY_PNM) \\ || defined(STBI_ONLY_ZLIB) #ifndef STBI_ONLY_JPEG #define STBI_NO_JPEG #endif #ifndef STBI_ONLY_PNG #define STBI_NO_PNG #endif #ifndef STBI_ONLY_BMP #define STBI_NO_BMP #endif #ifndef STBI_ONLY_PSD #define STBI_NO_PSD #endif #ifndef STBI_ONLY_TGA #define STBI_NO_TGA #endif #ifndef STBI_ONLY_GIF #define STBI_NO_GIF #endif #ifndef STBI_ONLY_HDR #define STBI_NO_HDR #endif #ifndef STBI_ONLY_PIC #define STBI_NO_PIC #endif #ifndef STBI_ONLY_PNM #define STBI_NO_PNM #endif #endif #if defined(STBI_NO_PNG) && !defined(STBI_SUPPORT_ZLIB) && !defined(STBI_NO_ZLIB) #define STBI_NO_ZLIB #endif #include <stdarg.h> #include <stddef.h> #include <stdlib.h> #include <string.h> #include <limits.h> #if !defined(STBI_NO_LINEAR) || !defined(STBI_NO_HDR) #include <math.h> #endif #ifndef STBI_NO_STDIO #include <stdio.h> #endif #ifndef STBI_ASSERT #include <assert.h> #define STBI_ASSERT(x) assert(x)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (typedef signed short stbi__int16 ; typedef unsigned int stbi__uint32 ; typedef signed int stbi__int32 ; # else # include<stdint . h> typedef uint16_t stbi__uint16 ; typedef int16_t stbi__int16 ; typedef uint32_t stbi__uint32 ; typedef int32_t stbi__int32 ; # endif typedef unsigned char validate_uint32 [)",
    "insertText": "sizeof(stbi__uint32)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER # define)",
    "insertText": "STBI_NOTUSED(v) (void)(v) #else #define STBI_NOTUSED(v) (void)sizeof(v) #endif #ifdef _MSC_VER #define STBI_HAS_LROTL #endif #ifdef STBI_HAS_LROTL #define stbi_lrot(x,y) _lrotl(x,y) #else #define stbi_lrot(x,y) (((x) << (y)) | ((x) >> (32 - (y)))) #endif #if defined(STBI_MALLOC) && defined(STBI_FREE) && (defined(STBI_REALLOC) || defined(STBI_REALLOC_SIZED)) #elif !defined(STBI_MALLOC) && !defined(STBI_FREE) && !defined(STBI_REALLOC) && !defined(STBI_REALLOC_SIZED) #else #error \"Must define all or none of STBI_MALLOC, STBI_FREE, and STBI_REALLOC (or STBI_REALLOC_SIZED).\" #endif #ifndef STBI_MALLOC #define STBI_MALLOC(sz) malloc(sz) #define STBI_REALLOC(p,newsz) realloc(p,newsz) #define STBI_FREE(p) free(p) #endif #ifndef STBI_REALLOC_SIZED #define STBI_REALLOC_SIZED(p,oldsz,newsz) STBI_REALLOC(p,newsz) #endif #if defined(__x86_64__) || defined(_M_X64) #define STBI__X64_TARGET #elif defined(__i386) || defined(_M_IX86) #define STBI__X86_TARGET #endif #if defined(__GNUC__) && defined(STBI__X86_TARGET) && !defined(__SSE2__) && !defined(STBI_NO_SIMD) #define STBI_NO_SIMD #endif #if defined(__MINGW32__) && defined(STBI__X86_TARGET) && !defined(STBI_MINGW_ENABLE_SSE2) && !defined(STBI_NO_SIMD) #define STBI_NO_SIMD #endif #if !defined(STBI_NO_SIMD) && (defined(STBI__X86_TARGET) || defined(STBI__X64_TARGET)) #define STBI_SSE2 #include <emmintrin.h> #ifdef _MSC_VER #if _MSC_VER >= 1400 #include <intrin.h> static int stbi__cpuid3(void)"
  },
  {
    "label": "__cpuid()",
    "kind": "Method",
    "detail": "Function (int info [ 4 ] ;)",
    "insertText": "__cpuid(info,1)"
  },
  {
    "label": "STBI_SIMD_ALIGN()",
    "kind": "Method",
    "detail": "Function (int res ; __asm { mov eax,1 cpuid mov res,edx } return res ; } # endif # define)",
    "insertText": "STBI_SIMD_ALIGN(type, name) __declspec(align(16)) type name #if !defined(STBI_NO_JPEG) && defined(STBI_SSE2) static int stbi__sse2_available(void)"
  },
  {
    "label": "stbi__cpuid3()",
    "kind": "Method",
    "detail": "Function (int info3 =)",
    "insertText": "stbi__cpuid3()"
  },
  {
    "label": "STBI_SIMD_ALIGN()",
    "kind": "Method",
    "detail": "Function (} # endif # else # define)",
    "insertText": "STBI_SIMD_ALIGN(type, name) type name __attribute__((aligned(16))) #if !defined(STBI_NO_JPEG) && defined(STBI_SSE2) static int stbi__sse2_available(void)"
  },
  {
    "label": "stbi__refill_buffer()",
    "kind": "Method",
    "detail": "Function (stbi__uint32 img_x,img_y ; int img_n,img_out_n ; stbi_io_callbacks io ; void* io_user_data ; int read_from_callbacks ; int buflen ; stbi_uc buffer_start [ 1 2 8 ] ; stbi_uc* img_buffer,* img_buffer_end ; stbi_uc* img_buffer_original,* img_buffer_original_end ; } stbi__context ; void)",
    "insertText": "stbi__refill_buffer(stbi__context *s)"
  },
  {
    "label": "stbi__start_mem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)"
  },
  {
    "label": "img_buffer_original()",
    "kind": "Method",
    "detail": "Function (s -> io . read = NULL ; s -> read_from_callbacks = 0 ; s -> img_buffer = s ->)",
    "insertText": "img_buffer_original(stbi_uc *)"
  },
  {
    "label": "img_buffer_original_end()",
    "kind": "Method",
    "detail": "Function (s -> img_buffer_end = s ->)",
    "insertText": "img_buffer_original_end(stbi_uc *)"
  },
  {
    "label": "stbi__start_callbacks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (s -> io =* c ; s -> io_user_data = user ; s -> buflen =)",
    "insertText": "sizeof(s->buffer_start)"
  },
  {
    "label": "stbi__refill_buffer()",
    "kind": "Method",
    "detail": "Function (s -> read_from_callbacks = 1 ; s -> img_buffer_original = s -> buffer_start ;)",
    "insertText": "stbi__refill_buffer(s)"
  },
  {
    "label": "stbi__stdio_read()",
    "kind": "Method",
    "detail": "Function (s -> img_buffer_original_end = s -> img_buffer_end ; } # ifndef STBI_NO_STDIO int)",
    "insertText": "stbi__stdio_read(void *user, char *data, int size)"
  },
  {
    "label": "stbi__stdio_skip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "stbi__stdio_skip(void *user, int n)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek((FILE*) user, n, SEEK_CUR)"
  },
  {
    "label": "stbi__stdio_eof()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stbi__stdio_eof(void *user)"
  },
  {
    "label": "stbi__start_file()",
    "kind": "Method",
    "detail": "Function (} stbi_io_callbacks stbi__stdio_callbacks = { stbi__stdio_read,stbi__stdio_skip,stbi__stdio_eof,} ; void)",
    "insertText": "stbi__start_file(stbi__context *s, FILE *f)"
  },
  {
    "label": "stbi__start_callbacks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__start_callbacks(s, &stbi__stdio_callbacks, (void *) f)"
  },
  {
    "label": "stbi__rewind()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "stbi__rewind(stbi__context *s)"
  },
  {
    "label": "stbi__jpeg_test()",
    "kind": "Method",
    "detail": "Function (s -> img_buffer = s -> img_buffer_original ; s -> img_buffer_end = s -> img_buffer_original_end ; } enum { STBI_ORDER_RGB,STBI_ORDER_BGR } ; typedef struct { int bits_per_channel ; int num_channels ; int channel_order ; } stbi__result_info ; # ifndef STBI_NO_JPEG int)",
    "insertText": "stbi__jpeg_test(stbi__context *s)"
  },
  {
    "label": "stbi__jpeg_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__jpeg_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__png_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PNG int)",
    "insertText": "stbi__png_test(stbi__context *s)"
  },
  {
    "label": "stbi__png_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__png_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__png_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__png_is16()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__png_is16(stbi__context *s)"
  },
  {
    "label": "stbi__bmp_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_BMP int)",
    "insertText": "stbi__bmp_test(stbi__context *s)"
  },
  {
    "label": "stbi__bmp_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__bmp_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__tga_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_TGA int)",
    "insertText": "stbi__tga_test(stbi__context *s)"
  },
  {
    "label": "stbi__tga_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__tga_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__psd_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PSD int)",
    "insertText": "stbi__psd_test(stbi__context *s)"
  },
  {
    "label": "stbi__psd_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)"
  },
  {
    "label": "stbi__psd_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__psd_is16()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__psd_is16(stbi__context *s)"
  },
  {
    "label": "stbi__hdr_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_HDR int)",
    "insertText": "stbi__hdr_test(stbi__context *s)"
  },
  {
    "label": "stbi__hdr_load()",
    "kind": "Method",
    "detail": "Function (float*)",
    "insertText": "stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__hdr_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__pic_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PIC int)",
    "insertText": "stbi__pic_test(stbi__context *s)"
  },
  {
    "label": "stbi__pic_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__pic_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__pic_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__gif_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_GIF int)",
    "insertText": "stbi__gif_test(stbi__context *s)"
  },
  {
    "label": "stbi__gif_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__load_gif_main()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__load_gif_main(stbi__context *s, int **delays, int *x, int *y, int *z, int *comp, int req_comp)"
  },
  {
    "label": "stbi__gif_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__pnm_test()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PNM int)",
    "insertText": "stbi__pnm_test(stbi__context *s)"
  },
  {
    "label": "stbi__pnm_load()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "stbi__pnm_info()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__malloc()",
    "kind": "Method",
    "detail": "Function (stbi__g_failure_reason = str ; return 0 ; } void*)",
    "insertText": "stbi__malloc(size_t size)"
  },
  {
    "label": "stbi__addsizes_valid()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stbi__addsizes_valid(int a, int b)"
  },
  {
    "label": "stbi__mad3sizes_valid()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stbi__mad3sizes_valid(int a, int b, int c, int add)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(STBI_NO_LINEAR) || !defined(STBI_NO_HDR) static int stbi__mad4sizes_valid(int a, int b, int c, int d, int add)"
  },
  {
    "label": "stbi__malloc_mad2()",
    "kind": "Method",
    "detail": "Function (} # endif void*)",
    "insertText": "stbi__malloc_mad2(int a, int b, int add)"
  },
  {
    "label": "stbi__malloc_mad3()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "stbi__malloc_mad3(int a, int b, int c, int add)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(STBI_NO_LINEAR) || !defined(STBI_NO_HDR) static void *stbi__malloc_mad4(int a, int b, int c, int d, int add)"
  },
  {
    "label": "stbi__err()",
    "kind": "Method",
    "detail": "Function (} # endif # ifdef STBI_NO_FAILURE_STRINGS # define)",
    "insertText": "stbi__err(x,y) 0 #elif defined(STBI_FAILURE_USERMSG) #define stbi__err(x,y) stbi__err(y) #else #define stbi__err(x,y) stbi__err(x) #endif #define stbi__errpf(x,y) ((float *)(size_t) (stbi__err(x,y)?NULL:NULL)) #define stbi__errpuc(x,y) ((unsigned char *)(size_t) (stbi__err(x,y)?NULL:NULL)) STBIDEF void stbi_image_free(void *retval_from_stbi_load)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(retval_from_stbi_load)"
  },
  {
    "label": "stbi__ldr_to_hdr()",
    "kind": "Method",
    "detail": "Function (} # ifndef STBI_NO_LINEAR float*)",
    "insertText": "stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)"
  },
  {
    "label": "stbi__hdr_to_ldr()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_HDR stbi_uc*)",
    "insertText": "stbi__hdr_to_ldr(float *data, int x, int y, int comp)"
  },
  {
    "label": "stbi__load_main()",
    "kind": "Method",
    "detail": "Function (stbi__vertically_flip_on_load = flag_true_if_should_flip ; } void*)",
    "insertText": "stbi__load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp, stbi__result_info *ri, int bpc)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(ri, 0, sizeof(*ri))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ri -> bits_per_channel = 8 ; ri -> channel_order = STBI_ORDER_RGB ; ri -> num_channels = 0 ; # ifndef STBI_NO_JPEG)",
    "insertText": "if(stbi__jpeg_test(s)) return stbi__jpeg_load(s,x,y,comp,req_comp, ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PNG)",
    "insertText": "if(stbi__png_test(s)) return stbi__png_load(s,x,y,comp,req_comp, ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_BMP)",
    "insertText": "if(stbi__bmp_test(s)) return stbi__bmp_load(s,x,y,comp,req_comp, ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_GIF)",
    "insertText": "if(stbi__gif_test(s)) return stbi__gif_load(s,x,y,comp,req_comp, ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PSD)",
    "insertText": "if(stbi__psd_test(s)) return stbi__psd_load(s,x,y,comp,req_comp, ri, bpc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PIC)",
    "insertText": "if(stbi__pic_test(s)) return stbi__pic_load(s,x,y,comp,req_comp, ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PNM)",
    "insertText": "if(stbi__pnm_test(s)) return stbi__pnm_load(s,x,y,comp,req_comp, ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_HDR)",
    "insertText": "if(stbi__hdr_test(s))"
  },
  {
    "label": "stbi__hdr_load()",
    "kind": "Method",
    "detail": "Function (float* hdr =)",
    "insertText": "stbi__hdr_load(s, x,y,comp,req_comp, ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef STBI_NO_TGA)",
    "insertText": "if(stbi__tga_test(s)) return stbi__tga_load(s,x,y,comp,req_comp, ri)"
  },
  {
    "label": "stbi__errpuc()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "stbi__errpuc(\"unknown image type\", \"Image not of any known type, or corrupt\")"
  },
  {
    "label": "stbi__convert_16_to_8()",
    "kind": "Method",
    "detail": "Function (} stbi_uc*)",
    "insertText": "stbi__convert_16_to_8(stbi__uint16 *orig, int w, int h, int channels)"
  },
  {
    "label": "reduced()",
    "kind": "Method",
    "detail": "Function (int i ; int img_len = w* h* channels ; stbi_uc* reduced ;)",
    "insertText": "reduced(stbi_uc *) stbi__malloc(img_len)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(orig)"
  },
  {
    "label": "enlarged()",
    "kind": "Method",
    "detail": "Function (int i ; int img_len = w* h* channels ; stbi__uint16* enlarged ;)",
    "insertText": "enlarged(stbi__uint16 *) stbi__malloc(img_len*2)"
  },
  {
    "label": "bytes_per_row()",
    "kind": "Method",
    "detail": "Function (int row ; size_t)",
    "insertText": "bytes_per_row(size_t)"
  },
  {
    "label": "bytes()",
    "kind": "Method",
    "detail": "Function (stbi_uc temp [ 2 0 4 8 ] ; stbi_uc*)",
    "insertText": "bytes(stbi_uc *)"
  },
  {
    "label": "bytes()",
    "kind": "Method",
    "detail": "Function (stbi_uc* row0 = bytes + row* bytes_per_row ; stbi_uc* row1 =)",
    "insertText": "bytes(h - row - 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (size_t bytes_left = bytes_per_row ;)",
    "insertText": "while(bytes_left)"
  },
  {
    "label": "bytes_copy()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytes_copy(bytes_left < sizeof(temp)) ? bytes_left : sizeof(temp)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(temp, row0, bytes_copy)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(row0, row1, bytes_copy)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(row1, temp, bytes_copy)"
  },
  {
    "label": "stbi__vertical_flip_slices()",
    "kind": "Method",
    "detail": "Function (row0 + = bytes_copy ; row1 + = bytes_copy ; bytes_left - = bytes_copy ; } } } # ifndef STBI_NO_GIF void)",
    "insertText": "stbi__vertical_flip_slices(void *image, int w, int h, int z, int bytes_per_pixel)"
  },
  {
    "label": "stbi__vertical_flip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__vertical_flip(bytes, w, h, bytes_per_pixel)"
  },
  {
    "label": "stbi__load_and_postprocess_8bit()",
    "kind": "Method",
    "detail": "Function (bytes + = slice_size ; } } # endif unsigned char*)",
    "insertText": "stbi__load_and_postprocess_8bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi__load_main()",
    "kind": "Method",
    "detail": "Function (stbi__result_info ri ; void* result =)",
    "insertText": "stbi__load_main(s, x, y, comp, req_comp, &ri, 8)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(ri.bits_per_channel == 16)"
  },
  {
    "label": "stbi__convert_16_to_8()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi__convert_16_to_8((stbi__uint16 *) result, *x, *y, req_comp == 0 ? *comp : req_comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ri . bits_per_channel = 8 ; })",
    "insertText": "if(stbi__vertically_flip_on_load)"
  },
  {
    "label": "stbi__vertical_flip()",
    "kind": "Method",
    "detail": "Function (int channels = req_comp ? req_comp :* comp ;)",
    "insertText": "stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi_uc))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(unsigned char *)"
  },
  {
    "label": "stbi__load_and_postprocess_16bit()",
    "kind": "Method",
    "detail": "Function (} stbi__uint16*)",
    "insertText": "stbi__load_and_postprocess_16bit(stbi__context *s, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi__load_main()",
    "kind": "Method",
    "detail": "Function (stbi__result_info ri ; void* result =)",
    "insertText": "stbi__load_main(s, x, y, comp, req_comp, &ri, 16)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(ri.bits_per_channel == 8)"
  },
  {
    "label": "stbi__convert_8_to_16()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi__convert_8_to_16((stbi_uc *) result, *x, *y, req_comp == 0 ? *comp : req_comp)"
  },
  {
    "label": "stbi__vertical_flip()",
    "kind": "Method",
    "detail": "Function (int channels = req_comp ? req_comp :* comp ;)",
    "insertText": "stbi__vertical_flip(result, *x, *y, channels * sizeof(stbi__uint16))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(stbi__uint16 *)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if !)",
    "insertText": "defined(STBI_NO_HDR) && !defined(STBI_NO_LINEAR) static void stbi__float_postprocess(float *result, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi__vertical_flip()",
    "kind": "Method",
    "detail": "Function (int channels = req_comp ? req_comp :* comp ;)",
    "insertText": "stbi__vertical_flip(result, *x, *y, channels * sizeof(float))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} } # endif # ifndef STBI_NO_STDIO # if)",
    "insertText": "defined(_MSC_VER) && defined(STBI_WINDOWS_UTF8) STBI_EXTERN __declspec(dllimport) int __stdcall MultiByteToWideChar(unsigned int cp, unsigned long flags, const char *str, int cbmb, wchar_t *widestr, int cchwide)"
  },
  {
    "label": "__declspec()",
    "kind": "Method",
    "detail": "Function (STBI_EXTERN)",
    "insertText": "__declspec(dllimport) int __stdcall WideCharToMultiByte(unsigned int cp, unsigned long flags, const wchar_t *widestr, int cchwide, char *str, int cbmb, const char *defchar, int *used_default)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "defined(_MSC_VER) && defined(STBI_WINDOWS_UTF8) STBIDEF int stbi_convert_wchar_to_utf8(char *buffer, size_t bufferlen, const wchar_t* input)"
  },
  {
    "label": "stbi__fopen()",
    "kind": "Method",
    "detail": "Function (} # endif FILE*)",
    "insertText": "stbi__fopen(char const *filename, char const *mode)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (FILE* f ; # if)",
    "insertText": "defined(_MSC_VER) && defined(STBI_WINDOWS_UTF8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (wchar_t wFilename [ 1 0 2 4 ] ;)",
    "insertText": "if(0 == MultiByteToWideChar(65001 , 0, filename, -1, wFilename, sizeof(wFilename)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if _MSC_VER> = 1 4 0 0)",
    "insertText": "if(0 != _wfopen_s(&f, wFilename, wMode))"
  },
  {
    "label": "_wfopen()",
    "kind": "Method",
    "detail": "Function (# else f =)",
    "insertText": "_wfopen(wFilename, wMode)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # elif)",
    "insertText": "defined(_MSC_VER) && _MSC_VER >= 1400 if (0 != fopen_s(&f, filename, mode))"
  },
  {
    "label": "fopen()",
    "kind": "Method",
    "detail": "Function (# else f =)",
    "insertText": "fopen(filename, mode)"
  },
  {
    "label": "stbi_load()",
    "kind": "Method",
    "detail": "Function (# endif return f ; } STBIDEF stbi_uc*)",
    "insertText": "stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi__fopen()",
    "kind": "Method",
    "detail": "Function (FILE* f =)",
    "insertText": "stbi__fopen(filename, \"rb\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned char* result ;)",
    "insertText": "if(!f) return stbi__errpuc(\"can't fopen\", \"Unable to open file\")"
  },
  {
    "label": "stbi_load_from_file()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi_load_from_file(f,x,y,comp,req_comp)"
  },
  {
    "label": "fclose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fclose(f)"
  },
  {
    "label": "stbi__start_file()",
    "kind": "Method",
    "detail": "Function (unsigned char* result ; stbi__context s ;)",
    "insertText": "stbi__start_file(&s,f)"
  },
  {
    "label": "stbi__load_and_postprocess_8bit()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi__load_and_postprocess_8bit(&s,x,y,comp,req_comp)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek(f, - (int) (s.img_buffer_end - s.img_buffer), SEEK_CUR)"
  },
  {
    "label": "stbi_load_from_file_16()",
    "kind": "Method",
    "detail": "Function (} return result ; } STBIDEF stbi__uint16*)",
    "insertText": "stbi_load_from_file_16(FILE *f, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi__load_and_postprocess_16bit()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi__load_and_postprocess_16bit(&s,x,y,comp,req_comp)"
  },
  {
    "label": "stbi_load_16()",
    "kind": "Method",
    "detail": "Function (} return result ; } STBIDEF stbi_us*)",
    "insertText": "stbi_load_16(char const *filename, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi__uint16* result ;)",
    "insertText": "if(!f) return (stbi_us *) stbi__errpuc(\"can't fopen\", \"Unable to open file\")"
  },
  {
    "label": "stbi_load_from_file_16()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi_load_from_file_16(f,x,y,comp,req_comp)"
  },
  {
    "label": "stbi__start_mem()",
    "kind": "Method",
    "detail": "Function (stbi__context s ;)",
    "insertText": "stbi__start_mem(&s,buffer,len)"
  },
  {
    "label": "stbi__start_callbacks()",
    "kind": "Method",
    "detail": "Function (stbi__context s ;)",
    "insertText": "stbi__start_callbacks(&s, (stbi_io_callbacks *)clbk, user)"
  },
  {
    "label": "stbi_load_from_memory()",
    "kind": "Method",
    "detail": "Function (} STBIDEF stbi_uc*)",
    "insertText": "stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi_load_from_callbacks()",
    "kind": "Method",
    "detail": "Function (} STBIDEF stbi_uc*)",
    "insertText": "stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi__start_callbacks()",
    "kind": "Method",
    "detail": "Function (stbi__context s ;)",
    "insertText": "stbi__start_callbacks(&s, (stbi_io_callbacks *) clbk, user)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(unsigned char*) stbi__load_gif_main(&s, delays, x, y, z, comp, req_comp)"
  },
  {
    "label": "stbi__vertical_flip_slices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__vertical_flip_slices(result, *x, *y, *z, *comp)"
  },
  {
    "label": "stbi__loadf_main()",
    "kind": "Method",
    "detail": "Function (} return result ; } # endif # ifndef STBI_NO_LINEAR float*)",
    "insertText": "stbi__loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi__hdr_load()",
    "kind": "Method",
    "detail": "Function (stbi__result_info ri ; float* hdr_data =)",
    "insertText": "stbi__hdr_load(s,x,y,comp,req_comp, &ri)"
  },
  {
    "label": "stbi_loadf_from_memory()",
    "kind": "Method",
    "detail": "Function (} STBIDEF float*)",
    "insertText": "stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi_loadf_from_callbacks()",
    "kind": "Method",
    "detail": "Function (} STBIDEF float*)",
    "insertText": "stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi_loadf()",
    "kind": "Method",
    "detail": "Function (} # ifndef STBI_NO_STDIO STBIDEF float*)",
    "insertText": "stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)"
  },
  {
    "label": "stbi_loadf_from_file()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi_loadf_from_file(f,x,y,comp,req_comp)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "STBI_NOTUSED(buffer)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int result = 0 ;)",
    "insertText": "if(f)"
  },
  {
    "label": "stbi_is_hdr_from_file()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi_is_hdr_from_file(f)"
  },
  {
    "label": "ftell()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_HDR long pos =)",
    "insertText": "ftell(f)"
  },
  {
    "label": "stbi__hdr_test()",
    "kind": "Method",
    "detail": "Function (res =)",
    "insertText": "stbi__hdr_test(&s)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek(f, pos, SEEK_SET)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "STBI_NOTUSED(clbk)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(user)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "n(s->io.read)(s->io_user_data,(char*)s->buffer_start,s->buflen)"
  },
  {
    "label": "stbi__get8()",
    "kind": "Method",
    "detail": "Function (s -> read_from_callbacks = 0 ; s -> img_buffer = s -> buffer_start ; s -> img_buffer_end = s -> buffer_start + 1 ;* s -> img_buffer = 0 ; } else { s -> img_buffer = s -> buffer_start ; s -> img_buffer_end = s -> buffer_start + n ; } } stbi_inline stbi_uc)",
    "insertText": "stbi__get8(stbi__context *s)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (} return s -> img_buffer> = s -> img_buffer_end ; } void)",
    "insertText": "stbi__skip(stbi__context *s, int n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s -> img_buffer = s -> img_buffer_end ; return ; })",
    "insertText": "if(s->io.read)"
  },
  {
    "label": "blen()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "blen(int) (s->img_buffer_end - s->img_buffer)"
  },
  {
    "label": "img_buffer_end()",
    "kind": "Method",
    "detail": "Function (s -> img_buffer = s ->)",
    "insertText": "img_buffer_end(s->io.skip)(s->io_user_data, n - blen)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (int res,count ;)",
    "insertText": "memcpy(buffer, s->img_buffer, blen)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "count(s->io.read)(s->io_user_data, (char*) buffer + blen, n - blen)"
  },
  {
    "label": "res()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "res(count == (n-blen))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s -> img_buffer = s -> img_buffer_end ; return res ; } })",
    "insertText": "if(s->img_buffer+n <= s->img_buffer_end)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(buffer, s->img_buffer, n)"
  },
  {
    "label": "stbi__get16be()",
    "kind": "Method",
    "detail": "Function (s -> img_buffer + = n ; return 1 ; } else return 0 ; } int)",
    "insertText": "stbi__get16be(stbi__context *s)"
  },
  {
    "label": "stbi__get8()",
    "kind": "Method",
    "detail": "Function (int z =)",
    "insertText": "stbi__get8(s)"
  },
  {
    "label": "stbi__get32be()",
    "kind": "Method",
    "detail": "Function (} stbi__uint32)",
    "insertText": "stbi__get32be(stbi__context *s)"
  },
  {
    "label": "stbi__get16be()",
    "kind": "Method",
    "detail": "Function (stbi__uint32 z =)",
    "insertText": "stbi__get16be(s)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (} # if)",
    "insertText": "defined(STBI_NO_BMP) && defined(STBI_NO_TGA) && defined(STBI_NO_GIF) #else static int stbi__get16le(stbi__context *s)"
  },
  {
    "label": "stbi__get32le()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef STBI_NO_BMP stbi__uint32)",
    "insertText": "stbi__get32le(stbi__context *s)"
  },
  {
    "label": "stbi__get16le()",
    "kind": "Method",
    "detail": "Function (stbi__uint32 z =)",
    "insertText": "stbi__get16le(s)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (} # endif # define)",
    "insertText": "STBI__BYTECAST(x) ((stbi_uc) ((x) & 255)) static stbi_uc stbi__compute_y(int r, int g, int b)"
  },
  {
    "label": "stbi__convert_format()",
    "kind": "Method",
    "detail": "Function (} unsigned char*)",
    "insertText": "stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i,j ; unsigned char* good ;)",
    "insertText": "if(req_comp == img_n)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(req_comp >= 1 && req_comp <= 4)"
  },
  {
    "label": "good()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "good(unsigned char *) stbi__malloc_mad3(req_comp, x, y, 0)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(j=0; j < (int) y; ++j)"
  },
  {
    "label": "STBI__COMBO()",
    "kind": "Method",
    "detail": "Function (unsigned char* src = data + j* x* img_n ; unsigned char* dest = good + j* x* req_comp ; # define)",
    "insertText": "STBI__COMBO(a,b) ((a)*8+(b)) #define STBI__CASE(a,b) case STBI__COMBO(a,b): for(i=x-1; i >= 0; --i, src += a, dest += b) switch (STBI__COMBO(img_n, req_comp))"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI__CASE(1,2)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = src [ 0 ] ; dest [ 1 ] = 2 5 5 ; } break ;)",
    "insertText": "STBI__CASE(1,3)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = dest [ 1 ] = dest [ 2 ] = src [ 0 ] ; } break ;)",
    "insertText": "STBI__CASE(1,4)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = dest [ 1 ] = dest [ 2 ] = src [ 0 ] ; dest [ 3 ] = 2 5 5 ; } break ;)",
    "insertText": "STBI__CASE(2,1)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = src [ 0 ] ; } break ;)",
    "insertText": "STBI__CASE(2,3)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = dest [ 1 ] = dest [ 2 ] = src [ 0 ] ; } break ;)",
    "insertText": "STBI__CASE(2,4)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = dest [ 1 ] = dest [ 2 ] = src [ 0 ] ; dest [ 3 ] = src [ 1 ] ; } break ;)",
    "insertText": "STBI__CASE(3,4)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = src [ 0 ] ; dest [ 1 ] = src [ 1 ] ; dest [ 2 ] = src [ 2 ] ; dest [ 3 ] = 2 5 5 ; } break ;)",
    "insertText": "STBI__CASE(3,1)"
  },
  {
    "label": "stbi__compute_y()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] =)",
    "insertText": "stbi__compute_y(src[0],src[1],src[2])"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (} break ;)",
    "insertText": "STBI__CASE(3,2)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 1 ] = 2 5 5 ; } break ;)",
    "insertText": "STBI__CASE(4,1)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (} break ;)",
    "insertText": "STBI__CASE(4,2)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (dest [ 1 ] = src [ 3 ] ; } break ;)",
    "insertText": "STBI__CASE(4,3)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] = src [ 0 ] ; dest [ 1 ] = src [ 1 ] ; dest [ 2 ] = src [ 2 ] ; } break ; default :)",
    "insertText": "STBI_ASSERT(0)"
  },
  {
    "label": "stbi__convert_format16()",
    "kind": "Method",
    "detail": "Function (} stbi__uint16*)",
    "insertText": "stbi__convert_format16(stbi__uint16 *data, int img_n, int req_comp, unsigned int x, unsigned int y)"
  },
  {
    "label": "good()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "good(stbi__uint16 *) stbi__malloc(req_comp * x * y * 2)"
  },
  {
    "label": "stbi__compute_y_16()",
    "kind": "Method",
    "detail": "Function (dest [ 0 ] =)",
    "insertText": "stbi__compute_y_16(src[0],src[1],src[2])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i,k,n ; float* output ;)",
    "insertText": "if(!data)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(float *) stbi__malloc_mad4(x, y, comp, sizeof(float), 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(comp & 1)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (output [ i* comp +)",
    "insertText": "k(float) (pow(data[i*comp+k]/255.0f, stbi__l2h_gamma) * stbi__l2h_scale)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(n < comp)"
  },
  {
    "label": "output()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "output(stbi_uc *) stbi__malloc_mad3(x, y, comp, 0)"
  },
  {
    "label": "z()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "z(float) pow(data[i*comp+k]*stbi__h2l_scale_i, stbi__h2l_gamma_i)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (output [ i* comp +)",
    "insertText": "k(stbi_uc) stbi__float2int(z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(k < comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (float z = data [ i* comp + k ]* 2 5 5 + 0 . 5 f ;)",
    "insertText": "if(z < 0)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "void(*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)"
  },
  {
    "label": "stbi_uc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi_uc(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)"
  },
  {
    "label": "stbi__build_huffman()",
    "kind": "Method",
    "detail": "Function (} stbi__jpeg ; int)",
    "insertText": "stbi__build_huffman(stbi__huffman *h, int *count)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i,j,k = 0 ; unsigned int code ;)",
    "insertText": "for(i=0; i < 16; ++i) for (j=0; j < count[i]; ++j) h->size[k++] = (stbi_uc) (i+1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (h -> size [ k ] = 0 ; code = 0 ; k = 0 ;)",
    "insertText": "for(j=1; j <= 16; ++j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (h -> delta [ j ] = k - code ;)",
    "insertText": "if(h->size[k] == j)"
  },
  {
    "label": "code()",
    "kind": "Method",
    "detail": "Function (} h -> maxcode [ j ] =)",
    "insertText": "code(16-j)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (code<<= 1 ; } h -> maxcode [ j ] = 0 xffffffff ;)",
    "insertText": "memset(h->fast, 255, 1 << FAST_BITS)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int s = h -> size [ i ] ;)",
    "insertText": "if(s <= FAST_BITS)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (int c = h -> code [)",
    "insertText": "i(FAST_BITS-s)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "m(FAST_BITS-s)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (h -> fast [ c +)",
    "insertText": "j(stbi_uc)"
  },
  {
    "label": "stbi__build_fast_ac()",
    "kind": "Method",
    "detail": "Function (} } } return 1 ; } void)",
    "insertText": "stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i < (1 << FAST_BITS); ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc fast = h -> fast [ i ] ; fast_ac [ i ] = 0 ;)",
    "insertText": "if(fast < 255)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (int rs = h -> values [ fast ] ; int)",
    "insertText": "run(rs >> 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int magbits = rs& 1 5 ; int len = h -> size [ fast ] ;)",
    "insertText": "if(magbits && len + magbits <= FAST_BITS)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "k((i << len) & ((1 << FAST_BITS) - 1)) >> (FAST_BITS - magbits)"
  },
  {
    "label": "m()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "m(magbits - 1)"
  },
  {
    "label": "stbi__grow_buffer_unsafe()",
    "kind": "Method",
    "detail": "Function (} } } } void)",
    "insertText": "stbi__grow_buffer_unsafe(stbi__jpeg *j)"
  },
  {
    "label": "stbi__get8()",
    "kind": "Method",
    "detail": "Function (int c =)",
    "insertText": "stbi__get8(j->s)"
  },
  {
    "label": "marker()",
    "kind": "Method",
    "detail": "Function (j ->)",
    "insertText": "marker(unsigned char)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (j -> nomore = 1 ; return ; } } j -> code_buffer | =)",
    "insertText": "b(24 - j->code_bits)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (j -> code_bits + = 8 ; })",
    "insertText": "while(j->code_bits <= 24)"
  },
  {
    "label": "stbi__jpeg_huff_decode()",
    "kind": "Method",
    "detail": "Function (} const stbi__uint32 stbi__bmask [ 1 7 ] = { 0,1,3,7,1 5,3 1,6 3,1 2 7,2 5 5,5 1 1,1 0 2 3,2 0 4 7,4 0 9 5,8 1 9 1,1 6 3 8 3,3 2 7 6 7,6 5 5 3 5 } ; stbi_inline int)",
    "insertText": "stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned int temp ; int c,k ;)",
    "insertText": "if(j->code_bits < 16) stbi__grow_buffer_unsafe(j)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "c(j->code_buffer >> (32 - FAST_BITS)) & ((1 << FAST_BITS)-1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (k = h -> fast [ c ] ;)",
    "insertText": "if(k < 255)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int s = h -> size [ k ] ;)",
    "insertText": "if(s > j->code_bits)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (j -> code_buffer<<= s ; j -> code_bits - = s ; return h -> values [ k ] ; } temp = j -> code_buffer>> 1 6 ;)",
    "insertText": "for(k=FAST_BITS+1 ; ; ++k) if (temp < h->maxcode[k])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (j -> code_bits - = 1 6 ; return - 1 ; })",
    "insertText": "if(k > j->code_bits)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (delta[k])",
    "insertText": "c((j->code_buffer >> (32 - k)) & stbi__bmask[k])"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT((((j->code_buffer) >> (32 - h->size[c])) & stbi__bmask[h->size[c]]) == h->code[c])"
  },
  {
    "label": "stbi__extend_receive()",
    "kind": "Method",
    "detail": "Function (j -> code_bits - = k ; j -> code_buffer<<= k ; return h -> values [ c ] ; } const int stbi__jbias [ 1 6 ] = { 0,- 1,- 3,- 7,- 1 5,- 3 1,- 6 3,- 1 2 7,- 2 5 5,- 5 1 1,- 1 0 2 3,- 2 0 4 7,- 4 0 9 5,- 8 1 9 1,- 1 6 3 8 3,- 3 2 7 6 7 } ; stbi_inline int)",
    "insertText": "stbi__extend_receive(stbi__jpeg *j, int n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned int k ; int sgn ;)",
    "insertText": "if(j->code_bits < n) stbi__grow_buffer_unsafe(j)"
  },
  {
    "label": "sgn()",
    "kind": "Method",
    "detail": "Function (code_buffer >> 31)",
    "insertText": "sgn(stbi__int32)"
  },
  {
    "label": "stbi_lrot()",
    "kind": "Method",
    "detail": "Function (k =)",
    "insertText": "stbi_lrot(j->code_buffer, n)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(n >= 0 && n < (int) (sizeof(stbi__bmask)/sizeof(*stbi__bmask)))"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (j -> code_buffer = k& ~ stbi__bmask [ n ] ; k& = stbi__bmask [ n ] ; j -> code_bits - = n ; return)",
    "insertText": "k(stbi__jbias[n] & ~sgn)"
  },
  {
    "label": "stbi__jpeg_get_bits()",
    "kind": "Method",
    "detail": "Function (} stbi_inline int)",
    "insertText": "stbi__jpeg_get_bits(stbi__jpeg *j, int n)"
  },
  {
    "label": "stbi__jpeg_get_bit()",
    "kind": "Method",
    "detail": "Function (j -> code_buffer = k& ~ stbi__bmask [ n ] ; k& = stbi__bmask [ n ] ; j -> code_bits - = n ; return k ; } stbi_inline int)",
    "insertText": "stbi__jpeg_get_bit(stbi__jpeg *j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned int k ;)",
    "insertText": "if(j->code_bits < 1) stbi__grow_buffer_unsafe(j)"
  },
  {
    "label": "stbi__jpeg_decode_block()",
    "kind": "Method",
    "detail": "Function (k = j -> code_buffer ; j -> code_buffer<<= 1 ; - - j -> code_bits ; return k& 0 x80000000 ; } const stbi_uc stbi__jpeg_dezigzag [ 6 4 + 1 5 ] = { 0,1,8,1 6,9,2,3,1 0,1 7,2 4,3 2,2 5,1 8,1 1,4,5,1 2,1 9,2 6,3 3,4 0,4 8,4 1,3 4,2 7,2 0,1 3,6,7,1 4,2 1,2 8,3 5,4 2,4 9,5 6,5 7,5 0,4 3,3 6,2 9,2 2,1 5,2 3,3 0,3 7,4 4,5 1,5 8,5 9,5 2,4 5,3 8,3 1,3 9,4 6,5 3,6 0,6 1,5 4,4 7,5 5,6 2,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3,6 3 } ; int)",
    "insertText": "stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi__uint16 *dequant)"
  },
  {
    "label": "stbi__jpeg_huff_decode()",
    "kind": "Method",
    "detail": "Function (t =)",
    "insertText": "stbi__jpeg_huff_decode(j, hdc)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(data,0,64*sizeof(data[0]))"
  },
  {
    "label": "stbi__extend_receive()",
    "kind": "Method",
    "detail": "Function (diff = t ?)",
    "insertText": "stbi__extend_receive(j, t)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (dc = j -> img_comp [ b ] . dc_pred + diff ; j -> img_comp [ b ] . dc_pred = dc ;)",
    "insertText": "data(short) (dc * dequant[0])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (r = fac [ c ] ;)",
    "insertText": "if(r)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "k(r >> 4)"
  },
  {
    "label": "zig()",
    "kind": "Method",
    "detail": "Function (s = r& 1 5 ; j -> code_buffer<<= s ; j -> code_bits - = s ; zig = stbi__jpeg_dezigzag [ k + + ] ; data [)",
    "insertText": "zig(short) ((r >> 8) * dequant[zig])"
  },
  {
    "label": "stbi__jpeg_huff_decode()",
    "kind": "Method",
    "detail": "Function (} else { int rs =)",
    "insertText": "stbi__jpeg_huff_decode(j, hac)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s = rs& 1 5 ; r = rs>> 4 ;)",
    "insertText": "if(s == 0)"
  },
  {
    "label": "zig()",
    "kind": "Method",
    "detail": "Function (k + = 1 6 ; } else { k + = r ; zig = stbi__jpeg_dezigzag [ k + + ] ; data [)",
    "insertText": "zig(short) (stbi__extend_receive(j,s) * dequant[zig])"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "while(k < 64)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int diff,dc ; int t ;)",
    "insertText": "if(j->spec_end != 0) return stbi__err(\"can't merge dc and ac\", \"Corrupt JPEG\")"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (dc = j -> img_comp [ b ] . dc_pred + diff ; j -> img_comp [ b ] . dc_pred = dc ;)",
    "insertText": "data(short) (dc << j->succ_low)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(stbi__jpeg_get_bit(j)) data[0] += (short) (1 << j->succ_low)"
  },
  {
    "label": "stbi__jpeg_decode_block_prog_ac()",
    "kind": "Method",
    "detail": "Function (} return 1 ; } int)",
    "insertText": "stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int k ;)",
    "insertText": "if(j->spec_start == 0) return stbi__err(\"can't merge dc and ac\", \"Corrupt JPEG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int shift = j -> succ_low ;)",
    "insertText": "if(j->eob_run)"
  },
  {
    "label": "zig()",
    "kind": "Method",
    "detail": "Function (s = r& 1 5 ; j -> code_buffer<<= s ; j -> code_bits - = s ; zig = stbi__jpeg_dezigzag [ k + + ] ; data [)",
    "insertText": "zig(short) ((r >> 8) << shift)"
  },
  {
    "label": "eob_run()",
    "kind": "Method",
    "detail": "Function (j ->)",
    "insertText": "eob_run(1 << r)"
  },
  {
    "label": "zig()",
    "kind": "Method",
    "detail": "Function (- - j -> eob_run ; break ; } k + = 1 6 ; } else { k + = r ; zig = stbi__jpeg_dezigzag [ k + + ] ; data [)",
    "insertText": "zig(short) (stbi__extend_receive(j,s) << shift)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "while(k <= j->spec_end)"
  },
  {
    "label": "bit()",
    "kind": "Method",
    "detail": "Function (} else { short)",
    "insertText": "bit(short) (1 << j->succ_low)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (- - j -> eob_run ;)",
    "insertText": "for(k = j->spec_start; k <= j->spec_end; ++k)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (short* p =& data [ stbi__jpeg_dezigzag [ k ] ] ;)",
    "insertText": "if(*p != 0) if (stbi__jpeg_get_bit(j)) if ((*p & bit)==0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (r = 6 4 ; } else { } } else {)",
    "insertText": "if(s != 1) return stbi__err(\"bad huffman code\", \"Corrupt JPEG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (short* p =& data [ stbi__jpeg_dezigzag [ k + + ] ] ;)",
    "insertText": "if(*p != 0)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "p(short)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (} } return 1 ; } stbi_inline stbi_uc)",
    "insertText": "stbi__clamp(int x)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "return(stbi_uc)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "stbi__f2f(x) ((int) (((x) * 4096 + 0.5))) #define stbi__fsh(x) ((x) * 4096) #define STBI__IDCT_1D(s0,s1,s2,s3,s4,s5,s6,s7)"
  },
  {
    "label": "p1()",
    "kind": "Method",
    "detail": "Function (\\ p2 = s2 ; \\ p3 = s6 ; \\)",
    "insertText": "p1(p2+p3) * stbi__f2f(0.5411961f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ t2 = p1 + p3*)",
    "insertText": "stbi__f2f(-1.847759065f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ t3 = p1 + p2*)",
    "insertText": "stbi__f2f(0.765366865f)"
  },
  {
    "label": "stbi__fsh()",
    "kind": "Method",
    "detail": "Function (\\ p2 = s0 ; \\ p3 = s4 ; \\ t0 =)",
    "insertText": "stbi__fsh(p2+p3)"
  },
  {
    "label": "stbi__fsh()",
    "kind": "Method",
    "detail": "Function (\\ t1 =)",
    "insertText": "stbi__fsh(p2-p3)"
  },
  {
    "label": "p5()",
    "kind": "Method",
    "detail": "Function (\\ x0 = t0 + t3 ; \\ x3 = t0 - t3 ; \\ x1 = t1 + t2 ; \\ x2 = t1 - t2 ; \\ t0 = s7 ; \\ t1 = s5 ; \\ t2 = s3 ; \\ t3 = s1 ; \\ p3 = t0 + t2 ; \\ p4 = t1 + t3 ; \\ p1 = t0 + t3 ; \\ p2 = t1 + t2 ; \\)",
    "insertText": "p5(p3+p4)*stbi__f2f( 1.175875602f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ t0 = t0*)",
    "insertText": "stbi__f2f(0.298631336f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ t1 = t1*)",
    "insertText": "stbi__f2f(2.053119869f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ t2 = t2*)",
    "insertText": "stbi__f2f(3.072711026f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ t3 = t3*)",
    "insertText": "stbi__f2f(1.501321110f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ p1 = p5 + p1*)",
    "insertText": "stbi__f2f(-0.899976223f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ p2 = p5 + p2*)",
    "insertText": "stbi__f2f(-2.562915447f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ p3 = p3*)",
    "insertText": "stbi__f2f(-1.961570560f)"
  },
  {
    "label": "stbi__f2f()",
    "kind": "Method",
    "detail": "Function (\\ p4 = p4*)",
    "insertText": "stbi__f2f(-0.390180644f)"
  },
  {
    "label": "stbi__idct_block()",
    "kind": "Method",
    "detail": "Function (\\ t3 + = p1 + p4 ; \\ t2 + = p2 + p3 ; \\ t1 + = p2 + p4 ; \\ t0 + = p1 + p3 ; void)",
    "insertText": "stbi__idct_block(stbi_uc *out, int out_stride, short data[64])"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i,val [ 6 4 ],* v = val ; stbi_uc* o ; short* d = data ;)",
    "insertText": "for(i=0; i < 8; ++i,++d, ++v)"
  },
  {
    "label": "STBI__IDCT_1D()",
    "kind": "Method",
    "detail": "Function (int dcterm = d [ 0 ]* 4 ; v [ 0 ] = v [ 8 ] = v [ 1 6 ] = v [ 2 4 ] = v [ 3 2 ] = v [ 4 0 ] = v [ 4 8 ] = v [ 5 6 ] = dcterm ; } else {)",
    "insertText": "STBI__IDCT_1D(d[ 0],d[ 8],d[16],d[24],d[32],d[40],d[48],d[56])"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (x1 + = 5 1 2 ; x2 + = 5 1 2 ; x3 + = 5 1 2 ;)",
    "insertText": "v(x0+t3)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(x0-t3)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(x1+t2)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(x1-t2)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(x2+t1)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(x2-t1)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(x3+t0)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(x3-t0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(i=0, v=val, o=out; i < 8; ++i,v+=8,o+=out_stride)"
  },
  {
    "label": "STBI__IDCT_1D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI__IDCT_1D(v[0],v[1],v[2],v[3],v[4],v[5],v[6],v[7]) x0 += 65536 + (128<<17)"
  },
  {
    "label": "x1()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x1(128<<17)"
  },
  {
    "label": "x2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x2(128<<17)"
  },
  {
    "label": "x3()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x3(128<<17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 0 ] =)",
    "insertText": "stbi__clamp((x0+t3) >> 17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 7 ] =)",
    "insertText": "stbi__clamp((x0-t3) >> 17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 1 ] =)",
    "insertText": "stbi__clamp((x1+t2) >> 17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 6 ] =)",
    "insertText": "stbi__clamp((x1-t2) >> 17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 2 ] =)",
    "insertText": "stbi__clamp((x2+t1) >> 17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 5 ] =)",
    "insertText": "stbi__clamp((x2-t1) >> 17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 3 ] =)",
    "insertText": "stbi__clamp((x3+t0) >> 17)"
  },
  {
    "label": "stbi__clamp()",
    "kind": "Method",
    "detail": "Function (o [ 4 ] =)",
    "insertText": "stbi__clamp((x3-t0) >> 17)"
  },
  {
    "label": "stbi__idct_simd()",
    "kind": "Method",
    "detail": "Function (} } # ifdef STBI_SSE2 void)",
    "insertText": "stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i row0,row1,row2,row3,row4,row5,row6,row7 ; __m128i tmp ; # define)",
    "insertText": "dct_const(x,y) _mm_setr_epi16((x),(y),(x),(y),(x),(y),(x),(y)) #define dct_rot(out0,out1, x,y,c0,c1) \\ __m128i c0##lo = _mm_unpacklo_epi16((x),(y))"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i c0 # # hi =)",
    "insertText": "_mm_unpackhi_epi16((x),(y))"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i out0 # # _l =)",
    "insertText": "_mm_madd_epi16(c0##lo, c0)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i out0 # # _h =)",
    "insertText": "_mm_madd_epi16(c0##hi, c0)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i out1 # # _l =)",
    "insertText": "_mm_madd_epi16(c0##lo, c1)"
  },
  {
    "label": "_mm_madd_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i out1 # # _h =)",
    "insertText": "_mm_madd_epi16(c0##hi, c1) #define dct_widen(out, in) \\ __m128i out##_l = _mm_srai_epi32(_mm_unpacklo_epi16(_mm_setzero_si128(), (in)), 4)"
  },
  {
    "label": "_mm_srai_epi32()",
    "kind": "Method",
    "detail": "Function (\\ __m128i out # # _h =)",
    "insertText": "_mm_srai_epi32(_mm_unpackhi_epi16(_mm_setzero_si128(), (in)), 4) #define dct_wadd(out, a, b) \\ __m128i out##_l = _mm_add_epi32(a##_l, b##_l)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (\\ __m128i out # # _h =)",
    "insertText": "_mm_add_epi32(a##_h, b##_h) #define dct_wsub(out, a, b) \\ __m128i out##_l = _mm_sub_epi32(a##_l, b##_l)"
  },
  {
    "label": "_mm_sub_epi32()",
    "kind": "Method",
    "detail": "Function (\\ __m128i out # # _h =)",
    "insertText": "_mm_sub_epi32(a##_h, b##_h) #define dct_bfly32o(out0, out1, a,b,bias,s)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (\\ __m128i abiased_l =)",
    "insertText": "_mm_add_epi32(a##_l, bias)"
  },
  {
    "label": "_mm_add_epi32()",
    "kind": "Method",
    "detail": "Function (\\ __m128i abiased_h =)",
    "insertText": "_mm_add_epi32(a##_h, bias)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(sum, abiased, b)"
  },
  {
    "label": "dct_wsub()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wsub(dif, abiased, b)"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (\\ out0 =)",
    "insertText": "_mm_packs_epi32(_mm_srai_epi32(sum_l, s), _mm_srai_epi32(sum_h, s))"
  },
  {
    "label": "_mm_packs_epi32()",
    "kind": "Method",
    "detail": "Function (\\ out1 =)",
    "insertText": "_mm_packs_epi32(_mm_srai_epi32(dif_l, s), _mm_srai_epi32(dif_h, s))"
  },
  {
    "label": "dct_interleave8()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "dct_interleave8(a, b)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (\\ a =)",
    "insertText": "_mm_unpacklo_epi8(a, b)"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (\\ b =)",
    "insertText": "_mm_unpackhi_epi8(tmp, b) #define dct_interleave16(a, b)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (\\ a =)",
    "insertText": "_mm_unpacklo_epi16(a, b)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (\\ b =)",
    "insertText": "_mm_unpackhi_epi16(tmp, b) #define dct_pass(bias,shift)"
  },
  {
    "label": "dct_rot()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "dct_rot(t2e,t3e, row2,row6, rot0_0,rot0_1)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i sum04 =)",
    "insertText": "_mm_add_epi16(row0, row4)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i dif04 =)",
    "insertText": "_mm_sub_epi16(row0, row4)"
  },
  {
    "label": "dct_widen()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_widen(t0e, sum04)"
  },
  {
    "label": "dct_widen()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_widen(t1e, dif04)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(x0, t0e, t3e)"
  },
  {
    "label": "dct_wsub()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wsub(x3, t0e, t3e)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(x1, t1e, t2e)"
  },
  {
    "label": "dct_wsub()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wsub(x2, t1e, t2e)"
  },
  {
    "label": "dct_rot()",
    "kind": "Method",
    "detail": "Function (\\ \\)",
    "insertText": "dct_rot(y0o,y2o, row7,row3, rot2_0,rot2_1)"
  },
  {
    "label": "dct_rot()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_rot(y1o,y3o, row5,row1, rot3_0,rot3_1)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i sum17 =)",
    "insertText": "_mm_add_epi16(row1, row7)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (\\ __m128i sum35 =)",
    "insertText": "_mm_add_epi16(row3, row5)"
  },
  {
    "label": "dct_rot()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_rot(y4o,y5o, sum17,sum35, rot1_0,rot1_1)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(x4, y0o, y4o)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(x5, y1o, y5o)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(x6, y2o, y5o)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(x7, y3o, y4o)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row0,row7, x0,x7,bias,shift)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row1,row6, x1,x6,bias,shift)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row2,row5, x2,x5,bias,shift)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row3,row4, x3,x4,bias,shift)"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (\\ } __m128i rot0_0 =)",
    "insertText": "dct_const(stbi__f2f(0.5411961f), stbi__f2f(0.5411961f) + stbi__f2f(-1.847759065f))"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i rot0_1 =)",
    "insertText": "dct_const(stbi__f2f(0.5411961f) + stbi__f2f( 0.765366865f), stbi__f2f(0.5411961f))"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i rot1_0 =)",
    "insertText": "dct_const(stbi__f2f(1.175875602f) + stbi__f2f(-0.899976223f), stbi__f2f(1.175875602f))"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i rot1_1 =)",
    "insertText": "dct_const(stbi__f2f(1.175875602f), stbi__f2f(1.175875602f) + stbi__f2f(-2.562915447f))"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i rot2_0 =)",
    "insertText": "dct_const(stbi__f2f(-1.961570560f) + stbi__f2f( 0.298631336f), stbi__f2f(-1.961570560f))"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i rot2_1 =)",
    "insertText": "dct_const(stbi__f2f(-1.961570560f), stbi__f2f(-1.961570560f) + stbi__f2f( 3.072711026f))"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i rot3_0 =)",
    "insertText": "dct_const(stbi__f2f(-0.390180644f) + stbi__f2f( 2.053119869f), stbi__f2f(-0.390180644f))"
  },
  {
    "label": "dct_const()",
    "kind": "Method",
    "detail": "Function (__m128i rot3_1 =)",
    "insertText": "dct_const(stbi__f2f(-0.390180644f), stbi__f2f(-0.390180644f) + stbi__f2f( 1.501321110f))"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i bias_0 =)",
    "insertText": "_mm_set1_epi32(512)"
  },
  {
    "label": "_mm_set1_epi32()",
    "kind": "Method",
    "detail": "Function (__m128i bias_1 =)",
    "insertText": "_mm_set1_epi32(65536 + (128<<17))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row0 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 0*8))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row1 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 1*8))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row2 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 2*8))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row3 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 3*8))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row4 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 4*8))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row5 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 5*8))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row6 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 6*8))"
  },
  {
    "label": "_mm_load_si128()",
    "kind": "Method",
    "detail": "Function (row7 =)",
    "insertText": "_mm_load_si128((const __m128i *) (data + 7*8))"
  },
  {
    "label": "dct_pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_pass(bias_0, 10)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function ({)",
    "insertText": "dct_interleave16(row0, row4)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row1, row5)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row2, row6)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row3, row7)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row0, row2)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row1, row3)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row4, row6)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row5, row7)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row0, row1)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row2, row3)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row4, row5)"
  },
  {
    "label": "dct_interleave16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave16(row6, row7)"
  },
  {
    "label": "dct_pass()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dct_pass(bias_1, 17)"
  },
  {
    "label": "_mm_packus_epi16()",
    "kind": "Method",
    "detail": "Function ({ __m128i p0 =)",
    "insertText": "_mm_packus_epi16(row0, row1)"
  },
  {
    "label": "_mm_packus_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i p1 =)",
    "insertText": "_mm_packus_epi16(row2, row3)"
  },
  {
    "label": "_mm_packus_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i p2 =)",
    "insertText": "_mm_packus_epi16(row4, row5)"
  },
  {
    "label": "_mm_packus_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i p3 =)",
    "insertText": "_mm_packus_epi16(row6, row7)"
  },
  {
    "label": "dct_interleave8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave8(p0, p2)"
  },
  {
    "label": "dct_interleave8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave8(p1, p3)"
  },
  {
    "label": "dct_interleave8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave8(p0, p1)"
  },
  {
    "label": "dct_interleave8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_interleave8(p2, p3)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storel_epi64((__m128i *) out, p0)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "_mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p0, 0x4e))"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "_mm_storel_epi64((__m128i *) out, p2)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "_mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p2, 0x4e))"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "_mm_storel_epi64((__m128i *) out, p1)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "_mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p1, 0x4e))"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "_mm_storel_epi64((__m128i *) out, p3)"
  },
  {
    "label": "_mm_storel_epi64()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "_mm_storel_epi64((__m128i *) out, _mm_shuffle_epi32(p3, 0x4e))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t row0,row1,row2,row3,row4,row5,row6,row7 ; int16x4_t rot0_0 =)",
    "insertText": "vdup_n_s16(stbi__f2f(0.5411961f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot0_1 =)",
    "insertText": "vdup_n_s16(stbi__f2f(-1.847759065f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot0_2 =)",
    "insertText": "vdup_n_s16(stbi__f2f( 0.765366865f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot1_0 =)",
    "insertText": "vdup_n_s16(stbi__f2f( 1.175875602f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot1_1 =)",
    "insertText": "vdup_n_s16(stbi__f2f(-0.899976223f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot1_2 =)",
    "insertText": "vdup_n_s16(stbi__f2f(-2.562915447f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot2_0 =)",
    "insertText": "vdup_n_s16(stbi__f2f(-1.961570560f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot2_1 =)",
    "insertText": "vdup_n_s16(stbi__f2f(-0.390180644f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot3_0 =)",
    "insertText": "vdup_n_s16(stbi__f2f( 0.298631336f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot3_1 =)",
    "insertText": "vdup_n_s16(stbi__f2f( 2.053119869f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot3_2 =)",
    "insertText": "vdup_n_s16(stbi__f2f( 3.072711026f))"
  },
  {
    "label": "vdup_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x4_t rot3_3 =)",
    "insertText": "vdup_n_s16(stbi__f2f( 1.501321110f))"
  },
  {
    "label": "dct_long_mul()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "dct_long_mul(out, inq, coeff) \\ int32x4_t out##_l = vmull_s16(vget_low_s16(inq), coeff)"
  },
  {
    "label": "vmull_s16()",
    "kind": "Method",
    "detail": "Function (\\ int32x4_t out # # _h =)",
    "insertText": "vmull_s16(vget_high_s16(inq), coeff) #define dct_long_mac(out, acc, inq, coeff) \\ int32x4_t out##_l = vmlal_s16(acc##_l, vget_low_s16(inq), coeff)"
  },
  {
    "label": "vmlal_s16()",
    "kind": "Method",
    "detail": "Function (\\ int32x4_t out # # _h =)",
    "insertText": "vmlal_s16(acc##_h, vget_high_s16(inq), coeff) #define dct_widen(out, inq) \\ int32x4_t out##_l = vshll_n_s16(vget_low_s16(inq), 12)"
  },
  {
    "label": "vshll_n_s16()",
    "kind": "Method",
    "detail": "Function (\\ int32x4_t out # # _h =)",
    "insertText": "vshll_n_s16(vget_high_s16(inq), 12) #define dct_wadd(out, a, b) \\ int32x4_t out##_l = vaddq_s32(a##_l, b##_l)"
  },
  {
    "label": "vaddq_s32()",
    "kind": "Method",
    "detail": "Function (\\ int32x4_t out # # _h =)",
    "insertText": "vaddq_s32(a##_h, b##_h) #define dct_wsub(out, a, b) \\ int32x4_t out##_l = vsubq_s32(a##_l, b##_l)"
  },
  {
    "label": "vsubq_s32()",
    "kind": "Method",
    "detail": "Function (\\ int32x4_t out # # _h =)",
    "insertText": "vsubq_s32(a##_h, b##_h) #define dct_bfly32o(out0,out1, a,b,shiftop,s)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(sum, a, b)"
  },
  {
    "label": "dct_wsub()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wsub(dif, a, b)"
  },
  {
    "label": "vcombine_s16()",
    "kind": "Method",
    "detail": "Function (\\ out0 =)",
    "insertText": "vcombine_s16(shiftop(sum_l, s), shiftop(sum_h, s))"
  },
  {
    "label": "vcombine_s16()",
    "kind": "Method",
    "detail": "Function (\\ out1 =)",
    "insertText": "vcombine_s16(shiftop(dif_l, s), shiftop(dif_h, s))"
  },
  {
    "label": "dct_pass()",
    "kind": "Method",
    "detail": "Function (\\ } # define)",
    "insertText": "dct_pass(shiftop, shift)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (\\ \\ int16x8_t sum26 =)",
    "insertText": "vaddq_s16(row2, row6)"
  },
  {
    "label": "dct_long_mul()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mul(p1e, sum26, rot0_0)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(t2e, p1e, row6, rot0_1)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(t3e, p1e, row2, rot0_2)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (\\ int16x8_t sum04 =)",
    "insertText": "vaddq_s16(row0, row4)"
  },
  {
    "label": "vsubq_s16()",
    "kind": "Method",
    "detail": "Function (\\ int16x8_t dif04 =)",
    "insertText": "vsubq_s16(row0, row4)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (\\ \\ int16x8_t sum15 =)",
    "insertText": "vaddq_s16(row1, row5)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (\\ int16x8_t sum17 =)",
    "insertText": "vaddq_s16(row1, row7)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (\\ int16x8_t sum35 =)",
    "insertText": "vaddq_s16(row3, row5)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (\\ int16x8_t sum37 =)",
    "insertText": "vaddq_s16(row3, row7)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (\\ int16x8_t sumodd =)",
    "insertText": "vaddq_s16(sum17, sum35)"
  },
  {
    "label": "dct_long_mul()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mul(p5o, sumodd, rot1_0)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(p1o, p5o, sum17, rot1_1)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(p2o, p5o, sum35, rot1_2)"
  },
  {
    "label": "dct_long_mul()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mul(p3o, sum37, rot2_0)"
  },
  {
    "label": "dct_long_mul()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mul(p4o, sum15, rot2_1)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(sump13o, p1o, p3o)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(sump24o, p2o, p4o)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(sump23o, p2o, p3o)"
  },
  {
    "label": "dct_wadd()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_wadd(sump14o, p1o, p4o)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(x4, sump13o, row7, rot3_0)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(x5, sump24o, row5, rot3_1)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(x6, sump23o, row3, rot3_2)"
  },
  {
    "label": "dct_long_mac()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_long_mac(x7, sump14o, row1, rot3_3)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row0,row7, x0,x7,shiftop,shift)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row1,row6, x1,x6,shiftop,shift)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row2,row5, x2,x5,shiftop,shift)"
  },
  {
    "label": "dct_bfly32o()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "dct_bfly32o(row3,row4, x3,x4,shiftop,shift)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (\\ } row0 =)",
    "insertText": "vld1q_s16(data + 0*8)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (row1 =)",
    "insertText": "vld1q_s16(data + 1*8)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (row2 =)",
    "insertText": "vld1q_s16(data + 2*8)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (row3 =)",
    "insertText": "vld1q_s16(data + 3*8)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (row4 =)",
    "insertText": "vld1q_s16(data + 4*8)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (row5 =)",
    "insertText": "vld1q_s16(data + 5*8)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (row6 =)",
    "insertText": "vld1q_s16(data + 6*8)"
  },
  {
    "label": "vld1q_s16()",
    "kind": "Method",
    "detail": "Function (row7 =)",
    "insertText": "vld1q_s16(data + 7*8)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (row0 =)",
    "insertText": "vaddq_s16(row0, vsetq_lane_s16(1024, vdupq_n_s16(0), 0))"
  },
  {
    "label": "dct_pass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_pass(vrshrn_n_s32, 10)"
  },
  {
    "label": "dct_trn16()",
    "kind": "Method",
    "detail": "Function ({ # define)",
    "insertText": "dct_trn16(x, y)"
  },
  {
    "label": "vtrnq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8x2_t t =)",
    "insertText": "vtrnq_s16(x, y)"
  },
  {
    "label": "dct_trn32()",
    "kind": "Method",
    "detail": "Function (x = t . val [ 0 ] ; y = t . val [ 1 ] ; } # define)",
    "insertText": "dct_trn32(x, y)"
  },
  {
    "label": "vtrnq_s32()",
    "kind": "Method",
    "detail": "Function (int32x4x2_t t =)",
    "insertText": "vtrnq_s32(vreinterpretq_s32_s16(x), vreinterpretq_s32_s16(y))"
  },
  {
    "label": "vreinterpretq_s16_s32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vreinterpretq_s16_s32(t.val[0])"
  },
  {
    "label": "vreinterpretq_s16_s32()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "vreinterpretq_s16_s32(t.val[1])"
  },
  {
    "label": "dct_trn64()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "dct_trn64(x, y)"
  },
  {
    "label": "vcombine_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t x0 = x ; int16x8_t y0 = y ; x =)",
    "insertText": "vcombine_s16(vget_low_s16(x0), vget_low_s16(y0))"
  },
  {
    "label": "vcombine_s16()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "vcombine_s16(vget_high_s16(x0), vget_high_s16(y0))"
  },
  {
    "label": "dct_trn16()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dct_trn16(row0, row1)"
  },
  {
    "label": "dct_trn16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn16(row2, row3)"
  },
  {
    "label": "dct_trn16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn16(row4, row5)"
  },
  {
    "label": "dct_trn16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn16(row6, row7)"
  },
  {
    "label": "dct_trn32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn32(row0, row2)"
  },
  {
    "label": "dct_trn32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn32(row1, row3)"
  },
  {
    "label": "dct_trn32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn32(row4, row6)"
  },
  {
    "label": "dct_trn32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn32(row5, row7)"
  },
  {
    "label": "dct_trn64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn64(row0, row4)"
  },
  {
    "label": "dct_trn64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn64(row1, row5)"
  },
  {
    "label": "dct_trn64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn64(row2, row6)"
  },
  {
    "label": "dct_trn64()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn64(row3, row7)"
  },
  {
    "label": "dct_pass()",
    "kind": "Method",
    "detail": "Function (# undef dct_trn16 # undef dct_trn32 # undef dct_trn64 })",
    "insertText": "dct_pass(vshrn_n_s32, 16)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function ({ uint8x8_t p0 =)",
    "insertText": "vqrshrun_n_s16(row0, 1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t p1 =)",
    "insertText": "vqrshrun_n_s16(row1, 1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t p2 =)",
    "insertText": "vqrshrun_n_s16(row2, 1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t p3 =)",
    "insertText": "vqrshrun_n_s16(row3, 1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t p4 =)",
    "insertText": "vqrshrun_n_s16(row4, 1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t p5 =)",
    "insertText": "vqrshrun_n_s16(row5, 1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t p6 =)",
    "insertText": "vqrshrun_n_s16(row6, 1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8_t p7 =)",
    "insertText": "vqrshrun_n_s16(row7, 1)"
  },
  {
    "label": "dct_trn8_8()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "dct_trn8_8(x, y)"
  },
  {
    "label": "vtrn_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8x2_t t =)",
    "insertText": "vtrn_u8(x, y)"
  },
  {
    "label": "dct_trn8_16()",
    "kind": "Method",
    "detail": "Function (x = t . val [ 0 ] ; y = t . val [ 1 ] ; } # define)",
    "insertText": "dct_trn8_16(x, y)"
  },
  {
    "label": "vtrn_u16()",
    "kind": "Method",
    "detail": "Function (uint16x4x2_t t =)",
    "insertText": "vtrn_u16(vreinterpret_u16_u8(x), vreinterpret_u16_u8(y))"
  },
  {
    "label": "vreinterpret_u8_u16()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vreinterpret_u8_u16(t.val[0])"
  },
  {
    "label": "vreinterpret_u8_u16()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "vreinterpret_u8_u16(t.val[1])"
  },
  {
    "label": "dct_trn8_32()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "dct_trn8_32(x, y)"
  },
  {
    "label": "vtrn_u32()",
    "kind": "Method",
    "detail": "Function (uint32x2x2_t t =)",
    "insertText": "vtrn_u32(vreinterpret_u32_u8(x), vreinterpret_u32_u8(y))"
  },
  {
    "label": "vreinterpret_u8_u32()",
    "kind": "Method",
    "detail": "Function (x =)",
    "insertText": "vreinterpret_u8_u32(t.val[0])"
  },
  {
    "label": "vreinterpret_u8_u32()",
    "kind": "Method",
    "detail": "Function (y =)",
    "insertText": "vreinterpret_u8_u32(t.val[1])"
  },
  {
    "label": "dct_trn8_8()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "dct_trn8_8(p0, p1)"
  },
  {
    "label": "dct_trn8_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_8(p2, p3)"
  },
  {
    "label": "dct_trn8_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_8(p4, p5)"
  },
  {
    "label": "dct_trn8_8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_8(p6, p7)"
  },
  {
    "label": "dct_trn8_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_16(p0, p2)"
  },
  {
    "label": "dct_trn8_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_16(p1, p3)"
  },
  {
    "label": "dct_trn8_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_16(p4, p6)"
  },
  {
    "label": "dct_trn8_16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_16(p5, p7)"
  },
  {
    "label": "dct_trn8_32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_32(p0, p4)"
  },
  {
    "label": "dct_trn8_32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_32(p1, p5)"
  },
  {
    "label": "dct_trn8_32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_32(p2, p6)"
  },
  {
    "label": "dct_trn8_32()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dct_trn8_32(p3, p7)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst1_u8(out, p0)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "vst1_u8(out, p1)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "vst1_u8(out, p2)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "vst1_u8(out, p3)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "vst1_u8(out, p4)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "vst1_u8(out, p5)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "vst1_u8(out, p6)"
  },
  {
    "label": "vst1_u8()",
    "kind": "Method",
    "detail": "Function (out + = out_stride ;)",
    "insertText": "vst1_u8(out, p7)"
  },
  {
    "label": "stbi__get_marker()",
    "kind": "Method",
    "detail": "Function (# undef dct_trn8_8 # undef dct_trn8_16 # undef dct_trn8_32 } # undef dct_long_mul # undef dct_long_mac # undef dct_widen # undef dct_wadd # undef dct_wsub # undef dct_bfly32o # undef dct_pass } # endif # define STBI__MARKER_none 0 xff stbi_uc)",
    "insertText": "stbi__get_marker(stbi__jpeg *j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc x ;)",
    "insertText": "if(j->marker != STBI__MARKER_none)"
  },
  {
    "label": "stbi__parse_entropy_coded_data()",
    "kind": "Method",
    "detail": "Function (j -> code_bits = 0 ; j -> code_buffer = 0 ; j -> nomore = 0 ; j -> img_comp [ 0 ] . dc_pred = j -> img_comp [ 1 ] . dc_pred = j -> img_comp [ 2 ] . dc_pred = j -> img_comp [ 3 ] . dc_pred = 0 ; j -> marker = STBI__MARKER_none ; j -> todo = j -> restart_interval ? j -> restart_interval : 0 x7fffffff ; j -> eob_run = 0 ; } int)",
    "insertText": "stbi__parse_entropy_coded_data(stbi__jpeg *z)"
  },
  {
    "label": "stbi__jpeg_reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__jpeg_reset(z)"
  },
  {
    "label": "STBI_SIMD_ALIGN()",
    "kind": "Method",
    "detail": "Function (int i,j ;)",
    "insertText": "STBI_SIMD_ALIGN(short, data[64])"
  },
  {
    "label": "w()",
    "kind": "Method",
    "detail": "Function (int n = z -> order [ 0 ] ; int)",
    "insertText": "w(z->img_comp[n].x+7)"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "h(z->img_comp[n].y+7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int ha = z -> img_comp [ n ] . ha ;)",
    "insertText": "if(!stbi__jpeg_decode_block(z, data, z->huff_dc+z->img_comp[n].hd, z->huff_ac+ha, z->fast_ac[ha], n, z->dequant[z->img_comp[n].tq]))"
  },
  {
    "label": "idct_block_kernel()",
    "kind": "Method",
    "detail": "Function (z ->)",
    "insertText": "idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*j*8+i*8, z->img_comp[n].w2, data)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int n = z -> order [ k ] ;)",
    "insertText": "for(y=0; y < z->img_comp[n].v; ++y)"
  },
  {
    "label": "x2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "x2(i*z->img_comp[n].h + x)"
  },
  {
    "label": "y2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "y2(j*z->img_comp[n].v + y)"
  },
  {
    "label": "idct_block_kernel()",
    "kind": "Method",
    "detail": "Function (z ->)",
    "insertText": "idct_block_kernel(z->img_comp[n].data+z->img_comp[n].w2*y2+x2, z->img_comp[n].w2, data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "if(--z->todo <= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } return 1 ; } } else {)",
    "insertText": "if(z->scan_n == 1)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (short* data = z -> img_comp [ n ] .)",
    "insertText": "coeff(i + j * z->img_comp[n].coeff_w)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { int ha = z -> img_comp [ n ] . ha ;)",
    "insertText": "if(!stbi__jpeg_decode_block_prog_ac(z, data, &z->huff_ac[ha], z->fast_ac[ha]))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } return 1 ; } else { int i,j,k,x,y ;)",
    "insertText": "for(j=0; j < z->img_mcu_y; ++j)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (short* data = z -> img_comp [ n ] .)",
    "insertText": "coeff(x2 + y2 * z->img_comp[n].coeff_w)"
  },
  {
    "label": "stbi__jpeg_dequantize()",
    "kind": "Method",
    "detail": "Function (} } } return 1 ; } } } void)",
    "insertText": "stbi__jpeg_dequantize(short *data, stbi__uint16 *dequant)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i < 64; ++i)"
  },
  {
    "label": "stbi__jpeg_finish()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "stbi__jpeg_finish(stbi__jpeg *z)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i,j,n ;)",
    "insertText": "for(n=0; n < z->s->img_n; ++n)"
  },
  {
    "label": "stbi__jpeg_dequantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__jpeg_dequantize(data, z->dequant[z->img_comp[n].tq])"
  },
  {
    "label": "stbi__process_marker()",
    "kind": "Method",
    "detail": "Function (} } } } } int)",
    "insertText": "stbi__process_marker(stbi__jpeg *z, int m)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (int L ;)",
    "insertText": "switch(m)"
  },
  {
    "label": "stbi__get16be()",
    "kind": "Method",
    "detail": "Function (z -> restart_interval =)",
    "insertText": "stbi__get16be(z->s)"
  },
  {
    "label": "stbi__get8()",
    "kind": "Method",
    "detail": "Function (int q =)",
    "insertText": "stbi__get8(z->s)"
  },
  {
    "label": "sixteen()",
    "kind": "Method",
    "detail": "Function (int p = q>> 4,)",
    "insertText": "sixteen(p != 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int t = q& 1 5,i ;)",
    "insertText": "if(p != 0 && p != 1) return stbi__err(\"bad DQT type\",\"Corrupt JPEG\")"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "L(sixteen ? 129 : 65)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int tc = q>> 4 ; int th = q& 1 5 ;)",
    "insertText": "if(tc > 1 || th > 3) return stbi__err(\"bad DHT header\",\"Corrupt JPEG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n + = sizes [ i ] ; } L - = 1 7 ;)",
    "insertText": "if(tc == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (v = z -> huff_dc [ th ] . values ; } else {)",
    "insertText": "if(!stbi__build_huffman(z->huff_ac+th, sizes))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (v = z -> huff_ac [ th ] . values ; })",
    "insertText": "for(i=0; i < n; ++i) v[i] = stbi__get8(z->s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (L - = n ; } return L = = 0 ; })",
    "insertText": "if((m >= 0xE0 && m <= 0xEF) || m == 0xFE)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} L - = 2 ;)",
    "insertText": "if(m == 0xE0 && L >= 5)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const unsigned char tag [ 5 ] = { ' J ',' F ',' I ',' F ',' \\ 0 ' } ; int ok = 1 ; int i ;)",
    "insertText": "for(i=0; i < 5; ++i) if (stbi__get8(z->s) != tag[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (jfif = 1)",
    "insertText": "if(ok)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(m == 0xEE && L >= 12)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const unsigned char tag [ 6 ] = { ' A ',' d ',' o ',' b ',' e ',' \\ 0 ' } ; int ok = 1 ; int i ;)",
    "insertText": "for(i=0; i < 6; ++i) if (stbi__get8(z->s) != tag[i])"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (L - = 6 ; } })",
    "insertText": "stbi__skip(z->s, L)"
  },
  {
    "label": "stbi__process_scan_header()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stbi__process_scan_header(stbi__jpeg *z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ which ] . hd = q>> 4 ;)",
    "insertText": "if(z->img_comp[which].hd > 3) return stbi__err(\"bad DC huff\",\"Corrupt JPEG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ which ] . ha = q& 1 5 ;)",
    "insertText": "if(z->img_comp[which].ha > 3) return stbi__err(\"bad AC huff\",\"Corrupt JPEG\")"
  },
  {
    "label": "succ_high()",
    "kind": "Method",
    "detail": "Function (z ->)",
    "insertText": "succ_high(aa >> 4)"
  },
  {
    "label": "succ_low()",
    "kind": "Method",
    "detail": "Function (z ->)",
    "insertText": "succ_low(aa & 15)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(z->spec_start != 0) return stbi__err(\"bad SOS\",\"Corrupt JPEG\")"
  },
  {
    "label": "stbi__free_jpeg_components()",
    "kind": "Method",
    "detail": "Function (z -> spec_end = 6 3 ; } } return 1 ; } int)",
    "insertText": "stbi__free_jpeg_components(stbi__jpeg *z, int ncomp, int why)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i < ncomp; ++i)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(z->img_comp[i].raw_data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] . raw_data = NULL ; z -> img_comp [ i ] . data = NULL ; })",
    "insertText": "if(z->img_comp[i].raw_coeff)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(z->img_comp[i].raw_coeff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] . raw_coeff = 0 ; z -> img_comp [ i ] . coeff = 0 ; })",
    "insertText": "if(z->img_comp[i].linebuf)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(z->img_comp[i].linebuf)"
  },
  {
    "label": "stbi__process_frame_header()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] . linebuf = NULL ; } } return why ; } int)",
    "insertText": "stbi__process_frame_header(stbi__jpeg *z, int scan)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (s -> img_n = c ;)",
    "insertText": "for(i=0; i < c; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] . data = NULL ; z -> img_comp [ i ] . linebuf = NULL ; })",
    "insertText": "if(Lf != 8+3*s->img_n) return stbi__err(\"bad SOF len\",\"Corrupt JPEG\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (z -> rgb = 0 ;)",
    "insertText": "for(i=0; i < s->img_n; ++i)"
  },
  {
    "label": "h()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] .)",
    "insertText": "h(q >> 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] . v = q& 1 5 ;)",
    "insertText": "if(!z->img_comp[i].v || z->img_comp[i].v > 4) return stbi__err(\"bad V\",\"Corrupt JPEG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(scan != STBI__SCAN_load)"
  },
  {
    "label": "img_mcu_x()",
    "kind": "Method",
    "detail": "Function (img_mcu_w)",
    "insertText": "img_mcu_x(s->img_x + z->img_mcu_w-1)"
  },
  {
    "label": "img_mcu_y()",
    "kind": "Method",
    "detail": "Function (img_mcu_h)",
    "insertText": "img_mcu_y(s->img_y + z->img_mcu_h-1)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] .)",
    "insertText": "x(s->img_x * z->img_comp[i].h + h_max-1)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] .)",
    "insertText": "y(s->img_y * z->img_comp[i].v + v_max-1)"
  },
  {
    "label": "stbi__malloc_mad2()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] . w2 = z -> img_mcu_x* z -> img_comp [ i ] . h* 8 ; z -> img_comp [ i ] . h2 = z -> img_mcu_y* z -> img_comp [ i ] . v* 8 ; z -> img_comp [ i ] . coeff = 0 ; z -> img_comp [ i ] . raw_coeff = 0 ; z -> img_comp [ i ] . linebuf = NULL ; z -> img_comp [ i ] . raw_data =)",
    "insertText": "stbi__malloc_mad2(z->img_comp[i].w2, z->img_comp[i].h2, 15)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] .)",
    "insertText": "data(stbi_uc*) (((size_t) z->img_comp[i].raw_data + 15) & ~15)"
  },
  {
    "label": "stbi__malloc_mad3()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] . coeff_w = z -> img_comp [ i ] . w2 / 8 ; z -> img_comp [ i ] . coeff_h = z -> img_comp [ i ] . h2 / 8 ; z -> img_comp [ i ] . raw_coeff =)",
    "insertText": "stbi__malloc_mad3(z->img_comp[i].w2, z->img_comp[i].h2, sizeof(short), 15)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (z -> img_comp [ i ] .)",
    "insertText": "coeff(short*) (((size_t) z->img_comp[i].raw_coeff + 15) & ~15)"
  },
  {
    "label": "stbi__DNL()",
    "kind": "Method",
    "detail": "Function (} } return 1 ; } # define)",
    "insertText": "stbi__DNL(x) ((x) == 0xdc) #define stbi__SOI(x) ((x) == 0xd8) #define stbi__EOI(x) ((x) == 0xd9) #define stbi__SOF(x) ((x) == 0xc0 || (x) == 0xc1 || (x) == 0xc2) #define stbi__SOS(x) ((x) == 0xda) #define stbi__SOF_progressive(x) ((x) == 0xc2) static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)"
  },
  {
    "label": "stbi__get_marker()",
    "kind": "Method",
    "detail": "Function (int m ; z -> jfif = 0 ; z -> app14_color_transform = - 1 ; z -> marker = STBI__MARKER_none ; m =)",
    "insertText": "stbi__get_marker(z)"
  },
  {
    "label": "stbi__SOF_progressive()",
    "kind": "Method",
    "detail": "Function (} } z -> progressive =)",
    "insertText": "stbi__SOF_progressive(m)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int m ;)",
    "insertText": "for(m = 0; m < 4; m++)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (j -> img_comp [ m ] . raw_data = NULL ; j -> img_comp [ m ] . raw_coeff = NULL ; } j -> restart_interval = 0 ;)",
    "insertText": "if(!stbi__decode_jpeg_header(j, STBI__SCAN_load))"
  },
  {
    "label": "stbi__get_marker()",
    "kind": "Method",
    "detail": "Function (m =)",
    "insertText": "stbi__get_marker(j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } } } } else)",
    "insertText": "if(stbi__DNL(m))"
  },
  {
    "label": "stbi__get16be()",
    "kind": "Method",
    "detail": "Function (int Ld =)",
    "insertText": "stbi__get16be(j->s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!stbi__process_marker(j, m))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(j->progressive) stbi__jpeg_finish(j)"
  },
  {
    "label": "stbi__div4()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "stbi__div4(x) ((stbi_uc) ((x) >> 2)) static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(out)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(in_far)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(w)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(hs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i ; stbi_uc* input = in_near ;)",
    "insertText": "if(w == 1)"
  },
  {
    "label": "stbi__div4()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] = out [ 1 ] = input [ 0 ] ; return out ; } out [ 0 ] = input [ 0 ] ; out [ 1 ] =)",
    "insertText": "stbi__div4(input[0]*3 + input[1] + 2)"
  },
  {
    "label": "stbi__div4()",
    "kind": "Method",
    "detail": "Function (int n = 3* input [ i ] + 2 ; out [ i* 2 + 0 ] =)",
    "insertText": "stbi__div4(n+input[i-1])"
  },
  {
    "label": "stbi__div4()",
    "kind": "Method",
    "detail": "Function (out [ i* 2 + 1 ] =)",
    "insertText": "stbi__div4(n+input[i+1])"
  },
  {
    "label": "stbi__div4()",
    "kind": "Method",
    "detail": "Function (} out [ i* 2 + 0 ] =)",
    "insertText": "stbi__div4(input[w-2]*3 + input[w-1] + 2)"
  },
  {
    "label": "stbi__div4()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] = out [ 1 ] =)",
    "insertText": "stbi__div4(3*in_near[0] + in_far[0] + 2)"
  },
  {
    "label": "stbi__div16()",
    "kind": "Method",
    "detail": "Function (t0 = t1 ; t1 = 3* in_near [ i ] + in_far [ i ] ; out [ i* 2 - 1 ] =)",
    "insertText": "stbi__div16(3*t0 + t1 + 8)"
  },
  {
    "label": "stbi__div16()",
    "kind": "Method",
    "detail": "Function (out [ i* 2 ] =)",
    "insertText": "stbi__div16(3*t1 + t0 + 8)"
  },
  {
    "label": "stbi__div4()",
    "kind": "Method",
    "detail": "Function (} out [ w* 2 - 1 ] =)",
    "insertText": "stbi__div4(t1+2)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(STBI_SSE2) __m128i zero = _mm_setzero_si128()"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i farb =)",
    "insertText": "_mm_loadl_epi64((__m128i *) (in_far + i))"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i nearb =)",
    "insertText": "_mm_loadl_epi64((__m128i *) (in_near + i))"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i farw =)",
    "insertText": "_mm_unpacklo_epi8(farb, zero)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i nearw =)",
    "insertText": "_mm_unpacklo_epi8(nearb, zero)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i diff =)",
    "insertText": "_mm_sub_epi16(farw, nearw)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i nears =)",
    "insertText": "_mm_slli_epi16(nearw, 2)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i curr =)",
    "insertText": "_mm_add_epi16(nears, diff)"
  },
  {
    "label": "_mm_slli_si128()",
    "kind": "Method",
    "detail": "Function (__m128i prv0 =)",
    "insertText": "_mm_slli_si128(curr, 2)"
  },
  {
    "label": "_mm_srli_si128()",
    "kind": "Method",
    "detail": "Function (__m128i nxt0 =)",
    "insertText": "_mm_srli_si128(curr, 2)"
  },
  {
    "label": "_mm_insert_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i prev =)",
    "insertText": "_mm_insert_epi16(prv0, t1, 0)"
  },
  {
    "label": "_mm_insert_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i next =)",
    "insertText": "_mm_insert_epi16(nxt0, 3*in_near[i+8] + in_far[i+8], 7)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i bias =)",
    "insertText": "_mm_set1_epi16(8)"
  },
  {
    "label": "_mm_slli_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i curs =)",
    "insertText": "_mm_slli_epi16(curr, 2)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i prvd =)",
    "insertText": "_mm_sub_epi16(prev, curr)"
  },
  {
    "label": "_mm_sub_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i nxtd =)",
    "insertText": "_mm_sub_epi16(next, curr)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i curb =)",
    "insertText": "_mm_add_epi16(curs, bias)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i even =)",
    "insertText": "_mm_add_epi16(prvd, curb)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i odd =)",
    "insertText": "_mm_add_epi16(nxtd, curb)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i int0 =)",
    "insertText": "_mm_unpacklo_epi16(even, odd)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i int1 =)",
    "insertText": "_mm_unpackhi_epi16(even, odd)"
  },
  {
    "label": "_mm_srli_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i de0 =)",
    "insertText": "_mm_srli_epi16(int0, 4)"
  },
  {
    "label": "_mm_srli_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i de1 =)",
    "insertText": "_mm_srli_epi16(int1, 4)"
  },
  {
    "label": "_mm_packus_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i outv =)",
    "insertText": "_mm_packus_epi16(de0, de1)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *) (out + i*2), outv)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# elif)",
    "insertText": "defined(STBI_NEON) uint8x8_t farb = vld1_u8(in_far + i)"
  },
  {
    "label": "vld1_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t nearb =)",
    "insertText": "vld1_u8(in_near + i)"
  },
  {
    "label": "vreinterpretq_s16_u16()",
    "kind": "Method",
    "detail": "Function (int16x8_t diff =)",
    "insertText": "vreinterpretq_s16_u16(vsubl_u8(farb, nearb))"
  },
  {
    "label": "vreinterpretq_s16_u16()",
    "kind": "Method",
    "detail": "Function (int16x8_t nears =)",
    "insertText": "vreinterpretq_s16_u16(vshll_n_u8(nearb, 2))"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t curr =)",
    "insertText": "vaddq_s16(nears, diff)"
  },
  {
    "label": "vextq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t prv0 =)",
    "insertText": "vextq_s16(curr, curr, 7)"
  },
  {
    "label": "vextq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t nxt0 =)",
    "insertText": "vextq_s16(curr, curr, 1)"
  },
  {
    "label": "vsetq_lane_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t prev =)",
    "insertText": "vsetq_lane_s16(t1, prv0, 0)"
  },
  {
    "label": "vsetq_lane_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t next =)",
    "insertText": "vsetq_lane_s16(3*in_near[i+8] + in_far[i+8], nxt0, 7)"
  },
  {
    "label": "vshlq_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t curs =)",
    "insertText": "vshlq_n_s16(curr, 2)"
  },
  {
    "label": "vsubq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t prvd =)",
    "insertText": "vsubq_s16(prev, curr)"
  },
  {
    "label": "vsubq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t nxtd =)",
    "insertText": "vsubq_s16(next, curr)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t even =)",
    "insertText": "vaddq_s16(curs, prvd)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t odd =)",
    "insertText": "vaddq_s16(curs, nxtd)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8x2_t o ; o . val [ 0 ] =)",
    "insertText": "vqrshrun_n_s16(even, 4)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (o . val [ 1 ] =)",
    "insertText": "vqrshrun_n_s16(odd, 4)"
  },
  {
    "label": "vst2_u8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst2_u8(out + i*2, o)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i < count; ++i)"
  },
  {
    "label": "y_fixed()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "y_fixed(y[i] << 20) + (1<<19)"
  },
  {
    "label": "stbi__float2fixed()",
    "kind": "Method",
    "detail": "Function (int r,g,b ; int cr = pcr [ i ] - 1 2 8 ; int cb = pcb [ i ] - 1 2 8 ; r = y_fixed + cr*)",
    "insertText": "stbi__float2fixed(1.40200f)"
  },
  {
    "label": "y_fixed()",
    "kind": "Method",
    "detail": "Function (g =)",
    "insertText": "y_fixed(cr*-stbi__float2fixed(0.71414f)) + ((cb*-stbi__float2fixed(0.34414f)) & 0xffff0000)"
  },
  {
    "label": "stbi__float2fixed()",
    "kind": "Method",
    "detail": "Function (b = y_fixed + cb*)",
    "insertText": "stbi__float2fixed(1.77200f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (r>> = 2 0 ; g>> = 2 0 ; b>> = 2 0 ;)",
    "insertText": "if((unsigned) r > 255)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out(stbi_uc)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (out [ 3 ] = 2 5 5 ; out + = step ; } } # if)",
    "insertText": "defined(STBI_SSE2) || defined(STBI_NEON) static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i = 0 ; # ifdef STBI_SSE2)",
    "insertText": "if(step == 4)"
  },
  {
    "label": "_mm_set1_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i signflip =)",
    "insertText": "_mm_set1_epi8(-0x80)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cr_const0 =)",
    "insertText": "_mm_set1_epi16((short) ( 1.40200f*4096.0f+0.5f))"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cr_const1 =)",
    "insertText": "_mm_set1_epi16(- (short) ( 0.71414f*4096.0f+0.5f))"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cb_const0 =)",
    "insertText": "_mm_set1_epi16(- (short) ( 0.34414f*4096.0f+0.5f))"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cb_const1 =)",
    "insertText": "_mm_set1_epi16((short) ( 1.77200f*4096.0f+0.5f))"
  },
  {
    "label": "_mm_set1_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i y_bias =)",
    "insertText": "_mm_set1_epi8((char) (unsigned char) 128)"
  },
  {
    "label": "_mm_set1_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i xw =)",
    "insertText": "_mm_set1_epi16(255)"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i y_bytes =)",
    "insertText": "_mm_loadl_epi64((__m128i *) (y+i))"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i cr_bytes =)",
    "insertText": "_mm_loadl_epi64((__m128i *) (pcr+i))"
  },
  {
    "label": "_mm_loadl_epi64()",
    "kind": "Method",
    "detail": "Function (__m128i cb_bytes =)",
    "insertText": "_mm_loadl_epi64((__m128i *) (pcb+i))"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i cr_biased =)",
    "insertText": "_mm_xor_si128(cr_bytes, signflip)"
  },
  {
    "label": "_mm_xor_si128()",
    "kind": "Method",
    "detail": "Function (__m128i cb_biased =)",
    "insertText": "_mm_xor_si128(cb_bytes, signflip)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i yw =)",
    "insertText": "_mm_unpacklo_epi8(y_bias, y_bytes)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i crw =)",
    "insertText": "_mm_unpacklo_epi8(_mm_setzero_si128(), cr_biased)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i cbw =)",
    "insertText": "_mm_unpacklo_epi8(_mm_setzero_si128(), cb_biased)"
  },
  {
    "label": "_mm_srli_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i yws =)",
    "insertText": "_mm_srli_epi16(yw, 4)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cr0 =)",
    "insertText": "_mm_mulhi_epi16(cr_const0, crw)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cb0 =)",
    "insertText": "_mm_mulhi_epi16(cb_const0, cbw)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cb1 =)",
    "insertText": "_mm_mulhi_epi16(cbw, cb_const1)"
  },
  {
    "label": "_mm_mulhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i cr1 =)",
    "insertText": "_mm_mulhi_epi16(crw, cr_const1)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i rws =)",
    "insertText": "_mm_add_epi16(cr0, yws)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i gwt =)",
    "insertText": "_mm_add_epi16(cb0, yws)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i bws =)",
    "insertText": "_mm_add_epi16(yws, cb1)"
  },
  {
    "label": "_mm_add_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i gws =)",
    "insertText": "_mm_add_epi16(gwt, cr1)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i rw =)",
    "insertText": "_mm_srai_epi16(rws, 4)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i bw =)",
    "insertText": "_mm_srai_epi16(bws, 4)"
  },
  {
    "label": "_mm_srai_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i gw =)",
    "insertText": "_mm_srai_epi16(gws, 4)"
  },
  {
    "label": "_mm_packus_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i brb =)",
    "insertText": "_mm_packus_epi16(rw, bw)"
  },
  {
    "label": "_mm_packus_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i gxb =)",
    "insertText": "_mm_packus_epi16(gw, xw)"
  },
  {
    "label": "_mm_unpacklo_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t0 =)",
    "insertText": "_mm_unpacklo_epi8(brb, gxb)"
  },
  {
    "label": "_mm_unpackhi_epi8()",
    "kind": "Method",
    "detail": "Function (__m128i t1 =)",
    "insertText": "_mm_unpackhi_epi8(brb, gxb)"
  },
  {
    "label": "_mm_unpacklo_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i o0 =)",
    "insertText": "_mm_unpacklo_epi16(t0, t1)"
  },
  {
    "label": "_mm_unpackhi_epi16()",
    "kind": "Method",
    "detail": "Function (__m128i o1 =)",
    "insertText": "_mm_unpackhi_epi16(t0, t1)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *) (out + 0), o0)"
  },
  {
    "label": "_mm_storeu_si128()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_mm_storeu_si128((__m128i *) (out + 16), o1)"
  },
  {
    "label": "vdup_n_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t signflip =)",
    "insertText": "vdup_n_u8(0x80)"
  },
  {
    "label": "vdupq_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cr_const0 =)",
    "insertText": "vdupq_n_s16((short) ( 1.40200f*4096.0f+0.5f))"
  },
  {
    "label": "vdupq_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cr_const1 =)",
    "insertText": "vdupq_n_s16(- (short) ( 0.71414f*4096.0f+0.5f))"
  },
  {
    "label": "vdupq_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cb_const0 =)",
    "insertText": "vdupq_n_s16(- (short) ( 0.34414f*4096.0f+0.5f))"
  },
  {
    "label": "vdupq_n_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cb_const1 =)",
    "insertText": "vdupq_n_s16((short) ( 1.77200f*4096.0f+0.5f))"
  },
  {
    "label": "vld1_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t y_bytes =)",
    "insertText": "vld1_u8(y + i)"
  },
  {
    "label": "vld1_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t cr_bytes =)",
    "insertText": "vld1_u8(pcr + i)"
  },
  {
    "label": "vld1_u8()",
    "kind": "Method",
    "detail": "Function (uint8x8_t cb_bytes =)",
    "insertText": "vld1_u8(pcb + i)"
  },
  {
    "label": "vreinterpret_s8_u8()",
    "kind": "Method",
    "detail": "Function (int8x8_t cr_biased =)",
    "insertText": "vreinterpret_s8_u8(vsub_u8(cr_bytes, signflip))"
  },
  {
    "label": "vreinterpret_s8_u8()",
    "kind": "Method",
    "detail": "Function (int8x8_t cb_biased =)",
    "insertText": "vreinterpret_s8_u8(vsub_u8(cb_bytes, signflip))"
  },
  {
    "label": "vreinterpretq_s16_u16()",
    "kind": "Method",
    "detail": "Function (int16x8_t yws =)",
    "insertText": "vreinterpretq_s16_u16(vshll_n_u8(y_bytes, 4))"
  },
  {
    "label": "vshll_n_s8()",
    "kind": "Method",
    "detail": "Function (int16x8_t crw =)",
    "insertText": "vshll_n_s8(cr_biased, 7)"
  },
  {
    "label": "vshll_n_s8()",
    "kind": "Method",
    "detail": "Function (int16x8_t cbw =)",
    "insertText": "vshll_n_s8(cb_biased, 7)"
  },
  {
    "label": "vqdmulhq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cr0 =)",
    "insertText": "vqdmulhq_s16(crw, cr_const0)"
  },
  {
    "label": "vqdmulhq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cb0 =)",
    "insertText": "vqdmulhq_s16(cbw, cb_const0)"
  },
  {
    "label": "vqdmulhq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cr1 =)",
    "insertText": "vqdmulhq_s16(crw, cr_const1)"
  },
  {
    "label": "vqdmulhq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t cb1 =)",
    "insertText": "vqdmulhq_s16(cbw, cb_const1)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t rws =)",
    "insertText": "vaddq_s16(yws, cr0)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t gws =)",
    "insertText": "vaddq_s16(vaddq_s16(yws, cb0), cr1)"
  },
  {
    "label": "vaddq_s16()",
    "kind": "Method",
    "detail": "Function (int16x8_t bws =)",
    "insertText": "vaddq_s16(yws, cb1)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (uint8x8x4_t o ; o . val [ 0 ] =)",
    "insertText": "vqrshrun_n_s16(rws, 4)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (o . val [ 1 ] =)",
    "insertText": "vqrshrun_n_s16(gws, 4)"
  },
  {
    "label": "vqrshrun_n_s16()",
    "kind": "Method",
    "detail": "Function (o . val [ 2 ] =)",
    "insertText": "vqrshrun_n_s16(bws, 4)"
  },
  {
    "label": "vdup_n_u8()",
    "kind": "Method",
    "detail": "Function (o . val [ 3 ] =)",
    "insertText": "vdup_n_u8(255)"
  },
  {
    "label": "vst4_u8()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vst4_u8(out, o)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (out + = 8* 4 ; } } # endif)",
    "insertText": "for(; i < count; ++i)"
  },
  {
    "label": "stbi__float2fixed()",
    "kind": "Method",
    "detail": "Function (g = y_fixed + cr* -)",
    "insertText": "stbi__float2fixed(0.71414f) + ((cb*-stbi__float2fixed(0.34414f)) & 0xffff0000)"
  },
  {
    "label": "stbi__setup_jpeg()",
    "kind": "Method",
    "detail": "Function (out [ 3 ] = 2 5 5 ; out + = step ; } } # endif void)",
    "insertText": "stbi__setup_jpeg(stbi__jpeg *j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (j -> idct_block_kernel = stbi__idct_block ; j -> YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_row ; j -> resample_row_hv_2_kernel = stbi__resample_row_hv_2 ; # ifdef STBI_SSE2)",
    "insertText": "if(stbi__sse2_available())"
  },
  {
    "label": "stbi__cleanup_jpeg()",
    "kind": "Method",
    "detail": "Function (j -> idct_block_kernel = stbi__idct_simd ; j -> YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_simd ; j -> resample_row_hv_2_kernel = stbi__resample_row_hv_2_simd ; } # endif # ifdef STBI_NEON j -> idct_block_kernel = stbi__idct_simd ; j -> YCbCr_to_RGB_kernel = stbi__YCbCr_to_RGB_simd ; j -> resample_row_hv_2_kernel = stbi__resample_row_hv_2_simd ; # endif } void)",
    "insertText": "stbi__cleanup_jpeg(stbi__jpeg *j)"
  },
  {
    "label": "stbi__free_jpeg_components()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__free_jpeg_components(j, j->s->img_n, 0)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (} typedef struct { resample_row_func resample ; stbi_uc* line0,* line1 ; int hs,vs ; int w_lores ; int ystep ; int ypos ; } stbi__resample ; stbi_uc)",
    "insertText": "stbi__blinn_8x8(stbi_uc x, stbi_uc y)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (unsigned int t = x* y + 1 2 8 ;)",
    "insertText": "return(stbi_uc) ((t + (t >>8)) >> 8)"
  },
  {
    "label": "load_jpeg_image()",
    "kind": "Method",
    "detail": "Function (} stbi_uc*)",
    "insertText": "load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int n,decode_n,is_rgb ; z -> s -> img_n = 0 ;)",
    "insertText": "if(req_comp < 0 || req_comp > 4) return stbi__errpuc(\"bad req_comp\", \"Internal error\")"
  },
  {
    "label": "stbi__cleanup_jpeg()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__cleanup_jpeg(z)"
  },
  {
    "label": "linebuf()",
    "kind": "Method",
    "detail": "Function (stbi__resample* r =& res_comp [ k ] ; z -> img_comp [ k ] .)",
    "insertText": "linebuf(stbi_uc *) stbi__malloc(z->s->img_x + 3)"
  },
  {
    "label": "w_lores()",
    "kind": "Method",
    "detail": "Function (hs)",
    "insertText": "w_lores(z->s->img_x + r->hs-1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (resample = resample_row_1)",
    "insertText": "if(r->hs == 1 && r->vs == 1)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(j=0; j < z->s->img_y; ++j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (stbi_uc* out = output + n* z -> s -> img_x* j ;)",
    "insertText": "for(k=0; k < decode_n; ++k)"
  },
  {
    "label": "ystep()",
    "kind": "Method",
    "detail": "Function (stbi__resample* r =& res_comp [ k ] ; int y_bot = r ->)",
    "insertText": "ystep(r->vs >> 1)"
  },
  {
    "label": "resample()",
    "kind": "Method",
    "detail": "Function (coutput [ k ] = r ->)",
    "insertText": "resample(z->img_comp[k].linebuf, y_bot ? r->line1 : r->line0, y_bot ? r->line0 : r->line1, r->w_lores, r->hs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (line1 += z->img_comp[k].w2)",
    "insertText": "if(++r->ypos < z->img_comp[k].y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(n >= 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc* y = coutput [ 0 ] ;)",
    "insertText": "if(z->s->img_n == 3)"
  },
  {
    "label": "YCbCr_to_RGB_kernel()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] = y [ i ] ; out [ 1 ] = coutput [ 1 ] [ i ] ; out [ 2 ] = coutput [ 2 ] [ i ] ; out [ 3 ] = 2 5 5 ; out + = n ; } } else { z ->)",
    "insertText": "YCbCr_to_RGB_kernel(out, y, coutput[1], coutput[2], z->s->img_x, n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "if(z->s->img_n == 4)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (stbi_uc m = coutput [ 3 ] [ i ] ; out [ 0 ] =)",
    "insertText": "stbi__blinn_8x8(coutput[0][i], m)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] =)",
    "insertText": "stbi__blinn_8x8(coutput[1][i], m)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (out [ 2 ] =)",
    "insertText": "stbi__blinn_8x8(coutput[2][i], m)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (out [ 3 ] = 2 5 5 ; out + = n ; } } else)",
    "insertText": "if(z->app14_color_transform == 2)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (stbi_uc m = coutput [ 3 ] [ i ] ; out [ 0 ] =)",
    "insertText": "stbi__blinn_8x8(255 - out[0], m)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] =)",
    "insertText": "stbi__blinn_8x8(255 - out[1], m)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (out [ 2 ] =)",
    "insertText": "stbi__blinn_8x8(255 - out[2], m)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else)",
    "insertText": "for(i=0; i < z->s->img_x; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] = out [ 1 ] = out [ 2 ] = y [ i ] ; out [ 3 ] = 2 5 5 ; out + = n ; } } else {)",
    "insertText": "if(is_rgb)"
  },
  {
    "label": "stbi__compute_y()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "stbi__compute_y(coutput[0][i], coutput[1][i], coutput[2][i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] = 2 5 5 ; } } } else)",
    "insertText": "if(z->s->img_n == 4 && z->app14_color_transform == 0)"
  },
  {
    "label": "stbi__compute_y()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "stbi__compute_y(r, g, b)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] = 2 5 5 ; out + = n ; } } else)",
    "insertText": "if(z->s->img_n == 4 && z->app14_color_transform == 2)"
  },
  {
    "label": "stbi__blinn_8x8()",
    "kind": "Method",
    "detail": "Function (out [ 0 ] =)",
    "insertText": "stbi__blinn_8x8(255 - coutput[0][i], coutput[3][i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (out [ 1 ] = 2 5 5 ; out + = n ; } } else { stbi_uc* y = coutput [ 0 ] ;)",
    "insertText": "if(n == 1) for (i=0; i < z->s->img_x; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s->img_n >= 3 ? 3 : 1)",
    "insertText": "if(comp)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (unsigned char* result ; stbi__jpeg*)",
    "insertText": "j(stbi__jpeg*) stbi__malloc(sizeof(stbi__jpeg))"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(ri)"
  },
  {
    "label": "stbi__setup_jpeg()",
    "kind": "Method",
    "detail": "Function (j -> s = s ;)",
    "insertText": "stbi__setup_jpeg(j)"
  },
  {
    "label": "load_jpeg_image()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "load_jpeg_image(j, x,y,comp,req_comp)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(j)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (int r ; stbi__jpeg*)",
    "insertText": "j(stbi__jpeg*)stbi__malloc(sizeof(stbi__jpeg))"
  },
  {
    "label": "stbi__decode_jpeg_header()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "stbi__decode_jpeg_header(j, STBI__SCAN_type)"
  },
  {
    "label": "stbi__rewind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__rewind(s)"
  },
  {
    "label": "stbi__rewind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__rewind(j->s)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (int result ; stbi__jpeg*)",
    "insertText": "j(stbi__jpeg*) (stbi__malloc(sizeof(stbi__jpeg)))"
  },
  {
    "label": "stbi__jpeg_info_raw()",
    "kind": "Method",
    "detail": "Function (j -> s = s ; result =)",
    "insertText": "stbi__jpeg_info_raw(j, x, y, comp)"
  },
  {
    "label": "stbi__bitreverse16()",
    "kind": "Method",
    "detail": "Function (stbi__uint16 fast [ 1<<STBI__ZFAST_BITS ] ; stbi__uint16 firstcode [ 1 6 ] ; int maxcode [ 1 7 ] ; stbi__uint16 firstsymbol [ 1 6 ] ; stbi_uc size [ 2 8 8 ] ; stbi__uint16 value [ 2 8 8 ] ; } stbi__zhuffman ; stbi_inline int)",
    "insertText": "stbi__bitreverse16(int n)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((n & 0xAAAA) >> 1) | ((n & 0x5555) << 1)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((n & 0xCCCC) >> 2) | ((n & 0x3333) << 2)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((n & 0xF0F0) >> 4) | ((n & 0x0F0F) << 4)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "n((n & 0xFF00) >> 8) | ((n & 0x00FF) << 8)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(bits <= 16)"
  },
  {
    "label": "stbi__zbuild_huffman()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stbi__zbuild_huffman(stbi__zhuffman *z, const stbi_uc *sizelist, int num)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (int i,k = 0 ; int code,next_code [ 1 6 ],sizes [ 1 7 ] ;)",
    "insertText": "memset(sizes, 0, sizeof(sizes))"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(z->fast, 0, sizeof(z->fast))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (sizes [ 0 ] = 0 ;)",
    "insertText": "for(i=1; i < 16; ++i) if (sizes[i] > (1 << i)) return stbi__err(\"bad sizes\", \"Corrupt PNG\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (code = 0 ;)",
    "insertText": "for(i=1; i < 16; ++i)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (next_code [ i ] = code ; z -> firstcode [)",
    "insertText": "i(stbi__uint16)"
  },
  {
    "label": "code()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "code(code + sizes[i])"
  },
  {
    "label": "code()",
    "kind": "Method",
    "detail": "Function (z -> maxcode [ i ] =)",
    "insertText": "code(16-i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (code<<= 1 ; k + = sizes [ i ] ; } z -> maxcode [ 1 6 ] = 0 x10000 ;)",
    "insertText": "for(i=0; i < num; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int s = sizelist [ i ] ;)",
    "insertText": "if(s)"
  },
  {
    "label": "fastv()",
    "kind": "Method",
    "detail": "Function (int c = next_code [ s ] - z -> firstcode [ s ] + z -> firstsymbol [ s ] ; stbi__uint16)",
    "insertText": "fastv(stbi__uint16) ((s << 9) | i)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (z -> size [)",
    "insertText": "c(stbi_uc)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (z -> value [)",
    "insertText": "c(stbi__uint16)"
  },
  {
    "label": "stbi__bit_reverse()",
    "kind": "Method",
    "detail": "Function (int j =)",
    "insertText": "stbi__bit_reverse(next_code[s],s)"
  },
  {
    "label": "j()",
    "kind": "Method",
    "detail": "Function (z -> fast [ j ] = fastv ;)",
    "insertText": "j(1 << s)"
  },
  {
    "label": "stbi__zget8()",
    "kind": "Method",
    "detail": "Function (} } + + next_code [ s ] ; } } return 1 ; } typedef struct { stbi_uc* zbuffer,* zbuffer_end ; int num_bits ; stbi__uint32 code_buffer ; char* zout ; char* zout_start ; char* zout_end ; int z_expandable ; stbi__zhuffman z_length,z_distance ; } stbi__zbuf ; stbi_inline stbi_uc)",
    "insertText": "stbi__zget8(stbi__zbuf *z)"
  },
  {
    "label": "code_buffer()",
    "kind": "Method",
    "detail": "Function (num_bits)",
    "insertText": "code_buffer(unsigned int) stbi__zget8(z)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (z -> num_bits + = 8 ; })",
    "insertText": "while(z->num_bits <= 24)"
  },
  {
    "label": "stbi__zreceive()",
    "kind": "Method",
    "detail": "Function (} stbi_inline unsigned int)",
    "insertText": "stbi__zreceive(stbi__zbuf *z, int n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned int k ;)",
    "insertText": "if(z->num_bits < n) stbi__fill_bits(z)"
  },
  {
    "label": "code_buffer()",
    "kind": "Method",
    "detail": "Function (k = z ->)",
    "insertText": "code_buffer((1 << n) - 1)"
  },
  {
    "label": "stbi__zhuffman_decode_slowpath()",
    "kind": "Method",
    "detail": "Function (z -> code_buffer>> = n ; z -> num_bits - = n ; return k ; } int)",
    "insertText": "stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)"
  },
  {
    "label": "stbi__bit_reverse()",
    "kind": "Method",
    "detail": "Function (int b,s,k ; k =)",
    "insertText": "stbi__bit_reverse(a->code_buffer, 16)"
  },
  {
    "label": "b()",
    "kind": "Method",
    "detail": "Function (firstcode[s] + z->firstsymbol[s])",
    "insertText": "b(k >> (16-s))"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(z->size[b] == s)"
  },
  {
    "label": "stbi__zhuffman_decode()",
    "kind": "Method",
    "detail": "Function (a -> code_buffer>> = s ; a -> num_bits - = s ; return z -> value [ b ] ; } stbi_inline int)",
    "insertText": "stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int b,s ;)",
    "insertText": "if(a->num_bits < 16) stbi__fill_bits(a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (b = z -> fast [ a -> code_buffer& STBI__ZFAST_MASK ] ;)",
    "insertText": "if(b)"
  },
  {
    "label": "stbi__zhuffman_decode_slowpath()",
    "kind": "Method",
    "detail": "Function (s = b>> 9 ; a -> code_buffer>> = s ; a -> num_bits - = s ; return b& 5 1 1 ; } return)",
    "insertText": "stbi__zhuffman_decode_slowpath(a, z)"
  },
  {
    "label": "stbi__zexpand()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stbi__zexpand(stbi__zbuf *z, char *zout, int n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char* q ; int cur,limit,old_limit ; z -> zout = zout ;)",
    "insertText": "if(!z->z_expandable) return stbi__err(\"output buffer limit\",\"Corrupt PNG\")"
  },
  {
    "label": "cur()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cur(int) (z->zout - z->zout_start)"
  },
  {
    "label": "old_limit()",
    "kind": "Method",
    "detail": "Function (limit =)",
    "insertText": "old_limit(int) (z->zout_end - z->zout_start)"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "q(char *) STBI_REALLOC_SIZED(z->zout_start, old_limit, limit)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(old_limit)"
  },
  {
    "label": "stbi__parse_huffman_block()",
    "kind": "Method",
    "detail": "Function (z -> zout_start = q ; z -> zout = q + cur ; z -> zout_end = q + limit ; return 1 ; } const int stbi__zlength_base [ 3 1 ] = { 3,4,5,6,7,8,9,1 0,1 1,1 3,1 5,1 7,1 9,2 3,2 7,3 1,3 5,4 3,5 1,5 9,6 7,8 3,9 9,1 1 5,1 3 1,1 6 3,1 9 5,2 2 7,2 5 8,0,0 } ; const int stbi__zlength_extra [ 3 1 ] = { 0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0 } ; const int stbi__zdist_base [ 3 2 ] = { 1,2,3,4,5,7,9,1 3,1 7,2 5,3 3,4 9,6 5,9 7,1 2 9,1 9 3,2 5 7,3 8 5,5 1 3,7 6 9,1 0 2 5,1 5 3 7,2 0 4 9,3 0 7 3,4 0 9 7,6 1 4 5,8 1 9 3,1 2 2 8 9,1 6 3 8 5,2 4 5 7 7,0,0 } ; const int stbi__zdist_extra [ 3 2 ] = { 0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,1 0,1 0,1 1,1 1,1 2,1 2,1 3,1 3 } ; int)",
    "insertText": "stbi__parse_huffman_block(stbi__zbuf *a)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (char* zout = a -> zout ;)",
    "insertText": "for(;;)"
  },
  {
    "label": "stbi__zhuffman_decode()",
    "kind": "Method",
    "detail": "Function (int z =)",
    "insertText": "stbi__zhuffman_decode(a, &a->z_length)"
  },
  {
    "label": "zout()",
    "kind": "Method",
    "detail": "Function (zout = a -> zout ; }*)",
    "insertText": "zout(char)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { stbi_uc* p ; int len,dist ;)",
    "insertText": "if(z == 256)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (a -> zout = zout ; return 1 ; } z - = 2 5 7 ; len = stbi__zlength_base [ z ] ;)",
    "insertText": "if(stbi__zlength_extra[z]) len += stbi__zreceive(a, stbi__zlength_extra[z])"
  },
  {
    "label": "stbi__zhuffman_decode()",
    "kind": "Method",
    "detail": "Function (z =)",
    "insertText": "stbi__zhuffman_decode(a, &a->z_distance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dist = stbi__zdist_base [ z ] ;)",
    "insertText": "if(stbi__zdist_extra[z]) dist += stbi__zreceive(a, stbi__zdist_extra[z])"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (zout = a -> zout ; })",
    "insertText": "p(stbi_uc *) (zout - dist)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc v =* p ;)",
    "insertText": "if(len)"
  },
  {
    "label": "stbi__compute_huffman_codes()",
    "kind": "Method",
    "detail": "Function (} } } } } int)",
    "insertText": "stbi__compute_huffman_codes(stbi__zbuf *a)"
  },
  {
    "label": "stbi__zreceive()",
    "kind": "Method",
    "detail": "Function (const stbi_uc length_dezigzag [ 1 9 ] = { 1 6,1 7,1 8,0,8,7,9,6,1 0,5,1 1,4,1 2,3,1 3,2,1 4,1,1 5 } ; stbi__zhuffman z_codelength ; stbi_uc lencodes [ 2 8 6 + 3 2 + 1 3 7 ] ; stbi_uc codelength_sizes [ 1 9 ] ; int i,n ; int hlit =)",
    "insertText": "stbi__zreceive(a,5)"
  },
  {
    "label": "stbi__zreceive()",
    "kind": "Method",
    "detail": "Function (int hclen =)",
    "insertText": "stbi__zreceive(a,4)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (int ntot = hlit + hdist ;)",
    "insertText": "memset(codelength_sizes, 0, sizeof(codelength_sizes))"
  },
  {
    "label": "stbi__zreceive()",
    "kind": "Method",
    "detail": "Function (int s =)",
    "insertText": "stbi__zreceive(a,3)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (codelength_sizes [ length_dezigzag [)",
    "insertText": "i(stbi_uc)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!stbi__zbuild_huffman(&z_codelength, codelength_sizes, 19))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (n = 0 ;)",
    "insertText": "while(n < ntot)"
  },
  {
    "label": "stbi__zhuffman_decode()",
    "kind": "Method",
    "detail": "Function (int c =)",
    "insertText": "stbi__zhuffman_decode(a, &z_codelength)"
  },
  {
    "label": "stbi__zreceive()",
    "kind": "Method",
    "detail": "Function (c =)",
    "insertText": "stbi__zreceive(a,2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (fill = lencodes [ n - 1 ] ; } else)",
    "insertText": "if(c == 17) c = stbi__zreceive(a,3)"
  },
  {
    "label": "stbi__zreceive()",
    "kind": "Method",
    "detail": "Function (c =)",
    "insertText": "stbi__zreceive(a,7)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(ntot - n < c) return stbi__err(\"bad codelengths\", \"Corrupt PNG\")"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(lencodes+n, fill, c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n + = c ; } })",
    "insertText": "if(n != ntot) return stbi__err(\"bad codelengths\",\"Corrupt PNG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc header [ 4 ] ; int len,nlen,k ;)",
    "insertText": "if(a->num_bits & 7) stbi__zreceive(a, a->num_bits & 7)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (k = 0 ;)",
    "insertText": "while(a->num_bits > 0)"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (header [)",
    "insertText": "k(stbi_uc) (a->code_buffer & 255)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (a -> code_buffer>> = 8 ; a -> num_bits - = 8 ; })",
    "insertText": "STBI_ASSERT(a->num_bits == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (len = header [ 1 ]* 2 5 6 + header [ 0 ] ; nlen = header [ 3 ]* 2 5 6 + header [ 2 ] ;)",
    "insertText": "if(nlen != (len ^ 0xffff)) return stbi__err(\"zlib corrupt\",\"Corrupt PNG\")"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(a->zout, a->zbuffer, len)"
  },
  {
    "label": "stbi__parse_zlib_header()",
    "kind": "Method",
    "detail": "Function (a -> zbuffer + = len ; a -> zout + = len ; return 1 ; } int)",
    "insertText": "stbi__parse_zlib_header(stbi__zbuf *a)"
  },
  {
    "label": "stbi__zget8()",
    "kind": "Method",
    "detail": "Function (int cmf =)",
    "insertText": "stbi__zget8(a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int final,type ;)",
    "insertText": "if(parse_header) if (!stbi__parse_zlib_header(a))"
  },
  {
    "label": "stbi__zreceive()",
    "kind": "Method",
    "detail": "Function (a -> num_bits = 0 ; a -> code_buffer = 0 ; do { final =)",
    "insertText": "stbi__zreceive(a,1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(type == 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!stbi__compute_huffman_codes(a))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!stbi__parse_huffman_block(a))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "while(!final)"
  },
  {
    "label": "stbi__parse_zlib()",
    "kind": "Method",
    "detail": "Function (a -> zout_start = obuf ; a -> zout = obuf ; a -> zout_end = obuf + olen ; a -> z_expandable = exp ; return)",
    "insertText": "stbi__parse_zlib(a, parse_header)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (stbi__zbuf a ; char*)",
    "insertText": "p(char *) stbi__malloc(initial_size)"
  },
  {
    "label": "zbuffer()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "zbuffer(stbi_uc *)"
  },
  {
    "label": "zbuffer_end()",
    "kind": "Method",
    "detail": "Function (a .)",
    "insertText": "zbuffer_end(stbi_uc *)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (stbi__zbuf a ; char*)",
    "insertText": "p(char *) stbi__malloc(16384)"
  },
  {
    "label": "stbi__get32be()",
    "kind": "Method",
    "detail": "Function (stbi__pngchunk c ; c . length =)",
    "insertText": "stbi__get32be(s)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const stbi_uc png_sig [ 8 ] = { 1 3 7,8 0,7 8,7 1,1 3,1 0,2 6,1 0 } ; int i ;)",
    "insertText": "for(i=0; i < 8; ++i) if (stbi__get8(s) != png_sig[i]) return stbi__err(\"bad png sig\",\"Not a PNG\")"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (int p = a + b - c ; int pa =)",
    "insertText": "abs(p-a)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (int pb =)",
    "insertText": "abs(p-b)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (int pc =)",
    "insertText": "abs(p-c)"
  },
  {
    "label": "bytes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "bytes(depth == 16? 2 : 1)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (stbi__context* s = a -> s ; stbi__uint32 i,j,stride = x* out_n* bytes ; stbi__uint32 img_len,img_width_bytes ; int k ; int img_n = s -> img_n ; int output_bytes = out_n* bytes ; int filter_bytes = img_n* bytes ; int width = x ;)",
    "insertText": "STBI_ASSERT(out_n == s->img_n || out_n == s->img_n+1)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (a ->)",
    "insertText": "out(stbi_uc *) stbi__malloc_mad3(x, y, output_bytes, 0)"
  },
  {
    "label": "img_width_bytes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "img_width_bytes(((img_n * x * depth) + 7) >> 3)"
  },
  {
    "label": "img_len()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "img_len(img_width_bytes + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc* cur = a -> out + stride* j ; stbi_uc* prior ; int filter =* raw + + ;)",
    "insertText": "if(filter > 4) return stbi__err(\"invalid filter\",\"Corrupt PNG\")"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(img_width_bytes <= x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cur + = x* out_n - img_width_bytes ; filter_bytes = 1 ; width = img_width_bytes ; } prior = cur - stride ;)",
    "insertText": "if(j == 0)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (break ; case STBI__F_avg : cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + (prior[k]>>1))"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (break ; case STBI__F_paeth : cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + stbi__paeth(0,prior[k],0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; case STBI__F_avg_first : cur [ k ] = raw [ k ] ; break ; case STBI__F_paeth_first : cur [ k ] = raw [ k ] ; break ; } })",
    "insertText": "if(depth == 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (raw + = img_n ; cur + = out_n ; prior + = out_n ; } else)",
    "insertText": "if(depth == 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cur [ filter_bytes ] = 2 5 5 ; cur [ filter_bytes + 1 ] = 2 5 5 ; } raw + = filter_bytes ; cur + = output_bytes ; prior + = output_bytes ; } else { raw + = 1 ; cur + = 1 ; prior + = 1 ; })",
    "insertText": "if(depth < 8 || img_n == out_n)"
  },
  {
    "label": "nk()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "nk(width - 1)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "STBI__CASE(f) \\ case f: \\ for (k=0; k < nk; ++k) switch (filter)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (break ;)",
    "insertText": "STBI__CASE(STBI__F_sub)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + cur[k-filter_bytes])"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (} break ;)",
    "insertText": "STBI__CASE(STBI__F_up)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + prior[k])"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (} break ;)",
    "insertText": "STBI__CASE(STBI__F_avg)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + ((prior[k] + cur[k-filter_bytes])>>1))"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (} break ;)",
    "insertText": "STBI__CASE(STBI__F_paeth)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],prior[k],prior[k-filter_bytes]))"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (} break ;)",
    "insertText": "STBI__CASE(STBI__F_avg_first)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + (cur[k-filter_bytes] >> 1))"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (} break ;)",
    "insertText": "STBI__CASE(STBI__F_paeth_first)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + stbi__paeth(cur[k-filter_bytes],0,0))"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (} break ; } # undef STBI__CASE raw + = nk ; } else {)",
    "insertText": "STBI_ASSERT(img_n+1 == out_n)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "STBI__CASE(f) \\ case f: \\ for (i=x-1; i >= 1; --i, cur[filter_bytes]=255,raw+=filter_bytes,cur+=output_bytes,prior+=output_bytes) \\ for (k=0; k < filter_bytes; ++k) switch (filter)"
  },
  {
    "label": "STBI__CASE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI__CASE(STBI__F_none)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + cur[k- output_bytes])"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + ((prior[k] + cur[k- output_bytes])>>1))"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],prior[k],prior[k- output_bytes]))"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + (cur[k- output_bytes] >> 1))"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (cur [ k ] =)",
    "insertText": "STBI__BYTECAST(raw[k] + stbi__paeth(cur[k- output_bytes],0,0))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (cur = a -> out + stride* j ;)",
    "insertText": "for(i=0; i < x; ++i,cur+=output_bytes)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cur [ filter_bytes + 1 ] = 2 5 5 ; } } } })",
    "insertText": "if(depth < 8)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (stbi_uc* cur = a -> out + stride* j ; stbi_uc* in = a -> out + stride* j + x* out_n - img_width_bytes ; stbi_uc)",
    "insertText": "scale(color == 0)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 4))"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in ) & 0x0f)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(k > 0) *cur++ = scale * ((*in >> 4))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(depth == 2)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 6))"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 4) & 0x03)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 2) & 0x03)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in ) & 0x03)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(k > 0) *cur++ = scale * ((*in >> 6))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(depth == 1)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 7))"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 6) & 0x01)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 5) & 0x01)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 4) & 0x01)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 3) & 0x01)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 2) & 0x01)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in >> 1) & 0x01)"
  },
  {
    "label": "scale()",
    "kind": "Method",
    "detail": "Function (* cur + + =)",
    "insertText": "scale((*in ) & 0x01)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(k > 0) *cur++ = scale * ((*in >> 7))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(img_n != out_n)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int q ; cur = a -> out + stride* j ;)",
    "insertText": "if(img_n == 1)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (cur [ q* 2 + 1 ] = 2 5 5 ; cur [ q* 2 + 0 ] = cur [ q ] ; } } else {)",
    "insertText": "STBI_ASSERT(img_n == 3)"
  },
  {
    "label": "cur16()",
    "kind": "Method",
    "detail": "Function (stbi_uc* cur = a -> out ; stbi__uint16*)",
    "insertText": "cur16(stbi__uint16*)"
  },
  {
    "label": "cur16()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "cur16(cur[0] << 8)"
  },
  {
    "label": "stbi__create_png_image()",
    "kind": "Method",
    "detail": "Function (} } return 1 ; } int)",
    "insertText": "stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)"
  },
  {
    "label": "bytes()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "bytes(depth == 16 ? 2 : 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int out_bytes = out_n* bytes ; stbi_uc* final ; int p ;)",
    "insertText": "if(!interlaced) return stbi__create_png_image_raw(a, image_data, image_data_len, out_n, a->s->img_x, a->s->img_y, depth, color)"
  },
  {
    "label": "final()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "final(stbi_uc *) stbi__malloc_mad3(a->s->img_x, a->s->img_y, out_bytes, 0)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (int xorig [ ] = { 0,4,0,2,0,1,0 } ; int yorig [ ] = { 0,0,4,0,2,0,1 } ; int xspc [ ] = { 8,8,4,4,2,2,1 } ; int yspc [ ] = { 8,8,8,4,4,2,2 } ; int i,j,x,y ;)",
    "insertText": "x(a->s->img_x - xorig[p] + xspc[p]-1)"
  },
  {
    "label": "y()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "y(a->s->img_y - yorig[p] + yspc[p]-1)"
  },
  {
    "label": "img_len()",
    "kind": "Method",
    "detail": "Function (stbi__uint32)",
    "insertText": "img_len((((a->s->img_n * x * depth) + 7) >> 3) + 1)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(final)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (int out_y = j* yspc [ p ] + yorig [ p ] ; int out_x = i* xspc [ p ] + xorig [ p ] ;)",
    "insertText": "memcpy(final + out_y*a->s->img_x*out_bytes + out_x*out_bytes, a->out + (j*x+i)*out_bytes, out_bytes)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "STBI_FREE(a->out)"
  },
  {
    "label": "stbi__compute_transparency()",
    "kind": "Method",
    "detail": "Function (image_data + = img_len ; image_data_len - = img_len ; } } a -> out = final ; return 1 ; } int)",
    "insertText": "stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (stbi__context* s = z -> s ; stbi__uint32 i,pixel_count = s -> img_x* s -> img_y ; stbi_uc* p = z -> out ;)",
    "insertText": "STBI_ASSERT(out_n == 2 || out_n == 4)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(p[0] == tc[0] ? 0 : 255)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (p + = 2 ; } } else {)",
    "insertText": "for(i=0; i < pixel_count; ++i)"
  },
  {
    "label": "stbi__compute_transparency16()",
    "kind": "Method",
    "detail": "Function (p + = 4 ; } } return 1 ; } int)",
    "insertText": "stbi__compute_transparency16(stbi__png *z, stbi__uint16 tc[3], int out_n)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (out)",
    "insertText": "p(stbi__uint16*)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(p[0] == tc[0] ? 0 : 65535)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (p + = 2 ; } } else {)",
    "insertText": "for(i = 0; i < pixel_count; ++i)"
  },
  {
    "label": "stbi__expand_png_palette()",
    "kind": "Method",
    "detail": "Function (p + = 4 ; } } return 1 ; } int)",
    "insertText": "stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (stbi__uint32 i,pixel_count = a -> s -> img_x* a -> s -> img_y ; stbi_uc* p,* temp_out,* orig = a -> out ;)",
    "insertText": "p(stbi_uc *) stbi__malloc_mad2(pixel_count, pal_img_n, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (temp_out = p ;)",
    "insertText": "if(pal_img_n == 3)"
  },
  {
    "label": "stbi__de_iphone()",
    "kind": "Method",
    "detail": "Function (stbi__de_iphone_flag = flag_true_if_should_convert ; } void)",
    "insertText": "stbi__de_iphone(stbi__png *z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi__context* s = z -> s ; stbi__uint32 i,pixel_count = s -> img_x* s -> img_y ; stbi_uc* p = z -> out ;)",
    "insertText": "if(s->img_out_n == 3)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (stbi_uc t = p [ 0 ] ; p [ 0 ] = p [ 2 ] ; p [ 2 ] = t ; p + = 3 ; } } else {)",
    "insertText": "STBI_ASSERT(s->img_out_n == 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc a = p [ 3 ] ; stbi_uc t = p [ 0 ] ;)",
    "insertText": "if(a)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (stbi_uc half = a / 2 ;)",
    "insertText": "p(p[2] * 255 + half)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(p[1] * 255 + half)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(t * 255 + half)"
  },
  {
    "label": "STBI__PNG_TYPE()",
    "kind": "Method",
    "detail": "Function (stbi_uc t = p [ 0 ] ; p [ 0 ] = p [ 2 ] ; p [ 2 ] = t ; p + = 4 ; } } } } # define)",
    "insertText": "STBI__PNG_TYPE(a,b,c,d) (((unsigned) (a) << 24) + ((unsigned) (b) << 16) + ((unsigned) (c) << 8) + (unsigned) (d)) static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc palette [ 1 0 2 4 ],pal_img_n = 0 ; stbi_uc has_trans = 0,tc [ 3 ] = { 0 } ; stbi__uint16 tc16 [ 3 ] ; stbi__uint32 ioff = 0,idata_limit = 0,i,pal_len = 0 ; int first = 1,k,interlace = 0,color = 0,is_iphone = 0 ; stbi__context* s = z -> s ; z -> expanded = NULL ; z -> idata = NULL ; z -> out = NULL ;)",
    "insertText": "if(!stbi__check_png_header(s))"
  },
  {
    "label": "stbi__get_chunk_header()",
    "kind": "Method",
    "detail": "Function (stbi__pngchunk c =)",
    "insertText": "stbi__get_chunk_header(s)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s, c.length)"
  },
  {
    "label": "STBI__PNG_TYPE()",
    "kind": "Method",
    "detail": "Function (break ; case)",
    "insertText": "STBI__PNG_TYPE('I','H','D','R')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int comp,filter ;)",
    "insertText": "if(!first) return stbi__err(\"multiple IHDR\",\"Corrupt PNG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (first = 0 ;)",
    "insertText": "if(c.length != 13) return stbi__err(\"bad IHDR len\",\"Corrupt PNG\")"
  },
  {
    "label": "img_n()",
    "kind": "Method",
    "detail": "Function (s ->)",
    "insertText": "img_n(color & 2 ? 3 : 1) + (color & 4 ? 1 : 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { s -> img_n = 1 ;)",
    "insertText": "if((1 << 30) / s->img_x / 4 < s->img_y) return stbi__err(\"too large\",\"Corrupt PNG\")"
  },
  {
    "label": "STBI__PNG_TYPE()",
    "kind": "Method",
    "detail": "Function (} break ; } case)",
    "insertText": "STBI__PNG_TYPE('P','L','T','E')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pal_len = c . length / 3 ;)",
    "insertText": "if(pal_len * 3 != c.length) return stbi__err(\"invalid PLTE\",\"Corrupt PNG\")"
  },
  {
    "label": "STBI__PNG_TYPE()",
    "kind": "Method",
    "detail": "Function (palette [ i* 4 + 3 ] = 2 5 5 ; } break ; } case)",
    "insertText": "STBI__PNG_TYPE('t','R','N','S')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s -> img_n = 4 ; return 1 ; })",
    "insertText": "if(pal_len == 0) return stbi__err(\"tRNS before PLTE\",\"Corrupt PNG\")"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (pal_img_n = 4 ;)",
    "insertText": "for(i=0; i < c.length; ++i) palette[i*4+3] = stbi__get8(s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!(s->img_n & 1)) return stbi__err(\"tRNS with alpha\",\"Corrupt PNG\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (has_trans = 1 ;)",
    "insertText": "if(z->depth == 16)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (depth])",
    "insertText": "for(k = 0; k < s->img_n; ++k) tc[k] = (stbi_uc)(stbi__get16be(s) & 255)"
  },
  {
    "label": "STBI__PNG_TYPE()",
    "kind": "Method",
    "detail": "Function (} } break ; } case)",
    "insertText": "STBI__PNG_TYPE('I','D','A','T')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s -> img_n = pal_img_n ; return 1 ; })",
    "insertText": "if((int)(ioff + c.length) < (int)ioff)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi__uint32 idata_limit_old = idata_limit ; stbi_uc* p ;)",
    "insertText": "if(idata_limit == 0)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(idata_limit_old)"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "p(stbi_uc *) STBI_REALLOC_SIZED(z->idata, idata_limit_old, idata_limit)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (z -> idata = p ; })",
    "insertText": "if(!stbi__getn(s, z->idata+ioff,c.length)) return stbi__err(\"outofdata\",\"Corrupt PNG\")"
  },
  {
    "label": "STBI__PNG_TYPE()",
    "kind": "Method",
    "detail": "Function (ioff + = c . length ; break ; } case)",
    "insertText": "STBI__PNG_TYPE('I','E','N','D')"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi__uint32 raw_len,bpl ;)",
    "insertText": "if(first) return stbi__err(\"first not IHDR\", \"Corrupt PNG\")"
  },
  {
    "label": "bpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bpl(s->img_x * z->depth + 7)"
  },
  {
    "label": "expanded()",
    "kind": "Method",
    "detail": "Function (raw_len = bpl* s -> img_y* s -> img_n + s -> img_y ; z ->)",
    "insertText": "expanded(stbi_uc *) stbi_zlib_decode_malloc_guesssize_headerflag((char *) z->idata, ioff, raw_len, (int *) &raw_len, !is_iphone)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(z->idata)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (img_out_n = s->img_n+1)",
    "insertText": "if((req_comp == s->img_n+1 && req_comp != 3 && !pal_img_n) || has_trans)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!stbi__compute_transparency(z, tc, s->img_out_n))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(is_iphone && stbi__de_iphone_flag && s->img_out_n > 2) stbi__de_iphone(z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (img_out_n = req_comp)",
    "insertText": "if(req_comp >= 3)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(has_trans)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (+ + s -> img_n ; })",
    "insertText": "STBI_FREE(z->expanded)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_FAILURE_STRINGS char invalid_chunk [ ] = \" XXXX PNG chunk not known \" ; invalid_chunk [ 0 ] =)",
    "insertText": "STBI__BYTECAST(c.type >> 24)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (invalid_chunk [ 1 ] =)",
    "insertText": "STBI__BYTECAST(c.type >> 16)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (invalid_chunk [ 2 ] =)",
    "insertText": "STBI__BYTECAST(c.type >> 8)"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (invalid_chunk [ 3 ] =)",
    "insertText": "STBI__BYTECAST(c.type >> 0)"
  },
  {
    "label": "stbi__err()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "stbi__err(invalid_chunk, \"PNG not supported: unknown PNG chunk type\")"
  },
  {
    "label": "stbi__do_png()",
    "kind": "Method",
    "detail": "Function (} } void*)",
    "insertText": "stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p -> s -> img_out_n = req_comp ;)",
    "insertText": "if(result == NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (s->img_n)",
    "insertText": "if(n)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "STBI_FREE(p->out)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (p -> out = NULL ;)",
    "insertText": "STBI_FREE(p->expanded)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (p -> expanded = NULL ;)",
    "insertText": "STBI_FREE(p->idata)"
  },
  {
    "label": "stbi__do_png()",
    "kind": "Method",
    "detail": "Function (stbi__png p ; p . s = s ; return)",
    "insertText": "stbi__do_png(&p, x,y,comp,req_comp, ri)"
  },
  {
    "label": "stbi__check_png_header()",
    "kind": "Method",
    "detail": "Function (int r ; r =)",
    "insertText": "stbi__check_png_header(s)"
  },
  {
    "label": "stbi__rewind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__rewind(p->s)"
  },
  {
    "label": "stbi__png_info_raw()",
    "kind": "Method",
    "detail": "Function (stbi__png p ; p . s = s ; return)",
    "insertText": "stbi__png_info_raw(&p, x, y, comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi__png p ; p . s = s ;)",
    "insertText": "if(!stbi__png_info_raw(&p, NULL, NULL, NULL))"
  },
  {
    "label": "stbi__rewind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__rewind(p.s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int r ; int sz ;)",
    "insertText": "if(stbi__get8(s) != 'B')"
  },
  {
    "label": "stbi__get32le()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__get32le(s)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "r(sz == 12 || sz == 40 || sz == 56 || sz == 108 || sz == 124)"
  },
  {
    "label": "stbi__bmp_test_raw()",
    "kind": "Method",
    "detail": "Function (int r =)",
    "insertText": "stbi__bmp_test_raw(s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int n = 0 ;)",
    "insertText": "if(z == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n + = 1 6 ; z>> = 1 6 ; })",
    "insertText": "if(z >= 0x00100)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n + = 8 ; z>> = 8 ; })",
    "insertText": "if(z >= 0x00010)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n + = 4 ; z>> = 4 ; })",
    "insertText": "if(z >= 0x00004)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (n + = 2 ; z>> = 2 ; })",
    "insertText": "if(z >= 0x00002)"
  },
  {
    "label": "stbi__bitcount()",
    "kind": "Method",
    "detail": "Function (n + = 1 ; } return n ; } int)",
    "insertText": "stbi__bitcount(unsigned int a)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(a & 0x55555555) + ((a >> 1) & 0x55555555)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(a & 0x33333333) + ((a >> 2) & 0x33333333)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(a + (a >> 4))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(a + (a >> 8))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(a + (a >> 16))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned int mul_table [ 9 ] = { 0,0 xff,0 x55,0 x49,0 x11,0 x21,0 x41,0 x81,0 x01,} ; unsigned int shift_table [ 9 ] = { 0,0,0,1,0,2,4,6,0,} ;)",
    "insertText": "if(shift < 0)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(8-bits)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_ASSERT(bits >= 0 && bits <= 8)"
  },
  {
    "label": "stbi__bmp_parse_header()",
    "kind": "Method",
    "detail": "Function (} typedef struct { int bpp,offset,hsz ; unsigned int mr,mg,mb,ma,all_a ; } stbi__bmp_data ; void*)",
    "insertText": "stbi__bmp_parse_header(stbi__context *s, stbi__bmp_data *info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int hsz ;)",
    "insertText": "if(stbi__get8(s) != 'B' || stbi__get8(s) != 'M') return stbi__errpuc(\"not BMP\", \"Corrupt BMP\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (info -> mr = info -> mg = info -> mb = info -> ma = 0 ;)",
    "insertText": "if(hsz != 12 && hsz != 40 && hsz != 56 && hsz != 108 && hsz != 124) return stbi__errpuc(\"unknown BMP\", \"BMP type not supported: unknown\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(stbi__get16le(s) != 1) return stbi__errpuc(\"bad BMP\", \"bad BMP\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(info->bpp == 16 || info->bpp == 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (info -> mr = 0 xffu<<1 6 ; info -> mg = 0 xffu<<8 ; info -> mb = 0 xffu<<0 ; info -> ma = 0 xffu<<2 4 ; info -> all_a = 0 ; } else { info -> mr = 3 1 u<<1 0 ; info -> mg = 3 1 u<<5 ; info -> mb = 3 1 u<<0 ; } } else)",
    "insertText": "if(compress == 3)"
  },
  {
    "label": "stbi__errpuc()",
    "kind": "Method",
    "detail": "Function (} } else return)",
    "insertText": "stbi__errpuc(\"bad BMP\", \"bad BMP\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else { int i ;)",
    "insertText": "if(hsz != 108 && hsz != 124) return stbi__errpuc(\"bad BMP\", \"bad BMP\")"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "return(void *)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (info . all_a = 2 5 5 ;)",
    "insertText": "if(stbi__bmp_parse_header(s, &info) == NULL)"
  },
  {
    "label": "flip_vertically()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "flip_vertically((int) s->img_y)"
  },
  {
    "label": "abs()",
    "kind": "Method",
    "detail": "Function (s -> img_y =)",
    "insertText": "abs((int) s->img_y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mr = info . mr ; mg = info . mg ; mb = info . mb ; ma = info . ma ; all_a = info . all_a ;)",
    "insertText": "if(info.hsz == 12)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(info.bpp < 16) psize = (info.offset - 14 - info.hsz)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (img_n = 3)",
    "insertText": "if(info.bpp == 24 && ma == 0xff000000)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out(stbi_uc *) stbi__malloc_mad3(target, s->img_x, s->img_y, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int z = 0 ;)",
    "insertText": "if(psize == 0 || psize > 256)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(out)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(i=0; i < psize; ++i)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (pal [ i ] [ 3 ] = 2 5 5 ; })",
    "insertText": "stbi__skip(s, info.offset - 14 - info.hsz - psize * (info.hsz == 12 ? 3 : 4))"
  },
  {
    "label": "pad()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "pad(-width)"
  },
  {
    "label": "color()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "color(v>>bit_offset)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (out [ z + + ] = pal [ color ] [ 0 ] ; out [ z + + ] = pal [ color ] [ 1 ] ; out [ z + + ] = pal [ color ] [ 2 ] ;)",
    "insertText": "if(target == 4)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "stbi__skip(s, pad)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(j=0; j < (int) s->img_y; ++j)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "v(info.bpp == 8) ? stbi__get8(s)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (} } } else { int rshift = 0,gshift = 0,bshift = 0,ashift = 0,rcount = 0,gcount = 0,bcount = 0,acount = 0 ; int z = 0 ; int easy = 0 ;)",
    "insertText": "stbi__skip(s, info.offset - 14 - info.hsz)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (easy = 1 ; } else)",
    "insertText": "if(info.bpp == 32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!easy)"
  },
  {
    "label": "stbi__high_bit()",
    "kind": "Method",
    "detail": "Function (} rshift =)",
    "insertText": "stbi__high_bit(mr)"
  },
  {
    "label": "stbi__bitcount()",
    "kind": "Method",
    "detail": "Function (rcount =)",
    "insertText": "stbi__bitcount(mr)"
  },
  {
    "label": "stbi__high_bit()",
    "kind": "Method",
    "detail": "Function (gshift =)",
    "insertText": "stbi__high_bit(mg)"
  },
  {
    "label": "stbi__bitcount()",
    "kind": "Method",
    "detail": "Function (gcount =)",
    "insertText": "stbi__bitcount(mg)"
  },
  {
    "label": "stbi__high_bit()",
    "kind": "Method",
    "detail": "Function (bshift =)",
    "insertText": "stbi__high_bit(mb)"
  },
  {
    "label": "stbi__bitcount()",
    "kind": "Method",
    "detail": "Function (bcount =)",
    "insertText": "stbi__bitcount(mb)"
  },
  {
    "label": "stbi__high_bit()",
    "kind": "Method",
    "detail": "Function (ashift =)",
    "insertText": "stbi__high_bit(ma)"
  },
  {
    "label": "stbi__bitcount()",
    "kind": "Method",
    "detail": "Function (acount =)",
    "insertText": "stbi__bitcount(ma)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (z + = 3 ;)",
    "insertText": "a(easy == 2 ? stbi__get8(s) : 255)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else { int bpp = info . bpp ;)",
    "insertText": "for(i=0; i < (int) s->img_x; ++i)"
  },
  {
    "label": "v()",
    "kind": "Method",
    "detail": "Function (stbi__uint32)",
    "insertText": "v(bpp == 16 ? (stbi__uint32) stbi__get16le(s) : stbi__get32le(s))"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (unsigned int a ; out [ z + + ] =)",
    "insertText": "STBI__BYTECAST(stbi__shiftsigned(v & mr, rshift, rcount))"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (out [ z + + ] =)",
    "insertText": "STBI__BYTECAST(stbi__shiftsigned(v & mg, gshift, gcount))"
  },
  {
    "label": "STBI__BYTECAST()",
    "kind": "Method",
    "detail": "Function (out [ z + + ] =)",
    "insertText": "STBI__BYTECAST(stbi__shiftsigned(v & mb, bshift, bcount))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "a(ma ? stbi__shiftsigned(v & ma, ashift, acount) : 255)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (all_a | = a ;)",
    "insertText": "if(target == 4) out[z++] = STBI__BYTECAST(a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(target == 4 && all_a == 0) for (i=4*s->img_x*s->img_y-1; i >= 0; i -= 4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (stbi_uc t ;)",
    "insertText": "for(j=0; j < (int) s->img_y>>1; ++j)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (img_x*target)",
    "insertText": "out(s->img_y-1-j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (t = p1 [ i ] ; p1 [ i ] = p2 [ i ] ; p2 [ i ] = t ; } } })",
    "insertText": "if(req_comp && req_comp != target)"
  },
  {
    "label": "stbi__convert_format()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "stbi__convert_format(out, target, req_comp, s->img_x, s->img_y)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (tga_colormap_bpp = sz ; } else {)",
    "insertText": "if((tga_image_type != 2) && (tga_image_type != 3) && (tga_image_type != 10) && (tga_image_type != 11))"
  },
  {
    "label": "stbi__tga_get_comp()",
    "kind": "Method",
    "detail": "Function (} else { tga_comp =)",
    "insertText": "stbi__tga_get_comp(tga_bits_per_pixel, (tga_image_type == 3) || (tga_image_type == 11), NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!tga_comp)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s,4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if((sz != 2) && (sz != 3) && (sz != 10) && (sz != 11))"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s,9)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(stbi__get16le(s) < 1)"
  },
  {
    "label": "px()",
    "kind": "Method",
    "detail": "Function (stbi__uint16)",
    "insertText": "px(stbi__uint16)stbi__get16le(s)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (stbi__uint16 fiveBitMask = 3 1 ; int)",
    "insertText": "r(px >> 10)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "g(px >> 5)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (int b = px& fiveBitMask ;)",
    "insertText": "out(stbi_uc)((r * 255)/31)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out(stbi_uc)((g * 255)/31)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out(stbi_uc)((b * 255)/31)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(tga_x_origin)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_NOTUSED(tga_y_origin)"
  },
  {
    "label": "tga_inverted()",
    "kind": "Method",
    "detail": "Function (tga_image_type - = 8 ; tga_is_RLE = 1 ; })",
    "insertText": "tga_inverted((tga_inverted >> 5) & 1)"
  },
  {
    "label": "tga_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tga_data(unsigned char*)stbi__malloc_mad3(tga_width, tga_height, tga_comp, 0)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s, tga_offset)"
  },
  {
    "label": "stbi__getn()",
    "kind": "Method",
    "detail": "Function (int row = tga_inverted ? tga_height - i - 1 : i ; stbi_uc* tga_row = tga_data + row* tga_width* tga_comp ;)",
    "insertText": "stbi__getn(s, tga_row, tga_width * tga_comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(tga_indexed)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s, tga_palette_start)"
  },
  {
    "label": "tga_palette()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tga_palette(unsigned char*)stbi__malloc_mad2(tga_palette_len, tga_comp, 0)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(tga_data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(tga_rgb16)"
  },
  {
    "label": "STBI_ASSERT()",
    "kind": "Method",
    "detail": "Function (stbi_uc* pal_entry = tga_palette ;)",
    "insertText": "STBI_ASSERT(tga_comp == STBI_rgb)"
  },
  {
    "label": "stbi__tga_read_rgb16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__tga_read_rgb16(s, pal_entry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pal_entry + = tga_comp ; } } else)",
    "insertText": "if(!stbi__getn(s, tga_palette, tga_palette_len * tga_comp))"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(tga_palette)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(i=0; i < tga_width * tga_height; ++i)"
  },
  {
    "label": "RLE_count()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RLE_count(RLE_cmd & 127)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (RLE_repeating = RLE_cmd>> 7 ; read_next_pixel = 1 ; } else)",
    "insertText": "if(!RLE_repeating)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (read_next_pixel = 1 ; } } else { read_next_pixel = 1 ; })",
    "insertText": "if(read_next_pixel)"
  },
  {
    "label": "pal_idx()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "pal_idx(tga_bits_per_pixel == 8) ? stbi__get8(s) : stbi__get16le(s)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (pal_idx = 0 ; } pal_idx* = tga_comp ;)",
    "insertText": "for(j = 0; j < tga_comp; ++j)"
  },
  {
    "label": "stbi__tga_read_rgb16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__tga_read_rgb16(s, raw_data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - RLE_count ; })",
    "insertText": "if(tga_inverted)"
  },
  {
    "label": "index2()",
    "kind": "Method",
    "detail": "Function (int index1 = j* tga_width* tga_comp ; int)",
    "insertText": "index2(tga_height - 1 - j)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned char temp = tga_data [ index1 ] ; tga_data [ index1 ] = tga_data [ index2 ] ; tga_data [ index2 ] = temp ; + + index1 ; + + index2 ; } } })",
    "insertText": "if(tga_palette != NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(tga_comp >= 3 && !tga_rgb16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned char temp = tga_pixel [ 0 ] ; tga_pixel [ 0 ] = tga_pixel [ 2 ] ; tga_pixel [ 2 ] = temp ; tga_pixel + = tga_comp ; } })",
    "insertText": "if(req_comp && req_comp != tga_comp) tga_data = stbi__convert_format(tga_data, tga_comp, req_comp, tga_width, tga_height)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (tga_palette_start = tga_palette_len = tga_palette_bits = tga_x_origin = tga_y_origin = 0 ;)",
    "insertText": "STBI_NOTUSED(tga_palette_start)"
  },
  {
    "label": "r()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "r(stbi__get32be(s) == 0x38425053)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int count,nleft,len ; count = 0 ;)",
    "insertText": "while((nleft = pixelCount - count) > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(len < 128)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (len + + ;)",
    "insertText": "if(len > nleft)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (count + = len ;)",
    "insertText": "while(len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p + = 4 ; len - - ; } } else)",
    "insertText": "if(len > 128)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s, 6)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s,stbi__get32be(s))"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s, stbi__get32be(s))"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out(stbi_uc *) stbi__malloc_mad3(8, w, h, 0)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (ri -> bits_per_channel = 1 6 ; } else)",
    "insertText": "out(stbi_uc *) stbi__malloc(4 * w*h)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pixelCount = w* h ;)",
    "insertText": "if(compression)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s, h * channelCount * 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc* p ; p = out + channel ;)",
    "insertText": "if(channel >= channelCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(!stbi__psd_decode_rle(s, p, pixelCount))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } } else {)",
    "insertText": "for(channel = 0; channel < 4; channel++)"
  },
  {
    "label": "q()",
    "kind": "Method",
    "detail": "Function (stbi__uint16*)",
    "insertText": "q((stbi__uint16 *) out)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (stbi__uint16 val = channel = = 3 ? 6 5 5 3 5 : 0 ;)",
    "insertText": "for(i = 0; i < pixelCount; i++, q += 4)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else { stbi_uc* p = out + channel ; stbi_uc val = channel = = 3 ? 2 5 5 : 0 ;)",
    "insertText": "for(i = 0; i < pixelCount; i++, p += 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "if(ri->bits_per_channel == 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { stbi_uc* p = out + channel ;)",
    "insertText": "if(bitdepth == 16)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(i = 0; i < pixelCount; i++, p += 4) *p = stbi__get8(s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } } })",
    "insertText": "if(channelCount >= 4)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (stbi__uint16*)",
    "insertText": "pixel(stbi__uint16 *)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (float a = pixel [ 3 ] / 6 5 5 3 5 . 0 f ; float ra = 1 . 0 f / a ; float inv_a = 6 5 5 3 5 . 0)",
    "insertText": "f(1 - ra)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pixel(stbi__uint16) (pixel[0]*ra + inv_a)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pixel(stbi__uint16) (pixel[1]*ra + inv_a)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pixel(stbi__uint16) (pixel[2]*ra + inv_a)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else {)",
    "insertText": "for(i=0; i < w*h; ++i)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned char* pixel = out + 4* i ;)",
    "insertText": "if(pixel[3] != 0 && pixel[3] != 255)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pixel(unsigned char) (pixel[0]*ra + inv_a)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pixel(unsigned char) (pixel[1]*ra + inv_a)"
  },
  {
    "label": "pixel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "pixel(unsigned char) (pixel[2]*ra + inv_a)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } })",
    "insertText": "if(req_comp && req_comp != 4)"
  },
  {
    "label": "stbi__pic_is4()",
    "kind": "Method",
    "detail": "Function (* y = h ;* x = w ; return out ; } # endif # ifndef STBI_NO_PIC int)",
    "insertText": "stbi__pic_is4(stbi__context *s,const char *str)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i<4; ++i) if (stbi__get8(s) != (stbi_uc)str[i])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "if(!stbi__pic_is4(s,\"\\x53\\x80\\xF6\\x34\"))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int mask = 0 x80,i ;)",
    "insertText": "for(i=0; i<4; ++i, mask>>=1)"
  },
  {
    "label": "stbi__copyval()",
    "kind": "Method",
    "detail": "Function (} } return dest ; } void)",
    "insertText": "stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int mask = 0 x80,i ;)",
    "insertText": "for(i=0;i<4; ++i, mask>>=1) if (channel&mask)"
  },
  {
    "label": "stbi__pic_load_core()",
    "kind": "Method",
    "detail": "Function (} stbi_uc*)",
    "insertText": "stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int act_comp = 0,num_packets = 0,y,chained ; stbi__pic_packet packets [ 1 0 ] ; do { stbi__pic_packet* packet ;)",
    "insertText": "if(num_packets==sizeof(packets)/sizeof(packets[0])) return stbi__errpuc(\"bad format\",\"too many packets\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (act_comp | = packet -> channel ;)",
    "insertText": "if(stbi__at_eof(s)) return stbi__errpuc(\"bad file\",\"file too short (reading packets)\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(chained)"
  },
  {
    "label": "comp()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "comp(act_comp & 0x10 ? 4 : 3)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int packet_idx ;)",
    "insertText": "for(packet_idx=0; packet_idx < num_packets; ++packet_idx)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (stbi__pic_packet* packet =& packets [ packet_idx ] ; stbi_uc* dest = result + y* width* 4 ;)",
    "insertText": "switch(packet->type)"
  },
  {
    "label": "stbi__errpuc()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "stbi__errpuc(\"bad format\",\"packet has bad compression type\")"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } case 1 : { int left = width,i ;)",
    "insertText": "while(left>0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc value [ 4 ] ;)",
    "insertText": "if(count==128) count = stbi__get16be(s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { + + count ;)",
    "insertText": "if(count>left) return stbi__errpuc(\"bad file\",\"scanline overrun\")"
  },
  {
    "label": "stbi__pic_load()",
    "kind": "Method",
    "detail": "Function (} left - = count ; } break ; } } } } return result ; } void*)",
    "insertText": "stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp, stbi__result_info *ri)"
  },
  {
    "label": "result()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "result(stbi_uc *) stbi__malloc_mad3(x, y, 4, 0)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(result, 0xff, x*y*4)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(result)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (result = 0 ; }* px = x ;* py = y ;)",
    "insertText": "if(req_comp == 0)"
  },
  {
    "label": "stbi__convert_format()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi__convert_format(result,4,req_comp,x,y)"
  },
  {
    "label": "stbi__pic_test_core()",
    "kind": "Method",
    "detail": "Function (int r =)",
    "insertText": "stbi__pic_test_core(s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int sz ;)",
    "insertText": "if(stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8')"
  },
  {
    "label": "stbi__gif_test_raw()",
    "kind": "Method",
    "detail": "Function (int r =)",
    "insertText": "stbi__gif_test_raw(s)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; i < num_entries; ++i)"
  },
  {
    "label": "stbi__gif_header()",
    "kind": "Method",
    "detail": "Function (pal [ i ] [ 3 ] = transp = = i ? 0 : 2 5 5 ; } } int)",
    "insertText": "stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc version ;)",
    "insertText": "if(stbi__get8(s) != 'G' || stbi__get8(s) != 'I' || stbi__get8(s) != 'F' || stbi__get8(s) != '8') return stbi__err(\"not GIF\", \"Corrupt GIF\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (g -> transparent = - 1 ;)",
    "insertText": "if(comp != 0)"
  },
  {
    "label": "g()",
    "kind": "Method",
    "detail": "Function (stbi__gif*)",
    "insertText": "g(stbi__gif*) stbi__malloc(sizeof(stbi__gif))"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(g)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (stbi_uc* p,* c ; int idx ;)",
    "insertText": "if(g->codes[code].prefix >= 0) stbi__out_gif_code(g, g->codes[code].prefix)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (idx = g -> cur_x + g -> cur_y ; p =& g -> out [ idx ] ; g -> history [ idx / 4 ] = 1 ; c =& g -> color_table [ g -> codes [ code ] . suffix* 4 ] ;)",
    "insertText": "if(c[3] > 128)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p [ 0 ] = c [ 2 ] ; p [ 1 ] = c [ 1 ] ; p [ 2 ] = c [ 0 ] ; p [ 3 ] = c [ 3 ] ; } g -> cur_x + = 4 ;)",
    "insertText": "if(g->cur_x >= g->max_x)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (g -> cur_x = g -> start_x ; g -> cur_y + = g -> step ;)",
    "insertText": "while(g->cur_y >= g->max_y && g->parse > 0)"
  },
  {
    "label": "step()",
    "kind": "Method",
    "detail": "Function (line_size)",
    "insertText": "step(1 << g->parse)"
  },
  {
    "label": "start_y()",
    "kind": "Method",
    "detail": "Function (g -> cur_y = g ->)",
    "insertText": "start_y(g->step >> 1)"
  },
  {
    "label": "stbi__process_gif_raster()",
    "kind": "Method",
    "detail": "Function (- - g -> parse ; } } } stbi_uc*)",
    "insertText": "stbi__process_gif_raster(stbi__context *s, stbi__gif *g)"
  },
  {
    "label": "codemask()",
    "kind": "Method",
    "detail": "Function (clear = 1<<lzw_cs ; first = 1 ; codesize = lzw_cs + 1 ;)",
    "insertText": "codemask(1 << codesize)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bits = 0 ; valid_bits = 0 ;)",
    "insertText": "for(init_code = 0; init_code < clear; init_code++)"
  },
  {
    "label": "first()",
    "kind": "Method",
    "detail": "Function (g -> codes [ init_code ] . prefix = - 1 ; g -> codes [ init_code ] .)",
    "insertText": "first(stbi_uc)"
  },
  {
    "label": "suffix()",
    "kind": "Method",
    "detail": "Function (g -> codes [ init_code ] .)",
    "insertText": "suffix(stbi_uc)"
  },
  {
    "label": "bits()",
    "kind": "Method",
    "detail": "Function (} - - len ;)",
    "insertText": "bits(stbi__int32) stbi__get8(s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (valid_bits + = 8 ; } else { stbi__int32 code = bits& codemask ; bits>> = codesize ; valid_bits - = codesize ;)",
    "insertText": "if(code == clear)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (avail = clear + 2 ; oldcode = - 1 ; first = 0 ; } else)",
    "insertText": "if(code == clear + 1)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__skip(s, len)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(oldcode >= 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p =& g -> codes [ avail + + ] ;)",
    "insertText": "if(avail > 8192)"
  },
  {
    "label": "prefix()",
    "kind": "Method",
    "detail": "Function (} p ->)",
    "insertText": "prefix(stbi__int16)"
  },
  {
    "label": "suffix()",
    "kind": "Method",
    "detail": "Function (first : g->codes[code].first)",
    "insertText": "suffix(code == avail)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(code == avail) return stbi__errpuc(\"illegal code in raster\", \"Corrupt GIF\")"
  },
  {
    "label": "stbi__out_gif_code()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__out_gif_code(g, (stbi__uint16) code)"
  },
  {
    "label": "stbi__errpuc()",
    "kind": "Method",
    "detail": "Function (} oldcode = code ; } else { return)",
    "insertText": "stbi__errpuc(\"illegal code in raster\", \"Corrupt GIF\")"
  },
  {
    "label": "stbi__gif_load_next()",
    "kind": "Method",
    "detail": "Function (} } } } stbi_uc*)",
    "insertText": "stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp, stbi_uc *two_back)"
  },
  {
    "label": "STBI_NOTUSED()",
    "kind": "Method",
    "detail": "Function (int dispose ; int first_frame ; int pi ; int pcount ;)",
    "insertText": "STBI_NOTUSED(req_comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (first_frame = 0 ;)",
    "insertText": "if(g->out == 0)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (pcount = g -> w* g -> h ; g ->)",
    "insertText": "out(stbi_uc *) stbi__malloc(4 * pcount)"
  },
  {
    "label": "background()",
    "kind": "Method",
    "detail": "Function (g ->)",
    "insertText": "background(stbi_uc *) stbi__malloc(4 * pcount)"
  },
  {
    "label": "history()",
    "kind": "Method",
    "detail": "Function (g ->)",
    "insertText": "history(stbi_uc *) stbi__malloc(pcount)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(g->out, 0x00, 4 * pcount)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(g->background, 0x00, 4 * pcount)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(g->history, 0x00, pcount)"
  },
  {
    "label": "dispose()",
    "kind": "Method",
    "detail": "Function (first_frame = 1 ; } else {)",
    "insertText": "dispose(g->eflags & 0x1C)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pcount = g -> w* g -> h ;)",
    "insertText": "if((dispose == 3) && (two_back == 0))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (dispose = 2 ; })",
    "insertText": "if(dispose == 3)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&g->out[pi * 4], &two_back[pi * 4], 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } } else)",
    "insertText": "if(dispose == 2)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&g->out[pi * 4], &g->background[pi * 4], 4)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (} } } else { })",
    "insertText": "memcpy(g->background, g->out, 4 * g->w * g->h)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memset(g->history, 0x00, g->w * g->h)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (cur_y = g->max_y)",
    "insertText": "if(w == 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (g -> step = 8* g -> line_size ; g -> parse = 3 ; } else { g -> step = g -> line_size ; g -> parse = 0 ; })",
    "insertText": "if(g->lflags & 0x80)"
  },
  {
    "label": "stbi__gif_parse_colortable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__gif_parse_colortable(s,g->lpal, 2 << (g->lflags & 7), g->eflags & 0x01 ? g->transparent : -1)"
  },
  {
    "label": "color_table()",
    "kind": "Method",
    "detail": "Function (lpal)",
    "insertText": "color_table(stbi_uc *)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(g->flags & 0x80)"
  },
  {
    "label": "stbi__errpuc()",
    "kind": "Method",
    "detail": "Function (} else return)",
    "insertText": "stbi__errpuc(\"missing color table\", \"Corrupt GIF\")"
  },
  {
    "label": "stbi__process_gif_raster()",
    "kind": "Method",
    "detail": "Function (o =)",
    "insertText": "stbi__process_gif_raster(s, g)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (pcount = g -> w* g -> h ;)",
    "insertText": "if(first_frame && (g->bgindex > 0))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (g -> pal [ g -> bgindex ] [ 3 ] = 2 5 5 ;)",
    "insertText": "memcpy(&g->out[pi * 4], &g->pal[g->bgindex], 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (g -> pal [ g -> transparent ] [ 3 ] = 2 5 5 ; })",
    "insertText": "if(g->eflags & 0x01)"
  },
  {
    "label": "stbi__skip()",
    "kind": "Method",
    "detail": "Function (g -> pal [ g -> transparent ] [ 3 ] = 0 ; } } else {)",
    "insertText": "stbi__skip(s, 1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (break ; } })",
    "insertText": "while((len = stbi__get8(s)) != 0)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (} break ; } case 0 x3B :)",
    "insertText": "return(stbi_uc *)"
  },
  {
    "label": "stbi__errpuc()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "stbi__errpuc(\"unknown code\", \"Corrupt GIF\")"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (int layers = 0 ; stbi_uc* u = 0 ; stbi_uc* out = 0 ; stbi_uc* two_back = 0 ; stbi__gif g ; int stride ;)",
    "insertText": "memset(&g, 0, sizeof(g))"
  },
  {
    "label": "stbi__gif_load_next()",
    "kind": "Method",
    "detail": "Function (* delays = 0 ; } do { u =)",
    "insertText": "stbi__gif_load_next(s, &g, comp, req_comp, two_back)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* x = g . w ;* y = g . h ; + + layers ; stride = g . w* g . h* 4 ;)",
    "insertText": "if(out)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out(stbi_uc*) STBI_REALLOC( out, layers * stride)"
  },
  {
    "label": "delays()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "delays(int*) STBI_REALLOC( *delays, sizeof(int) * layers)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "out(stbi_uc*)stbi__malloc( layers * stride)"
  },
  {
    "label": "delays()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "delays(int*) stbi__malloc( layers * sizeof(int))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "memcpy(out + ((layers - 1) * stride), u, stride)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (two_back = out - 2* stride ; })",
    "insertText": "if(delays)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "while(u != 0)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(g.out)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(g.history)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(g.background)"
  },
  {
    "label": "stbi__errpuc()",
    "kind": "Method",
    "detail": "Function (* z = layers ; return out ; } else { return)",
    "insertText": "stbi__errpuc(\"not GIF\", \"Image was not as a gif type.\")"
  },
  {
    "label": "stbi__gif_load_next()",
    "kind": "Method",
    "detail": "Function (u =)",
    "insertText": "stbi__gif_load_next(s, &g, comp, req_comp, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* x = g . w ;* y = g . h ;)",
    "insertText": "if(req_comp && req_comp != 4) u = stbi__convert_format(u, 4, req_comp, g.w, g.h)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(g.out)"
  },
  {
    "label": "stbi__hdr_test_core()",
    "kind": "Method",
    "detail": "Function (} # endif # ifndef STBI_NO_HDR int)",
    "insertText": "stbi__hdr_test_core(stbi__context *s, const char *signature)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int i ;)",
    "insertText": "for(i=0; signature[i]; ++i) if (stbi__get8(s) != signature[i])"
  },
  {
    "label": "stbi__hdr_test_core()",
    "kind": "Method",
    "detail": "Function (int r =)",
    "insertText": "stbi__hdr_test_core(s, \"#?RADIANCE\\n\")"
  },
  {
    "label": "stbi__hdr_test_core()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "stbi__hdr_test_core(s, \"#?RGBE\\n\")"
  },
  {
    "label": "stbi__hdr_gettoken()",
    "kind": "Method",
    "detail": "Function (} return r ; } # define STBI__HDR_BUFLEN 1 0 2 4 char*)",
    "insertText": "stbi__hdr_gettoken(stbi__context *z, char *buffer)"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (int len = 0 ; char c = ' \\ 0 ' ;)",
    "insertText": "c(char) stbi__get8(z)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (buffer [ len + + ] = c ;)",
    "insertText": "if(len == STBI__HDR_BUFLEN-1)"
  },
  {
    "label": "stbi__hdr_convert()",
    "kind": "Method",
    "detail": "Function (} buffer [ len ] = 0 ; return buffer ; } void)",
    "insertText": "stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)"
  },
  {
    "label": "f1()",
    "kind": "Method",
    "detail": "Function (float f1 ;)",
    "insertText": "f1(float) ldexp(1.0f, input[3] - (int)(128 + 8))"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "switch(req_comp)"
  },
  {
    "label": "stbi__hdr_gettoken()",
    "kind": "Method",
    "detail": "Function (headerToken =)",
    "insertText": "stbi__hdr_gettoken(s,buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!valid) return stbi__errpf(\"unsupported format\", \"Unsupported HDR format\")"
  },
  {
    "label": "height()",
    "kind": "Method",
    "detail": "Function (token + = 3 ;)",
    "insertText": "height(int) strtol(token, &token, 10)"
  },
  {
    "label": "width()",
    "kind": "Method",
    "detail": "Function (token + = 3 ;)",
    "insertText": "width(int) strtol(token, NULL, 10)"
  },
  {
    "label": "hdr_data()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "hdr_data(float *) stbi__malloc_mad4(width, height, req_comp, sizeof(float), 0)"
  },
  {
    "label": "stbi__getn()",
    "kind": "Method",
    "detail": "Function (stbi_uc rgbe [ 4 ] ; main_decode_loop :)",
    "insertText": "stbi__getn(s, rgbe, 4)"
  },
  {
    "label": "stbi__hdr_convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__hdr_convert(hdr_data + j * width * req_comp + i * req_comp, rgbe, req_comp)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } } else { scanline = NULL ;)",
    "insertText": "for(j = 0; j < height; ++j)"
  },
  {
    "label": "rgbe()",
    "kind": "Method",
    "detail": "Function (stbi_uc rgbe [ 4 ] ;)",
    "insertText": "rgbe(stbi_uc)"
  },
  {
    "label": "rgbe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "rgbe(stbi_uc) stbi__get8(s)"
  },
  {
    "label": "stbi__hdr_convert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__hdr_convert(hdr_data, rgbe, req_comp)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (i = 1 ; j = 0 ;)",
    "insertText": "STBI_FREE(scanline)"
  },
  {
    "label": "STBI_FREE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "STBI_FREE(hdr_data)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(scanline == NULL)"
  },
  {
    "label": "scanline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "scanline(stbi_uc *) stbi__malloc_mad2(width, 4, 0)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "for(k = 0; k < 4; ++k)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int nleft ; i = 0 ;)",
    "insertText": "while((nleft = width - i) > 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (count - = 1 2 8 ;)",
    "insertText": "if(count > nleft)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(z = 0; z < count; ++z)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(z = 0; z < count; ++z) scanline[i++ * 4 + k] = stbi__get8(s)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "for(i=0; i < width; ++i) stbi__hdr_convert(hdr_data+(j*width + i)*req_comp, scanline + i*4, req_comp)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(scanline) STBI_FREE(scanline)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (char buffer [ STBI__HDR_BUFLEN ] ; char* token ; int valid = 0 ; int dummy ;)",
    "insertText": "if(!x)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!valid)"
  },
  {
    "label": "stbi__bmp_parse_header()",
    "kind": "Method",
    "detail": "Function (void* p ; stbi__bmp_data info ; info . all_a = 2 5 5 ; p =)",
    "insertText": "stbi__bmp_parse_header(s, &info)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int channelCount,depth ;)",
    "insertText": "if(stbi__get32be(s) != 0x38425053)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (act_comp | = packet -> channel ;)",
    "insertText": "if(stbi__at_eof(s))"
  },
  {
    "label": "p()",
    "kind": "Method",
    "detail": "Function (char p,t ;)",
    "insertText": "p(char) stbi__get8(s)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "t(char) stbi__get8(s)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "out(stbi_uc *) stbi__malloc_mad3(s->img_n, s->img_x, s->img_y, 0)"
  },
  {
    "label": "stbi__getn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__getn(s, out, s->img_n * s->img_x * s->img_y)"
  },
  {
    "label": "stbi__convert_format()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "stbi__convert_format(out, s->img_n, req_comp, s->img_x, s->img_y)"
  },
  {
    "label": "stbi__pnm_isspace()",
    "kind": "Method",
    "detail": "Function (} return out ; } int)",
    "insertText": "stbi__pnm_isspace(char c)"
  },
  {
    "label": "stbi__pnm_isdigit()",
    "kind": "Method",
    "detail": "Function (} } int)",
    "insertText": "stbi__pnm_isdigit(char c)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int value = 0 ;)",
    "insertText": "while(!stbi__at_eof(s) && stbi__pnm_isdigit(*c))"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (value =)",
    "insertText": "value(*c - '0')"
  },
  {
    "label": "c()",
    "kind": "Method",
    "detail": "Function (*)",
    "insertText": "c(char) stbi__get8(s)"
  },
  {
    "label": "stbi__pnm_skip_whitespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__pnm_skip_whitespace(s, &c)"
  },
  {
    "label": "stbi__pnm_getinteger()",
    "kind": "Method",
    "detail": "Function (* x =)",
    "insertText": "stbi__pnm_getinteger(s, &c)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_JPEG)",
    "insertText": "if(stbi__jpeg_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PNG)",
    "insertText": "if(stbi__png_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_GIF)",
    "insertText": "if(stbi__gif_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_BMP)",
    "insertText": "if(stbi__bmp_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PSD)",
    "insertText": "if(stbi__psd_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PIC)",
    "insertText": "if(stbi__pic_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PNM)",
    "insertText": "if(stbi__pnm_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_HDR)",
    "insertText": "if(stbi__hdr_info(s, x, y, comp))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_TGA)",
    "insertText": "if(stbi__tga_info(s, x, y, comp))"
  },
  {
    "label": "stbi__err()",
    "kind": "Method",
    "detail": "Function (# endif return)",
    "insertText": "stbi__err(\"unknown image type\", \"Image not of any known type, or corrupt\")"
  },
  {
    "label": "stbi__is_16_main()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "stbi__is_16_main(stbi__context *s)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# ifndef STBI_NO_PNG)",
    "insertText": "if(stbi__png_is16(s))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef STBI_NO_PSD)",
    "insertText": "if(stbi__psd_is16(s))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int result ;)",
    "insertText": "if(!f) return stbi__err(\"can't fopen\", \"Unable to open file\")"
  },
  {
    "label": "stbi_info_from_file()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi_info_from_file(f, x, y, comp)"
  },
  {
    "label": "stbi__start_file()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbi__start_file(&s, f)"
  },
  {
    "label": "stbi__info_main()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "stbi__info_main(&s,x,y,comp)"
  },
  {
    "label": "fseek()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fseek(f,pos,SEEK_SET)"
  },
  {
    "label": "stbi_is_16_bit_from_file()",
    "kind": "Method",
    "detail": "Function (result =)",
    "insertText": "stbi_is_16_bit_from_file(f)"
  },
  {
    "label": "stbi__is_16_main()",
    "kind": "Method",
    "detail": "Function (r =)",
    "insertText": "stbi__is_16_main(&s)"
  },
  {
    "label": "stbi_info_from_callbacks()",
    "kind": "Method",
    "detail": "Function (} STBIDEF int)",
    "insertText": "stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)"
  },
  {
    "label": "stbi__start_callbacks()",
    "kind": "Method",
    "detail": "Function (stbi__context s ;)",
    "insertText": "stbi__start_callbacks(&s, (stbi_io_callbacks *) c, user)"
  },
  {
    "label": "stbi_is_16_bit_from_callbacks()",
    "kind": "Method",
    "detail": "Function (} STBIDEF int)",
    "insertText": "stbi_is_16_bit_from_callbacks(stbi_io_callbacks const *c, void *user)"
  }
]