[
  {
    "label": "STextComboBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STextComboBox"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Attribute . h \" # include \" Layout / Margin . h \" # include \" Styling / SlateColor . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / CoreStyle . h \" # include \" Framework / SlateDelegates . h \" # include \" Widgets / Input / SComboBox . h \" class STextComboBox : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(FString, FGetTextComboLabel, TSharedPtr<FString>)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (typedef TSlateDelegates<TSharedPtr<FString>>::FOnSelectionChanged FOnTextSelectionChanged ;)",
    "insertText": "SLATE_BEGIN_ARGS(STextComboBox ) : _ComboBoxStyle(&FCoreStyle::Get().GetWidgetStyle< FComboBoxStyle >(\"ComboBox\")) , _ButtonStyle(nullptr) , _ColorAndOpacity( FSlateColor::UseForeground() ) , _ContentPadding(_ComboBoxStyle->ContentPadding) , _OnGetTextLabelForItem()"
  },
  {
    "label": "SLATE_STYLE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_STYLE_ARGUMENT(FComboBoxStyle, ComboBoxStyle) SLATE_STYLE_ARGUMENT(FButtonStyle, ButtonStyle) SLATE_ITEMS_SOURCE_ARGUMENT(TSharedPtr<FString>, OptionsSource) SLATE_ATTRIBUTE( FSlateColor, ColorAndOpacity ) SLATE_ATTRIBUTE(FSlateFontInfo, Font) SLATE_ATTRIBUTE( FMargin, ContentPadding ) SLATE_EVENT( FOnTextSelectionChanged, OnSelectionChanged) SLATE_EVENT( FOnComboBoxOpening, OnComboBoxOpening ) SLATE_ARGUMENT( TSharedPtr<FString>, InitiallySelectedItem ) SLATE_EVENT( FGetTextComboLabel, OnGetTextLabelForItem ) SLATE_END_ARGS() SLATE_API void Construct( const FArguments& InArgs)"
  },
  {
    "label": "MakeItemWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeItemWidget(TSharedPtr<FString> StringItem)"
  },
  {
    "label": "SetSelectedItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedItem(TSharedPtr<FString> NewSelection)"
  },
  {
    "label": "GetSelectedItem()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FString>)",
    "insertText": "GetSelectedItem()"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (StringCombo ->)",
    "insertText": "SetItemsSource(InListItemsSource)"
  },
  {
    "label": "SetItemsSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetItemsSource(TSharedRef<::UE::Slate::Containers::TObservableArray<TSharedPtr<FString>>> InListItemsSource)"
  },
  {
    "label": "ClearItemsSource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearItemsSource()"
  },
  {
    "label": "RefreshOptions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RefreshOptions()"
  },
  {
    "label": "ClearSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelection()"
  },
  {
    "label": "OnGetSelection()",
    "kind": "Method",
    "detail": "Function (private : TSharedPtr<FString>)",
    "insertText": "OnGetSelection()"
  },
  {
    "label": "GetSelectedTextLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSelectedTextLabel()"
  },
  {
    "label": "GetItemTextLabel()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetItemTextLabel(TSharedPtr<FString> StringItem)"
  }
]