[
  {
    "label": "SEditableTextBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEditableTextBox"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SProjectLauncherPackagingSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherPackagingSettings"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Input / Reply . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Models / ProjectLauncherModel . h \" class SEditableTextBox ; enum class ECheckBoxState : uint8 ; class SProjectLauncherPackagingSettings : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherPackagingSettings)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() public: ~SProjectLauncherPackagingSettings()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Construct(const FArguments& InArgs, const TSharedRef<FProjectLauncherModel>& InModel)"
  },
  {
    "label": "UpdatePackagingModeWidgets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePackagingModeWidgets()"
  },
  {
    "label": "HandleForDistributionCheckBoxCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleForDistributionCheckBoxCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "HandleForDistributionCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleForDistributionCheckBoxIsChecked()"
  },
  {
    "label": "HandleIncludePrerequisitesCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleIncludePrerequisitesCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "HandleIncludePrerequisitesCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleIncludePrerequisitesCheckBoxIsChecked()"
  },
  {
    "label": "HandleUseIoStoreCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUseIoStoreCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "HandleUseIoStoreCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleUseIoStoreCheckBoxIsChecked()"
  },
  {
    "label": "HandleMakeBinaryConfigCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleMakeBinaryConfigCheckStateChanged(ECheckBoxState NewState)"
  },
  {
    "label": "HandleMakeBinaryConfigCheckBoxIsChecked()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "HandleMakeBinaryConfigCheckBoxIsChecked()"
  },
  {
    "label": "IsReferenceChunkDbEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReferenceChunkDbEditable()"
  },
  {
    "label": "OnRefChunkDbFileNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefChunkDbFileNameTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnRefChunkDbFileNameTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefChunkDbFileNameTextChanged(const FText& InText)"
  },
  {
    "label": "HandleRefChunkDbBrowseButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleRefChunkDbBrowseButtonClicked()"
  },
  {
    "label": "OnRefChunkCryptoFileNameTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefChunkCryptoFileNameTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnRefChunkCryptoFileNameTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRefChunkCryptoFileNameTextChanged(const FText& InText)"
  },
  {
    "label": "HandleRefChunkCryptoBrowseButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleRefChunkCryptoBrowseButtonClicked()"
  },
  {
    "label": "HandleDirectoryTitleText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleDirectoryTitleText()"
  },
  {
    "label": "HandleDirectoryPathText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleDirectoryPathText()"
  },
  {
    "label": "HandleHintPathText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleHintPathText()"
  },
  {
    "label": "HandleProfileManagerProfileSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleProfileManagerProfileSelected(const ILauncherProfilePtr& SelectedProfile, const ILauncherProfilePtr& PreviousProfile)"
  },
  {
    "label": "HandleBrowseButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "HandleBrowseButtonClicked()"
  },
  {
    "label": "IsEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditable()"
  },
  {
    "label": "OnTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextCommitted(const FText& InText, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "OnTextChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTextChanged(const FText& InText)"
  }
]