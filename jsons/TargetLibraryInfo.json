[
  {
    "label": "VecDesc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VecDesc"
  },
  {
    "label": "PreservedAnalyses",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PreservedAnalyses"
  },
  {
    "label": "Func",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Func"
  },
  {
    "label": "TargetLibraryInfoImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfoImpl"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "AvailabilityState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AvailabilityState"
  },
  {
    "label": "VectorLibrary",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "VectorLibrary"
  },
  {
    "label": "TargetLibraryAnalysis",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryAnalysis"
  },
  {
    "label": "TargetLibraryInfoWrapperPass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfoWrapperPass"
  },
  {
    "label": "AvailableArray()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_TARGETLIBRARYINFO_H # define LLVM_ANALYSIS_TARGETLIBRARYINFO_H # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / Optional . h \" # include \" llvm / ADT / Triple . h \" # include \" llvm / IR / Function . h \" # include \" llvm / IR / Module . h \" # include \" llvm / Pass . h \" namespace llvm { struct VecDesc { const char* ScalarFnName ; const char* VectorFnName ; unsigned VectorizationFactor ; } ; class PreservedAnalyses ; namespace LibFunc { enum Func { # define TLI_DEFINE_ENUM # include \" llvm / Analysis / TargetLibraryInfo . def \" NumLibFuncs } ; } class TargetLibraryInfoImpl { class TargetLibraryInfo ; unsigned char)",
    "insertText": "AvailableArray(LibFunc::NumLibFuncs+3)"
  },
  {
    "label": "setState()",
    "kind": "Method",
    "detail": "Function (llvm::DenseMap<unsigned,std::string> CustomNames ; const char* const StandardNames [ LibFunc::NumLibFuncs ] ; enum AvailabilityState { StandardName = 3,CustomName = 1,Unavailable = 0 } ; void)",
    "insertText": "setState(LibFunc::Func F, AvailabilityState State)"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (AvailableArray [)",
    "insertText": "F(3 << 2*(F&3))"
  },
  {
    "label": "State()",
    "kind": "Method",
    "detail": "Function (AvailableArray [ F / 4 ] | =)",
    "insertText": "State(F&3)"
  },
  {
    "label": "getState()",
    "kind": "Method",
    "detail": "Function (} AvailabilityState)",
    "insertText": "getState(LibFunc::Func F)"
  },
  {
    "label": "TargetLibraryInfoImpl()",
    "kind": "Method",
    "detail": "Function (} std::vector<VecDesc> VectorDescs ; std::vector<VecDesc> ScalarDescs ; public : enum VectorLibrary { NoLibrary,Accelerate } ;)",
    "insertText": "TargetLibraryInfoImpl()"
  },
  {
    "label": "TargetLibraryInfoImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetLibraryInfoImpl(const Triple &T)"
  },
  {
    "label": "TargetLibraryInfoImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetLibraryInfoImpl(const TargetLibraryInfoImpl &TLI)"
  },
  {
    "label": "TargetLibraryInfoImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetLibraryInfoImpl(TargetLibraryInfoImpl &&TLI)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TargetLibraryInfoImpl&)",
    "insertText": "operator(const TargetLibraryInfoImpl &TLI)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TargetLibraryInfoImpl&)",
    "insertText": "operator(TargetLibraryInfoImpl &&TLI)"
  },
  {
    "label": "getLibFunc()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "getLibFunc(StringRef funcName, LibFunc::Func &F)"
  },
  {
    "label": "setUnavailable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setUnavailable(LibFunc::Func F)"
  },
  {
    "label": "setState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setState(F, Unavailable)"
  },
  {
    "label": "setAvailable()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAvailable(LibFunc::Func F)"
  },
  {
    "label": "setState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setState(F, StandardName)"
  },
  {
    "label": "setAvailableWithName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setAvailableWithName(LibFunc::Func F, StringRef Name)"
  },
  {
    "label": "setState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setState(F, CustomName)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (CustomNames [ F ] = Name ;)",
    "insertText": "assert(CustomNames.find(F) != CustomNames.end())"
  },
  {
    "label": "disableAllFunctions()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "disableAllFunctions()"
  },
  {
    "label": "addVectorizableFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVectorizableFunctions(ArrayRef<VecDesc> Fns)"
  },
  {
    "label": "addVectorizableFunctionsFromVecLib()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addVectorizableFunctionsFromVecLib(enum VectorLibrary VecLib)"
  },
  {
    "label": "isFunctionVectorizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFunctionVectorizable(StringRef F, unsigned VF)"
  },
  {
    "label": "isFunctionVectorizable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isFunctionVectorizable(StringRef F)"
  },
  {
    "label": "getVectorizedFunction()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "getVectorizedFunction(StringRef F, unsigned VF)"
  },
  {
    "label": "isFunctionScalarizable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isFunctionScalarizable(StringRef F, unsigned &VF)"
  },
  {
    "label": "getScalarizedFunction()",
    "kind": "Method",
    "detail": "Function (} StringRef)",
    "insertText": "getScalarizedFunction(StringRef F, unsigned &VF)"
  },
  {
    "label": "TargetLibraryInfo()",
    "kind": "Method",
    "detail": "Function (} ; class TargetLibraryInfo { class TargetLibraryAnalysis ; class TargetLibraryInfoWrapperPass ; const TargetLibraryInfoImpl* Impl ; public :)",
    "insertText": "TargetLibraryInfo(const TargetLibraryInfoImpl &Impl) : Impl(&Impl)"
  },
  {
    "label": "TargetLibraryInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TargetLibraryInfo(const TargetLibraryInfo &TLI) : Impl(TLI.Impl)"
  },
  {
    "label": "TargetLibraryInfo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TargetLibraryInfo(TargetLibraryInfo &&TLI) : Impl(TLI.Impl)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TargetLibraryInfo&)",
    "insertText": "operator(const TargetLibraryInfo &TLI)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Impl = TLI . Impl ; return* this ; } TargetLibraryInfo&)",
    "insertText": "operator(TargetLibraryInfo &&TLI)"
  },
  {
    "label": "has()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "has(LibFunc::Func F)"
  },
  {
    "label": "hasOptimizedCodeGen()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "hasOptimizedCodeGen(LibFunc::Func F)"
  },
  {
    "label": "getName()",
    "kind": "Method",
    "detail": "Function (default : break ; case LibFunc::copysign : case LibFunc::copysignf : case LibFunc::copysignl : case LibFunc::fabs : case LibFunc::fabsf : case LibFunc::fabsl : case LibFunc::sin : case LibFunc::sinf : case LibFunc::sinl : case LibFunc::cos : case LibFunc::cosf : case LibFunc::cosl : case LibFunc::sqrt : case LibFunc::sqrtf : case LibFunc::sqrtl : case LibFunc::sqrt_finite : case LibFunc::sqrtf_finite : case LibFunc::sqrtl_finite : case LibFunc::fmax : case LibFunc::fmaxf : case LibFunc::fmaxl : case LibFunc::fmin : case LibFunc::fminf : case LibFunc::fminl : case LibFunc::floor : case LibFunc::floorf : case LibFunc::floorl : case LibFunc::nearbyint : case LibFunc::nearbyintf : case LibFunc::nearbyintl : case LibFunc::ceil : case LibFunc::ceilf : case LibFunc::ceill : case LibFunc::rint : case LibFunc::rintf : case LibFunc::rintl : case LibFunc::round : case LibFunc::roundf : case LibFunc::roundl : case LibFunc::trunc : case LibFunc::truncf : case LibFunc::truncl : case LibFunc::log2 : case LibFunc::log2f : case LibFunc::log2l : case LibFunc::exp2 : case LibFunc::exp2f : case LibFunc::exp2l : case LibFunc::memcmp : case LibFunc::strcmp : case LibFunc::strcpy : case LibFunc::stpcpy : case LibFunc::strlen : case LibFunc::strnlen : case LibFunc::memchr : return true ; } return false ; } StringRef)",
    "insertText": "getName(LibFunc::Func F)"
  },
  {
    "label": "getState()",
    "kind": "Method",
    "detail": "Function (auto State = Impl ->)",
    "insertText": "getState(F)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(State == TargetLibraryInfoImpl::CustomName)"
  },
  {
    "label": "invalidate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "invalidate(Module &, const PreservedAnalyses &)"
  },
  {
    "label": "TargetLibraryAnalysis()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TargetLibraryAnalysis()"
  },
  {
    "label": "TargetLibraryAnalysis()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TargetLibraryAnalysis(TargetLibraryInfoImpl PresetInfoImpl) : PresetInfoImpl(std::move(PresetInfoImpl))"
  },
  {
    "label": "TargetLibraryAnalysis()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TargetLibraryAnalysis(TargetLibraryAnalysis &&Arg) : PresetInfoImpl(std::move(Arg.PresetInfoImpl)), Impls(std::move(Arg.Impls))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TargetLibraryAnalysis&)",
    "insertText": "operator(TargetLibraryAnalysis &&RHS)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (PresetInfoImpl =)",
    "insertText": "move(RHS.PresetInfoImpl)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (Impls =)",
    "insertText": "move(RHS.Impls)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (TargetLibraryInfo)",
    "insertText": "run(Function &F)"
  },
  {
    "label": "name()",
    "kind": "Method",
    "detail": "Function (StringRef)",
    "insertText": "name()"
  },
  {
    "label": "anchor()",
    "kind": "Method",
    "detail": "Function (} ; class TargetLibraryInfoWrapperPass : public ImmutablePass { TargetLibraryInfoImpl TLIImpl ; TargetLibraryInfo TLI ; void)",
    "insertText": "anchor()"
  },
  {
    "label": "TargetLibraryInfoWrapperPass()",
    "kind": "Method",
    "detail": "Function (public : char ID ;)",
    "insertText": "TargetLibraryInfoWrapperPass()"
  },
  {
    "label": "TargetLibraryInfoWrapperPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetLibraryInfoWrapperPass(const Triple &T)"
  },
  {
    "label": "TargetLibraryInfoWrapperPass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TargetLibraryInfoWrapperPass(const TargetLibraryInfoImpl &TLI)"
  },
  {
    "label": "getTLI()",
    "kind": "Method",
    "detail": "Function (TargetLibraryInfo&)",
    "insertText": "getTLI()"
  }
]