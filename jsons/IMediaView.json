[
  {
    "label": "FMediaTileCoordinate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMediaTileCoordinate"
  },
  {
    "label": "TIsPODType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsPODType"
  },
  {
    "label": "IMediaView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMediaView"
  },
  {
    "label": "FMediaTileCoordinate()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Math / Quat . h \" # include \" Containers / Set . h \" # include \" Containers / Map . h \" struct FMediaTileCoordinate { uint16 X,Y ;)",
    "insertText": "FMediaTileCoordinate()"
  },
  {
    "label": "FMediaTileCoordinate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMediaTileCoordinate(int32 InX, int32 InY) : X(IntCastChecked<uint16>(InX)) , Y(IntCastChecked<uint16>(InY))"
  },
  {
    "label": "FMediaTileCoordinate()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMediaTileCoordinate(EForceInit) : X(0u) , Y(0u)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FMediaTileCoordinate& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } ; template<> struct TIsPODType<FMediaTileCoordinate> { enum { Value = true } ; } ; uint32)",
    "insertText": "GetTypeHash(const FMediaTileCoordinate& Coord)"
  },
  {
    "label": "GetViewField()",
    "kind": "Method",
    "detail": "Function (} class IMediaView { public : bool)",
    "insertText": "GetViewField(float& OutHorizontal, float& OutVertical)"
  }
]