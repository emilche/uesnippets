[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TBatchView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBatchView"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TBatchView()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" HAL / Platform . h \" # include \" Misc / AssertionMacros . h \" enum class EBatchView { Continue,NewBatch,} ; template<T> class TBatchView { public :)",
    "insertText": "TBatchView()"
  },
  {
    "label": "TBatchView()",
    "kind": "Method",
    "detail": "Function (template<ShouldAddToBatchFunc>)",
    "insertText": "TBatchView(TArrayView<T> InItems, ShouldAddToBatchFunc&& ShouldAddToBatch) : Items(InItems)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BatchStarts .)",
    "insertText": "Add(0)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (BatchStarts .)",
    "insertText": "Add(Index)"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} } } struct TIterator {)",
    "insertText": "TIterator(const TBatchView& InBatchList, bool bEnd) : BatchList(InBatchList) , BatchIndex(bEnd ? BatchList.BatchStarts.Num() : 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 Start = BatchList . BatchStarts [ BatchIndex ] ; int32 End = BatchIndex<BatchList . BatchStarts .)",
    "insertText": "Num() - 1 ? BatchList.BatchStarts[BatchIndex + 1] : BatchList.Items.Num()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TIterator& Other)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} TIterator)",
    "insertText": "end()"
  }
]