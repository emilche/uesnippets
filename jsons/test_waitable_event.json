[
  {
    "label": "TestWaitableEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestWaitableEvent"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_TEST_WAITABLE_EVENT_H_ # define BASE_TEST_TEST_WAITABLE_EVENT_H_ # include \" base / synchronization / waitable_event . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "TestWaitableEvent()",
    "kind": "Method",
    "detail": "Function (class TestWaitableEvent : public WaitableEvent { public :)",
    "insertText": "TestWaitableEvent(ResetPolicy reset_policy = ResetPolicy::MANUAL, InitialState initial_state = InitialState::NOT_SIGNALED)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) explicit TestWaitableEvent(win::ScopedHandle event_handle)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# endif } ;)",
    "insertText": "static_assert(sizeof(TestWaitableEvent) == sizeof(WaitableEvent), \"WaitableEvent is non-virtual, TestWaitableEvent must be usable \" \"interchangeably.\")"
  }
]