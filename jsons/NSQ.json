[
  {
    "label": "silk_noise_shape_quantizer_short_prediction_c()",
    "kind": "Method",
    "detail": "Function (# ifndef SILK_NSQ_H # define SILK_NSQ_H # include \" SigProc_FIX . h \" # undef silk_short_prediction_create_arch_coef OPUS_INLINE opus_int32)",
    "insertText": "silk_noise_shape_quantizer_short_prediction_c(const opus_int32 *buf32, const opus_int16 *coef16, opus_int order)"
  },
  {
    "label": "silk_assert()",
    "kind": "Method",
    "detail": "Function (opus_int32 out ;)",
    "insertText": "silk_assert(order == 10 || order == 16)"
  },
  {
    "label": "silk_RSHIFT()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_RSHIFT(order, 1)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ 0 ], coef16[ 0 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -1 ], coef16[ 1 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -2 ], coef16[ 2 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -3 ], coef16[ 3 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -4 ], coef16[ 4 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -5 ], coef16[ 5 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -6 ], coef16[ 6 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -7 ], coef16[ 7 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -8 ], coef16[ 8 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -9 ], coef16[ 9 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -10 ], coef16[ 10 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -11 ], coef16[ 11 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -12 ], coef16[ 12 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -13 ], coef16[ 13 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -14 ], coef16[ 14 ])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, buf32[ -15 ], coef16[ 15 ])"
  },
  {
    "label": "silk_noise_shape_quantizer_short_prediction()",
    "kind": "Method",
    "detail": "Function (} return out ; } # define)",
    "insertText": "silk_noise_shape_quantizer_short_prediction(in, coef, coefRev, order, arch) ((void)arch,silk_noise_shape_quantizer_short_prediction_c(in, coef, order)) static OPUS_INLINE opus_int32 silk_NSQ_noise_shape_feedback_loop_c(const opus_int32 *data0, opus_int32 *data1, const opus_int16 *coef, opus_int order)"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_SMLAWB(out, tmp2, coef[0])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp2 = data1 [ j - 1 ] ; data1 [ j - 1 ] = tmp1 ; out =)",
    "insertText": "silk_SMLAWB(out, tmp1, coef[j - 1])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (tmp1 = data1 [ j + 0 ] ; data1 [ j + 0 ] = tmp2 ; out =)",
    "insertText": "silk_SMLAWB(out, tmp2, coef[j])"
  },
  {
    "label": "silk_SMLAWB()",
    "kind": "Method",
    "detail": "Function (} data1 [ order - 1 ] = tmp1 ; out =)",
    "insertText": "silk_SMLAWB(out, tmp1, coef[order - 1])"
  },
  {
    "label": "silk_LSHIFT32()",
    "kind": "Method",
    "detail": "Function (out =)",
    "insertText": "silk_LSHIFT32(out, 1)"
  }
]