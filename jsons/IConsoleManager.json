[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TConsoleVariableData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConsoleVariableData"
  },
  {
    "label": "EConsoleVariableFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EConsoleVariableFlags"
  },
  {
    "label": "IConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleVariable"
  },
  {
    "label": "FNullConsoleVariableDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNullConsoleVariableDelegate"
  },
  {
    "label": "FConsoleVariableDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleVariableDelegate"
  },
  {
    "label": "FConsoleCommandDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleCommandDelegate"
  },
  {
    "label": "FConsoleCommandWithArgsDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleCommandWithArgsDelegate"
  },
  {
    "label": "FConsoleCommandWithWorldDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleCommandWithWorldDelegate"
  },
  {
    "label": "FConsoleCommandWithWorldAndArgsDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleCommandWithWorldAndArgsDelegate"
  },
  {
    "label": "FConsoleCommandWithArgsAndOutputDeviceDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleCommandWithArgsAndOutputDeviceDelegate"
  },
  {
    "label": "FConsoleCommandWithWorldArgsAndOutputDeviceDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleCommandWithWorldArgsAndOutputDeviceDelegate"
  },
  {
    "label": "FConsoleCommandWithOutputDeviceDelegate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleCommandWithOutputDeviceDelegate"
  },
  {
    "label": "IConsoleObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleObject"
  },
  {
    "label": "IConsoleCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IConsoleCommand"
  },
  {
    "label": "FConsoleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConsoleManager"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "IConsoleThreadPropagation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IConsoleThreadPropagation"
  },
  {
    "label": "FConsoleVariableSinkHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConsoleVariableSinkHandle"
  },
  {
    "label": "FConsoleSuggestion",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConsoleSuggestion"
  },
  {
    "label": "IConsoleCommandExecutor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IConsoleCommandExecutor"
  },
  {
    "label": "FInputChord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FInputChord"
  },
  {
    "label": "IConsoleManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IConsoleManager"
  },
  {
    "label": "FAutoConsoleVariableSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariableSink"
  },
  {
    "label": "FAutoConsoleObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleObject"
  },
  {
    "label": "FAutoConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariable"
  },
  {
    "label": "FAutoConsoleVariableRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariableRef"
  },
  {
    "label": "T2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T2"
  },
  {
    "label": "FConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConsoleVariable"
  },
  {
    "label": "TAutoConsoleVariable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAutoConsoleVariable"
  },
  {
    "label": "Y",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Y"
  },
  {
    "label": "FAutoConsoleCommand",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommand"
  },
  {
    "label": "FAutoConsoleCommandWithWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommandWithWorld"
  },
  {
    "label": "FAutoConsoleCommandWithWorldAndArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommandWithWorldAndArgs"
  },
  {
    "label": "FAutoConsoleCommandWithArgsAndOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommandWithArgsAndOutputDevice"
  },
  {
    "label": "FAutoConsoleCommandWithOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommandWithOutputDevice"
  },
  {
    "label": "FAutoConsoleCommandWithWorldArgsAndOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommandWithWorldArgsAndOutputDevice"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FAutoConsoleVariableShadow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariableShadow"
  },
  {
    "label": "FAutoConsoleVariableDeprecated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleVariableDeprecated"
  },
  {
    "label": "FAutoConsoleCommandDeprecated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAutoConsoleCommandDeprecated"
  },
  {
    "label": "TRACK_CONSOLE_FIND_COUNT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AccessDetection . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / UnrealTemplate . h \" # include \" Containers / UnrealString . h \" # include \" Logging / LogMacros . h \" # include \" Delegates / IDelegateInstance . h \" # include \" Delegates / Delegate . h \" # include \" Features / IModularFeature . h \" # include \" Templates / EnableIf . h \" # include \" Internationalization / Text . h \" # define)",
    "insertText": "TRACK_CONSOLE_FIND_COUNT(UE_BUILD_SHIPPING || UE_BUILD_TEST) #if DO_CHECK && (!UE_BUILD_SHIPPING) #define cvarCheckCode( Code ) checkCode( Code ) #else #define cvarCheckCode(...)"
  },
  {
    "label": "ENUMERATE_SET_BY()",
    "kind": "Method",
    "detail": "Function (enum EConsoleVariableFlags { ECVF_FlagMask = 0 x0000ffff,ECVF_Default = 0 x0,ECVF_Cheat = 0 x1,ECVF_ReadOnly = 0 x4,ECVF_Unregistered = 0 x8,ECVF_CreatedFromIni = 0 x10,ECVF_RenderThreadSafe = 0 x20,ECVF_Scalability = 0 x40,ECVF_ScalabilityGroup = 0 x80,ECVF_Preview = 0 x100,ECVF_GeneralShaderChange = 0 x200,ECVF_MobileShaderChange = 0 x400,ECVF_DesktopShaderChange = 0 x800,ECVF_ExcludeFromPreview = 0 x1000,ECVF_SaveForNextBoot = 0 x2000,ECVF_SetFlagMask = 0 x00ff0000,ECVF_Set_NoSinkCall_Unsafe = 0 x00010000,ECVF_Set_SetOnly_Unsafe = 0 x00020000,ECVF_SetByMask = 0 xff000000,ECVF_SetByConstructor = 0 x00000000,ECVF_SetByScalability = 0 x01000000,ECVF_SetByGameSetting = 0 x02000000,ECVF_SetByProjectSetting = 0 x03000000,ECVF_SetBySystemSettingsIni = 0 x04000000,ECVF_SetByPluginLowPriority = 0 x05000000,ECVF_SetByDeviceProfile = 0 x06000000,ECVF_SetByPluginHighPriority = 0 x07000000,ECVF_SetByGameOverride = 0 x08000000,ECVF_SetByConsoleVariablesIni = 0 x09000000,ECVF_SetByHotfix = 0 x0A000000,ECVF_SetByPreview = 0 x0B000000,ECVF_SetByCommandline = 0 x0C000000,ECVF_SetByCode = 0 x0D000000,ECVF_SetByConsole = 0 x0E000000,} ; # define)",
    "insertText": "ENUMERATE_SET_BY(op) \\ op(Constructor) \\ op(Scalability) \\ op(GameSetting) \\ op(ProjectSetting) \\ op(SystemSettingsIni) \\ op(PluginLowPriority) \\ op(DeviceProfile) \\ op(PluginHighPriority) \\ op(GameOverride) \\ op(ConsoleVariablesIni) \\ op(Hotfix) \\ op(Preview) \\ op(Commandline) \\ op(Code) \\ op(Console) extern CORE_API const TCHAR* GetConsoleVariableSetByName(EConsoleVariableFlags ConsoleVariableFlags)"
  },
  {
    "label": "GetConsoleVariableSetByValue()",
    "kind": "Method",
    "detail": "Function (EConsoleVariableFlags)",
    "insertText": "GetConsoleVariableSetByValue(const TCHAR* SetByName)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (class IConsoleVariable ; # if ! NO_CVARS)",
    "insertText": "DECLARE_DELEGATE_OneParam(FConsoleVariableDelegate, IConsoleVariable*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FConsoleVariableMulticastDelegate, IConsoleVariable*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FConsoleObjectWithNameMulticastDelegate, const TCHAR*, IConsoleObject*)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FConsoleCommandDelegate)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FConsoleCommandWithArgsDelegate, const TArray< FString >&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FConsoleCommandWithWorldDelegate, UWorld*)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FConsoleCommandWithWorldAndArgsDelegate, const TArray< FString >&, UWorld*)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FConsoleCommandWithArgsAndOutputDeviceDelegate, const TArray< FString >&, FOutputDevice&)"
  },
  {
    "label": "DECLARE_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_ThreeParams(FConsoleCommandWithWorldArgsAndOutputDeviceDelegate, const TArray< FString >&, UWorld*, FOutputDevice&)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_OneParam(FConsoleCommandWithOutputDeviceDelegate, FOutputDevice&)"
  },
  {
    "label": "CreateStatic()",
    "kind": "Method",
    "detail": "Function (# else template<DerivedType,. . . ParamTypes> struct FNullConsoleVariableDelegate { template<. . . VarTypes> DerivedType)",
    "insertText": "CreateStatic(typename TIdentity<void (*)(ParamTypes..., VarTypes...)>::Type, VarTypes...)"
  },
  {
    "label": "IConsoleObject()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "IConsoleObject()"
  },
  {
    "label": "GetHelp()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetHelp()"
  },
  {
    "label": "SetHelp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHelp(const TCHAR* Value)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (EConsoleVariableFlags)",
    "insertText": "GetFlags()"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags(const EConsoleVariableFlags Value)"
  },
  {
    "label": "GetDetailedHelp()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDetailedHelp()"
  },
  {
    "label": "ClearFlags()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearFlags(const EConsoleVariableFlags Value)"
  },
  {
    "label": "New()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "New(uint32)GetFlags() & ~(uint32)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFlags((EConsoleVariableFlags)New)"
  },
  {
    "label": "TestFlags()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TestFlags(const EConsoleVariableFlags Value)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if DISABLE_CHEAT_CVARS)",
    "insertText": "if(TestFlags(ECVF_Cheat))"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (class FConsoleManager ; } ; class IConsoleVariable : public IConsoleObject { public : void)",
    "insertText": "Set(const TCHAR* InValue, EConsoleVariableFlags SetBy = ECVF_SetByCode, FName Tag = NAME_None)"
  },
  {
    "label": "Unset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unset(EConsoleVariableFlags SetBy, FName Tag = NAME_None)"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBool()"
  },
  {
    "label": "GetInt()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetInt()"
  },
  {
    "label": "GetFloat()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFloat()"
  },
  {
    "label": "GetString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetString()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValue(int32& OutIntValue)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetValue(bool& OutBoolValue)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetValue(float& OutFloatValue)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetValue(FString& OutStringValue)"
  },
  {
    "label": "SetOnChangedCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOnChangedCallback(const FConsoleVariableDelegate& Callback)"
  },
  {
    "label": "OnChangedDelegate()",
    "kind": "Method",
    "detail": "Function (FConsoleVariableMulticastDelegate&)",
    "insertText": "OnChangedDelegate()"
  },
  {
    "label": "GetPlatformValueVariable()",
    "kind": "Method",
    "detail": "Function (# if ALLOW_OTHER_PLATFORM_CONFIG TSharedPtr<IConsoleVariable>)",
    "insertText": "GetPlatformValueVariable(FName PlatformName, const FString& DeviceProfileName=FString())"
  },
  {
    "label": "HasPlatformValueVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasPlatformValueVariable(FName PlatformName, const FString& DeviceProfileName=FString())"
  },
  {
    "label": "ClearPlatformVariables()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearPlatformVariables(FName PlatformName=NAME_None)"
  },
  {
    "label": "LogHistory()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "LogHistory(FOutputDevice& Ar)"
  },
  {
    "label": "GetHistorySize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetHistorySize()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(bool InValue, EConsoleVariableFlags SetBy = ECVF_SetByCode, FName Tag=NAME_None)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InValue ? TEXT(\"1\") : TEXT(\"0\"), SetBy, Tag)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(int32 InValue, EConsoleVariableFlags SetBy = ECVF_SetByCode, FName Tag=NAME_None)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(*FString::Printf(TEXT(\"%d\"), InValue), SetBy, Tag)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(float InValue, EConsoleVariableFlags SetBy = ECVF_SetByCode, FName Tag=NAME_None)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(*FString::Printf(TEXT(\"%g\"), InValue), SetBy, Tag)"
  },
  {
    "label": "SetWithCurrentPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWithCurrentPriority(bool InValue, FName Tag=NAME_None)"
  },
  {
    "label": "CurFlags()",
    "kind": "Method",
    "detail": "Function (EConsoleVariableFlags)",
    "insertText": "CurFlags(EConsoleVariableFlags)(GetFlags() & ECVF_SetByMask)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(InValue, CurFlags, Tag)"
  },
  {
    "label": "SetWithCurrentPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWithCurrentPriority(int32 InValue, FName Tag=NAME_None)"
  },
  {
    "label": "SetWithCurrentPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWithCurrentPriority(float InValue, FName Tag=NAME_None)"
  },
  {
    "label": "SetWithCurrentPriority()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetWithCurrentPriority(const TCHAR* InValue, FName Tag=NAME_None)"
  },
  {
    "label": "Execute()",
    "kind": "Method",
    "detail": "Function (} } ; struct IConsoleCommand : public IConsoleObject { bool)",
    "insertText": "Execute(const TArray< FString >& Args, UWorld* InWorld, class FOutputDevice& OutputDevice)"
  },
  {
    "label": "OnCVarChange()",
    "kind": "Method",
    "detail": "Function (} ; struct IConsoleThreadPropagation { void)",
    "insertText": "OnCVarChange(int32& Dest, int32 NewValue)"
  },
  {
    "label": "OnCVarChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCVarChange(float& Dest, float NewValue)"
  },
  {
    "label": "OnCVarChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCVarChange(bool& Dest, bool NewValue)"
  },
  {
    "label": "OnCVarChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCVarChange(FString& Dest, const FString& NewValue)"
  },
  {
    "label": "DECLARE_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_DELEGATE_TwoParams(FConsoleObjectVisitor, const TCHAR*, IConsoleObject*)"
  },
  {
    "label": "FConsoleVariableSinkHandle()",
    "kind": "Method",
    "detail": "Function (class FConsoleVariableSinkHandle { public :)",
    "insertText": "FConsoleVariableSinkHandle()"
  },
  {
    "label": "FConsoleVariableSinkHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConsoleVariableSinkHandle(FDelegateHandle InHandle) : Handle(InHandle)"
  },
  {
    "label": "RemoveFromDelegate()",
    "kind": "Method",
    "detail": "Function (} template<MulticastDelegateType> void)",
    "insertText": "RemoveFromDelegate(MulticastDelegateType& MulticastDelegate)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (MulticastDelegate .)",
    "insertText": "Remove(Handle)"
  },
  {
    "label": "HasSameHandle()",
    "kind": "Method",
    "detail": "Function (} template<DelegateType> bool)",
    "insertText": "HasSameHandle(const DelegateType& Delegate)"
  },
  {
    "label": "FConsoleSuggestion()",
    "kind": "Method",
    "detail": "Function (} private : FDelegateHandle Handle ; } ; struct FConsoleSuggestion { FString Name ; FString Help ;)",
    "insertText": "FConsoleSuggestion(FString InName, FString InHelp) : Name(InName) , Help(InHelp)"
  },
  {
    "label": "FConsoleSuggestion()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConsoleSuggestion()"
  },
  {
    "label": "IConsoleCommandExecutor()",
    "kind": "Method",
    "detail": "Function (} } ; class IConsoleCommandExecutor : public IModularFeature { public : ~)",
    "insertText": "IConsoleCommandExecutor()"
  },
  {
    "label": "ModularFeatureName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "ModularFeatureName()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const FName Name =)",
    "insertText": "TEXT(\"ConsoleCommandExecutor\")"
  },
  {
    "label": "GetDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDisplayName()"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetDescription()"
  },
  {
    "label": "GetHintText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetHintText()"
  },
  {
    "label": "GetSuggestedCompletions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSuggestedCompletions(const TCHAR* Input, TArray<FConsoleSuggestion>& Out)"
  },
  {
    "label": "GetExecHistory()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "GetExecHistory(TArray<FString>& Out)"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Exec(const TCHAR* Input)"
  },
  {
    "label": "AllowHotKeyClose()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowHotKeyClose()"
  },
  {
    "label": "AllowMultiLine()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowMultiLine()"
  },
  {
    "label": "GetHotKey()",
    "kind": "Method",
    "detail": "Function (struct FInputChord)",
    "insertText": "GetHotKey()"
  },
  {
    "label": "GetIterateExecutorHotKey()",
    "kind": "Method",
    "detail": "Function (struct FInputChord)",
    "insertText": "GetIterateExecutorHotKey()"
  },
  {
    "label": "RegisterConsoleVariable()",
    "kind": "Method",
    "detail": "Function (} ; struct IConsoleManager { IConsoleVariable*)",
    "insertText": "RegisterConsoleVariable(const TCHAR* Name, bool DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariable()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariable(const TCHAR* Name, int32 DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariable()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariable(const TCHAR* Name, float DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariable()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariable(const TCHAR* Name, const TCHAR* DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariable()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariable(const TCHAR* Name, const FString& DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariableRef(const TCHAR* Name, bool& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariableRef(const TCHAR* Name, int32& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariableRef(const TCHAR* Name, float& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariableRef(const TCHAR* Name, FString& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleVariableBitRef()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "RegisterConsoleVariableBitRef(const TCHAR* CVarName, const TCHAR* FlagName, uint32 BitNumber, uint8* Force0MaskPtr, uint8* Force1MaskPtr, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "CallAllConsoleVariableSinks()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CallAllConsoleVariableSinks()"
  },
  {
    "label": "RegisterConsoleVariableSink_Handle()",
    "kind": "Method",
    "detail": "Function (FConsoleVariableSinkHandle)",
    "insertText": "RegisterConsoleVariableSink_Handle(const FConsoleCommandDelegate& Command)"
  },
  {
    "label": "UnregisterConsoleVariableSink_Handle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterConsoleVariableSink_Handle(FConsoleVariableSinkHandle Handle)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithArgsDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldAndArgsDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "RegisterConsoleCommand()",
    "kind": "Method",
    "detail": "Function (IConsoleCommand*)",
    "insertText": "RegisterConsoleCommand(const TCHAR* Name, const TCHAR* Help, uint32 Flags = (uint32)ECVF_Default)"
  },
  {
    "label": "UnregisterConsoleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterConsoleObject(IConsoleObject* ConsoleObject, bool bKeepState = true)"
  },
  {
    "label": "UnregisterConsoleObject()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterConsoleObject(const TCHAR* Name, bool bKeepState = true)"
  },
  {
    "label": "FindConsoleVariable()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable*)",
    "insertText": "FindConsoleVariable(const TCHAR* Name, bool bTrackFrequentCalls = true)"
  },
  {
    "label": "FindConsoleObject()",
    "kind": "Method",
    "detail": "Function (IConsoleObject*)",
    "insertText": "FindConsoleObject(const TCHAR* Name, bool bTrackFrequentCalls = true)"
  },
  {
    "label": "FindConsoleObjectName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "FindConsoleObjectName(const IConsoleObject* Obj)"
  },
  {
    "label": "FindTConsoleVariableDataBool()",
    "kind": "Method",
    "detail": "Function (TConsoleVariableData<bool>*)",
    "insertText": "FindTConsoleVariableDataBool(const TCHAR* Name)"
  },
  {
    "label": "FindConsoleVariable()",
    "kind": "Method",
    "detail": "Function (IConsoleVariable* P =)",
    "insertText": "FindConsoleVariable(Name)"
  },
  {
    "label": "FindTConsoleVariableDataInt()",
    "kind": "Method",
    "detail": "Function (} TConsoleVariableData<int32>*)",
    "insertText": "FindTConsoleVariableDataInt(const TCHAR* Name)"
  },
  {
    "label": "FindTConsoleVariableDataFloat()",
    "kind": "Method",
    "detail": "Function (} TConsoleVariableData<float>*)",
    "insertText": "FindTConsoleVariableDataFloat(const TCHAR* Name)"
  },
  {
    "label": "ForEachConsoleObjectThatStartsWith()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ForEachConsoleObjectThatStartsWith(const FConsoleObjectVisitor& Visitor, const TCHAR* ThatStartsWith = TEXT(\"\"))"
  },
  {
    "label": "ForEachConsoleObjectThatContains()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForEachConsoleObjectThatContains(const FConsoleObjectVisitor& Visitor, const TCHAR* ThatContains)"
  },
  {
    "label": "ProcessUserConsoleInput()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessUserConsoleInput(const TCHAR* Input, FOutputDevice& Ar, UWorld* InWorld)"
  },
  {
    "label": "AddConsoleHistoryEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddConsoleHistoryEntry(const TCHAR* Key, const TCHAR* Input)"
  },
  {
    "label": "GetConsoleHistory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetConsoleHistory(const TCHAR* Key, TArray<FString>& Out)"
  },
  {
    "label": "IsNameRegistered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNameRegistered(const TCHAR* Name)"
  },
  {
    "label": "RegisterThreadPropagation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterThreadPropagation(uint32 ThreadId = 0, IConsoleThreadPropagation* InCallback = 0)"
  },
  {
    "label": "SetupSingleton()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSingleton()"
  },
  {
    "label": "VisitPlatformCVarsForEmulation()",
    "kind": "Method",
    "detail": "Function (} return* Singleton ; } # if ALLOW_OTHER_PLATFORM_CONFIG bool)",
    "insertText": "VisitPlatformCVarsForEmulation(FName PlatformName, const FString& DeviceProfileName, TFunctionRef<void(const FString& CVarName, const FString& CVarValue, EConsoleVariableFlags SetBy)> Visit)"
  },
  {
    "label": "LoadAllPlatformCVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadAllPlatformCVars(FName PlatformName, const FString& DeviceProfileName=FString())"
  },
  {
    "label": "PreviewPlatformCVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PreviewPlatformCVars(FName PlatformName, const FString& DeviceProfileName, FName PreviewModeTag)"
  },
  {
    "label": "ClearAllPlatformCVars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllPlatformCVars(FName PlatformName=NAME_None, const FString& DeviceProfileName=FString())"
  },
  {
    "label": "UnsetAllConsoleVariablesWithTag()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "UnsetAllConsoleVariablesWithTag(FName Tag, EConsoleVariableFlags Priority=ECVF_SetByMask)"
  },
  {
    "label": "OnCVarUnregistered()",
    "kind": "Method",
    "detail": "Function (FConsoleVariableMulticastDelegate&)",
    "insertText": "OnCVarUnregistered()"
  },
  {
    "label": "OnConsoleObjectUnregistered()",
    "kind": "Method",
    "detail": "Function (FConsoleObjectWithNameMulticastDelegate&)",
    "insertText": "OnConsoleObjectUnregistered()"
  },
  {
    "label": "IConsoleManager()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "IConsoleManager()"
  },
  {
    "label": "FAutoConsoleVariableSink()",
    "kind": "Method",
    "detail": "Function (} ; class FAutoConsoleVariableSink { public :)",
    "insertText": "FAutoConsoleVariableSink(const FConsoleCommandDelegate& InCommand) : Command(InCommand)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Handle =)",
    "insertText": "Get().RegisterConsoleVariableSink_Handle(Command)"
  },
  {
    "label": "FAutoConsoleVariableSink()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAutoConsoleVariableSink()"
  },
  {
    "label": "FAutoConsoleObject()",
    "kind": "Method",
    "detail": "Function (} const FConsoleCommandDelegate& Command ; FConsoleVariableSinkHandle Handle ; } ; class FAutoConsoleObject { protected :)",
    "insertText": "FAutoConsoleObject(IConsoleObject* InTarget) : Target(InTarget)"
  },
  {
    "label": "AccessGeneralShaderChangeCvars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessGeneralShaderChangeCvars().Add(this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Target->TestFlags(ECVF_MobileShaderChange))"
  },
  {
    "label": "AccessMobileShaderChangeCvars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessMobileShaderChangeCvars().Add(this)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Target->TestFlags(ECVF_DesktopShaderChange))"
  },
  {
    "label": "AccessDesktopShaderChangeCvars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AccessDesktopShaderChangeCvars().Add(this)"
  },
  {
    "label": "FAutoConsoleObject()",
    "kind": "Method",
    "detail": "Function (} } public : ~)",
    "insertText": "FAutoConsoleObject()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Get().UnregisterConsoleObject(Target)"
  },
  {
    "label": "AccessGeneralShaderChangeCvars()",
    "kind": "Method",
    "detail": "Function (} TArray<const FAutoConsoleObject*>&)",
    "insertText": "AccessGeneralShaderChangeCvars()"
  },
  {
    "label": "AccessMobileShaderChangeCvars()",
    "kind": "Method",
    "detail": "Function (TArray<const FAutoConsoleObject*>&)",
    "insertText": "AccessMobileShaderChangeCvars()"
  },
  {
    "label": "AccessDesktopShaderChangeCvars()",
    "kind": "Method",
    "detail": "Function (TArray<const FAutoConsoleObject*>&)",
    "insertText": "AccessDesktopShaderChangeCvars()"
  },
  {
    "label": "AsVariable()",
    "kind": "Method",
    "detail": "Function (} const IConsoleVariable*)",
    "insertText": "AsVariable()"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (} private : IConsoleObject* Target ; } ; # if ! NO_CVARS class FAutoConsoleVariable : private FAutoConsoleObject { public :)",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, bool DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, int32 DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, float DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, const TCHAR* DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, bool DefaultValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "AsVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AsVariable()->SetOnChangedCallback(Callback)"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, int32 DefaultValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, float DefaultValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, const TCHAR* DefaultValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} IConsoleVariable&)",
    "insertText": "operator()"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (} } ; # else class FAutoConsoleVariable { public :)",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, int32 DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, float DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariable(const TCHAR* Name, const TCHAR* DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # if ! NO_CVARS class FAutoConsoleVariableRef : private FAutoConsoleObject { public :)",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, int32& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, float& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, bool& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, FString& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, int32& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, float& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, bool& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, FString& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariableRef(Name, RefValue, Help, Flags))"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAutoConsoleVariableRef()"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (} } ; # else class FAutoConsoleVariableRef { public :)",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, int32& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, float& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, bool& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, FString& RefValue, const TCHAR* Help, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, int32& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, float& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, bool& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleVariableRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleVariableRef(const TCHAR* Name, FString& RefValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "TConsoleVariableData()",
    "kind": "Method",
    "detail": "Function (} } ; # endif template<class T> class TConsoleVariableData { public :)",
    "insertText": "TConsoleVariableData(const T DefaultValue)"
  },
  {
    "label": "GetValueOnGameThread()",
    "kind": "Method",
    "detail": "Function (ShadowedValue [ i ] = DefaultValue ; } } T)",
    "insertText": "GetValueOnGameThread()"
  },
  {
    "label": "ReportAccess()",
    "kind": "Method",
    "detail": "Function (UE::)",
    "insertText": "ReportAccess(UE::AccessDetection::EType::CVar)"
  },
  {
    "label": "cvarCheckCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cvarCheckCode(ensure(GetShadowIndex() == 0))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang__) cvarCheckCode(ensure(IsInParallelRenderingThread()))"
  },
  {
    "label": "GetValueOnAnyThread()",
    "kind": "Method",
    "detail": "Function (# endif return ShadowedValue [ 1 ] ; } T)",
    "insertText": "GetValueOnAnyThread(bool bForceGameThread = false)"
  },
  {
    "label": "GetShadowIndex()",
    "kind": "Method",
    "detail": "Function (} private : T ShadowedValue [ 2 ] ; uint32)",
    "insertText": "GetShadowIndex(bool bForceGameThread = false)"
  },
  {
    "label": "cvarCheckCode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "cvarCheckCode(ensure(!IsInActualRenderingThread()))"
  },
  {
    "label": "GetReferenceOnAnyThread()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "GetReferenceOnAnyThread(bool bForceGameThread = false)"
  },
  {
    "label": "TAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (} template<class T2> class FConsoleVariable ; template<class T2> class TAutoConsoleVariable ; } ; # if ! NO_CVARS template<class T> class TAutoConsoleVariable : public FAutoConsoleObject { public :)",
    "insertText": "TAutoConsoleVariable(const TCHAR* Name, const T& DefaultValue, const TCHAR* Help, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleVariable(Name, DefaultValue, Help, Flags))"
  },
  {
    "label": "AsVariable()",
    "kind": "Method",
    "detail": "Function (Ref =)",
    "insertText": "AsVariable()->AsVariableBool()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<T, int32>)"
  },
  {
    "label": "AsVariable()",
    "kind": "Method",
    "detail": "Function (Ref =)",
    "insertText": "AsVariable()->AsVariableInt()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<T, float>)"
  },
  {
    "label": "AsVariable()",
    "kind": "Method",
    "detail": "Function (Ref =)",
    "insertText": "AsVariable()->AsVariableFloat()"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (} else if)",
    "insertText": "constexpr(std::is_same_v<T, FString>)"
  },
  {
    "label": "AsVariable()",
    "kind": "Method",
    "detail": "Function (Ref =)",
    "insertText": "AsVariable()->AsVariableString()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "static_assert(sizeof(T) == 0, \"Not supported\")"
  },
  {
    "label": "TAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "TAutoConsoleVariable(const TCHAR* Name, const T& DefaultValue, const TCHAR* Help, const FConsoleVariableDelegate& Callback, uint32 Flags = ECVF_Default) : TAutoConsoleVariable(Name, DefaultValue, Help, Flags)"
  },
  {
    "label": "GetValueOnRenderThread()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetValueOnRenderThread()"
  },
  {
    "label": "TAutoConsoleVariable()",
    "kind": "Method",
    "detail": "Function (} private : TConsoleVariableData<T>* Ref ; } ; # else template<class T> class TAutoConsoleVariable : public IConsoleVariable { public :)",
    "insertText": "TAutoConsoleVariable(const TCHAR* Name, const T& DefaultValue, const TCHAR* InHelp, uint32 InFlags = ECVF_Default) : Value(DefaultValue), Flags((EConsoleVariableFlags)InFlags)"
  },
  {
    "label": "AsVariableFloat()",
    "kind": "Method",
    "detail": "Function (} class TConsoleVariableData<float>*)",
    "insertText": "AsVariableFloat()"
  },
  {
    "label": "AsVariableString()",
    "kind": "Method",
    "detail": "Function (} class TConsoleVariableData<FString>*)",
    "insertText": "AsVariableString()"
  },
  {
    "label": "IsVariableInt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVariableInt()"
  },
  {
    "label": "SetHelp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetHelp(const TCHAR* InHelp)"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "SetOnChangedCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetOnChangedCallback(const FConsoleVariableDelegate &)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (FConsoleVariableMulticastDelegate Dummy ;)",
    "insertText": "check(false)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Flags = InFlags ; } void)",
    "insertText": "Set(const TCHAR* InValue, EConsoleVariableFlags SetBy)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(Value.ShadowedValue[0], InValue)"
  },
  {
    "label": "GetImpl()",
    "kind": "Method",
    "detail": "Function (} private : TConsoleVariableData<T> Value ; FString Help ; EConsoleVariableFlags Flags = EConsoleVariableFlags::ECVF_Default ; template<class Y> Y)",
    "insertText": "GetImpl()"
  },
  {
    "label": "AsImpl()",
    "kind": "Method",
    "detail": "Function (} } template<class Y> TConsoleVariableData<T>*)",
    "insertText": "AsImpl()"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithArgsDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (} } ; # else class FAutoConsoleCommand { public :)",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithArgsDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleCommand()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FAutoConsoleCommand(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default)"
  },
  {
    "label": "FAutoConsoleCommandWithWorld()",
    "kind": "Method",
    "detail": "Function (} } ; # endif # if ! NO_CVARS class FAutoConsoleCommandWithWorld : private FAutoConsoleObject { public :)",
    "insertText": "FAutoConsoleCommandWithWorld(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommandWithWorldAndArgs()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoConsoleCommandWithWorldAndArgs : private FAutoConsoleObject { public :)",
    "insertText": "FAutoConsoleCommandWithWorldAndArgs(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldAndArgsDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommandWithArgsAndOutputDevice()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoConsoleCommandWithArgsAndOutputDevice : private FAutoConsoleObject { public :)",
    "insertText": "FAutoConsoleCommandWithArgsAndOutputDevice(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommandWithOutputDevice()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoConsoleCommandWithOutputDevice : private FAutoConsoleObject { public :)",
    "insertText": "FAutoConsoleCommandWithOutputDevice(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommandWithWorldArgsAndOutputDevice()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoConsoleCommandWithWorldArgsAndOutputDevice : private FAutoConsoleObject { public :)",
    "insertText": "FAutoConsoleCommandWithWorldArgsAndOutputDevice(const TCHAR* Name, const TCHAR* Help, const FConsoleCommandWithWorldArgsAndOutputDeviceDelegate& Command, uint32 Flags = ECVF_Default) : FAutoConsoleObject(IConsoleManager::Get().RegisterConsoleCommand(Name, Help, Command, Flags))"
  },
  {
    "label": "FAutoConsoleCommandWithWorld()",
    "kind": "Method",
    "detail": "Function (} } ; # else class FAutoConsoleCommandWithWorld { public : template<class . . . Args>)",
    "insertText": "FAutoConsoleCommandWithWorld(const Args&...)"
  },
  {
    "label": "FAutoConsoleCommandWithWorldAndArgs()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoConsoleCommandWithWorldAndArgs { public : template<class . . . Args>)",
    "insertText": "FAutoConsoleCommandWithWorldAndArgs(const Args&...)"
  },
  {
    "label": "FAutoConsoleCommandWithOutputDevice()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoConsoleCommandWithOutputDevice { public : template<class . . . Args>)",
    "insertText": "FAutoConsoleCommandWithOutputDevice(const Args&...)"
  },
  {
    "label": "FAutoConsoleCommandWithWorldArgsAndOutputDevice()",
    "kind": "Method",
    "detail": "Function (} } ; class FAutoConsoleCommandWithWorldArgsAndOutputDevice { public : template<class . . . Args>)",
    "insertText": "FAutoConsoleCommandWithWorldArgsAndOutputDevice(const Args&...)"
  },
  {
    "label": "FAutoConsoleVariableShadow()",
    "kind": "Method",
    "detail": "Function (} } ; # endif enum class EShadowCVarBehavior : uint8 { NoMessaging,Warn,Error,Ensure,Assert,} ; class FAutoConsoleVariableShadow { public :)",
    "insertText": "FAutoConsoleVariableShadow(const TCHAR* Name, const TCHAR* CVarToShadow, EShadowCVarBehavior LookupFailureBehavior=EShadowCVarBehavior::Ensure)"
  },
  {
    "label": "FAutoConsoleVariableDeprecated()",
    "kind": "Method",
    "detail": "Function (} ; class FAutoConsoleVariableDeprecated { public :)",
    "insertText": "FAutoConsoleVariableDeprecated(const TCHAR* Name, const TCHAR* CVarToShadow, const TCHAR* DeprecatedAtVersion, EShadowCVarBehavior UsageBehavior=EShadowCVarBehavior::Ensure, EShadowCVarBehavior LookupFailureBehavior = EShadowCVarBehavior::Ensure)"
  },
  {
    "label": "FAutoConsoleCommandDeprecated()",
    "kind": "Method",
    "detail": "Function (} ; class FAutoConsoleCommandDeprecated { public :)",
    "insertText": "FAutoConsoleCommandDeprecated(const TCHAR* Name, const TCHAR* CVarToShadow, const TCHAR* DeprecatedAtVersion, EShadowCVarBehavior UsageBehavior = EShadowCVarBehavior::Ensure, EShadowCVarBehavior LookupFailureBehavior = EShadowCVarBehavior::Ensure)"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogConsoleResponse, Log, All)"
  }
]