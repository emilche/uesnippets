[
  {
    "label": "_Py_dict_state",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_Py_dict_state"
  },
  {
    "label": "_dictkeysobject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_dictkeysobject"
  },
  {
    "label": "_dictvalues",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_dictvalues"
  },
  {
    "label": "_PyDict_Fini()",
    "kind": "Method",
    "detail": "Function (# ifndef Py_INTERNAL_DICT_H # define Py_INTERNAL_DICT_H # ifdef __cplusplus \" C \" { # endif # ifndef Py_BUILD_CORE # error \" this header requires Py_BUILD_CORE define \" # endif void)",
    "insertText": "_PyDict_Fini(PyInterpreterState *interp)"
  },
  {
    "label": "_PyDict_NewKeysForClass()",
    "kind": "Method",
    "detail": "Function (# ifndef WITH_FREELISTS # define PyDict_MAXFREELIST 0 # endif # ifndef PyDict_MAXFREELIST # define PyDict_MAXFREELIST 8 0 # endif struct _Py_dict_state { # if PyDict_MAXFREELIST> 0 PyDictObject* free_list [ PyDict_MAXFREELIST ] ; int numfree ; PyDictKeysObject* keys_free_list [ PyDict_MAXFREELIST ] ; int keys_numfree ; # endif } ; typedef struct { Py_hash_t me_hash ; PyObject* me_key ; PyObject* me_value ; } PyDictKeyEntry ; typedef struct { PyObject* me_key ; PyObject* me_value ; } PyDictUnicodeEntry ; PyDictKeysObject*)",
    "insertText": "_PyDict_NewKeysForClass(void)"
  },
  {
    "label": "_PyDict_FromKeys()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyDict_FromKeys(PyObject *, PyObject *, PyObject *)"
  },
  {
    "label": "_PyDictKeys_GetVersionForCurrentState()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "_PyDictKeys_GetVersionForCurrentState(PyDictKeysObject *dictkeys)"
  },
  {
    "label": "_PyDict_KeysSize()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t)",
    "insertText": "_PyDict_KeysSize(PyDictKeysObject *keys)"
  },
  {
    "label": "_Py_dict_lookup()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t)",
    "insertText": "_Py_dict_lookup(PyDictObject *mp, PyObject *key, Py_hash_t hash, PyObject **value_addr)"
  },
  {
    "label": "_PyDict_GetItemHint()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t)",
    "insertText": "_PyDict_GetItemHint(PyDictObject *, PyObject *, Py_ssize_t, PyObject **)"
  },
  {
    "label": "_PyDictKeys_StringLookup()",
    "kind": "Method",
    "detail": "Function (Py_ssize_t)",
    "insertText": "_PyDictKeys_StringLookup(PyDictKeysObject* dictkeys, PyObject *key)"
  },
  {
    "label": "_PyDict_LoadGlobal()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyDict_LoadGlobal(PyDictObject *, PyDictObject *, PyObject *)"
  },
  {
    "label": "_PyDict_SetItem_Take2()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyDict_SetItem_Take2(PyDictObject *op, PyObject *key, PyObject *value)"
  },
  {
    "label": "_PyObjectDict_SetItem()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "_PyObjectDict_SetItem(PyTypeObject *tp, PyObject **dictptr, PyObject *name, PyObject *value)"
  },
  {
    "label": "_PyDict_Pop_KnownHash()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyDict_Pop_KnownHash(PyObject *, PyObject *, Py_hash_t, PyObject *)"
  },
  {
    "label": "DKIX_EMPTY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DKIX_EMPTY(-1) #define DKIX_DUMMY (-2) #define DKIX_ERROR (-3) #define DKIX_KEY_CHANGED (-4)"
  },
  {
    "label": "DK_LOG_SIZE()",
    "kind": "Method",
    "detail": "Function (DICT_KEYS_GENERAL = 0,DICT_KEYS_UNICODE = 1,DICT_KEYS_SPLIT = 2 } DictKeysKind ; struct _dictkeysobject { Py_ssize_t dk_refcnt ; uint8_t dk_log2_size ; uint8_t dk_log2_index_bytes ; uint8_t dk_kind ; uint32_t dk_version ; Py_ssize_t dk_usable ; Py_ssize_t dk_nentries ; char dk_indices [ ] ; } ; # define SHARED_KEYS_MAX_SIZE 3 0 # define NEXT_LOG2_SHARED_KEYS_MAX_SIZE 6 struct _dictvalues { PyObject* values [ 1 ] ; } ; # define)",
    "insertText": "DK_LOG_SIZE(dk) ((dk)->dk_log2_size) #if SIZEOF_VOID_P > 4 #define DK_SIZE(dk) (((int64_t)1)<<DK_LOG_SIZE(dk)) #else #define DK_SIZE(dk) (1<<DK_LOG_SIZE(dk)) #endif #define DK_ENTRIES(dk) \\ (assert(dk->dk_kind == DICT_KEYS_GENERAL), (PyDictKeyEntry*)(&((int8_t*)((dk)->dk_indices))[(size_t)1 << (dk)->dk_log2_index_bytes])) #define DK_UNICODE_ENTRIES(dk) \\ (assert(dk->dk_kind != DICT_KEYS_GENERAL), (PyDictUnicodeEntry*)(&((int8_t*)((dk)->dk_indices))[(size_t)1 << (dk)->dk_log2_index_bytes])) #define DK_IS_UNICODE(dk) ((dk)->dk_kind != DICT_KEYS_GENERAL)"
  },
  {
    "label": "DICT_NEXT_VERSION()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "DICT_NEXT_VERSION() (++_pydict_global_version) extern PyObject *_PyObject_MakeDictFromInstanceAttributes(PyObject *obj, PyDictValues *values)"
  },
  {
    "label": "_PyDict_FromItems()",
    "kind": "Method",
    "detail": "Function (PyObject*)",
    "insertText": "_PyDict_FromItems(PyObject *const *keys, Py_ssize_t keys_offset, PyObject *const *values, Py_ssize_t values_offset, Py_ssize_t length)"
  },
  {
    "label": "_PyDictValues_AddToInsertionOrder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_PyDictValues_AddToInsertionOrder(PyDictValues *values, Py_ssize_t ix)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ix < SHARED_KEYS_MAX_SIZE)"
  },
  {
    "label": "size_ptr()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "size_ptr((uint8_t *)values)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (int size =* size_ptr ;)",
    "insertText": "assert(size+2 < ((uint8_t *)values)[-1])"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size + + ; size_ptr [ -)",
    "insertText": "size(uint8_t)"
  }
]