[
  {
    "label": "FManagedArrayCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollection"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ManagedArray"
  },
  {
    "label": "FManagedArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManagedArrayBase"
  },
  {
    "label": "TManagedArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArrayBase"
  },
  {
    "label": "InElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InElementType"
  },
  {
    "label": "TManagedArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArrayBase"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FManagedBitArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManagedBitArrayBase"
  },
  {
    "label": "InElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InElementType"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHelper(TArray<T>& Array, const TManagedArrayBase<T>& NewTypedArray, int32 Size)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHelper(TArray<TUniquePtr<T>>& Array, const TManagedArrayBase<TUniquePtr<T>>& NewTypedArray, int32 Size)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHelper(TArray<TRefCountPtr<T>>& Array, const TManagedArrayBase<TRefCountPtr<T>>& NewTypedArray, int32 Size)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRangeHelper(TArray<T>& Target, const TManagedArrayBase<T>& Source, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRangeHelper(TArray<TUniquePtr<T>>& Array, const TManagedArrayBase<TUniquePtr<T>>& ConstArray, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRangeHelper(TArray<TRefCountPtr<T>>& Array, const TManagedArrayBase<TRefCountPtr<T>>& ConstArray, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "sizeof(ElementType)"
  },
  {
    "label": "NewArray()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "NewArray(false, NumElements)"
  }
]