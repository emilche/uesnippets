[
  {
    "label": "FManagedArrayCollection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FManagedArrayCollection"
  },
  {
    "label": "FManagedArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManagedArrayBase"
  },
  {
    "label": "TManagedArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArrayBase"
  },
  {
    "label": "InElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InElementType"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FManagedBitArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManagedBitArrayBase"
  },
  {
    "label": "TManagedArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TManagedArray"
  },
  {
    "label": "DEFINE_LOG_CATEGORY_STATIC()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" GeometryCollection / GeometryCollectionSection . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UnrealTemplate . h \" # include \" Chaos / ChaosArchive . h \" # include \" UObject / DestructionObjectVersion . h \" # include \" ChaosLog . h \" # include \" Chaos / ParticleHandle . h \" # include \" Chaos / BVHParticles . h \" # include \" Math / Vector . h \" # include \" Chaos / Matrix . h \" # include \" Templates / TypeHash . h \" struct FManagedArrayCollection ;)",
    "insertText": "DEFINE_LOG_CATEGORY_STATIC(UManagedArrayLogging, NoLogging, All)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<T>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (Ar<<Array ; } void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<FVector3f>& Array)"
  },
  {
    "label": "BulkSerialize()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "BulkSerialize(Ar)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<FGuid>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<FIntVector>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<FVector2f>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<float>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<FQuat4f>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<bool>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<int32>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<uint8>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<FIntVector2>& Array)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TryBulkSerializeManagedArray(Chaos::FChaosArchive& Ar, TArray<FIntVector4>& Array)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} namespace ManagedArrayTypeSize { template<T> SIZE_T)",
    "insertText": "GetAllocatedSize(const T& Value)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} template<T> SIZE_T)",
    "insertText": "GetAllocatedSize(const TArray<T>& Array)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} template<T> SIZE_T)",
    "insertText": "GetAllocatedSize(const TBitArray<>& Array)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} template<T> SIZE_T)",
    "insertText": "GetAllocatedSize(const TSet<T>& Set)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} template<T> SIZE_T)",
    "insertText": "GetAllocatedSize(const TUniquePtr<T>& Ptr)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} template<T> SIZE_T)",
    "insertText": "GetAllocatedSize(const TRefCountPtr<T>& Ptr)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} template<T,ESPMode Mode> SIZE_T)",
    "insertText": "GetAllocatedSize(const TSharedPtr<T, Mode>& Ptr)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(const Chaos::FImplicitObject3* ImplicitObjectPtr)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize(const Chaos::FBVHParticlesFloat3& BVHParticles)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} } class FManagedArrayBase : public FNoncopyable { FManagedArrayCollection ; protected : void)",
    "insertText": "Resize(const int32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Reserve(const int32 Num)"
  },
  {
    "label": "Reorder()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Reorder(const TArray<int32>& NewOrder)"
  },
  {
    "label": "ReindexFromLookup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReindexFromLookup(const TArray<int32>& InverseNewOrder)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FManagedArrayBase&)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "Convert(const FManagedArrayBase&)"
  },
  {
    "label": "CopyRange()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "CopyRange(const FManagedArrayBase& ConstArray, int32 Start, int32 Stop, int32 Offset = 0)"
  },
  {
    "label": "SetDefaults()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "SetDefaults(uint32 StartSize, uint32 NumElements, bool bHasGroupIndexDependency)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} ; SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "ClearDirtyFlag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearDirtyFlag()"
  },
  {
    "label": "FManagedArrayBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FManagedArrayBase()"
  },
  {
    "label": "MarkDirty()",
    "kind": "Method",
    "detail": "Function (bIsDirty = false ; } void)",
    "insertText": "MarkDirty()"
  },
  {
    "label": "IsDirty()",
    "kind": "Method",
    "detail": "Function (bIsDirty = true ; } bool)",
    "insertText": "IsDirty()"
  },
  {
    "label": "RemoveElements()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveElements(const TArray<int32>& SortedDeletionList)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "GetTypeSize()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "GetTypeSize()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} # if 0 void)",
    "insertText": "Swap(int32 Index1, int32 Index2)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Empty()"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (} private : bool bIsDirty ; } ; template<T> class TManagedArrayBase ; template<T> void)",
    "insertText": "InitHelper(TArray<T>& Array, const TManagedArrayBase<T>& NewTypedArray, int32 Size)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "InitHelper(TArray<TUniquePtr<T>>& Array, const TManagedArrayBase<TUniquePtr<T>>& NewTypedArray, int32 Size)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "InitHelper(TArray<TRefCountPtr<T>>& Array, const TManagedArrayBase<TRefCountPtr<T>>& NewTypedArray, int32 Size)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "CopyRangeHelper(TArray<T>& Target, const TManagedArrayBase<T>& Source, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "CopyRangeHelper(TArray<TUniquePtr<T>>& Array, const TManagedArrayBase<TUniquePtr<T>>& ConstArray, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (template<T> void)",
    "insertText": "CopyRangeHelper(TArray<TRefCountPtr<T>>& Array, const TManagedArrayBase<TRefCountPtr<T>>& ConstArray, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "TManagedArrayBase()",
    "kind": "Method",
    "detail": "Function (template<class InElementType> class TManagedArrayBase : public FManagedArrayBase { public : using ElementType = InElementType ;)",
    "insertText": "TManagedArrayBase()"
  },
  {
    "label": "TManagedArrayBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArrayBase(const TArray<ElementType>& Other) : Array(Other)"
  },
  {
    "label": "TManagedArrayBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArrayBase(const TManagedArrayBase<ElementType>& Other)"
  },
  {
    "label": "TManagedArrayBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArrayBase(TArray<ElementType>&& Other) : Array(MoveTemp(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArrayBase&)",
    "insertText": "operator(TManagedArrayBase<ElementType>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArrayBase&)",
    "insertText": "operator(TArray<ElementType>&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Array =)",
    "insertText": "MoveTemp(Other)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(SortedDeletionList[0], RangeStart - SortedDeletionList[0] + 1, EAllowShrinking::No)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SortedDeletionList[ii] != (SortedDeletionList[ii - 1]+1))"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(SortedDeletionList[ii], RangeStart - SortedDeletionList[ii] + 1, EAllowShrinking::No)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (RangeStart = SortedDeletionList [ ii - 1 ] ; } } Array .)",
    "insertText": "Shrink()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(const FManagedArrayBase& NewArray)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (const TManagedArrayBase<ElementType>& NewTypedArray = static_cast<const TManagedArrayBase<)",
    "insertText": "ElementType(NewArray)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(Size)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitHelper(Array, NewTypedArray, Size)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (const TManagedArrayBase<ElementType>& TypedConstArray = static_cast<const TManagedArrayBase<)",
    "insertText": "ElementType(ConstArray)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyRangeHelper(Array, TypedConstArray, Start, Stop, Offset)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Fill(const ElementType& Value)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(Array[Index1], Array[Index2])"
  },
  {
    "label": "ExchangeArrays()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "ExchangeArrays(FManagedArrayBase& NewArray)"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exchange(*this, NewTypedArray)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ElementType&)",
    "insertText": "operator(int Index)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const ElementType*)",
    "insertText": "GetData()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Max()"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const ElementType& Item)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Find(const ElementType& Item)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Count(const ElementType& Item)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Num = 0 ;)",
    "insertText": "for(int32 Idx = 0; Idx < Array.Num(); ++Idx)"
  },
  {
    "label": "RangeCheck()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RangeCheck(int32 Index)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(Chaos::FChaosArchive& Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FDestructionObjectVersion::GUID)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Version = 1 ; Ar<<Version ;)",
    "insertText": "if(Ar.CustomVer(FDestructionObjectVersion::GUID) < FDestructionObjectVersion::BulkSerializeArrays)"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (Ar<<Array ; } else {)",
    "insertText": "TryBulkSerializeManagedArray(Ar, Array)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} } uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} typedef TArray<InElementType>::RangedForIteratorType RangedForIteratorType ; typedef TArray<InElementType>::RangedForConstIteratorType RangedForConstIteratorType ; RangedForIteratorType)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} RangedForIteratorType)",
    "insertText": "end()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Resize(const int32 Size)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "SetNum(Size,EAllowShrinking::Yes)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(const int32 Size)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Reserve(Size)"
  },
  {
    "label": "AddDefaulted()",
    "kind": "Method",
    "detail": "Function (TArray<InElementType> NewArray ; NewArray .)",
    "insertText": "AddDefaulted(NumElements)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (NewArray [ OriginalIdx ] =)",
    "insertText": "MoveTemp(Array[NewOrder[OriginalIdx]])"
  },
  {
    "label": "Exchange()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Exchange(Array, NewArray)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} TArray<InElementType> Array ; } ; template<class T> uint32)",
    "insertText": "GetTypeHash(const TManagedArrayBase<T>& ManagedArray)"
  },
  {
    "label": "InitHelper()",
    "kind": "Method",
    "detail": "Function (Array [ Index ] = NewTypedArray [ Index ] ; } } template<TSrc,TDst> void)",
    "insertText": "InitHelper(TArray<TDst>& Array, const TManagedArrayBase<TSrc>& NewTypedArray, int32 Size)"
  },
  {
    "label": "TDst()",
    "kind": "Method",
    "detail": "Function (Array [ Index ] =)",
    "insertText": "TDst(NewTypedArray[Index])"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (Target [ Tdx ] = Source [ Sdx ] ; } } template<T> void)",
    "insertText": "CopyRangeHelper(TArray<TUniquePtr<T>>& Target, const TManagedArrayBase<TUniquePtr<T>>& Source, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (} template<T> void)",
    "insertText": "CopyRangeHelper(TArray<TRefCountPtr<T>>& Target, const TManagedArrayBase<TRefCountPtr<T>>& Source, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "FManagedBitArrayBase()",
    "kind": "Method",
    "detail": "Function (Target [ Tdx ] = Source [ Sdx ] ; } } class FManagedBitArrayBase : public FManagedArrayBase { public :)",
    "insertText": "FManagedBitArrayBase()"
  },
  {
    "label": "FManagedBitArrayBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FManagedBitArrayBase(const FManagedBitArrayBase& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FManagedBitArrayBase&)",
    "insertText": "operator(FManagedBitArrayBase&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FManagedBitArrayBase&)",
    "insertText": "operator(TBitArray<>&& Other)"
  },
  {
    "label": "NumTopRemove()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumTopRemove(RangeStart - SortedDeletionList[ii] + 1)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(SortedDeletionList[0], NumTopRemove)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(SortedDeletionList[ii] != (SortedDeletionList[ii - 1] + 1))"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt(SortedDeletionList[ii], NumTopRemove)"
  },
  {
    "label": "FManagedBitArrayBase()",
    "kind": "Method",
    "detail": "Function (const FManagedBitArrayBase& TypedConstArray = static_cast<const)",
    "insertText": "FManagedBitArrayBase(NewArray)"
  },
  {
    "label": "FManagedBitArrayBase()",
    "kind": "Method",
    "detail": "Function (const FManagedBitArrayBase& TypedConstArray = static_cast<const)",
    "insertText": "FManagedBitArrayBase(ConstArray)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (Array [ Tdx ] = TypedConstArray [ Sdx ] ; } } } void)",
    "insertText": "Fill(const bool Value)"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (Array [ Idx ] = Value ; } } void)",
    "insertText": "Fill(const TArray<bool>& BoolArray)"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValidIndex(int32 Index)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (TArray<bool> BoolArray ; BoolArray .)",
    "insertText": "SetNumUninitialized(Array.Num())"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(const bool Item)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Find(const bool Item)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Count(const bool Item)"
  },
  {
    "label": "CountSetBits()",
    "kind": "Method",
    "detail": "Function (const int32 NumSetBits = Array .)",
    "insertText": "CountSetBits()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int Version = 1 ; Ar<<Version ; TArray<bool> BoolArray ;)",
    "insertText": "if(Ar.IsSaving())"
  },
  {
    "label": "GetAsBoolArray()",
    "kind": "Method",
    "detail": "Function (BoolArray =)",
    "insertText": "GetAsBoolArray()"
  },
  {
    "label": "TryBulkSerializeManagedArray()",
    "kind": "Method",
    "detail": "Function (Ar<<BoolArray ; } else {)",
    "insertText": "TryBulkSerializeManagedArray(Ar, BoolArray)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Ar.IsLoading())"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(BoolArray.Num())"
  },
  {
    "label": "Fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Fill(BoolArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Add(false, Size - Array.Num())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(Size < Array.Num())"
  },
  {
    "label": "NumToRemove()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "NumToRemove(Array.Num() - Size)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "RemoveAt((Array.Num() - NumToRemove), NumToRemove)"
  },
  {
    "label": "NewArray()",
    "kind": "Method",
    "detail": "Function (TBitArray<>)",
    "insertText": "NewArray(false, NumElements)"
  },
  {
    "label": "UNSUPPORTED_UNIQUE_ARRAY_COPIES()",
    "kind": "Method",
    "detail": "Function (} TBitArray<> Array ; } ; # define)",
    "insertText": "UNSUPPORTED_UNIQUE_ARRAY_COPIES(TYPE, NAME) \\ template<> inline void InitHelper(TArray<TYPE>& Array, const TManagedArrayBase<TYPE>& NewTypedArray, int32 Size)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_LOG(LogChaos,Warning, TEXT(\"Cannot make a copy of unique array of type (%s) within the managed array collection. Regenerate unique pointer attributes if needed.\"), NAME)"
  },
  {
    "label": "CopyRangeHelper()",
    "kind": "Method",
    "detail": "Function (} \\ template<> void)",
    "insertText": "CopyRangeHelper(TArray<TYPE>& Target, const TManagedArrayBase<TYPE>& Source, int32 Start, int32 Stop, int32 Offset)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "UE_LOG(LogChaos, Warning, TEXT(\"Cannot make a range copy of unique array of type (%s) within the managed array collection. Regenerate unique pointer attributes if needed.\"), NAME)"
  },
  {
    "label": "UNSUPPORTED_UNIQUE_ARRAY_COPIES()",
    "kind": "Method",
    "detail": "Function (\\ } typedef TUniquePtr<Chaos::TGeometryParticle<Chaos::FReal,3>> LOCAL_MA_UniqueTGeometryParticle ;)",
    "insertText": "UNSUPPORTED_UNIQUE_ARRAY_COPIES(LOCAL_MA_UniqueTGeometryParticle, TEXT(\"Chaos::TGeometryParticle\"))"
  },
  {
    "label": "UNSUPPORTED_UNIQUE_ARRAY_COPIES()",
    "kind": "Method",
    "detail": "Function (typedef TUniquePtr<Chaos::TPBDRigidParticle<Chaos::FReal,3>> LOCAL_MA_UniqueTPBDRigidParticle ;)",
    "insertText": "UNSUPPORTED_UNIQUE_ARRAY_COPIES(LOCAL_MA_UniqueTPBDRigidParticle, TEXT(\"Chaos::TPBDRigidParticle\"))"
  },
  {
    "label": "UNSUPPORTED_UNIQUE_ARRAY_COPIES()",
    "kind": "Method",
    "detail": "Function (typedef TUniquePtr<Chaos::FBVHParticles,TDefaultDelete<Chaos::FBVHParticles>> LOCAL_MA_UniqueTBVHParticles ;)",
    "insertText": "UNSUPPORTED_UNIQUE_ARRAY_COPIES(LOCAL_MA_UniqueTBVHParticles, TEXT(\"Chaos::FBVHParticles\"))"
  },
  {
    "label": "UNSUPPORTED_UNIQUE_ARRAY_COPIES()",
    "kind": "Method",
    "detail": "Function (typedef TUniquePtr<TArray<UE::Math::TVector<float>>> LOCAL_MA_UniqueTArrayTVector ;)",
    "insertText": "UNSUPPORTED_UNIQUE_ARRAY_COPIES(LOCAL_MA_UniqueTArrayTVector, TEXT(\"TArray<UE::Math::TVector<float>>\"))"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (template<class InElementType> class TManagedArray : public TManagedArrayBase<InElementType> { public :)",
    "insertText": "TManagedArray()"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<InElementType>& Other) : TManagedArrayBase<InElementType>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(TManagedArray<InElementType>&& Other) : TManagedArrayBase<InElementType>(MoveTemp(Other))"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(TArray<InElementType>&& Other) : TManagedArrayBase<InElementType>(MoveTemp(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<InElementType>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TManagedArrayBase<InElementType)",
    "insertText": "operator(MoveTemp(Other))"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<int32>& Other) : TManagedArrayBase<int32>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<int32>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<int32>&& Other)"
  },
  {
    "label": "Reindex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reindex(const TArray<int32> & Offsets, const int32 & FinalSize, const TArray<int32> & SortedDeletionList, const TSet<int32>& DeletionSet)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32 ArraySize =)",
    "insertText": "Num(), MaskSize = Offsets.Num()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int32 RemapVal = this ->)",
    "insertText": "operator(Index)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(-1 <= this->operator[](Index))"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<FTransform3f>& Other) : TManagedArrayBase<FTransform3f>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<FTransform3f>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<FTransform3f>&& Other)"
  },
  {
    "label": "Convert()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "Convert(const FManagedArrayBase& NewArray)"
  },
  {
    "label": "FTransform()",
    "kind": "Method",
    "detail": "Function (const TManagedArrayBase<FTransform>& NewTypedArray = static_cast<const TManagedArrayBase<)",
    "insertText": "FTransform(NewArray)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const TManagedArrayBase<int32>& NewTypedArray = static_cast<const TManagedArrayBase<)",
    "insertText": "int32(NewArray)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<TSet<int32>>& Other) : TManagedArrayBase< TSet<int32> >(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<TSet<int32>>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<TSet<int32>>&& Other)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (NewSet .)",
    "insertText": "Remove(Del)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (NewSet .)",
    "insertText": "Reset()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (const int32 NewEntry = StaleEntry - Offsets [ StaleEntry ] ; NewSet .)",
    "insertText": "Add(NewEntry)"
  },
  {
    "label": "ReindexFromLookup()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ReindexFromLookup(const TArray<int32> & InverseNewOrder)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<FIntVector>& Other) : TManagedArrayBase<FIntVector>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<FIntVector>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<FIntVector>&& Other)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(-1 <= this->operator[](Index)[i] && this->operator[](Index)[i] <= FinalSize)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "operator(Index) = FIntVector(INDEX_NONE)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<FIntVector2>& Other) : TManagedArrayBase<FIntVector2>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<FIntVector2>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<FIntVector2>&& Other)"
  },
  {
    "label": "Reindex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reindex(const TArray<int32>& Offsets, const int32& FinalSize, const TArray<int32>& SortedDeletionList, const TSet<int32>& DeletionSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "operator(Index) = FIntVector2(INDEX_NONE)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<TArray<FIntVector2>>& Other) : TManagedArrayBase<TArray<FIntVector2>>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<TArray<FIntVector2>>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<TArray<FIntVector2>>&& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FIntVector2& RemapVal = RemapValArray [ ArrayIndex ] ;)",
    "insertText": "for(int i = 0; i < 2; i++)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(-1 <= this->operator[](Index)[ArrayIndex][i] && this->operator[](Index)[ArrayIndex][i] <= FinalSize)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<FIntVector4>& Other) : TManagedArrayBase<FIntVector4>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<FIntVector4>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<FIntVector4>&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "operator(Index) = FIntVector4(INDEX_NONE)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TArray<TArray<int32>>& Other) : TManagedArrayBase<TArray<int32>>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<TArray<int32>>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<TArray<int32>>&& Other)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ensure(-1 <= this->operator[](Index)[ArrayIndex] && this->operator[](Index)[ArrayIndex] <= FinalSize)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TManagedArray(const TArray<TArray<FIntVector3>>& Other) : TManagedArrayBase<TArray<FIntVector3>>(Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TManagedArray(const TManagedArray<TArray<FIntVector3>>& Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TManagedArray(TManagedArray<TArray<FIntVector3>>&& Other)"
  },
  {
    "label": "TManagedArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TManagedArray(TArray<TArray<FIntVector3>>&& Other) : TManagedArrayBase<TArray<FIntVector3>>(MoveTemp(Other))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TManagedArray&)",
    "insertText": "operator(TManagedArray<TArray<FIntVector3>>&& Other)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const FIntVector3& RemapVal = RemapValArray [ ArrayIndex ] ;)",
    "insertText": "for(int32 i = 0; i < FIntVector3::Num(); ++i)"
  }
]