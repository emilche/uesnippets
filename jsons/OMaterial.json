[
  {
    "label": "ALEMBIC_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ALEMBIC_EXPORT"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Data"
  },
  {
    "label": "OMaterialSchema()",
    "kind": "Method",
    "detail": "Function (# ifndef Alembic_AbcMaterial_OMaterial_h # define Alembic_AbcMaterial_OMaterial_h # include<Alembic / Abc / All . h> # include<Alembic / Util / Export . h> # include<Alembic / AbcMaterial / SchemaInfoDeclarations . h> namespace Alembic { namespace AbcMaterial { namespace ALEMBIC_VERSION_NS { class ALEMBIC_EXPORT OMaterialSchema : public Abc::OSchema<MaterialSchemaInfo> { public : typedef OMaterialSchema this_type ;)",
    "insertText": "OMaterialSchema()"
  },
  {
    "label": "OMaterialSchema()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "OMaterialSchema(Alembic::AbcCoreAbstract::CompoundPropertyWriterPtr iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument(), const Abc::Argument &iArg3 = Abc::Argument())"
  },
  {
    "label": "OMaterialSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OMaterialSchema(Abc::OCompoundProperty iParent, const std::string &iName, const Abc::Argument &iArg0 = Abc::Argument(), const Abc::Argument &iArg1 = Abc::Argument(), const Abc::Argument &iArg2 = Abc::Argument())"
  },
  {
    "label": "setShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setShader(const std::string & iTarget, const std::string & iShaderType, const std::string & iShaderName)"
  },
  {
    "label": "getShaderParameters()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty)",
    "insertText": "getShaderParameters(const std::string & iTarget, const std::string & iShaderType)"
  },
  {
    "label": "addNetworkNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNetworkNode(const std::string & iNodeName, const std::string & iTarget, const std::string & iNodeType)"
  },
  {
    "label": "setNetworkNodeConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNetworkNodeConnection(const std::string & iNodeName, const std::string & iInputName, const std::string & iConnectedNodeName, const std::string & iConnectedOutputName)"
  },
  {
    "label": "getNetworkNodeParameters()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty)",
    "insertText": "getNetworkNodeParameters(const std::string & iNodeName)"
  },
  {
    "label": "setNetworkTerminal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNetworkTerminal(const std::string & iTarget, const std::string & iShaderType, const std::string & iNodeName, const std::string & iOutputName = \"\")"
  },
  {
    "label": "setNetworkInterfaceParameterMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNetworkInterfaceParameterMapping(const std::string & iInterfaceParamName, const std::string & iMapToNodeName, const std::string & iMapToParamName)"
  },
  {
    "label": "getNetworkInterfaceParameters()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty)",
    "insertText": "getNetworkInterfaceParameters()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "init()"
  },
  {
    "label": "createNodeCompound()",
    "kind": "Method",
    "detail": "Function (Abc::OCompoundProperty m_node ; void)",
    "insertText": "createNodeCompound()"
  }
]