[
  {
    "label": "MakePointer_",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MakePointer_"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "MakePointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MakePointer"
  },
  {
    "label": "eval",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "eval"
  },
  {
    "label": "nested",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "nested"
  },
  {
    "label": "TensorEvalToOp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TensorEvalToOp"
  },
  {
    "label": "TensorEvaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TensorEvaluator"
  },
  {
    "label": "TensorEvalToOp()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CXX11_TENSOR_TENSOR_EVAL_TO_H # define EIGEN_CXX11_TENSOR_TENSOR_EVAL_TO_H namespace Eigen { namespace internal { template<XprType,template<class> class MakePointer_> struct traits<TensorEvalToOp<XprType,MakePointer_>> { typedef XprType::Scalar Scalar ; typedef traits<XprType> XprTraits ; typedef XprTraits::StorageKind StorageKind ; typedef XprTraits::Index Index ; typedef XprType::Nested Nested ; typedef remove_reference<Nested>::type _Nested ; const int NumDimensions = XprTraits::NumDimensions ; const int Layout = XprTraits::Layout ; typedef MakePointer_<Scalar>::Type PointerType ; enum { Flags = 0 } ; template<class T> struct MakePointer { typedef MakePointer_<T> MakePointerT ; typedef MakePointerT::Type Type ; } ; } ; template<XprType,template<class> class MakePointer_> struct eval<TensorEvalToOp<XprType,MakePointer_>,Eigen::Dense> { typedef const TensorEvalToOp<XprType,MakePointer_>& type ; } ; template<XprType,template<class> class MakePointer_> struct nested<TensorEvalToOp<XprType,MakePointer_>,1,eval<TensorEvalToOp<XprType,MakePointer_>>::type> { typedef TensorEvalToOp<XprType,MakePointer_> type ; } ; } template<XprType,template<class> class MakePointer_> class TensorEvalToOp : public TensorBase<TensorEvalToOp<XprType,MakePointer_>,ReadOnlyAccessors> { public : typedef Eigen::internal::traits<TensorEvalToOp>::Scalar Scalar ; typedef Eigen::NumTraits<Scalar>::Real RealScalar ; typedef internal::remove_const<XprType::CoeffReturnType>::type CoeffReturnType ; typedef MakePointer_<CoeffReturnType>::Type PointerType ; typedef Eigen::internal::nested<TensorEvalToOp>::type Nested ; typedef Eigen::internal::traits<TensorEvalToOp>::StorageKind StorageKind ; typedef Eigen::internal::traits<TensorEvalToOp>::Index Index ; const int NumDims = Eigen::internal::traits<TensorEvalToOp>::NumDimensions ; EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE)",
    "insertText": "TensorEvalToOp(PointerType buffer, const XprType& expr) : m_xpr(expr), m_buffer(buffer)"
  },
  {
    "label": "expression()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const internal::remove_all<XprType::Nested>::type&)",
    "insertText": "expression()"
  },
  {
    "label": "TensorEvaluator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE ~)",
    "insertText": "TensorEvaluator()"
  },
  {
    "label": "dimensions()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const Dimensions&)",
    "insertText": "dimensions()"
  },
  {
    "label": "evalSubExprsIfNeeded()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE bool)",
    "insertText": "evalSubExprsIfNeeded(EvaluatorPointerType scalar)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(scalar)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(scalar == NULL)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (} # ifdef EIGEN_USE_THREADS template<EvalSubExprsCallback> EIGEN_STRONG_INLINE void)",
    "insertText": "evalSubExprsIfNeededAsync(EvaluatorPointerType scalar, EvalSubExprsCallback done)"
  },
  {
    "label": "evalSubExprsIfNeededAsync()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "evalSubExprsIfNeededAsync(m_buffer, std::move(done))"
  },
  {
    "label": "evalScalar()",
    "kind": "Method",
    "detail": "Function (} # endif EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "evalScalar(Index i)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (m_buffer [ i ] = m_impl .)",
    "insertText": "coeff(i)"
  },
  {
    "label": "evalPacket()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "evalPacket(Index i)"
  },
  {
    "label": "Aligned()",
    "kind": "Method",
    "detail": "Function (internal::pstoret<CoeffReturnType,PacketReturnType,)",
    "insertText": "Aligned(m_buffer + i, m_impl.template packet<TensorEvaluator<ArgType, Device>::IsAligned ? Aligned : Unaligned>(i))"
  },
  {
    "label": "getResourceRequirements()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE internal::TensorBlockResourceRequirements)",
    "insertText": "getResourceRequirements()"
  },
  {
    "label": "evalBlock()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE void)",
    "insertText": "evalBlock(TensorBlockDesc& desc, TensorBlockScratch& scratch)"
  },
  {
    "label": "Layout()",
    "kind": "Method",
    "detail": "Function (desc . template AddDestinationBuffer<)",
    "insertText": "Layout(m_buffer + desc.offset(), internal::strides<Layout>(m_impl.dimensions()))"
  },
  {
    "label": "block()",
    "kind": "Method",
    "detail": "Function (ArgTensorBlock block = m_impl .)",
    "insertText": "block(desc, scratch, true)"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Run(TensorBlockAssignment::target( desc.dimensions(), internal::strides<Layout>(m_impl.dimensions()), m_buffer, desc.offset()), block.expr())"
  },
  {
    "label": "cleanup()",
    "kind": "Method",
    "detail": "Function (} block .)",
    "insertText": "cleanup()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE CoeffReturnType)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "costPerCoeff()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE TensorOpCost)",
    "insertText": "costPerCoeff(bool vectorized)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EvaluatorPointerType)",
    "insertText": "data()"
  },
  {
    "label": "bind()",
    "kind": "Method",
    "detail": "Function (m_impl .)",
    "insertText": "bind(cgh)"
  }
]