[
  {
    "label": "FPBDJointConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraints"
  },
  {
    "label": "FPBDJointConstraintHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointConstraintHandle"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FJointConstants",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJointConstants"
  },
  {
    "label": "FPBDJointSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointSettings"
  },
  {
    "label": "FPBDJointSolverSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDJointSolverSettings"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Chaos / Core . h \" # include \" Chaos / Transform . h \" # include \" Chaos / Vector . h \" namespace Chaos { class FPBDJointConstraints ; class FPBDJointConstraintHandle ; using FJointPreApplyCallback = TFunction<)",
    "insertText": "void(const FReal Dt, const TArray<FPBDJointConstraintHandle*>& InConstraintHandles)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FJointBreakCallback = TFunction<)",
    "insertText": "void(FPBDJointConstraintHandle * ConstraintHandle)"
  },
  {
    "label": "TwistAxis()",
    "kind": "Method",
    "detail": "Function (enum class EJointMotionType : int32 { Free,Limited,Locked,} ; enum class EJointForceMode : int32 { Acceleration,Force,} ; enum class EPlasticityType : int32 { Free,Shrink,Grow,} ; enum class EJointAngularConstraintIndex : int32 { Twist,Swing2,Swing1,} ; enum class EJointCylindricalPositionConstraintType : int32 { Axial,Radial } ; struct FJointConstants { const FVec3)",
    "insertText": "TwistAxis()"
  },
  {
    "label": "Swing1Axis()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "Swing1Axis()"
  },
  {
    "label": "Swing2Axis()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "Swing2Axis()"
  },
  {
    "label": "Axis()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "Axis(const EJointAngularConstraintIndex ConstraintIndex)"
  },
  {
    "label": "SwingAxis()",
    "kind": "Method",
    "detail": "Function (} } const FVec3)",
    "insertText": "SwingAxis(const EJointAngularConstraintIndex ConstraintIndex)"
  },
  {
    "label": "OtherSwingAxis()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "OtherSwingAxis(const EJointAngularConstraintIndex ConstraintIndex)"
  },
  {
    "label": "AxisIndex()",
    "kind": "Method",
    "detail": "Function (} const int32)",
    "insertText": "AxisIndex(const EJointAngularConstraintIndex ConstraintIndex)"
  },
  {
    "label": "Sanitize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sanitize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FPBDJointSettings& Other)"
  },
  {
    "label": "FPBDJointSolverSettings()",
    "kind": "Method",
    "detail": "Function (} FTransformPair ConnectorTransforms ; FReal Stiffness ; FReal LinearProjection ; FReal AngularProjection ; FReal ShockPropagation ; FReal TeleportDistance ; FReal TeleportAngle ; FReal ParentInvMassScale ; bool bCollisionEnabled ; bool bProjectionEnabled ; bool bShockPropagationEnabled ; bool bMassConditioningEnabled ; TVector<EJointMotionType,3> LinearMotionTypes ; FReal LinearLimit ; TVector<EJointMotionType,3> AngularMotionTypes ; FVec3 AngularLimits ; bool bSoftLinearLimitsEnabled ; bool bSoftTwistLimitsEnabled ; bool bSoftSwingLimitsEnabled ; EJointForceMode LinearSoftForceMode ; EJointForceMode AngularSoftForceMode ; FReal SoftLinearStiffness ; FReal SoftLinearDamping ; FReal SoftTwistStiffness ; FReal SoftTwistDamping ; FReal SoftSwingStiffness ; FReal SoftSwingDamping ; FReal LinearRestitution ; FReal TwistRestitution ; FReal SwingRestitution ; FReal LinearContactDistance ; FReal TwistContactDistance ; FReal SwingContactDistance ; FVec3 LinearDrivePositionTarget ; FVec3 LinearDriveVelocityTarget ; TVector<bool,3> bLinearPositionDriveEnabled ; TVector<bool,3> bLinearVelocityDriveEnabled ; EJointForceMode LinearDriveForceMode ; FVec3 LinearDriveStiffness ; FVec3 LinearDriveDamping ; FVec3 LinearDriveMaxForce ; FRotation3 AngularDrivePositionTarget ; FVec3 AngularDriveVelocityTarget ; bool bAngularSLerpPositionDriveEnabled ; bool bAngularSLerpVelocityDriveEnabled ; bool bAngularTwistPositionDriveEnabled ; bool bAngularTwistVelocityDriveEnabled ; bool bAngularSwingPositionDriveEnabled ; bool bAngularSwingVelocityDriveEnabled ; EJointForceMode AngularDriveForceMode ; FVec3 AngularDriveStiffness ; FVec3 AngularDriveDamping ; FVec3 AngularDriveMaxTorque ; FReal LinearBreakForce ; FReal LinearViolationCallbackThreshold ; FReal LinearPlasticityLimit ; EPlasticityType LinearPlasticityType ; FReal LinearPlasticityInitialDistanceSquared ; FReal AngularBreakTorque ; FReal AngularViolationCallbackThreshold ; FReal AngularPlasticityLimit ; FReal ContactTransferScale ; void* UserData ; } ; class FPBDJointSolverSettings { public :)",
    "insertText": "FPBDJointSolverSettings()"
  }
]