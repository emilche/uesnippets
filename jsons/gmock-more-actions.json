[
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (# ifndef GMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_ # define GMOCK_INCLUDE_GMOCK_GMOCK_MORE_ACTIONS_H_ # include<algorithm> # include<type_traits> # include \" gmock / gmock - generated - actions . h \" namespace testing { namespace internal { template<InputIterator,OutputIterator> OutputIterator)",
    "insertText": "CopyElements(InputIterator first, InputIterator last, OutputIterator output)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (* output =* first ; } return output ; } } # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) # pragma warning(disable:4100) #endif ACTION_TEMPLATE(ReturnArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(SaveArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(pointer))"
  },
  {
    "label": "k()",
    "kind": "Method",
    "detail": "Function (* pointer =::std::get<)",
    "insertText": "k(args)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(SaveArgPointee, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(pointer))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(SetArgReferee, HAS_1_TEMPLATE_PARAMS(int, k), AND_1_VALUE_PARAMS(value))"
  },
  {
    "label": "GTEST_COMPILE_ASSERT_()",
    "kind": "Method",
    "detail": "Function (typedef::std::tuple_element<k,args_type>::type argk_type ;)",
    "insertText": "GTEST_COMPILE_ASSERT_(std::is_reference<argk_type>::value, SetArgReferee_must_be_used_with_a_reference_argument)"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_TEMPLATE(SetArrayArgument, HAS_1_TEMPLATE_PARAMS(int, k), AND_2_VALUE_PARAMS(first, last))"
  },
  {
    "label": "CopyElements()",
    "kind": "Method",
    "detail": "Function (# ifdef _MSC_VER)",
    "insertText": "CopyElements(first, last, ::std::get<k>(args))"
  },
  {
    "label": "copy()",
    "kind": "Method",
    "detail": "Function (# else::)",
    "insertText": "copy(first, last, ::std::get<k>(args))"
  },
  {
    "label": "ACTION_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (# endif })",
    "insertText": "ACTION_TEMPLATE(DeleteArg, HAS_1_TEMPLATE_PARAMS(int, k), AND_0_VALUE_PARAMS())"
  },
  {
    "label": "ACTION_P()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ACTION_P(ReturnPointee, pointer)"
  }
]