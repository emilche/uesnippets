[
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FVolumetricLightmapDataLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapDataLayer"
  },
  {
    "label": "FVolumetricLightmapBasicBrickDataLayers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricLightmapBasicBrickDataLayers"
  },
  {
    "label": "FVolumetricLightmapBrickData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapBrickData"
  },
  {
    "label": "FPrecomputedVolumetricLightmapData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmapData"
  },
  {
    "label": "FPrecomputedVolumetricLightmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmap"
  },
  {
    "label": "FPrecomputedVolumetricLightmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmap"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "FRemoveSubLevelBricksCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRemoveSubLevelBricksCS"
  },
  {
    "label": "FCopyResidentBricksCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyResidentBricksCS"
  },
  {
    "label": "FHasSkyBentNormal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHasSkyBentNormal"
  },
  {
    "label": "FCopyResidentBrickSHCoefficientsCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyResidentBrickSHCoefficientsCS"
  },
  {
    "label": "FPatchIndirectionTextureCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchIndirectionTextureCS"
  },
  {
    "label": "FMoveWholeIndirectionTextureCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMoveWholeIndirectionTextureCS"
  },
  {
    "label": "FVolumetricLightmapBrickTextureSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricLightmapBrickTextureSet"
  },
  {
    "label": "VolumetricLightmapBrickDataType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VolumetricLightmapBrickDataType"
  },
  {
    "label": "FVolumetricLightmapBrickAtlas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapBrickAtlas"
  },
  {
    "label": "Allocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Allocation"
  },
  {
    "label": "FPrecomputedVolumetricLightmapData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmapData"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTexture(FIntVector Dimensions)"
  },
  {
    "label": "CreateTargetTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTargetTexture(FIntVector Dimensions)"
  },
  {
    "label": "CreateUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUAV(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "CreateUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUAV()"
  },
  {
    "label": "FPrecomputedVolumetricLightmapData()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPrecomputedVolumetricLightmapData()"
  },
  {
    "label": "InitializeOnImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOnImport(const FBox& NewBounds, int32 InBrickSize)"
  },
  {
    "label": "FinalizeImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeImport()"
  },
  {
    "label": "InitRHIForSubLevelResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHIForSubLevelResources()"
  },
  {
    "label": "ReleaseRHIForSubLevelResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHIForSubLevelResources()"
  },
  {
    "label": "HandleDataMovementInAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDataMovementInAtlas(int32 OldOffset, int32 NewOffset)"
  },
  {
    "label": "AddToSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSceneData(FPrecomputedVolumetricLightmapData* SceneData)"
  },
  {
    "label": "RemoveFromSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromSceneData(FPrecomputedVolumetricLightmapData* SceneData, int32 PersistentLevelBrickDataBaseOffset)"
  },
  {
    "label": "FPrecomputedVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FPrecomputedVolumetricLightmap()"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene(class FSceneInterface* Scene, class UMapBuildDataRegistry* Registry, FGuid LevelBuildDataId, bool bIsPersistentLevel)"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene(class FSceneInterface* Scene, class UMapBuildDataRegistry* Registry, FPrecomputedVolumetricLightmapData* NewData, bool bIsPersistentLevel)"
  },
  {
    "label": "RemoveFromScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromScene(FSceneInterface* Scene)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(FRHICommandListBase& RHICmdList, FPrecomputedVolumetricLightmapData* NewData, FSceneInterface* Scene)"
  },
  {
    "label": "ApplyWorldOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyWorldOffset(const FVector& InOffset)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLinearColor(InColor)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "T(InColor)"
  },
  {
    "label": "FFloat3Packed()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FFloat3Packed(InColor)"
  },
  {
    "label": "FFixedRGBASigned8()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FFixedRGBASigned8(InColor)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FLinearColor(InColor * Scale, 0, 0, 0)"
  },
  {
    "label": "FilterNeighborSize()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "FilterNeighborSize(CoordinateFraction.X > GPointFilteringThreshold ? 2 : 1, CoordinateFraction.Y > GPointFilteringThreshold ? 2 : 1, CoordinateFraction.Z > GPointFilteringThreshold ? 2 : 1)"
  },
  {
    "label": "CoordinateInt000()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "CoordinateInt000(Coordinate)"
  },
  {
    "label": "FilteredValue()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "FilteredValue(0, 0, 0, 0)"
  },
  {
    "label": "FilterWeight()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FilterWeight(1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "FilterNeighborSize()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "FilterNeighborSize(CoordinateFraction.X > GPointFilteringThreshold ? 2 : 1, CoordinateFraction.Y > GPointFilteringThreshold ? 2 : 1, CoordinateFraction.Z > GPointFilteringThreshold ? 2 : 1)"
  },
  {
    "label": "CoordinateInt000()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "CoordinateInt000(Coordinate)"
  },
  {
    "label": "ComputeIndirectionCoordinate()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeIndirectionCoordinate(FVector LookupPosition, const FBox& VolumeBounds, FIntVector IndirectionTextureDimensions)"
  },
  {
    "label": "SampleIndirectionTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleIndirectionTexture(\n\tFVector IndirectionDataSourceCoordinate,\n\tFIntVector IndirectionTextureDimensions,\n\tconst uint8* IndirectionTextureData,\n\tFIntVector& OutIndirectionBrickOffset,\n\tint32& OutIndirectionBrickSize)"
  },
  {
    "label": "SampleIndirectionTextureWithSubLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleIndirectionTextureWithSubLevel(\n\tFVector IndirectionDataSourceCoordinate,\n\tFIntVector IndirectionTextureDimensions,\n\tconst uint8* IndirectionTextureData,\n\tconst TArray<uint8>& CPUSubLevelIndirectionTable,\n\tFIntVector& OutIndirectionBrickOffset,\n\tint32& OutIndirectionBrickSize,\n\tint32& OutSubLevelIndex)"
  },
  {
    "label": "ComputeBrickTextureCoordinate()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeBrickTextureCoordinate(\n\tFVector IndirectionDataSourceCoordinate,\n\tFIntVector IndirectionBrickOffset,\n\tint32 IndirectionBrickSize,\n\tint32 BrickSize)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "FVolumetricLightmapBrickAtlas()",
    "kind": "Method",
    "detail": "Function (ENGINE_API)",
    "insertText": "FVolumetricLightmapBrickAtlas()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(int32 Index, FPrecomputedVolumetricLightmapData* Data)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FPrecomputedVolumetricLightmapData* Data)"
  }
]