[
  {
    "label": "FSceneInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneInterface"
  },
  {
    "label": "FVolumetricLightmapDataLayer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapDataLayer"
  },
  {
    "label": "FVolumetricLightmapBasicBrickDataLayers",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricLightmapBasicBrickDataLayers"
  },
  {
    "label": "FVolumetricLightmapBrickData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapBrickData"
  },
  {
    "label": "FPrecomputedVolumetricLightmapData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmapData"
  },
  {
    "label": "FPrecomputedVolumetricLightmap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrecomputedVolumetricLightmap"
  },
  {
    "label": "UMapBuildDataRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMapBuildDataRegistry"
  },
  {
    "label": "FRemoveSubLevelBricksCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRemoveSubLevelBricksCS"
  },
  {
    "label": "FCopyResidentBricksCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyResidentBricksCS"
  },
  {
    "label": "FHasSkyBentNormal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHasSkyBentNormal"
  },
  {
    "label": "FCopyResidentBrickSHCoefficientsCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCopyResidentBrickSHCoefficientsCS"
  },
  {
    "label": "FPatchIndirectionTextureCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPatchIndirectionTextureCS"
  },
  {
    "label": "FMoveWholeIndirectionTextureCS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMoveWholeIndirectionTextureCS"
  },
  {
    "label": "FVolumetricLightmapBrickTextureSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVolumetricLightmapBrickTextureSet"
  },
  {
    "label": "VolumetricLightmapBrickDataType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VolumetricLightmapBrickDataType"
  },
  {
    "label": "FVolumetricLightmapBrickAtlas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumetricLightmapBrickAtlas"
  },
  {
    "label": "Allocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Allocation"
  },
  {
    "label": "FVolumetricLightmapDataLayer()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / WeakObjectPtr . h \" # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Math / SHMath . h \" # include \" Containers / DynamicRHIResourceArray . h \" # include \" PixelFormat . h \" # include \" Math / PackedVector . h \" # include \" RHI . h \" # include \" RenderResource . h \" # include \" ShaderParameterStruct . h \" # include \" GlobalShader . h \" # include \" UObject / WeakObjectPtr . h \" class FSceneInterface ; class FVolumetricLightmapDataLayer : public FResourceBulkDataInterface { public :)",
    "insertText": "FVolumetricLightmapDataLayer() : DataSize(0), Format(PF_Unknown), bNeedsCPUAccess(false)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FVolumetricLightmapDataLayer& Volume)"
  },
  {
    "label": "GetResourceBulkData()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "GetResourceBulkData()"
  },
  {
    "label": "GetResourceBulkDataSize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetResourceBulkDataSize()"
  },
  {
    "label": "Discard()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Discard()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Empty()"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Resize(int32 NewSize)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "Empty(NewSize)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "AddZeroed(NewSize)"
  },
  {
    "label": "CreateTexture()",
    "kind": "Method",
    "detail": "Function (DataSize = NewSize ; } void)",
    "insertText": "CreateTexture(FIntVector Dimensions)"
  },
  {
    "label": "CreateTargetTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTargetTexture(FIntVector Dimensions)"
  },
  {
    "label": "CreateUAV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateUAV(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "GetMinimumVoxelSize()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> Data ; int32 DataSize ; EPixelFormat Format ; FTextureRHIRef Texture ; FUnorderedAccessViewRHIRef UAV ; bool bNeedsCPUAccess ; } ; struct FVolumetricLightmapBasicBrickDataLayers { FVolumetricLightmapDataLayer AmbientVector ; FVolumetricLightmapDataLayer SHCoefficients [ 6 ] ; FVolumetricLightmapDataLayer SkyBentNormal ; FVolumetricLightmapDataLayer DirectionalLightShadowing ; } ; class FVolumetricLightmapBrickData : public FVolumetricLightmapBasicBrickDataLayers { public : int32)",
    "insertText": "GetMinimumVoxelSize()"
  },
  {
    "label": "ReleaseRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHI()"
  },
  {
    "label": "SafeRelease()",
    "kind": "Method",
    "detail": "Function (AmbientVector . Texture .)",
    "insertText": "SafeRelease()"
  },
  {
    "label": "GetAllocatedBytes()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedBytes()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SIZE_T NumBytes = AmbientVector . DataSize + SkyBentNormal . DataSize + DirectionalLightShadowing . DataSize ;)",
    "insertText": "for(int32 i = 0; i < UE_ARRAY_COUNT(SHCoefficients); i++)"
  },
  {
    "label": "SetNeedsCPUAccess()",
    "kind": "Method",
    "detail": "Function (NumBytes + = SHCoefficients [ i ] . DataSize ; } return NumBytes ; } void)",
    "insertText": "SetNeedsCPUAccess(bool InAccess)"
  },
  {
    "label": "FPrecomputedVolumetricLightmapData()",
    "kind": "Method",
    "detail": "Function (SHCoefficients [ i ] . bNeedsCPUAccess = InAccess ; } SkyBentNormal . bNeedsCPUAccess = InAccess ; DirectionalLightShadowing . bNeedsCPUAccess = InAccess ; } } ; class FPrecomputedVolumetricLightmapData : public FRenderResource { public :)",
    "insertText": "FPrecomputedVolumetricLightmapData()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPrecomputedVolumetricLightmapData& Volume)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FPrecomputedVolumetricLightmapData*& Volume)"
  },
  {
    "label": "InitializeOnImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeOnImport(const FBox& NewBounds, int32 InBrickSize)"
  },
  {
    "label": "FinalizeImport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeImport()"
  },
  {
    "label": "InitRHI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHI(FRHICommandListBase& RHICmdList)"
  },
  {
    "label": "InitRHIForSubLevelResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRHIForSubLevelResources()"
  },
  {
    "label": "ReleaseRHIForSubLevelResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseRHIForSubLevelResources()"
  },
  {
    "label": "HandleDataMovementInAtlas()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDataMovementInAtlas(int32 OldOffset, int32 NewOffset)"
  },
  {
    "label": "AddToSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSceneData(FPrecomputedVolumetricLightmapData* SceneData)"
  },
  {
    "label": "RemoveFromSceneData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromSceneData(FPrecomputedVolumetricLightmapData* SceneData, int32 PersistentLevelBrickDataBaseOffset)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (const FBox&)",
    "insertText": "GetBounds()"
  },
  {
    "label": "FPrecomputedVolumetricLightmap()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FPrecomputedVolumetricLightmap()"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene(class FSceneInterface* Scene, class UMapBuildDataRegistry* Registry, FGuid LevelBuildDataId, bool bIsPersistentLevel)"
  },
  {
    "label": "AddToScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToScene(class FSceneInterface* Scene, class UMapBuildDataRegistry* Registry, FPrecomputedVolumetricLightmapData* NewData, bool bIsPersistentLevel)"
  },
  {
    "label": "RemoveFromScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveFromScene(FSceneInterface* Scene)"
  },
  {
    "label": "SetData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetData(FRHICommandListBase& RHICmdList, FPrecomputedVolumetricLightmapData* NewData, FSceneInterface* Scene)"
  },
  {
    "label": "IsAddedToScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAddedToScene()"
  },
  {
    "label": "ConvertToLinearColor()",
    "kind": "Method",
    "detail": "Function (FPrecomputedVolumetricLightmapData* Data ; private : bool bAddedToScene ; TWeakObjectPtr<UMapBuildDataRegistry> SourceRegistry ; FVector WorldOriginOffset ; } ; template<T> FLinearColor)",
    "insertText": "ConvertToLinearColor(T InColor)"
  },
  {
    "label": "ConvertFromLinearColor()",
    "kind": "Method",
    "detail": "Function (} ; template<T> T)",
    "insertText": "ConvertFromLinearColor(const FLinearColor& InColor)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (} ; template<> FLinearColor ConvertToLinearColor<)",
    "insertText": "FColor(FColor InColor)"
  },
  {
    "label": "FColor()",
    "kind": "Method",
    "detail": "Function (} ; template<> FColor ConvertFromLinearColor<)",
    "insertText": "FColor(const FLinearColor& InColor)"
  },
  {
    "label": "FFloat3Packed()",
    "kind": "Method",
    "detail": "Function (} ; template<> FLinearColor ConvertToLinearColor<)",
    "insertText": "FFloat3Packed(FFloat3Packed InColor)"
  },
  {
    "label": "FFloat3Packed()",
    "kind": "Method",
    "detail": "Function (} ; template<> FFloat3Packed ConvertFromLinearColor<)",
    "insertText": "FFloat3Packed(const FLinearColor& InColor)"
  },
  {
    "label": "FFixedRGBASigned8()",
    "kind": "Method",
    "detail": "Function (} ; template<> FLinearColor ConvertToLinearColor<)",
    "insertText": "FFixedRGBASigned8(FFixedRGBASigned8 InColor)"
  },
  {
    "label": "FFixedRGBASigned8()",
    "kind": "Method",
    "detail": "Function (} ; template<> FFixedRGBASigned8 ConvertFromLinearColor<)",
    "insertText": "FFixedRGBASigned8(const FLinearColor& InColor)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} ; template<> uint8 ConvertFromLinearColor<)",
    "insertText": "uint8(const FLinearColor& InColor)"
  },
  {
    "label": "uint8()",
    "kind": "Method",
    "detail": "Function (} ; template<> FLinearColor ConvertToLinearColor<)",
    "insertText": "uint8(uint8 InColor)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (const float Scale = 1 . 0 f / MAX_uint8 ; return)",
    "insertText": "FLinearColor(InColor * Scale, 0, 0, 0)"
  },
  {
    "label": "FilteredVolumeLookup()",
    "kind": "Method",
    "detail": "Function (} ; const float GPointFilteringThreshold = . 0 0 1 f ; template<VoxelDataType> FLinearColor)",
    "insertText": "FilteredVolumeLookup(FVector Coordinate, FIntVector DataDimensions, const VoxelDataType* Data)"
  },
  {
    "label": "CoordinateFraction()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "CoordinateFraction(FMath::Frac(Coordinate.X), FMath::Frac(Coordinate.Y), FMath::Frac(Coordinate.Z))"
  },
  {
    "label": "FilterNeighborSize()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "FilterNeighborSize(CoordinateFraction.X > GPointFilteringThreshold ? 2 : 1, CoordinateFraction.Y > GPointFilteringThreshold ? 2 : 1, CoordinateFraction.Z > GPointFilteringThreshold ? 2 : 1)"
  },
  {
    "label": "CoordinateInt000()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "CoordinateInt000(Coordinate)"
  },
  {
    "label": "FilteredValue()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "FilteredValue(0, 0, 0, 0)"
  },
  {
    "label": "FilterWeight()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "FilterWeight(1.0f, 1.0f, 1.0f)"
  },
  {
    "label": "Z()",
    "kind": "Method",
    "detail": "Function (FilterWeight .)",
    "insertText": "Z(Z == 0 ? 1.0f - CoordinateFraction.Z : CoordinateFraction.Z)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 Y = 0; Y < FilterNeighborSize.Y; Y++)"
  },
  {
    "label": "Y()",
    "kind": "Method",
    "detail": "Function (FilterWeight .)",
    "insertText": "Y(Y == 0 ? 1.0f - CoordinateFraction.Y : CoordinateFraction.Y)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "for(int32 X = 0; X < FilterNeighborSize.X; X++)"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (FilterWeight .)",
    "insertText": "X(X == 0 ? 1.0f - CoordinateFraction.X : CoordinateFraction.X)"
  },
  {
    "label": "FIntVector()",
    "kind": "Method",
    "detail": "Function (} FIntVector CoordinateInt = CoordinateInt000 +)",
    "insertText": "FIntVector(X, Y, Z)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (CoordinateInt . X =)",
    "insertText": "Clamp(CoordinateInt.X, 0, DataDimensions.X - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (CoordinateInt . Y =)",
    "insertText": "Clamp(CoordinateInt.Y, 0, DataDimensions.Y - 1)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (CoordinateInt . Z =)",
    "insertText": "Clamp(CoordinateInt.Z, 0, DataDimensions.Z - 1)"
  },
  {
    "label": "LinearIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "LinearIndex((CoordinateInt.Z * DataDimensions.Y) + CoordinateInt.Y)"
  },
  {
    "label": "VoxelDataType()",
    "kind": "Method",
    "detail": "Function (FilteredValue + = ConvertToLinearColor<)",
    "insertText": "VoxelDataType(Data[LinearIndex])"
  },
  {
    "label": "FilteredVolumeLookupReconverted()",
    "kind": "Method",
    "detail": "Function (} } } return FilteredValue ; } template<VoxelDataType> VoxelDataType)",
    "insertText": "FilteredVolumeLookupReconverted(FVector Coordinate, FIntVector DataDimensions, const VoxelDataType* Data)"
  },
  {
    "label": "LinearIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "LinearIndex((CoordinateInt000.Z * DataDimensions.Y) + CoordinateInt000.Y)"
  },
  {
    "label": "NearestVolumeLookup()",
    "kind": "Method",
    "detail": "Function (} } template<VoxelDataType> VoxelDataType)",
    "insertText": "NearestVolumeLookup(FVector Coordinate, FIntVector DataDimensions, const VoxelDataType* Data)"
  },
  {
    "label": "NearestCoordinateInt()",
    "kind": "Method",
    "detail": "Function (FIntVector)",
    "insertText": "NearestCoordinateInt(FMath::RoundToInt(Coordinate.X), FMath::RoundToInt(Coordinate.Y), FMath::RoundToInt(Coordinate.Z))"
  },
  {
    "label": "LinearIndex()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "LinearIndex((NearestCoordinateInt.Z * DataDimensions.Y) + NearestCoordinateInt.Y)"
  },
  {
    "label": "SampleIndirectionTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleIndirectionTexture(FVector IndirectionDataSourceCoordinate, FIntVector IndirectionTextureDimensions, const uint8* IndirectionTextureData, FIntVector& OutIndirectionBrickOffset, int32& OutIndirectionBrickSize)"
  },
  {
    "label": "SampleIndirectionTextureWithSubLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SampleIndirectionTextureWithSubLevel(FVector IndirectionDataSourceCoordinate, FIntVector IndirectionTextureDimensions, const uint8* IndirectionTextureData, const TArray<uint8>& CPUSubLevelIndirectionTable, FIntVector& OutIndirectionBrickOffset, int32& OutIndirectionBrickSize, int32& OutSubLevelIndex)"
  },
  {
    "label": "ComputeBrickTextureCoordinate()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputeBrickTextureCoordinate(FVector IndirectionDataSourceCoordinate, FIntVector IndirectionBrickOffset, int32 IndirectionBrickSize, int32 BrickSize)"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FRemoveSubLevelBricksCS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FRemoveSubLevelBricksCS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FRemoveSubLevelBricksCS, FGlobalShader)"
  },
  {
    "label": "ShouldCompilePermutation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldCompilePermutation(const FGlobalShaderPermutationParameters& Parameters)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(uint32, NumBricks) SHADER_PARAMETER(uint32, PersistentLevelBrickDataBaseOffset) SHADER_PARAMETER_SRV(Buffer<uint>, SubLevelBrickPositions) SHADER_PARAMETER_SRV(Buffer<uint4>, IndirectionTextureOriginalValues) SHADER_PARAMETER_UAV(RWTexture3D<uint4>, IndirectionTexture) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FCopyResidentBricksCS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FCopyResidentBricksCS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FCopyResidentBricksCS, FGlobalShader)"
  },
  {
    "label": "SHADER_PERMUTATION_BOOL()",
    "kind": "Method",
    "detail": "Function (class FHasSkyBentNormal :)",
    "insertText": "SHADER_PERMUTATION_BOOL(\"HAS_SKY_BENT_NORMAL\")"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(uint32, StartPosInOldVolume) SHADER_PARAMETER(uint32, StartPosInNewVolume) SHADER_PARAMETER_TEXTURE(Texture3D, AmbientVector) SHADER_PARAMETER_TEXTURE(Texture3D, SkyBentNormal) SHADER_PARAMETER_TEXTURE(Texture3D, DirectionalLightShadowing) SHADER_PARAMETER_UAV(RWTexture3D<float3>, OutAmbientVector) SHADER_PARAMETER_UAV(RWTexture3D<float4>, OutSkyBentNormal) SHADER_PARAMETER_UAV(RWTexture3D<float>, OutDirectionalLightShadowing) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FCopyResidentBrickSHCoefficientsCS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FCopyResidentBrickSHCoefficientsCS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FCopyResidentBrickSHCoefficientsCS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(uint32, StartPosInOldVolume) SHADER_PARAMETER(uint32, StartPosInNewVolume) SHADER_PARAMETER_TEXTURE(Texture3D, SHCoefficients) SHADER_PARAMETER_UAV(RWTexture3D<float4>, OutSHCoefficients) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FPatchIndirectionTextureCS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FPatchIndirectionTextureCS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FPatchIndirectionTextureCS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(uint32, NumBricks) SHADER_PARAMETER(uint32, StartPosInNewVolume) SHADER_PARAMETER_SRV(Buffer<uint>, SubLevelBrickPositions) SHADER_PARAMETER_UAV(RWTexture3D<uint4>, IndirectionTexture) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "DECLARE_GLOBAL_SHADER()",
    "kind": "Method",
    "detail": "Function (class FMoveWholeIndirectionTextureCS : public FGlobalShader {)",
    "insertText": "DECLARE_GLOBAL_SHADER(FMoveWholeIndirectionTextureCS)"
  },
  {
    "label": "SHADER_USE_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SHADER_USE_PARAMETER_STRUCT(FMoveWholeIndirectionTextureCS, FGlobalShader)"
  },
  {
    "label": "BEGIN_SHADER_PARAMETER_STRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BEGIN_SHADER_PARAMETER_STRUCT(FParameters, ) SHADER_PARAMETER(uint32, NumBricks) SHADER_PARAMETER(uint32, StartPosInOldVolume) SHADER_PARAMETER(uint32, StartPosInNewVolume) SHADER_PARAMETER_TEXTURE(Texture3D<uint4>, OldIndirectionTexture) SHADER_PARAMETER_UAV(RWTexture3D<uint4>, IndirectionTexture) END_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (struct FVolumetricLightmapBrickTextureSet : public FVolumetricLightmapBasicBrickDataLayers { FIntVector BrickDataDimensions ; template<class VolumetricLightmapBrickDataType> void)",
    "insertText": "Initialize(FIntVector InBrickDataDimensions, VolumetricLightmapBrickDataType& BrickData)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FRHICommandListBase& RHICmdList =)",
    "insertText": "Get()"
  },
  {
    "label": "CreateTargetTexture()",
    "kind": "Method",
    "detail": "Function (SHCoefficients [ i ] . Format = BrickData . SHCoefficients [ i ] . Format ; } AmbientVector .)",
    "insertText": "CreateTargetTexture(BrickDataDimensions)"
  },
  {
    "label": "CreateUAV()",
    "kind": "Method",
    "detail": "Function (AmbientVector .)",
    "insertText": "CreateUAV(RHICmdList)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(BrickData.SkyBentNormal.Texture.IsValid())"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Release()"
  },
  {
    "label": "FVolumetricLightmapBrickAtlas()",
    "kind": "Method",
    "detail": "Function (} } ; class FVolumetricLightmapBrickAtlas : public FRenderResource { public :)",
    "insertText": "FVolumetricLightmapBrickAtlas()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (struct Allocation { class FPrecomputedVolumetricLightmapData* Data = nullptr ; int32 Size = 0 ; int32 StartOffset = 0 ; } ; TArray<Allocation> Allocations ; void)",
    "insertText": "Insert(int32 Index, FPrecomputedVolumetricLightmapData* Data)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remove(FPrecomputedVolumetricLightmapData* Data)"
  }
]