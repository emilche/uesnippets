[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FVisibleLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightInfo"
  },
  {
    "label": "USkyAtmosphereComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyAtmosphereComponent"
  },
  {
    "label": "FSkyAtmosphereSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereSceneProxy"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FSkyAtmosphereInternalCommonParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereInternalCommonParameters"
  },
  {
    "label": "FVolumeShadowingShaderParametersGlobal0",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeShadowingShaderParametersGlobal0"
  },
  {
    "label": "FVolumeShadowingShaderParametersGlobal1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeShadowingShaderParametersGlobal1"
  },
  {
    "label": "FScreenPassTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassTexture"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "and",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "and"
  },
  {
    "label": "FSkyAtmosphereViewSharedUniformShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkyAtmosphereViewSharedUniformShaderParameters"
  },
  {
    "label": "FSkyAtmosphereRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkyAtmosphereRenderContext"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereRenderSceneInfo"
  },
  {
    "label": "FSkyAtmospherePendingRDGResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmospherePendingRDGResources"
  },
  {
    "label": "FViewRDGResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewRDGResources"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "SkyAtmosphereLightShadowData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SkyAtmosphereLightShadowData"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "FSkyAtmosphereRenderSceneInfo(FSkyAtmosphereSceneProxy& SkyAtmosphereSceneProxy)"
  },
  {
    "label": "CreateDistantSkyLightLutBufferAndSRV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDistantSkyLightLutBufferAndSRV(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetSkyAtmospherePassLocation()",
    "kind": "Method",
    "detail": "Function (ESkyAtmospherePassLocation)",
    "insertText": "GetSkyAtmospherePassLocation()"
  },
  {
    "label": "ShouldRenderSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSkyAtmosphere(const FScene* Scene, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "InitSkyAtmosphereForScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSkyAtmosphereForScene(FRHICommandListImmediate& RHICmdList, FRDGBuilder& GraphBuilder, FScene* Scene)"
  },
  {
    "label": "InitSkyAtmosphereForView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSkyAtmosphereForView(FRHICommandListImmediate& RHICmdList, const FScene* Scene, FViewInfo& View)"
  },
  {
    "label": "SetupSkyAtmosphereViewSharedUniformShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSkyAtmosphereViewSharedUniformShaderParameters(const class FViewInfo& View, const FSkyAtmosphereSceneProxy& SkyAtmosphereProxy, FSkyAtmosphereViewSharedUniformShaderParameters& OutParameters)"
  },
  {
    "label": "PrepareSunLightProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareSunLightProxy(const FSkyAtmosphereRenderSceneInfo& SkyAtmosphere, uint32 AtmosphereLightIndex, FLightSceneInfo& AtmosphereLight)"
  },
  {
    "label": "IsLightAtmospherePerPixelTransmittanceEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightAtmospherePerPixelTransmittanceEnabled(const FScene* Scene, const FViewInfo& View, const FLightSceneInfo* const LightSceneInfo)"
  },
  {
    "label": "GetValidAerialPerspectiveStartDepthInCm()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetValidAerialPerspectiveStartDepthInCm(const FViewInfo& View, const FSkyAtmosphereSceneProxy& SkyAtmosphereProxy)"
  },
  {
    "label": "ShouldSkySampleAtmosphereLightsOpaqueShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSkySampleAtmosphereLightsOpaqueShadow(const FScene& Scene, const TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos, SkyAtmosphereLightShadowData& LightShadowData)"
  },
  {
    "label": "GetSkyAtmosphereLightsUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSkyAtmosphereLightsUniformBuffers(\n\tFRDGBuilder& GraphBuilder,\n\tTRDGUniformBufferRef<FVolumeShadowingShaderParametersGlobal0>& OutLightShadowShaderParams0UniformBuffer,\n\tTRDGUniformBufferRef<FVolumeShadowingShaderParametersGlobal1>& OutLightShadowShaderParams1UniformBuffer,\n\tconst SkyAtmosphereLightShadowData& LightShadowData,\n\tconst FViewInfo& ViewInfo,\n\tconst bool bShouldSampleOpaqueShadow,\n\tconst EUniformBufferUsage UniformBufferUsage)"
  },
  {
    "label": "ShouldRenderSkyAtmosphereDebugPasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSkyAtmosphereDebugPasses(const FScene* Scene, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "AddSkyAtmosphereDebugPasses()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddSkyAtmosphereDebugPasses(FRDGBuilder& GraphBuilder, FScene* Scene, const FSceneViewFamily& ViewFamily, const FViewInfo& View, FScreenPassTexture& ScreenPassSceneColor)"
  }
]