[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FLightSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightSceneInfo"
  },
  {
    "label": "FVisibleLightInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVisibleLightInfo"
  },
  {
    "label": "USkyAtmosphereComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkyAtmosphereComponent"
  },
  {
    "label": "FSkyAtmosphereSceneProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereSceneProxy"
  },
  {
    "label": "FProjectedShadowInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProjectedShadowInfo"
  },
  {
    "label": "FSkyAtmosphereInternalCommonParameters",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereInternalCommonParameters"
  },
  {
    "label": "FVolumeShadowingShaderParametersGlobal0",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeShadowingShaderParametersGlobal0"
  },
  {
    "label": "FVolumeShadowingShaderParametersGlobal1",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVolumeShadowingShaderParametersGlobal1"
  },
  {
    "label": "FScreenPassTexture",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScreenPassTexture"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "FSkyAtmosphereViewSharedUniformShaderParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkyAtmosphereViewSharedUniformShaderParameters"
  },
  {
    "label": "FSkyAtmosphereRenderContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSkyAtmosphereRenderContext"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmosphereRenderSceneInfo"
  },
  {
    "label": "FSkyAtmospherePendingRDGResources",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkyAtmospherePendingRDGResources"
  },
  {
    "label": "FViewRDGResources",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewRDGResources"
  },
  {
    "label": "FSceneRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneRenderer"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "SkyAtmosphereLightShadowData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SkyAtmosphereLightShadowData"
  },
  {
    "label": "DECLARE_UNIFORM_BUFFER_STRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EngineDefines . h \" # include \" RenderGraph . h \" # include \" RenderResource . h \" # include \" Rendering / SkyAtmosphereCommonData . h \" # include \" RenderGraphResources . h \" # include \" SceneView . h \" # include \" VirtualShadowMaps / VirtualShadowMapArray . h \" class FScene ; class FViewInfo ; class FLightSceneInfo ; class FVisibleLightInfo ; class USkyAtmosphereComponent ; class FSkyAtmosphereSceneProxy ; class FProjectedShadowInfo ; class FSkyAtmosphereInternalCommonParameters ; class FVolumeShadowingShaderParametersGlobal0 ; class FVolumeShadowingShaderParametersGlobal1 ; struct FScreenPassTexture ; struct FEngineShowFlags ;)",
    "insertText": "DECLARE_UNIFORM_BUFFER_STRUCT(FSceneUniformParameters, RENDERER_API) BEGIN_GLOBAL_SHADER_PARAMETER_STRUCT(FAtmosphereUniformShaderParameters, ) SHADER_PARAMETER(float, MultiScatteringFactor) SHADER_PARAMETER(float, BottomRadiusKm) SHADER_PARAMETER(float, TopRadiusKm) SHADER_PARAMETER(float, RayleighDensityExpScale) SHADER_PARAMETER(FLinearColor, RayleighScattering) SHADER_PARAMETER(FLinearColor, MieScattering) SHADER_PARAMETER(float, MieDensityExpScale) SHADER_PARAMETER(FLinearColor, MieExtinction) SHADER_PARAMETER(float, MiePhaseG) SHADER_PARAMETER(FLinearColor, MieAbsorption) SHADER_PARAMETER(float, AbsorptionDensity0LayerWidth) SHADER_PARAMETER(float, AbsorptionDensity0ConstantTerm) SHADER_PARAMETER(float, AbsorptionDensity0LinearTerm) SHADER_PARAMETER(float, AbsorptionDensity1ConstantTerm) SHADER_PARAMETER(float, AbsorptionDensity1LinearTerm) SHADER_PARAMETER(FLinearColor, AbsorptionExtinction) SHADER_PARAMETER(FLinearColor, GroundAlbedo) END_GLOBAL_SHADER_PARAMETER_STRUCT()"
  },
  {
    "label": "FSkyAtmosphereRenderContext()",
    "kind": "Method",
    "detail": "Function (FVector4f CameraAerialPerspectiveVolumeSizeAndInvSize ; float AerialPerspectiveStartDepthKm ; float CameraAerialPerspectiveVolumeDepthResolution ; float CameraAerialPerspectiveVolumeDepthResolutionInv ; float CameraAerialPerspectiveVolumeDepthSliceLengthKm ; float CameraAerialPerspectiveVolumeDepthSliceLengthKmInv ; float ApplyCameraAerialPerspectiveVolume ; } ; struct FSkyAtmosphereRenderContext { bool bUseDepthBoundTestIfPossible ; bool bForceRayMarching ; bool bDepthReadDisabled ; bool bDisableBlending ; bool bFastSky ; bool bFastAerialPerspective ; bool bFastAerialPerspectiveDepthTest ; bool bSecondAtmosphereLightEnabled ; bool bShouldSampleOpaqueShadow ; FRDGTextureRef TransmittanceLut ; FRDGTextureRef MultiScatteredLuminanceLut ; FRDGTextureRef SkyAtmosphereViewLutTexture ; FRDGTextureRef SkyAtmosphereCameraAerialPerspectiveVolume ; FRDGTextureRef SkyAtmosphereCameraAerialPerspectiveVolumeMieOnly ; FRDGTextureRef SkyAtmosphereCameraAerialPerspectiveVolumeRayOnly ; FViewMatrices* ViewMatrices ; TUniformBufferRef<FViewUniformShaderParameters> ViewUniformBuffer ; TRDGUniformBufferRef<FSceneUniformParameters> SceneUniformBuffer ; bool bSceneHasSkyMaterial ; FRenderTargetBindingSlots RenderTargets ; FIntRect Viewport ; bool bIsReflectionCapture ; bool bRenderSkyPixel ; float AerialPerspectiveStartDepthInCm ; float NearClippingDistance ; ERHIFeatureLevel::Type FeatureLevel ; TRDGUniformBufferRef<FVolumeShadowingShaderParametersGlobal0> LightShadowShaderParams0UniformBuffer { } ; TRDGUniformBufferRef<FVolumeShadowingShaderParametersGlobal1> LightShadowShaderParams1UniformBuffer { } ; int VirtualShadowMapId0 = INDEX_NONE ; int VirtualShadowMapId1 = INDEX_NONE ; bool bShouldSampleCloudShadow ; FRDGTextureRef VolumetricCloudShadowMap [ 2 ] ; bool bShouldSampleCloudSkyAO ; FRDGTextureRef VolumetricCloudSkyAO ; bool bAPOnCloudMode ; FRDGTextureRef VolumetricCloudDepthTexture ; FRDGTextureRef InputCloudLuminanceTransmittanceTexture ; uint8 MSAASampleCount ; FRDGTextureRef MSAADepthTexture ;)",
    "insertText": "FSkyAtmosphereRenderContext()"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo()",
    "kind": "Method",
    "detail": "Function (private : } ; class FSkyAtmosphereRenderSceneInfo { public :)",
    "insertText": "FSkyAtmosphereRenderSceneInfo(FSkyAtmosphereSceneProxy& SkyAtmosphereSceneProxy)"
  },
  {
    "label": "FSkyAtmosphereRenderSceneInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSkyAtmosphereRenderSceneInfo()"
  },
  {
    "label": "GetAtmosphereUniformBuffer()",
    "kind": "Method",
    "detail": "Function (const TUniformBufferRef<FAtmosphereUniformShaderParameters>&)",
    "insertText": "GetAtmosphereUniformBuffer()"
  },
  {
    "label": "GetDistantSkyLightLutBuffer()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetDistantSkyLightLutBuffer()"
  },
  {
    "label": "GetMobileDistantSkyLightLutBuffer()",
    "kind": "Method",
    "detail": "Function (TRefCountPtr<FRDGPooledBuffer>&)",
    "insertText": "GetMobileDistantSkyLightLutBuffer()"
  },
  {
    "label": "GetDistantSkyLightLutBufferSRV()",
    "kind": "Method",
    "detail": "Function (FRHIShaderResourceView*)",
    "insertText": "GetDistantSkyLightLutBufferSRV()"
  },
  {
    "label": "GetMobileDistantSkyLightLutBufferSRV()",
    "kind": "Method",
    "detail": "Function (FRHIShaderResourceView*)",
    "insertText": "GetMobileDistantSkyLightLutBufferSRV()"
  },
  {
    "label": "GetTransmittanceLutTexture()",
    "kind": "Method",
    "detail": "Function (FRDGTextureRef)",
    "insertText": "GetTransmittanceLutTexture(FRDGBuilder& GraphBuilder)"
  },
  {
    "label": "GetAtmosphereShaderParameters()",
    "kind": "Method",
    "detail": "Function (} const FAtmosphereUniformShaderParameters*)",
    "insertText": "GetAtmosphereShaderParameters()"
  },
  {
    "label": "GetSkyAtmospherePassLocation()",
    "kind": "Method",
    "detail": "Function (private : struct FViewRDGResources { FRDGTextureRef SkyAtmosphereViewLutTexture = nullptr ; FRDGTextureRef SkyAtmosphereCameraAerialPerspectiveVolume = nullptr ; } ; FSceneRenderer* SceneRenderer = nullptr ; TArray<FViewRDGResources,TInlineAllocator<4>> ViewResources ; FRDGBufferRef DistantSkyLightLutBuffer = nullptr ; FRDGBufferRef MobileDistantSkyLightLutBuffer = nullptr ; FRDGTextureRef RealTimeReflectionCaptureSkyAtmosphereViewLutTexture = nullptr ; FRDGTextureRef RealTimeReflectionCaptureCamera360APLutTexture = nullptr ; FRDGTextureRef TransmittanceLut = nullptr ; class FSceneRenderer ; } ; enum class ESkyAtmospherePassLocation : uint32 { BeforeOcclusion,BeforeBasePass,BeforePrePass,} ; ESkyAtmospherePassLocation)",
    "insertText": "GetSkyAtmospherePassLocation()"
  },
  {
    "label": "ShouldRenderSkyAtmosphere()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSkyAtmosphere(const FScene* Scene, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "InitSkyAtmosphereForScene()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSkyAtmosphereForScene(FRHICommandListImmediate& RHICmdList, FRDGBuilder& GraphBuilder, FScene* Scene)"
  },
  {
    "label": "InitSkyAtmosphereForView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSkyAtmosphereForView(FRHICommandListImmediate& RHICmdList, const FScene* Scene, FViewInfo& View)"
  },
  {
    "label": "SetupSkyAtmosphereViewSharedUniformShaderParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupSkyAtmosphereViewSharedUniformShaderParameters(const class FViewInfo& View, const FSkyAtmosphereSceneProxy& SkyAtmosphereProxy, FSkyAtmosphereViewSharedUniformShaderParameters& OutParameters)"
  },
  {
    "label": "PrepareSunLightProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareSunLightProxy(const FSkyAtmosphereRenderSceneInfo& SkyAtmosphere, uint32 AtmosphereLightIndex, FLightSceneInfo& AtmosphereLight)"
  },
  {
    "label": "IsLightAtmospherePerPixelTransmittanceEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLightAtmospherePerPixelTransmittanceEnabled(const FScene* Scene, const FViewInfo& View, const FLightSceneInfo* const LightSceneInfo)"
  },
  {
    "label": "GetValidAerialPerspectiveStartDepthInCm()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetValidAerialPerspectiveStartDepthInCm(const FViewInfo& View, const FSkyAtmosphereSceneProxy& SkyAtmosphereProxy)"
  },
  {
    "label": "ShouldSkySampleAtmosphereLightsOpaqueShadow()",
    "kind": "Method",
    "detail": "Function (struct SkyAtmosphereLightShadowData { const FLightSceneInfo* LightVolumetricShadowSceneinfo0 = nullptr ; const FLightSceneInfo* LightVolumetricShadowSceneinfo1 = nullptr ; const FProjectedShadowInfo* ProjectedShadowInfo0 = nullptr ; const FProjectedShadowInfo* ProjectedShadowInfo1 = nullptr ; int VirtualShadowMapId0 = INDEX_NONE ; int VirtualShadowMapId1 = INDEX_NONE ; } ; bool)",
    "insertText": "ShouldSkySampleAtmosphereLightsOpaqueShadow(const FScene& Scene, const TArray<FVisibleLightInfo, SceneRenderingAllocator>& VisibleLightInfos, SkyAtmosphereLightShadowData& LightShadowData)"
  },
  {
    "label": "GetSkyAtmosphereLightsUniformBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSkyAtmosphereLightsUniformBuffers(FRDGBuilder& GraphBuilder, TRDGUniformBufferRef<FVolumeShadowingShaderParametersGlobal0>& OutLightShadowShaderParams0UniformBuffer, TRDGUniformBufferRef<FVolumeShadowingShaderParametersGlobal1>& OutLightShadowShaderParams1UniformBuffer, const SkyAtmosphereLightShadowData& LightShadowData, const FViewInfo& ViewInfo, const bool bShouldSampleOpaqueShadow, const EUniformBufferUsage UniformBufferUsage)"
  },
  {
    "label": "ShouldRenderSkyAtmosphereDebugPasses()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderSkyAtmosphereDebugPasses(const FScene* Scene, const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "AddSkyAtmosphereDebugPasses()",
    "kind": "Method",
    "detail": "Function (FScreenPassTexture)",
    "insertText": "AddSkyAtmosphereDebugPasses(FRDGBuilder& GraphBuilder, FScene* Scene, const FSceneViewFamily& ViewFamily, const FViewInfo& View, FScreenPassTexture& ScreenPassSceneColor)"
  }
]