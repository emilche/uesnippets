[
  {
    "label": "SProjectLauncherInstanceTypeSelector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SProjectLauncherInstanceTypeSelector"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Delegates / Delegate . h \" # include \" ILauncherProfileLaunchRole . h \" # include \" Internationalization / Text . h \" # include \" Internationalization / Internationalization . h \" # include \" Layout / Margin . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Textures / SlateIcon . h \" # include \" Framework / Commands / UIAction . h \" # include \" Widgets / Text / STextBlock . h \" # include \" Framework / MultiBox / MultiBoxBuilder . h \" # include \" Widgets / Input / SComboButton . h \" # define LOCTEXT_NAMESPACE \" SProjectLauncherInstanceTypeSelector \")",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnSProjectLauncherInstanceTypeSelected, ELauncherProfileRoleInstanceTypes::Type)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "SLATE_BEGIN_ARGS(SProjectLauncherInstanceTypeSelector)"
  },
  {
    "label": "SLATE_EVENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_EVENT(FOnSProjectLauncherInstanceTypeSelected, OnInstanceTypeSelected) SLATE_ATTRIBUTE(FText, Text) SLATE_END_ARGS() public: void Construct( const FArguments& InArgs)"
  },
  {
    "label": "MenuBuilder()",
    "kind": "Method",
    "detail": "Function (OnInstanceTypeSelected = InArgs . _OnInstanceTypeSelected ; FMenuBuilder)",
    "insertText": "MenuBuilder(true, NULL)"
  },
  {
    "label": "StandaloneClientAction()",
    "kind": "Method",
    "detail": "Function ({ FUIAction)",
    "insertText": "StandaloneClientAction(FExecuteAction::CreateSP(this, &SProjectLauncherInstanceTypeSelector::HandleMenuEntryClicked, ELauncherProfileRoleInstanceTypes::StandaloneClient))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"StandaloneClient\", \"Standalone Client\"), LOCTEXT(\"StandaloneClientActionHint\", \"Launch this instance as a standalone game client.\"), FSlateIcon(), StandaloneClientAction)"
  },
  {
    "label": "ListenServerAction()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "ListenServerAction(FExecuteAction::CreateSP(this, &SProjectLauncherInstanceTypeSelector::HandleMenuEntryClicked, ELauncherProfileRoleInstanceTypes::ListenServer))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"ListenServer\", \"Listen Server\"), LOCTEXT(\"ListenServerActionHint\", \"Launch this instance as a game client that can accept connections from other clients.\"), FSlateIcon(), ListenServerAction)"
  },
  {
    "label": "DedicatedServerAction()",
    "kind": "Method",
    "detail": "Function (FUIAction)",
    "insertText": "DedicatedServerAction(FExecuteAction::CreateSP(this, &SProjectLauncherInstanceTypeSelector::HandleMenuEntryClicked, ELauncherProfileRoleInstanceTypes::DedicatedServer))"
  },
  {
    "label": "AddMenuEntry()",
    "kind": "Method",
    "detail": "Function (MenuBuilder .)",
    "insertText": "AddMenuEntry(LOCTEXT(\"DedicatedServer\", \"Dedicated Server\"), LOCTEXT(\"DedicatedServerActionHint\", \"Launch this instance as a dedicated game server.\"), FSlateIcon(), DedicatedServerAction)"
  },
  {
    "label": "SNew()",
    "kind": "Method",
    "detail": "Function (} ChildSlot [)",
    "insertText": "SNew(SComboButton) .VAlign(VAlign_Center) .ButtonContent() [ SNew(STextBlock) .Text(InArgs._Text) ] .ContentPadding(FMargin(6.0f, 2.0f)) .MenuContent() [ MenuBuilder.MakeWidget()"
  },
  {
    "label": "HandleMenuEntryClicked()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleMenuEntryClicked(ELauncherProfileRoleInstanceTypes::Type InstanceType)"
  },
  {
    "label": "ExecuteIfBound()",
    "kind": "Method",
    "detail": "Function (OnInstanceTypeSelected .)",
    "insertText": "ExecuteIfBound(InstanceType)"
  }
]