[
  {
    "label": "FCompletedPackages",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompletedPackages"
  },
  {
    "label": "FCookPackageRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookPackageRequest"
  },
  {
    "label": "FRecookPackagesRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecookPackagesRequest"
  },
  {
    "label": "FRecookPackagesResponse",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecookPackagesResponse"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" IO / PackageStore . h \" namespace UE { namespace ZenCookOnTheFly { namespace Messaging { struct FCompletedPackages { TArray<FPackageStoreEntryResource> CookedPackages ; TArray<FPackageId> FailedPackages ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCompletedPackages& CompletedPackages)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FCookPackageRequest { TArray<FPackageId> PackageIds ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FCookPackageRequest& Request)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; using FCookPackageResponse = FCompletedPackages ; struct FRecookPackagesRequest { TArray<FPackageId> PackageIds ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FRecookPackagesRequest& Request)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; struct FRecookPackagesResponse { FArchive&)",
    "insertText": "operator(FArchive& Ar, FRecookPackagesResponse& Response)"
  }
]