[
  {
    "label": "Location",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Location"
  },
  {
    "label": "TaskTraits",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TaskTraits"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "TaskExecutor()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TASK_TASK_EXECUTOR_H_ # define BASE_TASK_TASK_EXECUTOR_H_ # include<stdint . h> # include \" base / base_export . h \" # include \" base / task / sequenced_task_runner . h \" # include \" base / task / single_thread_task_runner . h \" # include \" base / task / single_thread_task_runner_thread_mode . h \" # include \" base / task / task_runner . h \" # include \" build / build_config . h \" namespace base { class Location ; class TaskTraits ; class BASE_EXPORT TaskExecutor { public : ~)",
    "insertText": "TaskExecutor()"
  },
  {
    "label": "PostDelayedTask()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PostDelayedTask(const Location& from_here, const TaskTraits& traits, OnceClosure task, TimeDelta delay)"
  },
  {
    "label": "CreateTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<TaskRunner>)",
    "insertText": "CreateTaskRunner(const TaskTraits& traits)"
  },
  {
    "label": "CreateSequencedTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SequencedTaskRunner>)",
    "insertText": "CreateSequencedTaskRunner(const TaskTraits& traits)"
  },
  {
    "label": "CreateSingleThreadTaskRunner()",
    "kind": "Method",
    "detail": "Function (scoped_refptr<SingleThreadTaskRunner>)",
    "insertText": "CreateSingleThreadTaskRunner(const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) virtual scoped_refptr<SingleThreadTaskRunner> CreateCOMSTATaskRunner( const TaskTraits& traits, SingleThreadTaskRunnerThreadMode thread_mode)"
  },
  {
    "label": "RegisterTaskExecutor()",
    "kind": "Method",
    "detail": "Function (# endif } ; void BASE_EXPORT)",
    "insertText": "RegisterTaskExecutor(uint8_t extension_id, TaskExecutor* task_executor)"
  },
  {
    "label": "UnregisterTaskExecutorForTesting()",
    "kind": "Method",
    "detail": "Function (void BASE_EXPORT)",
    "insertText": "UnregisterTaskExecutorForTesting(uint8_t extension_id)"
  },
  {
    "label": "SetTaskExecutorForCurrentThread()",
    "kind": "Method",
    "detail": "Function (void BASE_EXPORT)",
    "insertText": "SetTaskExecutorForCurrentThread(TaskExecutor* task_executor)"
  },
  {
    "label": "GetTaskExecutorForCurrentThread()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT TaskExecutor*)",
    "insertText": "GetTaskExecutorForCurrentThread()"
  },
  {
    "label": "GetRegisteredTaskExecutorForTraits()",
    "kind": "Method",
    "detail": "Function (TaskExecutor*)",
    "insertText": "GetRegisteredTaskExecutorForTraits(const TaskTraits& traits)"
  }
]