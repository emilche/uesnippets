[
  {
    "label": "FHashBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHashBuilder"
  },
  {
    "label": "FHashBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Concepts / GetTypeHashable . h \" # include \" Containers / Map . h \" # include \" Containers / UnrealString . h \" # include \" Hash / CityHash . h \" class FHashBuilder { public :)",
    "insertText": "FHashBuilder(uint32 InHash = 0) : Hash(~InHash)"
  },
  {
    "label": "AppendRaw()",
    "kind": "Method",
    "detail": "Function (} FHashBuilder&)",
    "insertText": "AppendRaw(const void* Data, int64 Num)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(CityHash64(static_cast<const char*>(Data), static_cast<int32>(Num))))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} template<T> FHashBuilder&)",
    "insertText": "Append(const T& InData)"
  },
  {
    "label": "HashCombineFast()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombineFast(Hash, GetTypeHash(InData))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} } template<T> FHashBuilder&)",
    "insertText": "Append(const TArray<T>& InArray)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Value)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<T> FHashBuilder&)",
    "insertText": "Append(const TSet<T>& InSet)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<T,U> FHashBuilder&)",
    "insertText": "Append(const TMap<T, U>& InMap)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Value.Key)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Value.Value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<T> FHashBuilder&)",
    "insertText": "operator(const T& InData)"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetHash()"
  }
]