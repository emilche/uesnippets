[
  {
    "label": "UDistributionVectorConstantCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDistributionVectorConstantCurve"
  },
  {
    "label": "EDistributionVectorLockFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EDistributionVectorLockFlags"
  },
  {
    "label": "FRandomStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRandomStream"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Distributions / DistributionVector . h \" # include \" DistributionVectorConstantCurve . generated . h \")",
    "insertText": "UCLASS(collapsecategories, hidecategories=Object, editinlinenew, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, Category=DistributionVectorConstantCurve)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetValue(float F = 0.f, UObject* Data = NULL, int32 LastExtreme = 0, struct FRandomStream* InRandomStream = NULL)"
  },
  {
    "label": "GetRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetRange(FVector& OutMin, FVector& OutMax)"
  },
  {
    "label": "GetNumKeys()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumKeys()"
  },
  {
    "label": "GetNumSubCurves()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumSubCurves()"
  },
  {
    "label": "GetSubCurveButtonColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetSubCurveButtonColor(int32 SubCurveIndex, bool bIsSubCurveHidden)"
  },
  {
    "label": "GetKeyIn()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyIn(int32 KeyIndex)"
  },
  {
    "label": "GetKeyOut()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetKeyOut(int32 SubIndex, int32 KeyIndex)"
  },
  {
    "label": "GetInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetInRange(float& MinIn, float& MaxIn)"
  },
  {
    "label": "GetOutRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetOutRange(float& MinOut, float& MaxOut)"
  },
  {
    "label": "GetKeyColor()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "GetKeyColor(int32 SubIndex, int32 KeyIndex, const FColor& CurveColor)"
  },
  {
    "label": "GetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (EInterpCurveMode)",
    "insertText": "GetKeyInterpMode(int32 KeyIndex)"
  },
  {
    "label": "GetTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTangents(int32 SubIndex, int32 KeyIndex, float& ArriveTangent, float& LeaveTangent)"
  },
  {
    "label": "EvalSub()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "EvalSub(int32 SubIndex, float InVal)"
  },
  {
    "label": "CreateNewKey()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CreateNewKey(float KeyIn)"
  },
  {
    "label": "DeleteKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteKey(int32 KeyIndex)"
  },
  {
    "label": "SetKeyIn()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "SetKeyIn(int32 KeyIndex, float NewInVal)"
  },
  {
    "label": "SetKeyOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyOut(int32 SubIndex, int32 KeyIndex, float NewOutVal)"
  },
  {
    "label": "SetKeyInterpMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyInterpMode(int32 KeyIndex, EInterpCurveMode NewMode)"
  },
  {
    "label": "SetTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTangents(int32 SubIndex, int32 KeyIndex, float ArriveTangent, float LeaveTangent)"
  }
]