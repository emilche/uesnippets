[
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "UCurveFloat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCurveFloat"
  },
  {
    "label": "SRadialSlider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SRadialSlider"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Brushes / SlateRoundedBoxBrush . h \" # include \" CoreMinimal . h \" # include \" Curves / CurveFloat . h \" # include \" Framework / SlateDelegates . h \" # include \" Input / Reply . h \" # include \" Misc / Attribute . h \" # include \" Styling / CoreStyle . h \" # include \" Styling / SlateBrush . h \" # include \" Styling / SlateColor . h \" # include \" Styling / SlateTypes . h \" # include \" Styling / SlateWidgetStyle . h \" # include \" Styling / SlateWidgetStyleAsset . h \" # include \" Styling / StyleColors . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SLeafWidget . h \" class FPaintArgs ; class FSlateWindowElementList ; class UCurveFloat ; class SRadialSlider : public SLeafWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SRadialSlider) : _MouseUsesStep(false) , _RequiresControllerLock(true) , _Locked(false) , _SliderBarColor(FLinearColor::Gray) , _SliderProgressColor(FLinearColor::White) , _SliderHandleColor(FLinearColor::White) , _CenterBackgroundColor(FLinearColor::Transparent) , _CenterBackgroundBrush(FSlateRoundedBoxBrush(FStyleColors::Transparent, FVector2D(90.0f, 90.0f))) , _Style(&FCoreStyle::Get().GetWidgetStyle<FSliderStyle>(\"Slider\")) , _StepSize(0.01f) , _Value(1.f) , _bUseCustomDefaultValue(false) , _CustomDefaultValue(0.0f) , _SliderHandleStartAngle(60.0f) , _SliderHandleEndAngle(300.0f) , _AngularOffset(0.0f) , _HandStartEndRatio(FVector2D(0.0f, 1.0f)) , _IsFocusable(true) , _UseVerticalDrag(false) , _ShowSliderHandle(true) , _ShowSliderHand(false) , _OnMouseCaptureBegin() , _OnMouseCaptureEnd() , _OnValueChanged()"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(bool, MouseUsesStep) SLATE_ARGUMENT(bool, RequiresControllerLock) SLATE_ATTRIBUTE(bool, Locked) SLATE_ATTRIBUTE(FSlateColor, SliderBarColor) SLATE_ATTRIBUTE(FSlateColor, SliderProgressColor) SLATE_ATTRIBUTE(FSlateColor, SliderHandleColor) SLATE_ATTRIBUTE(FSlateColor, CenterBackgroundColor) SLATE_ATTRIBUTE(float, Thickness) SLATE_ARGUMENT(FSlateBrush, CenterBackgroundBrush) SLATE_STYLE_ARGUMENT(FSliderStyle, Style ) SLATE_ATTRIBUTE(float, StepSize) SLATE_ATTRIBUTE( float, Value ) SLATE_ATTRIBUTE(bool, bUseCustomDefaultValue) SLATE_ATTRIBUTE(float, CustomDefaultValue) SLATE_ARGUMENT(FRuntimeFloatCurve, SliderRange) SLATE_ARGUMENT(float, SliderHandleStartAngle) SLATE_ARGUMENT(float, SliderHandleEndAngle) SLATE_ARGUMENT(float, AngularOffset) SLATE_ARGUMENT(FVector2D, HandStartEndRatio) SLATE_ARGUMENT(TArray<float>, ValueTags) SLATE_ARGUMENT(bool, IsFocusable) SLATE_ARGUMENT(bool, UseVerticalDrag) SLATE_ARGUMENT(bool, ShowSliderHandle) SLATE_ARGUMENT(bool, ShowSliderHand) SLATE_EVENT(FSimpleDelegate, OnMouseCaptureBegin) SLATE_EVENT(FSimpleDelegate, OnMouseCaptureEnd) SLATE_EVENT(FSimpleDelegate, OnControllerCaptureBegin) SLATE_EVENT(FSimpleDelegate, OnControllerCaptureEnd) SLATE_EVENT( FOnFloatValueChanged, OnValueChanged ) SLATE_END_ARGS() ADVANCEDWIDGETS_API SRadialSlider()"
  },
  {
    "label": "SRadialSlider()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SRadialSlider()"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const SRadialSlider::FArguments& InDeclaration)"
  },
  {
    "label": "GetSliderRange()",
    "kind": "Method",
    "detail": "Function (FRuntimeFloatCurve)",
    "insertText": "GetSliderRange()"
  },
  {
    "label": "GetMaxValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxValue()"
  },
  {
    "label": "GetSliderHandleStartAngle()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSliderHandleStartAngle()"
  },
  {
    "label": "GetUseCustomDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetUseCustomDefaultValue()"
  },
  {
    "label": "GetCustomDefaultValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetCustomDefaultValue()"
  },
  {
    "label": "GetNormalizedValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalizedValue(float RawValue)"
  },
  {
    "label": "GetNormalizedSliderHandlePosition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNormalizedSliderHandlePosition()"
  },
  {
    "label": "SetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValue(const TAttribute<float>& InValueAttribute)"
  },
  {
    "label": "SetUseCustomDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseCustomDefaultValue(const TAttribute<bool>& InValueAttribute)"
  },
  {
    "label": "SetCustomDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCustomDefaultValue(const TAttribute<float>& InValueAttribute)"
  },
  {
    "label": "SetSliderRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSliderRange(const FRuntimeFloatCurve& InSliderRange)"
  },
  {
    "label": "SetSliderHandleStartAngleAndSliderHandleEndAngle()",
    "kind": "Method",
    "detail": "Function (SliderRange = InSliderRange ; } void)",
    "insertText": "SetSliderHandleStartAngleAndSliderHandleEndAngle(float InSliderHandleStartAngle, float InSliderHandleEndAngle)"
  },
  {
    "label": "SetAngularOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAngularOffset(float InAngularOffset)"
  },
  {
    "label": "SetHandStartEndRatio()",
    "kind": "Method",
    "detail": "Function (AngularOffset = InAngularOffset ; } void)",
    "insertText": "SetHandStartEndRatio(FVector2D InHandStartEndRatio)"
  },
  {
    "label": "SetValueTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetValueTags(const TArray<float>& InValueTags)"
  },
  {
    "label": "SetLocked()",
    "kind": "Method",
    "detail": "Function (ValueTags = InValueTags ; } void)",
    "insertText": "SetLocked(const TAttribute<bool>& InLocked)"
  },
  {
    "label": "SetSliderBarColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSliderBarColor(FSlateColor InSliderBarColor)"
  },
  {
    "label": "SetSliderProgressColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSliderProgressColor(FSlateColor InSliderProgressColor)"
  },
  {
    "label": "SetSliderHandleColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSliderHandleColor(FSlateColor InSliderHandleColor)"
  },
  {
    "label": "SetCenterBackgroundColor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCenterBackgroundColor(FSlateColor InCenterHandleColor)"
  },
  {
    "label": "SetThickness()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThickness(const float InThickness)"
  },
  {
    "label": "GetStepSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetStepSize()"
  },
  {
    "label": "SetStepSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStepSize(const TAttribute<float>& InStepSize)"
  },
  {
    "label": "SetMouseUsesStep()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMouseUsesStep(bool MouseUsesStep)"
  },
  {
    "label": "SetRequiresControllerLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRequiresControllerLock(bool RequiresControllerLock)"
  },
  {
    "label": "SetUseVerticalDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUseVerticalDrag(bool UseVerticalDrag)"
  },
  {
    "label": "SetShowSliderHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowSliderHandle(bool ShowSliderHandle)"
  },
  {
    "label": "SetShowSliderHand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShowSliderHand(bool ShowSliderHand)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (public : int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "ComputeDesiredSize()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "ComputeDesiredSize(float)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnTouchStarted()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchStarted(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchMoved()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchMoved(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnTouchEnded()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnTouchEnded(const FGeometry& MyGeometry, const FPointerEvent& InTouchEvent)"
  },
  {
    "label": "OnKeyDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyDown(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnKeyUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnKeyUp(const FGeometry& MyGeometry, const FKeyEvent& InKeyEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "OnNavigation()",
    "kind": "Method",
    "detail": "Function (FNavigationReply)",
    "insertText": "OnNavigation(const FGeometry& MyGeometry, const FNavigationEvent& InNavigationEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "IsInteractable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInteractable()"
  },
  {
    "label": "CreateAccessibleWidget()",
    "kind": "Method",
    "detail": "Function (# if WITH_ACCESSIBILITY TSharedRef<FSlateAccessibleWidget>)",
    "insertText": "CreateAccessibleWidget()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "CommitValue()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CommitValue(float NewValue)"
  },
  {
    "label": "PositionToValue()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "PositionToValue(const FGeometry& MyGeometry, const FVector2D& AbsolutePosition)"
  },
  {
    "label": "GetBarImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetBarImage()"
  },
  {
    "label": "GetThumbImage()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetThumbImage()"
  },
  {
    "label": "FVector2D()",
    "kind": "Method",
    "detail": "Function (protected : const FSliderStyle* Style ; TAttribute<bool> LockedAttribute ; TAttribute<FSlateColor> SliderBarColor ; TAttribute<FSlateColor> SliderProgressColor ; TAttribute<FSlateColor> SliderHandleColor ; TAttribute<FSlateColor> CenterBackgroundColor ; FSlateBrush CenterBackgroundBrush ; TAttribute<TOptional<float>> Thickness ; TAttribute<float> ValueAttribute ; TAttribute<bool> bUseCustomDefaultValue ; TAttribute<float> CustomDefaultValue ; EMouseCursor::Type CachedCursor ; FVector2D PressedScreenSpaceTouchDownPosition =)",
    "insertText": "FVector2D(0, 0)"
  },
  {
    "label": "ResetControllerState()",
    "kind": "Method",
    "detail": "Function (TAttribute<float> StepSize ; float SliderHandleStartAngle ; float SliderHandleEndAngle ; float AngularOffset ; FVector2D HandStartEndRatio ; TArray<float> ValueTags ; FRuntimeFloatCurve SliderRange ; bool bControllerInputCaptured ; bool bMouseUsesStep ; bool bRequiresControllerLock ; bool bIsFocusable ; bool bUseVerticalDrag ; bool bShowSliderHandle ; bool bShowSliderHand ; private : void)",
    "insertText": "ResetControllerState()"
  },
  {
    "label": "GetAngleFromPosition()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAngleFromPosition(const FGeometry& MyGeometry, const FVector2D& AbsolutePosition)"
  },
  {
    "label": "OnInputStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInputStarted(const FGeometry& MyGeometry, const FVector2D& InputAbsolutePosition)"
  },
  {
    "label": "AddSliderPointToArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSliderPointToArray(TArray<FVector2D>& SliderPoints, const bool bIsUnique, const FVector2D& SliderPoint)"
  }
]