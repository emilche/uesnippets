[
  {
    "label": "TClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TClass"
  },
  {
    "label": "CaptureExpressionsAndValues()",
    "kind": "Method",
    "detail": "Function (# pragma once # if ! WITH_LOW_LEVEL_TESTS # include \" Containers / StringConv . h \" # include \" Containers / UnrealString . h \" # include<sstream> # include<vector> template<. . . ArgTypes> FString)",
    "insertText": "CaptureExpressionsAndValues(const FString& InExpressions, ArgTypes&&... InExpressionsValues)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (std::ostringstream Result ; auto Args = { InExpressionsValues . . . } ; auto Iter = Args .)",
    "insertText": "begin()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (FString RemainingExpressions = InExpressions ; FString Expression ;)",
    "insertText": "while(RemainingExpressions.Split(TEXT(\",\"), &Expression, &RemainingExpressions))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } else)",
    "insertText": "if(Iter != Args.begin())"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (Result<<\",\" ; } Result<<)",
    "insertText": "string(TCHAR_TO_UTF8(*Expression.TrimStartAndEnd()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(Iter != Args.end() && !RemainingExpressions.TrimStartAndEnd().IsEmpty())"
  },
  {
    "label": "string()",
    "kind": "Method",
    "detail": "Function (Result<<\",\"<<)",
    "insertText": "string(TCHAR_TO_UTF8(*RemainingExpressions))"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} Result<<std::endl ; return)",
    "insertText": "FString(Result.str().c_str())"
  },
  {
    "label": "IMPLEMENT_SIMPLE_AUTOMATION_TEST_PRIVATE_LLT()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IMPLEMENT_SIMPLE_AUTOMATION_TEST_PRIVATE_LLT(TClass, PrettyName, TFlags, FileName, LineNumber)"
  },
  {
    "label": "TClass()",
    "kind": "Method",
    "detail": "Function (\\ public : \\)",
    "insertText": "TClass(const FString& InName) \\ : FAutomationTestBase( InName, false)"
  },
  {
    "label": "ExtractAutomationTestFlags()",
    "kind": "Method",
    "detail": "Function (\\ TestFlags =)",
    "insertText": "ExtractAutomationTestFlags(TFlags)"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (\\ PrettyNameDotNotation =)",
    "insertText": "FString(PrettyName).Replace(TEXT(\"::\"), TEXT(\".\"))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!(TestFlags & EAutomationTestFlags_ApplicationContextMask))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ TestFlags | = EAutomationTestFlags_ApplicationContextMask ; \\ } \\)",
    "insertText": "if(!(TestFlags & EAutomationTestFlags_FilterMask))"
  },
  {
    "label": "GetTestFlags()",
    "kind": "Method",
    "detail": "Function (\\ TestFlags | = EAutomationTestFlags::EngineFilter ; \\ } \\ } \\ EAutomationTestFlags)",
    "insertText": "GetTestFlags()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ OutBeautifiedNames .)",
    "insertText": "Add(PrettyNameDotNotation)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (\\ OutTestCommands .)",
    "insertText": "Add(FString())"
  },
  {
    "label": "TestBody()",
    "kind": "Method",
    "detail": "Function (\\ } \\ void)",
    "insertText": "TestBody(const FString& Parameters)"
  },
  {
    "label": "RunTest()",
    "kind": "Method",
    "detail": "Function (\\ bool)",
    "insertText": "RunTest(const FString& Parameters)"
  },
  {
    "label": "TestBody()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TestBody(Parameters)"
  },
  {
    "label": "HasAnyErrors()",
    "kind": "Method",
    "detail": "Function (\\ return !)",
    "insertText": "HasAnyErrors()"
  },
  {
    "label": "GetBeautifiedTestName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ FString)",
    "insertText": "GetBeautifiedTestName()"
  },
  {
    "label": "LLT_JOIN()",
    "kind": "Method",
    "detail": "Function (\\ TClass)",
    "insertText": "LLT_JOIN(TClass, Instance)(TEXT(StrName))"
  }
]