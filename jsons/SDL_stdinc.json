[
  {
    "label": "_SDL_iconv_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_SDL_iconv_t"
  },
  {
    "label": "SDL_malloc()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_malloc(size_t size)"
  },
  {
    "label": "SDL_calloc()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_calloc(size_t nmemb, size_t size)"
  },
  {
    "label": "SDL_realloc()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_realloc(void *mem, size_t size)"
  },
  {
    "label": "SDL_free()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_free(void *mem)"
  },
  {
    "label": "SDL_GetOriginalMemoryFunctions()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_GetOriginalMemoryFunctions(SDL_malloc_func *malloc_func,\n                                                            SDL_calloc_func *calloc_func,\n                                                            SDL_realloc_func *realloc_func,\n                                                            SDL_free_func *free_func)"
  },
  {
    "label": "SDL_GetMemoryFunctions()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func,\n                                                    SDL_calloc_func *calloc_func,\n                                                    SDL_realloc_func *realloc_func,\n                                                    SDL_free_func *free_func)"
  },
  {
    "label": "SDL_SetMemoryFunctions()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_SetMemoryFunctions(SDL_malloc_func malloc_func,\n                                                   SDL_calloc_func calloc_func,\n                                                   SDL_realloc_func realloc_func,\n                                                   SDL_free_func free_func)"
  },
  {
    "label": "SDL_GetNumAllocations()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_GetNumAllocations(void)"
  },
  {
    "label": "SDL_getenv()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_getenv(const char *name)"
  },
  {
    "label": "SDL_setenv()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_setenv(const char *name, const char *value, int overwrite)"
  },
  {
    "label": "SDL_abs()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_abs(int x)"
  },
  {
    "label": "SDL_isalpha()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isalpha(int x)"
  },
  {
    "label": "SDL_isalnum()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isalnum(int x)"
  },
  {
    "label": "SDL_isblank()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isblank(int x)"
  },
  {
    "label": "SDL_iscntrl()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_iscntrl(int x)"
  },
  {
    "label": "SDL_isdigit()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isdigit(int x)"
  },
  {
    "label": "SDL_isxdigit()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isxdigit(int x)"
  },
  {
    "label": "SDL_ispunct()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ispunct(int x)"
  },
  {
    "label": "SDL_isspace()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isspace(int x)"
  },
  {
    "label": "SDL_isupper()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isupper(int x)"
  },
  {
    "label": "SDL_islower()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_islower(int x)"
  },
  {
    "label": "SDL_isprint()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isprint(int x)"
  },
  {
    "label": "SDL_isgraph()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_isgraph(int x)"
  },
  {
    "label": "SDL_toupper()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_toupper(int x)"
  },
  {
    "label": "SDL_tolower()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_tolower(int x)"
  },
  {
    "label": "SDL_crc16()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_crc16(Uint16 crc, const void *data, size_t len)"
  },
  {
    "label": "SDL_crc32()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_crc32(Uint32 crc, const void *data, size_t len)"
  },
  {
    "label": "SDL_memcmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_memcmp(const void *s1, const void *s2, size_t len)"
  },
  {
    "label": "SDL_wcslen()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_wcslen(const wchar_t *wstr)"
  },
  {
    "label": "SDL_wcsdup()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_wcsdup(const wchar_t *wstr)"
  },
  {
    "label": "SDL_wcsstr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle)"
  },
  {
    "label": "SDL_wcscmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_wcscmp(const wchar_t *str1, const wchar_t *str2)"
  },
  {
    "label": "SDL_wcsncmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen)"
  },
  {
    "label": "SDL_wcscasecmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2)"
  },
  {
    "label": "SDL_wcsncasecmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t len)"
  },
  {
    "label": "SDL_strlen()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strlen(const char *str)"
  },
  {
    "label": "SDL_strdup()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strdup(const char *str)"
  },
  {
    "label": "SDL_strrev()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strrev(char *str)"
  },
  {
    "label": "SDL_strupr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strupr(char *str)"
  },
  {
    "label": "SDL_strlwr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strlwr(char *str)"
  },
  {
    "label": "SDL_strchr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strchr(const char *str, int c)"
  },
  {
    "label": "SDL_strrchr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strrchr(const char *str, int c)"
  },
  {
    "label": "SDL_strstr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strstr(const char *haystack, const char *needle)"
  },
  {
    "label": "SDL_strcasestr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strcasestr(const char *haystack, const char *needle)"
  },
  {
    "label": "SDL_strtokr()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strtokr(char *s1, const char *s2, char **saveptr)"
  },
  {
    "label": "SDL_utf8strlen()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_utf8strlen(const char *str)"
  },
  {
    "label": "SDL_utf8strnlen()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_utf8strnlen(const char *str, size_t bytes)"
  },
  {
    "label": "SDL_itoa()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_itoa(int value, char *str, int radix)"
  },
  {
    "label": "SDL_uitoa()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_uitoa(unsigned int value, char *str, int radix)"
  },
  {
    "label": "SDL_ltoa()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ltoa(long value, char *str, int radix)"
  },
  {
    "label": "SDL_ultoa()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ultoa(unsigned long value, char *str, int radix)"
  },
  {
    "label": "SDL_lltoa()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_lltoa(Sint64 value, char *str, int radix)"
  },
  {
    "label": "SDL_ulltoa()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ulltoa(Uint64 value, char *str, int radix)"
  },
  {
    "label": "SDL_atoi()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_atoi(const char *str)"
  },
  {
    "label": "SDL_atof()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_atof(const char *str)"
  },
  {
    "label": "SDL_strtol()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strtol(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtoul()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strtoul(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtoll()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strtoll(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtoull()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strtoull(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtod()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strtod(const char *str, char **endp)"
  },
  {
    "label": "SDL_strcmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strcmp(const char *str1, const char *str2)"
  },
  {
    "label": "SDL_strncmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strncmp(const char *str1, const char *str2, size_t maxlen)"
  },
  {
    "label": "SDL_strcasecmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strcasecmp(const char *str1, const char *str2)"
  },
  {
    "label": "SDL_strncasecmp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_strncasecmp(const char *str1, const char *str2, size_t len)"
  },
  {
    "label": "SDL_acos()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_acos(double x)"
  },
  {
    "label": "SDL_acosf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_acosf(float x)"
  },
  {
    "label": "SDL_asin()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_asin(double x)"
  },
  {
    "label": "SDL_asinf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_asinf(float x)"
  },
  {
    "label": "SDL_atan()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_atan(double x)"
  },
  {
    "label": "SDL_atanf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_atanf(float x)"
  },
  {
    "label": "SDL_atan2()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_atan2(double y, double x)"
  },
  {
    "label": "SDL_atan2f()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_atan2f(float y, float x)"
  },
  {
    "label": "SDL_ceil()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ceil(double x)"
  },
  {
    "label": "SDL_ceilf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_ceilf(float x)"
  },
  {
    "label": "SDL_copysign()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_copysign(double x, double y)"
  },
  {
    "label": "SDL_copysignf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_copysignf(float x, float y)"
  },
  {
    "label": "SDL_cos()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_cos(double x)"
  },
  {
    "label": "SDL_cosf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_cosf(float x)"
  },
  {
    "label": "SDL_exp()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_exp(double x)"
  },
  {
    "label": "SDL_expf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_expf(float x)"
  },
  {
    "label": "SDL_fabs()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_fabs(double x)"
  },
  {
    "label": "SDL_fabsf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_fabsf(float x)"
  },
  {
    "label": "SDL_floor()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_floor(double x)"
  },
  {
    "label": "SDL_floorf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_floorf(float x)"
  },
  {
    "label": "SDL_trunc()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_trunc(double x)"
  },
  {
    "label": "SDL_truncf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_truncf(float x)"
  },
  {
    "label": "SDL_fmod()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_fmod(double x, double y)"
  },
  {
    "label": "SDL_fmodf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_fmodf(float x, float y)"
  },
  {
    "label": "SDL_log()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_log(double x)"
  },
  {
    "label": "SDL_logf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_logf(float x)"
  },
  {
    "label": "SDL_log10()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_log10(double x)"
  },
  {
    "label": "SDL_log10f()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_log10f(float x)"
  },
  {
    "label": "SDL_pow()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_pow(double x, double y)"
  },
  {
    "label": "SDL_powf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_powf(float x, float y)"
  },
  {
    "label": "SDL_round()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_round(double x)"
  },
  {
    "label": "SDL_roundf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_roundf(float x)"
  },
  {
    "label": "SDL_lround()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_lround(double x)"
  },
  {
    "label": "SDL_lroundf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_lroundf(float x)"
  },
  {
    "label": "SDL_scalbn()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_scalbn(double x, int n)"
  },
  {
    "label": "SDL_scalbnf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_scalbnf(float x, int n)"
  },
  {
    "label": "SDL_sin()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_sin(double x)"
  },
  {
    "label": "SDL_sinf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_sinf(float x)"
  },
  {
    "label": "SDL_sqrt()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_sqrt(double x)"
  },
  {
    "label": "SDL_sqrtf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_sqrtf(float x)"
  },
  {
    "label": "SDL_tan()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_tan(double x)"
  },
  {
    "label": "SDL_tanf()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_tanf(float x)"
  },
  {
    "label": "SDL_iconv_open()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_iconv_open(const char *tocode,\n                                                   const char *fromcode)"
  },
  {
    "label": "SDL_iconv_close()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_iconv_close(SDL_iconv_t cd)"
  },
  {
    "label": "SDL_iconv()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_iconv(SDL_iconv_t cd, const char **inbuf,\n                                         size_t * inbytesleft, char **outbuf,\n                                         size_t * outbytesleft)"
  },
  {
    "label": "SDL_iconv_string()",
    "kind": "Method",
    "detail": "Function (SDLCALL)",
    "insertText": "SDL_iconv_string(const char *tocode,\n                                               const char *fromcode,\n                                               const char *inbuf,\n                                               size_t inbytesleft)"
  },
  {
    "label": "strlcpy()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "strlcpy(char* dst, const char* src, size_t size)"
  },
  {
    "label": "strlcat()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "strlcat(char* dst, const char* src, size_t size)"
  },
  {
    "label": "wcslcpy()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "wcslcpy(wchar_t *dst, const wchar_t *src, size_t size)"
  },
  {
    "label": "wcslcat()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "wcslcat(wchar_t *dst, const wchar_t *src, size_t size)"
  },
  {
    "label": "SDL_memcpy()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "SDL_memcpy(dst, src, dwords * 4)"
  }
]