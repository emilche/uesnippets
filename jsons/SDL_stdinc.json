[
  {
    "label": "_SDL_iconv_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_SDL_iconv_t"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef SDL_stdinc_h_ # define SDL_stdinc_h_ # include \" SDL_config . h \" # ifdef HAVE_SYS_TYPES_H # include<sys / types . h> # endif # ifdef HAVE_STDIO_H # include<stdio . h> # endif # if)",
    "insertText": "defined(STDC_HEADERS) # include <stdlib.h> # include <stddef.h> # include <stdarg.h> #else # if defined(HAVE_STDLIB_H) # include <stdlib.h> # elif defined(HAVE_MALLOC_H) # include <malloc.h> # endif # if defined(HAVE_STDDEF_H) # include <stddef.h> # endif # if defined(HAVE_STDARG_H) # include <stdarg.h> # endif #endif #ifdef HAVE_STRING_H # if !defined(STDC_HEADERS) && defined(HAVE_MEMORY_H) # include <memory.h> # endif # include <string.h> #endif #ifdef HAVE_STRINGS_H # include <strings.h> #endif #ifdef HAVE_WCHAR_H # include <wchar.h> #endif #if defined(HAVE_INTTYPES_H) # include <inttypes.h> #elif defined(HAVE_STDINT_H) # include <stdint.h> #endif #ifdef HAVE_CTYPE_H # include <ctype.h> #endif #ifdef HAVE_MATH_H # if defined(_MSC_VER) # ifndef _USE_MATH_DEFINES # define _USE_MATH_DEFINES # endif # endif # include <math.h> #endif #ifdef HAVE_FLOAT_H # include <float.h> #endif #if defined(HAVE_ALLOCA) && !defined(alloca) # if defined(HAVE_ALLOCA_H) # include <alloca.h> # elif defined(__GNUC__) # define alloca __builtin_alloca # elif defined(_MSC_VER) # include <malloc.h> # define alloca _alloca # elif defined(__WATCOMC__) # include <malloc.h> # elif defined(__BORLANDC__) # include <malloc.h> # elif defined(__DMC__) # include <stdlib.h> # elif defined(__AIX__) #pragma alloca # elif defined(__MRC__) void *alloca(unsigned)"
  },
  {
    "label": "alloca()",
    "kind": "Method",
    "detail": "Function (# else void*)",
    "insertText": "alloca(size_t)"
  },
  {
    "label": "SDL_SIZE_MAX()",
    "kind": "Method",
    "detail": "Function (# endif # endif # ifdef SIZE_MAX # define SDL_SIZE_MAX SIZE_MAX # else # define)",
    "insertText": "SDL_SIZE_MAX((size_t) -1) #endif #ifdef __has_builtin #define _SDL_HAS_BUILTIN(x) __has_builtin(x) #else #define _SDL_HAS_BUILTIN(x) 0 #endif #define SDL_arraysize(array) (sizeof(array)/sizeof(array[0])) #define SDL_TABLESIZE(table) SDL_arraysize(table) #define SDL_STRINGIFY_ARG(arg) #arg #ifdef __cplusplus #define SDL_reinterpret_cast(type, expression) reinterpret_cast<type>(expression) #define SDL_static_cast(type, expression) static_cast<type>(expression) #define SDL_const_cast(type, expression) const_cast<type>(expression) #else #define SDL_reinterpret_cast(type, expression) ((type)(expression)) #define SDL_static_cast(type, expression) ((type)(expression)) #define SDL_const_cast(type, expression) ((type)(expression)) #endif #define SDL_FOURCC(A, B, C, D) \\ ((SDL_static_cast(Uint32, SDL_static_cast(Uint8, (A))) << 0) | \\ (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (B))) << 8) | \\ (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (C))) << 16) | \\ (SDL_static_cast(Uint32, SDL_static_cast(Uint8, (D))) << 24))"
  },
  {
    "label": "SDL_MAX_SINT8()",
    "kind": "Method",
    "detail": "Function (# else typedef enum { SDL_FALSE = 0,SDL_TRUE = 1 } SDL_bool ; # endif # define)",
    "insertText": "SDL_MAX_SINT8((Sint8)0x7F) #define SDL_MIN_SINT8 ((Sint8)(~0x7F))"
  },
  {
    "label": "SDL_MAX_UINT8()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MAX_UINT8((Uint8)0xFF) #define SDL_MIN_UINT8 ((Uint8)0x00)"
  },
  {
    "label": "SDL_MAX_SINT16()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MAX_SINT16((Sint16)0x7FFF) #define SDL_MIN_SINT16 ((Sint16)(~0x7FFF))"
  },
  {
    "label": "SDL_MAX_UINT16()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MAX_UINT16((Uint16)0xFFFF) #define SDL_MIN_UINT16 ((Uint16)0x0000)"
  },
  {
    "label": "SDL_MAX_SINT32()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MAX_SINT32((Sint32)0x7FFFFFFF) #define SDL_MIN_SINT32 ((Sint32)(~0x7FFFFFFF))"
  },
  {
    "label": "SDL_MAX_UINT32()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MAX_UINT32((Uint32)0xFFFFFFFFu) #define SDL_MIN_UINT32 ((Uint32)0x00000000)"
  },
  {
    "label": "SDL_MAX_SINT64()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MAX_SINT64((Sint64)0x7FFFFFFFFFFFFFFFll) #define SDL_MIN_SINT64 ((Sint64)(~0x7FFFFFFFFFFFFFFFll))"
  },
  {
    "label": "SDL_MAX_UINT64()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_MAX_UINT64((Uint64)0xFFFFFFFFFFFFFFFFull) #define SDL_MIN_UINT64 ((Uint64)(0x0000000000000000ull))"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifdef FLT_EPSILON # define SDL_FLT_EPSILON FLT_EPSILON # else # define SDL_FLT_EPSILON 1 . 1 9 2 0 9 2 8 9 5 5 0 7 8 1 2 5 e - 0 7 F # endif # ifndef SDL_PRIs64 # if)",
    "insertText": "defined(__WIN32__) || defined(__GDK__) #define SDL_PRIs64 \"I64d\" #elif defined(PRIs64) #define SDL_PRIs64 PRIs64 #elif defined(__LP64__) && !defined(__APPLE__) #define SDL_PRIs64 \"ld\" #else #define SDL_PRIs64 \"lld\" #endif #endif #ifndef SDL_PRIu64 #if defined(__WIN32__) || defined(__GDK__) #define SDL_PRIu64 \"I64u\" #elif defined(PRIu64) #define SDL_PRIu64 PRIu64 #elif defined(__LP64__) && !defined(__APPLE__) #define SDL_PRIu64 \"lu\" #else #define SDL_PRIu64 \"llu\" #endif #endif #ifndef SDL_PRIx64 #if defined(__WIN32__) || defined(__GDK__) #define SDL_PRIx64 \"I64x\" #elif defined(PRIx64) #define SDL_PRIx64 PRIx64 #elif defined(__LP64__) && !defined(__APPLE__) #define SDL_PRIx64 \"lx\" #else #define SDL_PRIx64 \"llx\" #endif #endif #ifndef SDL_PRIX64 #if defined(__WIN32__) || defined(__GDK__) #define SDL_PRIX64 \"I64X\" #elif defined(PRIX64) #define SDL_PRIX64 PRIX64 #elif defined(__LP64__) && !defined(__APPLE__) #define SDL_PRIX64 \"lX\" #else #define SDL_PRIX64 \"llX\" #endif #endif #ifndef SDL_PRIs32 #ifdef PRId32 #define SDL_PRIs32 PRId32 #else #define SDL_PRIs32 \"d\" #endif #endif #ifndef SDL_PRIu32 #ifdef PRIu32 #define SDL_PRIu32 PRIu32 #else #define SDL_PRIu32 \"u\" #endif #endif #ifndef SDL_PRIx32 #ifdef PRIx32 #define SDL_PRIx32 PRIx32 #else #define SDL_PRIx32 \"x\" #endif #endif #ifndef SDL_PRIX32 #ifdef PRIX32 #define SDL_PRIX32 PRIX32 #else #define SDL_PRIX32 \"X\" #endif #endif #ifdef SDL_DISABLE_ANALYZE_MACROS #define SDL_IN_BYTECAP(x) #define SDL_INOUT_Z_CAP(x) #define SDL_OUT_Z_CAP(x) #define SDL_OUT_CAP(x) #define SDL_OUT_BYTECAP(x) #define SDL_OUT_Z_BYTECAP(x) #define SDL_PRINTF_FORMAT_STRING #define SDL_SCANF_FORMAT_STRING #define SDL_PRINTF_VARARG_FUNC( fmtargnumber ) #define SDL_PRINTF_VARARG_FUNCV( fmtargnumber ) #define SDL_SCANF_VARARG_FUNC( fmtargnumber ) #define SDL_SCANF_VARARG_FUNCV( fmtargnumber ) #else #if defined(_MSC_VER) && (_MSC_VER >= 1600) #include <sal.h> #define SDL_IN_BYTECAP(x) _In_bytecount_(x) #define SDL_INOUT_Z_CAP(x) _Inout_z_cap_(x) #define SDL_OUT_Z_CAP(x) _Out_z_cap_(x) #define SDL_OUT_CAP(x) _Out_cap_(x) #define SDL_OUT_BYTECAP(x) _Out_bytecap_(x) #define SDL_OUT_Z_BYTECAP(x) _Out_z_bytecap_(x) #define SDL_PRINTF_FORMAT_STRING _Printf_format_string_ #define SDL_SCANF_FORMAT_STRING _Scanf_format_string_impl_ #else #define SDL_IN_BYTECAP(x) #define SDL_INOUT_Z_CAP(x) #define SDL_OUT_Z_CAP(x) #define SDL_OUT_CAP(x) #define SDL_OUT_BYTECAP(x) #define SDL_OUT_Z_BYTECAP(x) #define SDL_PRINTF_FORMAT_STRING #define SDL_SCANF_FORMAT_STRING #endif #if defined(__GNUC__) #define SDL_PRINTF_VARARG_FUNC( fmtargnumber ) __attribute__ (( format( __printf__, fmtargnumber, fmtargnumber+1 ))) #define SDL_PRINTF_VARARG_FUNCV( fmtargnumber ) __attribute__(( format( __printf__, fmtargnumber, 0 ))) #define SDL_SCANF_VARARG_FUNC( fmtargnumber ) __attribute__ (( format( __scanf__, fmtargnumber, fmtargnumber+1 ))) #define SDL_SCANF_VARARG_FUNCV( fmtargnumber ) __attribute__(( format( __scanf__, fmtargnumber, 0 ))) #else #define SDL_PRINTF_VARARG_FUNC( fmtargnumber ) #define SDL_PRINTF_VARARG_FUNCV( fmtargnumber ) #define SDL_SCANF_VARARG_FUNC( fmtargnumber ) #define SDL_SCANF_VARARG_FUNCV( fmtargnumber ) #endif #endif #ifndef SDL_COMPILE_TIME_ASSERT #if defined(__cplusplus) #if (__cplusplus >= 201103L) #define SDL_COMPILE_TIME_ASSERT(name, x) static_assert(x, #x) #endif #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 202311L) #define SDL_COMPILE_TIME_ASSERT(name, x) static_assert(x, #x) #elif defined(__STDC_VERSION__) && (__STDC_VERSION__ >= 201112L) #define SDL_COMPILE_TIME_ASSERT(name, x) _Static_assert(x, #x) #endif #endif #ifndef SDL_COMPILE_TIME_ASSERT #define SDL_COMPILE_TIME_ASSERT(name, x) \\ typedef int SDL_compile_time_assert_ ## name[(x) * 2 - 1] #endif #ifndef DOXYGEN_SHOULD_IGNORE_THIS SDL_COMPILE_TIME_ASSERT(uint8, sizeof(Uint8) == 1)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(sint8, sizeof(Sint8) == 1)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(uint16, sizeof(Uint16) == 2)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(sint16, sizeof(Sint16) == 2)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(uint32, sizeof(Uint32) == 4)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(sint32, sizeof(Sint32) == 4)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(uint64, sizeof(Uint64) == 8)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(sint64, sizeof(Sint64) == 8)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef DOXYGEN_SHOULD_IGNORE_THIS # if !)",
    "insertText": "defined(__ANDROID__) && !defined(__VITA__) && !defined(__3DS__)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (DUMMY_ENUM_VALUE } SDL_DUMMY_ENUM ;)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(enum, sizeof(SDL_DUMMY_ENUM) == sizeof(int))"
  },
  {
    "label": "SDL_stack_alloc()",
    "kind": "Method",
    "detail": "Function (# endif # endif # include \" begin_code . h \" # ifdef __cplusplus \" C \" { # endif # ifdef HAVE_ALLOCA # define)",
    "insertText": "SDL_stack_alloc(type, count) (type*)alloca(sizeof(type)*(count)) #define SDL_stack_free(data) #else #define SDL_stack_alloc(type, count) (type*)SDL_malloc(sizeof(type)*(count)) #define SDL_stack_free(data) SDL_free(data) #endif extern DECLSPEC void *SDLCALL SDL_malloc(size_t size)"
  },
  {
    "label": "SDL_calloc()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_calloc(size_t nmemb, size_t size)"
  },
  {
    "label": "SDL_realloc()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_realloc(void *mem, size_t size)"
  },
  {
    "label": "SDL_free()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_free(void *mem)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(SDLCALL *SDL_malloc_func)(size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(SDLCALL *SDL_calloc_func)(size_t nmemb, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(SDLCALL *SDL_realloc_func)(void *mem, size_t size)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(SDLCALL *SDL_free_func)(void *mem)"
  },
  {
    "label": "SDL_GetOriginalMemoryFunctions()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_GetOriginalMemoryFunctions(SDL_malloc_func *malloc_func, SDL_calloc_func *calloc_func, SDL_realloc_func *realloc_func, SDL_free_func *free_func)"
  },
  {
    "label": "SDL_GetMemoryFunctions()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_GetMemoryFunctions(SDL_malloc_func *malloc_func, SDL_calloc_func *calloc_func, SDL_realloc_func *realloc_func, SDL_free_func *free_func)"
  },
  {
    "label": "SDL_SetMemoryFunctions()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_SetMemoryFunctions(SDL_malloc_func malloc_func, SDL_calloc_func calloc_func, SDL_realloc_func realloc_func, SDL_free_func free_func)"
  },
  {
    "label": "SDL_GetNumAllocations()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_GetNumAllocations(void)"
  },
  {
    "label": "SDL_getenv()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_getenv(const char *name)"
  },
  {
    "label": "SDL_setenv()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_setenv(const char *name, const char *value, int overwrite)"
  },
  {
    "label": "SDL_qsort()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void SDLCALL)",
    "insertText": "SDL_qsort(void *base, size_t nmemb, size_t size, int (SDLCALL *compare) (const void *, const void *))"
  },
  {
    "label": "SDL_bsearch()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_bsearch(const void *key, const void *base, size_t nmemb, size_t size, int (SDLCALL *compare) (const void *, const void *))"
  },
  {
    "label": "SDL_abs()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_abs(int x)"
  },
  {
    "label": "SDL_min()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_min(x, y) (((x) < (y)) ? (x) : (y)) #define SDL_max(x, y) (((x) > (y)) ? (x) : (y)) #define SDL_clamp(x, a, b) (((x) < (a)) ? (a) : (((x) > (b)) ? (b) : (x))) extern DECLSPEC int SDLCALL SDL_isalpha(int x)"
  },
  {
    "label": "SDL_isalnum()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isalnum(int x)"
  },
  {
    "label": "SDL_isblank()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isblank(int x)"
  },
  {
    "label": "SDL_iscntrl()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_iscntrl(int x)"
  },
  {
    "label": "SDL_isdigit()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isdigit(int x)"
  },
  {
    "label": "SDL_isxdigit()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isxdigit(int x)"
  },
  {
    "label": "SDL_ispunct()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_ispunct(int x)"
  },
  {
    "label": "SDL_isspace()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isspace(int x)"
  },
  {
    "label": "SDL_isupper()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isupper(int x)"
  },
  {
    "label": "SDL_islower()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_islower(int x)"
  },
  {
    "label": "SDL_isprint()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isprint(int x)"
  },
  {
    "label": "SDL_isgraph()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_isgraph(int x)"
  },
  {
    "label": "SDL_toupper()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_toupper(int x)"
  },
  {
    "label": "SDL_tolower()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_tolower(int x)"
  },
  {
    "label": "SDL_crc16()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint16 SDLCALL)",
    "insertText": "SDL_crc16(Uint16 crc, const void *data, size_t len)"
  },
  {
    "label": "SDL_crc32()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint32 SDLCALL)",
    "insertText": "SDL_crc32(Uint32 crc, const void *data, size_t len)"
  },
  {
    "label": "SDL_memset()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_memset(SDL_OUT_BYTECAP(len) void *dst, int c, size_t len)"
  },
  {
    "label": "SDL_zero()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_zero(x) SDL_memset(&(x), 0, sizeof((x))) #define SDL_zerop(x) SDL_memset((x), 0, sizeof(*(x))) #define SDL_zeroa(x) SDL_memset((x), 0, sizeof((x))) #define SDL_copyp(dst, src)"
  },
  {
    "label": "SDL_COMPILE_TIME_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SDL_COMPILE_TIME_ASSERT(SDL_copyp, sizeof (*(dst)) == sizeof (*(src)))"
  },
  {
    "label": "SDL_memcpy()",
    "kind": "Method",
    "detail": "Function (} \\)",
    "insertText": "SDL_memcpy((dst), (src), sizeof (*(src))) SDL_FORCE_INLINE void SDL_memset4(void *dst, Uint32 val, size_t dwords)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "defined(__GNUC__) && defined(__i386__)"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (__asm__)",
    "insertText": "__volatile__(\"cld \\n\\t\" \"rep ; stosl \\n\\t\" : \"=&D\" (u0), \"=&a\" (u1), \"=&c\" (u2) : \"0\" (dst), \"1\" (val), \"2\" (SDL_static_cast(Uint32, dwords)) : \"memory\")"
  },
  {
    "label": "_n()",
    "kind": "Method",
    "detail": "Function (# else size_t)",
    "insertText": "_n(dwords + 3)"
  },
  {
    "label": "SDL_static_cast()",
    "kind": "Method",
    "detail": "Function (Uint32* _p =)",
    "insertText": "SDL_static_cast(Uint32 *, dst)"
  },
  {
    "label": "_val()",
    "kind": "Method",
    "detail": "Function (Uint32)",
    "insertText": "_val(val)"
  },
  {
    "label": "SDL_memcpy()",
    "kind": "Method",
    "detail": "Function (} # endif } DECLSPEC void* SDLCALL)",
    "insertText": "SDL_memcpy(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)"
  },
  {
    "label": "SDL_memmove()",
    "kind": "Method",
    "detail": "Function (DECLSPEC void* SDLCALL)",
    "insertText": "SDL_memmove(SDL_OUT_BYTECAP(len) void *dst, SDL_IN_BYTECAP(len) const void *src, size_t len)"
  },
  {
    "label": "SDL_memcmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_memcmp(const void *s1, const void *s2, size_t len)"
  },
  {
    "label": "SDL_wcslen()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_wcslen(const wchar_t *wstr)"
  },
  {
    "label": "SDL_wcslcpy()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_wcslcpy(SDL_OUT_Z_CAP(maxlen) wchar_t *dst, const wchar_t *src, size_t maxlen)"
  },
  {
    "label": "SDL_wcslcat()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_wcslcat(SDL_INOUT_Z_CAP(maxlen) wchar_t *dst, const wchar_t *src, size_t maxlen)"
  },
  {
    "label": "SDL_wcsdup()",
    "kind": "Method",
    "detail": "Function (DECLSPEC wchar_t* SDLCALL)",
    "insertText": "SDL_wcsdup(const wchar_t *wstr)"
  },
  {
    "label": "SDL_wcsstr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC wchar_t* SDLCALL)",
    "insertText": "SDL_wcsstr(const wchar_t *haystack, const wchar_t *needle)"
  },
  {
    "label": "SDL_wcscmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_wcscmp(const wchar_t *str1, const wchar_t *str2)"
  },
  {
    "label": "SDL_wcsncmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_wcsncmp(const wchar_t *str1, const wchar_t *str2, size_t maxlen)"
  },
  {
    "label": "SDL_wcscasecmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_wcscasecmp(const wchar_t *str1, const wchar_t *str2)"
  },
  {
    "label": "SDL_wcsncasecmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_wcsncasecmp(const wchar_t *str1, const wchar_t *str2, size_t len)"
  },
  {
    "label": "SDL_strlen()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_strlen(const char *str)"
  },
  {
    "label": "SDL_strlcpy()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_strlcpy(SDL_OUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen)"
  },
  {
    "label": "SDL_utf8strlcpy()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_utf8strlcpy(SDL_OUT_Z_CAP(dst_bytes) char *dst, const char *src, size_t dst_bytes)"
  },
  {
    "label": "SDL_strlcat()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_strlcat(SDL_INOUT_Z_CAP(maxlen) char *dst, const char *src, size_t maxlen)"
  },
  {
    "label": "SDL_strdup()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strdup(const char *str)"
  },
  {
    "label": "SDL_strrev()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strrev(char *str)"
  },
  {
    "label": "SDL_strupr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strupr(char *str)"
  },
  {
    "label": "SDL_strlwr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strlwr(char *str)"
  },
  {
    "label": "SDL_strchr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strchr(const char *str, int c)"
  },
  {
    "label": "SDL_strrchr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strrchr(const char *str, int c)"
  },
  {
    "label": "SDL_strstr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strstr(const char *haystack, const char *needle)"
  },
  {
    "label": "SDL_strcasestr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strcasestr(const char *haystack, const char *needle)"
  },
  {
    "label": "SDL_strtokr()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_strtokr(char *s1, const char *s2, char **saveptr)"
  },
  {
    "label": "SDL_utf8strlen()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_utf8strlen(const char *str)"
  },
  {
    "label": "SDL_utf8strnlen()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_utf8strnlen(const char *str, size_t bytes)"
  },
  {
    "label": "SDL_itoa()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_itoa(int value, char *str, int radix)"
  },
  {
    "label": "SDL_uitoa()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_uitoa(unsigned int value, char *str, int radix)"
  },
  {
    "label": "SDL_ltoa()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_ltoa(long value, char *str, int radix)"
  },
  {
    "label": "SDL_ultoa()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_ultoa(unsigned long value, char *str, int radix)"
  },
  {
    "label": "SDL_lltoa()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_lltoa(Sint64 value, char *str, int radix)"
  },
  {
    "label": "SDL_ulltoa()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_ulltoa(Uint64 value, char *str, int radix)"
  },
  {
    "label": "SDL_atoi()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_atoi(const char *str)"
  },
  {
    "label": "SDL_atof()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_atof(const char *str)"
  },
  {
    "label": "SDL_strtol()",
    "kind": "Method",
    "detail": "Function (DECLSPEC long SDLCALL)",
    "insertText": "SDL_strtol(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtoul()",
    "kind": "Method",
    "detail": "Function (DECLSPEC unsigned long SDLCALL)",
    "insertText": "SDL_strtoul(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtoll()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Sint64 SDLCALL)",
    "insertText": "SDL_strtoll(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtoull()",
    "kind": "Method",
    "detail": "Function (DECLSPEC Uint64 SDLCALL)",
    "insertText": "SDL_strtoull(const char *str, char **endp, int base)"
  },
  {
    "label": "SDL_strtod()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_strtod(const char *str, char **endp)"
  },
  {
    "label": "SDL_strcmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_strcmp(const char *str1, const char *str2)"
  },
  {
    "label": "SDL_strncmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_strncmp(const char *str1, const char *str2, size_t maxlen)"
  },
  {
    "label": "SDL_strcasecmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_strcasecmp(const char *str1, const char *str2)"
  },
  {
    "label": "SDL_strncasecmp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_strncasecmp(const char *str1, const char *str2, size_t len)"
  },
  {
    "label": "SDL_sscanf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_sscanf(const char *text, SDL_SCANF_FORMAT_STRING const char *fmt, ...) SDL_SCANF_VARARG_FUNC(2)"
  },
  {
    "label": "SDL_vsscanf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_vsscanf(const char *text, SDL_SCANF_FORMAT_STRING const char *fmt, va_list ap) SDL_SCANF_VARARG_FUNCV(2)"
  },
  {
    "label": "SDL_snprintf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_snprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, SDL_PRINTF_FORMAT_STRING const char *fmt, ... ) SDL_PRINTF_VARARG_FUNC(3)"
  },
  {
    "label": "SDL_vsnprintf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_vsnprintf(SDL_OUT_Z_CAP(maxlen) char *text, size_t maxlen, SDL_PRINTF_FORMAT_STRING const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(3)"
  },
  {
    "label": "SDL_asprintf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_asprintf(char **strp, SDL_PRINTF_FORMAT_STRING const char *fmt, ...) SDL_PRINTF_VARARG_FUNC(2)"
  },
  {
    "label": "SDL_vasprintf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_vasprintf(char **strp, SDL_PRINTF_FORMAT_STRING const char *fmt, va_list ap) SDL_PRINTF_VARARG_FUNCV(2)"
  },
  {
    "label": "SDL_acos()",
    "kind": "Method",
    "detail": "Function (# ifndef HAVE_M_PI # ifndef M_PI # define M_PI 3 . 1 4 1 5 9 2 6 5 3 5 8 9 7 9 3 2 3 8 4 6 2 6 4 3 3 8 3 2 7 9 5 0 2 8 8 # endif # endif DECLSPEC double SDLCALL)",
    "insertText": "SDL_acos(double x)"
  },
  {
    "label": "SDL_acosf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_acosf(float x)"
  },
  {
    "label": "SDL_asin()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_asin(double x)"
  },
  {
    "label": "SDL_asinf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_asinf(float x)"
  },
  {
    "label": "SDL_atan()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_atan(double x)"
  },
  {
    "label": "SDL_atanf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_atanf(float x)"
  },
  {
    "label": "SDL_atan2()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_atan2(double y, double x)"
  },
  {
    "label": "SDL_atan2f()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_atan2f(float y, float x)"
  },
  {
    "label": "SDL_ceil()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_ceil(double x)"
  },
  {
    "label": "SDL_ceilf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_ceilf(float x)"
  },
  {
    "label": "SDL_copysign()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_copysign(double x, double y)"
  },
  {
    "label": "SDL_copysignf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_copysignf(float x, float y)"
  },
  {
    "label": "SDL_cos()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_cos(double x)"
  },
  {
    "label": "SDL_cosf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_cosf(float x)"
  },
  {
    "label": "SDL_exp()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_exp(double x)"
  },
  {
    "label": "SDL_expf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_expf(float x)"
  },
  {
    "label": "SDL_fabs()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_fabs(double x)"
  },
  {
    "label": "SDL_fabsf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_fabsf(float x)"
  },
  {
    "label": "SDL_floor()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_floor(double x)"
  },
  {
    "label": "SDL_floorf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_floorf(float x)"
  },
  {
    "label": "SDL_trunc()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_trunc(double x)"
  },
  {
    "label": "SDL_truncf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_truncf(float x)"
  },
  {
    "label": "SDL_fmod()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_fmod(double x, double y)"
  },
  {
    "label": "SDL_fmodf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_fmodf(float x, float y)"
  },
  {
    "label": "SDL_log()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_log(double x)"
  },
  {
    "label": "SDL_logf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_logf(float x)"
  },
  {
    "label": "SDL_log10()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_log10(double x)"
  },
  {
    "label": "SDL_log10f()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_log10f(float x)"
  },
  {
    "label": "SDL_pow()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_pow(double x, double y)"
  },
  {
    "label": "SDL_powf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_powf(float x, float y)"
  },
  {
    "label": "SDL_round()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_round(double x)"
  },
  {
    "label": "SDL_roundf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_roundf(float x)"
  },
  {
    "label": "SDL_lround()",
    "kind": "Method",
    "detail": "Function (DECLSPEC long SDLCALL)",
    "insertText": "SDL_lround(double x)"
  },
  {
    "label": "SDL_lroundf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC long SDLCALL)",
    "insertText": "SDL_lroundf(float x)"
  },
  {
    "label": "SDL_scalbn()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_scalbn(double x, int n)"
  },
  {
    "label": "SDL_scalbnf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_scalbnf(float x, int n)"
  },
  {
    "label": "SDL_sin()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_sin(double x)"
  },
  {
    "label": "SDL_sinf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_sinf(float x)"
  },
  {
    "label": "SDL_sqrt()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_sqrt(double x)"
  },
  {
    "label": "SDL_sqrtf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_sqrtf(float x)"
  },
  {
    "label": "SDL_tan()",
    "kind": "Method",
    "detail": "Function (DECLSPEC double SDLCALL)",
    "insertText": "SDL_tan(double x)"
  },
  {
    "label": "SDL_tanf()",
    "kind": "Method",
    "detail": "Function (DECLSPEC float SDLCALL)",
    "insertText": "SDL_tanf(float x)"
  },
  {
    "label": "SDL_ICONV_ERROR()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_ICONV_ERROR(size_t)-1 #define SDL_ICONV_E2BIG (size_t)-2 #define SDL_ICONV_EILSEQ (size_t)-3 #define SDL_ICONV_EINVAL (size_t)"
  },
  {
    "label": "SDL_iconv_open()",
    "kind": "Method",
    "detail": "Function (DECLSPEC SDL_iconv_t SDLCALL)",
    "insertText": "SDL_iconv_open(const char *tocode, const char *fromcode)"
  },
  {
    "label": "SDL_iconv_close()",
    "kind": "Method",
    "detail": "Function (DECLSPEC int SDLCALL)",
    "insertText": "SDL_iconv_close(SDL_iconv_t cd)"
  },
  {
    "label": "SDL_iconv()",
    "kind": "Method",
    "detail": "Function (DECLSPEC size_t SDLCALL)",
    "insertText": "SDL_iconv(SDL_iconv_t cd, const char **inbuf, size_t * inbytesleft, char **outbuf, size_t * outbytesleft)"
  },
  {
    "label": "SDL_iconv_string()",
    "kind": "Method",
    "detail": "Function (DECLSPEC char* SDLCALL)",
    "insertText": "SDL_iconv_string(const char *tocode, const char *fromcode, const char *inbuf, size_t inbytesleft)"
  },
  {
    "label": "SDL_iconv_utf8_locale()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "SDL_iconv_utf8_locale(S) SDL_iconv_string(\"\", \"UTF-8\", S, SDL_strlen(S)+1) #define SDL_iconv_utf8_ucs2(S) (Uint16 *)SDL_iconv_string(\"UCS-2\", \"UTF-8\", S, SDL_strlen(S)+1) #define SDL_iconv_utf8_ucs4(S) (Uint32 *)SDL_iconv_string(\"UCS-4\", \"UTF-8\", S, SDL_strlen(S)+1) #define SDL_iconv_wchar_utf8(S) SDL_iconv_string(\"UTF-8\", \"WCHAR_T\", (char *)S, (SDL_wcslen(S)+1)*sizeof(wchar_t)) #if defined(__clang_analyzer__) && !defined(SDL_DISABLE_ANALYZE_MACROS) #ifndef HAVE_STRLCPY size_t strlcpy(char* dst, const char* src, size_t size)"
  },
  {
    "label": "strlcat()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef HAVE_STRLCAT size_t)",
    "insertText": "strlcat(char* dst, const char* src, size_t size)"
  },
  {
    "label": "wcslcpy()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef HAVE_WCSLCPY size_t)",
    "insertText": "wcslcpy(wchar_t *dst, const wchar_t *src, size_t size)"
  },
  {
    "label": "wcslcat()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef HAVE_WCSLCAT size_t)",
    "insertText": "wcslcat(wchar_t *dst, const wchar_t *src, size_t size)"
  },
  {
    "label": "SDL_memcpy4()",
    "kind": "Method",
    "detail": "Function (# endif # include<stdlib . h> # include<string . h> # include<stdio . h> # define SDL_malloc malloc # define SDL_calloc calloc # define SDL_realloc realloc # define SDL_free free # define SDL_memset memset # define SDL_memcpy memcpy # define SDL_memmove memmove # define SDL_memcmp memcmp # define SDL_strlcpy strlcpy # define SDL_strlcat strlcat # define SDL_strlen strlen # define SDL_wcslen wcslen # define SDL_wcslcpy wcslcpy # define SDL_wcslcat wcslcat # define SDL_strdup strdup # define SDL_wcsdup wcsdup # define SDL_strchr strchr # define SDL_strrchr strrchr # define SDL_strstr strstr # define SDL_wcsstr wcsstr # define SDL_strtokr strtok_r # define SDL_strcmp strcmp # define SDL_wcscmp wcscmp # define SDL_strncmp strncmp # define SDL_wcsncmp wcsncmp # define SDL_strcasecmp strcasecmp # define SDL_strncasecmp strncasecmp # define SDL_sscanf sscanf # define SDL_vsscanf vsscanf # define SDL_snprintf snprintf # define SDL_vsnprintf vsnprintf # endif SDL_FORCE_INLINE void*)",
    "insertText": "SDL_memcpy4(SDL_OUT_BYTECAP(dwords*4) void *dst, SDL_IN_BYTECAP(dwords*4) const void *src, size_t dwords)"
  },
  {
    "label": "SDL_size_mul_overflow()",
    "kind": "Method",
    "detail": "Function (} SDL_FORCE_INLINE int)",
    "insertText": "SDL_size_mul_overflow(size_t a, size_t b, size_t *ret)"
  },
  {
    "label": "SDL_size_mul_overflow()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "SDL_size_mul_overflow(a, b, ret) (_SDL_size_mul_overflow_builtin(a, b, ret)) #endif SDL_FORCE_INLINE int SDL_size_add_overflow (size_t a, size_t b, size_t *ret)"
  }
]