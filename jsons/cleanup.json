[
  {
    "label": "Tag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tag"
  },
  {
    "label": "Storage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Storage"
  },
  {
    "label": "WasDeduced()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CLEANUP_INTERNAL_CLEANUP_H_ # define ABSL_CLEANUP_INTERNAL_CLEANUP_H_ # include<new> # include<type_traits> # include<utility> # include \" absl / base / internal / invoke . h \" # include \" absl / base / macros . h \" # include \" absl / base / thread_annotations . h \" # include \" absl / utility / utility . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace cleanup_internal { struct Tag { } ; template<Arg,. . . Args> bool)",
    "insertText": "WasDeduced()"
  },
  {
    "label": "ReturnsVoid()",
    "kind": "Method",
    "detail": "Function (} template<Callback> bool)",
    "insertText": "ReturnsVoid()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (} template<Callback> class Storage { public :)",
    "insertText": "Storage()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Storage(Callback callback)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(GetCallbackBuffer()) Callback(std::move(callback))"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (is_callback_engaged_ = true ; })",
    "insertText": "Storage(Storage&& other)"
  },
  {
    "label": "ABSL_HARDENING_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ABSL_HARDENING_ASSERT(other.IsCallbackEngaged())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(GetCallbackBuffer()) Callback(std::move(other.GetCallback()))"
  },
  {
    "label": "DestroyCallback()",
    "kind": "Method",
    "detail": "Function (is_callback_engaged_ = true ; other .)",
    "insertText": "DestroyCallback()"
  },
  {
    "label": "Storage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Storage(const Storage& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Storage&)",
    "insertText": "operator(Storage&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Storage&)",
    "insertText": "operator(const Storage& other)"
  },
  {
    "label": "GetCallbackBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetCallbackBuffer()"
  },
  {
    "label": "GetCallback()",
    "kind": "Method",
    "detail": "Function (} Callback&)",
    "insertText": "GetCallback()"
  },
  {
    "label": "IsCallbackEngaged()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsCallbackEngaged()"
  },
  {
    "label": "GetCallback()",
    "kind": "Method",
    "detail": "Function (is_callback_engaged_ = false ;)",
    "insertText": "GetCallback().~Callback()"
  },
  {
    "label": "InvokeCallback()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InvokeCallback()"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "move(GetCallback())()"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (} private : bool is_callback_engaged_ ;)",
    "insertText": "alignas(Callback) char callback_buffer_[sizeof(Callback)"
  }
]