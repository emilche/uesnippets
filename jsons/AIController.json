[
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UAIPerceptionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionComponent"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "UBrainComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrainComponent"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UGameplayTaskResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTaskResource"
  },
  {
    "label": "UGameplayTasksComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTasksComponent"
  },
  {
    "label": "UPathFollowingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPathFollowingComponent"
  },
  {
    "label": "UDEPRECATED_PawnAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_PawnAction"
  },
  {
    "label": "UDEPRECATED_PawnActionsComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_PawnActionsComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FPathFindingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingQuery"
  },
  {
    "label": "FPathFollowingRequestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFollowingRequestResult"
  },
  {
    "label": "FPathFollowingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFollowingResult"
  },
  {
    "label": "is",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "is"
  },
  {
    "label": "FFocusKnowledge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusKnowledge"
  },
  {
    "label": "FFocusItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusItem"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "holding",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "holding"
  },
  {
    "label": "code",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "code"
  },
  {
    "label": "without",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "without"
  },
  {
    "label": "MoveToActor()",
    "kind": "Method",
    "detail": "Function (EPathFollowingRequestResult::Type)",
    "insertText": "MoveToActor(AActor* Goal, float AcceptanceRadius = -1, bool bStopOnOverlap = true,\n\t\tbool bUsePathfinding = true, bool bCanStrafe = true,\n\t\tTSubclassOf<UNavigationQueryFilter> FilterClass = NULL, bool bAllowPartialPath = true)"
  },
  {
    "label": "MoveToLocation()",
    "kind": "Method",
    "detail": "Function (EPathFollowingRequestResult::Type)",
    "insertText": "MoveToLocation(const FVector& Dest, float AcceptanceRadius = -1, bool bStopOnOverlap = true,\n\t\tbool bUsePathfinding = true, bool bProjectDestinationToNavigation = false, bool bCanStrafe = true,\n\t\tTSubclassOf<UNavigationQueryFilter> FilterClass = NULL, bool bAllowPartialPath = true)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (FPathFollowingRequestResult)",
    "insertText": "MoveTo(const FAIMoveRequest& MoveRequest, FNavPathSharedPtr* OutPath = nullptr)"
  },
  {
    "label": "RequestMove()",
    "kind": "Method",
    "detail": "Function (FAIRequestID)",
    "insertText": "RequestMove(const FAIMoveRequest& MoveRequest, FNavPathSharedPtr Path)"
  },
  {
    "label": "PreparePathfinding()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreparePathfinding(const FAIMoveRequest& MoveRequest, FPathFindingQuery& Query)"
  },
  {
    "label": "RequestPathAndMove()",
    "kind": "Method",
    "detail": "Function (FAIRequestID)",
    "insertText": "RequestPathAndMove(const FAIMoveRequest& MoveRequest, FPathFindingQuery& Query)"
  },
  {
    "label": "PauseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PauseMove(FAIRequestID RequestToPause)"
  },
  {
    "label": "ResumeMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResumeMove(FAIRequestID RequestToResume)"
  },
  {
    "label": "OnMoveCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMoveCompleted(FAIRequestID RequestID, const FPathFollowingResult& Result)"
  },
  {
    "label": "OnMoveCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMoveCompleted(FAIRequestID RequestID, EPathFollowingResult::Type Result)"
  },
  {
    "label": "SetMoveBlockDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMoveBlockDetection(bool bEnable)"
  },
  {
    "label": "RunBehaviorTree()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RunBehaviorTree(UBehaviorTree* BTAsset)"
  },
  {
    "label": "CleanupBrainComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupBrainComponent()"
  },
  {
    "label": "UseBlackboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseBlackboard(UBlackboardData* BlackboardAsset, UBlackboardComponent*& BlackboardComponent)"
  },
  {
    "label": "ClaimTaskResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClaimTaskResource(TSubclassOf<UGameplayTaskResource> ResourceClass)"
  },
  {
    "label": "UnclaimTaskResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnclaimTaskResource(TSubclassOf<UGameplayTaskResource> ResourceClass)"
  },
  {
    "label": "OnUsingBlackBoard()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUsingBlackBoard(UBlackboardComponent* BlackboardComp, UBlackboardData* BlackboardAsset)"
  },
  {
    "label": "InitializeBlackboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeBlackboard(UBlackboardComponent& BlackboardComp, UBlackboardData& BlackboardAsset)"
  },
  {
    "label": "K2_SetFocalPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_SetFocalPoint(FVector FP)"
  },
  {
    "label": "K2_SetFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_SetFocus(AActor* NewFocus)"
  },
  {
    "label": "K2_ClearFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "K2_ClearFocus()"
  },
  {
    "label": "SuggestTossVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuggestTossVelocity(FVector& OutTossVelocity, FVector Start, FVector End, float TossSpeed, bool bPreferHighArc, float CollisionRadius = 0, bool bOnlyTraceUp = false)"
  },
  {
    "label": "ActorsPerceptionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorsPerceptionUpdated(const TArray<AActor*>& UpdatedActors)"
  },
  {
    "label": "UpdateControlRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateControlRotation(float DeltaTime, bool bUpdatePawn = true)"
  },
  {
    "label": "SetFocalPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocalPoint(FVector NewFocus, EAIFocusPriority::Type InPriority = EAIFocusPriority::Gameplay)"
  },
  {
    "label": "SetFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocus(AActor* NewFocus, EAIFocusPriority::Type InPriority = EAIFocusPriority::Gameplay)"
  },
  {
    "label": "ClearFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFocus(EAIFocusPriority::Type InPriority)"
  },
  {
    "label": "SetPerceptionComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerceptionComponent(UAIPerceptionComponent& InPerceptionComponent)"
  },
  {
    "label": "GetAIPerceptionComponent()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetAIPerceptionComponent()"
  },
  {
    "label": "GetGameplayTasksComponent()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetGameplayTasksComponent()"
  },
  {
    "label": "GetPawn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetPawn()"
  },
  {
    "label": "OnGameplayTaskResourcesClaimed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGameplayTaskResourcesClaimed(FGameplayResourceSet NewlyClaimed, FGameplayResourceSet FreshlyReleased)"
  },
  {
    "label": "SetPathFollowingComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPathFollowingComponent(UPathFollowingComponent* NewPFComponent)"
  },
  {
    "label": "PerformAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PerformAction(UDEPRECATED_PawnAction& Action, EAIRequestPriority::Type Priority, UObject* const Instigator = NULL)"
  }
]