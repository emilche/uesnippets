[
  {
    "label": "FDebugDisplayInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDebugDisplayInfo"
  },
  {
    "label": "UAIPerceptionComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAIPerceptionComponent"
  },
  {
    "label": "UBehaviorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBehaviorTree"
  },
  {
    "label": "UBlackboardComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardComponent"
  },
  {
    "label": "UBlackboardData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlackboardData"
  },
  {
    "label": "UBrainComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBrainComponent"
  },
  {
    "label": "UCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UCanvas"
  },
  {
    "label": "UGameplayTaskResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTaskResource"
  },
  {
    "label": "UGameplayTasksComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UGameplayTasksComponent"
  },
  {
    "label": "UPathFollowingComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPathFollowingComponent"
  },
  {
    "label": "UDEPRECATED_PawnAction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_PawnAction"
  },
  {
    "label": "UDEPRECATED_PawnActionsComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDEPRECATED_PawnActionsComponent"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FVisualLogEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVisualLogEntry"
  },
  {
    "label": "FPathFindingQuery",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFindingQuery"
  },
  {
    "label": "FPathFollowingRequestResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFollowingRequestResult"
  },
  {
    "label": "FPathFollowingResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPathFollowingResult"
  },
  {
    "label": "FFocusKnowledge",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusKnowledge"
  },
  {
    "label": "FFocusItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFocusItem"
  },
  {
    "label": "AAIController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AAIController"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" Templates / SubclassOf . h \" # include \" EngineDefines . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" NavFilters / NavigationQueryFilter . h \" # endif # include \" AITypes . h \" # include \" GameplayTaskOwnerInterface . h \" # include \" GameplayTask . h \" # include \" GameFramework / Pawn . h \" # include \" GameFramework / Controller . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_2 # include \" Navigation / PathFollowingComponent . h \" # endif # include \" Perception / AIPerceptionListenerInterface . h \" # include \" GenericTeamAgentInterface . h \" # include \" VisualLogger / VisualLoggerDebugSnapshotInterface . h \" # include \" AIController . generated . h \" class FDebugDisplayInfo ; class UAIPerceptionComponent ; class UBehaviorTree ; class UBlackboardComponent ; class UBlackboardData ; class UBrainComponent ; class UCanvas ; class UGameplayTaskResource ; class UGameplayTasksComponent ; class UPathFollowingComponent ; class UDEPRECATED_PawnAction ; class UDEPRECATED_PawnActionsComponent ; namespace EPathFollowingRequestResult { enum Type : int ; } namespace EPathFollowingResult { enum Type : int ; } namespace EPathFollowingStatus { enum Type : int ; } # if ENABLE_VISUAL_LOG struct FVisualLogEntry ; # endif struct FPathFindingQuery ; struct FPathFollowingRequestResult ; struct FPathFollowingResult ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FAIMoveCompletedSignature, FAIRequestID, RequestID, EPathFollowingResult::Type, Result)"
  },
  {
    "label": "FFocusItem()",
    "kind": "Method",
    "detail": "Function (namespace EAIFocusPriority { typedef uint8 Type ; const Type Default = 0 ; const Type Move = 1 ; const Type Gameplay = 2 ; const Type LastFocusPriority = Gameplay ; } struct FFocusKnowledge { struct FFocusItem { TWeakObjectPtr<AActor> Actor ; FVector Position ;)",
    "insertText": "FFocusItem()"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Actor = nullptr ; Position = FAISystem::InvalidLocation ; } } ; TArray<FFocusItem> Priorities ; } ;)",
    "insertText": "UCLASS(ClassGroup = AI, BlueprintType, Blueprintable, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "AAIController()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "AAIController(const FObjectInitializer& ObjectInitializer = FObjectInitializer::Get())"
  },
  {
    "label": "SetPawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPawn(APawn* InPawn)"
  },
  {
    "label": "MoveTo()",
    "kind": "Method",
    "detail": "Function (FPathFollowingRequestResult)",
    "insertText": "MoveTo(const FAIMoveRequest& MoveRequest, FNavPathSharedPtr* OutPath = nullptr)"
  },
  {
    "label": "RequestMove()",
    "kind": "Method",
    "detail": "Function (FAIRequestID)",
    "insertText": "RequestMove(const FAIMoveRequest& MoveRequest, FNavPathSharedPtr Path)"
  },
  {
    "label": "FindPathForMoveRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPathForMoveRequest(const FAIMoveRequest& MoveRequest, FPathFindingQuery& Query, FNavPathSharedPtr& OutPath)"
  },
  {
    "label": "BuildPathfindingQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildPathfindingQuery(const FAIMoveRequest& MoveRequest, FPathFindingQuery& OutQuery)"
  },
  {
    "label": "BuildPathfindingQuery()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BuildPathfindingQuery(const FAIMoveRequest& MoveRequest, const FVector& StartLocation, FPathFindingQuery& OutQuery)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(4.13, \"This function is now deprecated, please use FindPathForMoveRequest() for adjusting Query or BuildPathfindingQuery() for getting one.\") AIMODULE_API virtual bool PreparePathfinding(const FAIMoveRequest& MoveRequest, FPathFindingQuery& Query)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(4.13, \"This function is now deprecated, please use FindPathForMoveRequest() for adjusting pathfinding or path postprocess.\") AIMODULE_API virtual FAIRequestID RequestPathAndMove(const FAIMoveRequest& MoveRequest, FPathFindingQuery& Query)"
  },
  {
    "label": "PauseMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PauseMove(FAIRequestID RequestToPause)"
  },
  {
    "label": "ResumeMove()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResumeMove(FAIRequestID RequestToResume)"
  },
  {
    "label": "StopMovement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopMovement()"
  },
  {
    "label": "OnMoveCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMoveCompleted(FAIRequestID RequestID, const FPathFollowingResult& Result)"
  },
  {
    "label": "UE_DEPRECATED_FORGAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DEPRECATED_FORGAME(4.13, \"This function is now deprecated, please use version with EPathFollowingResultDetails parameter.\") AIMODULE_API virtual void OnMoveCompleted(FAIRequestID RequestID, EPathFollowingResult::Type Result)"
  },
  {
    "label": "GetCurrentMoveRequestID()",
    "kind": "Method",
    "detail": "Function (FAIRequestID)",
    "insertText": "GetCurrentMoveRequestID()"
  },
  {
    "label": "GetDefaultNavigationFilterClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UNavigationQueryFilter>)",
    "insertText": "GetDefaultNavigationFilterClass()"
  },
  {
    "label": "CleanupBrainComponent()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "CleanupBrainComponent()"
  },
  {
    "label": "MergePaths()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MergePaths(const FNavPathSharedPtr& InitialPath, FNavPathSharedPtr& InOutMergedPath)"
  },
  {
    "label": "ShouldSyncBlackboardWith()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSyncBlackboardWith(const UBlackboardComponent& OtherBlackboardComponent)"
  },
  {
    "label": "InitializeBlackboard()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitializeBlackboard(UBlackboardComponent& BlackboardComp, UBlackboardData& BlackboardAsset)"
  },
  {
    "label": "GetFocalPointForPriority()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetFocalPointForPriority(EAIFocusPriority::Type InPriority)"
  },
  {
    "label": "SuggestTossVelocity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SuggestTossVelocity(FVector& OutTossVelocity, FVector Start, FVector End, float TossSpeed, bool bPreferHighArc, float CollisionRadius = 0, bool bOnlyTraceUp = false)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "PostRegisterAllComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegisterAllComponents()"
  },
  {
    "label": "OnPossess()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnPossess(APawn* InPawn)"
  },
  {
    "label": "OnUnPossess()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnPossess()"
  },
  {
    "label": "ShouldPostponePathUpdates()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ShouldPostponePathUpdates()"
  },
  {
    "label": "DisplayDebug()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplayDebug(UCanvas* Canvas, const FDebugDisplayInfo& DebugDisplay, float& YL, float& YPos)"
  },
  {
    "label": "GrabDebugSnapshot()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VISUAL_LOG void)",
    "insertText": "GrabDebugSnapshot(FVisualLogEntry* Snapshot)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "Reset()"
  },
  {
    "label": "LineOfSightTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LineOfSightTo(const AActor* Other, FVector ViewPoint = FVector(ForceInit), bool bAlternateChecks = false)"
  },
  {
    "label": "ActorsPerceptionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ActorsPerceptionUpdated(const TArray<AActor*>& UpdatedActors)"
  },
  {
    "label": "UpdateControlRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateControlRotation(float DeltaTime, bool bUpdatePawn = true)"
  },
  {
    "label": "SetFocalPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocalPoint(FVector NewFocus, EAIFocusPriority::Type InPriority = EAIFocusPriority::Gameplay)"
  },
  {
    "label": "SetFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFocus(AActor* NewFocus, EAIFocusPriority::Type InPriority = EAIFocusPriority::Gameplay)"
  },
  {
    "label": "ClearFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearFocus(EAIFocusPriority::Type InPriority)"
  },
  {
    "label": "SetPerceptionComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerceptionComponent(UAIPerceptionComponent& InPerceptionComponent)"
  },
  {
    "label": "GetPerceptionComponent()",
    "kind": "Method",
    "detail": "Function (UAIPerceptionComponent*)",
    "insertText": "GetPerceptionComponent()"
  },
  {
    "label": "IsFollowingAPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFollowingAPath()"
  },
  {
    "label": "GetPathFollowingAgent()",
    "kind": "Method",
    "detail": "Function (IPathFollowingAgentInterface*)",
    "insertText": "GetPathFollowingAgent()"
  },
  {
    "label": "SetGenericTeamId()",
    "kind": "Method",
    "detail": "Function (private : FGenericTeamId TeamID ; public : void)",
    "insertText": "SetGenericTeamId(const FGenericTeamId& NewTeamID)"
  },
  {
    "label": "GetGenericTeamId()",
    "kind": "Method",
    "detail": "Function (FGenericTeamId)",
    "insertText": "GetGenericTeamId()"
  },
  {
    "label": "GetGameplayTaskOwner()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetGameplayTaskOwner(const UGameplayTask* Task)"
  },
  {
    "label": "GetGameplayTaskAvatar()",
    "kind": "Method",
    "detail": "Function (} AActor*)",
    "insertText": "GetGameplayTaskAvatar(const UGameplayTask* Task)"
  },
  {
    "label": "GetGameplayTaskDefaultPriority()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "GetGameplayTaskDefaultPriority()"
  },
  {
    "label": "OnGameplayTaskActivated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnGameplayTaskActivated(UGameplayTask& Task)"
  },
  {
    "label": "OnGameplayTaskDeactivated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnGameplayTaskDeactivated(UGameplayTask& Task)"
  },
  {
    "label": "GetDebugIcon()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDebugIcon()"
  },
  {
    "label": "ToggleAIIgnorePlayers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleAIIgnorePlayers()"
  },
  {
    "label": "AreAIIgnoringPlayers()",
    "kind": "Method",
    "detail": "Function (bAIIgnorePlayers = ! bAIIgnorePlayers ; } bool)",
    "insertText": "AreAIIgnoringPlayers()"
  }
]