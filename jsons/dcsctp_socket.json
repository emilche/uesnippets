[
  {
    "label": "DcSctpSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DcSctpSocket"
  },
  {
    "label": "ConnectParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ConnectParameters"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DcSctpSocket()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_SOCKET_DCSCTP_SOCKET_H_ # define NET_DCSCTP_SOCKET_DCSCTP_SOCKET_H_ # include<cstdint> # include<memory> # include<string> # include<utility> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / sequence_checker . h \" # include \" net / dcsctp / packet / chunk / abort_chunk . h \" # include \" net / dcsctp / packet / chunk / chunk . h \" # include \" net / dcsctp / packet / chunk / cookie_ack_chunk . h \" # include \" net / dcsctp / packet / chunk / cookie_echo_chunk . h \" # include \" net / dcsctp / packet / chunk / data_chunk . h \" # include \" net / dcsctp / packet / chunk / data_common . h \" # include \" net / dcsctp / packet / chunk / error_chunk . h \" # include \" net / dcsctp / packet / chunk / forward_tsn_chunk . h \" # include \" net / dcsctp / packet / chunk / forward_tsn_common . h \" # include \" net / dcsctp / packet / chunk / heartbeat_ack_chunk . h \" # include \" net / dcsctp / packet / chunk / heartbeat_request_chunk . h \" # include \" net / dcsctp / packet / chunk / idata_chunk . h \" # include \" net / dcsctp / packet / chunk / iforward_tsn_chunk . h \" # include \" net / dcsctp / packet / chunk / init_ack_chunk . h \" # include \" net / dcsctp / packet / chunk / init_chunk . h \" # include \" net / dcsctp / packet / chunk / reconfig_chunk . h \" # include \" net / dcsctp / packet / chunk / sack_chunk . h \" # include \" net / dcsctp / packet / chunk / shutdown_ack_chunk . h \" # include \" net / dcsctp / packet / chunk / shutdown_chunk . h \" # include \" net / dcsctp / packet / chunk / shutdown_complete_chunk . h \" # include \" net / dcsctp / packet / data . h \" # include \" net / dcsctp / packet / sctp_packet . h \" # include \" net / dcsctp / public / dcsctp_message . h \" # include \" net / dcsctp / public / dcsctp_options . h \" # include \" net / dcsctp / public / dcsctp_socket . h \" # include \" net / dcsctp / public / packet_observer . h \" # include \" net / dcsctp / rx / data_tracker . h \" # include \" net / dcsctp / rx / reassembly_queue . h \" # include \" net / dcsctp / socket / callback_deferrer . h \" # include \" net / dcsctp / socket / packet_sender . h \" # include \" net / dcsctp / socket / state_cookie . h \" # include \" net / dcsctp / socket / transmission_control_block . h \" # include \" net / dcsctp / timer / timer . h \" # include \" net / dcsctp / tx / retransmission_error_counter . h \" # include \" net / dcsctp / tx / retransmission_queue . h \" # include \" net / dcsctp / tx / retransmission_timeout . h \" # include \" net / dcsctp / tx / rr_send_queue . h \" namespace dcsctp { class DcSctpSocket : public DcSctpSocketInterface { public :)",
    "insertText": "DcSctpSocket(absl::string_view log_prefix, DcSctpSocketCallbacks& callbacks, std::unique_ptr<PacketObserver> packet_observer, const DcSctpOptions& options)"
  },
  {
    "label": "DcSctpSocket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DcSctpSocket(const DcSctpSocket&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DcSctpSocket&)",
    "insertText": "operator(const DcSctpSocket&)"
  },
  {
    "label": "ReceivePacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReceivePacket(rtc::ArrayView<const uint8_t> data)"
  },
  {
    "label": "HandleTimeout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleTimeout(TimeoutID timeout_id)"
  },
  {
    "label": "Connect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Connect()"
  },
  {
    "label": "RestoreFromState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreFromState(const DcSctpSocketHandoverState& state)"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Close()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (SendStatus)",
    "insertText": "Send(DcSctpMessage message, const SendOptions& send_options)"
  },
  {
    "label": "ResetStreams()",
    "kind": "Method",
    "detail": "Function (ResetStreamsStatus)",
    "insertText": "ResetStreams(rtc::ArrayView<const StreamID> outgoing_streams)"
  },
  {
    "label": "state()",
    "kind": "Method",
    "detail": "Function (SocketState)",
    "insertText": "state()"
  },
  {
    "label": "options()",
    "kind": "Method",
    "detail": "Function (const DcSctpOptions&)",
    "insertText": "options()"
  },
  {
    "label": "SetStreamPriority()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStreamPriority(StreamID stream_id, StreamPriority priority)"
  },
  {
    "label": "GetStreamPriority()",
    "kind": "Method",
    "detail": "Function (StreamPriority)",
    "insertText": "GetStreamPriority(StreamID stream_id)"
  },
  {
    "label": "buffered_amount()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "buffered_amount(StreamID stream_id)"
  },
  {
    "label": "buffered_amount_low_threshold()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "buffered_amount_low_threshold(StreamID stream_id)"
  },
  {
    "label": "SetBufferedAmountLowThreshold()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBufferedAmountLowThreshold(StreamID stream_id, size_t bytes)"
  },
  {
    "label": "GetMetrics()",
    "kind": "Method",
    "detail": "Function (absl::optional<Metrics>)",
    "insertText": "GetMetrics()"
  },
  {
    "label": "GetHandoverReadiness()",
    "kind": "Method",
    "detail": "Function (HandoverReadinessStatus)",
    "insertText": "GetHandoverReadiness()"
  },
  {
    "label": "GetHandoverStateAndClose()",
    "kind": "Method",
    "detail": "Function (absl::optional<DcSctpSocketHandoverState>)",
    "insertText": "GetHandoverStateAndClose()"
  },
  {
    "label": "peer_implementation()",
    "kind": "Method",
    "detail": "Function (SctpImplementation)",
    "insertText": "peer_implementation()"
  },
  {
    "label": "TSN()",
    "kind": "Method",
    "detail": "Function (} private : struct ConnectParameters { TSN initial_tsn =)",
    "insertText": "TSN(0)"
  },
  {
    "label": "VerificationTag()",
    "kind": "Method",
    "detail": "Function (VerificationTag verification_tag =)",
    "insertText": "VerificationTag(0)"
  },
  {
    "label": "log_prefix()",
    "kind": "Method",
    "detail": "Function (} ; enum class State { kClosed,kCookieWait,kCookieEchoed,kEstablished,kShutdownPending,kShutdownSent,kShutdownReceived,kShutdownAckSent,} ; std::string)",
    "insertText": "log_prefix()"
  },
  {
    "label": "IsConsistent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConsistent()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (absl::string_view)",
    "insertText": "ToString(DcSctpSocket::State state)"
  },
  {
    "label": "CreateTransmissionControlBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTransmissionControlBlock(const Capabilities& capabilities, VerificationTag my_verification_tag, TSN my_initial_tsn, VerificationTag peer_verification_tag, TSN peer_initial_tsn, size_t a_rwnd, TieTag tie_tag)"
  },
  {
    "label": "SetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetState(State state, absl::string_view reason)"
  },
  {
    "label": "MakeConnectionParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeConnectionParameters()"
  },
  {
    "label": "InternalClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalClose(ErrorKind error, absl::string_view message)"
  },
  {
    "label": "CloseConnectionBecauseOfTooManyTransmissionErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseConnectionBecauseOfTooManyTransmissionErrors()"
  },
  {
    "label": "OnInitTimerExpiry()",
    "kind": "Method",
    "detail": "Function (absl::optional<DurationMs>)",
    "insertText": "OnInitTimerExpiry()"
  },
  {
    "label": "OnCookieTimerExpiry()",
    "kind": "Method",
    "detail": "Function (absl::optional<DurationMs>)",
    "insertText": "OnCookieTimerExpiry()"
  },
  {
    "label": "OnShutdownTimerExpiry()",
    "kind": "Method",
    "detail": "Function (absl::optional<DurationMs>)",
    "insertText": "OnShutdownTimerExpiry()"
  },
  {
    "label": "OnSentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSentPacket(rtc::ArrayView<const uint8_t> packet, SendPacketStatus status)"
  },
  {
    "label": "MaybeSendShutdownOrAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSendShutdownOrAck()"
  },
  {
    "label": "MaybeSendShutdownOnPacketReceived()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSendShutdownOnPacketReceived(const SctpPacket& packet)"
  },
  {
    "label": "MaybeSendResetStreamsRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaybeSendResetStreamsRequest()"
  },
  {
    "label": "SendInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendInit()"
  },
  {
    "label": "SendShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendShutdown()"
  },
  {
    "label": "SendShutdownAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendShutdownAck()"
  },
  {
    "label": "ValidatePacket()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidatePacket(const SctpPacket& packet)"
  },
  {
    "label": "DebugPrintOutgoing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DebugPrintOutgoing(rtc::ArrayView<const uint8_t> payload)"
  },
  {
    "label": "DeliverReassembledMessages()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeliverReassembledMessages()"
  },
  {
    "label": "ValidateHasTCB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ValidateHasTCB()"
  },
  {
    "label": "ValidateParseSuccess()",
    "kind": "Method",
    "detail": "Function (template<class T> bool)",
    "insertText": "ValidateParseSuccess(const absl::optional<T>& c)"
  },
  {
    "label": "HandleUnrecognizedChunk()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleUnrecognizedChunk(const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "Dispatch()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Dispatch(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleData(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleIData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleIData(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleDataCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDataCommon(AnyDataChunk& chunk)"
  },
  {
    "label": "HandleInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInit(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleInitAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInitAck(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleSack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSack(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleHeartbeatRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeartbeatRequest(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleHeartbeatAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHeartbeatAck(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleAbort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAbort(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleError(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleCookieEcho()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCookieEcho(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleCookieEchoWithTCB()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleCookieEchoWithTCB(const CommonHeader& header, const StateCookie& cookie)"
  },
  {
    "label": "HandleCookieAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCookieAck(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleShutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleShutdown(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleShutdownAck()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleShutdownAck(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleForwardTsn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleForwardTsn(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleIForwardTsn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleIForwardTsn(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleReconfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleReconfig(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  },
  {
    "label": "HandleForwardTsnCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleForwardTsnCommon(const AnyForwardTsnChunk& chunk)"
  },
  {
    "label": "HandleShutdownComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleShutdownComplete(const CommonHeader& header, const SctpPacket::ChunkDescriptor& descriptor)"
  }
]