[
  {
    "label": "FNetErrorContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetErrorContext"
  },
  {
    "label": "HasError()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UObject / NameTypes . h \" # include \" Iris / ReplicationSystem / NetRefHandle . h \" namespace UE::Net { const FName GNetError_BitStreamOverflow ; const FName GNetError_BitStreamError ; const FName GNetError_ArraySizeTooLarge ; const FName GNetError_InvalidNetHandle ; const FName GNetError_BrokenNetHandle ; const FName GNetError_InvalidValue ; const FName GNetError_InternalError ; class FNetErrorContext { public : bool)",
    "insertText": "HasError()"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetError(const FName Error)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetError()"
  },
  {
    "label": "GetObjectHandle()",
    "kind": "Method",
    "detail": "Function (ObjectHandle = InObjectHandle ; } const FNetRefHandle&)",
    "insertText": "GetObjectHandle()"
  }
]