[
  {
    "label": "TMatrix3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMatrix3"
  },
  {
    "label": "TMatrix2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMatrix2"
  },
  {
    "label": "TMatrix3()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" VectorTypes . h \" # include \" VectorUtil . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<RealType> struct TMatrix3 { TVector<RealType> Row0 ; TVector<RealType> Row1 ; TVector<RealType> Row2 ;)",
    "insertText": "TMatrix3()"
  },
  {
    "label": "TMatrix3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMatrix3(RealType ConstantValue)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row0 = TVector<)",
    "insertText": "RealType(ConstantValue, ConstantValue, ConstantValue)"
  },
  {
    "label": "TMatrix3()",
    "kind": "Method",
    "detail": "Function (Row1 = Row0 ; Row2 = Row0 ; })",
    "insertText": "TMatrix3(RealType Diag0, RealType Diag1, RealType Diag2)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row0 = TVector<)",
    "insertText": "RealType(Diag0, 0, 0)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row1 = TVector<)",
    "insertText": "RealType(0, Diag1, 0)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row2 = TVector<)",
    "insertText": "RealType(0, 0, Diag2)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<)",
    "insertText": "RealType(const UE::Math::TVector<RealType>& U, const UE::Math::TVector<RealType>& V) : Row0(U.X * V.X, U.X * V.Y, U.X * V.Z), Row1(U.Y * V.X, U.Y * V.Y, U.Y * V.Z), Row2(U.Z * V.X, U.Z * V.Y, U.Z * V.Z)"
  },
  {
    "label": "TMatrix3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMatrix3(RealType M00, RealType M01, RealType M02, RealType M10, RealType M11, RealType M12, RealType M20, RealType M21, RealType M22) : Row0(M00, M01, M02), Row1(M10, M11, M12), Row2(M20, M21, M22)"
  },
  {
    "label": "TMatrix3()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMatrix3(const UE::Math::TVector<RealType>& V1, const UE::Math::TVector<RealType>& V2, const UE::Math::TVector<RealType>& V3, bool bRows)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row0 = V1 ; Row1 = V2 ; Row2 = V3 ; } else { Row0 = TVector<)",
    "insertText": "RealType(V1.X, V2.X, V3.X)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row1 = TVector<)",
    "insertText": "RealType(V1.Y, V2.Y, V3.Y)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row2 = TVector<)",
    "insertText": "RealType(V1.Z, V2.Z, V3.Z)"
  },
  {
    "label": "TMatrix3()",
    "kind": "Method",
    "detail": "Function (} } template<RealType2>)",
    "insertText": "TMatrix3(const TMatrix3<RealType2>& Mat) : Row0(TVector<RealType>{Mat.Row0}), Row1(TVector<RealType>{Mat.Row1}), Row2(TVector<RealType>{Mat.Row2})"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>)",
    "insertText": "Zero()"
  },
  {
    "label": "Identity()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>)",
    "insertText": "Identity()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "operator()(int Row, int Col)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TVector<RealType>)",
    "insertText": "operator(const UE::Math::TVector<RealType>& V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>)",
    "insertText": "operator(const TMatrix3<RealType>& Mat2)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType M00 = Row0 . X* Mat2 . Row0 . X + Row0 . Y* Mat2 . Row1 . X + Row0 . Z* Mat2 . Row2 . X ; RealType M01 = Row0 . X* Mat2 . Row0 . Y + Row0 . Y* Mat2 . Row1 . Y + Row0 . Z* Mat2 . Row2 . Y ; RealType M02 = Row0 . X* Mat2 . Row0 . Z + Row0 . Y* Mat2 . Row1 . Z + Row0 . Z* Mat2 . Row2 . Z ; RealType M10 = Row1 . X* Mat2 . Row0 . X + Row1 . Y* Mat2 . Row1 . X + Row1 . Z* Mat2 . Row2 . X ; RealType M11 = Row1 . X* Mat2 . Row0 . Y + Row1 . Y* Mat2 . Row1 . Y + Row1 . Z* Mat2 . Row2 . Y ; RealType M12 = Row1 . X* Mat2 . Row0 . Z + Row1 . Y* Mat2 . Row1 . Z + Row1 . Z* Mat2 . Row2 . Z ; RealType M20 = Row2 . X* Mat2 . Row0 . X + Row2 . Y* Mat2 . Row1 . X + Row2 . Z* Mat2 . Row2 . X ; RealType M21 = Row2 . X* Mat2 . Row0 . Y + Row2 . Y* Mat2 . Row1 . Y + Row2 . Z* Mat2 . Row2 . Y ; RealType M22 = Row2 . X* Mat2 . Row0 . Z + Row2 . Y* Mat2 . Row1 . Z + Row2 . Z* Mat2 . Row2 . Z ; return TMatrix3<)",
    "insertText": "RealType(M00, M01, M02, M10, M11, M12, M20, M21, M22)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>&)",
    "insertText": "operator(const RealType& Scalar)"
  },
  {
    "label": "InnerProduct()",
    "kind": "Method",
    "detail": "Function (Row0 + = Mat2 . Row0 ; Row1 + = Mat2 . Row1 ; Row2 + = Mat2 . Row2 ; return* this ; } RealType)",
    "insertText": "InnerProduct(const TMatrix3<RealType>& Mat2)"
  },
  {
    "label": "Trace()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "Trace()"
  },
  {
    "label": "i01()",
    "kind": "Method",
    "detail": "Function (RealType a11 = Row0 . X,a12 = Row0 . Y,a13 = Row0 . Z,a21 = Row1 . X,a22 = Row1 . Y,a23 = Row1 . Z,a31 = Row2 . X,a32 = Row2 . Y,a33 = Row2 . Z ; RealType i00 = a33* a22 - a32* a23 ; RealType)",
    "insertText": "i01(a33 * a12 - a32 * a13)"
  },
  {
    "label": "Inverse()",
    "kind": "Method",
    "detail": "Function (RealType i02 = a23* a12 - a22* a13 ; return a11* i00 + a21* i01 + a31* i02 ; } TMatrix3<RealType>)",
    "insertText": "Inverse()"
  },
  {
    "label": "i10()",
    "kind": "Method",
    "detail": "Function (RealType i02 = a23* a12 - a22* a13 ; RealType)",
    "insertText": "i10(a33 * a21 - a31 * a23)"
  },
  {
    "label": "i12()",
    "kind": "Method",
    "detail": "Function (RealType i11 = a33* a11 - a31* a13 ; RealType)",
    "insertText": "i12(a23 * a11 - a21 * a13)"
  },
  {
    "label": "i21()",
    "kind": "Method",
    "detail": "Function (RealType i20 = a32* a21 - a31* a22 ; RealType)",
    "insertText": "i21(a32 * a11 - a31 * a12)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (RealType i22 = a22* a11 - a21* a12 ; RealType det = a11* i00 + a21* i01 + a31* i02 ;)",
    "insertText": "ensure(TMathUtil<RealType>::Abs(det) >= TMathUtil<RealType>::Epsilon)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (det = 1 . 0 / det ; return TMatrix3<)",
    "insertText": "RealType(i00 * det, i01 * det, i02 * det, i10 * det, i11 * det, i12 * det, i20 * det, i21 * det, i22 * det)"
  },
  {
    "label": "Transpose()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>)",
    "insertText": "Transpose()"
  },
  {
    "label": "TransformByTranspose()",
    "kind": "Method",
    "detail": "Function (} UE::Math::TVector<RealType>)",
    "insertText": "TransformByTranspose(const UE::Math::TVector<RealType>& V)"
  },
  {
    "label": "DeterminantTimesInverseTranspose()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>)",
    "insertText": "DeterminantTimesInverseTranspose()"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType i22 = a22* a11 - a21* a12 ; return TMatrix3<)",
    "insertText": "RealType(i00, i10, i20, i01, i11, i21, i02, i12, i22)"
  },
  {
    "label": "EpsilonEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EpsilonEqual(const TMatrix3<RealType>& Mat2, RealType Epsilon)"
  },
  {
    "label": "AxisAngleR()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>)",
    "insertText": "AxisAngleR(const UE::Math::TVector<RealType>& Axis, RealType AngleRad)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (RealType cs = TMathUtil<RealType)",
    "insertText": "Cos(AngleRad)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (RealType sn = TMathUtil<RealType)",
    "insertText": "Sin(AngleRad)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType oneMinusCos = 1 . 0 - cs ; RealType x2 = Axis [ 0 ]* Axis [ 0 ] ; RealType y2 = Axis [ 1 ]* Axis [ 1 ] ; RealType z2 = Axis [ 2 ]* Axis [ 2 ] ; RealType xym = Axis [ 0 ]* Axis [ 1 ]* oneMinusCos ; RealType xzm = Axis [ 0 ]* Axis [ 2 ]* oneMinusCos ; RealType yzm = Axis [ 1 ]* Axis [ 2 ]* oneMinusCos ; RealType xSin = Axis [ 0 ]* sn ; RealType ySin = Axis [ 1 ]* sn ; RealType zSin = Axis [ 2 ]* sn ; return TMatrix3<)",
    "insertText": "RealType(x2 * oneMinusCos + cs, xym - zSin, xzm + ySin, xym + zSin, y2 * oneMinusCos + cs, yzm - xSin, xzm - ySin, yzm + xSin, z2 * oneMinusCos + cs)"
  },
  {
    "label": "AxisAngleD()",
    "kind": "Method",
    "detail": "Function (} TMatrix3<RealType>)",
    "insertText": "AxisAngleD(const UE::Math::TVector<RealType>& Axis, RealType AngleDeg)"
  },
  {
    "label": "TMatrix2()",
    "kind": "Method",
    "detail": "Function (} } ; template<RealType> struct TMatrix2 { TVector2<RealType> Row0 ; TVector2<RealType> Row1 ;)",
    "insertText": "TMatrix2()"
  },
  {
    "label": "TMatrix2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMatrix2(RealType ConstantValue)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row0 = Row1 = TVector2<)",
    "insertText": "RealType(ConstantValue, ConstantValue)"
  },
  {
    "label": "TMatrix2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMatrix2(RealType Diag0, RealType Diag1)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row0 = TVector2<)",
    "insertText": "RealType(Diag0, 0)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row1 = TVector2<)",
    "insertText": "RealType(0, Diag1)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (} TMatrix2<)",
    "insertText": "RealType(const TVector2<RealType>& U, const TVector2<RealType>& V) : Row0(U.X * V.X, U.X * V.Y), Row1(U.Y * V.X, U.Y * V.Y)"
  },
  {
    "label": "TMatrix2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMatrix2(RealType M00, RealType M01, RealType M10, RealType M11) : Row0(M00, M01), Row1(M10, M11)"
  },
  {
    "label": "TMatrix2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TMatrix2(const TVector2<RealType>& V1, const TVector2<RealType>& V2, bool bRows)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row0 = V1 ; Row1 = V2 ; } else { Row0 = TVector2<)",
    "insertText": "RealType(V1.X, V2.X)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (Row1 = TVector2<)",
    "insertText": "RealType(V1.Y, V2.Y)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TVector2<RealType>)",
    "insertText": "operator(const TVector2<RealType>& V)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TMatrix2<RealType>)",
    "insertText": "operator(const TMatrix2<RealType>& Mat2)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType M00 = Row0 . X* Mat2 . Row0 . X + Row0 . Y* Mat2 . Row1 . X ; RealType M01 = Row0 . X* Mat2 . Row0 . Y + Row0 . Y* Mat2 . Row1 . Y ; RealType M10 = Row1 . X* Mat2 . Row0 . X + Row1 . Y* Mat2 . Row1 . X ; RealType M11 = Row1 . X* Mat2 . Row0 . Y + Row1 . Y* Mat2 . Row1 . Y ; return TMatrix2<)",
    "insertText": "RealType(M00, M01, M10, M11)"
  },
  {
    "label": "InnerProduct()",
    "kind": "Method",
    "detail": "Function (Row0 + = Mat2 . Row0 ; Row1 + = Mat2 . Row1 ; return* this ; } RealType)",
    "insertText": "InnerProduct(const TMatrix2<RealType>& Mat2)"
  },
  {
    "label": "Determinant()",
    "kind": "Method",
    "detail": "Function (RealType Det =)",
    "insertText": "Determinant()"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (RealType DetInv = 1 . 0 / Det ; return TMatrix2<)",
    "insertText": "RealType(Row1.Y * DetInv, -Row0.Y * DetInv, -Row1.X * DetInv, Row0.X * DetInv)"
  },
  {
    "label": "EpsilonEqual()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EpsilonEqual(const TMatrix2<RealType>& Mat2, RealType Epsilon)"
  },
  {
    "label": "RotationRad()",
    "kind": "Method",
    "detail": "Function (} TMatrix2<RealType>)",
    "insertText": "RotationRad(RealType AngleRad)"
  },
  {
    "label": "RotationDeg()",
    "kind": "Method",
    "detail": "Function (} TMatrix2<RealType>)",
    "insertText": "RotationDeg(RealType AngleDeg)"
  },
  {
    "label": "AxisScale()",
    "kind": "Method",
    "detail": "Function (} TMatrix2<RealType>)",
    "insertText": "AxisScale(TVector2<RealType> Axis, RealType Scale, bool bNormalizeAxis = true)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (Axis .)",
    "insertText": "Normalize()"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (} RealType X2 = Axis . X* Axis . X ; RealType Y2 = Axis . Y* Axis . Y ; RealType XY = Axis . X* Axis . Y ; return TMatrix2<)",
    "insertText": "RealType(Scale * X2 + Y2, Scale * XY - XY, Scale * XY - XY, Scale * Y2 + X2)"
  },
  {
    "label": "GetAngleRad()",
    "kind": "Method",
    "detail": "Function (} RealType)",
    "insertText": "GetAngleRad()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; template<RealType> TMatrix3<RealType>)",
    "insertText": "operator(RealType Scale, const TMatrix3<RealType>& Mat)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TMatrix2<RealType>)",
    "insertText": "operator(RealType Scale, const TMatrix2<RealType>& Mat)"
  },
  {
    "label": "CrossProductMatrix()",
    "kind": "Method",
    "detail": "Function (} template<RealType> TMatrix3<RealType>)",
    "insertText": "CrossProductMatrix(const UE::Math::TVector<RealType>& A)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (RealType)",
    "insertText": "Zero(0)"
  }
]