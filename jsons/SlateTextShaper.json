[
  {
    "label": "FCompositeFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositeFontCache"
  },
  {
    "label": "FSlateFontRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontRenderer"
  },
  {
    "label": "IBreakIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IBreakIterator"
  },
  {
    "label": "FShapedGlyphFaceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapedGlyphFaceData"
  },
  {
    "label": "FSlateTextShaper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextShaper"
  },
  {
    "label": "FShapedGlyphFaceData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Fonts / FontCache . h \" # include \" Fonts / FontCacheFreeType . h \" # include \" Fonts / FontCacheHarfBuzz . h \" # include \" Fonts / FontRasterizationMode . h \" class FCompositeFontCache ; class FSlateFontRenderer ; class IBreakIterator ; class FShapedGlyphFaceData { public :)",
    "insertText": "FShapedGlyphFaceData(TWeakPtr<FFreeTypeFace> InFontFace, const uint32 InGlyphFlags, const float InFontSize, const float InFontScale, const float InFontSkew, const EFontRasterizationMode InRasterizationMode, const int16 InSdfPpem) : FontFace(MoveTemp(InFontFace)) , GlyphFlags(InGlyphFlags) , FontSize(InFontSize) , FontScale(InFontScale) , BitmapRenderScale(1.0f) , FontSkew(InFontSkew) , RasterizationMode(InRasterizationMode) , SdfPpem(InSdfPpem)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE)",
    "insertText": "if(TSharedPtr<FFreeTypeFace> FontFacePin = FontFace.Pin())"
  },
  {
    "label": "GetBitmapRenderScale()",
    "kind": "Method",
    "detail": "Function (BitmapRenderScale = FontFacePin ->)",
    "insertText": "GetBitmapRenderScale()"
  },
  {
    "label": "FSlateTextShaper()",
    "kind": "Method",
    "detail": "Function (} # endif } TWeakPtr<FFreeTypeFace> FontFace ; uint32 GlyphFlags ; float FontSize ; float FontScale ; float BitmapRenderScale ; float FontSkew ; EFontRasterizationMode RasterizationMode ; int16 SdfPpem ; } ; class FSlateTextShaper { public :)",
    "insertText": "FSlateTextShaper(FFreeTypeCacheDirectory* InFTCacheDirectory, FCompositeFontCache* InCompositeFontCache, FSlateFontRenderer* InFontRenderer, FSlateFontCache* InFontCache)"
  },
  {
    "label": "ShapeBidirectionalText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "ShapeBidirectionalText(const TCHAR* InText, const int32 InTextStart, const int32 InTextLen, const FSlateFontInfo& InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InBaseDirection, const ETextShapingMethod TextShapingMethod)"
  },
  {
    "label": "ShapeUnidirectionalText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "ShapeUnidirectionalText(const TCHAR* InText, const int32 InTextStart, const int32 InTextLen, const FSlateFontInfo& InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InTextDirection, const ETextShapingMethod TextShapingMethod)"
  },
  {
    "label": "PerformTextShaping()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "PerformTextShaping(const TCHAR* InText, const int32 InTextStart, const int32 InTextLen, const FSlateFontInfo& InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InTextDirection, const ETextShapingMethod TextShapingMethod, TArray<FShapedGlyphEntry>& OutGlyphsToRender)"
  },
  {
    "label": "FinalizeTextShaping()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "FinalizeTextShaping(TArray<FShapedGlyphEntry> InGlyphsToRender, const FSlateFontInfo& InFontInfo, const float InFontScale, const FShapedGlyphSequence::FSourceTextRange& InSourceTextRange)"
  },
  {
    "label": "PerformKerningOnlyTextShaping()",
    "kind": "Method",
    "detail": "Function (# if WITH_FREETYPE void)",
    "insertText": "PerformKerningOnlyTextShaping(const TCHAR* InText, const int32 InTextStart, const int32 InTextLen, const FSlateFontInfo& InFontInfo, const float InFontScale, TArray<FShapedGlyphEntry>& OutGlyphsToRender)"
  },
  {
    "label": "PerformHarfBuzzTextShaping()",
    "kind": "Method",
    "detail": "Function (# endif # if WITH_HARFBUZZ void)",
    "insertText": "PerformHarfBuzzTextShaping(const TCHAR* InText, const int32 InTextStart, const int32 InTextLen, const FSlateFontInfo& InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InTextDirection, TArray<FShapedGlyphEntry>& OutGlyphsToRender)"
  },
  {
    "label": "InsertSubstituteGlyphs()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "InsertSubstituteGlyphs(const TCHAR* InText, const int32 InCharIndex, const TSharedRef<FShapedGlyphFaceData>& InShapedGlyphFaceData, const TSharedRef<FFreeTypeAdvanceCache>& AdvanceCache, TArray<FShapedGlyphEntry>& OutGlyphsToRender, const int16 InLetterSpacingScaled = 0)"
  }
]