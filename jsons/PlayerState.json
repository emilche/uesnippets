[
  {
    "label": "PingAvgData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PingAvgData"
  },
  {
    "label": "APlayerState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerState"
  },
  {
    "label": "ULocalMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULocalMessage"
  },
  {
    "label": "FSetPlayerStatePawn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSetPlayerStatePawn"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "AController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AController"
  },
  {
    "label": "APlayerController",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APlayerController"
  },
  {
    "label": "PingAvgData()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Templates / SubclassOf . h \" # include \" GameFramework / Actor . h \" # include \" Online / CoreOnline . h \" # include \" GameFramework / OnlineReplStructs . h \" # include \" GameFramework / Info . h \" # include \" PlayerState . generated . h \" struct PingAvgData { uint16 PingSum : 1 3 ; uint8 PingCount : 3 ;)",
    "insertText": "PingAvgData() : PingSum(0) , PingCount(0)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FOnPlayerStatePawnSet, APlayerState*, Player, APawn*, NewPawn, APawn*, OldPawn)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UCLASS(BlueprintType, Blueprintable, notplaceable, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() private: UPROPERTY(ReplicatedUsing = OnRep_Score, Category = PlayerState, BlueprintGetter = GetScore)"
  },
  {
    "label": "SetPawnPrivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPawnPrivate(APawn* InPawn)"
  },
  {
    "label": "PostInitializeComponents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitializeComponents()"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetHumanReadableName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetHumanReadableName()"
  },
  {
    "label": "GetOwningController()",
    "kind": "Method",
    "detail": "Function (} class AController*)",
    "insertText": "GetOwningController()"
  },
  {
    "label": "ClientInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClientInitialize(class AController* C)"
  },
  {
    "label": "UpdatePing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdatePing(float InPing)"
  },
  {
    "label": "RecalculateAvgPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecalculateAvgPing()"
  },
  {
    "label": "ShouldBroadCastWelcomeMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldBroadCastWelcomeMessage(bool bExiting = false)"
  },
  {
    "label": "SetPlayerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerName(const FString& S)"
  },
  {
    "label": "SetPlayerNameInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlayerNameInternal(const FString& S)"
  },
  {
    "label": "GetPlayerNameCustom()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetPlayerNameCustom()"
  },
  {
    "label": "GetOldPlayerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetOldPlayerName()"
  },
  {
    "label": "SetOldPlayerName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOldPlayerName(const FString& S)"
  },
  {
    "label": "RegisterPlayerWithSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterPlayerWithSession(bool bWasFromInvite)"
  },
  {
    "label": "UnregisterPlayerWithSession()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterPlayerWithSession()"
  },
  {
    "label": "Duplicate()",
    "kind": "Method",
    "detail": "Function (class APlayerState*)",
    "insertText": "Duplicate()"
  },
  {
    "label": "OnDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDeactivated()"
  },
  {
    "label": "OnReactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnReactivated()"
  },
  {
    "label": "SeamlessTravelTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SeamlessTravelTo(class APlayerState* NewPlayerState)"
  },
  {
    "label": "GetLifetimeReplicatedProps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLifetimeReplicatedProps(TArray< FLifetimeProperty > & OutLifetimeProps)"
  },
  {
    "label": "DispatchOverrideWith()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchOverrideWith(APlayerState* PlayerState)"
  },
  {
    "label": "DispatchCopyProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DispatchCopyProperties(APlayerState* PlayerState)"
  },
  {
    "label": "OverrideWith()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OverrideWith(APlayerState* PlayerState)"
  },
  {
    "label": "CopyProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyProperties(APlayerState* PlayerState)"
  },
  {
    "label": "SetShouldUpdateReplicatedPing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetShouldUpdateReplicatedPing(bool bInShouldUpdateReplicatedPing)"
  },
  {
    "label": "HandleWelcomeMessage()",
    "kind": "Method",
    "detail": "Function (bShouldUpdateReplicatedPing = bInShouldUpdateReplicatedPing ; } void)",
    "insertText": "HandleWelcomeMessage()"
  },
  {
    "label": "HIDE_ACTOR_TRANSFORM_FUNCTIONS()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "HIDE_ACTOR_TRANSFORM_FUNCTIONS()"
  },
  {
    "label": "IsInactive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInactive()"
  },
  {
    "label": "IsFromPreviousLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFromPreviousLevel()"
  },
  {
    "label": "GetStartTime()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetStartTime()"
  },
  {
    "label": "GetUniqueId()",
    "kind": "Method",
    "detail": "Function (const FUniqueNetIdRepl&)",
    "insertText": "GetUniqueId()"
  },
  {
    "label": "SetUniqueId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniqueId(const FUniqueNetIdRepl& NewUniqueId)"
  },
  {
    "label": "SetUniqueId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUniqueId(FUniqueNetIdRepl&& NewUniqueId)"
  },
  {
    "label": "OnSetUniqueId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetUniqueId()"
  },
  {
    "label": "FSetPlayerStatePawn()",
    "kind": "Method",
    "detail": "Function (} ; struct FSetPlayerStatePawn { private : APawn ;)",
    "insertText": "FSetPlayerStatePawn(APlayerState* PlayerState, APawn* Pawn)"
  },
  {
    "label": "SetPawnPrivate()",
    "kind": "Method",
    "detail": "Function (APawn* OldPawn = PlayerState -> PawnPrivate ; PlayerState ->)",
    "insertText": "SetPawnPrivate(Pawn)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (PlayerState -> OnPawnSet .)",
    "insertText": "Broadcast(PlayerState, PlayerState->PawnPrivate, OldPawn)"
  }
]