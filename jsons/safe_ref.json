[
  {
    "label": "SafeRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SafeRef"
  },
  {
    "label": "SafeRef()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_MEMORY_SAFE_REF_H_ # define BASE_MEMORY_SAFE_REF_H_ # include \" base / check . h \" # include \" base / memory / weak_ptr . h \" # include<utility> namespace base { template<T> class SafeRef { public :)",
    "insertText": "SafeRef(const SafeRef& p) : w_(p.w_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SafeRef&)",
    "insertText": "operator(const SafeRef& p)"
  },
  {
    "label": "CHECK()",
    "kind": "Method",
    "detail": "Function (w_ = p . w_ ;)",
    "insertText": "CHECK(w_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SafeRef&)",
    "insertText": "operator(SafeRef&& p)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (w_ =)",
    "insertText": "move(p.w_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U> SafeRef&)",
    "insertText": "operator(const SafeRef<U>& p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<U> SafeRef&)",
    "insertText": "operator(SafeRef<U>&& p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T&)",
    "insertText": "operator()"
  },
  {
    "label": "MakeSafeRefFromWeakPtrInternals()",
    "kind": "Method",
    "detail": "Function (} private : template<U> class SafeRef ; template<U> SafeRef<U>)",
    "insertText": "MakeSafeRefFromWeakPtrInternals(const internal::WeakReference& ref, U* ptr)"
  },
  {
    "label": "SafeRef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SafeRef(WeakPtr<T> w) : w_(std::move(w))"
  },
  {
    "label": "MakeSafeRefFromWeakPtrInternals()",
    "kind": "Method",
    "detail": "Function (} WeakPtr<T> w_ ; } ; namespace internal { template<T> SafeRef<T>)",
    "insertText": "MakeSafeRefFromWeakPtrInternals(const internal::WeakReference& ref, T* ptr)"
  }
]