[
  {
    "label": "hb_ot_color_layer_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "hb_ot_color_layer_t"
  },
  {
    "label": "hb_ot_color_has_palettes()",
    "kind": "Method",
    "detail": "Function (# ifndef HB_OT_H_IN # error \" Include<hb - ot . h> instead . \" # endif # ifndef HB_OT_COLOR_H # define HB_OT_COLOR_H # include \" hb . h \" # include \" hb - ot - name . h \" HB_BEGIN_DECLS HB_EXTERN hb_bool_t)",
    "insertText": "hb_ot_color_has_palettes(hb_face_t *face)"
  },
  {
    "label": "hb_ot_color_palette_get_count()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN unsigned int)",
    "insertText": "hb_ot_color_palette_get_count(hb_face_t *face)"
  },
  {
    "label": "hb_ot_color_palette_get_name_id()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_ot_name_id_t)",
    "insertText": "hb_ot_color_palette_get_name_id(hb_face_t *face, unsigned int palette_index)"
  },
  {
    "label": "hb_ot_color_palette_color_get_name_id()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_ot_name_id_t)",
    "insertText": "hb_ot_color_palette_color_get_name_id(hb_face_t *face, unsigned int color_index)"
  },
  {
    "label": "hb_ot_color_palette_get_flags()",
    "kind": "Method",
    "detail": "Function (typedef enum { HB_OT_COLOR_PALETTE_FLAG_DEFAULT = 0 x00000000u,HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_LIGHT_BACKGROUND = 0 x00000001u,HB_OT_COLOR_PALETTE_FLAG_USABLE_WITH_DARK_BACKGROUND = 0 x00000002u } hb_ot_color_palette_flags_t ; HB_EXTERN hb_ot_color_palette_flags_t)",
    "insertText": "hb_ot_color_palette_get_flags(hb_face_t *face, unsigned int palette_index)"
  },
  {
    "label": "hb_ot_color_palette_get_colors()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN unsigned int)",
    "insertText": "hb_ot_color_palette_get_colors(hb_face_t *face, unsigned int palette_index, unsigned int start_offset, unsigned int *color_count, hb_color_t *colors)"
  },
  {
    "label": "hb_ot_color_has_layers()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_bool_t)",
    "insertText": "hb_ot_color_has_layers(hb_face_t *face)"
  },
  {
    "label": "hb_ot_color_glyph_get_layers()",
    "kind": "Method",
    "detail": "Function (typedef struct hb_ot_color_layer_t { hb_codepoint_t glyph ; unsigned int color_index ; } hb_ot_color_layer_t ; HB_EXTERN unsigned int)",
    "insertText": "hb_ot_color_glyph_get_layers(hb_face_t *face, hb_codepoint_t glyph, unsigned int start_offset, unsigned int *count, hb_ot_color_layer_t *layers)"
  },
  {
    "label": "hb_ot_color_has_svg()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_bool_t)",
    "insertText": "hb_ot_color_has_svg(hb_face_t *face)"
  },
  {
    "label": "hb_ot_color_glyph_reference_svg()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_blob_t*)",
    "insertText": "hb_ot_color_glyph_reference_svg(hb_face_t *face, hb_codepoint_t glyph)"
  },
  {
    "label": "hb_ot_color_has_png()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_bool_t)",
    "insertText": "hb_ot_color_has_png(hb_face_t *face)"
  },
  {
    "label": "hb_ot_color_glyph_reference_png()",
    "kind": "Method",
    "detail": "Function (HB_EXTERN hb_blob_t*)",
    "insertText": "hb_ot_color_glyph_reference_png(hb_font_t *font, hb_codepoint_t glyph)"
  }
]