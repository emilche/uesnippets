[
  {
    "label": "TTranslationMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TTranslationMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Math / Vector . h \" # include \" Math / Plane . h \" # include \" Math / Matrix . h \" namespace UE { namespace Math { template<T> struct TTranslationMatrix : public TMatrix<T> { public :)",
    "insertText": "TTranslationMatrix(const TVector<T>& Delta)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TTranslationMatrix(const TTranslationMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(TVector<T> const& Delta)"
  },
  {
    "label": "TTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> TTranslationMatrix<T)",
    "insertText": "TTranslationMatrix(const TVector<T>& Delta) : TMatrix<T>( TPlane<T>(1.0f, 0.0f, 0.0f, 0.0f), TPlane<T>(0.0f, 1.0f, 0.0f, 0.0f), TPlane<T>(0.0f, 0.0f, 1.0f, 0.0f), TPlane<T>(Delta.X, Delta.Y,Delta.Z,1.0f))"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (} } })",
    "insertText": "UE_DECLARE_LWC_TYPE(TranslationMatrix, 44)"
  }
]