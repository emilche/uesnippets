[
  {
    "label": "FText",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FText"
  },
  {
    "label": "SCommentBubble",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCommentBubble"
  },
  {
    "label": "SGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphPin"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "GRAPHEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GRAPHEDITOR_API"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Math / Vector2D . h \" # include \" SGraphNodeDefault . h \" # include \" SGraphPin . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" class FText ; class SCommentBubble ; class SGraphPin ; class UEdGraphPin ; struct FSlateBrush ; class SGraphNodeKnot : public SGraphNodeDefault { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphNodeKnot)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, class UEdGraphNode* InKnot)"
  },
  {
    "label": "UpdateGraphNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateGraphNode()"
  },
  {
    "label": "GetShadowBrush()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetShadowBrush(bool bSelected)"
  },
  {
    "label": "CreatePinWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphPin>)",
    "insertText": "CreatePinWidget(UEdGraphPin* Pin)"
  },
  {
    "label": "AddPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPin(const TSharedRef<SGraphPin>& PinToAdd)"
  },
  {
    "label": "RequestRenameOnSpawn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRenameOnSpawn()"
  },
  {
    "label": "GetCommentOffset()",
    "kind": "Method",
    "detail": "Function (} protected : FVector2D)",
    "insertText": "GetCommentOffset()"
  },
  {
    "label": "OnCommentBubbleToggled()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnCommentBubbleToggled(bool bInCommentBubbleVisible)"
  },
  {
    "label": "OnCommentTextCommitted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCommentTextCommitted(const FText& NewComment, ETextCommit::Type CommitInfo)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (bool bAlwaysShowCommentBubble ; TSharedPtr<SCommentBubble> CommentBubble ; const FSlateBrush* ShadowBrush ; const FSlateBrush* ShadowBrushSelected ; } ; class SGraphPinKnot : public SGraphPin { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SGraphPinKnot)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, UEdGraphPin* InPin)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "GetDefaultValueWidget()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "GetDefaultValueWidget()"
  },
  {
    "label": "SpawnPinDragEvent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FDragDropOperation>)",
    "insertText": "SpawnPinDragEvent(const TSharedRef<SGraphPanel>& InGraphPanel, const TArray< TSharedRef<SGraphPin> >& InStartingPins)"
  },
  {
    "label": "OnPinMouseDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnPinMouseDown(const FGeometry& SenderGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "GetPinColor()",
    "kind": "Method",
    "detail": "Function (FSlateColor)",
    "insertText": "GetPinColor()"
  }
]