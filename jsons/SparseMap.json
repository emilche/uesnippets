[
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "SparseMapBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseMapBase"
  },
  {
    "label": "Map",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Map"
  },
  {
    "label": "evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "evaluator"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_MAP_H # define EIGEN_SPARSE_MAP_H namespace Eigen { namespace internal { template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> struct traits<Map<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>> : public traits<SparseMatrix<MatScalar,MatOptions,MatIndex>> { typedef SparseMatrix<MatScalar,MatOptions,MatIndex> PlainObjectType ; typedef traits<PlainObjectType> TraitsBase ; enum { Flags =)",
    "insertText": "Flags(~NestByRefBit)"
  },
  {
    "label": "Flags()",
    "kind": "Method",
    "detail": "Function (} ; template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> struct traits<Map<const SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>> : public traits<SparseMatrix<MatScalar,MatOptions,MatIndex>> { typedef SparseMatrix<MatScalar,MatOptions,MatIndex> PlainObjectType ; typedef traits<PlainObjectType> TraitsBase ; enum { Flags =)",
    "insertText": "Flags(~ (NestByRefBit | LvalueBit))"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} ; } template<Derived,int Level = internal::accessors_level<Derived>::has_write_access ? WriteAccessors : ReadOnlyAccessors> class SparseMapBase ; template<Derived> class SparseMapBase<Derived,ReadOnlyAccessors> : public SparseCompressedBase<Derived> { public : typedef SparseCompressedBase<Derived> Base ; typedef Base::Scalar Scalar ; typedef Base::StorageIndex StorageIndex ; enum { IsRowMajor = Base::IsRowMajor } ; using Base::operator = ; protected : typedef internal::conditional<)",
    "insertText": "bool(internal::is_lvalue<Derived>::value)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (Index m_outerSize ; Index m_innerSize ; Array<StorageIndex,2,1> m_zero_nnz ; IndexPointer m_outerIndex ; IndexPointer m_innerIndices ; ScalarPointer m_values ; IndexPointer m_innerNonZeros ; public : Index)",
    "insertText": "rows()"
  },
  {
    "label": "isCompressed()",
    "kind": "Method",
    "detail": "Function (const Index outer = IsRowMajor ? row : col ; const Index inner = IsRowMajor ? col : row ; Index start = m_outerIndex [ outer ] ; Index end =)",
    "insertText": "isCompressed()"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (const StorageIndex* r =)",
    "insertText": "lower_bound(&m_innerIndices[start],&m_innerIndices[end-1],inner)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const Index id = r -& m_innerIndices [ 0 ] ;)",
    "insertText": "return((*r==inner) && (id<end)) ? m_values[id] : Scalar(0)"
  },
  {
    "label": "SparseMapBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseMapBase(Index rows, Index cols, Index nnz, IndexPointer outerIndexPtr, IndexPointer innerIndexPtr, ScalarPointer valuePtr, IndexPointer innerNonZerosPtr = 0) : m_outerSize(IsRowMajor?rows:cols), m_innerSize(IsRowMajor?cols:rows), m_zero_nnz(0,internal::convert_index<StorageIndex>(nnz)), m_outerIndex(outerIndexPtr), m_innerIndices(innerIndexPtr), m_values(valuePtr), m_innerNonZeros(innerNonZerosPtr)"
  },
  {
    "label": "SparseMapBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseMapBase(Index size, Index nnz, IndexPointer innerIndexPtr, ScalarPointer valuePtr) : m_outerSize(1), m_innerSize(size), m_zero_nnz(0,internal::convert_index<StorageIndex>(nnz)), m_outerIndex(m_zero_nnz.data()), m_innerIndices(innerIndexPtr), m_values(valuePtr), m_innerNonZeros(0)"
  },
  {
    "label": "SparseMapBase()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SparseMapBase()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (} } ; template<Derived> class SparseMapBase<Derived,WriteAccessors> : public SparseMapBase<Derived,ReadOnlyAccessors> { typedef MapBase<Derived,ReadOnlyAccessors> ReadOnlyMapBase ; public : typedef SparseMapBase<Derived,ReadOnlyAccessors> Base ; typedef Base::Scalar Scalar ; typedef Base::StorageIndex StorageIndex ; enum { IsRowMajor = Base::IsRowMajor } ; using Base::operator = ; public : using Base::valuePtr ; using Base::innerIndexPtr ; using Base::outerIndexPtr ; using Base::innerNonZeroPtr ; Scalar*)",
    "insertText": "valuePtr()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(end>=start && \"you probably called coeffRef on a non finalized matrix\")"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(end>start && \"coeffRef cannot be called on a zero coefficient\")"
  },
  {
    "label": "lower_bound()",
    "kind": "Method",
    "detail": "Function (StorageIndex* r =)",
    "insertText": "lower_bound(&Base::m_innerIndices[start],&Base::m_innerIndices[end],inner)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (const Index id = r -& Base::m_innerIndices [ 0 ] ;)",
    "insertText": "eigen_assert((*r==inner) && (id<end) && \"coeffRef cannot be called on a zero coefficient\")"
  },
  {
    "label": "SparseMapBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseMapBase(Index rows, Index cols, Index nnz, StorageIndex* outerIndexPtr, StorageIndex* innerIndexPtr, Scalar* valuePtr, StorageIndex* innerNonZerosPtr = 0) : Base(rows, cols, nnz, outerIndexPtr, innerIndexPtr, valuePtr, innerNonZerosPtr)"
  },
  {
    "label": "SparseMapBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SparseMapBase(Index size, Index nnz, StorageIndex* innerIndexPtr, Scalar* valuePtr) : Base(size, nnz, innerIndexPtr, valuePtr)"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} } ; # ifndef EIGEN_PARSED_BY_DOXYGEN template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> class Map<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType> : public SparseMapBase<Map<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>> # else template<SparseMatrixType> class Map<SparseMatrixType> : public SparseMapBase<Derived,WriteAccessors> # endif { public : typedef SparseMapBase<Map> Base ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(Map)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (IsRowMajor = Base::IsRowMajor } ; public :)",
    "insertText": "Map(Index rows, Index cols, Index nnz, StorageIndex* outerIndexPtr, StorageIndex* innerIndexPtr, Scalar* valuePtr, StorageIndex* innerNonZerosPtr = 0) : Base(rows, cols, nnz, outerIndexPtr, innerIndexPtr, valuePtr, innerNonZerosPtr)"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (} # ifndef EIGEN_PARSED_BY_DOXYGEN ~)",
    "insertText": "Map()"
  },
  {
    "label": "Map()",
    "kind": "Method",
    "detail": "Function (IsRowMajor = Base::IsRowMajor } ; public : # endif)",
    "insertText": "Map(Index rows, Index cols, Index nnz, const StorageIndex* outerIndexPtr, const StorageIndex* innerIndexPtr, const Scalar* valuePtr, const StorageIndex* innerNonZerosPtr = 0) : Base(rows, cols, nnz, outerIndexPtr, innerIndexPtr, valuePtr, innerNonZerosPtr)"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; namespace internal { template<MatScalar,int MatOptions,MatIndex,int Options,StrideType> struct evaluator<Map<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>> : evaluator<SparseCompressedBase<Map<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>>> { typedef evaluator<SparseCompressedBase<Map<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType>>> Base ; typedef Map<SparseMatrix<MatScalar,MatOptions,MatIndex>,Options,StrideType> XprType ;)",
    "insertText": "evaluator() : Base()"
  },
  {
    "label": "evaluator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "evaluator(const XprType &mat) : Base(mat)"
  }
]