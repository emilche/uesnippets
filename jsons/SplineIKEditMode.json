[
  {
    "label": "FEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportClient"
  },
  {
    "label": "FPrimitiveDrawInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPrimitiveDrawInterface"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "HHitProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "HHitProxy"
  },
  {
    "label": "UAnimGraphNode_SplineIK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_SplineIK"
  },
  {
    "label": "FAnimNode_SplineIK",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_SplineIK"
  },
  {
    "label": "FViewportClick",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FViewportClick"
  },
  {
    "label": "FSplineIKEditMode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSplineIKEditMode"
  },
  {
    "label": "UAnimGraphNode_Base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimGraphNode_Base"
  },
  {
    "label": "FAnimNode_Base",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnimNode_Base"
  },
  {
    "label": "FSplineIKEditMode()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AnimNodeEditMode . h \" # include \" Math / Matrix . h \" # include \" Math / Rotator . h \" # include \" Math / UnrealMathSSE . h \" # include \" UObject / NameTypes . h \" # include \" UnrealWidgetFwd . h \" class FEditorViewportClient ; class FPrimitiveDrawInterface ; class FSceneView ; class FViewport ; class HHitProxy ; class UAnimGraphNode_SplineIK ; struct FAnimNode_SplineIK ; struct FViewportClick ; class FSplineIKEditMode : public FAnimNodeEditMode { public :)",
    "insertText": "FSplineIKEditMode()"
  },
  {
    "label": "EnterMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnterMode(class UAnimGraphNode_Base* InEditorNode, struct FAnimNode_Base* InRuntimeNode)"
  },
  {
    "label": "ExitMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExitMode()"
  },
  {
    "label": "GetWidgetCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (ECoordSystem)",
    "insertText": "GetWidgetCoordinateSystem()"
  },
  {
    "label": "GetWidgetLocation()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWidgetLocation()"
  },
  {
    "label": "GetWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetWidgetMode()"
  },
  {
    "label": "ChangeToNextWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "ChangeToNextWidgetMode(UE::Widget::EWidgetMode CurWidgetMode)"
  },
  {
    "label": "SetWidgetMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "UsesTransformWidget()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UsesTransformWidget(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetSelectedBone()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetSelectedBone()"
  },
  {
    "label": "GetCustomDrawingCoordinateSystem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCustomDrawingCoordinateSystem(FMatrix& InMatrix, void* InData)"
  },
  {
    "label": "DoTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoTranslation(FVector& InTranslation)"
  },
  {
    "label": "DoRotation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoRotation(FRotator& InRot)"
  },
  {
    "label": "DoScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoScale(FVector& InScale)"
  },
  {
    "label": "Render()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Render(const FSceneView* View, FViewport* Viewport, FPrimitiveDrawInterface* PDI)"
  },
  {
    "label": "HandleClick()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleClick(FEditorViewportClient* InViewportClient, HHitProxy* HitProxy, const FViewportClick& Click)"
  },
  {
    "label": "IsModeValid()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsModeValid(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "GetNextWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "GetNextWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  },
  {
    "label": "FindValidWidgetMode()",
    "kind": "Method",
    "detail": "Function (UE::Widget::EWidgetMode)",
    "insertText": "FindValidWidgetMode(UE::Widget::EWidgetMode InWidgetMode)"
  }
]