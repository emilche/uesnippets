[
  {
    "label": "TypeList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TypeList"
  },
  {
    "label": "NullType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NullType"
  },
  {
    "label": "TSGetElementImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSGetElementImpl"
  },
  {
    "label": "TSHasTypeImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSHasTypeImpl"
  },
  {
    "label": "TSMakeUniqueImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSMakeUniqueImpl"
  },
  {
    "label": "TSAppendImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSAppendImpl"
  },
  {
    "label": "TSEraseImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSEraseImpl"
  },
  {
    "label": "TSRemoveImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSRemoveImpl"
  },
  {
    "label": "TSRemoveFirstImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSRemoveFirstImpl"
  },
  {
    "label": "TSRemoveLastImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSRemoveLastImpl"
  },
  {
    "label": "TSRemoveIndicesImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSRemoveIndicesImpl"
  },
  {
    "label": "enable_if()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TYPELIST_HAS_BEEN_INCLUDED # define OPENVDB_TYPELIST_HAS_BEEN_INCLUDED # include \" version . h \" # include<tuple> # include<type_traits> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { template<. . . Ts> struct TypeList ; namespace typelist_internal { struct NullType { } ; template<ListT,size_t Idx,= void> struct TSGetElementImpl ; template<. . . Ts,size_t Idx> struct TSGetElementImpl<TypeList<Ts . . .>,Idx,)",
    "insertText": "enable_if(Idx < sizeof...(Ts) && sizeof...(Ts))"
  },
  {
    "label": "int64_t()",
    "kind": "Method",
    "detail": "Function (using type = NullType ; } ; template<ListT,T,size_t = 0> struct TSHasTypeImpl ; template<T,size_t Idx> struct TSHasTypeImpl<TypeList<>,T,Idx> { bool Value = false ; int64_t Index = - 1 ; } ; template<U,T,. . . Ts,size_t Idx> struct TSHasTypeImpl<TypeList<U,Ts . . .>,T,Idx> : TSHasTypeImpl<TypeList<Ts . . .>,T,Idx + 1> { } ; template<T,. . . Ts,size_t Idx> struct TSHasTypeImpl<TypeList<T,Ts . . .>,T,Idx> { bool Value = true ; int64_t Index = static_cast<)",
    "insertText": "int64_t(Idx)"
  },
  {
    "label": "TSForEachImpl()",
    "kind": "Method",
    "detail": "Function (} ; template<ListT,. . . Ts> struct TSMakeUniqueImpl { using type = ListT ; } ; template<. . . Ts,U,. . . Us> struct TSMakeUniqueImpl<TypeList<Ts . . .>,U,Us . . .> { using type = std::conditional<TSHasTypeImpl<TypeList<Ts . . .>,U>::Value,TSMakeUniqueImpl<TypeList<Ts . . .>,Us . . .>::type,TSMakeUniqueImpl<TypeList<Ts . . .,U>,Us . . .>::type>::type ; } ; template<ListT,. . . Ts> struct TSAppendImpl ; template<. . . Ts,. . . OtherTs> struct TSAppendImpl<TypeList<Ts . . .>,OtherTs . . .> { using type = TypeList<Ts . . .,OtherTs . . .> ; } ; template<. . . Ts,. . . OtherTs> struct TSAppendImpl<TypeList<Ts . . .>,TypeList<OtherTs . . .>> { using type = TypeList<Ts . . .,OtherTs . . .> ; } ; template<ListT,T> struct TSEraseImpl ; template<T> struct TSEraseImpl<TypeList<>,T> { using type = TypeList<> ; } ; template<. . . Ts,T> struct TSEraseImpl<TypeList<T,Ts . . .>,T> { using type = TSEraseImpl<TypeList<Ts . . .>,T>::type ; } ; template<T2,. . . Ts,T> struct TSEraseImpl<TypeList<T2,Ts . . .>,T> { using type = TSAppendImpl<TypeList<T2>,TSEraseImpl<TypeList<Ts . . .>,T>::type>::type ; } ; template<ListT,. . . Ts> struct TSRemoveImpl ; template<ListT> struct TSRemoveImpl<ListT> { using type = ListT ; } ; template<ListT,T,. . . Ts> struct TSRemoveImpl<ListT,T,Ts . . .> { using type = TSRemoveImpl<TSEraseImpl<ListT,T>::type,Ts . . .>::type ; } ; template<ListT,. . . Ts> struct TSRemoveImpl<ListT,TypeList<Ts . . .>> { using type = TSRemoveImpl<ListT,Ts . . .>::type ; } ; template<T> struct TSRemoveFirstImpl { using type = TypeList<> ; } ; template<T,. . . Ts> struct TSRemoveFirstImpl<TypeList<T,Ts . . .>> { using type = TypeList<Ts . . .> ; } ; template<T> struct TSRemoveLastImpl { using type = TypeList<> ; } ; template<T> struct TSRemoveLastImpl<TypeList<T>> : TSRemoveLastImpl<T> { } ; template<T,. . . Ts> struct TSRemoveLastImpl<TypeList<T,Ts . . .>> { using type = TypeList<T>::template Append<TSRemoveLastImpl<TypeList<Ts . . .>>::type> ; } ; template<ListT,size_t First,size_t Last,size_t Idx = 0> struct TSRemoveIndicesImpl ; template<size_t First,size_t Last,size_t Idx> struct TSRemoveIndicesImpl<TypeList<>,First,Last,Idx> { using type = TypeList<> ; } ; template<T,size_t First,size_t Last,size_t Idx> struct TSRemoveIndicesImpl<TypeList<T>,First,Last,Idx> { private : bool Remove = Idx> = First&& Idx<= Last ; public : using type = std::conditional<Remove,TypeList<>,TypeList<T>>::type ; } ; template<T,. . . Ts,size_t First,size_t Last,size_t Idx> struct TSRemoveIndicesImpl<TypeList<T,Ts . . .>,First,Last,Idx> { private : using ThisList = TSRemoveIndicesImpl<TypeList<T>,First,Last,Idx>::type ; using NextList = TSRemoveIndicesImpl<TypeList<Ts . . .>,First,Last,Idx + 1>::type ; public : using type = ThisList::template Append<NextList> ; } ; template<OpT> void)",
    "insertText": "TSForEachImpl(OpT)"
  },
  {
    "label": "TSForEachImpl()",
    "kind": "Method",
    "detail": "Function (} template<OpT,T,. . . Ts> void)",
    "insertText": "TSForEachImpl(OpT op)"
  },
  {
    "label": "op()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "op(T())"
  },
  {
    "label": "Ts()",
    "kind": "Method",
    "detail": "Function (TSForEachImpl<OpT,)",
    "insertText": "Ts(op)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } template<. . . Ts> struct TypeList { using Self = TypeList ; size_t Size =)",
    "insertText": "sizeof(Ts)"
  },
  {
    "label": "foreach()",
    "kind": "Method",
    "detail": "Function (template<size_t N> using Get = typelist_internal::TSGetElementImpl<Self,N>::type ; using Front = Get<0> ; using Back = Get<Size - 1> ; template<T> bool Contains = typelist_internal::TSHasTypeImpl<Self,T>::Value ; template<T> int64_t Index = typelist_internal::TSHasTypeImpl<Self,T>::Index ; template<ListT = TypeList<>> using Unique = typelist_internal::TSMakeUniqueImpl<ListT,Ts . . .>::type ; template<. . . TypesToAppend> using Append = typelist_internal::TSAppendImpl<Self,TypesToAppend . . .>::type ; template<. . . TypesToRemove> using Remove = typelist_internal::TSRemoveImpl<Self,TypesToRemove . . .>::type ; using PopFront = typelist_internal::TSRemoveFirstImpl<Self>::type ; using PopBack = typelist_internal::TSRemoveLastImpl<Self>::type ; template<size_t First,size_t Last> using RemoveByIndex = typelist_internal::TSRemoveIndicesImpl<Self,First,Last>::type ; template<OpT> void)",
    "insertText": "foreach(OpT op)"
  }
]