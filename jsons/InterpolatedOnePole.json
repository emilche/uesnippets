[
  {
    "label": "FInterpolatedLPF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterpolatedLPF"
  },
  {
    "label": "FInterpolatedHPF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInterpolatedHPF"
  },
  {
    "label": "FInterpolatedLPF()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" namespace Audio { class FInterpolatedLPF { public :)",
    "insertText": "FInterpolatedLPF()"
  },
  {
    "label": "StartFrequencyInterpolation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartFrequencyInterpolation(const float InTargetFrequency, const int32 InterpLength = 1)"
  },
  {
    "label": "ProcessAudioFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioFrame(const float* RESTRICT InputFrame, float* RESTRICT OutputFrame)"
  },
  {
    "label": "ProcessAudioBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessAudioBuffer(const float* RESTRICT InputBuffer, float* RESTRICT OutputBuffer, const int32 NumSamples)"
  },
  {
    "label": "ProcessBufferInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessBufferInPlace(float* InOutBuffer, int32 NumSamples)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (B1Delta = 0 . 0 f ; B1Curr = B1Target ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "ClearMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearMemory()"
  },
  {
    "label": "ArrayCalculateResponseInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayCalculateResponseInPlace(TArrayView<float> InOutComplexValues)"
  },
  {
    "label": "FInterpolatedHPF()",
    "kind": "Method",
    "detail": "Function (private : float CutoffFrequency { - 1 . 0 f } ; float B1Curr { 0 . 0 f } ; float B1Delta { 0 . 0 f } ; float B1Target { 0 . 0 f } ; TArray<float> Z1 ; float* Z1Data { nullptr } ; int32 CurrInterpLength { 0 } ; int32 NumInterpSteps ; float SampleRate { 0 } ; int32 NumChannels { 1 } ; bool bIsFirstFrequencyChange { true } ; } ; class FInterpolatedHPF { public :)",
    "insertText": "FInterpolatedHPF()"
  }
]