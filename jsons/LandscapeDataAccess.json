[
  {
    "label": "ULandscapeComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeComponent"
  },
  {
    "label": "ULandscapeLayerInfoObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULandscapeLayerInfoObject"
  },
  {
    "label": "FLandscapeDataInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeDataInterface"
  },
  {
    "label": "FLockedMipDataInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLockedMipDataInfo"
  },
  {
    "label": "FLandscapeComponentDataInterfaceBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeComponentDataInterfaceBase"
  },
  {
    "label": "FLandscapeComponentDataInterface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLandscapeComponentDataInterface"
  },
  {
    "label": "LANDSCAPE_ZSCALE()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / Texture2D . h \" # define LANDSCAPE_VALIDATE_DATA_ACCESS 1 # define)",
    "insertText": "LANDSCAPE_ZSCALE(1.0f/128.0f) #define LANDSCAPE_INV_ZSCALE 128.0f #define LANDSCAPE_XYOFFSET_SCALE (1.0f/256.f) #define LANDSCAPE_INV_XYOFFSET_SCALE 256.f #define LANDSCAPE_VISIBILITY_THRESHOLD (2.0f/3.0f)"
  },
  {
    "label": "GetLocalHeight()",
    "kind": "Method",
    "detail": "Function (class ULandscapeLayerInfoObject ; namespace LandscapeDataAccess { int32 MaxValue = 6 5 5 3 5 ; float MidValue = 3 2 7 6 8 . f ; float)",
    "insertText": "GetLocalHeight(uint16 Height)"
  },
  {
    "label": "GetTexHeight()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetTexHeight(float Height)"
  },
  {
    "label": "PackHeight()",
    "kind": "Method",
    "detail": "Function (} FColor)",
    "insertText": "PackHeight(uint16 Height)"
  },
  {
    "label": "Color()",
    "kind": "Method",
    "detail": "Function (FColor)",
    "insertText": "Color(ForceInit)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Color . R = Height>> 8 ; Color . G = Height& 2 5 5 ; return)",
    "insertText": "MoveTemp(Color)"
  },
  {
    "label": "UnpackHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "UnpackHeight(const FColor& InHeightmapSample)"
  },
  {
    "label": "Height()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "Height(uint16)(InHeightmapSample.R << 8) | (uint16)"
  },
  {
    "label": "UnpackNormal()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "UnpackNormal(const FColor& InHeightmapSample)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (FVector Normal ; Normal . X = 2 . f* static_cast<)",
    "insertText": "float(InHeightmapSample.B)"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (Normal . Y = 2 . f* static_cast<)",
    "insertText": "float(InHeightmapSample.A)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (Normal . Z =)",
    "insertText": "Sqrt(FMath::Max(1.0f - (FMath::Square(Normal.X) + FMath::Square(Normal.Y)), 0.0f))"
  },
  {
    "label": "FLandscapeDataInterface()",
    "kind": "Method",
    "detail": "Function (} TArray64<uint8> MipData ; int32 LockCount ; } ; public :)",
    "insertText": "FLandscapeDataInterface()"
  },
  {
    "label": "LockMip()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "LockMip(UTexture2D* Texture, int32 MipLevel)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (TArray<FLockedMipDataInfo>* MipInfo = LockedMipInfoMap .)",
    "insertText": "Find(Texture)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MipInfo =& LockedMipInfoMap .)",
    "insertText": "Add(Texture, TArray<FLockedMipDataInfo>())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MipInfo ->)",
    "insertText": "Add(FLockedMipDataInfo())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if((*MipInfo)[MipLevel].MipData.Num() == 0)"
  },
  {
    "label": "UnlockMip()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockMip(UTexture2D* Texture, int32 MipLevel)"
  },
  {
    "label": "FLandscapeComponentDataInterfaceBase()",
    "kind": "Method",
    "detail": "Function (} } private : TMap<UTexture2D*,TArray<FLockedMipDataInfo>> LockedMipInfoMap ; } ; struct FLandscapeComponentDataInterfaceBase {)",
    "insertText": "FLandscapeComponentDataInterfaceBase()"
  },
  {
    "label": "FLandscapeComponentDataInterfaceBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLandscapeComponentDataInterfaceBase(ULandscapeComponent* InComponent, int32 InMipLevel, bool InWorkOnEditingLayer = true)"
  },
  {
    "label": "VertexIndexToXY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VertexIndexToXY(int32 VertexIndex, int32& OutX, int32& OutY)"
  },
  {
    "label": "QuadIndexToXY()",
    "kind": "Method",
    "detail": "Function (OutX = VertexIndex % ComponentSizeVerts ; OutY = VertexIndex / ComponentSizeVerts ; } void)",
    "insertText": "QuadIndexToXY(int32 QuadIndex, int32& OutX, int32& OutY)"
  },
  {
    "label": "QuadIndex()",
    "kind": "Method",
    "detail": "Function (OutX =)",
    "insertText": "QuadIndex(ComponentSizeVerts-1)"
  },
  {
    "label": "VertexXYToIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "VertexXYToIndex(int32 VertX, int32 VertY)"
  },
  {
    "label": "SubNumX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubNumX(CompX-1) / (SubsectionSizeVerts - 1)"
  },
  {
    "label": "SubNumY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubNumY(CompY-1) / (SubsectionSizeVerts - 1)"
  },
  {
    "label": "SubX()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubX(CompX-1) % (SubsectionSizeVerts - 1)"
  },
  {
    "label": "SubY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SubY(CompY-1) % (SubsectionSizeVerts - 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SubNumX = 0 ; SubX = 0 ; })",
    "insertText": "if(SubNumY < 0)"
  },
  {
    "label": "VertexXYToTexelXY()",
    "kind": "Method",
    "detail": "Function (SubNumY = 0 ; SubY = 0 ; } } void)",
    "insertText": "VertexXYToTexelXY(int32 VertX, int32 VertY, int32& OutX, int32& OutY)"
  },
  {
    "label": "ComponentXYToSubsectionXY()",
    "kind": "Method",
    "detail": "Function (int32 SubNumX,SubNumY,SubX,SubY ;)",
    "insertText": "ComponentXYToSubsectionXY(VertX, VertY, SubNumX, SubNumY, SubX, SubY)"
  },
  {
    "label": "VertexIndexToTexel()",
    "kind": "Method",
    "detail": "Function (OutX = SubNumX* SubsectionSizeVerts + SubX ; OutY = SubNumY* SubsectionSizeVerts + SubY ; } int32)",
    "insertText": "VertexIndexToTexel(int32 VertexIndex)"
  },
  {
    "label": "VertexIndexToXY()",
    "kind": "Method",
    "detail": "Function (int32 VertX,VertY ;)",
    "insertText": "VertexIndexToXY(VertexIndex, VertX, VertY)"
  },
  {
    "label": "VertexXYToTexelXY()",
    "kind": "Method",
    "detail": "Function (int32 TexelX,TexelY ;)",
    "insertText": "VertexXYToTexelXY(VertX, VertY, TexelX, TexelY)"
  },
  {
    "label": "TexelXYToIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TexelXYToIndex(int32 TexelX, int32 TexelY)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (const FColor* Texel =)",
    "insertText": "GetHeightData(LocalX, LocalY, HeightAndNormals)"
  },
  {
    "label": "GetScaleFactor()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetScaleFactor()"
  },
  {
    "label": "GetLocalVertex()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetLocalVertex(int32 LocalX, int32 LocalY, const TArray<FColor>& HeightAndNormals)"
  },
  {
    "label": "GetLocalHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLocalHeight(int32 LocalX, int32 LocalY, const TArray<FColor>& HeightAndNormals)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (} const FColor*)",
    "insertText": "GetHeightData(int32 LocalX, int32 LocalY, const TArray<FColor>& HeightAndNormals)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if LANDSCAPE_VALIDATE_DATA_ACCESS)",
    "insertText": "check(LocalX >= 0 && LocalY >= 0 && LocalX < ComponentSizeVerts&& LocalY < HeightmapStride)"
  },
  {
    "label": "VertexXYToTexelXY()",
    "kind": "Method",
    "detail": "Function (# endif int32 TexelX,TexelY ;)",
    "insertText": "VertexXYToTexelXY(LocalX, LocalY, TexelX, TexelY)"
  },
  {
    "label": "GetLocalTangentVectors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLocalTangentVectors(int32 LocalX, int32 LocalY, FVector& LocalTangentX, FVector& LocalTangentY, FVector& LocalTangentZ, const TArray<FColor>& HeightAndNormals)"
  },
  {
    "label": "UnpackNormal()",
    "kind": "Method",
    "detail": "Function (LocalTangentZ =)",
    "insertText": "UnpackNormal(*Data)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (LocalTangentX =)",
    "insertText": "FVector(-LocalTangentZ.Z, 0.f, LocalTangentZ.X)"
  },
  {
    "label": "FVector()",
    "kind": "Method",
    "detail": "Function (LocalTangentY =)",
    "insertText": "FVector(0.f, LocalTangentZ.Z, -LocalTangentZ.Y)"
  },
  {
    "label": "GetComponentSizeVerts()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetComponentSizeVerts()"
  },
  {
    "label": "FLandscapeComponentDataInterface()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FLandscapeComponentDataInterface()"
  },
  {
    "label": "GetRawHeightData()",
    "kind": "Method",
    "detail": "Function (FColor*)",
    "insertText": "GetRawHeightData()"
  },
  {
    "label": "SetRawXYOffsetData()",
    "kind": "Method",
    "detail": "Function (HeightMipData = NewHeightData ; } void)",
    "insertText": "SetRawXYOffsetData(FColor* NewXYOffsetData)"
  },
  {
    "label": "GetHeightmapSizeX()",
    "kind": "Method",
    "detail": "Function (XYOffsetMipData = NewXYOffsetData ; } int32)",
    "insertText": "GetHeightmapSizeX(int32 MipIndex)"
  },
  {
    "label": "GetHeightmapSizeY()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeightmapSizeY(int32 MipIndex)"
  },
  {
    "label": "GetHeightmapTextureData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetHeightmapTextureData(TArray<FColor>& OutData, bool bOkToFail = false)"
  },
  {
    "label": "GetWeightmapTextureData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetWeightmapTextureData(ULandscapeLayerInfoObject* InLayerInfo, TArray<uint8>& OutData, bool bInUseEditingWeightmap = false, bool bInRemoveSubsectionDuplicates = false)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (FColor*)",
    "insertText": "GetHeightData(int32 LocalX, int32 LocalY)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (# if LANDSCAPE_VALIDATE_DATA_ACCESS)",
    "insertText": "check(Component)"
  },
  {
    "label": "GetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (} FColor*)",
    "insertText": "GetXYOffsetData(int32 LocalX, int32 LocalY)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetHeight(int32 LocalX, int32 LocalY)"
  },
  {
    "label": "GetHeightData()",
    "kind": "Method",
    "detail": "Function (FColor* Texel =)",
    "insertText": "GetHeightData(LocalX, LocalY)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "GetHeight(int32 VertexIndex)"
  },
  {
    "label": "VertexIndexToXY()",
    "kind": "Method",
    "detail": "Function (int32 X,Y ;)",
    "insertText": "VertexIndexToXY(VertexIndex, X, Y)"
  },
  {
    "label": "GetLocalHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLocalHeight(int32 LocalX, int32 LocalY)"
  },
  {
    "label": "GetLocalHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetLocalHeight(int32 VertexIndex)"
  },
  {
    "label": "GetXYOffset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetXYOffset(int32 X, int32 Y, float& XOffset, float& YOffset)"
  },
  {
    "label": "GetXYOffsetData()",
    "kind": "Method",
    "detail": "Function (FColor* Texel =)",
    "insertText": "GetXYOffsetData(X, Y)"
  },
  {
    "label": "XOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "XOffset((float)((Texel->R << 8) + Texel->G) - 32768.f)"
  },
  {
    "label": "YOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "YOffset((float)((Texel->B << 8) + Texel->A) - 32768.f)"
  },
  {
    "label": "GetXYOffset()",
    "kind": "Method",
    "detail": "Function (} else { XOffset = YOffset = 0 . f ; } } void)",
    "insertText": "GetXYOffset(int32 VertexIndex, float& XOffset, float& YOffset)"
  },
  {
    "label": "GetXYOffset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetXYOffset(X, Y, XOffset, YOffset)"
  },
  {
    "label": "GetLocalVertex()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetLocalVertex(int32 LocalX, int32 LocalY)"
  },
  {
    "label": "GetLocalTangentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocalTangentVectors(int32 LocalX, int32 LocalY, FVector& LocalTangentX, FVector& LocalTangentY, FVector& LocalTangentZ)"
  },
  {
    "label": "GetLocalVertex()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetLocalVertex(int32 VertexIndex)"
  },
  {
    "label": "GetLocalTangentVectors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetLocalTangentVectors(int32 VertexIndex, FVector& LocalTangentX, FVector& LocalTangentY, FVector& LocalTangentZ)"
  },
  {
    "label": "GetLocalTangentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetLocalTangentVectors(X, Y, LocalTangentX, LocalTangentY, LocalTangentZ)"
  },
  {
    "label": "GetWorldVertex()",
    "kind": "Method",
    "detail": "Function (} FVector)",
    "insertText": "GetWorldVertex(int32 LocalX, int32 LocalY)"
  },
  {
    "label": "GetWorldTangentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWorldTangentVectors(int32 LocalX, int32 LocalY, FVector& WorldTangentX, FVector& WorldTangentY, FVector& WorldTangentZ)"
  },
  {
    "label": "GetWorldPositionTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWorldPositionTangents(int32 LocalX, int32 LocalY, FVector& WorldPos, FVector& WorldTangentX, FVector& WorldTangentY, FVector& WorldTangentZ)"
  },
  {
    "label": "GetWorldVertex()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetWorldVertex(int32 VertexIndex)"
  },
  {
    "label": "GetWorldTangentVectors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetWorldTangentVectors(int32 VertexIndex, FVector& WorldTangentX, FVector& WorldTangentY, FVector& WorldTangentZ)"
  },
  {
    "label": "GetWorldTangentVectors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWorldTangentVectors(X, Y, WorldTangentX, WorldTangentY, WorldTangentZ)"
  },
  {
    "label": "GetWorldPositionTangents()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetWorldPositionTangents(int32 VertexIndex, FVector& WorldPos, FVector& WorldTangentX, FVector& WorldTangentY, FVector& WorldTangentZ)"
  },
  {
    "label": "GetWorldPositionTangents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetWorldPositionTangents(X, Y, WorldPos, WorldTangentX, WorldTangentY, WorldTangentZ)"
  },
  {
    "label": "FillCornerValues()",
    "kind": "Method",
    "detail": "Function (} private : FLandscapeDataInterface DataInterface ; ULandscapeComponent* Component ; bool bWorkOnEditingLayer ; private : FColor* HeightMipData ; FColor* XYOffsetMipData ; } ; template<T> void)",
    "insertText": "FillCornerValues(uint8& CornerSet, T* CornerValues)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint8 OriginalSet = CornerSet ;)",
    "insertText": "if(CornerSet)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CornerValues [ 1 ] = CornerValues [ 0 ] ; CornerSet | = 1<<1 ; })",
    "insertText": "if(!(CornerSet & 1 << 2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CornerValues [ 2 ] = CornerValues [ 0 ] ; CornerSet | = 1<<2 ; } })",
    "insertText": "if(CornerSet != 15 && (OriginalSet & 1 << 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CornerValues [ 0 ] = CornerValues [ 1 ] ; CornerSet | = 1 ; })",
    "insertText": "if(!(CornerSet & 1 << 3))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CornerValues [ 3 ] = CornerValues [ 1 ] ; CornerSet | = 1<<3 ; } })",
    "insertText": "if(CornerSet != 15 && (OriginalSet & 1 << 2))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CornerValues [ 3 ] = CornerValues [ 2 ] ; CornerSet | = 1<<3 ; } })",
    "insertText": "if(CornerSet != 15 && (OriginalSet & 1 << 3))"
  }
]