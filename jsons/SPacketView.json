[
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "SNetworkingProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNetworkingProfilerWindow"
  },
  {
    "label": "FNetworkPacketSampleRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPacketSampleRef"
  },
  {
    "label": "SPacketView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPacketView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnection(uint32 GameInstanceIndex, uint32 ConnectionIndex, TraceServices::ENetProfilerConnectionMode ConnectionMode)"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedRef<SNetworkingProfilerWindow> InProfilerWindow)"
  },
  {
    "label": "EnsurePacketIsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsurePacketIsVisible(const int InPacketIndex)"
  },
  {
    "label": "SetSelectedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedPacket(const int32 InPacketIndex)"
  },
  {
    "label": "SelectPacketBySequenceNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectPacketBySequenceNumber(const uint32 InSequenceNumber)"
  },
  {
    "label": "SelectPreviousPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectPreviousPacket()"
  },
  {
    "label": "SelectNextPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNextPacket()"
  },
  {
    "label": "ExtendLeftSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendLeftSideOfSelectedInterval()"
  },
  {
    "label": "ShrinkLeftSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkLeftSideOfSelectedInterval()"
  },
  {
    "label": "ExtendRightSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendRightSideOfSelectedInterval()"
  },
  {
    "label": "ShrinkRightSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkRightSideOfSelectedInterval()"
  },
  {
    "label": "UpdateSelectedSample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectedSample()"
  },
  {
    "label": "IsConnectionValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnectionValid(const TraceServices::INetProfilerProvider& NetProfilerProvider, const uint32 InGameInstanceIndex, const uint32 InConnectionIndex, const TraceServices::ENetProfilerConnectionMode InConnectionMode)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState()"
  },
  {
    "label": "GetSample()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketSampleRef)",
    "insertText": "GetSample(const int32 InPacketIndex)"
  },
  {
    "label": "GetSampleAtMousePosition()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketSampleRef)",
    "insertText": "GetSampleAtMousePosition(double X, double Y)"
  },
  {
    "label": "SelectSampleAtMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSampleAtMousePosition(double X, double Y, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ContextMenu_AutoZoom_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_AutoZoom_Execute()"
  },
  {
    "label": "ContextMenu_AutoZoom_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_AutoZoom_CanExecute()"
  },
  {
    "label": "ContextMenu_AutoZoom_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_AutoZoom_IsChecked()"
  },
  {
    "label": "AutoZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoZoom()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "HorizontalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HorizontalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHorizontalScrollBar()"
  },
  {
    "label": "ZoomHorizontally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomHorizontally(const float Delta, const float X)"
  },
  {
    "label": "UpdateSelectedTimeSpan()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSelectedTimeSpan()"
  }
]