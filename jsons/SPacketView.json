[
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "SNetworkingProfilerWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SNetworkingProfilerWindow"
  },
  {
    "label": "FNetworkPacketSampleRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNetworkPacketSampleRef"
  },
  {
    "label": "SPacketView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPacketView"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FNetworkPacketSampleRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Geometry . h \" # include \" Rendering / RenderingCommon . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" TraceServices / Model / NetProfiler . h \" # include \" InsightsCore / Common / FixedCircularBuffer . h \" # include \" Insights / NetworkingProfiler / ViewModels / PacketViewDrawHelper . h \" # include \" Insights / NetworkingProfiler / ViewModels / PacketViewport . h \" class SScrollBar ; namespace UE::Insights::NetworkingProfiler { class SNetworkingProfilerWindow ; struct FNetworkPacketSampleRef { TSharedPtr<FNetworkPacketSeries> Series ; TSharedPtr<FNetworkPacketAggregatedSample> Sample ;)",
    "insertText": "FNetworkPacketSampleRef() : Series(), Sample()"
  },
  {
    "label": "FNetworkPacketSampleRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkPacketSampleRef(TSharedPtr<FNetworkPacketSeries> InSeries, TSharedPtr<FNetworkPacketAggregatedSample> InSample) : Series(InSeries), Sample(InSample)"
  },
  {
    "label": "FNetworkPacketSampleRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FNetworkPacketSampleRef(const FNetworkPacketSampleRef& Other) : Series(Other.Series), Sample(Other.Sample)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FNetworkPacketSampleRef&)",
    "insertText": "operator(const FNetworkPacketSampleRef& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Series = Other . Series ; Sample = Other . Sample ; return* this ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FNetworkPacketSampleRef& Other)"
  },
  {
    "label": "AreEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreEquals(const FNetworkPacketSampleRef& A, const FNetworkPacketSampleRef& B)"
  },
  {
    "label": "SPacketView()",
    "kind": "Method",
    "detail": "Function (} } ; class SPacketView : public SCompoundWidget { public : float MOUSE_SNAP_DISTANCE = 2 . 0 f ; enum class ECursorType { Default,Arrow,Hand,} ; public :)",
    "insertText": "SPacketView()"
  },
  {
    "label": "SetConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetConnection(uint32 GameInstanceIndex, uint32 ConnectionIndex, TraceServices::ENetProfilerConnectionMode ConnectionMode)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SPacketView)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TSharedRef<SNetworkingProfilerWindow> InProfilerWindow)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "SupportsKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsKeyboardFocus()"
  },
  {
    "label": "EnsurePacketIsVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsurePacketIsVisible(const int InPacketIndex)"
  },
  {
    "label": "SetSelectedPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectedPacket(const int32 InPacketIndex)"
  },
  {
    "label": "SelectPacketBySequenceNumber()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectPacketBySequenceNumber(const uint32 InSequenceNumber)"
  },
  {
    "label": "SelectPreviousPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectPreviousPacket()"
  },
  {
    "label": "SelectNextPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectNextPacket()"
  },
  {
    "label": "ExtendLeftSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendLeftSideOfSelectedInterval()"
  },
  {
    "label": "ShrinkLeftSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkLeftSideOfSelectedInterval()"
  },
  {
    "label": "ExtendRightSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendRightSideOfSelectedInterval()"
  },
  {
    "label": "ShrinkRightSideOfSelectedInterval()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShrinkRightSideOfSelectedInterval()"
  },
  {
    "label": "InvalidateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateState()"
  },
  {
    "label": "UpdateSelectedSample()",
    "kind": "Method",
    "detail": "Function (bIsStateDirty = true ; } private : void)",
    "insertText": "UpdateSelectedSample()"
  },
  {
    "label": "IsConnectionValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConnectionValid(const TraceServices::INetProfilerProvider& NetProfilerProvider, const uint32 InGameInstanceIndex, const uint32 InConnectionIndex, const TraceServices::ENetProfilerConnectionMode InConnectionMode)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState()"
  },
  {
    "label": "DrawHorizontalAxisGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHorizontalAxisGrid(FDrawContext& DrawContext, const FSlateBrush* Brush, const FSlateFontInfo& Font)"
  },
  {
    "label": "DrawVerticalAxisGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVerticalAxisGrid(FDrawContext& DrawContext, const FSlateBrush* Brush, const FSlateFontInfo& Font)"
  },
  {
    "label": "GetSample()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketSampleRef)",
    "insertText": "GetSample(const int32 InPacketIndex)"
  },
  {
    "label": "GetSampleAtMousePosition()",
    "kind": "Method",
    "detail": "Function (FNetworkPacketSampleRef)",
    "insertText": "GetSampleAtMousePosition(double X, double Y)"
  },
  {
    "label": "SelectSampleAtMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectSampleAtMousePosition(double X, double Y, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnSelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionChanged()"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ContextMenu_AutoZoom_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_AutoZoom_Execute()"
  },
  {
    "label": "ContextMenu_AutoZoom_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_AutoZoom_CanExecute()"
  },
  {
    "label": "ContextMenu_AutoZoom_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_AutoZoom_IsChecked()"
  },
  {
    "label": "AutoZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoZoom()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "HorizontalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HorizontalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHorizontalScrollBar()"
  },
  {
    "label": "ZoomHorizontally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomHorizontally(const float Delta, const float X)"
  },
  {
    "label": "UpdateSelectedTimeSpan()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateSelectedTimeSpan()"
  }
]