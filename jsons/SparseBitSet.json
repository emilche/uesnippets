[
  {
    "label": "TDynamicSparseBitSetBucketStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDynamicSparseBitSetBucketStorage"
  },
  {
    "label": "TFixedSparseBitSetBucketStorage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TFixedSparseBitSetBucketStorage"
  },
  {
    "label": "TSparseBitSet",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TSparseBitSet"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterator"
  },
  {
    "label": "FBitOffsets",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitOffsets"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / UnrealTemplate . h \" # include \" Containers / Array . h \" namespace UE::MovieScene { template<T,int32 InlineSize> struct TDynamicSparseBitSetBucketStorage ; template<T> struct TFixedSparseBitSetBucketStorage ; template<HashType,BucketStorage = TDynamicSparseBitSetBucketStorage<uint8,4>> struct TSparseBitSet ; enum class ESparseBitSetBitResult { NewlySet,AlreadySet,} ; namespace Private { uint32)",
    "insertText": "CountTrailingZeros(uint8 In)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 X = 0 xFFFFFF00 |)",
    "insertText": "uint32(In)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountTrailingZeros(uint16 In)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountTrailingZeros(uint32 In)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountTrailingZeros(uint64 In)"
  },
  {
    "label": "BitOffsetToLowBitMask()",
    "kind": "Method",
    "detail": "Function (} template<T,U> T)",
    "insertText": "BitOffsetToLowBitMask(U BitOffset)"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (T)",
    "insertText": "One(1)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (const T Index = static_cast<)",
    "insertText": "T(BitOffset)"
  },
  {
    "label": "BitOffsetToHighBitMask()",
    "kind": "Method",
    "detail": "Function (} template<T,U> T)",
    "insertText": "BitOffsetToHighBitMask(U BitOffset)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } template<HashType,BucketStorage> struct TSparseBitSet { using BucketType = BucketStorage::BucketType ; uint32 HashSize =)",
    "insertText": "sizeof(HashType)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (uint32 BucketSize =)",
    "insertText": "sizeof(typename BucketStorage::BucketType)"
  },
  {
    "label": "TSparseBitSet()",
    "kind": "Method",
    "detail": "Function (uint32 MaxNumBits = HashSize* BucketSize ;)",
    "insertText": "TSparseBitSet() : BucketHash(0)"
  },
  {
    "label": "TSparseBitSet()",
    "kind": "Method",
    "detail": "Function (} template<. . . StorageArgs>)",
    "insertText": "TSparseBitSet(StorageArgs&& ...Storage) : Buckets(Forward<StorageArgs>(Storage)...) , BucketHash(0)"
  },
  {
    "label": "TSparseBitSet()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TSparseBitSet(const TSparseBitSet&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSparseBitSet&)",
    "insertText": "operator(const TSparseBitSet&)"
  },
  {
    "label": "TSparseBitSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TSparseBitSet(TSparseBitSet&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TSparseBitSet&)",
    "insertText": "operator(TSparseBitSet&&)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (template<OtherHashType,OtherStorageType> void)",
    "insertText": "CopyTo(TSparseBitSet<OtherHashType, OtherStorageType>& Other)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (const uint32 NumBuckets =)",
    "insertText": "CountBits(Other.BucketHash)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Other . Buckets .)",
    "insertText": "SetNum(NumBuckets)"
  },
  {
    "label": "CopyToUnsafe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopyToUnsafe(Other, NumBuckets)"
  },
  {
    "label": "CopyToUnsafe()",
    "kind": "Method",
    "detail": "Function (} template<OtherHashType,OtherStorageType> void)",
    "insertText": "CopyToUnsafe(TSparseBitSet<OtherHashType, OtherStorageType>& Other, uint32 OtherBucketCapacity)"
  },
  {
    "label": "NumBuckets()",
    "kind": "Method",
    "detail": "Function (const uint32 ThisNumBuckets = this ->)",
    "insertText": "NumBuckets()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (Other . BucketHash = this -> BucketHash ;)",
    "insertText": "Memcpy(Other.Buckets.GetData(), this->Buckets.Storage.GetData(), sizeof(typename BucketStorage::BucketType)*ThisNumBuckets)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} TSparseBitSet&)",
    "insertText": "operator(const TSparseBitSet& Other)"
  },
  {
    "label": "One()",
    "kind": "Method",
    "detail": "Function (using namespace Private ; HashType)",
    "insertText": "One(1u)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (HashType NewHash = Other . BucketHash | BucketHash ; HashType OtherHash = Other . BucketHash ; uint32 OtherBucketIndex = 0 ; uint32 OtherBucketBitIndex =)",
    "insertText": "CountTrailingZeros(OtherHash)"
  },
  {
    "label": "HashType()",
    "kind": "Method",
    "detail": "Function (const HashType HashBit =)",
    "insertText": "HashType(1)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (const uint32 ThisBucketIndex =)",
    "insertText": "CountBits(BucketHash & (HashBit-1))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Buckets .)",
    "insertText": "Insert(Other.Buckets.Get(OtherBucketIndex), ThisBucketIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} else { Buckets .)",
    "insertText": "Get(ThisBucketIndex) |= Other.Buckets.Get(OtherBucketIndex)"
  },
  {
    "label": "OtherHash()",
    "kind": "Method",
    "detail": "Function (} BucketHash | = HashBit ; + + OtherBucketIndex ;)",
    "insertText": "OtherHash(One << OtherBucketBitIndex)"
  },
  {
    "label": "CountSetBits()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountSetBits()"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (Total + =)",
    "insertText": "CountBits(Buckets.Get(Index))"
  },
  {
    "label": "GetMaxNumBits()",
    "kind": "Method",
    "detail": "Function (} return Total ; } uint32)",
    "insertText": "GetMaxNumBits()"
  },
  {
    "label": "Offsets()",
    "kind": "Method",
    "detail": "Function (FBitOffsets)",
    "insertText": "Offsets(BucketHash, BitIndex)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (BucketHash | = Offsets . HashBit ; Buckets .)",
    "insertText": "Insert(Offsets.BitMaskWithinBucket, Offsets.BucketIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (Buckets .)",
    "insertText": "Get(Offsets.BucketIndex)"
  },
  {
    "label": "HashBit()",
    "kind": "Method",
    "detail": "Function (const uint32 Hash = BitIndex / BucketSize ; const HashType)",
    "insertText": "HashBit(HashType(1) << Hash)"
  },
  {
    "label": "ThisBitIndex()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "ThisBitIndex(BitIndex-BucketSize*Hash)"
  },
  {
    "label": "BucketType()",
    "kind": "Method",
    "detail": "Function (const BucketType ThisBitMask =)",
    "insertText": "BucketType(1u)"
  },
  {
    "label": "GetSparseBucketIndex()",
    "kind": "Method",
    "detail": "Function (} return false ; } int32)",
    "insertText": "GetSparseBucketIndex(uint32 BitIndex)"
  },
  {
    "label": "BucketType()",
    "kind": "Method",
    "detail": "Function (const BucketType ThisBitMask = static_cast<)",
    "insertText": "BucketType(BucketType(1u) << ThisBitIndex)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (BucketType ThisBucket = Buckets .)",
    "insertText": "Get(BucketIndex)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (int32 SparseIndex =)",
    "insertText": "CountBits(ThisBucket & (ThisBitMask-1))"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (- - BucketIndex ; SparseIndex + =)",
    "insertText": "CountBits(Buckets.Get(BucketIndex))"
  },
  {
    "label": "Begin()",
    "kind": "Method",
    "detail": "Function (} return SparseIndex ; } } return INDEX_NONE ; } struct FIterator { FIterator)",
    "insertText": "Begin(const TSparseBitSet<HashType, BucketStorage>* InBitSet)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FIterator It ; It . BitSet = InBitSet ; It . CurrentBucket = 0 ;)",
    "insertText": "if(InBitSet->BucketHash != 0)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (It . BucketBitIndex =)",
    "insertText": "CountTrailingZeros(InBitSet->BucketHash)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (It . CurrentBucket = InBitSet -> Buckets .)",
    "insertText": "Get(0)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (It . IndexWithinBucket =)",
    "insertText": "CountTrailingZeros(It.CurrentBucket)"
  },
  {
    "label": "End()",
    "kind": "Method",
    "detail": "Function (} else { It . BucketBitIndex = HashSize ; It . IndexWithinBucket = 0 ; } return It ; } FIterator)",
    "insertText": "End(const TSparseBitSet<HashType, BucketStorage>* InBitSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FIterator It ; It . BitSet = InBitSet ; It . CurrentBucket = 0 ; It . BucketBitIndex = HashSize ; It . IndexWithinBucket = 0 ; return It ; } void)",
    "insertText": "operator()"
  },
  {
    "label": "CurrentBucket()",
    "kind": "Method",
    "detail": "Function (using namespace Private ;)",
    "insertText": "CurrentBucket(BucketType(1u)<<IndexWithinBucket)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (IndexWithinBucket =)",
    "insertText": "CountTrailingZeros(CurrentBucket)"
  },
  {
    "label": "HashType()",
    "kind": "Method",
    "detail": "Function (IndexWithinBucket = 0 ; BucketBitIndex = HashSize ; return ; } HashType UnvisitedBucketBitMask = BitOffsetToHighBitMask<)",
    "insertText": "HashType(BucketBitIndex+1)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (BucketBitIndex =)",
    "insertText": "CountTrailingZeros(HashType(BitSet->BucketHash & UnvisitedBucketBitMask))"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (IndexWithinBucket = 0 ; } else { const uint8 NextBucketIndex =)",
    "insertText": "CountBits(BitSet->BucketHash & BitOffsetToLowBitMask<HashType>(BucketBitIndex))"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (CurrentBucket = BitSet -> Buckets .)",
    "insertText": "Get(NextBucketIndex)"
  },
  {
    "label": "FIterator()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FIterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (const TSparseBitSet<HashType,BucketStorage>* BitSet ; uint8 BucketBitIndex ; uint8 IndexWithinBucket ; BucketType CurrentBucket ; } ; FIterator)",
    "insertText": "begin(const TSparseBitSet<HashType, BucketStorage>& In)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} FIterator)",
    "insertText": "end(const TSparseBitSet<HashType, BucketStorage>& In)"
  },
  {
    "label": "CheckIndex()",
    "kind": "Method",
    "detail": "Function (} private : template<,> struct TSparseBitSet ; void)",
    "insertText": "CheckIndex(uint32 BitIndex)"
  },
  {
    "label": "FBitOffsets()",
    "kind": "Method",
    "detail": "Function (} struct FBitOffsets { HashType HashBit ; BucketType BitMaskWithinBucket ; int32 BucketIndex ;)",
    "insertText": "FBitOffsets(HashType InBucketHash, uint32 BitIndex)"
  },
  {
    "label": "Hash()",
    "kind": "Method",
    "detail": "Function (const HashType)",
    "insertText": "Hash(BitIndex / BucketSize)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (BucketIndex =)",
    "insertText": "CountBits(InBucketHash & (HashBit-1u))"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} } ; BucketStorage Buckets ; HashType BucketHash ; } ; template<T,int32 InlineSize = 8> struct TDynamicSparseBitSetBucketStorage { using BucketType = T ; TArray<BucketType,TInlineAllocator<InlineSize>> Storage ; void)",
    "insertText": "Insert(BucketType InitialValue, int32 Index)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (Storage .)",
    "insertText": "Insert(InitialValue, Index)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} BucketType*)",
    "insertText": "GetData()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} BucketType&)",
    "insertText": "Get(int32 Index)"
  },
  {
    "label": "TFixedSparseBitSetBucketStorage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFixedSparseBitSetBucketStorage(BucketType* StoragePtr) : Storage(StoragePtr)"
  },
  {
    "label": "TFixedSparseBitSetBucketStorage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TFixedSparseBitSetBucketStorage(const TFixedSparseBitSetBucketStorage&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const TFixedSparseBitSetBucketStorage&)"
  },
  {
    "label": "TFixedSparseBitSetBucketStorage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TFixedSparseBitSetBucketStorage(TFixedSparseBitSetBucketStorage&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(TFixedSparseBitSetBucketStorage&&)"
  }
]