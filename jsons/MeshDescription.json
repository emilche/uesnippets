[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FElementIDRemappings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElementIDRemappings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FMeshDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescription"
  },
  {
    "label": "TContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TContainer"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FMeshDescriptionBulkData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMeshDescriptionBulkData"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Algo / Accumulate . h \" # include \" Algo / Copy . h \" # include \" Algo / Find . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / BitArray . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / ContainersFwd . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / StaticArray . h \" # include \" Containers / UnrealString . h \" # include \" CoreFwd . h \" # include \" CoreTypes . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformCrt . h \" # include \" Math / Box . h \" # include \" Math / MathFwd . h \" # include \" Math / Plane . h \" # include \" Math / Vector . h \" # include \" MeshAttributeArray . h \" # include \" MeshElementArray . h \" # include \" MeshElementContainer . h \" # include \" MeshElementIndexer . h \" # include \" MeshTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / Guid . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / EditorBulkData . h \" # include \" Templates / Tuple . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / EditorObjectVersion . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / ReleaseObjectVersion . h \" # include \" MeshDescription . generated . h \" class FArchive ; class UObject ; struct FElementIDRemappings ; enum { MAX_MESH_TEXTURE_COORDS_MD = 8,} ; using FVertexArray = TMeshElementContainer<FVertexID> ; using FVertexInstanceArray = TMeshElementContainer<FVertexInstanceID> ; using FEdgeArray = TMeshElementContainer<FEdgeID> ; using FUVArray = TMeshElementContainer<FUVID> ; using FTriangleArray = TMeshElementContainer<FTriangleID> ; using FPolygonArray = TMeshElementContainer<FPolygonID> ; using FPolygonGroupArray = TMeshElementContainer<FPolygonGroupID> ; template<AttributeType> using TVertexAttributesRef = TMeshAttributesRef<FVertexID,AttributeType> ; template<AttributeType> using TVertexInstanceAttributesRef = TMeshAttributesRef<FVertexInstanceID,AttributeType> ; template<AttributeType> using TEdgeAttributesRef = TMeshAttributesRef<FEdgeID,AttributeType> ; template<AttributeType> using TUVAttributesRef = TMeshAttributesRef<FUVID,AttributeType> ; template<AttributeType> using TTriangleAttributesRef = TMeshAttributesRef<FTriangleID,AttributeType> ; template<AttributeType> using TPolygonAttributesRef = TMeshAttributesRef<FPolygonID,AttributeType> ; template<AttributeType> using TPolygonGroupAttributesRef = TMeshAttributesRef<FPolygonGroupID,AttributeType> ; template<AttributeType> using TVertexAttributesConstRef = TMeshAttributesConstRef<FVertexID,AttributeType> ; template<AttributeType> using TVertexInstanceAttributesConstRef = TMeshAttributesConstRef<FVertexInstanceID,AttributeType> ; template<AttributeType> using TEdgeAttributesConstRef = TMeshAttributesConstRef<FEdgeID,AttributeType> ; template<AttributeType> using TUVAttributesConstRef = TMeshAttributesConstRef<FUVID,AttributeType> ; template<AttributeType> using TTriangleAttributesConstRef = TMeshAttributesConstRef<FTriangleID,AttributeType> ; template<AttributeType> using TPolygonAttributesConstRef = TMeshAttributesConstRef<FPolygonID,AttributeType> ; template<AttributeType> using TPolygonGroupAttributesConstRef = TMeshAttributesConstRef<FPolygonGroupID,AttributeType> ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (None = 0 x00000000,Normals = 0 x00000001,Tangents = 0 x00000002,WeightedNTBs = 0 x00000004,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EComputeNTBsOptions)"
  },
  {
    "label": "FMeshDescription()",
    "kind": "Method",
    "detail": "Function (struct FMeshDescription { public :)",
    "insertText": "FMeshDescription()"
  },
  {
    "label": "FMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshDescription(const FMeshDescription&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshDescription&)",
    "insertText": "operator(const FMeshDescription&)"
  },
  {
    "label": "FMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMeshDescription(FMeshDescription&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMeshDescription&)",
    "insertText": "operator(FMeshDescription&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar, FMeshDescription& MeshDescription)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (MeshDescription .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeLegacy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeLegacy(FArchive& Ar)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Empty()"
  },
  {
    "label": "ResetIndexers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetIndexers()"
  },
  {
    "label": "BuildIndexers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildIndexers()"
  },
  {
    "label": "RebuildIndexers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RebuildIndexers()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Vertices()",
    "kind": "Method",
    "detail": "Function (FVertexArray&)",
    "insertText": "Vertices()"
  },
  {
    "label": "VertexInstances()",
    "kind": "Method",
    "detail": "Function (} FVertexInstanceArray&)",
    "insertText": "VertexInstances()"
  },
  {
    "label": "Edges()",
    "kind": "Method",
    "detail": "Function (} FEdgeArray&)",
    "insertText": "Edges()"
  },
  {
    "label": "UVs()",
    "kind": "Method",
    "detail": "Function (} FUVArray&)",
    "insertText": "UVs(int32 Index)"
  },
  {
    "label": "Triangles()",
    "kind": "Method",
    "detail": "Function (} FTriangleArray&)",
    "insertText": "Triangles()"
  },
  {
    "label": "Polygons()",
    "kind": "Method",
    "detail": "Function (} FPolygonArray&)",
    "insertText": "Polygons()"
  },
  {
    "label": "PolygonGroups()",
    "kind": "Method",
    "detail": "Function (} FPolygonGroupArray&)",
    "insertText": "PolygonGroups()"
  },
  {
    "label": "VertexAttributes()",
    "kind": "Method",
    "detail": "Function (} TAttributesSet<FVertexID>&)",
    "insertText": "VertexAttributes()"
  },
  {
    "label": "VertexInstanceAttributes()",
    "kind": "Method",
    "detail": "Function (} TAttributesSet<FVertexInstanceID>&)",
    "insertText": "VertexInstanceAttributes()"
  },
  {
    "label": "EdgeAttributes()",
    "kind": "Method",
    "detail": "Function (} TAttributesSet<FEdgeID>&)",
    "insertText": "EdgeAttributes()"
  },
  {
    "label": "UVAttributes()",
    "kind": "Method",
    "detail": "Function (} TAttributesSet<FUVID>&)",
    "insertText": "UVAttributes(int32 Index)"
  },
  {
    "label": "TriangleAttributes()",
    "kind": "Method",
    "detail": "Function (} TAttributesSet<FTriangleID>&)",
    "insertText": "TriangleAttributes()"
  },
  {
    "label": "PolygonAttributes()",
    "kind": "Method",
    "detail": "Function (} TAttributesSet<FPolygonID>&)",
    "insertText": "PolygonAttributes()"
  },
  {
    "label": "PolygonGroupAttributes()",
    "kind": "Method",
    "detail": "Function (} TAttributesSet<FPolygonGroupID>&)",
    "insertText": "PolygonGroupAttributes()"
  },
  {
    "label": "GetElements()",
    "kind": "Method",
    "detail": "Function (} TMap<FName,FMeshElementTypeWrapper>&)",
    "insertText": "GetElements()"
  },
  {
    "label": "Suspend()",
    "kind": "Method",
    "detail": "Function (VertexToVertexInstances .)",
    "insertText": "Suspend()"
  },
  {
    "label": "SuspendVertexInstanceIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SuspendVertexInstanceIndexing()"
  },
  {
    "label": "SuspendEdgeIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SuspendEdgeIndexing()"
  },
  {
    "label": "SuspendPolygonIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SuspendPolygonIndexing()"
  },
  {
    "label": "SuspendPolygonGroupIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SuspendPolygonGroupIndexing()"
  },
  {
    "label": "SuspendUVIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SuspendUVIndexing()"
  },
  {
    "label": "ResumeVertexIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeVertexIndexing()"
  },
  {
    "label": "Resume()",
    "kind": "Method",
    "detail": "Function (VertexToVertexInstances .)",
    "insertText": "Resume()"
  },
  {
    "label": "ResumeVertexInstanceIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeVertexInstanceIndexing()"
  },
  {
    "label": "ResumeEdgeIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeEdgeIndexing()"
  },
  {
    "label": "ResumePolygonIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumePolygonIndexing()"
  },
  {
    "label": "ResumePolygonGroupIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumePolygonGroupIndexing()"
  },
  {
    "label": "ResumeUVIndexing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResumeUVIndexing()"
  },
  {
    "label": "BuildVertexIndexers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildVertexIndexers()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (VertexToVertexInstances .)",
    "insertText": "Build()"
  },
  {
    "label": "BuildVertexInstanceIndexers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildVertexInstanceIndexers()"
  },
  {
    "label": "BuildEdgeIndexers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildEdgeIndexers()"
  },
  {
    "label": "BuildPolygonIndexers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildPolygonIndexers()"
  },
  {
    "label": "BuildPolygonGroupIndexers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BuildPolygonGroupIndexers()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (PolygonGroupToPolygons .)",
    "insertText": "Build(), PolygonGroupToTriangles.Build()"
  },
  {
    "label": "ReserveNewVertices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveNewVertices(const int32 NumVertices)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VertexElements ->)",
    "insertText": "Get().Reserve(VertexElements->Get().Num() + NumVertices)"
  },
  {
    "label": "CreateVertex()",
    "kind": "Method",
    "detail": "Function (} FVertexID)",
    "insertText": "CreateVertex()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FVertexID VertexID = VertexElements ->)",
    "insertText": "Get().Add()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VertexElements ->)",
    "insertText": "Get().Insert(VertexID)"
  },
  {
    "label": "DeleteVertex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteVertex(const FVertexID VertexID)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VertexElements ->)",
    "insertText": "Get().Remove(VertexID)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (VertexToVertexInstances .)",
    "insertText": "RemoveKey(VertexID)"
  },
  {
    "label": "IsVertexValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsVertexValid(const FVertexID VertexID)"
  },
  {
    "label": "ReserveNewVertexInstances()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveNewVertexInstances(const int32 NumVertexInstances)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VertexInstanceElements ->)",
    "insertText": "Get().Reserve(VertexInstanceElements->Get().Num() + NumVertexInstances)"
  },
  {
    "label": "CreateVertexInstance()",
    "kind": "Method",
    "detail": "Function (} FVertexInstanceID)",
    "insertText": "CreateVertexInstance(const FVertexID VertexID)"
  },
  {
    "label": "CreateVertexInstance_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVertexInstance_Internal(VertexInstanceID, VertexID)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (VertexInstanceElements ->)",
    "insertText": "Get().Insert(VertexInstanceID)"
  },
  {
    "label": "DeleteVertexInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteVertexInstance(const FVertexInstanceID VertexInstanceID, TArray<FVertexID>* InOutOrphanedVerticesPtr = nullptr)"
  },
  {
    "label": "IsVertexInstanceValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVertexInstanceValid(const FVertexInstanceID VertexInstanceID)"
  },
  {
    "label": "ReserveNewUVs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveNewUVs(const int32 NumUVs, const int32 UVChannel = 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UVElements ->)",
    "insertText": "Get(UVChannel).Reserve(UVElements->Get(UVChannel).Num() + NumUVs)"
  },
  {
    "label": "CreateUV()",
    "kind": "Method",
    "detail": "Function (} FUVID)",
    "insertText": "CreateUV(const int32 UVChannel = 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const FUVID UVID = UVElements ->)",
    "insertText": "Get(UVChannel).Add()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UVElements ->)",
    "insertText": "Get(UVChannel).Insert(UVID)"
  },
  {
    "label": "DeleteUV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteUV(const FUVID UVID, const int32 UVChannel = 0)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (UVElements ->)",
    "insertText": "Get(UVChannel).Remove(UVID)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (UVToTriangles .)",
    "insertText": "RemoveKey(UVID)"
  },
  {
    "label": "IsUVValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUVValid(const FUVID UVID, const int32 UVChannel = 0)"
  },
  {
    "label": "ReserveNewEdges()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveNewEdges(const int32 NumEdges)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EdgeElements ->)",
    "insertText": "Get().Reserve(EdgeElements->Get().Num() + NumEdges)"
  },
  {
    "label": "CreateEdge()",
    "kind": "Method",
    "detail": "Function (} FEdgeID)",
    "insertText": "CreateEdge(const FVertexID VertexID0, const FVertexID VertexID1)"
  },
  {
    "label": "CreateEdge_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEdge_Internal(EdgeID, VertexID0, VertexID1)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (EdgeElements ->)",
    "insertText": "Get().Insert(EdgeID)"
  },
  {
    "label": "DeleteEdge()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteEdge(const FEdgeID EdgeID, TArray<FVertexID>* InOutOrphanedVerticesPtr = nullptr)"
  },
  {
    "label": "IsEdgeValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEdgeValid(const FEdgeID EdgeID)"
  },
  {
    "label": "ReserveNewTriangles()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveNewTriangles(const int32 NumTriangles)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TriangleElements ->)",
    "insertText": "Get().Reserve(TriangleElements->Get().Num() + NumTriangles)"
  },
  {
    "label": "CreateTriangle()",
    "kind": "Method",
    "detail": "Function (} FTriangleID)",
    "insertText": "CreateTriangle(const FPolygonGroupID PolygonGroupID, TArrayView<const FVertexInstanceID> VertexInstanceIDs, TArray<FEdgeID>* OutEdgeIDs = nullptr)"
  },
  {
    "label": "CreateTriangle_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTriangle_Internal(TriangleID, PolygonGroupID, VertexInstanceIDs, OutEdgeIDs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TriangleElements ->)",
    "insertText": "Get().Insert(TriangleID)"
  },
  {
    "label": "DeleteTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteTriangle(const FTriangleID TriangleID, TArray<FEdgeID>* InOutOrphanedEdgesPtr = nullptr, TArray<FVertexInstanceID>* InOutOrphanedVertexInstancesPtr = nullptr, TArray<FPolygonGroupID>* InOutOrphanedPolygonGroupsPtr = nullptr)"
  },
  {
    "label": "DeleteTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteTriangles(const TArray<FTriangleID>& Triangles)"
  },
  {
    "label": "IsTriangleValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTriangleValid(const FTriangleID TriangleID)"
  },
  {
    "label": "ReserveNewPolygons()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveNewPolygons(const int32 NumPolygons)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (PolygonElements ->)",
    "insertText": "Get().Reserve(PolygonElements->Get().Num() + NumPolygons)"
  },
  {
    "label": "CreatePolygon()",
    "kind": "Method",
    "detail": "Function (} FPolygonID)",
    "insertText": "CreatePolygon(const FPolygonGroupID PolygonGroupID, TArrayView<const FVertexInstanceID> VertexInstanceIDs, TArray<FEdgeID>* OutEdgeIDs = nullptr)"
  },
  {
    "label": "CreatePolygon_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePolygon_Internal(PolygonID, PolygonGroupID, VertexInstanceIDs, OutEdgeIDs)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (PolygonElements ->)",
    "insertText": "Get().Insert(PolygonID)"
  },
  {
    "label": "DeletePolygon()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeletePolygon(const FPolygonID PolygonID, TArray<FEdgeID>* InOutOrphanedEdgesPtr = nullptr, TArray<FVertexInstanceID>* InOutOrphanedVertexInstancesPtr = nullptr, TArray<FPolygonGroupID>* InOutOrphanedPolygonGroupsPtr = nullptr)"
  },
  {
    "label": "DeletePolygons()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeletePolygons(const TArray<FPolygonID>& Polygons)"
  },
  {
    "label": "IsPolygonValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPolygonValid(const FPolygonID PolygonID)"
  },
  {
    "label": "ReserveNewPolygonGroups()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReserveNewPolygonGroups(const int32 NumPolygonGroups)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (PolygonGroupElements ->)",
    "insertText": "Get().Reserve(PolygonGroupElements->Get().Num() + NumPolygonGroups)"
  },
  {
    "label": "CreatePolygonGroup()",
    "kind": "Method",
    "detail": "Function (} FPolygonGroupID)",
    "insertText": "CreatePolygonGroup()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (PolygonGroupElements ->)",
    "insertText": "Get().Insert(PolygonGroupID)"
  },
  {
    "label": "DeletePolygonGroup()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeletePolygonGroup(const FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (PolygonGroupElements ->)",
    "insertText": "Get().Remove(PolygonGroupID)"
  },
  {
    "label": "RemoveKey()",
    "kind": "Method",
    "detail": "Function (PolygonGroupToPolygons .)",
    "insertText": "RemoveKey(PolygonGroupID)"
  },
  {
    "label": "IsPolygonGroupValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsPolygonGroupValid(const FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "IsVertexOrphaned()",
    "kind": "Method",
    "detail": "Function (} public : bool)",
    "insertText": "IsVertexOrphaned(const FVertexID VertexID)"
  },
  {
    "label": "GetVertexPairEdge()",
    "kind": "Method",
    "detail": "Function (FEdgeID)",
    "insertText": "GetVertexPairEdge(const FVertexID VertexID0, const FVertexID VertexID1)"
  },
  {
    "label": "GetVertexConnectedEdgeIDs()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FEdgeID>)",
    "insertText": "GetVertexConnectedEdgeIDs(const FVertexID VertexID)"
  },
  {
    "label": "GetNumVertexConnectedEdges()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumVertexConnectedEdges(const FVertexID VertexID)"
  },
  {
    "label": "GetVertexVertexInstanceIDs()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FVertexInstanceID>)",
    "insertText": "GetVertexVertexInstanceIDs(const FVertexID VertexID)"
  },
  {
    "label": "GetNumVertexVertexInstances()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumVertexVertexInstances(const FVertexID VertexID)"
  },
  {
    "label": "GetVertexConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetVertexConnectedTriangles(const FVertexID VertexID, TArray<FTriangleID, Alloc>& OutConnectedTriangleIDs)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutConnectedTriangleIDs .)",
    "insertText": "Reset(GetNumVertexConnectedTriangles(VertexID))"
  },
  {
    "label": "FTriangleID()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTriangleID> ConnectedTris = VertexInstanceToTriangles . Find<)",
    "insertText": "FTriangleID(VertexInstanceID)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (OutConnectedTriangleIDs .)",
    "insertText": "Append(ConnectedTris.GetData(), ConnectedTris.Num())"
  },
  {
    "label": "GetVertexConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (} } template<Alloc> TArray<FTriangleID,Alloc>)",
    "insertText": "GetVertexConnectedTriangles(const FVertexID VertexID)"
  },
  {
    "label": "GetVertexConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<FTriangleID,Alloc> Result ; this ->)",
    "insertText": "GetVertexConnectedTriangles(VertexID, Result)"
  },
  {
    "label": "FVertexInstanceID()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FVertexInstanceID> VertexInstances = VertexToVertexInstances . Find<)",
    "insertText": "FVertexInstanceID(VertexID)"
  },
  {
    "label": "GetVertexConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetVertexConnectedPolygons(const FVertexID VertexID, TArray<FPolygonID, Alloc>& OutConnectedPolygonIDs)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutConnectedPolygonIDs .)",
    "insertText": "Reset()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (OutConnectedPolygonIDs .)",
    "insertText": "AddUnique(TrianglePolygons[TriangleID])"
  },
  {
    "label": "GetVertexConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (} } } template<Alloc> TArray<FPolygonID,Alloc>)",
    "insertText": "GetVertexConnectedPolygons(const FVertexID VertexID)"
  },
  {
    "label": "GetVertexConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (TArray<FPolygonID,Alloc> Result ; this ->)",
    "insertText": "GetVertexConnectedPolygons(VertexID, Result)"
  },
  {
    "label": "GetVertexAdjacentVertices()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetVertexAdjacentVertices(const FVertexID VertexID, TArray<FVertexID, Alloc>& OutAdjacentVertexIDs)"
  },
  {
    "label": "FEdgeID()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FEdgeID> ConnectedEdgeIDs = VertexToEdges . Find<)",
    "insertText": "FEdgeID(VertexID)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (OutAdjacentVertexIDs .)",
    "insertText": "SetNumUninitialized(ConnectedEdgeIDs.Num())"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Index = 0 ;)",
    "insertText": "for(const FEdgeID& EdgeID : ConnectedEdgeIDs)"
  },
  {
    "label": "Index()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FVertexID> EdgeVertexIDs = EdgeVertices [ EdgeID ] ; OutAdjacentVertexIDs [)",
    "insertText": "Index(EdgeVertexIDs[0] == VertexID)"
  },
  {
    "label": "GetVertexAdjacentVertices()",
    "kind": "Method",
    "detail": "Function (Index + + ; } } template<Alloc> TArray<FVertexID,Alloc>)",
    "insertText": "GetVertexAdjacentVertices(const FVertexID VertexID)"
  },
  {
    "label": "GetVertexAdjacentVertices()",
    "kind": "Method",
    "detail": "Function (TArray<FVertexID,Alloc> Result ; this ->)",
    "insertText": "GetVertexAdjacentVertices(VertexID, Result)"
  },
  {
    "label": "GetVertexInstanceConnectedTriangleIDs()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTriangleID>)",
    "insertText": "GetVertexInstanceConnectedTriangleIDs(const FVertexInstanceID VertexInstanceID)"
  },
  {
    "label": "GetNumVertexInstanceConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumVertexInstanceConnectedTriangles(const FVertexInstanceID VertexInstanceID)"
  },
  {
    "label": "GetVertexInstanceConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetVertexInstanceConnectedPolygons(const FVertexInstanceID VertexInstanceID, TArray<FPolygonID, Alloc>& OutPolygonIDs)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutPolygonIDs .)",
    "insertText": "Reset(VertexInstanceToTriangles.Find(VertexInstanceID).Num())"
  },
  {
    "label": "GetVertexInstanceConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (} } template<Alloc> TArray<FPolygonID,Alloc>)",
    "insertText": "GetVertexInstanceConnectedPolygons(const FVertexInstanceID VertexInstanceID)"
  },
  {
    "label": "GetVertexInstanceConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (TArray<FPolygonID,Alloc> Result ; this ->)",
    "insertText": "GetVertexInstanceConnectedPolygons(VertexInstanceID, Result)"
  },
  {
    "label": "IsEdgeInternal()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdgeInternal(const FEdgeID EdgeID)"
  },
  {
    "label": "FTriangleID()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTriangleID> ConnectedTriangles = EdgeToTriangles . Find<)",
    "insertText": "FTriangleID(EdgeID)"
  },
  {
    "label": "IsEdgeInternalToPolygon()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEdgeInternalToPolygon(const FEdgeID EdgeID, const FPolygonID PolygonID)"
  },
  {
    "label": "GetEdgeConnectedTriangleIDs()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FTriangleID>)",
    "insertText": "GetEdgeConnectedTriangleIDs(const FEdgeID EdgeID)"
  },
  {
    "label": "GetNumEdgeConnectedTriangles()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumEdgeConnectedTriangles(const FEdgeID EdgeID)"
  },
  {
    "label": "GetEdgeConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetEdgeConnectedPolygons(const FEdgeID EdgeID, TArray<FPolygonID, Alloc>& OutPolygonIDs)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutPolygonIDs .)",
    "insertText": "Reset(EdgeToTriangles.Find(EdgeID).Num())"
  },
  {
    "label": "GetEdgeConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (} } template<Alloc> TArray<FPolygonID,Alloc>)",
    "insertText": "GetEdgeConnectedPolygons(const FEdgeID EdgeID)"
  },
  {
    "label": "GetEdgeConnectedPolygons()",
    "kind": "Method",
    "detail": "Function (TArray<FPolygonID,Alloc> Result ; this ->)",
    "insertText": "GetEdgeConnectedPolygons(EdgeID, Result)"
  },
  {
    "label": "GetEdgeVertex()",
    "kind": "Method",
    "detail": "Function (} FVertexID)",
    "insertText": "GetEdgeVertex(const FEdgeID EdgeID, int32 VertexNumber)"
  },
  {
    "label": "GetEdgeVertices()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FVertexID> EdgeVertexIDs = EdgeVertices [ EdgeID ] ; return EdgeVertexIDs [ VertexNumber ] ; } TArrayView<const FVertexID>)",
    "insertText": "GetEdgeVertices(const FEdgeID EdgeID)"
  },
  {
    "label": "GetTriangleVertexInstances()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FVertexInstanceID>)",
    "insertText": "GetTriangleVertexInstances(const FTriangleID TriangleID)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FVertexID> TriVerts = TriangleVertices [ TriangleID ] ;)",
    "insertText": "for(int32 Index = 0; Index < 3; ++Index)"
  },
  {
    "label": "GetTriangleVertices()",
    "kind": "Method",
    "detail": "Function (OutVertexIDs [ Index ] = TriVerts [ Index ] ; } } TArrayView<const FVertexID>)",
    "insertText": "GetTriangleVertices(const FTriangleID TriangleID)"
  },
  {
    "label": "GetTriangleEdges()",
    "kind": "Method",
    "detail": "Function (OutEdgeIDs [ Index ] = TriEdges [ Index ] ; } } TArrayView<FEdgeID>)",
    "insertText": "GetTriangleEdges(const FTriangleID TriangleID)"
  },
  {
    "label": "OtherTriangleID()",
    "kind": "Method",
    "detail": "Function (FTriangleID)",
    "insertText": "OtherTriangleID(TriangleIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutTriangleIDs .)",
    "insertText": "Add(OtherTriangleID)"
  },
  {
    "label": "GetTriangleAdjacentTriangles()",
    "kind": "Method",
    "detail": "Function (} } } } template<Alloc> TArray<FTriangleID,Alloc>)",
    "insertText": "GetTriangleAdjacentTriangles(const FTriangleID TriangleID)"
  },
  {
    "label": "GetTriangleAdjacentTriangles()",
    "kind": "Method",
    "detail": "Function (TArray<FTriangleID,Alloc> Result ; this ->)",
    "insertText": "GetTriangleAdjacentTriangles(TriangleID, Result)"
  },
  {
    "label": "GetVertexInstanceForTriangleVertex()",
    "kind": "Method",
    "detail": "Function (} FVertexInstanceID)",
    "insertText": "GetVertexInstanceForTriangleVertex(const FTriangleID TriangleID, const FVertexID VertexID)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const FVertexInstanceID* VertexInstanceIDPtr =)",
    "insertText": "FindByPredicate(GetTriangleVertexInstances(TriangleID), [this, VertexID](const FVertexInstanceID VertexInstanceID) { return (GetVertexInstanceVertex(VertexInstanceID) == VertexID); })"
  },
  {
    "label": "ReverseTriangleFacing()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReverseTriangleFacing(const FTriangleID TriangleID)"
  },
  {
    "label": "SetTriangleUVIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTriangleUVIndices(const FTriangleID TriangleID, TArrayView<const FUVID> UVIDs, int32 UVChannel = 0)"
  },
  {
    "label": "GetPolygonTriangles()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTriangleID>)",
    "insertText": "GetPolygonTriangles(const FPolygonID PolygonID)"
  },
  {
    "label": "GetNumPolygonTriangles()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPolygonTriangles(const FPolygonID PolygonID)"
  },
  {
    "label": "GetPolygonVertexInstances()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetPolygonVertexInstances(const FPolygonID PolygonID, TArray<FVertexInstanceID, Alloc>& OutVertexInstanceIDs)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (OutVertexInstanceIDs .)",
    "insertText": "SetNumUninitialized(GetNumPolygonVertices(PolygonID))"
  },
  {
    "label": "FTriangleID()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FTriangleID> Tris = PolygonToTriangles . Find<)",
    "insertText": "FTriangleID(PolygonID)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (OutVertexInstanceIDs = TriangleVertexInstances [ Tris [ 0 ] ] ; } else { TArray<TTuple<int32,int32>,TInlineAllocator<8>> Result ; Result .)",
    "insertText": "SetNumUninitialized(Tris.Num() + 2)"
  },
  {
    "label": "FindPolygonPerimeter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPolygonPerimeter(Tris, Result)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FTriangleID TriangleID = Tris [ Result [ Index ] .)",
    "insertText": "Get()"
  },
  {
    "label": "GetPolygonVertexInstances()",
    "kind": "Method",
    "detail": "Function (OutVertexInstanceIDs [ Index ] = TriangleVertexInstances [ TriangleID ] [ VertexInstanceNumber ] ; } } } template<Alloc> TArray<FVertexInstanceID,Alloc>)",
    "insertText": "GetPolygonVertexInstances(const FPolygonID PolygonID)"
  },
  {
    "label": "GetPolygonVertexInstances()",
    "kind": "Method",
    "detail": "Function (TArray<FVertexInstanceID,Alloc> Result ; this ->)",
    "insertText": "GetPolygonVertexInstances(PolygonID, Result)"
  },
  {
    "label": "GetPolygonVertices()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetPolygonVertices(const FPolygonID PolygonID, TArray<FVertexID, Alloc>& OutVertexIDs)"
  },
  {
    "label": "GetPolygonVertices()",
    "kind": "Method",
    "detail": "Function (OutVertexIDs [ Index ] = TriangleVertices [ TriangleID ] [ VertexNumber ] ; } } } template<Alloc> TArray<FVertexID,Alloc>)",
    "insertText": "GetPolygonVertices(const FPolygonID PolygonID)"
  },
  {
    "label": "GetPolygonVertices()",
    "kind": "Method",
    "detail": "Function (TArray<FVertexID,Alloc> Result ; this ->)",
    "insertText": "GetPolygonVertices(PolygonID, Result)"
  },
  {
    "label": "GetPolygonPerimeterEdges()",
    "kind": "Method",
    "detail": "Function (OutEdgeIDs [ Index ] = TriangleEdges [ TriangleID ] [ EdgeNumber ] ; } } } template<Alloc> TArray<FEdgeID,Alloc>)",
    "insertText": "GetPolygonPerimeterEdges(const FPolygonID PolygonID)"
  },
  {
    "label": "GetPolygonPerimeterEdges()",
    "kind": "Method",
    "detail": "Function (TArray<FEdgeID,Alloc> Result ; this ->)",
    "insertText": "GetPolygonPerimeterEdges(PolygonID, Result)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (OutEdgeIDs .)",
    "insertText": "Reset(GetNumPolygonVertices(PolygonID) - 3)"
  },
  {
    "label": "GetPolygonVertexInstances()",
    "kind": "Method",
    "detail": "Function (TArray<FVertexInstanceID> VertexInstanceIDs =)",
    "insertText": "GetPolygonVertexInstances(PolygonID)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEdgeIDs .)",
    "insertText": "Add(EdgeID)"
  },
  {
    "label": "GetPolygonInternalEdges()",
    "kind": "Method",
    "detail": "Function (} } } } } template<Alloc> TArray<FEdgeID,Alloc>)",
    "insertText": "GetPolygonInternalEdges(const FPolygonID PolygonID)"
  },
  {
    "label": "GetPolygonInternalEdges()",
    "kind": "Method",
    "detail": "Function (TArray<FEdgeID,Alloc> Result ; this ->)",
    "insertText": "GetPolygonInternalEdges(PolygonID, Result)"
  },
  {
    "label": "GetPolygonAdjacentPolygons()",
    "kind": "Method",
    "detail": "Function (} template<Alloc> void)",
    "insertText": "GetPolygonAdjacentPolygons(const FPolygonID PolygonID, TArray<FPolygonID, Alloc>& OutPolygonIDs)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutPolygonIDs .)",
    "insertText": "Add(OtherPolygonID)"
  },
  {
    "label": "GetPolygonAdjacentPolygons()",
    "kind": "Method",
    "detail": "Function (} } } } template<Alloc> TArray<FPolygonID,Alloc>)",
    "insertText": "GetPolygonAdjacentPolygons(const FPolygonID PolygonID)"
  },
  {
    "label": "GetPolygonAdjacentPolygons()",
    "kind": "Method",
    "detail": "Function (TArray<FPolygonID,Alloc> Result ; this ->)",
    "insertText": "GetPolygonAdjacentPolygons(PolygonID, Result)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (const FVertexInstanceID* VertexInstanceIDPtr = VertexInstanceIDs .)",
    "insertText": "FindByPredicate([this, VertexID](const FVertexInstanceID VertexInstanceID) { return (GetVertexInstanceVertex(VertexInstanceID) == VertexID); })"
  },
  {
    "label": "SetPolygonVertexInstance()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPolygonVertexInstance(const FPolygonID PolygonID, const int32 PerimeterIndex, const FVertexInstanceID VertexInstanceID)"
  },
  {
    "label": "SetPolygonVertexInstances()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolygonVertexInstances(const FPolygonID PolygonID, TArrayView<const FVertexInstanceID> VertexInstanceIDs)"
  },
  {
    "label": "SetPolygonPolygonGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPolygonPolygonGroup(const FPolygonID PolygonID, const FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "RemoveReferenceFromKey()",
    "kind": "Method",
    "detail": "Function (FPolygonGroupID OldPolygonGroupID = PolygonPolygonGroups [ PolygonID ] ; PolygonGroupToPolygons .)",
    "insertText": "RemoveReferenceFromKey(OldPolygonGroupID, PolygonID)"
  },
  {
    "label": "AddReferenceToKey()",
    "kind": "Method",
    "detail": "Function (PolygonPolygonGroups [ PolygonID ] = PolygonGroupID ; PolygonGroupToPolygons .)",
    "insertText": "AddReferenceToKey(PolygonGroupID, PolygonID)"
  },
  {
    "label": "TriangleID()",
    "kind": "Method",
    "detail": "Function (const FTriangleID)",
    "insertText": "TriangleID(TriangleIndex)"
  },
  {
    "label": "RemoveReferenceFromKey()",
    "kind": "Method",
    "detail": "Function (PolygonGroupToTriangles .)",
    "insertText": "RemoveReferenceFromKey(OldPolygonGroupID, TriangleID)"
  },
  {
    "label": "AddReferenceToKey()",
    "kind": "Method",
    "detail": "Function (TrianglePolygonGroups [ TriangleID ] = PolygonGroupID ; PolygonGroupToTriangles .)",
    "insertText": "AddReferenceToKey(PolygonGroupID, TriangleID)"
  },
  {
    "label": "ReversePolygonFacing()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ReversePolygonFacing(const FPolygonID PolygonID)"
  },
  {
    "label": "FindPolygonPerimeter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPolygonPerimeter(TArrayView<const FTriangleID> Triangles, TArrayView<TTuple<int32, int32>> Result)"
  },
  {
    "label": "FindPolygonPerimeter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindPolygonPerimeter(const FPolygonID PolygonID, TArrayView<FEdgeID> Edges)"
  },
  {
    "label": "ComputePolygonTriangulation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputePolygonTriangulation(const FPolygonID PolygonID)"
  },
  {
    "label": "SplitPolygon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitPolygon(FPolygonID PolygonID)"
  },
  {
    "label": "GetPolygonGroupPolygonIDs()",
    "kind": "Method",
    "detail": "Function (TArrayView<const FPolygonID>)",
    "insertText": "GetPolygonGroupPolygonIDs(const FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "GetPolygonGroupTriangles()",
    "kind": "Method",
    "detail": "Function (} TArrayView<const FTriangleID>)",
    "insertText": "GetPolygonGroupTriangles(const FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "GetNumPolygonGroupPolygons()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPolygonGroupPolygons(const FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "GetNumPolygonGroupTriangles()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetNumPolygonGroupTriangles(const FPolygonGroupID PolygonGroupID)"
  },
  {
    "label": "RemapPolygonGroups()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemapPolygonGroups(const TMap<FPolygonGroupID, FPolygonGroupID>& Remap)"
  },
  {
    "label": "TransferPolygonGroup()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TransferPolygonGroup(FPolygonGroupID SourceID, FPolygonGroupID DestinationID)"
  },
  {
    "label": "NeedsCompact()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NeedsCompact()"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compact(FElementIDRemappings& OutRemappings)"
  },
  {
    "label": "Remap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Remap(const FElementIDRemappings& Remappings)"
  },
  {
    "label": "GetNumUVElementChannels()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumUVElementChannels()"
  },
  {
    "label": "SetNumUVChannels()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumUVChannels(const int32 NumUVChannels)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "GetBounds()"
  },
  {
    "label": "TriangulateMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TriangulateMesh()"
  },
  {
    "label": "ReverseAllPolygonFacing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReverseAllPolygonFacing()"
  },
  {
    "label": "GetTriangleCornerAngleForVertex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetTriangleCornerAngleForVertex(const FTriangleID TriangleID, const FVertexID VertexID)"
  },
  {
    "label": "GetPolygonCornerAngleForVertex()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetPolygonCornerAngleForVertex(const FPolygonID PolygonID, const FVertexID VertexID)"
  },
  {
    "label": "ComputeBoundingBox()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "ComputeBoundingBox()"
  },
  {
    "label": "ComputePolygonPlane()",
    "kind": "Method",
    "detail": "Function (private : FPlane)",
    "insertText": "ComputePolygonPlane(TArrayView<const FVertexInstanceID> PerimeterVertexInstanceIDs)"
  },
  {
    "label": "ComputePolygonNormal()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "ComputePolygonNormal(TArrayView<const FVertexInstanceID> PerimeterVertexInstanceIDs)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "InitializeIndexers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeIndexers()"
  },
  {
    "label": "Cache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Cache()"
  },
  {
    "label": "CreateVertexInstance_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateVertexInstance_Internal(const FVertexInstanceID VertexInstanceID, const FVertexID VertexID)"
  },
  {
    "label": "CreateEdge_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEdge_Internal(const FEdgeID EdgeID, const FVertexID VertexID0, const FVertexID VertexID1)"
  },
  {
    "label": "CreateTriangle_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateTriangle_Internal(const FTriangleID TriangleID, const FPolygonGroupID PolygonGroupID, TArrayView<const FVertexInstanceID> VertexInstanceIDs, TArray<FEdgeID>* OutEdgeIDs)"
  },
  {
    "label": "CreatePolygon_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePolygon_Internal(const FPolygonID PolygonID, const FPolygonGroupID PolygonGroupID, TArrayView<const FVertexInstanceID> VertexInstanceIDs, TArray<FEdgeID>* OutEdgeIDs)"
  },
  {
    "label": "CreatePolygonTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreatePolygonTriangles(const FPolygonID PolygonID, TArrayView<const FVertexInstanceID> VertexInstanceIDs)"
  },
  {
    "label": "RemovePolygonTriangles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePolygonTriangles(const FPolygonID PolygonID)"
  },
  {
    "label": "DeleteVertexInstance_Internal()",
    "kind": "Method",
    "detail": "Function (template<template<. . .> class TContainer> void)",
    "insertText": "DeleteVertexInstance_Internal(const FVertexInstanceID VertexInstanceID, TContainer<FVertexID>* InOutOrphanedVerticesPtr = nullptr)"
  },
  {
    "label": "DeleteEdge_Internal()",
    "kind": "Method",
    "detail": "Function (template<template<. . .> class TContainer> void)",
    "insertText": "DeleteEdge_Internal(const FEdgeID EdgeID, TContainer<FVertexID>* InOutOrphanedVerticesPtr = nullptr)"
  },
  {
    "label": "DeleteTriangle_Internal()",
    "kind": "Method",
    "detail": "Function (template<template<. . .> class TContainer> void)",
    "insertText": "DeleteTriangle_Internal(const FTriangleID TriangleID, TContainer<FEdgeID>* InOutOrphanedEdgesPtr = nullptr, TContainer<FVertexInstanceID>* InOutOrphanedVertexInstancesPtr = nullptr, TContainer<FPolygonGroupID>* InOutOrphanedPolygonGroupsPtr = nullptr)"
  },
  {
    "label": "DeletePolygon_Internal()",
    "kind": "Method",
    "detail": "Function (template<template<. . .> class TContainer> void)",
    "insertText": "DeletePolygon_Internal(const FPolygonID PolygonID, TContainer<FEdgeID>* InOutOrphanedEdgesPtr = nullptr, TContainer<FVertexInstanceID>* InOutOrphanedVertexInstancesPtr = nullptr, TContainer<FPolygonGroupID>* InOutOrphanedPolygonGroupsPtr = nullptr)"
  },
  {
    "label": "FixUpElementIDs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixUpElementIDs(const FElementIDRemappings& Remappings)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (template<class T> void)",
    "insertText": "AddUnique(TArray<T>& Container, const T& Item)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "AddUnique(Item)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "AddUnique(TSet<T>& Container, const T& Item)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Container .)",
    "insertText": "Add(Item)"
  },
  {
    "label": "FMeshDescriptionBulkData()",
    "kind": "Method",
    "detail": "Function (} public : FName VerticesName ; FName VertexInstancesName ; FName UVsName ; FName EdgesName ; FName TrianglesName ; FName PolygonsName ; FName PolygonGroupsName ; private : TMap<FName,FMeshElementTypeWrapper> Elements ; FMeshElementChannels* VertexElements ; FMeshElementChannels* VertexInstanceElements ; FMeshElementChannels* UVElements ; FMeshElementChannels* EdgeElements ; FMeshElementChannels* TriangleElements ; FMeshElementChannels* PolygonElements ; FMeshElementChannels* PolygonGroupElements ; TMeshAttributesArray<FVertexID> VertexInstanceVertices ; TMeshAttributesArray<TArrayView<FVertexID>> EdgeVertices ; TMeshAttributesArray<TArrayView<FVertexInstanceID>> TriangleVertexInstances ; TMeshAttributesArray<FPolygonID> TrianglePolygons ; TMeshAttributesArray<TArrayView<FEdgeID>> TriangleEdges ; TMeshAttributesArray<TArrayView<FVertexID>> TriangleVertices ; TMeshAttributesArray<TArrayView<FUVID>> TriangleUVs ; TMeshAttributesArray<FPolygonGroupID> TrianglePolygonGroups ; TMeshAttributesArray<FPolygonGroupID> PolygonPolygonGroups ; TMeshAttributesArray<FVector3f> VertexPositions ; FMeshElementIndexer VertexToVertexInstances ; FMeshElementIndexer VertexToEdges ; FMeshElementIndexer VertexInstanceToTriangles ; FMeshElementIndexer EdgeToTriangles ; FMeshElementIndexer UVToTriangles ; FMeshElementIndexer PolygonToTriangles ; FMeshElementIndexer PolygonGroupToTriangles ; FMeshElementIndexer PolygonGroupToPolygons ; } ; # if WITH_EDITORONLY_DATA struct FMeshDescriptionBulkData { public :)",
    "insertText": "FMeshDescriptionBulkData() : bBulkDataUpdated(false) , bGuidIsHash(false)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FArchive& Ar, UObject* Owner)"
  },
  {
    "label": "SaveMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveMeshDescription(FMeshDescription& MeshDescription)"
  },
  {
    "label": "LoadMeshDescription()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadMeshDescription(FMeshDescription& MeshDescription)"
  },
  {
    "label": "GetIdString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetIdString()"
  },
  {
    "label": "UseHashAsGuid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseHashAsGuid()"
  },
  {
    "label": "GetBulkDataSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetBulkDataSize()"
  },
  {
    "label": "GetMeshDescriptionCustomVersions()",
    "kind": "Method",
    "detail": "Function (} TConstArrayView<FGuid>)",
    "insertText": "GetMeshDescriptionCustomVersions()"
  },
  {
    "label": "UpdateMeshDescriptionFormat()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateMeshDescriptionFormat()"
  },
  {
    "label": "GetHash()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR FRWLock BulkDataLock ; # endif UE::Serialization::FEditorBulkData BulkData ; FGuid Guid ; FGuid)",
    "insertText": "GetHash()"
  }
]