[
  {
    "label": "DenseMapPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DenseMapPair"
  },
  {
    "label": "DenseMapIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseMapIterator"
  },
  {
    "label": "DenseMapBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseMapBase"
  },
  {
    "label": "LookupKeyT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LookupKeyT"
  },
  {
    "label": "DenseMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseMap"
  },
  {
    "label": "SmallDenseMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SmallDenseMap"
  },
  {
    "label": "LargeRep",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LargeRep"
  },
  {
    "label": "getFirst()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ADT_DENSEMAP_H # define LLVM_ADT_DENSEMAP_H # include \" llvm / ADT / DenseMapInfo . h \" # include \" llvm / ADT / EpochTracker . h \" # include \" llvm / Support / AlignOf . h \" # include \" llvm / Support / Compiler . h \" # include \" llvm / Support / MathExtras . h \" # include \" llvm / Support / PointerLikeTypeTraits . h \" # include \" llvm / Support / type_traits . h \" # include<algorithm> # include<cassert> # include<climits> # include<cstddef> # include<cstring> # include<iterator> # include<new> # include<utility> namespace llvm { namespace detail { template<KeyT,ValueT> struct DenseMapPair : public std::pair<KeyT,ValueT> { KeyT&)",
    "insertText": "getFirst()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (} bool LLVM_ATTRIBUTE_UNUSED_RESULT)",
    "insertText": "empty()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "size()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "resize(size_type Size)"
  },
  {
    "label": "incrementEpoch()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incrementEpoch()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "shrink_and_clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "shrink_and_clear()"
  },
  {
    "label": "getNumEntries()",
    "kind": "Method",
    "detail": "Function (unsigned NumEntries =)",
    "insertText": "getNumEntries()"
  },
  {
    "label": "getSecond()",
    "kind": "Method",
    "detail": "Function (P ->)",
    "insertText": "getSecond().~ValueT()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "assert(NumEntries == 0 && \"Node count imbalance!\")"
  },
  {
    "label": "setNumEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumEntries(0)"
  },
  {
    "label": "setNumTombstones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumTombstones(0)"
  },
  {
    "label": "count()",
    "kind": "Method",
    "detail": "Function (} size_type)",
    "insertText": "count(const KeyT &Val)"
  },
  {
    "label": "LookupBucketFor()",
    "kind": "Method",
    "detail": "Function (const BucketT* TheBucket ; return)",
    "insertText": "LookupBucketFor(Val, TheBucket)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "find(const KeyT &Val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BucketT* TheBucket ;)",
    "insertText": "if(LookupBucketFor(Val, TheBucket)) return iterator(TheBucket, getBucketsEnd(), *this, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const BucketT* TheBucket ;)",
    "insertText": "if(LookupBucketFor(Val, TheBucket)) return const_iterator(TheBucket, getBucketsEnd(), *this, true)"
  },
  {
    "label": "find_as()",
    "kind": "Method",
    "detail": "Function (} template<class LookupKeyT> iterator)",
    "insertText": "find_as(const LookupKeyT &Val)"
  },
  {
    "label": "lookup()",
    "kind": "Method",
    "detail": "Function (} ValueT)",
    "insertText": "lookup(const KeyT &Val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const BucketT* TheBucket ;)",
    "insertText": "if(LookupBucketFor(Val, TheBucket)) return TheBucket->getSecond()"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(const std::pair<KeyT, ValueT> &KV)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} std::pair<iterator,bool>)",
    "insertText": "insert(std::pair<KeyT, ValueT> &&KV)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<. . . Ts> std::pair<iterator,bool>)",
    "insertText": "try_emplace(KeyT &&Key, Ts &&... Args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BucketT* TheBucket ;)",
    "insertText": "if(LookupBucketFor(Key, TheBucket)) return std::make_pair(iterator(TheBucket, getBucketsEnd(), *this, true), false)"
  },
  {
    "label": "InsertIntoBucket()",
    "kind": "Method",
    "detail": "Function (TheBucket =)",
    "insertText": "InsertIntoBucket(TheBucket, std::move(Key), std::forward<Ts>(Args)...)"
  },
  {
    "label": "try_emplace()",
    "kind": "Method",
    "detail": "Function (} template<. . . Ts> std::pair<iterator,bool>)",
    "insertText": "try_emplace(const KeyT &Key, Ts &&... Args)"
  },
  {
    "label": "InsertIntoBucket()",
    "kind": "Method",
    "detail": "Function (TheBucket =)",
    "insertText": "InsertIntoBucket(TheBucket, Key, std::forward<Ts>(Args)...)"
  },
  {
    "label": "insert_as()",
    "kind": "Method",
    "detail": "Function (} template<LookupKeyT> std::pair<iterator,bool>)",
    "insertText": "insert_as(std::pair<KeyT, ValueT> &&KV, const LookupKeyT &Val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BucketT* TheBucket ;)",
    "insertText": "if(LookupBucketFor(Val, TheBucket)) return std::make_pair(iterator(TheBucket, getBucketsEnd(), *this, true), false)"
  },
  {
    "label": "InsertIntoBucketWithLookup()",
    "kind": "Method",
    "detail": "Function (TheBucket =)",
    "insertText": "InsertIntoBucketWithLookup(TheBucket, std::move(KV.first), std::move(KV.second), Val)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (} template<InputIt> void)",
    "insertText": "insert(InputIt I, InputIt E)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "erase(const KeyT &Val)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BucketT* TheBucket ;)",
    "insertText": "if(!LookupBucketFor(Val, TheBucket))"
  },
  {
    "label": "getFirst()",
    "kind": "Method",
    "detail": "Function (TheBucket ->)",
    "insertText": "getFirst() = getTombstoneKey()"
  },
  {
    "label": "decrementNumEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "decrementNumEntries()"
  },
  {
    "label": "incrementNumTombstones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incrementNumTombstones()"
  },
  {
    "label": "FindAndConstruct()",
    "kind": "Method",
    "detail": "Function (} value_type&)",
    "insertText": "FindAndConstruct(const KeyT &Key)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BucketT* TheBucket ;)",
    "insertText": "if(LookupBucketFor(Key, TheBucket))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueT&)",
    "insertText": "operator(const KeyT &Key)"
  },
  {
    "label": "FindAndConstruct()",
    "kind": "Method",
    "detail": "Function (} value_type&)",
    "insertText": "FindAndConstruct(KeyT &&Key)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ValueT&)",
    "insertText": "operator(KeyT &&Key)"
  },
  {
    "label": "isPointerIntoBucketsArray()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isPointerIntoBucketsArray(const void *Ptr)"
  },
  {
    "label": "getPointerIntoBucketsArray()",
    "kind": "Method",
    "detail": "Function (} const void*)",
    "insertText": "getPointerIntoBucketsArray()"
  },
  {
    "label": "DenseMapBase()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "DenseMapBase()"
  },
  {
    "label": "destroyAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "destroyAll()"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (const KeyT EmptyKey =)",
    "insertText": "getEmptyKey(), TombstoneKey = getTombstoneKey()"
  },
  {
    "label": "getFirst()",
    "kind": "Method",
    "detail": "Function (P ->)",
    "insertText": "getFirst().~KeyT()"
  },
  {
    "label": "initEmpty()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "initEmpty()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((getNumBuckets() & (getNumBuckets()-1)) == 0 && \"# initial buckets must be a power of two!\")"
  },
  {
    "label": "getEmptyKey()",
    "kind": "Method",
    "detail": "Function (const KeyT EmptyKey =)",
    "insertText": "getEmptyKey()"
  },
  {
    "label": "moveFromOldBuckets()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "moveFromOldBuckets(BucketT *OldBucketsBegin, BucketT *OldBucketsEnd)"
  },
  {
    "label": "getTombstoneKey()",
    "kind": "Method",
    "detail": "Function (const KeyT TombstoneKey =)",
    "insertText": "getTombstoneKey()"
  },
  {
    "label": "LookupBucketFor()",
    "kind": "Method",
    "detail": "Function (BucketT* DestBucket ; bool FoundVal =)",
    "insertText": "LookupBucketFor(B->getFirst(), DestBucket)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!FoundVal && \"Key already in new map?\")"
  },
  {
    "label": "getFirst()",
    "kind": "Method",
    "detail": "Function (DestBucket ->)",
    "insertText": "getFirst() = std::move(B->getFirst())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&DestBucket->getSecond()) ValueT(std::move(B->getSecond()))"
  },
  {
    "label": "incrementNumEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "incrementNumEntries()"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (} } template<OtherBaseT> void)",
    "insertText": "copyFrom(const DenseMapBase<OtherBaseT, KeyT, ValueT, KeyInfoT, BucketT> &other)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(&other != this)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getNumBuckets() == other.getNumBuckets())"
  },
  {
    "label": "setNumEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumEntries(other.getNumEntries())"
  },
  {
    "label": "setNumTombstones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumTombstones(other.getNumTombstones())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&getBuckets()[i].getFirst()) KeyT(other.getBuckets()[i].getFirst())"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} } unsigned)",
    "insertText": "getHashValue(const KeyT &Val)"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (} template<LookupKeyT> unsigned)",
    "insertText": "getHashValue(const LookupKeyT &Val)"
  },
  {
    "label": "setNumEntries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNumEntries(unsigned Num)"
  },
  {
    "label": "DerivedT()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "DerivedT(this)->setNumEntries(Num)"
  },
  {
    "label": "setNumEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumEntries(getNumEntries() + 1)"
  },
  {
    "label": "setNumEntries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumEntries(getNumEntries() - 1)"
  },
  {
    "label": "getNumTombstones()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumTombstones()"
  },
  {
    "label": "setNumTombstones()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setNumTombstones(unsigned Num)"
  },
  {
    "label": "DerivedT()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "DerivedT(this)->setNumTombstones(Num)"
  },
  {
    "label": "setNumTombstones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumTombstones(getNumTombstones() + 1)"
  },
  {
    "label": "decrementNumTombstones()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "decrementNumTombstones()"
  },
  {
    "label": "setNumTombstones()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setNumTombstones(getNumTombstones() - 1)"
  },
  {
    "label": "getBuckets()",
    "kind": "Method",
    "detail": "Function (} const BucketT*)",
    "insertText": "getBuckets()"
  },
  {
    "label": "getNumBuckets()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "getNumBuckets()"
  },
  {
    "label": "getBucketsEnd()",
    "kind": "Method",
    "detail": "Function (} BucketT*)",
    "insertText": "getBucketsEnd()"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "grow(unsigned AtLeast)"
  },
  {
    "label": "DerivedT()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "DerivedT(this)->grow(AtLeast)"
  },
  {
    "label": "DerivedT()",
    "kind": "Method",
    "detail": "Function (static_cast<)",
    "insertText": "DerivedT(this)->shrink_and_clear()"
  },
  {
    "label": "InsertIntoBucket()",
    "kind": "Method",
    "detail": "Function (} template<KeyArg,. . . ValueArgs> BucketT*)",
    "insertText": "InsertIntoBucket(BucketT *TheBucket, KeyArg &&Key, ValueArgs &&... Values)"
  },
  {
    "label": "InsertIntoBucketImpl()",
    "kind": "Method",
    "detail": "Function (TheBucket =)",
    "insertText": "InsertIntoBucketImpl(Key, Key, TheBucket)"
  },
  {
    "label": "getFirst()",
    "kind": "Method",
    "detail": "Function (TheBucket ->)",
    "insertText": "getFirst() = std::forward<KeyArg>(Key)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&TheBucket->getSecond()) ValueT(std::forward<ValueArgs>(Values)...)"
  },
  {
    "label": "InsertIntoBucketImpl()",
    "kind": "Method",
    "detail": "Function (TheBucket =)",
    "insertText": "InsertIntoBucketImpl(Key, Lookup, TheBucket)"
  },
  {
    "label": "getFirst()",
    "kind": "Method",
    "detail": "Function (TheBucket ->)",
    "insertText": "getFirst() = std::move(Key)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&TheBucket->getSecond()) ValueT(std::move(Value))"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "grow(NumBuckets * 2)"
  },
  {
    "label": "LookupBucketFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LookupBucketFor(Key, TheBucket)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(LLVM_UNLIKELY(NumBuckets-(NewNumEntries+getNumTombstones()) <= NumBuckets/8))"
  },
  {
    "label": "grow()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "grow(NumBuckets)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "assert(TheBucket)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!KeyInfoT::isEqual(Val, EmptyKey) && !KeyInfoT::isEqual(Val, TombstoneKey) && \"Empty/Tombstone value shouldn't be inserted into map!\")"
  },
  {
    "label": "getHashValue()",
    "kind": "Method",
    "detail": "Function (unsigned BucketNo =)",
    "insertText": "getHashValue(Val) & (NumBuckets-1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (unsigned ProbeAmt = 1 ;)",
    "insertText": "while(1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const BucketT* ThisBucket = BucketsPtr + BucketNo ;)",
    "insertText": "if(LLVM_LIKELY(KeyInfoT::isEqual(Val, ThisBucket->getFirst())))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FoundBucket = ThisBucket ; return true ; })",
    "insertText": "if(LLVM_LIKELY(KeyInfoT::isEqual(ThisBucket->getFirst(), EmptyKey)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FoundBucket = FoundTombstone ? FoundTombstone : ThisBucket ; return false ; })",
    "insertText": "if(KeyInfoT::isEqual(ThisBucket->getFirst(), TombstoneKey) && !FoundTombstone)"
  },
  {
    "label": "BucketNo()",
    "kind": "Method",
    "detail": "Function (BucketNo + = ProbeAmt + + ;)",
    "insertText": "BucketNo(NumBuckets-1)"
  },
  {
    "label": "LookupBucketFor()",
    "kind": "Method",
    "detail": "Function (} } template<LookupKeyT> bool)",
    "insertText": "LookupBucketFor(const LookupKeyT &Val, BucketT *&FoundBucket)"
  },
  {
    "label": "DenseMapBase()",
    "kind": "Method",
    "detail": "Function (const BucketT* ConstFoundBucket ; bool Result = const_cast<const)",
    "insertText": "DenseMapBase(this) ->LookupBucketFor(Val, ConstFoundBucket)"
  },
  {
    "label": "BucketT()",
    "kind": "Method",
    "detail": "Function (FoundBucket = const_cast<)",
    "insertText": "BucketT(ConstFoundBucket)"
  },
  {
    "label": "DenseMap()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyT,ValueT,KeyInfoT = DenseMapInfo<KeyT>,BucketT = detail::DenseMapPair<KeyT,ValueT>> class DenseMap : public DenseMapBase<DenseMap<KeyT,ValueT,KeyInfoT,BucketT>,KeyT,ValueT,KeyInfoT,BucketT> { typedef DenseMapBase<DenseMap,KeyT,ValueT,KeyInfoT,BucketT> BaseT ; class DenseMapBase<DenseMap,KeyT,ValueT,KeyInfoT,BucketT> ; BucketT* Buckets ; unsigned NumEntries ; unsigned NumTombstones ; unsigned NumBuckets ; public :)",
    "insertText": "DenseMap(unsigned NumInitBuckets = 0)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(NumInitBuckets)"
  },
  {
    "label": "DenseMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DenseMap(const DenseMap &other) : BaseT()"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(0)"
  },
  {
    "label": "copyFrom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyFrom(other)"
  },
  {
    "label": "DenseMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DenseMap(DenseMap &&other) : BaseT()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(other)"
  },
  {
    "label": "DenseMap()",
    "kind": "Method",
    "detail": "Function (} template<InputIt>)",
    "insertText": "DenseMap(const InputIt &I, const InputIt &E)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(NextPowerOf2(std::distance(I, E)))"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "insert(I, E)"
  },
  {
    "label": "DenseMap()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "DenseMap()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(Buckets)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(DenseMap& RHS)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(Buckets, RHS.Buckets)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(NumEntries, RHS.NumEntries)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(NumTombstones, RHS.NumTombstones)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(NumBuckets, RHS.NumBuckets)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} DenseMap&)",
    "insertText": "operator(const DenseMap& other)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (} else { NumEntries = 0 ; NumTombstones = 0 ; } } void)",
    "insertText": "init(unsigned InitBuckets)"
  },
  {
    "label": "allocateBuckets()",
    "kind": "Method",
    "detail": "Function (unsigned OldNumBuckets = NumBuckets ; BucketT* OldBuckets = Buckets ;)",
    "insertText": "allocateBuckets(std::max<unsigned>(64, static_cast<unsigned>(NextPowerOf2(AtLeast-1))))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Buckets)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(OldBuckets)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned NewNumBuckets = 0 ;)",
    "insertText": "if(OldNumEntries) NewNumBuckets = std::max(64, 1 << (Log2_32_Ceil(OldNumEntries) + 1))"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "init(NewNumBuckets)"
  },
  {
    "label": "BucketT()",
    "kind": "Method",
    "detail": "Function (NumBuckets = 0 ; Buckets = nullptr ; return false ; } Buckets = static_cast<)",
    "insertText": "BucketT(operator new(sizeof(BucketT) * Num))"
  },
  {
    "label": "SmallDenseMap()",
    "kind": "Method",
    "detail": "Function (NumBuckets = Num ; return true ; } } ; template<KeyT,ValueT,unsigned InlineBuckets = 4,KeyInfoT = DenseMapInfo<KeyT>,BucketT = detail::DenseMapPair<KeyT,ValueT>> class SmallDenseMap : public DenseMapBase<SmallDenseMap<KeyT,ValueT,InlineBuckets,KeyInfoT,BucketT>,KeyT,ValueT,KeyInfoT,BucketT> { typedef DenseMapBase<SmallDenseMap,KeyT,ValueT,KeyInfoT,BucketT> BaseT ; class DenseMapBase<SmallDenseMap,KeyT,ValueT,KeyInfoT,BucketT> ; unsigned Small : 1 ; unsigned NumEntries : 3 1 ; unsigned NumTombstones ; struct LargeRep { BucketT* Buckets ; unsigned NumBuckets ; } ; AlignedCharArrayUnion<BucketT [ InlineBuckets ],LargeRep> storage ; public :)",
    "insertText": "SmallDenseMap(unsigned NumInitBuckets = 0)"
  },
  {
    "label": "SmallDenseMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallDenseMap(const SmallDenseMap &other) : BaseT()"
  },
  {
    "label": "SmallDenseMap()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SmallDenseMap(SmallDenseMap &&other) : BaseT()"
  },
  {
    "label": "SmallDenseMap()",
    "kind": "Method",
    "detail": "Function (} template<InputIt>)",
    "insertText": "SmallDenseMap(const InputIt &I, const InputIt &E)"
  },
  {
    "label": "SmallDenseMap()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "SmallDenseMap()"
  },
  {
    "label": "deallocateBuckets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocateBuckets()"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(SmallDenseMap& RHS)"
  },
  {
    "label": "getInlineBuckets()",
    "kind": "Method",
    "detail": "Function (BucketT* LHSB =&)",
    "insertText": "getInlineBuckets()[i], *RHSB = &RHS.getInlineBuckets()"
  },
  {
    "label": "hasLHSValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasLHSValue(!KeyInfoT::isEqual(LHSB->getFirst(), EmptyKey) && !KeyInfoT::isEqual(LHSB->getFirst(), TombstoneKey))"
  },
  {
    "label": "hasRHSValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasRHSValue(!KeyInfoT::isEqual(RHSB->getFirst(), EmptyKey) && !KeyInfoT::isEqual(RHSB->getFirst(), TombstoneKey))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(*LHSB, *RHSB)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (continue ; })",
    "insertText": "swap(LHSB->getFirst(), RHSB->getFirst())"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&RHSB->getSecond()) ValueT(std::move(LHSB->getSecond()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(hasRHSValue)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&LHSB->getSecond()) ValueT(std::move(RHSB->getSecond()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} } return ; })",
    "insertText": "if(!Small && !RHS.Small)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(getLargeRep()->Buckets, RHS.getLargeRep()->Buckets)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(getLargeRep()->NumBuckets, RHS.getLargeRep()->NumBuckets)"
  },
  {
    "label": "getLargeRep()",
    "kind": "Method",
    "detail": "Function (LargeSide .)",
    "insertText": "getLargeRep()->~LargeRep()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (LargeSide . Small = true ;)",
    "insertText": "for(unsigned i = 0, e = InlineBuckets; i != e; ++i)"
  },
  {
    "label": "getInlineBuckets()",
    "kind": "Method",
    "detail": "Function (BucketT* NewB =& LargeSide .)",
    "insertText": "getInlineBuckets()[i], *OldB = &SmallSide.getInlineBuckets()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&NewB->getFirst()) KeyT(std::move(OldB->getFirst()))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&NewB->getSecond()) ValueT(std::move(OldB->getSecond()))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} } SmallSide . Small = false ;)",
    "insertText": "new(SmallSide.getLargeRep()) LargeRep(std::move(TmpRep))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} SmallDenseMap&)",
    "insertText": "operator(const SmallDenseMap& other)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Small = true ;)",
    "insertText": "if(other.getNumBuckets() > InlineBuckets)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Small = false ;)",
    "insertText": "new(getLargeRep()) LargeRep(allocateBuckets(other.getNumBuckets()))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Small = true ;)",
    "insertText": "if(InitBuckets > InlineBuckets)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Small = false ;)",
    "insertText": "new(getLargeRep()) LargeRep(allocateBuckets(InitBuckets))"
  },
  {
    "label": "BucketT()",
    "kind": "Method",
    "detail": "Function (AlignedCharArrayUnion<BucketT [ InlineBuckets ]> TmpStorage ; BucketT* TmpBegin = reinterpret_cast<)",
    "insertText": "BucketT(TmpStorage.buffer)"
  },
  {
    "label": "LR()",
    "kind": "Method",
    "detail": "Function (LargeRep)",
    "insertText": "LR(allocateBuckets(AtLeast))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(size_t(TmpEnd - TmpBegin) < InlineBuckets && \"Too many inline buckets!\")"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&TmpEnd->getFirst()) KeyT(std::move(P->getFirst()))"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&TmpEnd->getSecond()) ValueT(std::move(P->getSecond()))"
  },
  {
    "label": "getLargeRepForTransition()",
    "kind": "Method",
    "detail": "Function (}*)",
    "insertText": "getLargeRepForTransition()"
  },
  {
    "label": "moveFromOldBuckets()",
    "kind": "Method",
    "detail": "Function (Small = false ; this ->)",
    "insertText": "moveFromOldBuckets(TmpBegin, TmpEnd)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (Small = true ; } else {)",
    "insertText": "new(getLargeRep()) LargeRep(allocateBuckets(AtLeast))"
  },
  {
    "label": "moveFromOldBuckets()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "moveFromOldBuckets(OldRep.Buckets, OldRep.Buckets+OldRep.NumBuckets)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(OldRep.Buckets)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned NewNumBuckets = 0 ;)",
    "insertText": "if(OldSize)"
  },
  {
    "label": "NewNumBuckets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewNumBuckets(Log2_32_Ceil(OldSize) + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((Small && NewNumBuckets <= InlineBuckets) || (!Small && NewNumBuckets == getLargeRep()->NumBuckets))"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Num < INT_MAX && \"Cannot support more than INT_MAX entries\")"
  },
  {
    "label": "getInlineBuckets()",
    "kind": "Method",
    "detail": "Function (NumTombstones = Num ; } const BucketT*)",
    "insertText": "getInlineBuckets()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Small)"
  },
  {
    "label": "getLargeRep()",
    "kind": "Method",
    "detail": "Function (} const LargeRep*)",
    "insertText": "getLargeRep()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Small)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(getLargeRep()->Buckets)"
  },
  {
    "label": "allocateBuckets()",
    "kind": "Method",
    "detail": "Function (} LargeRep)",
    "insertText": "allocateBuckets(unsigned Num)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Num > InlineBuckets && \"Must allocate more buckets than are inline\")"
  },
  {
    "label": "DenseMapIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DenseMapIterator(pointer Pos, pointer E, const DebugEpochBase &Epoch, bool NoAdvance = false) : DebugEpochBase::HandleBase(&Epoch), Ptr(Pos), End(E)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isHandleInSync() && \"invalid construction!\")"
  },
  {
    "label": "DenseMapIterator()",
    "kind": "Method",
    "detail": "Function (} template<bool IsConstSrc,= std::enable_if<! IsConstSrc&& IsConst>::type>)",
    "insertText": "DenseMapIterator(const DenseMapIterator<KeyT, ValueT, KeyInfoT, Bucket, IsConstSrc> &I) : DebugEpochBase::HandleBase(I), Ptr(I.Ptr), End(I.End)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} reference)",
    "insertText": "operator()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isHandleInSync() && \"invalid iterator access!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((!Ptr || isHandleInSync()) && \"handle not in sync!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((!RHS.Ptr || RHS.isHandleInSync()) && \"handle not in sync!\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(getEpochAddress() == RHS.getEpochAddress() && \"comparing incomparable iterators!\")"
  },
  {
    "label": "AdvancePastEmptyBuckets()",
    "kind": "Method",
    "detail": "Function (+ + Ptr ;)",
    "insertText": "AdvancePastEmptyBuckets()"
  },
  {
    "label": "capacity_in_bytes()",
    "kind": "Method",
    "detail": "Function (} } ; template<KeyT,ValueT,KeyInfoT> size_t)",
    "insertText": "capacity_in_bytes(const DenseMap<KeyT, ValueT, KeyInfoT> &X)"
  }
]