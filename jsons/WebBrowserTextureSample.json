[
  {
    "label": "FWebBrowserTextureSample",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserTextureSample"
  },
  {
    "label": "FWebBrowserTextureSampleQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserTextureSampleQueue"
  },
  {
    "label": "FWebBrowserTextureSamplePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWebBrowserTextureSamplePool"
  },
  {
    "label": "FWebBrowserTextureSample()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" CoreGlobals . h \" # include \" Containers / Queue . h \" # include \" Math / IntPoint . h \" # include \" Math / Range . h \" # include \" MediaObjectPool . h \" # include \" RHI . h \" # include \" RHIUtilities . h \" # include \" Templates / SharedPointer . h \" class FWebBrowserTextureSample : public IMediaPoolable { public :)",
    "insertText": "FWebBrowserTextureSample() : Buffer(nullptr) , BufferSize(0) , Dim(FIntPoint::ZeroValue) , ScaleRotation(FLinearColor(1.0f, 0.0f, 0.0f, 1.0f)) , Offset(FLinearColor(0.0f, 0.0f, 0.0f, 0.0f))"
  },
  {
    "label": "FWebBrowserTextureSample()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FWebBrowserTextureSample()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Buffer)"
  },
  {
    "label": "GetMutableBuffer()",
    "kind": "Method",
    "detail": "Function (} } public : void*)",
    "insertText": "GetMutableBuffer()"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (SIZE_T RequiredBufferSize = Dim . X* Dim . Y*)",
    "insertText": "sizeof(int32)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (Buffer =)",
    "insertText": "Malloc(RequiredBufferSize)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (} else { Buffer =)",
    "insertText": "Realloc(Buffer, RequiredBufferSize)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (} BufferSize = RequiredBufferSize ; })",
    "insertText": "Memcpy(Buffer, InBuffer, RequiredBufferSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(BufferSize > 0)"
  },
  {
    "label": "InitializeBufferForCopy()",
    "kind": "Method",
    "detail": "Function (BufferSize = 0 ; } Buffer = InBuffer ; } } int32)",
    "insertText": "InitializeBufferForCopy()"
  },
  {
    "label": "InitializeTexture()",
    "kind": "Method",
    "detail": "Function (} BufferSize = RequiredBufferSize ; } return BufferSize ; } FRHITexture*)",
    "insertText": "InitializeTexture()"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (Texture =)",
    "insertText": "RHICreateTexture(Desc)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (ScaleRotation =)",
    "insertText": "FLinearColor(InScaleRotation.X, InScaleRotation.Y, InScaleRotation.Z, InScaleRotation.W)"
  },
  {
    "label": "FLinearColor()",
    "kind": "Method",
    "detail": "Function (Offset =)",
    "insertText": "FLinearColor(InOffset.X, InOffset.Y, InOffset.Z, InOffset.W)"
  },
  {
    "label": "GetBuffer()",
    "kind": "Method",
    "detail": "Function (} public : const void*)",
    "insertText": "GetBuffer()"
  },
  {
    "label": "GetTexture()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ENGINE FRHITexture*)",
    "insertText": "GetTexture()"
  },
  {
    "label": "GetScaleRotation()",
    "kind": "Method",
    "detail": "Function (} # endif FLinearColor)",
    "insertText": "GetScaleRotation()"
  },
  {
    "label": "FWebBrowserTextureSampleQueue()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FWebBrowserTextureSampleQueue()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FWebBrowserTextureSample,ESPMode::ThreadSafe> Sample ;)",
    "insertText": "if(!Samples.Peek(Sample))"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedDecrement(&NumSamples)"
  },
  {
    "label": "Peek()",
    "kind": "Method",
    "detail": "Function (OutSample = Sample ; return true ; } bool)",
    "insertText": "Peek(TSharedPtr<FWebBrowserTextureSample, ESPMode::ThreadSafe>& OutSample)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedIncrement(&NumSamples)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Samples.Enqueue(Sample))"
  },
  {
    "label": "RequestFlush()",
    "kind": "Method",
    "detail": "Function (} return false ; } return true ; } void)",
    "insertText": "RequestFlush()"
  },
  {
    "label": "Enqueue()",
    "kind": "Method",
    "detail": "Function (Samples .)",
    "insertText": "Enqueue(nullptr)"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedIncrement(&PendingFlushes)"
  },
  {
    "label": "DoPendingFlushes()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "DoPendingFlushes()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FWebBrowserTextureSample,ESPMode::ThreadSafe> Sample ;)",
    "insertText": "while((PendingFlushes > 0) && Samples.Dequeue(Sample))"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InterlockedDecrement(&PendingFlushes)"
  }
]