[
  {
    "label": "FCapsuleSpecializeSamplingHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCapsuleSpecializeSamplingHelper"
  },
  {
    "label": "FCapsule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCapsule"
  },
  {
    "label": "FISPCDataVerifier",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FISPCDataVerifier"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FCapsule()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Cylinder . h \" # include \" Chaos / GJKShape . h \" # include \" Chaos / ImplicitFwd . h \" # include \" Chaos / ImplicitObject . h \" # include \" Chaos / ImplicitObjectUnion . h \" # include \" Chaos / Sphere . h \" # include \" Chaos / Segment . h \" # include \" ChaosArchive . h \" # include \" Math / VectorRegister . h \" # include \" UObject / ReleaseObjectVersion . h \" namespace Chaos { struct FCapsuleSpecializeSamplingHelper ; class FCapsule final : public FImplicitObject { public : using FImplicitObject::SignedDistance ; using FImplicitObject::GetTypeName ;)",
    "insertText": "FCapsule() : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::Capsule)"
  },
  {
    "label": "FCapsule()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCapsule(const FVec3& x1, const FVec3& x2, const FReal Radius) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::Capsule) , MSegment(x1, x2)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(Radius)"
  },
  {
    "label": "FCapsule()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCapsule(const FCapsule& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::Capsule) , MSegment(Other.MSegment)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(Other.GetRadius())"
  },
  {
    "label": "FCapsule()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCapsule(FCapsule&& Other) : FImplicitObject(EImplicitObject::FiniteConvex, ImplicitObjectType::Capsule) , MSegment(MoveTemp(Other.MSegment))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FCapsule&)",
    "insertText": "operator(FCapsule&& InSteal)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (this -> Type = InSteal . Type ; this -> bIsConvex = InSteal . bIsConvex ; this -> bDoCollide = InSteal . bDoCollide ; this -> bHasBoundingBox = InSteal . bHasBoundingBox ; MSegment =)",
    "insertText": "MoveTemp(InSteal.MSegment)"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRadius(InSteal.GetRadius())"
  },
  {
    "label": "StaticType()",
    "kind": "Method",
    "detail": "Function (} EImplicitObjectType)",
    "insertText": "StaticType()"
  },
  {
    "label": "Axis()",
    "kind": "Method",
    "detail": "Function (auto X1 = Origin + Axis* Radius ; auto X2 = Origin +)",
    "insertText": "Axis(Radius + Height)"
  },
  {
    "label": "GetRadius()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetRadius()"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeLocalSamplePoints(const FReal PointsPerUnitArea, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const int32 NumPoints)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3>)",
    "insertText": "ComputeSamplePoints(const FReal PointsPerUnitArea, const int32 MinPoints = 0, const int32 MaxPoints = 1000)"
  },
  {
    "label": "PhiWithNormal()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "PhiWithNormal(const FVec3& x, FVec3& Normal)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (auto Dot =)",
    "insertText": "Clamp(FVec3::DotProduct(x - GetX1(), GetAxis()), (FReal)0., GetHeight())"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (FVec3 ProjectedPoint = Dot*)",
    "insertText": "GetAxis() + GetX1()"
  },
  {
    "label": "SafeNormalize()",
    "kind": "Method",
    "detail": "Function (Normal = x - ProjectedPoint ; return Normal .)",
    "insertText": "SafeNormalize() - GetRadius()"
  },
  {
    "label": "BoundingBox()",
    "kind": "Method",
    "detail": "Function (} const FAABB3)",
    "insertText": "BoundingBox()"
  },
  {
    "label": "Thicken()",
    "kind": "Method",
    "detail": "Function (Box .)",
    "insertText": "Thicken(GetRadius())"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 X1 = Transform .)",
    "insertText": "TransformPositionNoScale(MSegment.GetX1())"
  },
  {
    "label": "TransformPositionNoScale()",
    "kind": "Method",
    "detail": "Function (const FVec3 X2 = Transform .)",
    "insertText": "TransformPositionNoScale(MSegment.GetX2())"
  },
  {
    "label": "ComponentwiseMin()",
    "kind": "Method",
    "detail": "Function (const FVec3 MinSegment = X1 .)",
    "insertText": "ComponentwiseMin(X2)"
  },
  {
    "label": "ComponentwiseMax()",
    "kind": "Method",
    "detail": "Function (const FVec3 MaxSegment = X1 .)",
    "insertText": "ComponentwiseMax(X2)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (const FVec3 RadiusV =)",
    "insertText": "FVec3(GetRadius())"
  },
  {
    "label": "RaycastFast()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RaycastFast(FReal MRadius, FReal MHeight, const FVec3& MVector, const FVec3& X1, const FVec3& X2, const FVec3& StartPoint, const FVec3& Dir, const FReal Length, const FReal Thickness, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex)"
  },
  {
    "label": "SegmentDistToSegmentSafe()",
    "kind": "Method",
    "detail": "Function (const FReal R = MRadius + Thickness ; const FReal R2 = R* R ; OutFaceIndex = INDEX_NONE ; const FVec3 RayEndPoint = StartPoint + Dir* Length ; FVec3 OutP1,OutP2 ;)",
    "insertText": "SegmentDistToSegmentSafe(X1, X2, StartPoint, RayEndPoint, OutP1, OutP2)"
  },
  {
    "label": "DistanceSquared()",
    "kind": "Method",
    "detail": "Function (const FReal)",
    "insertText": "DistanceSquared(OutP2 - OutP1).SizeSquared()"
  },
  {
    "label": "GrowToInclude()",
    "kind": "Method",
    "detail": "Function (CapsuleBounds .)",
    "insertText": "GrowToInclude(X2)"
  },
  {
    "label": "Thicken()",
    "kind": "Method",
    "detail": "Function (CapsuleBounds .)",
    "insertText": "Thicken(R)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} FReal InvLength = 1 . 0 f / Length ; FVec3 InvDir ; bool bParallel [ 3 ] ;)",
    "insertText": "for(int32 Axis = 0; Axis < 3; ++Axis)"
  },
  {
    "label": "RaycastFast()",
    "kind": "Method",
    "detail": "Function (bParallel [ Axis ] = Dir [ Axis ] = = 0 ; InvDir [ Axis ] = bParallel [ Axis ] ? 0 : 1 / Dir [ Axis ] ; } FVec3 LocalStart = StartPoint ; FReal LocalLength = Length ; FReal RemovedLength = 0 ; { FReal OutBoundsTime ; bool bStartHit = CapsuleBounds .)",
    "insertText": "RaycastFast(StartPoint, Dir, InvDir, bParallel, Length, InvLength, OutBoundsTime, OutPosition)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FReal ClampedProjection =)",
    "insertText": "Clamp(MVectorDotX1ToStart, (FReal)0, MHeight)"
  },
  {
    "label": "Dist2()",
    "kind": "Method",
    "detail": "Function (const FVec3 ClampedProjectionPosition = MVector* ClampedProjection ; const FReal)",
    "insertText": "Dist2(X1ToStart - ClampedProjectionPosition).SizeSquared()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutTime = RemovedLength ;)",
    "insertText": "if(RemovedLength > 0.0f)"
  },
  {
    "label": "OutNormal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OutNormal(X1ToStart - ClampedProjectionPosition)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutPosition = LocalStart - OutNormal* Thickness ; } else { OutPosition = LocalStart ; OutNormal = - Dir ; } return true ; } })",
    "insertText": "if(FMath::IsNearlyEqual(LocalLength, 0., UE_KINDA_SMALL_NUMBER))"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FReal MVectorDotDir2 = MVectorDotDir* MVectorDotDir ; const FReal X1ToStartDotDir =)",
    "insertText": "DotProduct(X1ToStart, Dir)"
  },
  {
    "label": "SizeSquared()",
    "kind": "Method",
    "detail": "Function (const FReal X1ToStart2 = X1ToStart .)",
    "insertText": "SizeSquared()"
  },
  {
    "label": "Epsilon()",
    "kind": "Method",
    "detail": "Function (const FReal A = 1 - MVectorDotDir2 ; const FReal C = X1ToStart2 - MVectorDotX1ToStart2 - R2 ; FReal)",
    "insertText": "Epsilon(FReal)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bCheckCaps = false ;)",
    "insertText": "if(C <= 0.f)"
  },
  {
    "label": "HalfB()",
    "kind": "Method",
    "detail": "Function (bCheckCaps = true ; } else { const FReal)",
    "insertText": "HalfB(X1ToStartDotDir - MVectorDotX1ToStart * MVectorDotDir)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReal QuarterUnderRoot = HalfB* HalfB - A* C ;)",
    "insertText": "if(QuarterUnderRoot < 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bCheckCaps = true ; } else { FReal Time ; const bool bSingleHit = QuarterUnderRoot<Epsilon ;)",
    "insertText": "if(bSingleHit)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Time(A == 0) ? 0 : (-HalfB / A)"
  },
  {
    "label": "Time()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "Time(A == 0) ? 0 : ((-HalfB - FMath::Sqrt(QuarterUnderRoot)) / A)"
  },
  {
    "label": "OutNormal()",
    "kind": "Method",
    "detail": "Function (OutTime = Time + RemovedLength ;)",
    "insertText": "OutNormal(CylinderToSpherePosition - MVector * PositionLengthOnCoreCylinder)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutPosition = SpherePosition - OutNormal* Thickness ; return true ; } else { bCheckCaps = ! bSingleHit ; } } })",
    "insertText": "if(bCheckCaps)"
  },
  {
    "label": "X1Sphere()",
    "kind": "Method",
    "detail": "Function (TSphere<FReal,3>)",
    "insertText": "X1Sphere(X1, MRadius)"
  },
  {
    "label": "X2Sphere()",
    "kind": "Method",
    "detail": "Function (TSphere<FReal,3>)",
    "insertText": "X2Sphere(X2, MRadius)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (FReal Time1,Time2 ; FVec3 Position1,Position2 ; FVec3 Normal1,Normal2 ; bool bHitX1 = X1Sphere .)",
    "insertText": "Raycast(LocalStart, Dir, LocalLength, Thickness, Time1, Position1, Normal1, OutFaceIndex)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (bool bHitX2 = X2Sphere .)",
    "insertText": "Raycast(LocalStart, Dir, LocalLength, Thickness, Time2, Position2, Normal2, OutFaceIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutTime = Time1 + RemovedLength ; OutPosition = Position1 ; OutNormal = Normal1 ; } else { OutTime = Time2 + RemovedLength ; OutPosition = Position2 ; OutNormal = Normal2 ; } return true ; } else)",
    "insertText": "if(bHitX1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (OutTime = Time1 + RemovedLength ; OutPosition = Position1 ; OutNormal = Normal1 ; return true ; } else)",
    "insertText": "if(bHitX2)"
  },
  {
    "label": "Raycast()",
    "kind": "Method",
    "detail": "Function (OutTime = Time2 + RemovedLength ; OutPosition = Position2 ; OutNormal = Normal2 ; return true ; } } return false ; } bool)",
    "insertText": "Raycast(const FVec3& StartPoint, const FVec3& Dir, const FReal Length, const FReal Thickness, FReal& OutTime, FVec3& OutPosition, FVec3& OutNormal, int32& OutFaceIndex)"
  },
  {
    "label": "Support()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "Support(const FVec3& Direction, const FReal Thickness, int32& VertexIndex)"
  },
  {
    "label": "SupportCore()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "SupportCore(const FVec3& Direction, const FReal InMargin, FReal* OutSupportDelta, int32& VertexIndex)"
  },
  {
    "label": "SupportCoreSimd()",
    "kind": "Method",
    "detail": "Function (} VectorRegister4Float)",
    "insertText": "SupportCoreSimd(const VectorRegister4Float& Direction, const FReal InMargin)"
  },
  {
    "label": "VectorStoreFloat3()",
    "kind": "Method",
    "detail": "Function (FVec3 DirectionVec3 ;)",
    "insertText": "VectorStoreFloat3(Direction, &DirectionVec3)"
  },
  {
    "label": "SupportCore()",
    "kind": "Method",
    "detail": "Function (int32 VertexIndex = INDEX_NONE ; FVec3 SupportVert = MSegment .)",
    "insertText": "SupportCore(DirectionVec3, VertexIndex)"
  },
  {
    "label": "SupportCoreScaled()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "SupportCoreScaled(const FVec3& Direction, const FReal InMargin, const FVec3& Scale, FReal* OutSupportDelta, int32& VertexIndex)"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SerializeImp(FArchive& Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "UsingCustomVersion(FExternalPhysicsCustomObjectVersion::GUID)"
  },
  {
    "label": "SerializeImp()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeImp(Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (MSegment .)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "ArRadius()",
    "kind": "Method",
    "detail": "Function (FRealSingle)",
    "insertText": "ArRadius(FRealSingle)GetRadius()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (Ar<<ArRadius ;)",
    "insertText": "SetRadius(ArRadius)"
  },
  {
    "label": "SerializeAsAABB()",
    "kind": "Method",
    "detail": "Function (FAABB3 DummyBox ; TBox<FReal,3)",
    "insertText": "SerializeAsAABB(Ar,DummyBox)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "ScopedMemory()",
    "kind": "Method",
    "detail": "Function (FChaosArchiveScopedMemory)",
    "insertText": "ScopedMemory(Ar, GetTypeName())"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<FImplicitObjectUnion> TmpUnion ; Ar<<TmpUnion ; } } FString)",
    "insertText": "ToString()"
  },
  {
    "label": "CopyGeometry()",
    "kind": "Method",
    "detail": "Function (} Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometry()"
  },
  {
    "label": "CopyGeometryWithScale()",
    "kind": "Method",
    "detail": "Function (} Chaos::FImplicitObjectPtr)",
    "insertText": "CopyGeometryWithScale(const FVec3& Scale)"
  },
  {
    "label": "GetHeight()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetHeight()"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "GetInsertion()",
    "kind": "Method",
    "detail": "Function (} const FVec3)",
    "insertText": "GetInsertion()"
  },
  {
    "label": "GetCenter()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenter()"
  },
  {
    "label": "GetCenterOfMass()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetCenterOfMass()"
  },
  {
    "label": "GetAxis()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetAxis()"
  },
  {
    "label": "GetX1()",
    "kind": "Method",
    "detail": "Function (} const FVec3&)",
    "insertText": "GetX1()"
  },
  {
    "label": "GetX2()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetX2()"
  },
  {
    "label": "GetSegment()",
    "kind": "Method",
    "detail": "Function (} TSegment<FReal>)",
    "insertText": "GetSegment()"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetArea()"
  },
  {
    "label": "GetArea()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetArea(const FReal Height, const FReal Radius)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (const FReal PI2 = 2 . f* UE_PI ; return PI2*)",
    "insertText": "Radius(Height + 2.f * Radius)"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetVolume()"
  },
  {
    "label": "GetVolume()",
    "kind": "Method",
    "detail": "Function (} FReal)",
    "insertText": "GetVolume(const FReal Height, const FReal Radius)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (const FReal FourThirds = 4 . 0 f / 3 . 0 f ; return UE_PI* Radius*)",
    "insertText": "Radius(Height + FourThirds * Radius)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} FMatrix33)",
    "insertText": "GetInertiaTensor(const FReal Mass)"
  },
  {
    "label": "GetInertiaTensor()",
    "kind": "Method",
    "detail": "Function (} FMatrix33)",
    "insertText": "GetInertiaTensor(const FReal Mass, const FReal Height, const FReal Radius)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FReal R =)",
    "insertText": "Clamp(Radius, (FReal)0., TNumericLimits<FReal>::Max())"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (const FReal H =)",
    "insertText": "Clamp(Height, (FReal)0., TNumericLimits<FReal>::Max())"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal RR = R* R ; const FReal HH = H* H ; const FReal Diag12 = static_cast<)",
    "insertText": "FReal(Mass * (5.*HH*H + 20.*HH*R + 45.*H*RR + 32.*RR*R) / (60.*H + 80.*R))"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (const FReal Diag3 = static_cast<)",
    "insertText": "FReal(Mass * (RR * (15.*H + 16.*R)) / (30.*H + 40.*R))"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass()"
  },
  {
    "label": "GetRotationOfMass()",
    "kind": "Method",
    "detail": "Function (} FRotation3)",
    "insertText": "GetRotationOfMass(const FVec3& Axis)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetClosestEdgePosition()",
    "kind": "Method",
    "detail": "Function (} FVec3)",
    "insertText": "GetClosestEdgePosition(int32 PlaneIndexHint, const FVec3& Position)"
  },
  {
    "label": "ClosestPointOnLine()",
    "kind": "Method",
    "detail": "Function (const FVec3 EdgePosition =)",
    "insertText": "ClosestPointOnLine(P0, P1, Position)"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (FVec3)",
    "insertText": "Result(0)"
  },
  {
    "label": "GetMostOpposingPlane()",
    "kind": "Method",
    "detail": "Function (break ; } return Result ; } int32)",
    "insertText": "GetMostOpposingPlane(const FVec3& Normal)"
  },
  {
    "label": "GetPlaneNX()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetPlaneNX(const int32 FaceIndex, FVec3& OutN, FVec3& OutX)"
  },
  {
    "label": "FVec3()",
    "kind": "Method",
    "detail": "Function (OutN =)",
    "insertText": "FVec3(0)"
  },
  {
    "label": "FindVertexPlanes()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FindVertexPlanes(int32 VertexIndex, int32* OutVertexPlanes, int32 MaxVertexPlanes)"
  },
  {
    "label": "SizeOfMSegment()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SizeOfMSegment()"
  },
  {
    "label": "SetRadius()",
    "kind": "Method",
    "detail": "Function (} } ; FISPCDataVerifier ; # endif private : void)",
    "insertText": "SetRadius(FReal InRadius)"
  },
  {
    "label": "SetMargin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMargin(InRadius)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (} TSegment<FReal> MSegment ; } ; struct FCapsuleSpecializeSamplingHelper { void)",
    "insertText": "ComputeSamplePoints(TArray<FVec3>& Points, const FCapsule& Capsule, const int32 NumPoints)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 Offset = Points .)",
    "insertText": "Num()"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (Points .)",
    "insertText": "SetNumUninitialized(Offset + 1)"
  },
  {
    "label": "SetNumUninitialized()",
    "kind": "Method",
    "detail": "Function (} else { Points .)",
    "insertText": "SetNumUninitialized(Offset + 3)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} return ; })",
    "insertText": "ComputeGoldenSpiralPoints(Points, Capsule, NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FCapsule& Capsule, const int32 NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeGoldenSpiralPoints(Points, Capsule.GetOrigin(), Capsule.GetAxis(), Capsule.GetHeight(), Capsule.GetRadius(), NumPoints)"
  },
  {
    "label": "ComputeGoldenSpiralPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeGoldenSpiralPoints(TArray<FVec3>& Points, const FVec3& Origin, const FVec3& Axis, const FReal Height, const FReal Radius, const int32 NumPoints)"
  },
  {
    "label": "FReal()",
    "kind": "Method",
    "detail": "Function (int32 NumPointsEndCap ; int32 NumPointsCylinder ; const FReal CapArea = 4* UE_PI* Radius* Radius ; const FReal CylArea = static_cast<)",
    "insertText": "FReal(2.0 * UE_PI * Radius * Height)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (const FReal AllArea = CylArea + CapArea ; NumPointsCylinder = static_cast<)",
    "insertText": "int32(round(CylArea / AllArea * static_cast<FReal>(NumPoints)))"
  },
  {
    "label": "NumPointsCylinder()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumPointsCylinder(NumPoints - NumPointsCylinder)"
  },
  {
    "label": "NumPointsEndCap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NumPointsEndCap(NumPoints - NumPointsCylinder)"
  },
  {
    "label": "NumPointsEndCap()",
    "kind": "Method",
    "detail": "Function (} else { NumPointsCylinder = 0 ;)",
    "insertText": "NumPointsEndCap(NumPoints - (NumPoints % 2))"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} const int32 NumPointsToAdd = NumPointsCylinder + NumPointsEndCap* 2 ; Points .)",
    "insertText": "Reserve(Points.Num() + NumPointsToAdd)"
  },
  {
    "label": "ComputeBottomHalfSemiSphere()",
    "kind": "Method",
    "detail": "Function (const FReal HalfHeight = Height / 2 ; { TSphereSpecializeSamplingHelper<FReal,3)",
    "insertText": "ComputeBottomHalfSemiSphere(Points, TSphere<FReal, 3>(FVec3(0, 0, -HalfHeight), Radius), NumPointsEndCap, Points.Num())"
  },
  {
    "label": "Sphere()",
    "kind": "Method",
    "detail": "Function (# if 0 { TSphere<FReal,3>)",
    "insertText": "Sphere(FVec3(0, 0, -HalfHeight), Radius)"
  },
  {
    "label": "SignedDistance()",
    "kind": "Method",
    "detail": "Function (const FVec3& Pt = Points [ i ] ; const FReal Phi = Sphere .)",
    "insertText": "SignedDistance(Pt)"
  },
  {
    "label": "ComputeGoldenSpiralPointsUnoriented()",
    "kind": "Method",
    "detail": "Function (} } # endif)",
    "insertText": "ComputeGoldenSpiralPointsUnoriented(Points, Radius, Height, NumPointsCylinder, false, Points.Num())"
  },
  {
    "label": "Cylinder()",
    "kind": "Method",
    "detail": "Function (# if 0 { TCylinder<FReal>)",
    "insertText": "Cylinder(FVec3(0, 0, -HalfHeight), FVec3(0, 0, HalfHeight), Radius)"
  },
  {
    "label": "ComputeTopHalfSemiSphere()",
    "kind": "Method",
    "detail": "Function (} } # endif TSphereSpecializeSamplingHelper<FReal,3)",
    "insertText": "ComputeTopHalfSemiSphere(Points, TSphere<FReal, 3>(FVec3(0, 0, HalfHeight), Radius), NumPointsEndCap, Points.Num())"
  },
  {
    "label": "Sphere()",
    "kind": "Method",
    "detail": "Function (# if 0 { TSphere<FReal,3>)",
    "insertText": "Sphere(FVec3(0, 0, HalfHeight), Radius)"
  },
  {
    "label": "FCapsule()",
    "kind": "Method",
    "detail": "Function (} } # endif # if 0 {)",
    "insertText": "FCapsule(FVec3(0, 0, -HalfHeight), FVec3(0, 0, HalfHeight), Radius)"
  },
  {
    "label": "FromRotatedVector()",
    "kind": "Method",
    "detail": "Function (} } # endif } const FRotation3 Rotation =)",
    "insertText": "FromRotatedVector(FVec3(0, 0, 1), Axis)"
  },
  {
    "label": "RotateVector()",
    "kind": "Method",
    "detail": "Function (FVec3& Point = Points [ i ] ; const FVec3 PointNew = Rotation .)",
    "insertText": "RotateVector(Point + FVec3(0, 0, HalfHeight + Radius))"
  },
  {
    "label": "ComputeLocalSamplePoints()",
    "kind": "Method",
    "detail": "Function (Point = PointNew ; } } } ; TArray<FVec3>)",
    "insertText": "ComputeLocalSamplePoints(const int32 NumPoints)"
  },
  {
    "label": "Capsule()",
    "kind": "Method",
    "detail": "Function (const FCapsule)",
    "insertText": "Capsule(GetX1() - Mid, GetX1() + (GetAxis() * GetHeight()) - Mid, GetRadius())"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeSamplePoints(Points, Capsule, NumPoints)"
  },
  {
    "label": "ComputeSamplePoints()",
    "kind": "Method",
    "detail": "Function (TArray<FVec3> Points ;)",
    "insertText": "ComputeSamplePoints(Points, *this, NumPoints)"
  }
]