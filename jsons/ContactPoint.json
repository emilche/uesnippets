[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TContactPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TContactPoint"
  },
  {
    "label": "FManifoldPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManifoldPoint"
  },
  {
    "label": "FWorldContactPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWorldContactPoint"
  },
  {
    "label": "FSavedManifoldPoint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSavedManifoldPoint"
  },
  {
    "label": "FManifoldPointResult",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FManifoldPointResult"
  },
  {
    "label": "InvalidPhi()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" namespace Chaos { enum class EContactPointType : int8 { Unknown,VertexPlane,EdgeEdge,PlaneVertex,VertexVertex,} ; template<T> T)",
    "insertText": "InvalidPhi()"
  },
  {
    "label": "TContactPoint()",
    "kind": "Method",
    "detail": "Function (} template<T> class TContactPoint { public : using FRealType = T ; TVec3<FRealType> ShapeContactPoints [ 2 ] ; TVec3<FRealType> ShapeContactNormal ; FRealType Phi ; int32 FaceIndex ; EContactPointType ContactType ;)",
    "insertText": "TContactPoint() : Phi(InvalidPhi<FRealType>()) , FaceIndex(INDEX_NONE) , ContactType(EContactPointType::Unknown)"
  },
  {
    "label": "TContactPoint()",
    "kind": "Method",
    "detail": "Function (} template<U>)",
    "insertText": "TContactPoint(const TContactPoint<U>& Other)"
  },
  {
    "label": "FRealType()",
    "kind": "Method",
    "detail": "Function (TVec3<)",
    "insertText": "FRealType(Other.ShapeContactPoints[0]), TVec3<FRealType>(Other.ShapeContactPoints[1])"
  },
  {
    "label": "FRealType()",
    "kind": "Method",
    "detail": "Function (TVec3<)",
    "insertText": "FRealType(Other.ShapeContactNormal) } , Phi(FRealType(Other.Phi)) , FaceIndex(Other.FaceIndex) , ContactType(Other.ContactType)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "FFlags()",
    "kind": "Method",
    "detail": "Function (} } ; using FContactPoint = TContactPoint<FReal> ; using FContactPointf = TContactPoint<FRealSingle> ; class FManifoldPoint { public : union FFlags {)",
    "insertText": "FFlags()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "FManifoldPoint()",
    "kind": "Method",
    "detail": "Function (Bits = 0 ; } struct { uint8 bDisabled : 1 ; uint8 bWasRestored : 1 ; uint8 bWasReplaced : 1 ; uint8 bHasStaticFrictionAnchor : 1 ; uint8 bInitialContact : 1 ; } ; uint8 Bits ; } ;)",
    "insertText": "FManifoldPoint() : ContactPoint() , Flags() , TargetPhi(0) , InitialPhi(0)"
  },
  {
    "label": "FVec3f()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVec3f(0), FVec3f(0)"
  },
  {
    "label": "FManifoldPoint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FManifoldPoint(const FContactPointf& InContactPoint) : ContactPoint(InContactPoint) , Flags() , TargetPhi(0) , InitialPhi(0)"
  },
  {
    "label": "FSavedManifoldPoint()",
    "kind": "Method",
    "detail": "Function (} FContactPointf ContactPoint ; FFlags Flags ; FRealSingle TargetPhi ; FRealSingle InitialPhi ; FVec3f ShapeAnchorPoints [ 2 ] ; FVec3f InitialShapeContactPoints [ 2 ] ; } ; class FWorldContactPoint { public : FVec3f RelativeContactPoints [ 2 ] ; FVec3f ContactNormal ; FVec3f ContactTangentU ; FVec3f ContactTangentV ; FRealSingle ContactDeltaNormal ; FRealSingle ContactDeltaTangentU ; FRealSingle ContactDeltaTangentV ; FRealSingle ContactTargetVelocityNormal ; } ; class FSavedManifoldPoint { public :)",
    "insertText": "FSavedManifoldPoint(const FVec3f& InShapeContactPoint0, const FVec3f& InShapeContactPoint1, FRealSingle InInitialPhi)"
  },
  {
    "label": "InitialPhi()",
    "kind": "Method",
    "detail": "Function (InShapeContactPoint0,InShapeContactPoint1 },)",
    "insertText": "InitialPhi(InInitialPhi)"
  },
  {
    "label": "FManifoldPointResult()",
    "kind": "Method",
    "detail": "Function (} FVec3f ShapeContactPoints [ 2 ] ; FRealSingle InitialPhi ; } ; class FManifoldPointResult { public :)",
    "insertText": "FManifoldPointResult()"
  },
  {
    "label": "FVec3f()",
    "kind": "Method",
    "detail": "Function (NetPushOut =)",
    "insertText": "FVec3f(0)"
  }
]