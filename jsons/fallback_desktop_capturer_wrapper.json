[
  {
    "label": "FallbackDesktopCapturerWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FallbackDesktopCapturerWrapper"
  },
  {
    "label": "FallbackDesktopCapturerWrapper()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_FALLBACK_DESKTOP_CAPTURER_WRAPPER_H_ # define MODULES_DESKTOP_CAPTURE_FALLBACK_DESKTOP_CAPTURER_WRAPPER_H_ # include<memory> # include \" modules / desktop_capture / desktop_capture_types . h \" # include \" modules / desktop_capture / desktop_capturer . h \" # include \" modules / desktop_capture / desktop_frame . h \" # include \" modules / desktop_capture / desktop_geometry . h \" # include \" modules / desktop_capture / shared_memory . h \" namespace webrtc { class FallbackDesktopCapturerWrapper final : public DesktopCapturer,public DesktopCapturer::Callback { public :)",
    "insertText": "FallbackDesktopCapturerWrapper(std::unique_ptr<DesktopCapturer> main_capturer, std::unique_ptr<DesktopCapturer> secondary_capturer)"
  },
  {
    "label": "FallbackDesktopCapturerWrapper()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FallbackDesktopCapturerWrapper()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(DesktopCapturer::Callback* callback)"
  },
  {
    "label": "SetSharedMemoryFactory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSharedMemoryFactory(std::unique_ptr<SharedMemoryFactory> shared_memory_factory)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame()"
  },
  {
    "label": "SetExcludedWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludedWindow(WindowId window)"
  },
  {
    "label": "GetSourceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceList(SourceList* sources)"
  },
  {
    "label": "SelectSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSource(SourceId id)"
  },
  {
    "label": "FocusOnSelectedSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FocusOnSelectedSource()"
  },
  {
    "label": "IsOccluded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOccluded(const DesktopVector& pos)"
  },
  {
    "label": "OnCaptureResult()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnCaptureResult(Result result, std::unique_ptr<DesktopFrame> frame)"
  }
]