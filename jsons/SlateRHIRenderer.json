[
  {
    "label": "FSlateElementBatcher",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateElementBatcher"
  },
  {
    "label": "FSlateRHIRenderingPolicy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRHIRenderingPolicy"
  },
  {
    "label": "FSlateRHIRenderingPolicyInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRHIRenderingPolicyInterface"
  },
  {
    "label": "FSlateRHIPostBufferProcessorProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRHIPostBufferProcessorProxy"
  },
  {
    "label": "USlateRHIPostBufferProcessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateRHIPostBufferProcessor"
  },
  {
    "label": "USlateRHIRendererSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USlateRHIRendererSettings"
  },
  {
    "label": "ISlateStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISlateStyle"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FSlatePostSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePostSettings"
  },
  {
    "label": "FFastPathRenderingDataCleanUpList",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFastPathRenderingDataCleanUpList"
  },
  {
    "label": "FSlateDrawWindowPassInputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDrawWindowPassInputs"
  },
  {
    "label": "FSlateDrawWindowPassOutputs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDrawWindowPassOutputs"
  },
  {
    "label": "FSlateViewportInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateViewportInfo"
  },
  {
    "label": "FSlatePostProcessUpdateRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlatePostProcessUpdateRequest"
  },
  {
    "label": "FSlateRHIRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRHIRenderer"
  },
  {
    "label": "FSlateCachedFastPathRenderingData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateCachedFastPathRenderingData"
  },
  {
    "label": "FRenderThreadUpdateContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderThreadUpdateContext"
  },
  {
    "label": "CreateSlateProjectionMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Textures / SlateShaderResource . h \" # include \" Rendering / DrawElements . h \" # include \" RHI . h \" # include \" RenderCommandFence . h \" # include \" RenderResource . h \" # include \" SlateRHIResourceManager . h \" # include \" UnrealClient . h \" # include \" Rendering / SlateRenderer . h \" # include \" Rendering / SlateDrawBuffer . h \" # include \" Slate / SlateTextures . h \" # include \" RendererInterface . h \" class FSlateElementBatcher ; class FSlateRHIRenderingPolicy ; class FSlateRHIRenderingPolicyInterface ; class FSlateRHIPostBufferProcessorProxy ; class USlateRHIPostBufferProcessor ; class USlateRHIRendererSettings ; class ISlateStyle ; class SWindow ; struct FSlatePostSettings ; FMatrix)",
    "insertText": "CreateSlateProjectionMatrix(uint32 Width, uint32 Height)"
  },
  {
    "label": "WITH_SLATE_VISUALIZERS()",
    "kind": "Method",
    "detail": "Function (const uint32 NumDrawBuffers = 3 ; # define)",
    "insertText": "WITH_SLATE_VISUALIZERS(UE_BUILD_SHIPPING || UE_BUILD_TEST)"
  },
  {
    "label": "FSlateRHIRenderer()",
    "kind": "Method",
    "detail": "Function (struct FSlateDrawWindowPassInputs ; struct FSlateDrawWindowPassOutputs ; struct FSlateViewportInfo ; struct FSlatePostProcessUpdateRequest ; class FSlateRHIRenderer final : public FSlateRenderer { public :)",
    "insertText": "FSlateRHIRenderer(TSharedRef<FSlateFontServices> InSlateFontServices, TSharedRef<FSlateRHIResourceManager> InResourceManager)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroy()"
  },
  {
    "label": "AcquireDrawBuffer()",
    "kind": "Method",
    "detail": "Function (FSlateDrawBuffer&)",
    "insertText": "AcquireDrawBuffer()"
  },
  {
    "label": "ReleaseDrawBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDrawBuffer(FSlateDrawBuffer& InWindowDrawBuffer)"
  },
  {
    "label": "OnWindowDestroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowDestroyed(const TSharedRef<SWindow>& InWindow)"
  },
  {
    "label": "OnWindowFinishReshaped()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnWindowFinishReshaped(const TSharedPtr<SWindow>& InWindow)"
  },
  {
    "label": "RequestResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestResize(const TSharedPtr<SWindow>& Window, uint32 NewWidth, uint32 NewHeight)"
  },
  {
    "label": "CreateViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateViewport(const TSharedRef<SWindow> Window)"
  },
  {
    "label": "UpdateFullscreenState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFullscreenState(const TSharedRef<SWindow> Window, uint32 OverrideResX, uint32 OverrideResY)"
  },
  {
    "label": "SetSystemResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSystemResolution(uint32 Width, uint32 Height)"
  },
  {
    "label": "RestoreSystemResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreSystemResolution(const TSharedRef<SWindow> InWindow)"
  },
  {
    "label": "DrawWindows()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindows(FSlateDrawBuffer& InWindowDrawBuffer)"
  },
  {
    "label": "FlushCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCommands()"
  },
  {
    "label": "Sync()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sync()"
  },
  {
    "label": "ReleaseDynamicResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseDynamicResource(const FSlateBrush& InBrush)"
  },
  {
    "label": "RemoveDynamicBrushResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveDynamicBrushResource(TSharedPtr<FSlateDynamicImageBrush> BrushToRemove)"
  },
  {
    "label": "GenerateDynamicImageResource()",
    "kind": "Method",
    "detail": "Function (FIntPoint)",
    "insertText": "GenerateDynamicImageResource(const FName InTextureName)"
  },
  {
    "label": "GenerateDynamicImageResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDynamicImageResource(FName ResourceName, uint32 Width, uint32 Height, const TArray< uint8 >& Bytes)"
  },
  {
    "label": "GenerateDynamicImageResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateDynamicImageResource(FName ResourceName, FSlateTextureDataRef TextureData)"
  },
  {
    "label": "GetResourceHandle()",
    "kind": "Method",
    "detail": "Function (FSlateResourceHandle)",
    "insertText": "GetResourceHandle(const FSlateBrush& Brush, FVector2f LocalSize, float DrawScale)"
  },
  {
    "label": "CanRenderResource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenderResource(UObject& InResourceObject)"
  },
  {
    "label": "GetViewportResource()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetViewportResource(const SWindow& Window)"
  },
  {
    "label": "SetColorVisionDeficiencyType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetColorVisionDeficiencyType(EColorVisionDeficiency Type, int32 Severity, bool bCorrectDeficiency, bool bShowCorrectionWithDeficiency)"
  },
  {
    "label": "CreateUpdatableTexture()",
    "kind": "Method",
    "detail": "Function (FSlateUpdatableTexture*)",
    "insertText": "CreateUpdatableTexture(uint32 Width, uint32 Height)"
  },
  {
    "label": "CreateSharedHandleTexture()",
    "kind": "Method",
    "detail": "Function (FSlateUpdatableTexture*)",
    "insertText": "CreateSharedHandleTexture(void* SharedHandle)"
  },
  {
    "label": "ReleaseUpdatableTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseUpdatableTexture(FSlateUpdatableTexture* Texture)"
  },
  {
    "label": "GetTextureAtlasProvider()",
    "kind": "Method",
    "detail": "Function (ISlateAtlasProvider*)",
    "insertText": "GetTextureAtlasProvider()"
  },
  {
    "label": "GetResourceCriticalSection()",
    "kind": "Method",
    "detail": "Function (FCriticalSection*)",
    "insertText": "GetResourceCriticalSection()"
  },
  {
    "label": "ReleaseAccessedResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseAccessedResources(bool bImmediatelyFlush)"
  },
  {
    "label": "RegisterCurrentScene()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "RegisterCurrentScene(FSceneInterface* Scene)"
  },
  {
    "label": "GetCurrentSceneIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCurrentSceneIndex()"
  },
  {
    "label": "SetCurrentSceneIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSceneIndex(int32 InIndex)"
  },
  {
    "label": "ClearScenes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearScenes()"
  },
  {
    "label": "GetSlateRecommendedColorFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetSlateRecommendedColorFormat()"
  },
  {
    "label": "DestroyCachedFastPathRenderingData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCachedFastPathRenderingData(struct FSlateCachedFastPathRenderingData* InRenderingData)"
  },
  {
    "label": "DestroyCachedFastPathElementData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyCachedFastPathElementData(FSlateCachedElementData* InCachedElementData)"
  },
  {
    "label": "BeginFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginFrame()"
  },
  {
    "label": "EndFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndFrame()"
  },
  {
    "label": "AddWidgetRendererUpdate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddWidgetRendererUpdate(const struct FRenderThreadUpdateContext& Context, bool bDeferredRenderTargetUpdate)"
  },
  {
    "label": "ReloadTextureResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReloadTextureResources()"
  },
  {
    "label": "LoadStyleResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadStyleResources(const ISlateStyle& Style)"
  },
  {
    "label": "AreShadersInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreShadersInitialized()"
  },
  {
    "label": "InvalidateAllViewports()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InvalidateAllViewports()"
  },
  {
    "label": "PrepareToTakeScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToTakeScreenshot(const FIntRect& Rect, TArray<FColor>* OutColorData, SWindow* ScreenshotWindow)"
  },
  {
    "label": "PrepareToTakeHDRScreenshot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrepareToTakeHDRScreenshot(const FIntRect& Rect, TArray<FLinearColor>* OutColorData, SWindow* ScreenshotWindow)"
  },
  {
    "label": "DrawWindow_RenderThread()",
    "kind": "Method",
    "detail": "Function (private : FSlateDrawWindowPassOutputs)",
    "insertText": "DrawWindow_RenderThread(FRDGBuilder& GraphBuilder, const FSlateDrawWindowPassInputs& Inputs)"
  },
  {
    "label": "PresentWindow_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PresentWindow_RenderThread(FRHICommandListImmediate& RHICmdList, const FSlateDrawWindowPassInputs& DrawPassInputs, const FSlateDrawWindowPassOutputs& DrawPassOutputs)"
  },
  {
    "label": "LoadUsedTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadUsedTextures()"
  },
  {
    "label": "ResizeViewportIfNeeded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeViewportIfNeeded(FSlateViewportInfo* ViewportInfo, FIntPoint ExtentToResizeTo, bool bFullscreen, SWindow* Window)"
  },
  {
    "label": "GetViewportPixelFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetViewportPixelFormat(const SWindow& Window, bool bDisplayFormatIsHDR)"
  },
  {
    "label": "DrawWindows_Private()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawWindows_Private(FSlateDrawBuffer& InWindowDrawBuffer)"
  },
  {
    "label": "CleanUpdatableTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanUpdatableTextures()"
  },
  {
    "label": "OnVirtualDesktopSizeChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnVirtualDesktopSizeChanged(const FDisplayMetrics& NewDisplayMetric)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (TMap<const SWindow*,FSlateViewportInfo*> WindowToViewportInfo ; FSlateDrawBuffer* EnqueuedWindowDrawBuffer = nullptr ; FSlateDrawBuffer DrawBuffers [ NumDrawBuffers ] ; uint8 FreeBufferIndex = 0 ; TUniquePtr<FSlateElementBatcher> ElementBatcher ; TSharedPtr<FSlateRHIResourceManager> ResourceManager ; TSharedPtr<FSlateRHIRenderingPolicy> RenderingPolicy ; TArray<TSharedPtr<FSlateDynamicImageBrush>> DynamicBrushesToRemove [ NumDrawBuffers ] ; struct { TArray<FSlateCachedFastPathRenderingData*,FConcurrentLinearArrayAllocator> CachedRenderingData ; TArray<FSlateCachedElementData*,FConcurrentLinearArrayAllocator> CachedElementData ; bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FlushPendingDeletes()",
    "kind": "Method",
    "detail": "Function (} } PendingDeletes ; void)",
    "insertText": "FlushPendingDeletes()"
  },
  {
    "label": "LastFramesPostBufferUsed()",
    "kind": "Method",
    "detail": "Function (TArray<FRenderThreadUpdateContext,FConcurrentLinearArrayAllocator> DeferredUpdateContexts ; bool bIsStandaloneStereoOnlyDevice = false ; bool bUpdateHDRDisplayInformation = false ; ESlatePostRT bShrinkPostBufferRequested = ESlatePostRT::None ; uint64)",
    "insertText": "LastFramesPostBufferUsed(uint8)"
  },
  {
    "label": "SlatePostRTFences()",
    "kind": "Method",
    "detail": "Function (FRenderCommandFence)",
    "insertText": "SlatePostRTFences(uint8)"
  },
  {
    "label": "uint64()",
    "kind": "Method",
    "detail": "Function (struct { TStaticArray<)",
    "insertText": "uint64(int32)"
  }
]