[
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FActiveSubtitle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveSubtitle"
  },
  {
    "label": "FQueueSubtitleParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQueueSubtitleParams"
  },
  {
    "label": "FSubtitleManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubtitleManager"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" UObject / ObjectKey . h \" # define SUBTITLE_SCREEN_DEPTH_FOR_3D 0 . 1 f class FCanvas ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FSubtitleManagerSetSubtitleText, const FText&)"
  },
  {
    "label": "FActiveSubtitle()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FActiveSubtitle(int32 InIndex, float InPriority, bool InbSplit, bool InbSingleLine, TArray<FSubtitleCue> InSubtitles) : Index(InIndex) , Priority(InPriority) , bSplit(InbSplit) , bSingleLine(InbSingleLine) , Subtitles(MoveTemp(InSubtitles))"
  },
  {
    "label": "FQueueSubtitleParams()",
    "kind": "Method",
    "detail": "Function (} int32 Index ; float Priority ; bool bSplit ; bool bSingleLine ; TArray<FSubtitleCue> Subtitles ; } ; struct FQueueSubtitleParams {)",
    "insertText": "FQueueSubtitleParams(const TArray<FSubtitleCue>& InSubtitles) : Subtitles(InSubtitles)"
  },
  {
    "label": "KillAllSubtitles()",
    "kind": "Method",
    "detail": "Function (} uint64 AudioComponentID ; TWeakObjectPtr<UWorld> WorldPtr ; PTRINT WaveInstance ; float SubtitlePriority ; float Duration ; uint8 bManualWordWrap : 1 ; uint8 bSingleLine : 1 ; const TArray<FSubtitleCue>& Subtitles ; float RequestedStartTime ; } ; class FSubtitleManager { public : void)",
    "insertText": "KillAllSubtitles(void)"
  },
  {
    "label": "KillSubtitles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "KillSubtitles(PTRINT SubtitleID)"
  },
  {
    "label": "TrimRegionToSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrimRegionToSafeZone(FCanvas* Canvas, FIntRect& InOutSubtitleRegion)"
  },
  {
    "label": "SplitLinesToSafeZone()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SplitLinesToSafeZone(FCanvas* Canvas, FIntRect & SubtitleRegion)"
  },
  {
    "label": "FindHighestPrioritySubtitle()",
    "kind": "Method",
    "detail": "Function (PTRINT)",
    "insertText": "FindHighestPrioritySubtitle(float CurrentTime)"
  },
  {
    "label": "QueueSubtitles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueSubtitles(PTRINT SubtitleID, float Priority, bool bManualWordWrap, bool bSingleLine, float SoundDuration, const TArray<FSubtitleCue>& Subtitles, float InStartTime, float InCurrentTime)"
  },
  {
    "label": "QueueSubtitles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "QueueSubtitles(const FQueueSubtitleParams& QueueSubtitlesParams)"
  },
  {
    "label": "DisplaySubtitle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySubtitle(FCanvas* Canvas, FActiveSubtitle* Subtitle, FIntRect & Parms, const FLinearColor& Color)"
  },
  {
    "label": "DisplaySubtitles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisplaySubtitles(FCanvas* InCanvas, FIntRect & SubtitleRegion, float InAudioTimeSeconds)"
  },
  {
    "label": "HasSubtitles()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSubtitles()"
  },
  {
    "label": "GetCurrentSubtitlesHeight()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetCurrentSubtitlesHeight()"
  },
  {
    "label": "OnSetSubtitleText()",
    "kind": "Method",
    "detail": "Function (FSubtitleManagerSetSubtitleText&)",
    "insertText": "OnSetSubtitleText()"
  },
  {
    "label": "DisplaySubtitle_ToDisplays()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "DisplaySubtitle_ToDisplays(FActiveSubtitle* Subtitle)"
  },
  {
    "label": "SubtitleCuesToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "SubtitleCuesToString(FActiveSubtitle* Subtitle)"
  }
]