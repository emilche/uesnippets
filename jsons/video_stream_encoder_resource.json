[
  {
    "label": "VideoStreamEncoderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoStreamEncoderResource"
  },
  {
    "label": "VideoStreamEncoderResource()",
    "kind": "Method",
    "detail": "Function (# ifndef VIDEO_ADAPTATION_VIDEO_STREAM_ENCODER_RESOURCE_H_ # define VIDEO_ADAPTATION_VIDEO_STREAM_ENCODER_RESOURCE_H_ # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / adaptation / resource . h \" # include \" api / sequence_checker . h \" # include \" api / task_queue / task_queue_base . h \" # include \" call / adaptation / adaptation_constraint . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class VideoStreamEncoderResource : public Resource { public : ~)",
    "insertText": "VideoStreamEncoderResource()"
  },
  {
    "label": "RegisterEncoderTaskQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterEncoderTaskQueue(TaskQueueBase* encoder_queue)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Name()"
  },
  {
    "label": "SetResourceListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourceListener(ResourceListener* listener)"
  },
  {
    "label": "VideoStreamEncoderResource()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "VideoStreamEncoderResource(std::string name)"
  },
  {
    "label": "OnResourceUsageStateMeasured()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResourceUsageStateMeasured(ResourceUsageState usage_state)"
  },
  {
    "label": "encoder_queue()",
    "kind": "Method",
    "detail": "Function (TaskQueueBase*)",
    "insertText": "encoder_queue()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : Mutex lock_ ; const std::string name_ ; TaskQueueBase* encoder_queue_ ; ResourceListener* listener_)",
    "insertText": "RTC_GUARDED_BY(lock_)"
  }
]