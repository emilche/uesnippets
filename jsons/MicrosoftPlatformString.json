[
  {
    "label": "FMicrosoftPlatformString",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMicrosoftPlatformString"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / Char . h \" # if PLATFORM_USE_GENERIC_STRING_IMPLEMENTATION # include \" GenericPlatform / GenericWidePlatformString . h \" # else # include \" GenericPlatform / GenericPlatformString . h \" # endif # include \" GenericPlatform / GenericPlatformStricmp . h \" # include<stdarg . h> # include<stdio . h> # include<stdlib . h> # include<string . h> # include<tchar . h> # pragma)",
    "insertText": "warning(push) #pragma warning(disable : 4996) #pragma warning(disable : 4995)"
  },
  {
    "label": "Strupr()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_USE_GENERIC_STRING_IMPLEMENTATION using Super = FGenericWidePlatformString ; # else using Super = FGenericPlatformString ; # endif using FGenericPlatformString::Stricmp ; using FGenericPlatformString::Strncmp ; using FGenericPlatformString::Strnicmp ; # if ! PLATFORM_USE_GENERIC_STRING_IMPLEMENTATION template<CharType> CharType*)",
    "insertText": "Strupr(CharType* Dest, SIZE_T DestCount)"
  },
  {
    "label": "ToUpper()",
    "kind": "Method",
    "detail": "Function (* Char = TChar<CharType)",
    "insertText": "ToUpper(*Char)"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (} return Dest ; } # endif WIDECHAR*)",
    "insertText": "Strcpy(WIDECHAR* Dest, SIZE_T DestCount, const WIDECHAR* Src)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (} WIDECHAR*)",
    "insertText": "Strncpy(WIDECHAR* Dest, const WIDECHAR* Src, SIZE_T MaxLen)"
  },
  {
    "label": "_tcsncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_tcsncpy(Dest, Src, MaxLen-1)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (Dest [ MaxLen - 1 ] = 0 ; return Dest ; } WIDECHAR*)",
    "insertText": "Strcat(WIDECHAR* Dest, SIZE_T DestCount, const WIDECHAR* Src)"
  },
  {
    "label": "Strcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strcmp(const WIDECHAR* String1, const WIDECHAR* String2)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strncmp(const WIDECHAR* String1, const WIDECHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const WIDECHAR* String)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strnlen(const WIDECHAR* String, SIZE_T StringSize)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (} const WIDECHAR*)",
    "insertText": "Strstr(const WIDECHAR* String, const WIDECHAR* Find)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (} const WIDECHAR*)",
    "insertText": "Strchr(const WIDECHAR* String, WIDECHAR C)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (} const WIDECHAR*)",
    "insertText": "Strrchr(const WIDECHAR* String, WIDECHAR C)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Atoi(const WIDECHAR* String)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Atoi64(const WIDECHAR* String)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atof(const WIDECHAR* String)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Atod(const WIDECHAR* String)"
  },
  {
    "label": "Strtoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strtoi(const WIDECHAR* Start, WIDECHAR** End, int32 Base)"
  },
  {
    "label": "Strtoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Strtoi64(const WIDECHAR* Start, WIDECHAR** End, int32 Base)"
  },
  {
    "label": "Strtoui64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Strtoui64(const WIDECHAR* Start, WIDECHAR** End, int32 Base)"
  },
  {
    "label": "Strtok()",
    "kind": "Method",
    "detail": "Function (} WIDECHAR*)",
    "insertText": "Strtok(WIDECHAR* StrToken, const WIDECHAR* Delim, WIDECHAR** Context)"
  },
  {
    "label": "GetVarArgs()",
    "kind": "Method",
    "detail": "Function (} # if PLATFORM_USE_GENERIC_STRING_IMPLEMENTATION using Super::GetVarArgs ; # else int32)",
    "insertText": "GetVarArgs(WIDECHAR* Dest, SIZE_T DestSize, const WIDECHAR*& Fmt, va_list ArgPtr)"
  },
  {
    "label": "vswprintf()",
    "kind": "Method",
    "detail": "Function (int32 Result =)",
    "insertText": "vswprintf(Dest, DestSize, Fmt, ArgPtr)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (} ANSICHAR*)",
    "insertText": "Strncpy(ANSICHAR* Dest, const ANSICHAR* Src, SIZE_T MaxLen)"
  },
  {
    "label": "strncpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "strncpy(Dest, Src, MaxLen)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (Dest [ MaxLen - 1 ] = 0 ; return Dest ; } ANSICHAR*)",
    "insertText": "Strcat(ANSICHAR* Dest, SIZE_T DestCount, const ANSICHAR* Src)"
  },
  {
    "label": "Strcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strcmp(const ANSICHAR* String1, const ANSICHAR* String2)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strncmp(const ANSICHAR* String1, const ANSICHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const ANSICHAR* String)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strnlen(const ANSICHAR* String, SIZE_T StringSize)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "Strstr(const ANSICHAR* String, const ANSICHAR* Find)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "Strchr(const ANSICHAR* String, ANSICHAR C)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (} const ANSICHAR*)",
    "insertText": "Strrchr(const ANSICHAR* String, ANSICHAR C)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Atoi(const ANSICHAR* String)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Atoi64(const ANSICHAR* String)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atof(const ANSICHAR* String)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Atod(const ANSICHAR* String)"
  },
  {
    "label": "Strtoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strtoi(const ANSICHAR* Start, ANSICHAR** End, int32 Base)"
  },
  {
    "label": "Strtoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Strtoi64(const ANSICHAR* Start, ANSICHAR** End, int32 Base)"
  },
  {
    "label": "Strtoui64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Strtoui64(const ANSICHAR* Start, ANSICHAR** End, int32 Base)"
  },
  {
    "label": "Strtok()",
    "kind": "Method",
    "detail": "Function (} ANSICHAR*)",
    "insertText": "Strtok(ANSICHAR* StrToken, const ANSICHAR* Delim, ANSICHAR** Context)"
  },
  {
    "label": "GetVarArgs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVarArgs(ANSICHAR* Dest, SIZE_T DestSize, const ANSICHAR*& Fmt, va_list ArgPtr)"
  },
  {
    "label": "vsnprintf()",
    "kind": "Method",
    "detail": "Function (int32 Result =)",
    "insertText": "vsnprintf(Dest, DestSize, Fmt, ArgPtr)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const UCS2CHAR* String)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strnlen(const UCS2CHAR* String, SIZE_T StringSize)"
  },
  {
    "label": "Strcpy()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strcpy(UTF8CHAR* Dest, SIZE_T DestCount, const UTF8CHAR* Src)"
  },
  {
    "label": "Strncpy()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strncpy(UTF8CHAR* Dest, const UTF8CHAR* Src, SIZE_T MaxLen)"
  },
  {
    "label": "Strcat()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strcat(UTF8CHAR* Dest, SIZE_T DestCount, const UTF8CHAR* Src)"
  },
  {
    "label": "Strcmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strcmp(const UTF8CHAR* String1, const UTF8CHAR* String2)"
  },
  {
    "label": "Strncmp()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strncmp(const UTF8CHAR* String1, const UTF8CHAR* String2, SIZE_T Count)"
  },
  {
    "label": "Strlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strlen(const UTF8CHAR* String)"
  },
  {
    "label": "Strnlen()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strnlen(const UTF8CHAR* String, SIZE_T StringSize)"
  },
  {
    "label": "Strstr()",
    "kind": "Method",
    "detail": "Function (} const UTF8CHAR*)",
    "insertText": "Strstr(const UTF8CHAR* String, const UTF8CHAR* Find)"
  },
  {
    "label": "Strchr()",
    "kind": "Method",
    "detail": "Function (} const UTF8CHAR*)",
    "insertText": "Strchr(const UTF8CHAR* String, UTF8CHAR C)"
  },
  {
    "label": "Strrchr()",
    "kind": "Method",
    "detail": "Function (} const UTF8CHAR*)",
    "insertText": "Strrchr(const UTF8CHAR* String, UTF8CHAR C)"
  },
  {
    "label": "Atoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Atoi(const UTF8CHAR* String)"
  },
  {
    "label": "Atoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Atoi64(const UTF8CHAR* String)"
  },
  {
    "label": "Atof()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atof(const UTF8CHAR* String)"
  },
  {
    "label": "Atod()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Atod(const UTF8CHAR* String)"
  },
  {
    "label": "Strtoi()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Strtoi(const UTF8CHAR* Start, UTF8CHAR** End, int32 Base)"
  },
  {
    "label": "Strtoi64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "Strtoi64(const UTF8CHAR* Start, UTF8CHAR** End, int32 Base)"
  },
  {
    "label": "Strtoui64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "Strtoui64(const UTF8CHAR* Start, UTF8CHAR** End, int32 Base)"
  },
  {
    "label": "Strtok()",
    "kind": "Method",
    "detail": "Function (} UTF8CHAR*)",
    "insertText": "Strtok(UTF8CHAR* StrToken, const UTF8CHAR* Delim, UTF8CHAR** Context)"
  },
  {
    "label": "GetVarArgs()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetVarArgs(UTF8CHAR* Dest, SIZE_T DestSize, const UTF8CHAR*& Fmt, va_list ArgPtr)"
  }
]