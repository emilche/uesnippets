[
  {
    "label": "FOpenGLES",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOpenGLES"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "IsES31Usable()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" OpenGLPlatform . h \" # if UGL_PLATFORM_SUPPORTS_GLES # include \" OpenGLBase . h \" # include \" OpenGLUtil . h \" namespace OpenGLConsoleVariables { int32 bUseUnsynchronizedBufferMapping ; } struct FOpenGLES : public FOpenGLBase { bool)",
    "insertText": "IsES31Usable()"
  },
  {
    "label": "ProcessExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessExtensions(const FString& ExtensionsString)"
  },
  {
    "label": "SupportsUniformBuffers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsUniformBuffers()"
  },
  {
    "label": "SupportsDepthStencilRead()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsDepthStencilRead()"
  },
  {
    "label": "SupportsWideMRT()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsWideMRT()"
  },
  {
    "label": "glBeginQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBeginQuery(QueryType, QueryId)"
  },
  {
    "label": "EndQuery()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndQuery(GLenum QueryType)"
  },
  {
    "label": "glEndQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glEndQuery(QueryType)"
  },
  {
    "label": "GenQueries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenQueries(GLsizei NumQueries, GLuint* QueryIDs)"
  },
  {
    "label": "glGenQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenQueries(NumQueries, QueryIDs)"
  },
  {
    "label": "DeleteQueries()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteQueries(GLsizei NumQueries, const GLuint* QueryIDs)"
  },
  {
    "label": "glDeleteQueries()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteQueries(NumQueries, QueryIDs)"
  },
  {
    "label": "GetQueryObject()",
    "kind": "Method",
    "detail": "Function (} using FOpenGLBase::GetQueryObject ; void)",
    "insertText": "GetQueryObject(GLuint QueryId, EQueryMode QueryMode, GLuint* OutResult)"
  },
  {
    "label": "QueryName()",
    "kind": "Method",
    "detail": "Function (GLenum)",
    "insertText": "QueryName(QueryMode == QM_Result)"
  },
  {
    "label": "glGetQueryObjectuiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetQueryObjectuiv(QueryId, QueryName, OutResult)"
  },
  {
    "label": "LabelObject()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LabelObject(GLenum Type, GLuint Object, const ANSICHAR* Name)"
  },
  {
    "label": "glLabelObjectEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glLabelObjectEXT(Type, Object, 0, Name)"
  },
  {
    "label": "GetLabelObject()",
    "kind": "Method",
    "detail": "Function (} } GLsizei)",
    "insertText": "GetLabelObject(GLenum Type, GLuint Object, GLsizei BufferSize, ANSICHAR* OutName)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (GLsizei Length = 0 ;)",
    "insertText": "if(glGetObjectLabelEXT != nullptr)"
  },
  {
    "label": "glGetObjectLabelEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetObjectLabelEXT(Type, Object, BufferSize, &Length, OutName)"
  },
  {
    "label": "PushGroupMarker()",
    "kind": "Method",
    "detail": "Function (} return Length ; } void)",
    "insertText": "PushGroupMarker(const ANSICHAR* Name)"
  },
  {
    "label": "glPushGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPushGroupMarkerEXT(0, Name)"
  },
  {
    "label": "PopGroupMarker()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "PopGroupMarker()"
  },
  {
    "label": "glPopGroupMarkerEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glPopGroupMarkerEXT()"
  },
  {
    "label": "MapBufferRange()",
    "kind": "Method",
    "detail": "Function (} } void*)",
    "insertText": "MapBufferRange(GLenum Type, uint32 InOffset, uint32 InSize, EResourceLockMode LockMode)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (GLenum Access ;)",
    "insertText": "switch(LockMode)"
  },
  {
    "label": "bUseUnsynchronizedBufferMapping()",
    "kind": "Method",
    "detail": "Function (break ; case EResourceLockMode::RLM_WriteOnly : Access =)",
    "insertText": "bUseUnsynchronizedBufferMapping(GL_MAP_INVALIDATE_BUFFER_BIT | GL_MAP_WRITE_BIT | GL_MAP_UNSYNCHRONIZED_BIT) : (GL_MAP_INVALIDATE_BUFFER_BIT | GL_MAP_WRITE_BIT)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (break ; case EResourceLockMode::RLM_WriteOnlyUnsynchronized :)",
    "insertText": "Access(GL_MAP_WRITE_BIT | GL_MAP_UNSYNCHRONIZED_BIT)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (break ; case EResourceLockMode::RLM_WriteOnlyPersistent :)",
    "insertText": "Access(GL_MAP_WRITE_BIT | GL_MAP_PERSISTENT_BIT | GL_MAP_COHERENT_BIT)"
  },
  {
    "label": "Access()",
    "kind": "Method",
    "detail": "Function (break ; case EResourceLockMode::RLM_ReadWrite : default :)",
    "insertText": "Access(GL_MAP_READ_BIT | GL_MAP_WRITE_BIT)"
  },
  {
    "label": "glMapBufferRange()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "glMapBufferRange(Type, InOffset, InSize, Access)"
  },
  {
    "label": "UnmapBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnmapBuffer(GLenum Type)"
  },
  {
    "label": "glUnmapBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUnmapBuffer(Type)"
  },
  {
    "label": "UnmapBufferRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnmapBufferRange(GLenum Type, uint32 InOffset, uint32 InSize)"
  },
  {
    "label": "UnmapBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnmapBuffer(Type)"
  },
  {
    "label": "TexImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexImage3D(GLenum Target, GLint Level, GLint InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLint Border, GLenum Format, GLenum Type, const GLvoid* PixelData)"
  },
  {
    "label": "glTexImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexImage3D(Target, Level, InternalFormat, Width, Height, Depth, Border, Format, Type, PixelData)"
  },
  {
    "label": "CompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompressedTexImage3D(GLenum Target, GLint Level, GLenum InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLint Border, GLsizei ImageSize, const GLvoid* PixelData)"
  },
  {
    "label": "glCompressedTexImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCompressedTexImage3D(Target, Level, InternalFormat, Width, Height, Depth, Border, ImageSize, PixelData)"
  },
  {
    "label": "CompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CompressedTexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLsizei ImageSize, const GLvoid* PixelData)"
  },
  {
    "label": "glCompressedTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCompressedTexSubImage3D(Target, Level, XOffset, YOffset, ZOffset, Width, Height, Depth, Format, ImageSize, PixelData)"
  },
  {
    "label": "TexSubImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLenum Type, const GLvoid* PixelData)"
  },
  {
    "label": "glTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexSubImage3D(Target, Level, XOffset, YOffset, ZOffset, Width, Height, Depth, Format, Type, PixelData)"
  },
  {
    "label": "CopyTexSubImage1D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTexSubImage1D(GLenum Target, GLint Level, GLint XOffset, GLint X, GLint Y, GLsizei Width)"
  },
  {
    "label": "CopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTexSubImage2D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint X, GLint Y, GLsizei Width, GLsizei Height)"
  },
  {
    "label": "glCopyTexSubImage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyTexSubImage2D(Target, Level, XOffset, YOffset, X, Y, Width, Height)"
  },
  {
    "label": "CopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyTexSubImage3D(GLenum Target, GLint Level, GLint XOffset, GLint YOffset, GLint ZOffset, GLint X, GLint Y, GLsizei Width, GLsizei Height)"
  },
  {
    "label": "glCopyTexSubImage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyTexSubImage3D(Target, Level, XOffset, YOffset, ZOffset, X, Y, Width, Height)"
  },
  {
    "label": "CopyImageSubData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyImageSubData(GLuint SrcName, GLenum SrcTarget, GLint SrcLevel, GLint SrcX, GLint SrcY, GLint SrcZ, GLuint DstName, GLenum DstTarget, GLint DstLevel, GLint DstX, GLint DstY, GLint DstZ, GLsizei Width, GLsizei Height, GLsizei Depth)"
  },
  {
    "label": "glCopyImageSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyImageSubData(SrcName, SrcTarget, SrcLevel, SrcX, SrcY, SrcZ, DstName, DstTarget, DstLevel, DstX, DstY, DstZ, Width, Height, Depth)"
  },
  {
    "label": "TexStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TexStorage2DMultisample(GLenum Target, GLsizei Samples, GLint InternalFormat, GLsizei Width, GLsizei Height, GLboolean FixedSampleLocations)"
  },
  {
    "label": "glTexStorage2DMultisample()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage2DMultisample(Target, Samples, InternalFormat, Width, Height, FixedSampleLocations)"
  },
  {
    "label": "glRenderbufferStorageMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glRenderbufferStorageMultisampleEXT(Target, Samples, InternalFormat, Width, Height)"
  },
  {
    "label": "ClearBufferfv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearBufferfv(GLenum Buffer, GLint DrawBufferIndex, const GLfloat* Value)"
  },
  {
    "label": "glClearBufferfv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearBufferfv(Buffer, DrawBufferIndex, Value)"
  },
  {
    "label": "ClearBufferfi()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearBufferfi(GLenum Buffer, GLint DrawBufferIndex, GLfloat Depth, GLint Stencil)"
  },
  {
    "label": "glClearBufferfi()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearBufferfi(Buffer, DrawBufferIndex, Depth, Stencil)"
  },
  {
    "label": "ClearBufferiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearBufferiv(GLenum Buffer, GLint DrawBufferIndex, const GLint* Value)"
  },
  {
    "label": "glClearBufferiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearBufferiv(Buffer, DrawBufferIndex, Value)"
  },
  {
    "label": "DrawBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawBuffers(GLsizei NumBuffers, const GLenum* Buffers)"
  },
  {
    "label": "glDrawBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawBuffers(NumBuffers, Buffers)"
  },
  {
    "label": "ReadBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReadBuffer(GLenum Mode)"
  },
  {
    "label": "glReadBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glReadBuffer(Mode)"
  },
  {
    "label": "DrawBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawBuffer(GLenum Mode)"
  },
  {
    "label": "DrawBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawBuffers(1, &Mode)"
  },
  {
    "label": "EnableIndexed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableIndexed(GLenum Parameter, GLuint Index)"
  },
  {
    "label": "glEnableiEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glEnableiEXT(Parameter, Index)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "check(Index == 0)"
  },
  {
    "label": "glEnable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glEnable(Parameter)"
  },
  {
    "label": "DisableIndexed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DisableIndexed(GLenum Parameter, GLuint Index)"
  },
  {
    "label": "glDisableiEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDisableiEXT(Parameter, Index)"
  },
  {
    "label": "glDisable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDisable(Parameter)"
  },
  {
    "label": "ColorMaskIndexed()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ColorMaskIndexed(GLuint Index, GLboolean Red, GLboolean Green, GLboolean Blue, GLboolean Alpha)"
  },
  {
    "label": "glColorMaskiEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glColorMaskiEXT(Index, Red, Green, Blue, Alpha)"
  },
  {
    "label": "glColorMask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glColorMask(Red, Green, Blue, Alpha)"
  },
  {
    "label": "BlendEquationi()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "BlendEquationi(GLuint Buf, GLenum Mode)"
  },
  {
    "label": "glBlendEquationiEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBlendEquationiEXT(Buf, Mode)"
  },
  {
    "label": "BlendEquationSeparatei()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlendEquationSeparatei(GLuint Buf, GLenum ModeRGB, GLenum ModeAlpha)"
  },
  {
    "label": "glBlendEquationSeparateiEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBlendEquationSeparateiEXT(Buf, ModeRGB, ModeAlpha)"
  },
  {
    "label": "BlendFunci()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlendFunci(GLuint Buf, GLenum Src, GLenum Dst)"
  },
  {
    "label": "glBlendFunciEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBlendFunciEXT(Buf, Src, Dst)"
  },
  {
    "label": "BlendFuncSeparatei()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlendFuncSeparatei(GLuint Buf, GLenum SrcRGB, GLenum DstRGB, GLenum SrcAlpha, GLenum DstAlpha)"
  },
  {
    "label": "glBlendFuncSeparateiEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBlendFuncSeparateiEXT(Buf, SrcRGB, DstRGB, SrcAlpha, DstAlpha)"
  },
  {
    "label": "TexBuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexBuffer(GLenum Target, GLenum InternalFormat, GLuint Buffer)"
  },
  {
    "label": "glTexBufferEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexBufferEXT(Target, InternalFormat, Buffer)"
  },
  {
    "label": "TexBufferRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexBufferRange(GLenum Target, GLenum InternalFormat, GLuint Buffer, GLintptr Offset, GLsizeiptr Size)"
  },
  {
    "label": "glTexBufferRangeEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexBufferRangeEXT(Target, InternalFormat, Buffer, Offset, Size)"
  },
  {
    "label": "ProgramUniform4uiv()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramUniform4uiv(GLuint Program, GLint Location, GLsizei Count, const GLuint* Value)"
  },
  {
    "label": "glUniform4uiv()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniform4uiv(Location, Count, Value)"
  },
  {
    "label": "SupportsProgramBinary()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SupportsProgramBinary()"
  },
  {
    "label": "glGetProgramBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGetProgramBinary(Program, BufSize, Length, BinaryFormat, Binary)"
  },
  {
    "label": "ProgramBinary()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramBinary(GLuint Program, GLenum BinaryFormat, const void* Binary, GLsizei Length)"
  },
  {
    "label": "glProgramBinary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glProgramBinary(Program, BinaryFormat, Binary, Length)"
  },
  {
    "label": "ProgramParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ProgramParameter(GLuint Program, GLenum PName, GLint Value)"
  },
  {
    "label": "glProgramParameteri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glProgramParameteri(Program, PName, Value)"
  },
  {
    "label": "BindBufferBase()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindBufferBase(GLenum Target, GLuint Index, GLuint Buffer)"
  },
  {
    "label": "glBindBufferBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBufferBase(Target, Index, Buffer)"
  },
  {
    "label": "BindBufferRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindBufferRange(GLenum Target, GLuint Index, GLuint Buffer, GLintptr Offset, GLsizeiptr Size)"
  },
  {
    "label": "glBindBufferRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindBufferRange(Target, Index, Buffer, Offset, Size)"
  },
  {
    "label": "GetUniformBlockIndex()",
    "kind": "Method",
    "detail": "Function (} GLuint)",
    "insertText": "GetUniformBlockIndex(GLuint Program, const GLchar* UniformBlockName)"
  },
  {
    "label": "UniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UniformBlockBinding(GLuint Program, GLuint UniformBlockIndex, GLuint UniformBlockBinding)"
  },
  {
    "label": "glUniformBlockBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glUniformBlockBinding(Program, UniformBlockIndex, UniformBlockBinding)"
  },
  {
    "label": "BufferSubData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BufferSubData(GLenum Target, GLintptr Offset, GLsizeiptr Size, const GLvoid* Data)"
  },
  {
    "label": "glBufferSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBufferSubData(Target, Offset, Size, Data)"
  },
  {
    "label": "VertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribIPointer(GLuint Index, GLint Size, GLenum Type, GLsizei Stride, const GLvoid* Pointer)"
  },
  {
    "label": "glVertexAttribIPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribIPointer(Index, Size, Type, Stride, Pointer)"
  },
  {
    "label": "GenSamplers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenSamplers(GLsizei Count, GLuint* Samplers)"
  },
  {
    "label": "glGenSamplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenSamplers(Count, Samplers)"
  },
  {
    "label": "DeleteSamplers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeleteSamplers(GLsizei Count, GLuint* Samplers)"
  },
  {
    "label": "glDeleteSamplers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDeleteSamplers(Count, Samplers)"
  },
  {
    "label": "SetSamplerParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSamplerParameter(GLuint Sampler, GLenum Parameter, GLint Value)"
  },
  {
    "label": "glSamplerParameteri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glSamplerParameteri(Sampler, Parameter, Value)"
  },
  {
    "label": "BindSampler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindSampler(GLuint Unit, GLuint Sampler)"
  },
  {
    "label": "glBindSampler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindSampler(Unit, Sampler)"
  },
  {
    "label": "MemoryBarrier()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MemoryBarrier(GLbitfield Barriers)"
  },
  {
    "label": "glMemoryBarrier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glMemoryBarrier(Barriers)"
  },
  {
    "label": "DispatchCompute()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchCompute(GLuint NumGroupsX, GLuint NumGroupsY, GLuint NumGroupsZ)"
  },
  {
    "label": "glDispatchCompute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDispatchCompute(NumGroupsX, NumGroupsY, NumGroupsZ)"
  },
  {
    "label": "DispatchComputeIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DispatchComputeIndirect(GLintptr Offset)"
  },
  {
    "label": "glDispatchComputeIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDispatchComputeIndirect(Offset)"
  },
  {
    "label": "BindImageTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BindImageTexture(GLuint Unit, GLuint Texture, GLint Level, GLboolean Layered, GLint Layer, GLenum Access, GLenum Format)"
  },
  {
    "label": "glBindImageTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindImageTexture(Unit, Texture, Level, Layered, Layer, Access, Format)"
  },
  {
    "label": "DepthRange()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DepthRange(GLdouble Near, GLdouble Far)"
  },
  {
    "label": "glDepthRangef()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDepthRangef(Near, Far)"
  },
  {
    "label": "VertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribPointer(GLuint Index, GLint Size, GLenum Type, GLboolean Normalized, GLsizei Stride, const GLvoid* Pointer)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Size(Size == GL_BGRA)"
  },
  {
    "label": "glVertexAttribPointer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribPointer(Index, Size, Type, Normalized, Stride, Pointer)"
  },
  {
    "label": "ClearDepth()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearDepth(GLdouble Depth)"
  },
  {
    "label": "glClearDepthf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glClearDepthf(Depth)"
  },
  {
    "label": "GenerateMipmap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenerateMipmap(GLenum Target)"
  },
  {
    "label": "glGenerateMipmap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenerateMipmap(Target)"
  },
  {
    "label": "GetMajorVersion()",
    "kind": "Method",
    "detail": "Function (} GLuint)",
    "insertText": "GetMajorVersion()"
  },
  {
    "label": "TexParameter()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexParameter(GLenum Target, GLenum Parameter, GLint Value)"
  },
  {
    "label": "glTexParameteri()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexParameteri(Target, Parameter, Value)"
  },
  {
    "label": "FramebufferTexture()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTexture(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level)"
  },
  {
    "label": "glFramebufferTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTexture(Target, Attachment, Texture, Level)"
  },
  {
    "label": "FramebufferTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTexture3D(GLenum Target, GLenum Attachment, GLenum TexTarget, GLuint Texture, GLint Level, GLint ZOffset)"
  },
  {
    "label": "glFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTextureLayer(Target, Attachment, Texture, Level, ZOffset)"
  },
  {
    "label": "FramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTextureLayer(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level, GLint Layer)"
  },
  {
    "label": "glFramebufferTextureLayer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTextureLayer(Target, Attachment, Texture, Level, Layer)"
  },
  {
    "label": "FramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTexture2D(GLenum Target, GLenum Attachment, GLenum TexTarget, GLuint Texture, GLint Level)"
  },
  {
    "label": "glFramebufferTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTexture2D(Target, Attachment, TexTarget, Texture, Level)"
  },
  {
    "label": "FramebufferTexture2DMultisample()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTexture2DMultisample(GLenum Target, GLenum Attachment, GLenum TexTarget, GLuint Texture, GLint Level, GLint NumSamples)"
  },
  {
    "label": "glFramebufferTexture2DMultisampleEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTexture2DMultisampleEXT(Target, Attachment, TexTarget, Texture, Level, NumSamples)"
  },
  {
    "label": "FramebufferTextureMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTextureMultiviewOVR(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level, GLint BaseViewIndex, GLsizei NumViews)"
  },
  {
    "label": "glFramebufferTextureMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTextureMultiviewOVR(Target, Attachment, Texture, Level, BaseViewIndex, NumViews)"
  },
  {
    "label": "FramebufferTextureMultisampleMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramebufferTextureMultisampleMultiviewOVR(GLenum Target, GLenum Attachment, GLuint Texture, GLint Level, GLsizei NumSamples, GLint BaseViewIndex, GLsizei NumViews)"
  },
  {
    "label": "glFramebufferTextureMultisampleMultiviewOVR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glFramebufferTextureMultisampleMultiviewOVR(Target, Attachment, Texture, Level, NumSamples, BaseViewIndex, NumViews)"
  },
  {
    "label": "BlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BlitFramebuffer(GLint SrcX0, GLint SrcY0, GLint SrcX1, GLint SrcY1, GLint DstX0, GLint DstY0, GLint DstX1, GLint DstY1, GLbitfield Mask, GLenum Filter)"
  },
  {
    "label": "glBlitFramebuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBlitFramebuffer(SrcX0, SrcY0, SrcX1, SrcY1, DstX0, DstY0, DstX1, DstY1, Mask, Filter)"
  },
  {
    "label": "TexStorage2D()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TexStorage2D(GLenum Target, GLint Levels, GLint InternalFormat, GLsizei Width, GLsizei Height, GLenum Format, GLenum Type, ETextureCreateFlags Flags)"
  },
  {
    "label": "glTexStorage2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage2D(Target, Levels, InternalFormat, Width, Height)"
  },
  {
    "label": "glDrawArraysInstanced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawArraysInstanced(Mode, First, Count, InstanceCount)"
  },
  {
    "label": "DrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawElementsInstanced(GLenum Mode, GLsizei Count, GLenum Type, const GLvoid* Indices, GLsizei InstanceCount)"
  },
  {
    "label": "glDrawElementsInstanced()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawElementsInstanced(Mode, Count, Type, Indices, InstanceCount)"
  },
  {
    "label": "CopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "CopyBufferSubData(GLenum ReadTarget, GLenum WriteTarget, GLintptr ReadOffset, GLintptr WriteOffset, GLsizeiptr Size)"
  },
  {
    "label": "glCopyBufferSubData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glCopyBufferSubData(ReadTarget, WriteTarget, ReadOffset, WriteOffset, Size)"
  },
  {
    "label": "DrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawArraysIndirect(GLenum Mode, const void* Offset)"
  },
  {
    "label": "glDrawArraysIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawArraysIndirect(Mode, Offset)"
  },
  {
    "label": "DrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DrawElementsIndirect(GLenum Mode, GLenum Type, const void* Offset)"
  },
  {
    "label": "glDrawElementsIndirect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glDrawElementsIndirect(Mode, Type, Offset)"
  },
  {
    "label": "VertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribDivisor(GLuint Index, GLuint Divisor)"
  },
  {
    "label": "glVertexAttribDivisor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribDivisor(Index, Divisor)"
  },
  {
    "label": "TexStorage3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TexStorage3D(GLenum Target, GLint Levels, GLint InternalFormat, GLsizei Width, GLsizei Height, GLsizei Depth, GLenum Format, GLenum Type)"
  },
  {
    "label": "glTexStorage3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glTexStorage3D(Target, Levels, InternalFormat, Width, Height, Depth)"
  },
  {
    "label": "CreateDevice()",
    "kind": "Method",
    "detail": "Function (} FPlatformOpenGLDevice*)",
    "insertText": "CreateDevice() UGL_REQUIRED(NULL) static FPlatformOpenGLContext* CreateContext(FPlatformOpenGLDevice* Device, void* WindowHandle) UGL_REQUIRED(NULL) static FORCEINLINE void InvalidateFramebuffer(GLenum Target, GLsizei NumAttachments, const GLenum* Attachments)"
  },
  {
    "label": "glInvalidateFramebuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glInvalidateFramebuffer(Target, NumAttachments, Attachments)"
  },
  {
    "label": "GenBuffers()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenBuffers(GLsizei n, GLuint* buffers)"
  },
  {
    "label": "glGenBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenBuffers(n, buffers)"
  },
  {
    "label": "GenTextures()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GenTextures(GLsizei n, GLuint* textures)"
  },
  {
    "label": "glGenTextures()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glGenTextures(n, textures)"
  },
  {
    "label": "TimerQueryDisjoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "TimerQueryDisjoint()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool Disjoint = false ;)",
    "insertText": "if(bTimerQueryCanBeDisjoint)"
  },
  {
    "label": "glGetIntegerv()",
    "kind": "Method",
    "detail": "Function (GLint WasDisjoint = 0 ;)",
    "insertText": "glGetIntegerv(GL_GPU_DISJOINT_EXT, &WasDisjoint)"
  },
  {
    "label": "Disjoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Disjoint(WasDisjoint != 0)"
  },
  {
    "label": "BindVertexBuffer()",
    "kind": "Method",
    "detail": "Function (} return Disjoint ; } void)",
    "insertText": "BindVertexBuffer(GLuint BindingIndex, GLuint Buffer, GLintptr Offset, GLsizei Stride)"
  },
  {
    "label": "glBindVertexBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBindVertexBuffer(BindingIndex, Buffer, Offset, Stride)"
  },
  {
    "label": "VertexAttribFormat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribFormat(GLuint AttribIndex, GLint Size, GLenum Type, GLboolean Normalized, GLuint RelativeOffset)"
  },
  {
    "label": "glVertexAttribFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribFormat(AttribIndex, Size, Type, Normalized, RelativeOffset)"
  },
  {
    "label": "VertexAttribIFormat()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribIFormat(GLuint AttribIndex, GLint Size, GLenum Type, GLuint RelativeOffset)"
  },
  {
    "label": "glVertexAttribIFormat()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribIFormat(AttribIndex, Size, Type, RelativeOffset)"
  },
  {
    "label": "VertexAttribBinding()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexAttribBinding(GLuint AttribIndex, GLuint BindingIndex)"
  },
  {
    "label": "glVertexAttribBinding()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexAttribBinding(AttribIndex, BindingIndex)"
  },
  {
    "label": "VertexBindingDivisor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VertexBindingDivisor(GLuint BindingIndex, GLuint Divisor)"
  },
  {
    "label": "glVertexBindingDivisor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glVertexBindingDivisor(BindingIndex, Divisor)"
  },
  {
    "label": "BufferStorage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "BufferStorage(GLenum Target, GLsizeiptr Size, const void* Data, GLbitfield Flags)"
  },
  {
    "label": "glBufferStorageEXT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "glBufferStorageEXT(Target, Size, Data, Flags)"
  }
]