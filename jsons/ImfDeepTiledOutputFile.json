[
  {
    "label": "IMF_EXPORT_TYPE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMF_EXPORT_TYPE"
  },
  {
    "label": "Data",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Data"
  },
  {
    "label": "MultiPartOutputFile",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MultiPartOutputFile"
  },
  {
    "label": "DeepTiledOutputFile()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDED_IMF_DEEP_TILED_OUTPUT_FILE_H # define INCLUDED_IMF_DEEP_TILED_OUTPUT_FILE_H # include \" ImfForward . h \" # include \" ImfGenericOutputFile . h \" # include \" ImfThreading . h \" # include \" ImfTileDescription . h \" # include<ImathBox . h> OPENEXR_IMF_INTERNAL_NAMESPACE_HEADER_ENTER class IMF_EXPORT_TYPE DeepTiledOutputFile : public GenericOutputFile { public : IMF_EXPORT)",
    "insertText": "DeepTiledOutputFile(const char fileName[], const Header& header, int numThreads = globalThreadCount ())"
  },
  {
    "label": "DeepTiledOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT)",
    "insertText": "DeepTiledOutputFile(OPENEXR_IMF_INTERNAL_NAMESPACE::OStream& os, const Header& header, int numThreads = globalThreadCount ())"
  },
  {
    "label": "DeepTiledOutputFile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT ~)",
    "insertText": "DeepTiledOutputFile()"
  },
  {
    "label": "fileName()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const char*)",
    "insertText": "fileName()"
  },
  {
    "label": "header()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const Header&)",
    "insertText": "header()"
  },
  {
    "label": "setFrameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "setFrameBuffer(const DeepFrameBuffer& frameBuffer)"
  },
  {
    "label": "frameBuffer()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT const DeepFrameBuffer&)",
    "insertText": "frameBuffer()"
  },
  {
    "label": "tileXSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "tileXSize()"
  },
  {
    "label": "tileYSize()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT unsigned int)",
    "insertText": "tileYSize()"
  },
  {
    "label": "levelMode()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LevelMode)",
    "insertText": "levelMode()"
  },
  {
    "label": "levelRoundingMode()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT LevelRoundingMode)",
    "insertText": "levelRoundingMode()"
  },
  {
    "label": "numLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numLevels()"
  },
  {
    "label": "numXLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numXLevels()"
  },
  {
    "label": "numYLevels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numYLevels()"
  },
  {
    "label": "isValidLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT bool)",
    "insertText": "isValidLevel(int lx, int ly)"
  },
  {
    "label": "levelWidth()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "levelWidth(int lx)"
  },
  {
    "label": "levelHeight()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "levelHeight(int ly)"
  },
  {
    "label": "numXTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numXTiles(int lx = 0)"
  },
  {
    "label": "numYTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT int)",
    "insertText": "numYTiles(int ly = 0)"
  },
  {
    "label": "dataWindowForLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForLevel(int l = 0)"
  },
  {
    "label": "dataWindowForLevel()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForLevel(int lx, int ly)"
  },
  {
    "label": "dataWindowForTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForTile(int dx, int dy, int l = 0)"
  },
  {
    "label": "dataWindowForTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT IMATH_NAMESPACE::Box2i)",
    "insertText": "dataWindowForTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "writeTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTile(int dx, int dy, int l = 0)"
  },
  {
    "label": "writeTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "writeTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTiles(int dx1, int dx2, int dy1, int dy2, int lx, int ly)"
  },
  {
    "label": "writeTiles()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "writeTiles(int dx1, int dx2, int dy1, int dy2, int l = 0)"
  },
  {
    "label": "copyPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyPixels(DeepTiledInputFile& in)"
  },
  {
    "label": "copyPixels()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "copyPixels(DeepTiledInputPart& in)"
  },
  {
    "label": "updatePreviewImage()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "updatePreviewImage(const PreviewRgba newPixels[])"
  },
  {
    "label": "breakTile()",
    "kind": "Method",
    "detail": "Function (IMF_EXPORT void)",
    "insertText": "breakTile(int dx, int dy, int lx, int ly, int offset, int length, char c)"
  },
  {
    "label": "DeepTiledOutputFile()",
    "kind": "Method",
    "detail": "Function (struct Data ; private :)",
    "insertText": "DeepTiledOutputFile(const OutputPartData* part)"
  },
  {
    "label": "DeepTiledOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepTiledOutputFile(const DeepTiledOutputFile&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeepTiledOutputFile&)",
    "insertText": "operator(const DeepTiledOutputFile&)"
  },
  {
    "label": "DeepTiledOutputFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeepTiledOutputFile(DeepTiledOutputFile&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (DeepTiledOutputFile&)",
    "insertText": "operator(DeepTiledOutputFile&&)"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "initialize(const Header& header)"
  },
  {
    "label": "isValidTile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isValidTile(int dx, int dy, int lx, int ly)"
  },
  {
    "label": "bytesPerLineForTile()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "bytesPerLineForTile(int dx, int dy, int lx, int ly)"
  }
]