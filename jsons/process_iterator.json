[
  {
    "label": "ProcessEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ProcessEntry"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "ProcessFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ProcessFilter"
  },
  {
    "label": "DIRClose",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DIRClose"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_PROCESS_ITERATOR_H_ # define BASE_PROCESS_PROCESS_ITERATOR_H_ # include<stddef . h> # include<list> # include<string> # include<vector> # include \" base / base_export . h \" # include \" base / files / file_path . h \" # include \" base / memory / raw_ptr . h \" # include \" base / process / process . h \" # include \" base / strings / string_util . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include <windows.h> #include <tlhelp32.h> #elif BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_OPENBSD) #include <sys/sysctl.h> #elif BUILDFLAG(IS_FREEBSD) #include <sys/user.h> #elif BUILDFLAG(IS_POSIX) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "pid()",
    "kind": "Method",
    "detail": "Function (ProcessId)",
    "insertText": "pid()"
  },
  {
    "label": "ProcessEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEntry()"
  },
  {
    "label": "ProcessEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessEntry(const ProcessEntry& other)"
  },
  {
    "label": "cmd_line_args()",
    "kind": "Method",
    "detail": "Function (} const std::vector<std::string>&)",
    "insertText": "cmd_line_args()"
  },
  {
    "label": "ProcessFilter()",
    "kind": "Method",
    "detail": "Function (protected : ~)",
    "insertText": "ProcessFilter()"
  },
  {
    "label": "ProcessIterator()",
    "kind": "Method",
    "detail": "Function (} ; class BASE_EXPORT ProcessIterator { public : typedef std::list<ProcessEntry> ProcessEntries ;)",
    "insertText": "ProcessIterator(const ProcessFilter* filter)"
  },
  {
    "label": "ProcessIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessIterator(const ProcessIterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ProcessIterator&)",
    "insertText": "operator(const ProcessIterator&)"
  },
  {
    "label": "ProcessIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ProcessIterator()"
  },
  {
    "label": "NextProcessEntry()",
    "kind": "Method",
    "detail": "Function (const ProcessEntry*)",
    "insertText": "NextProcessEntry()"
  },
  {
    "label": "Snapshot()",
    "kind": "Method",
    "detail": "Function (ProcessEntries)",
    "insertText": "Snapshot()"
  },
  {
    "label": "IncludeEntry()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "IncludeEntry()"
  },
  {
    "label": "entry()",
    "kind": "Method",
    "detail": "Function (const ProcessEntry&)",
    "insertText": "entry()"
  },
  {
    "label": "InitProcessEntry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitProcessEntry(ProcessEntry* entry)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (bool started_iteration_ ; # elif)",
    "insertText": "BUILDFLAG(IS_APPLE) || BUILDFLAG(IS_BSD)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (size_t index_of_kinfo_proc_ ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()(DIR* x)"
  },
  {
    "label": "NamedProcessIterator()",
    "kind": "Method",
    "detail": "Function (} } ; std::unique_ptr<DIR,DIRClose> procfs_dir_ ; # endif ProcessEntry entry_ ; raw_ptr<const ProcessFilter> filter_ ; } ; class BASE_EXPORT NamedProcessIterator : public ProcessIterator { public :)",
    "insertText": "NamedProcessIterator(const FilePath::StringType& executable_name, const ProcessFilter* filter, bool use_prefix_match = false)"
  },
  {
    "label": "NamedProcessIterator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NamedProcessIterator(const NamedProcessIterator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (NamedProcessIterator&)",
    "insertText": "operator(const NamedProcessIterator&)"
  },
  {
    "label": "NamedProcessIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "NamedProcessIterator()"
  },
  {
    "label": "GetProcessCount()",
    "kind": "Method",
    "detail": "Function (private : FilePath::StringType executable_name_ ; const bool use_prefix_match_ ; } ; BASE_EXPORT int)",
    "insertText": "GetProcessCount(const FilePath::StringType& executable_name, const ProcessFilter* filter)"
  }
]