[
  {
    "label": "TArrayBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TArrayBuilder"
  },
  {
    "label": "TArrayBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / Array . h \" template<ElementType,Allocator = FDefaultAllocator> class TArrayBuilder { public :)",
    "insertText": "TArrayBuilder()"
  },
  {
    "label": "TArrayBuilder()",
    "kind": "Method",
    "detail": "Function (} template<OtherAllocator>)",
    "insertText": "TArrayBuilder(const TArray<ElementType, OtherAllocator>& InArray ) : Array(InArray)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} public : TArrayBuilder&)",
    "insertText": "Add(const ElementType& Item)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Add(Item)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "AddUnique(Item)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Array .)",
    "insertText": "Append(OtherArray)"
  }
]