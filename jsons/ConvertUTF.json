[
  {
    "label": "UNI_REPLACEMENT_CHAR()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_CONVERTUTF_H # define LLVM_SUPPORT_CONVERTUTF_H typedef unsigned int UTF32 ; typedef unsigned short UTF16 ; typedef unsigned char UTF8 ; typedef unsigned char Boolean ; # define)",
    "insertText": "UNI_REPLACEMENT_CHAR(UTF32)0x0000FFFD #define UNI_MAX_BMP (UTF32)0x0000FFFF #define UNI_MAX_UTF16 (UTF32)0x0010FFFF #define UNI_MAX_UTF32 (UTF32)0x7FFFFFFF #define UNI_MAX_LEGAL_UTF32 (UTF32)"
  },
  {
    "label": "ConvertUTF8toUTF16()",
    "kind": "Method",
    "detail": "Function (conversionOK,sourceExhausted,targetExhausted,sourceIllegal } ConversionResult ; typedef enum { strictConversion = 0,lenientConversion } ConversionFlags ; # ifdef __cplusplus \" C \" { # endif ConversionResult)",
    "insertText": "ConvertUTF8toUTF16(const UTF8** sourceStart, const UTF8* sourceEnd, UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF8toUTF32Partial()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF8toUTF32Partial(const UTF8** sourceStart, const UTF8* sourceEnd, UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF8toUTF32()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF8toUTF32(const UTF8** sourceStart, const UTF8* sourceEnd, UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF16toUTF8()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF16toUTF8(const UTF16** sourceStart, const UTF16* sourceEnd, UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF32toUTF8()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF32toUTF8(const UTF32** sourceStart, const UTF32* sourceEnd, UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF16toUTF32()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF16toUTF32(const UTF16** sourceStart, const UTF16* sourceEnd, UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF32toUTF16()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF32toUTF16(const UTF32** sourceStart, const UTF32* sourceEnd, UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "isLegalUTF8Sequence()",
    "kind": "Method",
    "detail": "Function (Boolean)",
    "insertText": "isLegalUTF8Sequence(const UTF8 *source, const UTF8 *sourceEnd)"
  },
  {
    "label": "isLegalUTF8String()",
    "kind": "Method",
    "detail": "Function (Boolean)",
    "insertText": "isLegalUTF8String(const UTF8 **source, const UTF8 *sourceEnd)"
  },
  {
    "label": "getNumBytesForUTF8()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumBytesForUTF8(UTF8 firstByte)"
  },
  {
    "label": "ConvertUTF8toWide()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } # include \" dxc / WinAdapter . h \" # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / StringRef . h \" namespace llvm { bool)",
    "insertText": "ConvertUTF8toWide(unsigned WideCharWidth, llvm::StringRef Source, char *&ResultPtr, const UTF8 *&ErrorPtr)"
  },
  {
    "label": "ConvertCodePointToUTF8()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertCodePointToUTF8(unsigned Source, char *&ResultPtr)"
  },
  {
    "label": "convertUTF8Sequence()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "convertUTF8Sequence(const UTF8 **source, const UTF8 *sourceEnd, UTF32 *target, ConversionFlags flags)"
  },
  {
    "label": "getNumBytesForUTF8()",
    "kind": "Method",
    "detail": "Function (unsigned size =)",
    "insertText": "getNumBytesForUTF8(**source)"
  },
  {
    "label": "hasUTF16ByteOrderMark()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "hasUTF16ByteOrderMark(ArrayRef<char> SrcBytes)"
  },
  {
    "label": "convertUTF16ToUTF8String()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "convertUTF16ToUTF8String(ArrayRef<char> SrcBytes, std::string &Out)"
  },
  {
    "label": "convertUTF8ToUTF16String()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "convertUTF8ToUTF16String(StringRef SrcUTF8, SmallVectorImpl<UTF16> &DstUTF16)"
  }
]