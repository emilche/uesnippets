[
  {
    "label": "ConvertUTF8toUTF16()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF8toUTF16(\n  const UTF8** sourceStart, const UTF8* sourceEnd,\n  UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF8toUTF32Partial()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF8toUTF32Partial(\n  const UTF8** sourceStart, const UTF8* sourceEnd,\n  UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF8toUTF32()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF8toUTF32(\n  const UTF8** sourceStart, const UTF8* sourceEnd,\n  UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF16toUTF8()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF16toUTF8(\n  const UTF16** sourceStart, const UTF16* sourceEnd,\n  UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF32toUTF8()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF32toUTF8(\n  const UTF32** sourceStart, const UTF32* sourceEnd,\n  UTF8** targetStart, UTF8* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF16toUTF32()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF16toUTF32(\n  const UTF16** sourceStart, const UTF16* sourceEnd,\n  UTF32** targetStart, UTF32* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "ConvertUTF32toUTF16()",
    "kind": "Method",
    "detail": "Function (ConversionResult)",
    "insertText": "ConvertUTF32toUTF16(\n  const UTF32** sourceStart, const UTF32* sourceEnd,\n  UTF16** targetStart, UTF16* targetEnd, ConversionFlags flags)"
  },
  {
    "label": "isLegalUTF8Sequence()",
    "kind": "Method",
    "detail": "Function (Boolean)",
    "insertText": "isLegalUTF8Sequence(const UTF8 *source, const UTF8 *sourceEnd)"
  },
  {
    "label": "isLegalUTF8String()",
    "kind": "Method",
    "detail": "Function (Boolean)",
    "insertText": "isLegalUTF8String(const UTF8 **source, const UTF8 *sourceEnd)"
  },
  {
    "label": "getNumBytesForUTF8()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getNumBytesForUTF8(UTF8 firstByte)"
  },
  {
    "label": "ConvertUTF8toWide()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertUTF8toWide(unsigned WideCharWidth, llvm::StringRef Source,\n                       char *&ResultPtr, const UTF8 *&ErrorPtr)"
  },
  {
    "label": "ConvertCodePointToUTF8()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertCodePointToUTF8(unsigned Source, char *&ResultPtr)"
  },
  {
    "label": "ConvertUTF8toUTF32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ConvertUTF8toUTF32(source, *source + size, &target, target + 1, flags)"
  },
  {
    "label": "hasUTF16ByteOrderMark()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasUTF16ByteOrderMark(ArrayRef<char> SrcBytes)"
  },
  {
    "label": "convertUTF16ToUTF8String()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "convertUTF16ToUTF8String(ArrayRef<char> SrcBytes, std::string &Out)"
  },
  {
    "label": "convertUTF8ToUTF16String()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "convertUTF8ToUTF16String(StringRef SrcUTF8,\n                              SmallVectorImpl<UTF16> &DstUTF16)"
  }
]