[
  {
    "label": "GetCacheLineIndexBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetCacheLineIndexBits"
  },
  {
    "label": "GetIndexShuffleBits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GetIndexShuffleBits"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "Derived",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Derived"
  },
  {
    "label": "AtomicQueueCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicQueueCommon"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "U",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U"
  },
  {
    "label": "AtomicQueue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicQueue"
  },
  {
    "label": "AtomicQueue2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicQueue2"
  },
  {
    "label": "A",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "A"
  },
  {
    "label": "AtomicQueueB",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicQueueB"
  },
  {
    "label": "AtomicQueueB2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AtomicQueueB2"
  },
  {
    "label": "Queue",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Queue"
  },
  {
    "label": "RetryDecorator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RetryDecorator"
  },
  {
    "label": "spin_loop_pause()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<algorithm> # include<cassert> # include<cstddef> # include<cstdint> # include<memory> # include<type_traits> # include<utility> # include<atomic> # if PLATFORM_USE_SSE2_FOR_THREAD_YIELD # include<emmintrin . h> # endif namespace atomic_queue { using std::uint32_t ; using std::uint64_t ; using std::uint8_t ; void)",
    "insertText": "spin_loop_pause()"
  },
  {
    "label": "_mm_pause()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_USE_SSE2_FOR_THREAD_YIELD)",
    "insertText": "_mm_pause()"
  },
  {
    "label": "__yield()",
    "kind": "Method",
    "detail": "Function (# elif PLATFORM_CPU_ARM_FAMILY # if _MSC_VER)",
    "insertText": "__yield()"
  },
  {
    "label": "__volatile__()",
    "kind": "Method",
    "detail": "Function (# else __asm__)",
    "insertText": "__volatile__(\"yield\")"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (# endif # else # error Implement this for your platform / architecture # endif } namespace details { template<size_t elements_per_cache_line> struct GetCacheLineIndexBits { int value = 0 ; } ; template<> struct GetCacheLineIndexBits<6 4> { int value = 6 ; } ; template<> struct GetCacheLineIndexBits<3 2> { int value = 5 ; } ; template<> struct GetCacheLineIndexBits<1 6> { int value = 4 ; } ; template<> struct GetCacheLineIndexBits<8> { int value = 3 ; } ; template<> struct GetCacheLineIndexBits<4> { int value = 2 ; } ; template<> struct GetCacheLineIndexBits<2> { int value = 1 ; } ; template<bool minimize_contention,unsigned array_size,size_t elements_per_cache_line> struct GetIndexShuffleBits { int bits = GetCacheLineIndexBits<elements_per_cache_line>::value ; unsigned min_size = 1)",
    "insertText": "u(bits * 2)"
  },
  {
    "label": "remap_index()",
    "kind": "Method",
    "detail": "Function (int value = array_size<min_size ? 0 : bits ; } ; template<unsigned array_size,size_t elements_per_cache_line> struct GetIndexShuffleBits<false,array_size,elements_per_cache_line> { int value = 0 ; } ; template<int BITS> unsigned)",
    "insertText": "remap_index(unsigned index)"
  },
  {
    "label": "MASK()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "MASK(1u << BITS)"
  },
  {
    "label": "mix()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "mix(index ^ (index >> BITS))"
  },
  {
    "label": "BITS()",
    "kind": "Method",
    "detail": "Function (index = remap_index<)",
    "insertText": "BITS(index)"
  },
  {
    "label": "round_up_to_power_of_2()",
    "kind": "Method",
    "detail": "Function (- - a ; a | = a>> 1 ; a | = a>> 2 ; a | = a>> 4 ; a | = a>> 8 ; a | = a>> 1 6 ; + + a ; return a ; } uint64_t)",
    "insertText": "round_up_to_power_of_2(uint64_t a)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (- - a ; a | = a>> 1 ; a | = a>> 2 ; a | = a>> 4 ; a | = a>> 8 ; a | = a>> 1 6 ; a | = a>> 3 2 ; + + a ; return a ; } } template<class Derived> class AtomicQueueCommon { protected :)",
    "insertText": "alignas(PLATFORM_CACHE_LINE_SIZE)"
  },
  {
    "label": "AtomicQueueCommon()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "AtomicQueueCommon()"
  },
  {
    "label": "AtomicQueueCommon()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicQueueCommon(AtomicQueueCommon const& b) noexcept : head_(b.head_.load(std::memory_order_relaxed)) , tail_(b.tail_.load(std::memory_order_relaxed))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} AtomicQueueCommon&)",
    "insertText": "operator(AtomicQueueCommon const& b)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (head_ .)",
    "insertText": "store(b.head_.load(std::memory_order_relaxed), std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (tail_ .)",
    "insertText": "store(b.tail_.load(std::memory_order_relaxed), std::memory_order_relaxed)"
  },
  {
    "label": "load()",
    "kind": "Method",
    "detail": "Function (unsigned h = head_ .)",
    "insertText": "load(std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (b . head_ .)",
    "insertText": "store(h, std::memory_order_relaxed)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (b . tail_ .)",
    "insertText": "store(t, std::memory_order_relaxed)"
  },
  {
    "label": "do_pop_atomic()",
    "kind": "Method",
    "detail": "Function (} template<class T,T NIL> T)",
    "insertText": "do_pop_atomic(std::atomic<T>& q_element)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (q_element .)",
    "insertText": "store(NIL, std::memory_order_release)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} } else {)",
    "insertText": "for(;;)"
  },
  {
    "label": "exchange()",
    "kind": "Method",
    "detail": "Function (T element = q_element .)",
    "insertText": "exchange(NIL, std::memory_order_release)"
  },
  {
    "label": "do_push_atomic()",
    "kind": "Method",
    "detail": "Function (} } } template<class T,T NIL> void)",
    "insertText": "do_push_atomic(T element, std::atomic<T>& q_element)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(element != NIL)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (q_element .)",
    "insertText": "store(element, std::memory_order_release)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "for(T expected = NIL; UNLIKELY(!q_element.compare_exchange_strong(expected, element, std::memory_order_release, std::memory_order_relaxed)); expected = NIL)"
  },
  {
    "label": "do_pop_any()",
    "kind": "Method",
    "detail": "Function (} } } enum State : unsigned char { EMPTY,STORING,STORED,LOADING } ; template<class T> T)",
    "insertText": "do_pop_any(std::atomic<unsigned char>& state, T& q_element)"
  },
  {
    "label": "move()",
    "kind": "Method",
    "detail": "Function (T element {)",
    "insertText": "move(q_element)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (state .)",
    "insertText": "store(EMPTY, std::memory_order_release)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned char expected = STORED ;)",
    "insertText": "if(LIKELY(state.compare_exchange_strong(expected, LOADING, std::memory_order_relaxed, std::memory_order_relaxed)))"
  },
  {
    "label": "do_push_any()",
    "kind": "Method",
    "detail": "Function (} } } template<class U,class T> void)",
    "insertText": "do_push_any(U&& element, std::atomic<unsigned char>& state, T& q_element)"
  },
  {
    "label": "U()",
    "kind": "Method",
    "detail": "Function (q_element = std::forward<)",
    "insertText": "U(element)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (state .)",
    "insertText": "store(STORED, std::memory_order_release)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned char expected = EMPTY ;)",
    "insertText": "if(LIKELY(state.compare_exchange_strong(expected, STORING, std::memory_order_relaxed, std::memory_order_relaxed)))"
  },
  {
    "label": "try_push()",
    "kind": "Method",
    "detail": "Function (} } } public : template<class T> bool)",
    "insertText": "try_push(T&& element)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (head_ .)",
    "insertText": "store(head + 1, std::memory_order_relaxed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { do {)",
    "insertText": "if(static_cast<int>(head - tail_.load(std::memory_order_relaxed)) >= static_cast<int>(static_cast<Derived&>(*this).size_))"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(UNLIKELY(!head_.compare_exchange_strong(head, head + 1, std::memory_order_acquire, std::memory_order_relaxed)))"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (} static_cast<)",
    "insertText": "Derived(*this).do_push(std::forward<T>(element), head)"
  },
  {
    "label": "store()",
    "kind": "Method",
    "detail": "Function (tail_ .)",
    "insertText": "store(tail + 1, std::memory_order_relaxed)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else { do {)",
    "insertText": "if(static_cast<int>(head_.load(std::memory_order_relaxed) - tail) <= 0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(UNLIKELY(!tail_.compare_exchange_strong(tail, tail + 1, std::memory_order_acquire, std::memory_order_relaxed)))"
  },
  {
    "label": "Derived()",
    "kind": "Method",
    "detail": "Function (} element = static_cast<)",
    "insertText": "Derived(*this).do_pop(tail)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (unsigned head ;)",
    "insertText": "if(Derived::spsc_)"
  },
  {
    "label": "fetch_add()",
    "kind": "Method",
    "detail": "Function (} else { auto memory_order = Derived::total_order_ ? std::memory_order_seq_cst : std::memory_order_acquire ; head = head_ .)",
    "insertText": "fetch_add(1, memory_order)"
  },
  {
    "label": "pop()",
    "kind": "Method",
    "detail": "Function (} auto)",
    "insertText": "pop()"
  },
  {
    "label": "was_empty()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "was_empty()"
  },
  {
    "label": "was_full()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "was_full()"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (} unsigned)",
    "insertText": "capacity()"
  },
  {
    "label": "round_up_to_power_of_2()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,unsigned SIZE,T NIL = T { },bool MINIMIZE_CONTENTION = true,bool MAXIMIZE_THROUGHPUT = true,bool TOTAL_ORDER = false,bool SPSC = false> class AtomicQueue : public AtomicQueueCommon<AtomicQueue<T,SIZE,NIL,MINIMIZE_CONTENTION,MAXIMIZE_THROUGHPUT,TOTAL_ORDER,SPSC>> { using Base = AtomicQueueCommon<AtomicQueue<T,SIZE,NIL,MINIMIZE_CONTENTION,MAXIMIZE_THROUGHPUT,TOTAL_ORDER,SPSC>> ; Base ; unsigned size_ = MINIMIZE_CONTENTION ?)",
    "insertText": "round_up_to_power_of_2(SIZE)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int SHUFFLE_BITS = details::GetIndexShuffleBits<MINIMIZE_CONTENTION,size_,PLATFORM_CACHE_LINE_SIZE /)",
    "insertText": "sizeof(std::atomic<T>)"
  },
  {
    "label": "do_pop()",
    "kind": "Method",
    "detail": "Function (} ; T)",
    "insertText": "do_pop(unsigned tail)"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (std::atomic<T>& q_element = details::map<)",
    "insertText": "SHUFFLE_BITS(elements_, tail % size_)"
  },
  {
    "label": "do_push()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "do_push(T element, unsigned head)"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (std::atomic<T>& q_element = details::map<)",
    "insertText": "SHUFFLE_BITS(elements_, head % size_)"
  },
  {
    "label": "NIL()",
    "kind": "Method",
    "detail": "Function (Base::template do_push_atomic<T,)",
    "insertText": "NIL(element, q_element)"
  },
  {
    "label": "AtomicQueue()",
    "kind": "Method",
    "detail": "Function (} public : using value_type = T ;)",
    "insertText": "AtomicQueue()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(std::atomic<T>{NIL}.is_lock_free())"
  },
  {
    "label": "AtomicQueue()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AtomicQueue(AtomicQueue const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AtomicQueue&)",
    "insertText": "operator(AtomicQueue const&)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (int SHUFFLE_BITS = details::GetIndexShuffleBits<MINIMIZE_CONTENTION,size_,PLATFORM_CACHE_LINE_SIZE /)",
    "insertText": "sizeof(State)"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (unsigned index = details::remap_index<)",
    "insertText": "SHUFFLE_BITS(tail % size_)"
  },
  {
    "label": "do_push()",
    "kind": "Method",
    "detail": "Function (} template<class U> void)",
    "insertText": "do_push(U&& element, unsigned head)"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (unsigned index = details::remap_index<)",
    "insertText": "SHUFFLE_BITS(head % size_)"
  },
  {
    "label": "do_push_any()",
    "kind": "Method",
    "detail": "Function (Base::template)",
    "insertText": "do_push_any(std::forward<U>(element), states_[index], elements_[index])"
  },
  {
    "label": "AtomicQueue2()",
    "kind": "Method",
    "detail": "Function (} public : using value_type = T ;)",
    "insertText": "AtomicQueue2()"
  },
  {
    "label": "AtomicQueue2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AtomicQueue2(AtomicQueue2 const&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AtomicQueue2&)",
    "insertText": "operator(AtomicQueue2 const&)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (auto SHUFFLE_BITS = details::GetCacheLineIndexBits<ELEMENTS_PER_CACHE_LINE>::value ;)",
    "insertText": "static_assert(SHUFFLE_BITS, \"Unexpected SHUFFLE_BITS.\")"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (std::atomic<T>& q_element = details::map<)",
    "insertText": "SHUFFLE_BITS(elements_, tail & (size_ - 1))"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (std::atomic<T>& q_element = details::map<)",
    "insertText": "SHUFFLE_BITS(elements_, head & (size_ - 1))"
  },
  {
    "label": "AtomicQueueB()",
    "kind": "Method",
    "detail": "Function (} public : using value_type = T ;)",
    "insertText": "AtomicQueueB(unsigned size) : size_(std::max(details::round_up_to_power_of_2(size), 1u << (SHUFFLE_BITS * 2))) , elements_(AllocatorElements::allocate(size_))"
  },
  {
    "label": "AtomicQueueB()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AtomicQueueB(AtomicQueueB&& b) noexcept : Base(static_cast<Base&&>(b)) , AllocatorElements(static_cast<AllocatorElements&&>(b)) , size_(b.size_) , elements_(b.elements_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (b . size_ = 0 ; b . elements_ = 0 ; } AtomicQueueB&)",
    "insertText": "operator(AtomicQueueB&& b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (b .)",
    "insertText": "swap(*this)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(AtomicQueueB& b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (using std::swap ; this ->)",
    "insertText": "swap(b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(static_cast<AllocatorElements&>(*this), static_cast<AllocatorElements&>(b))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(size_, b.size_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(elements_, b.elements_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(AtomicQueueB& a, AtomicQueueB& b)"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (unsigned index = details::remap_index<)",
    "insertText": "SHUFFLE_BITS(tail & (size_ - 1))"
  },
  {
    "label": "SHUFFLE_BITS()",
    "kind": "Method",
    "detail": "Function (unsigned index = details::remap_index<)",
    "insertText": "SHUFFLE_BITS(head & (size_ - 1))"
  },
  {
    "label": "AtomicQueueB2()",
    "kind": "Method",
    "detail": "Function (} public : using value_type = T ;)",
    "insertText": "AtomicQueueB2(unsigned size) : size_(std::max(details::round_up_to_power_of_2(size), 1u << (SHUFFLE_BITS * 2))) , states_(AllocatorStates::allocate(size_)) , elements_(AllocatorElements::allocate(size_))"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (AllocatorElements& ae =* this ;)",
    "insertText": "for(auto p = elements_, q = elements_ + size_; p < q; ++p) std::allocator_traits<AllocatorElements>::construct(ae, p)"
  },
  {
    "label": "AtomicQueueB2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AtomicQueueB2(AtomicQueueB2&& b) noexcept : Base(static_cast<Base&&>(b)) , AllocatorElements(static_cast<AllocatorElements&&>(b)) , AllocatorStates(static_cast<AllocatorStates&&>(b)) , size_(b.size_) , states_(b.states_) , elements_(b.elements_)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (b . size_ = 0 ; b . states_ = 0 ; b . elements_ = 0 ; } AtomicQueueB2&)",
    "insertText": "operator(AtomicQueueB2&& b)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (AllocatorElements& ae =* this ;)",
    "insertText": "for(auto p = elements_, q = elements_ + size_; p < q; ++p) std::allocator_traits<AllocatorElements>::destroy(ae, p)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(elements_, size_)"
  },
  {
    "label": "deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deallocate(states_, size_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "swap(AtomicQueueB2& b)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(static_cast<AllocatorStates&>(*this), static_cast<AllocatorStates&>(b))"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "swap(states_, b.states_)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "swap(AtomicQueueB2& a, AtomicQueueB2& b)"
  },
  {
    "label": "push()",
    "kind": "Method",
    "detail": "Function (} } ; template<class Queue> struct RetryDecorator : Queue { using T = Queue::value_type ; using Queue::Queue ; void)",
    "insertText": "push(T element)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (T element ;)",
    "insertText": "while(!this->try_pop(element)) spin_loop_pause()"
  }
]