[
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "emitFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_BLURNODE_H # define MATERIALX_BLURNODE_H # include<MaterialXGenShader / Nodes / ConvolutionNode . h> MATERIALX_NAMESPACE_BEGIN class BlurNode : public ConvolutionNode { public : void)",
    "insertText": "emitFunctionDefinition(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "emitFunctionCall()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitFunctionCall(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "BlurNode()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "BlurNode()"
  },
  {
    "label": "emitSamplingFunctionDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "emitSamplingFunctionDefinition(const ShaderNode& node, GenContext& context, ShaderStage& stage)"
  },
  {
    "label": "acceptsInputType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "acceptsInputType(const TypeDesc* type)"
  },
  {
    "label": "computeSampleOffsetStrings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeSampleOffsetStrings(const string& sampleSizeName, const string& offsetTypeString, unsigned int filterWidth, StringVec& offsetStrings)"
  },
  {
    "label": "outputSampleArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "outputSampleArray(const ShaderGenerator& shadergen, ShaderStage& stage, const TypeDesc* inputType, const string& sampleName, const StringVec& sampleStrings)"
  }
]