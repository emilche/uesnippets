[
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UMovieScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieScene"
  },
  {
    "label": "UBlueprintGeneratedClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintGeneratedClass"
  },
  {
    "label": "UAssetUserData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAssetUserData"
  },
  {
    "label": "ULevelSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelSequence"
  },
  {
    "label": "UMovieSceneTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTrack"
  },
  {
    "label": "LocateBoundObjects",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LocateBoundObjects"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" MovieSceneSequence . h \" # include \" LevelSequenceObject . h \" # include \" LevelSequenceBindingReference . h \" # include \" LevelSequenceLegacyObjectReference . h \" # include \" Templates / SubclassOf . h \" # include \" Interfaces / Interface_AssetUserData . h \" # include \" LevelSequence . generated . h \" class UBlueprint ; class UMovieScene ; class UBlueprintGeneratedClass ; class UAssetUserData ;)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() public: UPROPERTY()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize()"
  },
  {
    "label": "BindPossessableObject()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "BindPossessableObject(const FGuid& ObjectId, UObject& PossessedObject, UObject* Context)"
  },
  {
    "label": "CanPossessObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPossessObject(UObject& Object, UObject* InPlaybackContext)"
  },
  {
    "label": "FindBindingFromObject()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindBindingFromObject(UObject* InObject, TSharedRef<const FSharedPlaybackState> SharedPlaybackState)"
  },
  {
    "label": "GatherExpiredObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GatherExpiredObjects(const FMovieSceneObjectCache& InObjectCache, TArray<FGuid>& OutInvalidIDs)"
  },
  {
    "label": "GetMovieScene()",
    "kind": "Method",
    "detail": "Function (UMovieScene*)",
    "insertText": "GetMovieScene()"
  },
  {
    "label": "GetParentObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetParentObject(UObject* Object)"
  },
  {
    "label": "UnbindPossessableObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindPossessableObjects(const FGuid& ObjectId)"
  },
  {
    "label": "UnbindObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindObjects(const FGuid& ObjectId, const TArray<UObject*>& InObjects, UObject* InContext)"
  },
  {
    "label": "UnbindInvalidObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnbindInvalidObjects(const FGuid& ObjectId, UObject* InContext)"
  },
  {
    "label": "AllowsSpawnableObjects()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsSpawnableObjects()"
  },
  {
    "label": "AllowsCustomBindings()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowsCustomBindings()"
  },
  {
    "label": "CanRebindPossessable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRebindPossessable(const FMovieScenePossessable& InPossessable)"
  },
  {
    "label": "MakeSpawnableTemplateFromInstance()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "MakeSpawnableTemplateFromInstance(UObject& InSourceObject, FName ObjectName)"
  },
  {
    "label": "CanAnimateObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAnimateObject(UObject& InObject)"
  },
  {
    "label": "CreateDirectorInstance()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "CreateDirectorInstance(TSharedRef<const FSharedPlaybackState> SharedPlaybackState, FMovieSceneSequenceID SequenceID)"
  },
  {
    "label": "GetBindingReferences()",
    "kind": "Method",
    "detail": "Function (const FMovieSceneBindingReferences*)",
    "insertText": "GetBindingReferences()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "DeclareConstructClasses()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "DeclareConstructClasses(TArray<FTopLevelAssetPath>& OutConstructClasses, const UClass* SpecificSubclass)"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "Rename()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Rename(const TCHAR* NewName = nullptr, UObject* NewOuter = nullptr, ERenameFlags Flags = REN_None)"
  },
  {
    "label": "AddAssetUserData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetUserData(UAssetUserData* InUserData)"
  },
  {
    "label": "RemoveUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataOfClass()",
    "kind": "Method",
    "detail": "Function (UAssetUserData*)",
    "insertText": "GetAssetUserDataOfClass(TSubclassOf<UAssetUserData> InUserDataClass)"
  },
  {
    "label": "GetAssetUserDataArray()",
    "kind": "Method",
    "detail": "Function (const TArray<UAssetUserData*>*)",
    "insertText": "GetAssetUserDataArray()"
  },
  {
    "label": "IsTrackSupportedImpl()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR ETrackSupport)",
    "insertText": "IsTrackSupportedImpl(TSubclassOf<class UMovieSceneTrack> InTrackClass)"
  },
  {
    "label": "GetAssetRegistryTagMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTagMetadata(TMap<FName, FAssetRegistryTagMetadata>& OutMetadata)"
  },
  {
    "label": "GetAssetRegistryTags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAssetRegistryTags(FAssetRegistryTagsContext Context)"
  },
  {
    "label": "ThreadedPostLoadAssetRegistryTagsOverride()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "ThreadedPostLoadAssetRegistryTagsOverride(FPostLoadAssetRegistryTagsContext& Context)"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(void, FPostDuplicateEvent, ULevelSequence*)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (FPostDuplicateEvent PostDuplicateEvent ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FFixupDynamicBindingsEvent, ULevelSequence*)"
  },
  {
    "label": "PostDuplicate()",
    "kind": "Method",
    "detail": "Function (FFixupDynamicBindingsEvent FixupDynamicBindingsEvent ; # endif void)",
    "insertText": "PostDuplicate(bool bDuplicateForPIE)"
  },
  {
    "label": "IterateDynamicBindings()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "IterateDynamicBindings(TFunction<void(const FGuid&, FMovieSceneDynamicBinding&)> InCallback)"
  },
  {
    "label": "SetDirectorBlueprint()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetDirectorBlueprint(UBlueprint* NewDirectorBlueprint)"
  },
  {
    "label": "GetDirectorBlueprint()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetDirectorBlueprint()"
  },
  {
    "label": "GetDirectorBlueprintName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDirectorBlueprintName()"
  },
  {
    "label": "CreatePossessable()",
    "kind": "Method",
    "detail": "Function (protected : FGuid)",
    "insertText": "CreatePossessable(UObject* ObjectToPossess)"
  },
  {
    "label": "CreateSpawnable()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "CreateSpawnable(UObject* ObjectToSpawn)"
  },
  {
    "label": "FindOrAddBinding()",
    "kind": "Method",
    "detail": "Function (FGuid)",
    "insertText": "FindOrAddBinding(UObject* ObjectToPossess)"
  },
  {
    "label": "OnDirectorRecompiled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDirectorRecompiled(UBlueprint*)"
  },
  {
    "label": "ConvertOldSpawnables()",
    "kind": "Method",
    "detail": "Function (private : # if WITH_EDITOR bool)",
    "insertText": "ConvertOldSpawnables()"
  },
  {
    "label": "ConvertDynamicBindingPossessable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertDynamicBindingPossessable(FMovieScenePossessable& Possessable)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA auto const* Found = MetaDataObjects .)",
    "insertText": "FindByPredicate([InClass](UObject* In) { return In && In->GetClass() == InClass; })"
  },
  {
    "label": "FindMetaDataByClass()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA UObject* Found =)",
    "insertText": "FindMetaDataByClass(InClass)"
  },
  {
    "label": "UObject()",
    "kind": "Method",
    "detail": "Function (Found = NewObject<)",
    "insertText": "UObject(this, InClass)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaDataObjects .)",
    "insertText": "Add(Found)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA)",
    "insertText": "if(!InMetaData)"
  },
  {
    "label": "DuplicateObject()",
    "kind": "Method",
    "detail": "Function (UObject* NewMetaData =)",
    "insertText": "DuplicateObject(InMetaData, this)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (MetaDataObjects .)",
    "insertText": "Add(NewMetaData)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA MetaDataObjects .)",
    "insertText": "RemoveAll([InClass](UObject* In) { return In && In->GetClass() == InClass; })"
  },
  {
    "label": "FindMetaData()",
    "kind": "Method",
    "detail": "Function (# endif } # if WITH_EDITORONLY_DATA public : template<MetaDataType> MetaDataType*)",
    "insertText": "FindMetaData()"
  },
  {
    "label": "StaticClass()",
    "kind": "Method",
    "detail": "Function (UClass* PredicateClass =)",
    "insertText": "StaticClass()"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (auto const* Found = MetaDataObjects .)",
    "insertText": "FindByPredicate([PredicateClass](UObject* In){ return In && In->GetClass() == PredicateClass; })"
  },
  {
    "label": "FindOrAddMetaData()",
    "kind": "Method",
    "detail": "Function (} template<MetaDataType> MetaDataType*)",
    "insertText": "FindOrAddMetaData()"
  },
  {
    "label": "MetaDataType()",
    "kind": "Method",
    "detail": "Function (MetaDataType* Found = FindMetaData<)",
    "insertText": "MetaDataType()"
  },
  {
    "label": "MetaDataType()",
    "kind": "Method",
    "detail": "Function (Found = NewObject<)",
    "insertText": "MetaDataType(this)"
  },
  {
    "label": "CopyMetaData()",
    "kind": "Method",
    "detail": "Function (} return Found ; } template<MetaDataType> MetaDataType*)",
    "insertText": "CopyMetaData(MetaDataType* InMetaData)"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (MetaDataObjects .)",
    "insertText": "RemoveAll([PredicateClass](UObject* In){ return In && In->GetClass() == PredicateClass; })"
  }
]