[
  {
    "label": "FBlendStateInitializerRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlendStateInitializerRHI"
  },
  {
    "label": "FGraphicsPipelineStateInitializer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGraphicsPipelineStateInitializer"
  },
  {
    "label": "FLastRenderTimeContainer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLastRenderTimeContainer"
  },
  {
    "label": "FReadSurfaceDataFlags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReadSurfaceDataFlags"
  },
  {
    "label": "FRHICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandList"
  },
  {
    "label": "FRHICommandListBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListBase"
  },
  {
    "label": "FRHIComputeFence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHIComputeFence"
  },
  {
    "label": "FRayTracingPipelineState",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRayTracingPipelineState"
  },
  {
    "label": "IRHITransientResourceAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHITransientResourceAllocator"
  },
  {
    "label": "FDepthStencilStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDepthStencilStateInitializerRHI"
  },
  {
    "label": "FDisplayInformation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisplayInformation"
  },
  {
    "label": "FRasterizerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRasterizerStateInitializerRHI"
  },
  {
    "label": "FRHIResourceCollectionMember",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceCollectionMember"
  },
  {
    "label": "FRHIResourceCreateInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceCreateInfo"
  },
  {
    "label": "FRHIResourceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIResourceInfo"
  },
  {
    "label": "FRHIUniformBufferLayout",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIUniformBufferLayout"
  },
  {
    "label": "FSamplerStateInitializerRHI",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSamplerStateInitializerRHI"
  },
  {
    "label": "FTextureMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTextureMemoryStats"
  },
  {
    "label": "FRHIGPUMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIGPUMask"
  },
  {
    "label": "FUpdateTexture3DData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTexture3DData"
  },
  {
    "label": "FRHIFlipDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIFlipDetails"
  },
  {
    "label": "FShaderResourceViewInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderResourceViewInitializer"
  },
  {
    "label": "FRawBufferShaderResourceViewInitializer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRawBufferShaderResourceViewInitializer"
  },
  {
    "label": "FDynamicRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicRHI"
  },
  {
    "label": "FDefaultRHIRenderQueryPool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultRHIRenderQueryPool"
  },
  {
    "label": "FRHICalcTextureSizeResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHICalcTextureSizeResult"
  },
  {
    "label": "FRHIEndFrameArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIEndFrameArgs"
  },
  {
    "label": "FRHICommandListImmediate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FRHICommandListImmediate"
  },
  {
    "label": "FUpdateTextureRegion2D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion2D"
  },
  {
    "label": "FUpdateTextureRegion3D",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUpdateTextureRegion3D"
  },
  {
    "label": "FRHIFinalizeContextArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIFinalizeContextArgs"
  },
  {
    "label": "FRHISubmitCommandListsArgs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHISubmitCommandListsArgs"
  },
  {
    "label": "FValidationRHI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValidationRHI"
  },
  {
    "label": "FDynamicRHIPSOFallback",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicRHIPSOFallback"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "from"
  },
  {
    "label": "IRHICommandContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IRHICommandContext"
  },
  {
    "label": "FRHIGPUUsageFractions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRHIGPUUsageFractions"
  },
  {
    "label": "IDynamicRHIModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDynamicRHIModule"
  },
  {
    "label": "FScopedRHIThreadOwnership",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedRHIThreadOwnership"
  },
  {
    "label": "FRHIFlipDetails()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" RHIContext . h \" # include \" RHIFeatureLevel . h \" # include \" RHIShaderLibrary . h \" # include \" MultiGPU . h \" # include \" Serialization / MemoryLayout . h \" # include \" Containers / ArrayView . h \" # include \" Misc / EnumClassFlags . h \" # include \" Async / TaskGraphInterfaces . h \" class FBlendStateInitializerRHI ; class FGraphicsPipelineStateInitializer ; class FLastRenderTimeContainer ; class FReadSurfaceDataFlags ; class FRHICommandList ; class FRHICommandListBase ; class FRHIComputeFence ; class FRayTracingPipelineState ; class IRHITransientResourceAllocator ; struct FDepthStencilStateInitializerRHI ; struct FDisplayInformation ; struct FRasterizerStateInitializerRHI ; struct FRHIResourceCollectionMember ; struct FRHIResourceCreateInfo ; struct FRHIResourceInfo ; struct FRHIUniformBufferLayout ; struct FSamplerStateInitializerRHI ; struct FTextureMemoryStats ; struct FRHIGPUMask ; struct FUpdateTexture3DData ; typedef TArray<FScreenResolutionRHI> FScreenResolutionArray ; using FDisplayInformationArray = TArray<FDisplayInformation> ; struct FRHIFlipDetails { uint64 PresentIndex ; double FlipTimeInSeconds ; double VBlankTimeInSeconds ; uint64 VBlankTimeInCycles ;)",
    "insertText": "FRHIFlipDetails() : PresentIndex(0) , FlipTimeInSeconds(0) , VBlankTimeInSeconds(0) , VBlankTimeInCycles(0)"
  },
  {
    "label": "FRHIFlipDetails()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FRHIFlipDetails(uint64 InPresentIndex, double InFlipTimeInSeconds, double InVBlankTimeInSeconds, uint64 InVBlankTimeInCycles) : PresentIndex(InPresentIndex) , FlipTimeInSeconds(InFlipTimeInSeconds) , VBlankTimeInSeconds(InVBlankTimeInSeconds) , VBlankTimeInCycles(InVBlankTimeInCycles)"
  },
  {
    "label": "FShaderResourceViewInitializer()",
    "kind": "Method",
    "detail": "Function (} } ; struct FShaderResourceViewInitializer : public FRHIViewDesc::FBufferSRV::FInitializer { FRHIBuffer* Buffer ;)",
    "insertText": "FShaderResourceViewInitializer(FRHIBuffer* InBuffer, EPixelFormat InFormat, uint32 InStartOffsetBytes, uint32 InNumElements)"
  },
  {
    "label": "FShaderResourceViewInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderResourceViewInitializer(FRHIBuffer* InBuffer, EPixelFormat InFormat)"
  },
  {
    "label": "FShaderResourceViewInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderResourceViewInitializer(FRHIBuffer* InBuffer, uint32 InStartOffsetBytes, uint32 InNumElements)"
  },
  {
    "label": "FShaderResourceViewInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderResourceViewInitializer(FRHIBuffer* InBuffer, FRHIRayTracingScene* InRayTracingScene, uint32 InStartOffsetBytes)"
  },
  {
    "label": "FShaderResourceViewInitializer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderResourceViewInitializer(FRHIBuffer* InBuffer)"
  },
  {
    "label": "FRawBufferShaderResourceViewInitializer()",
    "kind": "Method",
    "detail": "Function (} ; struct FRawBufferShaderResourceViewInitializer : public FShaderResourceViewInitializer {)",
    "insertText": "FRawBufferShaderResourceViewInitializer(FRHIBuffer* InBuffer) : FShaderResourceViewInitializer(InBuffer)"
  },
  {
    "label": "SetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetType(FRHIViewDesc::EBufferType::Raw)"
  },
  {
    "label": "FDefaultRHIRenderQueryPool()",
    "kind": "Method",
    "detail": "Function (} } ; class FDynamicRHI ; class FDefaultRHIRenderQueryPool final : public FRHIRenderQueryPool { public :)",
    "insertText": "FDefaultRHIRenderQueryPool(ERenderQueryType InQueryType) : QueryType(InQueryType)"
  },
  {
    "label": "FDefaultRHIRenderQueryPool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FDefaultRHIRenderQueryPool()"
  },
  {
    "label": "AllocateQuery()",
    "kind": "Method",
    "detail": "Function (private : FRHIPooledRenderQuery)",
    "insertText": "AllocateQuery()"
  },
  {
    "label": "ReleaseQuery()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseQuery(TRefCountPtr<FRHIRenderQuery>&& Query)"
  },
  {
    "label": "FDynamicRHI()",
    "kind": "Method",
    "detail": "Function (const ERenderQueryType QueryType ; uint32 AllocatedQueries = 0 ; TArray<TRefCountPtr<FRHIRenderQuery>> Queries ; } ; struct FRHICalcTextureSizeResult { uint64 Size ; uint32 Align ; } ; class FDynamicRHI { public : using FRHICalcTextureSizeResult =::FRHICalcTextureSizeResult ; ~)",
    "insertText": "FDynamicRHI()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "PostInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInit()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetName()"
  },
  {
    "label": "GetInterfaceType()",
    "kind": "Method",
    "detail": "Function (ERHIInterfaceType)",
    "insertText": "GetInterfaceType()"
  },
  {
    "label": "RHIEndFrame_RenderThread()",
    "kind": "Method",
    "detail": "Function (PixelFormatBlockBytes = PixelFormatBlockBytesIn ; } void)",
    "insertText": "RHIEndFrame_RenderThread(FRHICommandListImmediate& RHICmdList)"
  },
  {
    "label": "RHIEndFrame()",
    "kind": "Method",
    "detail": "Function (struct FRHIEndFrameArgs { uint32 FrameNumber ; # if WITH_RHI_BREADCRUMBS const TRHIPipelineArray<FRHIBreadcrumbNode*>& GPUBreadcrumbs ; # endif } ; void)",
    "insertText": "RHIEndFrame(const FRHIEndFrameArgs& Args)"
  },
  {
    "label": "RHICreateSamplerState()",
    "kind": "Method",
    "detail": "Function (FSamplerStateRHIRef)",
    "insertText": "RHICreateSamplerState(const FSamplerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateRasterizerState()",
    "kind": "Method",
    "detail": "Function (FRasterizerStateRHIRef)",
    "insertText": "RHICreateRasterizerState(const FRasterizerStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateDepthStencilState()",
    "kind": "Method",
    "detail": "Function (FDepthStencilStateRHIRef)",
    "insertText": "RHICreateDepthStencilState(const FDepthStencilStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateBlendState()",
    "kind": "Method",
    "detail": "Function (FBlendStateRHIRef)",
    "insertText": "RHICreateBlendState(const FBlendStateInitializerRHI& Initializer)"
  },
  {
    "label": "RHICreateVertexDeclaration()",
    "kind": "Method",
    "detail": "Function (FVertexDeclarationRHIRef)",
    "insertText": "RHICreateVertexDeclaration(const FVertexDeclarationElementList& Elements)"
  },
  {
    "label": "RHICreatePixelShader()",
    "kind": "Method",
    "detail": "Function (FPixelShaderRHIRef)",
    "insertText": "RHICreatePixelShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateVertexShader()",
    "kind": "Method",
    "detail": "Function (FVertexShaderRHIRef)",
    "insertText": "RHICreateVertexShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateGeometryShader()",
    "kind": "Method",
    "detail": "Function (FGeometryShaderRHIRef)",
    "insertText": "RHICreateGeometryShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateMeshShader()",
    "kind": "Method",
    "detail": "Function (FMeshShaderRHIRef)",
    "insertText": "RHICreateMeshShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateAmplificationShader()",
    "kind": "Method",
    "detail": "Function (} FAmplificationShaderRHIRef)",
    "insertText": "RHICreateAmplificationShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "FlushPendingLogs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FlushPendingLogs()"
  },
  {
    "label": "RHICreateComputeShader()",
    "kind": "Method",
    "detail": "Function (} FComputeShaderRHIRef)",
    "insertText": "RHICreateComputeShader(TArrayView<const uint8> Code, const FSHAHash& Hash)"
  },
  {
    "label": "RHICreateWorkGraphShader()",
    "kind": "Method",
    "detail": "Function (FWorkGraphShaderRHIRef)",
    "insertText": "RHICreateWorkGraphShader(TArrayView<const uint8> Code, const FSHAHash& Hash, EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "RHICreateShaderLibrary()",
    "kind": "Method",
    "detail": "Function (} FRHIShaderLibraryRef)",
    "insertText": "RHICreateShaderLibrary(EShaderPlatform Platform, FString const& FilePath, FString const& Name)"
  },
  {
    "label": "RHIWriteGPUFence_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIWriteGPUFence_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIGPUFence* FenceRHI)"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHICreateTransition(FRHITransition* Transition, const FRHITransitionCreateInfo& CreateInfo)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReleaseTransition(FRHITransition* Transition)"
  },
  {
    "label": "RHICreateTransientResourceAllocator()",
    "kind": "Method",
    "detail": "Function (} IRHITransientResourceAllocator*)",
    "insertText": "RHICreateTransientResourceAllocator()"
  },
  {
    "label": "RHILockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} void*)",
    "insertText": "RHILockStagingBuffer(FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "RHIUnlockStagingBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockStagingBuffer(FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "LockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockStagingBuffer_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHIStagingBuffer* StagingBuffer, FRHIGPUFence* Fence, uint32 Offset, uint32 SizeRHI)"
  },
  {
    "label": "UnlockStagingBuffer_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockStagingBuffer_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHIStagingBuffer* StagingBuffer)"
  },
  {
    "label": "RHICreateBoundShaderState()",
    "kind": "Method",
    "detail": "Function (FBoundShaderStateRHIRef)",
    "insertText": "RHICreateBoundShaderState(FRHIVertexDeclaration* VertexDeclaration, FRHIVertexShader* VertexShader, FRHIPixelShader* PixelShader, FRHIGeometryShader* GeometryShader)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (FComputePipelineStateRHIRef)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader * ComputeShader)"
  },
  {
    "label": "RHICreateGraphicsPipelineState()",
    "kind": "Method",
    "detail": "Function (FGraphicsPipelineStateRHIRef)",
    "insertText": "RHICreateGraphicsPipelineState(const FGraphicsPipelineStateInitializer& Initializer, FRHIPipelineBinaryLibrary* PipelineBinary)"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (} FComputePipelineStateRHIRef)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader* ComputeShader, FRHIPipelineBinaryLibrary* PipelineBinary)"
  },
  {
    "label": "RHICreateWorkGraphPipelineState()",
    "kind": "Method",
    "detail": "Function (} FWorkGraphPipelineStateRHIRef)",
    "insertText": "RHICreateWorkGraphPipelineState(const FWorkGraphPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIUpdateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateUniformBuffer(FRHICommandListBase& RHICmdList, FRHIUniformBuffer* UniformBufferRHI, const void* Contents)"
  },
  {
    "label": "RHIReplaceResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReplaceResources(FRHICommandListBase& RHICmdList, TArray<FRHIResourceReplaceInfo>&& ReplaceInfos)"
  },
  {
    "label": "RHICreateBuffer()",
    "kind": "Method",
    "detail": "Function (FBufferRHIRef)",
    "insertText": "RHICreateBuffer(FRHICommandListBase& RHICmdList, FRHIBufferDesc const& Desc, ERHIAccess ResourceState, FRHIResourceCreateInfo& CreateInfo)"
  },
  {
    "label": "RHILockBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockBuffer(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 Size, EResourceLockMode LockMode)"
  },
  {
    "label": "RHILockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockBufferMGPU(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 GPUIndex, uint32 Offset, uint32 Size, EResourceLockMode LockMode)"
  },
  {
    "label": "RHIUnlockBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockBuffer(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer)"
  },
  {
    "label": "RHIUnlockBufferMGPU()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockBufferMGPU(FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 GPUIndex)"
  },
  {
    "label": "RHIUpdateTextureReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTextureReference(FRHICommandListBase& RHICmdList, FRHITextureReference* TextureRef, FRHITexture* NewTexture)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(FRHITextureDesc const& Desc, uint32 FirstMipIndex)"
  },
  {
    "label": "RHIGetMinimumAlignmentForBufferBackedSRV()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIGetMinimumAlignmentForBufferBackedSRV(EPixelFormat Format)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetTextureMemoryStats(FTextureMemoryStats& OutStats)"
  },
  {
    "label": "RHIGetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetTextureMemoryVisualizeData(FColor* TextureData, int32 SizeX, int32 SizeY, int32 Pitch, int32 PixelSize)"
  },
  {
    "label": "RHICreateTexture()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHICreateTexture(FRHICommandListBase& RHICmdList, const FRHITextureCreateDesc& CreateDesc)"
  },
  {
    "label": "RHIAsyncCreateTexture2D()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHIAsyncCreateTexture2D(uint32 SizeX, uint32 SizeY, uint8 Format, uint32 NumMips, ETextureCreateFlags Flags, ERHIAccess InResourceState, void** InitialMipData, uint32 NumInitialMips, const TCHAR* DebugName, FGraphEventRef& OutCompletionEvent)"
  },
  {
    "label": "RHICreateTextureReference()",
    "kind": "Method",
    "detail": "Function (FTextureReferenceRHIRef)",
    "insertText": "RHICreateTextureReference(FRHICommandListBase& RHICmdList, FRHITexture* InReferencedTexture)"
  },
  {
    "label": "RHICreateShaderResourceView()",
    "kind": "Method",
    "detail": "Function (FShaderResourceViewRHIRef)",
    "insertText": "RHICreateShaderResourceView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateUnorderedAccessView()",
    "kind": "Method",
    "detail": "Function (FUnorderedAccessViewRHIRef)",
    "insertText": "RHICreateUnorderedAccessView(class FRHICommandListBase& RHICmdList, FRHIViewableResource* Resource, FRHIViewDesc const& ViewDesc)"
  },
  {
    "label": "RHICreateResourceCollection()",
    "kind": "Method",
    "detail": "Function (FRHIResourceCollectionRef)",
    "insertText": "RHICreateResourceCollection(FRHICommandListBase& RHICmdList, TConstArrayView<FRHIResourceCollectionMember> InMembers)"
  },
  {
    "label": "RHIAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (FTextureRHIRef)",
    "insertText": "RHIAsyncReallocateTexture2D(FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "RHIFinalizeAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHIFinalizeAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHICancelAsyncReallocateTexture2D()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "RHICancelAsyncReallocateTexture2D(FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "RHILockTexture2D()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2D(FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "RHIUnlockTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2D(FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHILockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTexture2DArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTexture2DArray(FRHITexture* Texture, uint32 TextureIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUpdateTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, const uint8* SourceData)"
  },
  {
    "label": "RHIUpdateFromBufferTexture2D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUpdateFromBufferTexture2D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion2D& UpdateRegion, uint32 SourcePitch, FRHIBuffer* Buffer, uint32 BufferOffset)"
  },
  {
    "label": "RHIUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion, uint32 SourceRowPitch, uint32 SourceDepthPitch, const uint8* SourceData)"
  },
  {
    "label": "RHILockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace(FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList,FRHITexture* Texture, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList,FRHIBuffer* Buffer, const TCHAR* Name)"
  },
  {
    "label": "RHIBindDebugLabelName()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBindDebugLabelName(FRHICommandListBase& RHICmdList,FRHIUnorderedAccessView* UnorderedAccessViewRHI, const TCHAR* Name)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture, FIntRect Rect, TArray<FColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIReadSurfaceData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceData(FRHITexture* Texture, FIntRect Rect, TArray<FLinearColor>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIMapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMapStagingSurface(FRHITexture* Texture, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIUnmapStagingSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnmapStagingSurface(FRHITexture* Texture, uint32 GPUIndex = 0)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, ECubeFace CubeFace, int32 ArrayIndex, int32 MipIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, FIntPoint ZMinMax, TArray<FFloat16Color>& OutData)"
  },
  {
    "label": "RHIRead3DSurfaceFloatData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIRead3DSurfaceFloatData(FRHITexture* Texture, FIntRect Rect, FIntPoint ZMinMax, TArray<FFloat16Color>& OutData, FReadSurfaceDataFlags InFlags)"
  },
  {
    "label": "RHICreateRenderQuery()",
    "kind": "Method",
    "detail": "Function (FRenderQueryRHIRef)",
    "insertText": "RHICreateRenderQuery(ERenderQueryType QueryType)"
  },
  {
    "label": "RHIBeginRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginRenderQueryBatch_TopOfPipe(FRHICommandListBase& RHICmdList, ERenderQueryType QueryType)"
  },
  {
    "label": "RHIEndRenderQueryBatch_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIEndRenderQueryBatch_TopOfPipe(FRHICommandListBase& RHICmdList, ERenderQueryType QueryType)"
  },
  {
    "label": "RHIBeginRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIBeginRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIEndRenderQuery_TopOfPipe()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndRenderQuery_TopOfPipe(FRHICommandListBase& RHICmdList, FRHIRenderQuery* RenderQuery)"
  },
  {
    "label": "RHIGetRenderQueryResult()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIGetRenderQueryResult(FRHIRenderQuery* RenderQuery, uint64& OutResult, bool bWait, uint32 GPUIndex = INDEX_NONE)"
  },
  {
    "label": "RHIGetViewportNextPresentGPUIndex()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetViewportNextPresentGPUIndex(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIGetViewportBackBufferUAV()",
    "kind": "Method",
    "detail": "Function (FUnorderedAccessViewRHIRef)",
    "insertText": "RHIGetViewportBackBufferUAV(FRHIViewport* ViewportRHI)"
  },
  {
    "label": "RHIGetHTilePlatformConfig()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIGetHTilePlatformConfig(uint32 DepthWidth, uint32 DepthHeight)"
  },
  {
    "label": "RHICreateAliasedTexture()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHICreateAliasedTexture(FTextureRHIRef& SourceTexture)"
  },
  {
    "label": "RHIComputeStatePrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "RHIComputeStatePrecachePSOHash(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIComputePrecachePSOHash()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "RHIComputePrecachePSOHash(const FGraphicsPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHIMatchPrecachePSOInitializers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RHIMatchPrecachePSOInitializers(const FGraphicsPipelineStateInitializer& LHS, const FGraphicsPipelineStateInitializer& RHS)"
  },
  {
    "label": "RHIAdvanceFrameForGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAdvanceFrameForGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIAcquireThreadOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIAcquireThreadOwnership()"
  },
  {
    "label": "RHIReleaseThreadOwnership()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIReleaseThreadOwnership()"
  },
  {
    "label": "RHIFlushResources()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIFlushResources()"
  },
  {
    "label": "RHIGetGPUFrameCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "RHIGetGPUFrameCycles(uint32 GPUIndex = 0)"
  },
  {
    "label": "RHICreateViewport()",
    "kind": "Method",
    "detail": "Function (FViewportRHIRef)",
    "insertText": "RHICreateViewport(void* WindowHandle, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(FRHIViewport* Viewport, uint32 SizeX, uint32 SizeY, bool bIsFullscreen, EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIResizeViewport(Viewport, SizeX, SizeY, bIsFullscreen)"
  },
  {
    "label": "RHIPreferredPixelFormatHint()",
    "kind": "Method",
    "detail": "Function (} EPixelFormat)",
    "insertText": "RHIPreferredPixelFormatHint(EPixelFormat PreferredPixelFormat)"
  },
  {
    "label": "RHIHandleDisplayChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIHandleDisplayChange()"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHITick(float DeltaTime)"
  },
  {
    "label": "RHIBlockUntilGPUIdle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBlockUntilGPUIdle()"
  },
  {
    "label": "RHIBeginSuspendRendering()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIBeginSuspendRendering()"
  },
  {
    "label": "RHISuspendRendering()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RHISuspendRendering()"
  },
  {
    "label": "RHIResumeRendering()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "RHIResumeRendering()"
  },
  {
    "label": "RHIIsRenderingSuspended()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "RHIIsRenderingSuspended()"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIGetSupportedResolution(uint32& Width, uint32& Height)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipInMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIVirtualTextureSetFirstMipInMemory(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "RHIVirtualTextureSetFirstMipVisible()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIVirtualTextureSetFirstMipVisible(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FirstMip)"
  },
  {
    "label": "RHIGetNativeDevice()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeDevice()"
  },
  {
    "label": "RHIGetNativePhysicalDevice()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativePhysicalDevice()"
  },
  {
    "label": "RHIGetNativeCommandBuffer()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHIGetNativeCommandBuffer()"
  },
  {
    "label": "RHIGetCommandContext()",
    "kind": "Method",
    "detail": "Function (IRHIComputeContext*)",
    "insertText": "RHIGetCommandContext(ERHIPipeline Pipeline, FRHIGPUMask GPUMask)"
  },
  {
    "label": "RHIGetUploadContext()",
    "kind": "Method",
    "detail": "Function (IRHIUploadContext*)",
    "insertText": "RHIGetUploadContext()"
  },
  {
    "label": "RHISubmitCommandLists()",
    "kind": "Method",
    "detail": "Function (struct FRHISubmitCommandListsArgs { TArray<IRHIPlatformCommandList*> CommandLists ; IRHIUploadContext* UploadContext ; } ; void)",
    "insertText": "RHISubmitCommandLists(FRHISubmitCommandListsArgs&& Args)"
  },
  {
    "label": "RHIProcessDeleteQueue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIProcessDeleteQueue()"
  },
  {
    "label": "AsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "AsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, int32 NewMipCount, int32 NewSizeX, int32 NewSizeY, FThreadSafeCounter* RequestStatus)"
  },
  {
    "label": "FinalizeAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "FinalizeAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "CancelAsyncReallocateTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (ETextureReallocationStatus)",
    "insertText": "CancelAsyncReallocateTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture2D, bool bBlockUntilCompleted)"
  },
  {
    "label": "LockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true, uint64* OutLockedByteCount = nullptr)"
  },
  {
    "label": "UnlockTexture2D_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2D_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 MipIndex, bool bLockWithinMiptail, bool bNeedsDefaultRHIFlush = true)"
  },
  {
    "label": "LockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "UnlockTexture2DArray_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlockTexture2DArray_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIBeginUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (FUpdateTexture3DData)",
    "insertText": "RHIBeginUpdateTexture3D(FRHICommandListBase& RHICmdList, FRHITexture* Texture, uint32 MipIndex, const struct FUpdateTextureRegion3D& UpdateRegion)"
  },
  {
    "label": "RHIEndUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndUpdateTexture3D(FRHICommandListBase& RHICmdList, FUpdateTexture3DData& UpdateData)"
  },
  {
    "label": "RHIEndMultiUpdateTexture3D()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIEndMultiUpdateTexture3D(FRHICommandListBase& RHICmdList, TArray<FUpdateTexture3DData>& UpdateDataArray)"
  },
  {
    "label": "RHICreateShaderLibrary_RenderThread()",
    "kind": "Method",
    "detail": "Function (FRHIShaderLibraryRef)",
    "insertText": "RHICreateShaderLibrary_RenderThread(class FRHICommandListImmediate& RHICmdList, EShaderPlatform Platform, FString FilePath, FString Name)"
  },
  {
    "label": "RHILockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "RHILockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, EResourceLockMode LockMode, uint32& DestStride, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIUnlockTextureCubeFace_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnlockTextureCubeFace_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 FaceIndex, uint32 ArrayIndex, uint32 MipIndex, bool bLockWithinMiptail)"
  },
  {
    "label": "RHIMapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIMapStagingSurface_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 GPUIndex, FRHIGPUFence* Fence, void*& OutData, int32& OutWidth, int32& OutHeight)"
  },
  {
    "label": "RHIUnmapStagingSurface_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIUnmapStagingSurface_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, uint32 GPUIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, ECubeFace CubeFace, int32 ArrayIndex, int32 MipIndex)"
  },
  {
    "label": "RHIReadSurfaceFloatData_RenderThread()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RHIReadSurfaceFloatData_RenderThread(class FRHICommandListImmediate& RHICmdList, FRHITexture* Texture, FIntRect Rect, TArray<FFloat16Color>& OutData, FReadSurfaceDataFlags Flags)"
  },
  {
    "label": "LockBuffer_BottomOfPipe()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "LockBuffer_BottomOfPipe(class FRHICommandListBase& RHICmdList, FRHIBuffer* Buffer, uint32 Offset, uint32 SizeRHI, EResourceLockMode LockMode)"
  },
  {
    "label": "EnableIdealGPUCaptureOptions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EnableIdealGPUCaptureOptions(bool bEnable)"
  },
  {
    "label": "RHIWaitForFlip()",
    "kind": "Method",
    "detail": "Function (FRHIFlipDetails)",
    "insertText": "RHIWaitForFlip(double TimeoutInSeconds)"
  },
  {
    "label": "RHISignalFlipEvent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHISignalFlipEvent()"
  },
  {
    "label": "RHIGetPlatformTextureMaxSampleCount()",
    "kind": "Method",
    "detail": "Function (} uint16)",
    "insertText": "RHIGetPlatformTextureMaxSampleCount()"
  },
  {
    "label": "RHICreateComputePipelineState()",
    "kind": "Method",
    "detail": "Function (} FComputePipelineStateRHIRef)",
    "insertText": "RHICreateComputePipelineState(FRHIComputeShader* ComputeShader)"
  },
  {
    "label": "RHIGetInterfaceType()",
    "kind": "Method",
    "detail": "Function (} } ; ERHIInterfaceType)",
    "insertText": "RHIGetInterfaceType()"
  },
  {
    "label": "CastDynamicRHI()",
    "kind": "Method",
    "detail": "Function (} template<TRHI> TRHI*)",
    "insertText": "CastDynamicRHI(FDynamicRHI* InDynamicRHI)"
  },
  {
    "label": "GetDynamicRHI()",
    "kind": "Method",
    "detail": "Function (} template<TRHI> TRHI*)",
    "insertText": "GetDynamicRHI()"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::Shaders)"
  },
  {
    "label": "RHICreateGPUFence()",
    "kind": "Method",
    "detail": "Function (} FGPUFenceRHIRef)",
    "insertText": "RHICreateGPUFence(const FName& Name)"
  },
  {
    "label": "RHICreateStagingBuffer()",
    "kind": "Method",
    "detail": "Function (} FStagingBufferRHIRef)",
    "insertText": "RHICreateStagingBuffer()"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateSamplerState\"))"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateRasterizerState\"))"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateDepthStencilState\"))"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateBlendState\"))"
  },
  {
    "label": "RHICreateRayTracingPipelineState()",
    "kind": "Method",
    "detail": "Function (} TRefCountPtr<FRHIRayTracingPipelineState>)",
    "insertText": "RHICreateRayTracingPipelineState(const FRayTracingPipelineStateInitializer& Initializer)"
  },
  {
    "label": "RHICreateUniformBufferLayout()",
    "kind": "Method",
    "detail": "Function (} FUniformBufferLayoutRHIRef)",
    "insertText": "RHICreateUniformBufferLayout(const FRHIUniformBufferLayoutInitializer& Initializer)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateUniformBufferLayout\"))"
  },
  {
    "label": "RHICreateUniformBuffer()",
    "kind": "Method",
    "detail": "Function (} FUniformBufferRHIRef)",
    "insertText": "RHICreateUniformBuffer(const void* Contents, const FRHIUniformBufferLayout* Layout, EUniformBufferUsage Usage, EUniformBufferValidation Validation = EUniformBufferValidation::ValidateResources)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/CreateUniformBuffer\"))"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (} FRHICalcTextureSizeResult)",
    "insertText": "RHICalcTexturePlatformSize(FRHITextureDesc const& Desc, uint32 FirstMipIndex = 0)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (FRHICalcTextureSizeResult ZeroResult { } ; return ZeroResult ; } return GDynamicRHI ->)",
    "insertText": "RHICalcTexturePlatformSize(Desc, FirstMipIndex)"
  },
  {
    "label": "Desc()",
    "kind": "Method",
    "detail": "Function (const uint16 Depth = 1 ; const uint16 ArraySize = 1 ; PRAGMA_DISABLE_DEPRECATION_WARNINGS FRHITextureDesc)",
    "insertText": "Desc(ETextureDimension::Texture2D, Flags, (EPixelFormat)Format, CreateInfo.ClearValueBinding, { (int32)SizeX, (int32)SizeY }, Depth, ArraySize, (uint8)NumMips, (uint8)NumSamples, CreateInfo.ExtData)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FRHICalcTextureSizeResult Result =)",
    "insertText": "RHICalcTexturePlatformSize(Desc, 0)"
  },
  {
    "label": "Desc()",
    "kind": "Method",
    "detail": "Function (const uint16 Depth = 1 ; PRAGMA_DISABLE_DEPRECATION_WARNINGS FRHITextureDesc)",
    "insertText": "Desc(ETextureDimension::Texture2DArray, Flags, (EPixelFormat)Format, CreateInfo.ClearValueBinding, { (int32)SizeX, (int32)SizeY }, Depth, (uint16)ArraySize, (uint8)NumMips, (uint8)NumSamples, CreateInfo.ExtData)"
  },
  {
    "label": "Desc()",
    "kind": "Method",
    "detail": "Function (const uint16 Depth = 1 ; const uint16 ArraySize = 1 ; const uint32 ExtData = 0 ; FRHITextureDesc)",
    "insertText": "Desc(ETextureDimension::Texture2D, Flags, (EPixelFormat)Format, FClearValueBinding::None, { (int32)Mip0Width, (int32)Mip0Height }, Depth, ArraySize, (uint8)NumMips, (uint8)NumSamples, ExtData)"
  },
  {
    "label": "RHICalcTexturePlatformSize()",
    "kind": "Method",
    "detail": "Function (FRHICalcTextureSizeResult Result =)",
    "insertText": "RHICalcTexturePlatformSize(Desc, FirstMipIdx)"
  },
  {
    "label": "Desc()",
    "kind": "Method",
    "detail": "Function (const uint16 ArraySize = 1 ; const uint8 NumSamples = 1 ; PRAGMA_DISABLE_DEPRECATION_WARNINGS FRHITextureDesc)",
    "insertText": "Desc(ETextureDimension::Texture3D, Flags, (EPixelFormat)Format, CreateInfo.ClearValueBinding, { (int32)SizeX, (int32)SizeY }, (uint16)SizeZ, ArraySize, (uint8)NumMips, NumSamples, CreateInfo.ExtData)"
  },
  {
    "label": "Desc()",
    "kind": "Method",
    "detail": "Function (const uint16 Depth = 1 ; const uint16 ArraySize = 1 ; const uint8 NumSamples = 1 ; PRAGMA_DISABLE_DEPRECATION_WARNINGS FRHITextureDesc)",
    "insertText": "Desc(ETextureDimension::TextureCube, Flags, (EPixelFormat)Format, CreateInfo.ClearValueBinding, { (int32)Size, (int32)Size }, Depth, ArraySize, (uint8)NumMips, NumSamples, CreateInfo.ExtData)"
  },
  {
    "label": "RHIGetTextureMemoryStats()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIGetTextureMemoryStats(OutStats)"
  },
  {
    "label": "RHIComputeMemorySize()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RHIComputeMemorySize(FRHITexture* TextureRHI)"
  },
  {
    "label": "RHIGetViewportBackBuffer()",
    "kind": "Method",
    "detail": "Function (} FTextureRHIRef)",
    "insertText": "RHIGetViewportBackBuffer(FRHIViewport* Viewport)"
  },
  {
    "label": "RHIGetViewportBackBufferUAV()",
    "kind": "Method",
    "detail": "Function (} FUnorderedAccessViewRHIRef)",
    "insertText": "RHIGetViewportBackBufferUAV(FRHIViewport* Viewport)"
  },
  {
    "label": "LLM_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE(ELLMTag::RenderTargets)"
  },
  {
    "label": "RHIResizeViewport()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIResizeViewport(Viewport, SizeX, SizeY, bIsFullscreen, PreferredPixelFormat)"
  },
  {
    "label": "RHIGetColorSpace()",
    "kind": "Method",
    "detail": "Function (} EColorSpaceAndEOTF)",
    "insertText": "RHIGetColorSpace(FRHIViewport* Viewport)"
  },
  {
    "label": "RHICheckViewportHDRStatus()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHICheckViewportHDRStatus(Viewport)"
  },
  {
    "label": "LLM_SCOPE_BYNAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_SCOPE_BYNAME(TEXT(\"RHIMisc/RHITick\"))"
  },
  {
    "label": "RHITick()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHITick(DeltaTime)"
  },
  {
    "label": "RHIGetAvailableResolutions()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RHIGetAvailableResolutions(FScreenResolutionArray& Resolutions, bool bIgnoreRefreshRate)"
  },
  {
    "label": "RHIGetSupportedResolution()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIGetSupportedResolution(Width, Height)"
  },
  {
    "label": "RHICreateRenderQueryPool()",
    "kind": "Method",
    "detail": "Function (} FRenderQueryPoolRHIRef)",
    "insertText": "RHICreateRenderQueryPool(ERenderQueryType QueryType, uint32 NumQueries = UINT32_MAX)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (FRHITransition* Transition =)",
    "insertText": "new(FConcurrentLinearAllocator::Malloc(FRHITransition::GetTotalAllocationSize(), (uint32)FRHITransition::GetAlignment())) FRHITransition(CreateInfo.SrcPipelines, CreateInfo.DstPipelines)"
  },
  {
    "label": "RHICreateTransition()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHICreateTransition(Transition, CreateInfo)"
  },
  {
    "label": "RHIReleaseTransition()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIReleaseTransition(Transition)"
  },
  {
    "label": "RHIGetDisplaysInformation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RHIGetDisplaysInformation(FDisplayInformationArray& OutDisplayInformation)"
  },
  {
    "label": "RHIGetDisplaysInformation()",
    "kind": "Method",
    "detail": "Function (GDynamicRHI ->)",
    "insertText": "RHIGetDisplaysInformation(OutDisplayInformation)"
  },
  {
    "label": "RHICalcRayTracingSceneSize()",
    "kind": "Method",
    "detail": "Function (} FRayTracingAccelerationStructureSize)",
    "insertText": "RHICalcRayTracingSceneSize(const FRayTracingSceneInitializer& Initializer)"
  },
  {
    "label": "RHICalcRayTracingSceneSize()",
    "kind": "Method",
    "detail": "Function (FRayTracingSceneInitializer Initializer ; Initializer . MaxNumInstances = MaxInstances ; Initializer . BuildFlags = Flags ; return GDynamicRHI ->)",
    "insertText": "RHICalcRayTracingSceneSize(Initializer)"
  },
  {
    "label": "RHICreateRayTracingScene()",
    "kind": "Method",
    "detail": "Function (} FRayTracingSceneRHIRef)",
    "insertText": "RHICreateRayTracingScene(FRayTracingSceneInitializer Initializer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "if(Initializer.NumNativeInstancesPerLayer.Num() >= 1)"
  },
  {
    "label": "RHICreateRayTracingScene()",
    "kind": "Method",
    "detail": "Function (Initializer . MaxNumInstances = Initializer . NumNativeInstancesPerLayer [ 0 ] ; } PRAGMA_ENABLE_DEPRECATION_WARNINGS return GDynamicRHI ->)",
    "insertText": "RHICreateRayTracingScene(MoveTemp(Initializer))"
  },
  {
    "label": "RHICreateRayTracingShader()",
    "kind": "Method",
    "detail": "Function (} FRayTracingShaderRHIRef)",
    "insertText": "RHICreateRayTracingShader(TArrayView<const uint8> Code, const FSHAHash& Hash, EShaderFrequency ShaderFrequency)"
  },
  {
    "label": "RHICreateShaderBundle()",
    "kind": "Method",
    "detail": "Function (} FShaderBundleRHIRef)",
    "insertText": "RHICreateShaderBundle(const FShaderBundleCreateInfo& CreateInfo)"
  },
  {
    "label": "appDefragmentTexturePool()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "appDefragmentTexturePool()"
  },
  {
    "label": "appIsPoolTexture()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "appIsPoolTexture(FRHITexture* TextureRHI)"
  },
  {
    "label": "GetUnused()",
    "kind": "Method",
    "detail": "Function (} struct FRHIGPUUsageFractions { float ClockScaling = 1 . 0 f ; float CurrentProcess = 0 . 0 f ; float ExternalProcesses = 0 . 0 f ; float)",
    "insertText": "GetUnused()"
  },
  {
    "label": "FRHIGPUUsageFractions()",
    "kind": "Method",
    "detail": "Function (} } ; typedef)",
    "insertText": "FRHIGPUUsageFractions(*RHIGetGPUUsageType)(uint32)"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (RHIGetGPUUsageType RHIGetGPUUsage ; class IDynamicRHIModule : public IModuleInterface { public : bool)",
    "insertText": "IsSupported()"
  },
  {
    "label": "IsSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSupported(ERHIFeatureLevel::Type RequestedFeatureLevel)"
  },
  {
    "label": "CreateRHI()",
    "kind": "Method",
    "detail": "Function (} FDynamicRHI*)",
    "insertText": "CreateRHI(ERHIFeatureLevel::Type RequestedFeatureLevel = ERHIFeatureLevel::Num)"
  },
  {
    "label": "PlatformCreateDynamicRHI()",
    "kind": "Method",
    "detail": "Function (} ; FDynamicRHI*)",
    "insertText": "PlatformCreateDynamicRHI()"
  },
  {
    "label": "GetSelectedDynamicRHIModuleName()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "GetSelectedDynamicRHIModuleName(bool bCleanup = true)"
  },
  {
    "label": "FScopedRHIThreadOwnership()",
    "kind": "Method",
    "detail": "Function (bool GDynamicRHIFailedToInitializeAdvancedPlatform ; struct FScopedRHIThreadOwnership { bool const bCondition ;)",
    "insertText": "FScopedRHIThreadOwnership(bool bCondition) : bCondition(bCondition)"
  },
  {
    "label": "SCOPED_NAMED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_NAMED_EVENT(RHIAcquireThreadOwnership, FColor::Red)"
  },
  {
    "label": "FScopedRHIThreadOwnership()",
    "kind": "Method",
    "detail": "Function (} } ~)",
    "insertText": "FScopedRHIThreadOwnership()"
  },
  {
    "label": "SCOPED_NAMED_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_NAMED_EVENT(RHIReleaseThreadOwnership, FColor::Red)"
  }
]