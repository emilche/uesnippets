[
  {
    "label": "CreateSeedSeqFrom()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_RANDOM_SEED_SEQUENCES_H_ # define ABSL_RANDOM_SEED_SEQUENCES_H_ # include<iterator> # include<random> # include \" absl / base / config . h \" # include \" absl / random / internal / salted_seed_seq . h \" # include \" absl / random / internal / seed_material . h \" # include \" absl / random / seed_gen_exception . h \" # include \" absl / types / span . h \" namespace absl { ABSL_NAMESPACE_BEGIN using SeedSeq = random_internal::SaltedSeedSeq<std::seed_seq> ; template<URBG> SeedSeq)",
    "insertText": "CreateSeedSeqFrom(URBG* urbg)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SeedSeq::result_type seed_material [ random_internal::kEntropyBlocksNeeded ] ;)",
    "insertText": "if(!random_internal::ReadSeedMaterialFromURBG( urbg, absl::MakeSpan(seed_material)))"
  },
  {
    "label": "ThrowSeedGenException()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ThrowSeedGenException()"
  },
  {
    "label": "SeedSeq()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "SeedSeq(std::begin(seed_material), std::end(seed_material))"
  },
  {
    "label": "MakeSeedSeq()",
    "kind": "Method",
    "detail": "Function (} SeedSeq)",
    "insertText": "MakeSeedSeq()"
  }
]