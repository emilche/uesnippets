[
  {
    "label": "RuleBasedCollator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuleBasedCollator"
  },
  {
    "label": "CollationKeyByteSink",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CollationKeyByteSink"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "CollationKey()",
    "kind": "Method",
    "detail": "Function (# ifndef SORTKEY_H # define SORTKEY_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_COLLATION # include \" unicode / uobject . h \" # include \" unicode / unistr . h \" # include \" unicode / coll . h \" U_NAMESPACE_BEGIN class RuleBasedCollator ; class CollationKeyByteSink ; class U_I18N_API CollationKey : public UObject { public :)",
    "insertText": "CollationKey()"
  },
  {
    "label": "CollationKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollationKey(const uint8_t* values, int32_t count)"
  },
  {
    "label": "CollationKey()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollationKey(const CollationKey& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (const CollationKey&)",
    "insertText": "operator(const CollationKey& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "operator(const CollationKey& source)"
  },
  {
    "label": "isBogus()",
    "kind": "Method",
    "detail": "Function (UBool)",
    "insertText": "isBogus(void)"
  },
  {
    "label": "getByteArray()",
    "kind": "Method",
    "detail": "Function (const uint8_t*)",
    "insertText": "getByteArray(int32_t& count)"
  },
  {
    "label": "toByteArray()",
    "kind": "Method",
    "detail": "Function (# ifdef U_USE_COLLATION_KEY_DEPRECATES uint8_t*)",
    "insertText": "toByteArray(int32_t& count)"
  },
  {
    "label": "compareTo()",
    "kind": "Method",
    "detail": "Function (# endif # ifndef Collator::EComparisonResult)",
    "insertText": "compareTo(const CollationKey& target)"
  },
  {
    "label": "compareTo()",
    "kind": "Method",
    "detail": "Function (# endif UCollationResult)",
    "insertText": "compareTo(const CollationKey& target, UErrorCode &status)"
  },
  {
    "label": "hashCode()",
    "kind": "Method",
    "detail": "Function (int32_t)",
    "insertText": "hashCode(void)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "reallocate()",
    "kind": "Method",
    "detail": "Function (private : uint8_t*)",
    "insertText": "reallocate(int32_t newCapacity, int32_t length)"
  },
  {
    "label": "setLength()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLength(int32_t newLength)"
  },
  {
    "label": "getBytes()",
    "kind": "Method",
    "detail": "Function (uint8_t*)",
    "insertText": "getBytes()"
  },
  {
    "label": "getCapacity()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getCapacity()"
  },
  {
    "label": "getLength()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "getLength()"
  },
  {
    "label": "reset()",
    "kind": "Method",
    "detail": "Function (CollationKey&)",
    "insertText": "reset(void)"
  },
  {
    "label": "isBogus()",
    "kind": "Method",
    "detail": "Function (} UBool)",
    "insertText": "isBogus()"
  }
]