[
  {
    "label": "static_var",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "static_var"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_BASE_DYNAMIC_ANNOTATIONS_H_ # define ABSL_BASE_DYNAMIC_ANNOTATIONS_H_ # include<stddef . h> # include \" absl / base / attributes . h \" # include \" absl / base / config . h \" # ifdef __cplusplus # include \" absl / base / macros . h \" # endif # ifdef ABSL_HAVE_THREAD_SANITIZER # define ABSL_INTERNAL_RACE_ANNOTATIONS_ENABLED 1 # define ABSL_INTERNAL_READS_ANNOTATIONS_ENABLED 1 # define ABSL_INTERNAL_WRITES_ANNOTATIONS_ENABLED 1 # define ABSL_INTERNAL_ANNOTALYSIS_ENABLED 0 # define ABSL_INTERNAL_READS_WRITES_ANNOTATIONS_ENABLED 1 # else # define ABSL_INTERNAL_RACE_ANNOTATIONS_ENABLED 0 # define ABSL_INTERNAL_READS_ANNOTATIONS_ENABLED 0 # define ABSL_INTERNAL_WRITES_ANNOTATIONS_ENABLED 0 # if)",
    "insertText": "defined(__clang__) #define ABSL_INTERNAL_ANNOTALYSIS_ENABLED 1 #if !defined(SWIG)"
  },
  {
    "label": "ABSL_INTERNAL_GLOBAL_SCOPED()",
    "kind": "Method",
    "detail": "Function (# define ABSL_INTERNAL_END_EXTERN_C } # define)",
    "insertText": "ABSL_INTERNAL_GLOBAL_SCOPED(F) ::F #define ABSL_INTERNAL_STATIC_INLINE inline #else #define ABSL_INTERNAL_BEGIN_EXTERN_C #define ABSL_INTERNAL_END_EXTERN_C #define ABSL_INTERNAL_GLOBAL_SCOPED(F) F #define ABSL_INTERNAL_STATIC_INLINE static inline #endif #if ABSL_INTERNAL_RACE_ANNOTATIONS_ENABLED == 1 #define ABSL_ANNOTATE_BENIGN_RACE(pointer, description) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateBenignRaceSized) \\ (__FILE__, __LINE__, pointer, sizeof(*(pointer)), description) #define ABSL_ANNOTATE_BENIGN_RACE_SIZED(address, size, description) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateBenignRaceSized) \\ (__FILE__, __LINE__, address, size, description) #define ABSL_ANNOTATE_ENABLE_RACE_DETECTION(enable) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateEnableRaceDetection) \\ (__FILE__, __LINE__, enable) #define ABSL_ANNOTATE_THREAD_NAME(name) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateThreadName)(__FILE__, __LINE__, name) #define ABSL_ANNOTATE_RWLOCK_CREATE(lock) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateRWLockCreate)(__FILE__, __LINE__, lock) #ifdef ABSL_HAVE_THREAD_SANITIZER #define ABSL_ANNOTATE_RWLOCK_CREATE_STATIC(lock) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateRWLockCreateStatic) \\ (__FILE__, __LINE__, lock) #else #define ABSL_ANNOTATE_RWLOCK_CREATE_STATIC(lock) \\ ABSL_ANNOTATE_RWLOCK_CREATE(lock) #endif #define ABSL_ANNOTATE_RWLOCK_DESTROY(lock) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateRWLockDestroy)(__FILE__, __LINE__, lock) #define ABSL_ANNOTATE_RWLOCK_ACQUIRED(lock, is_w) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateRWLockAcquired) \\ (__FILE__, __LINE__, lock, is_w) #define ABSL_ANNOTATE_RWLOCK_RELEASED(lock, is_w) \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateRWLockReleased) \\ (__FILE__, __LINE__, lock, is_w) #define ABSL_ANNOTATE_BENIGN_RACE_STATIC(static_var, description)"
  },
  {
    "label": "_annotator()",
    "kind": "Method",
    "detail": "Function (\\ class static_var # # _annotator { \\ public : \\ static_var # #)",
    "insertText": "_annotator()"
  },
  {
    "label": "ABSL_ANNOTATE_BENIGN_RACE_SIZED()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_ANNOTATE_BENIGN_RACE_SIZED(&static_var, sizeof(static_var), \\ #static_var \": \" description)"
  },
  {
    "label": "AnnotateRWLockCreate()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } ; \\ static_var # # _annotator the # # static_var # # _annotator ; \\ } ABSL_INTERNAL_BEGIN_EXTERN_C void)",
    "insertText": "AnnotateRWLockCreate(const char* file, int line, const volatile void* lock)"
  },
  {
    "label": "AnnotateRWLockCreateStatic()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateRWLockCreateStatic(const char* file, int line, const volatile void* lock)"
  },
  {
    "label": "AnnotateRWLockDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateRWLockDestroy(const char* file, int line, const volatile void* lock)"
  },
  {
    "label": "AnnotateRWLockAcquired()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateRWLockAcquired(const char* file, int line, const volatile void* lock, long is_w)"
  },
  {
    "label": "AnnotateRWLockReleased()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateRWLockReleased(const char* file, int line, const volatile void* lock, long is_w)"
  },
  {
    "label": "AnnotateBenignRace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateBenignRace(const char* file, int line, const volatile void* address, const char* description)"
  },
  {
    "label": "AnnotateBenignRaceSized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateBenignRaceSized(const char* file, int line, const volatile void* address, size_t size, const char* description)"
  },
  {
    "label": "AnnotateThreadName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateThreadName(const char* file, int line, const char* name)"
  },
  {
    "label": "AnnotateEnableRaceDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateEnableRaceDetection(const char* file, int line, int enable)"
  },
  {
    "label": "ABSL_ANNOTATE_RWLOCK_CREATE()",
    "kind": "Method",
    "detail": "Function (ABSL_INTERNAL_END_EXTERN_C # else # define)",
    "insertText": "ABSL_ANNOTATE_RWLOCK_CREATE(lock) #define ABSL_ANNOTATE_RWLOCK_CREATE_STATIC(lock) #define ABSL_ANNOTATE_RWLOCK_DESTROY(lock) #define ABSL_ANNOTATE_RWLOCK_ACQUIRED(lock, is_w) #define ABSL_ANNOTATE_RWLOCK_RELEASED(lock, is_w) #define ABSL_ANNOTATE_BENIGN_RACE(address, description) #define ABSL_ANNOTATE_BENIGN_RACE_SIZED(address, size, description) #define ABSL_ANNOTATE_THREAD_NAME(name) #define ABSL_ANNOTATE_ENABLE_RACE_DETECTION(enable) #define ABSL_ANNOTATE_BENIGN_RACE_STATIC(static_var, description) #endif #ifdef ABSL_HAVE_MEMORY_SANITIZER #include <sanitizer/msan_interface.h> #define ABSL_ANNOTATE_MEMORY_IS_INITIALIZED(address, size) \\ __msan_unpoison(address, size) #define ABSL_ANNOTATE_MEMORY_IS_UNINITIALIZED(address, size) \\ __msan_allocated_memory(address, size) #else #ifdef ABSL_HAVE_THREAD_SANITIZER #define ABSL_ANNOTATE_MEMORY_IS_INITIALIZED(address, size)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define ABSL_ANNOTATE_MEMORY_IS_UNINITIALIZED(address, size)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #else #define ABSL_ANNOTATE_MEMORY_IS_INITIALIZED(address, size) #define ABSL_ANNOTATE_MEMORY_IS_UNINITIALIZED(address, size) #endif #endif #if defined(ABSL_INTERNAL_IGNORE_READS_ATTRIBUTE_ENABLED) #define ABSL_INTERNAL_IGNORE_READS_BEGIN_ATTRIBUTE \\ __attribute((exclusive_lock_function(\"*\"))) #define ABSL_INTERNAL_IGNORE_READS_END_ATTRIBUTE \\ __attribute((unlock_function(\"*\"))) #else #define ABSL_INTERNAL_IGNORE_READS_BEGIN_ATTRIBUTE #define ABSL_INTERNAL_IGNORE_READS_END_ATTRIBUTE #endif #if ABSL_INTERNAL_READS_ANNOTATIONS_ENABLED == 1 #define ABSL_ANNOTATE_IGNORE_READS_BEGIN() \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateIgnoreReadsBegin) \\ (__FILE__, __LINE__) #define ABSL_ANNOTATE_IGNORE_READS_END() \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateIgnoreReadsEnd) \\ (__FILE__, __LINE__) ABSL_INTERNAL_BEGIN_EXTERN_C void AnnotateIgnoreReadsBegin(const char* file, int line)"
  },
  {
    "label": "AnnotateIgnoreReadsEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateIgnoreReadsEnd(const char* file, int line)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (ABSL_INTERNAL_END_EXTERN_C # elif)",
    "insertText": "defined(ABSL_INTERNAL_ANNOTALYSIS_ENABLED) #define ABSL_ANNOTATE_IGNORE_READS_BEGIN() \\ ABSL_INTERNAL_GLOBAL_SCOPED( \\ ABSL_INTERNAL_C_SYMBOL(AbslInternalAnnotateIgnoreReadsBegin)) \\ () #define ABSL_ANNOTATE_IGNORE_READS_END() \\ ABSL_INTERNAL_GLOBAL_SCOPED( \\ ABSL_INTERNAL_C_SYMBOL(AbslInternalAnnotateIgnoreReadsEnd)) \\ () ABSL_INTERNAL_STATIC_INLINE void ABSL_INTERNAL_C_SYMBOL( AbslInternalAnnotateIgnoreReadsBegin)()"
  },
  {
    "label": "ABSL_INTERNAL_C_SYMBOL()",
    "kind": "Method",
    "detail": "Function (} ABSL_INTERNAL_STATIC_INLINE void)",
    "insertText": "ABSL_INTERNAL_C_SYMBOL(AbslInternalAnnotateIgnoreReadsEnd)()"
  },
  {
    "label": "ABSL_ANNOTATE_IGNORE_READS_BEGIN()",
    "kind": "Method",
    "detail": "Function (} # else # define)",
    "insertText": "ABSL_ANNOTATE_IGNORE_READS_BEGIN() #define ABSL_ANNOTATE_IGNORE_READS_END() #endif #if ABSL_INTERNAL_WRITES_ANNOTATIONS_ENABLED == 1 #define ABSL_ANNOTATE_IGNORE_WRITES_BEGIN() \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateIgnoreWritesBegin)(__FILE__, __LINE__) #define ABSL_ANNOTATE_IGNORE_WRITES_END() \\ ABSL_INTERNAL_GLOBAL_SCOPED(AnnotateIgnoreWritesEnd)(__FILE__, __LINE__) ABSL_INTERNAL_BEGIN_EXTERN_C void AnnotateIgnoreWritesBegin(const char* file, int line)"
  },
  {
    "label": "AnnotateIgnoreWritesEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnnotateIgnoreWritesEnd(const char* file, int line)"
  },
  {
    "label": "ABSL_ANNOTATE_IGNORE_WRITES_BEGIN()",
    "kind": "Method",
    "detail": "Function (ABSL_INTERNAL_END_EXTERN_C # else # define)",
    "insertText": "ABSL_ANNOTATE_IGNORE_WRITES_BEGIN() #define ABSL_ANNOTATE_IGNORE_WRITES_END() #endif #if defined(ABSL_INTERNAL_READS_WRITES_ANNOTATIONS_ENABLED) #define ABSL_ANNOTATE_IGNORE_READS_AND_WRITES_BEGIN()"
  },
  {
    "label": "ABSL_ANNOTATE_IGNORE_READS_BEGIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_ANNOTATE_IGNORE_READS_BEGIN()"
  },
  {
    "label": "ABSL_ANNOTATE_IGNORE_WRITES_BEGIN()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_ANNOTATE_IGNORE_WRITES_BEGIN()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #define ABSL_ANNOTATE_IGNORE_READS_AND_WRITES_END()"
  },
  {
    "label": "ABSL_ANNOTATE_IGNORE_WRITES_END()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_ANNOTATE_IGNORE_WRITES_END()"
  },
  {
    "label": "ABSL_ANNOTATE_IGNORE_READS_END()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "ABSL_ANNOTATE_IGNORE_READS_END()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\ })",
    "insertText": "while(0) #ifdef __cplusplus #define ABSL_ANNOTATE_UNPROTECTED_READ(x) \\ absl::base_internal::AnnotateUnprotectedRead(x)"
  },
  {
    "label": "AnnotateUnprotectedRead()",
    "kind": "Method",
    "detail": "Function (ABSL_NAMESPACE_BEGIN namespace base_internal { template<T> T)",
    "insertText": "AnnotateUnprotectedRead(const volatile T& x)"
  },
  {
    "label": "alignas()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "alignas(8)"
  }
]