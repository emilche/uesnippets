[
  {
    "label": "FBitManip",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBitManip"
  },
  {
    "label": "FRepMask",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRepMask"
  },
  {
    "label": "FIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIterator"
  },
  {
    "label": "FInstanceAttributeTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInstanceAttributeTracker"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FToBit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToBit"
  },
  {
    "label": "FAnyValidIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnyValidIterator"
  },
  {
    "label": "FDeltaRange",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDeltaRange"
  },
  {
    "label": "FConstIterator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FConstIterator"
  },
  {
    "label": "Result()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / UnrealMemory . h \" # include \" Math / UnrealMathUtility . h \" # include \" Containers / BitArray . h \" # include \" Containers / Array . h \" # include \" InstanceDataTypes . h \" namespace UE::InstanceAttributeTracker::Implementation { template<ElementType> struct FBitManip { template<ElementType Mask,uint32 MaskSize> struct FRepMask { template<uint32 Step> struct FIterator ; template<> struct FIterator<0 u> { ElementType Result = Mask ; } ; template<uint32 Step> struct FIterator { ElementType)",
    "insertText": "Result(Mask << (Step * MaskSize))"
  },
  {
    "label": "NumSteps()",
    "kind": "Method",
    "detail": "Function (} ; uint32)",
    "insertText": "NumSteps(sizeof(ElementType) * 8u / MaskSize)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (ElementType Result = FIterator<NumSteps>::Result ; } ; uint32)",
    "insertText": "CountTrailingZeros(ElementType Value)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} ; template<> uint32 FBitManip<uint32)",
    "insertText": "CountTrailingZeros(uint32 Value)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} template<> uint32 FBitManip<uint64)",
    "insertText": "CountTrailingZeros(uint64 Value)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (} } class FInstanceAttributeTracker { public : using ElementType = uint32 ; using FBitManip = UE::InstanceAttributeTracker::Implementation::FBitManip<ElementType> ; enum class EFlag : ElementType { Added,TransformChanged,CustomDataChanged,IndexChanged,Num,} ; uint32 BitsPerElement =)",
    "insertText": "sizeof(ElementType)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (int32 MasksPerElement = BitsPerElement /)",
    "insertText": "uint32(EFlag::Num)"
  },
  {
    "label": "AnyFlagMask()",
    "kind": "Method",
    "detail": "Function (ElementType)",
    "insertText": "AnyFlagMask(ElementType(1U) << uint32(EFlag::Num)) - ElementType(1U)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (template<EFlag Flag> struct FToBit { ElementType Bit =)",
    "insertText": "ElementType(1U) << uint32(Flag)"
  },
  {
    "label": "FInstanceAttributeTracker()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FInstanceAttributeTracker()"
  },
  {
    "label": "FInstanceAttributeTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FInstanceAttributeTracker(FInstanceAttributeTracker &&Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FInstanceAttributeTracker &&Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Move(FInstanceAttributeTracker &Dest, FInstanceAttributeTracker &Source)"
  },
  {
    "label": "GetRemovedIterator()",
    "kind": "Method",
    "detail": "Function (TConstSetBitIterator<>)",
    "insertText": "GetRemovedIterator()"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (FirstRemovedIdIndex =)",
    "insertText": "Min(FirstRemovedIdIndex, Id.GetAsIndex())"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (int32 RemovedPadded =)",
    "insertText": "DivideAndRoundUp(Id.GetAsIndex() + 1, 32)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (Removed .)",
    "insertText": "SetNum(RemovedPadded, false)"
  },
  {
    "label": "GetAsIndex()",
    "kind": "Method",
    "detail": "Function (} Removed [ Id .)",
    "insertText": "GetAsIndex()"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAtSwap(FPrimitiveInstanceId Id, int32 Index, int32 MaxInstanceIndex)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Validate()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetNum(FMath::Max(Index, MaxInstanceIndex))"
  },
  {
    "label": "MarkRemoved()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkRemoved(Id)"
  },
  {
    "label": "DecChangedCounts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecChangedCounts(Index)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 LastIndex = MaxIndex - 1 ;)",
    "insertText": "if(Index != LastIndex)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (ElementType PrevFlags =)",
    "insertText": "GetFlags(LastIndex)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (NumChanged [)",
    "insertText": "uint32(EFlag::IndexChanged)"
  },
  {
    "label": "SetMaskTo()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SetMaskTo(Index, FToBit<EFlag::IndexChanged>::Bit | PrevFlags)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (FirstChangedIndex =)",
    "insertText": "Min(FirstChangedIndex, Index)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LastChangedIndex =)",
    "insertText": "Max(LastChangedIndex, Index)"
  },
  {
    "label": "ClearLastElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "ClearLastElement()"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAt(FPrimitiveInstanceId Id, int32 Index, int32 MaxInstanceIndex)"
  },
  {
    "label": "LoadCountAndMask()",
    "kind": "Method",
    "detail": "Function (int32 FirstElementIndex = Index / MasksPerElement ; int32 LastElementIndex = LastIndex / MasksPerElement ; ElementType CurrentElement = Data [ FirstElementIndex ] ; ElementType NextElement =)",
    "insertText": "LoadCountAndMask(FirstElementIndex + 1, FirstElementIndex != LastElementIndex)"
  },
  {
    "label": "ElementSubIndex()",
    "kind": "Method",
    "detail": "Function ({ uint32)",
    "insertText": "ElementSubIndex(Index % MasksPerElement)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (uint32 NumMasksInElement =)",
    "insertText": "Min(MasksPerElement, MaxIndex - FirstElementIndex * MasksPerElement)"
  },
  {
    "label": "CountMaskChanges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CountMaskChanges(CurrentElement, ElementSubIndex + 1, NumMasksInElement)"
  },
  {
    "label": "CurrentElementResult()",
    "kind": "Method",
    "detail": "Function (ElementType)",
    "insertText": "CurrentElementResult(CurrentElement >> uint32(EFlag::Num))"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (ElementType Mask = ~)",
    "insertText": "ElementType(0)"
  },
  {
    "label": "CurrentElementResult()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrentElementResult(CurrentElementResult & Mask) | (CurrentElement & (~Mask))"
  },
  {
    "label": "NextElement()",
    "kind": "Method",
    "detail": "Function (} CurrentElementResult | =)",
    "insertText": "NextElement(MasksPerElement - 1u) * uint32(EFlag::Num)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Data [ FirstElementIndex ] = CurrentElementResult ; })",
    "insertText": "for(int32 ElementIndex = FirstElementIndex + 1; ElementIndex < LastElementIndex; ++ElementIndex)"
  },
  {
    "label": "LoadCountAndMask()",
    "kind": "Method",
    "detail": "Function (NextElement =)",
    "insertText": "LoadCountAndMask(ElementIndex + 1, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Data [ ElementIndex ] = CurrentElementResult ; })",
    "insertText": "if(LastElementIndex != FirstElementIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (LastChangedIndex =)",
    "insertText": "Max(LastChangedIndex, LastIndex)"
  },
  {
    "label": "MarkIndex()",
    "kind": "Method",
    "detail": "Function (} template<EFlag Flag> void)",
    "insertText": "MarkIndex(int32 Index, int32 MaxInstanceIndex)"
  },
  {
    "label": "ElementSubShift()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "ElementSubShift(Index % MasksPerElement) * uint32(EFlag::Num)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementType SetMask = FToBit<Flag>::Bit<<ElementSubShift ; int32 ElementIndex = Index / MasksPerElement ; ElementType PrevElement = Data [ ElementIndex ] ;)",
    "insertText": "if((((FToBit<Flag>::Bit | FToBit<EFlag::Added>::Bit) << ElementSubShift) & PrevElement) == 0u)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (NumChanged [)",
    "insertText": "uint32(Flag)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (} ElementType)",
    "insertText": "GetFlags(int32 Index)"
  },
  {
    "label": "TestFlag()",
    "kind": "Method",
    "detail": "Function (} template<EFlag Flag> bool)",
    "insertText": "TestFlag(int32 Index)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNum(int32 InstanceIndexMax)"
  },
  {
    "label": "DivideAndRoundUp()",
    "kind": "Method",
    "detail": "Function (int32 ElementIndex =)",
    "insertText": "DivideAndRoundUp(InstanceIndexMax, int32(MasksPerElement))"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Data .)",
    "insertText": "SetNumZeroed(ElementIndex)"
  },
  {
    "label": "FAnyValidIterator()",
    "kind": "Method",
    "detail": "Function (} template<uint32 Mask = AnyFlagMask> class FAnyValidIterator { public :)",
    "insertText": "FAnyValidIterator()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (ElementIndex = StartIndex / MasksPerElement ; ElementOffset = StartIndex % MasksPerElement ; CurrentElement = Tracker -> Data .)",
    "insertText": "IsValidIndex(ElementIndex) ? (Tracker->Data[ElementIndex] & ElementMask)"
  },
  {
    "label": "AdvanceUntilAny()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdvanceUntilAny()"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (uint32 ZeroCount =)",
    "insertText": "CountTrailingZeros(CurrentElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementOffset + = Steps ; return ; } + + ElementIndex ; ElementOffset = 0 ;)",
    "insertText": "if(ElementIndex >= Tracker->Data.Num())"
  },
  {
    "label": "AdvanceToNext()",
    "kind": "Method",
    "detail": "Function (CurrentElement = 0 u ; return ; } CurrentElement = Tracker -> Data [ ElementIndex ]& ElementMask ; } } void)",
    "insertText": "AdvanceToNext()"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (CurrentElement& = ~)",
    "insertText": "ElementType(Mask)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FAnyValidIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetIndex()"
  },
  {
    "label": "GetChangedIterator()",
    "kind": "Method",
    "detail": "Function (} ; template<uint32 Mask = AnyFlagMask> FAnyValidIterator<Mask>)",
    "insertText": "GetChangedIterator()"
  },
  {
    "label": "FDeltaRange()",
    "kind": "Method",
    "detail": "Function (} # endif template<EFlag Flag> class FDeltaRange { public : uint32 IteratorMask = FToBit<Flag>::Bit | FToBit<EFlag::Added>::Bit ;)",
    "insertText": "FDeltaRange()"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (int32 NumAdded = Tracker -> NumChanged [)",
    "insertText": "uint32(EFlag::Added)"
  },
  {
    "label": "bFullUpdate()",
    "kind": "Method",
    "detail": "Function (bFullUpdate =)",
    "insertText": "bFullUpdate(NumAdded + Tracker->NumChanged[uint32(Flag)] == NumItems)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FConstIterator(FAnyValidIterator<IteratorMask> &&InIt) : bUseIterator(true), ItemIndex(0), MaxNum(), It(MoveTemp(InIt))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (+ + ItemIndex ;)",
    "insertText": "if(bUseIterator)"
  },
  {
    "label": "GetItemIndex()",
    "kind": "Method",
    "detail": "Function (} return ItemIndex ; } int32)",
    "insertText": "GetItemIndex()"
  },
  {
    "label": "GetIterator()",
    "kind": "Method",
    "detail": "Function (} return ItemIndex<MaxNum ; } } ; FConstIterator)",
    "insertText": "GetIterator()"
  },
  {
    "label": "FConstIterator()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FConstIterator(Tracker->GetChangedIterator<IteratorMask>())"
  },
  {
    "label": "GetDeltaRange()",
    "kind": "Method",
    "detail": "Function (} private : bool bFullUpdate = true ; int32 NumItems = 0 ; const FInstanceAttributeTracker* Tracker = nullptr ; } ; template<EFlag Flag> FDeltaRange<Flag>)",
    "insertText": "GetDeltaRange(bool bForceFullUpdate, int32 InNumItems)"
  },
  {
    "label": "HasAnyChanges()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasAnyChanges()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (} SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "SetMaskTo()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetMaskTo(int32 Index, ElementType Mask)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (ElementType CurrentElement = Data [)",
    "insertText": "ElementIndex(AnyFlagMask << ElementSubShift)"
  },
  {
    "label": "CurrentElement()",
    "kind": "Method",
    "detail": "Function (Data [ ElementIndex ] =)",
    "insertText": "CurrentElement(Mask << ElementSubShift)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 LastIndex = MaxIndex - 1 ; const int32 ElementIndex = LastIndex / MasksPerElement ; const int32 SubIndex = LastIndex % MasksPerElement ;)",
    "insertText": "if(SubIndex > 0)"
  },
  {
    "label": "ElementSubShift()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "ElementSubShift(MasksPerElement - (LastIndex % MasksPerElement)) * uint32(EFlag::Num)"
  },
  {
    "label": "ElementIndex()",
    "kind": "Method",
    "detail": "Function (ElementType CurrentElement = Data [)",
    "insertText": "ElementIndex((~ElementType(0)) >> ElementSubShift)"
  },
  {
    "label": "DecChangedCount()",
    "kind": "Method",
    "detail": "Function (} } template<EFlag Flag> void)",
    "insertText": "DecChangedCount(uint32 Flags)"
  },
  {
    "label": "DecChangedCounts()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "DecChangedCounts(int32 Index)"
  },
  {
    "label": "GetFlags()",
    "kind": "Method",
    "detail": "Function (const uint32 PrevFlags =)",
    "insertText": "GetFlags(Index)"
  },
  {
    "label": "CustomDataChanged()",
    "kind": "Method",
    "detail": "Function (DecChangedCount<)",
    "insertText": "CustomDataChanged(PrevFlags)"
  },
  {
    "label": "TransformChanged()",
    "kind": "Method",
    "detail": "Function (DecChangedCount<)",
    "insertText": "TransformChanged(PrevFlags)"
  },
  {
    "label": "IndexChanged()",
    "kind": "Method",
    "detail": "Function (DecChangedCount<)",
    "insertText": "IndexChanged(PrevFlags)"
  },
  {
    "label": "CountMaskChanges()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "CountMaskChanges(ElementType Element, uint32 Offset, uint32 NumMasksInElement)"
  },
  {
    "label": "HasIndexChanged()",
    "kind": "Method",
    "detail": "Function (ElementType)",
    "insertText": "HasIndexChanged(Element & IndexChangedElementMask)"
  },
  {
    "label": "HasAdded()",
    "kind": "Method",
    "detail": "Function (ElementType)",
    "insertText": "HasAdded(Element & AddedElementMask) << (uint32(EFlag::IndexChanged) - uint32(EFlag::Added))"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (ElementType CombinedMask = HasIndexChanged | HasAdded ; int32 Delta = NumMasksInElement - Offset -)",
    "insertText": "CountBits(CombinedMask >> (Offset * uint32(EFlag::Num)))"
  },
  {
    "label": "LoadCountAndMask()",
    "kind": "Method",
    "detail": "Function (} } ; ElementType)",
    "insertText": "LoadCountAndMask(int32 ElementIndex, bool bHasNextElement)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (uint32 NumMasksInElement =)",
    "insertText": "Min(MasksPerElement, MaxIndex - ElementIndex * MasksPerElement)"
  },
  {
    "label": "CountMaskChanges()",
    "kind": "Method",
    "detail": "Function (ElementType Element = Data [ ElementIndex ] ;)",
    "insertText": "CountMaskChanges(Element, 0, NumMasksInElement)"
  }
]