[
  {
    "label": "VectorRegisterConstInit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "VectorRegisterConstInit"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "alignas",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "alignas"
  },
  {
    "label": "sin_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "sin_ps(VectorRegister4Float x)"
  },
  {
    "label": "cos_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "cos_ps(VectorRegister4Float x)"
  },
  {
    "label": "sincos_ps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sincos_ps(VectorRegister4Float x, VectorRegister4Float* s, VectorRegister4Float* c)"
  },
  {
    "label": "log_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "log_ps(VectorRegister4Float x)"
  },
  {
    "label": "exp_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "exp_ps(VectorRegister4Float x)"
  },
  {
    "label": "tan_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "tan_ps(VectorRegister4Float x)"
  },
  {
    "label": "cot_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "cot_ps(VectorRegister4Float x)"
  },
  {
    "label": "atan_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "atan_ps(VectorRegister4Float x)"
  },
  {
    "label": "atan2_ps()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "atan2_ps(VectorRegister4Float y, VectorRegister4Float x)"
  },
  {
    "label": "_mm256_extractf128_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_extractf128_pd(XYZW, 0)"
  },
  {
    "label": "_mm256_castpd256_pd128()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_castpd256_pd128(XYZW)"
  },
  {
    "label": "_mm256_extractf128_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_extractf128_pd(XYZW, 1)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Float)",
    "insertText": "VectorLoadAligned(const float* Ptr)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (VectorRegister4Double)",
    "insertText": "VectorLoadAligned(const double* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Float& Vec, float* Ptr)"
  },
  {
    "label": "VectorStoreAligned()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreAligned(const VectorRegister4Double& Vec, double* Dst)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadAligned(V)"
  },
  {
    "label": "VectorLoadAligned()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorLoadAligned(V)"
  },
  {
    "label": "_mm_setr_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_setr_pd(X, Y)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, W)"
  },
  {
    "label": "_mm_setr_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_setr_ps( X, Y, Z, W )"
  },
  {
    "label": "MakeVectorRegisterFloat()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloat(X, Y, Z, W)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(X, Y, Z, W)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(XY, ZW)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(From)"
  },
  {
    "label": "_mm256_cvtpd_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_cvtpd_ps(Vec4d)"
  },
  {
    "label": "_mm_setr_epi32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_setr_epi32(X, Y, Z, W)"
  },
  {
    "label": "_mm_set_epi64x()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_set_epi64x(Y, X)"
  },
  {
    "label": "_mm_setzero_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_setzero_ps()"
  },
  {
    "label": "_mm_cvtss_f32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtss_f32(Vec)"
  },
  {
    "label": "_mm256_cvtsd_f64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_cvtsd_f64(Vec)"
  },
  {
    "label": "MakeVectorRegisterDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterDouble(Ptr[0], Ptr[1], Ptr[2], 1.0)"
  },
  {
    "label": "_mm_load1_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_load1_ps(Ptr)"
  },
  {
    "label": "_mm_broadcast_ss()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_broadcast_ss(Ptr)"
  },
  {
    "label": "_mm_setr_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_setr_ps(Ptr[0], Ptr[1], Ptr[0], Ptr[1])"
  },
  {
    "label": "_mm_set1_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_set1_ps(F)"
  },
  {
    "label": "_mm_storeu_pd()",
    "kind": "Method",
    "detail": "Function (UE_PLATFORM_MATH_USE_AVX)",
    "insertText": "_mm_storeu_pd(Dst, Vec.XY)"
  },
  {
    "label": "_mm256_storeu_pd()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "_mm256_storeu_pd(Dst, Vec)"
  },
  {
    "label": "_mm_store_pd()",
    "kind": "Method",
    "detail": "Function (UE_PLATFORM_MATH_USE_AVX)",
    "insertText": "_mm_store_pd(Dst, Vec.XY)"
  },
  {
    "label": "_mm_stream_pd()",
    "kind": "Method",
    "detail": "Function (UE_PLATFORM_MATH_USE_AVX)",
    "insertText": "_mm_stream_pd(Dst, Vec.XY)"
  },
  {
    "label": "_mm_storeu_pd()",
    "kind": "Method",
    "detail": "Function (UE_PLATFORM_MATH_USE_AVX)",
    "insertText": "_mm_storeu_pd(Dst, Vec.XY)"
  },
  {
    "label": "_mm_storeu_pd()",
    "kind": "Method",
    "detail": "Function (else)",
    "insertText": "_mm_storeu_pd(Dst, Vec.XY)"
  },
  {
    "label": "_mm256_movedup_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_movedup_pd(Vec)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(Temp, Temp)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(Temp, Temp)"
  },
  {
    "label": "_mm256_blend_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_blend_pd(Vec1, Vec2, 0b1100)"
  },
  {
    "label": "_mm256_insertf128_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_insertf128_pd(Vec1_XY, Vec2_ZW, 0x1)"
  },
  {
    "label": "_mm256_insertf128_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_insertf128_pd(Vec2_ZW, Vec1_XY, 0x0)"
  },
  {
    "label": "_mm_movelh_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_movelh_ps(Vec, Vec)"
  },
  {
    "label": "_mm_movehl_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_movehl_ps(Vec, Vec)"
  },
  {
    "label": "_mm_unpacklo_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_unpacklo_ps(Vec, Vec)"
  },
  {
    "label": "_mm_unpackhi_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_unpackhi_ps(Vec, Vec)"
  },
  {
    "label": "_mm_moveldup_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_moveldup_ps(Vec)"
  },
  {
    "label": "_mm_movehdup_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_movehdup_ps(Vec)"
  },
  {
    "label": "_mm_broadcastss_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_broadcastss_ps(Vec)"
  },
  {
    "label": "_mm_movelh_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_movelh_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_movehl_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_movehl_ps(Vec2, Vec1)"
  },
  {
    "label": "_mm_add_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_add_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_sub_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_sub_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_mul_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_mul_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_fmadd_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_fmadd_ps(A, B, C)"
  },
  {
    "label": "_mm256_fmadd_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_fmadd_pd(A, B, C)"
  },
  {
    "label": "_mm_fnmadd_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_fnmadd_ps(A, B, C)"
  },
  {
    "label": "_mm256_fnmadd_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_fnmadd_pd(A, B, C)"
  },
  {
    "label": "_mm_div_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_div_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_cvtsd_f64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtsd_f64(T)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(T, T)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorAdd(R, T)"
  },
  {
    "label": "VectorAdd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorAdd(R, T)"
  },
  {
    "label": "VectorRegister4Double()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorRegister4Double(T, T)"
  },
  {
    "label": "_mm_cmpeq_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cmpeq_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_cmpneq_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cmpneq_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_cmpgt_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cmpgt_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_cmpge_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cmpge_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_cmplt_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cmplt_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_cmple_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cmple_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_or_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_or_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_and_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_and_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_xor_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_xor_ps(Vec1, Vec2)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSwizzle(A, 1, 2, 0, 3)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSwizzle(A, 1, 2, 0, 3)"
  },
  {
    "label": "_mm_pow_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_pow_ps(Base, Exponent)"
  },
  {
    "label": "_mm256_pow_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_pow_pd(Base, Exponent)"
  },
  {
    "label": "Values()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Values(Base)"
  },
  {
    "label": "Exponents()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Exponents(Exponent)"
  },
  {
    "label": "_mm_sqrt_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_sqrt_ps(Vec)"
  },
  {
    "label": "_mm256_sqrt_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_sqrt_pd(Vec)"
  },
  {
    "label": "_mm_rsqrt_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_rsqrt_ps(Vec)"
  },
  {
    "label": "_mm_invsqrt_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_invsqrt_ps(Vec)"
  },
  {
    "label": "_mm256_invsqrt_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_invsqrt_pd(Vec)"
  },
  {
    "label": "VectorReciprocalSqrt()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocalSqrt(Vec)"
  },
  {
    "label": "_mm_rcp_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_rcp_ps(Vec)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorDivide(GlobalVectorConstants::FloatOne, Vec)"
  },
  {
    "label": "VectorDivide()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorDivide(GlobalVectorConstants::DoubleOne, Vec)"
  },
  {
    "label": "VectorReciprocal()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorReciprocal(Vec)"
  },
  {
    "label": "_mm_blend_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_blend_ps(VecXYZ, VecW, 0b1000)"
  },
  {
    "label": "_mm_insert_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_insert_ps(Vec, Vec, 0x08)"
  },
  {
    "label": "VectorMatrixMultiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorMatrixMultiply(FMatrix44f* Result, const FMatrix44f* Matrix1, const FMatrix44f* Matrix2)"
  },
  {
    "label": "VectorMatrixMultiply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorMatrixMultiply(FMatrix44d* Result, const FMatrix44d* Matrix1, const FMatrix44d* Matrix2)"
  },
  {
    "label": "MakeVectorRegisterFloatFromDouble()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "MakeVectorRegisterFloatFromDouble(VTempX)"
  },
  {
    "label": "_mm_min_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_min_ps(Vec1, Vec2)"
  },
  {
    "label": "_mm_max_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_max_ps(Vec1, Vec2)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 2, 3, 2, 3)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 2, 3, 2, 3)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 0, 1, 0, 1)"
  },
  {
    "label": "VectorShuffle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorShuffle(Vec1, Vec2, 0, 1, 0, 1)"
  },
  {
    "label": "_mm_movemask_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_movemask_ps(VecMask)"
  },
  {
    "label": "_mm256_movemask_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_movemask_pd(VecMask)"
  },
  {
    "label": "_mm_cvtepi32_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtepi32_ps(Temp)"
  },
  {
    "label": "VectorSwizzle()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSwizzle( Temp, 3, 2, 1, 0 )"
  },
  {
    "label": "_mm_cvtepi32_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtepi32_ps(Temp)"
  },
  {
    "label": "_mm_round_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_round_ps(Vec, _MM_FROUND_TRUNC)"
  },
  {
    "label": "_mm_round_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_round_pd(V, _MM_FROUND_TRUNC)"
  },
  {
    "label": "_mm_round_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_round_ps(Vec, _MM_FROUND_TO_NEAREST_INT |_MM_FROUND_NO_EXC)"
  },
  {
    "label": "_mm_cvtps_epi32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvtps_epi32(Vec)"
  },
  {
    "label": "_mm_ceil_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_ceil_ps(V)"
  },
  {
    "label": "_mm_floor_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_floor_ps(V)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSelect(Mask, GlobalVectorConstants::FloatOne, GlobalVectorConstants::FloatMinusOne)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSelect(Mask, GlobalVectorConstants::DoubleOne, GlobalVectorConstants::DoubleMinusOne)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSelect(Mask, GlobalVectorConstants::FloatOne, GlobalVectorConstants::FloatZero)"
  },
  {
    "label": "VectorSelect()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "VectorSelect(Mask, GlobalVectorConstants::DoubleOne, GlobalVectorConstants::DoubleZero)"
  },
  {
    "label": "_mm_exp_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_exp_ps(X)"
  },
  {
    "label": "_mm256_exp_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_exp_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_exp2_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_exp2_ps(X)"
  },
  {
    "label": "Floats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Floats(X)"
  },
  {
    "label": "_mm256_exp2_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_exp2_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_log_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_log_ps(X)"
  },
  {
    "label": "_mm256_log_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_log_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_log2_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_log2_ps(X)"
  },
  {
    "label": "Floats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Floats(X)"
  },
  {
    "label": "_mm256_log2_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_log2_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_sin_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_sin_ps(V)"
  },
  {
    "label": "_mm256_sin_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_sin_pd(V)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(V)"
  },
  {
    "label": "_mm_cos_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cos_ps(V)"
  },
  {
    "label": "_mm256_cos_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_cos_pd(V)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(V)"
  },
  {
    "label": "_mm_tan_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_tan_ps(X)"
  },
  {
    "label": "Floats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Floats(X)"
  },
  {
    "label": "_mm256_tan_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_tan_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_asin_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_asin_ps(X)"
  },
  {
    "label": "Floats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Floats(X)"
  },
  {
    "label": "_mm256_asin_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_asin_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_acos_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_acos_ps(X)"
  },
  {
    "label": "Floats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Floats(X)"
  },
  {
    "label": "_mm256_acos_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_acos_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_atan_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_atan_ps(X)"
  },
  {
    "label": "Floats()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "Floats(X)"
  },
  {
    "label": "_mm256_atan_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_atan_pd(X)"
  },
  {
    "label": "Doubles()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "Doubles(X)"
  },
  {
    "label": "_mm_atan2_ps()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_atan2_ps(Y, X)"
  },
  {
    "label": "FloatsY()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "FloatsY(Y)"
  },
  {
    "label": "FloatsX()",
    "kind": "Method",
    "detail": "Function (AlignedFloat4)",
    "insertText": "FloatsX(X)"
  },
  {
    "label": "_mm256_atan2_pd()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm256_atan2_pd(Y, X)"
  },
  {
    "label": "DoublesY()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "DoublesY(Y)"
  },
  {
    "label": "DoublesX()",
    "kind": "Method",
    "detail": "Function (AlignedDouble4)",
    "insertText": "DoublesX(X)"
  },
  {
    "label": "_mm_mullo_epi32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_mullo_epi32(A, B)"
  },
  {
    "label": "_mm_min_epi32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_min_epi32(A, B)"
  },
  {
    "label": "_mm_max_epi32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_max_epi32(A, B)"
  },
  {
    "label": "_mm_abs_epi32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_abs_epi32(A)"
  },
  {
    "label": "_mm_cvttps_epi32()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_cvttps_epi32(A)"
  },
  {
    "label": "_mm_unpacklo_epi64()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_unpacklo_epi64(A, B)"
  },
  {
    "label": "_mm_shuffle_epi8()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "_mm_shuffle_epi8(Vec, Mask)"
  }
]