[
  {
    "label": "ReceiveStatisticsProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ReceiveStatisticsProvider"
  },
  {
    "label": "Transport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Transport"
  },
  {
    "label": "NetworkLinkRtcpObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NetworkLinkRtcpObserver"
  },
  {
    "label": "MediaReceiverRtcpObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MediaReceiverRtcpObserver"
  },
  {
    "label": "RtpStreamRtcpHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpStreamRtcpHandler"
  },
  {
    "label": "RtpStats",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpStats"
  },
  {
    "label": "RtcpTransceiverConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtcpTransceiverConfig"
  },
  {
    "label": "NetworkLinkRtcpObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_RTCP_TRANSCEIVER_CONFIG_H_ # define MODULES_RTP_RTCP_SOURCE_RTCP_TRANSCEIVER_CONFIG_H_ # include<string> # include \" api / array_view . h \" # include \" api / rtp_headers . h \" # include \" api / task_queue / task_queue_base . h \" # include \" api / units / data_rate . h \" # include \" api / units / time_delta . h \" # include \" api / units / timestamp . h \" # include \" api / video / video_bitrate_allocation . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / report_block . h \" # include \" modules / rtp_rtcp / source / rtcp_packet / transport_feedback . h \" # include \" system_wrappers / include / clock . h \" # include \" system_wrappers / include / ntp_time . h \" namespace webrtc { class ReceiveStatisticsProvider ; class Transport ; class NetworkLinkRtcpObserver { public : ~)",
    "insertText": "NetworkLinkRtcpObserver()"
  },
  {
    "label": "OnTransportFeedback()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTransportFeedback(Timestamp receive_time, const rtcp::TransportFeedback& feedback)"
  },
  {
    "label": "OnReceiverEstimatedMaxBitrate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReceiverEstimatedMaxBitrate(Timestamp receive_time, DataRate bitrate)"
  },
  {
    "label": "OnReportBlocks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReportBlocks(Timestamp receive_time, rtc::ArrayView<const rtcp::ReportBlock> report_blocks)"
  },
  {
    "label": "OnRttUpdate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnRttUpdate(Timestamp receive_time, TimeDelta rtt)"
  },
  {
    "label": "MediaReceiverRtcpObserver()",
    "kind": "Method",
    "detail": "Function (} } ; class MediaReceiverRtcpObserver { public : ~)",
    "insertText": "MediaReceiverRtcpObserver()"
  },
  {
    "label": "OnSenderReport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSenderReport(uint32_t sender_ssrc, NtpTime ntp_time, uint32_t rtp_time)"
  },
  {
    "label": "OnBye()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBye(uint32_t sender_ssrc)"
  },
  {
    "label": "OnBitrateAllocation()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBitrateAllocation(uint32_t sender_ssrc, const VideoBitrateAllocation& allocation)"
  },
  {
    "label": "RtpStreamRtcpHandler()",
    "kind": "Method",
    "detail": "Function (} } ; class RtpStreamRtcpHandler { public : ~)",
    "insertText": "RtpStreamRtcpHandler()"
  },
  {
    "label": "RtpStats()",
    "kind": "Method",
    "detail": "Function (class RtpStats { public :)",
    "insertText": "RtpStats()"
  },
  {
    "label": "RtpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpStats(const RtpStats&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpStats&)",
    "insertText": "operator(const RtpStats&)"
  },
  {
    "label": "num_sent_packets()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "num_sent_packets()"
  },
  {
    "label": "set_num_sent_bytes()",
    "kind": "Method",
    "detail": "Function (num_sent_packets_ = v ; } void)",
    "insertText": "set_num_sent_bytes(size_t v)"
  },
  {
    "label": "set_last_capture_time()",
    "kind": "Method",
    "detail": "Function (num_sent_bytes_ = v ; } void)",
    "insertText": "set_last_capture_time(Timestamp v)"
  },
  {
    "label": "set_last_rtp_timestamp()",
    "kind": "Method",
    "detail": "Function (last_capture_time_ = v ; } void)",
    "insertText": "set_last_rtp_timestamp(uint32_t v)"
  },
  {
    "label": "set_last_clock_rate()",
    "kind": "Method",
    "detail": "Function (last_rtp_timestamp_ = v ; } void)",
    "insertText": "set_last_clock_rate(int v)"
  },
  {
    "label": "Zero()",
    "kind": "Method",
    "detail": "Function (last_clock_rate_ = v ; } private : size_t num_sent_packets_ = 0 ; size_t num_sent_bytes_ = 0 ; Timestamp last_capture_time_ =)",
    "insertText": "Zero()"
  },
  {
    "label": "SentStats()",
    "kind": "Method",
    "detail": "Function (uint32_t last_rtp_timestamp_ = 0 ; int last_clock_rate_ = 9 0 ' 0 0 0 ; } ; RtpStats)",
    "insertText": "SentStats()"
  },
  {
    "label": "OnNack()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNack(uint32_t sender_ssrc, rtc::ArrayView<const uint16_t> sequence_numbers)"
  },
  {
    "label": "OnFir()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFir(uint32_t sender_ssrc)"
  },
  {
    "label": "OnPli()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPli(uint32_t sender_ssrc)"
  },
  {
    "label": "OnReportBlock()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReportBlock(uint32_t sender_ssrc, const rtcp::ReportBlock& report_block)"
  },
  {
    "label": "RtcpTransceiverConfig()",
    "kind": "Method",
    "detail": "Function (} } ; struct RtcpTransceiverConfig {)",
    "insertText": "RtcpTransceiverConfig()"
  },
  {
    "label": "RtcpTransceiverConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtcpTransceiverConfig(const RtcpTransceiverConfig&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtcpTransceiverConfig&)",
    "insertText": "operator(const RtcpTransceiverConfig&)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate()"
  },
  {
    "label": "Millis()",
    "kind": "Method",
    "detail": "Function (std::string debug_id ; uint32_t feedback_ssrc = 1 ; std::string cname ; size_t max_packet_size = 1 2 0 0 ; Clock* clock = nullptr ; Transport* outgoing_transport = nullptr ; TaskQueueBase* task_queue = nullptr ; ReceiveStatisticsProvider* receive_statistics = nullptr ; NetworkLinkRtcpObserver* network_link_observer = nullptr ; RtcpMode rtcp_mode = RtcpMode::kCompound ; bool initial_ready_to_send = true ; TimeDelta initial_report_delay =)",
    "insertText": "Millis(500)"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (TimeDelta report_period =)",
    "insertText": "Seconds(1)"
  }
]