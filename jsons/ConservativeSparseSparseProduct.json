[
  {
    "label": "conservative_sparse_sparse_product_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "conservative_sparse_sparse_product_selector"
  },
  {
    "label": "sparse_sparse_to_dense_product_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_sparse_to_dense_product_selector"
  },
  {
    "label": "conservative_sparse_sparse_product_impl()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_CONSERVATIVESPARSESPARSEPRODUCT_H # define EIGEN_CONSERVATIVESPARSESPARSEPRODUCT_H namespace Eigen { namespace internal { template<Lhs,Rhs,ResultType> void)",
    "insertText": "conservative_sparse_sparse_product_impl(const Lhs& lhs, const Rhs& rhs, ResultType& res, bool sortedInsertion = false)"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (typedef remove_all<Lhs>::type::Scalar LhsScalar ; typedef remove_all<Rhs>::type::Scalar RhsScalar ; typedef remove_all<ResultType>::type::Scalar ResScalar ; Index rows = lhs .)",
    "insertText": "innerSize()"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (Index cols = rhs .)",
    "insertText": "outerSize()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(lhs.outerSize() == rhs.innerSize())"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(bool, mask, rows, 0)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(ResScalar, values, rows, 0)"
  },
  {
    "label": "ei_declare_aligned_stack_constructed_variable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ei_declare_aligned_stack_constructed_variable(Index, indices, rows, 0)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(mask,0,sizeof(bool)*rows)"
  },
  {
    "label": "lhsEval()",
    "kind": "Method",
    "detail": "Function (evaluator<Lhs>)",
    "insertText": "lhsEval(lhs)"
  },
  {
    "label": "rhsEval()",
    "kind": "Method",
    "detail": "Function (evaluator<Rhs>)",
    "insertText": "rhsEval(rhs)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (Index estimated_nnz_prod = lhsEval .)",
    "insertText": "nonZerosEstimate() + rhsEval.nonZerosEstimate()"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "setZero()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "reserve(Index(estimated_nnz_prod))"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "startVec(j)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (Index nnz = 0 ;)",
    "insertText": "for(typename evaluator<Rhs>::InnerIterator rhsIt(rhsEval, j); rhsIt; ++rhsIt)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (RhsScalar y = rhsIt .)",
    "insertText": "value()"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (Index k = rhsIt .)",
    "insertText": "index()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mask [ i ] = true ; values [ i ] = x* y ; indices [ nnz ] = i ; + + nnz ; } else values [ i ] + = x* y ; } })",
    "insertText": "if(!sortedInsertion)"
  },
  {
    "label": "insertBackByOuterInnerUnordered()",
    "kind": "Method",
    "detail": "Function (Index i = indices [ k ] ; res .)",
    "insertText": "insertBackByOuterInnerUnordered(j,i)"
  },
  {
    "label": "t()",
    "kind": "Method",
    "detail": "Function (mask [ i ] = false ; } } else { const Index t200 = rows / 1 1 ; const Index)",
    "insertText": "t(rows*100)"
  },
  {
    "label": "insertBackByOuterInner()",
    "kind": "Method",
    "detail": "Function (Index i = indices [ k ] ; res .)",
    "insertText": "insertBackByOuterInner(j,i)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (mask [ i ] = false ; } } else {)",
    "insertText": "for(Index i=0; i<rows; ++i)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} } } } } res .)",
    "insertText": "finalize()"
  },
  {
    "label": "LhsStorageOrder()",
    "kind": "Method",
    "detail": "Function (} } namespace internal { template<Lhs,Rhs,ResultType,int)",
    "insertText": "LhsStorageOrder(traits<Lhs>::Flags&RowMajorBit) ? RowMajor : ColMajor, int RhsStorageOrder = (traits<Rhs>::Flags&RowMajorBit) ? RowMajor : ColMajor, int ResStorageOrder = (traits<ResultType>::Flags&RowMajorBit)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (template<Lhs,Rhs,ResultType> struct conservative_sparse_sparse_product_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,ColMajor> { typedef remove_all<Lhs>::type LhsCleaned ; typedef LhsCleaned::Scalar Scalar ; void)",
    "insertText": "run(const Lhs& lhs, const Rhs& rhs, ResultType& res)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<ResultType::Scalar,RowMajor,ResultType::StorageIndex> RowMajorMatrix ; typedef SparseMatrix<ResultType::Scalar,ColMajor,ResultType::StorageIndex> ColMajorMatrixAux ; typedef sparse_eval<ColMajorMatrixAux,ResultType::RowsAtCompileTime,ResultType::ColsAtCompileTime,ColMajorMatrixAux::Flags>::type ColMajorMatrix ;)",
    "insertText": "if(lhs.rows()>rhs.cols())"
  },
  {
    "label": "resCol()",
    "kind": "Method",
    "detail": "Function (ColMajorMatrix)",
    "insertText": "resCol(lhs.rows(),rhs.cols())"
  },
  {
    "label": "ColMajorMatrix()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<Lhs,Rhs,)",
    "insertText": "ColMajorMatrix(lhs, rhs, resCol, true)"
  },
  {
    "label": "markAsRValue()",
    "kind": "Method",
    "detail": "Function (res = resCol .)",
    "insertText": "markAsRValue()"
  },
  {
    "label": "ColMajorMatrixAux()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<Lhs,Rhs,)",
    "insertText": "ColMajorMatrixAux(lhs, rhs, resCol, false)"
  },
  {
    "label": "resRow()",
    "kind": "Method",
    "detail": "Function (RowMajorMatrix)",
    "insertText": "resRow(resCol)"
  },
  {
    "label": "resRow()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<Rhs::Scalar,RowMajor,ResultType::StorageIndex> RowMajorRhs ; typedef SparseMatrix<ResultType::Scalar,RowMajor,ResultType::StorageIndex> RowMajorRes ; RowMajorRhs rhsRow = rhs ; RowMajorRes)",
    "insertText": "resRow(lhs.rows(), rhs.cols())"
  },
  {
    "label": "RowMajorRes()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<RowMajorRhs,Lhs,)",
    "insertText": "RowMajorRes(rhsRow, lhs, resRow)"
  },
  {
    "label": "RowMajorRes()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<Rhs,RowMajorLhs,)",
    "insertText": "RowMajorRes(rhs, lhsRow, resRow)"
  },
  {
    "label": "RowMajorMatrix()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<Rhs,Lhs,)",
    "insertText": "RowMajorMatrix(rhs, lhs, resRow)"
  },
  {
    "label": "resCol()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<ResultType::Scalar,ColMajor,ResultType::StorageIndex> ColMajorMatrix ; ColMajorMatrix)",
    "insertText": "resCol(lhs.rows(), rhs.cols())"
  },
  {
    "label": "ColMajorMatrix()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<Lhs,Rhs,)",
    "insertText": "ColMajorMatrix(lhs, rhs, resCol)"
  },
  {
    "label": "ColMajorRes()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<ColMajorLhs,Rhs,)",
    "insertText": "ColMajorRes(lhsCol, rhs, resCol)"
  },
  {
    "label": "ColMajorRes()",
    "kind": "Method",
    "detail": "Function (internal::conservative_sparse_sparse_product_impl<Lhs,ColMajorRhs,)",
    "insertText": "ColMajorRes(lhs, rhsCol, resCol)"
  },
  {
    "label": "resRow()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<ResultType::Scalar,RowMajor,ResultType::StorageIndex> RowMajorMatrix ; typedef SparseMatrix<ResultType::Scalar,ColMajor,ResultType::StorageIndex> ColMajorMatrix ; RowMajorMatrix)",
    "insertText": "resRow(lhs.rows(),rhs.cols())"
  },
  {
    "label": "resCol()",
    "kind": "Method",
    "detail": "Function (ColMajorMatrix)",
    "insertText": "resCol(resRow)"
  },
  {
    "label": "sparse_sparse_to_dense_product_impl()",
    "kind": "Method",
    "detail": "Function (res = resCol ; } } ; } namespace internal { template<Lhs,Rhs,ResultType> void)",
    "insertText": "sparse_sparse_to_dense_product_impl(const Lhs& lhs, const Rhs& rhs, ResultType& res)"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "coeffRef(i,j)"
  },
  {
    "label": "LhsStorageOrder()",
    "kind": "Method",
    "detail": "Function (} } } } } namespace internal { template<Lhs,Rhs,ResultType,int)",
    "insertText": "LhsStorageOrder(traits<Lhs>::Flags&RowMajorBit) ? RowMajor : ColMajor, int RhsStorageOrder = (traits<Rhs>::Flags&RowMajorBit)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_to_dense_product_impl<Lhs,Rhs,)",
    "insertText": "ResultType(lhs, rhs, res)"
  },
  {
    "label": "lhsCol()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<Lhs::Scalar,ColMajor,ResultType::StorageIndex> ColMajorLhs ; ColMajorLhs)",
    "insertText": "lhsCol(lhs)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_to_dense_product_impl<ColMajorLhs,Rhs,)",
    "insertText": "ResultType(lhsCol, rhs, res)"
  },
  {
    "label": "rhsCol()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<Rhs::Scalar,ColMajor,ResultType::StorageIndex> ColMajorRhs ; ColMajorRhs)",
    "insertText": "rhsCol(rhs)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_to_dense_product_impl<Lhs,ColMajorRhs,)",
    "insertText": "ResultType(lhs, rhsCol, res)"
  },
  {
    "label": "trRes()",
    "kind": "Method",
    "detail": "Function (Transpose<ResultType>)",
    "insertText": "trRes(res)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_to_dense_product_impl<Rhs,Lhs,Transpose<)",
    "insertText": "ResultType(rhs, lhs, trRes)"
  }
]