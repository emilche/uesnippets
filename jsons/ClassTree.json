[
  {
    "label": "EClassFlagMatchType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EClassFlagMatchType"
  },
  {
    "label": "FClassTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FClassTree"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "into",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "into"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "isn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "isn"
  },
  {
    "label": "into",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "into"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "Class",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Class"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "of",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "of"
  },
  {
    "label": "our",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "our"
  },
  {
    "label": "belongs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "belongs"
  },
  {
    "label": "sorted",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sorted"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "from",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "from"
  },
  {
    "label": "int32",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "int32"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "isn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "isn"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "into",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "into"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "associated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "associated"
  },
  {
    "label": "associated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "associated"
  },
  {
    "label": "FScopedRecurseDepthCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScopedRecurseDepthCounter"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "flags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flags"
  },
  {
    "label": "will",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "will"
  },
  {
    "label": "Comparator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Comparator"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "flags",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "flags"
  },
  {
    "label": "associated",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "associated"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "Comparator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Comparator"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "specified",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "specified"
  },
  {
    "label": "node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "node"
  },
  {
    "label": "has",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "has"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "hasn",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "hasn"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "tree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "tree"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "check",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "check"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (nodes)",
    "insertText": "for( int32 ChildIndex = 0; ChildIndex < Children.Num()"
  },
  {
    "label": "FClassTree()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FClassTree( ChildClass )"
  },
  {
    "label": "FClassTree()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FClassTree( NewChild )"
  },
  {
    "label": "Counter()",
    "kind": "Method",
    "detail": "Function (FScopedRecurseDepthCounter)",
    "insertText": "Counter(&RecurseDepth)"
  },
  {
    "label": "Counter()",
    "kind": "Method",
    "detail": "Function (FScopedRecurseDepthCounter)",
    "insertText": "Counter(&RecurseDepth)"
  },
  {
    "label": "FClassTree()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "FClassTree(Class)"
  },
  {
    "label": "GetNode()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "GetNode(SearchClass,false)"
  },
  {
    "label": "AddClass()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "AddClass(SearchClass)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (branch)",
    "insertText": "for( int32 i = 0; i < Children.Num()"
  }
]