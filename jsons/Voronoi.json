[
  {
    "label": "FVoronoiCellInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoronoiCellInfo"
  },
  {
    "label": "container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "container"
  },
  {
    "label": "ContainerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerType"
  },
  {
    "label": "voro_compute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "voro_compute"
  },
  {
    "label": "FVoronoiDiagram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiDiagram"
  },
  {
    "label": "FVoronoiComputeHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiComputeHelper"
  },
  {
    "label": "FVoronoiDiagram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiDiagram"
  },
  {
    "label": "FVoronoiDiagram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiDiagram"
  },
  {
    "label": "FVoronoiDiagramField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiDiagramField"
  },
  {
    "label": "VoronoiNeighbors()",
    "kind": "Method",
    "detail": "Function (VORONOI_API)",
    "insertText": "VoronoiNeighbors(const TArrayView<const FVector> &Sites, TArray<TArray<int>> &Neighbors, bool bExcludeBounds = true, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "GetVoronoiEdges()",
    "kind": "Method",
    "detail": "Function (VORONOI_API)",
    "insertText": "GetVoronoiEdges(const TArrayView<const FVector> &Sites, const FBox& Bounds, TArray<TTuple<FVector, FVector>> &Edges, TArray<int32> &CellMember, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (VORONOI_API)",
    "insertText": "FVoronoiDiagram(const TArrayView<const FVector>& Sites, double ExtraBoundingSpace, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (VORONOI_API)",
    "insertText": "FVoronoiDiagram(const TArrayView<const FVector>& Sites, const FBox &Bounds, double ExtraBoundingSpace, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (VORONOI_API)",
    "insertText": "FVoronoiDiagram(int32 ExpectedNumSites, const FBox& Bounds, double ExtraBoundingSpace)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const TArrayView<const FVector>& Sites, const FBox& Bounds, double ExtraBoundingSpace, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBounds(const TArrayView<const FVector>& Sites, double ExtraBoundingSpace = UE_DOUBLE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "AddSites()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSites(const TArrayView<const FVector>& Sites, double SquaredDistSkipPtThreshold = 0.0f)"
  },
  {
    "label": "ComputeAllCellsSerial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAllCellsSerial(TArray<FVoronoiCellInfo>& AllCells)"
  },
  {
    "label": "ComputeAllCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAllCells(TArray<FVoronoiCellInfo>& AllCells, int32 ApproxSitesPerThread = -1)"
  },
  {
    "label": "ComputeAllNeighbors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAllNeighbors(TArray<TArray<int32>>& AllNeighbors, bool bExcludeBounds = true, int32 ApproxSitesPerThread = -1)"
  },
  {
    "label": "ComputeCellEdgesSerial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCellEdgesSerial(TArray<TTuple<FVector, FVector>>& Edges, TArray<int32>& CellMember)"
  },
  {
    "label": "ComputeCellEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCellEdges(TArray<TTuple<FVector, FVector>>& Edges, TArray<int32>& CellMember, int32 ApproxSitesPerThread = -1)"
  },
  {
    "label": "FindCell()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "FindCell(Pos, ComputeHelper, OutFoundSite)"
  },
  {
    "label": "GetParallelBlockRanges()",
    "kind": "Method",
    "detail": "Function (TArray<int32>)",
    "insertText": "GetParallelBlockRanges(int32 ApproxSitesPerThread)"
  },
  {
    "label": "ToRet()",
    "kind": "Method",
    "detail": "Function (int32>)",
    "insertText": "ToRet(-1, -1)"
  }
]