[
  {
    "label": "FVoronoiCellInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVoronoiCellInfo"
  },
  {
    "label": "container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "container"
  },
  {
    "label": "ContainerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerType"
  },
  {
    "label": "voro_compute",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "voro_compute"
  },
  {
    "label": "FVoronoiDiagram",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiDiagram"
  },
  {
    "label": "FVoronoiComputeHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiComputeHelper"
  },
  {
    "label": "FVoronoiDiagramField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FVoronoiDiagramField"
  },
  {
    "label": "VoronoiNeighbors()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" Containers / Map . h \" # include \" CoreMinimal . h \" # include \" Math / Box . h \" # include \" Math / NumericLimits . h \" # include \" Math / UnrealMathSSE . h \" # include \" Math / Vector . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / PimplPtr . h \" # include \" Templates / Tuple . h \" # include \" Templates / UnrealTemplate . h \" bool)",
    "insertText": "VoronoiNeighbors(const TArrayView<const FVector> &Sites, TArray<TArray<int>> &Neighbors, bool bExcludeBounds = true, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "GetVoronoiEdges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetVoronoiEdges(const TArrayView<const FVector> &Sites, const FBox& Bounds, TArray<TTuple<FVector, FVector>> &Edges, TArray<int32> &CellMember, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVoronoiComputeHelper()",
    "kind": "Method",
    "detail": "Function (struct FVoronoiCellInfo { TArray<FVector> Vertices ; TArray<int32> Faces ; TArray<int32> Neighbors ; TArray<FVector> Normals ; } ; namespace voro { class container ; template<class ContainerType> class voro_compute ; } class FVoronoiDiagram ; class FVoronoiComputeHelper { TPimplPtr<voro::voro_compute<voro::container>> Compute ; public :)",
    "insertText": "FVoronoiComputeHelper()"
  },
  {
    "label": "FVoronoiComputeHelper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVoronoiComputeHelper(const FVoronoiComputeHelper& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVoronoiComputeHelper&)",
    "insertText": "operator(const FVoronoiComputeHelper& Other)"
  },
  {
    "label": "FVoronoiComputeHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoronoiComputeHelper(FVoronoiComputeHelper&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVoronoiComputeHelper&)",
    "insertText": "operator(FVoronoiComputeHelper&& Other)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (class FVoronoiDiagram ; } ; class FVoronoiDiagram { int32 NumSites ; TPimplPtr<voro::container> Container ; FBox Bounds ; public : const int MinDefaultSitesPerThread ;)",
    "insertText": "FVoronoiDiagram(const TArrayView<const FVector>& Sites, double ExtraBoundingSpace, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoronoiDiagram(const TArrayView<const FVector>& Sites, const FBox &Bounds, double ExtraBoundingSpace, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoronoiDiagram(int32 ExpectedNumSites, const FBox& Bounds, double ExtraBoundingSpace)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoronoiDiagram() : NumSites(0), Container(nullptr), Bounds(EForceInit::ForceInit)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVoronoiDiagram(const FVoronoiDiagram& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVoronoiDiagram&)",
    "insertText": "operator(const FVoronoiDiagram& Other)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoronoiDiagram(FVoronoiDiagram&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVoronoiDiagram&)",
    "insertText": "operator(FVoronoiDiagram&& Other)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const TArrayView<const FVector>& Sites, const FBox& Bounds, double ExtraBoundingSpace, double SquaredDistSkipPtThreshold = UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "FVoronoiDiagram()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FVoronoiDiagram()"
  },
  {
    "label": "GetBounds()",
    "kind": "Method",
    "detail": "Function (FBox)",
    "insertText": "GetBounds(const TArrayView<const FVector>& Sites, double ExtraBoundingSpace = UE_DOUBLE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Num()"
  },
  {
    "label": "ComputeAllCellsSerial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAllCellsSerial(TArray<FVoronoiCellInfo>& AllCells)"
  },
  {
    "label": "ComputeAllCells()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAllCells(TArray<FVoronoiCellInfo>& AllCells, int32 ApproxSitesPerThread = -1)"
  },
  {
    "label": "ComputeAllNeighbors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeAllNeighbors(TArray<TArray<int32>>& AllNeighbors, bool bExcludeBounds = true, int32 ApproxSitesPerThread = -1)"
  },
  {
    "label": "ComputeCellEdgesSerial()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCellEdgesSerial(TArray<TTuple<FVector, FVector>>& Edges, TArray<int32>& CellMember)"
  },
  {
    "label": "ComputeCellEdges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComputeCellEdges(TArray<TTuple<FVector, FVector>>& Edges, TArray<int32>& CellMember, int32 ApproxSitesPerThread = -1)"
  },
  {
    "label": "FindCell()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindCell(const FVector& Pos, FVoronoiComputeHelper& ComputeHelper, FVector& OutFoundSite)"
  },
  {
    "label": "FindCell()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "FindCell(const FVector& Pos, FVoronoiComputeHelper& ComputeHelper)"
  },
  {
    "label": "FindCell()",
    "kind": "Method",
    "detail": "Function (FVector OutFoundSite ; return)",
    "insertText": "FindCell(Pos, ComputeHelper, OutFoundSite)"
  },
  {
    "label": "GetComputeHelper()",
    "kind": "Method",
    "detail": "Function (} FVoronoiComputeHelper)",
    "insertText": "GetComputeHelper()"
  },
  {
    "label": "ApproxSitesPerThreadWithDefault()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ApproxSitesPerThreadWithDefault(int32 ApproxSitesPerThreadIn)"
  },
  {
    "label": "GetParallelBlockRanges()",
    "kind": "Method",
    "detail": "Function (} return ApproxSitesPerThreadIn ; } private : TArray<int32>)",
    "insertText": "GetParallelBlockRanges(int32 ApproxSitesPerThread)"
  },
  {
    "label": "FVoronoiDiagramField()",
    "kind": "Method",
    "detail": "Function (} ; class FVoronoiDiagramField { TArray<FVector> Sites ; TArray<TArray<int32>> Neighbors ; FVoronoiDiagram Diagram ; public :)",
    "insertText": "FVoronoiDiagramField()"
  },
  {
    "label": "FVoronoiDiagramField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoronoiDiagramField(const TArray<FVector>& SitesIn, const FBox& Bounds, double SquaredDistSkipPtThreshold = DBL_EPSILON)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(SitesIn, Bounds, SquaredDistSkipPtThreshold)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const TArray<FVector>& SitesIn, const FBox& Bounds, double SquaredDistSkipPtThreshold = DBL_EPSILON)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (Sites = SitesIn ; Diagram .)",
    "insertText": "Initialize(Sites, Bounds, 0, SquaredDistSkipPtThreshold)"
  },
  {
    "label": "ComputeAllNeighbors()",
    "kind": "Method",
    "detail": "Function (Diagram .)",
    "insertText": "ComputeAllNeighbors(Neighbors, true)"
  },
  {
    "label": "FVoronoiDiagramField()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FVoronoiDiagramField(const FVoronoiDiagramField& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVoronoiDiagramField&)",
    "insertText": "operator(const FVoronoiDiagramField& Other)"
  },
  {
    "label": "FVoronoiDiagramField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FVoronoiDiagramField(FVoronoiDiagramField&& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FVoronoiDiagramField&)",
    "insertText": "operator(FVoronoiDiagramField&& Other)"
  },
  {
    "label": "DistanceToCellWall()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "DistanceToCellWall(const FVector& Sample, FVoronoiComputeHelper& ComputeHelper, double InvalidValue = TNumericLimits<double>::Lowest())"
  },
  {
    "label": "FindCell()",
    "kind": "Method",
    "detail": "Function (FVector CloseSite ; int32 Cell = Diagram .)",
    "insertText": "FindCell(Sample, ComputeHelper, CloseSite)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (BestNbr = NbrCell ; BestDistSq = DistSq ; } })",
    "insertText": "if(BestNbr == -1)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (FVector Normal = NbrPos - CloseSite ; bool bNormalizeSuccess = Normal .)",
    "insertText": "Normalize()"
  },
  {
    "label": "ClosestTwoIDs()",
    "kind": "Method",
    "detail": "Function (} TPair<int32,int32>)",
    "insertText": "ClosestTwoIDs(const FVector& Sample, FVoronoiComputeHelper& ComputeHelper)"
  },
  {
    "label": "ToRet()",
    "kind": "Method",
    "detail": "Function (TPair<int32,int32>)",
    "insertText": "ToRet(-1, -1)"
  },
  {
    "label": "DistanceToClosest()",
    "kind": "Method",
    "detail": "Function (ToRet . Value = NbrCell ; BestDistSq = DistSq ; } } return ToRet ; } double)",
    "insertText": "DistanceToClosest(const FVector& Sample, FVoronoiComputeHelper& ComputeHelper, double InvalidValue = TNumericLimits<double>::Lowest())"
  },
  {
    "label": "ClosestID()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "ClosestID(const FVector& Sample, FVoronoiComputeHelper& ComputeHelper)"
  }
]