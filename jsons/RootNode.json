[
  {
    "label": "NodeChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeChain"
  },
  {
    "label": "SameRootConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameRootConfig"
  },
  {
    "label": "RootNodeCopyHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCopyHelper"
  },
  {
    "label": "RootNodeCombineHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCombineHelper"
  },
  {
    "label": "RootNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootNode"
  },
  {
    "label": "ValueConverter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueConverter"
  },
  {
    "label": "SameConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameConfiguration"
  },
  {
    "label": "Tile",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Tile"
  },
  {
    "label": "pairs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "pairs"
  },
  {
    "label": "NodeStruct",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeStruct"
  },
  {
    "label": "NullPred",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NullPred"
  },
  {
    "label": "ValueOnPred",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueOnPred"
  },
  {
    "label": "ValueOffPred",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueOffPred"
  },
  {
    "label": "ValueAllPred",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ValueAllPred"
  },
  {
    "label": "ChildOnPred",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildOnPred"
  },
  {
    "label": "ChildOffPred",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ChildOffPred"
  },
  {
    "label": "BaseIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BaseIter"
  },
  {
    "label": "ChildIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ChildIter"
  },
  {
    "label": "ValueIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ValueIter"
  },
  {
    "label": "DenseIter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DenseIter"
  },
  {
    "label": "ArrayT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArrayT"
  },
  {
    "label": "MyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyArray"
  },
  {
    "label": "ArrayT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ArrayT"
  },
  {
    "label": "MyArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "MyArray"
  },
  {
    "label": "RootNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RootNode"
  },
  {
    "label": "RootNodeCopyHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCopyHelper"
  },
  {
    "label": "RootNodeCombineHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCombineHelper"
  },
  {
    "label": "NodeChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeChain"
  },
  {
    "label": "NodeChain",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "NodeChain"
  },
  {
    "label": "SameRootConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameRootConfig"
  },
  {
    "label": "SameRootConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SameRootConfig"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "RootNodeCopyHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCopyHelper"
  },
  {
    "label": "RootNodeCopyHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCopyHelper"
  },
  {
    "label": "Local",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Local"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "RootNodeCombineHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCombineHelper"
  },
  {
    "label": "RootNodeCombineHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RootNodeCombineHelper"
  },
  {
    "label": "RootNode()",
    "kind": "Method",
    "detail": "Function (explicit)",
    "insertText": "RootNode(const ValueType& background)"
  },
  {
    "label": "RootNode()",
    "kind": "Method",
    "detail": "Function (OtherChildType>)",
    "insertText": "RootNode(const RootNode<OtherChildType>& other,\n        const ValueType& background, const ValueType& foreground, TopologyCopy)"
  },
  {
    "label": "RootNode()",
    "kind": "Method",
    "detail": "Function (OtherChildType>)",
    "insertText": "RootNode(const RootNode<OtherChildType>& other, const ValueType& background, TopologyCopy)"
  },
  {
    "label": "isTileOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTileOn(i)"
  },
  {
    "label": "isTileOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTileOn(i)"
  },
  {
    "label": "isTileOff()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTileOff(i)"
  },
  {
    "label": "isTileOff()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTileOff(i)"
  },
  {
    "label": "isTile()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTile(i)"
  },
  {
    "label": "isTile()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTile(i)"
  },
  {
    "label": "isChild()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isChild(i)"
  },
  {
    "label": "isChild()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isChild(i)"
  },
  {
    "label": "isTile()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTile(i)"
  },
  {
    "label": "isTile()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTile(i)"
  },
  {
    "label": "getChild()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getChild(mIter)"
  },
  {
    "label": "isChild()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isChild(mIter)"
  },
  {
    "label": "cbeginChildOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginChildOn()"
  },
  {
    "label": "cbeginChildOff()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginChildOff()"
  },
  {
    "label": "cbeginChildAll()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginChildAll()"
  },
  {
    "label": "cbeginValueOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginValueOn()"
  },
  {
    "label": "cbeginValueOff()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginValueOff()"
  },
  {
    "label": "cbeginValueAll()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "cbeginValueAll()"
  },
  {
    "label": "setBackground()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setBackground(const ValueType& value, bool updateChildNodes)"
  },
  {
    "label": "eraseBackgroundTiles()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "eraseBackgroundTiles()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "expand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "expand(const Coord& xyz)"
  },
  {
    "label": "getNodeLog2Dims()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNodeLog2Dims(std::vector<Index>& dims)"
  },
  {
    "label": "hasSameConfiguration()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasSameConfiguration(const RootNode<OtherChildType>& other)"
  },
  {
    "label": "hasCompatibleValueType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasCompatibleValueType(const RootNode<OtherChildType>& other)"
  },
  {
    "label": "setActiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setActiveState(const Coord& xyz, bool on)"
  },
  {
    "label": "setValueOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnly(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "setValueOn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOn(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(const Coord& xyz)"
  },
  {
    "label": "setValueOff()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOff(const Coord& xyz, const ValueType& value)"
  },
  {
    "label": "modifyValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValue(const Coord& xyz, const ModifyOp& op)"
  },
  {
    "label": "modifyValueAndActiveState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValueAndActiveState(const Coord& xyz, const ModifyOp& op)"
  },
  {
    "label": "fill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "denseFill()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "denseFill(const CoordBBox& bbox, const ValueType& value, bool active = true)"
  },
  {
    "label": "voxelizeActiveTiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "voxelizeActiveTiles(bool threaded = true)"
  },
  {
    "label": "readTopology()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "readTopology(std::istream&, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream&, bool fromHalf = false)"
  },
  {
    "label": "readBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "readBuffers(std::istream&, const CoordBBox&, bool fromHalf = false)"
  },
  {
    "label": "setValueAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueAndCache(const Coord& xyz, const ValueType& value, AccessorT&)"
  },
  {
    "label": "setValueOnlyAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOnlyAndCache(const Coord& xyz, const ValueType& value, AccessorT&)"
  },
  {
    "label": "modifyValueAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValueAndCache(const Coord& xyz, const ModifyOp& op, AccessorT&)"
  },
  {
    "label": "modifyValueAndActiveStateAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "modifyValueAndActiveStateAndCache(const Coord& xyz, const ModifyOp& op, AccessorT&)"
  },
  {
    "label": "setValueOffAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setValueOffAndCache(const Coord& xyz, const ValueType& value, AccessorT&)"
  },
  {
    "label": "setActiveStateAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setActiveStateAndCache(const Coord& xyz, bool on, AccessorT&)"
  },
  {
    "label": "clip()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clip(const CoordBBox&)"
  },
  {
    "label": "addLeaf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLeaf(LeafNodeType* leaf)"
  },
  {
    "label": "addLeafAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addLeafAndCache(LeafNodeType* leaf, AccessorT&)"
  },
  {
    "label": "addChild()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "addChild(ChildType* child)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTile(const Coord& xyz, const ValueType& value, bool state)"
  },
  {
    "label": "addTile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTile(Index level, const Coord& xyz, const ValueType& value, bool state)"
  },
  {
    "label": "addTileAndCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addTileAndCache(Index level, const Coord& xyz, const ValueType&, bool state, AccessorT&)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(value_type nodePtr)"
  },
  {
    "label": "getNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getNodes(ArrayT& array)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "push_back(value_type nodePtr)"
  },
  {
    "label": "stealNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stealNodes(ArrayT& array, const ValueType& value, bool state)"
  },
  {
    "label": "merge()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "merge(RootNode& other)"
  },
  {
    "label": "topologyUnion()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyUnion(const RootNode<OtherChildType>& other, const bool preserveTiles = false)"
  },
  {
    "label": "topologyIntersection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyIntersection(const RootNode<OtherChildType>& other)"
  },
  {
    "label": "topologyDifference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologyDifference(const RootNode<OtherChildType>& other)"
  },
  {
    "label": "combine()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine(RootNode& other, CombineOp&, bool prune = false)"
  },
  {
    "label": "combine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "combine2(const RootNode& other0, const OtherRootNode& other1,\n                  CombineOp& op, bool prune = false)"
  },
  {
    "label": "visit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit(VisitorOp&)"
  },
  {
    "label": "visit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "visit2(OtherRootNodeType& other, VisitorOp&)"
  },
  {
    "label": "findOrAddCoord()",
    "kind": "Method",
    "detail": "Function (MapIter)",
    "insertText": "findOrAddCoord(const Coord& xyz)"
  },
  {
    "label": "enforceSameConfiguration()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enforceSameConfiguration(const RootNode<OtherChildType>& other)"
  },
  {
    "label": "enforceCompatibleValueTypes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "enforceCompatibleValueTypes(const RootNode<OtherChildType>& other)"
  },
  {
    "label": "doCombine2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doCombine2(const RootNode&, const OtherRootNode&, CombineOp&, bool prune)"
  },
  {
    "label": "doVisit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit(RootNodeT&, VisitorOp&)"
  },
  {
    "label": "doVisit2()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "doVisit2(RootNodeT&, OtherRootNodeT&, VisitorOp&)"
  },
  {
    "label": "ValueT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "ValueT(val)"
  },
  {
    "label": "configurations()",
    "kind": "Method",
    "detail": "Function (incompatible)",
    "insertText": "configurations(\" << thisDims[0];\n        for (size_t i = 1, N = thisDims.size()"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, tile.value, tile.active)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, tile.value, tile.active)"
  },
  {
    "label": "isTileOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTileOn(iter)"
  },
  {
    "label": "isTileOn()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "isTileOn(iter)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, tile.value, tile.active)"
  },
  {
    "label": "origin()",
    "kind": "Method",
    "detail": "Function (Coord)",
    "insertText": "origin(vec)"
  },
  {
    "label": "bgTile()",
    "kind": "Method",
    "detail": "Function (Tile)",
    "insertText": "bgTile(mBackground, /*active=*/false)"
  },
  {
    "label": "bgTile()",
    "kind": "Method",
    "detail": "Function (Tile)",
    "insertText": "bgTile(mBackground, /*active=*/false)"
  },
  {
    "label": "copyOfTable()",
    "kind": "Method",
    "detail": "Function (MapType)",
    "insertText": "copyOfTable(mTable)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground, false)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground, false)"
  },
  {
    "label": "setChild()",
    "kind": "Method",
    "detail": "Function (tile)",
    "insertText": "setChild(iter, *child)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground, false)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground, false)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground, false)"
  },
  {
    "label": "ChildT()",
    "kind": "Method",
    "detail": "Function (new)",
    "insertText": "ChildT(xyz, mBackground, false)"
  },
  {
    "label": "swappedOp()",
    "kind": "Method",
    "detail": "Function (CombineOp>)",
    "insertText": "swappedOp(op)"
  },
  {
    "label": "copyOfSelf()",
    "kind": "Method",
    "detail": "Function (RootNodeT)",
    "insertText": "copyOfSelf(self.mBackground)"
  },
  {
    "label": "copyOfOther()",
    "kind": "Method",
    "detail": "Function (OtherRootNodeT)",
    "insertText": "copyOfOther(other.mBackground)"
  }
]