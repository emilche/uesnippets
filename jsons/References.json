[
  {
    "label": "TRemoveReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRemoveReference"
  },
  {
    "label": "TDecayNonReference",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDecayNonReference"
  },
  {
    "label": "TDecay",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDecay"
  },
  {
    "label": "TRemovePointer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TRemovePointer"
  },
  {
    "label": "RetType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Templates / TypeTraits . h \" namespace uLang { template<T> struct TRemoveReference { using Type = T ; } ; template<T> struct TRemoveReference<T&> { using Type = T ; } ; template<T> struct TRemoveReference<T&&> { using Type = T ; } ; namespace Private { template<T> struct TDecayNonReference { using Type = TRemoveCV<T>::Type ; } ; template<T> struct TDecayNonReference<T [ ]> { using Type = T* ; } ; template<T,uint32_t N> struct TDecayNonReference<T [ N ]> { using Type = T* ; } ; template<RetType,. . . Params> struct TDecayNonReference<)",
    "insertText": "RetType(Params...)"
  },
  {
    "label": "RetType()",
    "kind": "Method",
    "detail": "Function (using Type =)",
    "insertText": "RetType(*)(Params...)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (} ; } template<T> struct TDecay { using Type = Private::TDecayNonReference<TRemoveReference<T>::Type>::Type ; } ; template<T> using TDecayT = TDecay<T>::Type ; template<T> struct TRemovePointer { typedef T Type ; } ; template<T> struct TRemovePointer<T*> { typedef T Type ; } ; template<T> ULANG_FORCEINLINE TRemoveReference<T>::Type&&)",
    "insertText": "Move(T&& Obj)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (using CastType = TRemoveReference<T>::Type ;)",
    "insertText": "static_assert(TIsLValueReferenceType<T>::Value, \"Move called on an rvalue\")"
  },
  {
    "label": "MoveIfPossible()",
    "kind": "Method",
    "detail": "Function (} template<T> ULANG_FORCEINLINE TRemoveReference<T>::Type&&)",
    "insertText": "MoveIfPossible(T&& Obj)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (using CastType = TRemoveReference<T>::Type ;)",
    "insertText": "return(CastType&&)"
  },
  {
    "label": "ForwardArg()",
    "kind": "Method",
    "detail": "Function (} template<T> ULANG_FORCEINLINE T&&)",
    "insertText": "ForwardArg(typename TRemoveReference<T>::Type& Obj)"
  },
  {
    "label": "ForwardArg()",
    "kind": "Method",
    "detail": "Function (} template<T> ULANG_FORCEINLINE T&&)",
    "insertText": "ForwardArg(typename TRemoveReference<T>::Type&& Obj)"
  }
]