[
  {
    "label": "Triangle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Triangle"
  },
  {
    "label": "Triangle()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_MATH_TRIANGLE_H # define NV_MATH_TRIANGLE_H # include<nvmath / nvmath . h> # include<nvmath / Vector . h> # include<nvmath / Box . h> namespace nv { class Triangle { public :)",
    "insertText": "Triangle()"
  },
  {
    "label": "Triangle()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "Triangle(Vector3::Arg v0, Vector3::Arg v1, Vector3::Arg v2)"
  },
  {
    "label": "bounds()",
    "kind": "Method",
    "detail": "Function (v [ 0 ] = v0 ; v [ 1 ] = v1 ; v [ 2 ] = v2 ; } Box)",
    "insertText": "bounds()"
  },
  {
    "label": "clearBounds()",
    "kind": "Method",
    "detail": "Function (Box bounds ; bounds .)",
    "insertText": "clearBounds()"
  },
  {
    "label": "addPointToBounds()",
    "kind": "Method",
    "detail": "Function (bounds .)",
    "insertText": "addPointToBounds(v[0])"
  },
  {
    "label": "addPointToBounds()",
    "kind": "Method",
    "detail": "Function (bounds .)",
    "insertText": "addPointToBounds(v[1])"
  },
  {
    "label": "addPointToBounds()",
    "kind": "Method",
    "detail": "Function (bounds .)",
    "insertText": "addPointToBounds(v[2])"
  },
  {
    "label": "cross()",
    "kind": "Method",
    "detail": "Function (Vector3 n =)",
    "insertText": "cross(v[1]-v[0], v[2]-v[0])"
  },
  {
    "label": "triBoxOverlap()",
    "kind": "Method",
    "detail": "Function (} Vector3 v [ 3 ] ; } ; bool)",
    "insertText": "triBoxOverlap(Vector3::Arg boxcenter, Vector3::Arg boxhalfsize, const Triangle & triangle)"
  },
  {
    "label": "triBoxOverlapNoBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "triBoxOverlapNoBounds(Vector3::Arg boxcenter, Vector3::Arg boxhalfsize, const Triangle & triangle)"
  },
  {
    "label": "rayTest_Moller()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rayTest_Moller(const Triangle & t, Vector3::Arg orig, Vector3::Arg dir, float * out_t, float * out_u, float * out_v)"
  },
  {
    "label": "rayTest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "rayTest(const Triangle & t, Vector3::Arg orig, Vector3::Arg dir, float * out_t, float * out_u, float * out_v)"
  },
  {
    "label": "overlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "overlap(const Triangle & t, const Box & b)"
  },
  {
    "label": "center()",
    "kind": "Method",
    "detail": "Function (Vector3 center = b .)",
    "insertText": "center()"
  },
  {
    "label": "extents()",
    "kind": "Method",
    "detail": "Function (Vector3 extents = b .)",
    "insertText": "extents()"
  },
  {
    "label": "overlap()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "overlap(const Box & b, const Triangle & t)"
  },
  {
    "label": "overlapNoBounds()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "overlapNoBounds(const Triangle & t, const Box & b)"
  }
]