[
  {
    "label": "FMovieSceneChannelValueHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneChannelValueHelper"
  },
  {
    "label": "FMovieSceneKeyStructHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneKeyStructHelper"
  },
  {
    "label": "IChannelValueHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IChannelValueHelper"
  },
  {
    "label": "TChannelValueHelper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TChannelValueHelper"
  },
  {
    "label": "FMovieSceneKeyStructHelper()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneChannelHandle . h \" # include \" Channels / MovieSceneChannelTraits . h \" # include \" Containers / Array . h \" # include \" Containers / ArrayView . h \" # include \" CoreTypes . h \" # include \" Curves / KeyHandle . h \" # include \" Evaluation / MovieSceneRootOverridePath . h \" # include \" Misc / FrameNumber . h \" # include \" Misc / InlineValue . h \" # include \" Misc / Optional . h \" # include \" Templates / Tuple . h \" # include \" Templates / UnrealTemplate . h \" struct FMovieSceneChannelValueHelper ; struct FMovieSceneKeyStructHelper {)",
    "insertText": "FMovieSceneKeyStructHelper()"
  },
  {
    "label": "FMovieSceneKeyStructHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMovieSceneKeyStructHelper(const FMovieSceneKeyStructHelper&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FMovieSceneKeyStructHelper&)",
    "insertText": "operator(const FMovieSceneKeyStructHelper&)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(FMovieSceneChannelValueHelper&& InHelper)"
  },
  {
    "label": "SetStartingValues()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStartingValues()"
  },
  {
    "label": "GetUnifiedKeyTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameNumber>)",
    "insertText": "GetUnifiedKeyTime()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(FFrameNumber InUnifiedTime)"
  },
  {
    "label": "FMovieSceneChannelValueHelper()",
    "kind": "Method",
    "detail": "Function (private : TOptional<FFrameNumber> UnifiedKeyTime ; TArray<FMovieSceneChannelValueHelper> Helpers ; } ; struct FMovieSceneChannelValueHelper { template<ChannelType,ValueType>)",
    "insertText": "FMovieSceneChannelValueHelper(const TMovieSceneChannelHandle<ChannelType>& InChannel, ValueType* InUserValue, TArrayView<const FKeyHandle> AllKeyHandles)"
  },
  {
    "label": "FMovieSceneChannelValueHelper()",
    "kind": "Method",
    "detail": "Function (template<ChannelType,ValueType>)",
    "insertText": "FMovieSceneChannelValueHelper(const TMovieSceneChannelHandle<ChannelType>& InChannel, ValueType* InUserValue, TOptional<TTuple<FKeyHandle, FFrameNumber>> InKeyHandleAndTime)"
  },
  {
    "label": "FindFirstKey()",
    "kind": "Method",
    "detail": "Function (template<ChannelType> TOptional<TTuple<FKeyHandle,FFrameNumber>>)",
    "insertText": "FindFirstKey(ChannelType* InChannel, TArrayView<const FKeyHandle> AllKeyHandles)"
  },
  {
    "label": "IChannelValueHelper()",
    "kind": "Method",
    "detail": "Function (struct IChannelValueHelper { ~)",
    "insertText": "IChannelValueHelper()"
  },
  {
    "label": "SetUserValueFromTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetUserValueFromTime(FFrameNumber InUnifiedTime)"
  },
  {
    "label": "SetKeyFromUserValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyFromUserValue(FFrameNumber InUnifiedTime)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TOptional<TTuple<FKeyHandle,FFrameNumber>> KeyHandleAndTime ; } ; IChannelValueHelper*)",
    "insertText": "operator()"
  },
  {
    "label": "TChannelValueHelper()",
    "kind": "Method",
    "detail": "Function (} private : TInlineValue<IChannelValueHelper> Impl ; } ; namespace MovieSceneImpl { template<ChannelType,ValueType> struct TChannelValueHelper : FMovieSceneChannelValueHelper::IChannelValueHelper {)",
    "insertText": "TChannelValueHelper(const TMovieSceneChannelHandle<ChannelType>& InChannel, ValueType* InValue) : ChannelHandle(InChannel), UserValue(InValue)"
  },
  {
    "label": "EvaluateChannel()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ;)",
    "insertText": "EvaluateChannel(Channel, InUnifiedTime, *UserValue)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ChannelType* Channel = ChannelHandle .)",
    "insertText": "Get()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (using namespace UE::MovieScene ;)",
    "insertText": "if(Channel && KeyHandleAndTime.IsSet())"
  },
  {
    "label": "AssignValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AssignValue(Channel, Handle, *UserValue)"
  },
  {
    "label": "SetKeyTime()",
    "kind": "Method",
    "detail": "Function (Channel ->)",
    "insertText": "SetKeyTime(Handle, InUnifiedTime)"
  },
  {
    "label": "FMovieSceneChannelValueHelper()",
    "kind": "Method",
    "detail": "Function (} } TMovieSceneChannelHandle<ChannelType> ChannelHandle ; ValueType* UserValue ; } ; } template<ChannelType,ValueType>)",
    "insertText": "FMovieSceneChannelValueHelper(const TMovieSceneChannelHandle<ChannelType>& InChannel, ValueType* InUserValue, TArrayView<const FKeyHandle> AllKeyHandles) : Impl(MovieSceneImpl::TChannelValueHelper<ChannelType, ValueType>(InChannel, InUserValue))"
  },
  {
    "label": "FindFirstKey()",
    "kind": "Method",
    "detail": "Function (Impl -> KeyHandleAndTime =)",
    "insertText": "FindFirstKey(InChannel.Get(), AllKeyHandles)"
  },
  {
    "label": "FMovieSceneChannelValueHelper()",
    "kind": "Method",
    "detail": "Function (} template<ChannelType,ValueType>)",
    "insertText": "FMovieSceneChannelValueHelper(const TMovieSceneChannelHandle<ChannelType>& InChannel, ValueType* InUserValue, TOptional<TTuple<FKeyHandle, FFrameNumber>> InKeyHandleAndTime) : Impl(MovieSceneImpl::TChannelValueHelper<ChannelType, ValueType>(InChannel, InUserValue))"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (auto ChannelData = InChannel ->)",
    "insertText": "GetData()"
  },
  {
    "label": "GetIndex()",
    "kind": "Method",
    "detail": "Function (const int32 KeyIndex = ChannelData .)",
    "insertText": "GetIndex(Handle)"
  },
  {
    "label": "FFrameNumber()",
    "kind": "Method",
    "detail": "Function (} } } return TOptional<TTuple<FKeyHandle,)",
    "insertText": "FFrameNumber()"
  }
]