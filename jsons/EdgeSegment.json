[
  {
    "label": "FTopologicalLoop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalLoop"
  },
  {
    "label": "FTopologicalEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalEdge"
  },
  {
    "label": "FGrid",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGrid"
  },
  {
    "label": "FThinZone",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone"
  },
  {
    "label": "FThinZone2DFinder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FThinZone2DFinder"
  },
  {
    "label": "FTopologicalVertex",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTopologicalVertex"
  },
  {
    "label": "FEdgeSegment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEdgeSegment"
  },
  {
    "label": "FEdgeSegment()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / Types . h \" # include \" Math / Geometry . h \" # include \" Core / HaveStates . h \" # include \" Math / Boundary . h \" # include \" Math / Point . h \" # include \" Math / SlopeUtils . h \" namespace UE::CADKernel { class FTopologicalLoop ; class FTopologicalEdge ; class FGrid ; class FThinZone ; class FThinZone2DFinder ; class FTopologicalVertex ; class FEdgeSegment : public FHaveStates { private : FTopologicalEdge* Edge ; double Coordinates [ 2 ] ; FPoint2D USSPoints [ 2 ] ; FEdgeSegment* NextSegment ; FEdgeSegment* PreviousSegment ; FEdgeSegment* ClosedSegment ; FSurfacicBoundary Boundary ; double AxisMin ; double SquareDistanceToClosedSegment ; double Length ; FIdent ChainIndex ; FIdent Id ; FIdent LastId ; public :)",
    "insertText": "FEdgeSegment() : Edge(nullptr) , NextSegment(nullptr) , PreviousSegment(nullptr) , ClosedSegment(nullptr) , AxisMin(0.) , SquareDistanceToClosedSegment(HUGE_VALUE) , Length(-1.) , ChainIndex(Ident::Undefined) , Id(0)"
  },
  {
    "label": "FEdgeSegment()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "FEdgeSegment(const FEdgeSegment& Segment)"
  },
  {
    "label": "FEdgeSegment()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FEdgeSegment()"
  },
  {
    "label": "SetBoundarySegment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBoundarySegment(bool bInIsInnerLoop, FTopologicalEdge* InEdge, double InStartU, double InEndU, const FPoint2D& InStartPoint, const FPoint2D& InEndPoint)"
  },
  {
    "label": "SetInner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetInner()"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (} Edge = InEdge ; Coordinates [ ELimit::Start ] = InStartU ; Coordinates [ ELimit::End ] = InEndU ; USSPoints [ ELimit::Start ] = InStartPoint ; USSPoints [ ELimit::End ] = InEndPoint ; NextSegment = nullptr ; PreviousSegment = nullptr ; ClosedSegment = nullptr ; SquareDistanceToClosedSegment = HUGE_VAL ; Length = USSPoints [ ELimit::Start ] .)",
    "insertText": "Distance(USSPoints[ELimit::End])"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Id = + + LastId ; ChainIndex = Ident::Undefined ; Boundary .)",
    "insertText": "Set(USSPoints[ELimit::Start], USSPoints[ELimit::End])"
  },
  {
    "label": "UpdateReferences()",
    "kind": "Method",
    "detail": "Function (AxisMin = Boundary [ EIso::IsoU ] . Min + Boundary [ EIso::IsoV ] . Min ; } ; void)",
    "insertText": "UpdateReferences(TMap<int32, FEdgeSegment*>& Map)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (TFunction<)",
    "insertText": "void(FEdgeSegment*&)> UpdateReference = [&](FEdgeSegment*& Reference)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FEdgeSegment** NewReference = Map .)",
    "insertText": "Find(Reference->GetId())"
  },
  {
    "label": "UpdateReference()",
    "kind": "Method",
    "detail": "Function (Reference =* NewReference ; } else { Reference = nullptr ; } } } ;)",
    "insertText": "UpdateReference(NextSegment)"
  },
  {
    "label": "UpdateReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReference(PreviousSegment)"
  },
  {
    "label": "UpdateReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateReference(ClosedSegment)"
  },
  {
    "label": "GetAxeMin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "GetAxeMin()"
  },
  {
    "label": "IsInner()",
    "kind": "Method",
    "detail": "Function (ChainIndex = index ; } bool)",
    "insertText": "IsInner()"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (States | = EHaveStates::IsInner ; } FIdent)",
    "insertText": "GetId()"
  },
  {
    "label": "ComputeEdgePoint()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "ComputeEdgePoint(double EdgeParamU)"
  },
  {
    "label": "GetExtemity()",
    "kind": "Method",
    "detail": "Function (} const FPoint2D&)",
    "insertText": "GetExtemity(const ELimit Limit)"
  },
  {
    "label": "ComputeUnorientedSlopeOf()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeUnorientedSlopeOf(const FEdgeSegment* Segment)"
  },
  {
    "label": "ComputeOrientedSlopeOf()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeOrientedSlopeOf(const FEdgeSegment* Segment)"
  },
  {
    "label": "ComputeUnorientedSlopeOf()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeUnorientedSlopeOf(const FPoint2D& Middle, const FPoint2D& Projection)"
  },
  {
    "label": "ComputeOrientedSlopeOf()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeOrientedSlopeOf(const FPoint2D& Middle, const FPoint2D& Projection)"
  },
  {
    "label": "GetNext()",
    "kind": "Method",
    "detail": "Function (} FEdgeSegment*)",
    "insertText": "GetNext()"
  },
  {
    "label": "SetCloseSegment()",
    "kind": "Method",
    "detail": "Function (ClosedSegment -> ClosedSegment = nullptr ; } ClosedSegment = nullptr ; SquareDistanceToClosedSegment = HUGE_VAL ; } void)",
    "insertText": "SetCloseSegment(FEdgeSegment* InSegmentA, double InDistance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ClosedSegment = InSegmentA ; SquareDistanceToClosedSegment = InDistance ;)",
    "insertText": "if(InDistance < InSegmentA->SquareDistanceToClosedSegment)"
  },
  {
    "label": "GetCloseSquareDistance()",
    "kind": "Method",
    "detail": "Function (InSegmentA -> ClosedSegment = this ; InSegmentA -> SquareDistanceToClosedSegment = InDistance ; } } double)",
    "insertText": "GetCloseSquareDistance()"
  },
  {
    "label": "SetPrevious()",
    "kind": "Method",
    "detail": "Function (NextSegment = Segment ; Segment ->)",
    "insertText": "SetPrevious(this)"
  },
  {
    "label": "ComputeEdgeCoordinate()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeEdgeCoordinate(const double SegmentU)"
  },
  {
    "label": "ComputeDeltaU()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeDeltaU(const double DeltaLength)"
  },
  {
    "label": "ProjectPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "ProjectPoint(const FPoint2D& PointToProject, double& SegmentU)"
  },
  {
    "label": "SetPrevious()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "SetPrevious(FEdgeSegment* Segment)"
  }
]