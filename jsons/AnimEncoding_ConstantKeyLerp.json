[
  {
    "label": "FMemoryWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryWriter"
  },
  {
    "label": "AEFConstantKeyLerpShared",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AEFConstantKeyLerpShared"
  },
  {
    "label": "AEFConstantKeyLerp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AEFConstantKeyLerp"
  },
  {
    "label": "ByteSwapRotationIn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AnimEncoding . h \" # include \" AnimationCompression . h \" class FMemoryWriter ; class AEFConstantKeyLerpShared : public AnimEncodingLegacyBase { public : void)",
    "insertText": "ByteSwapRotationIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader, uint8*& RotTrackData, int32 NumKeysRot)"
  },
  {
    "label": "ByteSwapTranslationIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapTranslationIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader, uint8*& TransTrackData, int32 NumKeysTrans)"
  },
  {
    "label": "ByteSwapScaleIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapScaleIn(FUECompressedAnimData& CompressedData, FMemoryReader& MemoryReader, uint8*& ScaleTrackData, int32 NumKeysScale)"
  },
  {
    "label": "ByteSwapRotationOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapRotationOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter, uint8*& RotTrackData, int32 NumKeysRot)"
  },
  {
    "label": "ByteSwapTranslationOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapTranslationOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter, uint8*& TransTrackData, int32 NumKeysTrans)"
  },
  {
    "label": "ByteSwapScaleOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ByteSwapScaleOut(FUECompressedAnimData& CompressedData, FMemoryWriter& MemoryWriter, uint8*& ScaleTrackData, int32 NumKeysScale)"
  },
  {
    "label": "GetBoneAtomRotation()",
    "kind": "Method",
    "detail": "Function (} ; template<int32 FORMAT> class AEFConstantKeyLerp : public AEFConstantKeyLerpShared { public : void)",
    "insertText": "GetBoneAtomRotation(FTransform& OutAtom, const FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex)"
  },
  {
    "label": "GetBoneAtomTranslation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneAtomTranslation(FTransform& OutAtom, const FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex)"
  },
  {
    "label": "GetBoneAtomScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoneAtomScale(FTransform& OutAtom, const FAnimSequenceDecompressionContext& DecompContext, int32 TrackIndex)"
  },
  {
    "label": "GetPoseRotations()",
    "kind": "Method",
    "detail": "Function (# if USE_ANIMATION_CODEC_BATCH_SOLVER void)",
    "insertText": "GetPoseRotations(TArrayView<FTransform>& Atoms, const BoneTrackArray& DesiredPairs, FAnimSequenceDecompressionContext& DecompContext)"
  },
  {
    "label": "GetPoseTranslations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPoseTranslations(TArrayView<FTransform>& Atoms, const BoneTrackArray& DesiredPairs, FAnimSequenceDecompressionContext& DecompContext)"
  },
  {
    "label": "GetPoseScales()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPoseScales(TArrayView<FTransform>& Atoms, const BoneTrackArray& DesiredPairs, FAnimSequenceDecompressionContext& DecompContext)"
  },
  {
    "label": "FUECompressedAnimData()",
    "kind": "Method",
    "detail": "Function (const FUECompressedAnimData& AnimData = static_cast<const)",
    "insertText": "FUECompressedAnimData(DecompContext.CompressedAnimData)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const int32* RESTRICT TrackData = AnimData . CompressedTrackOffsets .)",
    "insertText": "GetData() + (TrackIndex * 4)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (int32 RotKeysOffset = TrackData [ 2 ] ; int32 NumRotKeys = TrackData [ 3 ] ; const uint8* RESTRICT RotStream = AnimData . CompressedByteStream .)",
    "insertText": "GetData()"
  },
  {
    "label": "ACF_Float96NoW()",
    "kind": "Method",
    "detail": "Function (FQuat4f R0 ; DecompressRotation<)",
    "insertText": "ACF_Float96NoW(R0, RotStream, RotStream)"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (OutAtom .)",
    "insertText": "SetRotation(FQuat(R0))"
  },
  {
    "label": "TimeToIndex()",
    "kind": "Method",
    "detail": "Function (} else { int32 Index0 ; int32 Index1 ; float Alpha =)",
    "insertText": "TimeToIndex(DecompContext.GetPlayableLength(), DecompContext.GetRelativePosition(), NumRotKeys, DecompContext.Interpolation, Index0, Index1)"
  },
  {
    "label": "RotationStreamOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "RotationStreamOffset(FORMAT == ACF_IntervalFixed32NoW) ? (sizeof(float)*6)"
  },
  {
    "label": "RotationStreamOffset()",
    "kind": "Method",
    "detail": "Function (const uint8* RESTRICT KeyData0 = RotStream +)",
    "insertText": "RotationStreamOffset(Index0*CompressedRotationStrides[FORMAT]*CompressedRotationNum[FORMAT])"
  },
  {
    "label": "RotationStreamOffset()",
    "kind": "Method",
    "detail": "Function (const uint8* RESTRICT KeyData1 = RotStream +)",
    "insertText": "RotationStreamOffset(Index1*CompressedRotationStrides[FORMAT]*CompressedRotationNum[FORMAT])"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (FQuat4f R0 ; FQuat4f R1 ; DecompressRotation<)",
    "insertText": "FORMAT(R0, RotStream, KeyData0)"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (DecompressRotation<)",
    "insertText": "FORMAT(R1, RotStream, KeyData1)"
  },
  {
    "label": "FastLerp()",
    "kind": "Method",
    "detail": "Function (FQuat4f BlendedQuat =)",
    "insertText": "FastLerp(R0, R1, Alpha)"
  },
  {
    "label": "Normalize()",
    "kind": "Method",
    "detail": "Function (BlendedQuat .)",
    "insertText": "Normalize()"
  },
  {
    "label": "SetRotation()",
    "kind": "Method",
    "detail": "Function (OutAtom .)",
    "insertText": "SetRotation(FQuat(BlendedQuat))"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (FQuat4f R0 ; DecompressRotation<)",
    "insertText": "FORMAT(R0, RotStream, KeyData)"
  },
  {
    "label": "TimeToIndex()",
    "kind": "Method",
    "detail": "Function (int32 Index0 ; int32 Index1 ; float Alpha =)",
    "insertText": "TimeToIndex(DecompContext.GetPlayableLength(), DecompContext.GetRelativePosition(), NumTransKeys, DecompContext.Interpolation, Index0, Index1)"
  },
  {
    "label": "TransStreamOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "TransStreamOffset((FORMAT == ACF_IntervalFixed32NoW) && NumTransKeys > 1) ? (sizeof(float)*6)"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (const uint8* RESTRICT KeyData0 = TransStream + TransStreamOffset + Index0* CompressedTranslationStrides [ FORMAT ]* CompressedTranslationNum [ FORMAT ] ; const uint8* RESTRICT KeyData1 = TransStream + TransStreamOffset + Index1* CompressedTranslationStrides [ FORMAT ]* CompressedTranslationNum [ FORMAT ] ; FVector3f P0 ; FVector3f P1 ; DecompressTranslation<)",
    "insertText": "FORMAT(P0, TransStream, KeyData0)"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (DecompressTranslation<)",
    "insertText": "FORMAT(P1, TransStream, KeyData1)"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (OutAtom .)",
    "insertText": "SetTranslation((FVector)FMath::Lerp( P0, P1, Alpha ))"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (} else { const uint8* RESTRICT KeyData = TransStream + TransStreamOffset + Index0* CompressedTranslationStrides [ FORMAT ]* CompressedTranslationNum [ FORMAT ] ; FVector3f P0 ; DecompressTranslation<)",
    "insertText": "FORMAT(P0, TransStream, KeyData)"
  },
  {
    "label": "SetTranslation()",
    "kind": "Method",
    "detail": "Function (OutAtom .)",
    "insertText": "SetTranslation((FVector)P0)"
  },
  {
    "label": "GetOffsetData()",
    "kind": "Method",
    "detail": "Function (const int32 ScaleKeysOffset = AnimData . CompressedScaleOffsets .)",
    "insertText": "GetOffsetData(TrackIndex, 0)"
  },
  {
    "label": "GetOffsetData()",
    "kind": "Method",
    "detail": "Function (const int32 NumScaleKeys = AnimData . CompressedScaleOffsets .)",
    "insertText": "GetOffsetData(TrackIndex, 1)"
  },
  {
    "label": "TimeToIndex()",
    "kind": "Method",
    "detail": "Function (int32 Index0 ; int32 Index1 ; float Alpha =)",
    "insertText": "TimeToIndex(DecompContext.GetPlayableLength(), DecompContext.GetRelativePosition(), NumScaleKeys, DecompContext.Interpolation, Index0, Index1)"
  },
  {
    "label": "ScaleStreamOffset()",
    "kind": "Method",
    "detail": "Function (const int32)",
    "insertText": "ScaleStreamOffset((FORMAT == ACF_IntervalFixed32NoW) && NumScaleKeys > 1) ? (sizeof(float)*6)"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (const uint8* RESTRICT KeyData0 = ScaleStream + ScaleStreamOffset + Index0* CompressedScaleStrides [ FORMAT ]* CompressedScaleNum [ FORMAT ] ; const uint8* RESTRICT KeyData1 = ScaleStream + ScaleStreamOffset + Index1* CompressedScaleStrides [ FORMAT ]* CompressedScaleNum [ FORMAT ] ; FVector3f P0 ; FVector3f P1 ; DecompressScale<)",
    "insertText": "FORMAT(P0, ScaleStream, KeyData0)"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (DecompressScale<)",
    "insertText": "FORMAT(P1, ScaleStream, KeyData1)"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (OutAtom .)",
    "insertText": "SetScale3D((FVector)FMath::Lerp( P0, P1, Alpha ))"
  },
  {
    "label": "FORMAT()",
    "kind": "Method",
    "detail": "Function (} else { const uint8* RESTRICT KeyData = ScaleStream + ScaleStreamOffset + Index0* CompressedScaleStrides [ FORMAT ]* CompressedScaleNum [ FORMAT ] ; FVector3f P0 ; DecompressScale<)",
    "insertText": "FORMAT(P0, ScaleStream, KeyData)"
  },
  {
    "label": "SetScale3D()",
    "kind": "Method",
    "detail": "Function (OutAtom .)",
    "insertText": "SetScale3D((FVector)P0)"
  }
]