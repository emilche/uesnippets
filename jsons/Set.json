[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TCompare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TCompare"
  },
  {
    "label": "ST_DLL_LINK",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ST_DLL_LINK"
  },
  {
    "label": "CNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CNode"
  },
  {
    "label": "iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "iterator"
  },
  {
    "label": "CSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSet"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ExportBegin . h \" # include<cstdlib> # include<cassert> # include \" Array . h \" # include \" BlockPool . h \" # include \" Comparators . h \" # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "CSet()",
    "kind": "Method",
    "detail": "Function (template<class T,class TCompare = CLess<T>,bool bUseCustomAllocator = true> class ST_DLL_LINK CSet { protected : class CNode ; typedef CBlockPool<bUseCustomAllocator> CPool ; typedef CBlockPool<bUseCustomAllocator>::CReference CNodeReference ; public :)",
    "insertText": "CSet(size_t uiStartingPoolSize = 10)"
  },
  {
    "label": "CSet()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CSet(const CSet& cRight)"
  },
  {
    "label": "CSet()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CSet(void)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear(void)"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty(void)"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "size(void)"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "capacity(void)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CSet&)",
    "insertText": "operator(const CSet& cRight)"
  },
  {
    "label": "iterator()",
    "kind": "Method",
    "detail": "Function (class iterator { class CSet ; public :)",
    "insertText": "iterator(CNodeReference pNode = NULL, const CPool* pPool = NULL)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const iterator& cRight)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (iterator&)",
    "insertText": "operator(void)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (protected : CNode*)",
    "insertText": "Ptr(void)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (CNodeReference m_pNode ; const CPool* m_pPool ; } ; typedef iterator const_iterator ; iterator)",
    "insertText": "begin(void)"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "rbegin(void)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "end(void)"
  },
  {
    "label": "find()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "find(const T& tData)"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "insert(const T& tData)"
  },
  {
    "label": "erase()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "erase(iterator iterWhere)"
  },
  {
    "label": "lower()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "lower(const T& tData)"
  },
  {
    "label": "higher()",
    "kind": "Method",
    "detail": "Function (iterator)",
    "insertText": "higher(const T& tData)"
  },
  {
    "label": "lower_and_higher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "lower_and_higher(const T& tData, iterator& iterLower, iterator& iterHigher)"
  },
  {
    "label": "ResizePool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizePool(size_t uiSize)"
  },
  {
    "label": "Rebalance()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "Rebalance(CNodeReference pCurrent)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (CNodeReference)",
    "insertText": "Allocate(const T& tData, CNodeReference pParent = NULL)"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deallocate(CNodeReference pData)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (CNode*)",
    "insertText": "Ptr(CNodeReference pNode)"
  },
  {
    "label": "CNode()",
    "kind": "Method",
    "detail": "Function (class CNode { class CSet ; class iterator ; public :)",
    "insertText": "CNode(const T& tData, CNodeReference pParent = NULL)"
  },
  {
    "label": "DeleteChildren()",
    "kind": "Method",
    "detail": "Function (T m_tData ; private : void)",
    "insertText": "DeleteChildren(CSet* pSet)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CNode&)",
    "insertText": "operator(const CNode& cR)"
  }
]