[
  {
    "label": "FNetReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FNetReferenceCollector"
  },
  {
    "label": "FPolymorphicStructNetSerializerInternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPolymorphicStructNetSerializerInternal"
  },
  {
    "label": "TPolymorphicStructNetSerializerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPolymorphicStructNetSerializerImpl"
  },
  {
    "label": "FQuantizedData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedData"
  },
  {
    "label": "FSourceItemTypeDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceItemTypeDeleter"
  },
  {
    "label": "TPolymorphicArrayStructNetSerializerImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TPolymorphicArrayStructNetSerializerImpl"
  },
  {
    "label": "FQuantizedItem",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedItem"
  },
  {
    "label": "FQuantizedArray",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedArray"
  },
  {
    "label": "FSourceArrayItemTypeDeleter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceArrayItemTypeDeleter"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" NetSerializer . h \" # include \" PolymorphicNetSerializer . h \" # include \" Iris / Core / IrisLog . h \" # include \" Iris / Core / NetObjectReference . h \" # include \" Iris / Serialization / NetBitStreamReader . h \" # include \" Iris / Serialization / NetBitStreamWriter . h \" # include \" Iris / ReplicationState / ReplicationStateDescriptor . h \" # include \" Iris / ReplicationSystem / ReplicationOperations . h \" # include \" Net / Core / Trace / NetTrace . h \" namespace UE::Net { class FNetReferenceCollector ; const FName NetError_PolymorphicStructNetSerializer_InvalidStructType ; } namespace UE::Net::Private { struct FPolymorphicStructNetSerializerInternal { protected : void*)",
    "insertText": "Alloc(FNetSerializationContext& Context, SIZE_T Size, SIZE_T Alignment)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(FNetSerializationContext& Context, void* Ptr)"
  },
  {
    "label": "CollectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectReferences(FNetSerializationContext& Context, UE::Net::FNetReferenceCollector& Collector, const FNetSerializerChangeMaskParam& OuterChangeMaskInfo, const uint8* RESTRICT SrcInternalBuffer, const FReplicationStateDescriptor* Descriptor)"
  },
  {
    "label": "CloneQuantizedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneQuantizedState(FNetSerializationContext& Context, uint8* RESTRICT DstInternalBuffer, const uint8* RESTRICT SrcInternalBuffer, const FReplicationStateDescriptor* Descriptor)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} ; } namespace UE::Net { template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (struct FQuantizedData { void* StructData ; uint32 TypeIndex ; } ; bool bHasDynamicState = true ; bool bIsForwardingSerializer = true ; bool bHasCustomNetReference = true ; typedef ExternalSourceType SourceType ; typedef FQuantizedData QuantizedType ; typedef FPolymorphicStructNetSerializerConfig ConfigType ; void)",
    "insertText": "Serialize(FNetSerializationContext&, const FNetSerializeArgs&)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FNetSerializationContext&, const FNetDeserializeArgs&)"
  },
  {
    "label": "SerializeDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeDelta(FNetSerializationContext&, const FNetSerializeDeltaArgs&)"
  },
  {
    "label": "DeserializeDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeDelta(FNetSerializationContext&, const FNetDeserializeDeltaArgs&)"
  },
  {
    "label": "Quantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quantize(FNetSerializationContext&, const FNetQuantizeArgs&)"
  },
  {
    "label": "Dequantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dequantize(FNetSerializationContext&, const FNetDequantizeArgs&)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEqual(FNetSerializationContext&, const FNetIsEqualArgs&)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate(FNetSerializationContext&, const FNetValidateArgs&)"
  },
  {
    "label": "CloneDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneDynamicState(FNetSerializationContext&, const FNetCloneDynamicStateArgs&)"
  },
  {
    "label": "FreeDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDynamicState(FNetSerializationContext&, const FNetFreeDynamicStateArgs&)"
  },
  {
    "label": "CollectNetReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectNetReferences(FNetSerializationContext&, const FNetCollectReferencesArgs&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : typedef TPolymorphicStructNetSerializerImpl<ExternalSourceType,ExternalSourceItemType,GetItem> ThisType ; typedef ExternalSourceItemType SourceItemType ; typedef FPolymorphicNetSerializerScriptStructCache::FTypeInfo FTypeInfo ; struct FSourceItemTypeDeleter { void)",
    "insertText": "operator()(SourceItemType* Object)"
  },
  {
    "label": "GetScriptStruct()",
    "kind": "Method",
    "detail": "Function (UScriptStruct* ScriptStruct = Object ->)",
    "insertText": "GetScriptStruct()"
  },
  {
    "label": "DestroyStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStruct ->)",
    "insertText": "DestroyStruct(Object)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Object)"
  },
  {
    "label": "InitTypeCache()",
    "kind": "Method",
    "detail": "Function (} } ; template<SerializerType> void)",
    "insertText": "InitTypeCache()"
  },
  {
    "label": "FPolymorphicNetSerializerScriptStructCache()",
    "kind": "Method",
    "detail": "Function (FPolymorphicNetSerializerScriptStructCache* Cache = const_cast<)",
    "insertText": "FPolymorphicNetSerializerScriptStructCache(&SerializerType::DefaultConfig.RegisteredTypes)"
  },
  {
    "label": "InitForType()",
    "kind": "Method",
    "detail": "Function (Cache ->)",
    "insertText": "InitForType(SerializerType::SourceItemType::StaticStruct())"
  },
  {
    "label": "InternalFreeItem()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "InternalFreeItem(FNetSerializationContext& Context, const ConfigType& Config, QuantizedType& Value)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} ; template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)"
  },
  {
    "label": "MaxArrayItems()",
    "kind": "Method",
    "detail": "Function (struct FQuantizedItem { void* StructData ; uint32 TypeIndex ; } ; struct FQuantizedArray { FQuantizedItem* Items ; uint32 NumItems ; } ; bool bHasDynamicState = true ; bool bIsForwardingSerializer = true ; bool bHasCustomNetReference = true ; typedef ExternalSourceType SourceType ; typedef FQuantizedArray QuantizedType ; typedef ExternalSourceArrayItemType SourceArrayItemType ; typedef FPolymorphicArrayStructNetSerializerConfig ConfigType ; typedef FPolymorphicNetSerializerScriptStructCache::FTypeInfo FTypeInfo ; const uint32 ArrayItemBits = 8 U ; const uint32)",
    "insertText": "MaxArrayItems(1U << ArrayItemBits)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FNetSerializationContext&, const FNetSerializeArgs& Args)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(FNetSerializationContext&, const FNetDeserializeArgs& Args)"
  },
  {
    "label": "SerializeDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeDelta(FNetSerializationContext&, const FNetSerializeDeltaArgs& Args)"
  },
  {
    "label": "DeserializeDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeDelta(FNetSerializationContext&, const FNetDeserializeDeltaArgs& Args)"
  },
  {
    "label": "Quantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quantize(FNetSerializationContext&, const FNetQuantizeArgs& Args)"
  },
  {
    "label": "Dequantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dequantize(FNetSerializationContext&, const FNetDequantizeArgs& Args)"
  },
  {
    "label": "IsEqual()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEqual(FNetSerializationContext&, const FNetIsEqualArgs& Args)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Validate(FNetSerializationContext&, const FNetValidateArgs& Args)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (struct FSourceArrayItemTypeDeleter { void)",
    "insertText": "operator()(SourceArrayItemType* Object)"
  },
  {
    "label": "InitForType()",
    "kind": "Method",
    "detail": "Function (Cache ->)",
    "insertText": "InitForType(SerializerType::SourceArrayItemType::StaticStruct())"
  },
  {
    "label": "InternalAllocateItemArray()",
    "kind": "Method",
    "detail": "Function (} private : using FItemNetSerializer = TPolymorphicStructNetSerializerImpl<ExternalSourceType,ExternalSourceArrayItemType,nullptr> ; void)",
    "insertText": "InternalAllocateItemArray(FNetSerializationContext& Context, QuantizedType& Value, uint32 NumItems)"
  },
  {
    "label": "InternalFreeItemArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFreeItemArray(FNetSerializationContext& Context, QuantizedType& Value, const FPolymorphicArrayStructNetSerializerConfig& Config)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} ; template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::Serialize(FNetSerializationContext& Context, const FNetSerializeArgs& Args)"
  },
  {
    "label": "GetBitStreamWriter()",
    "kind": "Method",
    "detail": "Function (FNetBitStreamWriter& Writer =* Context .)",
    "insertText": "GetBitStreamWriter()"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType& Value =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source)"
  },
  {
    "label": "ConfigType()",
    "kind": "Method",
    "detail": "Function (const ConfigType& Config =* static_cast<const)",
    "insertText": "ConfigType(Args.NetSerializerConfig)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (const FTypeInfo* TypeInfo = Config . RegisteredTypes .)",
    "insertText": "GetTypeInfo(Value.TypeIndex)"
  },
  {
    "label": "CA_ASSUME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CA_ASSUME(TypeInfo != nullptr)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(Value.TypeIndex, FPolymorphicNetSerializerScriptStructCache::RegisteredTypeBits)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (UE::Net::)",
    "insertText": "Serialize(Context, static_cast<const uint8*>(Value.StructData), TypeInfo->Descriptor)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::Deserialize(FNetSerializationContext& Context, const FNetDeserializeArgs& Args)"
  },
  {
    "label": "GetBitStreamReader()",
    "kind": "Method",
    "detail": "Function (FNetBitStreamReader& Reader =* Context .)",
    "insertText": "GetBitStreamReader()"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (QuantizedType& Target =* reinterpret_cast<)",
    "insertText": "QuantizedType(Args.Target)"
  },
  {
    "label": "InternalFreeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFreeItem(Context, Config, Target)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (QuantizedType TempValue = { } ;)",
    "insertText": "if(const bool bIsValidType = Reader.ReadBool())"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (const uint32 TypeIndex = Reader .)",
    "insertText": "ReadBits(FPolymorphicNetSerializerScriptStructCache::RegisteredTypeBits)"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = TypeInfo -> Descriptor ; TempValue . StructData =)",
    "insertText": "Alloc(Context, Descriptor->InternalSize, Descriptor->InternalAlignment)"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (TempValue . TypeIndex = TypeIndex ;)",
    "insertText": "Memzero(TempValue.StructData, Descriptor->InternalSize)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deserialize(Context, static_cast<uint8*>(TempValue.StructData), Descriptor)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (} else { Context .)",
    "insertText": "SetError(NetError_PolymorphicStructNetSerializer_InvalidStructType)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} } Target = TempValue ; } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::SerializeDelta(FNetSerializationContext& Context, const FNetSerializeDeltaArgs& Args)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType& PrevValue =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Prev)"
  },
  {
    "label": "SerializeDelta()",
    "kind": "Method",
    "detail": "Function (UE::Net::)",
    "insertText": "SerializeDelta(Context, static_cast<const uint8*>(Value.StructData), static_cast<const uint8*>(PrevValue.StructData), TypeInfo->Descriptor)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} } } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::DeserializeDelta(FNetSerializationContext& Context, const FNetDeserializeDeltaArgs& Args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (QuantizedType TempValue = { } ;)",
    "insertText": "if(const bool bIsSameType = Reader.ReadBool())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 TypeIndex = PrevValue . TypeIndex ;)",
    "insertText": "if(const FTypeInfo* TypeInfo = Config.RegisteredTypes.GetTypeInfo(TypeIndex))"
  },
  {
    "label": "DeserializeDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeDelta(Context, static_cast<uint8*>(TempValue.StructData), static_cast<uint8*>(PrevValue.StructData), Descriptor)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} } } Target = TempValue ; } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::Quantize(FNetSerializationContext& Context, const FNetQuantizeArgs& Args)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (SourceType& SourceValue =* reinterpret_cast<)",
    "insertText": "SourceType(Args.Source)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(Context, TargetValue.StructData)"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<SourceItemType>& Item =)",
    "insertText": "GetItem(SourceValue)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct* ScriptStruct = Item .)",
    "insertText": "IsValid() ? Item->GetScriptStruct()"
  },
  {
    "label": "GetTypeIndex()",
    "kind": "Method",
    "detail": "Function (const uint32 TypeIndex = Config . RegisteredTypes .)",
    "insertText": "GetTypeIndex(ScriptStruct)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (QuantizedType TempValue = { } ;)",
    "insertText": "if(TypeIndex != FPolymorphicNetSerializerScriptStructCache::InvalidTypeIndex)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (const FPolymorphicNetSerializerScriptStructCache::FTypeInfo* TypeInfo = Config . RegisteredTypes .)",
    "insertText": "GetTypeInfo(TypeIndex)"
  },
  {
    "label": "Quantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quantize(Context, static_cast<uint8*>(TempValue.StructData), reinterpret_cast<const uint8*>(Item.Get()), Descriptor)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(ScriptStruct)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} } TargetValue = TempValue ; } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::Dequantize(FNetSerializationContext& Context, const FNetDequantizeArgs& Args)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (SourceType& TargetValue =* reinterpret_cast<)",
    "insertText": "SourceType(Args.Target)"
  },
  {
    "label": "SourceItemType()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = TypeInfo -> Descriptor ; const UScriptStruct* ScriptStruct = TypeInfo -> ScriptStruct ; SourceItemType* NewData = static_cast<)",
    "insertText": "SourceItemType(FMemory::Malloc(ScriptStruct->GetStructureSize(), ScriptStruct->GetMinAlignment()))"
  },
  {
    "label": "InitializeStruct()",
    "kind": "Method",
    "detail": "Function (ScriptStruct ->)",
    "insertText": "InitializeStruct(NewData)"
  },
  {
    "label": "Dequantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dequantize(Context, reinterpret_cast<uint8*>(NewData), static_cast<const uint8*>(SourceValue.StructData), Descriptor)"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetItem(TargetValue) = MakeShareable(NewData, FSourceItemTypeDeleter())"
  },
  {
    "label": "GetItem()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "GetItem(TargetValue).Reset()"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> bool TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::IsEqual(FNetSerializationContext& Context, const FNetIsEqualArgs& Args)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType& ValueA =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source0)"
  },
  {
    "label": "QuantizedType()",
    "kind": "Method",
    "detail": "Function (const QuantizedType& ValueB =* reinterpret_cast<const)",
    "insertText": "QuantizedType(Args.Source1)"
  },
  {
    "label": "SourceType()",
    "kind": "Method",
    "detail": "Function (const SourceType& ValueB =* reinterpret_cast<const)",
    "insertText": "SourceType(Args.Source1)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (const FTypeInfo* TypeInfo = Config . RegisteredTypes .)",
    "insertText": "GetTypeInfo(SourceValue.TypeIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TargetValue . TypeIndex = SourceValue . TypeIndex ;)",
    "insertText": "if(TypeInfo)"
  },
  {
    "label": "CloneQuantizedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneQuantizedState(Context, static_cast<uint8*>(TargetValue.StructData), static_cast<const uint8*>(SourceValue.StructData), Descriptor)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} else { TargetValue . StructData = nullptr ; } } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::FreeDynamicState(FNetSerializationContext& Context, const FNetFreeDynamicStateArgs& Args)"
  },
  {
    "label": "InternalFreeItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFreeItem(Context, Config, SourceValue)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::CollectNetReferences(FNetSerializationContext& Context, const FNetCollectReferencesArgs& Args)"
  },
  {
    "label": "FNetReferenceCollector()",
    "kind": "Method",
    "detail": "Function (FNetReferenceCollector& Collector =* reinterpret_cast<UE::)",
    "insertText": "FNetReferenceCollector(Args.Collector)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = TypeInfo ? TypeInfo -> Descriptor : nullptr ;)",
    "insertText": "if(Descriptor != nullptr && EnumHasAnyFlags(Descriptor->Traits, EReplicationStateTraits::HasObjectReference))"
  },
  {
    "label": "CollectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectReferences(Context, Collector, Args.ChangeMaskInfo, static_cast<const uint8*>(Value.StructData), Descriptor)"
  },
  {
    "label": "ExternalSourceItemType()",
    "kind": "Method",
    "detail": "Function (} } template<ExternalSourceType,ExternalSourceItemType,TSharedPtr<)",
    "insertText": "ExternalSourceItemType(*GetItem)(ExternalSourceType&)> void TPolymorphicStructNetSerializerImpl<ExternalSourceType, ExternalSourceItemType, GetItem>::InternalFreeItem(FNetSerializationContext& Context, const ConfigType& Config, QuantizedType& Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = TypeInfo ? TypeInfo -> Descriptor : nullptr ;)",
    "insertText": "if(Value.StructData != nullptr)"
  },
  {
    "label": "FreeDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDynamicState(Context, static_cast<uint8*>(Value.StructData), Descriptor)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Free(Context, Value.StructData)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (Value . StructData = nullptr ; Value . TypeIndex = FPolymorphicNetSerializerScriptStructCache::InvalidTypeIndex ; } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::Serialize(FNetSerializationContext& Context, const FNetSerializeArgs& Args)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(SourceValue.NumItems, ArrayItemBits)"
  },
  {
    "label": "UE_NET_TRACE_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_NET_TRACE_SCOPE(Element, Writer, Context.GetTraceCollector(), ENetTraceVerbosity::VeryVerbose)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (const FQuantizedItem& Item = SourceValue . Items [ It ] ; const FTypeInfo* TypeInfo = Config . RegisteredTypes .)",
    "insertText": "GetTypeInfo(Item.TypeIndex)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(Item.TypeIndex, FPolymorphicNetSerializerScriptStructCache::RegisteredTypeBits)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Context, static_cast<const uint8*>(Item.StructData), TypeInfo->Descriptor)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::Deserialize(FNetSerializationContext& Context, const FNetDeserializeArgs& Args)"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (const uint32 NumItems = Reader .)",
    "insertText": "ReadBits(ArrayItemBits)"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetError(GNetError_BitStreamOverflow)"
  },
  {
    "label": "InternalAllocateItemArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalAllocateItemArray(Context, TargetValue, NumItems)"
  },
  {
    "label": "UE_NET_TRACE_SCOPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_NET_TRACE_SCOPE(Element, Reader, Context.GetTraceCollector(), ENetTraceVerbosity::VeryVerbose)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FQuantizedItem& Item = TargetValue . Items [ It ] ;)",
    "insertText": "if(Reader.ReadBool())"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (Item . TypeIndex = TypeIndex ;)",
    "insertText": "Memzero(Item.StructData, Descriptor->InternalSize)"
  },
  {
    "label": "Deserialize()",
    "kind": "Method",
    "detail": "Function (UE::Net::)",
    "insertText": "Deserialize(Context, static_cast<uint8*>(Item.StructData), Descriptor)"
  },
  {
    "label": "InternalFreeItemArray()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "InternalFreeItemArray(Context, TargetValue, Config)"
  },
  {
    "label": "bSameSizeArray()",
    "kind": "Method",
    "detail": "Function (const uint32 NumItems = Array . NumItems ; const uint32 PrevNumItems = PrevArray . NumItems ; const bool)",
    "insertText": "bSameSizeArray(NumItems == PrevNumItems)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(bSameSizeArray, 1U)"
  },
  {
    "label": "WriteBits()",
    "kind": "Method",
    "detail": "Function (Writer .)",
    "insertText": "WriteBits(NumItems, ArrayItemBits)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(PrevNumItems)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FNetSerializeDeltaArgs ElementArgs = Args ;)",
    "insertText": "for(uint32 ElementIt = 0, ElementEndIt = FPlatformMath::Min(NumItems, PrevNumItems); ElementIt != ElementEndIt; ++ElementIt)"
  },
  {
    "label": "NetSerializerValuePointer()",
    "kind": "Method",
    "detail": "Function (ElementArgs . Source =)",
    "insertText": "NetSerializerValuePointer(&Array.Items[ElementIt])"
  },
  {
    "label": "NetSerializerValuePointer()",
    "kind": "Method",
    "detail": "Function (ElementArgs . Prev =)",
    "insertText": "NetSerializerValuePointer(&PrevArray.Items[ElementIt])"
  },
  {
    "label": "SerializeDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeDelta(Context, ElementArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(NumItems > PrevNumItems)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} } } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::DeserializeDelta(FNetSerializationContext& Context, const FNetDeserializeDeltaArgs& Args)"
  },
  {
    "label": "ReadBits()",
    "kind": "Method",
    "detail": "Function (const uint32 PrevNumItems = PrevArray . NumItems ; const bool bSameSizeArray = ! ! Reader .)",
    "insertText": "ReadBits(1U)"
  },
  {
    "label": "NumItems()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "NumItems(bSameSizeArray ? PrevNumItems : Reader.ReadBits(ArrayItemBits))"
  },
  {
    "label": "InternalAllocateItemArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalAllocateItemArray(Context, Array, NumItems)"
  },
  {
    "label": "DeserializeDelta()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeDelta(Context, ElementArgs)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Context.HasError())"
  },
  {
    "label": "InternalFreeItemArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFreeItemArray(Context, Array, Config)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (TArrayView<const TSharedPtr<SourceArrayItemType>> ItemArray =)",
    "insertText": "GetArray(SourceValue)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (const uint32 NumItems = static_cast<)",
    "insertText": "uint32(ItemArray.Num())"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (Context .)",
    "insertText": "SetError(GNetError_ArraySizeTooLarge)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (const TSharedPtr<SourceArrayItemType>* ItemArrayData = ItemArray .)",
    "insertText": "GetData()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (const SIZE_T ArrayIndex =& SourceItem - ItemArrayData ; const UScriptStruct* ScriptStruct = SourceItem .)",
    "insertText": "IsValid() ? SourceItem->GetScriptStruct()"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memzero(TargetItem.StructData, Descriptor->InternalSize)"
  },
  {
    "label": "Quantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Quantize(Context, static_cast<uint8*>(TargetItem.StructData), reinterpret_cast<const uint8*>(SourceItem.Get()), Descriptor)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} } } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::Dequantize(FNetSerializationContext& Context, const FNetDequantizeArgs& Args)"
  },
  {
    "label": "SetArrayNum()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetArrayNum(TargetValue, SourceValue.NumItems)"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (TArrayView<TSharedPtr<SourceArrayItemType>> TargetArray =)",
    "insertText": "GetArray(TargetValue)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FQuantizedItem& Item = SourceValue . Items [ It ] ;)",
    "insertText": "if(const FPolymorphicNetSerializerScriptStructCache::FTypeInfo* TypeInfo = Config.RegisteredTypes.GetTypeInfo(Item.TypeIndex))"
  },
  {
    "label": "SourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = TypeInfo -> Descriptor ; const UScriptStruct* ScriptStruct = TypeInfo -> ScriptStruct ; SourceArrayItemType* NewData = static_cast<)",
    "insertText": "SourceArrayItemType(FMemory::Malloc(ScriptStruct->GetStructureSize(), ScriptStruct->GetMinAlignment()))"
  },
  {
    "label": "Dequantize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dequantize(Context, reinterpret_cast<uint8*>(NewData), static_cast<const uint8*>(Item.StructData), Descriptor)"
  },
  {
    "label": "MakeShareable()",
    "kind": "Method",
    "detail": "Function (TargetArray [ It ] =)",
    "insertText": "MakeShareable(NewData, FSourceArrayItemTypeDeleter())"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} else { TargetArray [ It ] .)",
    "insertText": "Reset()"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> bool TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::IsEqual(FNetSerializationContext& Context, const FNetIsEqualArgs& Args)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FQuantizedItem& ItemA = ValueA . Items [ It ] ; const FQuantizedItem& ItemB = ValueB . Items [ It ] ;)",
    "insertText": "if(ItemA.TypeIndex != ItemB.TypeIndex)"
  },
  {
    "label": "NumItems()",
    "kind": "Method",
    "detail": "Function (const uint32)",
    "insertText": "NumItems(uint32)ItemArray.Num()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = TypeInfo ? TypeInfo -> Descriptor : nullptr ;)",
    "insertText": "if(Descriptor && EnumHasAnyFlags(Descriptor->Traits, EReplicationStateTraits::HasObjectReference))"
  },
  {
    "label": "CollectReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectReferences(Context, Collector, Args.ChangeMaskInfo, static_cast<const uint8*>(Item.StructData), Descriptor)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::CloneDynamicState(FNetSerializationContext& Context, const FNetCloneDynamicStateArgs& Args)"
  },
  {
    "label": "InternalAllocateItemArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalAllocateItemArray(Context, TargetValue, SourceValue.NumItems)"
  },
  {
    "label": "GetTypeInfo()",
    "kind": "Method",
    "detail": "Function (const FQuantizedItem& SourceItem = SourceValue . Items [ It ] ; FQuantizedItem& TargetItem = TargetValue . Items [ It ] ; const FTypeInfo* TypeInfo = Config . RegisteredTypes .)",
    "insertText": "GetTypeInfo(SourceItem.TypeIndex)"
  },
  {
    "label": "CloneQuantizedState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloneQuantizedState(Context, static_cast<uint8*>(TargetItem.StructData), static_cast<const uint8*>(SourceItem.StructData), Descriptor)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} else { TargetItem . StructData = nullptr ; } } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::FreeDynamicState(FNetSerializationContext& Context, const FNetFreeDynamicStateArgs& Args)"
  },
  {
    "label": "InternalFreeItemArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InternalFreeItemArray(Context, SourceValue, Config)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::InternalAllocateItemArray(FNetSerializationContext& Context, QuantizedType& Value, uint32 NumItems)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (const SIZE_T ElementSize =)",
    "insertText": "sizeof(FQuantizedItem)"
  },
  {
    "label": "alignof()",
    "kind": "Method",
    "detail": "Function (const SIZE_T Alignment =)",
    "insertText": "alignof(FQuantizedItem)"
  },
  {
    "label": "FQuantizedItem()",
    "kind": "Method",
    "detail": "Function (Value . Items = static_cast<)",
    "insertText": "FQuantizedItem(FPolymorphicStructNetSerializerInternal::Alloc(Context, ElementSize*NumItems, Alignment))"
  },
  {
    "label": "Memzero()",
    "kind": "Method",
    "detail": "Function (Value . NumItems = NumItems ;)",
    "insertText": "Memzero(Value.Items, ElementSize*NumItems)"
  },
  {
    "label": "ExternalSourceArrayItemType()",
    "kind": "Method",
    "detail": "Function (} else { Value . Items = nullptr ; Value . NumItems = 0 ; } } template<ExternalSourceType,ExternalSourceArrayItemType,TArrayView<TSharedPtr<)",
    "insertText": "ExternalSourceArrayItemType(*GetArray)(ExternalSourceType& Source), void(*SetArrayNum)(ExternalSourceType& Source, SIZE_T Num)> void TPolymorphicArrayStructNetSerializerImpl<ExternalSourceType, ExternalSourceArrayItemType, GetArray, SetArrayNum>::InternalFreeItemArray(FNetSerializationContext& Context, QuantizedType& Value, const FPolymorphicArrayStructNetSerializerConfig& Config)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const FReplicationStateDescriptor* Descriptor = TypeInfo ? TypeInfo -> Descriptor : nullptr ;)",
    "insertText": "if(Item.StructData)"
  },
  {
    "label": "FreeDynamicState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeDynamicState(Context, static_cast<uint8*>(Item.StructData), Descriptor)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "Free(Context, Value.Items[It].StructData)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "Free(Context, Value.Items)"
  }
]