[
  {
    "label": "TestSamplingEventSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestSamplingEventSource"
  },
  {
    "label": "TestBatteryLevelProvider",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestBatteryLevelProvider"
  },
  {
    "label": "TestSamplingEventSource()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_TEST_POWER_MONITOR_TEST_UTILS_H_ # define BASE_TEST_POWER_MONITOR_TEST_UTILS_H_ # include \" base / functional / callback . h \" # include \" base / power_monitor / battery_level_provider . h \" # include \" base / power_monitor / sampling_event_source . h \" # include \" third_party / abseil - cpp / absl / types / optional . h \" namespace base::test { class TestSamplingEventSource : public SamplingEventSource { public :)",
    "insertText": "TestSamplingEventSource()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start(SamplingEventCallback callback)"
  },
  {
    "label": "SimulateEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SimulateEvent()"
  },
  {
    "label": "TestBatteryLevelProvider()",
    "kind": "Method",
    "detail": "Function (private : SamplingEventCallback sampling_event_callback_ ; } ; class TestBatteryLevelProvider : public base::BatteryLevelProvider { public :)",
    "insertText": "TestBatteryLevelProvider()"
  },
  {
    "label": "GetBatteryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBatteryState(base::OnceCallback< void(const absl::optional<base::BatteryLevelProvider::BatteryState>&)> callback)"
  },
  {
    "label": "SetBatteryState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBatteryState(absl::optional<base::BatteryLevelProvider::BatteryState> battery_state)"
  },
  {
    "label": "CreateBatteryState()",
    "kind": "Method",
    "detail": "Function (base::BatteryLevelProvider::BatteryState)",
    "insertText": "CreateBatteryState(int battery_count = 1, bool is_external_power_connected = false, int charge_percent = 100)"
  }
]