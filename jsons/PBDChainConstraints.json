[
  {
    "label": "FPBDChainConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPBDChainConstraints"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPBDChainConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDChainConstraints"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FPBDChainConstraints()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Evolution / IndexedConstraintContainer . h \" # include \" Chaos / PBDParticles . h \" # include \" Chaos / Framework / Parallel . h \" # include \" Chaos / PBDConstraintContainer . h \" # include \" Chaos / DynamicParticles . h \" # include \" Chaos / PBDParticles . h \" namespace Chaos { class FPBDChainConstraints : public FPBDIndexedConstraintContainer { public :)",
    "insertText": "FPBDChainConstraints(const FDynamicParticles& InParticles, TArray<TArray<int32>>&& Constraints, const FReal Coefficient = (FReal)1.) : MConstraints(Constraints), MCoefficient(Coefficient)"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (MDists .)",
    "insertText": "SetNum(MConstraints.Num())"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(MConstraints.Num(), [&](int32 Index) { TArray<FReal> singledists; for (int i = 1; i < Constraints[Index].Num(); ++i) { const FVec3& P1 = InParticles.X(Constraints[Index][i - 1]); const FVec3& P2 = InParticles.X(Constraints[Index][i]); FReal Distance = (P1 - P2).Size(); singledists.Add(Distance); } MDists[Index] = singledists; })"
  },
  {
    "label": "FPBDChainConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPBDChainConstraints()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt, const int32 InConstraintIndex)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const int32 Index = InConstraintIndex ;)",
    "insertText": "for(int i = 1; i < MConstraints[Index].Num(); ++i)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (int32 P = MConstraints [ Index ] [ i ] ; int32 PM1 = MConstraints [ Index ] [ i - 1 ] ; const FVec3& P1 = InParticles .)",
    "insertText": "P(PM1)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (const FVec3& P2 = InParticles .)",
    "insertText": "P(P)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (FVec3 Difference = P1 - P2 ; FReal Distance = Difference .)",
    "insertText": "Size()"
  },
  {
    "label": "Delta()",
    "kind": "Method",
    "detail": "Function (FVec3 Direction = Difference / Distance ; FVec3)",
    "insertText": "Delta(Distance - MDists[Index][i - 1])"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (InParticles .)",
    "insertText": "P(PM1) -= (1 - MCoefficient)"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(MConstraints.Num(), [&](int32 ConstraintIndex) { Apply(InParticles, Dt, ConstraintIndex); })"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Apply(FPBDParticles& InParticles, const FReal Dt, const TArray<int32>& InConstraintIndices)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(InConstraintIndices.Num(), [&](int32 ConstraintIndicesIndex) { Apply(InParticles, Dt, InConstraintIndices[ConstraintIndicesIndex]); })"
  }
]