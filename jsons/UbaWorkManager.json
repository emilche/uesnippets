[
  {
    "label": "WorkTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkTracker"
  },
  {
    "label": "WorkManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkManager"
  },
  {
    "label": "WorkManagerImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WorkManagerImpl"
  },
  {
    "label": "Worker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Worker"
  },
  {
    "label": "Work",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Work"
  },
  {
    "label": "TrackWorkScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TrackWorkScope"
  },
  {
    "label": "Context",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Context"
  },
  {
    "label": "TrackWorkStart()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" UbaEvent . h \" # include \" UbaMemory . h \" namespace uba { class WorkTracker { public : u32)",
    "insertText": "TrackWorkStart(const tchar* desc)"
  },
  {
    "label": "AddWork()",
    "kind": "Method",
    "detail": "Function (} } ; class WorkManager { public : void)",
    "insertText": "AddWork(const Function<void()>& work, u32 count, const tchar* desc, bool highPriority = false)"
  },
  {
    "label": "GetWorkerCount()",
    "kind": "Method",
    "detail": "Function (u32)",
    "insertText": "GetWorkerCount()"
  },
  {
    "label": "DoWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoWork(u32 count = 1)"
  },
  {
    "label": "TrackWorkEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TrackWorkEnd(u32 id)"
  },
  {
    "label": "SetWorkTracker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWorkTracker(WorkTracker* workTracker)"
  },
  {
    "label": "GetWorkTracker()",
    "kind": "Method",
    "detail": "Function (m_workTracker = workTracker ; } WorkTracker*)",
    "insertText": "GetWorkTracker()"
  },
  {
    "label": "WorkManagerImpl()",
    "kind": "Method",
    "detail": "Function (protected : Atomic<WorkTracker*> m_workTracker ; } ; class WorkManagerImpl : public WorkManager { public :)",
    "insertText": "WorkManagerImpl(u32 workerCount)"
  },
  {
    "label": "WorkManagerImpl()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WorkManagerImpl()"
  },
  {
    "label": "FlushWork()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushWork()"
  },
  {
    "label": "PushWorker()",
    "kind": "Method",
    "detail": "Function (private : struct Worker ; void)",
    "insertText": "PushWorker(Worker* worker)"
  },
  {
    "label": "PushWorkerNoLock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PushWorkerNoLock(Worker* worker)"
  },
  {
    "label": "PopWorkerNoLock()",
    "kind": "Method",
    "detail": "Function (Worker*)",
    "insertText": "PopWorkerNoLock()"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (Vector<Worker*> m_workers ; struct Work { Function<)",
    "insertText": "void()"
  },
  {
    "label": "TrackWorkScope()",
    "kind": "Method",
    "detail": "Function (TString desc ; } ; ReaderWriterLock m_workLock ; List<Work> m_work ; Atomic<u32> m_activeWorkerCount ; Atomic<u32> m_workCounter ; ReaderWriterLock m_availableWorkersLock ; Worker* m_firstAvailableWorker = nullptr ; } ; struct TrackWorkScope {)",
    "insertText": "TrackWorkScope(WorkManager& wm, const tchar* desc) : workManager(wm), workIndex(wm.TrackWorkStart(desc))"
  },
  {
    "label": "TrackWorkScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TrackWorkScope()"
  },
  {
    "label": "TrackWorkEnd()",
    "kind": "Method",
    "detail": "Function (workManager .)",
    "insertText": "TrackWorkEnd(workIndex)"
  },
  {
    "label": "ParallelFor()",
    "kind": "Method",
    "detail": "Function (} WorkManager& workManager ; u32 workIndex ; } ; template<TContainer,TFunc> void)",
    "insertText": "ParallelFor(u32 workCount, TContainer& container, const TFunc& func, const tchar* description, bool highPriority)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "defined(__clang_analyzer__)"
  },
  {
    "label": "doneEvent()",
    "kind": "Method",
    "detail": "Function (TContainer::iterator it ; TContainer::iterator end ; u32 refCount ; u32 activeCount ; bool isDone ; ReaderWriterLock lock ; Event* doneEvent ; } ; Event)",
    "insertText": "doneEvent(true)"
  },
  {
    "label": "Context()",
    "kind": "Method",
    "detail": "Function (auto context = new)",
    "insertText": "Context()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (context -> it = container .)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (context -> end = container .)",
    "insertText": "end()"
  },
  {
    "label": "func()",
    "kind": "Method",
    "detail": "Function (context -> refCount = workCount + 1 ; context -> activeCount = 0 ; context -> isDone = false ; context -> doneEvent =& doneEvent ; auto work = [ context,funcCopy =)",
    "insertText": "func()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (u32 active = 0 ;)",
    "insertText": "while(true)"
  },
  {
    "label": "SCOPED_WRITE_LOCK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SCOPED_WRITE_LOCK(context->lock, l)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context -> activeCount - = active ; context -> isDone = context -> it = = context -> end ;)",
    "insertText": "if(context->isDone)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (context -> doneEvent ->)",
    "insertText": "Set()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (context -> doneEvent = nullptr ; })",
    "insertText": "if(--context->refCount)"
  },
  {
    "label": "Leave()",
    "kind": "Method",
    "detail": "Function (l .)",
    "insertText": "Leave()"
  },
  {
    "label": "funcCopy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "funcCopy(it2)"
  },
  {
    "label": "AddWork()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "AddWork(work, workCount, description, highPriority)"
  },
  {
    "label": "work()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "work()"
  }
]