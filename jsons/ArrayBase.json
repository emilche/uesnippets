[
  {
    "label": "MatrixWrapper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MatrixWrapper"
  },
  {
    "label": "ArrayBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ArrayBase"
  },
  {
    "label": "EIGEN_DOC_UNARY_ADDONS()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_ARRAYBASE_H # define EIGEN_ARRAYBASE_H namespace Eigen { template<ExpressionType> class MatrixWrapper ; template<Derived> class ArrayBase : public DenseBase<Derived> { public : # ifndef EIGEN_PARSED_BY_DOXYGEN typedef ArrayBase StorageBaseType ; typedef ArrayBase Eigen_BaseClassForSpecializationOfGlobalMathFuncImpl ; typedef internal::traits<Derived>::StorageKind StorageKind ; typedef internal::traits<Derived>::Scalar Scalar ; typedef internal::packet_traits<Scalar>::type PacketScalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef DenseBase<Derived> Base ; using Base::RowsAtCompileTime ; using Base::ColsAtCompileTime ; using Base::SizeAtCompileTime ; using Base::MaxRowsAtCompileTime ; using Base::MaxColsAtCompileTime ; using Base::MaxSizeAtCompileTime ; using Base::IsVectorAtCompileTime ; using Base::Flags ; using Base::derived ; using Base::const_cast_derived ; using Base::rows ; using Base::cols ; using Base::size ; using Base::coeff ; using Base::coeffRef ; using Base::lazyAssign ; using Base::operator - ; using Base::operator = ; using Base::operator + = ; using Base::operator - = ; using Base::operator* = ; using Base::operator / = ; typedef Base::CoeffReturnType CoeffReturnType ; # endif # ifndef EIGEN_PARSED_BY_DOXYGEN typedef Base::PlainObject PlainObject ; typedef CwiseNullaryOp<internal::scalar_constant_op<Scalar>,PlainObject> ConstantReturnType ; # endif # define EIGEN_CURRENT_STORAGE_BASE_CLASS Eigen::ArrayBase # define)",
    "insertText": "EIGEN_DOC_UNARY_ADDONS(X,Y) # include \"../plugins/MatrixCwiseUnaryOps.h\" # include \"../plugins/ArrayCwiseUnaryOps.h\" # include \"../plugins/CommonCwiseBinaryOps.h\" # include \"../plugins/MatrixCwiseBinaryOps.h\" # include \"../plugins/ArrayCwiseBinaryOps.h\" # ifdef EIGEN_ARRAYBASE_PLUGIN # include EIGEN_ARRAYBASE_PLUGIN # endif #undef EIGEN_CURRENT_STORAGE_BASE_CLASS #undef EIGEN_DOC_UNARY_ADDONS EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived& operator=(const ArrayBase& other)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived())"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const Scalar &value)"
  },
  {
    "label": "setConstant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setConstant(value)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const Scalar& scalar)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived> EIGEN_DEVICE_FUNC EIGEN_STRONG_INLINE Derived&)",
    "insertText": "operator(const ArrayBase<OtherDerived>& other)"
  },
  {
    "label": "array()",
    "kind": "Method",
    "detail": "Function (public : EIGEN_DEVICE_FUNC ArrayBase<Derived>&)",
    "insertText": "array()"
  },
  {
    "label": "matrix()",
    "kind": "Method",
    "detail": "Function (} EIGEN_DEVICE_FUNC const MatrixWrapper<const Derived>)",
    "insertText": "matrix()"
  },
  {
    "label": "EIGEN_DEFAULT_COPY_CONSTRUCTOR()",
    "kind": "Method",
    "detail": "Function (} protected :)",
    "insertText": "EIGEN_DEFAULT_COPY_CONSTRUCTOR(ArrayBase) EIGEN_DEFAULT_EMPTY_CONSTRUCTOR_AND_DESTRUCTOR(ArrayBase) private: explicit ArrayBase(Index)"
  },
  {
    "label": "ArrayBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ArrayBase(Index,Index)"
  },
  {
    "label": "ArrayBase()",
    "kind": "Method",
    "detail": "Function (template<OtherDerived>)",
    "insertText": "ArrayBase(const ArrayBase<OtherDerived>&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (protected : template<OtherDerived> Derived&)",
    "insertText": "operator(const MatrixBase<OtherDerived>&)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(std::ptrdiff_t(sizeof(typename OtherDerived::Scalar))==-1,YOU_CANNOT_MIX_ARRAYS_AND_MATRICES)"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived(), internal::sub_assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived(), internal::add_assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived(), internal::mul_assign_op<Scalar,typename OtherDerived::Scalar>())"
  },
  {
    "label": "call_assignment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "call_assignment(derived(), other.derived(), internal::div_assign_op<Scalar,typename OtherDerived::Scalar>())"
  }
]