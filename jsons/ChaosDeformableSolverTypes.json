[
  {
    "label": "UDeformableSolverComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UDeformableSolverComponent"
  },
  {
    "label": "FFleshCacheAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFleshCacheAdapter"
  },
  {
    "label": "FDeformableSolverProperties",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeformableSolverProperties"
  },
  {
    "label": "FDeformablePackage",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeformablePackage"
  },
  {
    "label": "FGameThreadAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGameThreadAccessor"
  },
  {
    "label": "FPhysicsThreadAccessor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPhysicsThreadAccessor"
  },
  {
    "label": "FDeformableDebugParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeformableDebugParams"
  },
  {
    "label": "FDeformableXPBDCorotatedParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeformableXPBDCorotatedParams"
  },
  {
    "label": "FDeformableSolverProperties()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / DebugDrawQueue . h \" # include \" Chaos / Deformable / ChaosDeformableSolverProxy . h \" # include \" Chaos / Deformable / ChaosDeformableCollisionsProxy . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" CoreMinimal . h \" class UDeformableSolverComponent ; class FFleshCacheAdapter ; namespace Chaos::Softs { struct FDeformableSolverProperties {)",
    "insertText": "FDeformableSolverProperties(int32 InNumSolverSubSteps = 2, int32 InNumSolverIterations = 5, bool InFixTimeStep = false, FSolverReal InTimeStepSize = (FSolverReal)0.05, bool InCacheToFile = false, bool InbEnableKinematics = true, bool InbUseFloor = true, bool InbUseGridBasedConstraints = false, FSolverReal InGridDx = (FSolverReal)1., bool InbDoQuasistatics = false, FSolverReal InEMesh = (FSolverReal)100000., bool InbDoBlended = false, FSolverReal InBlendedZeta = (FSolverReal).1, FSolverReal InDamping = (FSolverReal)0, bool InbEnableGravity = true, bool InbEnableCorotatedConstraints = true, bool InbEnablePositionTargets = true, bool InbUseGaussSeidelConstraints = false, bool InbUseSOR = true, FSolverReal InOmegaSOR = (FSolverReal)1.6, bool InbUseGSNeohookean = false, bool InbDoSpringCollision = false, bool InbDoInComponentSpringCollision = false, int32 InNRingExcluded = 1, FSolverReal InSpringCollisionSearchRadius = (FSolverReal)0, FSolverReal InSpringCollisionStiffness = (FSolverReal)500., bool InbAllowSliding = true, bool InbDoSphereRepulsion = false, FSolverReal InSphereRepulsionRadius = (FSolverReal)0, FSolverReal InSphereRepulsionStiffness = (FSolverReal)500., bool InbDoMuscleActivation = false, bool InbCollideWithFullMesh = false, bool InbEnableDynamicSprings = true) : NumSolverSubSteps(InNumSolverSubSteps) , NumSolverIterations(InNumSolverIterations) , FixTimeStep(InFixTimeStep) , TimeStepSize(InTimeStepSize) , CacheToFile(InCacheToFile) , bEnableKinematics(InbEnableKinematics) , bUseFloor(InbUseFloor) , bUseGridBasedConstraints(InbUseGridBasedConstraints) , GridDx(InGridDx) , bDoQuasistatics(InbDoQuasistatics) , EMesh(InEMesh) , bDoBlended(InbDoBlended) , BlendedZeta(InBlendedZeta) , Damping(InDamping) , bEnableGravity(InbEnableGravity) , bEnableCorotatedConstraints(InbEnableCorotatedConstraints) , bEnablePositionTargets(InbEnablePositionTargets) , bUseGaussSeidelConstraints(InbUseGaussSeidelConstraints) , bUseSOR(InbUseSOR) , OmegaSOR(InOmegaSOR) , bUseGSNeohookean(InbUseGSNeohookean) , bDoSpringCollision(InbDoSpringCollision) , bDoInComponentSpringCollision(InbDoInComponentSpringCollision) , NRingExcluded(InNRingExcluded) , SpringCollisionSearchRadius(InSpringCollisionSearchRadius) , SpringCollisionStiffness(InSpringCollisionStiffness) , bAllowSliding(InbAllowSliding) , bDoSphereRepulsion(InbDoSphereRepulsion) , SphereRepulsionRadius(InSphereRepulsionRadius) , SphereRepulsionStiffness(InSphereRepulsionStiffness) , bDoMuscleActivation(InbDoMuscleActivation) , bCollideWithFullMesh(InbCollideWithFullMesh) , bEnableDynamicSprings(InbEnableDynamicSprings)"
  },
  {
    "label": "TimeStepSize()",
    "kind": "Method",
    "detail": "Function (} int32 NumSolverSubSteps = 5 ; int32 NumSolverIterations = 5 ; bool FixTimeStep = false ; FSolverReal)",
    "insertText": "TimeStepSize(FSolverReal)"
  },
  {
    "label": "GridDx()",
    "kind": "Method",
    "detail": "Function (bool CacheToFile = false ; bool bEnableKinematics = true ; bool bUseFloor = true ; bool bUseGridBasedConstraints = false ; FSolverReal)",
    "insertText": "GridDx(FSolverReal)"
  },
  {
    "label": "EMesh()",
    "kind": "Method",
    "detail": "Function (bool bDoQuasistatics = false ; FSolverReal)",
    "insertText": "EMesh(FSolverReal)"
  },
  {
    "label": "BlendedZeta()",
    "kind": "Method",
    "detail": "Function (bool bDoBlended = false ; FSolverReal)",
    "insertText": "BlendedZeta(FSolverReal)"
  },
  {
    "label": "Damping()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "Damping(FSolverReal)"
  },
  {
    "label": "OmegaSOR()",
    "kind": "Method",
    "detail": "Function (bool bEnableGravity = true ; bool bEnableCorotatedConstraints = true ; bool bEnablePositionTargets = true ; bool bUseGaussSeidelConstraints = false ; bool bUseSOR = true ; FSolverReal)",
    "insertText": "OmegaSOR(FSolverReal)"
  },
  {
    "label": "SpringCollisionSearchRadius()",
    "kind": "Method",
    "detail": "Function (bool bUseGSNeohookean = false ; bool bDoSpringCollision = false ; bool bDoInComponentSpringCollision = false ; int32 NRingExcluded = 1 ; FSolverReal)",
    "insertText": "SpringCollisionSearchRadius(FSolverReal)"
  },
  {
    "label": "SpringCollisionStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "SpringCollisionStiffness(FSolverReal)"
  },
  {
    "label": "SphereRepulsionRadius()",
    "kind": "Method",
    "detail": "Function (bool bAllowSliding = true ; bool bDoSphereRepulsion = false ; FSolverReal)",
    "insertText": "SphereRepulsionRadius(FSolverReal)"
  },
  {
    "label": "SphereRepulsionStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "SphereRepulsionStiffness(FSolverReal)"
  },
  {
    "label": "FDeformablePackage()",
    "kind": "Method",
    "detail": "Function (bool bDoMuscleActivation = false ; bool bCollideWithFullMesh = false ; bool bEnableDynamicSprings = true ; } ; typedef TSharedPtr<const FThreadingProxy::FBuffer> FDataMapValue ; typedef TMap<FThreadingProxy::FKey,FDataMapValue> FDeformableDataMap ; struct FDeformablePackage {)",
    "insertText": "FDeformablePackage()"
  },
  {
    "label": "FDeformablePackage()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDeformablePackage(int32 InFrame, FDeformableDataMap&& InMap) : Frame(InFrame) , ObjectMap(InMap)"
  },
  {
    "label": "FGameThreadAccessor()",
    "kind": "Method",
    "detail": "Function (} int32 Frame = INDEX_NONE ; FDeformableDataMap ObjectMap ; } ; class FGameThreadAccessor { public :)",
    "insertText": "FGameThreadAccessor()"
  },
  {
    "label": "FPhysicsThreadAccessor()",
    "kind": "Method",
    "detail": "Function (} } ; class FPhysicsThreadAccessor { public :)",
    "insertText": "FPhysicsThreadAccessor()"
  },
  {
    "label": "IsDebugDrawingEnabled()",
    "kind": "Method",
    "detail": "Function (} } ; struct FDeformableDebugParams { bool bDoDrawTetrahedralParticles = false ; bool bDoDrawKinematicParticles = false ; bool bDoDrawTransientKinematicParticles = false ; bool bDoDrawRigidCollisionGeometry = false ; FSolverReal ParticleRadius = 5 . f ; bool)",
    "insertText": "IsDebugDrawingEnabled()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return Chaos::)",
    "insertText": "GetInstance().IsDebugDrawingEnabled()"
  }
]