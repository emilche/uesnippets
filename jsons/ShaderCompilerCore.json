[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "IShaderFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IShaderFormat"
  },
  {
    "label": "FShaderCommonCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCommonCompileJob"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderPipelineCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCompileJob"
  },
  {
    "label": "ECompilerFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECompilerFlags"
  },
  {
    "label": "FShaderCompilerResourceTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerResourceTable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FExtraShaderCompilerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtraShaderCompilerSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShaderCompilerInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerInput"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "FShaderCompilerError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerError"
  },
  {
    "label": "FShaderCompilerOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerOutput"
  },
  {
    "label": "FSCWErrorCode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSCWErrorCode"
  },
  {
    "label": "ECode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECode"
  },
  {
    "label": "FShaderPreprocessDependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPreprocessDependency"
  },
  {
    "label": "FShaderPreprocessDependencies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPreprocessDependencies"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "GetBindlessResourcesConfiguration()",
    "kind": "Method",
    "detail": "Function (ERHIBindlessConfiguration)",
    "insertText": "GetBindlessResourcesConfiguration(FName ShaderFormat)"
  },
  {
    "label": "GetBindlessSamplersConfiguration()",
    "kind": "Method",
    "detail": "Function (ERHIBindlessConfiguration)",
    "insertText": "GetBindlessSamplersConfiguration(FName ShaderFormat)"
  },
  {
    "label": "ShouldGenerateShaderSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGenerateShaderSymbols(FName ShaderFormat)"
  },
  {
    "label": "ShouldGenerateShaderSymbolsInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGenerateShaderSymbolsInfo(FName ShaderFormat)"
  },
  {
    "label": "ShouldWriteShaderSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteShaderSymbols(FName ShaderFormat)"
  },
  {
    "label": "GetShaderSymbolPathOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShaderSymbolPathOverride(FString& OutPathOverride, FName ShaderFormat)"
  },
  {
    "label": "ShouldAllowUniqueShaderSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllowUniqueShaderSymbols(FName ShaderFormat)"
  },
  {
    "label": "ShouldWriteShaderSymbolsAsZip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteShaderSymbolsAsZip(FName ShaderFormat)"
  },
  {
    "label": "ShouldEnableExtraShaderData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEnableExtraShaderData(FName ShaderFormat)"
  },
  {
    "label": "ShouldOptimizeShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOptimizeShaders(FName ShaderFormat)"
  },
  {
    "label": "AllowShaderCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowShaderCompiling()"
  },
  {
    "label": "loaded()",
    "kind": "Method",
    "detail": "Function (be)",
    "insertText": "loaded(and potentially compiled if allowed/needed */\nextern RENDERCORE_API bool AllowGlobalShaderLoad()"
  },
  {
    "label": "ExtractSourceLocation()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "ExtractSourceLocation()"
  },
  {
    "label": "ExtractSourceLocations()",
    "kind": "Method",
    "detail": "Function (RENDERCORE_API)",
    "insertText": "ExtractSourceLocations(TArray<FShaderCompilerError>& InOutErrors)"
  },
  {
    "label": "GenerateOutputHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GenerateOutputHash()"
  },
  {
    "label": "CompressOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressOutput(FName ShaderCompressionFormat, FOodleDataCompression::ECompressor OodleCompressor, FOodleDataCompression::ECompressionLevel OodleLevel)"
  },
  {
    "label": "SerializeShaderCodeValidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeShaderCodeValidation()"
  },
  {
    "label": "SerializeShaderDiagnosticData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeShaderDiagnosticData()"
  },
  {
    "label": "Report()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Report(ECode Code, const FStringView& Info = {})"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ECode)",
    "insertText": "Get()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "HandleShaderCompileException()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "HandleShaderCompileException(Windows::LPEXCEPTION_POINTERS Info, FString& OutExMsg, FString& OutCallStack)"
  },
  {
    "label": "ConditionalPreprocessShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalPreprocessShader(FShaderCommonCompileJob* Job)"
  },
  {
    "label": "PreprocessShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreprocessShader(FShaderCommonCompileJob* Job)"
  },
  {
    "label": "CompileShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileShader(const TArray<const IShaderFormat*>& ShaderFormats, FShaderCompileJob& Job, const FString& WorkingDirectory, int32* CompileCount = nullptr)"
  },
  {
    "label": "CompileShaderPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileShaderPipeline(const TArray<const IShaderFormat*>& ShaderFormats, FShaderPipelineCompileJob* PipelineJob, const FString& WorkingDirectory, int32* CompileCount = nullptr)"
  },
  {
    "label": "CheckVirtualShaderFilePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckVirtualShaderFilePath(FStringView VirtualPath, TArray<FShaderCompilerError>* CompileErrors = nullptr)"
  },
  {
    "label": "FixupShaderFilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupShaderFilePath(FString& VirtualFilePath, EShaderPlatform ShaderPlatform, const FName* ShaderPlatformName)"
  },
  {
    "label": "ShaderConvertAndStripComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShaderConvertAndStripComments(const FString& ShaderSource, TArray<ANSICHAR>& OutStripped)"
  },
  {
    "label": "LoadShaderSourceFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadShaderSourceFile(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform, FString* OutFileContents, TArray<FShaderCompilerError>* OutCompileErrors, const FName* ShaderPlatformName = nullptr, FShaderSharedAnsiStringPtr* OutStrippedContents = nullptr)"
  },
  {
    "label": "GetShaderPreprocessDependencies()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShaderPreprocessDependencies(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform, FShaderPreprocessDependenciesShared& OutDependencies)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"None\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Low\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"Normal\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"High\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"ForceLocal\")"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default:)",
    "insertText": "checkNoEntry()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TEXT(\"\")"
  }
]