[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "IShaderFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IShaderFormat"
  },
  {
    "label": "FShaderCommonCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCommonCompileJob"
  },
  {
    "label": "FShaderCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderCompileJob"
  },
  {
    "label": "FShaderPipelineCompileJob",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShaderPipelineCompileJob"
  },
  {
    "label": "ECompilerFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECompilerFlags"
  },
  {
    "label": "FShaderCompilerResourceTable",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerResourceTable"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FExtraShaderCompilerSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExtraShaderCompilerSettings"
  },
  {
    "label": "FShaderCompilerInput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerInput"
  },
  {
    "label": "FShaderCompilerError",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerError"
  },
  {
    "label": "FShaderCompilerOutput",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderCompilerOutput"
  },
  {
    "label": "FSCWErrorCode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSCWErrorCode"
  },
  {
    "label": "ECode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECode"
  },
  {
    "label": "FShaderPreprocessDependency",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPreprocessDependency"
  },
  {
    "label": "FShaderPreprocessDependencies",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShaderPreprocessDependencies"
  },
  {
    "label": "FGuid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / FileManager . h \" # include \" Hash / Blake3 . h \" # include \" Hash / xxhash . h \" # include \" Stats / Stats . h \" # include \" Templates / RefCounting . h \" # include \" Misc / EnumClassFlags . h \" # include \" Misc / SecureHash . h \" # include \" Misc / Paths . h \" # include \" Misc / PathViews . h \" # include \" Misc / CoreStats . h \" # include \" ShaderCore . h \" # include \" ShaderParameterMetadata . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" ShaderParameterParser . h \" # endif class Error ; class IShaderFormat ; class FShaderCommonCompileJob ; class FShaderCompileJob ; class FShaderPipelineCompileJob ; typedef TSharedPtr<TArray<ANSICHAR>,ESPMode::ThreadSafe> FShaderSharedAnsiStringPtr ; const int32 ShaderCompileWorkerInputVersion = 2 9 ; const int32 ShaderCompileWorkerOutputVersion = 2 5 ; const int32 ShaderCompileWorkerSingleJobHeader = ' S ' ; const int32 ShaderCompileWorkerPipelineJobHeader = ' P ' ; const FGuid UE_SHADER_CACHE_VERSION =)",
    "insertText": "FGuid(\"5E33C861-2B87-4B58-A4B4-741C3E064881\")"
  },
  {
    "label": "GetBindlessResourcesConfiguration()",
    "kind": "Method",
    "detail": "Function (namespace UE::ShaderCompiler { ERHIBindlessConfiguration)",
    "insertText": "GetBindlessResourcesConfiguration(FName ShaderFormat)"
  },
  {
    "label": "GetBindlessSamplersConfiguration()",
    "kind": "Method",
    "detail": "Function (ERHIBindlessConfiguration)",
    "insertText": "GetBindlessSamplersConfiguration(FName ShaderFormat)"
  },
  {
    "label": "ShouldGenerateShaderSymbols()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldGenerateShaderSymbols(FName ShaderFormat)"
  },
  {
    "label": "ShouldGenerateShaderSymbolsInfo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldGenerateShaderSymbolsInfo(FName ShaderFormat)"
  },
  {
    "label": "ShouldWriteShaderSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteShaderSymbols(FName ShaderFormat)"
  },
  {
    "label": "GetShaderSymbolPathOverride()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetShaderSymbolPathOverride(FString& OutPathOverride, FName ShaderFormat)"
  },
  {
    "label": "ShouldAllowUniqueShaderSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldAllowUniqueShaderSymbols(FName ShaderFormat)"
  },
  {
    "label": "ShouldWriteShaderSymbolsAsZip()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldWriteShaderSymbolsAsZip(FName ShaderFormat)"
  },
  {
    "label": "ShouldEnableExtraShaderData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldEnableExtraShaderData(FName ShaderFormat)"
  },
  {
    "label": "ShouldOptimizeShaders()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldOptimizeShaders(FName ShaderFormat)"
  },
  {
    "label": "AllowShaderCompiling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowShaderCompiling()"
  },
  {
    "label": "AllowGlobalShaderLoad()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AllowGlobalShaderLoad()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (enum ECompilerFlags { CFLAG_PreferFlowControl = 0,CFLAG_Debug,CFLAG_AvoidFlowControl,CFLAG_SkipValidation,CFLAG_StandardOptimization,CFLAG_ForceOptimization,CFLAG_GenerateSymbols,CFLAG_ExtraShaderData,CFLAG_AllowUniqueSymbols,CFLAG_NoFastMath,CFLAG_ZeroInitialise,CFLAG_BoundsChecking,CFLAG_ForceRemoveUnusedInterpolators,CFLAG_VertexToGeometryShader,CFLAG_VertexToPrimitiveShader,CFLAG_VertexUseAutoCulling,CFLAG_Archive,CFLAG_UsesExternalTexture,CFLAG_UseEmulatedUB,CFLAG_WaveOperations,CFLAG_ForceDXC,CFLAG_SkipOptimizations,CFLAG_SkipOptimizationsDXC,CFLAG_AllowTypedUAVLoads,CFLAG_Wave32,CFLAG_InlineRayTracing,CFLAG_AllowRealTypes,CFLAG_PrecompileWithDXC,CFLAG_HLSL2021,CFLAG_WarningsAsErrors,CFLAG_BindlessResources,CFLAG_BindlessSamplers,CFLAG_ForceBindful,CFLAG_RemoveDeadCode,CFLAG_CullBeforeFetch,CFLAG_WarpCulling,CFLAG_GenerateSymbolsInfo,CFLAG_RootConstants,CFLAG_CheckForDerivativeOps,CFLAG_IndirectDraw,CFLAG_ShaderBundle,CFLAG_DisableSourceStripping,CFLAG_Max,} ;)",
    "insertText": "static_assert(CFLAG_Max < 64, \"Out of bitfield space! Modify FShaderCompilerFlags\")"
  },
  {
    "label": "FShaderCompilerResourceTable()",
    "kind": "Method",
    "detail": "Function (struct FShaderCompilerResourceTable { uint32 ResourceTableBits ; uint32 MaxBoundResourceTable ; TArray<uint32> TextureMap ; TArray<uint32> ShaderResourceViewMap ; TArray<uint32> SamplerMap ; TArray<uint32> UnorderedAccessViewMap ; TArray<uint32> ResourceCollectionMap ; TArray<uint32> ResourceTableLayoutHashes ;)",
    "insertText": "FShaderCompilerResourceTable() : ResourceTableBits(0) , MaxBoundResourceTable(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; enum class EOfflineShaderCompilerType : uint8 { Mali,Adreno,Num } ; struct FExtraShaderCompilerSettings { bool bExtractShaderSource = false ; FString OfflineCompilerPath ; EOfflineShaderCompilerType OfflineCompiler = EOfflineShaderCompilerType::Mali ; FString GPUTarget ; bool bDumpAll = false ; bool bSaveCompilerStatsFiles = false ; bool bMobileMultiView = false ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FExtraShaderCompilerSettings& StatsSettings)"
  },
  {
    "label": "FShaderCompilerInput()",
    "kind": "Method",
    "detail": "Function (TArray<FString> RequiredSymbols ; bool bCompilingForShaderPipeline = false ; bool bIncludeUsedOutputs = false ; TArray<FString> UsedOutputs ; FString DumpDebugInfoRootPath ; FString DumpDebugInfoPath ; FString DebugGroupName ; FString DebugExtension ; FString DebugDescription ; FShaderCompilerInputHash Hash ; FShaderCompilerEnvironment Environment ; TRefCountPtr<FSharedShaderCompilerEnvironment> SharedEnvironment ; const FShaderParametersMetadata* RootParametersStructure = nullptr ; FExtraShaderCompilerSettings ExtraSettings ; FOodleDataCompression::ECompressor OodleCompressor ; FOodleDataCompression::ECompressionLevel OodleLevel ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FShaderCompilerInput()"
  },
  {
    "label": "FShaderCompilerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCompilerInput(FShaderCompilerInput&&)"
  },
  {
    "label": "FShaderCompilerInput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCompilerInput(const FShaderCompilerInput&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerInput&)",
    "insertText": "operator(FShaderCompilerInput&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerInput&)",
    "insertText": "operator(const FShaderCompilerInput&)"
  },
  {
    "label": "DumpDebugInfoEnabled()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS bool)",
    "insertText": "DumpDebugInfoEnabled()"
  },
  {
    "label": "NeedsOriginalShaderSource()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "NeedsOriginalShaderSource()"
  },
  {
    "label": "GenerateShaderName()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GenerateShaderName()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FString Name ;)",
    "insertText": "if(DebugGroupName == TEXT(\"Global\"))"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Name = VirtualSourceFilePath +)",
    "insertText": "TEXT(\"|\")"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (} else { Name = DebugGroupName +)",
    "insertText": "TEXT(\":\") + VirtualSourceFilePath + TEXT(\"|\")"
  },
  {
    "label": "GetSourceFilenameView()",
    "kind": "Method",
    "detail": "Function (} return Name ; } FStringView)",
    "insertText": "GetSourceFilenameView()"
  },
  {
    "label": "GetSourceFilename()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetSourceFilename()"
  },
  {
    "label": "GenerateDebugInfo()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GenerateDebugInfo()"
  },
  {
    "label": "GatherSharedInputs()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GatherSharedInputs(TArray<TRefCountPtr<FSharedShaderCompilerEnvironment>>& SharedEnvironments, TArray<const FShaderParametersMetadata*>& ParametersStructures)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (SharedEnvironments .)",
    "insertText": "AddUnique(SharedEnvironment)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(RootParametersStructure)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (ParametersStructures .)",
    "insertText": "AddUnique(RootParametersStructure)"
  },
  {
    "label": "SerializeSharedInputs()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SerializeSharedInputs(FArchive& Ar, const TArray<TRefCountPtr<FSharedShaderCompilerEnvironment>>& SharedEnvironments, const TArray<const FShaderParametersMetadata*>& ParametersStructures)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int32 SharedEnvironmentIndex = SharedEnvironments .)",
    "insertText": "Find(SharedEnvironment)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (ShaderParameterStructureIndex = ParametersStructures .)",
    "insertText": "Find(RootParametersStructure)"
  },
  {
    "label": "DeserializeSharedInputs()",
    "kind": "Method",
    "detail": "Function (} Ar<<ShaderParameterStructureIndex ; } void)",
    "insertText": "DeserializeSharedInputs(FArchive& Ar, const TArray<FShaderCompilerEnvironment>& SharedEnvironments, const TArray<TUniquePtr<FShaderParametersMetadata>>& ShaderParameterStructures)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 SharedEnvironmentIndex = 0 ; Ar<<SharedEnvironmentIndex ;)",
    "insertText": "if(SharedEnvironments.IsValidIndex(SharedEnvironmentIndex))"
  },
  {
    "label": "Merge()",
    "kind": "Method",
    "detail": "Function (Environment .)",
    "insertText": "Merge(SharedEnvironments[SharedEnvironmentIndex])"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} int32 ShaderParameterStructureIndex = INDEX_NONE ; Ar<<ShaderParameterStructureIndex ;)",
    "insertText": "if(ShaderParameterStructureIndex != INDEX_NONE)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (RootParametersStructure = ShaderParameterStructures [ ShaderParameterStructureIndex ] .)",
    "insertText": "Get()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCompilerInput& Input)"
  },
  {
    "label": "IsRayTracingShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsRayTracingShader()"
  },
  {
    "label": "IsWorkGraphShader()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsWorkGraphShader()"
  },
  {
    "label": "ShouldUseStableConstantBuffer()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldUseStableConstantBuffer()"
  },
  {
    "label": "FShaderCompilerError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderCompilerError(const TCHAR* InVirtualFilePath, const TCHAR* InLineString, const TCHAR* InStrippedErrorMessage) : ErrorVirtualFilePath(InVirtualFilePath) , ErrorLineString(InLineString) , StrippedErrorMessage(InStrippedErrorMessage) , HighlightedLine(TEXT(\"\")) , HighlightedLineMarker(TEXT(\"\"))"
  },
  {
    "label": "FShaderCompilerError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderCompilerError(FString&& InStrippedErrorMessage) : ErrorVirtualFilePath(TEXT(\"\")) , ErrorLineString(TEXT(\"\")) , StrippedErrorMessage(MoveTemp(InStrippedErrorMessage)) , HighlightedLine(TEXT(\"\")) , HighlightedLineMarker(TEXT(\"\"))"
  },
  {
    "label": "FShaderCompilerError()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShaderCompilerError(FString&& InStrippedErrorMessage, FString&& InHighlightedLine, FString&& InHighlightedLineMarker) : ErrorVirtualFilePath(TEXT(\"\")) , ErrorLineString(TEXT(\"\")) , StrippedErrorMessage(MoveTemp(InStrippedErrorMessage)) , HighlightedLine(MoveTemp(InHighlightedLine)) , HighlightedLineMarker(MoveTemp(InHighlightedLineMarker))"
  },
  {
    "label": "GetErrorStringWithSourceLocation()",
    "kind": "Method",
    "detail": "Function (} FString ErrorVirtualFilePath ; FString ErrorLineString ; FString StrippedErrorMessage ; FString HighlightedLine ; FString HighlightedLineMarker ; FString)",
    "insertText": "GetErrorStringWithSourceLocation()"
  },
  {
    "label": "GetErrorStringWithLineMarker()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetErrorStringWithLineMarker()"
  },
  {
    "label": "GetErrorString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetErrorString(bool bOmitLineMarker = false)"
  },
  {
    "label": "ExtractSourceLocation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExtractSourceLocation()"
  },
  {
    "label": "ExtractSourceLocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractSourceLocations(TArray<FShaderCompilerError>& InOutErrors)"
  },
  {
    "label": "GetShaderSourceFilePath()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetShaderSourceFilePath()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FArchive&)",
    "insertText": "operator(FArchive& Ar,FShaderCompilerError& Error)"
  },
  {
    "label": "FShaderCompilerOutput()",
    "kind": "Method",
    "detail": "Function (FShaderTarget Target ; FShaderCode ShaderCode ; FSHAHash OutputHash ; FShaderCompilerInputHash ValidateInputHash ; uint32 NumInstructions ; uint32 NumTextureSamplers ; double CompileTime ; double PreprocessTime ; bool bSucceeded ; bool bSupportsQueryingUsedAttributes ; bool bSerializeModifiedSource ; bool bSerializingForCache ; TArray<FString> UsedAttributes ; PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FShaderCompilerOutput(FShaderCompilerOutput&&)"
  },
  {
    "label": "FShaderCompilerOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FShaderCompilerOutput(const FShaderCompilerOutput&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerOutput&)",
    "insertText": "operator(FShaderCompilerOutput&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShaderCompilerOutput&)",
    "insertText": "operator(const FShaderCompilerOutput&)"
  },
  {
    "label": "GenerateOutputHash()",
    "kind": "Method",
    "detail": "Function (FString ModifiedShaderSource ; FString ModifiedEntryPointName ; TArray<uint8> PlatformDebugData ; TArray<FGenericShaderStat> ShaderStatistics ; void)",
    "insertText": "GenerateOutputHash()"
  },
  {
    "label": "CompressOutput()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompressOutput(FName ShaderCompressionFormat, FOodleDataCompression::ECompressor OodleCompressor, FOodleDataCompression::ECompressionLevel OodleLevel)"
  },
  {
    "label": "SerializeShaderCodeValidation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeShaderCodeValidation()"
  },
  {
    "label": "SerializeShaderDiagnosticData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeShaderDiagnosticData()"
  },
  {
    "label": "AddStatistic()",
    "kind": "Method",
    "detail": "Function (template<TValue> void)",
    "insertText": "AddStatistic(const TCHAR* Name, TValue Value, FGenericShaderStat::EFlags Flags = FGenericShaderStat::EFlags::None)"
  },
  {
    "label": "AddZeroed_GetRef()",
    "kind": "Method",
    "detail": "Function (FGenericShaderStat& Stat = ShaderStatistics .)",
    "insertText": "AddZeroed_GetRef()"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (Stat . StatName =)",
    "insertText": "FName(Name)"
  },
  {
    "label": "FShaderStatVariant()",
    "kind": "Method",
    "detail": "Function (Stat . Value =)",
    "insertText": "FShaderStatVariant(TInPlaceType<TValue>(), Value)"
  },
  {
    "label": "GetFinalizedCodeResource()",
    "kind": "Method",
    "detail": "Function (Stat . Flags = Flags ; } const FShaderCodeResource&)",
    "insertText": "GetFinalizedCodeResource()"
  },
  {
    "label": "SetCodeFromResource()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetCodeFromResource(FShaderCodeResource&& Resource)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FArchive&)",
    "insertText": "operator(FArchive& Ar, FShaderCompilerOutput& Output)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Output . ParameterMap ; Ar<<Output . Errors ; Ar<<Output . Target ; Ar<<Output . bSerializingForCache ;)",
    "insertText": "if(!Output.bSerializingForCache)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Ar<<Output . ShaderCode ; Ar<<Output . ValidateInputHash ; Ar<<Output . CompileTime ; } Ar<<Output . OutputHash ; Ar<<Output . NumInstructions ; Ar<<Output . NumTextureSamplers ; Ar<<Output . bSucceeded ; Ar<<Output . bSerializeModifiedSource ;)",
    "insertText": "if(Output.bSerializeModifiedSource)"
  },
  {
    "label": "Report()",
    "kind": "Method",
    "detail": "Function (Ar<<Output . ModifiedShaderSource ; Ar<<Output . ModifiedEntryPointName ; } Ar<<Output . PlatformDebugData ; Ar<<Output . ShaderStatistics ; return Ar ; } } ; struct FSCWErrorCode { enum ECode : int32 { NotSet = - 1,Success,GeneralCrash,BadShaderFormatVersion,BadInputVersion,BadSingleJobHeader,BadPipelineJobHeader,CantDeleteInputFile,CantSaveOutputFile,NoTargetShaderFormatsFound,CantCompileForSpecificFormat,CrashInsidePlatformCompiler,BadInputFile,OutOfMemory,} ; void)",
    "insertText": "Report(ECode Code, const FStringView& Info = {})"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetInfo()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "HandleShaderCompileException()",
    "kind": "Method",
    "detail": "Function (} ; # if PLATFORM_WINDOWS int)",
    "insertText": "HandleShaderCompileException(Windows::LPEXCEPTION_POINTERS Info, FString& OutExMsg, FString& OutCallStack)"
  },
  {
    "label": "FindShaderFormat()",
    "kind": "Method",
    "detail": "Function (# endif const IShaderFormat*)",
    "insertText": "FindShaderFormat(FName Format, const TArray<const IShaderFormat*>& ShaderFormats)"
  },
  {
    "label": "PreprocessShader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PreprocessShader(FShaderCommonCompileJob* Job)"
  },
  {
    "label": "CompileShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileShader(const TArray<const IShaderFormat*>& ShaderFormats, FShaderCompileJob& Job, const FString& WorkingDirectory, int32* CompileCount = nullptr)"
  },
  {
    "label": "CompileShaderPipeline()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompileShaderPipeline(const TArray<const IShaderFormat*>& ShaderFormats, FShaderPipelineCompileJob* PipelineJob, const FString& WorkingDirectory, int32* CompileCount = nullptr)"
  },
  {
    "label": "CheckVirtualShaderFilePath()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CheckVirtualShaderFilePath(FStringView VirtualPath, TArray<FShaderCompilerError>* CompileErrors = nullptr)"
  },
  {
    "label": "FixupShaderFilePath()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FixupShaderFilePath(FString& VirtualFilePath, EShaderPlatform ShaderPlatform, const FName* ShaderPlatformName)"
  },
  {
    "label": "ShaderConvertAndStripComments()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShaderConvertAndStripComments(const FString& ShaderSource, TArray<ANSICHAR>& OutStripped)"
  },
  {
    "label": "LoadShaderSourceFile()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadShaderSourceFile(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform, FString* OutFileContents, TArray<FShaderCompilerError>* OutCompileErrors, const FName* ShaderPlatformName = nullptr, FShaderSharedAnsiStringPtr* OutStrippedContents = nullptr)"
  },
  {
    "label": "EqualsPathInSource()",
    "kind": "Method",
    "detail": "Function (struct FShaderPreprocessDependency { FXxHash64 PathInSourceHash ; TArray<ANSICHAR> PathInSource ; TArray<ANSICHAR> ParentPath ; TArray<ANSICHAR> ResultPath ; uint32 ResultPathHash ; uint32 ResultPathUniqueIndex ; FShaderSharedAnsiStringPtr StrippedSource ; bool)",
    "insertText": "EqualsPathInSource(const ANSICHAR* InPathInSource, int32 InPathInSourceLen, FXxHash64 InPathInSourceHash, const ANSICHAR* InParentPath)"
  },
  {
    "label": "EqualsResultPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsResultPath(const FString& InResultPath, uint32 InResultPathHash)"
  },
  {
    "label": "EqualsResultPath()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EqualsResultPath(const ANSICHAR* InResultPath, uint32 InResultPathHash)"
  },
  {
    "label": "GetShaderPreprocessDependencies()",
    "kind": "Method",
    "detail": "Function (} } ; struct FShaderPreprocessDependencies { TArray<FShaderPreprocessDependency> Dependencies ; FHashTable BySource ; FHashTable ByResult ; } ; typedef TSharedPtr<FShaderPreprocessDependencies,ESPMode::ThreadSafe> FShaderPreprocessDependenciesShared ; bool)",
    "insertText": "GetShaderPreprocessDependencies(const TCHAR* VirtualFilePath, EShaderPlatform ShaderPlatform, FShaderPreprocessDependenciesShared& OutDependencies)"
  },
  {
    "label": "NumShaderCompileJobTypes()",
    "kind": "Method",
    "detail": "Function (enum class EShaderCompilerWorkerType : uint8 { None,LocalThread,Distributed,} ; enum class EShaderCompileJobType : uint8 { Single,Pipeline,Num,} ; const int32)",
    "insertText": "NumShaderCompileJobTypes(int32)"
  },
  {
    "label": "NumShaderCompileJobPriorities()",
    "kind": "Method",
    "detail": "Function (enum class EShaderCompileJobPriority : uint8 { None = 0 xff,Low = 0 u,Normal,High,ForceLocal,Num,} ; const int32)",
    "insertText": "NumShaderCompileJobPriorities(int32)"
  },
  {
    "label": "ShaderCompileJobPriorityToString()",
    "kind": "Method",
    "detail": "Function (const TCHAR*)",
    "insertText": "ShaderCompileJobPriorityToString(EShaderCompileJobPriority v)"
  },
  {
    "label": "checkNoEntry()",
    "kind": "Method",
    "detail": "Function (default :)",
    "insertText": "checkNoEntry()"
  }
]