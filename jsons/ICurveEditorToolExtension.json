[
  {
    "label": "FStructOnScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStructOnScope"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "FPaintArgs",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPaintArgs"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "FSlateWindowElementList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateWindowElementList"
  },
  {
    "label": "FWidgetStyle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FWidgetStyle"
  },
  {
    "label": "FPointerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPointerEvent"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FGeometry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGeometry"
  },
  {
    "label": "CURVEEDITOR_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CURVEEDITOR_API"
  },
  {
    "label": "Unique()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Templates / SharedPointer . h \" # include \" Input / Reply . h \" class FStructOnScope ; class FUICommandList ; class FPaintArgs ; class FSlateRect ; class FSlateWindowElementList ; class FWidgetStyle ; struct FPointerEvent ; class SWidget ; struct FGeometry ; struct FCurveEditorToolID { FCurveEditorToolID)",
    "insertText": "Unique()"
  },
  {
    "label": "Unset()",
    "kind": "Method",
    "detail": "Function (uint32 CurrentID = 1 ; FCurveEditorToolID ID ; ID . ID = CurrentID + + ; return ID ; } FCurveEditorToolID)",
    "insertText": "Unset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FCurveEditorToolID ID ; ID . ID = - 1 ; return ID ; } bool)",
    "insertText": "operator(FCurveEditorToolID A, FCurveEditorToolID B)"
  },
  {
    "label": "FCurveEditorToolID()",
    "kind": "Method",
    "detail": "Function (} private :)",
    "insertText": "FCurveEditorToolID()"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (} uint32 ID ; } ;)",
    "insertText": "DECLARE_MULTICAST_DELEGATE(FOnOptionsRefresh)"
  },
  {
    "label": "ICurveEditorToolExtension()",
    "kind": "Method",
    "detail": "Function (class ICurveEditorToolExtension { public :)",
    "insertText": "ICurveEditorToolExtension() : ToolID(FCurveEditorToolID::Unset())"
  },
  {
    "label": "ICurveEditorToolExtension()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "ICurveEditorToolExtension()"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 PaintOnLayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDown(TSharedRef<SWidget> OwningWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonUp(TSharedRef<SWidget> OwningWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseMove(TSharedRef<SWidget> OwningWidget, const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (} FReply)",
    "insertText": "OnMouseButtonDoubleClick(TSharedRef<SWidget> OwningWidget, const FGeometry& InMyGeometry, const FPointerEvent& InMouseEvent)"
  },
  {
    "label": "OnFocusLost()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnFocusLost(const FFocusEvent& InFocusEvent)"
  },
  {
    "label": "GetToolOptions()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FStructOnScope>)",
    "insertText": "GetToolOptions()"
  },
  {
    "label": "OnToolActivated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnToolActivated()"
  },
  {
    "label": "OnToolDeactivated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToolDeactivated()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands(TSharedRef<FUICommandList> CommandBindings)"
  },
  {
    "label": "SetToolID()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetToolID(const FCurveEditorToolID InToolID)"
  }
]