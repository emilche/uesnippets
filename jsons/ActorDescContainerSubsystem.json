[
  {
    "label": "UActorDescContainerSubsystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorDescContainerSubsystem"
  },
  {
    "label": "ContainerType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ContainerType"
  },
  {
    "label": "FContainerManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FContainerManager"
  },
  {
    "label": "FRegisteredContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRegisteredContainer"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Subsystems / EngineSubsystem . h \" # include \" WorldPartition / ActorDescContainer . h \" # include \" ActorDescContainerSubsystem . generated . h \")",
    "insertText": "UCLASS(MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UActorDescContainerSubsystem() #if WITH_EDITOR : ContainerManager(this)"
  },
  {
    "label": "ShouldCreateSubsystem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCreateSubsystem(UObject* Outer)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR return true ; # else return false ; # endif } # if WITH_EDITOR UActorDescContainerSubsystem*)",
    "insertText": "Get()"
  },
  {
    "label": "GetChecked()",
    "kind": "Method",
    "detail": "Function (UActorDescContainerSubsystem&)",
    "insertText": "GetChecked()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_OneParam(UActorDescContainerSubsystem, FContainerUpdatedEvent, FName)"
  },
  {
    "label": "DECLARE_EVENT_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT_TwoParams(UActorDescContainerSubsystem, FContainerReplacedEvent, UActorDescContainer*, UActorDescContainer*)"
  },
  {
    "label": "ContainerUpdated()",
    "kind": "Method",
    "detail": "Function (FContainerUpdatedEvent&)",
    "insertText": "ContainerUpdated()"
  },
  {
    "label": "GetActorDescContainer()",
    "kind": "Method",
    "detail": "Function (} UActorDescContainer*)",
    "insertText": "GetActorDescContainer(const FString& InContainerName)"
  },
  {
    "label": "RegisterContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterContainer(UActorDescContainer* Container)"
  },
  {
    "label": "RegisterContainer()",
    "kind": "Method",
    "detail": "Function (ContainerManager .)",
    "insertText": "RegisterContainer(Container)"
  },
  {
    "label": "UnregisterContainer()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnregisterContainer(UActorDescContainer* Container)"
  },
  {
    "label": "UnregisterContainer()",
    "kind": "Method",
    "detail": "Function (ContainerManager .)",
    "insertText": "UnregisterContainer(Container)"
  },
  {
    "label": "GetContainerBounds()",
    "kind": "Method",
    "detail": "Function (} FBox)",
    "insertText": "GetContainerBounds(const FString& ContainerName, bool bIsEditorBounds = false)"
  },
  {
    "label": "UpdateContainerBounds()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdateContainerBounds(const FString& ContainerName)"
  },
  {
    "label": "UpdateContainerBounds()",
    "kind": "Method",
    "detail": "Function (ContainerManager .)",
    "insertText": "UpdateContainerBounds(ContainerName)"
  },
  {
    "label": "SetContainerPackage()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetContainerPackage(UActorDescContainer* Container, FName ContainerPackageName)"
  },
  {
    "label": "SetContainerPackage()",
    "kind": "Method",
    "detail": "Function (ContainerManager .)",
    "insertText": "SetContainerPackage(Container, ContainerPackageName)"
  },
  {
    "label": "NotifyContainerUpdated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyContainerUpdated(FName ContainerPackage)"
  },
  {
    "label": "UpdateContainerBoundsFromPackage()",
    "kind": "Method",
    "detail": "Function (ContainerManager .)",
    "insertText": "UpdateContainerBoundsFromPackage(ContainerPackage)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnContainerUpdated .)",
    "insertText": "Broadcast(ContainerPackage)"
  },
  {
    "label": "NotifyContainerReplaced()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "NotifyContainerReplaced(UActorDescContainer* OldContainer, UActorDescContainer* NewContainer)"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (OnContainerReplaced .)",
    "insertText": "Broadcast(OldContainer, NewContainer)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} # endif # if WITH_EDITOR void)",
    "insertText": "AddReferencedObjects(UObject* InThis, FReferenceCollector& Collector)"
  },
  {
    "label": "FContainerManager()",
    "kind": "Method",
    "detail": "Function (# endif private : # if WITH_EDITOR FContainerUpdatedEvent OnContainerUpdated ; FContainerReplacedEvent OnContainerReplaced ; class FContainerManager {)",
    "insertText": "FContainerManager(UActorDescContainerSubsystem* InOwner) : Owner(InOwner)"
  },
  {
    "label": "FContainerManager()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FContainerManager() : Owner(nullptr)"
  },
  {
    "label": "FRegisteredContainer()",
    "kind": "Method",
    "detail": "Function (} class UActorDescContainerSubsystem ; struct FRegisteredContainer {)",
    "insertText": "FRegisteredContainer() : Container(nullptr) , RefCount(0) , Bounds(ForceInit) , EditorBounds(ForceInit)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "UpdateBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBounds()"
  },
  {
    "label": "RegisterContainer()",
    "kind": "Method",
    "detail": "Function (public : template<class ContainerType> ContainerType*)",
    "insertText": "RegisterContainer(const typename UActorDescContainer::FInitializeParams& InitParams)"
  },
  {
    "label": "FindOrAdd()",
    "kind": "Method",
    "detail": "Function (FRegisteredContainer* RegisteredContainer =& RegisteredContainers .)",
    "insertText": "FindOrAdd(InitParams.ContainerName)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (UActorDescContainer* ActorDescContainer = RegisteredContainer -> Container ;)",
    "insertText": "check(RegisteredContainer->RefCount == 0 || ContainerType::StaticClass() == ActorDescContainer->GetClass())"
  },
  {
    "label": "UActorDescContainer()",
    "kind": "Method",
    "detail": "Function (ActorDescContainer = NewObject<)",
    "insertText": "UActorDescContainer(Owner, ContainerType::StaticClass(), NAME_None, RF_Transient)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (RegisteredContainer -> Container = ActorDescContainer ; ActorDescContainer ->)",
    "insertText": "Initialize(InitParams)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (RegisteredContainer =& RegisteredContainers .)",
    "insertText": "FindChecked(ActorDescContainer->GetContainerName())"
  },
  {
    "label": "ContainerType()",
    "kind": "Method",
    "detail": "Function (} return Cast<)",
    "insertText": "ContainerType(ActorDescContainer)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (FRegisteredContainer& RegisteredContainer = RegisteredContainers .)",
    "insertText": "FindChecked(Container->GetContainerName())"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (FRegisteredContainer* RegisteredContainer = RegisteredContainers .)",
    "insertText": "Find(InContainerName)"
  },
  {
    "label": "UpdateContainerBoundsFromPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateContainerBoundsFromPackage(FName ContainerPackage)"
  },
  {
    "label": "SetContainerPackage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetContainerPackage(UActorDescContainer* Container, FName PackageName)"
  }
]