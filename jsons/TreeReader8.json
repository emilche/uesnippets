[
  {
    "label": "Vec2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vec2"
  },
  {
    "label": "Vec3",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vec3"
  },
  {
    "label": "Vec4",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Vec4"
  },
  {
    "label": "EWindGeometryType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWindGeometryType"
  },
  {
    "label": "SVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SVertex"
  },
  {
    "label": "SDrawCall",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SDrawCall"
  },
  {
    "label": "SBone",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBone"
  },
  {
    "label": "SWindConfig",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SWindConfig"
  },
  {
    "label": "EWindPreset",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EWindPreset"
  },
  {
    "label": "EOscillationComponents",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOscillationComponents"
  },
  {
    "label": "SBranchWindLevel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SBranchWindLevel"
  },
  {
    "label": "SLeafGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SLeafGroup"
  },
  {
    "label": "EOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOptions"
  },
  {
    "label": "CLod",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CLod"
  },
  {
    "label": "CMaterialMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMaterialMap"
  },
  {
    "label": "CMaterial",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CMaterial"
  },
  {
    "label": "CCollisionObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CCollisionObject"
  },
  {
    "label": "CTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CTree"
  },
  {
    "label": "pack()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DataBuffer . h \" # ifdef ST_SETS_PACKING_INTERNALLY # pragma)",
    "insertText": "pack(push, 4)"
  },
  {
    "label": "Vertices()",
    "kind": "Method",
    "detail": "Function (namespace GameEngine8 { struct Vec2 { st_float32 x,y ; } ; struct Vec3 { st_float32 x,y,z ; } ; struct Vec4 { st_float32 x,y,z,w ; } ; enum EWindGeometryType { Branch,Frond,Leaf,FacingLeaf,Billboard } ; struct SVertex { Vec3 m_vAnchor ; Vec3 m_vOffset ; Vec3 m_vLodOffset ; Vec3 m_vNormal ; Vec3 m_vTangent ; Vec3 m_vBinormal ; Vec2 m_vTexCoord ; Vec2 m_vLightmapTexCoord ; Vec3 m_vColor ; Vec2 m_vWindBranch ; Vec3 m_vWindNonBranch ; st_float32 m_fWindRandom ; st_float32 m_fAmbientOcclusion ; st_float32 m_fBlendWeight ; st_uint32 m_uiBoneID ; st_byte m_bWindLeaf2Flag ; } ; struct SDrawCall { st_uint32 m_uiMaterialIndex ; EWindGeometryType m_eWindGeometryType ; st_uint32 m_uiIndexStart ; st_uint32 m_uiIndexCount ; } ; struct SBone { st_uint32 m_uiID ; st_uint32 m_uiParentID ; Vec3 m_vStart ; Vec3 m_vEnd ; float m_fRadius ; } ; struct SWindConfig { const int c_nNumBranchLevels = 2 ; const int c_nNumLeafGroups = 2 ; const int c_nNumPointsInCurves = 1 0 ; enum EWindPreset { WIND_PRESET_NONE,WIND_PRESET_FASTEST,WIND_PRESET_FAST,WIND_PRESET_BETTER,WIND_PRESET_BEST,WIND_PRESET_PALM } ; EWindPreset m_ePreset ; float m_fStrengthResponse ; float m_fDirectionResponse ; float m_fAnchorOffset ; float m_fAnchorDistanceScale ; float m_fGustFrequency ; float m_fGustStrengthMin ; float m_fGustStrengthMax ; float m_fGustDurationMin ; float m_fGustDurationMax ; float m_fGustRiseScalar ; float m_fGustFallScalar ; enum EOscillationComponents { OSC_GLOBAL,OSC_BRANCH_1,OSC_BRANCH_2,OSC_LEAF_1_RIPPLE,OSC_LEAF_1_TUMBLE,OSC_LEAF_1_TWITCH,OSC_LEAF_2_RIPPLE,OSC_LEAF_2_TUMBLE,OSC_LEAF_2_TWITCH,OSC_FROND_RIPPLE,NUM_OSC_COMPONENTS } ; float m_afFrequencies [ NUM_OSC_COMPONENTS ] [ c_nNumPointsInCurves ] ; float m_fGlobalHeight ; float m_fGlobalHeightExponent ; float m_afGlobalDistance [ c_nNumPointsInCurves ] ; float m_afGlobalDirectionAdherence [ c_nNumPointsInCurves ] ; struct SBranchWindLevel { float m_afDistance [ c_nNumPointsInCurves ] ; float m_afDirectionAdherence [ c_nNumPointsInCurves ] ; float m_afWhip [ c_nNumPointsInCurves ] ; float m_fTurbulence ; float m_fTwitch ; float m_fTwitchFreqScale ; } ; SBranchWindLevel m_asBranch [ c_nNumBranchLevels ] ; float m_vFrondStyleBranchAnchor [ 3 ] ; float m_fMaxBranchLength ; struct SLeafGroup { float m_afRippleDistance [ c_nNumPointsInCurves ] ; float m_afTumbleFlip [ c_nNumPointsInCurves ] ; float m_afTumbleTwist [ c_nNumPointsInCurves ] ; float m_afTumbleDirectionAdherence [ c_nNumPointsInCurves ] ; float m_afTwitchThrow [ c_nNumPointsInCurves ] ; float m_fTwitchSharpness ; float m_fLeewardScalar ; } ; SLeafGroup m_asLeaf [ c_nNumLeafGroups ] ; float m_afFrondRippleDistance [ c_nNumPointsInCurves ] ; float m_fFrondRippleTile ; float m_fFrondRippleLightingScalar ; enum EOptions { GLOBAL_WIND,GLOBAL_PRESERVE_SHAPE,BRANCH_1_SIMPLE,BRANCH_1_DIRECTIONAL,BRANCH_1_DIRECTIONAL_FROND,BRANCH_1_TURBULENCE,BRANCH_1_WHIP,BRANCH_1_OSC_COMPLEX,BRANCH_2_SIMPLE,BRANCH_2_DIRECTIONAL,BRANCH_2_DIRECTIONAL_FROND,BRANCH_2_TURBULENCE,BRANCH_2_WHIP,BRANCH_2_OSC_COMPLEX,LEAF_RIPPLE_VERTEX_NORMAL_1,LEAF_RIPPLE_COMPUTED_1,LEAF_TUMBLE_1,LEAF_TWITCH_1,LEAF_OCCLUSION_1,LEAF_RIPPLE_VERTEX_NORMAL_2,LEAF_RIPPLE_COMPUTED_2,LEAF_TUMBLE_2,LEAF_TWITCH_2,LEAF_OCCLUSION_2,FROND_RIPPLE_ONE_SIDED,FROND_RIPPLE_TWO_SIDED,FROND_RIPPLE_ADJUST_LIGHTING,ROLLING,NUM_WIND_OPTIONS } ; st_byte m_abOptions [ NUM_WIND_OPTIONS ] ; } ; class CLod : public CTable { public : ST_INLINE CArray<SVertex>)",
    "insertText": "Vertices(void)"
  },
  {
    "label": "Indices()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<st_uint32>)",
    "insertText": "Indices(void)"
  },
  {
    "label": "DrawCalls()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CArray<SDrawCall>)",
    "insertText": "DrawCalls(void)"
  },
  {
    "label": "Used()",
    "kind": "Method",
    "detail": "Function (} } ; class CMaterialMap : public CTable { public : ST_INLINE st_bool)",
    "insertText": "Used(void)"
  },
  {
    "label": "Path()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CString)",
    "insertText": "Path(void)"
  },
  {
    "label": "Color()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE Vec4)",
    "insertText": "Color(void)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (} } ; class CMaterial : public CTable { public : ST_INLINE CString)",
    "insertText": "Name(void)"
  },
  {
    "label": "TwoSided()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "TwoSided(void)"
  },
  {
    "label": "Billboard()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "Billboard(void)"
  },
  {
    "label": "Maps()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CMaterialMap>)",
    "insertText": "Maps(void)"
  },
  {
    "label": "Position()",
    "kind": "Method",
    "detail": "Function (} } ; class CCollisionObject : public CTable { public : ST_INLINE Vec3)",
    "insertText": "Position(void)"
  },
  {
    "label": "Position2()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE Vec3)",
    "insertText": "Position2(void)"
  },
  {
    "label": "Radius()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE float)",
    "insertText": "Radius(void)"
  },
  {
    "label": "UserData()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CString)",
    "insertText": "UserData(void)"
  },
  {
    "label": "VersionMajor()",
    "kind": "Method",
    "detail": "Function (} } ; class CTree : public CReader { public : ST_INLINE st_uint32)",
    "insertText": "VersionMajor(void)"
  },
  {
    "label": "VersionMinor()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_uint32)",
    "insertText": "VersionMinor(void)"
  },
  {
    "label": "LastLodIsBillboard()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "LastLodIsBillboard(void)"
  },
  {
    "label": "Lods()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CLod>)",
    "insertText": "Lods(void)"
  },
  {
    "label": "CollisionObjects()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CCollisionObject>)",
    "insertText": "CollisionObjects(void)"
  },
  {
    "label": "Materials()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE CTableArray<CMaterial>)",
    "insertText": "Materials(void)"
  },
  {
    "label": "LightmapSize()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_uint32)",
    "insertText": "LightmapSize(void)"
  },
  {
    "label": "Wind()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE const SWindConfig&)",
    "insertText": "Wind(void)"
  },
  {
    "label": "Bones()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE const CArray<SBone>)",
    "insertText": "Bones(void)"
  },
  {
    "label": "FileToken()",
    "kind": "Method",
    "detail": "Function (} protected : ST_INLINE const st_char*)",
    "insertText": "FileToken(void)"
  }
]