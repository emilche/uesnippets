[
  {
    "label": "NVCORE_CLASS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NVCORE_CLASS"
  },
  {
    "label": "LIBRARY_NAME()",
    "kind": "Method",
    "detail": "Function (# ifndef NV_CORE_LIBRARY_H # define NV_CORE_LIBRARY_H # include<nvcore / nvcore . h> # if NV_OS_WIN32 # define)",
    "insertText": "LIBRARY_NAME(name) #name \".dll\" #elif NV_OS_DARWIN #define NV_LIBRARY_NAME(name) \"lib\" #name \".dylib\" #else #define NV_LIBRARY_NAME(name) \"lib\" #name \".so\" #endif NVCORE_API void * nvLoadLibrary(const char * name)"
  },
  {
    "label": "nvUnloadLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvUnloadLibrary(void * lib)"
  },
  {
    "label": "nvBindSymbol()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "nvBindSymbol(void * lib, const char * symbol)"
  },
  {
    "label": "Library()",
    "kind": "Method",
    "detail": "Function (class NVCORE_CLASS Library { public :)",
    "insertText": "Library(const char * name)"
  },
  {
    "label": "nvLoadLibrary()",
    "kind": "Method",
    "detail": "Function (handle =)",
    "insertText": "nvLoadLibrary(name)"
  },
  {
    "label": "Library()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Library()"
  },
  {
    "label": "nvUnloadLibrary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "nvUnloadLibrary(handle)"
  },
  {
    "label": "isValid()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "isValid()"
  }
]