[
  {
    "label": "ForwardedSlateItemsSourceArgument",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ForwardedSlateItemsSourceArgument"
  },
  {
    "label": "IItemsSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IItemsSource"
  },
  {
    "label": "FArrayPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArrayPointer"
  },
  {
    "label": "FObservableArrayPointer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FObservableArrayPointer"
  },
  {
    "label": "FSharedObservableArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSharedObservableArray"
  },
  {
    "label": "SLATE_ITEMS_SOURCE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Containers / ArrayView . h \" # include \" Containers / ObservableArray . h \" # include \" Widgets / Views / STableViewBase . h \" namespace UE::Slate::ItemsSource { template<ArgType> struct ForwardedSlateItemsSourceArgument { const TArray<ArgType>* ArrayPointer ;::UE::Slate::Containers::TObservableArray<ArgType>* ObservableArrayPointer ; TSharedPtr<::UE::Slate::Containers::TObservableArray<ArgType>> SharedObservableArray ; } ; # define)",
    "insertText": "SLATE_ITEMS_SOURCE_ARGUMENT(ArgType, ArgName)"
  },
  {
    "label": "ArgName()",
    "kind": "Method",
    "detail": "Function (\\::UE::Slate::Containers::TObservableArray<ArgType>* _ # # ArgName # # _ObservableArrayPointer = nullptr ; \\ TSharedPtr<::UE::Slate::Containers::TObservableArray<ArgType>> _ # # ArgName # # _SharedObservableArray ; \\ void _Reset # #)",
    "insertText": "ArgName()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (\\ _ # # ArgName # # _ArrayPointer = nullptr ; \\ _ # # ArgName # # _ObservableArrayPointer = nullptr ; \\ _ # # ArgName # # _SharedObservableArray .)",
    "insertText": "Reset()"
  },
  {
    "label": "ArgName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ public : \\ WidgetArgsType&)",
    "insertText": "ArgName(const TArray<ArgType>* InArg)"
  },
  {
    "label": "WidgetArgsType()",
    "kind": "Method",
    "detail": "Function (\\ _ # # ArgName # # _ArrayPointer = InArg ; \\ return static_cast<)",
    "insertText": "WidgetArgsType(this)->Me()"
  },
  {
    "label": "ArgName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ WidgetArgsType&)",
    "insertText": "ArgName(::UE::Slate::Containers::TObservableArray<ArgType>* InArg)"
  },
  {
    "label": "ArgName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ WidgetArgsType&)",
    "insertText": "ArgName(TSharedPtr<::UE::Slate::Containers::TObservableArray<ArgType>> InArg)"
  },
  {
    "label": "ArgName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ WidgetArgsType&)",
    "insertText": "ArgName(TSharedRef<::UE::Slate::Containers::TObservableArray<ArgType>> InArg)"
  },
  {
    "label": "ArgName()",
    "kind": "Method",
    "detail": "Function (\\ } \\ WidgetArgsType&)",
    "insertText": "ArgName(::UE::Slate::ItemsSource::ForwardedSlateItemsSourceArgument<ArgType> InArg)"
  },
  {
    "label": "ArgName()",
    "kind": "Method",
    "detail": "Function (\\ return { _ # # ArgName # # _ArrayPointer,_ # # ArgName # # _ObservableArrayPointer,_ # # ArgName # # _SharedObservableArray } ; \\ } \\ TUniquePtr<::UE::Slate::ItemsSource::IItemsSource<ArgType>> Make # #)",
    "insertText": "ArgName(TSharedRef<STableViewBase> InWidget)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(_##ArgName##_ArrayPointer)"
  },
  {
    "label": "ArgType()",
    "kind": "Method",
    "detail": "Function (\\ return MakeUnique<::UE::Slate::ItemsSource::FArrayPointer<)",
    "insertText": "ArgType(_##ArgName##_ArrayPointer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else)",
    "insertText": "if(_##ArgName##_ObservableArrayPointer)"
  },
  {
    "label": "ArgType()",
    "kind": "Method",
    "detail": "Function (\\ return MakeUnique<::UE::Slate::ItemsSource::FObservableArrayPointer<)",
    "insertText": "ArgType(InWidget, _##ArgName##_ObservableArrayPointer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ } \\ else)",
    "insertText": "if(_##ArgName##_SharedObservableArray)"
  },
  {
    "label": "ArgType()",
    "kind": "Method",
    "detail": "Function (\\ return MakeUnique<::UE::Slate::ItemsSource::FSharedObservableArray<)",
    "insertText": "ArgType(InWidget, _##ArgName##_SharedObservableArray.ToSharedRef())"
  },
  {
    "label": "ArgType()",
    "kind": "Method",
    "detail": "Function (\\ } \\ return TUniquePtr<::UE::Slate::ItemsSource::IItemsSource<)",
    "insertText": "ArgType()"
  },
  {
    "label": "IItemsSource()",
    "kind": "Method",
    "detail": "Function (\\ } template<ItemType> class IItemsSource { public : ~)",
    "insertText": "IItemsSource()"
  },
  {
    "label": "GetItems()",
    "kind": "Method",
    "detail": "Function (const TArrayView<const ItemType>)",
    "insertText": "GetItems()"
  },
  {
    "label": "IsSame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSame(const void* RawPointer)"
  },
  {
    "label": "FArrayPointer()",
    "kind": "Method",
    "detail": "Function (} ; template<ItemType> class FArrayPointer : public IItemsSource<ItemType> { public :)",
    "insertText": "FArrayPointer(const TArray<ItemType>* InItemsSource) : ItemsSource(InItemsSource)"
  },
  {
    "label": "FObservableArrayPointer()",
    "kind": "Method",
    "detail": "Function (} private : const TArray<ItemType>* ItemsSource ; } ; template<InItemType> class FObservableArrayPointer : public IItemsSource<InItemType> { public : using WidgetType = STableViewBase ; using ItemType = InItemType ;)",
    "insertText": "FObservableArrayPointer(TSharedRef<WidgetType> InListView, ::UE::Slate::Containers::TObservableArray<ItemType>* InItemsSource) : ItemsSource(InItemsSource) , ListViewOwner(InListView)"
  },
  {
    "label": "OnArrayChanged()",
    "kind": "Method",
    "detail": "Function (ArrayChangedHandle = InItemsSource ->)",
    "insertText": "OnArrayChanged().AddRaw(this, &FObservableArrayPointer::HandleArrayChanged)"
  },
  {
    "label": "FObservableArrayPointer()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FObservableArrayPointer()"
  },
  {
    "label": "OnArrayChanged()",
    "kind": "Method",
    "detail": "Function (ItemsSource ->)",
    "insertText": "OnArrayChanged().Remove(ArrayChangedHandle)"
  },
  {
    "label": "HandleArrayChanged()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "HandleArrayChanged(typename ::UE::Slate::Containers::TObservableArray<ItemType>::ObservableArrayChangedArgsType Args)"
  },
  {
    "label": "RequestListRefresh()",
    "kind": "Method",
    "detail": "Function (ListViewOwnerPin ->)",
    "insertText": "RequestListRefresh()"
  },
  {
    "label": "FSharedObservableArray()",
    "kind": "Method",
    "detail": "Function (} } private : UE::Slate::Containers::TObservableArray<ItemType>* ItemsSource ; TWeakPtr<WidgetType> ListViewOwner ; FDelegateHandle ArrayChangedHandle ; } ; template<InItemType> class FSharedObservableArray : public IItemsSource<InItemType> { public : using WidgetType = STableViewBase ; using ItemType = InItemType ;)",
    "insertText": "FSharedObservableArray(TSharedRef<WidgetType> InListView, TSharedRef<::UE::Slate::Containers::TObservableArray<ItemType>> InItemsSource) : ItemsSource(InItemsSource) , ListViewOwner(InListView)"
  },
  {
    "label": "OnArrayChanged()",
    "kind": "Method",
    "detail": "Function (ArrayChangedHandle = InItemsSource ->)",
    "insertText": "OnArrayChanged().AddRaw(this, &FSharedObservableArray::HandleArrayChanged)"
  },
  {
    "label": "FSharedObservableArray()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FSharedObservableArray()"
  },
  {
    "label": "ValueToTest()",
    "kind": "Method",
    "detail": "Function (UE::Slate::Containers::TObservableArray<ItemType>*)",
    "insertText": "ValueToTest(ItemsSource.Get())"
  }
]