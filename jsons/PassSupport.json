[
  {
    "label": "TargetMachine",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetMachine"
  },
  {
    "label": "RegisterPass",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterPass"
  },
  {
    "label": "RegisterAGBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RegisterAGBase"
  },
  {
    "label": "RegisterAnalysisGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegisterAnalysisGroup"
  },
  {
    "label": "PassRegistrationListener",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PassRegistrationListener"
  },
  {
    "label": "CALL_ONCE_INITIALIZATION()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_PASSSUPPORT_H # define LLVM_PASSSUPPORT_H # include \" Pass . h \" # include \" llvm / InitializePasses . h \" # include \" llvm / PassInfo . h \" # include \" llvm / PassRegistry . h \" # include \" llvm / Support / Atomic . h \" # include \" llvm / Support / Valgrind . h \" # include<vector> namespace llvm { class TargetMachine ; # define)",
    "insertText": "CALL_ONCE_INITIALIZATION(function)"
  },
  {
    "label": "CompareAndSwap()",
    "kind": "Method",
    "detail": "Function (\\ sys::cas_flag old_val =)",
    "insertText": "CompareAndSwap(&initialized, 1, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(old_val == 0)"
  },
  {
    "label": "function()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "function(Registry)"
  },
  {
    "label": "MemoryFence()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "MemoryFence()"
  },
  {
    "label": "TsanIgnoreWritesBegin()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TsanIgnoreWritesBegin()"
  },
  {
    "label": "TsanHappensBefore()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "TsanHappensBefore(&initialized)"
  },
  {
    "label": "TsanIgnoreWritesEnd()",
    "kind": "Method",
    "detail": "Function (\\ initialized = 2 ; \\)",
    "insertText": "TsanIgnoreWritesEnd()"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "while(tmp != 2)"
  },
  {
    "label": "TsanHappensAfter()",
    "kind": "Method",
    "detail": "Function (\\ } \\ } \\)",
    "insertText": "TsanHappensAfter(&initialized)"
  },
  {
    "label": "INITIALIZE_PASS()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INITIALIZE_PASS(passName, arg, name, cfg, analysis) \\ static void* initialize##passName##PassOnce(PassRegistry &Registry)"
  },
  {
    "label": "PassInfo()",
    "kind": "Method",
    "detail": "Function (\\ PassInfo* PI = new)",
    "insertText": "PassInfo(name, arg, & passName ::ID, \\ PassInfo::NormalCtor_t(callDefaultCtor< passName >), cfg, analysis)"
  },
  {
    "label": "registerPass()",
    "kind": "Method",
    "detail": "Function (\\ Registry .)",
    "insertText": "registerPass(*PI, true)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (\\ return PI ; \\ } \\ void llvm::initialize # # passName # #)",
    "insertText": "Pass(PassRegistry &Registry)"
  },
  {
    "label": "CALL_ONCE_INITIALIZATION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CALL_ONCE_INITIALIZATION(initialize##passName##PassOnce) \\ } #define INITIALIZE_PASS_BEGIN(passName, arg, name, cfg, analysis) \\ static void* initialize##passName##PassOnce(PassRegistry &Registry)"
  },
  {
    "label": "INITIALIZE_PASS_DEPENDENCY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INITIALIZE_PASS_DEPENDENCY(depName) \\ initialize##depName##Pass(Registry)"
  },
  {
    "label": "INITIALIZE_AG_DEPENDENCY()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INITIALIZE_AG_DEPENDENCY(depName) \\ initialize##depName##AnalysisGroup(Registry)"
  },
  {
    "label": "INITIALIZE_PASS_END()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INITIALIZE_PASS_END(passName, arg, name, cfg, analysis) \\ PassInfo *PI = new PassInfo(name, arg, & passName ::ID, \\ PassInfo::NormalCtor_t(callDefaultCtor< passName >), cfg, analysis)"
  },
  {
    "label": "CALL_ONCE_INITIALIZATION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CALL_ONCE_INITIALIZATION(initialize##passName##PassOnce) \\ } #define INITIALIZE_PASS_WITH_OPTIONS(PassName, Arg, Name, Cfg, Analysis) \\ INITIALIZE_PASS_BEGIN(PassName, Arg, Name, Cfg, Analysis) \\ PassName::registerOptions()"
  },
  {
    "label": "INITIALIZE_PASS_END()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "INITIALIZE_PASS_END(PassName, Arg, Name, Cfg, Analysis) #define INITIALIZE_PASS_WITH_OPTIONS_BEGIN(PassName, Arg, Name, Cfg, Analysis) \\ INITIALIZE_PASS_BEGIN(PassName, Arg, Name, Cfg, Analysis) \\ PassName::registerOptions()"
  },
  {
    "label": "callDefaultCtor()",
    "kind": "Method",
    "detail": "Function (\\ template<PassName> Pass*)",
    "insertText": "callDefaultCtor()"
  },
  {
    "label": "callTargetMachineCtor()",
    "kind": "Method",
    "detail": "Function (} template<PassName> Pass*)",
    "insertText": "callTargetMachineCtor(TargetMachine *TM)"
  },
  {
    "label": "RegisterPass()",
    "kind": "Method",
    "detail": "Function (} template<passName> struct RegisterPass : public PassInfo {)",
    "insertText": "RegisterPass(const char *PassArg, const char *Name, bool CFGOnly = false, bool is_analysis = false) : PassInfo(Name, PassArg, &passName::ID, PassInfo::NormalCtor_t(callDefaultCtor<passName>), CFGOnly, is_analysis)"
  },
  {
    "label": "getPassRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "getPassRegistry()->registerPass(*this)"
  },
  {
    "label": "RegisterAGBase()",
    "kind": "Method",
    "detail": "Function (} } ; class RegisterAGBase : public PassInfo { public :)",
    "insertText": "RegisterAGBase(const char *Name, const void *InterfaceID, const void *PassID = nullptr, bool isDefault = false)"
  },
  {
    "label": "RegisterAnalysisGroup()",
    "kind": "Method",
    "detail": "Function (} ; template<Interface,bool Default = false> struct RegisterAnalysisGroup : public RegisterAGBase {)",
    "insertText": "RegisterAnalysisGroup(PassInfo &RPB) : RegisterAGBase(RPB.getPassName(), &Interface::ID, RPB.getTypeInfo(), Default)"
  },
  {
    "label": "RegisterAnalysisGroup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RegisterAnalysisGroup(const char *Name) : RegisterAGBase(Name, &Interface::ID)"
  },
  {
    "label": "INITIALIZE_ANALYSIS_GROUP()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "INITIALIZE_ANALYSIS_GROUP(agName, name, defaultPass) \\ static void* initialize##agName##AnalysisGroupOnce(PassRegistry &Registry)"
  },
  {
    "label": "Pass()",
    "kind": "Method",
    "detail": "Function (\\ initialize # # defaultPass # #)",
    "insertText": "Pass(Registry)"
  },
  {
    "label": "PassInfo()",
    "kind": "Method",
    "detail": "Function (\\ PassInfo* AI = new)",
    "insertText": "PassInfo(name, & agName :: ID)"
  },
  {
    "label": "registerAnalysisGroup()",
    "kind": "Method",
    "detail": "Function (\\ Registry .)",
    "insertText": "registerAnalysisGroup(& agName ::ID, 0, *AI, false, true)"
  },
  {
    "label": "AnalysisGroup()",
    "kind": "Method",
    "detail": "Function (\\ return AI ; \\ } \\ void llvm::initialize # # agName # #)",
    "insertText": "AnalysisGroup(PassRegistry &Registry)"
  },
  {
    "label": "CALL_ONCE_INITIALIZATION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CALL_ONCE_INITIALIZATION(initialize##agName##AnalysisGroupOnce) \\ } #define INITIALIZE_AG_PASS(passName, agName, arg, name, cfg, analysis, def) \\ static void* initialize##passName##PassOnce(PassRegistry &Registry)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "if(!def) initialize##agName##AnalysisGroup(Registry)"
  },
  {
    "label": "registerAnalysisGroup()",
    "kind": "Method",
    "detail": "Function (\\ Registry .)",
    "insertText": "registerAnalysisGroup(& agName ::ID, & passName ::ID, \\ *AI, def, true)"
  },
  {
    "label": "CALL_ONCE_INITIALIZATION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CALL_ONCE_INITIALIZATION(initialize##passName##PassOnce) \\ } #define INITIALIZE_AG_PASS_BEGIN(passName, agName, arg, n, cfg, analysis, def) \\ static void* initialize##passName##PassOnce(PassRegistry &Registry)"
  },
  {
    "label": "INITIALIZE_AG_PASS_END()",
    "kind": "Method",
    "detail": "Function (# define)",
    "insertText": "INITIALIZE_AG_PASS_END(passName, agName, arg, n, cfg, analysis, def) \\ PassInfo *PI = new PassInfo(n, arg, & passName ::ID, \\ PassInfo::NormalCtor_t(callDefaultCtor< passName >), cfg, analysis)"
  },
  {
    "label": "PassInfo()",
    "kind": "Method",
    "detail": "Function (\\ \\ PassInfo* AI = new)",
    "insertText": "PassInfo(n, & agName :: ID)"
  },
  {
    "label": "CALL_ONCE_INITIALIZATION()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "CALL_ONCE_INITIALIZATION(initialize##passName##PassOnce)"
  },
  {
    "label": "PassRegistrationListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PassRegistrationListener()"
  },
  {
    "label": "passRegistered()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "passRegistered(const PassInfo *)"
  },
  {
    "label": "enumeratePasses()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "enumeratePasses()"
  },
  {
    "label": "passEnumerate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "passEnumerate(const PassInfo *)"
  }
]