[
  {
    "label": "FStoreClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreClient"
  },
  {
    "label": "FStoreConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreConnection"
  },
  {
    "label": "FStoreBrowserTraceInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStoreBrowserTraceInfo"
  },
  {
    "label": "FStoreBrowser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreBrowser"
  },
  {
    "label": "FStoreBrowserUpdaterAsyncTask",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStoreBrowserUpdaterAsyncTask"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FStoreBrowserTraceInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Async / AsyncWork . h \" # include \" CoreMinimal . h \" # include \" HAL / CriticalSection . h \" # include \" HAL / PlatformAtomics . h \" # include \" HAL / Runnable . h \" # include \" HAL / RunnableThread . h \" namespace UE::Trace { class FStoreClient ; class FStoreConnection ; } namespace UE::Insights { struct FStoreBrowserTraceInfo { uint32 TraceId = 0 ; uint64 ChangeSerial = 0 ; FString Name ; FString Uri ; FDateTime Timestamp = 0 ; uint64 Size = 0 ; FString Platform ; FString AppName ; FString ProjectName ; FString CommandLine ; FString Branch ; FString BuildVersion ; uint32 Changelist ; EBuildConfiguration ConfigurationType = EBuildConfiguration::Unknown ; EBuildTargetType TargetType = EBuildTargetType::Unknown ; bool bIsLive = false ; std::atomic<uint8> MetadataUpdateCount = 1 ; uint32 IpAddress = 0 ;)",
    "insertText": "FStoreBrowserTraceInfo()"
  },
  {
    "label": "ConvertTimestamp()",
    "kind": "Method",
    "detail": "Function (FDateTime)",
    "insertText": "ConvertTimestamp(uint64 InTimestamp)"
  },
  {
    "label": "FStoreBrowser()",
    "kind": "Method",
    "detail": "Function (} } ; class FStoreBrowser : public FRunnable { class FStoreBrowserUpdaterAsyncTask ; public :)",
    "insertText": "FStoreBrowser(TSharedRef<UE::Trace::FStoreConnection> InTraceStoreConnection)"
  },
  {
    "label": "FStoreBrowser()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FStoreBrowser()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Run()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "Run()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "Exit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Exit()"
  },
  {
    "label": "IsRunning()",
    "kind": "Method",
    "detail": "Function (enum class EConnectionStatus : uint8 { Connecting = 0,SecondsToReconnectStart,SecondsToReconnectEnd = 0 xfd,NoConnection = 0 xfe,Connected = 0 xff } ; bool)",
    "insertText": "IsRunning()"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (bSettingsLocked = true ; SettingsCriticalSection .)",
    "insertText": "Lock()"
  },
  {
    "label": "UnlockSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockSettings()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (bSettingsLocked = false ; SettingsCriticalSection .)",
    "insertText": "Unlock()"
  },
  {
    "label": "GetSettingsChangeSerial()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetSettingsChangeSerial()"
  },
  {
    "label": "UnlockTraces()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UnlockTraces()"
  },
  {
    "label": "GetTracesChangeSerial()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTracesChangeSerial()"
  },
  {
    "label": "UpdateTraces()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateTraces()"
  },
  {
    "label": "ResetTraces()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetTraces()"
  },
  {
    "label": "UpdateMetadata()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateMetadata(TSharedPtr<FStoreBrowserTraceInfo> TraceInfoPtr)"
  }
]