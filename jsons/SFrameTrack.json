[
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "SScrollBar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SScrollBar"
  },
  {
    "label": "STimingView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "STimingView"
  },
  {
    "label": "FFrameTrackSampleRef",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFrameTrackSampleRef"
  },
  {
    "label": "SFrameTrack",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFrameTrack"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FFrameTrackSampleRef()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Input / CursorReply . h \" # include \" Input / Reply . h \" # include \" Layout / Geometry . h \" # include \" Rendering / RenderingCommon . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" InsightsCore / Common / FixedCircularBuffer . h \" # include \" Insights / TimingProfiler / ViewModels / FrameTrackHelper . h \" # include \" Insights / TimingProfiler / ViewModels / FrameTrackViewport . h \" class FMenuBuilder ; class SScrollBar ; namespace UE::Insights::TimingProfiler { class STimingView ; struct FFrameTrackSampleRef { TSharedPtr<FFrameTrackSeries> Series ; TSharedPtr<FFrameTrackSample> Sample ;)",
    "insertText": "FFrameTrackSampleRef() : Series(), Sample()"
  },
  {
    "label": "FFrameTrackSampleRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameTrackSampleRef(TSharedPtr<FFrameTrackSeries> InSeries, TSharedPtr<FFrameTrackSample> InSample) : Series(InSeries), Sample(InSample)"
  },
  {
    "label": "FFrameTrackSampleRef()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FFrameTrackSampleRef(const FFrameTrackSampleRef& Other) : Series(Other.Series), Sample(Other.Sample)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FFrameTrackSampleRef&)",
    "insertText": "operator(const FFrameTrackSampleRef& Other)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Series = Other . Series ; Sample = Other . Sample ; return* this ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "Equals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Equals(const FFrameTrackSampleRef& Other)"
  },
  {
    "label": "AreEquals()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AreEquals(const FFrameTrackSampleRef& A, const FFrameTrackSampleRef& B)"
  },
  {
    "label": "SFrameTrack()",
    "kind": "Method",
    "detail": "Function (} } ; class SFrameTrack : public SCompoundWidget { public : float MOUSE_SNAP_DISTANCE = 2 . 0 f ; enum class ECursorType { Default,Arrow,Hand,} ; public :)",
    "insertText": "SFrameTrack()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SFrameTrack)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (_Clipping = EWidgetClipping::ClipToBounds ; })",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseMove()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseMove(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseWheel()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseWheel(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonDoubleClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonDoubleClick(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnCursorQuery()",
    "kind": "Method",
    "detail": "Function (FCursorReply)",
    "insertText": "OnCursorQuery(const FGeometry& MyGeometry, const FPointerEvent& CursorEvent)"
  },
  {
    "label": "HasFrameStatSeries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFrameStatSeries(ETraceFrameType FrameType, uint32 TimerId)"
  },
  {
    "label": "AddTimerFrameStatSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FTimerFrameStatsTrackSeries>)",
    "insertText": "AddTimerFrameStatSeries(ETraceFrameType FrameType, uint32 TimerId, FLinearColor Color, FText Name)"
  },
  {
    "label": "RemoveTimerFrameStatSeries()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RemoveTimerFrameStatSeries(ETraceFrameType FrameType, uint32 TimerId)"
  },
  {
    "label": "GetNumSeriesForTimer()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetNumSeriesForTimer(uint32 TimerId)"
  },
  {
    "label": "FindOrAddSeries()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<FFrameTrackSeries>)",
    "insertText": "FindOrAddSeries(ETraceFrameType FrameType)"
  },
  {
    "label": "FindSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFrameTrackSeries>)",
    "insertText": "FindSeries(ETraceFrameType FrameType)"
  },
  {
    "label": "FindFrameStatsSeries()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FFrameTrackSeries>)",
    "insertText": "FindFrameStatsSeries(ETraceFrameType FrameType, uint32 TimerId)"
  },
  {
    "label": "UpdateState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateState()"
  },
  {
    "label": "DrawHorizontalAxisGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawHorizontalAxisGrid(FDrawContext& DrawContext, const FSlateBrush* Brush, const FSlateFontInfo& Font, bool bDrawBackgroundLayer)"
  },
  {
    "label": "DrawVerticalAxisGrid()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DrawVerticalAxisGrid(FDrawContext& DrawContext, const FSlateBrush* Brush, const FSlateFontInfo& Font)"
  },
  {
    "label": "GetSampleAtMousePosition()",
    "kind": "Method",
    "detail": "Function (FFrameTrackSampleRef)",
    "insertText": "GetSampleAtMousePosition(double X, double Y)"
  },
  {
    "label": "SelectFrameAtMousePosition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectFrameAtMousePosition(double X, double Y, bool JoinCurrentSelection)"
  },
  {
    "label": "ShowContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ShowContextMenu(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "CreateThresholdsMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateThresholdsMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "CreateUpperThresholdWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateUpperThresholdWidget()"
  },
  {
    "label": "CreateLowerThresholdWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateLowerThresholdWidget()"
  },
  {
    "label": "SaveThresholds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveThresholds()"
  },
  {
    "label": "SetThresholdsFPS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetThresholdsFPS(double InUpperThresholdFPS, double InLowerThresholdFPS)"
  },
  {
    "label": "CreateThresholdPresetsWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateThresholdPresetsWidget()"
  },
  {
    "label": "CreateSelectedFrameMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSelectedFrameMenu(FMenuBuilder& MenuBuilder)"
  },
  {
    "label": "ContextMenu_ShowGameFrames_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowGameFrames_Execute()"
  },
  {
    "label": "ContextMenu_ShowGameFrames_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowGameFrames_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowGameFrames_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowGameFrames_IsChecked()"
  },
  {
    "label": "ContextMenu_ShowRenderingFrames_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowRenderingFrames_Execute()"
  },
  {
    "label": "ContextMenu_ShowRenderingFrames_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowRenderingFrames_CanExecute()"
  },
  {
    "label": "ContextMenu_ShowRenderingFrames_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowRenderingFrames_IsChecked()"
  },
  {
    "label": "ContextMenu_ShowFrameStats_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ShowFrameStats_Execute(ETraceFrameType FrameType, uint32 TimerId)"
  },
  {
    "label": "ContextMenu_ShowFrameStats_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowFrameStats_CanExecute(ETraceFrameType FrameType, uint32 TimerId)"
  },
  {
    "label": "ContextMenu_ShowFrameStats_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ShowFrameStats_IsChecked(ETraceFrameType FrameType, uint32 TimerId)"
  },
  {
    "label": "ContextMenu_AutoZoom_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_AutoZoom_Execute()"
  },
  {
    "label": "ContextMenu_AutoZoom_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_AutoZoom_CanExecute()"
  },
  {
    "label": "ContextMenu_AutoZoom_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_AutoZoom_IsChecked()"
  },
  {
    "label": "AutoZoom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AutoZoom()"
  },
  {
    "label": "ContextMenu_ZoomTimingViewOnFrameSelection_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ZoomTimingViewOnFrameSelection_Execute()"
  },
  {
    "label": "ContextMenu_ZoomTimingViewOnFrameSelection_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ZoomTimingViewOnFrameSelection_CanExecute()"
  },
  {
    "label": "ContextMenu_ZoomTimingViewOnFrameSelection_IsChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ZoomTimingViewOnFrameSelection_IsChecked()"
  },
  {
    "label": "ContextMenu_ScrollLogView_Execute()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ContextMenu_ScrollLogView_Execute()"
  },
  {
    "label": "ContextMenu_ScrollLogView_CanExecute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ContextMenu_ScrollLogView_CanExecute()"
  },
  {
    "label": "BindCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BindCommands()"
  },
  {
    "label": "HorizontalScrollBar_OnUserScrolled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HorizontalScrollBar_OnUserScrolled(float ScrollOffset)"
  },
  {
    "label": "UpdateHorizontalScrollBar()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateHorizontalScrollBar()"
  },
  {
    "label": "ZoomHorizontally()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomHorizontally(const float Delta, const float X)"
  }
]