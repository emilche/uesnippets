[
  {
    "label": "GetMarketLine()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_MARKET_IO_H # define EIGEN_SPARSE_MARKET_IO_H # include<iostream> # include<vector> namespace Eigen { namespace internal { template<Scalar,StorageIndex> void)",
    "insertText": "GetMarketLine(const char* line, StorageIndex& i, StorageIndex& j, Scalar& value)"
  },
  {
    "label": "sline()",
    "kind": "Method",
    "detail": "Function (std::stringstream)",
    "insertText": "sline(line)"
  },
  {
    "label": "GetMarketLine()",
    "kind": "Method",
    "detail": "Function (sline>> i>> j>> value ; } template<> void)",
    "insertText": "GetMarketLine(const char* line, int& i, int& j, float& value)"
  },
  {
    "label": "sscanf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sscanf(line, \"%d %d %g\", &i, &j, &value)"
  },
  {
    "label": "GetMarketLine()",
    "kind": "Method",
    "detail": "Function (} template<> void)",
    "insertText": "GetMarketLine(const char* line, int& i, int& j, double& value)"
  },
  {
    "label": "sscanf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sscanf(line, \"%d %d %lg\", &i, &j, &value)"
  },
  {
    "label": "GetMarketLine()",
    "kind": "Method",
    "detail": "Function (} template<> void)",
    "insertText": "GetMarketLine(const char* line, int& i, int& j, std::complex<float>& value)"
  },
  {
    "label": "sscanf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sscanf(line, \"%d %d %g %g\", &i, &j, &numext::real_ref(value), &numext::imag_ref(value))"
  },
  {
    "label": "GetMarketLine()",
    "kind": "Method",
    "detail": "Function (} template<> void)",
    "insertText": "GetMarketLine(const char* line, int& i, int& j, std::complex<double>& value)"
  },
  {
    "label": "sscanf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "sscanf(line, \"%d %d %lg %lg\", &i, &j, &numext::real_ref(value), &numext::imag_ref(value))"
  },
  {
    "label": "GetMarketLine()",
    "kind": "Method",
    "detail": "Function (} template<Scalar,StorageIndex> void)",
    "insertText": "GetMarketLine(const char* line, StorageIndex& i, StorageIndex& j, std::complex<Scalar>& value)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (Scalar valR,valI ; sline>> i>> j>> valR>> valI ; value = std::complex<)",
    "insertText": "Scalar(valR,valI)"
  },
  {
    "label": "GetVectorElt()",
    "kind": "Method",
    "detail": "Function (} template<RealScalar> void)",
    "insertText": "GetVectorElt(const std::string& line, RealScalar& val)"
  },
  {
    "label": "newline()",
    "kind": "Method",
    "detail": "Function (std::istringstream)",
    "insertText": "newline(line)"
  },
  {
    "label": "GetVectorElt()",
    "kind": "Method",
    "detail": "Function (newline>> val ; } template<RealScalar> void)",
    "insertText": "GetVectorElt(const std::string& line, std::complex<RealScalar>& val)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (newline>> valR>> valI ; val = std::complex<)",
    "insertText": "RealScalar(valR, valI)"
  },
  {
    "label": "putMarketHeader()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> void)",
    "insertText": "putMarketHeader(std::string& header,int sym)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (header = \" % % MatrixMarket matrix coordinate \" ;)",
    "insertText": "if(internal::is_same<Scalar, std::complex<float> >::value || internal::is_same<Scalar, std::complex<double> >::value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (header + = \" complex \" ;)",
    "insertText": "if(sym == Symmetric)"
  },
  {
    "label": "PutMatrixElt()",
    "kind": "Method",
    "detail": "Function (out<<row<<\" \"<<col<<\" \"<<value<<\" \\ n \" ; } template<Scalar,StorageIndex> void)",
    "insertText": "PutMatrixElt(std::complex<Scalar> value, StorageIndex row, StorageIndex col, std::ofstream& out)"
  },
  {
    "label": "real()",
    "kind": "Method",
    "detail": "Function (out<<row<<\" \"<<col<<\" \"<<value .)",
    "insertText": "real() << \" \" << value.imag()"
  },
  {
    "label": "putVectorElt()",
    "kind": "Method",
    "detail": "Function (} template<Scalar> void)",
    "insertText": "putVectorElt(Scalar value, std::ofstream& out)"
  },
  {
    "label": "putVectorElt()",
    "kind": "Method",
    "detail": "Function (out<<value<<\" \\ n \" ; } template<Scalar> void)",
    "insertText": "putVectorElt(std::complex<Scalar> value, std::ofstream& out)"
  },
  {
    "label": "getMarketHeader()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "getMarketHeader(const std::string& filename, int& sym, bool& iscomplex, bool& isvector)"
  },
  {
    "label": "in()",
    "kind": "Method",
    "detail": "Function (sym = 0 ; iscomplex = false ; isvector = false ; std::ifstream)",
    "insertText": "in(filename.c_str(),std::ios::in)"
  },
  {
    "label": "getline()",
    "kind": "Method",
    "detail": "Function (std::string line ;)",
    "insertText": "getline(in, line)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(in.good())"
  },
  {
    "label": "fmtline()",
    "kind": "Method",
    "detail": "Function (std::stringstream)",
    "insertText": "fmtline(line)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (std::string substr [ 5 ] ; fmtline>> substr [ 0 ]>> substr [ 1 ]>> substr [ 2 ]>> substr [ 3 ]>> substr [ 4 ] ;)",
    "insertText": "if(substr[2].compare(\"array\") == 0)"
  },
  {
    "label": "input()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrixType::Scalar Scalar ; typedef SparseMatrixType::StorageIndex StorageIndex ; std::ifstream)",
    "insertText": "input(filename.c_str(),std::ios::in)"
  },
  {
    "label": "rdbuf()",
    "kind": "Method",
    "detail": "Function (char rdbuffer [ 4 0 9 6 ] ; input .)",
    "insertText": "rdbuf()->pubsetbuf(rdbuffer, 4096)"
  },
  {
    "label": "M()",
    "kind": "Method",
    "detail": "Function (const int maxBuffersize = 2 0 4 8 ; char buffer [ maxBuffersize ] ; bool readsizes = false ; typedef Triplet<Scalar,StorageIndex> T ; std::vector<T> elements ; Index)",
    "insertText": "M(-1), N(-1), NNZ(-1)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (Index count = 0 ;)",
    "insertText": "while(input.getline(buffer, maxBuffersize))"
  },
  {
    "label": "line()",
    "kind": "Method",
    "detail": "Function (std::stringstream)",
    "insertText": "line(buffer)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (line>> M>> N>> NNZ ;)",
    "insertText": "if(M > 0 && N > 0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (readsizes = true ; mat .)",
    "insertText": "resize(M,N)"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (mat .)",
    "insertText": "reserve(NNZ)"
  },
  {
    "label": "i()",
    "kind": "Method",
    "detail": "Function (} } else { StorageIndex)",
    "insertText": "i(-1), j(-1)"
  },
  {
    "label": "GetMarketLine()",
    "kind": "Method",
    "detail": "Function (Scalar value ;)",
    "insertText": "GetMarketLine(buffer, i, j, value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (i - - ; j - - ;)",
    "insertText": "if(i>=0 && j>=0 && i<M && j<N)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (+ + count ; elements .)",
    "insertText": "push_back(T(i,j,value))"
  },
  {
    "label": "setFromTriplets()",
    "kind": "Method",
    "detail": "Function (} else std::cerr<<\" Invalid read : \"<<i<<\",\"<<j<<\" \\ n \" ; } } mat .)",
    "insertText": "setFromTriplets(elements.begin(), elements.end())"
  },
  {
    "label": "close()",
    "kind": "Method",
    "detail": "Function (input .)",
    "insertText": "close()"
  },
  {
    "label": "in()",
    "kind": "Method",
    "detail": "Function (typedef VectorType::Scalar Scalar ; std::ifstream)",
    "insertText": "in(filename.c_str(), std::ios::in)"
  },
  {
    "label": "n()",
    "kind": "Method",
    "detail": "Function (std::string line ; int)",
    "insertText": "n(0), col(0)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "while(line[0] == '%')"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (newline>> n>> col ;)",
    "insertText": "eigen_assert(n>0 && col>0)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (vec .)",
    "insertText": "resize(n)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (int i = 0 ; Scalar value ;)",
    "insertText": "while(std::getline(in, line) && (i < n))"
  },
  {
    "label": "GetVectorElt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetVectorElt(line, value)"
  },
  {
    "label": "vec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vec(i++)"
  },
  {
    "label": "saveMarket()",
    "kind": "Method",
    "detail": "Function (std::cerr<<\" Unable to read all elements from file \"<<filename<<\" \\ n \" ; return false ; } return true ; } template<SparseMatrixType> bool)",
    "insertText": "saveMarket(const SparseMatrixType& mat, const std::string& filename, int sym = 0)"
  },
  {
    "label": "out()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrixType::Scalar Scalar ; typedef SparseMatrixType::RealScalar RealScalar ; std::ofstream)",
    "insertText": "out(filename.c_str(),std::ios::out)"
  },
  {
    "label": "flags()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "flags(std::ios_base::scientific)"
  },
  {
    "label": "precision()",
    "kind": "Method",
    "detail": "Function (out .)",
    "insertText": "precision(std::numeric_limits<RealScalar>::digits10 + 2)"
  },
  {
    "label": "Scalar()",
    "kind": "Method",
    "detail": "Function (std::string header ; internal::putMarketHeader<)",
    "insertText": "Scalar(header, sym)"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (out<<header<<std::endl ; out<<mat .)",
    "insertText": "rows() << \" \" << mat.cols() << \" \" << mat.nonZeros()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int count = 0 ;)",
    "insertText": "for(int j=0; j<mat.outerSize(); ++j) for(typename SparseMatrixType::InnerIterator it(mat,j); it; ++it)"
  },
  {
    "label": "PutMatrixElt()",
    "kind": "Method",
    "detail": "Function (+ + count ;)",
    "insertText": "PutMatrixElt(it.value(), it.row()+1, it.col()+1, out)"
  },
  {
    "label": "putVectorElt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "putVectorElt(vec(i), out)"
  }
]