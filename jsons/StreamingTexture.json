[
  {
    "label": "FRenderAssetStreamingManager",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderAssetStreamingManager"
  },
  {
    "label": "FRenderAssetStreamingSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRenderAssetStreamingSettings"
  },
  {
    "label": "FStreamingRenderAsset",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStreamingRenderAsset"
  },
  {
    "label": "EOptionalMipsState",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EOptionalMipsState"
  },
  {
    "label": "FStreamingRenderAsset()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Engine / StreamableRenderAsset . h \" # include \" Engine / TextureDefines . h \" struct FRenderAssetStreamingManager ; struct FRenderAssetStreamingSettings ; struct FStreamingRenderAsset { enum EOptionalMipsState : uint8 { OMS_NotCached,OMS_NoOptionalMips,OMS_HasOptionalMips,OMS_Num } ;)",
    "insertText": "FStreamingRenderAsset(UStreamableRenderAsset* InRenderAsset, const int32* NumStreamedMips, int32 NumLODGroups, const FRenderAssetStreamingSettings& Settings)"
  },
  {
    "label": "UpdateStaticData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateStaticData(const FRenderAssetStreamingSettings& Settings)"
  },
  {
    "label": "UpdateDynamicData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateDynamicData(const int32* NumStreamedMips, int32 NumLODGroups, const FRenderAssetStreamingSettings& Settings, bool bWaitForMipFading, TArray<UStreamableRenderAsset*>* DeferredTickCBAssets = nullptr)"
  },
  {
    "label": "UpdateStreamingStatus()",
    "kind": "Method",
    "detail": "Function (FStreamableRenderResourceState)",
    "insertText": "UpdateStreamingStatus(bool bWaitForMipFading, TArray<UStreamableRenderAsset*>* DeferredTickCBAssets = nullptr)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize(int32 InMipCount)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (default : return)",
    "insertText": "TEXT(\"Unkown\")"
  },
  {
    "label": "GetDefaultExtraBoost()",
    "kind": "Method",
    "detail": "Function (} } float)",
    "insertText": "GetDefaultExtraBoost(bool bUseNewMetrics)"
  },
  {
    "label": "GetWantedMipsFromSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetWantedMipsFromSize(float Size, float InvMaxScreenSizeOverAllViews)"
  },
  {
    "label": "SetPerfectWantedMips_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPerfectWantedMips_Async(float MaxSize, float MaxSize_VisibleOnly, float MaxScreenSizeOverAllViews, int32 MaxNumForcedLODs, bool InLooksLowRes, const FRenderAssetStreamingSettings& Settings)"
  },
  {
    "label": "UpdateRetentionPriority_Async()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "UpdateRetentionPriority_Async(bool bPrioritizeMesh)"
  },
  {
    "label": "DropMaxResolution_Async()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "DropMaxResolution_Async(int32 NumDroppedMips)"
  },
  {
    "label": "DropOneMip_Async()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "DropOneMip_Async()"
  },
  {
    "label": "KeepOneMip_Async()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "KeepOneMip_Async()"
  },
  {
    "label": "GetDropMaxResMemDelta()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetDropMaxResMemDelta(int32 NumDroppedMips)"
  },
  {
    "label": "GetDropOneMipMemDelta()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetDropOneMipMemDelta()"
  },
  {
    "label": "GetMaxAllowedSize()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxAllowedSize(float MaxScreenSizeOverAllViews)"
  },
  {
    "label": "GetNormalizedScreenSize()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetNormalizedScreenSize(int32 NumMips)"
  },
  {
    "label": "UpdateLoadOrderPriority_Async()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "UpdateLoadOrderPriority_Async(const FRenderAssetStreamingSettings& Settings)"
  },
  {
    "label": "UpdateOptionalMipsState_Async()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateOptionalMipsState_Async()"
  },
  {
    "label": "CancelStreamingRequest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelStreamingRequest()"
  },
  {
    "label": "StreamWantedMips()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamWantedMips(FRenderAssetStreamingManager& Manager)"
  },
  {
    "label": "CacheStreamingMetaData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CacheStreamingMetaData()"
  },
  {
    "label": "StreamWantedMipsUsingCachedData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamWantedMipsUsingCachedData(FRenderAssetStreamingManager& Manager)"
  },
  {
    "label": "IsTexture()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTexture()"
  },
  {
    "label": "IsMaxResolutionAffectedByGlobalBias()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsMaxResolutionAffectedByGlobalBias()"
  },
  {
    "label": "HasUpdatePending()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HasUpdatePending(bool bIsStreamingPaused, bool bHasViewPoint)"
  },
  {
    "label": "bIsStreamingPaused()",
    "kind": "Method",
    "detail": "Function (const bool bBudgetedMipsIsValid = bHasViewPoint | | bForceFullyLoadHeuristic ; return !)",
    "insertText": "bIsStreamingPaused(BudgetedMips > ResidentMips || !bBudgetedMipsIsValid)"
  },
  {
    "label": "StreamWantedMips_Internal()",
    "kind": "Method",
    "detail": "Function (} UStreamableRenderAsset* RenderAsset ; FIoFilenameHash OptionalFileHash = INVALID_IO_FILENAME_HASH ; int32 LODGroup ; float BoostFactor ; union { uint32 CumulativeLODSizes [ FStreamableRenderResourceState::MAX_LOD_COUNT ] ; struct { uint32 CumulativeLODSizes_Mesh [ FStreamableRenderResourceState::MAX_LOD_COUNT / 2 ] ; float LODScreenSizes [ FStreamableRenderResourceState::MAX_LOD_COUNT / 2 ] ; } ; } ; float LastRenderTime ; double InstanceRemovedTimestamp ; float DynamicBoostFactor ; int32 RetentionPriority ; float NormalizedScreenSize ; int32 LoadOrderPriority ; int32 BudgetMipBias ; int32 NoRefLODBias ; int8 WantedMips ; int8 NumForcedMips ; int8 ResidentMips ; int8 RequestedMips ; int8 MinAllowedMips ; int8 MaxAllowedMips ; int8 NumMissingMips ; int8 VisibleWantedMips ; int8 HiddenWantedMips ; int8 BudgetedMips ; int8 CachedWantedMips ; int8 CachedVisibleWantedMips ; EStreamableRenderAssetType RenderAssetType ; EOptionalMipsState OptionalMipsState ; uint8 bLoadWithHigherPriority : 1 ; uint8 bIsTerrainTexture : 1 ; uint8 bForceFullyLoad : 1 ; uint8 bIgnoreStreamingMipBias : 1 ; uint8 bHasUpdatePending : 1 ; uint8 bForceFullyLoadHeuristic : 1 ; uint8 bUseUnkownRefHeuristic : 1 ; uint8 bLooksLowRes : 1 ; uint8 bMissingTooManyMips : 1 ; uint8 bCachedForceFullyLoadHeuristic : 1 ; TBitArray<> LevelIndexUsage ; private : void)",
    "insertText": "StreamWantedMips_Internal(FRenderAssetStreamingManager& Manager, bool bUseCachedData)"
  }
]