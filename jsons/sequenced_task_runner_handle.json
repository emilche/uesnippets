[
  {
    "label": "ThreadTaskRunnerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ThreadTaskRunnerHandle"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_THREADING_SEQUENCED_TASK_RUNNER_HANDLE_H_ # define BASE_THREADING_SEQUENCED_TASK_RUNNER_HANDLE_H_ # include \" base / base_export . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / task / sequenced_task_runner . h \" namespace base { class ThreadTaskRunnerHandle ; class BASE_EXPORT SequencedTaskRunnerHandle { public : [ [ nodiscard ] ] const scoped_refptr<SequencedTaskRunner>&)",
    "insertText": "Get()"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "SequencedTaskRunnerHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequencedTaskRunnerHandle(scoped_refptr<SequencedTaskRunner> task_runner) : contained_current_default_(std::move(task_runner))"
  },
  {
    "label": "SequencedTaskRunnerHandle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SequencedTaskRunnerHandle(const SequencedTaskRunnerHandle&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequencedTaskRunnerHandle&)",
    "insertText": "operator(const SequencedTaskRunnerHandle&)"
  },
  {
    "label": "SequencedTaskRunnerHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "SequencedTaskRunnerHandle()"
  }
]