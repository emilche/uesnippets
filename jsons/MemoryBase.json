[
  {
    "label": "UWorld",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UWorld"
  },
  {
    "label": "TAtomic",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TAtomic"
  },
  {
    "label": "FMalloc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMalloc"
  },
  {
    "label": "FGenericMemoryStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericMemoryStats"
  },
  {
    "label": "FUseSystemMallocForNew",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUseSystemMallocForNew"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "FCurrentFrameCalls",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCurrentFrameCalls"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" HAL / PlatformAtomics . h \" # include \" HAL / PlatformCrt . h \" # include \" Misc / Exec . h \" # include \" Misc / OutputDevice . h \" # include \" Templates / Atomic . h \" class UWorld ; template<T> class TAtomic ; # ifndef UPDATE_MALLOC_STATS # define UPDATE_MALLOC_STATS 1 # endif enum { DEFAULT_ALIGNMENT = 0,MIN_ALIGNMENT = 8,} ; class FMalloc* GMalloc ; class FMalloc** GFixedMallocLocationPtr ; struct FGenericMemoryStats ; class FUseSystemMallocForNew { public : void* operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void* Ptr)"
  },
  {
    "label": "Malloc()",
    "kind": "Method",
    "detail": "Function (} ; class FMalloc : public FUseSystemMallocForNew,public FExec { public : void*)",
    "insertText": "Malloc(SIZE_T Count, uint32 Alignment=DEFAULT_ALIGNMENT)"
  },
  {
    "label": "TryMalloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryMalloc(SIZE_T Count, uint32 Alignment=DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void* Original, SIZE_T Count, uint32 Alignment=DEFAULT_ALIGNMENT)"
  },
  {
    "label": "TryRealloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryRealloc(void* Original, SIZE_T Count, uint32 Alignment=DEFAULT_ALIGNMENT)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Original)"
  },
  {
    "label": "MallocZeroed()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "MallocZeroed(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "TryMallocZeroed()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "TryMallocZeroed(SIZE_T Count, uint32 Alignment = DEFAULT_ALIGNMENT)"
  },
  {
    "label": "QuantizeSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "QuantizeSize(SIZE_T Count, uint32 Alignment)"
  },
  {
    "label": "SetupTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetupTLSCachesOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUsedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUsedOnCurrentThread()"
  },
  {
    "label": "MarkTLSCachesAsUnusedOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkTLSCachesAsUnusedOnCurrentThread()"
  },
  {
    "label": "ClearAndDisableTLSCachesOnCurrentThread()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClearAndDisableTLSCachesOnCurrentThread()"
  },
  {
    "label": "InitializeStatsMetadata()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeStatsMetadata()"
  },
  {
    "label": "Exec()",
    "kind": "Method",
    "detail": "Function (# if UE_ALLOW_EXEC_COMMANDS bool)",
    "insertText": "Exec(UWorld* InWorld, const TCHAR* Cmd, FOutputDevice& Ar)"
  },
  {
    "label": "GetAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllocatorStats(FGenericMemoryStats& out_Stats)"
  },
  {
    "label": "DumpAllocatorStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAllocatorStats(class FOutputDevice& Ar)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "Logf(TEXT(\"Allocator Stats for %s: (not implemented)\" ), GetDescriptiveName())"
  },
  {
    "label": "IsInternallyThreadSafe()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsInternallyThreadSafe()"
  },
  {
    "label": "GetDescriptiveName()",
    "kind": "Method",
    "detail": "Function (} const TCHAR*)",
    "insertText": "GetDescriptiveName()"
  },
  {
    "label": "OnMallocInitialized()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnMallocInitialized()"
  },
  {
    "label": "OnPreFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPreFork()"
  },
  {
    "label": "OnPostFork()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPostFork()"
  },
  {
    "label": "GetFreeCachedMemorySize()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "GetFreeCachedMemorySize()"
  }
]