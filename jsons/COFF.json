[
  {
    "label": "header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "header"
  },
  {
    "label": "BigObjHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "BigObjHeader"
  },
  {
    "label": "MachineTypes",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MachineTypes"
  },
  {
    "label": "Characteristics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Characteristics"
  },
  {
    "label": "symbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "symbol"
  },
  {
    "label": "SymbolSectionNumber",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolSectionNumber"
  },
  {
    "label": "SymbolStorageClass",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolStorageClass"
  },
  {
    "label": "SymbolBaseType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolBaseType"
  },
  {
    "label": "SymbolComplexType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SymbolComplexType"
  },
  {
    "label": "AuxSymbolType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "AuxSymbolType"
  },
  {
    "label": "section",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "section"
  },
  {
    "label": "SectionCharacteristics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SectionCharacteristics"
  },
  {
    "label": "relocation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "relocation"
  },
  {
    "label": "RelocationTypeI386",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RelocationTypeI386"
  },
  {
    "label": "RelocationTypeAMD64",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RelocationTypeAMD64"
  },
  {
    "label": "RelocationTypesARM",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RelocationTypesARM"
  },
  {
    "label": "COMDATType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "COMDATType"
  },
  {
    "label": "AuxiliaryFunctionDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AuxiliaryFunctionDefinition"
  },
  {
    "label": "AuxiliarybfAndefSymbol",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AuxiliarybfAndefSymbol"
  },
  {
    "label": "AuxiliaryWeakExternal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AuxiliaryWeakExternal"
  },
  {
    "label": "WeakExternalCharacteristics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WeakExternalCharacteristics"
  },
  {
    "label": "AuxiliarySectionDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AuxiliarySectionDefinition"
  },
  {
    "label": "AuxiliaryCLRToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AuxiliaryCLRToken"
  },
  {
    "label": "ImportDirectoryTableEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImportDirectoryTableEntry"
  },
  {
    "label": "ImportLookupTableEntry32",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImportLookupTableEntry32"
  },
  {
    "label": "DOSHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DOSHeader"
  },
  {
    "label": "PE32Header",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PE32Header"
  },
  {
    "label": "DataDirectory",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataDirectory"
  },
  {
    "label": "DataDirectoryIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DataDirectoryIndex"
  },
  {
    "label": "WindowsSubsystem",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "WindowsSubsystem"
  },
  {
    "label": "DLLCharacteristics",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DLLCharacteristics"
  },
  {
    "label": "DebugType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "DebugType"
  },
  {
    "label": "BaseRelocationType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BaseRelocationType"
  },
  {
    "label": "ImportType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ImportType"
  },
  {
    "label": "ImportNameType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ImportNameType"
  },
  {
    "label": "ImportHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ImportHeader"
  },
  {
    "label": "CodeViewIdentifiers",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "CodeViewIdentifiers"
  },
  {
    "label": "isOrdinal()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_COFF_H # define LLVM_SUPPORT_COFF_H # include \" llvm / Support / DataTypes . h \" # include<cassert> # include<cstring> namespace llvm { namespace COFF { const int32_t MaxNumberOfSections16 = 6 5 2 7 9 ; const char PEMagic [ ] = { ' P ',' E ',' \\ 0 ',' \\ 0 ' } ; const char BigObjMagic [ ] = { ' \\ xc7 ',' \\ xa1 ',' \\ xba ',' \\ xd1 ',' \\ xee ',' \\ xba ',' \\ xa9 ',' \\ x4b ',' \\ xaf ',' \\ x20 ',' \\ xfa ',' \\ xf6 ',' \\ x6a ',' \\ xa4 ',' \\ xdc ',' \\ xb8 ',} ; enum { Header16Size = 2 0,Header32Size = 5 6,NameSize = 8,Symbol16Size = 1 8,Symbol32Size = 2 0,SectionSize = 4 0,RelocationSize = 1 0 } ; struct header { uint16_t Machine ; int32_t NumberOfSections ; uint32_t TimeDateStamp ; uint32_t PointerToSymbolTable ; uint32_t NumberOfSymbols ; uint16_t SizeOfOptionalHeader ; uint16_t Characteristics ; } ; struct BigObjHeader { enum : uint16_t { MinBigObjectVersion = 2 } ; uint16_t Sig1 ; uint16_t Sig2 ; uint16_t Version ; uint16_t Machine ; uint32_t TimeDateStamp ; uint8_t UUID [ 1 6 ] ; uint32_t unused1 ; uint32_t unused2 ; uint32_t unused3 ; uint32_t unused4 ; uint32_t NumberOfSections ; uint32_t PointerToSymbolTable ; uint32_t NumberOfSymbols ; } ; enum MachineTypes { MT_Invalid = 0 xffff,IMAGE_FILE_MACHINE_UNKNOWN = 0 x0,IMAGE_FILE_MACHINE_AM33 = 0 x13,IMAGE_FILE_MACHINE_AMD64 = 0 x8664,IMAGE_FILE_MACHINE_ARM = 0 x1C0,IMAGE_FILE_MACHINE_ARMNT = 0 x1C4,IMAGE_FILE_MACHINE_EBC = 0 xEBC,IMAGE_FILE_MACHINE_I386 = 0 x14C,IMAGE_FILE_MACHINE_IA64 = 0 x200,IMAGE_FILE_MACHINE_M32R = 0 x9041,IMAGE_FILE_MACHINE_MIPS16 = 0 x266,IMAGE_FILE_MACHINE_MIPSFPU = 0 x366,IMAGE_FILE_MACHINE_MIPSFPU16 = 0 x466,IMAGE_FILE_MACHINE_POWERPC = 0 x1F0,IMAGE_FILE_MACHINE_POWERPCFP = 0 x1F1,IMAGE_FILE_MACHINE_R4000 = 0 x166,IMAGE_FILE_MACHINE_SH3 = 0 x1A2,IMAGE_FILE_MACHINE_SH3DSP = 0 x1A3,IMAGE_FILE_MACHINE_SH4 = 0 x1A6,IMAGE_FILE_MACHINE_SH5 = 0 x1A8,IMAGE_FILE_MACHINE_THUMB = 0 x1C2,IMAGE_FILE_MACHINE_WCEMIPSV2 = 0 x169 } ; enum Characteristics { C_Invalid = 0,IMAGE_FILE_RELOCS_STRIPPED = 0 x0001,IMAGE_FILE_EXECUTABLE_IMAGE = 0 x0002,IMAGE_FILE_LINE_NUMS_STRIPPED = 0 x0004,IMAGE_FILE_LOCAL_SYMS_STRIPPED = 0 x0008,IMAGE_FILE_AGGRESSIVE_WS_TRIM = 0 x0010,IMAGE_FILE_LARGE_ADDRESS_AWARE = 0 x0020,IMAGE_FILE_BYTES_REVERSED_LO = 0 x0080,IMAGE_FILE_32BIT_MACHINE = 0 x0100,IMAGE_FILE_DEBUG_STRIPPED = 0 x0200,IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP = 0 x0400,IMAGE_FILE_NET_RUN_FROM_SWAP = 0 x0800,IMAGE_FILE_SYSTEM = 0 x1000,IMAGE_FILE_DLL = 0 x2000,IMAGE_FILE_UP_SYSTEM_ONLY = 0 x4000,IMAGE_FILE_BYTES_REVERSED_HI = 0 x8000 } ; struct symbol { char Name [ NameSize ] ; uint32_t Value ; int32_t SectionNumber ; uint16_t Type ; uint8_t StorageClass ; uint8_t NumberOfAuxSymbols ; } ; enum SymbolSectionNumber : int32_t { IMAGE_SYM_DEBUG = - 2,IMAGE_SYM_ABSOLUTE = - 1,IMAGE_SYM_UNDEFINED = 0 } ; enum SymbolStorageClass { SSC_Invalid = 0 xff,IMAGE_SYM_CLASS_END_OF_FUNCTION = - 1,IMAGE_SYM_CLASS_NULL = 0,IMAGE_SYM_CLASS_AUTOMATIC = 1,IMAGE_SYM_CLASS_EXTERNAL = 2,IMAGE_SYM_CLASS_STATIC = 3,IMAGE_SYM_CLASS_REGISTER = 4,IMAGE_SYM_CLASS_EXTERNAL_DEF = 5,IMAGE_SYM_CLASS_LABEL = 6,IMAGE_SYM_CLASS_UNDEFINED_LABEL = 7,IMAGE_SYM_CLASS_MEMBER_OF_STRUCT = 8,IMAGE_SYM_CLASS_ARGUMENT = 9,IMAGE_SYM_CLASS_STRUCT_TAG = 1 0,IMAGE_SYM_CLASS_MEMBER_OF_UNION = 1 1,IMAGE_SYM_CLASS_UNION_TAG = 1 2,IMAGE_SYM_CLASS_TYPE_DEFINITION = 1 3,IMAGE_SYM_CLASS_UNDEFINED_STATIC = 1 4,IMAGE_SYM_CLASS_ENUM_TAG = 1 5,IMAGE_SYM_CLASS_MEMBER_OF_ENUM = 1 6,IMAGE_SYM_CLASS_REGISTER_PARAM = 1 7,IMAGE_SYM_CLASS_BIT_FIELD = 1 8,IMAGE_SYM_CLASS_BLOCK = 1 0 0,IMAGE_SYM_CLASS_FUNCTION = 1 0 1,IMAGE_SYM_CLASS_END_OF_STRUCT = 1 0 2,IMAGE_SYM_CLASS_FILE = 1 0 3,IMAGE_SYM_CLASS_SECTION = 1 0 4,IMAGE_SYM_CLASS_WEAK_EXTERNAL = 1 0 5,IMAGE_SYM_CLASS_CLR_TOKEN = 1 0 7 } ; enum SymbolBaseType { IMAGE_SYM_TYPE_NULL = 0,IMAGE_SYM_TYPE_VOID = 1,IMAGE_SYM_TYPE_CHAR = 2,IMAGE_SYM_TYPE_SHORT = 3,IMAGE_SYM_TYPE_INT = 4,IMAGE_SYM_TYPE_LONG = 5,IMAGE_SYM_TYPE_FLOAT = 6,IMAGE_SYM_TYPE_DOUBLE = 7,IMAGE_SYM_TYPE_STRUCT = 8,IMAGE_SYM_TYPE_UNION = 9,IMAGE_SYM_TYPE_ENUM = 1 0,IMAGE_SYM_TYPE_MOE = 1 1,IMAGE_SYM_TYPE_BYTE = 1 2,IMAGE_SYM_TYPE_WORD = 1 3,IMAGE_SYM_TYPE_UINT = 1 4,IMAGE_SYM_TYPE_DWORD = 1 5 } ; enum SymbolComplexType { IMAGE_SYM_DTYPE_NULL = 0,IMAGE_SYM_DTYPE_POINTER = 1,IMAGE_SYM_DTYPE_FUNCTION = 2,IMAGE_SYM_DTYPE_ARRAY = 3,SCT_COMPLEX_TYPE_SHIFT = 4 } ; enum AuxSymbolType { IMAGE_AUX_SYMBOL_TYPE_TOKEN_DEF = 1 } ; struct section { char Name [ NameSize ] ; uint32_t VirtualSize ; uint32_t VirtualAddress ; uint32_t SizeOfRawData ; uint32_t PointerToRawData ; uint32_t PointerToRelocations ; uint32_t PointerToLineNumbers ; uint16_t NumberOfRelocations ; uint16_t NumberOfLineNumbers ; uint32_t Characteristics ; } ; enum SectionCharacteristics : uint32_t { SC_Invalid = 0 xffffffff,IMAGE_SCN_TYPE_NO_PAD = 0 x00000008,IMAGE_SCN_CNT_CODE = 0 x00000020,IMAGE_SCN_CNT_INITIALIZED_DATA = 0 x00000040,IMAGE_SCN_CNT_UNINITIALIZED_DATA = 0 x00000080,IMAGE_SCN_LNK_OTHER = 0 x00000100,IMAGE_SCN_LNK_INFO = 0 x00000200,IMAGE_SCN_LNK_REMOVE = 0 x00000800,IMAGE_SCN_LNK_COMDAT = 0 x00001000,IMAGE_SCN_GPREL = 0 x00008000,IMAGE_SCN_MEM_PURGEABLE = 0 x00020000,IMAGE_SCN_MEM_16BIT = 0 x00020000,IMAGE_SCN_MEM_LOCKED = 0 x00040000,IMAGE_SCN_MEM_PRELOAD = 0 x00080000,IMAGE_SCN_ALIGN_1BYTES = 0 x00100000,IMAGE_SCN_ALIGN_2BYTES = 0 x00200000,IMAGE_SCN_ALIGN_4BYTES = 0 x00300000,IMAGE_SCN_ALIGN_8BYTES = 0 x00400000,IMAGE_SCN_ALIGN_16BYTES = 0 x00500000,IMAGE_SCN_ALIGN_32BYTES = 0 x00600000,IMAGE_SCN_ALIGN_64BYTES = 0 x00700000,IMAGE_SCN_ALIGN_128BYTES = 0 x00800000,IMAGE_SCN_ALIGN_256BYTES = 0 x00900000,IMAGE_SCN_ALIGN_512BYTES = 0 x00A00000,IMAGE_SCN_ALIGN_1024BYTES = 0 x00B00000,IMAGE_SCN_ALIGN_2048BYTES = 0 x00C00000,IMAGE_SCN_ALIGN_4096BYTES = 0 x00D00000,IMAGE_SCN_ALIGN_8192BYTES = 0 x00E00000,IMAGE_SCN_LNK_NRELOC_OVFL = 0 x01000000,IMAGE_SCN_MEM_DISCARDABLE = 0 x02000000,IMAGE_SCN_MEM_NOT_CACHED = 0 x04000000,IMAGE_SCN_MEM_NOT_PAGED = 0 x08000000,IMAGE_SCN_MEM_SHARED = 0 x10000000,IMAGE_SCN_MEM_EXECUTE = 0 x20000000,IMAGE_SCN_MEM_READ = 0 x40000000,IMAGE_SCN_MEM_WRITE = 0 x80000000 } ; struct relocation { uint32_t VirtualAddress ; uint32_t SymbolTableIndex ; uint16_t Type ; } ; enum RelocationTypeI386 { IMAGE_REL_I386_ABSOLUTE = 0 x0000,IMAGE_REL_I386_DIR16 = 0 x0001,IMAGE_REL_I386_REL16 = 0 x0002,IMAGE_REL_I386_DIR32 = 0 x0006,IMAGE_REL_I386_DIR32NB = 0 x0007,IMAGE_REL_I386_SEG12 = 0 x0009,IMAGE_REL_I386_SECTION = 0 x000A,IMAGE_REL_I386_SECREL = 0 x000B,IMAGE_REL_I386_TOKEN = 0 x000C,IMAGE_REL_I386_SECREL7 = 0 x000D,IMAGE_REL_I386_REL32 = 0 x0014 } ; enum RelocationTypeAMD64 { IMAGE_REL_AMD64_ABSOLUTE = 0 x0000,IMAGE_REL_AMD64_ADDR64 = 0 x0001,IMAGE_REL_AMD64_ADDR32 = 0 x0002,IMAGE_REL_AMD64_ADDR32NB = 0 x0003,IMAGE_REL_AMD64_REL32 = 0 x0004,IMAGE_REL_AMD64_REL32_1 = 0 x0005,IMAGE_REL_AMD64_REL32_2 = 0 x0006,IMAGE_REL_AMD64_REL32_3 = 0 x0007,IMAGE_REL_AMD64_REL32_4 = 0 x0008,IMAGE_REL_AMD64_REL32_5 = 0 x0009,IMAGE_REL_AMD64_SECTION = 0 x000A,IMAGE_REL_AMD64_SECREL = 0 x000B,IMAGE_REL_AMD64_SECREL7 = 0 x000C,IMAGE_REL_AMD64_TOKEN = 0 x000D,IMAGE_REL_AMD64_SREL32 = 0 x000E,IMAGE_REL_AMD64_PAIR = 0 x000F,IMAGE_REL_AMD64_SSPAN32 = 0 x0010 } ; enum RelocationTypesARM { IMAGE_REL_ARM_ABSOLUTE = 0 x0000,IMAGE_REL_ARM_ADDR32 = 0 x0001,IMAGE_REL_ARM_ADDR32NB = 0 x0002,IMAGE_REL_ARM_BRANCH24 = 0 x0003,IMAGE_REL_ARM_BRANCH11 = 0 x0004,IMAGE_REL_ARM_TOKEN = 0 x0005,IMAGE_REL_ARM_BLX24 = 0 x0008,IMAGE_REL_ARM_BLX11 = 0 x0009,IMAGE_REL_ARM_SECTION = 0 x000E,IMAGE_REL_ARM_SECREL = 0 x000F,IMAGE_REL_ARM_MOV32A = 0 x0010,IMAGE_REL_ARM_MOV32T = 0 x0011,IMAGE_REL_ARM_BRANCH20T = 0 x0012,IMAGE_REL_ARM_BRANCH24T = 0 x0014,IMAGE_REL_ARM_BLX23T = 0 x0015 } ; enum COMDATType { IMAGE_COMDAT_SELECT_NODUPLICATES = 1,IMAGE_COMDAT_SELECT_ANY,IMAGE_COMDAT_SELECT_SAME_SIZE,IMAGE_COMDAT_SELECT_EXACT_MATCH,IMAGE_COMDAT_SELECT_ASSOCIATIVE,IMAGE_COMDAT_SELECT_LARGEST,IMAGE_COMDAT_SELECT_NEWEST } ; struct AuxiliaryFunctionDefinition { uint32_t TagIndex ; uint32_t TotalSize ; uint32_t PointerToLinenumber ; uint32_t PointerToNextFunction ; char unused [ 2 ] ; } ; struct AuxiliarybfAndefSymbol { uint8_t unused1 [ 4 ] ; uint16_t Linenumber ; uint8_t unused2 [ 6 ] ; uint32_t PointerToNextFunction ; uint8_t unused3 [ 2 ] ; } ; struct AuxiliaryWeakExternal { uint32_t TagIndex ; uint32_t Characteristics ; uint8_t unused [ 1 0 ] ; } ; enum WeakExternalCharacteristics { IMAGE_WEAK_EXTERN_SEARCH_NOLIBRARY = 1,IMAGE_WEAK_EXTERN_SEARCH_LIBRARY = 2,IMAGE_WEAK_EXTERN_SEARCH_ALIAS = 3 } ; struct AuxiliarySectionDefinition { uint32_t Length ; uint16_t NumberOfRelocations ; uint16_t NumberOfLinenumbers ; uint32_t CheckSum ; uint32_t Number ; uint8_t Selection ; char unused ; } ; struct AuxiliaryCLRToken { uint8_t AuxType ; uint8_t unused1 ; uint32_t SymbolTableIndex ; char unused2 [ 1 2 ] ; } ; union Auxiliary { AuxiliaryFunctionDefinition FunctionDefinition ; AuxiliarybfAndefSymbol bfAndefSymbol ; AuxiliaryWeakExternal WeakExternal ; AuxiliarySectionDefinition SectionDefinition ; } ; struct ImportDirectoryTableEntry { uint32_t ImportLookupTableRVA ; uint32_t TimeDateStamp ; uint32_t ForwarderChain ; uint32_t NameRVA ; uint32_t ImportAddressTableRVA ; } ; struct ImportLookupTableEntry32 { uint32_t data ; bool)",
    "insertText": "isOrdinal()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(isOrdinal() && \"ILT entry is not an ordinal!\")"
  },
  {
    "label": "getHintNameRVA()",
    "kind": "Method",
    "detail": "Function (data = o ; data | = 0 x80000000 ; } uint32_t)",
    "insertText": "getHintNameRVA()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!isOrdinal() && \"ILT entry is not a Hint/Name RVA!\")"
  },
  {
    "label": "getType()",
    "kind": "Method",
    "detail": "Function (data = rva ; } } ; struct DOSHeader { uint16_t Magic ; uint16_t UsedBytesInTheLastPage ; uint16_t FileSizeInPages ; uint16_t NumberOfRelocationItems ; uint16_t HeaderSizeInParagraphs ; uint16_t MinimumExtraParagraphs ; uint16_t MaximumExtraParagraphs ; uint16_t InitialRelativeSS ; uint16_t InitialSP ; uint16_t Checksum ; uint16_t InitialIP ; uint16_t InitialRelativeCS ; uint16_t AddressOfRelocationTable ; uint16_t OverlayNumber ; uint16_t Reserved [ 4 ] ; uint16_t OEMid ; uint16_t OEMinfo ; uint16_t Reserved2 [ 1 0 ] ; uint32_t AddressOfNewExeHeader ; } ; struct PE32Header { enum { PE32 = 0 x10b,PE32_PLUS = 0 x20b } ; uint16_t Magic ; uint8_t MajorLinkerVersion ; uint8_t MinorLinkerVersion ; uint32_t SizeOfCode ; uint32_t SizeOfInitializedData ; uint32_t SizeOfUninitializedData ; uint32_t AddressOfEntryPoint ; uint32_t BaseOfCode ; uint32_t BaseOfData ; uint32_t ImageBase ; uint32_t SectionAlignment ; uint32_t FileAlignment ; uint16_t MajorOperatingSystemVersion ; uint16_t MinorOperatingSystemVersion ; uint16_t MajorImageVersion ; uint16_t MinorImageVersion ; uint16_t MajorSubsystemVersion ; uint16_t MinorSubsystemVersion ; uint32_t Win32VersionValue ; uint32_t SizeOfImage ; uint32_t SizeOfHeaders ; uint32_t CheckSum ; uint16_t Subsystem ; uint16_t DLLCharacteristics ; uint32_t SizeOfStackReserve ; uint32_t SizeOfStackCommit ; uint32_t SizeOfHeapReserve ; uint32_t SizeOfHeapCommit ; uint32_t LoaderFlags ; uint32_t NumberOfRvaAndSize ; } ; struct DataDirectory { uint32_t RelativeVirtualAddress ; uint32_t Size ; } ; enum DataDirectoryIndex { EXPORT_TABLE = 0,IMPORT_TABLE,RESOURCE_TABLE,EXCEPTION_TABLE,CERTIFICATE_TABLE,BASE_RELOCATION_TABLE,DEBUG,ARCHITECTURE,GLOBAL_PTR,TLS_TABLE,LOAD_CONFIG_TABLE,BOUND_IMPORT,IAT,DELAY_IMPORT_DESCRIPTOR,CLR_RUNTIME_HEADER,NUM_DATA_DIRECTORIES } ; enum WindowsSubsystem { IMAGE_SUBSYSTEM_UNKNOWN = 0,IMAGE_SUBSYSTEM_NATIVE = 1,IMAGE_SUBSYSTEM_WINDOWS_GUI = 2,IMAGE_SUBSYSTEM_WINDOWS_CUI = 3,IMAGE_SUBSYSTEM_OS2_CUI = 5,IMAGE_SUBSYSTEM_POSIX_CUI = 7,IMAGE_SUBSYSTEM_NATIVE_WINDOWS = 8,IMAGE_SUBSYSTEM_WINDOWS_CE_GUI = 9,IMAGE_SUBSYSTEM_EFI_APPLICATION = 1 0,IMAGE_SUBSYSTEM_EFI_BOOT_SERVICE_DRIVER = 1 1,IMAGE_SUBSYSTEM_EFI_RUNTIME_DRIVER = 1 2,IMAGE_SUBSYSTEM_EFI_ROM = 1 3,IMAGE_SUBSYSTEM_XBOX = 1 4,IMAGE_SUBSYSTEM_WINDOWS_BOOT_APPLICATION = 1 6 } ; enum DLLCharacteristics { IMAGE_DLL_CHARACTERISTICS_HIGH_ENTROPY_VA = 0 x0020,IMAGE_DLL_CHARACTERISTICS_DYNAMIC_BASE = 0 x0040,IMAGE_DLL_CHARACTERISTICS_FORCE_INTEGRITY = 0 x0080,IMAGE_DLL_CHARACTERISTICS_NX_COMPAT = 0 x0100,IMAGE_DLL_CHARACTERISTICS_NO_ISOLATION = 0 x0200,IMAGE_DLL_CHARACTERISTICS_NO_SEH = 0 x0400,IMAGE_DLL_CHARACTERISTICS_NO_BIND = 0 x0800,IMAGE_DLL_CHARACTERISTICS_APPCONTAINER = 0 x1000,IMAGE_DLL_CHARACTERISTICS_WDM_DRIVER = 0 x2000,IMAGE_DLL_CHARACTERISTICS_GUARD_CF = 0 x4000,IMAGE_DLL_CHARACTERISTICS_TERMINAL_SERVER_AWARE = 0 x8000 } ; enum DebugType { IMAGE_DEBUG_TYPE_UNKNOWN = 0,IMAGE_DEBUG_TYPE_COFF = 1,IMAGE_DEBUG_TYPE_CODEVIEW = 2,IMAGE_DEBUG_TYPE_FPO = 3,IMAGE_DEBUG_TYPE_MISC = 4,IMAGE_DEBUG_TYPE_EXCEPTION = 5,IMAGE_DEBUG_TYPE_FIXUP = 6,IMAGE_DEBUG_TYPE_OMAP_TO_SRC = 7,IMAGE_DEBUG_TYPE_OMAP_FROM_SRC = 8,IMAGE_DEBUG_TYPE_BORLAND = 9,IMAGE_DEBUG_TYPE_CLSID = 1 1 } ; enum BaseRelocationType { IMAGE_REL_BASED_ABSOLUTE = 0,IMAGE_REL_BASED_HIGH = 1,IMAGE_REL_BASED_LOW = 2,IMAGE_REL_BASED_HIGHLOW = 3,IMAGE_REL_BASED_HIGHADJ = 4,IMAGE_REL_BASED_MIPS_JMPADDR = 5,IMAGE_REL_BASED_ARM_MOV32A = 5,IMAGE_REL_BASED_ARM_MOV32T = 7,IMAGE_REL_BASED_MIPS_JMPADDR16 = 9,IMAGE_REL_BASED_DIR64 = 1 0 } ; enum ImportType { IMPORT_CODE = 0,IMPORT_DATA = 1,IMPORT_CONST = 2 } ; enum ImportNameType { IMPORT_ORDINAL = 0,IMPORT_NAME = 1,IMPORT_NAME_NOPREFIX = 2,IMPORT_NAME_UNDECORATE = 3 } ; struct ImportHeader { uint16_t Sig1 ; uint16_t Sig2 ; uint16_t Version ; uint16_t Machine ; uint32_t TimeDateStamp ; uint32_t SizeOfData ; uint16_t OrdinalHint ; uint16_t TypeInfo ; ImportType)",
    "insertText": "getType()"
  },
  {
    "label": "getNameType()",
    "kind": "Method",
    "detail": "Function (} ImportNameType)",
    "insertText": "getNameType()"
  },
  {
    "label": "isReservedSectionNumber()",
    "kind": "Method",
    "detail": "Function (} } ; enum CodeViewIdentifiers { DEBUG_LINE_TABLES_HAVE_COLUMN_RECORDS = 0 x1,DEBUG_SECTION_MAGIC = 0 x4,DEBUG_SYMBOL_SUBSECTION = 0 xF1,DEBUG_LINE_TABLE_SUBSECTION = 0 xF2,DEBUG_STRING_TABLE_SUBSECTION = 0 xF3,DEBUG_INDEX_SUBSECTION = 0 xF4,DEBUG_SYMBOL_TYPE_PROC_START = 0 x1147,DEBUG_SYMBOL_TYPE_PROC_END = 0 x114F } ; bool)",
    "insertText": "isReservedSectionNumber(int32_t SectionNumber)"
  }
]