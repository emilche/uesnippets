[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FPredictProjectilePathParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPredictProjectilePathParams"
  },
  {
    "label": "FPredictProjectilePathPointData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPredictProjectilePathPointData"
  },
  {
    "label": "FPredictProjectilePathResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPredictProjectilePathResult"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" KismetSystemLibrary . h \" # include \" Engine / HitResult . h \" # include \" GameplayStaticsTypes . generated . h \")",
    "insertText": "UENUM()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (enum Type : int { DoNotTrace,TraceFullPath,OnlyTraceWhileAscending,} ; })",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_USTRUCT_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_USTRUCT_BODY()"
  },
  {
    "label": "FPredictProjectilePathParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPredictProjectilePathParams()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(0.f, FVector::ZeroVector, FVector::ForwardVector, 1.f, false)"
  },
  {
    "label": "FPredictProjectilePathParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPredictProjectilePathParams(float InProjectileRadius, FVector InStartLocation, FVector InLaunchVelocity, float InMaxSimTime)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InProjectileRadius, InStartLocation, InLaunchVelocity, InMaxSimTime, false)"
  },
  {
    "label": "FPredictProjectilePathParams()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPredictProjectilePathParams(float InProjectileRadius, FVector InStartLocation, FVector InLaunchVelocity, float InMaxSimTime, EObjectTypeQuery ObjectType, AActor* ActorToIgnore = nullptr)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(InProjectileRadius, InStartLocation, InLaunchVelocity, InMaxSimTime, true)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ObjectTypes .)",
    "insertText": "Add(ObjectType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bTraceWithChannel = false ;)",
    "insertText": "if(ActorToIgnore)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorsToIgnore .)",
    "insertText": "Add(ActorToIgnore)"
  },
  {
    "label": "FPredictProjectilePathParams()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "FPredictProjectilePathParams(float InProjectileRadius, FVector InStartLocation, FVector InLaunchVelocity, float InMaxSimTime, ECollisionChannel InTraceChannel, AActor* ActorToIgnore = nullptr)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} } private : void)",
    "insertText": "Init(float InProjectileRadius, FVector InStartLocation, FVector InLaunchVelocity, float InMaxSimTime, bool InTraceWithCollision)"
  },
  {
    "label": "FPredictProjectilePathPointData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPredictProjectilePathPointData() : Location(ForceInitToZero) , Velocity(ForceInitToZero) , Time(0.f)"
  },
  {
    "label": "FPredictProjectilePathPointData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPredictProjectilePathPointData(FVector InLocation, FVector InVelocity, float InTime) : Location(InLocation) , Velocity(InVelocity) , Time(InTime)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Set(FVector(ForceInitToZero), FVector(ForceInitToZero), 0.f)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Set(FVector InLocation, FVector InVelocity, float InTime)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 ReserveSize = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (PathData .)",
    "insertText": "Reset(ReserveSize)"
  },
  {
    "label": "FPredictProjectilePathPointData()",
    "kind": "Method",
    "detail": "Function (LastTraceDestination =)",
    "insertText": "FPredictProjectilePathPointData()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (HitResult .)",
    "insertText": "Init()"
  },
  {
    "label": "AddPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddPoint(FVector Location, FVector Velocity, float Time)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (PathData .)",
    "insertText": "Emplace(FPredictProjectilePathPointData(Location, Velocity, Time))"
  }
]