[
  {
    "label": "Container",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Container"
  },
  {
    "label": "HashtableDebugAccess",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "HashtableDebugAccess"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (# ifndef ABSL_CONTAINER_INTERNAL_HASHTABLE_DEBUG_HOOKS_H_ # define ABSL_CONTAINER_INTERNAL_HASHTABLE_DEBUG_HOOKS_H_ # include<cstddef> # include<algorithm> # include<type_traits> # include<vector> # include \" absl / base / config . h \" namespace absl { ABSL_NAMESPACE_BEGIN namespace container_internal { namespace hashtable_debug_internal { using std::get ; template<T,= T::mapped_type> auto)",
    "insertText": "GetKey(const typename T::value_type& pair, int) -> decltype(get<0>(pair))"
  },
  {
    "label": "GetKey()",
    "kind": "Method",
    "detail": "Function (} template<T> const T::key_type&)",
    "insertText": "GetKey(const typename T::key_type& key, char)"
  },
  {
    "label": "bucket()",
    "kind": "Method",
    "detail": "Function (} ; size_t num_probes = 0 ; size_t bucket = c .)",
    "insertText": "bucket(key)"
  }
]