[
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "SFieldNotificationPicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFieldNotificationPicker"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / BitArray . h \" # include \" Containers / Set . h \" # include \" Containers / SparseArray . h \" # include \" Delegates / Delegate . h \" # include \" FieldNotificationId . h \" # include \" HAL / PlatformCrt . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Misc / Optional . h \" # include \" Serialization / Archive . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # include \" Types / SlateEnums . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Input / SComboBox . h \" # include \" Widgets / SCompoundWidget . h \" class SWidget ; class UClass ; namespace UE::FieldNotification { class SFieldNotificationPicker : public SCompoundWidget { public :)",
    "insertText": "DECLARE_DELEGATE_OneParam(FOnValueChanged, FFieldNotificationId)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_BEGIN_ARGS(SFieldNotificationPicker)"
  },
  {
    "label": "SLATE_ATTRIBUTE()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ATTRIBUTE(FFieldNotificationId, Value) SLATE_EVENT(FOnValueChanged, OnValueChanged) SLATE_ATTRIBUTE(UClass*, FromClass) SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "GetCurrentValue()",
    "kind": "Method",
    "detail": "Function (FFieldNotificationId)",
    "insertText": "GetCurrentValue()"
  },
  {
    "label": "HandleComboBoxChanged()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleComboBoxChanged(TSharedPtr<FFieldNotificationId> InItem, ESelectInfo::Type InSeletionInfo)"
  },
  {
    "label": "HandleGenerateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "HandleGenerateWidget(TSharedPtr<FFieldNotificationId> InItem)"
  },
  {
    "label": "HandleComboOpening()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleComboOpening()"
  },
  {
    "label": "HandleComboBoxValueAsText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "HandleComboBoxValueAsText()"
  }
]