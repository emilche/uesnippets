[
  {
    "label": "TFunctionRef",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TFunctionRef"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "ENUM_CLASS_FLAGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Containers / StringView . h \" # include \" CoreTypes . h \" # include \" Misc / EnumClassFlags . h \" # include \" Templates / Function . h \" template<FuncType> class TFunctionRef ; namespace UE::String { enum class EParseLinesOptions : uint32 { None = 0,SkipEmpty = 1<<0,Trim = 1<<1,} ;)",
    "insertText": "ENUM_CLASS_FLAGS(EParseLinesOptions)"
  },
  {
    "label": "ParseLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseLines(FStringView View, TFunctionRef<void (FStringView)> Visitor, EParseLinesOptions Options = EParseLinesOptions::None)"
  },
  {
    "label": "ParseLines()",
    "kind": "Method",
    "detail": "Function (template<OutputType> void)",
    "insertText": "ParseLines(const FStringView View, OutputType& Output, const EParseLinesOptions Options = EParseLinesOptions::None)"
  },
  {
    "label": "ParseLines()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ParseLines(View, [&Output](FStringView Line) { Output.Add(Line); }, Options)"
  }
]