[
  {
    "label": "FMetalGeometryShader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMetalGeometryShader"
  },
  {
    "label": "FMetalGeometryShader()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MetalRHIPrivate . h \" # include \" Shaders / Types / Templates / MetalBaseShader . h \" # pragma mark - Metal RHI Geometry Shader Class class FMetalGeometryShader : public TMetalBaseShader<FRHIGeometryShader,SF_Geometry> { # if METAL_USE_METAL_SHADER_CONVERTER public :)",
    "insertText": "FMetalGeometryShader(FMetalDevice& Device, TArrayView<const uint8> InCode)"
  },
  {
    "label": "FMetalGeometryShader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMetalGeometryShader(FMetalDevice& Device, TArrayView<const uint8> InCode, MTLLibraryPtr InLibrary)"
  },
  {
    "label": "GetFunction()",
    "kind": "Method",
    "detail": "Function (MTLFunctionPtr)",
    "insertText": "GetFunction()"
  }
]