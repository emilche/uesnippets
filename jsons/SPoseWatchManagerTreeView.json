[
  {
    "label": "SPoseWatchManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPoseWatchManager"
  },
  {
    "label": "SPoseWatchManagerTreeView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPoseWatchManagerTreeView"
  },
  {
    "label": "SPoseWatchManagerTreeRow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SPoseWatchManagerTreeRow"
  },
  {
    "label": "Construct()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" PoseWatchManagerFwd . h \" # include \" PoseWatchManagerStandaloneTypes . h \" # include \" Input / Reply . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / Views / STableRow . h \" # include \" Widgets / Views / STreeView . h \" # include \" Animation / SlateSprings . h \" class SPoseWatchManager ; class SPoseWatchManagerTreeView : public STreeView<FPoseWatchManagerTreeItemPtr> { public : void)",
    "insertText": "Construct(const FArguments& InArgs, TSharedRef<SPoseWatchManager> Owner)"
  },
  {
    "label": "FlashHighlightOnItem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlashHighlightOnItem(FPoseWatchManagerTreeItemPtr FlashHighlightOnItem)"
  },
  {
    "label": "GetPoseWatchManagerPtr()",
    "kind": "Method",
    "detail": "Function (const TWeakPtr<SPoseWatchManager>&)",
    "insertText": "GetPoseWatchManagerPtr()"
  },
  {
    "label": "OnDragLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragLeave(const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<SPoseWatchManager> PoseWatchManagerWeak ; } ; class SPoseWatchManagerTreeRow : public SMultiColumnTableRow<FPoseWatchManagerTreeItemPtr> { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SPoseWatchManagerTreeRow)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FPoseWatchManagerTreeItemPtr, Item) SLATE_END_ARGS() void Construct(const FArguments& InArgs, const TSharedRef<SPoseWatchManagerTreeView>& PoseWatchManagerTreeView, TSharedRef<SPoseWatchManager> PoseWatchManager)"
  },
  {
    "label": "GenerateWidgetForColumn()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateWidgetForColumn(const FName& ColumnName)"
  },
  {
    "label": "FlashHighlight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlashHighlight()"
  },
  {
    "label": "OnMouseButtonDown()",
    "kind": "Method",
    "detail": "Function (protected : FReply)",
    "insertText": "OnMouseButtonDown(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseButtonUp()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnMouseButtonUp(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnDragEnter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDragEnter(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "OnDragOver()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDragOver(const FGeometry& MyGeometry, const FDragDropEvent& DragDropEvent)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<SPoseWatchManager> PoseWatchManagerWeak ; TWeakPtr<IPoseWatchManagerTreeItem> Item ; protected : void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  },
  {
    "label": "OnPaint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaint(const FPaintArgs& Args, const FGeometry& AllottedGeometry, const FSlateRect& MyCullingRect, FSlateWindowElementList& OutDrawElements, int32 LayerId, const FWidgetStyle& InWidgetStyle, bool bParentEnabled)"
  }
]