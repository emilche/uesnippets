[
  {
    "label": "AndroidESPImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "AndroidESPImpl"
  },
  {
    "label": "ANativeWindow",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ANativeWindow"
  },
  {
    "label": "FPlatformOpenGLContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPlatformOpenGLContext"
  },
  {
    "label": "AndroidEGL",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AndroidEGL"
  },
  {
    "label": "APIVariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "APIVariant"
  },
  {
    "label": "FEGLErrorScope",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEGLErrorScope"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Android / AndroidPlatform . h \" # if USE_ANDROID_OPENGL # include \" CoreMinimal . h \" # include \" Logging / LogMacros . h \" # include<EGL / egl . h> # include<EGL / eglext . h> # include<GLES3 / gl31 . h> struct AndroidESPImpl ; struct ANativeWindow ; # ifndef USE_ANDROID_EGL_NO_ERROR_CONTEXT # if UE_BUILD_SHIPPING # define USE_ANDROID_EGL_NO_ERROR_CONTEXT 1 # else # define USE_ANDROID_EGL_NO_ERROR_CONTEXT 0 # endif # endif)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogEGL, Log, All)"
  },
  {
    "label": "FPlatformOpenGLContext()",
    "kind": "Method",
    "detail": "Function (struct FPlatformOpenGLContext { EGLContext eglContext ; GLuint ViewportFramebuffer ; EGLSurface eglSurface ; GLuint DefaultVertexArrayObject ; GLuint BackBufferResource ; GLenum BackBufferTarget ; GLuint DummyFrameBuffer ;)",
    "insertText": "FPlatformOpenGLContext()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (eglContext = EGL_NO_CONTEXT ; eglSurface = EGL_NO_SURFACE ; ViewportFramebuffer = 0 ; DefaultVertexArrayObject = 0 ; BackBufferResource = 0 ; BackBufferTarget = 0 ; DummyFrameBuffer = 0 ; } } ; class AndroidEGL { public : enum APIVariant { AV_OpenGLES,AV_OpenGLCore } ; AndroidEGL*)",
    "insertText": "GetInstance()"
  },
  {
    "label": "AndroidEGL()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "AndroidEGL()"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "InitBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitBackBuffer()"
  },
  {
    "label": "DestroyBackBuffer()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyBackBuffer()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(APIVariant API, uint32 MajorVersion, uint32 MinorVersion)"
  },
  {
    "label": "ReInit()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReInit()"
  },
  {
    "label": "UnBind()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnBind()"
  },
  {
    "label": "UnBindRender()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnBindRender()"
  },
  {
    "label": "UnBindShared()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnBindShared()"
  },
  {
    "label": "SwapBuffers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SwapBuffers()"
  },
  {
    "label": "Terminate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Terminate()"
  },
  {
    "label": "InitSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSurface(bool bUseSmallSurface, bool bCreateWndSurface)"
  },
  {
    "label": "InitRenderSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitRenderSurface(bool bUseSmallSurface, bool bCreateWndSurface)"
  },
  {
    "label": "InitSharedSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitSharedSurface(bool bUseSmallSurface)"
  },
  {
    "label": "UpdateBuffersTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateBuffersTransform()"
  },
  {
    "label": "IsOfflineSurfaceRequired()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsOfflineSurfaceRequired()"
  },
  {
    "label": "GetDimensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetDimensions(uint32& OutWidth, uint32& OutHeight)"
  },
  {
    "label": "IsUsingRobustContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingRobustContext()"
  },
  {
    "label": "GetSurface()",
    "kind": "Method",
    "detail": "Function (EGLSurface)",
    "insertText": "GetSurface()"
  },
  {
    "label": "GetConfig()",
    "kind": "Method",
    "detail": "Function (EGLConfig)",
    "insertText": "GetConfig()"
  },
  {
    "label": "GetNativeWindow()",
    "kind": "Method",
    "detail": "Function (ANativeWindow*)",
    "insertText": "GetNativeWindow()"
  },
  {
    "label": "GetSwapIntervalRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSwapIntervalRange(EGLint& OutMinSwapInterval, EGLint& OutMaxSwapInterval)"
  },
  {
    "label": "CreateContext()",
    "kind": "Method",
    "detail": "Function (EGLContext)",
    "insertText": "CreateContext(EGLContext InSharedContext = EGL_NO_CONTEXT)"
  },
  {
    "label": "GetError()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetError()"
  },
  {
    "label": "SetCurrentContext()",
    "kind": "Method",
    "detail": "Function (EGLBoolean)",
    "insertText": "SetCurrentContext(EGLContext InContext, EGLSurface InSurface)"
  },
  {
    "label": "AcquireCurrentRenderingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AcquireCurrentRenderingContext()"
  },
  {
    "label": "ReleaseContextOwnership()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseContextOwnership()"
  },
  {
    "label": "GetResolveFrameBuffer()",
    "kind": "Method",
    "detail": "Function (GLuint)",
    "insertText": "GetResolveFrameBuffer()"
  },
  {
    "label": "IsCurrentContextValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCurrentContextValid()"
  },
  {
    "label": "GetCurrentContext()",
    "kind": "Method",
    "detail": "Function (EGLContext)",
    "insertText": "GetCurrentContext()"
  },
  {
    "label": "SetCurrentSharedContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentSharedContext()"
  },
  {
    "label": "SetCurrentRenderingContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentRenderingContext()"
  },
  {
    "label": "GetCurrentContextType()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetCurrentContextType()"
  },
  {
    "label": "GetRenderingContext()",
    "kind": "Method",
    "detail": "Function (FPlatformOpenGLContext*)",
    "insertText": "GetRenderingContext()"
  },
  {
    "label": "GetSharedContext()",
    "kind": "Method",
    "detail": "Function (FPlatformOpenGLContext*)",
    "insertText": "GetSharedContext()"
  },
  {
    "label": "GetSupportsNoErrorContext()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSupportsNoErrorContext()"
  },
  {
    "label": "SetRenderContextWindowSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRenderContextWindowSurface()"
  },
  {
    "label": "RefreshWindowSize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshWindowSize()"
  },
  {
    "label": "InitEGL()",
    "kind": "Method",
    "detail": "Function (AndroidEGL* Singleton ; private : void)",
    "insertText": "InitEGL(APIVariant API)"
  },
  {
    "label": "TerminateEGL()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TerminateEGL()"
  },
  {
    "label": "CreateEGLRenderSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEGLRenderSurface(ANativeWindow* InWindow, bool bCreateWndSurface)"
  },
  {
    "label": "CreateEGLSharedSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateEGLSharedSurface()"
  },
  {
    "label": "DestroyRenderSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyRenderSurface()"
  },
  {
    "label": "DestroySharedSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroySharedSurface()"
  },
  {
    "label": "InitContexts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InitContexts()"
  },
  {
    "label": "DestroyContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyContext(EGLContext InContext)"
  },
  {
    "label": "ResetDisplay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetDisplay()"
  },
  {
    "label": "ResetInternal()",
    "kind": "Method",
    "detail": "Function (AndroidESPImpl* PImplData ; void)",
    "insertText": "ResetInternal()"
  },
  {
    "label": "LogConfigInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogConfigInfo(EGLConfig EGLConfigInfo)"
  },
  {
    "label": "ResizeRenderContextSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeRenderContextSurface()"
  },
  {
    "label": "ResizeSharedContextSurface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeSharedContextSurface()"
  },
  {
    "label": "VERIFY_EGL()",
    "kind": "Method",
    "detail": "Function (bool bSupportsKHRCreateContext ; bool bSupportsKHRSurfacelessContext ; bool bSupportsKHRNoErrorContext ; bool bSupportsEXTRobustContext ; bool bIsEXTRobustContextActive = false ; int* ContextAttributes ; } ; # define ENABLE_CONFIG_FILTER 1 # define ENABLE_EGL_DEBUG 0 # define ENABLE_VERIFY_EGL 0 # define ENABLE_VERIFY_EGL_TRACE 0 # if ENABLE_VERIFY_EGL # define)",
    "insertText": "VERIFY_EGL(msg)"
  },
  {
    "label": "VerifyEGLResult()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VerifyEGLResult(EGLint ErrorCode, const TCHAR* Msg1, const TCHAR* Msg2, const TCHAR* Filename, uint32 Line)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (const TCHAR* EGLErrorStrings [ ] = {)",
    "insertText": "TEXT(\"EGL_NOT_INITIALIZED\"), TEXT(\"EGL_BAD_ACCESS\"), TEXT(\"EGL_BAD_ALLOC\"), TEXT(\"EGL_BAD_ATTRIBUTE\"), TEXT(\"EGL_BAD_CONFIG\"), TEXT(\"EGL_BAD_CONTEXT\"), TEXT(\"EGL_BAD_CURRENT_SURFACE\"), TEXT(\"EGL_BAD_DISPLAY\"), TEXT(\"EGL_BAD_MATCH\"), TEXT(\"EGL_BAD_NATIVE_PIXMAP\"), TEXT(\"EGL_BAD_NATIVE_WINDOW\"), TEXT(\"EGL_BAD_PARAMETER\"), TEXT(\"EGL_BAD_SURFACE\"), TEXT(\"EGL_CONTEXT_LOST\"), TEXT(\"UNKNOWN EGL ERROR\")"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 ErrorIndex = FMath::Min<)",
    "insertText": "uint32(ErrorCode - EGL_SUCCESS, UE_ARRAY_COUNT(EGLErrorStrings) - 1)"
  },
  {
    "label": "FEGLErrorScope()",
    "kind": "Method",
    "detail": "Function (} } class FEGLErrorScope { public :)",
    "insertText": "FEGLErrorScope(const TCHAR* InFunctionName, const TCHAR* InFilename, const uint32 InLine) : FunctionName(InFunctionName) , Filename(InFilename) , Line(InLine)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VERIFY_EGL_TRACE)",
    "insertText": "UE_LOG(LogRHI, Log, TEXT(\"EGL log before %s(%d): %s\"), InFilename, InLine, InFunctionName)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "CheckForErrors(TEXT(\"Before \"))"
  },
  {
    "label": "FEGLErrorScope()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FEGLErrorScope()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# if ENABLE_VERIFY_EGL_TRACE)",
    "insertText": "UE_LOG(LogRHI, Log, TEXT(\"EGL log after %s(%d): %s\"), Filename, Line, FunctionName)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "CheckForErrors(TEXT(\"After \"))"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (} private : const TCHAR* FunctionName ; const TCHAR* Filename ; const uint32 Line ; void)",
    "insertText": "CheckForErrors(const TCHAR* PrefixString)"
  },
  {
    "label": "MACRO_TOKENIZER()",
    "kind": "Method",
    "detail": "Function (} } ; # define)",
    "insertText": "MACRO_TOKENIZER(IdentifierName, Msg, FileName, LineNumber) FEGLErrorScope IdentifierName_ ## LineNumber (Msg, FileName, LineNumber) #define MACRO_TOKENIZER2(IdentifierName, Msg, FileName, LineNumber) MACRO_TOKENIZER(IdentiferName, Msg, FileName, LineNumber) #define VERIFY_EGL_SCOPE_WITH_MSG_STR(MsgStr) MACRO_TOKENIZER2(ErrorScope_, MsgStr, TEXT(__FILE__), __LINE__) #define VERIFY_EGL_SCOPE() VERIFY_EGL_SCOPE_WITH_MSG_STR(ANSI_TO_TCHAR(__FUNCTION__)) #define VERIFY_EGL_FUNC(Func, ...)"
  },
  {
    "label": "Func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Func(__VA_ARGS__)"
  }
]