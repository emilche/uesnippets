[
  {
    "label": "RtcEventFieldDefinition",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtcEventFieldDefinition"
  },
  {
    "label": "RtcEventDefinitionImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventDefinitionImpl"
  },
  {
    "label": "RtcEventDefinition",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtcEventDefinition"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (# ifndef LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_DEFINITION_H_ # define LOGGING_RTC_EVENT_LOG_EVENTS_RTC_EVENT_DEFINITION_H_ # include<memory> # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / units / timestamp . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding . h \" # include \" logging / rtc_event_log / events / rtc_event_field_encoding_parser . h \" # include \" logging / rtc_event_log / events / rtc_event_field_extraction . h \" # include \" rtc_base / logging . h \" namespace webrtc { template<EventType,LoggedType,T> struct RtcEventFieldDefinition { const T EventType::* event_member ; T LoggedType::* logged_member ; FieldParameters params ; } ; template<EventType,LoggedType,. . . Ts> class RtcEventDefinitionImpl { public : void)",
    "insertText": "EncodeImpl(EventEncoder&, rtc::ArrayView<const RtcEvent*>)"
  },
  {
    "label": "ParseImpl()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus)",
    "insertText": "ParseImpl(EventParser&, rtc::ArrayView<LoggedType>)"
  },
  {
    "label": "RtcEventDefinitionImpl()",
    "kind": "Method",
    "detail": "Function (} } ; template<EventType,LoggedType,T,. . . Ts> class RtcEventDefinitionImpl<EventType,LoggedType,T,Ts . . .> { public :)",
    "insertText": "RtcEventDefinitionImpl(RtcEventFieldDefinition<EventType, LoggedType, T> field, RtcEventFieldDefinition<EventType, LoggedType, Ts>... rest) : field_(field), rest_(rest...)"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EncodeImpl(EventEncoder& encoder, rtc::ArrayView<const RtcEvent*> batch)"
  },
  {
    "label": "ExtractRtcEventMember()",
    "kind": "Method",
    "detail": "Function (auto values =)",
    "insertText": "ExtractRtcEventMember(batch, field_.event_member)"
  },
  {
    "label": "EncodeField()",
    "kind": "Method",
    "detail": "Function (encoder .)",
    "insertText": "EncodeField(field_.params, values)"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (rest_ .)",
    "insertText": "EncodeImpl(encoder, batch)"
  },
  {
    "label": "ParseImpl()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus)",
    "insertText": "ParseImpl(EventParser& parser, rtc::ArrayView<LoggedType> output_batch)"
  },
  {
    "label": "ParseNumericField()",
    "kind": "Method",
    "detail": "Function (RtcEventLogParseStatusOr<rtc::ArrayView<uint64_t>> result = parser .)",
    "insertText": "ParseNumericField(field_.params)"
  },
  {
    "label": "PopulateRtcEventMember()",
    "kind": "Method",
    "detail": "Function (auto status =)",
    "insertText": "PopulateRtcEventMember(result.value(), field_.logged_member, output_batch)"
  },
  {
    "label": "RtcEventDefinition()",
    "kind": "Method",
    "detail": "Function (} private : RtcEventFieldDefinition<EventType,LoggedType,T> field_ ; RtcEventDefinitionImpl<EventType,LoggedType,Ts . . .> rest_ ; } ; template<EventType,LoggedType,. . . Ts> class RtcEventDefinition { public :)",
    "insertText": "RtcEventDefinition(EventParameters params, RtcEventFieldDefinition<EventType, LoggedType, Ts>... fields) : params_(params), fields_(fields...)"
  },
  {
    "label": "EncodeBatch()",
    "kind": "Method",
    "detail": "Function (} std::string)",
    "insertText": "EncodeBatch(rtc::ArrayView<const RtcEvent*> batch)"
  },
  {
    "label": "encoder()",
    "kind": "Method",
    "detail": "Function (EventEncoder)",
    "insertText": "encoder(params_, batch)"
  },
  {
    "label": "ParseBatch()",
    "kind": "Method",
    "detail": "Function (} RtcEventLogParseStatus)",
    "insertText": "ParseBatch(absl::string_view s, bool batched, std::vector<LoggedType>& output)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (EventParser parser ; auto status = parser .)",
    "insertText": "Initialize(s, batched)"
  },
  {
    "label": "ExtendLoggedBatch()",
    "kind": "Method",
    "detail": "Function (rtc::ArrayView<LoggedType> output_batch =)",
    "insertText": "ExtendLoggedBatch(output, parser.NumEventsInBatch())"
  },
  {
    "label": "ParseNumericField()",
    "kind": "Method",
    "detail": "Function (FieldParameters timestamp_params { \" timestamp_ms \",FieldParameters::kTimestampField,FieldType::kVarInt,6 4 } ; RtcEventLogParseStatusOr<rtc::ArrayView<uint64_t>> result = parser .)",
    "insertText": "ParseNumericField(timestamp_params)"
  },
  {
    "label": "PopulateRtcEventTimestamp()",
    "kind": "Method",
    "detail": "Function (status =)",
    "insertText": "PopulateRtcEventTimestamp(result.value(), &LoggedType::timestamp, output_batch)"
  }
]