[
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UK2Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node"
  },
  {
    "label": "FBlueprintActionContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintActionContext"
  },
  {
    "label": "FBlueprintActionMenuBuilder",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintActionMenuBuilder"
  },
  {
    "label": "FEdGraphSchemaAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphSchemaAction"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "that",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "that"
  },
  {
    "label": "FBlueprintActionMenuUtils",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FBlueprintActionMenuUtils"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintActionFilter . h \" # include \" CoreMinimal . h \" # include \" EdGraph / EdGraphSchema . h \" # include \" HAL / Platform . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" BlueprintActionMenuUtils . generated . h \" class UClass ; class UK2Node ; struct FBlueprintActionContext ; struct FBlueprintActionMenuBuilder ; struct FEdGraphSchemaAction ;)",
    "insertText": "UENUM()"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (enum Type : int { TARGET_Blueprint = 0 x00000001)",
    "insertText": "UMETA(DisplayName=\"This Blueprint\", ToolTip=\"Include functions and variables that belong to this Blueprint.\"), TARGET_SubComponents = 0x00000002 UMETA(DisplayName=\"Components\", ToolTip=\"Include functions that belong to components of this Blueprint and/or the other target classes.\"), TARGET_NodeTarget = 0x00000004 UMETA(DisplayName=\"Node Target\", ToolTip=\"Include functions and variables that belong to the same class that the pin's node does.\"), TARGET_PinObject = 0x00000008 UMETA(DisplayName=\"Pin Type Class\", ToolTip=\"Include functions and variables that belong to this pin type.\"), TARGET_SiblingPinObjects = 0x00000010 UMETA(DisplayName=\"Other Object Outputs\", ToolTip=\"Include functions and variables that belong to any of this node's output types.\"), TARGET_BlueprintLibraries = 0x00000020 UMETA(DisplayName=\"Libraries\", ToolTip=\"Include static functions that are globally accessible (belonging to function/macro libraries, etc.).\"), TARGET_NonImportedTypes = 0x00000040 UMETA(DisplayName=\"Non-Imported Types\", ToolTip=\"Include functions from loaded types that are not imported by this Blueprint.\"), ContextTargetFlagsEnd UMETA(Hidden)"
  },
  {
    "label": "MakePaletteMenu()",
    "kind": "Method",
    "detail": "Function (} struct FBlueprintActionMenuUtils { void)",
    "insertText": "MakePaletteMenu(FBlueprintActionContext const& Context, UClass* FilterClass, FBlueprintActionMenuBuilder& MenuOut)"
  },
  {
    "label": "MakeContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeContextMenu(FBlueprintActionContext const& Context, bool bIsContextSensitive, uint32 ClassTargetMask, FBlueprintActionMenuBuilder& MenuOut)"
  },
  {
    "label": "MakeFavoritesMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MakeFavoritesMenu(FBlueprintActionContext const& Context, FBlueprintActionMenuBuilder& MenuOut)"
  },
  {
    "label": "ExtractNodeTemplateFromAction()",
    "kind": "Method",
    "detail": "Function (const UK2Node*)",
    "insertText": "ExtractNodeTemplateFromAction(const FEdGraphSchemaAction& PaletteAction)"
  },
  {
    "label": "ExtractNodeTemplateFromAction()",
    "kind": "Method",
    "detail": "Function (const UK2Node*)",
    "insertText": "ExtractNodeTemplateFromAction(const TSharedPtr<FEdGraphSchemaAction>& PaletteAction)"
  }
]