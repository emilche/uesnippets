[
  {
    "label": "FMaterialEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialEditor"
  },
  {
    "label": "SMaterialPaletteItem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMaterialPaletteItem"
  },
  {
    "label": "SMaterialPalette",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMaterialPalette"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / SWidget . h \" # include \" Framework / Commands / InputChord . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" SGraphPalette . h \" class FMaterialEditor ; class SMaterialPaletteItem : public SGraphPaletteItem { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMaterialPaletteItem)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, FCreateWidgetForActionData* const InCreateData)"
  },
  {
    "label": "CreateHotkeyDisplayWidget()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "CreateHotkeyDisplayWidget(const TSharedPtr<const FInputChord> HotkeyChord)"
  },
  {
    "label": "GetItemTooltip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetItemTooltip()"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (} ; class SMaterialPalette : public SGraphPalette { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SMaterialPalette)"
  },
  {
    "label": "SLATE_END_ARGS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "SLATE_END_ARGS() void Construct(const FArguments& InArgs, TWeakPtr<FMaterialEditor> InMaterialEditorPtr)"
  },
  {
    "label": "OnCreateWidgetForAction()",
    "kind": "Method",
    "detail": "Function (protected : TSharedRef<SWidget>)",
    "insertText": "OnCreateWidgetForAction(FCreateWidgetForActionData* const InCreateData)"
  },
  {
    "label": "CollectAllActions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAllActions(FGraphActionListBuilderBase& OutAllActions)"
  },
  {
    "label": "GetFilterCategoryName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetFilterCategoryName()"
  },
  {
    "label": "CategorySelectionChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CategorySelectionChanged(TSharedPtr<FString> NewSelection, ESelectInfo::Type SelectInfo)"
  },
  {
    "label": "AddAssetFromAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAssetFromAssetRegistry(const FAssetData& InAddedAssetData)"
  },
  {
    "label": "RemoveAssetFromRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAssetFromRegistry(const FAssetData& InAddedAssetData)"
  },
  {
    "label": "RenameAssetFromRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameAssetFromRegistry(const FAssetData& InAddedAssetData, const FString& InNewName)"
  },
  {
    "label": "RefreshAssetInRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAssetInRegistry(const FAssetData& InAddedAssetData)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(const FGeometry& AllottedGeometry, const double InCurrentTime, const float InDeltaTime)"
  }
]