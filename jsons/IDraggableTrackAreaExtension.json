[
  {
    "label": "FGuid",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGuid"
  },
  {
    "label": "FViewModel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewModel"
  },
  {
    "label": "SEQUENCERCORE_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SEQUENCERCORE_API"
  },
  {
    "label": "IDragOperation()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MVVM / ViewModelTypeID . h \" # include \" Misc / FrameNumber . h \" # include \" Templates / SharedPointer . h \" struct FGuid ; namespace UE { namespace Sequencer { class FViewModel ; class IDragOperation { public : ~)",
    "insertText": "IDragOperation()"
  },
  {
    "label": "AddSnapTime()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddSnapTime(FFrameNumber SnapTime)"
  },
  {
    "label": "AddModel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModel(TSharedPtr<FViewModel> Model)"
  },
  {
    "label": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID()",
    "kind": "Method",
    "detail": "Function (} ; class IDraggableTrackAreaExtension { public :)",
    "insertText": "UE_SEQUENCER_DECLARE_VIEW_MODEL_TYPE_ID(IDraggableTrackAreaExtension) virtual ~IDraggableTrackAreaExtension()"
  },
  {
    "label": "CanDrag()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanDrag()"
  },
  {
    "label": "OnBeginDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBeginDrag(IDragOperation& DragOperation)"
  },
  {
    "label": "OnEndDrag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEndDrag(IDragOperation& DragOperation)"
  }
]