[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "InterpolatedGainCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InterpolatedGainCurve"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Stats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Stats"
  },
  {
    "label": "RegionLogger",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RegionLogger"
  },
  {
    "label": "float()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_INTERPOLATED_GAIN_CURVE_H_ # define MODULES_AUDIO_PROCESSING_AGC2_INTERPOLATED_GAIN_CURVE_H_ # include<array> # include \" absl / strings / string_view . h \" # include \" modules / audio_processing / agc2 / agc2_common . h \" # include \" rtc_base / gtest_prod_util . h \" # include \" system_wrappers / include / metrics . h \" namespace webrtc { class ApmDataDumper ; float kInputLevelScalingFactor = 3 2 7 6 8 . 0 f ; float kMaxInputLevelLinear = static_cast<)",
    "insertText": "float(36766.300710566735)"
  },
  {
    "label": "InterpolatedGainCurve()",
    "kind": "Method",
    "detail": "Function (class InterpolatedGainCurve { public : enum class GainCurveRegion { kIdentity = 0,kKnee = 1,kLimiter = 2,kSaturation = 3 } ; struct Stats { size_t look_ups_identity_region = 0 ; size_t look_ups_knee_region = 0 ; size_t look_ups_limiter_region = 0 ; size_t look_ups_saturation_region = 0 ; bool available = false ; GainCurveRegion region = GainCurveRegion::kIdentity ; int64_t region_duration_frames = 0 ; } ;)",
    "insertText": "InterpolatedGainCurve(ApmDataDumper* apm_data_dumper, absl::string_view histogram_name_prefix)"
  },
  {
    "label": "InterpolatedGainCurve()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "InterpolatedGainCurve()"
  },
  {
    "label": "InterpolatedGainCurve()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterpolatedGainCurve(const InterpolatedGainCurve&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (InterpolatedGainCurve&)",
    "insertText": "operator(const InterpolatedGainCurve&)"
  },
  {
    "label": "get_stats()",
    "kind": "Method",
    "detail": "Function (Stats)",
    "insertText": "get_stats()"
  },
  {
    "label": "FRIEND_TEST_ALL_PREFIXES()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FRIEND_TEST_ALL_PREFIXES(GainController2InterpolatedGainCurve, CheckApproximationParams)"
  },
  {
    "label": "RegionLogger()",
    "kind": "Method",
    "detail": "Function (struct RegionLogger { metrics::Histogram* identity_histogram ; metrics::Histogram* knee_histogram ; metrics::Histogram* limiter_histogram ; metrics::Histogram* saturation_histogram ;)",
    "insertText": "RegionLogger(absl::string_view identity_histogram_name, absl::string_view knee_histogram_name, absl::string_view limiter_histogram_name, absl::string_view saturation_histogram_name)"
  },
  {
    "label": "RegionLogger()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "RegionLogger()"
  },
  {
    "label": "LogRegionStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogRegionStats(const InterpolatedGainCurve::Stats& stats)"
  },
  {
    "label": "UpdateStats()",
    "kind": "Method",
    "detail": "Function (} region_logger_ ; void)",
    "insertText": "UpdateStats(float input_level)"
  }
]