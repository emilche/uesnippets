[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "_Visitor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Visitor"
  },
  {
    "label": "_Context",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Context"
  },
  {
    "label": "__basic_format_arg_value",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "__basic_format_arg_value"
  },
  {
    "label": "__handle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__handle"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_LIBCPP_TEMPLATE_VIS",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_LIBCPP_TEMPLATE_VIS"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___FORMAT_FORMAT_ARG_H # define _LIBCPP___FORMAT_FORMAT_ARG_H # include<__assert> # include<__concepts / arithmetic . h> # include<__config> # include<__format / format_error . h> # include<__format / format_fwd . h> # include<__format / format_parse_context . h> # include<__functional / invoke . h> # include<__memory / addressof . h> # include<__utility / forward . h> # include<__utility / unreachable . h> # include<__variant / monostate . h> # include<string> # include<string_view> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "__use_packed_format_arg_store()",
    "kind": "Method",
    "detail": "Function (enum class _LIBCPP_ENUM_VIS __arg_t : uint8_t { __none,__boolean,__char_type,__int,__long_long,__i128,__unsigned,__unsigned_long_long,__u128,__float,__double,__long_double,__const_char_type_ptr,__string_view,__ptr,__handle } ; unsigned __packed_arg_t_bits = 5 ; uint8_t __packed_arg_t_mask = 0 x1f ; unsigned __packed_types_storage_bits = 6 4 ; unsigned __packed_types_max = __packed_types_storage_bits / __packed_arg_t_bits ; _LIBCPP_HIDE_FROM_ABI bool)",
    "insertText": "__use_packed_format_arg_store(size_t __size)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__id <= __packed_types_max, \"\")"
  },
  {
    "label": "decltype()",
    "kind": "Method",
    "detail": "Function (} } template<class _Visitor,class _Context> _LIBCPP_HIDE_FROM_ABI _LIBCPP_AVAILABILITY_FORMAT)",
    "insertText": "decltype(auto) visit_format_arg(_Visitor&& __vis, basic_format_arg<_Context> __arg)"
  },
  {
    "label": "__libcpp_unreachable()",
    "kind": "Method",
    "detail": "Function (# else)",
    "insertText": "__libcpp_unreachable()"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (# endif case __format::__arg_t::__unsigned : return)",
    "insertText": "invoke(_VSTD::forward<_Visitor>(__vis), __arg.__value_.__unsigned_)"
  },
  {
    "label": "invoke()",
    "kind": "Method",
    "detail": "Function (# endif case __format::__arg_t::__float : return)",
    "insertText": "invoke(_VSTD::forward<_Visitor>(__vis), __arg.__value_.__float_)"
  },
  {
    "label": "__handle()",
    "kind": "Method",
    "detail": "Function (} template<class _Context> class __basic_format_arg_value { using _CharT = _Context::char_type ; public : struct __handle { template<class _Tp> _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__handle(_Tp&& __v) noexcept : __ptr_(_VSTD::addressof(__v)), __format_([](basic_format_parse_context<_CharT>& __parse_ctx, _Context& __ctx, const void* __ptr) { using _Dp = remove_cvref_t<_Tp>; using _Formatter = typename _Context::template formatter_type<_Dp>; constexpr bool __const_formattable = requires { _Formatter().format(declval<const _Dp&>(), declval<_Context&>()); }; using _Qp = conditional_t<__const_formattable, const _Dp, _Dp>; static_assert(__const_formattable || !is_const_v<remove_reference_t<_Tp>>, \"Mandated by [format.arg]/18\"); _Formatter __f; __parse_ctx.advance_to(__f.parse(__parse_ctx)); __ctx.advance_to(__f.format(*const_cast<_Qp*>(static_cast<const _Dp*>(__ptr)), __ctx)); })"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} const void* __ptr_ ;)",
    "insertText": "void(*__format_)(basic_format_parse_context<_CharT>&, _Context&, const void*)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} ; union { monostate __monostate_ ; bool __boolean_ ; _CharT __char_type_ ; int __int_ ; unsigned __unsigned_ ; long long __long_long_ ; unsigned long long __unsigned_long_long_ ; # ifndef _LIBCPP_HAS_NO_INT128 __int128_t __i128_ ; __uint128_t __u128_ ; # endif float __float_ ; double __double_ ; long double __long_double_ ; const _CharT* __const_char_type_ptr_ ; basic_string_view<_CharT> __string_view_ ; const void* __ptr_ ; __handle __handle_ ; } ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value() noexcept : __monostate_()"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(bool __value) noexcept : __boolean_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(_CharT __value) noexcept : __char_type_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(int __value) noexcept : __int_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(unsigned __value) noexcept : __unsigned_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(long long __value) noexcept : __long_long_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(unsigned long long __value) noexcept : __unsigned_long_long_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} # ifndef _LIBCPP_HAS_NO_INT128 _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(__int128_t __value) noexcept : __i128_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(__uint128_t __value) noexcept : __u128_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} # endif _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(float __value) noexcept : __float_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(double __value) noexcept : __double_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(long double __value) noexcept : __long_double_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(const _CharT* __value) noexcept : __const_char_type_ptr_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(basic_string_view<_CharT> __value) noexcept : __string_view_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(const void* __value) noexcept : __ptr_(__value)"
  },
  {
    "label": "__basic_format_arg_value()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "__basic_format_arg_value(__handle __value) noexcept : __handle_(std::forward<__handle>(__value))"
  },
  {
    "label": "basic_format_arg()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Context> class _LIBCPP_TEMPLATE_VIS _LIBCPP_AVAILABILITY_FORMAT basic_format_arg { public : class _LIBCPP_TEMPLATE_VIS handle ; _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "basic_format_arg()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (__format::__arg_t::__none } { } _LIBCPP_HIDE_FROM_ABI operator)",
    "insertText": "bool()"
  },
  {
    "label": "format()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Context> class _LIBCPP_TEMPLATE_VIS basic_format_arg<_Context>::handle { public : _LIBCPP_HIDE_FROM_ABI void)",
    "insertText": "format(basic_format_parse_context<char_type>& __parse_ctx, _Context& __ctx)"
  },
  {
    "label": "__format_()",
    "kind": "Method",
    "detail": "Function (__handle_ .)",
    "insertText": "__format_(__parse_ctx, __ctx, __handle_.__ptr_)"
  },
  {
    "label": "handle()",
    "kind": "Method",
    "detail": "Function (} _LIBCPP_HIDE_FROM_ABI)",
    "insertText": "handle(typename __basic_format_arg_value<_Context>::__handle& __handle) noexcept : __handle_(__handle)"
  }
]