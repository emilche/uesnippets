[
  {
    "label": "indexer_helper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "indexer_helper"
  },
  {
    "label": "indexer_input_port",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "indexer_input_port"
  },
  {
    "label": "run_and_put_task",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "run_and_put_task"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "internal"
  },
  {
    "label": "indexer_node_FE",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "indexer_node_FE"
  },
  {
    "label": "indexer_node_base",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "indexer_node_base"
  },
  {
    "label": "op_type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "op_type"
  },
  {
    "label": "indexer_node_base_operation",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "indexer_node_base_operation"
  },
  {
    "label": "input_types",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "input_types"
  },
  {
    "label": "indexer_types",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "indexer_types"
  },
  {
    "label": "OutputTuple",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OutputTuple"
  },
  {
    "label": "unfolded_indexer_node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "unfolded_indexer_node"
  },
  {
    "label": "do_try_put()",
    "kind": "Method",
    "detail": "Function (# ifndef __TBB__flow_graph_indexer_impl_H # define __TBB__flow_graph_indexer_impl_H # ifndef __TBB_flow_graph_H # error Do not # include this internal file directly ; use public TBB headers instead . # endif # include \" _flow_graph_types_impl . h \" namespace internal { template<IndexerNodeBaseType,T,size_t K> task*)",
    "insertText": "do_try_put(const T &v, void *p)"
  },
  {
    "label": "o()",
    "kind": "Method",
    "detail": "Function (IndexerNodeBaseType::output_type)",
    "insertText": "o(K, v)"
  },
  {
    "label": "set_indexer_node_pointer()",
    "kind": "Method",
    "detail": "Function (} template<TupleTypes,int N> struct indexer_helper { template<IndexerNodeBaseType,PortTuple> void)",
    "insertText": "set_indexer_node_pointer(PortTuple &my_input, IndexerNodeBaseType *p, graph& g)"
  },
  {
    "label": "task()",
    "kind": "Method",
    "detail": "Function (typedef tuple_element<N - 1,TupleTypes>::type T ;)",
    "insertText": "task(*indexer_node_put_task)(const T&, void *)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (tbb::flow::get<)",
    "insertText": "N(my_input).set_up(p, indexer_node_put_task, g)"
  },
  {
    "label": "PortTuple()",
    "kind": "Method",
    "detail": "Function (indexer_helper<TupleTypes,N - 1>::template set_indexer_node_pointer<IndexerNodeBaseType,)",
    "insertText": "PortTuple(my_input, p, g)"
  },
  {
    "label": "reset_inputs()",
    "kind": "Method",
    "detail": "Function (} template<InputTuple> void)",
    "insertText": "reset_inputs(InputTuple &my_input, reset_flags f)"
  },
  {
    "label": "reset_inputs()",
    "kind": "Method",
    "detail": "Function (indexer_helper<TupleTypes,N - 1)",
    "insertText": "reset_inputs(my_input, f)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (tbb::flow::get<)",
    "insertText": "N(my_input).reset_receiver(f)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION template<InputTuple> void)",
    "insertText": "extract(InputTuple &my_input)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (indexer_helper<TupleTypes,N - 1)",
    "insertText": "extract(my_input)"
  },
  {
    "label": "N()",
    "kind": "Method",
    "detail": "Function (tbb::flow::get<)",
    "insertText": "N(my_input).extract_receiver()"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "get(my_input).set_up(p, indexer_node_put_task, g)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "get(my_input).reset_receiver(f)"
  },
  {
    "label": "get()",
    "kind": "Method",
    "detail": "Function (tbb::)",
    "insertText": "get(my_input).extract_receiver()"
  },
  {
    "label": "task()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<T> class indexer_input_port : public receiver<T> { private : void* my_indexer_ptr ; typedef)",
    "insertText": "task(* forward_function_ptr)(T const &, void*)"
  },
  {
    "label": "indexer_input_port()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexer_input_port(const indexer_input_port & other) : receiver<T>(), my_pred_mutex(), my_graph(other.my_graph)"
  },
  {
    "label": "set_up()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "set_up(void* p, forward_function_ptr f, graph& g)"
  },
  {
    "label": "built_predecessors()",
    "kind": "Method",
    "detail": "Function (my_indexer_ptr = p ; my_try_put_task = f ; my_graph =& g ; } # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION typedef receiver<T>::predecessor_list_type predecessor_list_type ; typedef receiver<T>::predecessor_type predecessor_type ; built_predecessors_type&)",
    "insertText": "built_predecessors()"
  },
  {
    "label": "l()",
    "kind": "Method",
    "detail": "Function (spin_mutex::scoped_lock)",
    "insertText": "l(my_pred_mutex)"
  },
  {
    "label": "internal_add_built_predecessor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_add_built_predecessor(predecessor_type &p)"
  },
  {
    "label": "add_edge()",
    "kind": "Method",
    "detail": "Function (my_built_predecessors .)",
    "insertText": "add_edge(p)"
  },
  {
    "label": "internal_delete_built_predecessor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_delete_built_predecessor(predecessor_type &p)"
  },
  {
    "label": "delete_edge()",
    "kind": "Method",
    "detail": "Function (my_built_predecessors .)",
    "insertText": "delete_edge(p)"
  },
  {
    "label": "copy_predecessors()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "copy_predecessors(predecessor_list_type &v)"
  },
  {
    "label": "copy_edges()",
    "kind": "Method",
    "detail": "Function (my_built_predecessors .)",
    "insertText": "copy_edges(v)"
  },
  {
    "label": "try_put_task()",
    "kind": "Method",
    "detail": "Function (} # endif protected : template<R,B> class run_and_put_task ; template<X,Y> class internal::broadcast_cache ; template<X,Y> class internal::round_robin_cache ; task*)",
    "insertText": "try_put_task(const T &v)"
  },
  {
    "label": "graph_reference()",
    "kind": "Method",
    "detail": "Function (} graph&)",
    "insertText": "graph_reference()"
  },
  {
    "label": "reset_receiver()",
    "kind": "Method",
    "detail": "Function (} # else void)",
    "insertText": "reset_receiver(reset_flags)"
  },
  {
    "label": "extract_receiver()",
    "kind": "Method",
    "detail": "Function (} # endif # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION void)",
    "insertText": "extract_receiver()"
  },
  {
    "label": "receiver_extract()",
    "kind": "Method",
    "detail": "Function (my_built_predecessors .)",
    "insertText": "receiver_extract(*this)"
  },
  {
    "label": "indexer_node_FE()",
    "kind": "Method",
    "detail": "Function (} # endif } ; template<InputTuple,OutputType,StructTypes> class indexer_node_FE { public : const int N = tbb::flow::tuple_size<InputTuple>::value ; typedef OutputType output_type ; typedef InputTuple input_type ;)",
    "insertText": "indexer_node_FE() : my_inputs()"
  },
  {
    "label": "input_ports()",
    "kind": "Method",
    "detail": "Function (} input_type&)",
    "insertText": "input_ports()"
  },
  {
    "label": "indexer_node_base_operation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexer_node_base_operation(const successor_type &s, op_type t) : type(char(t)), my_succ(const_cast<successor_type *>(&s))"
  },
  {
    "label": "indexer_node_base_operation()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexer_node_base_operation(op_type t) : type(char(t))"
  },
  {
    "label": "handle_operations()",
    "kind": "Method",
    "detail": "Function (} } ; typedef internal::aggregating_functor<class_type,indexer_node_base_operation> handler_type ; class internal::aggregating_functor<class_type,indexer_node_base_operation> ; aggregator<handler_type,indexer_node_base_operation> my_aggregator ; void)",
    "insertText": "handle_operations(indexer_node_base_operation* op_list)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation* current ;)",
    "insertText": "while(op_list)"
  },
  {
    "label": "switch()",
    "kind": "Method",
    "detail": "Function (current = op_list ; op_list = op_list -> next ;)",
    "insertText": "switch(current->type)"
  },
  {
    "label": "__TBB_store_with_release()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "__TBB_store_with_release(current->status, SUCCEEDED)"
  },
  {
    "label": "remove_successor()",
    "kind": "Method",
    "detail": "Function (break ; case rem_succ : my_successors .)",
    "insertText": "remove_successor(*(current->my_succ))"
  },
  {
    "label": "try_put_task()",
    "kind": "Method",
    "detail": "Function (break ; case try__put_task : { current -> bypass_t = my_successors .)",
    "insertText": "try_put_task(*(current->my_arg))"
  },
  {
    "label": "internal_add_built_successor()",
    "kind": "Method",
    "detail": "Function (} break ; # if TBB_DEPRECATED_FLOW_NODE_EXTRACTION case add_blt_succ : my_successors .)",
    "insertText": "internal_add_built_successor(*(current->my_succ))"
  },
  {
    "label": "internal_delete_built_successor()",
    "kind": "Method",
    "detail": "Function (break ; case del_blt_succ : my_successors .)",
    "insertText": "internal_delete_built_successor(*(current->my_succ))"
  },
  {
    "label": "successor_count()",
    "kind": "Method",
    "detail": "Function (break ; case blt_succ_cnt : current -> cnt_val = my_successors .)",
    "insertText": "successor_count()"
  },
  {
    "label": "copy_successors()",
    "kind": "Method",
    "detail": "Function (break ; case blt_succ_cpy : my_successors .)",
    "insertText": "copy_successors(*(current->succv))"
  },
  {
    "label": "indexer_node_base()",
    "kind": "Method",
    "detail": "Function (break ; # endif } } } public :)",
    "insertText": "indexer_node_base(graph& g) : graph_node(g), input_ports_type()"
  },
  {
    "label": "set_indexer_node_pointer()",
    "kind": "Method",
    "detail": "Function (indexer_helper<StructTypes,N)",
    "insertText": "set_indexer_node_pointer(this->my_inputs, this, g)"
  },
  {
    "label": "set_owner()",
    "kind": "Method",
    "detail": "Function (my_successors .)",
    "insertText": "set_owner(this)"
  },
  {
    "label": "initialize_handler()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "initialize_handler(handler_type(this))"
  },
  {
    "label": "indexer_node_base()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "indexer_node_base(const indexer_node_base& other) : graph_node(other.my_graph), input_ports_type(), sender<output_type>()"
  },
  {
    "label": "set_indexer_node_pointer()",
    "kind": "Method",
    "detail": "Function (indexer_helper<StructTypes,N)",
    "insertText": "set_indexer_node_pointer(this->my_inputs, this, other.my_graph)"
  },
  {
    "label": "register_successor()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "register_successor(successor_type &r)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation)",
    "insertText": "op_data(r, reg_succ)"
  },
  {
    "label": "execute()",
    "kind": "Method",
    "detail": "Function (my_aggregator .)",
    "insertText": "execute(&op_data)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation)",
    "insertText": "op_data(r, rem_succ)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation)",
    "insertText": "op_data(v, try__put_task)"
  },
  {
    "label": "internal_add_built_successor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_add_built_successor(successor_type &r)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation)",
    "insertText": "op_data(r, add_blt_succ)"
  },
  {
    "label": "internal_delete_built_successor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "internal_delete_built_successor(successor_type &r)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation)",
    "insertText": "op_data(r, del_blt_succ)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation)",
    "insertText": "op_data(blt_succ_cnt)"
  },
  {
    "label": "op_data()",
    "kind": "Method",
    "detail": "Function (indexer_node_base_operation)",
    "insertText": "op_data(blt_succ_cpy)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "extract()"
  },
  {
    "label": "built_successors()",
    "kind": "Method",
    "detail": "Function (my_successors .)",
    "insertText": "built_successors().sender_extract(*this)"
  },
  {
    "label": "extract()",
    "kind": "Method",
    "detail": "Function (indexer_helper<StructTypes,N)",
    "insertText": "extract(this->my_inputs)"
  },
  {
    "label": "reset_node()",
    "kind": "Method",
    "detail": "Function (} # endif protected : void)",
    "insertText": "reset_node(reset_flags f)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (my_successors .)",
    "insertText": "clear()"
  },
  {
    "label": "reset_inputs()",
    "kind": "Method",
    "detail": "Function (indexer_helper<StructTypes,N)",
    "insertText": "reset_inputs(this->my_inputs,f)"
  },
  {
    "label": "unfolded_indexer_node()",
    "kind": "Method",
    "detail": "Function (} } private : broadcast_cache<output_type,null_rw_mutex> my_successors ; } ; template<int N,InputTuple> struct input_types ; template<InputTuple> struct input_types<1,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef internal::tagged_msg<size_t,first_type> type ; } ; template<InputTuple> struct input_types<2,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef internal::tagged_msg<size_t,first_type,second_type> type ; } ; template<InputTuple> struct input_types<3,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type> type ; } ; template<InputTuple> struct input_types<4,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef tuple_element<3,InputTuple>::type fourth_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type,fourth_type> type ; } ; template<InputTuple> struct input_types<5,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef tuple_element<3,InputTuple>::type fourth_type ; typedef tuple_element<4,InputTuple>::type fifth_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type,fourth_type,fifth_type> type ; } ; template<InputTuple> struct input_types<6,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef tuple_element<3,InputTuple>::type fourth_type ; typedef tuple_element<4,InputTuple>::type fifth_type ; typedef tuple_element<5,InputTuple>::type sixth_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type,fourth_type,fifth_type,sixth_type> type ; } ; template<InputTuple> struct input_types<7,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef tuple_element<3,InputTuple>::type fourth_type ; typedef tuple_element<4,InputTuple>::type fifth_type ; typedef tuple_element<5,InputTuple>::type sixth_type ; typedef tuple_element<6,InputTuple>::type seventh_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type,fourth_type,fifth_type,sixth_type,seventh_type> type ; } ; template<InputTuple> struct input_types<8,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef tuple_element<3,InputTuple>::type fourth_type ; typedef tuple_element<4,InputTuple>::type fifth_type ; typedef tuple_element<5,InputTuple>::type sixth_type ; typedef tuple_element<6,InputTuple>::type seventh_type ; typedef tuple_element<7,InputTuple>::type eighth_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type,fourth_type,fifth_type,sixth_type,seventh_type,eighth_type> type ; } ; template<InputTuple> struct input_types<9,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef tuple_element<3,InputTuple>::type fourth_type ; typedef tuple_element<4,InputTuple>::type fifth_type ; typedef tuple_element<5,InputTuple>::type sixth_type ; typedef tuple_element<6,InputTuple>::type seventh_type ; typedef tuple_element<7,InputTuple>::type eighth_type ; typedef tuple_element<8,InputTuple>::type nineth_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type,fourth_type,fifth_type,sixth_type,seventh_type,eighth_type,nineth_type> type ; } ; template<InputTuple> struct input_types<1 0,InputTuple> { typedef tuple_element<0,InputTuple>::type first_type ; typedef tuple_element<1,InputTuple>::type second_type ; typedef tuple_element<2,InputTuple>::type third_type ; typedef tuple_element<3,InputTuple>::type fourth_type ; typedef tuple_element<4,InputTuple>::type fifth_type ; typedef tuple_element<5,InputTuple>::type sixth_type ; typedef tuple_element<6,InputTuple>::type seventh_type ; typedef tuple_element<7,InputTuple>::type eighth_type ; typedef tuple_element<8,InputTuple>::type nineth_type ; typedef tuple_element<9,InputTuple>::type tenth_type ; typedef internal::tagged_msg<size_t,first_type,second_type,third_type,fourth_type,fifth_type,sixth_type,seventh_type,eighth_type,nineth_type,tenth_type> type ; } ; template<OutputTuple> struct indexer_types : public input_types<tuple_size<OutputTuple>::value,OutputTuple> { const int N = tbb::flow::tuple_size<OutputTuple>::value ; typedef input_types<N,OutputTuple>::type output_type ; typedef wrap_tuple_elements<N,indexer_input_port,OutputTuple>::type input_ports_type ; typedef internal::indexer_node_FE<input_ports_type,output_type,OutputTuple> indexer_FE_type ; typedef internal::indexer_node_base<input_ports_type,output_type,OutputTuple> indexer_base_type ; } ; template<class OutputTuple> class unfolded_indexer_node : public indexer_types<OutputTuple>::indexer_base_type { public : typedef indexer_types<OutputTuple>::input_ports_type input_ports_type ; typedef OutputTuple tuple_types ; typedef indexer_types<OutputTuple>::output_type output_type ; private : typedef indexer_types<OutputTuple>::indexer_base_type base_type ; public :)",
    "insertText": "unfolded_indexer_node(graph& g) : base_type(g)"
  },
  {
    "label": "unfolded_indexer_node()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "unfolded_indexer_node(const unfolded_indexer_node &other) : base_type(other)"
  }
]