[
  {
    "label": "ApmDataDumper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ApmDataDumper"
  },
  {
    "label": "SpeechLevelEstimator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SpeechLevelEstimator"
  },
  {
    "label": "LevelEstimatorState",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "LevelEstimatorState"
  },
  {
    "label": "Ratio",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Ratio"
  },
  {
    "label": "SpeechLevelEstimator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_PROCESSING_AGC2_SPEECH_LEVEL_ESTIMATOR_H_ # define MODULES_AUDIO_PROCESSING_AGC2_SPEECH_LEVEL_ESTIMATOR_H_ # include<stddef . h> # include<type_traits> # include \" modules / audio_processing / agc2 / agc2_common . h \" # include \" modules / audio_processing / include / audio_processing . h \" namespace webrtc { class ApmDataDumper ; class SpeechLevelEstimator { public :)",
    "insertText": "SpeechLevelEstimator(ApmDataDumper* apm_data_dumper, const AudioProcessing::Config::GainController2::AdaptiveDigital& config)"
  },
  {
    "label": "SpeechLevelEstimator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SpeechLevelEstimator(const SpeechLevelEstimator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SpeechLevelEstimator&)",
    "insertText": "operator(const SpeechLevelEstimator&)"
  },
  {
    "label": "Update()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Update(float rms_dbfs, float peak_dbfs, float speech_probability)"
  },
  {
    "label": "level_dbfs()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "level_dbfs()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (private : struct LevelEstimatorState { bool)",
    "insertText": "operator(const LevelEstimatorState& s)"
  },
  {
    "label": "GetRatio()",
    "kind": "Method",
    "detail": "Function (} int time_to_confidence_ms ; struct Ratio { float numerator ; float denominator ; float)",
    "insertText": "GetRatio()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} level_dbfs ; } ;)",
    "insertText": "static_assert(std::is_trivially_copyable<LevelEstimatorState>::value, \"\")"
  },
  {
    "label": "ResetLevelEstimatorState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetLevelEstimatorState(LevelEstimatorState& state)"
  },
  {
    "label": "DumpDebugData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpDebugData()"
  }
]