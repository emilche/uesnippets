[
  {
    "label": "FInfoEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInfoEntity"
  },
  {
    "label": "FSurface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSurface"
  },
  {
    "label": "PointType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointType"
  },
  {
    "label": "PointCurveType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PointCurveType"
  },
  {
    "label": "CADKERNEL_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CADKERNEL_API"
  },
  {
    "label": "FEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEntity"
  },
  {
    "label": "FPolylineTools",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPolylineTools"
  },
  {
    "label": "PolylineType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PolylineType"
  },
  {
    "label": "TPolylineCurve()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Geo / Curves / Curve . h \" # include \" Geo / Sampling / Polyline . h \" # include \" Geo / Sampling / PolylineTools . h \" namespace UE::CADKernel { class FInfoEntity ; class FSurface ; template<class PointType,class PointCurveType> class TPolylineCurve : public FCurve,public TPolyline<PointType> { class FEntity ; class FPolylineTools ; protected : TPolylineApproximator<PointType> Approximator ;)",
    "insertText": "TPolylineCurve(const TArray<PointType>& InPoints, const TArray<double>& InCoordinates, int8 InDimension) : FCurve(InDimension) , Approximator(this->Coordinates, this->Points)"
  },
  {
    "label": "ensureCADKernel()",
    "kind": "Method",
    "detail": "Function (this -> Coordinates = InCoordinates ; this -> Points = InPoints ;)",
    "insertText": "ensureCADKernel(this->Coordinates[0] < this->Coordinates.Last())"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (Boundary .)",
    "insertText": "Set(this->Coordinates.HeapTop(), this->Coordinates.Last())"
  },
  {
    "label": "TPolylineCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPolylineCurve(const TArray<PointType>& InPoints, int8 InDimension) : FCurve(InDimension) , TPolyline<PointType>(InPoints) , Approximator(this->Coordinates, this->Points)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (this -> Coordinates .)",
    "insertText": "Reserve(InPoints.Num())"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this -> Coordinates .)",
    "insertText": "Add(0.)"
  },
  {
    "label": "Distance()",
    "kind": "Method",
    "detail": "Function (CurvilineLength + = this -> Points [ iPoint ] .)",
    "insertText": "Distance(this->Points[iPoint - 1])"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (this -> Coordinates .)",
    "insertText": "Add(CurvilineLength)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (} Boundary .)",
    "insertText": "Set(0, CurvilineLength)"
  },
  {
    "label": "TPolylineCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPolylineCurve() : Approximator(this->Coordinates, this->Points)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "EvaluateCurvesPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateCurvesPoint(double InCoordinate, PointCurveType& OutPoint, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "ApproximatePoint()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "ApproximatePoint(InCoordinate, OutPoint, InDerivativeOrder)"
  },
  {
    "label": "EvaluatePointAt()",
    "kind": "Method",
    "detail": "Function (} PointType)",
    "insertText": "EvaluatePointAt(double InCoordinate)"
  },
  {
    "label": "EvaluateCurvesPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EvaluateCurvesPoints(const TArray<double>& InCoordinates, TArray<PointCurveType>& OutPoints, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "ApproximatePoints()",
    "kind": "Method",
    "detail": "Function (Approximator .)",
    "insertText": "ApproximatePoints(InCoordinates, OutPoints, InDerivativeOrder)"
  },
  {
    "label": "ComputeSubLength()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "ComputeSubLength(const FLinearBoundary& InBoundary)"
  },
  {
    "label": "GetPolylinePoints()",
    "kind": "Method",
    "detail": "Function (} const TArray<PointType>&)",
    "insertText": "GetPolylinePoints()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (const int32 CoordinateCount = this -> Coordinates .)",
    "insertText": "Num()"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (OutNotDerivableCoordinates .)",
    "insertText": "Reserve(CoordinateCount - 2)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int32 Index = 1 ;)",
    "insertText": "for(; Index < CoordinateCount - 1 && this->Coordinates[Index] <= InBoundary.GetMin(); ++Index)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (OutNotDerivableCoordinates .)",
    "insertText": "Emplace(this->Coordinates[Index])"
  },
  {
    "label": "SetPoints()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "SetPoints(const TArray<PointType>& InPoints)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (this -> Points = InPoints ; GlobalLength .)",
    "insertText": "Empty()"
  },
  {
    "label": "ApplyMatrixImpl()",
    "kind": "Method",
    "detail": "Function (} template<class PolylineType> TSharedPtr<FEntityGeom>)",
    "insertText": "ApplyMatrixImpl(const FMatrixH& InMatrix)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (TArray<PointType> NewPoints ; NewPoints .)",
    "insertText": "Reserve(this->Points.Num())"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (NewPoints .)",
    "insertText": "Emplace(InMatrix.Multiply(Point))"
  },
  {
    "label": "PolylineType()",
    "kind": "Method",
    "detail": "Function (} return FEntity::MakeShared<)",
    "insertText": "PolylineType(NewPoints, this->Coordinates)"
  },
  {
    "label": "Offset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Offset(const FPoint& OffsetDirection)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (Pole + = OffsetDirection ; } } void)",
    "insertText": "ExtendTo(const FPoint& DesiredPoint)"
  },
  {
    "label": "ExtendTo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtendTo(this->Points, (PointType)DesiredPoint)"
  },
  {
    "label": "FPolylineCurve()",
    "kind": "Method",
    "detail": "Function (} } ; class FPolylineCurve : public TPolylineCurve<FPoint,FCurvePoint> { class FEntity ; protected :)",
    "insertText": "FPolylineCurve(const TArray<FPoint>& InPoints, const TArray<double>& InCoordinates) : TPolylineCurve<FPoint, FCurvePoint>(InPoints, InCoordinates, 3)"
  },
  {
    "label": "FPolylineCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPolylineCurve(const TArray<FPoint>& InPoints) : TPolylineCurve<FPoint, FCurvePoint>(InPoints, 3)"
  },
  {
    "label": "FPolylineCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPolylineCurve()"
  },
  {
    "label": "GetCurveType()",
    "kind": "Method",
    "detail": "Function (public : ECurve)",
    "insertText": "GetCurveType()"
  },
  {
    "label": "EvaluatePoint()",
    "kind": "Method",
    "detail": "Function (} FPoint)",
    "insertText": "EvaluatePoint(double InCoordinate)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity& Info)"
  },
  {
    "label": "FPolyline2DCurve()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FPolyline2DCurve : public TPolylineCurve<FPoint2D,FCurvePoint2D> { class FEntity ; protected :)",
    "insertText": "FPolyline2DCurve(const TArray<FPoint2D>& InPoints, const TArray<double>& InCoordinates) : TPolylineCurve<FPoint2D, FCurvePoint2D>(InPoints, InCoordinates, 2)"
  },
  {
    "label": "FPolyline2DCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPolyline2DCurve(const TArray<FPoint2D>& InPoints) : TPolylineCurve<FPoint2D, FCurvePoint2D>(InPoints, 2)"
  },
  {
    "label": "FPolyline2DCurve()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPolyline2DCurve()"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoint(double InCoordinate, FCurvePoint2D& OutPoint, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "EvaluateCurvesPoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateCurvesPoint(InCoordinate, OutPoint, InDerivativeOrder)"
  },
  {
    "label": "Evaluate2DPoint()",
    "kind": "Method",
    "detail": "Function (} FPoint2D)",
    "insertText": "Evaluate2DPoint(double InCoordinate)"
  },
  {
    "label": "Evaluate2DPoints()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Evaluate2DPoints(const TArray<double>& InCoordinates, TArray<FCurvePoint2D>& OutPoints, int32 InDerivativeOrder = 0)"
  },
  {
    "label": "EvaluateCurvesPoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EvaluateCurvesPoints(InCoordinates, OutPoints, InDerivativeOrder)"
  }
]