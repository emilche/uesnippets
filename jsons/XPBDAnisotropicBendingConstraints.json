[
  {
    "label": "FTriangleMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTriangleMesh"
  },
  {
    "label": "FXPBDAnisotropicBendingConstraints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FXPBDAnisotropicBendingConstraints"
  },
  {
    "label": "MinStiffness()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDBendingConstraintsBase . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" Chaos / PBDFlatWeightMap . h \" # include \" ChaosStats . h \" namespace Chaos { class FTriangleMesh ; } namespace Chaos::Softs { class FXPBDAnisotropicBendingConstraints final : public FPBDBendingConstraintsBase { typedef FPBDBendingConstraintsBase Base ; public : FSolverReal)",
    "insertText": "MinStiffness(FSolverReal)"
  },
  {
    "label": "MaxStiffness()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxStiffness(FSolverReal)"
  },
  {
    "label": "MinDamping()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MinDamping(FSolverReal)"
  },
  {
    "label": "MaxDamping()",
    "kind": "Method",
    "detail": "Function (FSolverReal)",
    "insertText": "MaxDamping(FSolverReal)"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FXPBDAnisotropicBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDAnisotropicBendingConstraints(const FSolverParticlesRange& InParticles, const FTriangleMesh& TriangleMesh, const TArray<TVec3<FVec2f>>& FaceVertexPatternPositions, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FXPBDAnisotropicBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDAnisotropicBendingConstraints(const FSolverParticles& InParticles, int32 InParticleOffset, int32 InParticleCount, const FTriangleMesh& TriangleMesh, const TArray<TVec3<FVec2f>>& FaceVertexPatternPositions, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FXPBDAnisotropicBendingConstraints()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FXPBDAnisotropicBendingConstraints(const FSolverParticles & InParticles, int32 InParticleOffset, int32 InParticleCount, const FTriangleMesh& TriangleMesh, const TArray<TVec3<FVec2f>>& FaceVertexPatternPositions, const TConstArrayView<FRealSingle>& StiffnessWarpMultipliers, const TConstArrayView<FRealSingle>& StiffnessWeftMultipliers, const TConstArrayView<FRealSingle>& StiffnessBiasMultipliers, const TConstArrayView<FRealSingle>& BucklingRatioMultipliers, const TConstArrayView<FRealSingle>& BucklingStiffnessWarpMultipliers, const TConstArrayView<FRealSingle>& BucklingStiffnessWeftMultipliers, const TConstArrayView<FRealSingle>& BucklingStiffnessBiasMultipliers, const TConstArrayView<FRealSingle>& DampingMultipliers, const TConstArrayView<FRealSingle>& RestAngleMap, const FSolverVec2& InStiffnessWarp, const FSolverVec2& InStiffnessWeft, const FSolverVec2& InStiffnessBias, const FSolverVec2& InBucklingRatio, const FSolverVec2& InBucklingStiffnessWarp, const FSolverVec2& InBucklingStiffnessWeft, const FSolverVec2& InBucklingStiffnessBias, const FSolverVec2& InDampingRatio, const FSolverVec2& RestAngleValue, ERestAngleConstructionType RestAngleConstructionType)"
  },
  {
    "label": "FXPBDAnisotropicBendingConstraints()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FXPBDAnisotropicBendingConstraints()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Init(const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "SetProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetProperties(const FCollectionPropertyConstFacade& PropertyCollection, const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps)"
  },
  {
    "label": "ApplyProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyProperties(const FSolverReal , const int32)"
  },
  {
    "label": "ApplyValues()",
    "kind": "Method",
    "detail": "Function (BucklingRatioWeighted .)",
    "insertText": "ApplyValues()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (} template<SolverParticlesOrRange> void)",
    "insertText": "Apply(SolverParticlesOrRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "GetConstraintsPerColorStartIndex()",
    "kind": "Method",
    "detail": "Function (const TArray<int32>&)",
    "insertText": "GetConstraintsPerColorStartIndex()"
  },
  {
    "label": "GetConstraintsArray()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>>)",
    "insertText": "GetConstraintsArray()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<int32>> ConstraintsArray ; ConstraintsArray .)",
    "insertText": "SetNum(Constraints.Num())"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (ConstraintsArray [ i ] .)",
    "insertText": "SetNum(4)"
  },
  {
    "label": "AddInternalForceDifferential()",
    "kind": "Method",
    "detail": "Function (ConstraintsArray [ i ] [ j ] = Constraints [ i ] [ j ] ; } } return ConstraintsArray ; } void)",
    "insertText": "AddInternalForceDifferential(const FSolverParticles& InParticles, const TArray<TVector<FSolverReal, 3>>& DeltaParticles, TArray<TVector<FSolverReal, 3>>& ndf)"
  },
  {
    "label": "InitColor()",
    "kind": "Method",
    "detail": "Function (private : template<SolverParticlesOrRange> void)",
    "insertText": "InitColor(const SolverParticlesOrRange& InParticles)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (template<bool bDampingOnly,bool bElasticOnly,SolverParticlesOrRange> void)",
    "insertText": "ApplyHelper(SolverParticlesOrRange& Particles, const FSolverReal Dt, const int32 ConstraintIndex, const FSolverVec3& ExpStiffnessValues, const FSolverVec3& ExpBucklingStiffnessValues, const FSolverReal DampingRatioValue)"
  },
  {
    "label": "GenerateWarpWeftBiasBaseMultipliers()",
    "kind": "Method",
    "detail": "Function (TArray<FSolverVec3>)",
    "insertText": "GenerateWarpWeftBiasBaseMultipliers(const TArray<TVec3<FVec2f>>& FaceVertexPatternPositions, const FTriangleMesh& TriangleMesh)"
  },
  {
    "label": "GetRestAngleMapFromCollection()",
    "kind": "Method",
    "detail": "Function (TConstArrayView<FRealSingle>)",
    "insertText": "GetRestAngleMapFromCollection(const TMap<FString, TConstArrayView<FRealSingle>>& WeightMaps, const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "ConstructionType()",
    "kind": "Method",
    "detail": "Function (const ERestAngleConstructionType)",
    "insertText": "ConstructionType(ERestAngleConstructionType)GetXPBDAnisoRestAngleType(PropertyCollection, (int32)ERestAngleConstructionType::Use3DRestAngles)"
  },
  {
    "label": "FRealSingle()",
    "kind": "Method",
    "detail": "Function (default : case ERestAngleConstructionType::Use3DRestAngles : return TConstArrayView<)",
    "insertText": "FRealSingle()"
  },
  {
    "label": "GetRestAngleValueFromCollection()",
    "kind": "Method",
    "detail": "Function (} } FSolverVec2)",
    "insertText": "GetRestAngleValueFromCollection(const FCollectionPropertyConstFacade& PropertyCollection)"
  },
  {
    "label": "FSolverVec2()",
    "kind": "Method",
    "detail": "Function (default : case ERestAngleConstructionType::Use3DRestAngles : return)",
    "insertText": "FSolverVec2(0.f)"
  },
  {
    "label": "ComputeGradTheta()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ComputeGradTheta(const FSolverVec3& X0, const FSolverVec3& X1, const FSolverVec3& X2, const FSolverVec3& X3, const int32 Index, FSolverVec3& dThetadx, FSolverReal& Theta)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (using Base::Constraints ; using Base::ParticleOffset ; using Base::ParticleCount ; using Base::RestAngles ; FPBDFlatWeightMap StiffnessWarp ; FPBDFlatWeightMap StiffnessWeft ; FPBDFlatWeightMap StiffnessBias ; FPBDFlatWeightMap BucklingStiffnessWarp ; FPBDFlatWeightMap BucklingStiffnessWeft ; FPBDFlatWeightMap BucklingStiffnessBias ; FPBDFlatWeightMap DampingRatio ; TArray<FSolverReal> Lambdas ; TArray<FSolverReal> LambdasDamping ; TArray<int32> ConstraintsPerColorStartIndex ; # if INTEL_ISPC TArray<int32> ConstraintsIndex1 ; TArray<int32> ConstraintsIndex2 ; TArray<int32> ConstraintsIndex3 ; TArray<int32> ConstraintsIndex4 ; TArray<FSolverVec3> X1Array ; TArray<FSolverVec3> X2Array ; TArray<FSolverVec3> X3Array ; TArray<FSolverVec3> X4Array ; # endif TArray<FSolverVec3> WarpWeftBiasBaseMultipliers ;)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBendingStiffnessWarp, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBendingStiffnessWeft, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBendingStiffnessBias, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBendingDamping, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBucklingRatio, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBucklingStiffnessWarp, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBucklingStiffnessWeft, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoBucklingStiffnessBias, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoFlatnessRatio, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoRestAngle, float)"
  },
  {
    "label": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_CHAOS_DECLARE_PROPERTYCOLLECTION_NAME(XPBDAnisoRestAngleType, int32)"
  }
]