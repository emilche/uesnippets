[
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FLevelViewportLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportLayout"
  },
  {
    "label": "FLevelViewportTabContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportTabContent"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "SViewportsOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewportsOverlay"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "ILevelViewportLayoutEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelViewportLayoutEntity"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "FMaximizeViewportCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaximizeViewportCommand"
  },
  {
    "label": "RequestMaximizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestMaximizeViewport( FName ViewportToMaximize, const bool bWantMaximize, const bool bWantImmersive, const bool bAllowAnimation = true )"
  },
  {
    "label": "TStatId()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "TStatId()"
  },
  {
    "label": "MaximizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MaximizeViewport( FName ViewportToMaximize, const bool bWantMaximize, const bool bWantImmersive, const bool bAllowAnimation )"
  },
  {
    "label": "FinishMaximizeTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishMaximizeTransition()"
  },
  {
    "label": "BeginThrottleForAnimatedResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginThrottleForAnimatedResize()"
  },
  {
    "label": "EndThrottleForAnimatedResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndThrottleForAnimatedResize()"
  },
  {
    "label": "InitCommonLayoutFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitCommonLayoutFromString(const FString& LayoutString, const FName PerspectiveViewportKey)"
  },
  {
    "label": "TakeHighResScreenShot()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TakeHighResScreenShot()"
  }
]