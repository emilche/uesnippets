[
  {
    "label": "FLevelEditorViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelEditorViewportClient"
  },
  {
    "label": "FLevelViewportLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportLayout"
  },
  {
    "label": "FLevelViewportTabContent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLevelViewportTabContent"
  },
  {
    "label": "ILevelEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelEditor"
  },
  {
    "label": "SLevelViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SLevelViewport"
  },
  {
    "label": "SViewportsOverlay",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SViewportsOverlay"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "ILevelViewportLayoutEntity",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ILevelViewportLayoutEntity"
  },
  {
    "label": "LEVELEDITOR_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LEVELEDITOR_API"
  },
  {
    "label": "FMaximizeViewportCommand",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMaximizeViewportCommand"
  },
  {
    "label": "ILevelViewportLayoutEntity()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateFwd . h \" # include \" Stats / Stats . h \" # include \" Misc / Attribute . h \" # include \" Animation / CurveSequence . h \" # include \" Layout / Visibility . h \" # include \" Widgets / SWidget . h \" # include \" Editor / UnrealEdTypes . h \" # include \" Application / ThrottleManager . h \" # include \" AssetEditorViewportLayout . h \" # include \" TickableEditorObject . h \" class FLevelEditorViewportClient ; class FLevelViewportLayout ; class FLevelViewportTabContent ; class ILevelEditor ; class SLevelViewport ; class SViewportsOverlay ; class SWindow ; class ILevelViewportLayoutEntity : public IEditorViewportLayoutEntity { public : ~)",
    "insertText": "ILevelViewportLayoutEntity()"
  },
  {
    "label": "AsLevelViewport()",
    "kind": "Method",
    "detail": "Function (} ; TSharedPtr<SLevelViewport>)",
    "insertText": "AsLevelViewport()"
  },
  {
    "label": "IsPlayInEditorViewportActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInEditorViewportActive()"
  },
  {
    "label": "RegisterGameViewportIfPIE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterGameViewportIfPIE()"
  },
  {
    "label": "FLevelViewportLayout()",
    "kind": "Method",
    "detail": "Function (} ; class FLevelViewportLayout : public FAssetEditorViewportLayout { public :)",
    "insertText": "FLevelViewportLayout()"
  },
  {
    "label": "BuildViewportLayout()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildViewportLayout(TSharedPtr<SDockTab> InParentDockTab, TSharedPtr<FEditorViewportTabContent> InParentTab, const FString& LayoutString)"
  },
  {
    "label": "FactoryViewport()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "FactoryViewport(FName InTypeName, const FAssetEditorViewportConstructionArgs& ConstructionArgs)"
  },
  {
    "label": "RequestMaximizeViewport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestMaximizeViewport(FName ViewportToMaximize, const bool bWantMaximize, const bool bWantImmersive, const bool bAllowAnimation = true)"
  },
  {
    "label": "IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsVisible()"
  },
  {
    "label": "IsLevelViewportVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLevelViewportVisible(FName InViewport)"
  },
  {
    "label": "IsMaximizeSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsMaximizeSupported()"
  },
  {
    "label": "IsViewportImmersive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsViewportImmersive(FName InViewport)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "IsTickable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTickable()"
  },
  {
    "label": "GetStatId()",
    "kind": "Method",
    "detail": "Function (TStatId)",
    "insertText": "GetStatId()"
  },
  {
    "label": "SetIsReplacement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetIsReplacement(bool bInIsReplacement)"
  },
  {
    "label": "IsTransitioning()",
    "kind": "Method",
    "detail": "Function (bIsReplacement = bInIsReplacement ; } bool)",
    "insertText": "IsTransitioning()"
  },
  {
    "label": "SaveConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveConfig(const FString& LayoutString)"
  },
  {
    "label": "MaximizeViewport()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "MaximizeViewport(FName ViewportToMaximize, const bool bWantMaximize, const bool bWantImmersive, const bool bAllowAnimation)"
  },
  {
    "label": "OnGetNonMaximizedVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "OnGetNonMaximizedVisibility()"
  },
  {
    "label": "GetMaximizedViewportPositionOnCanvas()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetMaximizedViewportPositionOnCanvas()"
  },
  {
    "label": "GetMaximizedViewportSizeOnCanvas()",
    "kind": "Method",
    "detail": "Function (FVector2D)",
    "insertText": "GetMaximizedViewportSizeOnCanvas()"
  },
  {
    "label": "FinishMaximizeTransition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinishMaximizeTransition()"
  },
  {
    "label": "BeginThrottleForAnimatedResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginThrottleForAnimatedResize()"
  },
  {
    "label": "EndThrottleForAnimatedResize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndThrottleForAnimatedResize()"
  },
  {
    "label": "InitCommonLayoutFromString()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitCommonLayoutFromString(const FString& LayoutString, const FName PerspectiveViewportKey)"
  },
  {
    "label": "SaveCommonLayoutString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveCommonLayoutString(const FString& SpecificLayoutString)"
  },
  {
    "label": "TakeHighResScreenShot()",
    "kind": "Method",
    "detail": "Function (bool bIsTransitioning ; FCurveSequence MaximizeAnimation ; TWeakPtr<ILevelEditor> ParentLevelEditor ; void)",
    "insertText": "TakeHighResScreenShot()"
  },
  {
    "label": "FMaximizeViewportCommand()",
    "kind": "Method",
    "detail": "Function (FName MaximizedViewport ; bool bIsReplacement ; bool bIsQueryingLayoutMetrics ; bool bIsMaximizeSupported ; bool bIsMaximized ; bool bIsImmersive ; bool bWasMaximized ; bool bWasImmersive ; FVector2D MaximizedViewportStartPosition ; FVector2D MaximizedViewportStartSize ; TSharedPtr<SWidget> ViewportsOverlayWidget ; TSharedPtr<SWidget> ViewportReplacementWidget ; TWeakPtr<SWindow> CachedOwnerWindow ; FThrottleRequest ViewportResizeThrottleRequest ; struct FMaximizeViewportCommand {)",
    "insertText": "FMaximizeViewportCommand(FName InViewport, bool bInMaximize, bool bInImmersive, bool bInToggle=true, bool bInAllowAnimation=true) : Viewport(InViewport) , bMaximize(bInMaximize) , bImmersive(bInImmersive) , bToggle(bInToggle) , bAllowAnimation(bInAllowAnimation)"
  }
]