[
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FTextComparison",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextComparison"
  },
  {
    "label": "CompareTo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" namespace ETextComparisonLevel { enum Type { Default,Primary,Secondary,Tertiary,Quaternary,Quinary } ; } class FTextComparison { public : int32)",
    "insertText": "CompareTo(const FString& A, const FString& B, const ETextComparisonLevel::Type ComparisonLevel = ETextComparisonLevel::Default)"
  },
  {
    "label": "CompareToCaseIgnored()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CompareToCaseIgnored(const FString& A, const FString& B)"
  },
  {
    "label": "EqualTo()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualTo(const FString& A, const FString& B, const ETextComparisonLevel::Type ComparisonLevel = ETextComparisonLevel::Default)"
  },
  {
    "label": "EqualToCaseIgnored()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EqualToCaseIgnored(const FString& A, const FString& B)"
  }
]