[
  {
    "label": "DisplayStreamManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DisplayStreamManager"
  },
  {
    "label": "ScreenCapturerMac",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScreenCapturerMac"
  },
  {
    "label": "ScreenCapturerMac()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_MAC_SCREEN_CAPTURER_MAC_H_ # define MODULES_DESKTOP_CAPTURE_MAC_SCREEN_CAPTURER_MAC_H_ # include<CoreGraphics / CoreGraphics . h> # include<memory> # include<vector> # include \" api / sequence_checker . h \" # include \" modules / desktop_capture / desktop_capture_options . h \" # include \" modules / desktop_capture / desktop_capturer . h \" # include \" modules / desktop_capture / desktop_frame . h \" # include \" modules / desktop_capture / desktop_geometry . h \" # include \" modules / desktop_capture / desktop_region . h \" # include \" modules / desktop_capture / mac / desktop_configuration . h \" # include \" modules / desktop_capture / mac / desktop_configuration_monitor . h \" # include \" modules / desktop_capture / mac / desktop_frame_provider . h \" # include \" modules / desktop_capture / screen_capture_frame_queue . h \" # include \" modules / desktop_capture / screen_capturer_helper . h \" # include \" modules / desktop_capture / shared_desktop_frame . h \" namespace webrtc { class DisplayStreamManager ; class ScreenCapturerMac final : public DesktopCapturer { public :)",
    "insertText": "ScreenCapturerMac(rtc::scoped_refptr<DesktopConfigurationMonitor> desktop_config_monitor, bool detect_updated_region, bool allow_iosurface)"
  },
  {
    "label": "ScreenCapturerMac()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScreenCapturerMac()"
  },
  {
    "label": "ScreenCapturerMac()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScreenCapturerMac(const ScreenCapturerMac&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ScreenCapturerMac&)",
    "insertText": "operator(const ScreenCapturerMac&)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Init()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start(Callback* callback)"
  },
  {
    "label": "CaptureFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureFrame()"
  },
  {
    "label": "SetExcludedWindow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetExcludedWindow(WindowId window)"
  },
  {
    "label": "GetSourceList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSourceList(SourceList* screens)"
  },
  {
    "label": "SelectSource()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectSource(SourceId id)"
  },
  {
    "label": "CgBlit()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CgBlit(const DesktopFrame& frame, const DesktopRegion& region)"
  },
  {
    "label": "ScreenConfigurationChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScreenConfigurationChanged()"
  },
  {
    "label": "RegisterRefreshAndMoveHandlers()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RegisterRefreshAndMoveHandlers()"
  },
  {
    "label": "UnregisterRefreshAndMoveHandlers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterRefreshAndMoveHandlers()"
  },
  {
    "label": "ScreenRefresh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScreenRefresh(CGDirectDisplayID display_id, CGRectCount count, const CGRect* rect_array, DesktopVector display_origin, IOSurfaceRef io_surface)"
  },
  {
    "label": "ReleaseBuffers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseBuffers()"
  },
  {
    "label": "CreateFrame()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<DesktopFrame>)",
    "insertText": "CreateFrame()"
  }
]