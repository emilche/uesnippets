[
  {
    "label": "__fn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__fn"
  },
  {
    "label": "_Tp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Tp"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_RANGES_MAX_H # define _LIBCPP___ALGORITHM_RANGES_MAX_H # include<__algorithm / ranges_min_element . h> # include<__assert> # include<__concepts / copyable . h> # include<__config> # include<__functional / identity . h> # include<__functional / invoke . h> # include<__functional / ranges_operations . h> # include<__iterator / concepts . h> # include<__iterator / projected . h> # include<__ranges / access . h> # include<__ranges / concepts . h> # include<__utility / move . h> # include<initializer_list> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER) # pragma GCC system_header #endif #if _LIBCPP_STD_VER > 17 && !defined(_LIBCPP_HAS_NO_INCOMPLETE_RANGES)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (namespace __max { struct __fn { template<class _Tp,class _Proj = identity,indirect_strict_weak_order<projected<const _Tp*,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI const _Tp&)",
    "insertText": "operator()(const _Tp& __a, const _Tp& __b, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<copyable _Tp,class _Proj = identity,indirect_strict_weak_order<projected<const _Tp*,_Proj>> _Comp = ranges::less> _LIBCPP_HIDE_FROM_ABI _Tp)",
    "insertText": "operator()(initializer_list<_Tp> __il, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__il.begin() != __il.end(), \"initializer_list must contain at least one element\")"
  },
  {
    "label": "__comp_lhs_rhs_swapped()",
    "kind": "Method",
    "detail": "Function (auto)",
    "insertText": "__comp_lhs_rhs_swapped(auto&& __lhs, auto&& __rhs)"
  },
  {
    "label": "__min_element_impl()",
    "kind": "Method",
    "detail": "Function (} ; return*)",
    "insertText": "__min_element_impl(__il.begin(), __il.end(), __comp_lhs_rhs_swapped, __proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<input_range _Rp,class _Proj = identity,indirect_strict_weak_order<projected<iterator_t<_Rp>,_Proj>> _Comp = ranges::less> requires indirectly_copyable_storable<iterator_t<_Rp>,range_value_t<_Rp>*> _LIBCPP_HIDE_FROM_ABI range_value_t<_Rp>)",
    "insertText": "operator()(_Rp&& __r, _Comp __comp = {}, _Proj __proj = {})"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (auto __first =)",
    "insertText": "begin(__r)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (auto __last =)",
    "insertText": "end(__r)"
  },
  {
    "label": "_LIBCPP_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_LIBCPP_ASSERT(__first != __last, \"range must contain at least one element\")"
  },
  {
    "label": "__min_element_impl()",
    "kind": "Method",
    "detail": "Function (} ; return*)",
    "insertText": "__min_element_impl(std::move(__first), std::move(__last), __comp_lhs_rhs_swapped, __proj)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (} else { range_value_t<_Rp> __result =* __first ;)",
    "insertText": "while(++__first != __last)"
  }
]