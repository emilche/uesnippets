[
  {
    "label": "generic_gep_type_iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "generic_gep_type_iterator"
  },
  {
    "label": "generic_gep_type_iterator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_IR_GETELEMENTPTRTYPEITERATOR_H # define LLVM_IR_GETELEMENTPTRTYPEITERATOR_H # include \" llvm / IR / DerivedTypes . h \" # include \" llvm / IR / Operator . h \" # include \" llvm / IR / User . h \" # include \" llvm / ADT / PointerIntPair . h \" namespace llvm { template<ItTy = User::const_op_iterator> class generic_gep_type_iterator { ItTy OpIt ; PointerIntPair<Type*,1> CurTy ; unsigned AddrSpace ;)",
    "insertText": "generic_gep_type_iterator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} public : using iterator_category = std::forward_iterator_tag ; using value_type = Type* ; using difference_type = std::ptrdiff_t ; using pointer = value_type* ; using reference = value_type& ; generic_gep_type_iterator)",
    "insertText": "begin(Type *Ty, ItTy It)"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (generic_gep_type_iterator I ; I . CurTy .)",
    "insertText": "setPointer(Ty)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (I . OpIt = It ; return I ; } generic_gep_type_iterator)",
    "insertText": "begin(Type *Ty, unsigned AddrSpace, ItTy It)"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (I . CurTy .)",
    "insertText": "setInt(true)"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (I . AddrSpace = AddrSpace ; I . OpIt = It ; return I ; } generic_gep_type_iterator)",
    "insertText": "end(ItTy It)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (generic_gep_type_iterator I ; I . OpIt = It ; return I ; } bool)",
    "insertText": "operator(const generic_gep_type_iterator& x)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "operator()"
  },
  {
    "label": "getIndexedType()",
    "kind": "Method",
    "detail": "Function (} Type*)",
    "insertText": "getIndexedType()"
  },
  {
    "label": "CompositeType()",
    "kind": "Method",
    "detail": "Function (CompositeType* CT = cast<)",
    "insertText": "CompositeType(CurTy.getPointer())"
  },
  {
    "label": "getOperand()",
    "kind": "Method",
    "detail": "Function (} Value*)",
    "insertText": "getOperand()"
  },
  {
    "label": "setInt()",
    "kind": "Method",
    "detail": "Function (CurTy .)",
    "insertText": "setInt(false)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(CompositeType *CT = dyn_cast<CompositeType>(CurTy.getPointer()))"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (CurTy .)",
    "insertText": "setPointer(CT->getTypeAtIndex(getOperand()))"
  },
  {
    "label": "setPointer()",
    "kind": "Method",
    "detail": "Function (} else { CurTy .)",
    "insertText": "setPointer(nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} + + OpIt ; return* this ; } generic_gep_type_iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "gep_type_begin()",
    "kind": "Method",
    "detail": "Function (generic_gep_type_iterator tmp =* this ; + +* this ; return tmp ; } } ; typedef generic_gep_type_iterator<> gep_type_iterator ; gep_type_iterator)",
    "insertText": "gep_type_begin(const User *GEP)"
  },
  {
    "label": "GEPOperator()",
    "kind": "Method",
    "detail": "Function (auto* GEPOp = cast<)",
    "insertText": "GEPOperator(GEP)"
  },
  {
    "label": "gep_type_end()",
    "kind": "Method",
    "detail": "Function (} gep_type_iterator)",
    "insertText": "gep_type_end(const User *GEP)"
  },
  {
    "label": "gep_type_begin()",
    "kind": "Method",
    "detail": "Function (} gep_type_iterator)",
    "insertText": "gep_type_begin(const User &GEP)"
  },
  {
    "label": "gep_type_end()",
    "kind": "Method",
    "detail": "Function (} gep_type_iterator)",
    "insertText": "gep_type_end(const User &GEP)"
  },
  {
    "label": "gep_type_begin()",
    "kind": "Method",
    "detail": "Function (} template<T> generic_gep_type_iterator<const T*>)",
    "insertText": "gep_type_begin(Type *Op0, ArrayRef<T> A)"
  },
  {
    "label": "gep_type_end()",
    "kind": "Method",
    "detail": "Function (} template<T> generic_gep_type_iterator<const T*>)",
    "insertText": "gep_type_end(Type * , ArrayRef<T> A)"
  }
]