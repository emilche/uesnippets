[
  {
    "label": "Flag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Flag"
  },
  {
    "label": "AsyncWaiter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AsyncWaiter"
  },
  {
    "label": "WaitableEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WaitableEvent"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SYNCHRONIZATION_WAITABLE_EVENT_WATCHER_H_ # define BASE_SYNCHRONIZATION_WAITABLE_EVENT_WATCHER_H_ # include \" base / base_export . h \" # include \" base / memory / raw_ptr . h \" # include \" base / task / sequenced_task_runner . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/object_watcher.h\" #include \"base/win/scoped_handle.h\" #elif BUILDFLAG(IS_APPLE) #include <dispatch/dispatch.h> #include \"base/mac/scoped_dispatch_object.h\" #include \"base/memory/weak_ptr.h\" #include \"base/synchronization/waitable_event.h\" #else #include \"base/sequence_checker.h\" #include \"base/synchronization/waitable_event.h\" #endif #if !BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class Flag ; class AsyncWaiter ; class WaitableEvent ; class BASE_EXPORT WaitableEventWatcher # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (public : using EventCallback = OnceCallback<)",
    "insertText": "void(WaitableEvent*)"
  },
  {
    "label": "WaitableEventWatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitableEventWatcher()"
  },
  {
    "label": "WaitableEventWatcher()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WaitableEventWatcher(const WaitableEventWatcher&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (WaitableEventWatcher&)",
    "insertText": "operator(const WaitableEventWatcher&)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_WIN) ~WaitableEventWatcher()"
  },
  {
    "label": "StartWatching()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "StartWatching(WaitableEvent* event, EventCallback callback, scoped_refptr<SequencedTaskRunner> task_runner)"
  },
  {
    "label": "StopWatching()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopWatching()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (private : # if)",
    "insertText": "BUILDFLAG(IS_WIN) void OnObjectSignaled(HANDLE h)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (win::ScopedHandle duplicated_event_handle_ ; win::ObjectWatcher watcher_ ; EventCallback callback_ ; raw_ptr<WaitableEvent,DegradeToNoOpWhenMTE> event_ = nullptr ; # elif)",
    "insertText": "BUILDFLAG(IS_APPLE) void InvokeCallback()"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (OnceClosure callback_ ; scoped_refptr<WaitableEvent::ReceiveRight> receive_right_ ; ScopedDispatchObject<dispatch_source_t> source_ ; WeakPtrFactory<WaitableEventWatcher> weak_ptr_factory_ ; # else scoped_refptr<Flag> cancel_flag_ ; raw_ptr<AsyncWaiter,DanglingUntriagedDegradeToNoOpWhenMTE> waiter_ = nullptr ; scoped_refptr<WaitableEvent::WaitableEventKernel> kernel_ ;)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]