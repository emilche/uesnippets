[
  {
    "label": "Syntax",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Syntax"
  },
  {
    "label": "ShaderGraphEdge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderGraphEdge"
  },
  {
    "label": "ShaderGraphEdgeIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderGraphEdgeIterator"
  },
  {
    "label": "GenOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "GenOptions"
  },
  {
    "label": "ShaderGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ShaderGraph"
  },
  {
    "label": "MX_GENSHADER_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MX_GENSHADER_API"
  },
  {
    "label": "ShaderGraph()",
    "kind": "Method",
    "detail": "Function (# ifndef MATERIALX_SHADERGRAPH_H # define MATERIALX_SHADERGRAPH_H # include<MaterialXGenShader / Export . h> # include<MaterialXGenShader / ColorManagementSystem . h> # include<MaterialXGenShader / ShaderNode . h> # include<MaterialXGenShader / Syntax . h> # include<MaterialXGenShader / TypeDesc . h> # include<MaterialXGenShader / UnitSystem . h> # include<MaterialXCore / Document . h> # include<MaterialXCore / Node . h> MATERIALX_NAMESPACE_BEGIN class Syntax ; class ShaderGraphEdge ; class ShaderGraphEdgeIterator ; class GenOptions ; using ShaderGraphInputSocket = ShaderOutput ; using ShaderGraphOutputSocket = ShaderInput ; using ShaderGraphPtr = shared_ptr<class ShaderGraph> ; class ShaderGraph : public ShaderNode { public :)",
    "insertText": "ShaderGraph(const ShaderGraph* parent, const string& name, ConstDocumentPtr document, const StringSet& reservedWords)"
  },
  {
    "label": "ShaderGraph()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ShaderGraph()"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (} ShaderGraphPtr)",
    "insertText": "create(const ShaderGraph* parent, const string& name, ElementPtr element, GenContext& context)"
  },
  {
    "label": "create()",
    "kind": "Method",
    "detail": "Function (ShaderGraphPtr)",
    "insertText": "create(const ShaderGraph* parent, const NodeGraph& nodeGraph, GenContext& context)"
  },
  {
    "label": "isAGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isAGraph()"
  },
  {
    "label": "getNode()",
    "kind": "Method",
    "detail": "Function (const ShaderNode*)",
    "insertText": "getNode(const string& name)"
  },
  {
    "label": "getNodes()",
    "kind": "Method",
    "detail": "Function (const vector<ShaderNode*>&)",
    "insertText": "getNodes()"
  },
  {
    "label": "numOutputSockets()",
    "kind": "Method",
    "detail": "Function (} size_t)",
    "insertText": "numOutputSockets()"
  },
  {
    "label": "getInputSocket()",
    "kind": "Method",
    "detail": "Function (} ShaderGraphInputSocket*)",
    "insertText": "getInputSocket(size_t index)"
  },
  {
    "label": "getOutputSocket()",
    "kind": "Method",
    "detail": "Function (} ShaderGraphOutputSocket*)",
    "insertText": "getOutputSocket(size_t index = 0)"
  },
  {
    "label": "getInputSocket()",
    "kind": "Method",
    "detail": "Function (} ShaderGraphInputSocket*)",
    "insertText": "getInputSocket(const string& name)"
  },
  {
    "label": "getOutputSocket()",
    "kind": "Method",
    "detail": "Function (} ShaderGraphOutputSocket*)",
    "insertText": "getOutputSocket(const string& name)"
  },
  {
    "label": "getInputSockets()",
    "kind": "Method",
    "detail": "Function (} const vector<ShaderGraphInputSocket*>&)",
    "insertText": "getInputSockets()"
  },
  {
    "label": "addInputSocket()",
    "kind": "Method",
    "detail": "Function (ShaderGraphInputSocket*)",
    "insertText": "addInputSocket(const string& name, const TypeDesc* type)"
  },
  {
    "label": "addOutputSocket()",
    "kind": "Method",
    "detail": "Function (ShaderGraphOutputSocket*)",
    "insertText": "addOutputSocket(const string& name, const TypeDesc* type)"
  },
  {
    "label": "traverseUpstream()",
    "kind": "Method",
    "detail": "Function (ShaderGraphEdgeIterator)",
    "insertText": "traverseUpstream(ShaderOutput* output)"
  },
  {
    "label": "getIdentifierMap()",
    "kind": "Method",
    "detail": "Function (IdentifierMap&)",
    "insertText": "getIdentifierMap()"
  },
  {
    "label": "createConnectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "createConnectedNodes(const ElementPtr& downstreamElement, const ElementPtr& upstreamElement, ElementPtr connectingElement, GenContext& context)"
  },
  {
    "label": "addNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNode(ShaderNodePtr node)"
  },
  {
    "label": "addInputSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addInputSockets(const InterfaceElement& elem, GenContext& context)"
  },
  {
    "label": "addOutputSockets()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addOutputSockets(const InterfaceElement& elem)"
  },
  {
    "label": "addUpstreamDependencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addUpstreamDependencies(const Element& root, GenContext& context)"
  },
  {
    "label": "addDefaultGeomNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addDefaultGeomNode(ShaderInput* input, const GeomPropDef& geomprop, GenContext& context)"
  },
  {
    "label": "addColorTransformNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addColorTransformNode(ShaderInput* input, const ColorSpaceTransform& transform, GenContext& context)"
  },
  {
    "label": "addColorTransformNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addColorTransformNode(ShaderOutput* output, const ColorSpaceTransform& transform, GenContext& context)"
  },
  {
    "label": "addUnitTransformNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addUnitTransformNode(ShaderInput* input, const UnitTransform& transform, GenContext& context)"
  },
  {
    "label": "addUnitTransformNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addUnitTransformNode(ShaderOutput* output, const UnitTransform& transform, GenContext& context)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "finalize(GenContext& context)"
  },
  {
    "label": "optimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "optimize(GenContext& context)"
  },
  {
    "label": "bypass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "bypass(GenContext& context, ShaderNode* node, size_t inputIndex, size_t outputIndex = 0)"
  },
  {
    "label": "topologicalSort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "topologicalSort()"
  },
  {
    "label": "calculateScopes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "calculateScopes()"
  },
  {
    "label": "setVariableNames()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setVariableNames(GenContext& context)"
  },
  {
    "label": "populateColorTransformMap()",
    "kind": "Method",
    "detail": "Function (string)",
    "insertText": "populateColorTransformMap(ColorManagementSystemPtr colorManagementSystem, ShaderPort* shaderPort, ValueElementPtr element, const string& targetColorSpace, bool asInput)"
  },
  {
    "label": "populateUnitTransformMap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "populateUnitTransformMap(UnitSystemPtr unitSystem, ShaderPort* shaderPort, ValueElementPtr element, const string& targetUnitSpace, bool asInput)"
  },
  {
    "label": "disconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "disconnect(ShaderNode* node)"
  },
  {
    "label": "ShaderGraphEdge()",
    "kind": "Method",
    "detail": "Function (ConstDocumentPtr _document ; std::unordered_map<string,ShaderNodePtr> _nodeMap ; std::vector<ShaderNode*> _nodeOrder ; IdentifierMap _identifiers ; std::unordered_map<ShaderInput*,ColorSpaceTransform> _inputColorTransformMap ; std::unordered_map<ShaderInput*,UnitTransform> _inputUnitTransformMap ; std::unordered_map<ShaderOutput*,ColorSpaceTransform> _outputColorTransformMap ; std::unordered_map<ShaderOutput*,UnitTransform> _outputUnitTransformMap ; } ; class ShaderGraphEdge { public :)",
    "insertText": "ShaderGraphEdge(ShaderOutput* up, ShaderInput* down) : upstream(up), downstream(down)"
  },
  {
    "label": "ShaderGraphEdgeIterator()",
    "kind": "Method",
    "detail": "Function (} ShaderOutput* upstream ; ShaderInput* downstream ; } ; class ShaderGraphEdgeIterator { public :)",
    "insertText": "ShaderGraphEdgeIterator(ShaderOutput* output)"
  },
  {
    "label": "ShaderGraphEdgeIterator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ShaderGraphEdgeIterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const ShaderGraphEdgeIterator& rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ShaderGraphEdge)",
    "insertText": "operator()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (ShaderGraphEdgeIterator&)",
    "insertText": "begin()"
  },
  {
    "label": "extendPathUpstream()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "extendPathUpstream(ShaderOutput* upstream, ShaderInput* downstream)"
  },
  {
    "label": "returnPathDownstream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "returnPathDownstream(ShaderOutput* upstream)"
  }
]