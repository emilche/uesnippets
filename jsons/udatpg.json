[
  {
    "label": "UDateTimePatternField",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateTimePatternField"
  },
  {
    "label": "UDateTimePGDisplayWidth",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateTimePGDisplayWidth"
  },
  {
    "label": "UDateTimePatternMatchOptions",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateTimePatternMatchOptions"
  },
  {
    "label": "UDateTimePatternConflict",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "UDateTimePatternConflict"
  },
  {
    "label": "UDATPG_MATCH_ALL_FIELDS_LENGTH()",
    "kind": "Method",
    "detail": "Function (# ifndef __UDATPG_H__ # define __UDATPG_H__ # include \" unicode / utypes . h \" # include \" unicode / uenum . h \" # include \" unicode / localpointer . h \" typedef void* UDateTimePatternGenerator ; typedef enum UDateTimePatternField { UDATPG_ERA_FIELD,UDATPG_YEAR_FIELD,UDATPG_QUARTER_FIELD,UDATPG_MONTH_FIELD,UDATPG_WEEK_OF_YEAR_FIELD,UDATPG_WEEK_OF_MONTH_FIELD,UDATPG_WEEKDAY_FIELD,UDATPG_DAY_OF_YEAR_FIELD,UDATPG_DAY_OF_WEEK_IN_MONTH_FIELD,UDATPG_DAY_FIELD,UDATPG_DAYPERIOD_FIELD,UDATPG_HOUR_FIELD,UDATPG_MINUTE_FIELD,UDATPG_SECOND_FIELD,UDATPG_FRACTIONAL_SECOND_FIELD,UDATPG_ZONE_FIELD,UDATPG_FIELD_COUNT } UDateTimePatternField ; typedef enum UDateTimePGDisplayWidth { UDATPG_WIDE,UDATPG_ABBREVIATED,UDATPG_NARROW } UDateTimePGDisplayWidth ; typedef enum UDateTimePatternMatchOptions { UDATPG_MATCH_NO_OPTIONS = 0,UDATPG_MATCH_HOUR_FIELD_LENGTH = 1<<UDATPG_HOUR_FIELD,# ifndef UDATPG_MATCH_MINUTE_FIELD_LENGTH = 1<<UDATPG_MINUTE_FIELD,UDATPG_MATCH_SECOND_FIELD_LENGTH = 1<<UDATPG_SECOND_FIELD,# endif)",
    "insertText": "UDATPG_MATCH_ALL_FIELDS_LENGTH(1 << UDATPG_FIELD_COUNT)"
  },
  {
    "label": "udatpg_open()",
    "kind": "Method",
    "detail": "Function (typedef enum UDateTimePatternConflict { UDATPG_NO_CONFLICT,UDATPG_BASE_CONFLICT,UDATPG_CONFLICT,# ifndef UDATPG_CONFLICT_COUNT # endif } UDateTimePatternConflict ; U_STABLE UDateTimePatternGenerator* U_EXPORT2)",
    "insertText": "udatpg_open(const char *locale, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_openEmpty()",
    "kind": "Method",
    "detail": "Function (U_STABLE UDateTimePatternGenerator* U_EXPORT2)",
    "insertText": "udatpg_openEmpty(UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_close()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "udatpg_close(UDateTimePatternGenerator *dtpg)"
  },
  {
    "label": "U_DEFINE_LOCAL_OPEN_POINTER()",
    "kind": "Method",
    "detail": "Function (# if U_NAMESPACE_BEGIN)",
    "insertText": "U_DEFINE_LOCAL_OPEN_POINTER(LocalUDateTimePatternGeneratorPointer, UDateTimePatternGenerator, udatpg_close)"
  },
  {
    "label": "udatpg_clone()",
    "kind": "Method",
    "detail": "Function (U_NAMESPACE_END # endif U_STABLE UDateTimePatternGenerator* U_EXPORT2)",
    "insertText": "udatpg_clone(const UDateTimePatternGenerator *dtpg, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_getBestPattern()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "udatpg_getBestPattern(UDateTimePatternGenerator *dtpg, const UChar *skeleton, int32_t length, UChar *bestPattern, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_getBestPatternWithOptions()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "udatpg_getBestPatternWithOptions(UDateTimePatternGenerator *dtpg, const UChar *skeleton, int32_t length, UDateTimePatternMatchOptions options, UChar *bestPattern, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_getSkeleton()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "udatpg_getSkeleton(UDateTimePatternGenerator *unusedDtpg, const UChar *pattern, int32_t length, UChar *skeleton, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_getBaseSkeleton()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "udatpg_getBaseSkeleton(UDateTimePatternGenerator *unusedDtpg, const UChar *pattern, int32_t length, UChar *baseSkeleton, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_addPattern()",
    "kind": "Method",
    "detail": "Function (U_STABLE UDateTimePatternConflict U_EXPORT2)",
    "insertText": "udatpg_addPattern(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t patternLength, UBool override, UChar *conflictingPattern, int32_t capacity, int32_t *pLength, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_setAppendItemFormat()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "udatpg_setAppendItemFormat(UDateTimePatternGenerator *dtpg, UDateTimePatternField field, const UChar *value, int32_t length)"
  },
  {
    "label": "udatpg_getAppendItemFormat()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "udatpg_getAppendItemFormat(const UDateTimePatternGenerator *dtpg, UDateTimePatternField field, int32_t *pLength)"
  },
  {
    "label": "udatpg_setAppendItemName()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "udatpg_setAppendItemName(UDateTimePatternGenerator *dtpg, UDateTimePatternField field, const UChar *value, int32_t length)"
  },
  {
    "label": "udatpg_getAppendItemName()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "udatpg_getAppendItemName(const UDateTimePatternGenerator *dtpg, UDateTimePatternField field, int32_t *pLength)"
  },
  {
    "label": "udatpg_getFieldDisplayName()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "udatpg_getFieldDisplayName(const UDateTimePatternGenerator *dtpg, UDateTimePatternField field, UDateTimePGDisplayWidth width, UChar *fieldName, int32_t capacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_setDateTimeFormat()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "udatpg_setDateTimeFormat(const UDateTimePatternGenerator *dtpg, const UChar *dtFormat, int32_t length)"
  },
  {
    "label": "udatpg_getDateTimeFormat()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "udatpg_getDateTimeFormat(const UDateTimePatternGenerator *dtpg, int32_t *pLength)"
  },
  {
    "label": "udatpg_setDecimal()",
    "kind": "Method",
    "detail": "Function (U_STABLE void U_EXPORT2)",
    "insertText": "udatpg_setDecimal(UDateTimePatternGenerator *dtpg, const UChar *decimal, int32_t length)"
  },
  {
    "label": "udatpg_getDecimal()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "udatpg_getDecimal(const UDateTimePatternGenerator *dtpg, int32_t *pLength)"
  },
  {
    "label": "udatpg_replaceFieldTypes()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "udatpg_replaceFieldTypes(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t patternLength, const UChar *skeleton, int32_t skeletonLength, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_replaceFieldTypesWithOptions()",
    "kind": "Method",
    "detail": "Function (U_STABLE int32_t U_EXPORT2)",
    "insertText": "udatpg_replaceFieldTypesWithOptions(UDateTimePatternGenerator *dtpg, const UChar *pattern, int32_t patternLength, const UChar *skeleton, int32_t skeletonLength, UDateTimePatternMatchOptions options, UChar *dest, int32_t destCapacity, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_openSkeletons()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "udatpg_openSkeletons(const UDateTimePatternGenerator *dtpg, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_openBaseSkeletons()",
    "kind": "Method",
    "detail": "Function (U_STABLE UEnumeration* U_EXPORT2)",
    "insertText": "udatpg_openBaseSkeletons(const UDateTimePatternGenerator *dtpg, UErrorCode *pErrorCode)"
  },
  {
    "label": "udatpg_getPatternForSkeleton()",
    "kind": "Method",
    "detail": "Function (U_STABLE const UChar* U_EXPORT2)",
    "insertText": "udatpg_getPatternForSkeleton(const UDateTimePatternGenerator *dtpg, const UChar *skeleton, int32_t skeletonLength, int32_t *pLength)"
  }
]