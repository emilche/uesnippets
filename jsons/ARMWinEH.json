[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RuntimeFunction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RuntimeFunction"
  },
  {
    "label": "EpilogueScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "EpilogueScope"
  },
  {
    "label": "ExceptionDataRecord",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExceptionDataRecord"
  },
  {
    "label": "RuntimeFunction()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_ARMWINEH_H # define LLVM_SUPPORT_ARMWINEH_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / Support / Endian . h \" namespace llvm { namespace ARM { namespace WinEH { enum class RuntimeFunctionFlag { RFF_Unpacked,RFF_Packed,RFF_PackedFragment,RFF_Reserved,} ; enum class ReturnType { RT_POP,RT_B,RT_BW,RT_NoEpilogue,} ; class RuntimeFunction { public : const support::ulittle32_t BeginAddress ; const support::ulittle32_t UnwindData ;)",
    "insertText": "RuntimeFunction(const support::ulittle32_t *Data) : BeginAddress(Data[0]), UnwindData(Data[1])"
  },
  {
    "label": "RuntimeFunction()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RuntimeFunction(const support::ulittle32_t BeginAddress, const support::ulittle32_t UnwindData) : BeginAddress(BeginAddress), UnwindData(UnwindData)"
  },
  {
    "label": "Flag()",
    "kind": "Method",
    "detail": "Function (} RuntimeFunctionFlag)",
    "insertText": "Flag()"
  },
  {
    "label": "ExceptionInformationRVA()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ExceptionInformationRVA()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(Flag() == RuntimeFunctionFlag::RFF_Unpacked && \"unpacked form required for this operation\")"
  },
  {
    "label": "PackedUnwindData()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "PackedUnwindData()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert((Flag() == RuntimeFunctionFlag::RFF_Packed || Flag() == RuntimeFunctionFlag::RFF_PackedFragment) && \"packed form required for this operation\")"
  },
  {
    "label": "FunctionLength()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "FunctionLength()"
  },
  {
    "label": "Ret()",
    "kind": "Method",
    "detail": "Function (} ReturnType)",
    "insertText": "Ret()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(((UnwindData & 0x00006000) || L()) && \"L must be set to 1\")"
  },
  {
    "label": "H()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "H()"
  },
  {
    "label": "Reg()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "Reg()"
  },
  {
    "label": "R()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "R()"
  },
  {
    "label": "L()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "L()"
  },
  {
    "label": "C()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "C()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(((~UnwindData & 0x00200000) || L()) && \"L flag must be set, chaining requires r11 and LR\")"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(((~UnwindData & 0x00200000) || (Reg() < 7) || R()) && \"r11 must not be included in Reg; C implies r11\")"
  },
  {
    "label": "StackAdjust()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "StackAdjust()"
  },
  {
    "label": "PrologueFolding()",
    "kind": "Method",
    "detail": "Function (} } ; bool)",
    "insertText": "PrologueFolding(const RuntimeFunction &RF)"
  },
  {
    "label": "EpilogueFolding()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "EpilogueFolding(const RuntimeFunction &RF)"
  },
  {
    "label": "StackAdjustment()",
    "kind": "Method",
    "detail": "Function (} uint16_t)",
    "insertText": "StackAdjustment(const RuntimeFunction &RF)"
  },
  {
    "label": "EpilogueScope()",
    "kind": "Method",
    "detail": "Function (struct EpilogueScope { const support::ulittle32_t ES ;)",
    "insertText": "EpilogueScope(const support::ulittle32_t Data) : ES(Data)"
  },
  {
    "label": "EpilogueStartOffset()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "EpilogueStartOffset()"
  },
  {
    "label": "Res()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "Res()"
  },
  {
    "label": "Condition()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "Condition()"
  },
  {
    "label": "EpilogueStartIndex()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "EpilogueStartIndex()"
  },
  {
    "label": "HeaderWords()",
    "kind": "Method",
    "detail": "Function (} } ; struct ExceptionDataRecord ; size_t)",
    "insertText": "HeaderWords(const ExceptionDataRecord &XR)"
  },
  {
    "label": "ExceptionDataRecord()",
    "kind": "Method",
    "detail": "Function (struct ExceptionDataRecord { const support::ulittle32_t* Data ;)",
    "insertText": "ExceptionDataRecord(const support::ulittle32_t *Data) : Data(Data)"
  },
  {
    "label": "Vers()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "Vers()"
  },
  {
    "label": "X()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "X()"
  },
  {
    "label": "E()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "E()"
  },
  {
    "label": "F()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "F()"
  },
  {
    "label": "EpilogueCount()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "EpilogueCount()"
  },
  {
    "label": "EpilogueScopes()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<support::ulittle32_t>)",
    "insertText": "EpilogueScopes()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(E() == 0 && \"epilogue scopes are only present when the E bit is 0\")"
  },
  {
    "label": "HeaderWords()",
    "kind": "Method",
    "detail": "Function (size_t Offset =)",
    "insertText": "HeaderWords(*this)"
  },
  {
    "label": "UnwindByteCode()",
    "kind": "Method",
    "detail": "Function (} ArrayRef<uint8_t>)",
    "insertText": "UnwindByteCode()"
  },
  {
    "label": "HeaderWords()",
    "kind": "Method",
    "detail": "Function (const size_t Offset =)",
    "insertText": "HeaderWords(*this) + (E() ? 0 : EpilogueCount())"
  },
  {
    "label": "uint8_t()",
    "kind": "Method",
    "detail": "Function (const uint8_t* ByteCode = reinterpret_cast<const)",
    "insertText": "uint8_t(&Data[Offset])"
  },
  {
    "label": "ExceptionHandlerRVA()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ExceptionHandlerRVA()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(X() && \"Exception Handler RVA is only valid if the X bit is set\")"
  },
  {
    "label": "ExceptionHandlerParameter()",
    "kind": "Method",
    "detail": "Function (} uint32_t)",
    "insertText": "ExceptionHandlerParameter()"
  }
]