[
  {
    "label": "FJsonObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FJsonObject"
  },
  {
    "label": "FSceneViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewport"
  },
  {
    "label": "FCachedMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCachedMetrics"
  },
  {
    "label": "UMovieSceneCapture",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneCapture"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FFixedTimeStepCaptureStrategy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFixedTimeStepCaptureStrategy"
  },
  {
    "label": "FRealTimeCaptureStrategy",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRealTimeCaptureStrategy"
  },
  {
    "label": "FCachedMetrics()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / Object . h \" # include \" UObject / ScriptInterface . h \" # include \" MovieSceneCaptureProtocolBase . h \" # include \" MovieSceneCaptureHandle . h \" # include \" MovieSceneCaptureSettings . h \" # include \" IMovieSceneCapture . h \" # include \" Scalability . h \" # include \" UObject / SoftObjectPath . h \" # include \" MovieSceneCapture . generated . h \" class FJsonObject ; class FSceneViewport ; struct FCachedMetrics {)",
    "insertText": "FCachedMetrics() : Width(0), Height(0), Frame(0), ElapsedSeconds(0.f), PreviousFrame(INDEX_NONE)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} int32 Width,Height ; int32 Frame ; float ElapsedSeconds ; int32 PreviousFrame ; } ;)",
    "insertText": "UCLASS(config=EditorPerProjectUserSettings, PerObjectConfig, BlueprintType, MinimalAPI)"
  },
  {
    "label": "UMovieSceneCapture()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UMovieSceneCapture(const FObjectInitializer& Initializer)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "PostInitProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostInitProperties()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Initialize(TSharedPtr<FSceneViewport> InSceneViewport, int32 PIEInstance = -1)"
  },
  {
    "label": "StartCapturing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCapturing()"
  },
  {
    "label": "StartCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartCapture()"
  },
  {
    "label": "Close()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Close()"
  },
  {
    "label": "Finalize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Finalize()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} FMovieSceneCaptureHandle)",
    "insertText": "GetHandle()"
  },
  {
    "label": "SaveToConfig()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveToConfig()"
  },
  {
    "label": "SerializeJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SerializeJson(FJsonObject& Object)"
  },
  {
    "label": "DeserializeJson()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeserializeJson(const FJsonObject& Object)"
  },
  {
    "label": "SerializeAdditionalJson()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SerializeAdditionalJson(FJsonObject& Object)"
  },
  {
    "label": "DeserializeAdditionalJson()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DeserializeAdditionalJson(const FJsonObject& Object)"
  },
  {
    "label": "IsAudioPassIfNeeded()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAudioPassIfNeeded()"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_EVENT(UMovieSceneCapture, FOnCaptureFinished)"
  },
  {
    "label": "OnCaptureFinished()",
    "kind": "Method",
    "detail": "Function (FOnCaptureFinished&)",
    "insertText": "OnCaptureFinished()"
  },
  {
    "label": "StartWarmup()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "StartWarmup()"
  },
  {
    "label": "CaptureThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureThisFrame(float DeltaSeconds)"
  },
  {
    "label": "FinalizeWhenReady()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FinalizeWhenReady()"
  },
  {
    "label": "ShouldFinalize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFinalize()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "Tick(float DeltaSeconds)"
  },
  {
    "label": "ResolveFileFormat()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ResolveFileFormat(const FString& Format, const FFrameMetrics& FrameMetrics)"
  },
  {
    "label": "GetCaptureStrategy()",
    "kind": "Method",
    "detail": "Function (} const ICaptureStrategy&)",
    "insertText": "GetCaptureStrategy()"
  },
  {
    "label": "InitializeCaptureProtocols()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeCaptureProtocols()"
  },
  {
    "label": "ForciblyReinitializeCaptureProtocols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForciblyReinitializeCaptureProtocols()"
  },
  {
    "label": "OnTick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnTick(float DeltaSeconds)"
  },
  {
    "label": "CaptureThisFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CaptureThisFrame(DeltaSeconds)"
  },
  {
    "label": "PostEditChangeProperty()",
    "kind": "Method",
    "detail": "Function (} protected : # if WITH_EDITOR void)",
    "insertText": "PostEditChangeProperty(struct FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "FFixedTimeStepCaptureStrategy()",
    "kind": "Method",
    "detail": "Function (# endif protected : TSharedPtr<ICaptureStrategy> CaptureStrategy ; TOptional<FCaptureProtocolInitSettings> InitSettings ; bool bFinalizeWhenReady ; FMovieSceneCaptureHandle Handle ; FCachedMetrics CachedMetrics ; TMap<FString,FStringFormatArg> FormatMappings ; bool bCapturing ; bool bIsAudioCapturePass ; int32 FrameNumberOffset ; FOnCaptureFinished OnCaptureFinishedDelegate ; Scalability::FQualityLevels CachedQualityLevels ; } ; struct FFixedTimeStepCaptureStrategy : ICaptureStrategy {)",
    "insertText": "FFixedTimeStepCaptureStrategy(FFrameRate InFrameRate)"
  },
  {
    "label": "OnInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialize()"
  },
  {
    "label": "OnStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStop()"
  },
  {
    "label": "ShouldPresent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPresent(double CurrentTimeSeconds, uint32 FrameIndex)"
  },
  {
    "label": "GetDroppedFrames()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetDroppedFrames(double CurrentTimeSeconds, uint32 FrameIndex)"
  },
  {
    "label": "FRealTimeCaptureStrategy()",
    "kind": "Method",
    "detail": "Function (private : FFrameRate FrameRate ; } ; struct FRealTimeCaptureStrategy : ICaptureStrategy {)",
    "insertText": "FRealTimeCaptureStrategy(FFrameRate InFrameRate)"
  },
  {
    "label": "ShouldSynchronizeFrames()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSynchronizeFrames()"
  }
]