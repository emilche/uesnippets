[
  {
    "label": "FInternetAddr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FInternetAddr"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCookOnTheFlyNetworkServerOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookOnTheFlyNetworkServerOptions"
  },
  {
    "label": "ICookOnTheFlyClientConnection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyClientConnection"
  },
  {
    "label": "ICookOnTheFlyNetworkServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyNetworkServer"
  },
  {
    "label": "ICookOnTheFlyNetworkServerModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyNetworkServerModule"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Modules / ModuleInterface . h \" # include \" Async / Future . h \" # include \" Misc / Timespan . h \" # include \" Serialization / MemoryReader . h \" # include \" Serialization / MemoryWriter . h \" # include \" CookOnTheFly . h \" class FInternetAddr ;)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogCookOnTheFlyNetworkServer, Log, All)"
  },
  {
    "label": "ICookOnTheFlyClientConnection()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace Cook { enum class ECookOnTheFlyNetworkServerProtocol : uint32 { Tcp,Platform } ; struct FCookOnTheFlyNetworkServerOptions { ECookOnTheFlyNetworkServerProtocol Protocol = ECookOnTheFlyNetworkServerProtocol::Tcp ; int32 Port = INDEX_NONE ; TArray<ITargetPlatform*> TargetPlatforms ; } ; class ICookOnTheFlyClientConnection { public : ~)",
    "insertText": "ICookOnTheFlyClientConnection()"
  },
  {
    "label": "GetPlatformName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetPlatformName()"
  },
  {
    "label": "GetTargetPlatform()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform*)",
    "insertText": "GetTargetPlatform()"
  },
  {
    "label": "GetIsSingleThreaded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetIsSingleThreaded()"
  },
  {
    "label": "SendMessage()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SendMessage(const FCookOnTheFlyMessage& Message)"
  },
  {
    "label": "SetZenInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetZenInfo(const FString& InProjectId, const FString& InOplogId, const FString& InHostName, uint16 InHostPort)"
  },
  {
    "label": "ICookOnTheFlyNetworkServer()",
    "kind": "Method",
    "detail": "Function (} ; class ICookOnTheFlyNetworkServer { public : ~)",
    "insertText": "ICookOnTheFlyNetworkServer()"
  },
  {
    "label": "DECLARE_EVENT_OneParam()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DECLARE_EVENT_OneParam(ICookOnTheFlyNetworkServer, FClientConnectionEvent, ICookOnTheFlyClientConnection&)"
  },
  {
    "label": "OnClientConnected()",
    "kind": "Method",
    "detail": "Function (FClientConnectionEvent&)",
    "insertText": "OnClientConnected()"
  },
  {
    "label": "OnClientDisconnected()",
    "kind": "Method",
    "detail": "Function (FClientConnectionEvent&)",
    "insertText": "OnClientDisconnected()"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE_RetVal_TwoParams(bool, FHandleRequestDelegate, ICookOnTheFlyClientConnection&, const FCookOnTheFlyRequest&)"
  },
  {
    "label": "OnRequest()",
    "kind": "Method",
    "detail": "Function (FHandleRequestDelegate&)",
    "insertText": "OnRequest(ECookOnTheFlyMessage MessageType)"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Start()"
  },
  {
    "label": "IsReadyToAcceptConnections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyToAcceptConnections(void)"
  },
  {
    "label": "GetAddressList()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetAddressList(TArray<TSharedPtr<FInternetAddr>>& OutAddresses)"
  },
  {
    "label": "GetSupportedProtocol()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetSupportedProtocol()"
  },
  {
    "label": "NumConnections()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "NumConnections()"
  },
  {
    "label": "ICookOnTheFlyNetworkServerModule()",
    "kind": "Method",
    "detail": "Function (} ; class ICookOnTheFlyNetworkServerModule : public IModuleInterface { public : ~)",
    "insertText": "ICookOnTheFlyNetworkServerModule()"
  },
  {
    "label": "CreateServer()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<ICookOnTheFlyNetworkServer>)",
    "insertText": "CreateServer(const FCookOnTheFlyNetworkServerOptions& Options)"
  }
]