[
  {
    "label": "FArchiveFieldName",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FArchiveFieldName"
  },
  {
    "label": "TNamedValue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNamedValue"
  },
  {
    "label": "TNamedAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TNamedAttribute"
  },
  {
    "label": "TOptionalNamedAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TOptionalNamedAttribute"
  },
  {
    "label": "FArchiveFieldName()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Templates / Identity . h \" struct FArchiveFieldName { # if WITH_TEXT_ARCHIVE_SUPPORT const TCHAR* Name ; # endif)",
    "insertText": "FArchiveFieldName(const TCHAR* InName) #if WITH_TEXT_ARCHIVE_SUPPORT : Name(InName)"
  },
  {
    "label": "MakeNamedValue()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE::StructuredArchive::Private { template<T> struct TNamedValue { FArchiveFieldName Name ; T& Value ; } ; template<T> struct TNamedAttribute { FArchiveFieldName Name ; T& Value ; } ; template<T> struct TOptionalNamedAttribute { FArchiveFieldName Name ; T& Value ; const T& Default ; } ; template<T> TNamedValue<T>)",
    "insertText": "MakeNamedValue(FArchiveFieldName Name, T& Value)"
  }
]