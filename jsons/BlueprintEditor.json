[
  {
    "label": "AActor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AActor"
  },
  {
    "label": "FBlueprintEditorToolbar",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintEditorToolbar"
  },
  {
    "label": "FBlueprintNamespaceHelper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FBlueprintNamespaceHelper"
  },
  {
    "label": "FEditorViewportSelectability",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportSelectability"
  },
  {
    "label": "FEditorViewportSelectabilityBridge",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEditorViewportSelectabilityBridge"
  },
  {
    "label": "FProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FProperty"
  },
  {
    "label": "FReferenceCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FReferenceCollector"
  },
  {
    "label": "FSCSEditorTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSCSEditorTreeNode"
  },
  {
    "label": "FSubobjectEditorTreeNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSubobjectEditorTreeNode"
  },
  {
    "label": "FUICommandList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUICommandList"
  },
  {
    "label": "IMessageLogListing",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageLogListing"
  },
  {
    "label": "INameValidatorInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "INameValidatorInterface"
  },
  {
    "label": "ISCSEditorCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISCSEditorCustomization"
  },
  {
    "label": "SBlueprintBookmarks",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlueprintBookmarks"
  },
  {
    "label": "SBlueprintPalette",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SBlueprintPalette"
  },
  {
    "label": "SDockTab",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SDockTab"
  },
  {
    "label": "SFindInBlueprints",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SFindInBlueprints"
  },
  {
    "label": "SKismetInspector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SKismetInspector"
  },
  {
    "label": "SMyBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMyBlueprint"
  },
  {
    "label": "SReplaceNodeReferences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SReplaceNodeReferences"
  },
  {
    "label": "SSCSEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSCSEditor"
  },
  {
    "label": "SSCSEditorViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSCSEditorViewport"
  },
  {
    "label": "SSubobjectEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubobjectEditor"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "UActorComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UActorComponent"
  },
  {
    "label": "UBlueprintEditorOptions",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintEditorOptions"
  },
  {
    "label": "UBlueprintEditorProjectSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintEditorProjectSettings"
  },
  {
    "label": "UBlueprintEditorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprintEditorSettings"
  },
  {
    "label": "UClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UClass"
  },
  {
    "label": "UEdGraph",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraph"
  },
  {
    "label": "UEdGraphNode",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphNode"
  },
  {
    "label": "UEdGraphSchema",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphSchema"
  },
  {
    "label": "UK2Node_Event",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_Event"
  },
  {
    "label": "UK2Node_FunctionEntry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_FunctionEntry"
  },
  {
    "label": "ULevelStreaming",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevelStreaming"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USceneComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USceneComponent"
  },
  {
    "label": "UStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStruct"
  },
  {
    "label": "UToolMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UToolMenu"
  },
  {
    "label": "UUserDefinedEnum",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserDefinedEnum"
  },
  {
    "label": "UUserDefinedStruct",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserDefinedStruct"
  },
  {
    "label": "FEdGraphSchemaAction",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEdGraphSchemaAction"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FSlateBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateBrush"
  },
  {
    "label": "FSlateColor",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateColor"
  },
  {
    "label": "FSubobjectData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubobjectData"
  },
  {
    "label": "FToolMenuContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FToolMenuContext"
  },
  {
    "label": "Rect",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Rect"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FCustomDebugObject",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCustomDebugObject"
  },
  {
    "label": "KISMET_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "KISMET_API"
  },
  {
    "label": "FAssetEditorToolkit",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAssetEditorToolkit"
  },
  {
    "label": "FComponentEventConstructionData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FComponentEventConstructionData"
  },
  {
    "label": "FDisallowedPinConnection",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDisallowedPinConnection"
  },
  {
    "label": "FTabManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabManager"
  },
  {
    "label": "IToolkitHost",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IToolkitHost"
  },
  {
    "label": "UBlueprint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UBlueprint"
  },
  {
    "label": "UEdGraphPin",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UEdGraphPin"
  },
  {
    "label": "IClassViewerFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IClassViewerFilter"
  },
  {
    "label": "IPinTypeSelectorFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IPinTypeSelectorFilter"
  },
  {
    "label": "FTokenizedMessage",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTokenizedMessage"
  },
  {
    "label": "FSlateRect",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateRect"
  },
  {
    "label": "IMessageToken",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMessageToken"
  },
  {
    "label": "SGraphEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SGraphEditor"
  },
  {
    "label": "ECreatedDocumentType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ECreatedDocumentType"
  },
  {
    "label": "FDetailsViewObjectFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDetailsViewObjectFilter"
  },
  {
    "label": "IDetailRootObjectCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDetailRootObjectCustomization"
  },
  {
    "label": "ISCSEditorUICustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISCSEditorUICustomization"
  },
  {
    "label": "FImportNamespaceExParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FImportNamespaceExParameters"
  },
  {
    "label": "UK2Node",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node"
  },
  {
    "label": "UK2Node_CustomEvent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_CustomEvent"
  },
  {
    "label": "UK2Node_EditablePinBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UK2Node_EditablePinBase"
  },
  {
    "label": "FTabInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTabInfo"
  },
  {
    "label": "FTransaction",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTransaction"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "IMenu",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IMenu"
  },
  {
    "label": "FAnalyticsStatistics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsStatistics"
  },
  {
    "label": "FNodeDetails",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FNodeDetails"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FCustomDebugObject()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" BlueprintEditorModule . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" EdGraph / EdGraphNode . h \" # include \" EdGraph / EdGraphPin . h \" # include \" EdGraph / EdGraphSchema . h \" # include \" EditorUndoClient . h \" # include \" Engine / Blueprint . h \" # include \" FindInBlueprints . h \" # include \" Framework / Application / IMenu . h \" # include \" Framework / Commands / InputChord . h \" # include \" GraphEditor . h \" # include \" Input / Reply . h \" # include \" Internationalization / Internationalization . h \" # include \" Internationalization / Text . h \" # include \" Layout / Visibility . h \" # include \" Math / Color . h \" # include \" Math / Vector2D . h \" # include \" Merge . h \" # include \" Misc / Guid . h \" # include \" Misc / NotifyHook . h \" # include \" Misc / Optional . h \" # include \" PreviewScene . h \" # include \" SKismetInspector . h \" # include \" SourceControlOperations . h \" # include \" Stats / Stats . h \" # include \" Stats / Stats2 . h \" # include \" Styling / SlateBrush . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / UnrealTemplate . h \" # include \" Tickable . h \" # include \" TickableEditorObject . h \" # include \" Toolkits / AssetEditorToolkit . h \" # include \" Toolkits / IToolkit . h \" # include \" Toolkits / IToolkitHost . h \" # include \" Types / SlateEnums . h \" # include \" UObject / GCObject . h \" # include \" UObject / NameTypes . h \" # include \" UObject / SoftObjectPath . h \" # include \" UObject / WeakObjectPtr . h \" # include \" UObject / WeakObjectPtrTemplates . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / SWindow . h \" # include \" WorkflowOrientedApp / WorkflowTabFactory . h \" # include \" WorkflowOrientedApp / WorkflowTabManager . h \" class AActor ; class FBlueprintEditorToolbar ; class FBlueprintNamespaceHelper ; class FEditorViewportSelectability ; class FEditorViewportSelectabilityBridge ; class FProperty ; class FReferenceCollector ; class FSCSEditorTreeNode ; class FSubobjectEditorTreeNode ; class FUICommandList ; class IMessageLogListing ; class INameValidatorInterface ; class ISCSEditorCustomization ; class SBlueprintBookmarks ; class SBlueprintPalette ; class SDockTab ; class SFindInBlueprints ; class SKismetInspector ; class SMyBlueprint ; class SReplaceNodeReferences ; class SSCSEditor ; class SSCSEditorViewport ; class SSubobjectEditor ; class SWidget ; class UActorComponent ; class UBlueprintEditorOptions ; class UBlueprintEditorProjectSettings ; class UBlueprintEditorSettings ; class UClass ; class UEdGraph ; class UEdGraphNode ; class UEdGraphSchema ; class UK2Node_Event ; class UK2Node_FunctionEntry ; class ULevelStreaming ; class UObject ; class USceneComponent ; class UStruct ; class UToolMenu ; class UToolMenu ; class UUserDefinedEnum ; class UUserDefinedStruct ; struct FEdGraphSchemaAction ; struct FPropertyChangedEvent ; struct FSlateBrush ; struct FSlateColor ; struct FSubobjectData ; struct FToolMenuContext ; struct Rect ; namespace NodeSectionID { enum Type { NONE = 0,GRAPH,ANIMGRAPH,ANIMLAYER,FUNCTION,FUNCTION_OVERRIDABLE,INTERFACE,MACRO,VARIABLE,COMPONENT,DELEGATE,USER_ENUM,LOCAL_VARIABLE,USER_STRUCT,USER_SORTED } ; } ; struct FCustomDebugObject { public : UObject* Object ; FString NameOverride ; public :)",
    "insertText": "FCustomDebugObject() : Object(nullptr)"
  },
  {
    "label": "FCustomDebugObject()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FCustomDebugObject(UObject* InObject, const FString& InLabel) : Object(InObject) , NameOverride(InLabel)"
  },
  {
    "label": "FSelectionDetailsSummoner()",
    "kind": "Method",
    "detail": "Function (} } ; # define LOCTEXT_NAMESPACE \" BlueprintEditor \" struct FSelectionDetailsSummoner : public FWorkflowTabFactory { public :)",
    "insertText": "FSelectionDetailsSummoner(TSharedPtr<class FAssetEditorToolkit> InHostingApp)"
  },
  {
    "label": "CreateTabBody()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateTabBody(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "SpawnTab()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SDockTab>)",
    "insertText": "SpawnTab(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "GetTabToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTabToolTipText(const FWorkflowTabSpawnInfo& Info)"
  },
  {
    "label": "DECLARE_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (} } ; struct FComponentEventConstructionData { FName VariableName ; TWeakObjectPtr<UObject> Component ; } ;)",
    "insertText": "DECLARE_DELEGATE_OneParam(FGetSelectedObjectsDelegate, TArray<FComponentEventConstructionData>&)"
  },
  {
    "label": "DECLARE_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DELEGATE(FNodeCreationAnalytic)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (namespace ENodeCreateAction { enum Type { MyBlueprintDragPlacement,PaletteDragPlacement,GraphContext,PinContext,Keymap } ; } class FBlueprintEditor : public IBlueprintEditor,public FGCObject,public FNotifyHook,public FTickableEditorObject,public FEditorUndoClient,public FNoncopyable {)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnSetPinVisibility, SGraphEditor::EPinVisibility)"
  },
  {
    "label": "RegisterTabSpawners()",
    "kind": "Method",
    "detail": "Function (struct FDisallowedPinConnection { FName PinTypeCategoryA ; FName PinTypeCategoryB ; uint8 bPinIsArrayA : 1 ; uint8 bPinIsReferenceA : 1 ; uint8 bPinIsWeakPointerA : 1 ; uint8 bPinIsArrayB : 1 ; uint8 bPinIsReferenceB : 1 ; uint8 bPinIsWeakPointerB : 1 ; } ; public : void)",
    "insertText": "RegisterTabSpawners(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnModeSet, FName)"
  },
  {
    "label": "OnModeSet()",
    "kind": "Method",
    "detail": "Function (FOnModeSet&)",
    "insertText": "OnModeSet()"
  },
  {
    "label": "InitBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "InitBlueprintEditor(const EToolkitMode::Type Mode, const TSharedPtr< class IToolkitHost >& InitToolkitHost, const TArray<class UBlueprint*>& InBlueprints, bool bShouldOpenInDefaultsMode)"
  },
  {
    "label": "OnRequestClose()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "OnRequestClose(EAssetEditorCloseReason InCloseReason)"
  },
  {
    "label": "OnClose()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnClose()"
  },
  {
    "label": "GetToolkitContextFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitContextFName()"
  },
  {
    "label": "GetToolkitFName()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetToolkitFName()"
  },
  {
    "label": "GetBaseToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetBaseToolkitName()"
  },
  {
    "label": "GetToolkitName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolkitName()"
  },
  {
    "label": "GetToolkitToolTipText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetToolkitToolTipText()"
  },
  {
    "label": "GetWorldCentricTabPrefix()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetWorldCentricTabPrefix()"
  },
  {
    "label": "GetWorldCentricTabColorScale()",
    "kind": "Method",
    "detail": "Function (FLinearColor)",
    "insertText": "GetWorldCentricTabColorScale()"
  },
  {
    "label": "IsBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBlueprintEditor()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "RefreshEditors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshEditors(ERefreshBlueprintEditorReason::Type Reason = ERefreshBlueprintEditorReason::UnknownReason)"
  },
  {
    "label": "RefreshMyBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshMyBlueprint()"
  },
  {
    "label": "RefreshInspector()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshInspector()"
  },
  {
    "label": "AddToSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddToSelection(UEdGraphNode* InNode)"
  },
  {
    "label": "JumpToHyperlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToHyperlink(const UObject* ObjectReference, bool bRequestRename = false)"
  },
  {
    "label": "JumpToPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToPin(const class UEdGraphPin* Pin)"
  },
  {
    "label": "SummonSearchUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonSearchUI(bool bSetFindWithinBlueprint, FString NewSearchTerms = FString(), bool bSelectFirstResult = false)"
  },
  {
    "label": "SummonFindAndReplaceUI()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SummonFindAndReplaceUI()"
  },
  {
    "label": "GetFocusedGraph()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "GetFocusedGraph()"
  },
  {
    "label": "OpenGraphAndBringToFront()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SGraphEditor>)",
    "insertText": "OpenGraphAndBringToFront(UEdGraph* Graph, bool bSetFocus = true)"
  },
  {
    "label": "FindAndSelectSubobjectEditorTreeNode()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSubobjectEditorTreeNode>)",
    "insertText": "FindAndSelectSubobjectEditorTreeNode(const UActorComponent* InComponent, bool IsCntrlDown)"
  },
  {
    "label": "GetNumberOfSelectedNodes()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumberOfSelectedNodes()"
  },
  {
    "label": "AnalyticsTrackNodeEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyticsTrackNodeEvent(UBlueprint* Blueprint, UEdGraphNode *GraphNode, bool bNodeDelete = false)"
  },
  {
    "label": "AnalyticsTrackCompileEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AnalyticsTrackCompileEvent(UBlueprint* Blueprint, int32 NumErrors, int32 NumWarnings)"
  },
  {
    "label": "GetImportedClassViewerFilter()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class IClassViewerFilter>)",
    "insertText": "GetImportedClassViewerFilter()"
  },
  {
    "label": "IsNonImportedObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonImportedObject(const UObject* InObject)"
  },
  {
    "label": "IsNonImportedObject()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNonImportedObject(const FSoftObjectPath& InObject)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "GetTickableTickType()",
    "kind": "Method",
    "detail": "Function (ETickableTickType)",
    "insertText": "GetTickableTickType()"
  },
  {
    "label": "FBlueprintEditor()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "FBlueprintEditor()"
  },
  {
    "label": "InitToolMenuContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitToolMenuContext(FToolMenuContext& MenuContext)"
  },
  {
    "label": "IsNodeTitleVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNodeTitleVisible(const UEdGraphNode* Node, bool bRequestRename)"
  },
  {
    "label": "JumpToNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "JumpToNode(const class UEdGraphNode* Node, bool bRequestRename = false)"
  },
  {
    "label": "GetBlueprintObj()",
    "kind": "Method",
    "detail": "Function (UBlueprint*)",
    "insertText": "GetBlueprintObj()"
  },
  {
    "label": "IsEditingSingleBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditingSingleBlueprint()"
  },
  {
    "label": "SetKeyboardFocus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetKeyboardFocus()"
  },
  {
    "label": "GetInspector()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SKismetInspector>)",
    "insertText": "GetInspector()"
  },
  {
    "label": "GetDefaultEditor()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SKismetInspector>)",
    "insertText": "GetDefaultEditor()"
  },
  {
    "label": "GetPalette()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SBlueprintPalette>)",
    "insertText": "GetPalette()"
  },
  {
    "label": "GetBookmarksWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SBlueprintBookmarks>)",
    "insertText": "GetBookmarksWidget()"
  },
  {
    "label": "GetCompilerResults()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SWidget>)",
    "insertText": "GetCompilerResults()"
  },
  {
    "label": "GetFindResults()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<SFindInBlueprints>)",
    "insertText": "GetFindResults()"
  },
  {
    "label": "GetPreviewScene()",
    "kind": "Method",
    "detail": "Function (FPreviewScene*)",
    "insertText": "GetPreviewScene()"
  },
  {
    "label": "DestroyPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DestroyPreview()"
  },
  {
    "label": "GetToolbarBuilder()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class FBlueprintEditorToolbar>)",
    "insertText": "GetToolbarBuilder()"
  },
  {
    "label": "CanAccessComponentsMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAccessComponentsMode()"
  },
  {
    "label": "IsEditorClosing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorClosing()"
  },
  {
    "label": "RegisterToolbarTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterToolbarTab(const TSharedRef<class FTabManager>& TabManager)"
  },
  {
    "label": "LogSimpleMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogSimpleMessage(const FText& MessageText)"
  },
  {
    "label": "DumpMessagesToCompilerLog()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpMessagesToCompilerLog(const TArray<TSharedRef<class FTokenizedMessage>>& Messages, bool bForceMessageDisplay)"
  },
  {
    "label": "IsPlayInEditorActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPlayInEditorActive()"
  },
  {
    "label": "GetSelectedNodes()",
    "kind": "Method",
    "detail": "Function (FGraphPanelSelectionSet)",
    "insertText": "GetSelectedNodes()"
  },
  {
    "label": "GetSingleSelectedNode()",
    "kind": "Method",
    "detail": "Function (UEdGraphNode*)",
    "insertText": "GetSingleSelectedNode()"
  },
  {
    "label": "SaveEditedObjectState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveEditedObjectState()"
  },
  {
    "label": "RestoreEditedObjectState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RestoreEditedObjectState()"
  },
  {
    "label": "RequestSaveEditedObjectState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSaveEditedObjectState()"
  },
  {
    "label": "GetBoundsForNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBoundsForNode(const UEdGraphNode* InNode, class FSlateRect& OutRect, float InPadding)"
  },
  {
    "label": "GetViewBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewBookmark(FGuid& BookmarkId)"
  },
  {
    "label": "GetViewLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetViewLocation(FVector2D& Location, float& ZoomAmount)"
  },
  {
    "label": "SetViewLocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetViewLocation(const FVector2D& Location, float ZoomAmount, const FGuid& BookmarkId = FGuid())"
  },
  {
    "label": "IsEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditable(UEdGraph* InGraph)"
  },
  {
    "label": "IsGraphReadOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphReadOnly(UEdGraph* InGraph)"
  },
  {
    "label": "GetInstructionTextOpacity()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInstructionTextOpacity(UEdGraph* InGraph)"
  },
  {
    "label": "InEditingMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InEditingMode()"
  },
  {
    "label": "IsCompilingEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsCompilingEnabled()"
  },
  {
    "label": "IsParentClassABlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParentClassABlueprint()"
  },
  {
    "label": "IsParentClassAnEditableBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParentClassAnEditableBlueprint()"
  },
  {
    "label": "IsParentClassNative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsParentClassNative()"
  },
  {
    "label": "IsNativeParentClassCodeLinkEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsNativeParentClassCodeLinkEnabled()"
  },
  {
    "label": "OnEditParentClassNativeCodeClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditParentClassNativeCodeClicked()"
  },
  {
    "label": "GetTextForNativeParentClassHeaderLink()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetTextForNativeParentClassHeaderLink()"
  },
  {
    "label": "GetNativeParentClassButtonsVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetNativeParentClassButtonsVisibility()"
  },
  {
    "label": "GetParentClassNameVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetParentClassNameVisibility()"
  },
  {
    "label": "GetPIEStatus()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetPIEStatus()"
  },
  {
    "label": "GetGlyphForGraph()",
    "kind": "Method",
    "detail": "Function (const FSlateBrush*)",
    "insertText": "GetGlyphForGraph(const UEdGraph* Graph, bool bInLargeIcon = false)"
  },
  {
    "label": "GetVarIconAndColor()",
    "kind": "Method",
    "detail": "Function (FSlateBrush const*)",
    "insertText": "GetVarIconAndColor(const UStruct* VarScope, FName VarName, FSlateColor& IconColorOut, FSlateBrush const*& SecondaryBrushOut, FSlateColor& SecondaryColorOut)"
  },
  {
    "label": "GetVarIconAndColorFromProperty()",
    "kind": "Method",
    "detail": "Function (FSlateBrush const*)",
    "insertText": "GetVarIconAndColorFromProperty(const FProperty* Property, FSlateColor& IconColorOut, FSlateBrush const*& SecondaryBrushOut, FSlateColor& SecondaryColorOut)"
  },
  {
    "label": "GetVarIconAndColorFromPinType()",
    "kind": "Method",
    "detail": "Function (FSlateBrush const*)",
    "insertText": "GetVarIconAndColorFromPinType(const FEdGraphPinType& PinType, FSlateColor& IconColorOut, FSlateBrush const*& SecondaryBrushOut, FSlateColor& SecondaryColorOut)"
  },
  {
    "label": "IsInAScriptingMode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInAScriptingMode()"
  },
  {
    "label": "Compile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Compile()"
  },
  {
    "label": "IsSaveOnCompileEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSaveOnCompileEnabled()"
  },
  {
    "label": "Compile_OnClickWithReply()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "Compile_OnClickWithReply()"
  },
  {
    "label": "RefreshAllNodes_OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshAllNodes_OnClicked()"
  },
  {
    "label": "IsDebuggerVisible()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "IsDebuggerVisible()"
  },
  {
    "label": "OnActiveTabChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnActiveTabChanged(TSharedPtr<SDockTab> PreviouslyActive, TSharedPtr<SDockTab> NewlyActivated)"
  },
  {
    "label": "LogToken_OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogToken_OnClicked(const class IMessageToken& Token)"
  },
  {
    "label": "FocusInspectorOnGraphSelection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FocusInspectorOnGraphSelection(const TSet<class UObject*>& NewSelection, bool bForceRefresh = false)"
  },
  {
    "label": "VariableListWasUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VariableListWasUpdated()"
  },
  {
    "label": "StartEditingDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StartEditingDefaults(bool bAutoFocus = true, bool bForceRefresh = false)"
  },
  {
    "label": "SetupViewForBlueprintEditingMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupViewForBlueprintEditingMode()"
  },
  {
    "label": "EnsureBlueprintIsUpToDate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnsureBlueprintIsUpToDate(UBlueprint* BlueprintObj)"
  },
  {
    "label": "CommonInitialization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CommonInitialization(const TArray<UBlueprint*>& InitBlueprints, bool bShouldOpenInDefaultsMode)"
  },
  {
    "label": "ShouldLoadBPLibrariesFromAssetRegistry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldLoadBPLibrariesFromAssetRegistry()"
  },
  {
    "label": "OnGraphEditorFocused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphEditorFocused(const TSharedRef<class SGraphEditor>& InGraphEditor)"
  },
  {
    "label": "OnGraphEditorBackgrounded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphEditorBackgrounded(const TSharedRef<SGraphEditor>& InGraphEditor)"
  },
  {
    "label": "EnableSubobjectPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableSubobjectPreview(bool bEnable)"
  },
  {
    "label": "UpdateSubobjectPreview()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSubobjectPreview(bool bUpdateNow = false)"
  },
  {
    "label": "GetSubobjectEditorObjectContext()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetSubobjectEditorObjectContext()"
  },
  {
    "label": "OnSelectionUpdated()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectionUpdated(const TArray<TSharedPtr<class FSubobjectEditorTreeNode>>& SelectedNodes)"
  },
  {
    "label": "OnComponentDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentDoubleClicked(TSharedPtr<class FSubobjectEditorTreeNode> Node)"
  },
  {
    "label": "OnComponentAddedToBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnComponentAddedToBlueprint(const FSubobjectData& NewSubobjectData)"
  },
  {
    "label": "SetPinVisibility()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPinVisibility(SGraphEditor::EPinVisibility Visibility)"
  },
  {
    "label": "GetPinVisibility()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetPinVisibility(SGraphEditor::EPinVisibility Visibility)"
  },
  {
    "label": "ReparentBlueprint_IsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReparentBlueprint_IsVisible()"
  },
  {
    "label": "ReparentBlueprint_NewParentChosen()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReparentBlueprint_NewParentChosen(UClass* ChosenClass)"
  },
  {
    "label": "RenameNewlyAddedAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameNewlyAddedAction(FName InActionName)"
  },
  {
    "label": "OnAddNewVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddNewVariable()"
  },
  {
    "label": "OnAddNewVariable_OnClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnAddNewVariable_OnClick()"
  },
  {
    "label": "CanAddNewLocalVariable()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CanAddNewLocalVariable()"
  },
  {
    "label": "OnAddNewLocalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddNewLocalVariable()"
  },
  {
    "label": "OnPasteNewLocalVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPasteNewLocalVariable(const FBPVariableDescription& VariableDescription)"
  },
  {
    "label": "AddNewFunctionVariant()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddNewFunctionVariant(const UEdGraph* InOriginalFunction)"
  },
  {
    "label": "NewDocument_OnClicked()",
    "kind": "Method",
    "detail": "Function (} enum ECreatedDocumentType { CGT_NewVariable,CGT_NewFunctionGraph,CGT_NewMacroGraph,CGT_NewAnimationLayer,CGT_NewEventGraph,CGT_NewLocalVariable } ; void)",
    "insertText": "NewDocument_OnClicked(ECreatedDocumentType GraphType)"
  },
  {
    "label": "NewDocument_OnClick()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "NewDocument_OnClick(ECreatedDocumentType GraphType)"
  },
  {
    "label": "NewDocument_OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NewDocument_OnClicked(GraphType)"
  },
  {
    "label": "OnAddNewDelegate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnAddNewDelegate()"
  },
  {
    "label": "AddNewDelegateIsVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewDelegateIsVisible()"
  },
  {
    "label": "IsSectionVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSectionVisible(NodeSectionID::Type InSectionID)"
  },
  {
    "label": "NewDocument_GetVisibilityForType()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "NewDocument_GetVisibilityForType(ECreatedDocumentType GraphType)"
  },
  {
    "label": "GetIsContextSensitive()",
    "kind": "Method",
    "detail": "Function (} FName SelectionState_MyBlueprint ; FName SelectionState_Components ; FName SelectionState_Graph ; FName SelectionState_ClassSettings ; FName SelectionState_ClassDefaults ; bool&)",
    "insertText": "GetIsContextSensitive()"
  },
  {
    "label": "ClearSelectionStateFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearSelectionStateFor(FName SelectionOwner)"
  },
  {
    "label": "OnSpawnGraphNodeByShortcut()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnSpawnGraphNodeByShortcut(FInputChord InChord, const FVector2D& InPosition, UEdGraph* InGraph)"
  },
  {
    "label": "DoPromoteToVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoPromoteToVariable(UBlueprint* InBlueprint, UEdGraphPin* InTargetPin, bool bInToMemberVariable, const FVector2D* InOptionalLocation = nullptr)"
  },
  {
    "label": "OnNodeSpawnedByKeymap()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeSpawnedByKeymap()"
  },
  {
    "label": "UpdateNodeCreationStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateNodeCreationStats(const ENodeCreateAction::Type CreateAction)"
  },
  {
    "label": "SetDetailsCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetDetailsCustomization(TSharedPtr<class FDetailsViewObjectFilter> DetailsObjectFilter, TSharedPtr<class IDetailRootObjectCustomization> DetailsRootCustomization)"
  },
  {
    "label": "SetSubobjectEditorUICustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubobjectEditorUICustomization(TSharedPtr<class ISCSEditorUICustomization> SCSEditorUICustomization)"
  },
  {
    "label": "RegisterSCSEditorCustomization()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RegisterSCSEditorCustomization(const FName& InComponentName, TSharedPtr<class ISCSEditorCustomization> InCustomization)"
  },
  {
    "label": "UnregisterSCSEditorCustomization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSCSEditorCustomization(const FName& InComponentName)"
  },
  {
    "label": "CreateMergeToolTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMergeToolTab()"
  },
  {
    "label": "CreateMergeToolTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateMergeToolTab(const UBlueprint* BaseBlueprint, const UBlueprint* RemoteBlueprint, const FOnMergeResolved& ResolutionCallback)"
  },
  {
    "label": "CloseMergeTool()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseMergeTool()"
  },
  {
    "label": "OnGenerateSearchIndexForDebugging()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGenerateSearchIndexForDebugging()"
  },
  {
    "label": "OnDumpCachedIndexDataForBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDumpCachedIndexDataForBlueprint()"
  },
  {
    "label": "CustomizeSubobjectEditor()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<class ISCSEditorCustomization>)",
    "insertText": "CustomizeSubobjectEditor(const USceneComponent* InComponentToCustomize)"
  },
  {
    "label": "GetCustomDebugObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetCustomDebugObjects(TArray<FCustomDebugObject>& DebugList)"
  },
  {
    "label": "OnlyShowCustomDebugObjects()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "OnlyShowCustomDebugObjects()"
  },
  {
    "label": "OnNodeTitleCommitted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnNodeTitleCommitted(const FText& NewText, ETextCommit::Type CommitInfo, UEdGraphNode* NodeBeingChanged)"
  },
  {
    "label": "GetGraphDecorationString()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGraphDecorationString(UEdGraph* InGraph)"
  },
  {
    "label": "GetGraphDisplayName()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetGraphDisplayName(const UEdGraph* Graph)"
  },
  {
    "label": "IsGraphInCurrentBlueprint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGraphInCurrentBlueprint(const UEdGraph* InGraph)"
  },
  {
    "label": "GetContextFromBlueprintType()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "GetContextFromBlueprintType(EBlueprintType InType)"
  },
  {
    "label": "SelectGraphActionItemByName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectGraphActionItemByName(const FName& ItemName, ESelectInfo::Type SelectInfo = ESelectInfo::Direct, int32 SectionId = INDEX_NONE, bool bIsCategory = false)"
  },
  {
    "label": "HandleSetObjectBeingDebugged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleSetObjectBeingDebugged(UObject* InObject)"
  },
  {
    "label": "AddBookmark()",
    "kind": "Method",
    "detail": "Function (} FBPEditorBookmarkNode*)",
    "insertText": "AddBookmark(const FText& DisplayName, const FEditedDocumentInfo& BookmarkInfo, bool bSharedBookmark = false)"
  },
  {
    "label": "RenameBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RenameBookmark(const FGuid& BookmarkNodeId, const FText& NewName)"
  },
  {
    "label": "RemoveBookmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveBookmark(const FGuid& BookmarkNodeId, bool bRefreshUI = true)"
  },
  {
    "label": "GetDefaultSchema()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UEdGraphSchema>)",
    "insertText": "GetDefaultSchema()"
  },
  {
    "label": "ImportNamespace()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ImportNamespace(const FString& InNamespace)"
  },
  {
    "label": "FImportNamespaceExParameters()",
    "kind": "Method",
    "detail": "Function (struct FImportNamespaceExParameters { bool bIsAutoImport ; FSimpleDelegate OnPostImportCallback ; TSet<FString> NamespacesToImport ;)",
    "insertText": "FImportNamespaceExParameters()"
  },
  {
    "label": "ImportNamespaceEx()",
    "kind": "Method",
    "detail": "Function (bIsAutoImport = true ; } } ; void)",
    "insertText": "ImportNamespaceEx(const FImportNamespaceExParameters& InParams)"
  },
  {
    "label": "RemoveNamespace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNamespace(const FString& InNamespace)"
  },
  {
    "label": "SelectLocalVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SelectLocalVariable(const UEdGraph* Graph, const FName& VariableName)"
  },
  {
    "label": "InitalizeExtenders()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "InitalizeExtenders()"
  },
  {
    "label": "RegisterApplicationModes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterApplicationModes(const TArray<UBlueprint*>& InBlueprints, bool bShouldOpenInDefaultsMode, bool bNewlyCreated = false)"
  },
  {
    "label": "RefreshStandAloneDefaultsEditor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RefreshStandAloneDefaultsEditor()"
  },
  {
    "label": "ZoomToWindow_Clicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToWindow_Clicked()"
  },
  {
    "label": "CanZoomToWindow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanZoomToWindow()"
  },
  {
    "label": "ZoomToSelection_Clicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ZoomToSelection_Clicked()"
  },
  {
    "label": "CanZoomToSelection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanZoomToSelection()"
  },
  {
    "label": "NavigateToParentGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateToParentGraph()"
  },
  {
    "label": "NavigateToParentGraphByDoubleClick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateToParentGraphByDoubleClick()"
  },
  {
    "label": "CanNavigateToParentGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNavigateToParentGraph()"
  },
  {
    "label": "NavigateToChildGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateToChildGraph()"
  },
  {
    "label": "CanNavigateToChildGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanNavigateToChildGraph()"
  },
  {
    "label": "GetFindParentClassVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetFindParentClassVisibility()"
  },
  {
    "label": "GetEditParentClassVisibility()",
    "kind": "Method",
    "detail": "Function (EVisibility)",
    "insertText": "GetEditParentClassVisibility()"
  },
  {
    "label": "PostRegenerateMenusAndToolbars()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRegenerateMenusAndToolbars()"
  },
  {
    "label": "GetParentClassNameText()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetParentClassNameText()"
  },
  {
    "label": "OnFindParentClassInContentBrowserClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnFindParentClassInContentBrowserClicked()"
  },
  {
    "label": "OnEditParentClassClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnEditParentClassClicked()"
  },
  {
    "label": "FindInBlueprint_Clicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInBlueprint_Clicked()"
  },
  {
    "label": "IsDetailsPanelEditingGlobalOptions()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDetailsPanelEditingGlobalOptions()"
  },
  {
    "label": "EditGlobalOptions_Clicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditGlobalOptions_Clicked()"
  },
  {
    "label": "IsDetailsPanelEditingClassDefaults()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsDetailsPanelEditingClassDefaults()"
  },
  {
    "label": "EditClassDefaults_Clicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EditClassDefaults_Clicked()"
  },
  {
    "label": "UndoGraphAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UndoGraphAction()"
  },
  {
    "label": "CanUndoGraphAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanUndoGraphAction()"
  },
  {
    "label": "RedoGraphAction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RedoGraphAction()"
  },
  {
    "label": "CanRedoGraphAction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRedoGraphAction()"
  },
  {
    "label": "OnSelectedNodesChangedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedNodesChangedImpl(const TSet<class UObject*>& NewSelection)"
  },
  {
    "label": "OnSelectedNodesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedNodesChanged(const TSet<class UObject*>& NewSelection)"
  },
  {
    "label": "OnSelectedNodesChangedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectedNodesChangedImpl(NewSelection)"
  },
  {
    "label": "OnGraphEditorDropActor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnGraphEditorDropActor(const TArray< TWeakObjectPtr<AActor> >& Actors, UEdGraph* Graph, const FVector2D& DropLocation)"
  },
  {
    "label": "OnGraphEditorDropStreamingLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphEditorDropStreamingLevel(const TArray< TWeakObjectPtr<ULevelStreaming> >& Levels, UEdGraph* Graph, const FVector2D& DropLocation)"
  },
  {
    "label": "OnCreateGraphActionMenu()",
    "kind": "Method",
    "detail": "Function (FActionMenuContent)",
    "insertText": "OnCreateGraphActionMenu(UEdGraph* InGraph, const FVector2D& InNodePosition, const TArray<UEdGraphPin*>& InDraggedPins, bool bAutoExpand, SGraphEditor::FActionMenuClosed InOnMenuClosed)"
  },
  {
    "label": "OnGraphActionMenuClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphActionMenuClosed(bool bActionExecuted, bool bContextSensitiveChecked, bool bGraphPinContext)"
  },
  {
    "label": "OnBlueprintChangedImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintChangedImpl(UBlueprint* InBlueprint, bool bIsJustBeingCompiled = false)"
  },
  {
    "label": "OnBlueprintChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintChanged(UBlueprint* InBlueprint)"
  },
  {
    "label": "OnBlueprintCompiled()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBlueprintCompiled(UBlueprint* InBlueprint)"
  },
  {
    "label": "OnBlueprintUnloaded()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintUnloaded(UBlueprint* InBlueprint)"
  },
  {
    "label": "OnPreObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPreObjectPropertyChanged(UObject* InObject, const FEditPropertyChain& EditPropertyChain)"
  },
  {
    "label": "OnPostObjectPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostObjectPropertyChanged(UObject* InObject, FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "ClearAllBreakpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllBreakpoints()"
  },
  {
    "label": "DisableAllBreakpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DisableAllBreakpoints()"
  },
  {
    "label": "EnableAllBreakpoints()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableAllBreakpoints()"
  },
  {
    "label": "ClearAllWatches()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllWatches()"
  },
  {
    "label": "HasAnyBreakpoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyBreakpoints()"
  },
  {
    "label": "HasAnyEnabledBreakpoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyEnabledBreakpoints()"
  },
  {
    "label": "HasAnyDisabledBreakpoints()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyDisabledBreakpoints()"
  },
  {
    "label": "HasAnyWatches()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasAnyWatches()"
  },
  {
    "label": "OpenBlueprintDebugger()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenBlueprintDebugger()"
  },
  {
    "label": "CanOpenBlueprintDebugger()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenBlueprintDebugger()"
  },
  {
    "label": "GetCurrentlySelectedPin()",
    "kind": "Method",
    "detail": "Function (UEdGraphPin*)",
    "insertText": "GetCurrentlySelectedPin()"
  },
  {
    "label": "OnPromoteToVariable()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPromoteToVariable(bool bInToMemberVariable)"
  },
  {
    "label": "CanPromoteToVariable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPromoteToVariable(bool bInToMemberVariable)"
  },
  {
    "label": "OnSplitStructPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSplitStructPin()"
  },
  {
    "label": "CanSplitStructPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSplitStructPin()"
  },
  {
    "label": "OnRecombineStructPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRecombineStructPin()"
  },
  {
    "label": "CanRecombineStructPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRecombineStructPin()"
  },
  {
    "label": "OnAddExecutionPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddExecutionPin()"
  },
  {
    "label": "CanAddExecutionPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddExecutionPin()"
  },
  {
    "label": "OnInsertExecutionPinBefore()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertExecutionPinBefore()"
  },
  {
    "label": "OnInsertExecutionPinAfter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertExecutionPinAfter()"
  },
  {
    "label": "OnInsertExecutionPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInsertExecutionPin(EPinInsertPosition Position)"
  },
  {
    "label": "CanInsertExecutionPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanInsertExecutionPin()"
  },
  {
    "label": "OnRemoveExecutionPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveExecutionPin()"
  },
  {
    "label": "CanRemoveExecutionPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveExecutionPin()"
  },
  {
    "label": "OnRemoveThisStructVarPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveThisStructVarPin()"
  },
  {
    "label": "CanRemoveThisStructVarPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveThisStructVarPin()"
  },
  {
    "label": "OnRemoveOtherStructVarPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveOtherStructVarPins()"
  },
  {
    "label": "CanRemoveOtherStructVarPins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveOtherStructVarPins()"
  },
  {
    "label": "OnRestoreAllStructVarPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRestoreAllStructVarPins()"
  },
  {
    "label": "CanRestoreAllStructVarPins()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRestoreAllStructVarPins()"
  },
  {
    "label": "OnResetPinToDefaultValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnResetPinToDefaultValue()"
  },
  {
    "label": "CanResetPinToDefaultValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanResetPinToDefaultValue()"
  },
  {
    "label": "OnAddOptionPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddOptionPin()"
  },
  {
    "label": "CanAddOptionPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddOptionPin()"
  },
  {
    "label": "OnRemoveOptionPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveOptionPin()"
  },
  {
    "label": "CanRemoveOptionPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveOptionPin()"
  },
  {
    "label": "OnGetPinType()",
    "kind": "Method",
    "detail": "Function (FEdGraphPinType)",
    "insertText": "OnGetPinType(UEdGraphPin* SelectedPin)"
  },
  {
    "label": "OnChangePinType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangePinType()"
  },
  {
    "label": "OnChangePinTypeFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnChangePinTypeFinished(const FEdGraphPinType& PinType, UEdGraphPin* SelectedPin)"
  },
  {
    "label": "CanChangePinType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanChangePinType()"
  },
  {
    "label": "OnAddParentNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddParentNode()"
  },
  {
    "label": "CanAddParentNode()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddParentNode()"
  },
  {
    "label": "OnCreateMatchingFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateMatchingFunction()"
  },
  {
    "label": "CanCreateMatchingFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCreateMatchingFunction()"
  },
  {
    "label": "OnEnableBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEnableBreakpoint()"
  },
  {
    "label": "CanEnableBreakpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanEnableBreakpoint()"
  },
  {
    "label": "OnToggleBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnToggleBreakpoint()"
  },
  {
    "label": "CanToggleBreakpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanToggleBreakpoint()"
  },
  {
    "label": "OnDisableBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDisableBreakpoint()"
  },
  {
    "label": "CanDisableBreakpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDisableBreakpoint()"
  },
  {
    "label": "OnAddBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAddBreakpoint()"
  },
  {
    "label": "CanAddBreakpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAddBreakpoint()"
  },
  {
    "label": "OnRemoveBreakpoint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRemoveBreakpoint()"
  },
  {
    "label": "CanRemoveBreakpoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRemoveBreakpoint()"
  },
  {
    "label": "OnCollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseNodes()"
  },
  {
    "label": "CanCollapseNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCollapseNodes()"
  },
  {
    "label": "OnCollapseSelectionToFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseSelectionToFunction()"
  },
  {
    "label": "CanCollapseSelectionToFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCollapseSelectionToFunction()"
  },
  {
    "label": "OnCollapseSelectionToMacro()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCollapseSelectionToMacro()"
  },
  {
    "label": "CanCollapseSelectionToMacro()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCollapseSelectionToMacro()"
  },
  {
    "label": "OnPromoteSelectionToFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPromoteSelectionToFunction()"
  },
  {
    "label": "CanPromoteSelectionToFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPromoteSelectionToFunction()"
  },
  {
    "label": "OnPromoteSelectionToMacro()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPromoteSelectionToMacro()"
  },
  {
    "label": "CanPromoteSelectionToMacro()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPromoteSelectionToMacro()"
  },
  {
    "label": "OnExpandNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnExpandNodes()"
  },
  {
    "label": "CanExpandNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanExpandNodes()"
  },
  {
    "label": "MoveNodesToAveragePos()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodesToAveragePos(TSet<UEdGraphNode*>& AverageNodes, FVector2D SourcePos, bool bExpandedNodesNeedUniqueGuid = false)"
  },
  {
    "label": "OnConvertFunctionToEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertFunctionToEvent()"
  },
  {
    "label": "ConvertFunctionIfValid()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "ConvertFunctionIfValid(UK2Node_FunctionEntry* FuncEntryNode)"
  },
  {
    "label": "ConvertEventIfValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConvertEventIfValid(UK2Node_Event* EventToConv)"
  },
  {
    "label": "CanConvertFunctionToEvent()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "CanConvertFunctionToEvent()"
  },
  {
    "label": "ConvertFunctionToEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertFunctionToEvent(UK2Node_FunctionEntry* SelectedCallFunctionNode)"
  },
  {
    "label": "OnConvertEventToFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnConvertEventToFunction()"
  },
  {
    "label": "ConvertEventToFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConvertEventToFunction(UK2Node_Event* SelectedEventNode)"
  },
  {
    "label": "CanConvertEventToFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanConvertEventToFunction()"
  },
  {
    "label": "GetAllConnectedNodes()",
    "kind": "Method",
    "detail": "Function (TArray<UEdGraphNode*>)",
    "insertText": "GetAllConnectedNodes(UEdGraphNode* const Node)"
  },
  {
    "label": "OnAlignTop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignTop()"
  },
  {
    "label": "OnAlignMiddle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignMiddle()"
  },
  {
    "label": "OnAlignBottom()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignBottom()"
  },
  {
    "label": "OnAlignLeft()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignLeft()"
  },
  {
    "label": "OnAlignCenter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignCenter()"
  },
  {
    "label": "OnAlignRight()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAlignRight()"
  },
  {
    "label": "OnStraightenConnections()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStraightenConnections()"
  },
  {
    "label": "OnDistributeNodesH()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDistributeNodesH()"
  },
  {
    "label": "OnDistributeNodesV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDistributeNodesV()"
  },
  {
    "label": "SelectAllNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SelectAllNodes()"
  },
  {
    "label": "CanSelectAllNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectAllNodes()"
  },
  {
    "label": "DeleteSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedNodes()"
  },
  {
    "label": "CanDeleteNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDeleteNodes()"
  },
  {
    "label": "ReconnectExecPins()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReconnectExecPins(class UK2Node* Node)"
  },
  {
    "label": "DeleteSelectedDuplicatableNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteSelectedDuplicatableNodes()"
  },
  {
    "label": "CutSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CutSelectedNodes()"
  },
  {
    "label": "CanCutNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCutNodes()"
  },
  {
    "label": "CopySelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CopySelectedNodes()"
  },
  {
    "label": "CanCopyNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCopyNodes()"
  },
  {
    "label": "PasteNodesHere()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteNodesHere(class UEdGraph* DestinationGraph, const FVector2D& GraphLocation)"
  },
  {
    "label": "PasteGeneric()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteGeneric()"
  },
  {
    "label": "CanPasteGeneric()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteGeneric()"
  },
  {
    "label": "PasteNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PasteNodes()"
  },
  {
    "label": "CanPasteNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanPasteNodes()"
  },
  {
    "label": "DuplicateNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DuplicateNodes()"
  },
  {
    "label": "CanDuplicateNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanDuplicateNodes()"
  },
  {
    "label": "OnSelectReferenceInLevel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSelectReferenceInLevel()"
  },
  {
    "label": "CanSelectReferenceInLevel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanSelectReferenceInLevel()"
  },
  {
    "label": "OnAssignReferencedActor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAssignReferencedActor()"
  },
  {
    "label": "CanAssignReferencedActor()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanAssignReferencedActor()"
  },
  {
    "label": "OnStartWatchingPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartWatchingPin()"
  },
  {
    "label": "CanStartWatchingPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStartWatchingPin()"
  },
  {
    "label": "OnStopWatchingPin()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStopWatchingPin()"
  },
  {
    "label": "CanStopWatchingPin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanStopWatchingPin()"
  },
  {
    "label": "ToggleSaveIntermediateBuildProducts()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ToggleSaveIntermediateBuildProducts()"
  },
  {
    "label": "GetSaveIntermediateBuildProducts()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetSaveIntermediateBuildProducts()"
  },
  {
    "label": "OnListObjectsReferencedByClass()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListObjectsReferencedByClass()"
  },
  {
    "label": "OnListObjectsReferencedByBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnListObjectsReferencedByBlueprint()"
  },
  {
    "label": "OnRepairCorruptedBlueprint()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRepairCorruptedBlueprint()"
  },
  {
    "label": "OnNodeDoubleClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnNodeDoubleClicked(UEdGraphNode* Node)"
  },
  {
    "label": "OnEditTabClosed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditTabClosed(TSharedRef<SDockTab> Tab)"
  },
  {
    "label": "GetBoundsForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetBoundsForSelectedNodes(class FSlateRect& Rect, float Padding)"
  },
  {
    "label": "ExtractEventTemplateForFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExtractEventTemplateForFunction(class UK2Node_CustomEvent* InCustomEvent, UEdGraphNode* InGatewayNode, class UK2Node_EditablePinBase* InEntryNode, class UK2Node_EditablePinBase* InResultNode, TSet<UEdGraphNode*>& InCollapsableNodes)"
  },
  {
    "label": "CollapseNodesIntoGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseNodesIntoGraph(UEdGraphNode* InGatewayNode, class UK2Node_EditablePinBase* InEntryNode, class UK2Node_EditablePinBase* InResultNode, UEdGraph* InSourceGraph, UEdGraph* InDestinationGraph, TSet<UEdGraphNode*>& InCollapsableNodes, bool bCanDiscardEmptyReturnNode, bool bCanHaveWeakObjPtrParam)"
  },
  {
    "label": "CollapseNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollapseNodes(TSet<class UEdGraphNode*>& InCollapsableNodes)"
  },
  {
    "label": "CollapseSelectionToFunction()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "CollapseSelectionToFunction(TSharedPtr<SGraphEditor> InRootGraph, TSet<class UEdGraphNode*>& InCollapsableNodes, UEdGraphNode*& OutFunctionNode)"
  },
  {
    "label": "CollapseSelectionToMacro()",
    "kind": "Method",
    "detail": "Function (UEdGraph*)",
    "insertText": "CollapseSelectionToMacro(TSharedPtr<SGraphEditor> InRootGraph, TSet<class UEdGraphNode*>& InCollapsableNodes, UEdGraphNode*& OutMacroNode)"
  },
  {
    "label": "CanCollapseSelectionToFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCollapseSelectionToFunction(TSet<class UEdGraphNode*>& InSelection)"
  },
  {
    "label": "CanCollapseSelectionToMacro()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanCollapseSelectionToMacro(TSet<class UEdGraphNode*>& InSelection)"
  },
  {
    "label": "ExpandNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExpandNode(UEdGraphNode* InNodeToExpand, UEdGraph* InSourceGraph, TSet<UEdGraphNode*>& OutExpandedNodes)"
  },
  {
    "label": "MoveNodesToGraph()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MoveNodesToGraph(TArray<UEdGraphNode*>& SourceNodes, UEdGraph* DestinationGraph, TSet<UEdGraphNode*>& OutExpandedNodes, UEdGraphNode** OutEntry, UEdGraphNode** OutResult, const bool bIsCollapsedGraph = false)"
  },
  {
    "label": "OnStartEditingDefaultsClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnStartEditingDefaultsClicked()"
  },
  {
    "label": "CreateDefaultTabContents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDefaultTabContents(const TArray<UBlueprint*>& InBlueprints)"
  },
  {
    "label": "CreateDefaultCommands()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateDefaultCommands()"
  },
  {
    "label": "DeleteUnusedVariables_OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DeleteUnusedVariables_OnClicked()"
  },
  {
    "label": "FindInBlueprints_OnClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindInBlueprints_OnClicked()"
  },
  {
    "label": "NotifyPreChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPreChange(FProperty* PropertyAboutToChange)"
  },
  {
    "label": "NotifyPostChange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NotifyPostChange(const FPropertyChangedEvent& PropertyChangedEvent, FProperty* PropertyThatChanged)"
  },
  {
    "label": "ShouldShowPublicViewControl()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldShowPublicViewControl()"
  },
  {
    "label": "OnFinishedChangingProperties()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFinishedChangingProperties(const FPropertyChangedEvent& PropertyChangedEvent)"
  },
  {
    "label": "OnRenameNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRenameNode()"
  },
  {
    "label": "CanRenameNodes()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRenameNodes()"
  },
  {
    "label": "OnNodeVerifyTitleCommit()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnNodeVerifyTitleCommit(const FText& NewText, UEdGraphNode* NodeBeingChanged, FText& OutErrorMessage)"
  },
  {
    "label": "LoadLibrariesFromAssetRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadLibrariesFromAssetRegistry()"
  },
  {
    "label": "PostUndo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostUndo(bool bSuccess)"
  },
  {
    "label": "PostRedo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostRedo(bool bSuccess)"
  },
  {
    "label": "SetupGraphEditorEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupGraphEditorEvents(UEdGraph* InGraph, SGraphEditor::FGraphEditorEvents& InEvents)"
  },
  {
    "label": "GetCurrentGraphAppearance()",
    "kind": "Method",
    "detail": "Function (FGraphAppearanceInfo)",
    "insertText": "GetCurrentGraphAppearance()"
  },
  {
    "label": "GetGraphAppearance()",
    "kind": "Method",
    "detail": "Function (FGraphAppearanceInfo)",
    "insertText": "GetGraphAppearance(class UEdGraph* InGraph)"
  },
  {
    "label": "GetDefaultSchemaClass()",
    "kind": "Method",
    "detail": "Function (TSubclassOf<UEdGraphSchema>)",
    "insertText": "GetDefaultSchemaClass()"
  },
  {
    "label": "TryInvokingDetailsTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TryInvokingDetailsTab(bool bFlash = true)"
  },
  {
    "label": "OnGraphEditorQuickJump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGraphEditorQuickJump(int32 BookmarkIndex)"
  },
  {
    "label": "SetGraphEditorQuickJump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetGraphEditorQuickJump(int32 BookmarkIndex)"
  },
  {
    "label": "ClearGraphEditorQuickJump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearGraphEditorQuickJump(int32 BookmarkIndex)"
  },
  {
    "label": "ClearAllGraphEditorQuickJumps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ClearAllGraphEditorQuickJumps()"
  },
  {
    "label": "CreateGraphTitleBarWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateGraphTitleBarWidget(TSharedRef<FTabInfo> InTabInfo, UEdGraph* InGraph)"
  },
  {
    "label": "CanRecompileModules()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanRecompileModules()"
  },
  {
    "label": "OnEditTunnel()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnEditTunnel()"
  },
  {
    "label": "OnCreateComment()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "OnCreateComment()"
  },
  {
    "label": "OnCreateCustomEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnCreateCustomEvent()"
  },
  {
    "label": "CreateGraphEditorWidget()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SGraphEditor>)",
    "insertText": "CreateGraphEditorWidget(TSharedRef<class FTabInfo> InTabInfo, class UEdGraph* InGraph)"
  },
  {
    "label": "OnChangeBreadCrumbGraph()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "OnChangeBreadCrumbGraph(class UEdGraph* InGraph)"
  },
  {
    "label": "IsASubGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsASubGraph(const class UEdGraph* GraphPtr)"
  },
  {
    "label": "CreateSubobjectEditors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CreateSubobjectEditors()"
  },
  {
    "label": "OnLogTokenClicked()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLogTokenClicked(const TSharedRef<class IMessageToken>& Token)"
  },
  {
    "label": "NavigateTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateTab(FDocumentTracker::EOpenDocumentCause InCause)"
  },
  {
    "label": "OnFindReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnFindReferences(bool bSearchAllBlueprints, const EGetFindReferenceSearchStringFlags Flags)"
  },
  {
    "label": "CanFindReferences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanFindReferences()"
  },
  {
    "label": "OnDisallowedPinConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnDisallowedPinConnection(const class UEdGraphPin* PinA, const class UEdGraphPin* PinB)"
  },
  {
    "label": "IsEditingAnimGraph()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditingAnimGraph()"
  },
  {
    "label": "IsFocusedGraphEditable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsFocusedGraphEditable()"
  },
  {
    "label": "OnGoToDefinition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGoToDefinition()"
  },
  {
    "label": "CanGoToDefinition()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoToDefinition()"
  },
  {
    "label": "OnGoToDocumentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnGoToDocumentation()"
  },
  {
    "label": "CanGoToDocumentation()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanGoToDocumentation()"
  },
  {
    "label": "GetDocLinkForSelectedNode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocLinkForSelectedNode()"
  },
  {
    "label": "GetDocLinkBaseUrlForSelectedNode()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetDocLinkBaseUrlForSelectedNode()"
  },
  {
    "label": "OnSetEnabledStateForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSetEnabledStateForSelectedNodes(ENodeEnabledState NewState)"
  },
  {
    "label": "GetEnabledCheckBoxStateForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "GetEnabledCheckBoxStateForSelectedNodes()"
  },
  {
    "label": "LoadEditorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LoadEditorSettings()"
  },
  {
    "label": "SaveEditorSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SaveEditorSettings()"
  },
  {
    "label": "CheckEnabledStateForSelectedNodes()",
    "kind": "Method",
    "detail": "Function (ECheckBoxState)",
    "insertText": "CheckEnabledStateForSelectedNodes(ENodeEnabledState CheckState)"
  },
  {
    "label": "HandleUndoTransaction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUndoTransaction(const class FTransaction* Transaction)"
  },
  {
    "label": "TransactionObjectAffectsBlueprint()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "TransactionObjectAffectsBlueprint(UObject* InTransactedObject)"
  },
  {
    "label": "UpdateNodesUnrelatedStatesAfterGraphChange()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FDocumentTracker> DocumentManager ; void)",
    "insertText": "UpdateNodesUnrelatedStatesAfterGraphChange()"
  },
  {
    "label": "AreEventGraphsAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreEventGraphsAllowed()"
  },
  {
    "label": "AreMacrosAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreMacrosAllowed()"
  },
  {
    "label": "AreDelegatesAllowed()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AreDelegatesAllowed()"
  },
  {
    "label": "GetViewportSelectabilityBridge()",
    "kind": "Method",
    "detail": "Function (FEditorViewportSelectabilityBridge*)",
    "insertText": "GetViewportSelectabilityBridge()"
  },
  {
    "label": "ResetAllNodesUnrelatedStates()",
    "kind": "Method",
    "detail": "Function (protected : bool bSaveIntermediateBuildProducts ; bool bIsReparentingBlueprint ; bool bPendingDeferredClose ; TWeakPtr<class SGraphEditor> FocusedGraphEdPtr ; TWeakPtr<FDocumentTabFactory> GraphEditorTabFactoryPtr ; TSet<TWeakObjectPtr<UUserDefinedEnum>> UserDefinedEnumerators ; TSet<TWeakObjectPtr<UUserDefinedStruct>> UserDefinedStructures ; TArray<TObjectPtr<UBlueprint>> StandardLibraries ; TSharedPtr<SSubobjectEditor> SubobjectEditor ; TSharedPtr<SSCSEditorViewport> SubobjectViewport ; TSharedPtr<class SKismetInspector> Inspector ; TSharedPtr<class SKismetInspector> DefaultEditor ; TSharedPtr<class SBlueprintPalette> Palette ; TSharedPtr<class SBlueprintBookmarks> BookmarksWidget ; TSharedPtr<class SMyBlueprint> MyBlueprintWidget ; TSharedPtr<class SReplaceNodeReferences> ReplaceReferencesWidget ; TSharedPtr<class SWidget> CompilerResults ; TSharedPtr<class IMessageLogListing> CompilerResultsListing ; int32 CachedNumWarnings ; int32 CachedNumErrors ; TSharedPtr<class SFindInBlueprints> FindResults ; TWeakPtr<class SDockTab> MergeTool ; FOnMergeResolved OnMergeResolved ; TWeakPtr<class SWindow> NameEntryPopupWindow ; TSharedPtr<class INameValidatorInterface> NameEntryValidator ; TWeakPtr<class IMenu> PinTypeChangeMenu ; TSharedPtr<class FBlueprintEditorToolbar> Toolbar ; TSharedPtr<FBlueprintNamespaceHelper> ImportedNamespaceHelper ; TSharedPtr<class IClassViewerFilter> ImportedClassViewerFilter ; TSharedPtr<class IPinTypeSelectorFilter> ImportedPinTypeSelectorFilter ; TSharedPtr<class IPinTypeSelectorFilter> PermissionsPinTypeSelectorFilter ; TSharedPtr<class IPinTypeSelectorFilter> CompositePinTypeSelectorFilter ; TSet<FString> DeferredNamespaceImports ; FOnSetPinVisibility OnSetPinVisibility ; bool bRequestedSavingOpenDocumentState ; bool bBlueprintModifiedOnOpen ; SGraphEditor::EPinVisibility PinVisibility ; bool bIsActionMenuContextSensitive ; FName CurrentUISelection ; bool bEditorMarkedAsClosed ; FPreviewScene PreviewScene ; TWeakObjectPtr<AActor> PreviewActorPtr ; bool bHideUnrelatedNodes ; bool bLockNodeFadeState ; bool bSelectRegularNode ; bool bWasOpenedInDefaultsMode ; void)",
    "insertText": "ResetAllNodesUnrelatedStates()"
  },
  {
    "label": "CollectExecUpstreamNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectExecUpstreamNodes(UEdGraphNode* CurrentNode, TArray<UEdGraphNode*>& CollectedNodes)"
  },
  {
    "label": "CollectExecDownstreamNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectExecDownstreamNodes(UEdGraphNode* CurrentNode, TArray<UEdGraphNode*>& CollectedNodes)"
  },
  {
    "label": "CollectPureDownstreamNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPureDownstreamNodes(UEdGraphNode* CurrentNode, TArray<UEdGraphNode*>& CollectedNodes)"
  },
  {
    "label": "CollectPureUpstreamNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectPureUpstreamNodes(UEdGraphNode* CurrentNode, TArray<UEdGraphNode*>& CollectedNodes)"
  },
  {
    "label": "HideUnrelatedNodes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HideUnrelatedNodes()"
  },
  {
    "label": "RegisterMenus()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterMenus()"
  },
  {
    "label": "ToggleHideUnrelatedNodes()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "ToggleHideUnrelatedNodes()"
  },
  {
    "label": "IsToggleHideUnrelatedNodesChecked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsToggleHideUnrelatedNodesChecked()"
  },
  {
    "label": "MakeHideUnrelatedNodesOptionsMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "MakeHideUnrelatedNodesOptionsMenu()"
  },
  {
    "label": "HandleUnrelatedNodesOpacityBoxValue()",
    "kind": "Method",
    "detail": "Function (TOptional<float>)",
    "insertText": "HandleUnrelatedNodesOpacityBoxValue()"
  },
  {
    "label": "HandleUnrelatedNodesOpacityBoxChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleUnrelatedNodesOpacityBoxChanged(float NewOpacity)"
  },
  {
    "label": "OnLockNodeStateCheckStateChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnLockNodeStateCheckStateChanged(ECheckBoxState NewCheckedState)"
  },
  {
    "label": "OpenDocument()",
    "kind": "Method",
    "detail": "Function (public : TSharedPtr<SDockTab>)",
    "insertText": "OpenDocument(const UObject* DocumentID, FDocumentTracker::EOpenDocumentCause Cause)"
  },
  {
    "label": "CloseDocumentTab()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CloseDocumentTab(const UObject* DocumentID)"
  },
  {
    "label": "FindOpenTabsContainingDocument()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FindOpenTabsContainingDocument(const UObject* DocumentID, TArray< TSharedPtr<SDockTab> >& Results)"
  },
  {
    "label": "DECLARE_EVENT()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "DECLARE_EVENT(FBlueprintEditor, FOnRefreshEvent)"
  },
  {
    "label": "OnRefresh()",
    "kind": "Method",
    "detail": "Function (FOnRefreshEvent&)",
    "insertText": "OnRefresh()"
  },
  {
    "label": "Broadcast()",
    "kind": "Method",
    "detail": "Function (RefreshEvent .)",
    "insertText": "Broadcast()"
  },
  {
    "label": "OnCreateGraphEditorCommands()",
    "kind": "Method",
    "detail": "Function (} TSharedPtr<FUICommandList> GraphEditorCommands ; struct FAnalyticsStatistics { int32 GraphActionMenusNonCtxtSensitiveExecCount ; int32 GraphActionMenusCtxtSensitiveExecCount ; int32 GraphActionMenusCancelledCount ; int32 MyBlueprintNodeDragPlacementCount ; int32 PaletteNodeDragPlacementCount ; int32 NodeGraphContextCreateCount ; int32 NodePinContextCreateCount ; int32 NodeKeymapCreateCount ; int32 NodePasteCreateCount ; struct FNodeDetails { FName NodeClass ; int32 Instances ; } ; TArray<FDisallowedPinConnection> GraphDisallowedPinConnections ; } ; FAnalyticsStatistics AnalyticsStats ; TMap<FName,TSharedPtr<ISCSEditorCustomization>> SubobjectEditorCustomizations ; bool bCodeBasedProject ; FOnModeSet OnModeSetData ; UEdGraph* HasOpenActionMenu ; float InstructionsFadeCountdown ; FDelegateHandle OnActiveTabChangedDelegateHandle ; FDelegateHandle BlueprintEditorSettingsChangedHandle ; FDelegateHandle BlueprintProjectSettingsChangedHandle ; enum class ESafeToModifyDuringPIEStatus { Unknown,Safe,NotSafe } ; ESafeToModifyDuringPIEStatus ModifyDuringPIEStatus = ESafeToModifyDuringPIEStatus::Unknown ; void)",
    "insertText": "OnCreateGraphEditorCommands(TSharedPtr<FUICommandList> GraphEditorCommandsList)"
  },
  {
    "label": "OnBlueprintProjectSettingsChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnBlueprintProjectSettingsChanged(UObject*, struct FPropertyChangedEvent&)"
  },
  {
    "label": "OnBlueprintEditorPreferencesChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBlueprintEditorPreferencesChanged(UObject*, struct FPropertyChangedEvent&)"
  }
]