[
  {
    "label": "SVerticalBox",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SVerticalBox"
  },
  {
    "label": "SWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWidget"
  },
  {
    "label": "FExcerpt",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FExcerpt"
  },
  {
    "label": "FSlateDynamicImageBrush",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSlateDynamicImageBrush"
  },
  {
    "label": "FUDNPageMetadata",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUDNPageMetadata"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FUDNToken",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUDNToken"
  },
  {
    "label": "FUDNLine",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUDNLine"
  },
  {
    "label": "FUDNParser",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUDNParser"
  },
  {
    "label": "FTokenPair",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTokenPair"
  },
  {
    "label": "FTokenConfiguration",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FTokenConfiguration"
  },
  {
    "label": "FUDNPageMetadata()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" HAL / PlatformCrt . h \" # include \" IDocumentation . h \" # include \" Input / Reply . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" # include \" Templates / SharedPointer . h \" # include \" Types / SlateStructs . h \" class SVerticalBox ; class SWidget ; struct FExcerpt ; struct FSlateDynamicImageBrush ; struct FUDNPageMetadata {)",
    "insertText": "FUDNPageMetadata() : Availability() , Title() , Crumbs() , Description() , ExcerptNames() , ExcerptAliases() , BaseUrl()"
  },
  {
    "label": "FUDNToken()",
    "kind": "Method",
    "detail": "Function (} FString Availability ; FText Title ; FText Crumbs ; FText Description ; TSet<FString> ExcerptNames ; TMap<FString,FString> ExcerptAliases ; FString BaseUrl ; } ; namespace EUDNToken { enum Type { Content,Pound,OpenBracket,CloseBracket,OpenParenthesis,CloseParenthesis,Numbering,Bang,Excerpt,Variable,Colon,Slash,Dash,MetadataAvailability,MetadataTitle,MetadataCrumbs,MetadataDescription,MetadataBaseUrl,Percentage,Asterisk } ; } struct FUDNToken {)",
    "insertText": "FUDNToken(EUDNToken::Type InTokenType, const FString& InContent = FString()) : TokenType(InTokenType) , Content(InContent)"
  },
  {
    "label": "FUDNLine()",
    "kind": "Method",
    "detail": "Function (} EUDNToken::Type TokenType ; FString Content ; } ; struct FUDNLine { public : enum Type { Ignored,VariableReference,Whitespace,Content,NumberedContent,Header1,Header2,ExcerptOpen,ExcerptClose,Image,Link,ImageLink,HorizontalRule,MetadataAvailability,MetadataTitle,MetadataCrumbs,MetadataDescription,MetadataBaseUrl,Variable,VariableOpen,VariableClose,BoldContent,BulletContent } ; Type ContentType ; TArray<FString> AdditionalContent ;)",
    "insertText": "FUDNLine() : ContentType(FUDNLine::Ignored)"
  },
  {
    "label": "FUDNLine()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUDNLine(FUDNLine::Type InLineType, const FString& InStringContent = FString(), const FString& InPathContent = FString()) : ContentType(InLineType)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } ; class FUDNParser : public TSharedFromThis<FUDNParser> { public : TSharedRef<FUDNParser>)",
    "insertText": "Create(const TSharedPtr< FParserConfiguration >& ParserConfig, const FDocumentationStyle& Style)"
  },
  {
    "label": "FUDNParser()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FUDNParser()"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Parse(const FString& Link, TArray< FExcerpt >& OutContentSections, FUDNPageMetadata& OutMetadata)"
  },
  {
    "label": "GetExcerptContent()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetExcerptContent(const FString& Link, FExcerpt& Excerpt)"
  },
  {
    "label": "SetWrapAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWrapAt(TAttribute<float> InWrapAt)"
  },
  {
    "label": "OnImageLinkClicked()",
    "kind": "Method",
    "detail": "Function (private : FReply)",
    "insertText": "OnImageLinkClicked(FString Payload)"
  },
  {
    "label": "AddContentToExcerpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddContentToExcerpt(TSharedPtr<SVerticalBox> Box, const FString& ContentSource, FExcerpt& Excerpt)"
  },
  {
    "label": "AddCaptionToExcerpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddCaptionToExcerpt(TSharedPtr<SVerticalBox> Box, const FString& ContentSource, FExcerpt& Excerpt)"
  },
  {
    "label": "AddListItemToExcerpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddListItemToExcerpt(TSharedPtr<SVerticalBox> Box, const FString& LeftContentSource, const FString& RightContentSource, FExcerpt& Excerpt)"
  },
  {
    "label": "GetDynamicBrushFromImagePath()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FSlateDynamicImageBrush>)",
    "insertText": "GetDynamicBrushFromImagePath(FString Filename)"
  },
  {
    "label": "AppendExcerpt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AppendExcerpt(TSharedPtr<SVerticalBox> Box, TSharedRef<SWidget> Content)"
  },
  {
    "label": "ConvertSymbolIntoAString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertSymbolIntoAString(const FUDNToken& Token)"
  },
  {
    "label": "ConvertSymbolsIntoAString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertSymbolsIntoAString(const TArray<FUDNToken>& TokenList, int32 StartingAfterIndex = 0)"
  },
  {
    "label": "ParseLineIntoSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseLineIntoSymbols(int32 LineNumber, const FString& Line, TArray<FUDNToken>& SymbolList)"
  },
  {
    "label": "ParseLineIntoUDNContent()",
    "kind": "Method",
    "detail": "Function (FUDNLine)",
    "insertText": "ParseLineIntoUDNContent(int32 LineNumber, const FString& Line)"
  },
  {
    "label": "LoadLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "LoadLink(const FString& Link, TArray<FString>& ContentLines)"
  },
  {
    "label": "GenerateExcerptContent()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "GenerateExcerptContent(const FString& Link, FExcerpt& Excerpt, const TArray<FString>& ContentLines, int32 StartingLineIndex)"
  },
  {
    "label": "ParseSymbols()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseSymbols(const FString& Link, const TArray<FString>& ContentLines, const FString& FullPath, TArray<FExcerpt>& OutExcerpts, FUDNPageMetadata& OutMetadata)"
  },
  {
    "label": "HandleHyperlinkNavigate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleHyperlinkNavigate(FString AdditionalContent)"
  },
  {
    "label": "NavigateToLink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "NavigateToLink(FString AdditionalContent)"
  },
  {
    "label": "ParseCodeLink()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ParseCodeLink(FString &InternalLink)"
  },
  {
    "label": "ParseAssetLink()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseAssetLink(FString &InternalLink)"
  },
  {
    "label": "FUDNParser()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUDNParser(const TSharedRef< FParserConfiguration >& InConfiguration, const FDocumentationStyle& InStyle)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "FTokenPair()",
    "kind": "Method",
    "detail": "Function (TArray<TSharedPtr<FSlateDynamicImageBrush>> DynamicBrushesUsed ; TSharedRef<FParserConfiguration> Configuration ; FDocumentationStyle Style ; struct FTokenPair {)",
    "insertText": "FTokenPair(FString InParseText, EUDNToken::Type InTokenType) : ParseText(InParseText) , TokenType(InTokenType)"
  },
  {
    "label": "FTokenConfiguration()",
    "kind": "Method",
    "detail": "Function (} FString ParseText ; EUDNToken::Type TokenType ; } ; TArray<FTokenPair> TokenLibrary ; struct FTokenConfiguration {)",
    "insertText": "FTokenConfiguration(const TArray<EUDNToken::Type>& InTokenTypes, FUDNLine::Type InOutputLineType, bool bInAcceptTrailingContent = false) : TokensAccepted(InTokenTypes) , OutputLineType(InOutputLineType) , bAcceptTrailingSymbolDumpAsContent(bInAcceptTrailingContent)"
  },
  {
    "label": "CalculatedExpectedContentStrings()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CalculatedExpectedContentStrings()"
  }
]