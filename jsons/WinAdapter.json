[
  {
    "label": "name",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "name"
  },
  {
    "label": "GUID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "GUID"
  },
  {
    "label": "_GUID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_GUID"
  },
  {
    "label": "_FILETIME",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_FILETIME"
  },
  {
    "label": "_BY_HANDLE_FILE_INFORMATION",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_BY_HANDLE_FILE_INFORMATION"
  },
  {
    "label": "_WIN32_FIND_DATAW",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "_WIN32_FIND_DATAW"
  },
  {
    "label": "tagSTATSTG",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tagSTATSTG"
  },
  {
    "label": "tagSTATFLAG",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "tagSTATFLAG"
  },
  {
    "label": "interface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "interface"
  },
  {
    "label": "__declspec",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "__declspec"
  },
  {
    "label": "DECLSPEC_UUID",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DECLSPEC_UUID"
  },
  {
    "label": "iface",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "iface"
  },
  {
    "label": "IUnknown",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IUnknown"
  },
  {
    "label": "Q",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Q"
  },
  {
    "label": "INoMarshal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "INoMarshal"
  },
  {
    "label": "IMalloc",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IMalloc"
  },
  {
    "label": "ISequentialStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ISequentialStream"
  },
  {
    "label": "IStream",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IStream"
  },
  {
    "label": "CAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CAllocator"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "CComPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CComPtrBase"
  },
  {
    "label": "CComPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CComPtr"
  },
  {
    "label": "CSimpleArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CSimpleArray"
  },
  {
    "label": "Allocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Allocator"
  },
  {
    "label": "CHeapPtrBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHeapPtrBase"
  },
  {
    "label": "CHeapPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHeapPtr"
  },
  {
    "label": "CW2AEX",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CW2AEX"
  },
  {
    "label": "CA2WEX",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CA2WEX"
  },
  {
    "label": "CHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CHandle"
  },
  {
    "label": "C_ASSERT()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_SUPPORT_WIN_ADAPTER_H # define LLVM_SUPPORT_WIN_ADAPTER_H # ifndef _WIN32 # ifdef __cplusplus # include<atomic> # include<cassert> # include<climits> # include<cstring> # include<cwchar> # include<fstream> # include<stdarg . h> # include<stddef . h> # include<stdint . h> # include<string> # include<typeindex> # include<typeinfo> # include<vector> # endif # define COM_NO_WINDOWS_H # define)",
    "insertText": "C_ASSERT(expr) static_assert((expr), \"\") #define ATLASSERT assert #define CoTaskMemAlloc malloc #define CoTaskMemFree free #define ARRAYSIZE(array) (sizeof(array) / sizeof(array[0])) #define _countof(a) (sizeof(a) / sizeof(*(a))) #if !defined(__clang__) || defined(__APPLE__) #define __EMULATE_UUID 1 #endif #ifdef __EMULATE_UUID #define __declspec(x) #endif #define DECLSPEC_SELECTANY #ifdef __EMULATE_UUID #define uuid(id) #endif #define STDMETHODCALLTYPE #define STDMETHODIMP_(type) type STDMETHODCALLTYPE #define STDMETHODIMP STDMETHODIMP_(HRESULT) #define STDMETHOD_(type,name) virtual STDMETHODIMP_(type) name #define STDMETHOD(name) STDMETHOD_(HRESULT, name) #define EXTERN_C extern \"C\" #define UNREFERENCED_PARAMETER(P) (void)(P) #define RtlEqualMemory(Destination, Source, Length) \\ (!memcmp((Destination), (Source), (Length))) #define RtlMoveMemory(Destination, Source, Length) \\ memmove((Destination), (Source), (Length)) #define RtlCopyMemory(Destination, Source, Length) \\ memcpy((Destination), (Source), (Length)) #define RtlFillMemory(Destination, Length, Fill) \\ memset((Destination), (Fill), (Length)) #define RtlZeroMemory(Destination, Length) memset((Destination), 0, (Length)) #define MoveMemory RtlMoveMemory #define CopyMemory RtlCopyMemory #define FillMemory RtlFillMemory #define ZeroMemory RtlZeroMemory #define FALSE 0 #define TRUE 1 #define GetConsoleOutputCP() 0 #define _HRESULT_TYPEDEF_(_sc) ((HRESULT)_sc) #define DISP_E_BADINDEX _HRESULT_TYPEDEF_(0x8002000BL) #define REGDB_E_CLASSNOTREG _HRESULT_TYPEDEF_(0x80040154L) #define UIntToInt(uint_arg, int_ptr_arg) *int_ptr_arg = uint_arg #define INVALID_HANDLE_VALUE ((HANDLE)(LONG_PTR)-1) #define GetLastError() errno #define SetLastError(ERR) errno = ERR #define ERROR_SUCCESS 0L #define ERROR_ARITHMETIC_OVERFLOW EOVERFLOW #define ERROR_FILE_NOT_FOUND ENOENT #define ERROR_FUNCTION_NOT_CALLED ENOSYS #define ERROR_IO_DEVICE EIO #define ERROR_INSUFFICIENT_BUFFER ENOBUFS #define ERROR_INVALID_HANDLE EBADF #define ERROR_INVALID_PARAMETER EINVAL #define ERROR_OUT_OF_STRUCTURES ENOMEM #define ERROR_NOT_CAPABLE EPERM #define ERROR_NOT_FOUND ENOTSUP #define ERROR_UNHANDLED_EXCEPTION EBADF #define SEVERITY_ERROR 1 #define FACILITY_WIN32 7 #define HRESULT_CODE(hr) ((hr)&0xFFFF) #define MAKE_HRESULT(severity, facility, code) \\ ((HRESULT)(((unsigned long)(severity) << 31) | \\ ((unsigned long)(facility) << 16) | ((unsigned long)(code)))) #define FILE_TYPE_UNKNOWN 0x0000 #define FILE_TYPE_DISK 0x0001 #define FILE_TYPE_CHAR 0x0002 #define FILE_TYPE_PIPE 0x0003 #define FILE_TYPE_REMOTE 0x8000 #define FILE_ATTRIBUTE_NORMAL 0x00000080 #define FILE_ATTRIBUTE_DIRECTORY 0x00000010 #define INVALID_FILE_ATTRIBUTES ((DWORD)-1) #define STDOUT_FILENO 1 #define STDERR_FILENO 2 #define STGTY_STORAGE 1 #define STGTY_STREAM 2 #define STGTY_LOCKBYTES 3 #define STGTY_PROPERTY 4 #define STG_E_INVALIDFUNCTION 1L #define STG_E_ACCESSDENIED 2L #define STREAM_SEEK_SET 0 #define STREAM_SEEK_CUR 1 #define STREAM_SEEK_END 2 #define HEAP_NO_SERIALIZE 0x1 #define HEAP_ZERO_MEMORY 0x8 #define MB_ERR_INVALID_CHARS 0x00000008 #define CREATE_ALWAYS 2 #define CREATE_NEW 1 #define OPEN_ALWAYS 4 #define OPEN_EXISTING 3 #define TRUNCATE_EXISTING 5 #define FILE_SHARE_DELETE 0x00000004 #define FILE_SHARE_READ 0x00000001 #define FILE_SHARE_WRITE 0x00000002 #define GENERIC_READ 0x80000000 #define GENERIC_WRITE 0x40000000 #define _atoi64 atoll #define sprintf_s snprintf #define _strdup strdup #define _strnicmp strnicmp #define vsprintf_s vsprintf #define strcat_s strcat #define strcpy_s(dst, n, src) strncpy(dst, src, n) #define _vscwprintf vwprintf #define vswprintf_s vswprintf #define swprintf_s swprintf #define StringCchCopyW(dst, n, src) wcsncpy(dst, src, n) #define OutputDebugStringW(msg) fputws(msg, stderr) #define OutputDebugStringA(msg) fputs(msg, stderr) #define OutputDebugFormatA(...) fprintf(stderr, __VA_ARGS__) #define DxcEtw_DXCompilerCreateInstance_Start() #define DxcEtw_DXCompilerCreateInstance_Stop(hr) #define DxcEtw_DXCompilerCompile_Start() #define DxcEtw_DXCompilerCompile_Stop(hr) #define DxcEtw_DXCompilerDisassemble_Start() #define DxcEtw_DXCompilerDisassemble_Stop(hr) #define DxcEtw_DXCompilerPreprocess_Start() #define DxcEtw_DXCompilerPreprocess_Stop(hr) #define DxcEtw_DxcValidation_Start() #define DxcEtw_DxcValidation_Stop(hr) #define UInt32Add UIntAdd #define Int32ToUInt32 IntToUInt #define S_OK ((HRESULT)0L) #define S_FALSE ((HRESULT)1L) #define E_ABORT (HRESULT)0x80004004 #define E_ACCESSDENIED (HRESULT)0x80070005 #define E_BOUNDS (HRESULT)0x8000000B #define E_FAIL (HRESULT)0x80004005 #define E_HANDLE (HRESULT)0x80070006 #define E_INVALIDARG (HRESULT)0x80070057 #define E_NOINTERFACE (HRESULT)0x80004002 #define E_NOTIMPL (HRESULT)0x80004001 #define E_NOT_VALID_STATE (HRESULT)0x8007139F #define E_OUTOFMEMORY (HRESULT)0x8007000E #define E_POINTER (HRESULT)0x80004003 #define E_UNEXPECTED (HRESULT)0x8000FFFF #define SUCCEEDED(hr) (((HRESULT)(hr)) >= 0) #define FAILED(hr) (((HRESULT)(hr)) < 0) #define DXC_FAILED(hr) (((HRESULT)(hr)) < 0) #define HRESULT_FROM_WIN32(x) \\ (HRESULT)(x) <= 0 ? (HRESULT)(x) \\ : (HRESULT)(((x)&0x0000FFFF) | (7 << 16) | 0x80000000) #define _In_ #define _In_z_ #define _In_opt_ #define _In_opt_count_(size) #define _In_opt_z_ #define _In_reads_(size) #define _In_reads_bytes_(size) #define _In_reads_bytes_opt_(size) #define _In_reads_opt_(size) #define _In_reads_to_ptr_(ptr) #define _In_count_(size) #define _In_range_(lb, ub) #define _In_bytecount_(size) #define _In_opt_bytecount_(size) #define _In_NLS_string_(size) #define __in_bcount(size) #define _Out_ #define _Out_bytecap_(nbytes) #define _Out_writes_to_(a, b) #define _Out_writes_to_opt_(a, b) #define _Outptr_ #define _Outptr_opt_ #define _Outptr_opt_result_z_ #define _Out_opt_ #define _Out_writes_(size) #define _Out_write_bytes_(size) #define _Out_writes_z_(size) #define _Out_writes_all_(size) #define _Out_writes_bytes_(size) #define _Outref_result_buffer_(size) #define _Outptr_result_buffer_(size) #define _Out_cap_(size) #define _Out_cap_x_(size) #define _Out_range_(lb, ub) #define _Outptr_result_z_ #define _Outptr_result_buffer_maybenull_(ptr) #define _Outptr_result_maybenull_ #define _Outptr_result_nullonfailure_ #define __out_ecount_part(a, b) #define _Inout_ #define _Inout_z_ #define _Inout_opt_ #define _Inout_cap_(size) #define _Inout_count_(size) #define _Inout_count_c_(size) #define _Inout_opt_count_c_(size) #define _Inout_bytecount_c_(size) #define _Inout_opt_bytecount_c_(size) #define _Ret_maybenull_ #define _Ret_notnull_ #define _Ret_opt_ #define _Use_decl_annotations_ #define __analysis_assume(expr) #define _Analysis_assume_(expr) #define _Analysis_assume_nullterminated_(x) #define _Success_(expr) #define __inexpressible_readableTo(size) #define __inexpressible_writableTo(size) #define _Printf_format_string_ #define _Null_terminated_ #define _Field_size_(size) #define _Field_size_full_(size) #define _Field_size_opt_(size) #define _Post_writable_byte_size_(size) #define _Post_readable_byte_size_(size) #define __drv_allocatesMem(mem) #define _COM_Outptr_ #define _COM_Outptr_opt_ #define _COM_Outptr_result_maybenull_ #define _COM_Outptr_opt_result_maybenull_ #define _Null_ #define _Notnull_ #define _Maybenull_ #define THIS_ #define THIS #define PURE = 0 #define _Outptr_result_bytebuffer_(size) #define __debugbreak()"
  },
  {
    "label": "DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (typedef unsigned char* LPBYTE ; typedef BYTE BOOLEAN ; typedef BOOLEAN* PBOOLEAN ; # ifndef OBJC_BOOL_DEFINED typedef bool BOOL ; # endif typedef BOOL* LPBOOL ; typedef int INT ; typedef long LONG ; typedef unsigned int UINT ; typedef unsigned long ULONG ; typedef long long LONGLONG ; typedef long long LONG_PTR ; typedef unsigned long long ULONG_PTR ; typedef unsigned long long ULONGLONG ; typedef uint16_t WORD ; typedef uint32_t DWORD ; typedef DWORD* LPDWORD ; typedef uint32_t UINT32 ; typedef uint64_t UINT64 ; typedef signed char INT8,* PINT8 ; typedef signed int INT32,* PINT32 ; typedef size_t SIZE_T ; typedef const char* LPCSTR ; typedef const char* PCSTR ; typedef int errno_t ; typedef wchar_t WCHAR ; typedef wchar_t* LPWSTR ; typedef wchar_t* PWCHAR ; typedef const wchar_t* LPCWSTR ; typedef const wchar_t* PCWSTR ; typedef WCHAR OLECHAR ; typedef OLECHAR* BSTR ; typedef OLECHAR* LPOLESTR ; typedef char* LPSTR ; typedef void* LPVOID ; typedef const void* LPCVOID ; typedef std::nullptr_t nullptr_t ; typedef signed int HRESULT ; typedef void* HANDLE ; typedef void* RPC_IF_HANDLE ; # define)",
    "insertText": "DECLARE_HANDLE(name)"
  },
  {
    "label": "DECLARE_HANDLE()",
    "kind": "Method",
    "detail": "Function (\\ int unused ; \\ } ; \\ typedef struct name # # __* name)",
    "insertText": "DECLARE_HANDLE(HINSTANCE)"
  },
  {
    "label": "STD_INPUT_HANDLE()",
    "kind": "Method",
    "detail": "Function (typedef void* HMODULE ; # define)",
    "insertText": "STD_INPUT_HANDLE((DWORD)-10) #define STD_OUTPUT_HANDLE ((DWORD)-11) #define STD_ERROR_HANDLE ((DWORD)-12)"
  },
  {
    "label": "IsEqualGUID()",
    "kind": "Method",
    "detail": "Function (uint32_t Data1 ; uint16_t Data2 ; uint16_t Data3 ; uint8_t Data4 [ 8 ] ; } # ifdef __EMULATE_UUID ; # else GUID ; # endif typedef GUID CLSID ; typedef const GUID& REFGUID ; typedef const GUID& REFCLSID ; typedef GUID IID ; typedef IID* LPIID ; typedef const IID& REFIID ; bool)",
    "insertText": "IsEqualGUID(REFGUID rguid1, REFGUID rguid2)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(REFGUID guidOne, REFGUID guidOther)"
  },
  {
    "label": "IsEqualIID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqualIID(REFIID riid1, REFIID riid2)"
  },
  {
    "label": "IsEqualCLSID()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsEqualCLSID(REFCLSID rclsid1, REFCLSID rclsid2)"
  },
  {
    "label": "nybble_from_hex()",
    "kind": "Method",
    "detail": "Function (} typedef struct _FILETIME { DWORD dwLowDateTime ; DWORD dwHighDateTime ; } FILETIME,* PFILETIME,* LPFILETIME ; typedef struct _BY_HANDLE_FILE_INFORMATION { DWORD dwFileAttributes ; FILETIME ftCreationTime ; FILETIME ftLastAccessTime ; FILETIME ftLastWriteTime ; DWORD dwVolumeSerialNumber ; DWORD nFileSizeHigh ; DWORD nFileSizeLow ; DWORD nNumberOfLinks ; DWORD nFileIndexHigh ; DWORD nFileIndexLow ; } BY_HANDLE_FILE_INFORMATION,* PBY_HANDLE_FILE_INFORMATION,* LPBY_HANDLE_FILE_INFORMATION ; typedef struct _WIN32_FIND_DATAW { DWORD dwFileAttributes ; FILETIME ftCreationTime ; FILETIME ftLastAccessTime ; FILETIME ftLastWriteTime ; DWORD nFileSizeHigh ; DWORD nFileSizeLow ; DWORD dwReserved0 ; DWORD dwReserved1 ; WCHAR cFileName [ 2 6 0 ] ; WCHAR cAlternateFileName [ 1 4 ] ; } WIN32_FIND_DATAW,* PWIN32_FIND_DATAW,* LPWIN32_FIND_DATAW ; typedef union _LARGE_INTEGER { struct { DWORD LowPart ; DWORD HighPart ; } u ; LONGLONG QuadPart ; } LARGE_INTEGER ; typedef LARGE_INTEGER* PLARGE_INTEGER ; typedef union _ULARGE_INTEGER { struct { DWORD LowPart ; DWORD HighPart ; } u ; ULONGLONG QuadPart ; } ULARGE_INTEGER ; typedef ULARGE_INTEGER* PULARGE_INTEGER ; typedef struct tagSTATSTG { LPOLESTR pwcsName ; DWORD type ; ULARGE_INTEGER cbSize ; FILETIME mtime ; FILETIME ctime ; FILETIME atime ; DWORD grfMode ; DWORD grfLocksSupported ; CLSID clsid ; DWORD grfStateBits ; DWORD reserved ; } STATSTG ; enum tagSTATFLAG { STATFLAG_DEFAULT = 0,STATFLAG_NONAME = 1,STATFLAG_NOOPEN = 2 } ; # ifdef __EMULATE_UUID uint8_t)",
    "insertText": "nybble_from_hex(char c)"
  },
  {
    "label": "byte_from_hex()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "byte_from_hex(char c1, char c2)"
  },
  {
    "label": "byte_from_hexstr()",
    "kind": "Method",
    "detail": "Function (} uint8_t)",
    "insertText": "byte_from_hexstr(const char str[2])"
  },
  {
    "label": "guid_from_string()",
    "kind": "Method",
    "detail": "Function (} GUID)",
    "insertText": "guid_from_string(const char str[37])"
  },
  {
    "label": "byte_from_hexstr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "byte_from_hexstr(str + 19), byte_from_hexstr(str + 21), byte_from_hexstr(str + 24), byte_from_hexstr(str + 26), byte_from_hexstr(str + 28), byte_from_hexstr(str + 30), byte_from_hexstr(str + 32), byte_from_hexstr(str + 34)"
  },
  {
    "label": "__emulated_uuidof()",
    "kind": "Method",
    "detail": "Function (} template<interface> GUID)",
    "insertText": "__emulated_uuidof()"
  },
  {
    "label": "CROSS_PLATFORM_UUIDOF()",
    "kind": "Method",
    "detail": "Function (# ifndef CROSS_PLATFORM_UUIDOF # define)",
    "insertText": "CROSS_PLATFORM_UUIDOF(interface, spec)"
  },
  {
    "label": "interface()",
    "kind": "Method",
    "detail": "Function (\\ template<> GUID __emulated_uuidof<)",
    "insertText": "interface()"
  },
  {
    "label": "guid_from_string()",
    "kind": "Method",
    "detail": "Function (\\ const IID _IID =)",
    "insertText": "guid_from_string(spec)"
  },
  {
    "label": "__uuidof()",
    "kind": "Method",
    "detail": "Function (\\ return _IID ; \\ } # endif # define)",
    "insertText": "__uuidof(T) __emulated_uuidof<typename std::decay<T>::type>() #define IID_PPV_ARGS(ppType) \\ __uuidof(decltype(**(ppType))), reinterpret_cast<void **>(ppType) #else #ifndef CROSS_PLATFORM_UUIDOF #define CROSS_PLATFORM_UUIDOF(interface, spec) \\ struct __declspec(uuid(spec))"
  },
  {
    "label": "IID_PPV_ARGS_Helper()",
    "kind": "Method",
    "detail": "Function (# endif template<T> void**)",
    "insertText": "IID_PPV_ARGS_Helper(T **pp)"
  },
  {
    "label": "IID_PPV_ARGS()",
    "kind": "Method",
    "detail": "Function (} # define)",
    "insertText": "IID_PPV_ARGS(ppType) __uuidof(**(ppType)), IID_PPV_ARGS_Helper(ppType) #endif #define DEFINE_GUID(name, l, w1, w2, b1, b2, b3, b4, b5, b6, b7, b8)"
  },
  {
    "label": "DECLSPEC_UUID()",
    "kind": "Method",
    "detail": "Function (l,w1,w2,{ b1,b2,b3,b4,b5,b6,b7,b8 } } # define)",
    "insertText": "DECLSPEC_UUID(x) #define MIDL_INTERFACE(x) struct DECLSPEC_UUID(x) #define DECLARE_INTERFACE(iface) struct iface #define DECLARE_INTERFACE_(iface, parent) DECLARE_INTERFACE(iface) : parent CROSS_PLATFORM_UUIDOF(IUnknown, \"00000000-0000-0000-C000-000000000046\")"
  },
  {
    "label": "IUnknown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IUnknown()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (} ; HRESULT)",
    "insertText": "QueryInterface(REFIID riid, void **ppvObject)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (ULONG)",
    "insertText": "AddRef()"
  },
  {
    "label": "Release()",
    "kind": "Method",
    "detail": "Function (ULONG)",
    "insertText": "Release()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (template<class Q> HRESULT)",
    "insertText": "QueryInterface(Q **pp)"
  },
  {
    "label": "CROSS_PLATFORM_UUIDOF()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "CROSS_PLATFORM_UUIDOF(INoMarshal, \"ECC8691B-C1DB-4DC0-855E-65F6C551AF49\")"
  },
  {
    "label": "CROSS_PLATFORM_UUIDOF()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CROSS_PLATFORM_UUIDOF(IMalloc, \"00000002-0000-0000-C000-000000000046\")"
  },
  {
    "label": "Alloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Alloc(size_t size)"
  },
  {
    "label": "Realloc()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Realloc(void *ptr, size_t size)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void *ptr)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "GetSize(void *pv)"
  },
  {
    "label": "DidAlloc()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "DidAlloc(void *pv)"
  },
  {
    "label": "HeapMinimize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HeapMinimize(void)"
  },
  {
    "label": "CROSS_PLATFORM_UUIDOF()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CROSS_PLATFORM_UUIDOF(ISequentialStream, \"0C733A30-2A1C-11CE-ADE5-00AA0044773D\")"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Read(void *pv, ULONG cb, ULONG *pcbRead)"
  },
  {
    "label": "Write()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Write(const void *pv, ULONG cb, ULONG *pcbWritten)"
  },
  {
    "label": "CROSS_PLATFORM_UUIDOF()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CROSS_PLATFORM_UUIDOF(IStream, \"0000000c-0000-0000-C000-000000000046\")"
  },
  {
    "label": "Seek()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Seek(LARGE_INTEGER dlibMove, DWORD dwOrigin, ULARGE_INTEGER *plibNewPosition)"
  },
  {
    "label": "SetSize()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "SetSize(ULARGE_INTEGER libNewSize)"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "CopyTo(IStream *pstm, ULARGE_INTEGER cb, ULARGE_INTEGER *pcbRead, ULARGE_INTEGER *pcbWritten)"
  },
  {
    "label": "Commit()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Commit(DWORD grfCommitFlags)"
  },
  {
    "label": "Revert()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Revert(void)"
  },
  {
    "label": "LockRegion()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "LockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType)"
  },
  {
    "label": "UnlockRegion()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "UnlockRegion(ULARGE_INTEGER libOffset, ULARGE_INTEGER cb, DWORD dwLockType)"
  },
  {
    "label": "Stat()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Stat(STATSTG *pstatstg, DWORD grfStatFlag)"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (HRESULT)",
    "insertText": "Clone(IStream **ppstm)"
  },
  {
    "label": "CROSS_PLATFORM_UUIDOF()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "CROSS_PLATFORM_UUIDOF(ID3D12LibraryReflection, \"8E349D19-54DB-4A56-9DC9-119D87BDB804\") CROSS_PLATFORM_UUIDOF(ID3D12ShaderReflection, \"5A58797D-A72C-478D-8BA2-EFC6B0EFE88E\")"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (public : void*)",
    "insertText": "Reallocate(void *p, size_t nBytes) throw()"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Allocate(size_t nBytes) throw()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void *p) throw()"
  },
  {
    "label": "CComPtrBase()",
    "kind": "Method",
    "detail": "Function (} ; template<class T> class CComPtrBase { protected :)",
    "insertText": "CComPtrBase() throw()"
  },
  {
    "label": "CComPtrBase()",
    "kind": "Method",
    "detail": "Function (p = nullptr ; })",
    "insertText": "CComPtrBase(T *lp) throw()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p = lp ;)",
    "insertText": "if(p != nullptr) p->AddRef()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Swap(CComPtrBase &other)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (p = nullptr ; } } operator)",
    "insertText": "T() const throw()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(p == nullptr)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(T *pT) const throw()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (T* pTemp = p ;)",
    "insertText": "if(pTemp)"
  },
  {
    "label": "Attach()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "Attach(T *p2) throw()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ref != 0 || p2 != p)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (} p = p2 ; } T*)",
    "insertText": "Detach() throw()"
  },
  {
    "label": "CopyTo()",
    "kind": "Method",
    "detail": "Function (T* pt = p ; p = nullptr ; return pt ; } HRESULT)",
    "insertText": "CopyTo(T **ppT) throw()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(ppT != nullptr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (* ppT = p ;)",
    "insertText": "if(p) p->AddRef()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pp != nullptr)"
  },
  {
    "label": "CComPtr()",
    "kind": "Method",
    "detail": "Function (} T* p ; } ; template<class T> class CComPtr : public CComPtrBase<T> { public :)",
    "insertText": "CComPtr() throw()"
  },
  {
    "label": "CComPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CComPtr(T *lp) throw() : CComPtrBase<T>(lp)"
  },
  {
    "label": "CComPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CComPtr(const CComPtr<T> &lp) throw() : CComPtrBase<T>(lp.p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator(T *lp) throw()"
  },
  {
    "label": "CComPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CComPtr(lp).Swap(*this)"
  },
  {
    "label": "IsEqualObject()",
    "kind": "Method",
    "detail": "Function (} return* this ; } bool)",
    "insertText": "IsEqualObject(IUnknown *pOther) throw()"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (CComPtr<IUnknown> punk1 ; CComPtr<IUnknown> punk2 ; this -> p ->)",
    "insertText": "QueryInterface(__uuidof(IUnknown), (void **)&punk1)"
  },
  {
    "label": "QueryInterface()",
    "kind": "Method",
    "detail": "Function (pOther ->)",
    "insertText": "QueryInterface(__uuidof(IUnknown), (void **)&punk2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (IUnknown* pTemp =* pp ;)",
    "insertText": "if(lp == nullptr || FAILED(lp->QueryInterface(riid, (void **)pp)))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<Q> T*)",
    "insertText": "operator(const CComPtr<Q> &lp) throw()"
  },
  {
    "label": "ComPtrAssign()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ComPtrAssign((IUnknown **)&this->p, lp, __uuidof(T))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } T*)",
    "insertText": "operator(const CComPtr<T> &lp) throw()"
  },
  {
    "label": "CComPtr()",
    "kind": "Method",
    "detail": "Function (} return* this ; })",
    "insertText": "CComPtr(CComPtr<T> &&lp) throw() : CComPtrBase<T>()"
  },
  {
    "label": "Swap()",
    "kind": "Method",
    "detail": "Function (lp .)",
    "insertText": "Swap(*this)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "operator(CComPtr<T> &&lp) throw()"
  },
  {
    "label": "CComPtr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CComPtr(static_cast<CComPtr &&>(lp)).Swap(*this)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} return* this ; } } ; template<class T> class CSimpleArray : public std::vector<T> { public : bool)",
    "insertText": "Add(const T &t)"
  },
  {
    "label": "push_back()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "push_back(t)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} T*)",
    "insertText": "GetData()"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveAll()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "clear()"
  },
  {
    "label": "CHeapPtrBase()",
    "kind": "Method",
    "detail": "Function (} } ; template<class T,class Allocator = CAllocator> class CHeapPtrBase { protected :)",
    "insertText": "CHeapPtrBase() throw() : m_pData(NULL)"
  },
  {
    "label": "CHeapPtrBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CHeapPtrBase(CHeapPtrBase<T, Allocator> &p) throw()"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (m_pData = p .)",
    "insertText": "Detach()"
  },
  {
    "label": "CHeapPtrBase()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CHeapPtrBase(T *pData) throw() : m_pData(pData)"
  },
  {
    "label": "CHeapPtrBase()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "CHeapPtrBase() throw()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : CHeapPtrBase<T,Allocator>&)",
    "insertText": "operator(CHeapPtrBase<T, Allocator> &p) throw()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(m_pData != NULL)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(m_pData == NULL)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (m_pData = static_cast<)",
    "insertText": "T(Allocator::Allocate(nBytes * sizeof(char)))"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(m_pData)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (T* pTemp = m_pData ; m_pData = NULL ; return pTemp ; } void)",
    "insertText": "Free() throw()"
  },
  {
    "label": "ReallocateBytes()",
    "kind": "Method",
    "detail": "Function (m_pData = NULL ; } bool)",
    "insertText": "ReallocateBytes(size_t nBytes) throw()"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (T* pNew ; pNew = static_cast<)",
    "insertText": "T(Allocator::Reallocate(m_pData, nBytes * sizeof(char)))"
  },
  {
    "label": "CHeapPtr()",
    "kind": "Method",
    "detail": "Function (m_pData = pNew ; return true ; } public : T* m_pData ; } ; template<T,class Allocator = CAllocator> class CHeapPtr : public CHeapPtrBase<T,Allocator> { public :)",
    "insertText": "CHeapPtr() throw()"
  },
  {
    "label": "CHeapPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CHeapPtr(CHeapPtr<T, Allocator> &p) throw() : CHeapPtrBase<T, Allocator>(p)"
  },
  {
    "label": "CHeapPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "CHeapPtr(T *p) throw() : CHeapPtrBase<T, Allocator>(p)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} CHeapPtr<T>&)",
    "insertText": "operator(CHeapPtr<T, Allocator> &p) throw()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CHeapPtrBase<T,Allocator)",
    "insertText": "operator(p)"
  },
  {
    "label": "sizeof()",
    "kind": "Method",
    "detail": "Function (size_t nBytes = nElements*)",
    "insertText": "sizeof(T)"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Reallocate(size_t nElements) throw()"
  },
  {
    "label": "SysFreeString()",
    "kind": "Method",
    "detail": "Function (} } ; # define CComHeapPtr CHeapPtr void)",
    "insertText": "SysFreeString(BSTR bstrString)"
  },
  {
    "label": "SysAllocStringLen()",
    "kind": "Method",
    "detail": "Function (BSTR)",
    "insertText": "SysAllocStringLen(const OLECHAR *strIn, UINT ui)"
  },
  {
    "label": "CPToLocale()",
    "kind": "Method",
    "detail": "Function (# define CP_ACP 0 # define CP_UTF8 6 5 0 0 1 const char*)",
    "insertText": "CPToLocale(uint32_t CodePage)"
  },
  {
    "label": "CW2AEX()",
    "kind": "Method",
    "detail": "Function (template<int t_nBufferLength = 1 2 8> class CW2AEX { public :)",
    "insertText": "CW2AEX(LPCWSTR psz, UINT nCodePage = CP_UTF8)"
  },
  {
    "label": "CPToLocale()",
    "kind": "Method",
    "detail": "Function (const char* locale =)",
    "insertText": "CPToLocale(nCodePage)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(false && \"CW2AEX implementation for Linux only handles \" \"UTF8 and ACP code pages\")"
  },
  {
    "label": "setlocale()",
    "kind": "Method",
    "detail": "Function (m_psz = NULL ; return ; } locale =)",
    "insertText": "setlocale(LC_ALL, locale)"
  },
  {
    "label": "len()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "len(wcslen(psz) + 1)"
  },
  {
    "label": "wcstombs()",
    "kind": "Method",
    "detail": "Function (m_psz = new char [ len ] ;)",
    "insertText": "wcstombs(m_psz, psz, len)"
  },
  {
    "label": "CW2AEX()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CW2AEX()"
  },
  {
    "label": "LPSTR()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_psz ; } operator)",
    "insertText": "LPSTR()"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(false && \"CA2WEX implementation for Linux only handles \" \"UTF8 and ACP code pages\")"
  },
  {
    "label": "strlen()",
    "kind": "Method",
    "detail": "Function (int len =)",
    "insertText": "strlen(psz)"
  },
  {
    "label": "mbstowcs()",
    "kind": "Method",
    "detail": "Function (m_psz = new wchar_t [ len ] ;)",
    "insertText": "mbstowcs(m_psz, psz, len)"
  },
  {
    "label": "CA2WEX()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "CA2WEX()"
  },
  {
    "label": "LPWSTR()",
    "kind": "Method",
    "detail": "Function (delete [ ] m_psz ; } operator)",
    "insertText": "LPWSTR()"
  },
  {
    "label": "CHandle()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CHandle()"
  },
  {
    "label": "HANDLE()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "HANDLE() const throw()"
  }
]