[
  {
    "label": "UMovieSceneTimeWarpCurve",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneTimeWarpCurve"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Channels / MovieSceneTimeWarpChannel . h \" # include \" Variants / MovieSceneTimeWarpGetter . h \" # include \" MovieSceneTimeWarpCurve . generated . h \")",
    "insertText": "UCLASS(MinimalAPI, DisplayName=\"Time Warp Curve\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "GENERATED_BODY() UMovieSceneTimeWarpCurve()"
  },
  {
    "label": "RemapTime()",
    "kind": "Method",
    "detail": "Function (FFrameTime)",
    "insertText": "RemapTime(FFrameTime In)"
  },
  {
    "label": "InverseRemapTimeCycled()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "InverseRemapTimeCycled(FFrameTime InValue, FFrameTime InTimeHint, const UE::MovieScene::FInverseTransformTimeParams& Params)"
  },
  {
    "label": "ComputeTraversedHull()",
    "kind": "Method",
    "detail": "Function (TRange<FFrameTime>)",
    "insertText": "ComputeTraversedHull(const TRange<FFrameTime>& Range)"
  },
  {
    "label": "InverseRemapTimeWithinRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "InverseRemapTimeWithinRange(FFrameTime InTime, FFrameTime RangeStart, FFrameTime RangeEnd, const TFunctionRef<bool(FFrameTime)>& VisitorCallback)"
  },
  {
    "label": "InitializeDefaults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDefaults()"
  },
  {
    "label": "PopulateChannelProxy()",
    "kind": "Method",
    "detail": "Function (EMovieSceneChannelProxyType)",
    "insertText": "PopulateChannelProxy(FMovieSceneChannelProxyData& OutProxyData, EAllowTopLevelChannels AllowTopLevel)"
  },
  {
    "label": "DeleteChannel()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DeleteChannel(FMovieSceneTimeWarpVariant& OutVariant, FName ChannelName)"
  },
  {
    "label": "ScaleBy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScaleBy(double UnwarpedScaleFactor)"
  },
  {
    "label": "GetDomain()",
    "kind": "Method",
    "detail": "Function (UE::MovieScene::ETimeWarpChannelDomain)",
    "insertText": "GetDomain()"
  }
]