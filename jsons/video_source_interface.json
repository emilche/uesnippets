[
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "FrameSize",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FrameSize"
  },
  {
    "label": "Aggregates",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Aggregates"
  },
  {
    "label": "VideoSourceInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSourceInterface"
  },
  {
    "label": "FrameSize()",
    "kind": "Method",
    "detail": "Function (# ifndef API_VIDEO_VIDEO_SOURCE_INTERFACE_H_ # define API_VIDEO_VIDEO_SOURCE_INTERFACE_H_ # include<limits> # include<vector> # include \" absl / types / optional . h \" # include \" api / video / video_sink_interface . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { struct RTC_EXPORT VideoSinkWants { struct FrameSize {)",
    "insertText": "FrameSize(int width, int height) : width(width), height(height)"
  },
  {
    "label": "FrameSize()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FrameSize(const FrameSize&)"
  },
  {
    "label": "FrameSize()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FrameSize()"
  },
  {
    "label": "VideoSinkWants()",
    "kind": "Method",
    "detail": "Function (int width ; int height ; } ;)",
    "insertText": "VideoSinkWants()"
  },
  {
    "label": "VideoSinkWants()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VideoSinkWants(const VideoSinkWants&)"
  },
  {
    "label": "max()",
    "kind": "Method",
    "detail": "Function (bool rotation_applied = false ; bool black_frames = false ; int max_pixel_count = std::numeric_limits<int)",
    "insertText": "max()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (int resolution_alignment = 1 ; std::vector<FrameSize> resolutions ; absl::optional<FrameSize> requested_resolution ; bool is_active = true ; struct Aggregates { bool any_active_without_requested_resolution = false ; } ; absl::optional<Aggregates> aggregates ; } ; bool)",
    "insertText": "operator(const VideoSinkWants::FrameSize& a, const VideoSinkWants::FrameSize& b)"
  },
  {
    "label": "VideoSourceInterface()",
    "kind": "Method",
    "detail": "Function (} template<VideoFrameT> class VideoSourceInterface { public : ~)",
    "insertText": "VideoSourceInterface()"
  },
  {
    "label": "AddOrUpdateSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddOrUpdateSink(VideoSinkInterface<VideoFrameT>* sink, const VideoSinkWants& wants)"
  },
  {
    "label": "RemoveSink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveSink(VideoSinkInterface<VideoFrameT>* sink)"
  },
  {
    "label": "RequestRefreshFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestRefreshFrame()"
  }
]