[
  {
    "label": "TridiagonalizationMatrixTReturnType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TridiagonalizationMatrixTReturnType"
  },
  {
    "label": "traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "traits"
  },
  {
    "label": "Tridiagonalization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Tridiagonalization"
  },
  {
    "label": "tridiagonalization_inplace_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tridiagonalization_inplace_selector"
  },
  {
    "label": "tridiagonalization_inplace()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_TRIDIAGONALIZATION_H # define EIGEN_TRIDIAGONALIZATION_H namespace Eigen { namespace internal { template<MatrixType> struct TridiagonalizationMatrixTReturnType ; template<MatrixType> struct traits<TridiagonalizationMatrixTReturnType<MatrixType>> : public traits<MatrixType::PlainObject> { typedef MatrixType::PlainObject ReturnType ; enum { Flags = 0 } ; } ; template<MatrixType,CoeffVectorType> EIGEN_DEVICE_FUNC void)",
    "insertText": "tridiagonalization_inplace(MatrixType& matA, CoeffVectorType& hCoeffs)"
  },
  {
    "label": "Dynamic()",
    "kind": "Method",
    "detail": "Function (} template<_MatrixType> class Tridiagonalization { public : typedef _MatrixType MatrixType ; typedef MatrixType::Scalar Scalar ; typedef NumTraits<Scalar>::Real RealScalar ; typedef Eigen::Index Index ; enum { Size = MatrixType::RowsAtCompileTime,SizeMinusOne = Size = = Dynamic ?)",
    "insertText": "Dynamic(Size > 1 ? Size - 1 : 1), Options = MatrixType::Options, MaxSize = MatrixType::MaxRowsAtCompileTime, MaxSizeMinusOne = MaxSize == Dynamic ? Dynamic : (MaxSize > 1 ? MaxSize - 1 : 1)"
  },
  {
    "label": "Tridiagonalization()",
    "kind": "Method",
    "detail": "Function (typedef Matrix<Scalar,SizeMinusOne,1,Options& ~ RowMajor,MaxSizeMinusOne,1> CoeffVectorType ; typedef internal::plain_col_type<MatrixType,RealScalar>::type DiagonalType ; typedef Matrix<RealScalar,SizeMinusOne,1,Options& ~ RowMajor,MaxSizeMinusOne,1> SubDiagonalType ; typedef internal::remove_all<MatrixType::RealReturnType>::type MatrixTypeRealView ; typedef internal::TridiagonalizationMatrixTReturnType<MatrixTypeRealView> MatrixTReturnType ; typedef internal::conditional<NumTraits<Scalar>::IsComplex,internal::add_const_on_value_type<Diagonal<const MatrixType>::RealReturnType>::type,const Diagonal<const MatrixType>>::type DiagonalReturnType ; typedef internal::conditional<NumTraits<Scalar>::IsComplex,internal::add_const_on_value_type<Diagonal<const MatrixType,- 1>::RealReturnType>::type,const Diagonal<const MatrixType,- 1>>::type SubDiagonalReturnType ; typedef HouseholderSequence<MatrixType,internal::remove_all<CoeffVectorType::ConjugateReturnType>::type> HouseholderSequenceType ;)",
    "insertText": "Tridiagonalization(Index size = Size==Dynamic ? 2 : Size) : m_matrix(size,size), m_hCoeffs(size > 1 ? size-1 : 1), m_isInitialized(false)"
  },
  {
    "label": "Tridiagonalization()",
    "kind": "Method",
    "detail": "Function (} template<InputType>)",
    "insertText": "Tridiagonalization(const EigenBase<InputType>& matrix) : m_matrix(matrix.derived()), m_hCoeffs(matrix.cols() > 1 ? matrix.cols()-1 : 1), m_isInitialized(false)"
  },
  {
    "label": "tridiagonalization_inplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tridiagonalization_inplace(m_matrix, m_hCoeffs)"
  },
  {
    "label": "compute()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; } template<InputType> Tridiagonalization&)",
    "insertText": "compute(const EigenBase<InputType>& matrix)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (m_matrix = matrix .)",
    "insertText": "derived()"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (m_hCoeffs .)",
    "insertText": "resize(matrix.rows()-1, 1)"
  },
  {
    "label": "householderCoefficients()",
    "kind": "Method",
    "detail": "Function (m_isInitialized = true ; return* this ; } CoeffVectorType)",
    "insertText": "householderCoefficients()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(m_isInitialized && \"Tridiagonalization is not initialized.\")"
  },
  {
    "label": "matrixT()",
    "kind": "Method",
    "detail": "Function (} MatrixTReturnType)",
    "insertText": "matrixT()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (} DiagonalReturnType)",
    "insertText": "diagonal()"
  },
  {
    "label": "subDiagonal()",
    "kind": "Method",
    "detail": "Function (SubDiagonalReturnType)",
    "insertText": "subDiagonal()"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (using numext::conj ; typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; Index n = matA .)",
    "insertText": "rows()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==matA.cols())"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(n==hCoeffs.size()+1 || n==1)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (Index remainingSize = n - i - 1 ; RealScalar beta ; Scalar h ; matA .)",
    "insertText": "col(i).tail(remainingSize).makeHouseholderInPlace(h, beta)"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (matA .)",
    "insertText": "col(i).coeffRef(i+1)"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (hCoeffs .)",
    "insertText": "tail(n-i-1).noalias() = (matA.bottomRightCorner(remainingSize,remainingSize).template selfadjointView<Lower>() * (conj(h) * matA.col(i).tail(remainingSize)))"
  },
  {
    "label": "tail()",
    "kind": "Method",
    "detail": "Function (hCoeffs .)",
    "insertText": "tail(n-i-1) += (conj(h)*RealScalar(-0.5)*(hCoeffs.tail(remainingSize).dot(matA.col(i).tail(remainingSize)))) * matA.col(i).tail(n-i-1)"
  },
  {
    "label": "bottomRightCorner()",
    "kind": "Method",
    "detail": "Function (matA .)",
    "insertText": "bottomRightCorner(remainingSize, remainingSize).template selfadjointView<Lower>() .rankUpdate(matA.col(i).tail(remainingSize), hCoeffs.tail(remainingSize), Scalar(-1))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (hCoeffs .)",
    "insertText": "coeffRef(i)"
  },
  {
    "label": "tridiagonalization_inplace()",
    "kind": "Method",
    "detail": "Function (} } template<MatrixType,int Size = MatrixType::ColsAtCompileTime,bool IsComplex = NumTraits<MatrixType::Scalar>::IsComplex> struct tridiagonalization_inplace_selector ; template<MatrixType,DiagonalType,SubDiagonalType,CoeffVectorType> EIGEN_DEVICE_FUNC void)",
    "insertText": "tridiagonalization_inplace(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, CoeffVectorType& hcoeffs, bool extractQ)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(mat.cols()==mat.rows() && diag.size()==mat.rows() && subdiag.size()==mat.rows()-1)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (tridiagonalization_inplace_selector<MatrixType)",
    "insertText": "run(mat, diag, subdiag, hcoeffs, extractQ)"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<MatrixType,int Size,bool IsComplex> struct tridiagonalization_inplace_selector { typedef Tridiagonalization<MatrixType>::CoeffVectorType CoeffVectorType ; typedef Tridiagonalization<MatrixType>::HouseholderSequenceType HouseholderSequenceType ; template<DiagonalType,SubDiagonalType> EIGEN_DEVICE_FUNC void)",
    "insertText": "run(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, CoeffVectorType& hCoeffs, bool extractQ)"
  },
  {
    "label": "tridiagonalization_inplace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "tridiagonalization_inplace(mat, hCoeffs)"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (diag = mat .)",
    "insertText": "diagonal().real()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType> struct tridiagonalization_inplace_selector<MatrixType,3,false> { typedef MatrixType::Scalar Scalar ; typedef MatrixType::RealScalar RealScalar ; template<DiagonalType,SubDiagonalType,CoeffVectorType> void)",
    "insertText": "run(MatrixType& mat, DiagonalType& diag, SubDiagonalType& subdiag, CoeffVectorType&, bool extractQ)"
  },
  {
    "label": "tol()",
    "kind": "Method",
    "detail": "Function (using std::sqrt ; const RealScalar)",
    "insertText": "tol(std::numeric_limits<RealScalar>::min)()"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (diag [ 0 ] =)",
    "insertText": "mat(0,0)"
  },
  {
    "label": "abs2()",
    "kind": "Method",
    "detail": "Function (RealScalar v1norm2 =)",
    "insertText": "abs2(mat(2,0))"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (diag [ 1 ] =)",
    "insertText": "mat(1,1)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (diag [ 2 ] =)",
    "insertText": "mat(2,2)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (subdiag [ 0 ] =)",
    "insertText": "mat(1,0)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (subdiag [ 1 ] =)",
    "insertText": "mat(2,1)"
  },
  {
    "label": "sqrt()",
    "kind": "Method",
    "detail": "Function (} else { RealScalar beta =)",
    "insertText": "sqrt(numext::abs2(mat(1,0)) + v1norm2)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (RealScalar invBeta =)",
    "insertText": "RealScalar(1)"
  },
  {
    "label": "mat()",
    "kind": "Method",
    "detail": "Function (Scalar m02 =)",
    "insertText": "mat(2,0)"
  },
  {
    "label": "RealScalar()",
    "kind": "Method",
    "detail": "Function (Scalar q =)",
    "insertText": "RealScalar(2)*m01*mat(2,1) + m02*(mat(2,2) - mat(1,1))"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (mat<<1,0,0,0,m01,m02,0,m02,- m01 ; } } } } ; template<MatrixType,bool IsComplex> struct tridiagonalization_inplace_selector<MatrixType,1,IsComplex> { typedef MatrixType::Scalar Scalar ; template<DiagonalType,SubDiagonalType,CoeffVectorType> EIGEN_DEVICE_FUNC void)",
    "insertText": "run(MatrixType& mat, DiagonalType& diag, SubDiagonalType&, CoeffVectorType&, bool extractQ)"
  },
  {
    "label": "diag()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "diag(0,0) = numext::real(mat(0,0))"
  },
  {
    "label": "TridiagonalizationMatrixTReturnType()",
    "kind": "Method",
    "detail": "Function (} } ; template<MatrixType> struct TridiagonalizationMatrixTReturnType : public ReturnByValue<TridiagonalizationMatrixTReturnType<MatrixType>> { public :)",
    "insertText": "TridiagonalizationMatrixTReturnType(const MatrixType& mat) : m_matrix(mat)"
  },
  {
    "label": "evalTo()",
    "kind": "Method",
    "detail": "Function (} template<ResultType> void)",
    "insertText": "evalTo(ResultType& result)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "setZero()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (result . template)",
    "insertText": "diagonal() = m_matrix.template diagonal<-1>().conjugate()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (result .)",
    "insertText": "diagonal() = m_matrix.diagonal()"
  },
  {
    "label": "diagonal()",
    "kind": "Method",
    "detail": "Function (result . template)",
    "insertText": "diagonal() = m_matrix.template diagonal<-1>()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_CONSTEXPR Index)",
    "insertText": "cols()"
  }
]