[
  {
    "label": "FTypedElementReference",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTypedElementReference"
  },
  {
    "label": "FTypedElementReferences",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTypedElementReferences"
  },
  {
    "label": "FTypedElementInternalData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTypedElementInternalData"
  },
  {
    "label": "TTypedElementInternalData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTypedElementInternalData"
  },
  {
    "label": "FScriptTypedElementInternalDataPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptTypedElementInternalDataPtr"
  },
  {
    "label": "FScriptTypedElementInternalDataControlBlock",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FScriptTypedElementInternalDataControlBlock"
  },
  {
    "label": "FScriptTypedElementInternalDataOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScriptTypedElementInternalDataOwner"
  },
  {
    "label": "TTypedElementInternalDataStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TTypedElementInternalDataStore"
  },
  {
    "label": "UE_DECLARE_TYPED_ELEMENT_DATA_RTTI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeLock . h \" # include \" Misc / ScopeRWLock . h \" # include \" HAL / PlatformStackWalk . h \" # include \" Containers / SparseArray . h \" # include \" Containers / ChunkedArray . h \" # include \" Elements / Framework / TypedElementId . h \" # define)",
    "insertText": "UE_DECLARE_TYPED_ELEMENT_DATA_RTTI(ELEMENT_DATA_TYPE)"
  },
  {
    "label": "StaticTypeId()",
    "kind": "Method",
    "detail": "Function (\\ FTypedHandleTypeId)",
    "insertText": "StaticTypeId()"
  },
  {
    "label": "UE_DEFINE_TYPED_ELEMENT_DATA_RTTI()",
    "kind": "Method",
    "detail": "Function (const FName = # ELEMENT_DATA_TYPE ; return ; } # define)",
    "insertText": "UE_DEFINE_TYPED_ELEMENT_DATA_RTTI(ELEMENT_DATA_TYPE)"
  },
  {
    "label": "GetTypedElementDebugId()",
    "kind": "Method",
    "detail": "Function (template<ElementDataType> FString)",
    "insertText": "GetTypedElementDebugId(const ElementDataType& InElementData)"
  },
  {
    "label": "FTypedElementReference()",
    "kind": "Method",
    "detail": "Function (} # if UE_TYPED_ELEMENT_HAS_REFTRACKING class FTypedElementReference { public :)",
    "insertText": "FTypedElementReference()"
  },
  {
    "label": "CaptureStackBackTrace()",
    "kind": "Method",
    "detail": "Function (CallstackDepth =)",
    "insertText": "CaptureStackBackTrace(Callstack, UE_ARRAY_COUNT(Callstack))"
  },
  {
    "label": "FTypedElementReference()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FTypedElementReference(const FTypedElementReference&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementReference&)",
    "insertText": "operator(const FTypedElementReference&)"
  },
  {
    "label": "FTypedElementReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementReference(FTypedElementReference&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementReference&)",
    "insertText": "operator(FTypedElementReference&&)"
  },
  {
    "label": "LogReference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LogReference()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (ANSICHAR CallstackText [ 4 0 9 6 ] ;)",
    "insertText": "for(uint32 CallstackIndex = TypedHandleRefTrackingSkipCount; CallstackIndex < CallstackDepth; ++CallstackIndex)"
  },
  {
    "label": "ProgramCounterToHumanReadableString()",
    "kind": "Method",
    "detail": "Function (CallstackText [ 0 ] = 0 ;)",
    "insertText": "ProgramCounterToHumanReadableString(CallstackIndex - TypedHandleRefTrackingSkipCount, Callstack[CallstackIndex], CallstackText, UE_ARRAY_COUNT(CallstackText))"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} } private : uint64 Callstack [ TypedHandleRefTrackingDepth + TypedHandleRefTrackingSkipCount ] ; uint32 CallstackDepth = 0 ; } ; class FTypedElementReferences { public : TUniquePtr<FTypedElementReferences>)",
    "insertText": "Create()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reset()"
  },
  {
    "label": "ReferencesLock()",
    "kind": "Method",
    "detail": "Function (FScopeLock)",
    "insertText": "ReferencesLock(&ReferencesCS)"
  },
  {
    "label": "AddRef()",
    "kind": "Method",
    "detail": "Function (} FTypedElementReferenceId)",
    "insertText": "AddRef()"
  },
  {
    "label": "ReleaseRef()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReleaseRef(const FTypedElementReferenceId InReferenceId)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (References .)",
    "insertText": "RemoveAt(InReferenceId)"
  },
  {
    "label": "LogReferences()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "LogReferences()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UE_LOG(LogCore, Error, TEXT(\"===============================================\"))"
  },
  {
    "label": "StoreDestructionRequestCallstack()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "StoreDestructionRequestCallstack()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if DO_CHECK)",
    "insertText": "if(DestructionRequestCallstack)"
  },
  {
    "label": "ReferenceTrackingEnabled()",
    "kind": "Method",
    "detail": "Function (} private : bool)",
    "insertText": "ReferenceTrackingEnabled()"
  },
  {
    "label": "FTypedElementInternalData()",
    "kind": "Method",
    "detail": "Function (FCriticalSection ReferencesCS ; TSparseArray<FTypedElementReference> References ; TUniquePtr<FTypedElementReference> DestructionRequestCallstack ; } ; # endif class FTypedElementInternalData { public :)",
    "insertText": "FTypedElementInternalData()"
  },
  {
    "label": "FTypedElementInternalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementInternalData(const FTypedElementInternalData&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementInternalData&)",
    "insertText": "operator(const FTypedElementInternalData&)"
  },
  {
    "label": "FTypedElementInternalData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTypedElementInternalData(FTypedElementInternalData&& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FTypedElementInternalData&)",
    "insertText": "operator(FTypedElementInternalData&&)"
  },
  {
    "label": "Private_DestroyNoRef()",
    "kind": "Method",
    "detail": "Function (Id .)",
    "insertText": "Private_DestroyNoRef()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(const FTypedHandleTypeId InTypeId, const FTypedHandleElementId InElementId)"
  },
  {
    "label": "Private_InitializeNoRef()",
    "kind": "Method",
    "detail": "Function (Id .)",
    "insertText": "Private_InitializeNoRef(InTypeId, InElementId)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# if UE_TYPED_ELEMENT_HAS_REFTRACKING)",
    "insertText": "if(!References)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (# if UE_TYPED_ELEMENT_HAS_REFCOUNTING)",
    "insertText": "InterlockedExchange(&RefCount, 0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # if UE_TYPED_ELEMENT_HAS_REFTRACKING)",
    "insertText": "if(References)"
  },
  {
    "label": "GetId()",
    "kind": "Method",
    "detail": "Function (} # endif } const FTypedElementId&)",
    "insertText": "GetId()"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (FTypedElementReferenceId ReferenceId = INDEX_NONE ; # if UE_TYPED_ELEMENT_HAS_REFCOUNTING)",
    "insertText": "checkSlow(RefCount < TNumericLimits<FTypedElementRefCount>::Max())"
  },
  {
    "label": "InterlockedIncrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedIncrement(&RefCount)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# endif # if UE_TYPED_ELEMENT_HAS_REFTRACKING)",
    "insertText": "if(bCanTrackReference && References)"
  },
  {
    "label": "checkSlow()",
    "kind": "Method",
    "detail": "Function (# if UE_TYPED_ELEMENT_HAS_REFCOUNTING)",
    "insertText": "checkSlow(RefCount > 0)"
  },
  {
    "label": "InterlockedDecrement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedDecrement(&RefCount)"
  },
  {
    "label": "ReleaseRef()",
    "kind": "Method",
    "detail": "Function (References ->)",
    "insertText": "ReleaseRef(InReferenceId)"
  },
  {
    "label": "GetRefCount()",
    "kind": "Method",
    "detail": "Function (} # endif } FTypedElementRefCount)",
    "insertText": "GetRefCount()"
  },
  {
    "label": "AtomicRead()",
    "kind": "Method",
    "detail": "Function (# if UE_TYPED_ELEMENT_HAS_REFCOUNTING return)",
    "insertText": "AtomicRead(&RefCount)"
  },
  {
    "label": "LogExternalReferencesOnDestruction()",
    "kind": "Method",
    "detail": "Function (} # endif } void)",
    "insertText": "LogExternalReferencesOnDestruction()"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (# if UE_TYPED_ELEMENT_HAS_REFTRACKING)",
    "insertText": "UE_LOG(LogCore, Warning, TEXT(\"Element '%s' is still externally referenced when being destroyed. Ref-count: %d;\"), *GetDebugId(), LocalRefCount)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "UE_LOG(LogCore, Warning, TEXT(\"Enable CVar 'TypedElements.EnableReferenceTracking' for Element reference tracking.\"))"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "UE_LOG(LogCore, Warning, TEXT(\"Element '%s' is still externally referenced when being destroyed. Ref-count: %d\"), *GetDebugId(), LocalRefCount)"
  },
  {
    "label": "GetUntypedData()",
    "kind": "Method",
    "detail": "Function (# endif } # endif } const void*)",
    "insertText": "GetUntypedData()"
  },
  {
    "label": "ElementDataType()",
    "kind": "Method",
    "detail": "Function (Data =)",
    "insertText": "ElementDataType()"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (} const ElementDataType&)",
    "insertText": "GetData()"
  },
  {
    "label": "GetTypedElementDebugId()",
    "kind": "Method",
    "detail": "Function (const FString ElementDebugId =)",
    "insertText": "GetTypedElementDebugId(Data)"
  },
  {
    "label": "FScriptTypedElementInternalDataPtr()",
    "kind": "Method",
    "detail": "Function (} private : ElementDataType Data ; } ; template<> class TTypedElementInternalData<void> : public FTypedElementInternalData { } ; class FScriptTypedElementInternalDataPtr { public :)",
    "insertText": "FScriptTypedElementInternalDataPtr()"
  },
  {
    "label": "DecrementCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecrementCount()"
  },
  {
    "label": "FScriptTypedElementInternalDataPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptTypedElementInternalDataPtr(const FScriptTypedElementInternalDataPtr& Other) : ControlBlock(Other.ControlBlock)"
  },
  {
    "label": "IncrementCount()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncrementCount()"
  },
  {
    "label": "FScriptTypedElementInternalDataPtr()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptTypedElementInternalDataPtr(FScriptTypedElementInternalDataPtr&& Other) : ControlBlock(Other.ControlBlock)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Other . ControlBlock = nullptr ; } FScriptTypedElementInternalDataPtr&)",
    "insertText": "operator(const FScriptTypedElementInternalDataPtr& Other)"
  },
  {
    "label": "IsSet()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSet()"
  },
  {
    "label": "GetInternalData()",
    "kind": "Method",
    "detail": "Function (} } return FTypedElementId::Unset ; } FTypedElementInternalData*)",
    "insertText": "GetInternalData()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (- - ControlBlock -> WeakRefCount ;)",
    "insertText": "if(ControlBlock->WeakRefCount == 0)"
  },
  {
    "label": "FScriptTypedElementInternalDataPtr()",
    "kind": "Method",
    "detail": "Function (delete ControlBlock ; ControlBlock = nullptr ; } } })",
    "insertText": "FScriptTypedElementInternalDataPtr(FTypedElementInternalData& InternalData) : ControlBlock(new FScriptTypedElementInternalDataControlBlock(InternalData))"
  },
  {
    "label": "FScriptTypedElementInternalDataControlBlock()",
    "kind": "Method",
    "detail": "Function (} struct FScriptTypedElementInternalDataControlBlock {)",
    "insertText": "FScriptTypedElementInternalDataControlBlock(FTypedElementInternalData& InData) : Data(&InData)"
  },
  {
    "label": "FScriptTypedElementInternalDataControlBlock()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FScriptTypedElementInternalDataControlBlock()"
  },
  {
    "label": "FScriptTypedElementInternalDataControlBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScriptTypedElementInternalDataControlBlock(const FScriptTypedElementInternalDataControlBlock&)"
  },
  {
    "label": "FScriptTypedElementInternalDataControlBlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FScriptTypedElementInternalDataControlBlock(FScriptTypedElementInternalDataControlBlock&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScriptTypedElementInternalDataControlBlock&)",
    "insertText": "operator(const FScriptTypedElementInternalDataControlBlock&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FScriptTypedElementInternalDataControlBlock&)",
    "insertText": "operator(FScriptTypedElementInternalDataControlBlock&&)"
  },
  {
    "label": "FScriptTypedElementInternalDataOwner()",
    "kind": "Method",
    "detail": "Function (FTypedElementInternalData* Data = nullptr ; FTypedElementRefCount WeakRefCount = 0 ; } ; FScriptTypedElementInternalDataControlBlock* ControlBlock = nullptr ; } ; class FScriptTypedElementInternalDataOwner : public FScriptTypedElementInternalDataPtr { public :)",
    "insertText": "FScriptTypedElementInternalDataOwner(FTypedElementInternalData& InInternalData) : FScriptTypedElementInternalDataPtr(InInternalData)"
  },
  {
    "label": "FScriptTypedElementInternalDataControlBlock()",
    "kind": "Method",
    "detail": "Function (ControlBlock = new)",
    "insertText": "FScriptTypedElementInternalDataControlBlock(InInternalData)"
  },
  {
    "label": "FScriptTypedElementInternalDataOwner()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScriptTypedElementInternalDataOwner()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (ControlBlock = nullptr ; } } ; template<ElementDataType> class TTypedElementInternalDataStore { public :)",
    "insertText": "static_assert(TNumericLimits<int32>::Max() >= TypedHandleMaxElementId, \"TTypedElementInternalDataStore internally uses signed 32-bit indices so cannot store TypedHandleMaxElementId! Consider making this container 64-bit aware, or explicitly remove this compile time check.\")"
  },
  {
    "label": "AddDataForElement()",
    "kind": "Method",
    "detail": "Function (TTypedElementInternalData<ElementDataType>&)",
    "insertText": "AddDataForElement(const FTypedHandleTypeId InTypeId, FTypedHandleElementId& InOutElementId)"
  },
  {
    "label": "InternalDataLock()",
    "kind": "Method",
    "detail": "Function (FWriteScopeLock)",
    "insertText": "InternalDataLock(InternalDataRW)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (InOutElementId = InternalDataFreeIndices .)",
    "insertText": "Num() > 0 ? InternalDataFreeIndices.Pop(EAllowShrinking::No) : InternalDataArray.Add()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (TTypedElementInternalData<ElementDataType>& InternalData = InternalDataArray [ InOutElementId ] ; InternalData .)",
    "insertText": "Initialize(InTypeId, InOutElementId)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32 Hash =)",
    "insertText": "GetTypeHash(InElementId)"
  },
  {
    "label": "DisableScriptHandlesForElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "DisableScriptHandlesForElement(const FTypedHandleElementId InElementId)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ScriptInternalDataMap .)",
    "insertText": "Remove(InElementId)"
  },
  {
    "label": "RemoveDataForElement()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveDataForElement(const FTypedHandleElementId InElementId, const FTypedElementInternalData* InExpectedDataPtr)"
  },
  {
    "label": "checkf()",
    "kind": "Method",
    "detail": "Function (TTypedElementInternalData<ElementDataType>& InternalData = InternalDataArray [ InElementId ] ;)",
    "insertText": "checkf(InExpectedDataPtr == &InternalData, TEXT(\"Internal data pointer did not match the expected value! Does this handle belong to a different element registry?\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InternalDataFreeIndices .)",
    "insertText": "Add(InElementId)"
  },
  {
    "label": "GetDataForElement()",
    "kind": "Method",
    "detail": "Function (} const TTypedElementInternalData<ElementDataType>&)",
    "insertText": "GetDataForElement(const FTypedHandleElementId InElementId)"
  },
  {
    "label": "StaticDataTypeId()",
    "kind": "Method",
    "detail": "Function (ElementDataType::Private_RegisteredTypeId = InTypeId ; } FTypedHandleTypeId)",
    "insertText": "StaticDataTypeId()"
  },
  {
    "label": "StaticDataTypeName()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "StaticDataTypeName()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ElementIdToArrayIndex .)",
    "insertText": "Add(InOutElementId, InternalDataArrayIndex)"
  },
  {
    "label": "FindChecked()",
    "kind": "Method",
    "detail": "Function (const int32 Index = ElementIdToArrayIndex .)",
    "insertText": "FindChecked(InElementId)"
  },
  {
    "label": "RemoveAndCopyValue()",
    "kind": "Method",
    "detail": "Function (int32 InternalDataArrayIndex = INDEX_NONE ; ElementIdToArrayIndex .)",
    "insertText": "RemoveAndCopyValue(InElementId, InternalDataArrayIndex)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InternalDataFreeIndices .)",
    "insertText": "Add(InternalDataArrayIndex)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (const int32* InternalDataArrayIndexPtr = ElementIdToArrayIndex .)",
    "insertText": "Find(InElementId)"
  }
]