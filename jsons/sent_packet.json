[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "RTC_EXPORT",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RTC_EXPORT"
  },
  {
    "label": "PacketInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_NETWORK_SENT_PACKET_H_ # define RTC_BASE_NETWORK_SENT_PACKET_H_ # include<stddef . h> # include<stdint . h> # include \" absl / types / optional . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { enum class PacketType { kUnknown,kData,kIceConnectivityCheck,kIceConnectivityCheckResponse,kStunMessage,kTurnMessage,} ; enum class PacketInfoProtocolType { kUnknown,kUdp,kTcp,kSsltcp,kTls,} ; struct RTC_EXPORT PacketInfo {)",
    "insertText": "PacketInfo()"
  },
  {
    "label": "PacketInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PacketInfo(const PacketInfo& info)"
  },
  {
    "label": "SentPacket()",
    "kind": "Method",
    "detail": "Function (bool included_in_feedback = false ; bool included_in_allocation = false ; PacketType packet_type = PacketType::kUnknown ; PacketInfoProtocolType protocol = PacketInfoProtocolType::kUnknown ; absl::optional<uint16_t> network_id ; size_t packet_size_bytes = 0 ; size_t turn_overhead_bytes = 0 ; size_t ip_overhead_bytes = 0 ; } ; struct RTC_EXPORT SentPacket {)",
    "insertText": "SentPacket()"
  },
  {
    "label": "SentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SentPacket(int64_t packet_id, int64_t send_time_ms)"
  },
  {
    "label": "SentPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SentPacket(int64_t packet_id, int64_t send_time_ms, const rtc::PacketInfo& info)"
  }
]