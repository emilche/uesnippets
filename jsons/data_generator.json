[
  {
    "label": "DataGeneratorOptions",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "DataGeneratorOptions"
  },
  {
    "label": "DataGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataGenerator"
  },
  {
    "label": "StreamID()",
    "kind": "Method",
    "detail": "Function (# ifndef NET_DCSCTP_TESTING_DATA_GENERATOR_H_ # define NET_DCSCTP_TESTING_DATA_GENERATOR_H_ # include<cstdint> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" net / dcsctp / common / internal_types . h \" # include \" net / dcsctp / packet / data . h \" namespace dcsctp { struct DataGeneratorOptions { StreamID stream_id =)",
    "insertText": "StreamID(1)"
  },
  {
    "label": "PPID()",
    "kind": "Method",
    "detail": "Function (absl::optional<MID> message_id = absl::nullopt ; PPID ppid =)",
    "insertText": "PPID(53)"
  },
  {
    "label": "DataGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class DataGenerator { public :)",
    "insertText": "DataGenerator(MID start_message_id = MID(0)) : message_id_(start_message_id)"
  },
  {
    "label": "Ordered()",
    "kind": "Method",
    "detail": "Function (} Data)",
    "insertText": "Ordered(std::vector<uint8_t> payload, absl::string_view flags = \"\", DataGeneratorOptions opts = {})"
  },
  {
    "label": "Unordered()",
    "kind": "Method",
    "detail": "Function (Data)",
    "insertText": "Unordered(std::vector<uint8_t> payload, absl::string_view flags = \"\", DataGeneratorOptions opts = {})"
  },
  {
    "label": "ResetStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetStream()"
  },
  {
    "label": "MID()",
    "kind": "Method",
    "detail": "Function (message_id_ =)",
    "insertText": "MID(0)"
  },
  {
    "label": "FSN()",
    "kind": "Method",
    "detail": "Function (} private : MID message_id_ ; FSN fsn_ =)",
    "insertText": "FSN(0)"
  }
]