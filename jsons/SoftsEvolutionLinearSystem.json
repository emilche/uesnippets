[
  {
    "label": "FEvolutionLinearSystemSolverParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEvolutionLinearSystemSolverParameters"
  },
  {
    "label": "FEvolutionLinearSystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FEvolutionLinearSystem"
  },
  {
    "label": "DefaultCGTolerance()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / CollectionPropertyFacade . h \" # include \" Chaos / Math / BlockSparseLinearSystem . h \" namespace Chaos::Softs { struct FEvolutionLinearSystemSolverParameters { int32 DefaultMaxNumCGIterations = 5 0 ; FSolverReal)",
    "insertText": "DefaultCGTolerance(FSolverReal)"
  },
  {
    "label": "FEvolutionLinearSystemSolverParameters()",
    "kind": "Method",
    "detail": "Function (bool bDefaultCheckCGResidual = false ;)",
    "insertText": "FEvolutionLinearSystemSolverParameters()"
  },
  {
    "label": "FEvolutionLinearSystemSolverParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEvolutionLinearSystemSolverParameters(bool bInDoQuasistatics, bool bInXPBDInitialGuess, int32 InMaxNumCGIterations, FSolverReal InCGResidualTolerance, bool bInCheckResidual) : bDoQuasistatics(bInDoQuasistatics) , bXPBDInitialGuess(bInXPBDInitialGuess) , MaxNumCGIterations(InMaxNumCGIterations) , CGResidualTolerance(InCGResidualTolerance) , bCheckCGResidual(bInCheckResidual)"
  },
  {
    "label": "FEvolutionLinearSystemSolverParameters()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FEvolutionLinearSystemSolverParameters(const FEvolutionLinearSystemSolverParameters&)"
  },
  {
    "label": "FEvolutionLinearSystemSolverParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEvolutionLinearSystemSolverParameters(FEvolutionLinearSystemSolverParameters&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEvolutionLinearSystemSolverParameters&)",
    "insertText": "operator(const FEvolutionLinearSystemSolverParameters&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEvolutionLinearSystemSolverParameters&)",
    "insertText": "operator(FEvolutionLinearSystemSolverParameters&&)"
  },
  {
    "label": "FEvolutionLinearSystem()",
    "kind": "Method",
    "detail": "Function (bool bDoQuasistatics = false ; bool bXPBDInitialGuess = false ; int32 MaxNumCGIterations = DefaultMaxNumCGIterations ; FSolverReal CGResidualTolerance = DefaultCGTolerance ; bool bCheckCGResidual = bDefaultCheckCGResidual ; } ; class FEvolutionLinearSystem { public :)",
    "insertText": "FEvolutionLinearSystem(const FSolverParticlesRange& Particles)"
  },
  {
    "label": "FEvolutionLinearSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEvolutionLinearSystem()"
  },
  {
    "label": "FEvolutionLinearSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEvolutionLinearSystem(const FEvolutionLinearSystem&)"
  },
  {
    "label": "FEvolutionLinearSystem()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FEvolutionLinearSystem(FEvolutionLinearSystem&& Other) : Parameters(Other.Parameters) , NumCompactIndices(Other.NumCompactIndices) , CompactifiedIndices(MoveTemp(Other.CompactifiedIndices)) , RHS(MoveTemp(Other.RHS)) , Matrix(MoveTemp(Other.Matrix)) , bDfDxTimesVTerm(Other.bDfDxTimesVTerm)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FEvolutionLinearSystem&)",
    "insertText": "operator(const FEvolutionLinearSystem&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FEvolutionLinearSystem&)",
    "insertText": "operator(FEvolutionLinearSystem&& Other)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Parameters = Other . Parameters ; NumCompactIndices = Other . NumCompactIndices ; CompactifiedIndices =)",
    "insertText": "MoveTemp(Other.CompactifiedIndices)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (RHS =)",
    "insertText": "MoveTemp(Other.RHS)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (Matrix =)",
    "insertText": "MoveTemp(Other.Matrix)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init(const FSolverParticlesRange& Particles, const FSolverReal Dt, bool bInFirstNewtonIteration, const FEvolutionLinearSystemSolverParameters& Params)"
  },
  {
    "label": "ReserveForParallelAdd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReserveForParallelAdd(const int32 NumDiagonalEntries, const int32 NumOffDiagonalEntries)"
  },
  {
    "label": "ReserveForParallelAdd()",
    "kind": "Method",
    "detail": "Function (Matrix .)",
    "insertText": "ReserveForParallelAdd(NumDiagonalEntries, NumOffDiagonalEntries)"
  },
  {
    "label": "AddForce()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddForce(const FSolverParticlesRange& Particles, const FSolverVec3& Force, int32 ParticleIndex, const FSolverReal Dt)"
  },
  {
    "label": "AddSymmetricForceDerivative()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddSymmetricForceDerivative(const FSolverParticlesRange& Particles, const FSolverMatrix33* const Df1Dx2, const FSolverMatrix33* const Df1Dv2, int32 ParticleIndex1, int32 ParticleIndex2, const FSolverReal Dt)"
  },
  {
    "label": "Solve()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Solve(FSolverParticlesRange& Particles, const FSolverReal Dt)"
  },
  {
    "label": "GetLastSolveIterations()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLastSolveIterations()"
  },
  {
    "label": "LastSolveError()",
    "kind": "Method",
    "detail": "Function (const FEvolutionLinearSystemSolverParameters* Parameters = nullptr ; int32 NumCompactIndices ; TArray<int32> CompactifiedIndices ; TArray<FSolverVec3> RHS ; TBlockSparseSymmetricLinearSystem<FSolverReal,3> Matrix ; bool bDfDxTimesVTerm = false ; int32 LastSolveIterations = 0 ; FSolverReal)",
    "insertText": "LastSolveError(FSolverReal)"
  }
]