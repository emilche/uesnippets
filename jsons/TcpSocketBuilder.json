[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FTcpSocketBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTcpSocketBuilder"
  },
  {
    "label": "FTcpSocketBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / OutputDeviceRedirector . h \" # include \" SocketSubsystem . h \" # include \" Interfaces / IPv4 / IPv4Address . h \" # include \" Interfaces / IPv4 / IPv4Endpoint . h \" # include \" Sockets . h \" # include \" SocketTypes . h \" class Error ; class FTcpSocketBuilder { public :)",
    "insertText": "FTcpSocketBuilder(const FString& InDescription) : Blocking(false) , Bound(false) , BoundEndpoint(FIPv4Address::Any, 0) , Description(InDescription) , Linger(false) , LingerTimeout(0) , Listen(false) , ReceiveBufferSize(0) , Reusable(false) , SendBufferSize(0)"
  },
  {
    "label": "AsBlocking()",
    "kind": "Method",
    "detail": "Function (} public : FTcpSocketBuilder)",
    "insertText": "AsBlocking()"
  },
  {
    "label": "AsNonBlocking()",
    "kind": "Method",
    "detail": "Function (Blocking = true ; return* this ; } FTcpSocketBuilder)",
    "insertText": "AsNonBlocking()"
  },
  {
    "label": "AsReusable()",
    "kind": "Method",
    "detail": "Function (Blocking = false ; return* this ; } FTcpSocketBuilder)",
    "insertText": "AsReusable()"
  },
  {
    "label": "AsReusable()",
    "kind": "Method",
    "detail": "Function (Reusable = true ; return* this ; } FTcpSocketBuilder)",
    "insertText": "AsReusable(bool bInReusable)"
  },
  {
    "label": "BoundToAddress()",
    "kind": "Method",
    "detail": "Function (Reusable = bInReusable ; return* this ; } FTcpSocketBuilder)",
    "insertText": "BoundToAddress(const FIPv4Address& Address)"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (BoundEndpoint =)",
    "insertText": "FIPv4Endpoint(Address, BoundEndpoint.Port)"
  },
  {
    "label": "BoundToEndpoint()",
    "kind": "Method",
    "detail": "Function (Bound = true ; return* this ; } FTcpSocketBuilder)",
    "insertText": "BoundToEndpoint(const FIPv4Endpoint& Endpoint)"
  },
  {
    "label": "BoundToPort()",
    "kind": "Method",
    "detail": "Function (BoundEndpoint = Endpoint ; Bound = true ; return* this ; } FTcpSocketBuilder)",
    "insertText": "BoundToPort(uint16 Port)"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (BoundEndpoint =)",
    "insertText": "FIPv4Endpoint(BoundEndpoint.Address, Port)"
  },
  {
    "label": "Lingering()",
    "kind": "Method",
    "detail": "Function (Bound = true ; return* this ; } FTcpSocketBuilder)",
    "insertText": "Lingering(int32 Timeout)"
  },
  {
    "label": "Listening()",
    "kind": "Method",
    "detail": "Function (Linger = true ; LingerTimeout = Timeout ; return* this ; } FTcpSocketBuilder)",
    "insertText": "Listening(int32 MaxBacklog)"
  },
  {
    "label": "WithReceiveBufferSize()",
    "kind": "Method",
    "detail": "Function (Listen = true ; ListenBacklog = MaxBacklog ; return* this ; } FTcpSocketBuilder)",
    "insertText": "WithReceiveBufferSize(int32 SizeInBytes)"
  },
  {
    "label": "WithSendBufferSize()",
    "kind": "Method",
    "detail": "Function (ReceiveBufferSize = SizeInBytes ; return* this ; } FTcpSocketBuilder)",
    "insertText": "WithSendBufferSize(int32 SizeInBytes)"
  },
  {
    "label": "FSocket()",
    "kind": "Method",
    "detail": "Function (SendBufferSize = SizeInBytes ; return* this ; } public : operator)",
    "insertText": "FSocket()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} FSocket*)",
    "insertText": "Build()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (FSocket* Socket = nullptr ; ISocketSubsystem* SocketSubsystem =)",
    "insertText": "Get(PLATFORM_SOCKETSUBSYSTEM)"
  },
  {
    "label": "ToInternetAddr()",
    "kind": "Method",
    "detail": "Function (TSharedRef<FInternetAddr> BoundEndpointAddr = BoundEndpoint .)",
    "insertText": "ToInternetAddr()"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (Socket = SocketSubsystem ->)",
    "insertText": "CreateSocket(NAME_Stream, *Description, BoundEndpointAddr->GetProtocolType())"
  },
  {
    "label": "SetReuseAddr()",
    "kind": "Method",
    "detail": "Function (bool Error = ! Socket ->)",
    "insertText": "SetReuseAddr(Reusable) || !Socket->SetLinger(Linger, LingerTimeout) || !Socket->SetRecvErr()"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (Error = Bound&& ! Socket ->)",
    "insertText": "Bind(*BoundEndpointAddr)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Error)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (Error = Listen&& ! Socket ->)",
    "insertText": "Listen(ListenBacklog)"
  },
  {
    "label": "SetNonBlocking()",
    "kind": "Method",
    "detail": "Function (Error = ! Socket ->)",
    "insertText": "SetNonBlocking(!Blocking)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (int32 OutNewSize ;)",
    "insertText": "if(ReceiveBufferSize > 0)"
  },
  {
    "label": "SetReceiveBufferSize()",
    "kind": "Method",
    "detail": "Function (Socket ->)",
    "insertText": "SetReceiveBufferSize(ReceiveBufferSize, OutNewSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(SendBufferSize > 0)"
  },
  {
    "label": "SetSendBufferSize()",
    "kind": "Method",
    "detail": "Function (Socket ->)",
    "insertText": "SetSendBufferSize(SendBufferSize, OutNewSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(Error)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FTcpSocketBuilder: Failed to create the socket %s as configured\"), *Description)"
  },
  {
    "label": "DestroySocket()",
    "kind": "Method",
    "detail": "Function (SocketSubsystem ->)",
    "insertText": "DestroySocket(Socket)"
  }
]