[
  {
    "label": "UniqueNumberGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniqueNumberGenerator"
  },
  {
    "label": "UniqueRandomIdGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniqueRandomIdGenerator"
  },
  {
    "label": "UniqueStringGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniqueStringGenerator"
  },
  {
    "label": "UniqueNumberGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_UNIQUE_ID_GENERATOR_H_ # define RTC_BASE_UNIQUE_ID_GENERATOR_H_ # include<limits> # include<set> # include<string> # include \" absl / strings / string_view . h \" # include \" api / array_view . h \" # include \" api / sequence_checker . h \" # include \" rtc_base / synchronization / mutex . h \" # include \" rtc_base / system / no_unique_address . h \" namespace rtc { template<TIntegral> class UniqueNumberGenerator { public : typedef TIntegral value_type ;)",
    "insertText": "UniqueNumberGenerator()"
  },
  {
    "label": "UniqueNumberGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniqueNumberGenerator(ArrayView<TIntegral> known_ids)"
  },
  {
    "label": "GenerateNumber()",
    "kind": "Method",
    "detail": "Function (TIntegral)",
    "insertText": "GenerateNumber()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TIntegral)",
    "insertText": "operator()()"
  },
  {
    "label": "AddKnownId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddKnownId(TIntegral value)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (private : RTC_NO_UNIQUE_ADDRESS webrtc::SequenceChecker sequence_checker_ ;)",
    "insertText": "static_assert(std::is_integral<TIntegral>::value, \"Must be integral type.\")"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (TIntegral counter_)",
    "insertText": "RTC_GUARDED_BY(sequence_checker_)"
  },
  {
    "label": "UniqueRandomIdGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class UniqueRandomIdGenerator { public : typedef uint32_t value_type ;)",
    "insertText": "UniqueRandomIdGenerator()"
  },
  {
    "label": "UniqueRandomIdGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniqueRandomIdGenerator(ArrayView<uint32_t> known_ids)"
  },
  {
    "label": "GenerateId()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GenerateId()"
  },
  {
    "label": "AddKnownId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddKnownId(uint32_t value)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : webrtc::Mutex mutex_ ; std::set<uint32_t> known_ids_)",
    "insertText": "RTC_GUARDED_BY(&mutex_)"
  },
  {
    "label": "UniqueStringGenerator()",
    "kind": "Method",
    "detail": "Function (} ; class UniqueStringGenerator { public : typedef std::string value_type ;)",
    "insertText": "UniqueStringGenerator()"
  },
  {
    "label": "UniqueStringGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UniqueStringGenerator(ArrayView<std::string> known_ids)"
  },
  {
    "label": "GenerateString()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "GenerateString()"
  },
  {
    "label": "AddKnownId()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddKnownId(absl::string_view value)"
  },
  {
    "label": "UniqueNumberGenerator()",
    "kind": "Method",
    "detail": "Function (private : UniqueNumberGenerator<uint32_t> unique_number_generator_ ; } ; template<TIntegral> UniqueNumberGenerator<TIntegral)",
    "insertText": "UniqueNumberGenerator() : counter_(0)"
  },
  {
    "label": "Detach()",
    "kind": "Method",
    "detail": "Function (sequence_checker_ .)",
    "insertText": "Detach()"
  },
  {
    "label": "UniqueNumberGenerator()",
    "kind": "Method",
    "detail": "Function (} template<TIntegral> UniqueNumberGenerator<TIntegral)",
    "insertText": "UniqueNumberGenerator(ArrayView<TIntegral> known_ids) : counter_(0), known_ids_(known_ids.begin(), known_ids.end())"
  },
  {
    "label": "RTC_DCHECK_RUN_ON()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_DCHECK_RUN_ON(&sequence_checker_)"
  },
  {
    "label": "RTC_CHECK_LT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK_LT(counter_, std::numeric_limits<TIntegral>::max())"
  },
  {
    "label": "insert()",
    "kind": "Method",
    "detail": "Function (auto pair = known_ids_ .)",
    "insertText": "insert(counter_++)"
  }
]