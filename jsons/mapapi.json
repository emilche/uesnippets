[
  {
    "label": "MapTable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapTable"
  },
  {
    "label": "StrPtr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrPtr"
  },
  {
    "label": "StrBuf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrBuf"
  },
  {
    "label": "StrArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StrArray"
  },
  {
    "label": "MapType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MapType"
  },
  {
    "label": "MapDir",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MapDir"
  },
  {
    "label": "MapCase",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "MapCase"
  },
  {
    "label": "MapApi",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MapApi"
  },
  {
    "label": "MapApi()",
    "kind": "Method",
    "detail": "Function (class MapTable ; class StrPtr ; class StrBuf ; class StrArray ; enum MapType { MapInclude,MapExclude,MapOverlay,MapOneToMany } ; enum MapDir { MapLeftRight,MapRightLeft } ; enum MapCase { Sensitive,Insensitive } ; class MapApi { public :)",
    "insertText": "MapApi(void)"
  },
  {
    "label": "Count()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Count()"
  },
  {
    "label": "GetLeft()",
    "kind": "Method",
    "detail": "Function (const StrPtr*)",
    "insertText": "GetLeft(int i)"
  },
  {
    "label": "GetRight()",
    "kind": "Method",
    "detail": "Function (const StrPtr*)",
    "insertText": "GetRight(int i)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (MapType)",
    "insertText": "GetType(int i)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(const StrPtr& lr, MapType t = MapInclude)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Insert(const StrPtr& l, const StrPtr& r, MapType t = MapInclude)"
  },
  {
    "label": "SetCaseSensitivity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCaseSensitivity(MapCase mode)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Translate(const StrPtr& from, StrBuf& to, MapDir d = MapLeftRight)"
  },
  {
    "label": "Translate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Translate(const StrPtr& from, StrArray& to, MapDir d = MapLeftRight)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (MapApi*)",
    "insertText": "Join(MapApi* left, MapApi* right)"
  },
  {
    "label": "Join()",
    "kind": "Method",
    "detail": "Function (} MapApi*)",
    "insertText": "Join(MapApi* m1, MapDir d1, MapApi* m2, MapDir d2)"
  },
  {
    "label": "MapApi()",
    "kind": "Method",
    "detail": "Function (private : MapTable* table ;)",
    "insertText": "MapApi(MapTable* t)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Init()"
  },
  {
    "label": "Disambiguate()",
    "kind": "Method",
    "detail": "Function (int ambiguous ; void)",
    "insertText": "Disambiguate()"
  }
]