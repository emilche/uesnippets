[
  {
    "label": "SparseTransposeImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SparseTransposeImpl"
  },
  {
    "label": "TransposeImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TransposeImpl"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "InnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerIterator"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSETRANSPOSE_H # define EIGEN_SPARSETRANSPOSE_H namespace Eigen { namespace internal { template<MatrixType,int CompressedAccess =)",
    "insertText": "int(MatrixType::Flags&CompressedAccessBit)"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (} ; template<MatrixType> class SparseTransposeImpl<MatrixType,CompressedAccessBit> : public SparseCompressedBase<Transpose<MatrixType>> { typedef SparseCompressedBase<Transpose<MatrixType>> Base ; public : using Base::derived ; typedef Base::Scalar Scalar ; typedef Base::StorageIndex StorageIndex ; Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (} const Scalar*)",
    "insertText": "valuePtr()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "innerNonZeroPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "innerNonZeroPtr()"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} } ; } template<MatrixType> class TransposeImpl<MatrixType,Sparse> : public internal::SparseTransposeImpl<MatrixType> { protected : typedef internal::SparseTransposeImpl<MatrixType> Base ; } ; namespace internal { template<ArgType> struct unary_evaluator<Transpose<ArgType>,IteratorBased> : public evaluator_base<Transpose<ArgType>> { typedef evaluator<ArgType>::InnerIterator EvalIterator ; public : typedef Transpose<ArgType> XprType ; Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "InnerIterator()",
    "kind": "Method",
    "detail": "Function (} class InnerIterator : public EvalIterator { public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerIterator(const unary_evaluator& unaryOp, Index outer) : EvalIterator(unaryOp.m_argImpl,outer)"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; enum { CoeffReadCost = evaluator<ArgType>::CoeffReadCost,Flags = XprType::Flags } ;)",
    "insertText": "unary_evaluator(const XprType& op) :m_argImpl(op.nestedExpression())"
  }
]