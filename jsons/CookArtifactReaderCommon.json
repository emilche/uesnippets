[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCookArtifactReaderCommon",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookArtifactReaderCommon"
  },
  {
    "label": "FCookArtifactReaderCommon()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CookArtifactReader . h \" # include \" GenericPlatform / GenericPlatformFile . h \" class FArchive ; class FCookArtifactReaderCommon : public ICookArtifactReader { public : ~)",
    "insertText": "FCookArtifactReaderCommon()"
  },
  {
    "label": "CreateFileReader()",
    "kind": "Method",
    "detail": "Function (FArchive*)",
    "insertText": "CreateFileReader(const TCHAR* Filename)"
  },
  {
    "label": "IterateDirectoryRecursively()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IterateDirectoryRecursively(const TCHAR* Directory, IPlatformFile::FDirectoryVisitor& Visitor)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& Result, const TCHAR* Filename, bool Files, bool Directories)"
  },
  {
    "label": "FindFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FindFiles(TArray<FString>& FoundFiles, const TCHAR* Directory, const TCHAR* FileExtension = nullptr)"
  }
]