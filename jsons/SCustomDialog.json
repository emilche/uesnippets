[
  {
    "label": "TOOLWIDGETS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOOLWIDGETS_API"
  },
  {
    "label": "FButton",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FButton"
  },
  {
    "label": "FButton()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Styling / AppStyle . h \" # include \" Widgets / SWindow . h \" class SCustomDialog : public SWindow { public : struct FButton {)",
    "insertText": "FButton(const FText& InButtonText, const FSimpleDelegate& InOnClicked = FSimpleDelegate()) : ButtonText(InButtonText) , OnClicked(InOnClicked)"
  },
  {
    "label": "SetPrimary()",
    "kind": "Method",
    "detail": "Function (} FButton&)",
    "insertText": "SetPrimary(bool bValue)"
  },
  {
    "label": "SetOnClicked()",
    "kind": "Method",
    "detail": "Function (bIsPrimary = bValue ; return* this ; } FButton&)",
    "insertText": "SetOnClicked(FSimpleDelegate InOnClicked)"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (OnClicked =)",
    "insertText": "MoveTemp(InOnClicked)"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (bShouldFocus = true ; return* this ; } FText ButtonText ; FSimpleDelegate OnClicked ; bool bIsPrimary = false ; bool bShouldFocus = false ; } ;)",
    "insertText": "SLATE_BEGIN_ARGS(SCustomDialog) : _AutoCloseOnButtonPress(true) , _Icon(nullptr) , _HAlignIcon(HAlign_Left) , _VAlignIcon(VAlign_Center) , _RootPadding(FMargin(4.f)) , _ButtonAreaPadding(FMargin(20.f, 16.f, 0.f, 0.f)) , _UseScrollBox(true) , _ScrollBoxMaxHeight(300) , _HAlignContent(HAlign_Left) , _VAlignContent(VAlign_Center)"
  },
  {
    "label": "FAccessibleWidgetData()",
    "kind": "Method",
    "detail": "Function (_AccessibleParams =)",
    "insertText": "FAccessibleWidgetData(EAccessibleBehavior::Auto)"
  },
  {
    "label": "SLATE_ARGUMENT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_ARGUMENT(FText, Title) SLATE_NAMED_SLOT(FArguments, Content) SLATE_ARGUMENT(TArray<FButton>, Buttons) SLATE_EVENT(FSimpleDelegate, OnClosed) SLATE_ARGUMENT(SWindow::FArguments, WindowArguments) SLATE_ARGUMENT(bool, AutoCloseOnButtonPress) SLATE_ATTRIBUTE(const FSlateBrush*, Icon) SLATE_ATTRIBUTE(TOptional<FVector2D>, IconDesiredSizeOverride) SLATE_ARGUMENT(EHorizontalAlignment, HAlignIcon) SLATE_ARGUMENT(EVerticalAlignment, VAlignIcon) SLATE_NAMED_SLOT(FArguments, BeforeButtons) SLATE_ARGUMENT(EHorizontalAlignment, HAlignButtonBox) SLATE_ARGUMENT(EVerticalAlignment, VAlignButtonBox) SLATE_ATTRIBUTE(FMargin, RootPadding) SLATE_ATTRIBUTE(FMargin, ButtonAreaPadding) SLATE_ATTRIBUTE(FMargin, ContentAreaPadding) SLATE_ARGUMENT(bool, UseScrollBox) SLATE_ARGUMENT(int32, ScrollBoxMaxHeight) SLATE_ARGUMENT(EHorizontalAlignment, HAlignContent) SLATE_ARGUMENT(EVerticalAlignment, VAlignContent) UE_DEPRECATED(5.1, \"Use Icon() instead\") TOOLWIDGETS_API FArguments& IconBrush(FName InIconBrush)"
  },
  {
    "label": "SLATE_ARGUMENT_DEPRECATED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SLATE_ARGUMENT_DEPRECATED(TSharedPtr<SWidget>, DialogContent, 5.1, \"Use Content() instead.\") SLATE_END_ARGS() void Construct(const FArguments& InArgs)"
  },
  {
    "label": "Show()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Show()"
  },
  {
    "label": "ShowModal()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "ShowModal()"
  },
  {
    "label": "CreateContentBox()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "CreateContentBox(const FArguments& InArgs)"
  },
  {
    "label": "CreateButtonBox()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "CreateButtonBox(const FArguments& InArgs)"
  },
  {
    "label": "OnButtonClicked()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnButtonClicked(FSimpleDelegate OnClicked, int32 ButtonIndex)"
  }
]