[
  {
    "label": "MCAssembler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAssembler"
  },
  {
    "label": "MCAsmInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCAsmInfo"
  },
  {
    "label": "MCContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCContext"
  },
  {
    "label": "MCExpr",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCExpr"
  },
  {
    "label": "MCFragment",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCFragment"
  },
  {
    "label": "MCSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSection"
  },
  {
    "label": "MCSymbol",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "MCSymbol"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "ilist_node_traits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ilist_node_traits"
  },
  {
    "label": "SectionVariant",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "SectionVariant"
  },
  {
    "label": "BundleLockStateType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BundleLockStateType"
  },
  {
    "label": "createNode()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_MC_MCSECTION_H # define LLVM_MC_MCSECTION_H # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / ilist . h \" # include \" llvm / ADT / ilist_node . h \" # include \" llvm / MC / SectionKind . h \" # include \" llvm / Support / Compiler . h \" namespace llvm { class MCAssembler ; class MCAsmInfo ; class MCContext ; class MCExpr ; class MCFragment ; class MCSection ; class MCSymbol ; class raw_ostream ; template<> struct ilist_node_traits<MCFragment> { MCFragment*)",
    "insertText": "createNode(const MCFragment &V)"
  },
  {
    "label": "deleteNode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteNode(MCFragment *V)"
  },
  {
    "label": "addNodeToList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "addNodeToList(MCFragment *)"
  },
  {
    "label": "removeNodeFromList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "removeNodeFromList(MCFragment *)"
  },
  {
    "label": "transferNodesFromList()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "transferNodesFromList(ilist_node_traits & , ilist_iterator<MCFragment> , ilist_iterator<MCFragment>)"
  },
  {
    "label": "MCSection()",
    "kind": "Method",
    "detail": "Function (} } ; class MCSection { public : enum SectionVariant { SV_COFF = 0,SV_ELF,SV_MachO } ; enum BundleLockStateType { NotBundleLocked,BundleLocked,BundleLockedAlignToEnd } ; typedef iplist<MCFragment> FragmentListType ; typedef FragmentListType::const_iterator const_iterator ; typedef FragmentListType::iterator iterator ; typedef FragmentListType::const_reverse_iterator const_reverse_iterator ; typedef FragmentListType::reverse_iterator reverse_iterator ; private :)",
    "insertText": "MCSection(const MCSection &)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(const MCSection &)"
  },
  {
    "label": "MCSection()",
    "kind": "Method",
    "detail": "Function (MCSymbol* Begin ; MCSymbol* End = nullptr ; unsigned Alignment = 1 ; unsigned Ordinal = 0 ; unsigned LayoutOrder ; BundleLockStateType BundleLockState = NotBundleLocked ; unsigned BundleLockNestingDepth = 0 ; unsigned BundleGroupBeforeFirstInst : 1 ; unsigned HasInstructions : 1 ; unsigned IsRegistered : 1 ; FragmentListType Fragments ; SmallVector<std::pair<unsigned,MCFragment*>,1> SubsectionFragmentMap ; protected :)",
    "insertText": "MCSection(SectionVariant V, SectionKind K, MCSymbol *Begin)"
  },
  {
    "label": "MCSection()",
    "kind": "Method",
    "detail": "Function (SectionVariant Variant ; SectionKind Kind ; public : ~)",
    "insertText": "MCSection()"
  },
  {
    "label": "getKind()",
    "kind": "Method",
    "detail": "Function (SectionKind)",
    "insertText": "getKind()"
  },
  {
    "label": "setBeginSymbol()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setBeginSymbol(MCSymbol *Sym)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(!Begin)"
  },
  {
    "label": "getEndSymbol()",
    "kind": "Method",
    "detail": "Function (Begin = Sym ; } MCSymbol*)",
    "insertText": "getEndSymbol(MCContext &Ctx)"
  },
  {
    "label": "hasEnded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasEnded()"
  },
  {
    "label": "getAlignment()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getAlignment()"
  },
  {
    "label": "getOrdinal()",
    "kind": "Method",
    "detail": "Function (Alignment = Value ; } unsigned)",
    "insertText": "getOrdinal()"
  },
  {
    "label": "getLayoutOrder()",
    "kind": "Method",
    "detail": "Function (Ordinal = Value ; } unsigned)",
    "insertText": "getLayoutOrder()"
  },
  {
    "label": "getBundleLockState()",
    "kind": "Method",
    "detail": "Function (LayoutOrder = Value ; } BundleLockStateType)",
    "insertText": "getBundleLockState()"
  },
  {
    "label": "isBundleLocked()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isBundleLocked()"
  },
  {
    "label": "hasInstructions()",
    "kind": "Method",
    "detail": "Function (BundleGroupBeforeFirstInst = IsFirst ; } bool)",
    "insertText": "hasInstructions()"
  },
  {
    "label": "isRegistered()",
    "kind": "Method",
    "detail": "Function (HasInstructions = Value ; } bool)",
    "insertText": "isRegistered()"
  },
  {
    "label": "getFragmentList()",
    "kind": "Method",
    "detail": "Function (IsRegistered = Value ; } MCSection::FragmentListType&)",
    "insertText": "getFragmentList()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} MCSection::iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} MCSection::iterator)",
    "insertText": "end()"
  },
  {
    "label": "rbegin()",
    "kind": "Method",
    "detail": "Function (} MCSection::reverse_iterator)",
    "insertText": "rbegin()"
  },
  {
    "label": "rend()",
    "kind": "Method",
    "detail": "Function (} MCSection::reverse_iterator)",
    "insertText": "rend()"
  },
  {
    "label": "getSubsectionInsertionPoint()",
    "kind": "Method",
    "detail": "Function (} MCSection::iterator)",
    "insertText": "getSubsectionInsertionPoint(unsigned Subsection)"
  },
  {
    "label": "dump()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "dump()"
  },
  {
    "label": "PrintSwitchToSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PrintSwitchToSection(const MCAsmInfo &MAI, raw_ostream &OS, const MCExpr *Subsection)"
  },
  {
    "label": "UseCodeAlign()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseCodeAlign()"
  },
  {
    "label": "isVirtualSection()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isVirtualSection()"
  }
]