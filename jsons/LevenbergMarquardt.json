[
  {
    "label": "Status",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Status"
  },
  {
    "label": "LevenbergMarquardt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LevenbergMarquardt"
  },
  {
    "label": "Parameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Parameters"
  },
  {
    "label": "minimize()",
    "kind": "Method",
    "detail": "Function (LevenbergMarquardtSpace::Status)",
    "insertText": "minimize(FVectorType &x)"
  },
  {
    "label": "minimizeInit()",
    "kind": "Method",
    "detail": "Function (LevenbergMarquardtSpace::Status)",
    "insertText": "minimizeInit(FVectorType &x)"
  },
  {
    "label": "minimizeOneStep()",
    "kind": "Method",
    "detail": "Function (LevenbergMarquardtSpace::Status)",
    "insertText": "minimizeOneStep(FVectorType &x)"
  },
  {
    "label": "minimizeOptimumStorage()",
    "kind": "Method",
    "detail": "Function (LevenbergMarquardtSpace::Status)",
    "insertText": "minimizeOptimumStorage(FVectorType  &x)"
  },
  {
    "label": "minimizeOptimumStorageInit()",
    "kind": "Method",
    "detail": "Function (LevenbergMarquardtSpace::Status)",
    "insertText": "minimizeOptimumStorageInit(FVectorType  &x)"
  },
  {
    "label": "minimizeOptimumStorageOneStep()",
    "kind": "Method",
    "detail": "Function (LevenbergMarquardtSpace::Status)",
    "insertText": "minimizeOptimumStorageOneStep(FVectorType  &x)"
  },
  {
    "label": "minimize()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "minimize(x)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (ColPivHouseholderQR<JacobianType>)",
    "insertText": "qrfac(fjac)"
  },
  {
    "label": "minimizeOptimumStorage()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "minimizeOptimumStorage(x)"
  },
  {
    "label": "qrfac()",
    "kind": "Method",
    "detail": "Function (ColPivHouseholderQR<JacobianType>)",
    "insertText": "qrfac(fjac)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (this:)",
    "insertText": "for(Index ii=0; ii< fjac.cols()"
  },
  {
    "label": "numDiff()",
    "kind": "Method",
    "detail": "Function (NumericalDiff<FunctorType>)",
    "insertText": "numDiff(functor)"
  }
]