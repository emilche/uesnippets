[
  {
    "label": "srtp_event_data_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_event_data_t"
  },
  {
    "label": "srtp_ctx_t_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_ctx_t_"
  },
  {
    "label": "SrtpFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SrtpFilter"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "Error",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Error"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "SrtpFilter()",
    "kind": "Method",
    "detail": "Function (# ifndef PC_SRTP_FILTER_H_ # define PC_SRTP_FILTER_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<map> # include<memory> # include<string> # include<vector> # include \" absl / types / optional . h \" # include \" api / array_view . h \" # include \" api / crypto_params . h \" # include \" api / jsep . h \" # include \" api / sequence_checker . h \" # include \" pc / session_description . h \" # include \" rtc_base / buffer . h \" # include \" rtc_base / ssl_stream_adapter . h \" struct srtp_event_data_t ; struct srtp_ctx_t_ ; namespace cricket { class SrtpFilter { public : enum Mode { PROTECT,UNPROTECT } ; enum Error { ERROR_NONE,ERROR_FAIL,ERROR_AUTH,ERROR_REPLAY,} ;)",
    "insertText": "SrtpFilter()"
  },
  {
    "label": "IsActive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsActive()"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Process(const std::vector<CryptoParams>& cryptos, webrtc::SdpType type, ContentSource source)"
  },
  {
    "label": "SetOffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOffer(const std::vector<CryptoParams>& offer_params, ContentSource source)"
  },
  {
    "label": "SetProvisionalAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProvisionalAnswer(const std::vector<CryptoParams>& answer_params, ContentSource source)"
  },
  {
    "label": "SetAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAnswer(const std::vector<CryptoParams>& answer_params, ContentSource source)"
  },
  {
    "label": "ResetParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetParams()"
  },
  {
    "label": "ParseKeyParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseKeyParams(const std::string& params, uint8_t* key, size_t len)"
  },
  {
    "label": "send_cipher_suite()",
    "kind": "Method",
    "detail": "Function (absl::optional<int>)",
    "insertText": "send_cipher_suite()"
  },
  {
    "label": "StoreParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreParams(const std::vector<CryptoParams>& params, ContentSource source)"
  },
  {
    "label": "ExpectAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpectAnswer(ContentSource source)"
  },
  {
    "label": "DoSetAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSetAnswer(const std::vector<CryptoParams>& answer_params, ContentSource source, bool final)"
  },
  {
    "label": "NegotiateParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NegotiateParams(const std::vector<CryptoParams>& answer_params, CryptoParams* selected_params)"
  },
  {
    "label": "ApplySendParams()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "ApplySendParams(const CryptoParams& send_params)"
  },
  {
    "label": "ApplyRecvParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRecvParams(const CryptoParams& recv_params)"
  }
]