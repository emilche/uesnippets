[
  {
    "label": "srtp_event_data_t",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_event_data_t"
  },
  {
    "label": "srtp_ctx_t_",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "srtp_ctx_t_"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "used"
  },
  {
    "label": "SrtpFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SrtpFilter"
  },
  {
    "label": "Mode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Mode"
  },
  {
    "label": "Error",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Error"
  },
  {
    "label": "State",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "State"
  },
  {
    "label": "Process()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Process(const std::vector<CryptoParams>& cryptos,\n               webrtc::SdpType type,\n               ContentSource source)"
  },
  {
    "label": "SetOffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetOffer(const std::vector<CryptoParams>& offer_params,\n                ContentSource source)"
  },
  {
    "label": "SetProvisionalAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetProvisionalAnswer(const std::vector<CryptoParams>& answer_params,\n                            ContentSource source)"
  },
  {
    "label": "SetAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetAnswer(const std::vector<CryptoParams>& answer_params,\n                 ContentSource source)"
  },
  {
    "label": "ResetParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ResetParams()"
  },
  {
    "label": "ParseKeyParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ParseKeyParams(const std::string& params,\n                             uint8_t* key,\n                             size_t len)"
  },
  {
    "label": "ExpectOffer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpectOffer(ContentSource source)"
  },
  {
    "label": "StoreParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "StoreParams(const std::vector<CryptoParams>& params,\n                   ContentSource source)"
  },
  {
    "label": "ExpectAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExpectAnswer(ContentSource source)"
  },
  {
    "label": "DoSetAnswer()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "DoSetAnswer(const std::vector<CryptoParams>& answer_params,\n                   ContentSource source,\n                   bool final)"
  },
  {
    "label": "NegotiateParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "NegotiateParams(const std::vector<CryptoParams>& answer_params,\n                       CryptoParams* selected_params)"
  },
  {
    "label": "ApplySendParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplySendParams(const CryptoParams& send_params)"
  },
  {
    "label": "ApplyRecvParams()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ApplyRecvParams(const CryptoParams& recv_params)"
  }
]