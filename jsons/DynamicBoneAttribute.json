[
  {
    "label": "FDynamicMesh3",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMesh3"
  },
  {
    "label": "TDynamicBoneAttributeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TDynamicBoneAttributeBase"
  },
  {
    "label": "FDynamicMeshAttributeSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDynamicMeshAttributeSet"
  },
  {
    "label": "TDynamicBoneAttributeBase()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" DynamicMesh / DynamicAttribute . h \" # include \" Containers / Array . h \" namespace UE::Geometry { class FDynamicMesh3 ; } namespace UE { namespace Geometry { template<ParentType,AttribValueType> class TDynamicBoneAttributeBase : public TDynamicAttributeBase<ParentType> { protected : class FDynamicMeshAttributeSet ; ParentType* Parent = nullptr ; TArray<AttribValueType> AttribValues ; public :)",
    "insertText": "TDynamicBoneAttributeBase()"
  },
  {
    "label": "TDynamicBoneAttributeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDynamicBoneAttributeBase(ParentType* ParentIn, const int InNumBones = 0)"
  },
  {
    "label": "TDynamicBoneAttributeBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TDynamicBoneAttributeBase(ParentType* ParentIn, const int InNumBones, const AttribValueType& InitialValue)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const int32 InNumBones, const AttribValueType& InitialValue)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Resize(const int32 InNumBones)"
  },
  {
    "label": "Copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Copy(const TDynamicBoneAttributeBase<ParentType, AttribValueType>& Copy)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Num()"
  },
  {
    "label": "IsSameAs()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSameAs(const TDynamicBoneAttributeBase<ParentType, AttribValueType>& Other)"
  },
  {
    "label": "GetAttribValues()",
    "kind": "Method",
    "detail": "Function (const TArray<AttribValueType>&)",
    "insertText": "GetAttribValues()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (AttribValues [ InBoneID ] = InValue ; } const AttribValueType&)",
    "insertText": "GetValue(const int32 InBoneID)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(const AttribValueType& InValue)"
  },
  {
    "label": "MakeCopy()",
    "kind": "Method",
    "detail": "Function (public : TDynamicAttributeBase<ParentType>*)",
    "insertText": "MakeCopy(ParentType* ParentIn)"
  },
  {
    "label": "MakeNew()",
    "kind": "Method",
    "detail": "Function (TDynamicAttributeBase<ParentType>*)",
    "insertText": "MakeNew(ParentType* ParentIn)"
  },
  {
    "label": "CompactInPlace()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CompactInPlace(const FCompactMaps& CompactMaps)"
  },
  {
    "label": "Reparent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reparent(ParentType* NewParent)"
  },
  {
    "label": "CopyThroughMapping()",
    "kind": "Method",
    "detail": "Function (Parent = NewParent ; } bool)",
    "insertText": "CopyThroughMapping(const TDynamicAttributeBase<ParentType>* Source, const FMeshIndexMappings& Mapping)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "IsSameAs()",
    "kind": "Method",
    "detail": "Function (} ; template<> bool TDynamicBoneAttributeBase<FDynamicMesh3,FTransform)",
    "insertText": "IsSameAs(const TDynamicBoneAttributeBase<FDynamicMesh3, FTransform>& Other)"
  }
]