[
  {
    "label": "FakeResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FakeResource"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (# ifndef CALL_ADAPTATION_TEST_FAKE_RESOURCE_H_ # define CALL_ADAPTATION_TEST_FAKE_RESOURCE_H_ # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" absl / types / optional . h \" # include \" api / adaptation / resource . h \" # include \" api / scoped_refptr . h \" namespace webrtc { class FakeResource : public Resource { public : rtc::scoped_refptr<FakeResource>)",
    "insertText": "Create(absl::string_view name)"
  },
  {
    "label": "FakeResource()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FakeResource(absl::string_view name)"
  },
  {
    "label": "FakeResource()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FakeResource()"
  },
  {
    "label": "SetUsageState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUsageState(ResourceUsageState usage_state)"
  },
  {
    "label": "Name()",
    "kind": "Method",
    "detail": "Function (std::string)",
    "insertText": "Name()"
  },
  {
    "label": "SetResourceListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResourceListener(ResourceListener* listener)"
  }
]