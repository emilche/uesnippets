[
  {
    "label": "TSPtrArrayG",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSPtrArrayG"
  },
  {
    "label": "OtherElementType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OtherElementType"
  },
  {
    "label": "Predicate",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Predicate"
  },
  {
    "label": "PredicateType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PredicateType"
  },
  {
    "label": "Iterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Iterator"
  },
  {
    "label": "TIsZeroConstructType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsZeroConstructType"
  },
  {
    "label": "TContainerTraits",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TContainerTraits"
  },
  {
    "label": "TIsContiguousContainer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsContiguousContainer"
  },
  {
    "label": "TSPtrArrayG()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" uLang / Common / Containers / Array . h \" # include \" uLang / Common / Containers / SharedPointer . h \" # include \" uLang / Common / Misc / Optional . h \" # include \" uLang / Common / Templates / Storage . h \" # include<initializer_list> # include<type_traits> namespace uLang { template<InElementType,bool AllowNull,InElementAllocatorType,. . . RawAllocatorArgsType> class TSPtrArrayG { template<OtherElementType,bool OtherAllowNull,OtherElementAllocatorType,. . . OtherRawAllocatorArgsType> class TSPtrArrayG ; public : using ElementType = InElementType ; using ElementAllocatorType = InElementAllocatorType ; using PointerType = TSPtrG<ElementType,AllowNull,InElementAllocatorType::RawAllocatorType,RawAllocatorArgsType . . .> ; using PointerStorageType = TArrayG<ElementType*,InElementAllocatorType,RawAllocatorArgsType . . .> ; ULANG_FORCEINLINE)",
    "insertText": "TSPtrArrayG(RawAllocatorArgsType&&... RawAllocatorArgs) : _PointerStorage(uLang::ForwardArg<RawAllocatorArgsType>(RawAllocatorArgs)...) , _DereferenceFunc(nullptr)"
  },
  {
    "label": "InElementType()",
    "kind": "Method",
    "detail": "Function (} template<OtherElementType,bool OtherAllowNull,= TEnableIf<std::is_convertible_v<OtherElementType*,)",
    "insertText": "InElementType(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrArrayG(std::initializer_list<TSPtrG<OtherElementType, OtherAllowNull, typename InElementAllocatorType::RawAllocatorType, RawAllocatorArgsType...>> InitList, RawAllocatorArgsType&&... RawAllocatorArgs) : _PointerStorage(uLang::ForwardArg<RawAllocatorArgsType>(RawAllocatorArgs)...) , _DereferenceFunc(nullptr)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(Element)"
  },
  {
    "label": "InElementType()",
    "kind": "Method",
    "detail": "Function (} } template<OtherElementType,bool OtherAllowNull,= TEnableIf<std::is_convertible_v<OtherElementType*,)",
    "insertText": "InElementType(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrArrayG(const TSPtrArrayG<OtherElementType, OtherAllowNull, InElementAllocatorType, RawAllocatorArgsType...>& Other) : _PointerStorage(Other._PointerStorage)"
  },
  {
    "label": "ReferenceAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReferenceAll()"
  },
  {
    "label": "EnableDereference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableDereference()"
  },
  {
    "label": "TSPtrArrayG()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TSPtrArrayG(const TSPtrArrayG& Other) : _PointerStorage(Other._PointerStorage)"
  },
  {
    "label": "InElementType()",
    "kind": "Method",
    "detail": "Function (} template<OtherElementType,bool OtherAllowNull,= TEnableIf<std::is_convertible_v<OtherElementType*,)",
    "insertText": "InElementType(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrArrayG(const TSPtrArrayG<OtherElementType, OtherAllowNull, InElementAllocatorType, RawAllocatorArgsType...>& Other, int32_t ExtraSlack) : _PointerStorage(Other._PointerStorage, ExtraSlack)"
  },
  {
    "label": "InElementType()",
    "kind": "Method",
    "detail": "Function (} template<OtherElementType,bool OtherAllowNull,= TEnableIf<std::is_convertible_v<OtherElementType*,)",
    "insertText": "InElementType(AllowNull || !OtherAllowNull)>::Type> TSPtrArrayG& operator=(const TSPtrArrayG<OtherElementType, OtherAllowNull, InElementAllocatorType, RawAllocatorArgsType...>& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TSPtrArrayG&)",
    "insertText": "operator(const TSPtrArrayG& Other)"
  },
  {
    "label": "InElementType()",
    "kind": "Method",
    "detail": "Function (} return* this ; } template<OtherElementType,bool OtherAllowNull,= TEnableIf<std::is_convertible_v<OtherElementType*,)",
    "insertText": "InElementType(AllowNull || !OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrArrayG(TSPtrArrayG<OtherElementType, OtherAllowNull, InElementAllocatorType, RawAllocatorArgsType...>&& Other) : _PointerStorage(ForwardArg<PointerStorageType>(Other._PointerStorage))"
  },
  {
    "label": "TSPtrArrayG()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "TSPtrArrayG(TSPtrArrayG&& Other) : _PointerStorage(ForwardArg<PointerStorageType>(Other._PointerStorage))"
  },
  {
    "label": "InElementType()",
    "kind": "Method",
    "detail": "Function (} template<class OtherElementType,bool OtherAllowNull,= TEnableIf<std::is_convertible_v<OtherElementType*,)",
    "insertText": "InElementType(AllowNull || !OtherAllowNull)>::Type> TSPtrArrayG(TSPtrArrayG<OtherElementType, OtherAllowNull, InElementAllocatorType, RawAllocatorArgsType...>&& Other, int32_t ExtraSlack) : _PointerStorage(ForwardArg<PointerStorageType>(Other._PointerStorage), ExtraSlack)"
  },
  {
    "label": "InElementType()",
    "kind": "Method",
    "detail": "Function (} template<class OtherElementType,bool OtherAllowNull,= TEnableIf<std::is_convertible_v<OtherElementType*,)",
    "insertText": "InElementType(AllowNull || !OtherAllowNull)>::Type> TSPtrArrayG& operator=(TSPtrArrayG<OtherElementType, OtherAllowNull, InElementAllocatorType, RawAllocatorArgsType...>&& Other)"
  },
  {
    "label": "DereferenceAll()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DereferenceAll()"
  },
  {
    "label": "PointerStorageType()",
    "kind": "Method",
    "detail": "Function (_PointerStorage = ForwardArg<)",
    "insertText": "PointerStorageType(Other._PointerStorage)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} return* this ; } TSPtrArrayG&)",
    "insertText": "operator(TSPtrArrayG&& Other)"
  },
  {
    "label": "TSPtrArrayG()",
    "kind": "Method",
    "detail": "Function (} return* this ; } ~)",
    "insertText": "TSPtrArrayG()"
  },
  {
    "label": "GetSlack()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "GetSlack()"
  },
  {
    "label": "IsValidIndex()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsValidIndex(int32_t Index)"
  },
  {
    "label": "Num()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Num()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Max()"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "IsFilled()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "IsFilled()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "operator(int32_t Index)"
  },
  {
    "label": "Pop()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "Pop(bool bAllowShrinking = true)"
  },
  {
    "label": "Item()",
    "kind": "Method",
    "detail": "Function (PointerType)",
    "insertText": "Item(_PointerStorage.Pop(bAllowShrinking), _PointerStorage.GetRawAllocator())"
  },
  {
    "label": "Dereference()",
    "kind": "Method",
    "detail": "Function (Item ->)",
    "insertText": "Dereference()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} return Item ; } ULANG_FORCEINLINE void)",
    "insertText": "Push(const PointerType & Item)"
  },
  {
    "label": "Reference()",
    "kind": "Method",
    "detail": "Function (Item ->)",
    "insertText": "Reference()"
  },
  {
    "label": "Push()",
    "kind": "Method",
    "detail": "Function (} _PointerStorage .)",
    "insertText": "Push(Item.Get())"
  },
  {
    "label": "First()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "First()"
  },
  {
    "label": "Top()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "Top()"
  },
  {
    "label": "Last()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "Last(int32_t IndexFromTheEnd = 0)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE void)",
    "insertText": "Shrink()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "Find(const ElementType* Item, int32_t& Index)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "Find(const PointerType& Item, int32_t& Index)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Find(const ElementType* Item)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Find(const PointerType& Item)"
  },
  {
    "label": "FindLast()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE bool)",
    "insertText": "FindLast(const PointerType & Item, int32_t& Index)"
  },
  {
    "label": "FindLast()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "FindLast(const PointerType & Item)"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> ULANG_FORCEINLINE int32_t)",
    "insertText": "FindLastByPredicate(Predicate Pred, int32_t Count)"
  },
  {
    "label": "FindLastByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> ULANG_FORCEINLINE int32_t)",
    "insertText": "FindLastByPredicate(Predicate Pred)"
  },
  {
    "label": "IndexOfByKey()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> int32_t)",
    "insertText": "IndexOfByKey(const KeyType& Key)"
  },
  {
    "label": "IndexOfByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> int32_t)",
    "insertText": "IndexOfByPredicate(Predicate Pred)"
  },
  {
    "label": "FindByKey()",
    "kind": "Method",
    "detail": "Function (} template<KeyType> ULANG_FORCEINLINE TOptional<PointerType>)",
    "insertText": "FindByKey(const KeyType& Key)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (ElementType* const* Element = _PointerStorage .)",
    "insertText": "FindByPredicate([=](ElementType * Item) -> bool { return *Item == Key; })"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (} return EResult::Unspecified ; } template<Predicate> ULANG_FORCEINLINE TOptional<PointerType>)",
    "insertText": "FindByPredicate(Predicate Pred)"
  },
  {
    "label": "FindByPredicate()",
    "kind": "Method",
    "detail": "Function (ElementType* const* Element = _PointerStorage .)",
    "insertText": "FindByPredicate(Pred)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} return EResult::Unspecified ; } bool)",
    "insertText": "Contains(const PointerType& Pointer)"
  },
  {
    "label": "ContainsByKey()",
    "kind": "Method",
    "detail": "Function (} template<ComparisonType> bool)",
    "insertText": "ContainsByKey(const ComparisonType& Key)"
  },
  {
    "label": "ContainsByPredicate()",
    "kind": "Method",
    "detail": "Function (} template<Predicate> ULANG_FORCEINLINE bool)",
    "insertText": "ContainsByPredicate(Predicate Pred)"
  },
  {
    "label": "InsertZeroed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InsertZeroed(int32_t Index, int32_t Count = 1)"
  },
  {
    "label": "InsertZeroed()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "InsertZeroed(Index, Count)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Insert(const TSPtrArrayG& Items, const int32_t InIndex)"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Insert(Items._PointerStorage, InIndex)"
  },
  {
    "label": "ReferenceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReferenceRange(InIndex, InIndex + Items.Num())"
  },
  {
    "label": "Insert()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "Insert(const PointerType& Item, int32_t Index)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE PointerType)",
    "insertText": "RemoveAt(int32_t Index)"
  },
  {
    "label": "RemovedItem()",
    "kind": "Method",
    "detail": "Function (PointerType)",
    "insertText": "RemovedItem(_PointerStorage[Index], _PointerStorage.GetRawAllocator())"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAt(Index)"
  },
  {
    "label": "Move()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "Move(RemovedItem)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} template<CountType> ULANG_FORCEINLINE void)",
    "insertText": "RemoveAt(int32_t Index, CountType Count, bool bAllowShrinking = true)"
  },
  {
    "label": "DereferenceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DereferenceRange(Index, Index + int32_t(Count))"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAt(Index, Count, bAllowShrinking)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE void)",
    "insertText": "RemoveAtSwap(int32_t Index)"
  },
  {
    "label": "Dereference()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Dereference(Index)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAtSwap(Index)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (} template<CountType> ULANG_FORCEINLINE void)",
    "insertText": "RemoveAtSwap(int32_t Index, CountType Count, bool bAllowShrinking = true)"
  },
  {
    "label": "RemoveAtSwap()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "RemoveAtSwap(Index, Count, bAllowShrinking)"
  },
  {
    "label": "ReplaceAt()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "ReplaceAt(const PointerType& Item, int32_t Index)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (_PointerStorage [ Index ] = Item .)",
    "insertText": "Get()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Reset(NewSize)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty(int32_t Slack = 0)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Empty(Slack)"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetNumZeroed(int32_t NewNum, bool bAllowShrinking = true)"
  },
  {
    "label": "DereferenceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DereferenceRange(NewNum, Num())"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (} _PointerStorage .)",
    "insertText": "SetNumZeroed(NewNum, bAllowShrinking)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(TSPtrArrayG& Source)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Append(Source._PointerStorage)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Append(TSPtrArrayG&& Source)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Append(ForwardArg<PointerStorageType>(Source._PointerStorage))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(ForwardArg<TSPtrArrayG>(Other))"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Append(Other)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (ElementType* Item =)",
    "insertText": "new(_PointerStorage.GetRawAllocator()) ElementType(uLang::ForwardArg<CtorArgsType>(CtorArgs)...)"
  },
  {
    "label": "InsertNew()",
    "kind": "Method",
    "detail": "Function (} template<. . . CtorArgsType> ULANG_FORCEINLINE void)",
    "insertText": "InsertNew(int32_t Index, CtorArgsType&&... CtorArgs)"
  },
  {
    "label": "EmplaceAt()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "EmplaceAt(Index, Item)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "Add(const PointerType& Item)"
  },
  {
    "label": "AddZeroed()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "AddZeroed(int32_t Count = 1)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE int32_t)",
    "insertText": "AddUnique(const PointerType& Item)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (int32_t Index = _PointerStorage .)",
    "insertText": "AddUnique(Item.Get())"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (_PointerStorage .)",
    "insertText": "Reserve(Number)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "RemoveSingle(const PointerType& Item)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (int32_t Num = _PointerStorage .)",
    "insertText": "RemoveSingle(Item.Get())"
  },
  {
    "label": "ULANG_ENSUREF()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ENSUREF(!Item->Dereference(), \"Item was passed in so there must be at least one reference left after this.\")"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (} return Num ; } int32_t)",
    "insertText": "Remove(const PointerType& Item)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (int32_t Num = _PointerStorage .)",
    "insertText": "Remove(Item.Get())"
  },
  {
    "label": "RemoveAll()",
    "kind": "Method",
    "detail": "Function (} return Num ; } template<Predicate> int32_t)",
    "insertText": "RemoveAll(const Predicate& Pred)"
  },
  {
    "label": "GetRawAllocator()",
    "kind": "Method",
    "detail": "Function (const ElementAllocatorType::RawAllocatorType& RawAllocator = _PointerStorage .)",
    "insertText": "GetRawAllocator()"
  },
  {
    "label": "RemoveAllSwap()",
    "kind": "Method",
    "detail": "Function (} template<class Predicate> void)",
    "insertText": "RemoveAllSwap(const Predicate& Pred, bool bAllowShrinking = true)"
  },
  {
    "label": "RemoveSingleSwap()",
    "kind": "Method",
    "detail": "Function (} int32_t)",
    "insertText": "RemoveSingleSwap(const PointerType& Item, bool bAllowShrinking = true)"
  },
  {
    "label": "RemoveSingleSwap()",
    "kind": "Method",
    "detail": "Function (int32_t Num = _PointerStorage .)",
    "insertText": "RemoveSingleSwap(Item.Get())"
  },
  {
    "label": "RemoveSwap()",
    "kind": "Method",
    "detail": "Function (} return Num ; } int32_t)",
    "insertText": "RemoveSwap(const PointerType& Item)"
  },
  {
    "label": "RemoveSwap()",
    "kind": "Method",
    "detail": "Function (int32_t Num = _PointerStorage .)",
    "insertText": "RemoveSwap(Item.Get())"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} return Num ; } void)",
    "insertText": "Sort()"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(_PointerStorage, TDereferenceWrapper<TLess<ElementType>>( TLess<ElementType>() ))"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (} template<class PredicateType> void)",
    "insertText": "Sort(const PredicateType& Predicate)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Sort(_PointerStorage, Predicate)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} template<class OtherElementType,bool OtherAllowNull = AllowNull,= TEnableIf<TPointerIsStaticCastableFromTo<OtherElementType,ElementType)",
    "insertText": "Value(AllowNull == OtherAllowNull || OtherAllowNull)>::Type> ULANG_FORCEINLINE TSPtrArrayG<OtherElementType, OtherAllowNull, ElementAllocatorType, RawAllocatorArgsType...>& As()"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (} template<class OtherElementType,bool OtherAllowNull = AllowNull,= TEnableIf<TPointerIsStaticCastableFromTo<OtherElementType,ElementType)",
    "insertText": "Value(AllowNull == OtherAllowNull || OtherAllowNull)>::Type> ULANG_FORCEINLINE const TSPtrArrayG<OtherElementType, OtherAllowNull, ElementAllocatorType, RawAllocatorArgsType...>& As()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} public : class Iterator { public : ULANG_FORCEINLINE)",
    "insertText": "Iterator() : _Item(nullptr)"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE)",
    "insertText": "Iterator(ElementType * const * Item, const typename InElementAllocatorType::RawAllocatorType & Allocator) : _Item(Item)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ptr()"
  },
  {
    "label": "Iterator()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE ~)",
    "insertText": "Iterator()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ULANG_FORCEINLINE const PointerType&)",
    "insertText": "operator()"
  },
  {
    "label": "ULANG_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ULANG_ASSERT(_Item)"
  },
  {
    "label": "Ptr()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Ptr().EnableRelease()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (+ + _Item ; return* this ; } ULANG_FORCEINLINE Iterator)",
    "insertText": "operator(int)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator Temp =* this ; - -* this ; return Temp ; } ULANG_FORCEINLINE Iterator)",
    "insertText": "operator(const Iterator& Left, int32_t Right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator Temp = Left ; Temp . _Item + = Right ; return Temp ; } ULANG_FORCEINLINE Iterator)",
    "insertText": "operator(int32_t Left, const Iterator& Right)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Iterator Temp = Right ; Temp . _Item + = Left ; return Temp ; } ULANG_FORCEINLINE int32_t)",
    "insertText": "operator(const Iterator& Left, const Iterator& Right)"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} ElementType* const* _Item ; TTypeCompatibleBytes<PointerType> _DummyPtr ; } ; ULANG_FORCEINLINE Iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE Iterator)",
    "insertText": "end()"
  },
  {
    "label": "_DereferenceFunc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "_DereferenceFunc(ElementType * Item, const typename ElementAllocatorType::RawAllocatorType & Allocator)"
  },
  {
    "label": "ElementType()",
    "kind": "Method",
    "detail": "Function (Item -> ~)",
    "insertText": "ElementType()"
  },
  {
    "label": "Deallocate()",
    "kind": "Method",
    "detail": "Function (Allocator .)",
    "insertText": "Deallocate(Item)"
  },
  {
    "label": "Dereference()",
    "kind": "Method",
    "detail": "Function (} } ; } ULANG_FORCEINLINE void)",
    "insertText": "Dereference(int32_t Index)"
  },
  {
    "label": "ReferenceRange()",
    "kind": "Method",
    "detail": "Function (} ULANG_FORCEINLINE void)",
    "insertText": "ReferenceRange(int32_t BeginIndex, int32_t EndIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (ElementType* Item = _PointerStorage [ Index ] ;)",
    "insertText": "if(Item)"
  },
  {
    "label": "DereferenceRange()",
    "kind": "Method",
    "detail": "Function (} } } ULANG_FORCEINLINE void)",
    "insertText": "DereferenceRange(int32_t BeginIndex, int32_t EndIndex)"
  },
  {
    "label": "ReferenceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReferenceRange(0, _PointerStorage.Num())"
  },
  {
    "label": "DereferenceRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DereferenceRange(0, _PointerStorage.Num())"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} PointerStorageType _PointerStorage ; using DereferenceFuncType =)",
    "insertText": "void(*)(ElementType *, const typename ElementAllocatorType::RawAllocatorType &)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (DereferenceFuncType _DereferenceFunc ; } ; template<ElementType> using TSPtrArray = TSPtrArrayG<ElementType,true,TDefaultElementAllocator<CHeapRawAllocator>> ; template<ElementType> using TSRefArray = TSPtrArrayG<ElementType,false,TDefaultElementAllocator<CHeapRawAllocator>> ; template<ElementType> using TSPtrArrayA = TSPtrArrayG<ElementType,true,TDefaultElementAllocator<CInstancedRawAllocator>,CAllocatorInstance*> ; template<ElementType> using TSRefArrayA = TSPtrArrayG<ElementType,false,TDefaultElementAllocator<CInstancedRawAllocator>,CAllocatorInstance*> ; template<ElementType,bool AllowNull,ElementAllocatorType,. . . RawAllocatorArgsType> struct TIsZeroConstructType<TSPtrArrayG<ElementType,AllowNull,ElementAllocatorType,RawAllocatorArgsType . . .>> { enum { Value = TAllocatorTraits<ElementAllocatorType>::IsZeroConstruct } ; } ; template<ElementType,bool AllowNull,ElementAllocatorType,. . . RawAllocatorArgsType> struct TContainerTraits<TSPtrArrayG<ElementType,AllowNull,ElementAllocatorType,RawAllocatorArgsType . . .>> : public TContainerTraitsBase<TSPtrArrayG<ElementType,AllowNull,ElementAllocatorType,RawAllocatorArgsType . . .>> {)",
    "insertText": "static_assert(TAllocatorTraits<ElementAllocatorType>::SupportsMove, \"TSPtrArray no longer supports move-unaware allocators\")"
  }
]