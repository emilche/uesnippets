[
  {
    "label": "Locale",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Locale"
  },
  {
    "label": "PluralRules",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "PluralRules"
  },
  {
    "label": "Hashtable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Hashtable"
  },
  {
    "label": "U_I18N_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "U_I18N_API"
  },
  {
    "label": "DecimalFormat",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalFormat"
  },
  {
    "label": "DecimalFormatImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DecimalFormatImpl"
  },
  {
    "label": "CurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (# ifndef CURRPINF_H # define CURRPINF_H # include \" unicode / utypes . h \" # if ! UCONFIG_NO_FORMATTING # include \" unicode / unistr . h \" U_NAMESPACE_BEGIN class Locale ; class PluralRules ; class Hashtable ; class U_I18N_API CurrencyPluralInfo : public UObject { public :)",
    "insertText": "CurrencyPluralInfo(UErrorCode& status)"
  },
  {
    "label": "CurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrencyPluralInfo(const Locale& locale, UErrorCode& status)"
  },
  {
    "label": "CurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CurrencyPluralInfo(const CurrencyPluralInfo& info)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (CurrencyPluralInfo&)",
    "insertText": "operator(const CurrencyPluralInfo& info)"
  },
  {
    "label": "CurrencyPluralInfo()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "CurrencyPluralInfo()"
  },
  {
    "label": "clone()",
    "kind": "Method",
    "detail": "Function (CurrencyPluralInfo*)",
    "insertText": "clone()"
  },
  {
    "label": "getPluralRules()",
    "kind": "Method",
    "detail": "Function (const PluralRules*)",
    "insertText": "getPluralRules()"
  },
  {
    "label": "getCurrencyPluralPattern()",
    "kind": "Method",
    "detail": "Function (UnicodeString&)",
    "insertText": "getCurrencyPluralPattern(const UnicodeString& pluralCount, UnicodeString& result)"
  },
  {
    "label": "getLocale()",
    "kind": "Method",
    "detail": "Function (const Locale&)",
    "insertText": "getLocale()"
  },
  {
    "label": "setPluralRules()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setPluralRules(const UnicodeString& ruleDescription, UErrorCode& status)"
  },
  {
    "label": "setCurrencyPluralPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setCurrencyPluralPattern(const UnicodeString& pluralCount, const UnicodeString& pattern, UErrorCode& status)"
  },
  {
    "label": "setLocale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setLocale(const Locale& loc, UErrorCode& status)"
  },
  {
    "label": "getDynamicClassID()",
    "kind": "Method",
    "detail": "Function (UClassID)",
    "insertText": "getDynamicClassID()"
  },
  {
    "label": "getStaticClassID()",
    "kind": "Method",
    "detail": "Function (UClassID U_EXPORT2)",
    "insertText": "getStaticClassID()"
  },
  {
    "label": "initialize()",
    "kind": "Method",
    "detail": "Function (private : class DecimalFormat ; class DecimalFormatImpl ; void)",
    "insertText": "initialize(const Locale& loc, UErrorCode& status)"
  },
  {
    "label": "setupCurrencyPluralPattern()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setupCurrencyPluralPattern(const Locale& loc, UErrorCode& status)"
  },
  {
    "label": "deleteHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "deleteHash(Hashtable* hTable)"
  },
  {
    "label": "initHash()",
    "kind": "Method",
    "detail": "Function (Hashtable*)",
    "insertText": "initHash(UErrorCode& status)"
  },
  {
    "label": "copyHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "copyHash(const Hashtable* source, Hashtable* target, UErrorCode& status)"
  }
]