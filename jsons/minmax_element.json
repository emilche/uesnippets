[
  {
    "label": "_Comp",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Comp"
  },
  {
    "label": "_Proj",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Proj"
  },
  {
    "label": "_MinmaxElementLessFunc",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_MinmaxElementLessFunc"
  },
  {
    "label": "_Iter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Iter"
  },
  {
    "label": "_Sent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Sent"
  },
  {
    "label": "_ForwardIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_ForwardIterator"
  },
  {
    "label": "_Compare",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "_Compare"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _LIBCPP___ALGORITHM_MINMAX_ELEMENT_H # define _LIBCPP___ALGORITHM_MINMAX_ELEMENT_H # include<__algorithm / comp . h> # include<__config> # include<__functional / identity . h> # include<__iterator / iterator_traits . h> # include<__utility / pair . h> # include<type_traits> # if !)",
    "insertText": "defined(_LIBCPP_HAS_NO_PRAGMA_SYSTEM_HEADER)"
  },
  {
    "label": "_MinmaxElementLessFunc()",
    "kind": "Method",
    "detail": "Function (_Comp& __comp_ ; _Proj& __proj_ ; public : _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR)",
    "insertText": "_MinmaxElementLessFunc(_Comp& __comp, _Proj& __proj) : __comp_(__comp), __proj_(__proj)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<class _Iter> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 bool)",
    "insertText": "operator()(_Iter& __it1, _Iter& __it2)"
  },
  {
    "label": "__minmax_element_impl()",
    "kind": "Method",
    "detail": "Function (} } ; template<class _Iter,class _Sent,class _Proj,class _Comp> _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_Iter,_Iter>)",
    "insertText": "__minmax_element_impl(_Iter __first, _Sent __last, _Comp& __comp, _Proj& __proj)"
  },
  {
    "label": "_Proj()",
    "kind": "Method",
    "detail": "Function (auto __less = _MinmaxElementLessFunc<_Comp,)",
    "insertText": "_Proj(__comp, __proj)"
  },
  {
    "label": "__result()",
    "kind": "Method",
    "detail": "Function (pair<_Iter,_Iter>)",
    "insertText": "__result(__first, __first)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (_Iter __i = __first ;)",
    "insertText": "if(++__first == __last)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(__less(__i, __result.first))"
  },
  {
    "label": "minmax_element()",
    "kind": "Method",
    "detail": "Function (} } return __result ; } template<class _ForwardIterator,class _Compare> _LIBCPP_NODISCARD_EXT _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_ForwardIterator,_ForwardIterator>)",
    "insertText": "minmax_element(_ForwardIterator __first, _ForwardIterator __last, _Compare __comp)"
  },
  {
    "label": "__identity()",
    "kind": "Method",
    "detail": "Function (auto __proj =)",
    "insertText": "__identity()"
  },
  {
    "label": "minmax_element()",
    "kind": "Method",
    "detail": "Function (} template<class _ForwardIterator> _LIBCPP_NODISCARD_EXT _LIBCPP_HIDE_FROM_ABI _LIBCPP_CONSTEXPR_AFTER_CXX11 pair<_ForwardIterator,_ForwardIterator>)",
    "insertText": "minmax_element(_ForwardIterator __first, _ForwardIterator __last)"
  }
]