[
  {
    "label": "FGenericPlatformMath",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenericPlatformMath"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "LoadHalf()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / ContainersFwd . h \" # include \" HAL / PlatformCrt . h \" # include \" Templates / AndOrNot . h \" # include \" Templates / Decay . h \" # include \" Templates / IsFloatingPoint . h \" # include \" Templates / UnrealTypeTraits . h \" # include \" Templates / Requires . h \" # include \" Templates / ResolveTypeAmbiguity . h \" # include \" Templates / TypeCompatibleBytes . h \" # include<limits> # include<type_traits> # if PLATFORM_HAS_FENV_H # include<fenv . h> # endif struct FGenericPlatformMath { float)",
    "insertText": "LoadHalf(const uint16* Ptr)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (uint16 FP16 =* Ptr ; uint32 shifted_exp = 0 x7c00<<1 3 ; union FP32T { uint32 u ; float f ; } FP32 = { },magic = { 1 1 3<<2 3 } ; FP32 .)",
    "insertText": "u(FP16 & 0x7fff)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (uint32 exp = shifted_exp& FP32 . u ; FP32 . u + =)",
    "insertText": "uint32(127 - 15)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (FP32 . u + =)",
    "insertText": "uint32(128 - 16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(exp == 0)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (FP32 . u + = 1<<2 3 ; FP32 . f - = magic . f ; } FP32 .)",
    "insertText": "u(FP16 & 0x8000)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (union FP32T { uint32 u ; float f ; } FP32 = { } ; uint16 FP16 = { } ; FP32 . f = Value ; FP32T f32infty = {)",
    "insertText": "uint32(255 << 23)"
  },
  {
    "label": "uint32()",
    "kind": "Method",
    "detail": "Function (FP32T f16max = {)",
    "insertText": "uint32(127 + 16)"
  },
  {
    "label": "denorm_magic()",
    "kind": "Method",
    "detail": "Function (FP32T)",
    "insertText": "denorm_magic(uint32(127 - 15) + uint32(23 - 10) + 1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 sign_mask = 0 x80000000u ; uint32 sign = FP32 . u& sign_mask ; FP32 . u ^ = sign ;)",
    "insertText": "if(FP32.u >= f16max.u)"
  },
  {
    "label": "FP16()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FP16(FP32.u > f32infty.u)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(FP32.u < uint32(113 << 23))"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (FP32 . f + = denorm_magic . f ; FP16 =)",
    "insertText": "uint16(FP32.u - denorm_magic.u)"
  },
  {
    "label": "mant_odd()",
    "kind": "Method",
    "detail": "Function (} else { uint32)",
    "insertText": "mant_odd(FP32.u >> 13)"
  },
  {
    "label": "u()",
    "kind": "Method",
    "detail": "Function (FP32 .)",
    "insertText": "u(uint32(15 - 127) << 23)"
  },
  {
    "label": "uint16()",
    "kind": "Method",
    "detail": "Function (FP32 . u + = mant_odd ; FP16 =)",
    "insertText": "uint16(FP32.u >> 13)"
  },
  {
    "label": "VectorLoadHalf()",
    "kind": "Method",
    "detail": "Function (} } FP16 | = sign>> 1 6 ;* Ptr = FP16 ; } void)",
    "insertText": "VectorLoadHalf(float* RESTRICT Dst, const uint16* RESTRICT Src)"
  },
  {
    "label": "LoadHalf()",
    "kind": "Method",
    "detail": "Function (Dst [ 0 ] =)",
    "insertText": "LoadHalf(&Src[0])"
  },
  {
    "label": "LoadHalf()",
    "kind": "Method",
    "detail": "Function (Dst [ 1 ] =)",
    "insertText": "LoadHalf(&Src[1])"
  },
  {
    "label": "LoadHalf()",
    "kind": "Method",
    "detail": "Function (Dst [ 2 ] =)",
    "insertText": "LoadHalf(&Src[2])"
  },
  {
    "label": "LoadHalf()",
    "kind": "Method",
    "detail": "Function (Dst [ 3 ] =)",
    "insertText": "LoadHalf(&Src[3])"
  },
  {
    "label": "VectorStoreHalf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "VectorStoreHalf(uint16* RESTRICT Dst, const float* RESTRICT Src)"
  },
  {
    "label": "StoreHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreHalf(&Dst[0], Src[0])"
  },
  {
    "label": "StoreHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreHalf(&Dst[1], Src[1])"
  },
  {
    "label": "StoreHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreHalf(&Dst[2], Src[2])"
  },
  {
    "label": "StoreHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StoreHalf(&Dst[3], Src[3])"
  },
  {
    "label": "WideVectorLoadHalf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WideVectorLoadHalf(float* RESTRICT Dst, const uint16* RESTRICT Src)"
  },
  {
    "label": "VectorLoadHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorLoadHalf(Dst, Src)"
  },
  {
    "label": "VectorLoadHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorLoadHalf(Dst + 4, Src + 4)"
  },
  {
    "label": "WideVectorStoreHalf()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "WideVectorStoreHalf(uint16* RESTRICT Dst, const float* RESTRICT Src)"
  },
  {
    "label": "VectorStoreHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreHalf(Dst, Src)"
  },
  {
    "label": "VectorStoreHalf()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "VectorStoreHalf(Dst + 4, Src + 4)"
  },
  {
    "label": "AsUInt()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "AsUInt(float F)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (uint32 U { } ;)",
    "insertText": "static_assert(sizeof(F) == sizeof(U), \"The float and uint sizes must be equal\")"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&U, &F, sizeof(F))"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (float F { } ;)",
    "insertText": "static_assert(sizeof(F) == sizeof(U), \"The float and uint32 sizes must be equal\")"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&F, &U, sizeof(U))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&F, &U, sizeof(F))"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TruncToInt32(double F)"
  },
  {
    "label": "TruncToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TruncToInt64(double F)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "TruncToInt(float F)"
  },
  {
    "label": "TruncToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "TruncToInt(double F)"
  },
  {
    "label": "TruncToFloat()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "TruncToFloat(float F)"
  },
  {
    "label": "TruncToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "TruncToDouble(double F)"
  },
  {
    "label": "TruncToFloat()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "TruncToFloat(double F)"
  },
  {
    "label": "FloorToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "FloorToInt32(float F)"
  },
  {
    "label": "TruncToInt32()",
    "kind": "Method",
    "detail": "Function (int32 I =)",
    "insertText": "TruncToInt32(F)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "I((float)I > F)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "I((double)I > F)"
  },
  {
    "label": "TruncToInt64()",
    "kind": "Method",
    "detail": "Function (int64 I =)",
    "insertText": "TruncToInt64(F)"
  },
  {
    "label": "FloorToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "FloorToInt(double F)"
  },
  {
    "label": "FloorToFloat()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FloorToFloat(float F)"
  },
  {
    "label": "FloorToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FloorToDouble(double F)"
  },
  {
    "label": "FloorToFloat()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "FloorToFloat(double F)"
  },
  {
    "label": "RoundToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RoundToInt32(float F)"
  },
  {
    "label": "RoundToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RoundToInt32(double F)"
  },
  {
    "label": "RoundToInt64()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "RoundToInt64(double F)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "RoundToInt(float F)"
  },
  {
    "label": "RoundToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "RoundToInt(double F)"
  },
  {
    "label": "RoundToFloat()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "RoundToFloat(float F)"
  },
  {
    "label": "RoundToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "RoundToDouble(double F)"
  },
  {
    "label": "RoundToFloat()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "RoundToFloat(double F)"
  },
  {
    "label": "CeilToInt32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "CeilToInt32(float F)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "I((float)I < F)"
  },
  {
    "label": "I()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "I((double)I < F)"
  },
  {
    "label": "CeilToInt()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "CeilToInt(double F)"
  },
  {
    "label": "CeilToFloat()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "CeilToFloat(float F)"
  },
  {
    "label": "CeilToDouble()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "CeilToDouble(double F)"
  },
  {
    "label": "CeilToFloat()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "CeilToFloat(double F)"
  },
  {
    "label": "RoundToNearestTiesToEven()",
    "kind": "Method",
    "detail": "Function (} int64)",
    "insertText": "RoundToNearestTiesToEven(double F)"
  },
  {
    "label": "ensureAlwaysMsgf()",
    "kind": "Method",
    "detail": "Function (# if PLATFORM_HAS_FENV_H = = 0)",
    "insertText": "ensureAlwaysMsgf(FLT_ROUNDS == 1, TEXT(\"Platform does not support FE_TONEAREST for double to int64.\"))"
  },
  {
    "label": "llrint()",
    "kind": "Method",
    "detail": "Function (int64 result =)",
    "insertText": "llrint(F)"
  },
  {
    "label": "fegetround()",
    "kind": "Method",
    "detail": "Function (# else int PreviousRoundingMode =)",
    "insertText": "fegetround()"
  },
  {
    "label": "fesetround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fesetround(FE_TONEAREST)"
  },
  {
    "label": "fesetround()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "fesetround(PreviousRoundingMode)"
  },
  {
    "label": "Fractional()",
    "kind": "Method",
    "detail": "Function (} # endif return result ; } float)",
    "insertText": "Fractional(float Value)"
  },
  {
    "label": "Fractional()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Fractional(double Value)"
  },
  {
    "label": "Frac()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Frac(float Value)"
  },
  {
    "label": "Frac()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Frac(double Value)"
  },
  {
    "label": "Modf()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Modf(const float InValue, float* OutIntPart)"
  },
  {
    "label": "Modf()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Modf(const double InValue, double* OutIntPart)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Exp(float Value)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Exp(double Value)"
  },
  {
    "label": "Exp2()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Exp2(float Value)"
  },
  {
    "label": "Exp2()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Exp2(double Value)"
  },
  {
    "label": "Loge()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Loge(float Value)"
  },
  {
    "label": "Loge()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Loge(double Value)"
  },
  {
    "label": "LogX()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "LogX(float Base, float Value)"
  },
  {
    "label": "LogX()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "LogX(double Base, double Value)"
  },
  {
    "label": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS(LogX)"
  },
  {
    "label": "Log2()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Log2(float Value)"
  },
  {
    "label": "Log2()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Log2(double Value)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (} FORCENOINLINE float)",
    "insertText": "Fmod(float X, float Y)"
  },
  {
    "label": "Fmod()",
    "kind": "Method",
    "detail": "Function (FORCENOINLINE double)",
    "insertText": "Fmod(double X, double Y)"
  },
  {
    "label": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS(Fmod)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Sin(float Value)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Sin(double Value)"
  },
  {
    "label": "Asin()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Asin(float Value)"
  },
  {
    "label": "Asin()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Asin(double Value)"
  },
  {
    "label": "Sinh()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Sinh(float Value)"
  },
  {
    "label": "Sinh()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Sinh(double Value)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Cos(float Value)"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Cos(double Value)"
  },
  {
    "label": "Acos()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Acos(float Value)"
  },
  {
    "label": "Acos()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Acos(double Value)"
  },
  {
    "label": "Cosh()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Cosh(float Value)"
  },
  {
    "label": "Cosh()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Cosh(double Value)"
  },
  {
    "label": "Tan()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Tan(float Value)"
  },
  {
    "label": "Tan()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Tan(double Value)"
  },
  {
    "label": "Atan()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atan(float Value)"
  },
  {
    "label": "Atan()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Atan(double Value)"
  },
  {
    "label": "Tanh()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Tanh(float Value)"
  },
  {
    "label": "Tanh()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Tanh(double Value)"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Atan2(float Y, float X)"
  },
  {
    "label": "Atan2()",
    "kind": "Method",
    "detail": "Function (double)",
    "insertText": "Atan2(double Y, double X)"
  },
  {
    "label": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS(Atan2)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "Sqrt(float Value)"
  },
  {
    "label": "Sqrt()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Sqrt(double Value)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "Pow(float A, float B)"
  },
  {
    "label": "Pow()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "Pow(double A, double B)"
  },
  {
    "label": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "RESOLVE_FLOAT_AMBIGUITY_2_ARGS(Pow)"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "InvSqrt(float F)"
  },
  {
    "label": "InvSqrt()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "InvSqrt(double F)"
  },
  {
    "label": "InvSqrtEst()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "InvSqrtEst(float F)"
  },
  {
    "label": "InvSqrtEst()",
    "kind": "Method",
    "detail": "Function (} double)",
    "insertText": "InvSqrtEst(double F)"
  },
  {
    "label": "IsNaN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNaN(float A)"
  },
  {
    "label": "IsNaN()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNaN(double A)"
  },
  {
    "label": "IsFinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFinite(float A)"
  },
  {
    "label": "IsFinite()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsFinite(double A)"
  },
  {
    "label": "IsNegativeOrNegativeZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNegativeOrNegativeZero(float A)"
  },
  {
    "label": "IsNegativeOrNegativeZero()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsNegativeOrNegativeZero(double A)"
  },
  {
    "label": "Rand()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Rand()"
  },
  {
    "label": "Rand32()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "Rand32()"
  },
  {
    "label": "RandInit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RandInit(int32 Seed)"
  },
  {
    "label": "srand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "srand(Seed)"
  },
  {
    "label": "FRand()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "FRand()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (int32 RandMax = 0 x00ffffff<RAND_MAX ? 0 x00ffffff : RAND_MAX ;)",
    "insertText": "return(Rand() & RandMax) / (float)"
  },
  {
    "label": "SRandInit()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SRandInit(int32 Seed)"
  },
  {
    "label": "GetRandSeed()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetRandSeed()"
  },
  {
    "label": "SRand()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "SRand()"
  },
  {
    "label": "FloorLog2()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "FloorLog2(uint32 Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint32 pos = 0 ;)",
    "insertText": "if(Value >= 1<<16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 1 6 ; pos + = 1 6 ; })",
    "insertText": "if(Value >= 1<< 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 8 ; pos + = 8 ; })",
    "insertText": "if(Value >= 1<< 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 4 ; pos + = 4 ; })",
    "insertText": "if(Value >= 1<< 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 2 ; pos + = 2 ; })",
    "insertText": "if(Value >= 1<< 1)"
  },
  {
    "label": "FloorLog2NonZero()",
    "kind": "Method",
    "detail": "Function (pos + = 1 ; } return pos ; } uint32)",
    "insertText": "FloorLog2NonZero(uint32 Value)"
  },
  {
    "label": "FloorLog2_64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "FloorLog2_64(uint64 Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (uint64 pos = 0 ;)",
    "insertText": "if(Value >= 1ull<<32)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 3 2 ; pos + = 3 2 ; })",
    "insertText": "if(Value >= 1ull<<16)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 1 6 ; pos + = 1 6 ; })",
    "insertText": "if(Value >= 1ull<< 8)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 8 ; pos + = 8 ; })",
    "insertText": "if(Value >= 1ull<< 4)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 4 ; pos + = 4 ; })",
    "insertText": "if(Value >= 1ull<< 2)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (Value>> = 2 ; pos + = 2 ; })",
    "insertText": "if(Value >= 1ull<< 1)"
  },
  {
    "label": "FloorLog2NonZero_64()",
    "kind": "Method",
    "detail": "Function (pos + = 1 ; } return pos ; } uint64)",
    "insertText": "FloorLog2NonZero_64(uint64 Value)"
  },
  {
    "label": "CountLeadingZeros8()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "CountLeadingZeros8(uint8 Value)"
  },
  {
    "label": "CountLeadingZeros()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountLeadingZeros(uint32 Value)"
  },
  {
    "label": "CountLeadingZeros64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "CountLeadingZeros64(uint64 Value)"
  },
  {
    "label": "CountTrailingZeros()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "CountTrailingZeros(uint32 Value)"
  },
  {
    "label": "CountTrailingZeros64()",
    "kind": "Method",
    "detail": "Function (Value>> = 1 ; + + Result ; } return Result ; } uint64)",
    "insertText": "CountTrailingZeros64(uint64 Value)"
  },
  {
    "label": "CeilLogTwo()",
    "kind": "Method",
    "detail": "Function (Value>> = 1 ; + + Result ; } return Result ; } uint32)",
    "insertText": "CeilLogTwo(uint32 Arg)"
  },
  {
    "label": "CountLeadingZeros()",
    "kind": "Method",
    "detail": "Function (Arg = Arg ? Arg : 1 ; return 3 2 -)",
    "insertText": "CountLeadingZeros(Arg - 1)"
  },
  {
    "label": "CeilLogTwo64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "CeilLogTwo64(uint64 Arg)"
  },
  {
    "label": "CountLeadingZeros64()",
    "kind": "Method",
    "detail": "Function (Arg = Arg ? Arg : 1 ; return 6 4 -)",
    "insertText": "CountLeadingZeros64(Arg - 1)"
  },
  {
    "label": "ConstExprCeilLogTwo()",
    "kind": "Method",
    "detail": "Function (} uint8)",
    "insertText": "ConstExprCeilLogTwo(SIZE_T Arg)"
  },
  {
    "label": "ConstExprCeilLogTwo()",
    "kind": "Method",
    "detail": "Function (} return 1 +)",
    "insertText": "ConstExprCeilLogTwo((Arg + 1) / 2)"
  },
  {
    "label": "RoundUpToPowerOfTwo()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "RoundUpToPowerOfTwo(uint32 Arg)"
  },
  {
    "label": "RoundUpToPowerOfTwo64()",
    "kind": "Method",
    "detail": "Function (} uint64)",
    "insertText": "RoundUpToPowerOfTwo64(uint64 V)"
  },
  {
    "label": "MortonCode2()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "MortonCode2(uint32 x)"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (x& = 0 x0000ffff ;)",
    "insertText": "x(x ^ (x << 8))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x ^ (x << 4))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x ^ (x << 2))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x ^ (x << 1))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (x& = 0 x00000000ffffffff ;)",
    "insertText": "x(x ^ (x << 16))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (x& = 0 x55555555 ;)",
    "insertText": "x(x ^ (x >> 1))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x ^ (x >> 2))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x ^ (x >> 4))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x ^ (x >> 8))"
  },
  {
    "label": "x()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "x(x ^ (x >> 16))"
  },
  {
    "label": "Sign()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "Sign(const T A)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "Max(const T A, const T B)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (} template<class T> T)",
    "insertText": "Min(const T A, const T B)"
  },
  {
    "label": "MIX_FLOATS_2_ARGS()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "MIX_FLOATS_2_ARGS(Max)"
  },
  {
    "label": "MIX_FLOATS_2_ARGS()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MIX_FLOATS_2_ARGS(Min)"
  },
  {
    "label": "MIX_SIGNED_INTS_2_ARGS_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MIX_SIGNED_INTS_2_ARGS_CONSTEXPR(Max)"
  },
  {
    "label": "MIX_SIGNED_INTS_2_ARGS_CONSTEXPR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MIX_SIGNED_INTS_2_ARGS_CONSTEXPR(Min)"
  },
  {
    "label": "Min()",
    "kind": "Method",
    "detail": "Function (template<class T> T)",
    "insertText": "Min(const TArray<T>& Values, int32* MinIndex = NULL)"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (* MinIndex = INDEX_NONE ; } return)",
    "insertText": "T()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (} T CurMin = Values [ 0 ] ; int32 CurMinIndex = 0 ;)",
    "insertText": "for(int32 v = 1; v < Values.Num(); ++v)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const T Value = Values [ v ] ;)",
    "insertText": "if(Value < CurMin)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurMin = Value ; CurMinIndex = v ; } })",
    "insertText": "if(MinIndex)"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (* MinIndex = CurMinIndex ; } return CurMin ; } template<class T> T)",
    "insertText": "Max(const TArray<T>& Values, int32* MaxIndex = NULL)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const T Value = Values [ v ] ;)",
    "insertText": "if(CurMax < Value)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurMax = Value ; CurMaxIndex = v ; } })",
    "insertText": "if(MaxIndex)"
  },
  {
    "label": "CountBits()",
    "kind": "Method",
    "detail": "Function (* MaxIndex = CurMaxIndex ; } return CurMax ; } int32)",
    "insertText": "CountBits(uint64 Bits)"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bits(Bits >> 1)"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bits(Bits & 0x3333333333333333ull) + ((Bits >> 2) & 0x3333333333333333ull)"
  },
  {
    "label": "Bits()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Bits(Bits + (Bits >> 4))"
  },
  {
    "label": "AutoTest()",
    "kind": "Method",
    "detail": "Function (} # if WITH_DEV_AUTOMATION_TESTS void)",
    "insertText": "AutoTest()"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (# endif template<IntType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<IntType>) > static FORCEINLINE bool AddAndCheckForOverflow(IntType A, IntType B, IntType& OutResult)"
  },
  {
    "label": "UnsignedType()",
    "kind": "Method",
    "detail": "Function (typedef std::make_unsigned_t<IntType> UnsignedType ; const UnsignedType UnsignedA = static_cast<)",
    "insertText": "UnsignedType(A)"
  },
  {
    "label": "UnsignedType()",
    "kind": "Method",
    "detail": "Function (const UnsignedType UnsignedB = static_cast<)",
    "insertText": "UnsignedType(B)"
  },
  {
    "label": "constexpr()",
    "kind": "Method",
    "detail": "Function (const UnsignedType UnsignedSum = UnsignedA + UnsignedB ; if)",
    "insertText": "constexpr(std::is_signed_v<IntType>)"
  },
  {
    "label": "UnsignedType()",
    "kind": "Method",
    "detail": "Function (UnsignedType UnsignedMSB = static_cast<)",
    "insertText": "UnsignedType(std::numeric_limits<IntType>::min())"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (OutResult = UnsignedSum ; return true ; } else { return false ; } } } template<IntType)",
    "insertText": "UE_REQUIRES(std::is_integral_v<IntType>) > static FORCEINLINE bool SubtractAndCheckForOverflow(IntType A, IntType B, IntType& OutResult)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bSignsDiffer = false ;)",
    "insertText": "if(A < 0)"
  },
  {
    "label": "UnsignedType()",
    "kind": "Method",
    "detail": "Function (UnsignedA =)",
    "insertText": "UnsignedType(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSignsDiffer = ! bSignsDiffer ; })",
    "insertText": "if(B < 0)"
  },
  {
    "label": "UnsignedType()",
    "kind": "Method",
    "detail": "Function (bSignsDiffer = ! bSignsDiffer ; } const UnsignedType ProductBound =)",
    "insertText": "UnsignedType(std::numeric_limits<IntType>::max()) + (bSignsDiffer ? 1 : 0)"
  },
  {
    "label": "FmodReportError()",
    "kind": "Method",
    "detail": "Function (OutResult = A* B ; return true ; } else { return false ; } } else { OutResult = A* B ; return OutResult / B = = A ; } } private : void)",
    "insertText": "FmodReportError(float X, float Y)"
  },
  {
    "label": "FmodReportError()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FmodReportError(double X, double Y)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} ; template<> float)",
    "insertText": "Abs(const float A)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (} template<> double)",
    "insertText": "Abs(const double A)"
  }
]