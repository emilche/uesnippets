[
  {
    "label": "WavHeaderReader",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "WavHeaderReader"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "Read()",
    "kind": "Method",
    "detail": "Function (# ifndef COMMON_AUDIO_WAV_HEADER_H_ # define COMMON_AUDIO_WAV_HEADER_H_ # include<stddef . h> # include<stdint . h> # include<algorithm> # include \" rtc_base / checks . h \" namespace webrtc { class WavHeaderReader { public : size_t)",
    "insertText": "Read(void* buf, size_t num_bytes)"
  },
  {
    "label": "SeekForward()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SeekForward(uint32_t num_bytes)"
  },
  {
    "label": "WavHeaderReader()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "WavHeaderReader()"
  },
  {
    "label": "GetPosition()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GetPosition()"
  },
  {
    "label": "WavHeaderSize()",
    "kind": "Method",
    "detail": "Function (} ; enum class WavFormat { kWavFormatPcm = 1,kWavFormatIeeeFloat = 3,kWavFormatALaw = 6,kWavFormatMuLaw = 7,} ; size_t kPcmWavHeaderSize = 4 4 ; size_t kIeeeFloatWavHeaderSize = 5 8 ; size_t)",
    "insertText": "WavHeaderSize(WavFormat format)"
  },
  {
    "label": "CheckWavParameters()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "CheckWavParameters(size_t num_channels, int sample_rate, WavFormat format, size_t num_samples)"
  },
  {
    "label": "WriteWavHeader()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "WriteWavHeader(size_t num_channels, int sample_rate, WavFormat format, size_t num_samples, uint8_t* buf, size_t* header_size)"
  },
  {
    "label": "ReadWavHeader()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ReadWavHeader(WavHeaderReader* readable, size_t* num_channels, int* sample_rate, WavFormat* format, size_t* bytes_per_sample, size_t* num_samples, int64_t* data_start_pos)"
  }
]