[
  {
    "label": "FMTLScopedAutoreleasePool",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMTLScopedAutoreleasePool"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include<Foundation / Foundation . hpp> # include<Metal / Metal . hpp> # include<QuartzCore / QuartzCore . hpp> namespace MTL { const NS::UInteger ResourceCpuCacheModeShift = 0 ; const NS::UInteger ResourceStorageModeShift = 4 ; const NS::UInteger ResourceHazardTrackingModeShift = 8 ; const NS::UInteger ResourceCpuCacheModeMask = 0 xfUL<<ResourceCpuCacheModeShift ; const NS::UInteger ResourceStorageModeMask = 0 xfUL<<ResourceStorageModeShift ; const NS::UInteger ResourceHazardTrackingModeMask = 0 x1UL<<ResourceHazardTrackingModeShift ; } typedef NS::SharedPtr<MTL::CommandBuffer> MTLCommandBufferPtr ; typedef NS::SharedPtr<MTL::Texture> MTLTexturePtr ; typedef NS::SharedPtr<MTL::Buffer> MTLBufferPtr ; typedef NS::SharedPtr<MTL::Heap> MTLHeapPtr ; typedef NS::SharedPtr<MTL::TextureDescriptor> MTLTextureDescriptorPtr ; typedef NS::SharedPtr<MTL::VertexDescriptor> MTLVertexDescriptorPtr ; typedef NS::SharedPtr<MTL::RenderCommandEncoder> MTLRenderCommandEncoderPtr ; typedef NS::SharedPtr<MTL::ComputeCommandEncoder> MTLComputeCommandEncoderPtr ; typedef NS::SharedPtr<MTL::BlitCommandEncoder> MTLBlitCommandEncoderPtr ; typedef NS::SharedPtr<MTL::AccelerationStructureCommandEncoder> MTLAccelerationStructureCommandEncoderPtr ; typedef NS::SharedPtr<MTL::RenderPipelineDescriptor> MTLRenderPipelineDescriptorPtr ; typedef NS::SharedPtr<MTL::MeshRenderPipelineDescriptor> MTLMeshRenderPipelineDescriptorPtr ; typedef NS::SharedPtr<MTL::ComputePipelineDescriptor> MTLComputePipelineDescriptorPtr ; typedef NS::SharedPtr<MTL::TileRenderPipelineDescriptor> MTLTileRenderPipelineDescriptorPtr ; typedef NS::SharedPtr<MTL::RenderPipelineState> MTLRenderPipelineStatePtr ; typedef NS::SharedPtr<MTL::ComputePipelineState> MTLComputePipelineStatePtr ; typedef NS::SharedPtr<MTL::RenderPipelineReflection> MTLRenderPipelineReflectionPtr ; typedef NS::SharedPtr<MTL::ComputePipelineReflection> MTLComputePipelineReflectionPtr ; typedef NS::SharedPtr<MTL::Library> MTLLibraryPtr ; typedef NS::SharedPtr<MTL::Function> MTLFunctionPtr ; typedef NS::SharedPtr<MTL::Event> MTLEventPtr ; namespace NS { bool)",
    "insertText": "operator(const Range& A, const Range& B)"
  },
  {
    "label": "alloc()",
    "kind": "Method",
    "detail": "Function (AutoreleasePool = NS::)",
    "insertText": "alloc()->init()"
  },
  {
    "label": "FMTLScopedAutoreleasePool()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMTLScopedAutoreleasePool()"
  },
  {
    "label": "release()",
    "kind": "Method",
    "detail": "Function (AutoreleasePool ->)",
    "insertText": "release()"
  }
]