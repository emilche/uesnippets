[
  {
    "label": "ITrackExtension",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITrackExtension"
  },
  {
    "label": "FAssetData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAssetData"
  },
  {
    "label": "FMovieSceneTimeWarpChannel",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneTimeWarpChannel"
  },
  {
    "label": "FMovieSceneSequenceTransform",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneSequenceTransform"
  },
  {
    "label": "FMenuBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMenuBuilder"
  },
  {
    "label": "FSequencerSectionPainter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSequencerSectionPainter"
  },
  {
    "label": "UMovieSceneSkeletalAnimationSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UMovieSceneSkeletalAnimationSection"
  },
  {
    "label": "USkeleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeleton"
  },
  {
    "label": "USkeletalMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USkeletalMeshComponent"
  },
  {
    "label": "UAnimSeqExportOption",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSeqExportOption"
  },
  {
    "label": "FSkeletalAnimationTrackEditor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalAnimationTrackEditor"
  },
  {
    "label": "UAnimSequenceBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAnimSequenceBase"
  },
  {
    "label": "FMovieSceneSkeletalAnimationParamsDetailCustomization",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMovieSceneSkeletalAnimationParamsDetailCustomization"
  },
  {
    "label": "FPropertyChangedEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyChangedEvent"
  },
  {
    "label": "FSkeletalAnimationSection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSkeletalAnimationSection"
  },
  {
    "label": "FSkeletalAnimationTrackEditor()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / SubclassOf . h \" # include \" Templates / UniquePtr . h \" # include \" Widgets / SWidget . h \" # include \" ISequencer . h \" # include \" MovieSceneTrack . h \" # include \" ISequencerSection . h \" # include \" ISequencerTrackEditor . h \" # include \" MovieSceneTrackEditor . h \" # include \" EditModes / SkeletalAnimationTrackEditMode . h \" # include \" SequencerCoreFwd . h \" namespace UE::Sequencer { class ITrackExtension ; } struct FAssetData ; struct FMovieSceneTimeWarpChannel ; struct FMovieSceneSequenceTransform ; class FMenuBuilder ; class FSequencerSectionPainter ; class UMovieSceneSkeletalAnimationSection ; class USkeleton ; class USkeletalMeshComponent ; class UAnimSeqExportOption ; class FSkeletalAnimationTrackEditor : public FMovieSceneTrackEditor,public FGCObject { public :)",
    "insertText": "FSkeletalAnimationTrackEditor(TSharedRef<ISequencer> InSequencer)"
  },
  {
    "label": "FSkeletalAnimationTrackEditor()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSkeletalAnimationTrackEditor()"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "CreateTrackEditor()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<ISequencerTrackEditor>)",
    "insertText": "CreateTrackEditor(TSharedRef<ISequencer> OwningSequencer)"
  },
  {
    "label": "BuildObjectBindingContextMenu()",
    "kind": "Method",
    "detail": "Function (int32 NumberActive ; public : void)",
    "insertText": "BuildObjectBindingContextMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "BuildObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, const TArray<FGuid>& ObjectBindings, const UClass* ObjectClass)"
  },
  {
    "label": "HandleAssetAdded()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HandleAssetAdded(UObject* Asset, const FGuid& TargetObjectGuid)"
  },
  {
    "label": "MakeSectionInterface()",
    "kind": "Method",
    "detail": "Function (TSharedRef<ISequencerSection>)",
    "insertText": "MakeSectionInterface(UMovieSceneSection& SectionObject, UMovieSceneTrack& Track, FGuid ObjectBinding)"
  },
  {
    "label": "SupportsSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsSequence(UMovieSceneSequence* InSequence)"
  },
  {
    "label": "SupportsType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsType(TSubclassOf<UMovieSceneTrack> Type)"
  },
  {
    "label": "BuildTrackContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackContextMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "BuildTrackSidebarMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackSidebarMenu(FMenuBuilder& MenuBuilder, UMovieSceneTrack* Track)"
  },
  {
    "label": "BuildOutlinerEditWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "BuildOutlinerEditWidget(const FGuid& ObjectBinding, UMovieSceneTrack* Track, const FBuildEditWidgetParams& Params)"
  },
  {
    "label": "OnAllowDrop()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnAllowDrop(const FDragDropEvent& DragDropEvent, FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnDrop()",
    "kind": "Method",
    "detail": "Function (FReply)",
    "insertText": "OnDrop(const FDragDropEvent& DragDropEvent, const FSequencerDragDropParams& DragDropParams)"
  },
  {
    "label": "OnInitialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnInitialize()"
  },
  {
    "label": "OnRelease()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRelease()"
  },
  {
    "label": "BuildAddAnimationSubMenu()",
    "kind": "Method",
    "detail": "Function (private : TSharedRef<SWidget>)",
    "insertText": "BuildAddAnimationSubMenu(FGuid ObjectBinding, USkeleton* Skeleton, UE::Sequencer::TWeakViewModelPtr<UE::Sequencer::ITrackExtension> TrackModel)"
  },
  {
    "label": "BuildAnimationSubMenu()",
    "kind": "Method",
    "detail": "Function (TSharedRef<SWidget>)",
    "insertText": "BuildAnimationSubMenu(FGuid ObjectBinding, USkeleton* Skeleton, UMovieSceneTrack* Track)"
  },
  {
    "label": "AddAnimationSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddAnimationSubMenu(FMenuBuilder& MenuBuilder, TArray<FGuid> ObjectBindings, USkeleton* Skeleton, UMovieSceneTrack* Track)"
  },
  {
    "label": "FilterAnimSequences()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FilterAnimSequences(const FAssetData& AssetData, USkeleton* Skeleton)"
  },
  {
    "label": "ShouldFilterAsset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldFilterAsset(const FAssetData& AssetData)"
  },
  {
    "label": "OnAnimationAssetSelected()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationAssetSelected(const FAssetData& AssetData, TArray<FGuid> ObjectBindings, UMovieSceneTrack* Track)"
  },
  {
    "label": "OnAnimationAssetEnterPressed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAnimationAssetEnterPressed(const TArray<FAssetData>& AssetData, TArray<FGuid> ObjectBindings, UMovieSceneTrack* Track)"
  },
  {
    "label": "AddKeyInternal()",
    "kind": "Method",
    "detail": "Function (FKeyPropertyResult)",
    "insertText": "AddKeyInternal(FFrameNumber KeyTime, UObject* Object, class UAnimSequenceBase* AnimSequence, UMovieSceneTrack* Track, int32 RowIndex)"
  },
  {
    "label": "ConstructObjectBindingTrackMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ConstructObjectBindingTrackMenu(FMenuBuilder& MenuBuilder, TArray<FGuid> ObjectBindings)"
  },
  {
    "label": "HandleCreateAnimationSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCreateAnimationSequence(USkeletalMeshComponent* SkelMeshComp, USkeleton* Skeleton, FGuid Binding, bool bCeateSoftLink)"
  },
  {
    "label": "CreateAnimationSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CreateAnimationSequence(const TArray<UObject*> NewAssets,USkeletalMeshComponent* SkelMeshComp, FGuid Binding, bool bCreateSoftLink)"
  },
  {
    "label": "OpenLinkedAnimSequence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OpenLinkedAnimSequence(FGuid Binding)"
  },
  {
    "label": "CanOpenLinkedAnimSequence()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanOpenLinkedAnimSequence(FGuid Binding)"
  },
  {
    "label": "BuildTrackContextMenu_Internal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildTrackContextMenu_Internal(FMenuBuilder& MenuBuilder, UMovieSceneTrack* const InTrack, const bool bAddSeparatorAtEnd)"
  },
  {
    "label": "CreatePoseAsset()",
    "kind": "Method",
    "detail": "Function (class FMovieSceneSkeletalAnimationParamsDetailCustomization ; private : bool)",
    "insertText": "CreatePoseAsset(const TArray<UObject*> NewAssets, FGuid InObjectBinding)"
  },
  {
    "label": "HandleCreatePoseAsset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCreatePoseAsset(FGuid InObjectBinding)"
  },
  {
    "label": "OnSequencerSaved()",
    "kind": "Method",
    "detail": "Function (private : TObjectPtr<UAnimSeqExportOption> AnimSeqExportOption ; private : FDelegateHandle SequencerSavedHandle ; void)",
    "insertText": "OnSequencerSaved(ISequencer& InSequence)"
  },
  {
    "label": "OnSequencerDataChanged()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle SequencerChangedHandle ; void)",
    "insertText": "OnSequencerDataChanged(EMovieSceneDataChangeType DataChangeType)"
  },
  {
    "label": "OnPostPropertyChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnPostPropertyChanged(UObject* InObject, struct FPropertyChangedEvent& InPropertyChangedEvent)"
  },
  {
    "label": "FSkeletalAnimationSection()",
    "kind": "Method",
    "detail": "Function (} ; class FSkeletalAnimationSection : public ISequencerSection,public TSharedFromThis<FSkeletalAnimationSection> { public :)",
    "insertText": "FSkeletalAnimationSection(UMovieSceneSection& InSection, TWeakPtr<ISequencer> InSequencer)"
  },
  {
    "label": "FSkeletalAnimationSection()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSkeletalAnimationSection()"
  },
  {
    "label": "GetSectionObject()",
    "kind": "Method",
    "detail": "Function (public : UMovieSceneSection*)",
    "insertText": "GetSectionObject()"
  },
  {
    "label": "GetSectionTitle()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionTitle()"
  },
  {
    "label": "GetSectionToolTip()",
    "kind": "Method",
    "detail": "Function (FText)",
    "insertText": "GetSectionToolTip()"
  },
  {
    "label": "GetSectionTime()",
    "kind": "Method",
    "detail": "Function (TOptional<FFrameTime>)",
    "insertText": "GetSectionTime(FSequencerSectionPainter& InPainter)"
  },
  {
    "label": "GetSectionHeight()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetSectionHeight(const UE::Sequencer::FViewDensityInfo& ViewDensity)"
  },
  {
    "label": "GetContentPadding()",
    "kind": "Method",
    "detail": "Function (FMargin)",
    "insertText": "GetContentPadding()"
  },
  {
    "label": "OnPaintSection()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnPaintSection(FSequencerSectionPainter& Painter)"
  },
  {
    "label": "BeginResizeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginResizeSection()"
  },
  {
    "label": "ResizeSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResizeSection(ESequencerSectionResizeMode ResizeMode, FFrameNumber ResizeTime)"
  },
  {
    "label": "BeginSlipSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginSlipSection()"
  },
  {
    "label": "SlipSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SlipSection(FFrameNumber SlipTime)"
  },
  {
    "label": "CustomizePropertiesDetailsView()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CustomizePropertiesDetailsView(TSharedRef<IDetailsView> DetailsView, const FSequencerSectionPropertyDetailsViewCustomizationParams& InParams)"
  },
  {
    "label": "BuildSectionContextMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BuildSectionContextMenu(FMenuBuilder& MenuBuilder, const FGuid& InObjectBinding)"
  },
  {
    "label": "BeginDilateSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDilateSection()"
  },
  {
    "label": "DilateSection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DilateSection(const TRange<FFrameNumber>& NewRange, float DilationFactor)"
  },
  {
    "label": "RequestDeleteKeyArea()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "RequestDeleteKeyArea(const TArray<FName>& KeyAreaNamePath)"
  },
  {
    "label": "FindBestBlendSection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "FindBestBlendSection(FGuid InObjectBinding)"
  }
]