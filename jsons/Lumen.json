[
  {
    "label": "FScene",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScene"
  },
  {
    "label": "FSceneView",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneView"
  },
  {
    "label": "FSceneViewFamily",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSceneViewFamily"
  },
  {
    "label": "FViewFamilyInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewFamilyInfo"
  },
  {
    "label": "FViewInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewInfo"
  },
  {
    "label": "FEngineShowFlags",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEngineShowFlags"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "EPixelFormat",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EPixelFormat"
  },
  {
    "label": "FLumenSceneData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLumenSceneData"
  },
  {
    "label": "ShouldRenderLumenDiffuseGI()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" EngineDefines . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" Math / Vector . h \" # include \" RHIShaderPlatform . h \" class FScene ; class FSceneView ; class FSceneViewFamily ; class FViewFamilyInfo ; class FViewInfo ; struct FEngineShowFlags ; enum class EDiffuseIndirectMethod ; enum EPixelFormat : uint8 ; bool)",
    "insertText": "ShouldRenderLumenDiffuseGI(const FScene* Scene, const FSceneView& View, bool bSkipTracingDataCheck = false, bool bSkipProjectCheck = false)"
  },
  {
    "label": "ShouldRenderLumenReflections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderLumenReflections(const FSceneView& View, bool bSkipTracingDataCheck = false, bool bSkipProjectCheck = false, bool bIncludeStandalone = true)"
  },
  {
    "label": "ShouldRenderLumenReflectionsWater()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderLumenReflectionsWater(const FViewInfo& View, bool bSkipTracingDataCheck = false, bool bSkipProjectCheck = false)"
  },
  {
    "label": "ShouldRenderLumenDirectLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderLumenDirectLighting(const FScene* Scene, const FSceneView& View)"
  },
  {
    "label": "ShouldRenderAOWithLumenGI()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderAOWithLumenGI()"
  },
  {
    "label": "ShouldUseStereoLumenOptimizations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseStereoLumenOptimizations()"
  },
  {
    "label": "BoxSurfaceArea()",
    "kind": "Method",
    "detail": "Function (class FLumenSceneData ; double)",
    "insertText": "BoxSurfaceArea(FVector Extent)"
  },
  {
    "label": "DebugResetSurfaceCache()",
    "kind": "Method",
    "detail": "Function (} namespace Lumen { uint32 PhysicalPageSize = 1 2 8 ; uint32 VirtualPageSize = PhysicalPageSize - 1 ; uint32 MinCardResolution = 8 ; uint32 MinResLevel = 3 ; uint32 MaxResLevel = 1 1 ; uint32 SubAllocationResLevel = 7 ; uint32 NumResLevels = MaxResLevel - MinResLevel + 1 ; uint32 CardTileSize = 8 ; uint32 CardTileShadowDownsampleFactorDwords = 8 ; uint32 NumDistanceBuckets = 1 6 ; float MaxTraceDistance = 0 . 5 f* UE_OLD_WORLD_MAX ; enum class ETracingPermutation { Cards,VoxelsAfterCards,Voxels,MAX } ; void)",
    "insertText": "DebugResetSurfaceCache()"
  },
  {
    "label": "GetMaxTraceDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetMaxTraceDistance(const FViewInfo& View)"
  },
  {
    "label": "IsLumenFeatureAllowedForView()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLumenFeatureAllowedForView(const FScene* Scene, const FSceneView& View, bool bSkipTracingDataCheck = false, bool bSkipProjectCheck = false)"
  },
  {
    "label": "ShouldVisualizeScene()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVisualizeScene(const FEngineShowFlags& ShowFlags)"
  },
  {
    "label": "ShouldVisualizeHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldVisualizeHardwareRayTracing(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ShouldHandleSkyLight()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldHandleSkyLight(const FScene* Scene, const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ShouldUpdateLumenSceneViewOrigin()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUpdateLumenSceneViewOrigin()"
  },
  {
    "label": "GetLumenSceneViewOrigin()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetLumenSceneViewOrigin(const FViewInfo& View, int32 ClipmapIndex)"
  },
  {
    "label": "GetGlobalDFResolution()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetGlobalDFResolution()"
  },
  {
    "label": "GetGlobalDFClipmapExtent()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetGlobalDFClipmapExtent(int32 ClipmapIndex)"
  },
  {
    "label": "GetNumGlobalDFClipmaps()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumGlobalDFClipmaps(const FSceneView& View)"
  },
  {
    "label": "UseAsyncCompute()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseAsyncCompute(const FViewFamilyInfo& ViewFamily)"
  },
  {
    "label": "UseWaveOps()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseWaveOps(EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UseThreadGroupSize32()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseThreadGroupSize32()"
  },
  {
    "label": "GetLightingDataFormat()",
    "kind": "Method",
    "detail": "Function (EPixelFormat)",
    "insertText": "GetLightingDataFormat()"
  },
  {
    "label": "GetLightingQuantizationError()",
    "kind": "Method",
    "detail": "Function (FVector3f)",
    "insertText": "GetLightingQuantizationError()"
  },
  {
    "label": "IsSurfaceCacheFrozen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSurfaceCacheFrozen()"
  },
  {
    "label": "IsSurfaceCacheUpdateFrameFrozen()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSurfaceCacheUpdateFrameFrozen()"
  },
  {
    "label": "IsSoftwareRayTracingSupported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSoftwareRayTracingSupported()"
  },
  {
    "label": "UseMeshSDFTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseMeshSDFTracing(const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "UseGlobalSDFTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseGlobalSDFTracing(const FEngineShowFlags& EngineShowFlags)"
  },
  {
    "label": "UseGlobalSDFSimpleCoverageBasedExpand()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseGlobalSDFSimpleCoverageBasedExpand()"
  },
  {
    "label": "UseGlobalSDFObjectGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseGlobalSDFObjectGrid(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHeightfieldTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHeightfieldTracing(const FSceneViewFamily& ViewFamily, const FLumenSceneData& LumenSceneData)"
  },
  {
    "label": "UseHeightfieldTracingForVoxelLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHeightfieldTracingForVoxelLighting(const FLumenSceneData& LumenSceneData)"
  },
  {
    "label": "GetHeightfieldMaxTracingSteps()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetHeightfieldMaxTracingSteps()"
  },
  {
    "label": "IsUsingGlobalSDF()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingGlobalSDF(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "AnyLumenHardwareRayTracingPassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyLumenHardwareRayTracingPassEnabled(const FScene* Scene, const FViewInfo& View)"
  },
  {
    "label": "AnyLumenHardwareInlineRayTracingPassEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AnyLumenHardwareInlineRayTracingPassEnabled(const FScene* Scene, const FViewInfo& View)"
  },
  {
    "label": "UseHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracing(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHardwareRayTracedSceneLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedSceneLighting(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHardwareRayTracedDirectLighting()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedDirectLighting(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHardwareRayTracedReflections()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedReflections(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseReSTIRGather()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseReSTIRGather(const FSceneViewFamily& ViewFamily, EShaderPlatform ShaderPlatform)"
  },
  {
    "label": "UseHardwareRayTracedScreenProbeGather()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedScreenProbeGather(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHardwareRayTracedShortRangeAO()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedShortRangeAO(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHardwareRayTracedRadianceCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedRadianceCache(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHardwareRayTracedRadiosity()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedRadiosity(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "UseHardwareRayTracedVisualize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareRayTracedVisualize(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "IsUsingRayTracingLightingGrid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUsingRayTracingLightingGrid(const FSceneViewFamily& ViewFamily, const FViewInfo& View, EDiffuseIndirectMethod DiffuseIndirectMethod)"
  },
  {
    "label": "ShouldRenderRadiosityHardwareRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldRenderRadiosityHardwareRayTracing(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "ShouldPrecachePSOs()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldPrecachePSOs(EShaderPlatform Platform)"
  },
  {
    "label": "UseHardwareInlineRayTracing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseHardwareInlineRayTracing(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "GetHardwareRayTracingPullbackBias()",
    "kind": "Method",
    "detail": "Function (enum class ESurfaceCacheSampling { AlwaysResidentPagesWithoutFeedback,AlwaysResidentPages,HighResPages,} ; float)",
    "insertText": "GetHardwareRayTracingPullbackBias()"
  },
  {
    "label": "UseFarField()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UseFarField(const FSceneViewFamily& ViewFamily)"
  },
  {
    "label": "GetFarFieldMaxTraceDistance()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFarFieldMaxTraceDistance()"
  },
  {
    "label": "GetNearFieldMaxTraceDistanceDitherScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNearFieldMaxTraceDistanceDitherScale(bool bUseFarField)"
  },
  {
    "label": "GetNearFieldSceneRadius()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetNearFieldSceneRadius(const FViewInfo& View, bool bUseFarField)"
  },
  {
    "label": "GetFarFieldReferencePos()",
    "kind": "Method",
    "detail": "Function (FVector)",
    "insertText": "GetFarFieldReferencePos()"
  },
  {
    "label": "GetMeshCardDistanceBin()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetMeshCardDistanceBin(float Distance)"
  },
  {
    "label": "GetHeightfieldReceiverBias()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetHeightfieldReceiverBias()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "LLM_DECLARE_TAG()",
    "kind": "Method",
    "detail": "Function (} ; int32 GLumenFastCameraMode ;)",
    "insertText": "LLM_DECLARE_TAG(Lumen)"
  }
]