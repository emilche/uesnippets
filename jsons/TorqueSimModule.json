[
  {
    "label": "FTorqueSimModule",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTorqueSimModule"
  },
  {
    "label": "CHAOSVEHICLESCORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "CHAOSVEHICLESCORE_API"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" SimModule / SimulationModuleBase . h \" # include \" VehicleUtility . h \" namespace Chaos { class FTorqueSimModule ; struct FTorqueSimModuleData : public FModuleNetData,public Chaos::TSimulationModuleTypeable<FTorqueSimModule,FTorqueSimModuleData> { #)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) FTorqueSimModuleData(int NodeArrayIndex, const FString& InDebugString) : FModuleNetData(NodeArrayIndex, InDebugString)"
  },
  {
    "label": "FTorqueSimModuleData()",
    "kind": "Method",
    "detail": "Function (} # else)",
    "insertText": "FTorqueSimModuleData(int NodeArrayIndex) : FModuleNetData(NodeArrayIndex)"
  },
  {
    "label": "FillSimState()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "FillSimState(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "FillNetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FillNetState(const ISimulationModuleBase* SimModule)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "Lerp()",
    "kind": "Method",
    "detail": "Function (Ar<<AngularVelocity ; Ar<<AngularPosition ; Ar<<DriveTorque ; Ar<<LoadTorque ; Ar<<BrakingTorque ; } void)",
    "insertText": "Lerp(const float LerpFactor, const FModuleNetData& Min, const FModuleNetData& Max)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) virtual FString ToString()"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (# endif float AngularVelocity = 0 . 0 f ; float AngularPosition = 0 . 0 f ; float DriveTorque = 0 . 0 f ; float LoadTorque = 0 . 0 f ; float BrakingTorque = 0 . 0 f ; } ; class FTorqueSimModule : public ISimulationModuleBase,public TSimulationModuleTypeable<FTorqueSimModule> { FTorqueSimModuleData ; public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FTorqueSimModule)"
  },
  {
    "label": "FTorqueSimModule()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTorqueSimModule() : DriveTorque(0.f) , LoadTorque(0.f) , BrakingTorque(0.f) , AngularVelocity(0.f) , AngularPosition(0.0f)"
  },
  {
    "label": "IsBehaviourType()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsBehaviourType(eSimModuleTypeFlags InType)"
  },
  {
    "label": "SetDriveTorque()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetDriveTorque(float TorqueIn)"
  },
  {
    "label": "GetDriveTorque()",
    "kind": "Method",
    "detail": "Function (DriveTorque = TorqueIn ; } float)",
    "insertText": "GetDriveTorque()"
  },
  {
    "label": "GetLoadTorque()",
    "kind": "Method",
    "detail": "Function (LoadTorque = TorqueIn ; } float)",
    "insertText": "GetLoadTorque()"
  },
  {
    "label": "GetBrakingTorque()",
    "kind": "Method",
    "detail": "Function (BrakingTorque = TorqueIn ; } float)",
    "insertText": "GetBrakingTorque()"
  },
  {
    "label": "GetAngularVelocity()",
    "kind": "Method",
    "detail": "Function (AngularVelocity = AngularVelocityIn ; } float)",
    "insertText": "GetAngularVelocity()"
  },
  {
    "label": "SetAngularPosition()",
    "kind": "Method",
    "detail": "Function (AngularVelocity + = AngularVelocityIn ; } void)",
    "insertText": "SetAngularPosition(float AngularPositionIn)"
  },
  {
    "label": "GetAngularPosition()",
    "kind": "Method",
    "detail": "Function (AngularPosition = AngularPositionIn ; } float)",
    "insertText": "GetAngularPosition()"
  },
  {
    "label": "RPMToOmega()",
    "kind": "Method",
    "detail": "Function (AngularVelocity =)",
    "insertText": "RPMToOmega(InRPM)"
  },
  {
    "label": "GetRPM()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetRPM()"
  },
  {
    "label": "TransmitTorque()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "TransmitTorque(const FSimModuleTree& BlockSystem, float PushedTorque, float BrakeTorque = 0.f, float GearingRatio = 1.0f, float ClutchSlip = 1.0f)"
  },
  {
    "label": "IntegrateAngularVelocity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IntegrateAngularVelocity(float DeltaTime, float Inertia, float MaxRotationVel = MAX_FLT)"
  },
  {
    "label": "CastToTorqueInterface()",
    "kind": "Method",
    "detail": "Function (FTorqueSimModule*)",
    "insertText": "CastToTorqueInterface(ISimulationModuleBase* SimModule)"
  },
  {
    "label": "DEFINE_CHAOSSIMTYPENAME()",
    "kind": "Method",
    "detail": "Function (} return nullptr ; } protected : float DriveTorque ; float LoadTorque ; float BrakingTorque ; float AngularVelocity ; float AngularPosition ; } ; class FWheelBaseInterface : public FTorqueSimModule,public TSimulationModuleTypeable<FWheelBaseInterface> { public :)",
    "insertText": "DEFINE_CHAOSSIMTYPENAME(FWheelBaseInterface)"
  },
  {
    "label": "FWheelBaseInterface()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FWheelBaseInterface() : SuspensionSimTreeIndex(ISimulationModuleBase::INVALID_IDX) , SurfaceFriction(1.0f) , ForceIntoSurface(0.0f)"
  },
  {
    "label": "SetSuspensionSimTreeIndex()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSuspensionSimTreeIndex(int IndexIn)"
  },
  {
    "label": "GetSuspensionSimTreeIndex()",
    "kind": "Method",
    "detail": "Function (SuspensionSimTreeIndex = IndexIn ; } int)",
    "insertText": "GetSuspensionSimTreeIndex()"
  },
  {
    "label": "SetForceIntoSurface()",
    "kind": "Method",
    "detail": "Function (SurfaceFriction = FrictionIn ; } void)",
    "insertText": "SetForceIntoSurface(float ForceIntoSurfaceIn)"
  }
]