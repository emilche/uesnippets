[
  {
    "label": "FCEFWebBrowserWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFWebBrowserWindow"
  },
  {
    "label": "FCEFImeHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFImeHandler"
  },
  {
    "label": "SWindow",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SWindow"
  },
  {
    "label": "FCEFTextInputMethodContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCEFTextInputMethodContext"
  },
  {
    "label": "push_macro()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # if WITH_CEF3&& ! PLATFORM_LINUX # include \" Layout / Geometry . h \" # include \" Widgets / SWindow . h \" # if PLATFORM_WINDOWS # include \" Windows / AllowWindowsPlatformTypes . h \" # include \" Windows / AllowWindowsPlatformAtomics . h \" # endif # pragma)",
    "insertText": "push_macro(\"OVERRIDE\") #undef OVERRIDE THIRD_PARTY_INCLUDES_START #if PLATFORM_APPLE PRAGMA_DISABLE_DEPRECATION_WARNINGS #endif #include \"include/cef_client.h\" #if PLATFORM_APPLE PRAGMA_ENABLE_DEPRECATION_WARNINGS #endif THIRD_PARTY_INCLUDES_END #pragma pop_macro(\"OVERRIDE\")"
  },
  {
    "label": "FCEFTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (class FCEFImeHandler ; class SWindow ; class FCEFTextInputMethodContext : public ITextInputMethodContext { public : ~)",
    "insertText": "FCEFTextInputMethodContext()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} TSharedRef<FCEFTextInputMethodContext>)",
    "insertText": "Create(const TSharedRef<FCEFImeHandler>& InOwner)"
  },
  {
    "label": "AbortComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AbortComposition()"
  },
  {
    "label": "UpdateCachedGeometry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateCachedGeometry(const FGeometry& AllottedGeometry)"
  },
  {
    "label": "CEFCompositionRangeChanged()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CEFCompositionRangeChanged(const CefRange& SelectionRange, const CefRenderHandler::RectList& CharacterBounds)"
  },
  {
    "label": "ResetComposition()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "ResetComposition()"
  },
  {
    "label": "IsComposing()",
    "kind": "Method",
    "detail": "Function (public : bool)",
    "insertText": "IsComposing()"
  },
  {
    "label": "IsReadOnly()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "IsReadOnly()"
  },
  {
    "label": "GetTextLength()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTextLength()"
  },
  {
    "label": "GetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetSelectionRange(uint32& BeginIndex, uint32& Length, ECaretPosition& CaretPosition)"
  },
  {
    "label": "SetSelectionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSelectionRange(const uint32 BeginIndex, const uint32 Length, const ECaretPosition CaretPosition)"
  },
  {
    "label": "GetTextInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTextInRange(const uint32 BeginIndex, const uint32 Length, FString& OutString)"
  },
  {
    "label": "SetTextInRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTextInRange(const uint32 BeginIndex, const uint32 Length, const FString& InString)"
  },
  {
    "label": "GetCharacterIndexFromPoint()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetCharacterIndexFromPoint(const FVector2D& Point)"
  },
  {
    "label": "GetTextBounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextBounds(const uint32 BeginIndex, const uint32 Length, FVector2D& Position, FVector2D& Size)"
  },
  {
    "label": "GetScreenBounds()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetScreenBounds(FVector2D& Position, FVector2D& Size)"
  },
  {
    "label": "GetWindow()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FGenericWindow>)",
    "insertText": "GetWindow()"
  },
  {
    "label": "BeginComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginComposition()"
  },
  {
    "label": "UpdateCompositionRange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCompositionRange(const int32 InBeginIndex, const uint32 InLength)"
  },
  {
    "label": "EndComposition()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndComposition()"
  },
  {
    "label": "FCEFTextInputMethodContext()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FCEFTextInputMethodContext(const TSharedRef<FCEFImeHandler>& InOwner)"
  }
]