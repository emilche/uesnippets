[
  {
    "label": "ActorType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ActorType"
  },
  {
    "label": "TActorDescListIteratorValueType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TActorDescListIteratorValueType"
  },
  {
    "label": "DescType",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DescType"
  },
  {
    "label": "TActorDescList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TActorDescList"
  },
  {
    "label": "FWorldPartitionImplBase",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FWorldPartitionImplBase"
  },
  {
    "label": "FActorGuidKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FActorGuidKeyFuncs"
  },
  {
    "label": "TBaseIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TBaseIterator"
  },
  {
    "label": "TIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TIterator"
  },
  {
    "label": "TConstIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TConstIterator"
  },
  {
    "label": "FActorDescList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActorDescList"
  },
  {
    "label": "GetKeyHash()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GameFramework / Actor . h \" # include \" WorldPartition / WorldPartitionLog . h \" # include \" WorldPartition / WorldPartitionActorDesc . h \" # include \" WorldPartition / WorldPartitionActorDescType . h \" # if WITH_EDITOR template<DescType,class ActorType> struct TActorDescListIteratorValueType { using Type = DescType ; } ; # endif template<class DescType> class TActorDescList { # if WITH_EDITOR struct FWorldPartitionImplBase ; struct FActorGuidKeyFuncs : TDefaultMapKeyFuncs<FGuid,TUniquePtr<DescType>*,false> { uint32)",
    "insertText": "GetKeyHash(const FGuid& Key)"
  },
  {
    "label": "TActorDescList()",
    "kind": "Method",
    "detail": "Function (} } ; protected : using FGuidActorDescMap = TMap<FGuid,TUniquePtr<DescType>*,FDefaultSetAllocator,FActorGuidKeyFuncs> ; using FActorDescArray = TChunkedArray<TUniquePtr<DescType>> ; public :)",
    "insertText": "TActorDescList() : bIsProxy(false)"
  },
  {
    "label": "TActorDescList()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TActorDescList()"
  },
  {
    "label": "TActorDescList()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TActorDescList(const TActorDescList&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (TActorDescList&)",
    "insertText": "operator(const TActorDescList&)"
  },
  {
    "label": "IsEmpty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEmpty()"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} template<bool bConst,class ActorType> class TBaseIterator {)",
    "insertText": "static_assert(TIsDerivedFrom<ActorType, AActor>::IsDerived, \"Type is not derived from AActor.\")"
  },
  {
    "label": "TBaseIterator()",
    "kind": "Method",
    "detail": "Function (protected : using MapType = FGuidActorDescMap ; using ValueType = TActorDescListIteratorValueType<DescType,ActorType>::Type ; using IteratorType = std::conditional_t<bConst,MapType::TConstIterator,MapType::TIterator> ; using ListType = std::conditional_t<bConst,const TActorDescList<DescType>*,TActorDescList<DescType>*> ; using ReturnType = std::conditional_t<bConst,const ValueType*,ValueType*> ; public :)",
    "insertText": "TBaseIterator(ListType InActorDescList, UClass* InActorClass) : ActorsIterator(InActorDescList->GetActorsByGuid()) , ActorClass(InActorClass) , bIsProxy(InActorDescList->bIsProxy)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator()"
  },
  {
    "label": "RemoveCurrent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveCurrent()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetActorClass()",
    "kind": "Method",
    "detail": "Function (} UClass*)",
    "insertText": "GetActorClass()"
  },
  {
    "label": "TIterator()",
    "kind": "Method",
    "detail": "Function (} IteratorType ActorsIterator ; UClass* ActorClass ; bool bIsProxy ; } ; template<class ActorType = AActor> class TIterator : public TBaseIterator<false,ActorType> { using BaseType = TBaseIterator<false,ActorType> ; public :)",
    "insertText": "TIterator(typename BaseType::ListType InActorDescList, UClass* InActorClass = nullptr) : BaseType(InActorDescList, InActorClass ? InActorClass : ActorType::StaticClass())"
  },
  {
    "label": "TConstIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<class ActorType = AActor> class TConstIterator : public TBaseIterator<true,ActorType> { using BaseType = TBaseIterator<true,ActorType> ; public :)",
    "insertText": "TConstIterator(typename BaseType::ListType InActorDescList, UClass* InActorClass = nullptr) : BaseType(InActorDescList, InActorClass ? InActorClass : ActorType::StaticClass())"
  },
  {
    "label": "AddActorDescriptor()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "AddActorDescriptor(DescType* ActorDesc)"
  },
  {
    "label": "RemoveActorDescriptor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveActorDescriptor(DescType* ActorDesc)"
  },
  {
    "label": "GetActorsByGuid()",
    "kind": "Method",
    "detail": "Function (FGuidActorDescMap&)",
    "insertText": "GetActorsByGuid()"
  },
  {
    "label": "SetIsProxy()",
    "kind": "Method",
    "detail": "Function (} protected : void)",
    "insertText": "SetIsProxy()"
  },
  {
    "label": "GetProxyActorsByGuid()",
    "kind": "Method",
    "detail": "Function (bIsProxy = true ; } FGuidActorDescMap&)",
    "insertText": "GetProxyActorsByGuid()"
  },
  {
    "label": "GetActorDescriptor()",
    "kind": "Method",
    "detail": "Function (} TUniquePtr<DescType>*)",
    "insertText": "GetActorDescriptor(const FGuid& ActorGuid)"
  },
  {
    "label": "GetActorDescriptorChecked()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<DescType>*)",
    "insertText": "GetActorDescriptorChecked(const FGuid& ActorGuid)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (} else { TUniquePtr<DescType>* NewActorDesc =)",
    "insertText": "new(ActorDescList) TUniquePtr<DescType>(ActorDesc)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ActorsByGuid .)",
    "insertText": "Add(ActorDesc->GetGuid(), NewActorDesc)"
  },
  {
    "label": "GetActorDesc()",
    "kind": "Method",
    "detail": "Function (} template<class ActorType> struct TActorDescListIteratorValueType<FWorldPartitionActorDesc,ActorType> { using Type = FWorldPartitionActorDescType<ActorType>::Type ; } ; # endif class FActorDescList : public TActorDescList<FWorldPartitionActorDesc> { # if WITH_EDITOR public : FWorldPartitionActorDesc*)",
    "insertText": "GetActorDesc(const FGuid& Guid)"
  },
  {
    "label": "GetActorDescChecked()",
    "kind": "Method",
    "detail": "Function (FWorldPartitionActorDesc&)",
    "insertText": "GetActorDescChecked(const FGuid& Guid)"
  },
  {
    "label": "GetActorDescCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetActorDescCount()"
  },
  {
    "label": "AddActor()",
    "kind": "Method",
    "detail": "Function (} FWorldPartitionActorDesc*)",
    "insertText": "AddActor(const AActor* InActor)"
  }
]