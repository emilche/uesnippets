[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "TPBDRigidsEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDRigidsEvolution"
  },
  {
    "label": "TPBDRigidParticles",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPBDRigidParticles"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / ArrayCollectionArray . h \" # include \" Chaos / RigidParticles . h \" # include \" Chaos / Rotation . h \" # if)",
    "insertText": "defined(_MSC_VER) #pragma warning(push) #pragma warning(disable:4946)"
  },
  {
    "label": "EnsureSleepingObjectState()",
    "kind": "Method",
    "detail": "Function (template<class T,int d> class TPBDRigidsEvolution ; void)",
    "insertText": "EnsureSleepingObjectState(EObjectStateType ObjectState)"
  },
  {
    "label": "TPBDRigidParticles()",
    "kind": "Method",
    "detail": "Function (template<class T,int d> class TPBDRigidParticles : public TRigidParticles<T,d> { class TPBDRigidsEvolution<T,d> ; public : using TRigidParticles<T,d>::CenterOfMass ; using TRigidParticles<T,d>::RotationOfMass ; using TRigidParticles<T,d>::Sleeping ;)",
    "insertText": "TPBDRigidParticles() : TRigidParticles<T, d>()"
  },
  {
    "label": "RegisterArrays()",
    "kind": "Method",
    "detail": "Function (this -> MParticleType = EParticleType::Rigid ;)",
    "insertText": "RegisterArrays()"
  },
  {
    "label": "TPBDRigidParticles()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "TPBDRigidParticles(const TPBDRigidParticles<T, d>& Other)"
  },
  {
    "label": "TPBDRigidParticles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TPBDRigidParticles(TPBDRigidParticles<T, d>&& Other) : TRigidParticles<T, d>(MoveTemp(Other)) , MP(MoveTemp(Other.MP)) , MQ(MoveTemp(Other.MQ)) , MPreV(MoveTemp(Other.MPreV)) , MPreW(MoveTemp(Other.MPreW)) , MSolverBodyIndex(MoveTemp(Other.MSolverBodyIndex))"
  },
  {
    "label": "TPBDRigidParticles()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TPBDRigidParticles()"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MP)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MQ)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MPreV)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MPreW)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddArray(&MSolverBodyIndex)"
  },
  {
    "label": "GetQ()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "GetQ(const int32 index)"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetQ(const int32 index, const TRotation<T, d>& InQ)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MQ [ index ] = TRotation<FRealSingle,)",
    "insertText": "d(InQ)"
  },
  {
    "label": "GetQf()",
    "kind": "Method",
    "detail": "Function (} const TRotation<FRealSingle,d>)",
    "insertText": "GetQf(const int32 index)"
  },
  {
    "label": "GetPreV()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "GetPreV(const int32 index)"
  },
  {
    "label": "SetPreV()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetPreV(const int32 index, const TVector<T, d>& InPreV)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MPreV [ index ] = TVector<FRealSingle,)",
    "insertText": "d(InPreV)"
  },
  {
    "label": "GetPreVf()",
    "kind": "Method",
    "detail": "Function (} const TVector<FRealSingle,d>)",
    "insertText": "GetPreVf(const int32 index)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MPreW [ index ] = TVector<FRealSingle,)",
    "insertText": "d(InPreW)"
  },
  {
    "label": "GetPreWf()",
    "kind": "Method",
    "detail": "Function (} const TVector<FRealSingle,d>)",
    "insertText": "GetPreWf(const int32 index)"
  },
  {
    "label": "XCom()",
    "kind": "Method",
    "detail": "Function (MPreW [ index ] = InPreW ; } const TVector<T,d>)",
    "insertText": "XCom(const int32 index)"
  },
  {
    "label": "PCom()",
    "kind": "Method",
    "detail": "Function (} const TVector<T,d>)",
    "insertText": "PCom(const int32 index)"
  },
  {
    "label": "RCom()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "RCom(const int32 index)"
  },
  {
    "label": "QCom()",
    "kind": "Method",
    "detail": "Function (} const TRotation<T,d>)",
    "insertText": "QCom(const int32 index)"
  },
  {
    "label": "SetTransformPQCom()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetTransformPQCom(const int32 index, const TVector<T, d>& InPCom, const TRotation<T, d>& InQCom)"
  },
  {
    "label": "SetQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetQ(index, InQCom * RotationOfMass(index).Inverse())"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetP(index, InPCom - GetQ(index) * CenterOfMass(index))"
  },
  {
    "label": "SolverBodyIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "SolverBodyIndex(const int32 index)"
  },
  {
    "label": "Handle()",
    "kind": "Method",
    "detail": "Function (MSolverBodyIndex [ index ] = InSolverBodyIndex ; } typedef TPBDRigidParticleHandle<T,d> THandleType ; const THandleType*)",
    "insertText": "Handle(int32 Index)"
  },
  {
    "label": "SetSleeping()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSleeping(int32 Index, bool bSleeping)"
  },
  {
    "label": "SetPreV()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreV(Index, this->GetV(Index))"
  },
  {
    "label": "SetPreW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPreW(Index, this->GetW(Index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(bSleeping)"
  },
  {
    "label": "SetV()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetV(Index, FVec3(0))"
  },
  {
    "label": "SetW()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetW(Index, FVec3(0))"
  },
  {
    "label": "ObjectState()",
    "kind": "Method",
    "detail": "Function (} bool CurrentlySleeping = this ->)",
    "insertText": "ObjectState(Index)"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (TGeometryParticleHandle<T,d>* Particle = reinterpret_cast<TGeometryParticleHandle<T,)",
    "insertText": "d(this->Handle(Index))"
  },
  {
    "label": "AddSleepData()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AddSleepData(Particle, bSleeping)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(this->ObjectState(Index) == EObjectStateType::Dynamic || this->ObjectState(Index) == EObjectStateType::Sleeping)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(this->ObjectState(Index) == EObjectStateType::Kinematic && bSleeping)"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetObjectState(int32 Index, EObjectStateType InObjectState)"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "InvM(Index)"
  },
  {
    "label": "InvI()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "InvI(Index) = TVec3<FRealSingle>(0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if((CurrentState == EObjectStateType::Dynamic || CurrentState == EObjectStateType::Sleeping) && (InObjectState == EObjectStateType::Kinematic || InObjectState == EObjectStateType::Static))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if((CurrentState == EObjectStateType::Kinematic || CurrentState == EObjectStateType::Static || CurrentState == EObjectStateType::Uninitialized) && (InObjectState == EObjectStateType::Dynamic || InObjectState == EObjectStateType::Sleeping))"
  },
  {
    "label": "InvM()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "InvM(Index) = FMath::IsNearlyZero(this->M(Index)) ? 0.0f : 1.f / this->M(Index)"
  },
  {
    "label": "InvI()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "InvI(Index) = (this->I(Index).IsNearlyZero() || FMath::IsNearlyZero(this->M(Index))) ? TVec3<FRealSingle>::ZeroVector : TVec3<FRealSingle>( 1.f / this->I(Index)[0], 1.f / this->I(Index)[1], 1.f / this->I(Index)[2])"
  },
  {
    "label": "SetP()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetP(Index, this->GetX(Index))"
  },
  {
    "label": "SetQf()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "SetQf(Index, this->GetRf(Index))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(InObjectState == EObjectStateType::Sleeping)"
  },
  {
    "label": "SetSleeping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSleeping(Index, true)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const bool bNewSleeping = InObjectState = = EObjectStateType::Sleeping ;)",
    "insertText": "if(bCurrentSleeping != bNewSleeping)"
  },
  {
    "label": "AddSleepData()",
    "kind": "Method",
    "detail": "Function (this ->)",
    "insertText": "AddSleepData(Particle, bNewSleeping)"
  },
  {
    "label": "SetSleepType()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetSleepType(int32 Index, ESleepType InSleepType)"
  },
  {
    "label": "SetObjectState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetObjectState(Index, EObjectStateType::Dynamic)"
  },
  {
    "label": "SleepType()",
    "kind": "Method",
    "detail": "Function (} this ->)",
    "insertText": "SleepType(Index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString(int32 index)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString BaseString = TRigidParticles<T,d)",
    "insertText": "ToString(index)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Serialize(FChaosArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (TRigidParticles<T,d)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "UsingCustomVersion()",
    "kind": "Method",
    "detail": "Function (Ar<<MP ; Ar .)",
    "insertText": "UsingCustomVersion(FUE5ReleaseStreamObjectVersion::GUID)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (Ar<<MQ<<MPreV<<MPreW ; } else { TArrayCollectionArray<TRotation<FReal,d>> QDouble ; QDouble .)",
    "insertText": "Resize(MQ.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (QDouble [ Index ] = TRotation<FReal,)",
    "insertText": "d(MQ[Index])"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} TArrayCollectionArray<TVector<FReal,d>> PreVDouble ; PreVDouble .)",
    "insertText": "Resize(MPreV.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (PreVDouble [ Index ] = TVector<FReal,)",
    "insertText": "d(MPreV[Index])"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} TArrayCollectionArray<TVector<FReal,d>> PreWDouble ; PreWDouble .)",
    "insertText": "Resize(MPreW.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (PreWDouble [ Index ] = TVector<FReal,)",
    "insertText": "d(MPreW[Index])"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} Ar<<QDouble<<PreVDouble<<PreWDouble ; MQ .)",
    "insertText": "Resize(QDouble.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MQ [ Index ] = TRotation<FRealSingle,)",
    "insertText": "d(QDouble[Index])"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} MPreV .)",
    "insertText": "Resize(PreVDouble.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MPreV [ Index ] = TVector<FRealSingle,)",
    "insertText": "d(PreVDouble[Index])"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (} MPreW .)",
    "insertText": "Resize(PreWDouble.Num())"
  },
  {
    "label": "d()",
    "kind": "Method",
    "detail": "Function (MPreW [ Index ] = TVector<FRealSingle,)",
    "insertText": "d(PreWDouble[Index])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } } private : TArrayCollectionArray<TVector<T,d>> MP ; TArrayCollectionArray<TRotation<FRealSingle,d>> MQ ; TArrayCollectionArray<TVector<FRealSingle,d>> MPreV ; TArrayCollectionArray<TVector<FRealSingle,d>> MPreW ; TArrayCollectionArray<int32> MSolverBodyIndex ; } ; using FPBDRigidParticles = TPBDRigidParticles<FReal,3> ; template<T,int d> FChaosArchive&)",
    "insertText": "operator(FChaosArchive& Ar, TPBDRigidParticles<T, d>& Particles)"
  }
]