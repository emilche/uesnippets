[
  {
    "label": "THREAD_ANNOTATION_ATTRIBUTE__",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "THREAD_ANNOTATION_ATTRIBUTE__"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "SEQUENCE_CHECKER_INTERNAL_CONCAT2()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_SEQUENCE_CHECKER_H_ # define BASE_SEQUENCE_CHECKER_H_ # include \" base / base_export . h \" # include \" base / dcheck_is_on . h \" # include \" base / sequence_checker_impl . h \" # define)",
    "insertText": "SEQUENCE_CHECKER_INTERNAL_CONCAT2(a, b) a##b #define SEQUENCE_CHECKER_INTERNAL_CONCAT(a, b) \\ SEQUENCE_CHECKER_INTERNAL_CONCAT2(a, b) #define SEQUENCE_CHECKER_INTERNAL_UID(prefix) \\ SEQUENCE_CHECKER_INTERNAL_CONCAT(prefix, __LINE__) #if DCHECK_IS_ON() #define SEQUENCE_CHECKER(name) base::SequenceChecker name #define DCHECK_CALLED_ON_VALID_SEQUENCE(name, ...) \\ base::ScopedValidateSequenceChecker SEQUENCE_CHECKER_INTERNAL_UID( \\ scoped_validate_sequence_checker_)(name, ##__VA_ARGS__) #define DETACH_FROM_SEQUENCE(name) (name).DetachFromSequence() #else #define SEQUENCE_CHECKER(name) static_assert(true, \"\") #define DCHECK_CALLED_ON_VALID_SEQUENCE(name, ...) EAT_CHECK_STREAM_PARAMS() #define DETACH_FROM_SEQUENCE(name)"
  },
  {
    "label": "THREAD_ANNOTATION_ATTRIBUTE__()",
    "kind": "Method",
    "detail": "Function (class)",
    "insertText": "THREAD_ANNOTATION_ATTRIBUTE__(capability(\"context\"))"
  },
  {
    "label": "EnableStackLogging()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "EnableStackLogging()"
  },
  {
    "label": "SequenceCheckerDoNothing()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SequenceCheckerDoNothing()"
  },
  {
    "label": "SequenceCheckerDoNothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceCheckerDoNothing(SequenceCheckerDoNothing&& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceCheckerDoNothing&)",
    "insertText": "operator(SequenceCheckerDoNothing&& other)"
  },
  {
    "label": "SequenceCheckerDoNothing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SequenceCheckerDoNothing(const SequenceCheckerDoNothing&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (SequenceCheckerDoNothing&)",
    "insertText": "operator(const SequenceCheckerDoNothing&)"
  },
  {
    "label": "CalledOnValidSequence()",
    "kind": "Method",
    "detail": "Function ([ [ nodiscard ] ] bool)",
    "insertText": "CalledOnValidSequence(void* = nullptr)"
  },
  {
    "label": "DCHECK_IS_ON()",
    "kind": "Method",
    "detail": "Function (} } ; # if)",
    "insertText": "DCHECK_IS_ON()"
  },
  {
    "label": "ScopedValidateSequenceChecker()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "ScopedValidateSequenceChecker(const SequenceChecker& checker) EXCLUSIVE_LOCK_FUNCTION(checker)"
  },
  {
    "label": "ScopedValidateSequenceChecker()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ScopedValidateSequenceChecker() UNLOCK_FUNCTION()"
  }
]