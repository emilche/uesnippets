[
  {
    "label": "FTargetDeviceId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTargetDeviceId"
  },
  {
    "label": "IAndroidDeviceDetection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAndroidDeviceDetection"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "UTextureLODSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UTextureLODSettings"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TSet",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSet"
  },
  {
    "label": "TMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMap"
  },
  {
    "label": "TMultiMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TMultiMap"
  },
  {
    "label": "ANDROIDTARGETPLATFORMCONTROLS_API",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ANDROIDTARGETPLATFORMCONTROLS_API"
  },
  {
    "label": "FAnalyticsEventAttribute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAnalyticsEventAttribute"
  },
  {
    "label": "FAndroid_DXTTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroid_DXTTargetPlatformControls"
  },
  {
    "label": "FAndroid_ASTCTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroid_ASTCTargetPlatformControls"
  },
  {
    "label": "FAndroid_DefaultTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroid_DefaultTargetPlatformControls"
  },
  {
    "label": "FAndroid_ETC2TargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroid_ETC2TargetPlatformControls"
  },
  {
    "label": "FAndroid_MultiTargetPlatformControls",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAndroid_MultiTargetPlatformControls"
  },
  {
    "label": "FAndroidTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Containers / UnrealString . h \" # include \" UObject / NameTypes . h \" # include \" Delegates / IDelegateInstance . h \" # include \" Containers / Map . h \" # include \" Delegates / Delegate . h \" # include \" Containers / Ticker . h \" # include \" Misc / ScopeLock . h \" # include \" Android / AndroidPlatformProperties . h \" # include \" Interfaces / ITargetPlatformModule . h \" # include \" Common / TargetPlatformControlsBase . h \" # include \" Interfaces / IAndroidDeviceDetection . h \" # include \" Interfaces / IAndroidDeviceDetectionModule . h \" # include \" AndroidTargetDevice . h \" # include \" AndroidTargetPlatformSettings . h \" # if WITH_ENGINE # include \" Engine / Texture . h \" # include \" Internationalization / Text . h \" # include \" StaticMeshResources . h \" # endif class FTargetDeviceId ; class IAndroidDeviceDetection ; class ITargetPlatform ; class UTextureLODSettings ; enum class ETargetPlatformFeatures ; template<InElementType,KeyFuncs,Allocator> class TSet ; template<KeyType,ValueType,SetAllocator,KeyFuncs> class TMap ; template<KeyType,ValueType,SetAllocator,KeyFuncs> class TMultiMap ; class FAndroidTargetPlatformControls : public TNonDesktopTargetPlatformControlsBase<FAndroidPlatformProperties> { public :)",
    "insertText": "FAndroidTargetPlatformControls(bool bInIsClient, ITargetPlatformSettings* TargetPlatformSettings, const TCHAR* FlavorName, const TCHAR* OverrideIniPlatformName = nullptr)"
  },
  {
    "label": "FAndroidTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FAndroidTargetPlatformControls()"
  },
  {
    "label": "GetAndroidVariantName()",
    "kind": "Method",
    "detail": "Function (public : FString)",
    "insertText": "GetAndroidVariantName()"
  },
  {
    "label": "EnableDeviceCheck()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "EnableDeviceCheck(bool OnOff)"
  },
  {
    "label": "AddDevice()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "AddDevice(const FString& DeviceName, bool bDefault)"
  },
  {
    "label": "GenerateStreamingInstallManifest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateStreamingInstallManifest(const TMultiMap<FString, int32>& PakchunkMap, const TSet<int32>& PakchunkIndicesInUse)"
  },
  {
    "label": "GetDevice()",
    "kind": "Method",
    "detail": "Function (ITargetDevicePtr)",
    "insertText": "GetDevice(const FTargetDeviceId& DeviceId)"
  },
  {
    "label": "IsSdkInstalled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSdkInstalled(bool bProjectHasCode, FString& OutDocumentationPath)"
  },
  {
    "label": "CheckRequirements()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "CheckRequirements(bool bProjectHasCode, EBuildConfiguration Configuration, bool bRequiresAssetNativization, FString& OutTutorialPath, FString& OutDocumentationPath, FText& CustomizedLogMessage)"
  },
  {
    "label": "GetPlatformSpecificProjectAnalytics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetPlatformSpecificProjectAnalytics(TArray<struct FAnalyticsEventAttribute>& AnalyticsParamArray)"
  },
  {
    "label": "SupportsCompressedNonPOT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SupportsCompressedNonPOT()"
  },
  {
    "label": "FinalizeVirtualTextureLayerFormat()",
    "kind": "Method",
    "detail": "Function (FName)",
    "insertText": "FinalizeVirtualTextureLayerFormat(FName Format)"
  },
  {
    "label": "GetAllTextureFormats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetAllTextureFormats(TArray<FName>& OutFormats)"
  },
  {
    "label": "SupportsVariants()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "SupportsVariants()"
  },
  {
    "label": "GetBuildProjectSettingKeys()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetBuildProjectSettingKeys(FString& OutSection, TArray<FString>& InBoolKeys, TArray<FString>& InIntKeys, TArray<FString>& InStringKeys)"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (OutSection =)",
    "insertText": "TEXT(\"/Script/AndroidRuntimeSettings.AndroidRuntimeSettings\")"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bBuildForArm64\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bBuildForX8664\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bBuildForES31\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bBuildWithHiddenSymbolVisibility\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InBoolKeys .)",
    "insertText": "Add(TEXT(\"bSaveSymbols\"))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (InStringKeys .)",
    "insertText": "Add(TEXT(\"NDKAPILevel\"))"
  },
  {
    "label": "ShouldExpandTo32Bit()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldExpandTo32Bit(const uint16* Indices, const int32 NumIndices)"
  },
  {
    "label": "InitializeDeviceDetection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitializeDeviceDetection()"
  },
  {
    "label": "CreateTargetDevice()",
    "kind": "Method",
    "detail": "Function (protected : FAndroidTargetDevicePtr)",
    "insertText": "CreateTargetDevice(const ITargetPlatformControls& InTargetPlatform, const FString& InSerialNumber, const FString& InAndroidVariant)"
  },
  {
    "label": "SupportedByExtensionsString()",
    "kind": "Method",
    "detail": "Function (protected : bool)",
    "insertText": "SupportedByExtensionsString(const FString& ExtensionsString, const int GLESVersion)"
  },
  {
    "label": "CreateNewDevice()",
    "kind": "Method",
    "detail": "Function (FAndroidTargetDeviceRef)",
    "insertText": "CreateNewDevice(const FAndroidDeviceInfo& DeviceInfo)"
  },
  {
    "label": "FAndroid_DXTTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (TMap<FString,FAndroidTargetDevicePtr> Devices ; FTickerDelegate TickDelegate ; FTSTicker::FDelegateHandle TickDelegateHandle ; IAndroidDeviceDetection* DeviceDetection ; # if WITH_ENGINE ITargetDevicePtr DefaultDevice ; # endif FAndroidTargetPlatformSettings* AndroidTargetPlatformSettings ; } ; class FAndroid_DXTTargetPlatformControls : public FAndroidTargetPlatformControls { public :)",
    "insertText": "FAndroid_DXTTargetPlatformControls(bool bIsClient, ITargetPlatformSettings* TargetPlatformSettings) : FAndroidTargetPlatformControls(bIsClient, TargetPlatformSettings, TEXT(\"DXT\"))"
  },
  {
    "label": "GetVariantPriority()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetVariantPriority()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (float Priority ;)",
    "insertText": "return(GConfig->GetFloat(TEXT(\"/Script/AndroidRuntimeSettings.AndroidRuntimeSettings\"), TEXT(\"TextureFormatPriority_DXT\"), Priority, GEngineIni) ? Priority : 0.6f) * 10.0f + (IsClientOnly() ? 0.25f : 0.5f)"
  },
  {
    "label": "GetTextureFormats()",
    "kind": "Method",
    "detail": "Function (} # if WITH_ENGINE void)",
    "insertText": "GetTextureFormats(const UTexture* Texture, TArray< TArray<FName> >& OutFormats)"
  },
  {
    "label": "FAndroid_ASTCTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FAndroid_ASTCTargetPlatformControls : public FAndroidTargetPlatformControls { public :)",
    "insertText": "FAndroid_ASTCTargetPlatformControls(bool bIsClient, ITargetPlatformSettings* TargetPlatformSettings, const TCHAR* OverrideIniPlatformName = TEXT(\"ASTC\")) : FAndroidTargetPlatformControls(bIsClient, TargetPlatformSettings, OverrideIniPlatformName)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (float Priority ;)",
    "insertText": "return(GConfig->GetFloat(TEXT(\"/Script/AndroidRuntimeSettings.AndroidRuntimeSettings\"), TEXT(\"TextureFormatPriority_ASTC\"), Priority, GEngineIni) ? Priority : 0.9f) * 10.0f + (IsClientOnly() ? 0.25f : 0.5f)"
  },
  {
    "label": "FAndroid_DefaultTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FAndroid_DefaultTargetPlatformControls : public FAndroid_ASTCTargetPlatformControls { public :)",
    "insertText": "FAndroid_DefaultTargetPlatformControls(bool bIsClient, ITargetPlatformSettings* TargetPlatformSettings) : FAndroid_ASTCTargetPlatformControls(bIsClient, TargetPlatformSettings, nullptr)"
  },
  {
    "label": "FAndroid_ETC2TargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (} } ; class FAndroid_ETC2TargetPlatformControls : public FAndroidTargetPlatformControls { public :)",
    "insertText": "FAndroid_ETC2TargetPlatformControls(bool bIsClient, ITargetPlatformSettings* TargetPlatformSettings) : FAndroidTargetPlatformControls(bIsClient, TargetPlatformSettings, TEXT(\"ETC2\"))"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (float Priority ;)",
    "insertText": "return(GConfig->GetFloat(TEXT(\"/Script/AndroidRuntimeSettings.AndroidRuntimeSettings\"), TEXT(\"TextureFormatPriority_ETC2\"), Priority, GEngineIni) ? Priority : 0.2f) * 10.0f + (IsClientOnly() ? 0.25f : 0.5f)"
  },
  {
    "label": "FAndroid_MultiTargetPlatformControls()",
    "kind": "Method",
    "detail": "Function (# endif } ; class FAndroid_MultiTargetPlatformControls : public FAndroidTargetPlatformControls { TArray<FAndroidTargetPlatformControls*> FormatTargetPlatforms ; FString FormatTargetString ; public :)",
    "insertText": "FAndroid_MultiTargetPlatformControls(bool bIsClient, ITargetPlatformSettings* TargetPlatformSettings) : FAndroidTargetPlatformControls(bIsClient, TargetPlatformSettings, TEXT(\"Multi\"))"
  },
  {
    "label": "LoadFormats()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "LoadFormats(TArray<FAndroidTargetPlatformControls*> SingleFormatTPs)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (SingleFormatTPs .)",
    "insertText": "Sort([](const FAndroidTargetPlatformControls& A, const FAndroidTargetPlatformControls& B) { float PriorityA = 0.f; float PriorityB = 0.f; FString VariantA = A.GetAndroidVariantName().Replace(TEXT(\"Client\"), TEXT(\"\")); FString VariantB = B.GetAndroidVariantName().Replace(TEXT(\"Client\"), TEXT(\"\")); GConfig->GetFloat(TEXT(\"/Script/AndroidRuntimeSettings.AndroidRuntimeSettings\"), *(FString(TEXT(\"TextureFormatPriority_\")) + VariantA), PriorityA, GEngineIni); GConfig->GetFloat(TEXT(\"/Script/AndroidRuntimeSettings.AndroidRuntimeSettings\"), *(FString(TEXT(\"TextureFormatPriority_\")) + VariantB), PriorityB, GEngineIni); return PriorityA > PriorityB; })"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSet<FString> SeenFormats ;)",
    "insertText": "for(FAndroidTargetPlatformControls* SingleFormatTP : SingleFormatTPs)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (continue ; } SeenFormats .)",
    "insertText": "Add(SingleFormatTP->GetAndroidVariantName())"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (bool bEnabled = false ; FString SettingsName =)",
    "insertText": "FString(TEXT(\"bMultiTargetFormat_\")) + *SingleFormatTP->GetAndroidVariantName()"
  },
  {
    "label": "GetBool()",
    "kind": "Method",
    "detail": "Function (GConfig ->)",
    "insertText": "GetBool(TEXT(\"/Script/AndroidRuntimeSettings.AndroidRuntimeSettings\"), *SettingsName, bEnabled, GEngineIni)"
  },
  {
    "label": "UpdatePlatformDisplayName()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "UpdatePlatformDisplayName(TEXT(\"Android_Multi\"), DisplayName())"
  },
  {
    "label": "DisplayName()",
    "kind": "Method",
    "detail": "Function (# endif FText)",
    "insertText": "DisplayName()"
  }
]