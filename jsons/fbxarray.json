[
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "FbxArray",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FbxArray"
  },
  {
    "label": "tData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "tData"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifndef _FBXSDK_CORE_BASE_ARRAY_H_ # define _FBXSDK_CORE_BASE_ARRAY_H_ # include<fbxsdk / fbxsdk_def . h> # include<fbxsdk / fbxsdk_nsbegin . h> # if)",
    "insertText": "defined(FBXSDK_COMPILER_MSC) #pragma warning( push ) #pragma warning( disable : 4201 ) #endif #ifdef THROW_EXCEPTIONS #define FBX_THROW(x) throw std::runtime_error(x) #define FBX_ARRAY_INLINE __forceinline #else #define FBX_THROW(x) FBX_ASSERT_NOW(x)"
  },
  {
    "label": "int()",
    "kind": "Method",
    "detail": "Function (protected : struct tData { union { struct { int mSize ; int mCapacity ; } ; char Padding [ Alignment ] ; } ; T mArray [ 1 5 ] ; }* mData ; public : typedef)",
    "insertText": "int(*CompareFunc)(const void*, const void*)"
  },
  {
    "label": "FbxArray()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxArray() : mData(NULL)"
  },
  {
    "label": "FbxArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxArray(const int pCapacity) : mData(NULL)"
  },
  {
    "label": "FbxArray()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FbxArray(const FbxArray& pArray) : mData(NULL)"
  },
  {
    "label": "FbxArray()",
    "kind": "Method",
    "detail": "Function (* this = pArray ; } ~)",
    "insertText": "FbxArray()"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "InsertAt(const int pIndex, const T& pElement, bool pCompact=false)"
  },
  {
    "label": "FBX_ASSERT_RETURN_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN_VALUE(pIndex >= 0, -1)"
  },
  {
    "label": "FbxMin()",
    "kind": "Method",
    "detail": "Function (int lIndex =)",
    "insertText": "FbxMin(pIndex, GetSize())"
  },
  {
    "label": "FbxMax()",
    "kind": "Method",
    "detail": "Function (T lElement = pElement ; int lNewCapacity =)",
    "insertText": "FbxMax(pCompact ? GetCapacity() + 1 : GetCapacity() * 2, 1)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(lNewCapacity)"
  },
  {
    "label": "FBX_ASSERT_RETURN_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN_VALUE(mData, -1)"
  },
  {
    "label": "InsertAt()",
    "kind": "Method",
    "detail": "Function (mData -> mCapacity = lNewCapacity ; return)",
    "insertText": "InsertAt(pIndex, lElement)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(lIndex < GetSize())"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memmove(&GetArray()[lIndex + 1], &GetArray()[lIndex], (GetSize() - lIndex) * sizeof(T))"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "memcpy(&GetArray()[lIndex], &pElement, sizeof(T))"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (mData -> mSize + + ; return lIndex ; } int)",
    "insertText": "Add(const T& pElement)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AddUnique(const T& pElement)"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (int lIndex =)",
    "insertText": "Find(pElement)"
  },
  {
    "label": "AddCompact()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "AddCompact(const T& pElement)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Size()"
  },
  {
    "label": "Capacity()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Capacity()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} FBX_ARRAY_INLINE T&)",
    "insertText": "operator(const int pIndex)"
  },
  {
    "label": "FBX_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_THROW(\"Index is out of range!\")"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pIndex >= GetSize())"
  },
  {
    "label": "FBX_THROW()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_THROW(\"Index is out of range, but not outside of capacity! Call SetAt() to use reserved memory.\")"
  },
  {
    "label": "GetArray()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "GetArray()"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetAt(const int pIndex)"
  },
  {
    "label": "GetFirst()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetFirst()"
  },
  {
    "label": "GetLast()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "GetLast()"
  },
  {
    "label": "Find()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "Find(const T& pElement, const int pStartIndex = 0)"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (const int size =)",
    "insertText": "GetSize()"
  },
  {
    "label": "FBX_ASSERT_RETURN_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN_VALUE(pStartIndex >= 0, -1)"
  },
  {
    "label": "FBX_ASSERT_RETURN_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN_VALUE(size >= 0, -1)"
  },
  {
    "label": "FindReverse()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } int)",
    "insertText": "FindReverse(const T& pElement, const int pStartIndex = FBXSDK_INT_MAX)"
  },
  {
    "label": "FBX_ASSERT_RETURN_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN_VALUE(size > 0, -1)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} return - 1 ; } bool)",
    "insertText": "Reserve(const int pCapacity)"
  },
  {
    "label": "FBX_ASSERT_RETURN_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN_VALUE(pCapacity > 0, false)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(pCapacity)"
  },
  {
    "label": "FBX_ASSERT_RETURN_VALUE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN_VALUE(mData, false)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (mData -> mCapacity = pCapacity ;)",
    "insertText": "memset(&GetArray()[GetSize()], 0, (GetCapacity() - GetSize()) * sizeof(T))"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (} return true ; } void)",
    "insertText": "SetAt(const int pIndex, const T& pElement)"
  },
  {
    "label": "FBX_ASSERT_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN(pIndex >= 0 && pIndex < GetCapacity())"
  },
  {
    "label": "SetFirst()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetFirst(const T& pElement)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAt(0, pElement)"
  },
  {
    "label": "SetLast()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLast(const T& pElement)"
  },
  {
    "label": "SetAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAt(GetSize() - 1, pElement)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} FBX_ARRAY_INLINE T)",
    "insertText": "RemoveAt(const int pIndex)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const int index = pIndex + 1 ;)",
    "insertText": "if(index < 0 || index > size)"
  },
  {
    "label": "GetAt()",
    "kind": "Method",
    "detail": "Function (} T lElement =)",
    "insertText": "GetAt(pIndex)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(&GetArray()[pIndex], &GetArray()[index], (size - pIndex - 1) * sizeof(T))"
  },
  {
    "label": "RemoveFirst()",
    "kind": "Method",
    "detail": "Function (} mData -> mSize - - ; return lElement ; } T)",
    "insertText": "RemoveFirst()"
  },
  {
    "label": "RemoveLast()",
    "kind": "Method",
    "detail": "Function (} T)",
    "insertText": "RemoveLast()"
  },
  {
    "label": "RemoveIt()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemoveIt(const T& pElement)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveAt(Index)"
  },
  {
    "label": "FBX_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT(GetArray() != NULL)"
  },
  {
    "label": "FBX_ASSERT_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN(pCount > 0)"
  },
  {
    "label": "FBX_ASSERT_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN(pIndex >= 0)"
  },
  {
    "label": "FBX_ASSERT_RETURN()",
    "kind": "Method",
    "detail": "Function (size_t lastItem = pIndex + pCount ;)",
    "insertText": "FBX_ASSERT_RETURN(lastItem >= 0)"
  },
  {
    "label": "FBX_ASSERT_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN(lastItem <= (size_t)size)"
  },
  {
    "label": "FBX_ASSERT_RETURN()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FBX_ASSERT_RETURN(lastItem < FBXSDK_INT_MAX)"
  },
  {
    "label": "memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memmove(&GetArray()[pIndex], &GetArray()[pIndex + pCount], (size - pIndex - pCount) * (unsigned)sizeof(T))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(mData)"
  },
  {
    "label": "Resize()",
    "kind": "Method",
    "detail": "Function (mData -> mSize - = pCount ; } } bool)",
    "insertText": "Resize(const int pSize)"
  },
  {
    "label": "Allocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Allocate(pSize)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(pSize > GetCapacity())"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(&GetArray()[GetSize()], 0, (pSize - GetSize()) * sizeof(T))"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (} mData -> mSize = pSize ; mData -> mCapacity = pSize ; return true ; } bool)",
    "insertText": "Grow(const int pSize)"
  },
  {
    "label": "FbxLongLong()",
    "kind": "Method",
    "detail": "Function (FbxLongLong newSize = static_cast<)",
    "insertText": "FbxLongLong(size) + static_cast<FbxLongLong>(pSize)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Shrink(const int pSize)"
  },
  {
    "label": "FbxLongLong()",
    "kind": "Method",
    "detail": "Function (FbxLongLong newSize = static_cast<)",
    "insertText": "FbxLongLong(size) - static_cast<FbxLongLong>(pSize)"
  },
  {
    "label": "Compact()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Compact()"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(mData)"
  },
  {
    "label": "Sort()",
    "kind": "Method",
    "detail": "Function (mData = NULL ; } } void)",
    "insertText": "Sort(CompareFunc pCompareFunc)"
  },
  {
    "label": "qsort()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "qsort(GetArray(), GetSize(), sizeof(T), pCompareFunc)"
  },
  {
    "label": "AddArray()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddArray(const FbxArray<T>& pOther)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(&GetArray()[GetSize() - pOther.GetSize()], pOther.GetArray(), pOther.GetSize() * sizeof(T))"
  },
  {
    "label": "AddArrayNoDuplicate()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "AddArrayNoDuplicate(const FbxArray<T>& pOther)"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddUnique(pOther[i])"
  },
  {
    "label": "RemoveArray()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "RemoveArray(const FbxArray<T>& pOther)"
  },
  {
    "label": "RemoveIt()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveIt(pOther[i])"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } FbxArray<T>&)",
    "insertText": "operator(const FbxArray<T>& pOther)"
  },
  {
    "label": "memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memcpy(GetArray(), pOther.GetArray(), pOther.GetSize() * sizeof(T))"
  },
  {
    "label": "GetCount()",
    "kind": "Method",
    "detail": "Function (} # ifndef DOXYGEN_SHOULD_SKIP_THIS int)",
    "insertText": "GetCount()"
  },
  {
    "label": "lData()",
    "kind": "Method",
    "detail": "Function (tData* lOldData = mData ; tData*)",
    "insertText": "lData(tData*)FbxRealloc(mData, (size_t)Alignment + FbxAllocSize(pCapacity, sizeof(T)))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (mData = lData ;)",
    "insertText": "if(!lOldData)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# endif # endif } ; # if)",
    "insertText": "defined(FBXSDK_COMPILER_MSC) #pragma warning( pop ) #endif template <class T> inline void FbxArrayFree(FbxArray<T>& pArray)"
  },
  {
    "label": "FbxFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxFree(pArray[i])"
  },
  {
    "label": "FbxArrayDelete()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "FbxArrayDelete(FbxArray<T>& pArray)"
  },
  {
    "label": "FbxDelete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FbxDelete(pArray[i])"
  },
  {
    "label": "FbxArrayDestroy()",
    "kind": "Method",
    "detail": "Function (} template<class T> void)",
    "insertText": "FbxArrayDestroy(FbxArray<T>& pArray)"
  },
  {
    "label": "FBXSDK_INCOMPATIBLE_WITH_ARRAY_TEMPLATE()",
    "kind": "Method",
    "detail": "Function (} template<class T>)",
    "insertText": "FBXSDK_INCOMPATIBLE_WITH_ARRAY_TEMPLATE(FbxArray<T>)"
  }
]