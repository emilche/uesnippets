[
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "APInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "APInt"
  },
  {
    "label": "AssumptionCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AssumptionCache"
  },
  {
    "label": "Constant",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Constant"
  },
  {
    "label": "ConstantInt",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ConstantInt"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "Type",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Type"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "DataLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DataLayout"
  },
  {
    "label": "TargetLibraryInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TargetLibraryInfo"
  },
  {
    "label": "LLVMContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LLVMContext"
  },
  {
    "label": "Loop",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Loop"
  },
  {
    "label": "LoopInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "LoopInfo"
  },
  {
    "label": "Operator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Operator"
  },
  {
    "label": "SCEVUnknown",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVUnknown"
  },
  {
    "label": "SCEV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEV"
  },
  {
    "label": "FoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FoldingSetTrait"
  },
  {
    "label": "represents",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "represents"
  },
  {
    "label": "SCEV",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEV"
  },
  {
    "label": "FoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FoldingSetTrait"
  },
  {
    "label": "NoWrapFlags",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "NoWrapFlags"
  },
  {
    "label": "FoldingSetTrait",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FoldingSetTrait"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "SCEVCouldNotCompute",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SCEVCouldNotCompute"
  },
  {
    "label": "is",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "is"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "ScalarEvolution",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ScalarEvolution"
  },
  {
    "label": "describing",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "describing"
  },
  {
    "label": "LoopDisposition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "LoopDisposition"
  },
  {
    "label": "describing",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "describing"
  },
  {
    "label": "BlockDisposition",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "BlockDisposition"
  },
  {
    "label": "casts",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "casts"
  },
  {
    "label": "SCEVCallbackVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVCallbackVH"
  },
  {
    "label": "SCEVCallbackVH",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVCallbackVH"
  },
  {
    "label": "SCEVExpander",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVExpander"
  },
  {
    "label": "SCEVUnknown",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SCEVUnknown"
  },
  {
    "label": "ExitLimit",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExitLimit"
  },
  {
    "label": "ExitNotTakenInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "ExitNotTakenInfo"
  },
  {
    "label": "BackedgeTakenInfo",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BackedgeTakenInfo"
  },
  {
    "label": "RangeSignHint",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "RangeSignHint"
  },
  {
    "label": "classof()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "classof(const SCEV *S)"
  },
  {
    "label": "SCEVCallbackVH()",
    "kind": "Method",
    "detail": "Function (public:)",
    "insertText": "SCEVCallbackVH(Value *V, ScalarEvolution *SE = nullptr)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "clear()"
  },
  {
    "label": "computeLoopDisposition()",
    "kind": "Method",
    "detail": "Function (LoopDisposition)",
    "insertText": "computeLoopDisposition(const SCEV *S, const Loop *L)"
  },
  {
    "label": "computeBlockDisposition()",
    "kind": "Method",
    "detail": "Function (BlockDisposition)",
    "insertText": "computeBlockDisposition(const SCEV *S, const BasicBlock *BB)"
  },
  {
    "label": "getRange()",
    "kind": "Method",
    "detail": "Function (ConstantRange)",
    "insertText": "getRange(const SCEV *S, RangeSignHint Hint)"
  },
  {
    "label": "ForgetSymbolicName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ForgetSymbolicName(Instruction *I, const SCEV *SymName)"
  },
  {
    "label": "ComputeBackedgeTakenCount()",
    "kind": "Method",
    "detail": "Function (BackedgeTakenInfo)",
    "insertText": "ComputeBackedgeTakenCount(const Loop *L)"
  },
  {
    "label": "ComputeExitLimit()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "ComputeExitLimit(const Loop *L, BasicBlock *ExitingBlock)"
  },
  {
    "label": "ComputeExitLimitFromCond()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "ComputeExitLimitFromCond(const Loop *L,\n                                       Value *ExitCond,\n                                       BasicBlock *TBB,\n                                       BasicBlock *FBB,\n                                       bool IsSubExpr)"
  },
  {
    "label": "ComputeExitLimitFromICmp()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "ComputeExitLimitFromICmp(const Loop *L,\n                                       ICmpInst *ExitCond,\n                                       BasicBlock *TBB,\n                                       BasicBlock *FBB,\n                                       bool IsSubExpr)"
  },
  {
    "label": "ComputeExitLimitFromSingleExitSwitch()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "ComputeExitLimitFromSingleExitSwitch(const Loop *L, SwitchInst *Switch,\n                               BasicBlock *ExitingBB, bool IsSubExpr)"
  },
  {
    "label": "ComputeLoadConstantCompareExitLimit()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "ComputeLoadConstantCompareExitLimit(LoadInst *LI,\n                                                  Constant *RHS,\n                                                  const Loop *L,\n                                                  ICmpInst::Predicate p)"
  },
  {
    "label": "HowFarToZero()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "HowFarToZero(const SCEV *V, const Loop *L, bool IsSubExpr)"
  },
  {
    "label": "HowFarToNonZero()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "HowFarToNonZero(const SCEV *V, const Loop *L)"
  },
  {
    "label": "HowManyLessThans()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "HowManyLessThans(const SCEV *LHS, const SCEV *RHS,\n                               const Loop *L, bool isSigned, bool IsSubExpr)"
  },
  {
    "label": "HowManyGreaterThans()",
    "kind": "Method",
    "detail": "Function (ExitLimit)",
    "insertText": "HowManyGreaterThans(const SCEV *LHS, const SCEV *RHS,\n                                  const Loop *L, bool isSigned, bool IsSubExpr)"
  },
  {
    "label": "isImpliedCond()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isImpliedCond(ICmpInst::Predicate Pred,\n                       const SCEV *LHS, const SCEV *RHS,\n                       Value *FoundCondValue,\n                       bool Inverse)"
  },
  {
    "label": "isImpliedCondOperands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isImpliedCondOperands(ICmpInst::Predicate Pred,\n                               const SCEV *LHS, const SCEV *RHS,\n                               const SCEV *FoundLHS, const SCEV *FoundRHS)"
  },
  {
    "label": "isImpliedCondOperandsHelper()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isImpliedCondOperandsHelper(ICmpInst::Predicate Pred,\n                                     const SCEV *LHS, const SCEV *RHS,\n                                     const SCEV *FoundLHS,\n                                     const SCEV *FoundRHS)"
  },
  {
    "label": "isImpliedCondOperandsViaRanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isImpliedCondOperandsViaRanges(ICmpInst::Predicate Pred,\n                                        const SCEV *LHS, const SCEV *RHS,\n                                        const SCEV *FoundLHS,\n                                        const SCEV *FoundRHS)"
  },
  {
    "label": "isKnownPredicateWithRanges()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownPredicateWithRanges(ICmpInst::Predicate Pred,\n                                    const SCEV *LHS, const SCEV *RHS)"
  },
  {
    "label": "forgetMemoizedResults()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "forgetMemoizedResults(const SCEV *S)"
  },
  {
    "label": "proveNoWrapByVaryingStart()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "proveNoWrapByVaryingStart(const SCEV *Start, const SCEV *Step,\n                                   const Loop *L)"
  },
  {
    "label": "ScalarEvolution()",
    "kind": "Method",
    "detail": "Function (typeid)",
    "insertText": "ScalarEvolution()"
  },
  {
    "label": "getAddExpr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getAddExpr(Ops, Flags)"
  },
  {
    "label": "getAddExpr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getAddExpr(Ops, Flags)"
  },
  {
    "label": "getMulExpr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getMulExpr(Ops, Flags)"
  },
  {
    "label": "getMulExpr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getMulExpr(Ops, Flags)"
  },
  {
    "label": "getAddRecExpr()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getAddRecExpr(NewOp, L, Flags)"
  },
  {
    "label": "isLoopEntryGuardedByCond()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLoopEntryGuardedByCond(const Loop *L, ICmpInst::Predicate Pred,\n                                  const SCEV *LHS, const SCEV *RHS)"
  },
  {
    "label": "isLoopBackedgeGuardedByCond()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLoopBackedgeGuardedByCond(const Loop *L, ICmpInst::Predicate Pred,\n                                     const SCEV *LHS, const SCEV *RHS)"
  },
  {
    "label": "getSmallConstantTripCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSmallConstantTripCount(Loop *L)"
  },
  {
    "label": "getSmallConstantTripCount()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSmallConstantTripCount(Loop *L, BasicBlock *ExitingBlock)"
  },
  {
    "label": "getSmallConstantTripMultiple()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSmallConstantTripMultiple(Loop *L)"
  },
  {
    "label": "getSmallConstantTripMultiple()",
    "kind": "Method",
    "detail": "Function (unsigned)",
    "insertText": "getSmallConstantTripMultiple(Loop *L, BasicBlock *ExitingBlock)"
  },
  {
    "label": "hasLoopInvariantBackedgeTakenCount()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasLoopInvariantBackedgeTakenCount(const Loop *L)"
  },
  {
    "label": "forgetLoop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "forgetLoop(const Loop *L)"
  },
  {
    "label": "forgetValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "forgetValue(Value *V)"
  },
  {
    "label": "GetMinTrailingZeros()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "GetMinTrailingZeros(const SCEV *S)"
  },
  {
    "label": "getRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getRange(S, HINT_RANGE_UNSIGNED)"
  },
  {
    "label": "getRange()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "getRange(S, HINT_RANGE_SIGNED)"
  },
  {
    "label": "isKnownNegative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownNegative(const SCEV *S)"
  },
  {
    "label": "isKnownPositive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownPositive(const SCEV *S)"
  },
  {
    "label": "isKnownNonNegative()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownNonNegative(const SCEV *S)"
  },
  {
    "label": "isKnownNonPositive()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownNonPositive(const SCEV *S)"
  },
  {
    "label": "isKnownNonZero()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownNonZero(const SCEV *S)"
  },
  {
    "label": "isKnownPredicate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isKnownPredicate(ICmpInst::Predicate Pred,\n                          const SCEV *LHS, const SCEV *RHS)"
  },
  {
    "label": "SimplifyICmpOperands()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SimplifyICmpOperands(ICmpInst::Predicate &Pred,\n                              const SCEV *&LHS,\n                              const SCEV *&RHS,\n                              unsigned Depth = 0)"
  },
  {
    "label": "getLoopDisposition()",
    "kind": "Method",
    "detail": "Function (LoopDisposition)",
    "insertText": "getLoopDisposition(const SCEV *S, const Loop *L)"
  },
  {
    "label": "isLoopInvariant()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "isLoopInvariant(const SCEV *S, const Loop *L)"
  },
  {
    "label": "hasComputableLoopEvolution()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "hasComputableLoopEvolution(const SCEV *S, const Loop *L)"
  },
  {
    "label": "getBlockDisposition()",
    "kind": "Method",
    "detail": "Function (BlockDisposition)",
    "insertText": "getBlockDisposition(const SCEV *S, const BasicBlock *BB)"
  },
  {
    "label": "dominates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "dominates(const SCEV *S, const BasicBlock *BB)"
  },
  {
    "label": "properlyDominates()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "properlyDominates(const SCEV *S, const BasicBlock *BB)"
  },
  {
    "label": "collectParametricTerms()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "collectParametricTerms(const SCEV *Expr,\n                                SmallVectorImpl<const SCEV *> &Terms)"
  },
  {
    "label": "computeAccessFunctions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "computeAccessFunctions(const SCEV *Expr,\n                                SmallVectorImpl<const SCEV *> &Subscripts,\n                                SmallVectorImpl<const SCEV *> &Sizes)"
  },
  {
    "label": "delinearize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "delinearize(const SCEV *Expr,\n                     SmallVectorImpl<const SCEV *> &Subscripts,\n                     SmallVectorImpl<const SCEV *> &Sizes,\n                     const SCEV *ElementSize)"
  },
  {
    "label": "doesIVOverflowOnLT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doesIVOverflowOnLT(const SCEV *RHS, const SCEV *Stride,\n                            bool IsSigned, bool NoWrap)"
  },
  {
    "label": "doesIVOverflowOnGT()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "doesIVOverflowOnGT(const SCEV *RHS, const SCEV *Stride,\n                            bool IsSigned, bool NoWrap)"
  }
]