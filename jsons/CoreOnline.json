[
  {
    "label": "FDefaultSetAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FDefaultSetAllocator"
  },
  {
    "label": "FLazySingleton",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLazySingleton"
  },
  {
    "label": "FJoinabilitySettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FJoinabilitySettings"
  },
  {
    "label": "FUniqueNetId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUniqueNetId"
  },
  {
    "label": "FOnlineForeignAccountIdRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnlineForeignAccountIdRegistry"
  },
  {
    "label": "FAccount",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAccount"
  },
  {
    "label": "FSession",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSession"
  },
  {
    "label": "FSessionInvite",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSessionInvite"
  },
  {
    "label": "FLobby",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLobby"
  },
  {
    "label": "FVerifiedAuthTicket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVerifiedAuthTicket"
  },
  {
    "label": "FVerifiedAuthSession",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVerifiedAuthSession"
  },
  {
    "label": "FLoginContinuation",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLoginContinuation"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "TOnlineId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TOnlineId"
  },
  {
    "label": "IOnlineIdRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IOnlineIdRegistry"
  },
  {
    "label": "FOnlineIdRegistryRegistry",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnlineIdRegistryRegistry"
  },
  {
    "label": "FOnlineIdRegistryAndPriority",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOnlineIdRegistryAndPriority"
  },
  {
    "label": "FUniqueNetIdWrapper",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueNetIdWrapper"
  },
  {
    "label": "TUniqueNetIdMapKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TUniqueNetIdMapKeyFuncs"
  },
  {
    "label": "FUniqueNetIdKeyFuncs",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUniqueNetIdKeyFuncs"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Containers / UnrealString . h \" # include \" HAL / PlatformCrt . h \" # include \" HAL / PlatformMath . h \" # include \" HAL / UnrealMemory . h \" # include \" Hash / CityHash . h \" # include \" Math / Vector4 . h \" # include \" Misc / AssertionMacros . h \" # include \" Misc / TVariant . h \" # include \" Online / CoreOnlineFwd . h \" # include \" Online / CoreOnlinePackage . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UniquePtr . h \" # include \" UObject / NameTypes . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UnrealNames . h \" # include \" CoreOnline . generated . h \" class FDefaultSetAllocator ; class FLazySingleton ; # if !)",
    "insertText": "defined(MAX_LOCAL_PLAYERS) #if PLATFORM_MAX_LOCAL_PLAYERS #define MAX_LOCAL_PLAYERS PLATFORM_MAX_LOCAL_PLAYERS #elif PLATFORM_DESKTOP #define MAX_LOCAL_PLAYERS 4 #else #define MAX_LOCAL_PLAYERS 1 #endif #endif USTRUCT(noexport)"
  },
  {
    "label": "FJoinabilitySettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FJoinabilitySettings() : SessionName(NAME_None), bPublicSearchable(false), bAllowInvites(false), bJoinViaPresence(false), bJoinViaPresenceFriendsOnly(false), MaxPlayers(0), MaxPartySize(0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FJoinabilitySettings& Other)"
  },
  {
    "label": "FUniqueNetId()",
    "kind": "Method",
    "detail": "Function (} } ; class FUniqueNetId : public TSharedFromThis<FUniqueNetId> { protected :)",
    "insertText": "FUniqueNetId()"
  },
  {
    "label": "FUniqueNetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniqueNetId(const FUniqueNetId& Src)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FUniqueNetId&)",
    "insertText": "operator(const FUniqueNetId& Src)"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compare(const FUniqueNetId& Other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FUniqueNetId& Lhs, const FUniqueNetId& Rhs)"
  },
  {
    "label": "GetType()",
    "kind": "Method",
    "detail": "Function (} FName)",
    "insertText": "GetType()"
  },
  {
    "label": "GetSize()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetSize()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString()"
  },
  {
    "label": "ToDebugString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToDebugString()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash()"
  },
  {
    "label": "GetHexEncodedString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetHexEncodedString()"
  },
  {
    "label": "FString()",
    "kind": "Method",
    "detail": "Function (} return)",
    "insertText": "FString()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FUniqueNetId& Value)"
  },
  {
    "label": "LexToString()",
    "kind": "Method",
    "detail": "Function (} } ; namespace UE::Online { class FOnlineForeignAccountIdRegistry ; namespace OnlineIdHandleTags { struct FAccount { } ; struct FSession { } ; struct FSessionInvite { } ; struct FLobby { } ; struct FVerifiedAuthTicket { } ; struct FVerifiedAuthSession { } ; struct FLoginContinuation { } ; } enum class EOnlineServices : uint8 { Null,Epic,Xbox,PSN,Nintendo,Reserved_5,Steam,Google,GooglePlay,Apple,AppleGameKit,Samsung,Oculus,Tencent,Reserved_14,Reserved_15,Reserved_16,Reserved_17,Reserved_18,Reserved_19,Reserved_20,Reserved_21,Reserved_22,Reserved_23,Reserved_24,Reserved_25,Reserved_26,Reserved_27,GameDefined_0 = 2 8,GameDefined_1,GameDefined_2,GameDefined_3,None = 2 5 3,Platform = 2 5 4,Default = 2 5 5 } ; const TCHAR*)",
    "insertText": "LexToString(EOnlineServices Value)"
  },
  {
    "label": "LexFromString()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LexFromString(EOnlineServices& OutValue, const TCHAR* InStr)"
  },
  {
    "label": "TOnlineId()",
    "kind": "Method",
    "detail": "Function (template<IdType> class TOnlineId { public :)",
    "insertText": "TOnlineId()"
  },
  {
    "label": "TOnlineId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TOnlineId(EOnlineServices Type, uint32 Handle)"
  },
  {
    "label": "Value()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Value(Handle & 0x00FFFFFF) | (uint32(Type) << 24)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "GetOnlineServicesType()",
    "kind": "Method",
    "detail": "Function (} EOnlineServices)",
    "insertText": "GetOnlineServicesType()"
  },
  {
    "label": "GetHandle()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetHandle()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} ; using FAccountId = TOnlineId<OnlineIdHandleTags::FAccount> ; using FLobbyId = TOnlineId<OnlineIdHandleTags::FLobby> ; using FOnlineSessionId = TOnlineId<OnlineIdHandleTags::FSession> ; using FSessionInviteId = TOnlineId<OnlineIdHandleTags::FSessionInvite> ; using FVerifiedAuthTicketId = TOnlineId<OnlineIdHandleTags::FVerifiedAuthTicket> ; using FVerifiedAuthSessionId = TOnlineId<OnlineIdHandleTags::FVerifiedAuthSession> ; using FLoginContinuationId = TOnlineId<OnlineIdHandleTags::FLoginContinuation> ; FString)",
    "insertText": "ToString(const FAccountId& Id)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const FOnlineSessionId& Id)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FAccountId& Id)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FLobbyId& Id)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FOnlineSessionId& Id)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FSessionInviteId& Id)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FVerifiedAuthTicketId& Id)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FVerifiedAuthSessionId& Id)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FLoginContinuationId& Id)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (template<IdType> uint32)",
    "insertText": "GetTypeHash(const TOnlineId<IdType>& OnlineId)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (using::GetTypeHash ; return)",
    "insertText": "HashCombine(GetTypeHash(OnlineId.GetOnlineServicesType()), GetTypeHash(OnlineId.GetHandle()))"
  },
  {
    "label": "IOnlineIdRegistry()",
    "kind": "Method",
    "detail": "Function (} template<IdType> class IOnlineIdRegistry { public : ~)",
    "insertText": "IOnlineIdRegistry()"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const TOnlineId<IdType>& OnlineId)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const TOnlineId<IdType>& OnlineId)"
  },
  {
    "label": "ToReplicationData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "ToReplicationData(const TOnlineId<IdType>& OnlineId)"
  },
  {
    "label": "FromReplicationData()",
    "kind": "Method",
    "detail": "Function (TOnlineId<IdType>)",
    "insertText": "FromReplicationData(const TArray<uint8>& ReplicationData)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} ; using IOnlineAccountIdRegistry = IOnlineIdRegistry<OnlineIdHandleTags::FAccount> ; using IOnlineSessionIdRegistry = IOnlineIdRegistry<OnlineIdHandleTags::FSession> ; using IOnlineSessionInviteIdRegistry = IOnlineIdRegistry<OnlineIdHandleTags::FSessionInvite> ; class FOnlineIdRegistryRegistry { public : FOnlineIdRegistryRegistry&)",
    "insertText": "Get()"
  },
  {
    "label": "TearDown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TearDown()"
  },
  {
    "label": "RegisterAccountIdRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterAccountIdRegistry(EOnlineServices OnlineServices, IOnlineAccountIdRegistry* Registry, int32 Priority = 0)"
  },
  {
    "label": "UnregisterAccountIdRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAccountIdRegistry(EOnlineServices OnlineServices, int32 Priority = 0)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const FAccountId& AccountId)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FAccountId& AccountId)"
  },
  {
    "label": "ToReplicationData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "ToReplicationData(const FAccountId& AccountId)"
  },
  {
    "label": "ToAccountId()",
    "kind": "Method",
    "detail": "Function (FAccountId)",
    "insertText": "ToAccountId(EOnlineServices Services, const TArray<uint8>& RepData)"
  },
  {
    "label": "GetAccountIdRegistry()",
    "kind": "Method",
    "detail": "Function (IOnlineAccountIdRegistry*)",
    "insertText": "GetAccountIdRegistry(EOnlineServices OnlineServices)"
  },
  {
    "label": "RegisterSessionIdRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSessionIdRegistry(EOnlineServices OnlineServices, IOnlineSessionIdRegistry* Registry, int32 Priority = 0)"
  },
  {
    "label": "UnregisterSessionIdRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSessionIdRegistry(EOnlineServices OnlineServices, int32 Priority = 0)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToString(const FOnlineSessionId& SessionId)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FOnlineSessionId& SessionId)"
  },
  {
    "label": "ToReplicationData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "ToReplicationData(const FOnlineSessionId& SessionId)"
  },
  {
    "label": "ToSessionId()",
    "kind": "Method",
    "detail": "Function (FOnlineSessionId)",
    "insertText": "ToSessionId(EOnlineServices Services, const TArray<uint8>& RepData)"
  },
  {
    "label": "GetSessionIdRegistry()",
    "kind": "Method",
    "detail": "Function (IOnlineSessionIdRegistry*)",
    "insertText": "GetSessionIdRegistry(EOnlineServices OnlineServices)"
  },
  {
    "label": "RegisterSessionInviteIdRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterSessionInviteIdRegistry(EOnlineServices OnlineServices, IOnlineSessionInviteIdRegistry* Registry, int32 Priority = 0)"
  },
  {
    "label": "UnregisterSessionInviteIdRegistry()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterSessionInviteIdRegistry(EOnlineServices OnlineServices, int32 Priority = 0)"
  },
  {
    "label": "ToLogString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ToLogString(const FSessionInviteId& SessionInviteId)"
  },
  {
    "label": "ToReplicationData()",
    "kind": "Method",
    "detail": "Function (TArray<uint8>)",
    "insertText": "ToReplicationData(const FSessionInviteId& SessionInviteId)"
  },
  {
    "label": "ToSessionInviteId()",
    "kind": "Method",
    "detail": "Function (FSessionInviteId)",
    "insertText": "ToSessionInviteId(EOnlineServices Services, const TArray<uint8>& RepData)"
  },
  {
    "label": "GetSessionInviteIdRegistry()",
    "kind": "Method",
    "detail": "Function (IOnlineSessionInviteIdRegistry*)",
    "insertText": "GetSessionInviteIdRegistry(EOnlineServices OnlineServices)"
  },
  {
    "label": "FOnlineIdRegistryAndPriority()",
    "kind": "Method",
    "detail": "Function (private : template<IdType> struct FOnlineIdRegistryAndPriority {)",
    "insertText": "FOnlineIdRegistryAndPriority(IOnlineIdRegistry<IdType>* InRegistry, int32 InPriority) : Registry(InRegistry), Priority(InPriority)"
  },
  {
    "label": "FOnlineIdRegistryAndPriority()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FOnlineIdRegistryAndPriority()"
  },
  {
    "label": "FOnlineIdRegistryRegistry()",
    "kind": "Method",
    "detail": "Function (IOnlineIdRegistry<IdType>* Registry ; int32 Priority ; } ; typedef FOnlineIdRegistryAndPriority<OnlineIdHandleTags::FAccount> FAccountIdRegistryAndPriority ; typedef FOnlineIdRegistryAndPriority<OnlineIdHandleTags::FSession> FSessionIdRegistryAndPriority ; typedef FOnlineIdRegistryAndPriority<OnlineIdHandleTags::FSessionInvite> FSessionInviteIdRegistryAndPriority ; TMap<EOnlineServices,FAccountIdRegistryAndPriority> AccountIdRegistries ; TUniquePtr<FOnlineForeignAccountIdRegistry> ForeignAccountIdRegistry ; TMap<EOnlineServices,FSessionIdRegistryAndPriority> SessionIdRegistries ; TMap<EOnlineServices,FSessionInviteIdRegistryAndPriority> SessionInviteIdRegistries ; FLazySingleton ; PACKAGE_SCOPE :)",
    "insertText": "FOnlineIdRegistryRegistry()"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (} ; })",
    "insertText": "USTRUCT(noexport)"
  },
  {
    "label": "FUniqueNetIdWrapper()",
    "kind": "Method",
    "detail": "Function (using FVariantType = TVariant<FUniqueNetIdPtr,UE::Online::FAccountId> ;)",
    "insertText": "FUniqueNetIdWrapper()"
  },
  {
    "label": "FUniqueNetIdWrapper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FUniqueNetIdWrapper(const FUniqueNetIdRef& InUniqueNetId)"
  },
  {
    "label": "FUniqueNetIdPtr()",
    "kind": "Method",
    "detail": "Function (Variant . Emplace<)",
    "insertText": "FUniqueNetIdPtr(InUniqueNetId)"
  },
  {
    "label": "FUniqueNetIdWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUniqueNetIdWrapper(const FUniqueNetIdPtr& InUniqueNetId)"
  },
  {
    "label": "FUniqueNetIdWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUniqueNetIdWrapper(const FVariantType& InVariant) : Variant(InVariant)"
  },
  {
    "label": "FUniqueNetIdWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUniqueNetIdWrapper(const UE::Online::FAccountId& AccountId)"
  },
  {
    "label": "FAccountId()",
    "kind": "Method",
    "detail": "Function (Variant . Emplace<UE::)",
    "insertText": "FAccountId(AccountId)"
  },
  {
    "label": "FUniqueNetIdWrapper()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FUniqueNetIdWrapper(const FUniqueNetId& InUniqueNetId)"
  },
  {
    "label": "FUniqueNetIdPtr()",
    "kind": "Method",
    "detail": "Function (Variant . Emplace<)",
    "insertText": "FUniqueNetIdPtr(InUniqueNetId.AsShared())"
  },
  {
    "label": "IsV1()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsV1()"
  },
  {
    "label": "GetV1()",
    "kind": "Method",
    "detail": "Function (} FUniqueNetIdPtr)",
    "insertText": "GetV1()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FUniqueNetIdPtr Result ;)",
    "insertText": "if(ensure(IsV1()))"
  },
  {
    "label": "FUniqueNetIdPtr()",
    "kind": "Method",
    "detail": "Function (Result = Variant . Get<)",
    "insertText": "FUniqueNetIdPtr()"
  },
  {
    "label": "GetV1Unsafe()",
    "kind": "Method",
    "detail": "Function (} return Result ; } const FUniqueNetIdPtr&)",
    "insertText": "GetV1Unsafe()"
  },
  {
    "label": "IsV2()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsV2()"
  },
  {
    "label": "GetV2()",
    "kind": "Method",
    "detail": "Function (} UE::Online::FAccountId)",
    "insertText": "GetV2()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (UE::Online::FAccountId Result ;)",
    "insertText": "if(ensure(IsV2()))"
  },
  {
    "label": "FAccountId()",
    "kind": "Method",
    "detail": "Function (Result = Variant . Get<UE::)",
    "insertText": "FAccountId()"
  },
  {
    "label": "GetV2Unsafe()",
    "kind": "Method",
    "detail": "Function (} return Result ; } const UE::Online::FAccountId&)",
    "insertText": "GetV2Unsafe()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (FName Result = NAME_None ;)",
    "insertText": "if(IsValid() && ensure(IsV1()))"
  },
  {
    "label": "GetV1Unsafe()",
    "kind": "Method",
    "detail": "Function (Result =)",
    "insertText": "GetV1Unsafe()->GetType()"
  },
  {
    "label": "SetUniqueNetId()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "SetUniqueNetId(const FUniqueNetIdPtr& InUniqueNetId)"
  },
  {
    "label": "SetAccountId()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetAccountId(const UE::Online::FAccountId& AccountId)"
  },
  {
    "label": "GetUniqueNetId()",
    "kind": "Method",
    "detail": "Function (} FUniqueNetIdPtr)",
    "insertText": "GetUniqueNetId()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} const FUniqueNetId&)",
    "insertText": "operator()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FUniqueNetIdWrapper& Value)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} else { return)",
    "insertText": "GetTypeHash(Value.GetV2Unsafe())"
  },
  {
    "label": "Invalid()",
    "kind": "Method",
    "detail": "Function (} } return INDEX_NONE ; } FUniqueNetIdWrapper)",
    "insertText": "Invalid()"
  },
  {
    "label": "InvalidId()",
    "kind": "Method",
    "detail": "Function (FUniqueNetIdWrapper)",
    "insertText": "InvalidId(nullptr)"
  },
  {
    "label": "GetV2Unsafe()",
    "kind": "Method",
    "detail": "Function (} else { return Lhs .)",
    "insertText": "GetV2Unsafe() == Rhs.GetV2Unsafe()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "operator(const FUniqueNetIdWrapper& Lhs, const FUniqueNetIdWrapper& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FUniqueNetIdWrapper& Lhs, const FUniqueNetId& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FUniqueNetId& Lhs, const FUniqueNetIdWrapper& Rhs)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FUniqueNetIdWrapper& NetIdWrapper, TYPE_OF_NULLPTR)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(TYPE_OF_NULLPTR, const FUniqueNetIdWrapper& NetIdWrapper)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} protected : FVariantType Variant ; } ; template<ValueType> struct TUniqueNetIdMapKeyFuncs : public TDefaultMapKeyFuncs<FUniqueNetIdRef,ValueType,false> { FUniqueNetIdRef)",
    "insertText": "GetSetKey(TPair<FUniqueNetIdRef, ValueType> const& Element)"
  },
  {
    "label": "Matches()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Matches(FUniqueNetIdRef const& A, FUniqueNetIdRef const& B)"
  },
  {
    "label": "GetSetKey()",
    "kind": "Method",
    "detail": "Function (} } ; template<ValueType> using TUniqueNetIdMap = TMap<FUniqueNetIdRef,ValueType,FDefaultSetAllocator,TUniqueNetIdMapKeyFuncs<ValueType>> ; struct FUniqueNetIdKeyFuncs : public DefaultKeyFuncs<FUniqueNetIdRef> { FUniqueNetIdRef)",
    "insertText": "GetSetKey(FUniqueNetIdRef const& Element)"
  }
]