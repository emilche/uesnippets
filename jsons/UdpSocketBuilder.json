[
  {
    "label": "Error",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Error"
  },
  {
    "label": "FUdpSocketBuilder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FUdpSocketBuilder"
  },
  {
    "label": "FMulticastGroup",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMulticastGroup"
  },
  {
    "label": "FUdpSocketBuilder()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / OutputDeviceRedirector . h \" # include \" Sockets . h \" # include \" SocketSubsystem . h \" # include \" Interfaces / IPv4 / IPv4Address . h \" # include \" Interfaces / IPv4 / IPv4Endpoint . h \" class Error ; class FUdpSocketBuilder { public :)",
    "insertText": "FUdpSocketBuilder(const FString& InDescription) : AllowBroadcast(false) , Blocking(false) , Bound(false) , BoundEndpoint(FIPv4Address::Any, 0) , Description(InDescription) , MulticastInterface(FIPv4Address::Any) , MulticastLoopback(false) , MulticastTtl(1) , ReceiveBufferSize(0) , Reusable(false) , SendBufferSize(0)"
  },
  {
    "label": "AsBlocking()",
    "kind": "Method",
    "detail": "Function (} public : FUdpSocketBuilder&)",
    "insertText": "AsBlocking()"
  },
  {
    "label": "AsNonBlocking()",
    "kind": "Method",
    "detail": "Function (Blocking = true ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "AsNonBlocking()"
  },
  {
    "label": "AsReusable()",
    "kind": "Method",
    "detail": "Function (Blocking = false ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "AsReusable()"
  },
  {
    "label": "BoundToAddress()",
    "kind": "Method",
    "detail": "Function (Reusable = true ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "BoundToAddress(const FIPv4Address& Address)"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (BoundEndpoint =)",
    "insertText": "FIPv4Endpoint(Address, BoundEndpoint.Port)"
  },
  {
    "label": "BoundToEndpoint()",
    "kind": "Method",
    "detail": "Function (Bound = true ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "BoundToEndpoint(const FIPv4Endpoint& Endpoint)"
  },
  {
    "label": "BoundToPort()",
    "kind": "Method",
    "detail": "Function (BoundEndpoint = Endpoint ; Bound = true ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "BoundToPort(uint16 Port)"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (BoundEndpoint =)",
    "insertText": "FIPv4Endpoint(BoundEndpoint.Address, Port)"
  },
  {
    "label": "JoinedToGroup()",
    "kind": "Method",
    "detail": "Function (Bound = true ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "JoinedToGroup(const FIPv4Address& GroupAddress)"
  },
  {
    "label": "JoinedToGroup()",
    "kind": "Method",
    "detail": "Function (} FUdpSocketBuilder&)",
    "insertText": "JoinedToGroup(const FIPv4Address& GroupAddress, const FIPv4Address& InterfaceAddress)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (JoinedGroups .)",
    "insertText": "Add({ GroupAddress, InterfaceAddress })"
  },
  {
    "label": "WithMulticastLoopback()",
    "kind": "Method",
    "detail": "Function (AllowBroadcast = true ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "WithMulticastLoopback()"
  },
  {
    "label": "WithMulticastTtl()",
    "kind": "Method",
    "detail": "Function (MulticastLoopback = true ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "WithMulticastTtl(uint8 TimeToLive)"
  },
  {
    "label": "WithMulticastInterface()",
    "kind": "Method",
    "detail": "Function (MulticastTtl = TimeToLive ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "WithMulticastInterface(const FIPv4Address& InterfaceAddress)"
  },
  {
    "label": "WithReceiveBufferSize()",
    "kind": "Method",
    "detail": "Function (MulticastInterface = InterfaceAddress ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "WithReceiveBufferSize(int32 SizeInBytes)"
  },
  {
    "label": "WithSendBufferSize()",
    "kind": "Method",
    "detail": "Function (ReceiveBufferSize = SizeInBytes ; return* this ; } FUdpSocketBuilder&)",
    "insertText": "WithSendBufferSize(int32 SizeInBytes)"
  },
  {
    "label": "FSocket()",
    "kind": "Method",
    "detail": "Function (SendBufferSize = SizeInBytes ; return* this ; } public : operator)",
    "insertText": "FSocket()"
  },
  {
    "label": "Build()",
    "kind": "Method",
    "detail": "Function (} FSocket*)",
    "insertText": "Build()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (ISocketSubsystem* SocketSubsystem =)",
    "insertText": "Get(PLATFORM_SOCKETSUBSYSTEM)"
  },
  {
    "label": "Log()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Log(TEXT(\"FUdpSocketBuilder: Failed to load socket subsystem\"))"
  },
  {
    "label": "CreateSocket()",
    "kind": "Method",
    "detail": "Function (FSocket* Socket = SocketSubsystem ->)",
    "insertText": "CreateSocket(NAME_DGram, *Description, RemoteAddr->GetProtocolType())"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Failed to create socket %s\"), *Description)"
  },
  {
    "label": "GetLastErrorCode()",
    "kind": "Method",
    "detail": "Function (const ESocketErrors SocketError = SocketSubsystem ->)",
    "insertText": "GetLastErrorCode()"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Failed to configure %s (blocking: %i, reusable: %i, broadcast: %i). Error code %d.\"), *Description, Blocking, Reusable, AllowBroadcast, int32(SocketError))"
  },
  {
    "label": "DestroySocket()",
    "kind": "Method",
    "detail": "Function (SocketSubsystem ->)",
    "insertText": "DestroySocket(Socket)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Failed to bind %s to %s. Error code %d.\"), *Description, *BoundEndpoint.ToString(), int32(SocketError))"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Failed to configure multicast for %s (loopback: %i, ttl: %i). Error code %d.\"), *Description, MulticastLoopback, MulticastTtl, int32(SocketError))"
  },
  {
    "label": "SetBroadcastAddress()",
    "kind": "Method",
    "detail": "Function (MulticastAddress ->)",
    "insertText": "SetBroadcastAddress()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FInternetAddr> AddressToUse = nullptr ;)",
    "insertText": "for(const auto& Group : JoinedGroups)"
  },
  {
    "label": "FIPv4Endpoint()",
    "kind": "Method",
    "detail": "Function (AddressToUse = MulticastAddress ; } else { AddressToUse =)",
    "insertText": "FIPv4Endpoint(Group.GroupAddress, 0).ToInternetAddr()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(!Socket->JoinMulticastGroup(*AddressToUse, *FIPv4Endpoint(Group.InterfaceAddress, 0).ToInternetAddr()))"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Failed to subscribe %s to multicast group %s on interface %s. Error code %d.\"), *Description, *Group.GroupAddress.ToString(), *Group.InterfaceAddress.ToString(), int32(SocketError))"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Failed to set multicast outgoing interface for %s to %s. Error code %d.\"), *Description, *MulticastInterface.ToString(), int32(SocketError))"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Warning - could not set receive buffer size to %d for %s. Error code %d.\"), ReceiveBufferSize, *Description, int32(SocketError))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} })",
    "insertText": "if(SendBufferSize > 0)"
  },
  {
    "label": "Logf()",
    "kind": "Method",
    "detail": "Function (GLog ->)",
    "insertText": "Logf(TEXT(\"FUdpSocketBuilder: Warning - could not set send buffer size to %d for %s. Error code %d.\"), SendBufferSize, *Description, int32(SocketError))"
  }
]