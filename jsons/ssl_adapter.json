[
  {
    "label": "SSLAdapter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLAdapter"
  },
  {
    "label": "SSLAdapterFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSLAdapterFactory"
  },
  {
    "label": "SSLAdapterFactory()",
    "kind": "Method",
    "detail": "Function (# ifndef RTC_BASE_SSL_ADAPTER_H_ # define RTC_BASE_SSL_ADAPTER_H_ # include<string> # include<vector> # include \" absl / strings / string_view . h \" # include \" rtc_base / async_socket . h \" # include \" rtc_base / ssl_certificate . h \" # include \" rtc_base / ssl_identity . h \" # include \" rtc_base / ssl_stream_adapter . h \" # include \" rtc_base / system / rtc_export . h \" namespace rtc { class SSLAdapter ; class SSLAdapterFactory { public : ~)",
    "insertText": "SSLAdapterFactory()"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMode(SSLMode mode)"
  },
  {
    "label": "SetCertVerifier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCertVerifier(SSLCertificateVerifier* ssl_cert_verifier)"
  },
  {
    "label": "SetIdentity()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIdentity(std::unique_ptr<SSLIdentity> identity)"
  },
  {
    "label": "SetRole()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRole(SSLRole role)"
  },
  {
    "label": "SetIgnoreBadCert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIgnoreBadCert(bool ignore)"
  },
  {
    "label": "CreateAdapter()",
    "kind": "Method",
    "detail": "Function (SSLAdapter*)",
    "insertText": "CreateAdapter(Socket* socket)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (std::unique_ptr<SSLAdapterFactory>)",
    "insertText": "Create()"
  },
  {
    "label": "SSLAdapter()",
    "kind": "Method",
    "detail": "Function (} ; class SSLAdapter : public AsyncSocketAdapter { public :)",
    "insertText": "SSLAdapter(Socket* socket) : AsyncSocketAdapter(socket)"
  },
  {
    "label": "SetAlpnProtocols()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAlpnProtocols(const std::vector<std::string>& protos)"
  },
  {
    "label": "SetEllipticCurves()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetEllipticCurves(const std::vector<std::string>& curves)"
  },
  {
    "label": "StartSSL()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "StartSSL(absl::string_view hostname)"
  },
  {
    "label": "IsResumedSession()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsResumedSession()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (SSLAdapter*)",
    "insertText": "Create(Socket* socket)"
  },
  {
    "label": "Listen()",
    "kind": "Method",
    "detail": "Function (private : int)",
    "insertText": "Listen(int backlog)"
  },
  {
    "label": "RTC_CHECK()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RTC_CHECK(false)"
  },
  {
    "label": "Accept()",
    "kind": "Method",
    "detail": "Function (} Socket*)",
    "insertText": "Accept(SocketAddress* paddr)"
  },
  {
    "label": "InitializeSSL()",
    "kind": "Method",
    "detail": "Function (} } ; RTC_EXPORT bool)",
    "insertText": "InitializeSSL()"
  },
  {
    "label": "CleanupSSL()",
    "kind": "Method",
    "detail": "Function (RTC_EXPORT bool)",
    "insertText": "CleanupSSL()"
  }
]