[
  {
    "label": "FStaticLightingMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingMapping"
  },
  {
    "label": "FStaticLightingBuildContext",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingBuildContext"
  },
  {
    "label": "FStaticLightingTextureMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingTextureMapping"
  },
  {
    "label": "ULevel",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULevel"
  },
  {
    "label": "ULightComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ULightComponent"
  },
  {
    "label": "UPrimitiveComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UPrimitiveComponent"
  },
  {
    "label": "FStaticLightingVertex",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingVertex"
  },
  {
    "label": "FLightRayIntersection",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightRayIntersection"
  },
  {
    "label": "FStaticLightingMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingMesh"
  },
  {
    "label": "FLightmassExporter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLightmassExporter"
  },
  {
    "label": "FQuantizedLightmapData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FQuantizedLightmapData"
  },
  {
    "label": "FShadowMapData2D",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShadowMapData2D"
  },
  {
    "label": "FStaticLightingGlobalVolumeMapping",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FStaticLightingGlobalVolumeMapping"
  },
  {
    "label": "FStaticLightingPrimitiveInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStaticLightingPrimitiveInfo"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / Guid . h \" # include \" Templates / RefCounting . h \" # include \" Components . h \" class FStaticLightingMapping ; class FStaticLightingBuildContext ; class FStaticLightingTextureMapping ; class ULevel ; class ULightComponent ; class UPrimitiveComponent ; struct FStaticLightingVertex { FVector WorldPosition ; FVector WorldTangentX ; FVector WorldTangentY ; FVector WorldTangentZ ; FVector2D TextureCoordinates [ MAX_STATIC_TEXCOORDS ] ; FStaticLightingVertex)",
    "insertText": "operator(const FStaticLightingVertex& A,const FStaticLightingVertex& B)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (FStaticLightingVertex Result ; Result . WorldPosition = A . WorldPosition + B . WorldPosition ; Result . WorldTangentX = A . WorldTangentX + B . WorldTangentX ; Result . WorldTangentY = A . WorldTangentY + B . WorldTangentY ; Result . WorldTangentZ = A . WorldTangentZ + B . WorldTangentZ ;)",
    "insertText": "for(int32 CoordinateIndex = 0;CoordinateIndex < MAX_STATIC_TEXCOORDS;CoordinateIndex++)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Result . TextureCoordinates [ CoordinateIndex ] = A . TextureCoordinates [ CoordinateIndex ] - B . TextureCoordinates [ CoordinateIndex ] ; } return Result ; } FStaticLightingVertex)",
    "insertText": "operator(const FStaticLightingVertex& A,float B)"
  },
  {
    "label": "FLightRayIntersection()",
    "kind": "Method",
    "detail": "Function (Result . TextureCoordinates [ CoordinateIndex ] = A . TextureCoordinates [ CoordinateIndex ]* InvB ; } return Result ; } } ; class FLightRayIntersection { public : uint32 bIntersects : 1 ; FStaticLightingVertex IntersectionVertex ;)",
    "insertText": "FLightRayIntersection(bool bInIntersects,const FStaticLightingVertex& InIntersectionVertex): bIntersects(bInIntersects), IntersectionVertex(InIntersectionVertex)"
  },
  {
    "label": "None()",
    "kind": "Method",
    "detail": "Function (} FLightRayIntersection)",
    "insertText": "None()"
  },
  {
    "label": "FStaticLightingMesh()",
    "kind": "Method",
    "detail": "Function (} } ; class FStaticLightingMesh : public FRefCountedObject { public : const int32 NumTriangles ; const int32 NumShadingTriangles ; const int32 NumVertices ; const int32 NumShadingVertices ; const int32 TextureCoordinateIndex ; TArray<int32> VisibilityIds ; const uint32 bCastShadow : 1 ; const uint32 bTwoSidedMaterial : 1 ; const TArray<ULightComponent*> RelevantLights ; TArray<FGuid> RelevantLightsGuid ; const UPrimitiveComponent* const Component ; FGuid ComponentGuid ; FBox BoundingBox ; FGuid Guid ; FGuid SourceMeshGuid ; TArray<TRefCountPtr<FStaticLightingMesh>> OtherMeshLODs ; uint32 HLODTreeIndex ; uint32 HLODChildStartIndex ; uint32 HLODChildEndIndex ;)",
    "insertText": "FStaticLightingMesh(int32 InNumTriangles, int32 InNumShadingTriangles, int32 InNumVertices, int32 InNumShadingVertices, int32 InTextureCoordinateIndex, bool bInCastShadow, bool bInTwoSidedMaterial, const TArray<ULightComponent*>& InRelevantLights, const UPrimitiveComponent* const InComponent, const FBox& InBoundingBox, const FGuid& InSourceMeshGuid, const FGuid& InComponentGuid)"
  },
  {
    "label": "FStaticLightingMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FStaticLightingMesh()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTriangle(int32 TriangleIndex,FStaticLightingVertex& OutV0,FStaticLightingVertex& OutV1,FStaticLightingVertex& OutV2)"
  },
  {
    "label": "GetShadingTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadingTriangle(int32 TriangleIndex,FStaticLightingVertex& OutV0,FStaticLightingVertex& OutV1,FStaticLightingVertex& OutV2)"
  },
  {
    "label": "GetTriangle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriangle(TriangleIndex, OutV0, OutV1, OutV2)"
  },
  {
    "label": "GetTriangleIndices()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetTriangleIndices(int32 TriangleIndex,int32& OutI0,int32& OutI1,int32& OutI2)"
  },
  {
    "label": "GetShadingTriangleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetShadingTriangleIndices(int32 TriangleIndex,int32& OutI0,int32& OutI1,int32& OutI2)"
  },
  {
    "label": "GetTriangleIndices()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetTriangleIndices(TriangleIndex, OutI0, OutI1, OutI2)"
  },
  {
    "label": "ShouldCastShadow()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ShouldCastShadow(ULightComponent* Light,const FStaticLightingMapping* Receiver)"
  },
  {
    "label": "IsTriangleCastingShadow()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsTriangleCastingShadow(uint32 TriangleIndex)"
  },
  {
    "label": "ExportMeshInstance()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITOR void)",
    "insertText": "ExportMeshInstance(class FLightmassExporter* Exporter)"
  },
  {
    "label": "GetLightingGuid()",
    "kind": "Method",
    "detail": "Function (} # endif const FGuid&)",
    "insertText": "GetLightingGuid()"
  },
  {
    "label": "FStaticLightingMapping()",
    "kind": "Method",
    "detail": "Function (} ; class FStaticLightingMapping : public FRefCountedObject { public : class FStaticLightingMesh* Mesh ; UObject* Owner ; uint32 bProcessMapping : 1 ; uint32 bIsDeferred : 1 ;)",
    "insertText": "FStaticLightingMapping(FStaticLightingMesh* InMesh,UObject* InOwner): Mesh(InMesh), Owner(InOwner), bProcessMapping(false), bIsDeferred(false)"
  },
  {
    "label": "FStaticLightingMapping()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FStaticLightingMapping()"
  },
  {
    "label": "GetTextureMapping()",
    "kind": "Method",
    "detail": "Function (} FStaticLightingTextureMapping*)",
    "insertText": "GetTextureMapping()"
  },
  {
    "label": "ExportMapping()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportMapping(class FLightmassExporter* Exporter)"
  },
  {
    "label": "GetTexelCount()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetTexelCount()"
  },
  {
    "label": "GetMappedObject()",
    "kind": "Method",
    "detail": "Function (UObject*)",
    "insertText": "GetMappedObject()"
  },
  {
    "label": "Apply()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Apply(struct FQuantizedLightmapData* QuantizedData, const TMap<ULightComponent*,class FShadowMapData2D*>& ShadowMapData, const FStaticLightingBuildContext* LightingContext)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetDescription()"
  },
  {
    "label": "FStaticLightingTextureMapping()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FStaticLightingTextureMapping(const FArchive& Ar) : FStaticLightingMapping(Ar)"
  },
  {
    "label": "FStaticLightingGlobalVolumeMapping()",
    "kind": "Method",
    "detail": "Function (} } ; class FStaticLightingGlobalVolumeMapping : public FStaticLightingTextureMapping { public :)",
    "insertText": "FStaticLightingGlobalVolumeMapping(FStaticLightingMesh* InMesh, UObject* InOwner, int32 InSizeX, int32 InSizeY, int32 InLightmapTextureCoordinateIndex)"
  },
  {
    "label": "DebugThisMapping()",
    "kind": "Method",
    "detail": "Function (} # if WITH_EDITOR bool)",
    "insertText": "DebugThisMapping()"
  },
  {
    "label": "IsValidMapping()",
    "kind": "Method",
    "detail": "Function (# endif bool)",
    "insertText": "IsValidMapping()"
  },
  {
    "label": "FStaticLightingPrimitiveInfo()",
    "kind": "Method",
    "detail": "Function (} } ; struct FStaticLightingPrimitiveInfo {)",
    "insertText": "FStaticLightingPrimitiveInfo() : VisibilityId(INDEX_NONE)"
  }
]