[
  {
    "label": "FMovieSceneInterrogationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneInterrogationData"
  },
  {
    "label": "FMovieSceneContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneContext"
  },
  {
    "label": "FMovieSceneBlendingAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMovieSceneBlendingAccumulator"
  },
  {
    "label": "TMovieSceneBlendingActuator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMovieSceneBlendingActuator"
  },
  {
    "label": "IBlendableTokenStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "IBlendableTokenStack"
  },
  {
    "label": "TBlendableTokenStack",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TBlendableTokenStack"
  },
  {
    "label": "GetBlendingDataType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" MovieSceneFwd . h \" # include \" Evaluation / MovieSceneAnimTypeID . h \" # include \" Evaluation / Blending / MovieSceneBlendingActuatorID . h \" # include \" Misc / InlineValue . h \" # include \" Evaluation / MovieSceneEvaluationScope . h \" # include \" Evaluation / MovieSceneEvaluationOperand . h \" # include \" Evaluation / Blending / BlendableToken . h \" # include \" IMovieScenePlayer . h \" # include \" Evaluation / PreAnimatedState / MovieScenePreAnimatedCaptureSource . h \" struct FMovieSceneInterrogationData ; struct FMovieSceneContext ; struct FMovieSceneBlendingAccumulator ; template<T> struct TMovieSceneBlendingActuator ; template<T> FMovieSceneAnimTypeID)",
    "insertText": "GetBlendingDataType()"
  },
  {
    "label": "IBlendableTokenStack()",
    "kind": "Method",
    "detail": "Function (} struct IBlendableTokenStack { protected :)",
    "insertText": "IBlendableTokenStack(FMovieSceneAnimTypeID InDataTypeID) : DataTypeID(InDataTypeID)"
  },
  {
    "label": "IBlendableTokenStack()",
    "kind": "Method",
    "detail": "Function (} public : ~)",
    "insertText": "IBlendableTokenStack()"
  },
  {
    "label": "ComputeAndActuate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ComputeAndActuate(UObject* InObject, FMovieSceneBlendingAccumulator& Accumulator, FMovieSceneBlendingActuatorID ActuatorTypeID, const FMovieSceneContext& Context, FPersistentEvaluationData& PersistentData, IMovieScenePlayer& Player)"
  },
  {
    "label": "Interrogate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Interrogate(UObject* AnimatedObject, FMovieSceneInterrogationData& InterrogationData, FMovieSceneBlendingAccumulator& Accumulator, FMovieSceneBlendingActuatorID ActuatorTypeID, const FMovieSceneContext& Context)"
  },
  {
    "label": "TBlendableTokenStack()",
    "kind": "Method",
    "detail": "Function (FMovieSceneAnimTypeID DataTypeID ; } ; template<DataType> struct TBlendableTokenStack : IBlendableTokenStack { TArray<const TBlendableToken<DataType>*> Tokens ; int32 CurrentBias ;)",
    "insertText": "TBlendableTokenStack() : IBlendableTokenStack(GetBlendingDataType<DataType>()), CurrentBias(TNumericLimits<int32>::Lowest())"
  },
  {
    "label": "AddToken()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AddToken(const TBlendableToken<DataType>* TokenToAdd)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Tokens .)",
    "insertText": "Reset()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (CurrentBias = TokenToAdd -> HierarchicalBias ; })",
    "insertText": "if(TokenToAdd->HierarchicalBias == CurrentBias)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Tokens .)",
    "insertText": "Add(TokenToAdd)"
  },
  {
    "label": "ComputeAndActuate()",
    "kind": "Method",
    "detail": "Function (} } public : void)",
    "insertText": "ComputeAndActuate(UObject* InObject, FMovieSceneBlendingAccumulator& Accumulator, FMovieSceneBlendingActuatorID InActuatorType, const FMovieSceneContext& Context, FPersistentEvaluationData& PersistentData, IMovieScenePlayer& Player)"
  },
  {
    "label": "SavePreAnimatedStateForAllEntities()",
    "kind": "Method",
    "detail": "Function (template<. . . T> void)",
    "insertText": "SavePreAnimatedStateForAllEntities(IMovieScenePlayer& Player, T&&... Args)"
  },
  {
    "label": "SavePreAnimatedStateImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePreAnimatedStateImpl(Player, EMovieSceneCompletionMode::RestoreState, Args...)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (} template<. . . T> void)",
    "insertText": "SavePreAnimatedState(IMovieScenePlayer& Player, T&&... Args)"
  },
  {
    "label": "SavePreAnimatedStateImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SavePreAnimatedStateImpl(Player, TOptional<EMovieSceneCompletionMode>(), Args...)"
  },
  {
    "label": "SavePreAnimatedStateImpl()",
    "kind": "Method",
    "detail": "Function (} private : template<. . . T> void)",
    "insertText": "SavePreAnimatedStateImpl(IMovieScenePlayer& Player, TOptional<EMovieSceneCompletionMode> CompletionModeOverride, T&&... Args)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (bool bSavedState = false ;)",
    "insertText": "for(const TBlendableToken<DataType>* Token : Tokens)"
  },
  {
    "label": "CaptureSource()",
    "kind": "Method",
    "detail": "Function (FScopedPreAnimatedCaptureSource)",
    "insertText": "CaptureSource(&Player.PreAnimatedState, Token->AnimatingScope.Key, true)"
  },
  {
    "label": "SavePreAnimatedState()",
    "kind": "Method",
    "detail": "Function (Player .)",
    "insertText": "SavePreAnimatedState(Forward<T>(Args)...)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bSavedState = true ; } })",
    "insertText": "if(!bSavedState)"
  }
]