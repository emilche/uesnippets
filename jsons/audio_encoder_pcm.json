[
  {
    "label": "AudioEncoderPcm",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderPcm"
  },
  {
    "label": "Config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Config"
  },
  {
    "label": "AudioEncoderPcmA",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderPcmA"
  },
  {
    "label": "AudioEncoderPcmU",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AudioEncoderPcmU"
  },
  {
    "label": "IsOk()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_AUDIO_CODING_CODECS_G711_AUDIO_ENCODER_PCM_H_ # define MODULES_AUDIO_CODING_CODECS_G711_AUDIO_ENCODER_PCM_H_ # include<utility> # include<vector> # include \" absl / types / optional . h \" # include \" api / audio_codecs / audio_encoder . h \" # include \" api / units / time_delta . h \" namespace webrtc { class AudioEncoderPcm : public AudioEncoder { public : struct Config { public : bool)",
    "insertText": "IsOk()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (int frame_size_ms ; size_t num_channels ; int payload_type ; protected :)",
    "insertText": "Config(int pt) : frame_size_ms(20), num_channels(1), payload_type(pt)"
  },
  {
    "label": "AudioEncoderPcm()",
    "kind": "Method",
    "detail": "Function (} } ; ~)",
    "insertText": "AudioEncoderPcm()"
  },
  {
    "label": "SampleRateHz()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "SampleRateHz()"
  },
  {
    "label": "NumChannels()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "NumChannels()"
  },
  {
    "label": "Num10MsFramesInNextPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Num10MsFramesInNextPacket()"
  },
  {
    "label": "Max10MsFramesInAPacket()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "Max10MsFramesInAPacket()"
  },
  {
    "label": "GetTargetBitrate()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "GetTargetBitrate()"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "GetFrameLengthRange()",
    "kind": "Method",
    "detail": "Function (absl::optional<std::pair<TimeDelta,TimeDelta>>)",
    "insertText": "GetFrameLengthRange()"
  },
  {
    "label": "AudioEncoderPcm()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "AudioEncoderPcm(const Config& config, int sample_rate_hz)"
  },
  {
    "label": "EncodeImpl()",
    "kind": "Method",
    "detail": "Function (EncodedInfo)",
    "insertText": "EncodeImpl(uint32_t rtp_timestamp, rtc::ArrayView<const int16_t> audio, rtc::Buffer* encoded)"
  },
  {
    "label": "EncodeCall()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "EncodeCall(const int16_t* audio, size_t input_len, uint8_t* encoded)"
  },
  {
    "label": "BytesPerSample()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "BytesPerSample()"
  },
  {
    "label": "GetCodecType()",
    "kind": "Method",
    "detail": "Function (AudioEncoder::CodecType)",
    "insertText": "GetCodecType()"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (private : const int sample_rate_hz_ ; const size_t num_channels_ ; const int payload_type_ ; const size_t num_10ms_frames_per_packet_ ; const size_t full_frame_samples_ ; std::vector<int16_t> speech_buffer_ ; uint32_t first_timestamp_in_buffer_ ; } ; class AudioEncoderPcmA final : public AudioEncoderPcm { public : struct Config : public AudioEncoderPcm::Config {)",
    "insertText": "Config() : AudioEncoderPcm::Config(8)"
  },
  {
    "label": "AudioEncoderPcmA()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "AudioEncoderPcmA(const Config& config) : AudioEncoderPcm(config, kSampleRateHz)"
  },
  {
    "label": "AudioEncoderPcmA()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioEncoderPcmA(const AudioEncoderPcmA&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderPcmA&)",
    "insertText": "operator(const AudioEncoderPcmA&)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (private : const int kSampleRateHz = 8 0 0 0 ; } ; class AudioEncoderPcmU final : public AudioEncoderPcm { public : struct Config : public AudioEncoderPcm::Config {)",
    "insertText": "Config() : AudioEncoderPcm::Config(0)"
  },
  {
    "label": "AudioEncoderPcmU()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "AudioEncoderPcmU(const Config& config) : AudioEncoderPcm(config, kSampleRateHz)"
  },
  {
    "label": "AudioEncoderPcmU()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "AudioEncoderPcmU(const AudioEncoderPcmU&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (AudioEncoderPcmU&)",
    "insertText": "operator(const AudioEncoderPcmU&)"
  }
]