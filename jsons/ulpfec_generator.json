[
  {
    "label": "FlexfecSender",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FlexfecSender"
  },
  {
    "label": "UlpfecGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UlpfecGenerator"
  },
  {
    "label": "Params",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Params"
  },
  {
    "label": "UlpfecGenerator()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_ULPFEC_GENERATOR_H_ # define MODULES_RTP_RTCP_SOURCE_ULPFEC_GENERATOR_H_ # include<stddef . h> # include<stdint . h> # include<list> # include<memory> # include<vector> # include \" modules / include / module_fec_types . h \" # include \" modules / rtp_rtcp / source / forward_error_correction . h \" # include \" modules / rtp_rtcp / source / video_fec_generator . h \" # include \" rtc_base / race_checker . h \" # include \" rtc_base / rate_statistics . h \" # include \" rtc_base / synchronization / mutex . h \" namespace webrtc { class FlexfecSender ; class UlpfecGenerator : public VideoFecGenerator { class FlexfecSender ; public :)",
    "insertText": "UlpfecGenerator(int red_payload_type, int ulpfec_payload_type, Clock* clock)"
  },
  {
    "label": "UlpfecGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UlpfecGenerator()"
  },
  {
    "label": "GetFecType()",
    "kind": "Method",
    "detail": "Function (FecType)",
    "insertText": "GetFecType()"
  },
  {
    "label": "AddPacketAndGenerateFec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddPacketAndGenerateFec(const RtpPacketToSend& packet)"
  },
  {
    "label": "MaxPacketOverhead()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "MaxPacketOverhead()"
  },
  {
    "label": "GetFecPackets()",
    "kind": "Method",
    "detail": "Function (std::vector<std::unique_ptr<RtpPacketToSend>>)",
    "insertText": "GetFecPackets()"
  },
  {
    "label": "CurrentFecRate()",
    "kind": "Method",
    "detail": "Function (DataRate)",
    "insertText": "CurrentFecRate()"
  },
  {
    "label": "GetRtpState()",
    "kind": "Method",
    "detail": "Function (absl::optional<RtpState>)",
    "insertText": "GetRtpState()"
  },
  {
    "label": "Params()",
    "kind": "Method",
    "detail": "Function (private : struct Params {)",
    "insertText": "Params()"
  },
  {
    "label": "Params()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Params(FecProtectionParams delta_params, FecProtectionParams keyframe_params)"
  },
  {
    "label": "UlpfecGenerator()",
    "kind": "Method",
    "detail": "Function (FecProtectionParams delta_params ; FecProtectionParams keyframe_params ; } ;)",
    "insertText": "UlpfecGenerator(std::unique_ptr<ForwardErrorCorrection> fec, Clock* clock)"
  },
  {
    "label": "Overhead()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "Overhead()"
  },
  {
    "label": "ExcessOverheadBelowMax()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ExcessOverheadBelowMax()"
  },
  {
    "label": "MinimumMediaPacketsReached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "MinimumMediaPacketsReached()"
  },
  {
    "label": "ResetState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetState()"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (const int red_payload_type_ ; const int ulpfec_payload_type_ ; Clock* const clock_ ; rtc::RaceChecker race_checker_ ; const std::unique_ptr<ForwardErrorCorrection> fec_)",
    "insertText": "RTC_GUARDED_BY(race_checker_)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Mutex mutex_ ; absl::optional<Params> pending_params_)",
    "insertText": "RTC_GUARDED_BY(mutex_)"
  }
]