[
  {
    "label": "FEditorDataStorageColumn",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorDataStorageColumn"
  },
  {
    "label": "FEditorDataStorageTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FEditorDataStorageTag"
  },
  {
    "label": "FValueTag",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FValueTag"
  },
  {
    "label": "FDynamicColumnDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDynamicColumnDescription"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Elements / Common / TypedElementHandles . h \" # include \" TypedElementCommonTypes . generated . h \")",
    "insertText": "USTRUCT()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY()"
  },
  {
    "label": "To()",
    "kind": "Method",
    "detail": "Function (namespace UE { namespace detail { template<T,U> concept SameHelper = std::is_same_v<T,U> ; } template<T,U> concept same_as = detail::SameHelper<T,U>&& detail::SameHelper<U,T> ; template<From,To> concept convertible_to = std::is_convertible_v<From,To>&& requires { static_cast<)",
    "insertText": "To(std::declval<From>())"
  },
  {
    "label": "FValueTag()",
    "kind": "Method",
    "detail": "Function (} ; template<Derived,Base> concept derived_from = std::is_base_of_v<Base,Derived>&& std::is_convertible_v<const volatile Derived*,const volatile Base*> ; namespace Editor::DataStorage { using FColumn = FEditorDataStorageColumn ; using FTag = FEditorDataStorageTag ; class FValueTag { public :)",
    "insertText": "FValueTag(const FName& InName)"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FName&)",
    "insertText": "GetName()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FValueTag& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (private : uint32)",
    "insertText": "GetTypeHash(const FValueTag& InName)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (FName Name ; } ; template<T> concept TValueTagType = std::is_same_v<T,FValueTag> ; struct FDynamicColumnDescription { const UScriptStruct* TemplateType ; FName Identifier ; uint32)",
    "insertText": "GetTypeHash(const FDynamicColumnDescription& Descriptor)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "operator(const FDynamicColumnDescription&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (} ; using RowCreationCallbackRef = TFunctionRef<)",
    "insertText": "void(RowHandle Row)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ColumnCreationCallbackRef = TFunctionRef<)",
    "insertText": "void(void* Column, const UScriptStruct& ColumnType)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ColumnListCallbackRef = TFunctionRef<)",
    "insertText": "void(const UScriptStruct& ColumnType)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using ColumnCopyOrMoveCallback =)",
    "insertText": "void(*)(const UScriptStruct& ColumnType, void* Destination, void* Source)"
  }
]