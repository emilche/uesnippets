[
  {
    "label": "IProfilerServiceManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IProfilerServiceManager"
  },
  {
    "label": "FProfilerCycleCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerCycleCounter"
  },
  {
    "label": "FProfilerFloatAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerFloatAccumulator"
  },
  {
    "label": "FProfilerCountAccumulator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerCountAccumulator"
  },
  {
    "label": "FProfilerCycleGraph",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerCycleGraph"
  },
  {
    "label": "FProfilerDataFrame",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerDataFrame"
  },
  {
    "label": "FStatDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatDescription"
  },
  {
    "label": "FStatGroupDescription",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatGroupDescription"
  },
  {
    "label": "FStatMetaData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FStatMetaData"
  },
  {
    "label": "Type",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "Type"
  },
  {
    "label": "FProfilerFileChunkHeader",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FProfilerFileChunkHeader"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Stats / Stats . h \" # include \" Serialization / MemoryWriter . h \" typedef TSharedRef<class IProfilerServiceManager> IProfilerServiceManagerRef ; struct FProfilerCycleCounter { public : uint32 StatId ; uint32 GroupId ; double FrameStart ; uint32 ParentId ; uint32 InstanceId ; uint32 ParentInstanceId ; uint32 ThreadId ; uint32 Value ; uint32 CallsPerFrame ; } ; struct FProfilerFloatAccumulator { int32 StatId ; float Value ; } ; struct FProfilerCountAccumulator { int32 StatId ; uint32 Value ; } ; struct FProfilerCycleGraph { public : int32 StatId ; uint32 FrameStart ; uint32 ThreadId ; uint32 Value ; uint32 CallsPerFrame ; TArray<FProfilerCycleGraph> Children ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FProfilerCycleCounter& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . StatId ; Ar<<Data . GroupId ; Ar<<Data . FrameStart ; Ar<<Data . ParentId ; Ar<<Data . InstanceId ; Ar<<Data . ParentInstanceId ; Ar<<Data . ThreadId ; Ar<<Data . Value ; Ar<<Data . CallsPerFrame ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FProfilerFloatAccumulator& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . StatId ; Ar<<Data . Value ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FProfilerCountAccumulator& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . StatId ; Ar<<Data . Value ; return Ar ; } FArchive&)",
    "insertText": "operator(FArchive& Ar, FProfilerCycleGraph& Data)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . StatId ; Ar<<Data . FrameStart ; Ar<<Data . ThreadId ; Ar<<Data . CallsPerFrame ; Ar<<Data . Value ; Ar<<Data . Children ; return Ar ; } struct FProfilerDataFrame { TMap<uint32,TArray<FProfilerCycleCounter>> CycleCounters ; TMap<uint32,FProfilerCycleGraph> CycleGraphs ; TArray<FProfilerFloatAccumulator> FloatAccumulators ; TArray<FProfilerCountAccumulator> CountAccumulators ; double FrameStart ; uint32 Frame ; bool MetaDataUpdated ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FProfilerDataFrame& Data)"
  },
  {
    "label": "FStatDescription()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . Frame ; Ar<<Data . FrameStart ; Ar<<Data . CycleCounters ; Ar<<Data . CycleGraphs ; Ar<<Data . FloatAccumulators ; Ar<<Data . CountAccumulators ; return Ar ; } struct FStatDescription {)",
    "insertText": "FStatDescription() : ID( 0 ) , StatType( -1 ) , GroupID( 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32 ID ; FString Name ; uint32 StatType ; int32 GroupID ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FStatDescription& Data)"
  },
  {
    "label": "FStatGroupDescription()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . ID ; Ar<<Data . Name ; Ar<<Data . StatType ; Ar<<Data . GroupID ; return Ar ; } struct FStatGroupDescription {)",
    "insertText": "FStatGroupDescription() : ID( 0)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32 ID ; FString Name ; } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FStatGroupDescription& Data)"
  },
  {
    "label": "GetMetaDataSize()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . ID ; Ar<<Data . Name ; return Ar ; } struct FStatMetaData { TMap<uint32,FStatDescription> StatDescriptions ; TMap<uint32,FStatGroupDescription> GroupDescriptions ; TMap<uint32,FString> ThreadDescriptions ; double SecondsPerCycle ; FCriticalSection* CriticalSection ; const uint32)",
    "insertText": "GetMetaDataSize()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} } ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FStatMetaData& Data)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (Ar<<Data . StatDescriptions ; Ar<<Data . GroupDescriptions ; Ar<<Data . ThreadDescriptions ; Ar<<Data . SecondsPerCycle ; return Ar ; } namespace EProfilerRequestType { enum Type { PRT_SendLastCapturedFile,} ; })",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FProfilerDataDelegate, const FGuid&, const FProfilerDataFrame&)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (# if STATS)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FProfilerData2Delegate, const FGuid&, TArray<FStatMessage>&)"
  },
  {
    "label": "FProfilerFileChunkHeader()",
    "kind": "Method",
    "detail": "Function (# endif namespace EProfilerFileChunkType { enum Type { PrepareFile,SendChunk,FinalizeFile,NotUsed,} ; } struct FProfilerFileChunkHeader { const int64 DefChunkSize = 6 4* 1 0 2 4 ;)",
    "insertText": "FProfilerFileChunkHeader() : ChunkOffset( 0 ) , ChunkSize( 0 ) , FileSize( 0 ) , ChunkType( EProfilerFileChunkType::NotUsed)"
  },
  {
    "label": "FProfilerFileChunkHeader()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FProfilerFileChunkHeader(int64 InChunkOffset, int64 InChunkSize, int64 InFileSize, EProfilerFileChunkType::Type InChunkType ) : ChunkOffset( InChunkOffset ) , ChunkSize( InChunkSize ) , FileSize( InFileSize ) , ChunkType( InChunkType)"
  },
  {
    "label": "Validate()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Validate()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int64 ChunkOffset ; int64 ChunkSize ; int64 FileSize ; EProfilerFileChunkType::Type ChunkType ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FProfilerFileChunkHeader& Header)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (Ar<<Header . ChunkOffset ; Ar<<Header . ChunkSize ; Ar<<Header . FileSize ;)",
    "insertText": "Ar(uint32&)"
  },
  {
    "label": "Writer()",
    "kind": "Method",
    "detail": "Function (TArray<uint8> ArrayHeader ; FMemoryWriter)",
    "insertText": "Writer(ArrayHeader)"
  },
  {
    "label": "FProfilerFileChunkHeader()",
    "kind": "Method",
    "detail": "Function (Writer<<const_cast<)",
    "insertText": "FProfilerFileChunkHeader(*this)"
  },
  {
    "label": "StopCapture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopCapture()"
  },
  {
    "label": "IProfilerServiceManager()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "IProfilerServiceManager()"
  }
]