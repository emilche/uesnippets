[
  {
    "label": "TIntegerSequence",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIntegerSequence"
  },
  {
    "label": "TMakeIntegerSequenceImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TMakeIntegerSequenceImpl"
  },
  {
    "label": "TConcatImpl",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConcatImpl"
  },
  {
    "label": "__has_builtin()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" template<T,T . . . Indices> struct TIntegerSequence { } ; # ifdef _MSC_VER template<T,T N> using TMakeIntegerSequence = __make_integer_seq<TIntegerSequence,T,N> ; # elif)",
    "insertText": "__has_builtin(__make_integer_seq)"
  },
  {
    "label": "Indices1()",
    "kind": "Method",
    "detail": "Function (# else namespace UE4IntegerSequence_Private { template<T,unsigned N> struct TMakeIntegerSequenceImpl ; } template<T,T N> using TMakeIntegerSequence = UE4IntegerSequence_Private::TMakeIntegerSequenceImpl<T,N>::Type ; # if ! UE_BUILD_DOCS namespace UE4IntegerSequence_Private { template<unsigned N,T1,T2> struct TConcatImpl ; template<unsigned N,T,T . . . Indices1,T . . . Indices2> struct TConcatImpl<N,TIntegerSequence<T,Indices1 . . .>,TIntegerSequence<T,Indices2 . . .>> : TIntegerSequence<T,)",
    "insertText": "Indices1(T(N + Indices2))"
  },
  {
    "label": "T()",
    "kind": "Method",
    "detail": "Function (} ; template<unsigned N,T1,T2> using TConcat = TConcatImpl<N,T1,T2>::Type ; template<T,unsigned N> struct TMakeIntegerSequenceImpl : TConcat<N / 2,TMakeIntegerSequence<T,N / 2>,TMakeIntegerSequence<T,N - N / 2>> { using Type = TConcat<N / 2,TMakeIntegerSequence<T,N / 2>,TMakeIntegerSequence<T,N - N / 2>> ; } ; template<T> struct TMakeIntegerSequenceImpl<T,1> : TIntegerSequence<T,)",
    "insertText": "T(0)"
  }
]