[
  {
    "label": "FAsyncReallocationRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncReallocationRequest"
  },
  {
    "label": "FScopedGPUDefragLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedGPUDefragLock"
  },
  {
    "label": "FAsyncReallocationRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncReallocationRequest"
  },
  {
    "label": "FScopedGPUDefragLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedGPUDefragLock"
  },
  {
    "label": "FGPUDefragAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUDefragAllocator"
  },
  {
    "label": "FSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSettings"
  },
  {
    "label": "EMemoryElementType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemoryElementType"
  },
  {
    "label": "FMemoryLayoutElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryLayoutElement"
  },
  {
    "label": "FRelocationStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelocationStats"
  },
  {
    "label": "FMemoryChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryChunk"
  },
  {
    "label": "FRelocationEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelocationEntry"
  },
  {
    "label": "FMemProtectTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemProtectTracker"
  },
  {
    "label": "FScopedGPUDefragLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedGPUDefragLock"
  },
  {
    "label": "FAsyncReallocationRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncReallocationRequest"
  },
  {
    "label": "FGPUDefragAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUDefragAllocator"
  },
  {
    "label": "FGPUDefragAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUDefragAllocator"
  },
  {
    "label": "LinkFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkFree(FMemoryChunk* FirstFreeChunkToSearch)"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "new(size_t Size)"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "delete(void *RawMemory)"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Pointer)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(const void* Pointer)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(const void* Pointer)"
  },
  {
    "label": "SetUserPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserPayload(const void* Pointer, void* UserPayload)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetAllocatedSize(void* Pointer)"
  },
  {
    "label": "AsyncReallocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AsyncReallocate(FAsyncReallocationRequest* ReallocationRequest, bool bForceRequest)"
  },
  {
    "label": "DumpAllocs()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpAllocs(FOutputDevice& Ar = *GLog)"
  },
  {
    "label": "GetLargestAvailableAllocation()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetLargestAvailableAllocation(int32* OutNumFreeChunks = nullptr)"
  },
  {
    "label": "GetTextureMemoryVisualizeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetTextureMemoryVisualizeData(FColor* TextureData, int32 SizeX, int32 SizeY, int32 Pitch, const int32 PixelSize)"
  },
  {
    "label": "GetMemoryLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMemoryLayout(TArray<FMemoryLayoutElement>& MemoryLayout)"
  },
  {
    "label": "DefragmentMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefragmentMemory(FRelocationStats& Stats)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Tick(FRelocationStats& Stats, bool bPanicDefrag)"
  },
  {
    "label": "FinishAllRelocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishAllRelocations()"
  },
  {
    "label": "BlockOnAsyncReallocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnAsyncReallocation(FAsyncReallocationRequest* Request)"
  },
  {
    "label": "CancelAsyncReallocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAsyncReallocation(FAsyncReallocationRequest* Request, const void* CurrentBaseAddress)"
  },
  {
    "label": "Benchmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Benchmark(int32 MinChunkSize, int32 MaxChunkSize, float FreeRatio, float LockRatio, bool bFullDefrag, bool bSaveImages, const TCHAR* Filename)"
  },
  {
    "label": "ValidateRelocations()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ValidateRelocations(uint8* UsedBaseAddress, uint64 Size)"
  },
  {
    "label": "SetStaticMemoryPrivileges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetStaticMemoryPrivileges()"
  },
  {
    "label": "PlatformRelocate()",
    "kind": "Method",
    "detail": "Function (endif)",
    "insertText": "PlatformRelocate(DestAddr, Source, Size, UserPayload)"
  },
  {
    "label": "PartialDefragmentationFast()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartialDefragmentationFast(FRelocationStats& Stats, double StartTime)"
  },
  {
    "label": "PartialDefragmentationSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartialDefragmentationSlow(FRelocationStats& Stats, double StartTime)"
  },
  {
    "label": "PartialDefragmentationDownshift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartialDefragmentationDownshift(FRelocationStats& Stats, double StartTime)"
  },
  {
    "label": "FullDefragmentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FullDefragmentation(FRelocationStats& Stats)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForErrors(bool bCheckSortedFreeList)"
  },
  {
    "label": "InsertFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFence()"
  },
  {
    "label": "BlockOnFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnFence()"
  },
  {
    "label": "BlockOnSyncIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnSyncIndex(uint32 SyncIndex)"
  },
  {
    "label": "FreeChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeChunk(FMemoryChunk* Chunk)"
  },
  {
    "label": "Coalesce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coalesce(FMemoryChunk* FreedChunk)"
  },
  {
    "label": "SortFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortFreeList(int32& NumFreeChunks, int64& LargestFreeChunk)"
  },
  {
    "label": "PlatformCanRelocate()",
    "kind": "Method",
    "detail": "Function (return)",
    "insertText": "PlatformCanRelocate(Chunk->Base, Chunk->UserPayload)"
  }
]