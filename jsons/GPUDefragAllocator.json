[
  {
    "label": "FAsyncReallocationRequest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAsyncReallocationRequest"
  },
  {
    "label": "FScopedGPUDefragLock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FScopedGPUDefragLock"
  },
  {
    "label": "FGPUDefragAllocator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGPUDefragAllocator"
  },
  {
    "label": "FSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSettings"
  },
  {
    "label": "EMemoryElementType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "EMemoryElementType"
  },
  {
    "label": "FMemoryLayoutElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemoryLayoutElement"
  },
  {
    "label": "FRelocationStats",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelocationStats"
  },
  {
    "label": "FMemoryChunk",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMemoryChunk"
  },
  {
    "label": "FRelocationEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRelocationEntry"
  },
  {
    "label": "FMemProtectTracker",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMemProtectTracker"
  },
  {
    "label": "TRACK_RELOCATIONS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" HAL / ThreadSafeCounter . h \" # include \" Stats / Stats . h \" # include \" Misc / OutputDeviceRedirector . h \" # include \" HAL / IConsoleManager . h \" # include \" Containers / List . h \" # include \" HAL / LowLevelMemTracker . h \" # include \" ProfilingDebugging / MemoryTrace . h \" # define LOG_EVERY_ALLOCATION 0 # define DUMP_ALLOC_FREQUENCY 0 # define VALIDATE_SYNC_SIZE 0 # define VALIDATE_MOVES 0 # define)",
    "insertText": "TRACK_RELOCATIONS(VALIDATE_SYNC_SIZE || VALIDATE_MOVES)"
  },
  {
    "label": "FSettings()",
    "kind": "Method",
    "detail": "Function (class FScopedGPUDefragLock ; class FAsyncReallocationRequest ; class FScopedGPUDefragLock ; class FGPUDefragAllocator { public : typedef TDoubleLinkedList<FAsyncReallocationRequest*> FRequestList ; typedef TDoubleLinkedList<FAsyncReallocationRequest*>::TDoubleLinkedListNode FRequestNode ; struct FSettings {)",
    "insertText": "FSettings() : MaxDefragRelocations(128 * 1024) , MaxDefragDownShift(32 * 1024) , OverlappedBandwidthScale(1)"
  },
  {
    "label": "FMemoryLayoutElement()",
    "kind": "Method",
    "detail": "Function (} int32 MaxDefragRelocations ; int32 MaxDefragDownShift ; int32 OverlappedBandwidthScale ; } ; enum EMemoryElementType { MET_Allocated,MET_Free,MET_Locked,MET_Relocating,MET_Resizing,MET_Resized,MET_Max } ; struct FMemoryLayoutElement {)",
    "insertText": "FMemoryLayoutElement() : Size(0) , Type(MET_Allocated)"
  },
  {
    "label": "FMemoryLayoutElement()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FMemoryLayoutElement(int32 InSize, EMemoryElementType InType) : Size(InSize) , Type(InType)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} int32 Size ; EMemoryElementType Type ; FArchive&)",
    "insertText": "operator(FArchive& Ar, FMemoryLayoutElement& Element)"
  },
  {
    "label": "EMemoryElementType()",
    "kind": "Method",
    "detail": "Function (Ar<<Element . Size ; uint32 ElementType = Element . Type ; Ar<<ElementType ; Element . Type =)",
    "insertText": "EMemoryElementType(ElementType)"
  },
  {
    "label": "FMemoryChunk()",
    "kind": "Method",
    "detail": "Function (} int64 NumBytesRelocated ; int64 NumBytesDownShifted ; int64 LargestHoleSize ; int32 NumRelocations ; int32 NumHoles ; int32 NumLockedChunks ; } ; class FMemoryChunk { public :)",
    "insertText": "FMemoryChunk(uint8* InBase, int64 InSize, FGPUDefragAllocator& InBestFitAllocator, FMemoryChunk*& ChunkToInsertAfter, TStatId InStat) : Base(InBase) , Size(InSize) , OrigSize(0) , bIsAvailable(false) , LockCount(0) , DefragCounter(0) , BestFitAllocator(InBestFitAllocator) , SyncIndex(0) , SyncSize(0) , UserPayload(0) , Stat(InStat) , bTail(false)"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Link(ChunkToInsertAfter)"
  },
  {
    "label": "LinkFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkFree(ChunkToInsertAfter)"
  },
  {
    "label": "FMemoryChunk()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FMemoryChunk()"
  },
  {
    "label": "Unlink()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlink()"
  },
  {
    "label": "UnlinkFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnlinkFree()"
  },
  {
    "label": "IsLocked()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsLocked()"
  },
  {
    "label": "Link()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Link(FMemoryChunk*& ChunkToInsertAfter)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (NextChunk = ChunkToInsertAfter -> NextChunk ; PreviousChunk = ChunkToInsertAfter ; ChunkToInsertAfter -> NextChunk = this ;)",
    "insertText": "if(NextChunk)"
  },
  {
    "label": "LinkFree()",
    "kind": "Method",
    "detail": "Function (NextChunk -> PreviousChunk = this ; } else { BestFitAllocator . LastChunk = this ; } } else { PreviousChunk = nullptr ; NextChunk = nullptr ; ChunkToInsertAfter = this ; BestFitAllocator . LastChunk = this ; } } void)",
    "insertText": "LinkFree(FMemoryChunk* FirstFreeChunkToSearch)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bIsAvailable = false ;)",
    "insertText": "if(PreviousFreeChunk)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (PreviousFreeChunk -> NextFreeChunk = NextFreeChunk ; } else { BestFitAllocator . FirstFreeChunk = NextFreeChunk ; })",
    "insertText": "if(NextFreeChunk)"
  },
  {
    "label": "IsRelocating()",
    "kind": "Method",
    "detail": "Function (NextFreeChunk -> PreviousFreeChunk = PreviousFreeChunk ; } PreviousFreeChunk = nullptr ; NextFreeChunk = nullptr ; } bool)",
    "insertText": "IsRelocating()"
  },
  {
    "label": "GetFinalSize()",
    "kind": "Method",
    "detail": "Function (} else { return 0 ; } } int64)",
    "insertText": "GetFinalSize()"
  },
  {
    "label": "SetSyncIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSyncIndex(uint32 InSyncIndex, int64 InSyncSize)"
  },
  {
    "label": "GetSyncIndex()",
    "kind": "Method",
    "detail": "Function (SyncIndex = InSyncIndex ; SyncSize = InSyncSize ; } uint32)",
    "insertText": "GetSyncIndex()"
  },
  {
    "label": "delete()",
    "kind": "Method",
    "detail": "Function (void operator)",
    "insertText": "delete(void *RawMemory)"
  },
  {
    "label": "FGPUDefragAllocator()",
    "kind": "Method",
    "detail": "Function (# endif uint8* Base ; int64 Size ; int64 OrigSize ; bool bIsAvailable ; int32 LockCount ; uint16 DefragCounter ; FGPUDefragAllocator& BestFitAllocator ; FMemoryChunk* PreviousChunk ; FMemoryChunk* NextChunk ; FMemoryChunk* PreviousFreeChunk ; FMemoryChunk* NextFreeChunk ; uint32 SyncIndex ; int64 SyncSize ; void* UserPayload ; TStatId Stat ; bool bTail ; } ;)",
    "insertText": "FGPUDefragAllocator() : MemorySize(0) , MemoryBase(nullptr) , AllocationAlignment(0) , FirstChunk(nullptr) , LastChunk(nullptr) , FirstFreeChunk(nullptr) , TimeSpentInAllocator(0.0) , PaddingWasteSize(0) , AllocatedMemorySize(0) , AvailableMemorySize(0) , PendingMemoryAdjustment(0) , CurrentSyncIndex(1) , CompletedSyncIndex(0) , NumRelocationsInProgress(0) , PlatformSyncFence(0) , CurrentLargestHole(0) , CurrentNumHoles(0) , TotalNumRelocations(0) , TotalNumBytesRelocated(0) , MinLargestHole(MAX_int64) , MaxNumHoles(0) , NumFinishedAsyncReallocations(0) , NumFinishedAsyncAllocations(0) , NumCanceledAsyncRequests(0) , BlockedCycles(0) , NumLockedChunks(0) , bBenchmarkMode(false)"
  },
  {
    "label": "FGPUDefragAllocator()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FGPUDefragAllocator()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Initialize(uint8* InMemoryBase, int64 InMemorySize, int32 InAllocationAlignment)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (MemoryBase = InMemoryBase ; MemorySize = InMemorySize ; AllocationAlignment = InAllocationAlignment ;)",
    "insertText": "check(Align(MemoryBase, AllocationAlignment) == MemoryBase)"
  },
  {
    "label": "InterlockedExchange()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InterlockedExchange(&AvailableMemorySize, MemorySize)"
  },
  {
    "label": "FMemoryChunk()",
    "kind": "Method",
    "detail": "Function (FirstChunk = new)",
    "insertText": "FMemoryChunk(MemoryBase, MemorySize, *this, FirstChunk, TStatId())"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (LastChunk = FirstChunk ; } void)",
    "insertText": "Initialize(uint8* InMemoryBase, int64 InMemorySize)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(InMemoryBase, InMemorySize, 64)"
  },
  {
    "label": "GetSettings()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "GetSettings(FSettings& OutSettings)"
  },
  {
    "label": "SetSettings()",
    "kind": "Method",
    "detail": "Function (OutSettings = Settings ; } void)",
    "insertText": "SetSettings(const FSettings& InSettings)"
  },
  {
    "label": "IsInitialized()",
    "kind": "Method",
    "detail": "Function (Settings = InSettings ; } bool)",
    "insertText": "IsInitialized()"
  },
  {
    "label": "Free()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Free(void* Pointer)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Lock(const void* Pointer)"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Unlock(const void* Pointer)"
  },
  {
    "label": "SetUserPayload()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUserPayload(const void* Pointer, void* UserPayload)"
  },
  {
    "label": "GetUserPayload()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "GetUserPayload(const void* Pointer)"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (int64)",
    "insertText": "GetAllocatedSize(void* Pointer)"
  },
  {
    "label": "Reallocate()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "Reallocate(void* OldBaseAddress, int64 NewSize)"
  },
  {
    "label": "IsValidPoolMemory()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidPoolMemory(const void* Pointer)"
  },
  {
    "label": "AsyncReallocate()",
    "kind": "Method",
    "detail": "Function (} # if 0 bool)",
    "insertText": "AsyncReallocate(FAsyncReallocationRequest* ReallocationRequest, bool bForceRequest)"
  },
  {
    "label": "DumpAllocs()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "DumpAllocs(FOutputDevice& Ar = *GLog)"
  },
  {
    "label": "GetMemoryStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMemoryStats(int64& OutAllocatedMemorySize, int64& OutAvailableMemorySize, int64& OutPendingMemoryAdjustment, int64& OutPaddingWasteSize)"
  },
  {
    "label": "GetTotalSize()",
    "kind": "Method",
    "detail": "Function (OutAllocatedMemorySize = AllocatedMemorySize ; OutAvailableMemorySize = AvailableMemorySize ; OutPendingMemoryAdjustment = PendingMemoryAdjustment ; OutPaddingWasteSize = PaddingWasteSize ; } int64)",
    "insertText": "GetTotalSize()"
  },
  {
    "label": "GetBlockedCycles()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetBlockedCycles()"
  },
  {
    "label": "GetMemoryLayout()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetMemoryLayout(TArray<FMemoryLayoutElement>& MemoryLayout)"
  },
  {
    "label": "GetChunkType()",
    "kind": "Method",
    "detail": "Function (EMemoryElementType)",
    "insertText": "GetChunkType(FMemoryChunk* Chunk)"
  },
  {
    "label": "DefragmentMemory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefragmentMemory(FRelocationStats& Stats)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "Tick(FRelocationStats& Stats, bool bPanicDefrag)"
  },
  {
    "label": "FinishAllRelocations()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FinishAllRelocations()"
  },
  {
    "label": "BlockOnAsyncReallocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnAsyncReallocation(FAsyncReallocationRequest* Request)"
  },
  {
    "label": "CancelAsyncReallocation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAsyncReallocation(FAsyncReallocationRequest* Request, const void* CurrentBaseAddress)"
  },
  {
    "label": "Benchmark()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Benchmark(int32 MinChunkSize, int32 MaxChunkSize, float FreeRatio, float LockRatio, bool bFullDefrag, bool bSaveImages, const TCHAR* Filename)"
  },
  {
    "label": "IsAligned()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAligned(const volatile void* Ptr, const uint32 Alignment)"
  },
  {
    "label": "GetAllocationAlignment()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetAllocationAlignment()"
  },
  {
    "label": "ValidateRelocations()",
    "kind": "Method",
    "detail": "Function (const uint8* OldBase ; const uint8* NewBase ; uint64 Size ; uint64 SyncIndex ; } ; void)",
    "insertText": "ValidateRelocations(uint8* UsedBaseAddress, uint64 Size)"
  },
  {
    "label": "FMemProtectTracker()",
    "kind": "Method",
    "detail": "Function (TArray<FRelocationEntry> Relocations ; # endif # if VALIDATE_MEMORY_PROTECTION struct FMemProtectTracker {)",
    "insertText": "FMemProtectTracker(const void* InMemory, const void* InUserPayload, uint64 InBlockSize, uint32 InSyncIndex) : Memory(InMemory) , UserPayload(InUserPayload) , BlockSize(InBlockSize) , SyncIndex(InSyncIndex)"
  },
  {
    "label": "SetStaticMemoryPrivileges()",
    "kind": "Method",
    "detail": "Function (} const void* Memory ; const void* UserPayload ; uint64 BlockSize ; uint32 SyncIndex ; } ; TArray<FMemProtectTracker> BlocksToProtect ; TArray<FMemProtectTracker> BlocksToUnProtect ; int32 GGPUDefragDumpRelocationsToTTY ; FAutoConsoleVariableRef CVarGPUDefragDumpRelocationsToTTY ; void)",
    "insertText": "SetStaticMemoryPrivileges()"
  },
  {
    "label": "PlatformSetNoMemoryPrivileges()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformSetNoMemoryPrivileges(const FMemProtectTracker& Block)"
  },
  {
    "label": "PlatformSetStandardMemoryPrivileges()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PlatformSetStandardMemoryPrivileges(const FMemProtectTracker& Block)"
  },
  {
    "label": "PlatformSetStaticMemoryPrivileges()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PlatformSetStaticMemoryPrivileges(const FMemProtectTracker& BlocksToAllow)"
  },
  {
    "label": "PlatformSetRelocationMemoryPrivileges()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PlatformSetRelocationMemoryPrivileges(const FMemProtectTracker& BlocksToAllow)"
  },
  {
    "label": "PlatformSetRelocationMemoryPrivileges()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "PlatformSetRelocationMemoryPrivileges(const TArray<FMemProtectTracker>& BlocksToRemove)"
  },
  {
    "label": "PlatformRelocate()",
    "kind": "Method",
    "detail": "Function (} ; # endif void)",
    "insertText": "PlatformRelocate(void* Dest, const void* Source, int64 Size, void* UserPayload)"
  },
  {
    "label": "PlatformInsertFence()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "PlatformInsertFence()"
  },
  {
    "label": "PlatformBlockOnFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformBlockOnFence(uint64 Fence)"
  },
  {
    "label": "PlatformCanRelocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "PlatformCanRelocate(const void* Source, void* UserPayload)"
  },
  {
    "label": "PlatformNotifyReallocationFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlatformNotifyReallocationFinished(FAsyncReallocationRequest* FinishedRequest, void* UserPayload)"
  },
  {
    "label": "Relocate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Relocate(FRelocationStats& Stats, FMemoryChunk* Dest, int64 DestOffset, const void* Source, int64 Size, void* UserPayload)"
  },
  {
    "label": "MemoryTrace_ReallocFree()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_ReallocFree((uint64)Source)"
  },
  {
    "label": "MemoryTrace_ReallocAlloc()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MemoryTrace_ReallocAlloc((uint64)Dest->Base, Size, 4)"
  },
  {
    "label": "LLM_IF_ENABLED()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LLM_IF_ENABLED(FLowLevelMemTracker::Get().OnLowLevelAllocMoved(ELLMTracker::Default, Dest->Base, Source))"
  },
  {
    "label": "MemDistance()",
    "kind": "Method",
    "detail": "Function (uint8* DestAddr = Dest -> Base + DestOffset ; int64)",
    "insertText": "MemDistance(int64)(DestAddr) - (int64)(Source)"
  },
  {
    "label": "Abs()",
    "kind": "Method",
    "detail": "Function (int64 AbsDistance =)",
    "insertText": "Abs(MemDistance)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool bOverlappedMove = AbsDistance<Size ;)",
    "insertText": "if(!bBenchmarkMode)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (# if VALIDATE_MEMORY_PROTECTION BlocksToProtect .)",
    "insertText": "Emplace(DestAddr, UserPayload, Size, CurrentSyncIndex)"
  },
  {
    "label": "Emplace()",
    "kind": "Method",
    "detail": "Function (BlocksToProtect .)",
    "insertText": "Emplace(Source, UserPayload, Size, CurrentSyncIndex)"
  },
  {
    "label": "PlatformRelocate()",
    "kind": "Method",
    "detail": "Function (# endif)",
    "insertText": "PlatformRelocate(DestAddr, Source, Size, UserPayload)"
  },
  {
    "label": "bOverlappedMove()",
    "kind": "Method",
    "detail": "Function (} int64 RelocateSize =)",
    "insertText": "bOverlappedMove(Size * Settings.MaxDefragRelocations)"
  },
  {
    "label": "GetCurrentSyncIndex()",
    "kind": "Method",
    "detail": "Function (Dest -> UserPayload = UserPayload ; Stats . NumBytesRelocated + = RelocateSize ; Stats . NumRelocations + + ; } uint32)",
    "insertText": "GetCurrentSyncIndex()"
  },
  {
    "label": "PartialDefragmentationSlow()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartialDefragmentationSlow(FRelocationStats& Stats, double StartTime)"
  },
  {
    "label": "PartialDefragmentationDownshift()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PartialDefragmentationDownshift(FRelocationStats& Stats, double StartTime)"
  },
  {
    "label": "FullDefragmentation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FullDefragmentation(FRelocationStats& Stats)"
  },
  {
    "label": "Grow()",
    "kind": "Method",
    "detail": "Function (FMemoryChunk*)",
    "insertText": "Grow(FMemoryChunk* Chunk, int64 GrowAmount)"
  },
  {
    "label": "Shrink()",
    "kind": "Method",
    "detail": "Function (FMemoryChunk*)",
    "insertText": "Shrink(FMemoryChunk* Chunk, int64 ShrinkAmount)"
  },
  {
    "label": "CheckForErrors()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CheckForErrors(bool bCheckSortedFreeList)"
  },
  {
    "label": "CanRelocate()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanRelocate(const FMemoryChunk* Chunk)"
  },
  {
    "label": "InsertFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InsertFence()"
  },
  {
    "label": "BlockOnFence()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnFence()"
  },
  {
    "label": "BlockOnSyncIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnSyncIndex(uint32 SyncIndex)"
  },
  {
    "label": "Split()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Split(FMemoryChunk* BaseChunk, int64 FirstSize)"
  },
  {
    "label": "FMemoryChunk()",
    "kind": "Method",
    "detail": "Function (int64 SecondSize = BaseChunk -> Size - FirstSize ; FMemoryChunk* NewFreeChunk = new)",
    "insertText": "FMemoryChunk(BaseChunk->Base + FirstSize, SecondSize, *this, BaseChunk, TStatId())"
  },
  {
    "label": "SetSyncIndex()",
    "kind": "Method",
    "detail": "Function (int64 SecondSyncSize = BaseChunk -> SyncSize - FirstSize ; NewFreeChunk ->)",
    "insertText": "SetSyncIndex(BaseChunk->SyncIndex, SecondSyncSize)"
  },
  {
    "label": "SetSyncIndex()",
    "kind": "Method",
    "detail": "Function (} BaseChunk ->)",
    "insertText": "SetSyncIndex(BaseChunk->SyncIndex, FMath::Min((int64)FirstSize, BaseChunk->SyncSize))"
  },
  {
    "label": "AllocateChunk()",
    "kind": "Method",
    "detail": "Function (BaseChunk -> Size = FirstSize ; } FMemoryChunk*)",
    "insertText": "AllocateChunk(FMemoryChunk* FreeChunk, int64 AllocationSize, bool bAsync, bool bDoValidation = true)"
  },
  {
    "label": "FreeChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FreeChunk(FMemoryChunk* Chunk)"
  },
  {
    "label": "LinkFreeChunk()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "LinkFreeChunk(FMemoryChunk* Chunk)"
  },
  {
    "label": "LinkFree()",
    "kind": "Method",
    "detail": "Function (Chunk ->)",
    "insertText": "LinkFree(nullptr)"
  },
  {
    "label": "Coalesce()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Coalesce(Chunk)"
  },
  {
    "label": "Coalesce()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Coalesce(FMemoryChunk* FreedChunk)"
  },
  {
    "label": "SortFreeList()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortFreeList(int32& NumFreeChunks, int64& LargestFreeChunk)"
  },
  {
    "label": "FindAdjacent()",
    "kind": "Method",
    "detail": "Function (FMemoryChunk*)",
    "insertText": "FindAdjacent(FMemoryChunk* UsedChunk, bool bAnyChunkType)"
  },
  {
    "label": "FindAdjacentToHole()",
    "kind": "Method",
    "detail": "Function (FMemoryChunk*)",
    "insertText": "FindAdjacentToHole(FMemoryChunk* FreeChunk)"
  },
  {
    "label": "FindAny()",
    "kind": "Method",
    "detail": "Function (FMemoryChunk*)",
    "insertText": "FindAny(FMemoryChunk* FreeChunk)"
  },
  {
    "label": "RelocateIntoFreeChunk()",
    "kind": "Method",
    "detail": "Function (FMemoryChunk*)",
    "insertText": "RelocateIntoFreeChunk(FRelocationStats& Stats, FMemoryChunk* FreeChunk, FMemoryChunk* UsedChunk)"
  },
  {
    "label": "RelocateAllowed()",
    "kind": "Method",
    "detail": "Function (FMemoryChunk*)",
    "insertText": "RelocateAllowed(FMemoryChunk* FreeChunk, FMemoryChunk* UsedChunk)"
  },
  {
    "label": "FScopedGPUDefragLock()",
    "kind": "Method",
    "detail": "Function (FCriticalSection SynchronizationObject ; uint64 MemorySize ; uint8* MemoryBase ; int32 AllocationAlignment ; FMemoryChunk* FirstChunk ; FMemoryChunk* LastChunk ; FMemoryChunk* FirstFreeChunk ; double TimeSpentInAllocator ; typedef int64 memsize_t ; volatile memsize_t PaddingWasteSize ; volatile memsize_t AllocatedMemorySize ; volatile memsize_t AvailableMemorySize ; volatile memsize_t PendingMemoryAdjustment ; TMap<void*,FMemoryChunk*> PointerToChunkMap ; FSettings Settings ; uint64 CurrentSyncIndex ; uint64 CompletedSyncIndex ; int32 NumRelocationsInProgress ; uint64 PlatformSyncFence ; TDoubleLinkedList<FMemoryChunk*> PendingFreeChunks ; uint64 CurrentLargestHole ; int32 CurrentNumHoles ; uint64 TotalNumRelocations ; uint64 TotalNumBytesRelocated ; int64 MinLargestHole ; int32 MaxNumHoles ; int32 NumFinishedAsyncReallocations ; int32 NumFinishedAsyncAllocations ; int32 NumCanceledAsyncRequests ; uint32 BlockedCycles ; int32 NumLockedChunks ; # if VALIDATE_MEMORY_PROTECTION double TimeInMemProtect ; # endif bool bBenchmarkMode ; FScopedGPUDefragLock ; } ; class FScopedGPUDefragLock { public :)",
    "insertText": "FScopedGPUDefragLock(FGPUDefragAllocator& InDefragAllocator) : DefragAllocator(InDefragAllocator)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function (DefragAllocator . SynchronizationObject .)",
    "insertText": "Lock()"
  },
  {
    "label": "FScopedGPUDefragLock()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FScopedGPUDefragLock()"
  },
  {
    "label": "Unlock()",
    "kind": "Method",
    "detail": "Function (DefragAllocator . SynchronizationObject .)",
    "insertText": "Unlock()"
  },
  {
    "label": "FAsyncReallocationRequest()",
    "kind": "Method",
    "detail": "Function (} private : FGPUDefragAllocator& DefragAllocator ; } ; class FAsyncReallocationRequest { public :)",
    "insertText": "FAsyncReallocationRequest(void* InCurrentBaseAddress, int32 InNewSize, FThreadSafeCounter* InRequestStatus) : OldAddress(InCurrentBaseAddress) , NewAddress(nullptr) , OldSize(0) , NewSize(InNewSize) , int32ernalRequestStatus(1) , ExternalRequestStatus(InRequestStatus) , bIsCanceled(false) , MemoryChunk(nullptr)"
  },
  {
    "label": "FAsyncReallocationRequest()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FAsyncReallocationRequest()"
  },
  {
    "label": "IsAllocation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsAllocation()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bool bHasCompleted = int32ernalRequestStatus .)",
    "insertText": "GetValue()"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(this, &Other, sizeof(FAsyncReallocationRequest))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "operator(const FAsyncReallocationRequest& Other)"
  },
  {
    "label": "MarkCompleted()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "MarkCompleted()"
  },
  {
    "label": "Decrement()",
    "kind": "Method",
    "detail": "Function (int32ernalRequestStatus .)",
    "insertText": "Decrement()"
  },
  {
    "label": "BlockOnSyncIndex()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockOnSyncIndex(Request->MemoryChunk->SyncIndex)"
  }
]