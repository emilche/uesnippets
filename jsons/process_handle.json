[
  {
    "label": "FilePath",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FilePath"
  },
  {
    "label": "UniqueProcId",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UniqueProcId"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_PROCESS_PROCESS_HANDLE_H_ # define BASE_PROCESS_PROCESS_HANDLE_H_ # include<stdint . h> # include<sys / types . h> # include<iosfwd> # include \" base / base_export . h \" # include \" build / build_config . h \" # if)",
    "insertText": "BUILDFLAG(IS_WIN) #include \"base/win/windows_types.h\" #endif #if BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (class FilePath ; # if)",
    "insertText": "BUILDFLAG(IS_WIN)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (typedef DWORD ProcessId ; typedef HANDLE UserTokenHandle ; const ProcessHandle kNullProcessHandle = NULL ; const ProcessId kNullProcessId = 0 ; # elif)",
    "insertText": "BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (typedef zx_koid_t ProcessId ; const ProcessHandle kNullProcessHandle = ZX_HANDLE_INVALID ; const ProcessId kNullProcessId = ZX_KOID_INVALID ; # elif)",
    "insertText": "BUILDFLAG(IS_POSIX)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (typedef pid_t ProcessId ; const ProcessHandle kNullProcessHandle = 0 ; const ProcessId kNullProcessId = 0 ; # endif # if)",
    "insertText": "BUILDFLAG(IS_WIN) || BUILDFLAG(IS_FUCHSIA)"
  },
  {
    "label": "UniqueProcId()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "UniqueProcId(ProcessId value) : value_(value)"
  },
  {
    "label": "UniqueProcId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "UniqueProcId(const UniqueProcId& other)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (UniqueProcId&)",
    "insertText": "operator(const UniqueProcId& other)"
  },
  {
    "label": "GetUnsafeValue()",
    "kind": "Method",
    "detail": "Function (ProcessId)",
    "insertText": "GetUnsafeValue()"
  },
  {
    "label": "GetCurrentProcId()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT ProcessId)",
    "insertText": "GetCurrentProcId()"
  },
  {
    "label": "GetUniqueIdForProcess()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT UniqueProcId)",
    "insertText": "GetUniqueIdForProcess()"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if)",
    "insertText": "BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS) BASE_EXPORT void InitUniqueIdForProcessInPidNamespace( ProcessId pid_outside_of_namespace)"
  },
  {
    "label": "GetCurrentProcessHandle()",
    "kind": "Method",
    "detail": "Function (# endif BASE_EXPORT ProcessHandle)",
    "insertText": "GetCurrentProcessHandle()"
  },
  {
    "label": "GetProcId()",
    "kind": "Method",
    "detail": "Function (BASE_EXPORT ProcessId)",
    "insertText": "GetProcId(ProcessHandle process)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# if !)",
    "insertText": "BUILDFLAG(IS_FUCHSIA) BASE_EXPORT ProcessId GetParentProcessId(ProcessHandle process)"
  },
  {
    "label": "BUILDFLAG()",
    "kind": "Method",
    "detail": "Function (# endif # if)",
    "insertText": "BUILDFLAG(IS_POSIX) BASE_EXPORT FilePath GetProcessExecutablePath(ProcessHandle process)"
  }
]