[
  {
    "label": "FCbWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCbWriter"
  },
  {
    "label": "FOutputDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOutputDevice"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "FPrimaryAssetType",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetType"
  },
  {
    "label": "FPropertyTag",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPropertyTag"
  },
  {
    "label": "Z_Construct_UScriptStruct_FPrimaryAssetType_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FPrimaryAssetType_Statics"
  },
  {
    "label": "FPrimaryAssetId",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPrimaryAssetId"
  },
  {
    "label": "Z_Construct_UScriptStruct_FPrimaryAssetId_Statics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "Z_Construct_UScriptStruct_FPrimaryAssetId_Statics"
  },
  {
    "label": "FPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / StringFwd . h \" # include \" Containers / UnrealString . h \" # include \" HAL / Platform . h \" # include \" Misc / StringBuilder . h \" # include \" Serialization / Archive . h \" # include \" Serialization / StructuredArchive . h \" # include \" Templates / TypeHash . h \" # include \" UObject / NameTypes . h \" # include \" UObject / UnrealNames . h \" class FCbWriter ; class FOutputDevice ; class UObject ; struct FPrimaryAssetType {)",
    "insertText": "FPrimaryAssetType()"
  },
  {
    "label": "FPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimaryAssetType(FName InName) : Name(InName)"
  },
  {
    "label": "FPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetType(EName InName) : Name(FName(InName))"
  },
  {
    "label": "FPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetType(const WIDECHAR* InName) : Name(FName(InName))"
  },
  {
    "label": "FPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetType(const ANSICHAR* InName) : Name(FName(InName))"
  },
  {
    "label": "FPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetType(const FPrimaryAssetType&)"
  },
  {
    "label": "FPrimaryAssetType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimaryAssetType(FPrimaryAssetType&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetType&)",
    "insertText": "operator(const FPrimaryAssetType&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetType&)",
    "insertText": "operator(FPrimaryAssetType&&)"
  },
  {
    "label": "FName()",
    "kind": "Method",
    "detail": "Function (operator)",
    "insertText": "FName()"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "AppendString(FStringBuilderBase& Builder)"
  },
  {
    "label": "AppendString()",
    "kind": "Method",
    "detail": "Function (Name .)",
    "insertText": "AppendString(Builder)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FPrimaryAssetType const& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "ImportTextItem()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ImportTextItem(const TCHAR*& Buffer, int32 PortFlags, UObject* Parent, FOutputDevice* ErrorText)"
  },
  {
    "label": "SerializeFromMismatchedTag()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SerializeFromMismatchedTag(struct FPropertyTag const& Tag, FStructuredArchive::FSlot Slot)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FPrimaryAssetType& Key)"
  },
  {
    "label": "LexicalLess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "LexicalLess(const FPrimaryAssetType& Other)"
  },
  {
    "label": "FastLess()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "FastLess(const FPrimaryAssetType& Other)"
  },
  {
    "label": "FPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (} private : struct Z_Construct_UScriptStruct_FPrimaryAssetType_Statics ; FName Name ; } ; struct FPrimaryAssetId { FPrimaryAssetType PrimaryAssetType ; FName PrimaryAssetName ; const FName PrimaryAssetTypeTag ; const FName PrimaryAssetNameTag ; const FName PrimaryAssetDisplayNameTag ;)",
    "insertText": "FPrimaryAssetId()"
  },
  {
    "label": "FPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimaryAssetId(FPrimaryAssetType InAssetType, FName InAssetName) : PrimaryAssetType(InAssetType), PrimaryAssetName(InAssetName)"
  },
  {
    "label": "ParseTypeAndName()",
    "kind": "Method",
    "detail": "Function (} FPrimaryAssetId)",
    "insertText": "ParseTypeAndName(const TCHAR* TypeAndName, uint32 Len)"
  },
  {
    "label": "ParseTypeAndName()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "ParseTypeAndName(FName TypeAndName)"
  },
  {
    "label": "ParseTypeAndName()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId)",
    "insertText": "ParseTypeAndName(const FString& TypeAndName)"
  },
  {
    "label": "FPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetId(const FString& TypeAndName) : FPrimaryAssetId(ParseTypeAndName(TypeAndName))"
  },
  {
    "label": "FPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPrimaryAssetId(const FPrimaryAssetId&)"
  },
  {
    "label": "FPrimaryAssetId()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPrimaryAssetId(FPrimaryAssetId&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId&)",
    "insertText": "operator(const FPrimaryAssetId&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPrimaryAssetId&)",
    "insertText": "operator(FPrimaryAssetId&&)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "TEXT()",
    "kind": "Method",
    "detail": "Function (Builder<<)",
    "insertText": "TEXT(\":\")"
  },
  {
    "label": "FromString()",
    "kind": "Method",
    "detail": "Function (} } FPrimaryAssetId)",
    "insertText": "FromString(const FString& String)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FPrimaryAssetId& Other)"
  },
  {
    "label": "ExportTextItem()",
    "kind": "Method",
    "detail": "Function (Ar<<Other . PrimaryAssetType ; Ar<<Other . PrimaryAssetName ; return Ar ; } bool)",
    "insertText": "ExportTextItem(FString& ValueStr, FPrimaryAssetId const& DefaultValue, UObject* Parent, int32 PortFlags, UObject* ExportRootScope)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FPrimaryAssetId& Key)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.PrimaryAssetType))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.PrimaryAssetName))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ; FStringBuilderBase&)",
    "insertText": "operator(FStringBuilderBase& Builder, const FPrimaryAssetId& Id)"
  }
]