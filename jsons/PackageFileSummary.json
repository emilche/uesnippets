[
  {
    "label": "FArchive",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FArchive"
  },
  {
    "label": "FCompressedChunk",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCompressedChunk"
  },
  {
    "label": "FGenerationInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGenerationInfo"
  },
  {
    "label": "FPackageFileSummary",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPackageFileSummary"
  },
  {
    "label": "FGenerationInfo()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" CoreMinimal . h \" # include \" CoreTypes . h \" # include \" Misc / EngineVersion . h \" # include \" Misc / Guid . h \" # include \" Serialization / CustomVersion . h \" # include \" Serialization / StructuredArchive . h \" # include \" UObject / ObjectVersion . h \" # if WITH_EDITORONLY_DATA # include \" IO / IoHash . h \" # endif class FArchive ; struct FCompressedChunk ; struct FGenerationInfo { int32 ExportCount ; int32 NameCount ;)",
    "insertText": "FGenerationInfo(int32 InExportCount, int32 InNameCount)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar, const struct FPackageFileSummary& Summary)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FStructuredArchive::FSlot Slot, const struct FPackageFileSummary& Summary)"
  },
  {
    "label": "FPackageFileSummary()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FGuid PersistentGuid ; # endif TArray<FGenerationInfo> Generations ; FEngineVersion SavedByEngineVersion ; FEngineVersion CompatibleWithEngineVersion ; uint32 CompressionFlags ; uint32 PackageSource ; bool bUnversioned ; int32 AssetRegistryDataOffset ; int64 BulkDataStartOffset ; int32 WorldTileInfoDataOffset ; TArray<int32> ChunkIDs ; int32 PreloadDependencyCount ; int32 PreloadDependencyOffset ; int32 NamesReferencedFromExportDataCount ; int64 PayloadTocOffset ; int32 DataResourceOffset ;)",
    "insertText": "FPackageFileSummary()"
  },
  {
    "label": "FPackageFileSummary()",
    "kind": "Method",
    "detail": "Function (PRAGMA_DISABLE_DEPRECATION_WARNINGS)",
    "insertText": "FPackageFileSummary(FPackageFileSummary&&)"
  },
  {
    "label": "FPackageFileSummary()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FPackageFileSummary(const FPackageFileSummary&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageFileSummary&)",
    "insertText": "operator(FPackageFileSummary&&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FPackageFileSummary&)",
    "insertText": "operator(const FPackageFileSummary&)"
  },
  {
    "label": "GetFileVersionUE()",
    "kind": "Method",
    "detail": "Function (PRAGMA_ENABLE_DEPRECATION_WARNINGS FPackageFileVersion)",
    "insertText": "GetFileVersionUE()"
  },
  {
    "label": "GetCustomVersionContainer()",
    "kind": "Method",
    "detail": "Function (} const FCustomVersionContainer&)",
    "insertText": "GetCustomVersionContainer()"
  },
  {
    "label": "SetFileVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileVersions(const int32 EpicUE4, const int32 EpicUE5, const int32 LicenseeUE, const bool bInSaveUnversioned = false)"
  },
  {
    "label": "SetFileVersions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFileVersions(EpicUE, GPackageFileUEVersion.FileVersionUE5, LicenseeUE, bInSaveUnversioned)"
  },
  {
    "label": "SetToLatestFileVersions()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetToLatestFileVersions(const bool bInSaveUnversioned)"
  },
  {
    "label": "IsFileVersionTooOld()",
    "kind": "Method",
    "detail": "Function (FileVersionUE = GPackageFileUEVersion ; FileVersionLicenseeUE = GPackageFileLicenseeUEVersion ; bUnversioned = bInSaveUnversioned ; } bool)",
    "insertText": "IsFileVersionTooOld()"
  },
  {
    "label": "GetPackageFlags()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetPackageFlags()"
  },
  {
    "label": "GetSavedHash()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA FIoHash)",
    "insertText": "GetSavedHash()"
  },
  {
    "label": "SetSavedHash()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSavedHash(const FIoHash& InSavedHash)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (# endif FArchive&)",
    "insertText": "operator(FArchive& Ar, FPackageFileSummary& Sum)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "operator(FStructuredArchive::FSlot Slot, FPackageFileSummary& Sum)"
  },
  {
    "label": "InvalidateFileVersion()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "InvalidateFileVersion()"
  },
  {
    "label": "CreateUE4Version()",
    "kind": "Method",
    "detail": "Function (FileVersionUE =)",
    "insertText": "CreateUE4Version((EUnrealEngineObjectUE4Version)(VER_UE4_OLDEST_LOADABLE_PACKAGE - 1))"
  }
]