[
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FGroup",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FGroup"
  },
  {
    "label": "FGroup()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Core / CADEntity . h \" # include \" Core / CADKernelArchive . h \" namespace UE::CADKernel { enum class EGroupOrigin : uint8 { Unknown,CADGroup,CADLayer,CADColor } ; const TCHAR* GroupOriginNames [ ] ; class FGroup : public FEntity { FEntity ; protected : EGroupOrigin Origin ; FString GroupName ; TArray<TSharedPtr<FEntity>> Entities ;)",
    "insertText": "FGroup() : Origin(EGroupOrigin::Unknown)"
  },
  {
    "label": "FGroup()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGroup(TArray<TSharedPtr<FEntity>>& InEntities) : Origin(EGroupOrigin::Unknown)"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (Entities .)",
    "insertText": "Append(InEntities)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (} public : void)",
    "insertText": "Serialize(FCADKernelArchive& Ar)"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(Ar)"
  },
  {
    "label": "SerializeIdents()",
    "kind": "Method",
    "detail": "Function (Ar<<Origin ; Ar<<GroupName ;)",
    "insertText": "SerializeIdents(Ar, (TArray<TSharedPtr<FEntity>>&) Entities)"
  },
  {
    "label": "SpawnIdent()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SpawnIdent(FDatabase& Database)"
  },
  {
    "label": "ResetMarkersRecursively()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetMarkersRecursively()"
  },
  {
    "label": "ResetMarkers()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkers()"
  },
  {
    "label": "ResetMarkersRecursivelyOnEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ResetMarkersRecursivelyOnEntities(Entities)"
  },
  {
    "label": "GetInfo()",
    "kind": "Method",
    "detail": "Function (} # ifdef CADKERNEL_DEV FInfoEntity&)",
    "insertText": "GetInfo(FInfoEntity&)"
  },
  {
    "label": "GetEntityType()",
    "kind": "Method",
    "detail": "Function (# endif EEntity)",
    "insertText": "GetEntityType()"
  },
  {
    "label": "GetName()",
    "kind": "Method",
    "detail": "Function (const FString&)",
    "insertText": "GetName()"
  },
  {
    "label": "AddUnique()",
    "kind": "Method",
    "detail": "Function (Entities .)",
    "insertText": "AddUnique(Entity)"
  },
  {
    "label": "Empty()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Empty()"
  },
  {
    "label": "RemoveEntity()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "RemoveEntity(TSharedPtr<FEntity> Entity)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (Entities .)",
    "insertText": "Remove(Entity)"
  },
  {
    "label": "Contains()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Contains(TSharedPtr<FEntity> Entity)"
  },
  {
    "label": "GetOrigin()",
    "kind": "Method",
    "detail": "Function (} EGroupOrigin)",
    "insertText": "GetOrigin()"
  },
  {
    "label": "GetGroupType()",
    "kind": "Method",
    "detail": "Function (Origin = InOrigin ; } EEntity)",
    "insertText": "GetGroupType()"
  },
  {
    "label": "GetValidEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetValidEntities(TArray<TSharedPtr<FEntity>>& OutEntities)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (OutEntities .)",
    "insertText": "Add(Entity)"
  },
  {
    "label": "GetEntities()",
    "kind": "Method",
    "detail": "Function (} } } const TArray<TSharedPtr<FEntity>>&)",
    "insertText": "GetEntities()"
  },
  {
    "label": "ReplaceEntitiesWithMap()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ReplaceEntitiesWithMap(const TMap<TSharedPtr<FEntity>, TSharedPtr<FEntity>>& Map)"
  },
  {
    "label": "RemoveNonTopologicalEntities()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveNonTopologicalEntities()"
  }
]