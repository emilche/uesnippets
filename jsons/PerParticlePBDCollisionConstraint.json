[
  {
    "label": "FPerParticlePBDCollisionConstraint",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FPerParticlePBDCollisionConstraint"
  },
  {
    "label": "FVelocityConstraint",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVelocityConstraint"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Chaos / Core . h \" # include \" Chaos / PBDActiveView . h \" # include \" Chaos / PBDSoftsEvolutionFwd . h \" # include \" Chaos / PBDSoftsSolverParticles . h \" # if UE_ENABLE_INCLUDE_ORDER_DEPRECATED_IN_5_4 # include \" Chaos / KinematicGeometryParticles . h \" # endif # include \" Chaos / SoftsSolverCollisionParticles . h \" # include \" Chaos / WeightedLatticeImplicitObject . h \" # include \" Chaos / Levelset . h \" # include \" HAL / PlatformMath . h \" # if !)",
    "insertText": "defined(CHAOS_PER_PARTICLE_COLLISION_ISPC_ENABLED_DEFAULT)"
  },
  {
    "label": "FPerParticlePBDCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (# else bool bChaos_PerParticleCollision_ISPC_Enabled ; # endif namespace Chaos::Softs { class FPerParticlePBDCollisionConstraint final { struct FVelocityConstraint { FSolverVec3 Velocity ; FSolverVec3 Normal ; } ; public :)",
    "insertText": "FPerParticlePBDCollisionConstraint(const TPBDActiveView<FSolverCollisionParticles>& InParticlesActiveView, TArray<bool>& Collided, TArray<uint32>& DynamicGroupIds, TArray<uint32>& KinematicGroupIds, const TArray<FSolverReal>& PerGroupThickness, const TArray<FSolverReal>& PerGroupFriction) : bFastPositionBasedFriction(true) , MCollisionParticlesActiveView(InParticlesActiveView) , MCollided(Collided), MDynamicGroupIds(DynamicGroupIds) , MKinematicGroupIds(KinematicGroupIds), MPerGroupThickness(PerGroupThickness) , MPerGroupFriction(PerGroupFriction)"
  },
  {
    "label": "FPerParticlePBDCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FPerParticlePBDCollisionConstraint(const TPBDActiveView<FSolverCollisionParticles>& InParticlesActiveView, TArray<bool>& Collided, TArray<FSolverVec3>& InContacts, TArray<FSolverVec3>& InNormals, TArray<FSolverReal>& InPhis, TArray<uint32>& DynamicGroupIds, TArray<uint32>& KinematicGroupIds, const TArray<FSolverReal>& PerGroupThickness, const TArray<FSolverReal>& PerGroupFriction, bool bWriteCCDContacts) : bFastPositionBasedFriction(true), MCollisionParticlesActiveView(InParticlesActiveView), MCollided(Collided) , Contacts(&InContacts) , Normals(&InNormals) , Phis(&InPhis) , MDynamicGroupIds(DynamicGroupIds), MKinematicGroupIds(KinematicGroupIds), MPerGroupThickness(PerGroupThickness), MPerGroupFriction(PerGroupFriction) , Mutex(bWriteCCDContacts ? new FCriticalSection : nullptr)"
  },
  {
    "label": "FPerParticlePBDCollisionConstraint()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "FPerParticlePBDCollisionConstraint()"
  },
  {
    "label": "ApplyRange()",
    "kind": "Method",
    "detail": "Function (delete Mutex ; } void)",
    "insertText": "ApplyRange(FSolverParticles& Particles, const FSolverReal Dt, const int32 Offset, const int32 Range)"
  },
  {
    "label": "ApplyHelperISPC()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ApplyHelperISPC(Particles, Dt, Offset, Range)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "if(Mutex)"
  },
  {
    "label": "true()",
    "kind": "Method",
    "detail": "Function (ApplyHelper<)",
    "insertText": "true(Particles, Dt, Offset, Range)"
  },
  {
    "label": "false()",
    "kind": "Method",
    "detail": "Function (} else { ApplyHelper<)",
    "insertText": "false(Particles, Dt, Offset, Range)"
  },
  {
    "label": "ApplyFriction()",
    "kind": "Method",
    "detail": "Function (} } } void)",
    "insertText": "ApplyFriction(FSolverParticles& Particles, const FSolverReal Dt, const int32 Index)"
  },
  {
    "label": "DotProduct()",
    "kind": "Method",
    "detail": "Function (const FSolverReal VNBody =)",
    "insertText": "DotProduct(MVelocityConstraints[Index].Velocity, MVelocityConstraints[Index].Normal)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverVec3 VTBody = MVelocityConstraints [ Index ] . Velocity - VNBody* MVelocityConstraints [ Index ] . Normal ; const FSolverVec3 VTRelative = Particles .)",
    "insertText": "V(Index)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (const FSolverReal VTRelativeSize = VTRelative .)",
    "insertText": "Size()"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (const FSolverReal VNMax =)",
    "insertText": "Max(VN, VNBody)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (const FSolverReal VNDelta = VNMax - VN ; const FSolverReal CoefficientOfFriction = MPerGroupFriction [ MDynamicGroupIds [ Index ] ] ;)",
    "insertText": "check(CoefficientOfFriction > 0)"
  },
  {
    "label": "V()",
    "kind": "Method",
    "detail": "Function (const FSolverReal Friction = CoefficientOfFriction* VNDelta<VTRelativeSize ? CoefficientOfFriction* VNDelta / VTRelativeSize : 1 ; Particles .)",
    "insertText": "V(Index) = VNMax * MVelocityConstraints[Index].Normal + VTBody + VTRelative * (1 - Friction)"
  },
  {
    "label": "ApplyHelper()",
    "kind": "Method",
    "detail": "Function (} private : template<bool bLockAndWriteContacts> void)",
    "insertText": "ApplyHelper(FSolverParticles& Particles, const FSolverReal Dt, const int32 Offset, const int32 Range)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const uint32 DynamicGroupId = MDynamicGroupIds [ Offset ] ; const FSolverReal PerGroupFriction = MPerGroupFriction [ DynamicGroupId ] ; const FSolverReal PerGroupThickness = MPerGroupThickness [ DynamicGroupId ] ;)",
    "insertText": "if(PerGroupFriction > (FSolverReal)UE_KINDA_SMALL_NUMBER)"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PhysicsParallelFor(Range - Offset, [this, &Particles, Dt, Offset, DynamicGroupId, PerGroupFriction, PerGroupThickness](int32 i) { const int32 Index = Offset + i; if (Particles.InvM(Index) == (FSolverReal)0.) { return; } MCollisionParticlesActiveView.SequentialFor([this, &Particles, &Dt, &Index, DynamicGroupId, PerGroupFriction, PerGroupThickness](FSolverCollisionParticles& CollisionParticles, int32 i) { const uint32 KinematicGroupId = MKinematicGroupIds[i]; if ((KinematicGroupId != (uint32)INDEX_NONE && DynamicGroupId != KinematicGroupId ) || CollisionParticles.GetGeometry(i)->GetType() == Chaos::ImplicitObjectType::WeightedLatticeBone) { return; } const FSolverRigidTransform3 Frame(CollisionParticles.GetX(i), CollisionParticles.GetR(i)); const FVec3 RigidSpacePosition(Frame.InverseTransformPosition(Particles.P(Index))); FVec3 ImplicitNormal; FSolverReal Phi; int32 VelocityBone = i; FSolverReal Penetration; if (const TWeightedLatticeImplicitObject<FLevelSet>* LevelSet = CollisionParticles.GetGeometry(i)->GetObject< TWeightedLatticeImplicitObject<FLevelSet> >()) { FWeightedLatticeImplicitObject::FEmbeddingCoordinate SurfaceCoord; Phi = (FSolverReal)LevelSet->PhiWithNormalAndSurfacePoint(RigidSpacePosition, ImplicitNormal, SurfaceCoord); Penetration = PerGroupThickness - Phi; if (Penetration > (FSolverReal)0.) { const int32 StrongestBone = SurfaceCoord.GreatestInfluenceBone(LevelSet->GetBoneData()); if (StrongestBone != INDEX_NONE) { VelocityBone = LevelSet->GetSolverBoneIndices()[StrongestBone]; } } } else { Phi = (FSolverReal)CollisionParticles.GetGeometry(i)->PhiWithNormal(RigidSpacePosition, ImplicitNormal); Penetration = PerGroupThickness - Phi; } const FSolverVec3 Normal(ImplicitNormal); if (Penetration > (FSolverReal)0.) { const FSolverVec3 NormalWorld = Frame.TransformVector(Normal); if (bLockAndWriteContacts) { check(Mutex); checkSlow(Contacts); checkSlow(Normals); checkSlow(Phis); FScopeLock Lock(Mutex); Contacts->Emplace(Particles.P(Index)); Normals->Emplace(NormalWorld); Phis->Emplace(Phi); } Particles.P(Index) += Penetration * NormalWorld; if (bFastPositionBasedFriction) { FSolverVec3 VectorToPoint = Particles.GetP(Index) - CollisionParticles.GetX(VelocityBone); const FSolverVec3 RelativeDisplacement = (Particles.GetP(Index) - Particles.GetX(Index)) - (CollisionParticles.V(VelocityBone) + FSolverVec3::CrossProduct(CollisionParticles.W(VelocityBone), VectorToPoint)) * Dt; const FSolverVec3 RelativeDisplacementTangent = RelativeDisplacement - FSolverVec3::DotProduct(RelativeDisplacement, NormalWorld) * NormalWorld; const FSolverReal RelativeDisplacementTangentLength = RelativeDisplacementTangent.Size(); if (RelativeDisplacementTangentLength >= UE_SMALL_NUMBER) { const FSolverReal PositionCorrection = FMath::Min<FSolverReal>(Penetration * PerGroupFriction, RelativeDisplacementTangentLength); const FSolverReal CorrectionRatio = PositionCorrection / RelativeDisplacementTangentLength; Particles.P(Index) -= CorrectionRatio * RelativeDisplacementTangent; } } else { FVelocityConstraint Constraint; FSolverVec3 VectorToPoint = Particles.GetP(Index) - CollisionParticles.GetX(VelocityBone); Constraint.Velocity = CollisionParticles.V(VelocityBone) + FSolverVec3::CrossProduct(CollisionParticles.W(VelocityBone), VectorToPoint); Constraint.Normal = Frame.TransformVector(Normal); MVelocityConstraints.Add(Index, Constraint); } } }); })"
  },
  {
    "label": "PhysicsParallelFor()",
    "kind": "Method",
    "detail": "Function (} else {)",
    "insertText": "PhysicsParallelFor(Range - Offset, [this, &Particles, Dt, Offset, DynamicGroupId, PerGroupFriction, PerGroupThickness](int32 i) { const int32 Index = Offset + i; if (Particles.InvM(Index) == 0) { return; } MCollisionParticlesActiveView.SequentialFor([this, &Particles, &Dt, &Index, DynamicGroupId, PerGroupFriction, PerGroupThickness](FSolverCollisionParticles& CollisionParticles, int32 i) { const uint32 KinematicGroupId = MKinematicGroupIds[i]; if ((KinematicGroupId != (uint32)INDEX_NONE && DynamicGroupId != KinematicGroupId) || CollisionParticles.GetGeometry(i)->GetType() == Chaos::ImplicitObjectType::WeightedLatticeBone) { return; } const FSolverRigidTransform3 Frame(CollisionParticles.GetX(i), CollisionParticles.GetR(i)); const FVec3 RigidSpacePosition(Frame.InverseTransformPosition(Particles.P(Index))); FVec3 ImplicitNormal; const FSolverReal Phi = (FSolverReal)CollisionParticles.GetGeometry(i)->PhiWithNormal(RigidSpacePosition, ImplicitNormal); const FSolverVec3 Normal(ImplicitNormal); const FSolverReal Penetration = PerGroupThickness - Phi; if (Penetration > (FSolverReal)0.) { const FSolverVec3 NormalWorld = Frame.TransformVector(Normal); if (bLockAndWriteContacts) { check(Mutex); checkSlow(Contacts); checkSlow(Normals); checkSlow(Phis); FScopeLock Lock(Mutex); Contacts->Emplace(Particles.P(Index)); Normals->Emplace(NormalWorld); Phis->Emplace(Phi); } Particles.P(Index) += Penetration * NormalWorld; } }); })"
  },
  {
    "label": "ApplyHelperISPC()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "ApplyHelperISPC(FSolverParticles& Particles, const FSolverReal Dt, const int32 Offset, const int32 Range)"
  }
]