[
  {
    "label": "FecPacketCounter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FecPacketCounter"
  },
  {
    "label": "UlpfecReceiver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UlpfecReceiver"
  },
  {
    "label": "FecPacketCounter()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_RTP_RTCP_SOURCE_ULPFEC_RECEIVER_H_ # define MODULES_RTP_RTCP_SOURCE_ULPFEC_RECEIVER_H_ # include<stddef . h> # include<stdint . h> # include<memory> # include<vector> # include \" api / sequence_checker . h \" # include \" modules / rtp_rtcp / include / rtp_header_extension_map . h \" # include \" modules / rtp_rtcp / include / rtp_rtcp_defines . h \" # include \" modules / rtp_rtcp / source / forward_error_correction . h \" # include \" modules / rtp_rtcp / source / rtp_packet_received . h \" # include \" rtc_base / system / no_unique_address . h \" # include \" system_wrappers / include / clock . h \" namespace webrtc { struct FecPacketCounter {)",
    "insertText": "FecPacketCounter()"
  },
  {
    "label": "MinusInfinity()",
    "kind": "Method",
    "detail": "Function (size_t num_packets = 0 ; size_t num_bytes = 0 ; size_t num_fec_packets = 0 ; size_t num_recovered_packets = 0 ; Timestamp first_packet_time =)",
    "insertText": "MinusInfinity()"
  },
  {
    "label": "UlpfecReceiver()",
    "kind": "Method",
    "detail": "Function (} ; class UlpfecReceiver { public :)",
    "insertText": "UlpfecReceiver(uint32_t ssrc, int ulpfec_payload_type, RecoveredPacketReceiver* callback, rtc::ArrayView<const RtpExtension> extensions, Clock* clock)"
  },
  {
    "label": "UlpfecReceiver()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "UlpfecReceiver()"
  },
  {
    "label": "ulpfec_payload_type()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "ulpfec_payload_type()"
  },
  {
    "label": "ProcessReceivedFec()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessReceivedFec()"
  },
  {
    "label": "GetPacketCounter()",
    "kind": "Method",
    "detail": "Function (FecPacketCounter)",
    "insertText": "GetPacketCounter()"
  },
  {
    "label": "SetRtpExtensions()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetRtpExtensions(rtc::ArrayView<const RtpExtension> extensions)"
  },
  {
    "label": "RTC_GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (private : const uint32_t ssrc_ ; const int ulpfec_payload_type_ ; Clock* const clock_ ; RtpHeaderExtensionMap extensions_)",
    "insertText": "RTC_GUARDED_BY(&sequence_checker_)"
  }
]