[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "ISourceBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceBufferListener"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "USoundEffectSourcePresetChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSourcePresetChain"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FAudioComponentParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentParam"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSubtitleCue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubtitleCue"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "used",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "used"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "to",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "to"
  },
  {
    "label": "UInitialActiveSoundParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInitialActiveSoundParams"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "forces",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "forces"
  },
  {
    "label": "FSoundAttenuationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundAttenuationSettings"
  },
  {
    "label": "FAudioComponentPendingQuartzCommandData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentPendingQuartzCommandData"
  },
  {
    "label": "PlayInternalRequestData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PlayInternalRequestData"
  },
  {
    "label": "FSoundWavePlaybackTimeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWavePlaybackTimeData"
  },
  {
    "label": "FPendingSourceBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingSourceBusSendInfo"
  },
  {
    "label": "SetOverrideAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOverrideAttenuation(bool bInOverrideAttenuation)"
  },
  {
    "label": "SetAttenuationSettings()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttenuationSettings(USoundAttenuation* InAttenuationSettings)"
  },
  {
    "label": "SetAttenuationOverrides()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAttenuationOverrides(const FSoundAttenuationSettings& InAttenuationOverrides)"
  },
  {
    "label": "SetSound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSound(USoundBase* NewSound)"
  },
  {
    "label": "FadeIn()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FadeIn(float FadeInDuration, float FadeVolumeLevel = 1.0f, float StartTime = 0.0f, const EAudioFaderCurve FadeCurve = EAudioFaderCurve::Linear)"
  },
  {
    "label": "FadeOut()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FadeOut(float FadeOutDuration, float FadeVolumeLevel, const EAudioFaderCurve FadeCurve = EAudioFaderCurve::Linear)"
  },
  {
    "label": "Play()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Play(float StartTime = 0.0f)"
  },
  {
    "label": "PlayQueuedQuantizedInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayQueuedQuantizedInternal(const UObject* WorldContextObject, FAudioComponentCommandInfo InCommandInfo)"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "StopDelayed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StopDelayed(float DelayTime)"
  },
  {
    "label": "SetPaused()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPaused(bool bPause)"
  },
  {
    "label": "AdjustVolume()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustVolume(float AdjustVolumeDuration, float AdjustVolumeLevel, const EAudioFaderCurve FadeCurve = EAudioFaderCurve::Linear)"
  },
  {
    "label": "SetWaveParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWaveParameter(FName InName, USoundWave* InWave)"
  },
  {
    "label": "SetVolumeMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetVolumeMultiplier(float NewVolumeMultiplier)"
  },
  {
    "label": "SetPitchMultiplier()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPitchMultiplier(float NewPitchMultiplier)"
  },
  {
    "label": "SetUISound()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUISound(bool bInUISound)"
  },
  {
    "label": "AdjustAttenuation()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustAttenuation(const FSoundAttenuationSettings& InAttenuationSettings)"
  },
  {
    "label": "SetSubmixSend()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSubmixSend(USoundSubmixBase* Submix, float SendLevel)"
  },
  {
    "label": "SetSourceBusSendPreEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceBusSendPreEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)"
  },
  {
    "label": "SetSourceBusSendPostEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceBusSendPostEffect(USoundSourceBus* SoundSourceBus, float SourceBusSendLevel)"
  },
  {
    "label": "SetAudioBusSendPreEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioBusSendPreEffect(UAudioBus* AudioBus, float AudioBusSendLevel)"
  },
  {
    "label": "SetAudioBusSendPostEffect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetAudioBusSendPostEffect(UAudioBus* AudioBus, float AudioBusSendLevel)"
  },
  {
    "label": "SetLowPassFilterEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowPassFilterEnabled(bool InLowPassFilterEnabled)"
  },
  {
    "label": "SetHighPassFilterEnabled()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPassFilterEnabled(bool InHighPassFilterEnabled)"
  },
  {
    "label": "SetLowPassFilterFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetLowPassFilterFrequency(float InLowPassFilterFrequency)"
  },
  {
    "label": "SetHighPassFilterFrequency()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetHighPassFilterFrequency(float InHighPassFilterFrequency)"
  },
  {
    "label": "SetOutputToBusOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetOutputToBusOnly(bool bInOutputToBusOnly)"
  },
  {
    "label": "GetCookedFFTData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCookedFFTData(const TArray<float>& FrequenciesToGet, TArray<FSoundWaveSpectralData>& OutSoundWaveSpectralData)"
  },
  {
    "label": "GetCookedFFTDataForAllPlayingSounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCookedFFTDataForAllPlayingSounds(TArray<FSoundWaveSpectralDataPerSound>& OutSoundWaveSpectralData)"
  },
  {
    "label": "GetCookedEnvelopeData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCookedEnvelopeData(float& OutEnvelopeData)"
  },
  {
    "label": "GetCookedEnvelopeDataForAllPlayingSounds()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetCookedEnvelopeDataForAllPlayingSounds(TArray<FSoundWaveEnvelopeDataPerSound>& OutEnvelopeData)"
  },
  {
    "label": "SetModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetModulationRouting(const TSet<USoundModulatorBase*>& Modulators, const EModulationDestination Destination, const EModulationRouting RoutingMethod = EModulationRouting::Inherit)"
  },
  {
    "label": "AddModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddModulationRouting(const TSet<USoundModulatorBase*>& Modulators, const EModulationDestination Destination)"
  },
  {
    "label": "RemoveModulationRouting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveModulationRouting(const TSet<USoundModulatorBase*>& Modulators, const EModulationDestination Destination)"
  },
  {
    "label": "PlaybackCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaybackCompleted(uint64 AudioComponentID, bool bFailedToStart)"
  },
  {
    "label": "PlaybackCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaybackCompleted(bool bFailedToStart)"
  },
  {
    "label": "SetBusSendEffectInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBusSendEffectInternal(USoundSourceBus* InSourceBus, UAudioBus* InAudioBus, float SendLevel, EBusSendType InBusSendType)"
  },
  {
    "label": "BroadcastPlayState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPlayState()"
  },
  {
    "label": "SetFadeInComplete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetFadeInComplete()"
  },
  {
    "label": "SetIsVirtualized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsVirtualized(bool bInIsVirtualized)"
  },
  {
    "label": "SetSourceBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceBufferListener(const FSharedISourceBufferListenerPtr& InSourceBufferListener, bool bShouldZeroBufferAfter)"
  },
  {
    "label": "AdjustVolumeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustVolumeInternal(float AdjustVolumeDuration, float AdjustVolumeLevel, bool bIsFadeOut, EAudioFaderCurve FadeCurve)"
  },
  {
    "label": "BP_GetAttenuationSettingsToApply()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "BP_GetAttenuationSettingsToApply(FSoundAttenuationSettings& OutAttenuationSettings)"
  },
  {
    "label": "SetPlaybackTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackTimes(const TMap<uint32, float>& InSoundWavePlaybackTimes)"
  },
  {
    "label": "SetSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceEffectChain(USoundEffectSourcePresetChain* InSourceEffectChain)"
  },
  {
    "label": "CancelAutoAttachment()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelAutoAttachment(bool bDetachFromParent, const UWorld* MyWorld)"
  },
  {
    "label": "PlayInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlayInternal(const PlayInternalRequestData& InPlayRequestData, USoundBase * InSoundOverride = nullptr)"
  },
  {
    "label": "UpdateSpriteTexture()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateSpriteTexture()"
  }
]