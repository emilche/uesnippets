[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "ISourceBufferListener",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISourceBufferListener"
  },
  {
    "label": "UAudioComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UAudioComponent"
  },
  {
    "label": "USoundBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundBase"
  },
  {
    "label": "USoundClass",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundClass"
  },
  {
    "label": "USoundConcurrency",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundConcurrency"
  },
  {
    "label": "USoundEffectSourcePresetChain",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSourcePresetChain"
  },
  {
    "label": "USoundWave",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundWave"
  },
  {
    "label": "FAudioComponentParam",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentParam"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FSubtitleCue",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSubtitleCue"
  },
  {
    "label": "UE_DEPRECATED",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "UE_DEPRECATED"
  },
  {
    "label": "UInitialActiveSoundParams",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UInitialActiveSoundParams"
  },
  {
    "label": "FSoundAttenuationSettings",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundAttenuationSettings"
  },
  {
    "label": "FAudioComponentPendingQuartzCommandData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioComponentPendingQuartzCommandData"
  },
  {
    "label": "PlayInternalRequestData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "PlayInternalRequestData"
  },
  {
    "label": "FSoundWavePlaybackTimeData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundWavePlaybackTimeData"
  },
  {
    "label": "FPendingSourceBusSendInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FPendingSourceBusSendInfo"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Audio . h \" # include \" Audio / SoundParameterControllerInterface . h \" # include \" Components / SceneComponent . h \" # include \" CoreMinimal . h \" # include \" Engine / EngineTypes . h \" # include \" IAudioParameterTransmitter . h \" # include \" Math / RandomStream . h \" # include \" Quartz / AudioMixerQuantizedCommands . h \" # include \" Sound / QuartzQuantizationUtilities . h \" # include \" Sound / QuartzSubscription . h \" # include \" Sound / SoundAttenuation . h \" # include \" Sound / SoundModulationDestination . h \" # include \" Sound / SoundSubmixSend . h \" # include \" Sound / SoundSourceBusSend . h \" # include \" UObject / ObjectMacros . h \" # include \" AudioComponent . generated . h \" class FAudioDevice ; class ISourceBufferListener ; class UAudioComponent ; class USoundBase ; class USoundClass ; class USoundConcurrency ; class USoundEffectSourcePresetChain ; class USoundWave ; struct FAudioComponentParam ; using FSharedISourceBufferListenerPtr = TSharedPtr<ISourceBufferListener,ESPMode::ThreadSafe> ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Playing,Stopped,Paused,FadingIn,FadingOut,Count)",
    "insertText": "UMETA(Hidden)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE(FOnAudioFinished)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_OneParam(FOnAudioFinishedNative, UAudioComponent*)"
  },
  {
    "label": "DECLARE_DYNAMIC_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_DELEGATE_TwoParams(FOnQueueSubtitles, const TArray<struct FSubtitleCue>&, Subtitles, float, CueDuration)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAudioPlayStateChanged, EAudioComponentPlayState, PlayState)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnAudioPlayStateChangedNative, const UAudioComponent*, EAudioComponentPlayState)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_OneParam(FOnAudioVirtualizationChanged, bool, bIsVirtualized)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_TwoParams(FOnAudioVirtualizationChangedNative, const UAudioComponent*, bool)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnAudioPlaybackPercent, const USoundWave*, PlayingSoundWave, const float, PlaybackPercent)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnAudioPlaybackPercentNative, const UAudioComponent*, const USoundWave*, const float)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_TwoParams(FOnAudioSingleEnvelopeValue, const class USoundWave*, PlayingSoundWave, const float, EnvelopeValue)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_ThreeParams(FOnAudioSingleEnvelopeValueNative, const UAudioComponent*, const USoundWave*, const float)"
  },
  {
    "label": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_DYNAMIC_MULTICAST_DELEGATE_ThreeParams(FOnAudioMultiEnvelopeValue, const float, AverageEnvelopeValue, const float, MaxEnvelope, const int32, NumWaveInstances)"
  },
  {
    "label": "DECLARE_MULTICAST_DELEGATE_FourParams()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DECLARE_MULTICAST_DELEGATE_FourParams(FOnAudioMultiEnvelopeValueNative, const UAudioComponent*, const float, const float, const int32)"
  },
  {
    "label": "UMETA()",
    "kind": "Method",
    "detail": "Function (Linear,Logarithmic,SCurve)",
    "insertText": "UMETA(DisplayName = \"Sin (S-Curve)\"), Sin UMETA(DisplayName = \"Sin (Equal Power)\"), Count UMETA(Hidden)"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "USTRUCT() struct UE_DEPRECATED(5.0, \"FAudioComponentParam has been deprecated, use FAudioParameter\")"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category=AudioComponentParam)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS(BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"Audio\")"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset(int32 ReserveSize = 0)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (AudioParams .)",
    "insertText": "Reset(ReserveSize)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} } ;)",
    "insertText": "UCLASS(ClassGroup=(Audio, Common), HideCategories=(Object, ActorComponent, Physics, Rendering, Mobility, LOD), ShowCategories=Trigger, meta=(BlueprintSpawnableComponent), MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = Sound)"
  },
  {
    "label": "ResetParameters()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetParameters()"
  },
  {
    "label": "CommandID()",
    "kind": "Method",
    "detail": "Function (uint64 AudioComponentIDCounter ; TMap<uint64,UAudioComponent*> AudioIDToComponentMap ; FCriticalSection AudioIDToComponentMapLock ; private : struct FAudioComponentPendingQuartzCommandData { FQuartzQuantizationBoundary AnticipatoryBoundary ; FOnQuartzCommandEventBP Delegate ; float StartTime { 0 . 0 f } ; float FadeDuration { 0 . 0 f } ; float FadeVolume { 0 . 0 f } ; EAudioFaderCurve FadeCurve { EAudioFaderCurve::Linear } ; uint32)",
    "insertText": "CommandID(uint32)"
  },
  {
    "label": "PlayQueuedQuantizedInternal()",
    "kind": "Method",
    "detail": "Function (TWeakObjectPtr<UQuartzClockHandle> ClockHandle ; bool bHasBeenStoppedWhileQueued { false } ; } ; TArray<FAudioComponentPendingQuartzCommandData> PendingQuartzCommandData ; public : void)",
    "insertText": "PlayQueuedQuantizedInternal(const UObject* WorldContextObject, FAudioComponentCommandInfo InCommandInfo)"
  },
  {
    "label": "PlaybackCompleted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PlaybackCompleted(uint64 AudioComponentID, bool bFailedToStart)"
  },
  {
    "label": "GetDisableParameterUpdatesWhilePlaying()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetDisableParameterUpdatesWhilePlaying()"
  },
  {
    "label": "PlaybackCompleted()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "PlaybackCompleted(bool bFailedToStart)"
  },
  {
    "label": "IsInAudibleRange()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsInAudibleRange(float* OutMaxDistance)"
  },
  {
    "label": "SetBusSendEffectInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBusSendEffectInternal(USoundSourceBus* InSourceBus, UAudioBus* InAudioBus, float SendLevel, EBusSendType InBusSendType)"
  },
  {
    "label": "BroadcastPlayState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BroadcastPlayState()"
  },
  {
    "label": "GetAudioTimeSeconds()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetAudioTimeSeconds()"
  },
  {
    "label": "SetFadeInComplete()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "SetFadeInComplete()"
  },
  {
    "label": "SetIsVirtualized()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetIsVirtualized(bool bInIsVirtualized)"
  },
  {
    "label": "SetSourceBufferListener()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceBufferListener(const FSharedISourceBufferListenerPtr& InSourceBufferListener, bool bShouldZeroBufferAfter)"
  },
  {
    "label": "GetSourceBufferListener()",
    "kind": "Method",
    "detail": "Function (const FSharedISourceBufferListenerPtr&)",
    "insertText": "GetSourceBufferListener()"
  },
  {
    "label": "GetDetailedInfoInternal()",
    "kind": "Method",
    "detail": "Function (# endif FString)",
    "insertText": "GetDetailedInfoInternal()"
  },
  {
    "label": "PostLoad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "PostLoad()"
  },
  {
    "label": "Serialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Serialize(FArchive& Ar)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "Activate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Activate(bool bReset=false)"
  },
  {
    "label": "Deactivate()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Deactivate()"
  },
  {
    "label": "OnUpdateTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUpdateTransform(EUpdateTransformFlags UpdateTransformFlags, ETeleportType Teleport = ETeleportType::None)"
  },
  {
    "label": "CalcBounds()",
    "kind": "Method",
    "detail": "Function (FBoxSphereBounds)",
    "insertText": "CalcBounds(const FTransform& LocalToWorld)"
  },
  {
    "label": "OnRegister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnRegister()"
  },
  {
    "label": "OnUnregister()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnUnregister()"
  },
  {
    "label": "AdditionalStatObject()",
    "kind": "Method",
    "detail": "Function (const UObject*)",
    "insertText": "AdditionalStatObject()"
  },
  {
    "label": "IsReadyForOwnerToAutoDestroy()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsReadyForOwnerToAutoDestroy()"
  },
  {
    "label": "EndPlay()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EndPlay(const EEndPlayReason::Type EndPlayReason)"
  },
  {
    "label": "AdjustVolumeInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AdjustVolumeInternal(float AdjustVolumeDuration, float AdjustVolumeLevel, bool bIsFadeOut, EAudioFaderCurve FadeCurve)"
  },
  {
    "label": "GetAttenuationSettingsToApply()",
    "kind": "Method",
    "detail": "Function (const FSoundAttenuationSettings*)",
    "insertText": "GetAttenuationSettingsToApply()"
  },
  {
    "label": "GetAttenuationSettingsAsset()",
    "kind": "Method",
    "detail": "Function (const TObjectPtr<USoundAttenuation>)",
    "insertText": "GetAttenuationSettingsAsset()"
  },
  {
    "label": "CollectAttenuationShapesForVisualization()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CollectAttenuationShapesForVisualization(TMultiMap<EAttenuationShape::Type, FBaseAttenuationSettings::AttenuationShapeDetails>& ShapeDetailsMap)"
  },
  {
    "label": "GetAudioComponentID()",
    "kind": "Method",
    "detail": "Function (uint64)",
    "insertText": "GetAudioComponentID()"
  },
  {
    "label": "SetPlaybackTimes()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetPlaybackTimes(const TMap<uint32, float>& InSoundWavePlaybackTimes)"
  },
  {
    "label": "SetSourceEffectChain()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSourceEffectChain(USoundEffectSourcePresetChain* InSourceEffectChain)"
  },
  {
    "label": "GetAudioDevice()",
    "kind": "Method",
    "detail": "Function (FAudioDevice*)",
    "insertText": "GetAudioDevice()"
  },
  {
    "label": "GetInstanceParameters()",
    "kind": "Method",
    "detail": "Function (TArray<FAudioParameter>&)",
    "insertText": "GetInstanceParameters()"
  },
  {
    "label": "FSoundWavePlaybackTimeData()",
    "kind": "Method",
    "detail": "Function (struct PlayInternalRequestData { float StartTime = 0 . 0 f ; float FadeInDuration = 0 . 0 f ; float FadeVolumeLevel = 1 . 0 f ; EAudioFaderCurve FadeCurve = EAudioFaderCurve::Linear ; Audio::FQuartzQuantizedRequestData QuantizedRequestData ; } ; private : uint64 AudioComponentID ; uint32 LastSoundPlayOrder = 0 ; float RetriggerTimeSinceLastUpdate ; float RetriggerUpdateInterval ; FVector SavedAutoAttachRelativeLocation ; FRotator SavedAutoAttachRelativeRotation ; FVector SavedAutoAttachRelativeScale3D ; struct FSoundWavePlaybackTimeData { USoundWave* SoundWave ; float PlaybackTime ; uint32 LastEnvelopeCookedIndex ; uint32 LastFFTCookedIndex ;)",
    "insertText": "FSoundWavePlaybackTimeData() : SoundWave(nullptr) , PlaybackTime(0.0f) , LastEnvelopeCookedIndex(INDEX_NONE) , LastFFTCookedIndex(INDEX_NONE)"
  },
  {
    "label": "FSoundWavePlaybackTimeData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoundWavePlaybackTimeData(USoundWave* InSoundWave) : SoundWave(InSoundWave) , PlaybackTime(0.0f) , LastEnvelopeCookedIndex(INDEX_NONE) , LastFFTCookedIndex(INDEX_NONE)"
  },
  {
    "label": "CancelAutoAttachment()",
    "kind": "Method",
    "detail": "Function (} } ; TMap<uint32,FSoundWavePlaybackTimeData> SoundWavePlaybackTimes ; void)",
    "insertText": "CancelAutoAttachment(bool bDetachFromParent, const UWorld* MyWorld)"
  },
  {
    "label": "PlayInternal()",
    "kind": "Method",
    "detail": "Function (FSharedISourceBufferListenerPtr SourceBufferListener ; bool bShouldSourceBufferListenerZeroBuffer = false ; TArray<FSoundSubmixSendInfo> PendingSubmixSends ; struct FPendingSourceBusSendInfo { EBusSendType BusSendType = EBusSendType::PreEffect ; FSoundSourceBusSendInfo BusSendInfo ; } ; TArray<FPendingSourceBusSendInfo> PendingBusSends ; protected : void)",
    "insertText": "PlayInternal(const PlayInternalRequestData& InPlayRequestData, USoundBase * InSoundOverride = nullptr)"
  },
  {
    "label": "UpdateSpriteTexture()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA void)",
    "insertText": "UpdateSpriteTexture()"
  },
  {
    "label": "ProcessCommand()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ProcessCommand(const Audio::FQuartzQuantizedCommandDelegateData& Data)"
  },
  {
    "label": "ProcessCommand()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ProcessCommand(const Audio::FQuartzMetronomeDelegateData& Data)"
  },
  {
    "label": "ProcessCommand()",
    "kind": "Method",
    "detail": "Function (} ; void)",
    "insertText": "ProcessCommand(const Audio::FQuartzQueueCommandData& InQueueCommandData)"
  }
]