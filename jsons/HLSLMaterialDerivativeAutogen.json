[
  {
    "label": "FHLSLMaterialTranslator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FHLSLMaterialTranslator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDerivInfo",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDerivInfo"
  },
  {
    "label": "FMaterialDerivativeAutogen",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMaterialDerivativeAutogen"
  },
  {
    "label": "FOperationType1",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOperationType1"
  },
  {
    "label": "FOperationType2",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FOperationType2"
  },
  {
    "label": "IsDerivativeValid()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" MaterialShared . h \" # if WITH_EDITORONLY_DATA class FHLSLMaterialTranslator ; enum class EDerivativeStatus { NotAware,NotValid,Zero,Valid,} ; bool)",
    "insertText": "IsDerivativeValid(EDerivativeStatus Status)"
  },
  {
    "label": "IsLWCType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLWCType(EDerivativeType Type)"
  },
  {
    "label": "MakeNonLWCType()",
    "kind": "Method",
    "detail": "Function (} EDerivativeType)",
    "insertText": "MakeNonLWCType(EDerivativeType Type)"
  },
  {
    "label": "GenerateExpressionFunc1()",
    "kind": "Method",
    "detail": "Function (struct FDerivInfo { EMaterialValueType Type ; EDerivativeType DerivType ; EDerivativeStatus DerivativeStatus ; } ; class FMaterialDerivativeAutogen { public : enum class EFunc1 { Abs,Log,Log2,Log10,Exp,Exp2,Sin,Cos,Tan,Asin,AsinFast,Acos,AcosFast,Atan,AtanFast,Sqrt,Rcp,Rsqrt,Saturate,Frac,Length,InvLength,Normalize,Num } ; enum class EFunc2 { Add,Sub,Mul,Div,Fmod,Modulo,Max,Min,Dot,Pow,PowPositiveClamped,Cross,Atan2,Atan2Fast,Num } ; int32)",
    "insertText": "GenerateExpressionFunc1(FHLSLMaterialTranslator& Translator, EFunc1 Op, int32 SrcCode)"
  },
  {
    "label": "GenerateExpressionFunc2()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateExpressionFunc2(FHLSLMaterialTranslator& Translator, EFunc2 Op, int32 LhsCode, int32 RhsCode)"
  },
  {
    "label": "GenerateLerpFunc()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateLerpFunc(FHLSLMaterialTranslator& Translator, int32 A, int32 B, int32 S)"
  },
  {
    "label": "GenerateRotateScaleOffsetTexCoordsFunc()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateRotateScaleOffsetTexCoordsFunc(FHLSLMaterialTranslator& Translator, int32 TexCoord, int32 RotationScale, int32 Offset)"
  },
  {
    "label": "GenerateIfFunc()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GenerateIfFunc(FHLSLMaterialTranslator& Translator, int32 A, int32 B, int32 Greater, int32 Equal, int32 Less, int32 Threshold)"
  },
  {
    "label": "GenerateUsedFunctions()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GenerateUsedFunctions(FHLSLMaterialTranslator& Translator)"
  },
  {
    "label": "ApplyUnMirror()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ApplyUnMirror(FString Value, bool bUnMirrorU, bool bUnMirrorV)"
  },
  {
    "label": "ConstructDeriv()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConstructDeriv(const FString& Value, const FString& Ddx, const FString& Ddy, EDerivativeType DstType)"
  },
  {
    "label": "ConstructDerivFinite()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConstructDerivFinite(const FString& Value, EDerivativeType DstType)"
  },
  {
    "label": "ConvertDeriv()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "ConvertDeriv(const FString& Value, EDerivativeType DstType, EDerivativeType SrcType)"
  },
  {
    "label": "FOperationType1()",
    "kind": "Method",
    "detail": "Function (private : struct FOperationType1 {)",
    "insertText": "FOperationType1(EDerivativeType InType) : ReturnType(InType), IntermediateType(InType)"
  },
  {
    "label": "FOperationType1()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOperationType1(EDerivativeType InReturnType, EDerivativeType InIntermediateType) : ReturnType(InReturnType), IntermediateType(InIntermediateType)"
  },
  {
    "label": "FOperationType2()",
    "kind": "Method",
    "detail": "Function (} EDerivativeType ReturnType ; EDerivativeType IntermediateType ; } ; struct FOperationType2 {)",
    "insertText": "FOperationType2(EDerivativeType InType) : ReturnType(InType), LhsIntermediateType(InType), RhsIntermediateType(InType)"
  },
  {
    "label": "FOperationType2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOperationType2(EDerivativeType InReturnType, EDerivativeType InIntermediateType) : ReturnType(InReturnType), LhsIntermediateType(InIntermediateType), RhsIntermediateType(InIntermediateType)"
  },
  {
    "label": "FOperationType2()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FOperationType2(EDerivativeType InReturnType, EDerivativeType InLhsIntermediateType, EDerivativeType InRhsIntermediateType) : ReturnType(InReturnType), LhsIntermediateType(InLhsIntermediateType), RhsIntermediateType(InRhsIntermediateType)"
  },
  {
    "label": "GetFunc1ReturnType()",
    "kind": "Method",
    "detail": "Function (} EDerivativeType ReturnType ; EDerivativeType LhsIntermediateType ; EDerivativeType RhsIntermediateType ; } ; FOperationType1)",
    "insertText": "GetFunc1ReturnType(EDerivativeType SrcType, EFunc1 Op)"
  },
  {
    "label": "GetFunc2ReturnType()",
    "kind": "Method",
    "detail": "Function (FOperationType2)",
    "insertText": "GetFunc2ReturnType(EDerivativeType LhsType, EDerivativeType RhsType, EFunc2 Op)"
  },
  {
    "label": "CoerceValueRaw()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CoerceValueRaw(FHLSLMaterialTranslator& Translator, const FString& Token, const FDerivInfo& SrcInfo, EDerivativeType DstType)"
  },
  {
    "label": "CoerceValueDeriv()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "CoerceValueDeriv(const FString& Token, const FDerivInfo& SrcInfo, EDerivativeType DstType)"
  },
  {
    "label": "EnableGeneratedDepencencies()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnableGeneratedDepencencies()"
  },
  {
    "label": "bFunc1OpIsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "bFunc1OpIsEnabled(int32)"
  },
  {
    "label": "bFunc2OpIsEnabled()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "bFunc2OpIsEnabled(int32)"
  }
]