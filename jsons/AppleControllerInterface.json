[
  {
    "label": "ControllerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ControllerType"
  },
  {
    "label": "PlayerIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PlayerIndex"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDeferredAppleControllerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredAppleControllerEvent"
  },
  {
    "label": "for",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "for"
  },
  {
    "label": "FAppleControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAppleControllerInterface"
  },
  {
    "label": "FUserController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUserController"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (h>)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAppleController, Log, All)"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMessageHandler( const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler )"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick( float DeltaTime )"
  },
  {
    "label": "SendControllerEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendControllerEvents()"
  },
  {
    "label": "GetControllerType()",
    "kind": "Method",
    "detail": "Function (ControllerType)",
    "insertText": "GetControllerType(uint32 ControllerIndex)"
  },
  {
    "label": "SetControllerType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerType(uint32 ControllerIndex)"
  },
  {
    "label": "HandleInputInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputInternal(const FGamepadKeyNames::Type& UEButton, uint32 ControllerIndex, bool bIsPressed, bool bWasPressed)"
  },
  {
    "label": "HandleButtonGamepad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleButtonGamepad(const FGamepadKeyNames::Type& UEButton, uint32 ControllerIndex)"
  },
  {
    "label": "HandleAnalogGamepad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAnalogGamepad(const FGamepadKeyNames::Type& UEAxis, uint32 ControllerIndex)"
  },
  {
    "label": "HandleVirtualButtonGamepad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtualButtonGamepad(const FGamepadKeyNames::Type& UEButtonNegative, const FGamepadKeyNames::Type& UEButtonPositive, uint32 ControllerIndex)"
  },
  {
    "label": "FAppleControllerInterface()",
    "kind": "Method",
    "detail": "Function (protected:)",
    "insertText": "FAppleControllerInterface( const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler )"
  },
  {
    "label": "SignalEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalEvent(EAppleControllerEventType InEventType, GCController* InController)"
  },
  {
    "label": "HandleConnection()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleConnection(GCController* Controller)"
  },
  {
    "label": "HandleDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDisconnect(GCController* Controller)"
  },
  {
    "label": "SetCurrentController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentController(GCController* Controller)"
  }
]