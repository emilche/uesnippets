[
  {
    "label": "ControllerType",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "ControllerType"
  },
  {
    "label": "PlayerIndex",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "PlayerIndex"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FDeferredAppleControllerEvent",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FDeferredAppleControllerEvent"
  },
  {
    "label": "FAppleControllerInterface",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAppleControllerInterface"
  },
  {
    "label": "FUserController",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FUserController"
  },
  {
    "label": "DECLARE_LOG_CATEGORY_EXTERN()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / CoreMisc . h \" # include \" GenericPlatform / IInputInterface . h \" # include \" GenericPlatform / GenericApplicationMessageHandler . h \" # import<GameController / GameController . h>)",
    "insertText": "DECLARE_LOG_CATEGORY_EXTERN(LogAppleController, Log, All)"
  },
  {
    "label": "FDeferredAppleControllerEvent()",
    "kind": "Method",
    "detail": "Function (enum ControllerType { Unassigned,SiriRemote,ExtendedGamepad,XboxGamepad,DualShockGamepad,DualSenseGamepad } ; enum PlayerIndex { PlayerOne,PlayerTwo,PlayerThree,PlayerFour,PlayerUnset = - 1 } ; enum class EAppleControllerEventType : int32 { Invalid,Connect,Disconnect,BecomeCurrent } ; struct FDeferredAppleControllerEvent {)",
    "insertText": "FDeferredAppleControllerEvent(EAppleControllerEventType InEventType, GCController* InController) : EventType(InEventType) , Controller([InController retain])"
  },
  {
    "label": "FDeferredAppleControllerEvent()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FDeferredAppleControllerEvent(const FDeferredAppleControllerEvent& Other)"
  },
  {
    "label": "FDeferredAppleControllerEvent()",
    "kind": "Method",
    "detail": "Function (EventType = Other . EventType ; Controller = [ Other . Controller retain ] ; } ~)",
    "insertText": "FDeferredAppleControllerEvent()"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function ([ Controller release ] ; } EAppleControllerEventType EventType ; GCController* Controller ; } ; class FAppleControllerInterface : public IInputInterface { public : TSharedRef<FAppleControllerInterface>)",
    "insertText": "Create(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<FAppleControllerInterface>)",
    "insertText": "Get()"
  },
  {
    "label": "FAppleControllerInterface()",
    "kind": "Method",
    "detail": "Function (public : ~)",
    "insertText": "FAppleControllerInterface()"
  },
  {
    "label": "SetMessageHandler()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetMessageHandler(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "SendControllerEvents()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SendControllerEvents()"
  },
  {
    "label": "SetForceFeedbackChannelValue()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetForceFeedbackChannelValue(int32 ControllerId, FForceFeedbackChannelType ChannelType, float Value)"
  },
  {
    "label": "SetForceFeedbackChannelValues()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetForceFeedbackChannelValues(int32 ControllerId, const FForceFeedbackValues &values)"
  },
  {
    "label": "SetLightColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetLightColor(int32 ControllerId, FColor Color)"
  },
  {
    "label": "ResetLightColor()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ResetLightColor(int32 ControllerId)"
  },
  {
    "label": "IsControllerAssignedToGamepad()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsControllerAssignedToGamepad(int32 ControllerId)"
  },
  {
    "label": "IsGamepadAttached()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsGamepadAttached()"
  },
  {
    "label": "GetControllerType()",
    "kind": "Method",
    "detail": "Function (const ControllerType)",
    "insertText": "GetControllerType(uint32 ControllerIndex)"
  },
  {
    "label": "SetControllerType()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetControllerType(uint32 ControllerIndex)"
  },
  {
    "label": "GetGCControllerButton()",
    "kind": "Method",
    "detail": "Function (GCControllerButtonInput*)",
    "insertText": "GetGCControllerButton(const FGamepadKeyNames::Type& ButtonKey, uint32 ControllerIndex)"
  },
  {
    "label": "HandleInputInternal()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleInputInternal(const FGamepadKeyNames::Type& UEButton, uint32 ControllerIndex, bool bIsPressed, bool bWasPressed)"
  },
  {
    "label": "HandleButtonGamepad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleButtonGamepad(const FGamepadKeyNames::Type& UEButton, uint32 ControllerIndex)"
  },
  {
    "label": "HandleAnalogGamepad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleAnalogGamepad(const FGamepadKeyNames::Type& UEAxis, uint32 ControllerIndex)"
  },
  {
    "label": "HandleVirtualButtonGamepad()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleVirtualButtonGamepad(const FGamepadKeyNames::Type& UEButtonNegative, const FGamepadKeyNames::Type& UEButtonPositive, uint32 ControllerIndex)"
  },
  {
    "label": "FAppleControllerInterface()",
    "kind": "Method",
    "detail": "Function (protected :)",
    "insertText": "FAppleControllerInterface(const TSharedRef< FGenericApplicationMessageHandler >& InMessageHandler)"
  },
  {
    "label": "SignalEvent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SignalEvent(EAppleControllerEventType InEventType, GCController* InController)"
  },
  {
    "label": "HandleConnection()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "HandleConnection(GCController* Controller)"
  },
  {
    "label": "HandleDisconnect()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleDisconnect(GCController* Controller)"
  },
  {
    "label": "SetCurrentController()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCurrentController(GCController* Controller)"
  }
]