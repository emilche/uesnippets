[
  {
    "label": "FMuscleActivationData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMuscleActivationData"
  },
  {
    "label": "FMuscleActivationFacade",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMuscleActivationFacade"
  },
  {
    "label": "FMuscleActivationFacade()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" GeometryCollection / GeometryCollection . h \" # include \" GeometryCollection / ManagedArrayAccessor . h \" # include \" GeometryCollection / ManagedArrayCollection . h \" # include \" GeometryCollection / Facades / CollectionSelectionFacade . h \" namespace GeometryCollection::Facades { struct FMuscleActivationData { int32 GeometryGroupIndex ; TArray<int32> MuscleActivationElement ; FIntVector2 OriginInsertionPair ; float OriginInsertionRestLength ; TArray<Chaos::PMatrix33d> FiberDirectionMatrix ; TArray<float> ContractionVolumeScale ; TArray<TArray<FVector3f>> FiberStreamline ; TArray<float> FiberStreamlineRestLength ; } ; class FMuscleActivationFacade { public : const FName GroupName ; const FName GeometryGroupIndex ; const FName MuscleActivationElement ; const FName OriginInsertionPair ; const FName OriginInsertionRestLength ; const FName FiberDirectionMatrix ; const FName ContractionVolumeScale ; const FName FiberStreamline ; const FName FiberStreamlineRestLength ;)",
    "insertText": "FMuscleActivationFacade(FManagedArrayCollection& InCollection)"
  },
  {
    "label": "FMuscleActivationFacade()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FMuscleActivationFacade(const FManagedArrayCollection& InCollection)"
  },
  {
    "label": "DefineSchema()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DefineSchema()"
  },
  {
    "label": "IsConst()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsConst()"
  },
  {
    "label": "AddMuscleActivationData()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "AddMuscleActivationData(const FMuscleActivationData& InputData)"
  },
  {
    "label": "UpdateMuscleActivationData()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UpdateMuscleActivationData(const int32 DataIndex, FMuscleActivationData& InputData)"
  },
  {
    "label": "GetMuscleActivationData()",
    "kind": "Method",
    "detail": "Function (FMuscleActivationData)",
    "insertText": "GetMuscleActivationData(const int32 DataIndex)"
  },
  {
    "label": "IsValidGeometryIndex()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValidGeometryIndex(const int32 Index)"
  },
  {
    "label": "IsValidElementIndex()",
    "kind": "Method",
    "detail": "Function (} ; bool)",
    "insertText": "IsValidElementIndex(const int32 Index)"
  },
  {
    "label": "NumMuscles()",
    "kind": "Method",
    "detail": "Function (} ; int32)",
    "insertText": "NumMuscles()"
  },
  {
    "label": "SetUpMuscleActivation()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "SetUpMuscleActivation(const TArray<int32>& Origin, const TArray<int32>& Insertion, float ContractionVolumeScale)"
  },
  {
    "label": "BuildStreamlines()",
    "kind": "Method",
    "detail": "Function (TArray<TArray<TArray<FVector3f>>>)",
    "insertText": "BuildStreamlines(const TArray<int32>& Origin, const TArray<int32>& Insertion, int32 NumLinesMultiplier, int32 MaxStreamlineIterations, int32 MaxPointsPerLine)"
  }
]