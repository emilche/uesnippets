[
  {
    "label": "BasicBlock",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BasicBlock"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "DomTreeNodeBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DomTreeNodeBase"
  },
  {
    "label": "DominatorTree",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DominatorTree"
  },
  {
    "label": "IDFCalculator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IDFCalculator"
  },
  {
    "label": "IDFCalculator()",
    "kind": "Method",
    "detail": "Function (# ifndef LLVM_ANALYSIS_IDF_H # define LLVM_ANALYSIS_IDF_H # include \" llvm / ADT / ArrayRef . h \" # include \" llvm / ADT / DenseMap . h \" # include \" llvm / ADT / SmallPtrSet . h \" # include \" llvm / ADT / SmallVector . h \" namespace llvm { class BasicBlock ; template<class T> class DomTreeNodeBase ; typedef DomTreeNodeBase<BasicBlock> DomTreeNode ; class DominatorTree ; class IDFCalculator { public :)",
    "insertText": "IDFCalculator(DominatorTree &DT) : DT(DT), useLiveIn(false)"
  },
  {
    "label": "setDefiningBlocks()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "setDefiningBlocks(const SmallPtrSetImpl<BasicBlock *> &Blocks)"
  },
  {
    "label": "setLiveInBlocks()",
    "kind": "Method",
    "detail": "Function (DefBlocks =& Blocks ; } void)",
    "insertText": "setLiveInBlocks(const SmallPtrSetImpl<BasicBlock *> &Blocks)"
  },
  {
    "label": "resetLiveInBlocks()",
    "kind": "Method",
    "detail": "Function (LiveInBlocks =& Blocks ; useLiveIn = true ; } void)",
    "insertText": "resetLiveInBlocks()"
  },
  {
    "label": "calculate()",
    "kind": "Method",
    "detail": "Function (LiveInBlocks = nullptr ; useLiveIn = false ; } void)",
    "insertText": "calculate(SmallVectorImpl<BasicBlock *> &IDFBlocks)"
  }
]