[
  {
    "label": "sparse_sparse_product_with_pruning_selector",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "sparse_sparse_product_with_pruning_selector"
  },
  {
    "label": "sparse_sparse_product_with_pruning_impl()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSESPARSEPRODUCTWITHPRUNING_H # define EIGEN_SPARSESPARSEPRODUCTWITHPRUNING_H namespace Eigen { namespace internal { template<Lhs,Rhs,ResultType> void)",
    "insertText": "sparse_sparse_product_with_pruning_impl(const Lhs& lhs, const Rhs& rhs, ResultType& res, const typename ResultType::RealScalar& tolerance)"
  },
  {
    "label": "innerSize()",
    "kind": "Method",
    "detail": "Function (typedef remove_all<Rhs>::type::Scalar RhsScalar ; typedef remove_all<ResultType>::type::Scalar ResScalar ; typedef remove_all<Lhs>::type::StorageIndex StorageIndex ; Index rows = lhs .)",
    "insertText": "innerSize()"
  },
  {
    "label": "outerSize()",
    "kind": "Method",
    "detail": "Function (Index cols = rhs .)",
    "insertText": "outerSize()"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(lhs.outerSize() == rhs.innerSize())"
  },
  {
    "label": "tempVector()",
    "kind": "Method",
    "detail": "Function (AmbiVector<ResScalar,StorageIndex>)",
    "insertText": "tempVector(rows)"
  },
  {
    "label": "lhsEval()",
    "kind": "Method",
    "detail": "Function (evaluator<Lhs>)",
    "insertText": "lhsEval(lhs)"
  },
  {
    "label": "rhsEval()",
    "kind": "Method",
    "detail": "Function (evaluator<Rhs>)",
    "insertText": "rhsEval(rhs)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (Index estimated_nnz_prod = lhsEval .)",
    "insertText": "nonZerosEstimate() + rhsEval.nonZerosEstimate()"
  },
  {
    "label": "reserve()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "reserve(estimated_nnz_prod)"
  },
  {
    "label": "init()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "init(ratioColRes)"
  },
  {
    "label": "setZero()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "setZero()"
  },
  {
    "label": "restart()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "restart()"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (RhsScalar x = rhsIt .)",
    "insertText": "value()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (tempVector .)",
    "insertText": "coeffRef(lhsIt.index()) += lhsIt.value()"
  },
  {
    "label": "startVec()",
    "kind": "Method",
    "detail": "Function (} } res .)",
    "insertText": "startVec(j)"
  },
  {
    "label": "finalize()",
    "kind": "Method",
    "detail": "Function (} res .)",
    "insertText": "finalize()"
  },
  {
    "label": "run()",
    "kind": "Method",
    "detail": "Function (} template<Lhs,Rhs,ResultType,int LhsStorageOrder = traits<Lhs>::Flags& RowMajorBit,int RhsStorageOrder = traits<Rhs>::Flags& RowMajorBit,int ResStorageOrder = traits<ResultType>::Flags& RowMajorBit> struct sparse_sparse_product_with_pruning_selector ; template<Lhs,Rhs,ResultType> struct sparse_sparse_product_with_pruning_selector<Lhs,Rhs,ResultType,ColMajor,ColMajor,ColMajor> { typedef ResultType::RealScalar RealScalar ; void)",
    "insertText": "run(const Lhs& lhs, const Rhs& rhs, ResultType& res, const RealScalar& tolerance)"
  },
  {
    "label": "_res()",
    "kind": "Method",
    "detail": "Function (remove_all<ResultType>::type)",
    "insertText": "_res(res.rows(), res.cols())"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_product_with_pruning_impl<Lhs,Rhs,)",
    "insertText": "ResultType(lhs, rhs, _res, tolerance)"
  },
  {
    "label": "swap()",
    "kind": "Method",
    "detail": "Function (res .)",
    "insertText": "swap(_res)"
  },
  {
    "label": "SparseTemporaryType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_product_with_pruning_impl<Lhs,Rhs,)",
    "insertText": "SparseTemporaryType(lhs, rhs, _res, tolerance)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_product_with_pruning_impl<Rhs,Lhs,)",
    "insertText": "ResultType(rhs, lhs, _res, tolerance)"
  },
  {
    "label": "colLhs()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<Lhs::Scalar,ColMajor,Lhs::StorageIndex> ColMajorMatrixLhs ; typedef SparseMatrix<Rhs::Scalar,ColMajor,Lhs::StorageIndex> ColMajorMatrixRhs ; ColMajorMatrixLhs)",
    "insertText": "colLhs(lhs)"
  },
  {
    "label": "colRhs()",
    "kind": "Method",
    "detail": "Function (ColMajorMatrixRhs)",
    "insertText": "colRhs(rhs)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_product_with_pruning_impl<ColMajorMatrixLhs,ColMajorMatrixRhs,)",
    "insertText": "ResultType(colLhs, colRhs, res, tolerance)"
  },
  {
    "label": "rowLhs()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<Lhs::Scalar,RowMajor,Lhs::StorageIndex> RowMajorMatrixLhs ; RowMajorMatrixLhs)",
    "insertText": "rowLhs(lhs)"
  },
  {
    "label": "RowMajor()",
    "kind": "Method",
    "detail": "Function (sparse_sparse_product_with_pruning_selector<RowMajorMatrixLhs,Rhs,ResultType,RowMajor,)",
    "insertText": "RowMajor(rowLhs,rhs,res,tolerance)"
  },
  {
    "label": "rowRhs()",
    "kind": "Method",
    "detail": "Function (typedef SparseMatrix<Rhs::Scalar,RowMajor,Lhs::StorageIndex> RowMajorMatrixRhs ; RowMajorMatrixRhs)",
    "insertText": "rowRhs(rhs)"
  },
  {
    "label": "RowMajor()",
    "kind": "Method",
    "detail": "Function (sparse_sparse_product_with_pruning_selector<Lhs,RowMajorMatrixRhs,ResultType,RowMajor,RowMajor,)",
    "insertText": "RowMajor(lhs,rowRhs,res,tolerance)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_product_with_pruning_impl<Lhs,ColMajorMatrixRhs,)",
    "insertText": "ResultType(lhs, colRhs, res, tolerance)"
  },
  {
    "label": "ResultType()",
    "kind": "Method",
    "detail": "Function (internal::sparse_sparse_product_with_pruning_impl<ColMajorMatrixLhs,Rhs,)",
    "insertText": "ResultType(colLhs, rhs, res, tolerance)"
  }
]