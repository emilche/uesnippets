[
  {
    "label": "MOCK_METHOD()",
    "kind": "Method",
    "detail": "Function (# ifndef THIRD_PARTY_GOOGLETEST_GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_FUNCTION_MOCKER_H_ # define THIRD_PARTY_GOOGLETEST_GOOGLEMOCK_INCLUDE_GMOCK_INTERNAL_GMOCK_FUNCTION_MOCKER_H_ # include \" gmock / gmock - generated - function - mockers . h \" # include \" gmock / internal / gmock - pp . h \" # define)",
    "insertText": "MOCK_METHOD(...) \\ GMOCK_PP_VARIADIC_CALL(GMOCK_INTERNAL_MOCK_METHOD_ARG_, __VA_ARGS__) #define GMOCK_INTERNAL_MOCK_METHOD_ARG_1(...) \\ GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__) #define GMOCK_INTERNAL_MOCK_METHOD_ARG_2(...) \\ GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__) #define GMOCK_INTERNAL_MOCK_METHOD_ARG_3(_Ret, _MethodName, _Args) \\ GMOCK_INTERNAL_MOCK_METHOD_ARG_4(_Ret, _MethodName, _Args, ()) #define GMOCK_INTERNAL_MOCK_METHOD_ARG_4(_Ret, _MethodName, _Args, _Spec) \\ GMOCK_INTERNAL_ASSERT_PARENTHESIS(_Args)"
  },
  {
    "label": "GMOCK_INTERNAL_ASSERT_PARENTHESIS()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_INTERNAL_ASSERT_PARENTHESIS(_Spec)"
  },
  {
    "label": "GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE(\\ GMOCK_PP_NARG0 _Args, GMOCK_INTERNAL_SIGNATURE(_Ret, _Args))"
  },
  {
    "label": "GMOCK_INTERNAL_ASSERT_VALID_SPEC()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_INTERNAL_ASSERT_VALID_SPEC(_Spec) \\ GMOCK_INTERNAL_MOCK_METHOD_IMPL( \\ GMOCK_PP_NARG0 _Args, _MethodName, GMOCK_INTERNAL_HAS_CONST(_Spec), \\ GMOCK_INTERNAL_HAS_OVERRIDE(_Spec), GMOCK_INTERNAL_HAS_FINAL(_Spec), \\ GMOCK_INTERNAL_HAS_NOEXCEPT(_Spec), GMOCK_INTERNAL_GET_CALLTYPE(_Spec), \\ (GMOCK_INTERNAL_SIGNATURE(_Ret, _Args))) #define GMOCK_INTERNAL_MOCK_METHOD_ARG_5(...) \\ GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__) #define GMOCK_INTERNAL_MOCK_METHOD_ARG_6(...) \\ GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__) #define GMOCK_INTERNAL_MOCK_METHOD_ARG_7(...) \\ GMOCK_INTERNAL_WRONG_ARITY(__VA_ARGS__) #define GMOCK_INTERNAL_WRONG_ARITY(...) \\ static_assert( \\ false, \\ \"MOCK_METHOD must be called with 3 or 4 arguments. _Ret, \" \\ \"_MethodName, _Args and optionally _Spec. _Args and _Spec must be \" \\ \"enclosed in parentheses. If _Ret is a type with unprotected commas, \" \\ \"it must also be enclosed in parentheses.\") #define GMOCK_INTERNAL_ASSERT_PARENTHESIS(_Tuple) \\ static_assert( \\ GMOCK_PP_IS_ENCLOSED_PARENS(_Tuple), \\ GMOCK_PP_STRINGIZE(_Tuple) \" should be enclosed in parentheses.\") #define GMOCK_INTERNAL_ASSERT_VALID_SIGNATURE(_N, ...) \\ static_assert( \\ std::is_function<__VA_ARGS__>::value, \\ \"Signature must be a function type, maybe return type contains \" \\ \"unprotected comma.\")"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "static_assert(\\ ::testing::tuple_size<typename ::testing::internal::Function< \\ __VA_ARGS__>::ArgumentTuple>::value == _N, \\ \"This method does not take \" GMOCK_PP_STRINGIZE( \\ _N) \" arguments. Parenthesize all types with unproctected commas.\") #define GMOCK_INTERNAL_ASSERT_VALID_SPEC(_Spec) \\ GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_ASSERT_VALID_SPEC_ELEMENT, ~, _Spec) #define GMOCK_INTERNAL_MOCK_METHOD_IMPL(_N, _MethodName, _Constness, \\ _Override, _Final, _Noexcept, \\ _CallType, _Signature) \\ typename ::testing::internal::Function<GMOCK_PP_REMOVE_PARENS( \\ _Signature)>::Result \\ GMOCK_INTERNAL_EXPAND(_CallType) \\ _MethodName(GMOCK_PP_REPEAT(GMOCK_INTERNAL_PARAMETER, _Signature, _N)) \\ GMOCK_PP_IF(_Constness, const, ) GMOCK_PP_IF(_Noexcept, noexcept, ) \\ GMOCK_PP_IF(_Override, override, ) \\ GMOCK_PP_IF(_Final, final,)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(_N, _Constness, _MethodName) \\ .SetOwnerAndName(this, #_MethodName)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(_N, _Constness, _MethodName) \\ .Invoke(GMOCK_PP_REPEAT(GMOCK_INTERNAL_FORWARD_ARG, _Signature, _N))"
  },
  {
    "label": "GMOCK_PP_REMOVE_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<)",
    "insertText": "GMOCK_PP_REMOVE_PARENS(_Signature)> gmock_##_MethodName( \\ GMOCK_PP_REPEAT(GMOCK_INTERNAL_MATCHER_PARAMETER, _Signature, _N)) \\ GMOCK_PP_IF(_Constness, const,)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "GMOCK_MOCKER_(_N, _Constness, _MethodName).RegisterOwner(this)"
  },
  {
    "label": "GMOCK_MOCKER_()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_MOCKER_(_N, _Constness, _MethodName) \\ .With(GMOCK_PP_REPEAT(GMOCK_INTERNAL_MATCHER_ARGUMENT, , _N))"
  },
  {
    "label": "GMOCK_PP_REMOVE_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::MockSpec<)",
    "insertText": "GMOCK_PP_REMOVE_PARENS(_Signature)> gmock_##_MethodName( \\ const ::testing::internal::WithoutMatchers&, \\ GMOCK_PP_IF(_Constness, const, )::testing::internal::Function< \\ GMOCK_PP_REMOVE_PARENS(_Signature)>*) \\ const GMOCK_PP_IF(_Noexcept, noexcept,)"
  },
  {
    "label": "GMOCK_PP_CAT()",
    "kind": "Method",
    "detail": "Function (\\ return)",
    "insertText": "GMOCK_PP_CAT(::testing::internal::AdjustConstness_, \\ GMOCK_PP_IF(_Constness, const, ))(this) \\ ->gmock_##_MethodName(GMOCK_PP_REPEAT( \\ GMOCK_INTERNAL_A_MATCHER_ARGUMENT, _Signature, _N))"
  },
  {
    "label": "GMOCK_PP_REMOVE_PARENS()",
    "kind": "Method",
    "detail": "Function (\\ } \\::testing::FunctionMocker<)",
    "insertText": "GMOCK_PP_REMOVE_PARENS(_Signature)> \\ GMOCK_MOCKER_(_N, _Constness, _MethodName) #define GMOCK_INTERNAL_EXPAND(...) __VA_ARGS__ #define GMOCK_INTERNAL_HAS_CONST(_Tuple) \\ GMOCK_PP_HAS_COMMA(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_DETECT_CONST, ~, _Tuple)) #define GMOCK_INTERNAL_HAS_OVERRIDE(_Tuple) \\ GMOCK_PP_HAS_COMMA( \\ GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_DETECT_OVERRIDE, ~, _Tuple)) #define GMOCK_INTERNAL_HAS_FINAL(_Tuple) \\ GMOCK_PP_HAS_COMMA(GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_DETECT_FINAL, ~, _Tuple)) #define GMOCK_INTERNAL_HAS_NOEXCEPT(_Tuple) \\ GMOCK_PP_HAS_COMMA( \\ GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_DETECT_NOEXCEPT, ~, _Tuple)) #define GMOCK_INTERNAL_GET_CALLTYPE(_Tuple) \\ GMOCK_PP_FOR_EACH(GMOCK_INTERNAL_GET_CALLTYPE_IMPL, ~, _Tuple) #define GMOCK_INTERNAL_ASSERT_VALID_SPEC_ELEMENT(_i, _, _elem) \\ static_assert( \\ (GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_CONST(_i, _, _elem)) + \\ GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_OVERRIDE(_i, _, _elem)) + \\ GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_FINAL(_i, _, _elem)) + \\ GMOCK_PP_HAS_COMMA(GMOCK_INTERNAL_DETECT_NOEXCEPT(_i, _, _elem)) + \\ GMOCK_INTERNAL_IS_CALLTYPE(_elem)) == 1, \\ GMOCK_PP_STRINGIZE( \\ _elem) \" cannot be recognized as a valid specification modifier.\")"
  }
]