[
  {
    "label": "Benchmark()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreGlobals . h \" # include \" CoreTypes . h \" # include \" HAL / PlatformTime . h \" # include \" Math / NumericLimits . h \" template<uint32 NumRuns,TestT> void)",
    "insertText": "Benchmark(const TCHAR* TestName, TestT&& TestBody)"
  },
  {
    "label": "TestBody()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestBody()"
  },
  {
    "label": "Seconds()",
    "kind": "Method",
    "detail": "Function (Time =)",
    "insertText": "Seconds()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (TotalTime + = Time ;)",
    "insertText": "if(MinTime > Time)"
  },
  {
    "label": "UE_LOG()",
    "kind": "Method",
    "detail": "Function (MinTime = Time ; } })",
    "insertText": "UE_LOG(LogTemp, Log, TEXT(\"min: %f secs, avg: %f secs\\n-------------------------------\\n\"), MinTime, TotalTime / NumRuns)"
  },
  {
    "label": "printf()",
    "kind": "Method",
    "detail": "Function (# if NO_LOGGING)",
    "insertText": "printf(\"%s\\nmin: %f secs, avg: %f secs\\n-------------------------------\\n\\n\", TCHAR_TO_ANSI(TestName), MinTime, TotalTime / NumRuns)"
  },
  {
    "label": "UE_BENCHMARK()",
    "kind": "Method",
    "detail": "Function (# endif } # define)",
    "insertText": "UE_BENCHMARK(NumRuns, ...)"
  },
  {
    "label": "TRACE_CPUPROFILER_EVENT_SCOPE_STR()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TRACE_CPUPROFILER_EVENT_SCOPE_STR(TEXT(#__VA_ARGS__))"
  },
  {
    "label": "NumRuns()",
    "kind": "Method",
    "detail": "Function (Benchmark<)",
    "insertText": "NumRuns(TEXT(#__VA_ARGS__), __VA_ARGS__)"
  }
]