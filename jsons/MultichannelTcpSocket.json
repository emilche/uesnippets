[
  {
    "label": "FSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSocket"
  },
  {
    "label": "FMultichannelTcpSocket",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FMultichannelTcpSocket"
  },
  {
    "label": "FReceiveBuffer",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FReceiveBuffer"
  },
  {
    "label": "FMultichannelTcpSocket()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Serialization / BufferArchive . h \" # include \" Misc / ScopedEvent . h \" # include \" Misc / ScopeLock . h \" # include \" Serialization / MemoryReader . h \" # include \" MultichannelTcpReceiver . h \" # include \" MultichannelTcpSender . h \" class FSocket ; class FMultichannelTcpSocket { enum { ControlChannel = 0 } ; public :)",
    "insertText": "FMultichannelTcpSocket(FSocket* InSocket, uint64 InBandwidthLatencyProduct ) : BandwidthLatencyProduct(InBandwidthLatencyProduct) , RemoteReceiverBytesReceived(0) , Receiver(InSocket, FOnMultichannelTcpReceive::CreateRaw(this, &FMultichannelTcpSocket::HandleReceiverReceive)) , Sender(InSocket, FOnMultichannelTcpOkToSend::CreateRaw(this, &FMultichannelTcpSocket::HandleSenderOkToSend)) , Socket(InSocket)"
  },
  {
    "label": "BlockingReceive()",
    "kind": "Method",
    "detail": "Function (} public : int32)",
    "insertText": "BlockingReceive(uint8* Data, int32 Count, uint32 Channel)"
  },
  {
    "label": "ScopeLock()",
    "kind": "Method",
    "detail": "Function (FScopedEvent* LocalEventToRestart = NULL ; { FScopeLock)",
    "insertText": "ScopeLock(&ReceiveBuffersCriticalSection)"
  },
  {
    "label": "FindRef()",
    "kind": "Method",
    "detail": "Function (FReceiveBuffer* ChannelBuffer = ReceiveBuffers .)",
    "insertText": "FindRef(Channel)"
  },
  {
    "label": "FReceiveBuffer()",
    "kind": "Method",
    "detail": "Function (ChannelBuffer = new)",
    "insertText": "FReceiveBuffer()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (ReceiveBuffers .)",
    "insertText": "Add(Channel, ChannelBuffer)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(!ChannelBuffer->EventToResumeWhenDataIsReady && !ChannelBuffer->BytesRequiredToResume)"
  },
  {
    "label": "Memcpy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Memcpy(Data, ChannelBuffer->Buffer.GetData(), Count)"
  },
  {
    "label": "Remove()",
    "kind": "Method",
    "detail": "Function (ReceiveBuffers .)",
    "insertText": "Remove(Channel)"
  },
  {
    "label": "RemoveAt()",
    "kind": "Method",
    "detail": "Function (} else { ChannelBuffer -> Buffer .)",
    "insertText": "RemoveAt(0, Count)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} return Count ; })",
    "insertText": "if(!Attempt)"
  },
  {
    "label": "FScopedEvent()",
    "kind": "Method",
    "detail": "Function (LocalEventToRestart = new)",
    "insertText": "FScopedEvent()"
  },
  {
    "label": "DataAvailable()",
    "kind": "Method",
    "detail": "Function (ChannelBuffer -> EventToResumeWhenDataIsReady = LocalEventToRestart ; ChannelBuffer -> BytesRequiredToResume = Count ; } } delete LocalEventToRestart ; } } return 0 ; } int32)",
    "insertText": "DataAvailable(uint32 Channel)"
  },
  {
    "label": "PollingReceive()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "PollingReceive(uint8* Data, int32 MaxCount, uint32 Channel)"
  },
  {
    "label": "int32()",
    "kind": "Method",
    "detail": "Function (int32 Count = FMath::Min<)",
    "insertText": "int32(ChannelBuffer->Buffer.Num(), MaxCount)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (} return Count ; } void)",
    "insertText": "Send(const uint8* Data, int32 Count, uint32 Channel)"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (Sender .)",
    "insertText": "Send(Data, Count, Channel)"
  },
  {
    "label": "FReceiveBuffer()",
    "kind": "Method",
    "detail": "Function (} private : struct FReceiveBuffer { TArray<uint8> Buffer ; int32 BytesRequiredToResume ; FScopedEvent* EventToResumeWhenDataIsReady ;)",
    "insertText": "FReceiveBuffer() : BytesRequiredToResume(0) , EventToResumeWhenDataIsReady(NULL)"
  },
  {
    "label": "HandleReceiverReceive()",
    "kind": "Method",
    "detail": "Function (} } ; void)",
    "insertText": "HandleReceiverReceive(const TArray<uint8>& Payload, uint32 Channel, bool bForceByteswapping)"
  },
  {
    "label": "Ar()",
    "kind": "Method",
    "detail": "Function (FMemoryReader)",
    "insertText": "Ar(Payload)"
  },
  {
    "label": "SetByteSwapping()",
    "kind": "Method",
    "detail": "Function (Ar .)",
    "insertText": "SetByteSwapping(bForceByteswapping)"
  },
  {
    "label": "AttemptResumeSending()",
    "kind": "Method",
    "detail": "Function (uint64 RemoteBytesReceived ; Ar<<RemoteBytesReceived ; RemoteReceiverBytesReceived = RemoteBytesReceived ; Sender .)",
    "insertText": "AttemptResumeSending()"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} ChannelBuffer -> Buffer + = Payload ;)",
    "insertText": "if(ChannelBuffer->Buffer.Num() >= ChannelBuffer->BytesRequiredToResume && ChannelBuffer->EventToResumeWhenDataIsReady)"
  },
  {
    "label": "Trigger()",
    "kind": "Method",
    "detail": "Function (ChannelBuffer -> EventToResumeWhenDataIsReady ->)",
    "insertText": "Trigger()"
  },
  {
    "label": "GetBytesReceived()",
    "kind": "Method",
    "detail": "Function (ChannelBuffer -> EventToResumeWhenDataIsReady = NULL ; ChannelBuffer -> BytesRequiredToResume = 0 ; } } { FBufferArchive Ar ; uint64 BytesReceived = Receiver .)",
    "insertText": "GetBytesReceived()"
  },
  {
    "label": "Send()",
    "kind": "Method",
    "detail": "Function (Ar<<BytesReceived ; Sender .)",
    "insertText": "Send(Ar.GetData(), Ar.Num(), ControlChannel)"
  },
  {
    "label": "HandleSenderOkToSend()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "HandleSenderOkToSend(int32 PayloadSize, uint32 Channel)"
  }
]