[
  {
    "label": "IAudioModulationManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IAudioModulationManager"
  },
  {
    "label": "ISoundModulatable",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ISoundModulatable"
  },
  {
    "label": "UObject",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UObject"
  },
  {
    "label": "USoundModulatorBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundModulatorBase"
  },
  {
    "label": "FAudioPluginInitializationParams",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPluginInitializationParams"
  },
  {
    "label": "FAudioPluginSourceInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPluginSourceInputData"
  },
  {
    "label": "FAudioPluginSourceOutputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioPluginSourceOutputData"
  },
  {
    "label": "FCanvas",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCanvas"
  },
  {
    "label": "FCommonViewportClient",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCommonViewportClient"
  },
  {
    "label": "FViewport",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FViewport"
  },
  {
    "label": "UFont",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UFont"
  },
  {
    "label": "FModulationParameter",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModulationParameter"
  },
  {
    "label": "IModulatorSettings",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "IModulatorSettings"
  },
  {
    "label": "FModulatorHandle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FModulatorHandle"
  },
  {
    "label": "FSoundModulatorAssetProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundModulatorAssetProxy"
  },
  {
    "label": "FSoundModulationParameterAssetProxy",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundModulationParameterAssetProxy"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" AudioDefines . h \" # include \" CoreTypes . h \" # include \" DSP / BufferVectorOperations . h \" # include \" IAudioExtensionPlugin . h \" # include \" IAudioProxyInitializer . h \" # include \" Internationalization / Text . h \" # include \" Math / MathFwd . h \" # include \" Math / Rotator . h \" # include \" Misc / AssertionMacros . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include \" Templates / UniquePtr . h \" # include \" Templates / UnrealTemplate . h \" # include \" UObject / NameTypes . h \" # include \" UObject / Object . h \" # include \" UObject / ObjectMacros . h \" # include \" UObject / UObjectGlobals . h \" # include \" IAudioModulation . generated . h \" class IAudioModulationManager ; class ISoundModulatable ; class UObject ; class USoundModulatorBase ; struct FAudioPluginInitializationParams ; struct FAudioPluginSourceInputData ; struct FAudioPluginSourceOutputData ; # if ! UE_BUILD_SHIPPING class FCanvas ; class FCommonViewportClient ; class FViewport ; class UFont ; # endif namespace Audio { using FModulatorId = uint32 ; using FModulatorTypeId = uint32 ; using FModulatorHandleId = uint32 ; using FModulationUnitConversionFunction = TFunction<)",
    "insertText": "void(float&)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (using FModulationMixFunction = TFunction<)",
    "insertText": "void(float& , float)"
  },
  {
    "label": "FModulationParameter()",
    "kind": "Method",
    "detail": "Function (struct FModulationParameter {)",
    "insertText": "FModulationParameter()"
  },
  {
    "label": "FModulationParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulationParameter(const FModulationParameter& InParam)"
  },
  {
    "label": "FModulationParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulationParameter(FModulationParameter&& InParam)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModulationParameter&)",
    "insertText": "operator(FModulationParameter&& InParam)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModulationParameter&)",
    "insertText": "operator(const FModulationParameter& InParam)"
  },
  {
    "label": "GetDefaultMixFunction()",
    "kind": "Method",
    "detail": "Function (FName ParameterName ; float DefaultValue = 1 . 0 f ; float MinValue = 0 . 0 f ; float MaxValue = 1 . 0 f ; bool bRequiresConversion = false ; uint32 TypeHash = INDEX_NONE ; # if WITH_EDITORONLY_DATA FText UnitDisplayName ; FName ClassName ; # endif FModulationMixFunction MixFunction ; FModulationUnitConversionFunction UnitFunction ; FModulationNormalizedConversionFunction NormalizedFunction ; const FModulationMixFunction&)",
    "insertText": "GetDefaultMixFunction()"
  },
  {
    "label": "GetDefaultUnitConversionFunction()",
    "kind": "Method",
    "detail": "Function (const FModulationUnitConversionFunction&)",
    "insertText": "GetDefaultUnitConversionFunction()"
  },
  {
    "label": "GetDefaultNormalizedConversionFunction()",
    "kind": "Method",
    "detail": "Function (const FModulationNormalizedConversionFunction&)",
    "insertText": "GetDefaultNormalizedConversionFunction()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FModulationParameter& InModulationParameter)"
  },
  {
    "label": "RegisterModulationParameter()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterModulationParameter(FName InName, FModulationParameter&& InParameter)"
  },
  {
    "label": "UnregisterModulationParameter()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "UnregisterModulationParameter(FName InName)"
  },
  {
    "label": "UnregisterAllModulationParameters()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterAllModulationParameters()"
  },
  {
    "label": "GetModulationParameter()",
    "kind": "Method",
    "detail": "Function (const FModulationParameter&)",
    "insertText": "GetModulationParameter(FName InName)"
  },
  {
    "label": "IModulatorSettings()",
    "kind": "Method",
    "detail": "Function (class IModulatorSettings { public : ~)",
    "insertText": "IModulatorSettings()"
  },
  {
    "label": "Clone()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<IModulatorSettings>)",
    "insertText": "Clone()"
  },
  {
    "label": "GetModulatorId()",
    "kind": "Method",
    "detail": "Function (FModulatorId)",
    "insertText": "GetModulatorId()"
  },
  {
    "label": "GetOutputParameter()",
    "kind": "Method",
    "detail": "Function (const Audio::FModulationParameter&)",
    "insertText": "GetOutputParameter()"
  },
  {
    "label": "Register()",
    "kind": "Method",
    "detail": "Function (Audio::FModulatorTypeId)",
    "insertText": "Register(Audio::FModulatorHandleId HandleId, IAudioModulationManager& InModulation)"
  },
  {
    "label": "FModulatorHandle()",
    "kind": "Method",
    "detail": "Function (} ; struct FModulatorHandle {)",
    "insertText": "FModulatorHandle()"
  },
  {
    "label": "FModulatorHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulatorHandle(Audio::FModulationParameter&& InParameter)"
  },
  {
    "label": "FModulatorHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulatorHandle(IAudioModulationManager& InModulation, const Audio::IModulatorSettings& InModulatorSettings, Audio::FModulationParameter&& InParameter)"
  },
  {
    "label": "FModulatorHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulatorHandle(const FModulatorHandle& InOther)"
  },
  {
    "label": "FModulatorHandle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FModulatorHandle(FModulatorHandle&& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModulatorHandle&)",
    "insertText": "operator(const FModulatorHandle& InOther)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FModulatorHandle&)",
    "insertText": "operator(FModulatorHandle&& InOther)"
  },
  {
    "label": "GetParameter()",
    "kind": "Method",
    "detail": "Function (const FModulationParameter&)",
    "insertText": "GetParameter()"
  },
  {
    "label": "GetTypeId()",
    "kind": "Method",
    "detail": "Function (FModulatorTypeId)",
    "insertText": "GetTypeId()"
  },
  {
    "label": "GetHandleId()",
    "kind": "Method",
    "detail": "Function (FModulatorHandleId)",
    "insertText": "GetHandleId()"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetValue(float& OutValue)"
  },
  {
    "label": "GetValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetValueThreadSafe(float& OutValue)"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetTypeHash(const FModulatorHandle& InModulatorHandle)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FModulatorHandle& Other)"
  },
  {
    "label": "IAudioModulationManager()",
    "kind": "Method",
    "detail": "Function (} private : FModulationParameter Parameter ; FModulatorHandleId HandleId = INDEX_NONE ; FModulatorTypeId ModulatorTypeId = INDEX_NONE ; FModulatorId ModulatorId = INDEX_NONE ; TWeakPtr<IAudioModulationManager> Modulation ; } ; } class IAudioModulationManager : public TSharedFromThis<IAudioModulationManager> { public : ~)",
    "insertText": "IAudioModulationManager()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize(const FAudioPluginInitializationParams& InitializationParams)"
  },
  {
    "label": "OnAuditionEnd()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnAuditionEnd()"
  },
  {
    "label": "OnPostHelp()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING bool)",
    "insertText": "OnPostHelp(FCommonViewportClient* ViewportClient, const TCHAR* Stream)"
  },
  {
    "label": "OnRenderStat()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "OnRenderStat(FViewport* Viewport, FCanvas* Canvas, int32 X, int32 Y, const UFont& Font, const FVector* ViewLocation, const FRotator* ViewRotation)"
  },
  {
    "label": "OnToggleStat()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "OnToggleStat(FCommonViewportClient* ViewportClient, const TCHAR* Stream)"
  },
  {
    "label": "ProcessModulators()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "ProcessModulators(const double InElapsed)"
  },
  {
    "label": "UpdateModulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateModulator(const USoundModulatorBase& InModulator)"
  },
  {
    "label": "RegisterModulator()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "RegisterModulator(uint32 InHandleId, Audio::FModulatorId InModulatorId)"
  },
  {
    "label": "GetModulatorValue()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetModulatorValue(const Audio::FModulatorHandle& ModulatorHandle, float& OutValue)"
  },
  {
    "label": "GetModulatorValueThreadSafe()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GetModulatorValueThreadSafe(const Audio::FModulatorHandle& ModulatorHandle, float& OutValue)"
  },
  {
    "label": "UnregisterModulator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UnregisterModulator(const Audio::FModulatorHandle& InHandle)"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (Audio::FModulatorHandle ; } ;)",
    "insertText": "UCLASS(config = Engine, abstract, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AUDIOEXTENSIONS_API virtual const Audio::FModulationParameter& GetOutputParameter()"
  },
  {
    "label": "CreateProxyData()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<Audio::IProxyData>)",
    "insertText": "CreateProxyData(const Audio::FProxyDataInitParams& InitParams)"
  },
  {
    "label": "CreateProxySettings()",
    "kind": "Method",
    "detail": "Function (TUniquePtr<Audio::IModulatorSettings>)",
    "insertText": "CreateProxySettings()"
  },
  {
    "label": "IMPL_AUDIOPROXY_CLASS()",
    "kind": "Method",
    "detail": "Function (} ; class FSoundModulatorAssetProxy : public Audio::TProxyData<FSoundModulatorAssetProxy>,public TSharedFromThis<FSoundModulatorAssetProxy,ESPMode::ThreadSafe> { public :)",
    "insertText": "IMPL_AUDIOPROXY_CLASS(FSoundModulatorAssetProxy)"
  },
  {
    "label": "FSoundModulatorAssetProxy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FSoundModulatorAssetProxy(const FSoundModulatorAssetProxy& InAssetProxy) : Parameter(InAssetProxy.Parameter) , ModulatorSettings(InAssetProxy.ModulatorSettings.IsValid() ? InAssetProxy.ModulatorSettings->Clone() : nullptr)"
  },
  {
    "label": "FSoundModulatorAssetProxy()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSoundModulatorAssetProxy(const USoundModulatorBase& InModulatorBase) : Parameter(InModulatorBase.GetOutputParameter()) , ModulatorSettings(InModulatorBase.CreateProxySettings())"
  },
  {
    "label": "CreateModulatorHandle()",
    "kind": "Method",
    "detail": "Function (} Audio::FModulatorHandle)",
    "insertText": "CreateModulatorHandle(IAudioModulationManager& InModulation)"
  },
  {
    "label": "FModulatorHandle()",
    "kind": "Method",
    "detail": "Function (Audio::FModulationParameter HandleParameter = Parameter ; return)",
    "insertText": "FModulatorHandle(InModulation, *ModulatorSettings.Get(), MoveTemp(HandleParameter))"
  },
  {
    "label": "IMPL_AUDIOPROXY_CLASS()",
    "kind": "Method",
    "detail": "Function (} protected : Audio::FModulationParameter Parameter ; TUniquePtr<Audio::IModulatorSettings> ModulatorSettings ; } ; using FSoundModulatorAssetProxyPtr = TSharedPtr<FSoundModulatorAssetProxy,ESPMode::ThreadSafe> ; class FSoundModulationParameterAssetProxy : public Audio::TProxyData<FSoundModulationParameterAssetProxy>,public TSharedFromThis<FSoundModulationParameterAssetProxy,ESPMode::ThreadSafe> { public :)",
    "insertText": "IMPL_AUDIOPROXY_CLASS(FSoundModulationParameterAssetProxy)"
  },
  {
    "label": "GetObjectId()",
    "kind": "Method",
    "detail": "Function (uint32)",
    "insertText": "GetObjectId()"
  },
  {
    "label": "GetPlayCount()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetPlayCount()"
  },
  {
    "label": "IsPreviewSound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsPreviewSound()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  }
]