[
  {
    "label": "FCompositeFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCompositeFontCache"
  },
  {
    "label": "FFreeTypeAdvanceCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeAdvanceCache"
  },
  {
    "label": "FFreeTypeCacheDirectory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeCacheDirectory"
  },
  {
    "label": "FFreeTypeFace",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeFace"
  },
  {
    "label": "FFreeTypeGlyphCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeGlyphCache"
  },
  {
    "label": "FFreeTypeKerningCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeKerningCache"
  },
  {
    "label": "FFreeTypeLibrary",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FFreeTypeLibrary"
  },
  {
    "label": "FShapedGlyphFaceData",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapedGlyphFaceData"
  },
  {
    "label": "FSlateFontCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontCache"
  },
  {
    "label": "FSlateFontRenderer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateFontRenderer"
  },
  {
    "label": "FSlateShaderResource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateShaderResource"
  },
  {
    "label": "FSlateTextShaper",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateTextShaper"
  },
  {
    "label": "FSlateSdfGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSlateSdfGenerator"
  },
  {
    "label": "class",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "class"
  },
  {
    "label": "FShapedGlyphFontAtlasData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapedGlyphFontAtlasData"
  },
  {
    "label": "FSdfGlyphFontAtlasData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSdfGlyphFontAtlasData"
  },
  {
    "label": "FMetrics",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FMetrics"
  },
  {
    "label": "FShapedGlyphEntry",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapedGlyphEntry"
  },
  {
    "label": "FShapedGlyphEntryKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FShapedGlyphEntryKey"
  },
  {
    "label": "FFontCacheStatsKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFontCacheStatsKey"
  },
  {
    "label": "FSdfGlyphEntryKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSdfGlyphEntryKey"
  },
  {
    "label": "FSdfGlyphTaskKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSdfGlyphTaskKey"
  },
  {
    "label": "FShapedGlyphSequence",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FShapedGlyphSequence"
  },
  {
    "label": "FSourceTextRange",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceTextRange"
  },
  {
    "label": "FGlyphOffsetResult",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FGlyphOffsetResult"
  },
  {
    "label": "FSourceIndexToGlyphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceIndexToGlyphData"
  },
  {
    "label": "FSourceIndicesToGlyphData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSourceIndicesToGlyphData"
  },
  {
    "label": "SLATECORE_API",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "SLATECORE_API"
  },
  {
    "label": "FCharacterList",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCharacterList"
  },
  {
    "label": "IsSlateSdfTextFeatureEnabled()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" SlateGlobals . h \" # include \" Fonts / ShapedTextFwd . h \" # include \" UObject / ObjectMacros . h \" # include \" Fonts / SlateFontInfo . h \" # include \" Fonts / FontRasterizationMode . h \" # include \" Fonts / FontSdfSettings . h \" # include \" Textures / TextureAtlas . h \" # include \" Fonts / FontTypes . h \" # include \" FontCache . generated . h \" class FCompositeFontCache ; class FFreeTypeAdvanceCache ; class FFreeTypeCacheDirectory ; class FFreeTypeFace ; class FFreeTypeGlyphCache ; class FFreeTypeKerningCache ; class FFreeTypeLibrary ; class FShapedGlyphFaceData ; class FSlateFontCache ; class FSlateFontRenderer ; class FSlateShaderResource ; class FSlateTextShaper ; class FSlateSdfGenerator ; bool)",
    "insertText": "IsSlateSdfTextFeatureEnabled()"
  },
  {
    "label": "UENUM()",
    "kind": "Method",
    "detail": "Function (enum class EFontCacheAtlasDataType : uint8 { Regular = 0,Outline,Num,} ;)",
    "insertText": "UENUM(BlueprintType)"
  },
  {
    "label": "GetDefaultTextShapingMethod()",
    "kind": "Method",
    "detail": "Function (Auto = 0,KerningOnly,FullShaping,} ; ETextShapingMethod)",
    "insertText": "GetDefaultTextShapingMethod()"
  },
  {
    "label": "HasValidGlyph()",
    "kind": "Method",
    "detail": "Function (struct FShapedGlyphFontAtlasData { int16 VerticalOffset = 0 ; int16 HorizontalOffset = 0 ; uint16 StartU = 0 ; uint16 StartV = 0 ; uint16 USize = 0 ; uint16 VSize = 0 ; uint8 TextureIndex = 0 ; bool SupportsOutline = false ; bool Valid = false ; } ; struct FSdfGlyphFontAtlasData { int16 VerticalOffset = 0 ; int16 HorizontalOffset = 0 ; uint16 StartU = 0 ; uint16 StartV = 0 ; uint16 USize = 0 ; uint16 VSize = 0 ; float EmOuterSpread = 0 . f ; float EmInnerSpread = 0 . f ; struct FMetrics { float BearingX = 0 . f ; float BearingY = 0 . f ; float Width = 0 . f ; float Height = 0 . f ; } ; FMetrics Metrics ; uint8 TextureIndex = 0 ; bool bSupportsSdf = false ; bool bPendingRespawn = false ; bool Valid = false ; } ; struct FShapedGlyphEntry { class FSlateFontCache ; TSharedPtr<FShapedGlyphFaceData> FontFaceData ; uint32 GlyphIndex = 0 ; int32 SourceIndex = 0 ; int16 XAdvance = 0 ; int16 YAdvance = 0 ; int16 XOffset = 0 ; int16 YOffset = 0 ; int8 Kerning = 0 ; uint8 NumCharactersInGlyph = 0 ; uint8 NumGraphemeClustersInGlyph = 0 ; TextBiDi::ETextDirection TextDirection = TextBiDi::ETextDirection::LeftToRight ; bool bIsVisible = false ; bool)",
    "insertText": "HasValidGlyph()"
  },
  {
    "label": "GetBitmapRenderScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetBitmapRenderScale()"
  },
  {
    "label": "CachedAtlasData()",
    "kind": "Method",
    "detail": "Function (private : TWeakPtr<FShapedGlyphFontAtlasData>)",
    "insertText": "CachedAtlasData(uint8)"
  },
  {
    "label": "FShapedGlyphEntryKey()",
    "kind": "Method",
    "detail": "Function (TWeakPtr<FSdfGlyphFontAtlasData> CachedSdfFontAtlasData [ 2 ] ; FSdfGlyphFontAtlasData::FMetrics CachedSdfMetrics [ 2 ] ; } ; struct FShapedGlyphEntryKey { struct FFontCacheStatsKey ; class FSlateFontCache ; public :)",
    "insertText": "FShapedGlyphEntryKey(const FShapedGlyphFaceData& InFontFaceData, uint32 InGlyphIndex, const FFontOutlineSettings& InOutlineSettings)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FShapedGlyphEntryKey& Key)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSdfGlyphEntryKey& Key)"
  },
  {
    "label": "FSdfGlyphTaskKey()",
    "kind": "Method",
    "detail": "Function (} ; struct FSdfGlyphTaskKey { public :)",
    "insertText": "FSdfGlyphTaskKey(const FSdfGlyphEntryKey& InSdfGlyphEntryKey, float InEmOuterSpread, float InEmInnerSpread)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FSdfGlyphTaskKey& Key)"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (} int32 TextStart ; int32 TextLen ; } ;)",
    "insertText": "FShapedGlyphSequence() : GlyphsToRender() , TextBaseline(0) , MaxTextHeight(0) , bMaterialIsStencil(false) , FontMaterial(nullptr) , OutlineSettings() , SequenceWidth(0) , GlyphFontFaces() , SourceIndicesToGlyphData(FSourceTextRange(0, 0)) , CachedFontSkew(0.f)"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FShapedGlyphSequence(TArray<FShapedGlyphEntry> InGlyphsToRender, const int16 InTextBaseline, const uint16 InMaxTextHeight, const UObject* InFontMaterial, const bool InMaterialIsStencil, const FFontOutlineSettings& InOutlineSettings, const FSourceTextRange& InSourceTextRange)"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FShapedGlyphSequence()"
  },
  {
    "label": "GetAllocatedSize()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetAllocatedSize()"
  },
  {
    "label": "GetGlyphsToRender()",
    "kind": "Method",
    "detail": "Function (const TArray<FShapedGlyphEntry>&)",
    "insertText": "GetGlyphsToRender()"
  },
  {
    "label": "GetFontSkew()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetFontSkew()"
  },
  {
    "label": "GetMeasuredWidth()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetMeasuredWidth()"
  },
  {
    "label": "GetMeasuredWidth()",
    "kind": "Method",
    "detail": "Function (TOptional<int32>)",
    "insertText": "GetMeasuredWidth(const int32 InStartIndex, const int32 InEndIndex, const bool InIncludeKerningWithPrecedingGlyph = true)"
  },
  {
    "label": "FGlyphOffsetResult()",
    "kind": "Method",
    "detail": "Function (struct FGlyphOffsetResult {)",
    "insertText": "FGlyphOffsetResult() : Glyph(nullptr) , GlyphOffset(0) , CharacterIndex(0)"
  },
  {
    "label": "FGlyphOffsetResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGlyphOffsetResult(const int32 InCharacterIndex) : Glyph(nullptr) , GlyphOffset(0) , CharacterIndex(InCharacterIndex)"
  },
  {
    "label": "FGlyphOffsetResult()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FGlyphOffsetResult(const FShapedGlyphEntry* InGlyph, const int32 InGlyphOffset) : Glyph(InGlyph) , GlyphOffset(InGlyphOffset) , CharacterIndex(InGlyph->SourceIndex)"
  },
  {
    "label": "GetGlyphAtOffset()",
    "kind": "Method",
    "detail": "Function (} const FShapedGlyphEntry* Glyph ; int32 GlyphOffset ; int32 CharacterIndex ; } ; FGlyphOffsetResult)",
    "insertText": "GetGlyphAtOffset(FSlateFontCache& InFontCache, const int32 InHorizontalOffset, const int32 InStartOffset = 0)"
  },
  {
    "label": "GetGlyphAtOffset()",
    "kind": "Method",
    "detail": "Function (TOptional<FGlyphOffsetResult>)",
    "insertText": "GetGlyphAtOffset(FSlateFontCache& InFontCache, const int32 InStartIndex, const int32 InEndIndex, const int32 InHorizontalOffset, const int32 InStartOffset = 0, const bool InIncludeKerningWithPrecedingGlyph = true)"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (TOptional<int8>)",
    "insertText": "GetKerning(const int32 InIndex)"
  },
  {
    "label": "GetSubSequence()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequencePtr)",
    "insertText": "GetSubSequence(const int32 InStartIndex, const int32 InEndIndex)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "FShapedGlyphSequence()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FShapedGlyphSequence(const FShapedGlyphSequence&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequence&)",
    "insertText": "operator(const FShapedGlyphSequence&)"
  },
  {
    "label": "HasFoundGlyphAtOffset()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasFoundGlyphAtOffset(FSlateFontCache& InFontCache, const int32 InHorizontalOffset, const FShapedGlyphEntry& InCurrentGlyph, const int32 InCurrentGlyphIndex, int32& InOutCurrentOffset, const FShapedGlyphEntry*& OutMatchedGlyph)"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (enum class EEnumerateGlyphsResult : uint8 { EnumerationFailed,EnumerationAborted,EnumerationComplete } ; typedef TFunctionRef<)",
    "insertText": "bool(const FShapedGlyphEntry&, int32)"
  },
  {
    "label": "EnumerateLogicalGlyphsInSourceRange()",
    "kind": "Method",
    "detail": "Function (EEnumerateGlyphsResult)",
    "insertText": "EnumerateLogicalGlyphsInSourceRange(const int32 InStartIndex, const int32 InEndIndex, const FForEachShapedGlyphEntryCallback& InGlyphCallback)"
  },
  {
    "label": "EnumerateVisualGlyphsInSourceRange()",
    "kind": "Method",
    "detail": "Function (EEnumerateGlyphsResult)",
    "insertText": "EnumerateVisualGlyphsInSourceRange(const int32 InStartIndex, const int32 InEndIndex, const FForEachShapedGlyphEntryCallback& InGlyphCallback)"
  },
  {
    "label": "FSourceIndexToGlyphData()",
    "kind": "Method",
    "detail": "Function (struct FSourceIndexToGlyphData {)",
    "insertText": "FSourceIndexToGlyphData() : GlyphIndex(INDEX_NONE) , AdditionalGlyphIndices()"
  },
  {
    "label": "FSourceIndexToGlyphData()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSourceIndexToGlyphData(const int32 InGlyphIndex) : GlyphIndex(InGlyphIndex) , AdditionalGlyphIndices()"
  },
  {
    "label": "IsValid()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsValid()"
  },
  {
    "label": "FSourceIndicesToGlyphData()",
    "kind": "Method",
    "detail": "Function (} int32 GlyphIndex ; TArray<int32> AdditionalGlyphIndices ; } ; struct FSourceIndicesToGlyphData { public :)",
    "insertText": "FSourceIndicesToGlyphData(const FSourceTextRange& InSourceTextRange) : SourceTextRange(InSourceTextRange) , GlyphDataArray()"
  },
  {
    "label": "SetNum()",
    "kind": "Method",
    "detail": "Function (GlyphDataArray .)",
    "insertText": "SetNum(InSourceTextRange.TextLen)"
  },
  {
    "label": "GetSourceTextStartIndex()",
    "kind": "Method",
    "detail": "Function (} int32)",
    "insertText": "GetSourceTextStartIndex()"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (const int32 InternalIndex = InSourceTextIndex - SourceTextRange . TextStart ;)",
    "insertText": "return(GlyphDataArray.IsValidIndex(InternalIndex))"
  },
  {
    "label": "GetGlyphData()",
    "kind": "Method",
    "detail": "Function (} const FSourceIndexToGlyphData*)",
    "insertText": "GetGlyphData(const int32 InSourceTextIndex)"
  },
  {
    "label": "FCharacterList()",
    "kind": "Method",
    "detail": "Function (} private : FSourceTextRange SourceTextRange ; TArray<FSourceIndexToGlyphData> GlyphDataArray ; } ; TArray<FShapedGlyphEntry> GlyphsToRender ; int16 TextBaseline ; uint16 MaxTextHeight ; bool bMaterialIsStencil ; TObjectPtr<const UObject> FontMaterial ; FFontOutlineSettings OutlineSettings ; int32 SequenceWidth ; TArray<TWeakPtr<FFreeTypeFace>> GlyphFontFaces ; FSourceIndicesToGlyphData SourceIndicesToGlyphData ; float CachedFontSkew ; # if SLATE_CHECK_UOBJECT_SHAPED_GLYPH_SEQUENCE TWeakObjectPtr<const UObject> FontMaterialWeakPtr ; TWeakObjectPtr<const UObject> SdfFontMaterialOverrideWeakPtr ; TWeakObjectPtr<const UObject> OutlineMaterialWeakPtr ; FName DebugFontMaterialName ; FName DebugSdfFontMaterialOverrideName ; FName DebugOutlineMaterialName ; # endif } ; struct FCharacterEntry { TCHAR Character = 0 ; uint32 GlyphIndex = 0 ; const FFontData* FontData = nullptr ; TSharedPtr<FFreeTypeKerningCache> KerningCache ; float FontScale = 0 . 0 f ; float BitmapRenderScale = 0 . 0 f ; uint16 StartU = 0 ; uint16 StartV = 0 ; uint16 USize = 0 ; uint16 VSize = 0 ; int16 VerticalOffset = 0 ; int16 HorizontalOffset = 0 ; int16 GlobalDescender = 0 ; int16 XAdvance = 0 ; uint8 TextureIndex = 0 ; EFontFallback FallbackLevel = EFontFallback::FF_Max ; bool HasKerning = false ; bool SupportsOutline = false ; bool Valid = false ; } ; class FCharacterList { public :)",
    "insertText": "FCharacterList(const FSlateFontKey& InFontKey, FSlateFontCache& InFontCache)"
  },
  {
    "label": "GetCharacter()",
    "kind": "Method",
    "detail": "Function (const FCharacterEntry&)",
    "insertText": "GetCharacter(TCHAR Character, const EFontFallback MaxFontFallback)"
  },
  {
    "label": "IsStale()",
    "kind": "Method",
    "detail": "Function (# if WITH_EDITORONLY_DATA bool)",
    "insertText": "IsStale()"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (# endif int8)",
    "insertText": "GetKerning(TCHAR FirstChar, TCHAR SecondChar, const EFontFallback MaxFontFallback)"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetKerning(const FCharacterEntry& FirstCharacterEntry, const FCharacterEntry& SecondCharacterEntry)"
  },
  {
    "label": "GetMaxHeight()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetMaxHeight()"
  },
  {
    "label": "GetBaseline()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetBaseline()"
  },
  {
    "label": "CanCacheCharacter()",
    "kind": "Method",
    "detail": "Function (private : bool)",
    "insertText": "CanCacheCharacter(TCHAR Character, const EFontFallback MaxFontFallback)"
  },
  {
    "label": "CacheCharacter()",
    "kind": "Method",
    "detail": "Function (const FCharacterEntry*)",
    "insertText": "CacheCharacter(TCHAR Character)"
  },
  {
    "label": "FSlateFontCache()",
    "kind": "Method",
    "detail": "Function (private : TMap<TCHAR,FCharacterEntry> MappedEntries ; FSlateFontKey FontKey ; FSlateFontCache& FontCache ; # if WITH_EDITORONLY_DATA int32 CompositeFontHistoryRevision ; # endif uint16 MaxHeight ; int16 Baseline ; } ; class FSlateFontCache : public ISlateAtlasProvider,public FSlateFlushableAtlasCache { FCharacterList ; public :)",
    "insertText": "FSlateFontCache(TSharedRef<ISlateFontAtlasFactory> InFontAtlasFactory, ESlateTextureAtlasThreadId InOwningThread)"
  },
  {
    "label": "FSlateFontCache()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FSlateFontCache()"
  },
  {
    "label": "GetNumAtlasPages()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetNumAtlasPages()"
  },
  {
    "label": "GetAtlasPageResource()",
    "kind": "Method",
    "detail": "Function (FSlateShaderResource*)",
    "insertText": "GetAtlasPageResource(const int32 InIndex)"
  },
  {
    "label": "IsAtlasPageResourceAlphaOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsAtlasPageResourceAlphaOnly(const int32 InIndex)"
  },
  {
    "label": "GetAtlasSlotInfoAtPosition()",
    "kind": "Method",
    "detail": "Function (# if WITH_ATLAS_DEBUGGING FAtlasSlotInfo)",
    "insertText": "GetAtlasSlotInfoAtPosition(FIntPoint InPosition, int32 AtlasIndex)"
  },
  {
    "label": "ShapeBidirectionalText()",
    "kind": "Method",
    "detail": "Function (# endif FShapedGlyphSequenceRef)",
    "insertText": "ShapeBidirectionalText(const FString& InText, const FSlateFontInfo &InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InBaseDirection, const ETextShapingMethod InTextShapingMethod)"
  },
  {
    "label": "ShapeBidirectionalText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "ShapeBidirectionalText(const TCHAR* InText, const int32 InTextStart, const int32 InTextLen, const FSlateFontInfo &InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InBaseDirection, const ETextShapingMethod InTextShapingMethod)"
  },
  {
    "label": "ShapeUnidirectionalText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "ShapeUnidirectionalText(const FString& InText, const FSlateFontInfo &InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InTextDirection, const ETextShapingMethod InTextShapingMethod)"
  },
  {
    "label": "ShapeUnidirectionalText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "ShapeUnidirectionalText(const TCHAR* InText, const int32 InTextStart, const int32 InTextLen, const FSlateFontInfo &InFontInfo, const float InFontScale, const TextBiDi::ETextDirection InTextDirection, const ETextShapingMethod InTextShapingMethod)"
  },
  {
    "label": "ShapeOverflowEllipsisText()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphSequenceRef)",
    "insertText": "ShapeOverflowEllipsisText(const FSlateFontInfo& InFontInfo, const float InFontScale)"
  },
  {
    "label": "GetCharacterList()",
    "kind": "Method",
    "detail": "Function (class FCharacterList&)",
    "insertText": "GetCharacterList(const FSlateFontInfo &InFontInfo, float FontScale, const FFontOutlineSettings& InOutlineSettings = FFontOutlineSettings::NoOutline)"
  },
  {
    "label": "GetShapedGlyphFontAtlasData()",
    "kind": "Method",
    "detail": "Function (FShapedGlyphFontAtlasData)",
    "insertText": "GetShapedGlyphFontAtlasData(const FShapedGlyphEntry& InShapedGlyph, const FFontOutlineSettings& InOutlineSettings)"
  },
  {
    "label": "GetSdfGlyphFontAtlasData()",
    "kind": "Method",
    "detail": "Function (FSdfGlyphFontAtlasData)",
    "insertText": "GetSdfGlyphFontAtlasData(const FShapedGlyphEntry& InShapedGlyph, const FFontOutlineSettings& InOutlineSettings)"
  },
  {
    "label": "FlushObject()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "FlushObject(const UObject* const InObject)"
  },
  {
    "label": "FlushCompositeFont()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushCompositeFont(const FCompositeFont& InCompositeFont)"
  },
  {
    "label": "ConditionalFlushCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ConditionalFlushCache()"
  },
  {
    "label": "UpdateCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateCache()"
  },
  {
    "label": "ReleaseResources()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ReleaseResources()"
  },
  {
    "label": "OnReleaseResources()",
    "kind": "Method",
    "detail": "Function (FOnReleaseFontResources&)",
    "insertText": "OnReleaseResources()"
  },
  {
    "label": "GetDefaultFontData()",
    "kind": "Method",
    "detail": "Function (} const FFontData&)",
    "insertText": "GetDefaultFontData(const FSlateFontInfo& InFontInfo)"
  },
  {
    "label": "GetFontDataForCodepoint()",
    "kind": "Method",
    "detail": "Function (const FFontData&)",
    "insertText": "GetFontDataForCodepoint(const FSlateFontInfo& InFontInfo, const UTF32CHAR InCodepoint, float& OutScalingFactor)"
  },
  {
    "label": "GetMaxCharacterHeight()",
    "kind": "Method",
    "detail": "Function (uint16)",
    "insertText": "GetMaxCharacterHeight(const FSlateFontInfo& InFontInfo, float FontScale)"
  },
  {
    "label": "GetBaseline()",
    "kind": "Method",
    "detail": "Function (int16)",
    "insertText": "GetBaseline(const FSlateFontInfo& InFontInfo, float FontScale)"
  },
  {
    "label": "GetUnderlineMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUnderlineMetrics(const FSlateFontInfo& InFontInfo, const float FontScale, int16& OutUnderlinePos, int16& OutUnderlineThickness)"
  },
  {
    "label": "GetStrikeMetrics()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetStrikeMetrics(const FSlateFontInfo& InFontInfo, const float FontScale, int16& OutStrikeLinePos, int16& OutStrikeLineThickness)"
  },
  {
    "label": "GetKerning()",
    "kind": "Method",
    "detail": "Function (int8)",
    "insertText": "GetKerning(const FFontData& InFontData, const float InSize, TCHAR First, TCHAR Second, float Scale)"
  },
  {
    "label": "HasKerning()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasKerning(const FFontData& InFontData)"
  },
  {
    "label": "CanLoadCodepoint()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CanLoadCodepoint(const FFontData& InFontData, const UTF32CHAR InCodepoint, EFontFallback MaxFallbackLevel = EFontFallback::FF_NoFallback)"
  },
  {
    "label": "GetFontAttributes()",
    "kind": "Method",
    "detail": "Function (const TSet<FName>&)",
    "insertText": "GetFontAttributes(const FFontData& InFontData)"
  },
  {
    "label": "GetAvailableFontSubFaces()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAvailableFontSubFaces(FFontFaceDataConstRef InMemory)"
  },
  {
    "label": "GetAvailableFontSubFaces()",
    "kind": "Method",
    "detail": "Function (TArray<FString>)",
    "insertText": "GetAvailableFontSubFaces(const FString& InFilename)"
  },
  {
    "label": "RequestFlushCache()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestFlushCache(const FString& FlushReason)"
  },
  {
    "label": "FlushData()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushData()"
  },
  {
    "label": "GetFontDataAssetResidentMemory()",
    "kind": "Method",
    "detail": "Function (SIZE_T)",
    "insertText": "GetFontDataAssetResidentMemory(const UObject* FontDataAsset)"
  },
  {
    "label": "FSlateFontCache()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FSlateFontCache(const FSlateFontCache&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (FSlateFontCache&)",
    "insertText": "operator(const FSlateFontCache&)"
  },
  {
    "label": "GetAllFontTexturesIndex()",
    "kind": "Method",
    "detail": "Function (int32)",
    "insertText": "GetAllFontTexturesIndex(const int32 InIndex)"
  },
  {
    "label": "FlushCache()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "FlushCache()"
  },
  {
    "label": "FlushFontObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FlushFontObjects()"
  },
  {
    "label": "HandleCultureChanged()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "HandleCultureChanged()"
  },
  {
    "label": "AddNewEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewEntry(const FShapedGlyphEntry& InShapedGlyph, const FFontOutlineSettings& InOutlineSettings, FShapedGlyphFontAtlasData& OutAtlasData)"
  },
  {
    "label": "AddNewEntry()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "AddNewEntry(const FCharacterRenderData InRenderData, uint8& OutTextureIndex, uint16& OutGlyphX, uint16& OutGlyphY, uint16& OutGlyphWidth, uint16& OutGlyphHeight, uint8& OutPaddingOffset)"
  },
  {
    "label": "ConditionalDumpFontCacheStats()",
    "kind": "Method",
    "detail": "Function (# if ! UE_BUILD_SHIPPING void)",
    "insertText": "ConditionalDumpFontCacheStats()"
  }
]