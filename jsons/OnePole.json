[
  {
    "label": "FOnePoleLPF",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnePoleLPF"
  },
  {
    "label": "FOnePoleLPFBank",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FOnePoleLPFBank"
  },
  {
    "label": "FOnePoleLPF()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" DSP / Dsp . h \" namespace Audio { class FOnePoleLPF { public :)",
    "insertText": "FOnePoleLPF() : CutoffFrequency(0.0f) , B1(0.0f) , A0(1.0f) , Z1(0.0f)"
  },
  {
    "label": "SetG()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "SetG(float InG)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (B1 = InG ; A0 = 1 . 0 f - B1 ; } void)",
    "insertText": "Reset()"
  },
  {
    "label": "SetFrequency()",
    "kind": "Method",
    "detail": "Function (B1 = 0 . 0 f ; A0 = 1 . 0 f ; Z1 = 0 . 0 f ; } void)",
    "insertText": "SetFrequency(const float InFrequency)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (CutoffFrequency = InFrequency ; B1 =)",
    "insertText": "Exp(-PI * CutoffFrequency)"
  },
  {
    "label": "ProcessAudioSample()",
    "kind": "Method",
    "detail": "Function (A0 = 1 . 0 f - B1 ; } } float)",
    "insertText": "ProcessAudioSample(const float InputSample)"
  },
  {
    "label": "FOnePoleLPFBank()",
    "kind": "Method",
    "detail": "Function (const float Yn = InputSample* A0 + B1* Z1 ; Z1 = Yn ; return Yn ; } protected : float CutoffFrequency ; float B1 ; float A0 ; float Z1 ; } ; class FOnePoleLPFBank { public :)",
    "insertText": "FOnePoleLPFBank() : DelayPtr(nullptr) , NumChannels(1) , CutoffFrequency(-1.0f) , B1(0.0f) , A0(1.0f)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (Z1 .)",
    "insertText": "Init(0.0f, NumChannels)"
  },
  {
    "label": "GetData()",
    "kind": "Method",
    "detail": "Function (DelayPtr = Z1 .)",
    "insertText": "GetData()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Init(int32 InSampleRate, int32 InNumChannels)"
  },
  {
    "label": "ClearMemory()",
    "kind": "Method",
    "detail": "Function (B1 = InG ; A0 = 1 . 0 f - B1 ; } void)",
    "insertText": "ClearMemory()"
  },
  {
    "label": "SetNumZeroed()",
    "kind": "Method",
    "detail": "Function (Z1 .)",
    "insertText": "SetNumZeroed(NumChannels)"
  },
  {
    "label": "Clamp()",
    "kind": "Method",
    "detail": "Function (CutoffFrequency = InFrequency ; float NormalizedFreq =)",
    "insertText": "Clamp(2.0f * InFrequency / SampleRate, 0.0f, 1.0f)"
  },
  {
    "label": "Exp()",
    "kind": "Method",
    "detail": "Function (B1 =)",
    "insertText": "Exp(-PI * NormalizedFreq)"
  },
  {
    "label": "ProcessAudio()",
    "kind": "Method",
    "detail": "Function (A0 = 1 . 0 f - B1 ; } } void)",
    "insertText": "ProcessAudio(float* InputFrame, float* OutputFrame)"
  }
]