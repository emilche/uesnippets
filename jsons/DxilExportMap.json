[
  {
    "label": "Function",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Function"
  },
  {
    "label": "raw_ostream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "raw_ostream"
  },
  {
    "label": "ExportMap",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ExportMap"
  },
  {
    "label": "ExportMap()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" llvm / ADT / MapVector . h \" # include \" llvm / ADT / SmallVector . h \" # include \" llvm / ADT / StringRef . h \" # include \" llvm / ADT / StringSet . h \" # include<set> # include<string> # include<unordered_set> # include<vector> namespace llvm { class Function ; class raw_ostream ; } namespace hlsl { namespace dxilutil { class ExportMap { public : typedef std::unordered_set<std::string> StringStore ; typedef std::set<llvm::StringRef> NameSet ; typedef llvm::MapVector<llvm::Function*,NameSet> RenameMap ; typedef llvm::StringMap<llvm::StringSet<>> ExportMapByString ; typedef ExportMapByString::iterator iterator ; typedef ExportMapByString::const_iterator const_iterator ;)",
    "insertText": "ExportMap() : m_ExportShadersOnly(false)"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "clear()"
  },
  {
    "label": "empty()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "empty()"
  },
  {
    "label": "setExportShadersOnly()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "setExportShadersOnly(bool v)"
  },
  {
    "label": "isExportShadersOnly()",
    "kind": "Method",
    "detail": "Function (m_ExportShadersOnly = v ; } bool)",
    "insertText": "isExportShadersOnly()"
  },
  {
    "label": "begin()",
    "kind": "Method",
    "detail": "Function (} const_iterator)",
    "insertText": "begin()"
  },
  {
    "label": "end()",
    "kind": "Method",
    "detail": "Function (} iterator)",
    "insertText": "end()"
  },
  {
    "label": "ParseExports()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "ParseExports(const std::vector<std::string> &exportOpts, llvm::raw_ostream &errors)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Add(llvm::StringRef exportName, llvm::StringRef internalName = llvm::StringRef())"
  },
  {
    "label": "IsExported()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsExported(llvm::StringRef original)"
  },
  {
    "label": "GetExportsByName()",
    "kind": "Method",
    "detail": "Function (ExportMapByString::const_iterator)",
    "insertText": "GetExportsByName(llvm::StringRef Name)"
  },
  {
    "label": "BeginProcessing()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginProcessing()"
  },
  {
    "label": "ProcessFunction()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ProcessFunction(llvm::Function *F, bool collisionAvoidanceRenaming)"
  },
  {
    "label": "RegisterExportedFunction()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RegisterExportedFunction(llvm::Function *F)"
  },
  {
    "label": "UseExport()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UseExport(llvm::StringRef internalName)"
  },
  {
    "label": "ExportName()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ExportName(llvm::StringRef exportName)"
  },
  {
    "label": "EndProcessing()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EndProcessing()"
  },
  {
    "label": "GetNameCollisions()",
    "kind": "Method",
    "detail": "Function (const NameSet&)",
    "insertText": "GetNameCollisions()"
  }
]