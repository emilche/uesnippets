[
  {
    "label": "DiscreteField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "DiscreteField"
  },
  {
    "label": "EnrightField",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EnrightField"
  },
  {
    "label": "VelocitySampler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VelocitySampler"
  },
  {
    "label": "VelocityIntegrator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VelocityIntegrator"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (# ifndef OPENVDB_TOOLS_VELOCITY_FIELDS_HAS_BEEN_INCLUDED # define OPENVDB_TOOLS_VELOCITY_FIELDS_HAS_BEEN_INCLUDED # include<tbb / parallel_reduce . h> # include<openvdb / Platform . h> # include<openvdb / openvdb . h> # include \" Interpolation . h \" # include<openvdb / math / FiniteDifference . h> namespace openvdb { OPENVDB_USE_VERSION_NAMESPACE namespace OPENVDB_VERSION_NAME { namespace tools { template<VelGridT,Interpolator = BoxSampler> class DiscreteField { public : typedef VelGridT::ValueType VectorType ; typedef VectorType::ValueType ValueType ;)",
    "insertText": "static_assert(std::is_floating_point<ValueType>::value, \"DiscreteField requires a floating point grid.\")"
  },
  {
    "label": "DiscreteField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DiscreteField(const VelGridT &vel) : mAccessor(vel.tree()) , mTransform(&vel.transform())"
  },
  {
    "label": "DiscreteField()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "DiscreteField(const DiscreteField& other) : mAccessor(other.mAccessor.tree()) , mTransform(other.mTransform)"
  },
  {
    "label": "transform()",
    "kind": "Method",
    "detail": "Function (} const math::Transform&)",
    "insertText": "transform()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} VectorType)",
    "insertText": "operator() (const Coord& ijk, ValueType)"
  },
  {
    "label": "static_assert()",
    "kind": "Method",
    "detail": "Function (} private : const VelGridT::ConstAccessor mAccessor ; const math::Transform* mTransform ; } ; template<ScalarT = float> class EnrightField { public : typedef ScalarT ValueType ; typedef math::Vec3<ScalarT> VectorType ;)",
    "insertText": "static_assert(std::is_floating_point<ScalarT>::value, \"EnrightField requires a floating point grid.\")"
  },
  {
    "label": "EnrightField()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EnrightField()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} VectorType)",
    "insertText": "operator() (const Vec3d& xyz, ValueType time)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (VectorType)",
    "insertText": "operator() (const Coord& ijk, ValueType time)"
  },
  {
    "label": "ScalarT()",
    "kind": "Method",
    "detail": "Function (const ScalarT pi = math::pi<)",
    "insertText": "ScalarT()"
  },
  {
    "label": "ScalarT()",
    "kind": "Method",
    "detail": "Function (const ScalarT phase = pi /)",
    "insertText": "ScalarT(3)"
  },
  {
    "label": "ScalarT()",
    "kind": "Method",
    "detail": "Function (const ScalarT Px = pi*)",
    "insertText": "ScalarT(xyz[0]), Py = pi * ScalarT(xyz[1]), Pz = pi * ScalarT(xyz[2])"
  },
  {
    "label": "Cos()",
    "kind": "Method",
    "detail": "Function (const ScalarT tr =)",
    "insertText": "Cos(ScalarT(time) * phase)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (const ScalarT a =)",
    "insertText": "Sin(ScalarT(2)*Py)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (const ScalarT b = -)",
    "insertText": "Sin(ScalarT(2)*Px)"
  },
  {
    "label": "Sin()",
    "kind": "Method",
    "detail": "Function (const ScalarT c =)",
    "insertText": "Sin(ScalarT(2)*Pz)"
  },
  {
    "label": "VelocitySampler()",
    "kind": "Method",
    "detail": "Function (} template<GridT = Vec3fGrid,bool Staggered = false,size_t Order = 1> class VelocitySampler { public : typedef GridT::ConstAccessor AccessorType ; typedef GridT::ValueType ValueType ;)",
    "insertText": "VelocitySampler(const GridT& grid): mGrid(&grid), mAcc(grid.getAccessor())"
  },
  {
    "label": "VelocitySampler()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "VelocitySampler(const VelocitySampler& other): mGrid(other.mGrid), mAcc(mGrid->getAccessor())"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (} template<LocationType> bool)",
    "insertText": "sample(const LocationType& world, ValueType& result)"
  },
  {
    "label": "worldToIndex()",
    "kind": "Method",
    "detail": "Function (const Vec3R xyz = mGrid ->)",
    "insertText": "worldToIndex(Vec3R(world[0], world[1], world[2]))"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (bool active = Sampler<Order,Staggered)",
    "insertText": "sample(mAcc, xyz, result)"
  },
  {
    "label": "VelocityIntegrator()",
    "kind": "Method",
    "detail": "Function (} private : const GridT* mGrid ; AccessorType mAcc ; } ; template<GridT = Vec3fGrid,bool Staggered = false,size_t SampleOrder = 1> class VelocityIntegrator { public : typedef GridT::ValueType VecType ; typedef VecType::ValueType ElementType ;)",
    "insertText": "VelocityIntegrator(const GridT& velGrid): mVelSampler(velGrid)"
  },
  {
    "label": "rungeKutta()",
    "kind": "Method",
    "detail": "Function (} template<size_t OrderRK,LocationType> void)",
    "insertText": "rungeKutta(const ElementType dt, LocationType& world)"
  },
  {
    "label": "BOOST_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BOOST_STATIC_ASSERT(OrderRK <= 4)"
  },
  {
    "label": "P()",
    "kind": "Method",
    "detail": "Function (VecType)",
    "insertText": "P(static_cast<ElementType>(world[0]), static_cast<ElementType>(world[1]), static_cast<ElementType>(world[2]))"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (VecType V0 ; mVelSampler .)",
    "insertText": "sample(P, V0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (P = dt* V0 ; } else)",
    "insertText": "if(OrderRK == 2)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (mVelSampler .)",
    "insertText": "sample(P + ElementType(0.5) * dt * V0, V1)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (P = dt* V1 ; } else)",
    "insertText": "if(OrderRK == 3)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (mVelSampler .)",
    "insertText": "sample(P + dt * (ElementType(2.0) * V1 - V0), V2)"
  },
  {
    "label": "dt()",
    "kind": "Method",
    "detail": "Function (P =)",
    "insertText": "dt(V0 + ElementType(4.0) * V1 + V2) * ElementType(1.0 / 6.0)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (} else)",
    "insertText": "if(OrderRK == 4)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (mVelSampler .)",
    "insertText": "sample(P + ElementType(0.5) * dt * V1, V2)"
  },
  {
    "label": "sample()",
    "kind": "Method",
    "detail": "Function (mVelSampler .)",
    "insertText": "sample(P + dt * V2, V3)"
  },
  {
    "label": "dt()",
    "kind": "Method",
    "detail": "Function (P =)",
    "insertText": "dt(V0 + ElementType(2.0) * (V1 + V2) + V3) * ElementType(1.0 / 6.0)"
  },
  {
    "label": "LocationType()",
    "kind": "Method",
    "detail": "Function (} typedef LocationType::ValueType OutType ; world + =)",
    "insertText": "LocationType(static_cast<OutType>(P[0]), static_cast<OutType>(P[1]), static_cast<OutType>(P[2]))"
  }
]