[
  {
    "label": "FAnimationModifierHelpers",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAnimationModifierHelpers"
  },
  {
    "label": "FModifierClassFilter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FModifierClassFilter"
  },
  {
    "label": "IsClassAllowed()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" ClassViewerModule . h \" # include \" Widgets / SWidget . h \" # include \" Widgets / Layout / SBox . h \" # include \" Widgets / SBoxPanel . h \" # include \" Modules / ModuleManager . h \" # include \" Templates / SharedPointer . h \" # include \" ClassViewerFilter . h \" # include \" AnimationModifier . h \" # include \" AnimationModifiersAssetUserData . h \" # include \" AnimationModifier . h \" class FAnimationModifierHelpers { public : class FModifierClassFilter : public IClassViewerFilter { public : bool)",
    "insertText": "IsClassAllowed(const FClassViewerInitializationOptions& InInitOptions, const UClass* InClass, TSharedRef< FClassViewerFilterFuncs > InFilterFuncs)"
  },
  {
    "label": "IsUnloadedClassAllowed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsUnloadedClassAllowed(const FClassViewerInitializationOptions& InInitOptions, const TSharedRef< const IUnloadedBlueprintData > InClass, TSharedRef< FClassViewerFilterFuncs > InFilterFuncs)"
  },
  {
    "label": "GetModifierPicker()",
    "kind": "Method",
    "detail": "Function (} } ; TSharedRef<SWidget>)",
    "insertText": "GetModifierPicker(const FOnClassPicked& OnClassPicked)"
  },
  {
    "label": "FModifierClassFilter()",
    "kind": "Method",
    "detail": "Function (FClassViewerInitializationOptions Options ; Options . bShowUnloadedBlueprints = true ; Options . bShowNoneOption = false ; TSharedRef<FModifierClassFilter> ClassFilter = MakeShared<)",
    "insertText": "FModifierClassFilter()"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Options . ClassFilters .)",
    "insertText": "Add(ClassFilter)"
  },
  {
    "label": "CreateModifierInstance()",
    "kind": "Method",
    "detail": "Function (} UAnimationModifier*)",
    "insertText": "CreateModifierInstance(UObject* Outer, UClass* InClass, UObject* Template = nullptr)"
  },
  {
    "label": "UAnimationModifier()",
    "kind": "Method",
    "detail": "Function (UAnimationModifier* ProcessorInstance = NewObject<)",
    "insertText": "UAnimationModifier(Outer, InClass, NAME_None, RF_NoFlags, Template)"
  },
  {
    "label": "SetFlags()",
    "kind": "Method",
    "detail": "Function (ProcessorInstance ->)",
    "insertText": "SetFlags(RF_Transactional)"
  },
  {
    "label": "UAnimationModifiersAssetUserData()",
    "kind": "Method",
    "detail": "Function (UAnimationModifiersAssetUserData* AssetUserData = AssetUserDataInterface -> GetAssetUserData<)",
    "insertText": "UAnimationModifiersAssetUserData()"
  },
  {
    "label": "UAnimationModifiersAssetUserData()",
    "kind": "Method",
    "detail": "Function (AssetUserData = NewObject<)",
    "insertText": "UAnimationModifiersAssetUserData(AssetUserDataInterface.GetObject(), UAnimationModifiersAssetUserData::StaticClass())"
  },
  {
    "label": "AddAssetUserData()",
    "kind": "Method",
    "detail": "Function (AssetUserDataInterface ->)",
    "insertText": "AddAssetUserData(AssetUserData)"
  },
  {
    "label": "EnumerateAnimationModifierTags()",
    "kind": "Method",
    "detail": "Function (} return AssetUserData ; } template<Func> void)",
    "insertText": "EnumerateAnimationModifierTags(FStringView Tag, Func&& Callback)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (int Begin = 0 ; int Mid = - 1 ; int End = - 1 ;)",
    "insertText": "for(size_t I = 0; I <= Tag.Len(); I++)"
  },
  {
    "label": "ensure()",
    "kind": "Method",
    "detail": "Function (continue ; } End = I ;)",
    "insertText": "ensure(Mid >= Begin && End > Mid)"
  },
  {
    "label": "SubStr()",
    "kind": "Method",
    "detail": "Function (FStringView Name = Tag .)",
    "insertText": "SubStr(Begin, Mid - Begin)"
  },
  {
    "label": "SubStr()",
    "kind": "Method",
    "detail": "Function (FStringView Revision = Tag .)",
    "insertText": "SubStr(Mid + 1, End - Mid - 1)"
  },
  {
    "label": "Parse()",
    "kind": "Method",
    "detail": "Function (FGuid RevisionGuid ;)",
    "insertText": "Parse(FString{Revision}, RevisionGuid)"
  },
  {
    "label": "Invoke()",
    "kind": "Method",
    "detail": "Function (bool Break = !)",
    "insertText": "Invoke(Callback, Name, RevisionGuid)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (break ; } Begin = End + 1 ; } else)",
    "insertText": "if(Tag[I] == UAnimationModifier::AnimationModifiersAssignment)"
  }
]