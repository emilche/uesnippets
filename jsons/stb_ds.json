[
  {
    "label": "stbds_string_arena",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stbds_string_arena"
  },
  {
    "label": "stbds_string_block",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "stbds_string_block"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "STBDS_NOTUSED()",
    "kind": "Method",
    "detail": "Function (# pragma once # ifdef STBDS_UNIT_TESTS # define _CRT_SECURE_NO_WARNINGS # endif # include<stddef . h> # include<stdint . h> # include<string . h> # include \" stb_common . h \" # ifndef STBDS_NO_SHORT_NAMES # define arrlen stbds_arrlen # define arrlennonull stbds_arrlennonull # define arrlenu stbds_arrlenu # define arrput stbds_arrput # define arrpush stbds_arrput # define arrpop stbds_arrpop # define arrfree stbds_arrfree # define arraddn stbds_arraddn # define arraddnptr stbds_arraddnptr # define arraddnindex stbds_arraddnindex # define arrsetlen stbds_arrsetlen # define arrsetlennocap stbds_arrsetlennocap # define arrinitlen stbds_arrinitlen # define arrlast stbds_arrlast # define arrins stbds_arrins # define arrinsn stbds_arrinsn # define arrdel stbds_arrdel # define arrdeln stbds_arrdeln # define arrdelswap stbds_arrdelswap # define arrcap stbds_arrcap # define arrcapnonull stbds_arrcapnonull # define arrsetcap stbds_arrsetcap # define hmput stbds_hmput # define hmputs stbds_hmputs # define hmget stbds_hmget # define hmget_ts stbds_hmget_ts # define hmgets stbds_hmgets # define hmgetp stbds_hmgetp # define hmgetp_ts stbds_hmgetp_ts # define hmgetp_null stbds_hmgetp_null # define hmgeti stbds_hmgeti # define hmgeti_ts stbds_hmgeti_ts # define hmdel stbds_hmdel # define hmlen stbds_hmlen # define hmlenu stbds_hmlenu # define hmfree stbds_hmfree # define hmdefault stbds_hmdefault # define hmdefaults stbds_hmdefaults # define shput stbds_shput # define shputi stbds_shputi # define shputs stbds_shputs # define shget stbds_shget # define shgeti stbds_shgeti # define shgets stbds_shgets # define shgetp stbds_shgetp # define shgetp_null stbds_shgetp_null # define shdel stbds_shdel # define shlen stbds_shlen # define shlenu stbds_shlenu # define shfree stbds_shfree # define shdefault stbds_shdefault # define shdefaults stbds_shdefaults # define sh_new_arena stbds_sh_new_arena # define sh_new_strdup stbds_sh_new_strdup # define stralloc stbds_stralloc # define strreset stbds_strreset # endif # ifdef _MSC_VER # define)",
    "insertText": "STBDS_NOTUSED(v) (void)(v) #else #define STBDS_NOTUSED(v) (void)sizeof(v)"
  },
  {
    "label": "stbds_rand_seed()",
    "kind": "Method",
    "detail": "Function (# endif void)",
    "insertText": "stbds_rand_seed(size_t seed)"
  },
  {
    "label": "stbds_hash_bytes()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "stbds_hash_bytes(void* p, size_t len, size_t seed)"
  },
  {
    "label": "stbds_hash_string()",
    "kind": "Method",
    "detail": "Function (size_t)",
    "insertText": "stbds_hash_string(char* str, size_t seed)"
  },
  {
    "label": "stbds_stralloc()",
    "kind": "Method",
    "detail": "Function (typedef struct stbds_string_arena stbds_string_arena ; char*)",
    "insertText": "stbds_stralloc(stbds_string_arena* a, char* str)"
  },
  {
    "label": "stbds_strreset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbds_strreset(stbds_string_arena* a)"
  },
  {
    "label": "stbds_unit_tests()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbds_unit_tests(void)"
  },
  {
    "label": "stbds_arrinlinef()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_arrinlinef(size_t* buf, size_t elemsize, size_t elemcount)"
  },
  {
    "label": "stbds_arrinline_suballocf()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_arrinline_suballocf(void* a, size_t min_capacity)"
  },
  {
    "label": "stbds_arrgrowf()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_arrgrowf(void* a, size_t elemsize, size_t addlen, size_t min_cap)"
  },
  {
    "label": "stbds_hmfree_func()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "stbds_hmfree_func(void* p, size_t elemsize)"
  },
  {
    "label": "stbds_hmget_key()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_hmget_key(void* a, size_t elemsize, void* key, size_t keysize, int mode)"
  },
  {
    "label": "stbds_hmget_key_ts()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_hmget_key_ts(void* a, size_t elemsize, void* key, size_t keysize, ptrdiff_t* temp, int mode)"
  },
  {
    "label": "stbds_hmput_default()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_hmput_default(void* a, size_t elemsize)"
  },
  {
    "label": "stbds_hmput_key()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_hmput_key(void* a, size_t elemsize, void* key, size_t keysize, int mode)"
  },
  {
    "label": "stbds_hmdel_key()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_hmdel_key(void* a, size_t elemsize, void* key, size_t keysize, size_t keyoffset, int mode)"
  },
  {
    "label": "stbds_shmode_func()",
    "kind": "Method",
    "detail": "Function (void*)",
    "insertText": "stbds_shmode_func(size_t elemsize, int mode)"
  },
  {
    "label": "defined()",
    "kind": "Method",
    "detail": "Function (# ifdef __cplusplus } # endif # if)",
    "insertText": "defined(__GNUC__) || defined(__clang__) #define STBDS_HAS_TYPEOF #ifdef __cplusplus #endif #endif #if !defined(__cplusplus) #if defined(__STDC_VERSION__) && __STDC_VERSION__ >= 199901L #define STBDS_HAS_LITERAL_ARRAY #endif #endif #if defined(STBDS_HAS_LITERAL_ARRAY) && defined(STBDS_HAS_TYPEOF) #if __clang__ #define STBDS_ADDRESSOF(typevar, value) ((__typeof__(typevar)[1]){value}) #else #define STBDS_ADDRESSOF(typevar, value) ((typeof(typevar)[1]){value}) #endif #else #define STBDS_ADDRESSOF(typevar, value) &(value) #endif #define STBDS_OFFSETOF(var, field) ((char*)&(var)->field - (char*)(var)) #define stbds_header(t) ((stbds_array_header*)(t)-1) #define stbds_temp(t) stbds_header(t)->temp #define stbds_temp_key(t) (*(char**)stbds_header(t)->hash_table) #define stbds_arrinline(a, a_type, n) \\ size_t __buf ## a[(sizeof(stbds_array_header) + n * sizeof(a_type) + sizeof(size_t) - 1) / sizeof(size_t)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (\\)",
    "insertText": "a(a_type*)(((stbds_array_header*)(&__buf ## a[0])) + 1) #define stbds_arrinline_suballoc(a, a_type, min_capacity) \\ a = (a_type*)stbds_arrinline_suballocf(a, min_capacity) #define stbds_arrinline_suballoc_char(a, min_capacity) \\ if (a && stbds_header(a)->inlinealloc)"
  },
  {
    "label": "stbds_header()",
    "kind": "Method",
    "detail": "Function (\\ stbds_array_header* h =)",
    "insertText": "stbds_header(a)"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (\\ char* used_end =)",
    "insertText": "a((h->length + sizeof(size_t) - 1) & ~(sizeof(size_t) - 1))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (\\ char* capacity_end = a + h -> capacity ; \\ h -> capacity = h -> length ; \\)",
    "insertText": "if(capacity_end - used_end < sizeof(stbds_array_header) + min_capacity)"
  },
  {
    "label": "h_suballoc()",
    "kind": "Method",
    "detail": "Function (\\ a = 0 ; \\ } \\ else \\ { \\ stbds_array_header*)",
    "insertText": "h_suballoc(stbds_array_header*)"
  },
  {
    "label": "capacity()",
    "kind": "Method",
    "detail": "Function (\\ h_suballoc -> length = 0 ; \\ h_suballoc ->)",
    "insertText": "capacity((capacity_end - used_end) - sizeof(stbds_array_header))"
  },
  {
    "label": "a()",
    "kind": "Method",
    "detail": "Function (\\ h_suballoc -> hash_table = 0 ; \\ h_suballoc -> temp = 0 ; \\ h_suballoc -> elemsize = 1 ; \\ h_suballoc -> inlinealloc = 1 ; \\)",
    "insertText": "a(char*)(h_suballoc + 1)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (int elemsize ; int inlinealloc ; void* hash_table ; ptrdiff_t temp ; int capacity ; int length ; } stbds_array_header ; # ifdef _MSC_VER # pragma)",
    "insertText": "warning(push) #pragma warning(disable: 4200)"
  },
  {
    "label": "warning()",
    "kind": "Method",
    "detail": "Function (struct stbds_string_block* next ; char storage [ ] ; } stbds_string_block ; # ifdef _MSC_VER # pragma)",
    "insertText": "warning(pop)"
  },
  {
    "label": "stbds_arrgrowf_wrapper()",
    "kind": "Method",
    "detail": "Function (stbds_string_block* storage ; size_t remaining ; unsigned char block ; unsigned char mode ; } ; # define STBDS_HM_BINARY 0 # define STBDS_HM_STRING 1 enum { STBDS_SH_NONE,STBDS_SH_DEFAULT,STBDS_SH_STRDUP,STBDS_SH_ARENA } ; # ifdef __cplusplus template<class T> T*)",
    "insertText": "stbds_arrgrowf_wrapper(T* a, size_t elemsize, size_t addlen, size_t min_cap)"
  },
  {
    "label": "stbds_hmget_key_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "stbds_hmget_key_wrapper(T* a, size_t elemsize, void* key, size_t keysize, int mode)"
  },
  {
    "label": "stbds_hmget_key_ts_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "stbds_hmget_key_ts_wrapper(T* a, size_t elemsize, void* key, size_t keysize, ptrdiff_t* temp, int mode)"
  },
  {
    "label": "stbds_hmput_default_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "stbds_hmput_default_wrapper(T* a, size_t elemsize)"
  },
  {
    "label": "stbds_hmput_key_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "stbds_hmput_key_wrapper(T* a, size_t elemsize, void* key, size_t keysize, int mode)"
  },
  {
    "label": "stbds_hmdel_key_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "stbds_hmdel_key_wrapper(T* a, size_t elemsize, void* key, size_t keysize, size_t keyoffset, int mode)"
  },
  {
    "label": "stbds_shmode_func_wrapper()",
    "kind": "Method",
    "detail": "Function (} template<class T> T*)",
    "insertText": "stbds_shmode_func_wrapper(T*, size_t elemsize, int mode)"
  }
]