[
  {
    "label": "TPointHashGrid2",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TPointHashGrid2"
  },
  {
    "label": "TPointHashGrid2()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Misc / ScopeLock . h \" # include \" Util / GridIndexing2 . h \" namespace UE { namespace Geometry { using namespace UE::Math ; template<PointDataType,RealType> class TPointHashGrid2 { private : TMultiMap<FVector2i,PointDataType> Hash ; FCriticalSection CriticalSection ; TScaleGridIndexer2<RealType> Indexer ; PointDataType InvalidValue ; public :)",
    "insertText": "TPointHashGrid2(RealType cellSize, PointDataType InvalidValue) : Indexer(cellSize), InvalidValue(InvalidValue)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Reserve(int32 Num)"
  },
  {
    "label": "Reserve()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "Reserve(Num)"
  },
  {
    "label": "GetInvalidValue()",
    "kind": "Method",
    "detail": "Function (} PointDataType)",
    "insertText": "GetInvalidValue()"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector2i idx = Indexer .)",
    "insertText": "ToGrid(Position)"
  },
  {
    "label": "Lock()",
    "kind": "Method",
    "detail": "Function ({ FScopeLock)",
    "insertText": "Lock(&CriticalSection)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "Add(idx, Value)"
  },
  {
    "label": "InsertPointUnsafe()",
    "kind": "Method",
    "detail": "Function (} } void)",
    "insertText": "InsertPointUnsafe(const PointDataType& Value, const TVector2<RealType>& Position)"
  },
  {
    "label": "RemovePoint()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "RemovePoint(const PointDataType& Value, const TVector2<RealType>& Position)"
  },
  {
    "label": "RemovePointUnsafe()",
    "kind": "Method",
    "detail": "Function (} } bool)",
    "insertText": "RemovePointUnsafe(const PointDataType& Value, const TVector2<RealType>& Position)"
  },
  {
    "label": "UpdatePoint()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "UpdatePoint(const PointDataType& Value, const TVector2<RealType>& OldPosition, const TVector2<RealType>& NewPosition)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector2i old_idx = Indexer .)",
    "insertText": "ToGrid(OldPosition)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector2i new_idx = Indexer .)",
    "insertText": "ToGrid(NewPosition)"
  },
  {
    "label": "RemoveSingle()",
    "kind": "Method",
    "detail": "Function (bWasAtOldPos = Hash .)",
    "insertText": "RemoveSingle(old_idx, Value)"
  },
  {
    "label": "check()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "check(bWasAtOldPos)"
  },
  {
    "label": "Add()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "Add(new_idx, Value)"
  },
  {
    "label": "UpdatePointUnsafe()",
    "kind": "Method",
    "detail": "Function (} return ; } void)",
    "insertText": "UpdatePointUnsafe(const PointDataType& Value, const TVector2<RealType>& OldPosition, const TVector2<RealType>& NewPosition)"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (} FVector2i min_idx = Indexer .)",
    "insertText": "ToGrid(QueryPoint - Radius * TVector2<RealType>::One())"
  },
  {
    "label": "ToGrid()",
    "kind": "Method",
    "detail": "Function (FVector2i max_idx = Indexer .)",
    "insertText": "ToGrid(QueryPoint + Radius * TVector2<RealType>::One())"
  },
  {
    "label": "Max()",
    "kind": "Method",
    "detail": "Function (RealType min_distsq = TNumericLimits<RealType)",
    "insertText": "Max()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (RealType RadiusSquared = Radius* Radius ; TArray<PointDataType> Values ;)",
    "insertText": "for(int yi = min_idx.Y; yi <= max_idx.Y; yi++)"
  },
  {
    "label": "idx()",
    "kind": "Method",
    "detail": "Function (FVector2i)",
    "insertText": "idx(xi, yi)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (Values .)",
    "insertText": "Reset()"
  },
  {
    "label": "MultiFind()",
    "kind": "Method",
    "detail": "Function (Hash .)",
    "insertText": "MultiFind(idx, Values)"
  },
  {
    "label": "DistanceSqFunc()",
    "kind": "Method",
    "detail": "Function (continue ; } RealType distsq =)",
    "insertText": "DistanceSqFunc(Value)"
  },
  {
    "label": "RealType()",
    "kind": "Method",
    "detail": "Function (nearest = Value ; min_distsq = distsq ; } } } } return TPair<PointDataType,)",
    "insertText": "RealType(nearest, min_distsq)"
  }
]