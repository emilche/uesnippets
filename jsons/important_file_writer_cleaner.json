[
  {
    "label": "SequencedTaskRunner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SequencedTaskRunner"
  },
  {
    "label": "BASE_EXPORT",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BASE_EXPORT"
  },
  {
    "label": "NoDestructor",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "NoDestructor"
  },
  {
    "label": "GetInstance()",
    "kind": "Method",
    "detail": "Function (# ifndef BASE_FILES_IMPORTANT_FILE_WRITER_CLEANER_H_ # define BASE_FILES_IMPORTANT_FILE_WRITER_CLEANER_H_ # include<atomic> # include<vector> # include \" base / base_export . h \" # include \" base / containers / flat_set . h \" # include \" base / files / file_path . h \" # include \" base / memory / scoped_refptr . h \" # include \" base / no_destructor . h \" # include \" base / numerics / clamped_math . h \" # include \" base / sequence_checker . h \" # include \" base / synchronization / lock . h \" # include \" base / thread_annotations . h \" # include \" base / time / time . h \" namespace base { class SequencedTaskRunner ; class BASE_EXPORT ImportantFileWriterCleaner { public : ImportantFileWriterCleaner&)",
    "insertText": "GetInstance()"
  },
  {
    "label": "ImportantFileWriterCleaner()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ImportantFileWriterCleaner(const ImportantFileWriterCleaner&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (ImportantFileWriterCleaner&)",
    "insertText": "operator(const ImportantFileWriterCleaner&)"
  },
  {
    "label": "ImportantFileWriterCleaner()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "ImportantFileWriterCleaner()"
  },
  {
    "label": "AddDirectory()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDirectory(const FilePath& directory)"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Initialize()"
  },
  {
    "label": "Start()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Start()"
  },
  {
    "label": "Stop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Stop()"
  },
  {
    "label": "UninitializeForTesting()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UninitializeForTesting()"
  },
  {
    "label": "GetUpperBoundTimeForTest()",
    "kind": "Method",
    "detail": "Function (base::Time)",
    "insertText": "GetUpperBoundTimeForTest()"
  },
  {
    "label": "is_started()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "is_started()"
  },
  {
    "label": "DCHECK_CALLED_ON_VALID_SEQUENCE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DCHECK_CALLED_ON_VALID_SEQUENCE(sequence_checker_)"
  },
  {
    "label": "ScheduleTask()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ScheduleTask()"
  },
  {
    "label": "CleanInBackground()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "CleanInBackground(Time upper_bound_time, std::vector<FilePath> directories, std::atomic_bool& stop_flag)"
  },
  {
    "label": "OnBackgroundTaskFinished()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnBackgroundTaskFinished(bool processing_completed)"
  },
  {
    "label": "DoStop()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DoStop()"
  },
  {
    "label": "GUARDED_BY()",
    "kind": "Method",
    "detail": "Function (Lock task_runner_lock_ ; scoped_refptr<SequencedTaskRunner> task_runner_)",
    "insertText": "GUARDED_BY(task_runner_lock_)"
  },
  {
    "label": "GUARDED_BY_CONTEXT()",
    "kind": "Method",
    "detail": "Function (const Time upper_bound_time_ ; flat_set<FilePath> important_directories_)",
    "insertText": "GUARDED_BY_CONTEXT(sequence_checker_)"
  },
  {
    "label": "SEQUENCE_CHECKER()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SEQUENCE_CHECKER(sequence_checker_)"
  }
]