[
  {
    "label": "TEmptyProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TEmptyProperty"
  },
  {
    "label": "TDirectProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TDirectProperty"
  },
  {
    "label": "TConvertibleProperty",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TConvertibleProperty"
  },
  {
    "label": "TProperty",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TProperty"
  },
  {
    "label": "GetColumn()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Map . h \" # include \" Elements / Common / TypedElementHandles . h \" # include \" Elements / Interfaces / TypedElementDataStorageInterface . h \" # include \" Internationalization / Text . h \" # include \" Misc / Attribute . h \" namespace UE::Editor::DataStorage { namespace Private { template<FunctionType,ArgumentType> concept AttributeBinderInvocable = std::is_invocable_v<std::decay_t<FunctionType>,const ArgumentType&> ; template<TDataColumnType ColumnType> ColumnType*)",
    "insertText": "GetColumn(IEditorDataStorageProvider* DataStorage, RowHandle Row, const FName& InIdentifier)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (} template<PropertyType> struct TEmptyProperty final { PropertyType*)",
    "insertText": "Get(void* Object)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const PropertyType*)",
    "insertText": "Get(const void* Object)"
  },
  {
    "label": "PropertyType()",
    "kind": "Method",
    "detail": "Function (} ; template<PropertyType> struct TConvertibleProperty final { TFunction<)",
    "insertText": "PropertyType(const void*)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (} ; template<PropertyType> class TProperty { public : template<TDataColumnType ObjectType> void)",
    "insertText": "Bind(PropertyType ObjectType::* Variable)"
  },
  {
    "label": "Bind()",
    "kind": "Method",
    "detail": "Function (template<InputType,TDataColumnType ObjectType> void)",
    "insertText": "Bind(InputType ObjectType::* Variable, TFunction<PropertyType(const InputType&)> Converter)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType ObjectType> PropertyType&)",
    "insertText": "Get(ObjectType& Object)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (template<TDataColumnType ObjectType> const PropertyType&)",
    "insertText": "Get(const ObjectType& Object)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (PropertyType&)",
    "insertText": "Get(void* Object, const UScriptStruct* Type)"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (const PropertyType&)",
    "insertText": "Get(const void* Object, const UScriptStruct* Type)"
  },
  {
    "label": "GetObjectTypeInfo()",
    "kind": "Method",
    "detail": "Function (const UScriptStruct*)",
    "insertText": "GetObjectTypeInfo()"
  },
  {
    "label": "IsBound()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsBound()"
  },
  {
    "label": "Converter()",
    "kind": "Method",
    "detail": "Function (Cache =)",
    "insertText": "Converter(Object)"
  },
  {
    "label": "size_t()",
    "kind": "Method",
    "detail": "Function (TDirectProperty<PropertyType> Result ; Result . Offset = reinterpret_cast<)",
    "insertText": "size_t(&(reinterpret_cast<const ObjectType*>(0)->*Variable))"
  },
  {
    "label": "StaticStruct()",
    "kind": "Method",
    "detail": "Function (ObjectTypeInfo =)",
    "insertText": "StaticStruct()"
  },
  {
    "label": "InternalPropertyType()",
    "kind": "Method",
    "detail": "Function (InternalProperty =)",
    "insertText": "InternalPropertyType(TInPlaceType<TDirectProperty<PropertyType>>(), MoveTemp(Result))"
  },
  {
    "label": "MoveTemp()",
    "kind": "Method",
    "detail": "Function (TConvertibleProperty<PropertyType> Result ; Result . Converter = [ Converter =)",
    "insertText": "MoveTemp(Converter), Variable](const void* Object)"
  },
  {
    "label": "InternalPropertyType()",
    "kind": "Method",
    "detail": "Function (InternalProperty =)",
    "insertText": "InternalPropertyType(TInPlaceType<TConvertibleProperty<PropertyType>>(), MoveTemp(Result))"
  }
]