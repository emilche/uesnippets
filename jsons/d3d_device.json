[
  {
    "label": "D3dDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "D3dDevice"
  },
  {
    "label": "D3dDevice()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_DESKTOP_CAPTURE_WIN_D3D_DEVICE_H_ # define MODULES_DESKTOP_CAPTURE_WIN_D3D_DEVICE_H_ # include<comdef . h> # include<d3d11 . h> # include<dxgi . h> # include<wrl / client . h> # include<vector> namespace webrtc { class D3dDevice { public :)",
    "insertText": "D3dDevice(const D3dDevice& other)"
  },
  {
    "label": "D3dDevice()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "D3dDevice(D3dDevice&& other)"
  },
  {
    "label": "D3dDevice()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "D3dDevice()"
  },
  {
    "label": "d3d_device()",
    "kind": "Method",
    "detail": "Function (ID3D11Device*)",
    "insertText": "d3d_device()"
  },
  {
    "label": "context()",
    "kind": "Method",
    "detail": "Function (} ID3D11DeviceContext*)",
    "insertText": "context()"
  },
  {
    "label": "dxgi_device()",
    "kind": "Method",
    "detail": "Function (} IDXGIDevice*)",
    "insertText": "dxgi_device()"
  },
  {
    "label": "dxgi_adapter()",
    "kind": "Method",
    "detail": "Function (} IDXGIAdapter*)",
    "insertText": "dxgi_adapter()"
  },
  {
    "label": "EnumDevices()",
    "kind": "Method",
    "detail": "Function (} std::vector<D3dDevice>)",
    "insertText": "EnumDevices()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Initialize(const Microsoft::WRL::ComPtr<IDXGIAdapter>& adapter)"
  }
]