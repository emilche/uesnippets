[
  {
    "label": "FTextLayout",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTextLayout"
  },
  {
    "label": "FTemplateStringSyntaxHighlighterMarshaller",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTemplateStringSyntaxHighlighterMarshaller"
  },
  {
    "label": "FSyntaxTextStyle",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSyntaxTextStyle"
  },
  {
    "label": "SharedPointerInternals",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SharedPointerInternals"
  },
  {
    "label": "FSyntaxTextStyle()",
    "kind": "Method",
    "detail": "Function (\ufeff # pragma once # include \" Containers / Array . h \" # include \" Containers / UnrealString . h \" # include \" EditorWidgetsStyle . h \" # include \" Framework / Text / SyntaxHighlighterTextLayoutMarshaller . h \" # include \" Framework / Text / SyntaxTokenizer . h \" # include \" Styling / ISlateStyle . h \" # include \" Styling / SlateTypes . h \" # include \" Templates / SharedPointer . h \" class FTextLayout ; class FTemplateStringSyntaxHighlighterMarshaller : public FSyntaxHighlighterTextLayoutMarshaller { public : struct FSyntaxTextStyle {)",
    "insertText": "FSyntaxTextStyle() : NormalTextStyle(FEditorWidgetsStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SyntaxHighlight.Template.Normal\")) , ArgumentTextStyle(FEditorWidgetsStyle::Get().GetWidgetStyle<FTextBlockStyle>(\"SyntaxHighlight.Template.Argument\"))"
  },
  {
    "label": "FSyntaxTextStyle()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FSyntaxTextStyle(const FTextBlockStyle& InNormalTextStyle, const FTextBlockStyle& InArgumentTextStyle) : NormalTextStyle(InNormalTextStyle) , ArgumentTextStyle(InArgumentTextStyle)"
  },
  {
    "label": "Create()",
    "kind": "Method",
    "detail": "Function (} FTextBlockStyle NormalTextStyle ; FTextBlockStyle ArgumentTextStyle ; } ; TSharedRef<FTemplateStringSyntaxHighlighterMarshaller>)",
    "insertText": "Create(const FSyntaxTextStyle& InSyntaxTextStyle)"
  },
  {
    "label": "FTemplateStringSyntaxHighlighterMarshaller()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTemplateStringSyntaxHighlighterMarshaller()"
  },
  {
    "label": "ParseTokens()",
    "kind": "Method",
    "detail": "Function (protected : class SharedPointerInternals::TIntrusiveReferenceController<FTemplateStringSyntaxHighlighterMarshaller,ESPMode::ThreadSafe> ; void)",
    "insertText": "ParseTokens(const FString& SourceString, FTextLayout& TargetTextLayout, TArray<ISyntaxTokenizer::FTokenizedLine> TokenizedLines)"
  },
  {
    "label": "FTemplateStringSyntaxHighlighterMarshaller()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTemplateStringSyntaxHighlighterMarshaller(TSharedPtr<ISyntaxTokenizer> InTokenizer, const FSyntaxTextStyle& InSyntaxTextStyle)"
  }
]