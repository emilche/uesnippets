[
  {
    "label": "FODSCRequestPayload",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FODSCRequestPayload"
  },
  {
    "label": "ICookedPackageWriter",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookedPackageWriter"
  },
  {
    "label": "ITargetPlatform",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ITargetPlatform"
  },
  {
    "label": "FCookPackageRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FCookPackageRequest"
  },
  {
    "label": "FRecompileShaderRequest",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FRecompileShaderRequest"
  },
  {
    "label": "ICookOnTheFlyServer",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyServer"
  },
  {
    "label": "ICookOnTheFlyRequestManager",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "ICookOnTheFlyRequestManager"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CookTypes . h \" # include \" CoreTypes . h \" # include \" ShaderCompiler . h \" struct FODSCRequestPayload ; class ICookedPackageWriter ; class ITargetPlatform ; namespace UE { namespace Cook { using FRecompileShaderCompletedCallback = TFunction<)",
    "insertText": "void()"
  },
  {
    "label": "ICookOnTheFlyServer()",
    "kind": "Method",
    "detail": "Function (using FPrecookedFileList = TMap<FString,FDateTime> ; struct FCookPackageRequest { FName PlatformName ; FString Filename ; FCompletionCallback CompletionCallback ; } ; struct FRecompileShaderRequest { FShaderRecompileData RecompileArguments ; FRecompileShaderCompletedCallback CompletionCallback ; } ; class ICookOnTheFlyServer { public : ~)",
    "insertText": "ICookOnTheFlyServer()"
  },
  {
    "label": "GetSandboxDirectory()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "GetSandboxDirectory()"
  },
  {
    "label": "AddPlatform()",
    "kind": "Method",
    "detail": "Function (const ITargetPlatform*)",
    "insertText": "AddPlatform(FName PlatformName, bool& bOutAlreadyInitialized)"
  },
  {
    "label": "RemovePlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemovePlatform(FName PlatformName)"
  },
  {
    "label": "IsSchedulerThread()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsSchedulerThread()"
  },
  {
    "label": "GetUnsolicitedFiles()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetUnsolicitedFiles(const FName& PlatformName, const FString& Filename, const bool bIsCookable, TArray<FString>& OutUnsolicitedFiles)"
  },
  {
    "label": "EnqueueCookRequest()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "EnqueueCookRequest(FCookPackageRequest CookPackageRequest)"
  },
  {
    "label": "MarkPackageDirty()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "MarkPackageDirty(const FName& PackageName)"
  },
  {
    "label": "GetPackageWriter()",
    "kind": "Method",
    "detail": "Function (ICookedPackageWriter&)",
    "insertText": "GetPackageWriter(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "ICookOnTheFlyRequestManager()",
    "kind": "Method",
    "detail": "Function (} ; class ICookOnTheFlyRequestManager { public : ~)",
    "insertText": "ICookOnTheFlyRequestManager()"
  },
  {
    "label": "Initialize()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Initialize()"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick()"
  },
  {
    "label": "Shutdown()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Shutdown()"
  },
  {
    "label": "OnSessionStarted()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnSessionStarted(FName PlatformName, bool bFirstSessionInThisProcess)"
  },
  {
    "label": "OnPackageGenerated()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnPackageGenerated(const FName& PackageName)"
  },
  {
    "label": "ShouldUseLegacyScheduling()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldUseLegacyScheduling()"
  }
]