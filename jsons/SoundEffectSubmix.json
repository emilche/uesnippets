[
  {
    "label": "FAudioDevice",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FAudioDevice"
  },
  {
    "label": "FSoundEffectSubmix",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FSoundEffectSubmix"
  },
  {
    "label": "FAudioEffectParameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FAudioEffectParameters"
  },
  {
    "label": "USoundEffectSubmixPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectSubmixPreset"
  },
  {
    "label": "FSoundEffectSubmixInitData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundEffectSubmixInitData"
  },
  {
    "label": "FSoundEffectSubmixInputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundEffectSubmixInputData"
  },
  {
    "label": "FSoundEffectSubmixOutputData",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FSoundEffectSubmixOutputData"
  },
  {
    "label": "USoundEffectPreset",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "USoundEffectPreset"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" AudioDefines . h \" # include \" DSP / BufferVectorOperations . h \" # include \" IAudioExtensionPlugin . h \" # include \" Sound / SoundEffectPreset . h \" # include \" Sound / SoundEffectBase . h \" # include \" Templates / SharedPointer . h \" # include \" UObject / ObjectMacros . h \" # include \" SoundEffectSubmix . generated . h \" class FAudioDevice ; class FSoundEffectSubmix ; struct FAudioEffectParameters ;)",
    "insertText": "UCLASS(config = Engine, hidecategories = Object, abstract, editinlinenew, BlueprintType, MinimalAPI)"
  },
  {
    "label": "GENERATED_UCLASS_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_UCLASS_BODY() virtual FColor GetPresetColor()"
  },
  {
    "label": "FSoundEffectSubmixInputData()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSoundEffectSubmixInitData { uint32 DeviceID = INDEX_NONE ; void* PresetSettings = nullptr ; float SampleRate = 0 . 0 f ; uint32 ParentPresetUniqueId = INDEX_NONE ; } ; struct FSoundEffectSubmixInputData { void* PresetData ; int32 NumFrames ; int32 NumChannels ; int32 NumDeviceChannels ; const TArray<FTransform>* ListenerTransforms ; Audio::FAlignedFloatBuffer* AudioBuffer ; double AudioClock ;)",
    "insertText": "FSoundEffectSubmixInputData() : PresetData(nullptr) , NumFrames(0) , NumChannels(0) , NumDeviceChannels(0) , ListenerTransforms(nullptr) , AudioBuffer(nullptr)"
  },
  {
    "label": "FSoundEffectSubmix()",
    "kind": "Method",
    "detail": "Function (} } ; struct FSoundEffectSubmixOutputData { Audio::FAlignedFloatBuffer* AudioBuffer ; int32 NumChannels ; } ; class FSoundEffectSubmix : public FSoundEffectBase { public : ~)",
    "insertText": "FSoundEffectSubmix()"
  },
  {
    "label": "SetParameters()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "SetParameters(const FAudioEffectParameters& InParameters)"
  },
  {
    "label": "GetDesiredInputChannelCountOverride()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetDesiredInputChannelCountOverride()"
  },
  {
    "label": "GetDryLevel()",
    "kind": "Method",
    "detail": "Function (} float)",
    "insertText": "GetDryLevel()"
  },
  {
    "label": "Setup()",
    "kind": "Method",
    "detail": "Function (class USoundEffectPreset ; void)",
    "insertText": "Setup(const FSoundEffectSubmixInitData& InInitData)"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (InitData_Internal = InInitData ;)",
    "insertText": "Init(InInitData)"
  },
  {
    "label": "GetInitData()",
    "kind": "Method",
    "detail": "Function (} const FSoundEffectSubmixInitData&)",
    "insertText": "GetInitData()"
  },
  {
    "label": "Init()",
    "kind": "Method",
    "detail": "Function (} private : void)",
    "insertText": "Init(const FSoundEffectSubmixInitData& InInitData)"
  }
]