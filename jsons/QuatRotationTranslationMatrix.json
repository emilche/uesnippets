[
  {
    "label": "TQuatRotationTranslationMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TQuatRotationTranslationMatrix"
  },
  {
    "label": "TQuatRotationMatrix",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TQuatRotationMatrix"
  },
  {
    "label": "TIsUECoreVariant",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "TIsUECoreVariant"
  },
  {
    "label": "TQuatRotationTranslationMatrix()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreTypes . h \" # include \" Misc / AssertionMacros . h \" # include \" Math / Vector . h \" # include \" Math / Matrix . h \" # include \" Math / Quat . h \" namespace UE { namespace Math { template<T> struct TQuatRotationTranslationMatrix : public TMatrix<T> { public : using TMatrix<T>::M ;)",
    "insertText": "TQuatRotationTranslationMatrix(const TQuat<T>& Q, const TVector<T>& Origin)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TQuatRotationTranslationMatrix(const TQuatRotationTranslationMatrix<FArg>& From) : TMatrix<T>(From)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(const TQuat<T>& Q, const TVector<T>& Origin)"
  },
  {
    "label": "TQuatRotationMatrix()",
    "kind": "Method",
    "detail": "Function (} } ; template<T> struct TQuatRotationMatrix : public TQuatRotationTranslationMatrix<T> { public : using TQuatRotationTranslationMatrix<T>::M ;)",
    "insertText": "TQuatRotationMatrix(const TQuat<T>& Q) : TQuatRotationTranslationMatrix<T>(Q, TVector<T>::ZeroVector)"
  },
  {
    "label": "UE_REQUIRES()",
    "kind": "Method",
    "detail": "Function (} template<FArg)",
    "insertText": "UE_REQUIRES(!std::is_same_v<T, FArg>)> explicit TQuatRotationMatrix(const TQuatRotationMatrix<FArg>& From) : TQuatRotationTranslationMatrix<T>(From)"
  },
  {
    "label": "Make()",
    "kind": "Method",
    "detail": "Function (} TMatrix<T>)",
    "insertText": "Make(const TQuat<T>& Q)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (#)",
    "insertText": "if(UE_BUILD_SHIPPING || UE_BUILD_TEST) && WITH_EDITORONLY_DATA check( Q.IsNormalized())"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (# endif const T x2 = Q . X + Q . X ; const T y2 = Q . Y + Q . Y ; const T z2 = Q . Z + Q . Z ; const T xx = Q . X* x2 ; const T xy = Q . X* y2 ; const T xz = Q . X* z2 ; const T yy = Q . Y* y2 ; const T yz = Q . Y* z2 ; const T zz = Q . Z* z2 ; const T wx = Q . W* x2 ; const T wy = Q . W* y2 ; const T wz = Q . W* z2 ; M [ 0 ] [ 0 ] = 1 . 0)",
    "insertText": "f(yy + zz)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (M [ 1 ] [ 0 ] = xy - wz ; M [ 2 ] [ 0 ] = xz + wy ; M [ 3 ] [ 0 ] = Origin . X ; M [ 0 ] [ 1 ] = xy + wz ; M [ 1 ] [ 1 ] = 1 . 0)",
    "insertText": "f(xx + zz)"
  },
  {
    "label": "f()",
    "kind": "Method",
    "detail": "Function (M [ 2 ] [ 1 ] = yz - wx ; M [ 3 ] [ 1 ] = Origin . Y ; M [ 0 ] [ 2 ] = xz - wy ; M [ 1 ] [ 2 ] = yz + wx ; M [ 2 ] [ 2 ] = 1 . 0)",
    "insertText": "f(xx + yy)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (M [ 3 ] [ 2 ] = Origin . Z ; M [ 0 ] [ 3 ] = 0 . 0 f ; M [ 1 ] [ 3 ] = 0 . 0 f ; M [ 2 ] [ 3 ] = 0 . 0 f ; M [ 3 ] [ 3 ] = 1 . 0 f ; } } })",
    "insertText": "UE_DECLARE_LWC_TYPE(QuatRotationTranslationMatrix, 44)"
  },
  {
    "label": "UE_DECLARE_LWC_TYPE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UE_DECLARE_LWC_TYPE(QuatRotationMatrix, 44)"
  }
]