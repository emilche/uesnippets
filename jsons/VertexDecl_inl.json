[
  {
    "label": "VERTEX_DECL_END()",
    "kind": "Method",
    "detail": "Function (const st_int32 c_nObjectVertexStream = 0 ; const st_int32 c_nInstanceVertexStream = 1 ; const SVertexDecl::SAttribDesc c_asBillboardInstanceStreamDesc [ ] = { { c_nInstanceVertexStream,VERTEX_ATTRIB_2,VERTEX_FORMAT_FULL_FLOAT,4,{ { VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_X },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_Y },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_Z },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_W } } },{ c_nInstanceVertexStream,VERTEX_ATTRIB_3,VERTEX_FORMAT_FULL_FLOAT,4,{ { VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_X },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_Y },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_Z },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_W } } },{ c_nInstanceVertexStream,VERTEX_ATTRIB_4,VERTEX_FORMAT_FULL_FLOAT,4,{ { VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_X },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_Y },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_Z },{ VERTEX_PROPERTY_MISC_SEMANTIC,VERTEX_COMPONENT_W } } },)",
    "insertText": "VERTEX_DECL_END()"
  },
  {
    "label": "SAttribute()",
    "kind": "Method",
    "detail": "Function (const SVertexDecl::SAttribDesc* c_asGrassInstanceStreamDesc = c_as3dTreeInstanceStreamDesc ; ST_INLINE SVertexDecl::)",
    "insertText": "SAttribute() : m_uiStream(0), m_eFormat(VERTEX_FORMAT_UNASSIGNED)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Clear()"
  },
  {
    "label": "IsUsed()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool SVertexDecl::)",
    "insertText": "IsUsed(void)"
  },
  {
    "label": "NumEmptyComponents()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_int32 SVertexDecl::)",
    "insertText": "NumEmptyComponents(void)"
  },
  {
    "label": "NumUsedComponents()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_int32 SVertexDecl::)",
    "insertText": "NumUsedComponents(void)"
  },
  {
    "label": "Size()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_int32 SVertexDecl::)",
    "insertText": "Size(void)"
  },
  {
    "label": "Clear()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE void SVertexDecl::)",
    "insertText": "Clear(void)"
  },
  {
    "label": "FirstFreeComponent()",
    "kind": "Method",
    "detail": "Function (m_aeProperties [ i ] = VERTEX_PROPERTY_UNASSIGNED ; m_aePropertyComponents [ i ] = VERTEX_COMPONENT_UNASSIGNED ; m_auiVertexOffsets [ i ] = 0 ; } } ST_INLINE EVertexComponent SVertexDecl::)",
    "insertText": "FirstFreeComponent(void)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(false)"
  },
  {
    "label": "IsPresent()",
    "kind": "Method",
    "detail": "Function (m_aeAttribs [ i ] = VERTEX_ATTRIB_UNASSIGNED ; m_aeAttribComponents [ i ] = VERTEX_COMPONENT_UNASSIGNED ; m_auiOffsets [ i ] = 0 ; } } ST_INLINE st_bool SVertexDecl::)",
    "insertText": "IsPresent(void)"
  },
  {
    "label": "IsContiguous()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool SVertexDecl::)",
    "insertText": "IsContiguous(void)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_bool bContiguous = false ;)",
    "insertText": "if(IsPresent( ))"
  },
  {
    "label": "NumComponents()",
    "kind": "Method",
    "detail": "Function (bContiguous = true ; const st_int32 c_nNumComponents =)",
    "insertText": "NumComponents()"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_int32 nSlot = m_aeAttribs [ 0 ] ;)",
    "insertText": "for(st_int32 i = 1; i < c_nNumComponents; ++i)"
  },
  {
    "label": "NumComponents()",
    "kind": "Method",
    "detail": "Function (bContiguous = false ; break ; } } } return bContiguous ; } ST_INLINE st_int32 SVertexDecl::)",
    "insertText": "NumComponents(void)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (st_int32 nNumComponents = 0 ;)",
    "insertText": "for(st_int32 i = 0; i < VERTEX_COMPONENT_COUNT; ++i) if (m_aeAttribs[i] == VERTEX_ATTRIB_UNASSIGNED)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE st_bool)",
    "insertText": "operator(const SVertexDecl& sRight)"
  },
  {
    "label": "FormatName()",
    "kind": "Method",
    "detail": "Function (} ST_INLINE const char*)",
    "insertText": "FormatName(EVertexFormat eFormat)"
  },
  {
    "label": "FormatSize()",
    "kind": "Method",
    "detail": "Function (const char* c_pNames [ VERTEX_FORMAT_COUNT ] = { \" full float \",\" half float \",\" byte \" } ; return c_pNames [ eFormat ] ; } ST_INLINE st_int32)",
    "insertText": "FormatSize(EVertexFormat eFormat)"
  },
  {
    "label": "AttributeName()",
    "kind": "Method",
    "detail": "Function (const st_int32 c_anSizesInBytes [ VERTEX_FORMAT_COUNT ] = { 4,2,1 } ; return c_anSizesInBytes [ eFormat ] ; } ST_INLINE const char*)",
    "insertText": "AttributeName(EVertexAttribute eAttrib)"
  },
  {
    "label": "GetDescription()",
    "kind": "Method",
    "detail": "Function (const char* c_pNames [ VERTEX_ATTRIB_COUNT ] = { \" ATTR0 \",\" ATTR1 \",\" ATTR2 \",\" ATTR3 \",\" ATTR4 \",\" ATTR5 \",\" ATTR6 \",\" ATTR7 \",\" ATTR8 \",\" ATTR9 \",\" ATTR10 \",\" ATTR11 \",\" ATTR12 \",\" ATTR13 \",\" ATTR14 \",\" ATTR15 \" } ; return c_pNames [ eAttrib ] ; } ST_INLINE void)",
    "insertText": "GetDescription(CString& strDesc)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (const st_char* c_pFormatNames [ VERTEX_FORMAT_COUNT ] = { \" 3 2 - bit floats \",\" 1 6 - bit floats \",\" byte \" } ;)",
    "insertText": "for(st_int32 nAttrib = 0; nAttrib < VERTEX_ATTRIB_COUNT; ++nAttrib)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const SAttribute& sAttrib = m_asAttributes [ nAttrib ] ;)",
    "insertText": "if(sAttrib.IsUsed( ))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (strDesc + =)",
    "insertText": "Format(\" %s [ \", AttributeName(EVertexAttribute(nAttrib)))"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (strDesc + =)",
    "insertText": "Format(\"%s.%s(%d) \", CCore::GetVertexPropertyDesc(sAttrib.m_aeProperties[i]).m_pShortName, CCore::ComponentName(sAttrib.m_aePropertyComponents[i]), sAttrib.m_auiVertexOffsets[i])"
  },
  {
    "label": "Format()",
    "kind": "Method",
    "detail": "Function (} strDesc + =)",
    "insertText": "Format(\"] (%s)\\n\", c_pFormatNames[sAttrib.m_eFormat])"
  },
  {
    "label": "GetInstanceVertexDecl()",
    "kind": "Method",
    "detail": "Function (} } } ST_INLINE void)",
    "insertText": "GetInstanceVertexDecl(SVertexDecl& sInstanceDecl, EInstanceType eInstanceType)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (break ; case INSTANCES_GRASS : sInstanceDecl .)",
    "insertText": "Set(c_asGrassInstanceStreamDesc)"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (break ; case INSTANCES_BILLBOARDS : sInstanceDecl .)",
    "insertText": "Set(c_asBillboardInstanceStreamDesc)"
  },
  {
    "label": "MergeObjectAndInstanceVertexDecls()",
    "kind": "Method",
    "detail": "Function (} } ST_INLINE st_bool)",
    "insertText": "MergeObjectAndInstanceVertexDecls(SVertexDecl& sMergedDecl, const SVertexDecl& sObjectDecl, EInstanceType eInstanceType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (st_bool bSuccess = true ; sMergedDecl = sObjectDecl ;)",
    "insertText": "if(eInstanceType != INSTANCES_NONE)"
  },
  {
    "label": "GetInstanceVertexDecl()",
    "kind": "Method",
    "detail": "Function (SVertexDecl sInstanceDecl ;)",
    "insertText": "GetInstanceVertexDecl(sInstanceDecl, eInstanceType)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (const SVertexDecl::SAttribute& sInstAttrib = sInstanceDecl . m_asAttributes [ i ] ;)",
    "insertText": "if(sInstAttrib.IsUsed( ))"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (SVertexDecl::SAttribute& sDestAttrib = sMergedDecl . m_asAttributes [ i ] ;)",
    "insertText": "if(!sDestAttrib.IsUsed( ))"
  },
  {
    "label": "SetError()",
    "kind": "Method",
    "detail": "Function (sDestAttrib = sInstAttrib ; } else {)",
    "insertText": "SetError(\"SVertexDecl::MergeObjectAndInstanceVertexDecls, overlapping instance and object vertex declarations\")"
  },
  {
    "label": "Set()",
    "kind": "Method",
    "detail": "Function (bSuccess = false ; break ; } } } sMergedDecl . m_uiVertexSize + = sInstanceDecl . m_uiVertexSize ; } return bSuccess ; } ST_INLINE st_bool)",
    "insertText": "Set(const SAttribDesc* pAttribDesc)"
  },
  {
    "label": "assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "assert(pAttribDesc)"
  },
  {
    "label": "while()",
    "kind": "Method",
    "detail": "Function (st_bool bSuccess = false ; m_uiVertexSize = 0 ; const SAttribDesc* pAttrib = pAttribDesc ;)",
    "insertText": "while(pAttrib->m_eAttrib != VERTEX_ATTRIB_COUNT)"
  },
  {
    "label": "for()",
    "kind": "Method",
    "detail": "Function (SAttribute& sDeclAttrib = m_asAttributes [ pAttrib -> m_eAttrib ] ; sDeclAttrib . m_uiStream = pAttrib -> m_uiStream ; sDeclAttrib . m_eFormat = pAttrib -> m_eFormat ;)",
    "insertText": "for(st_uint16 i = 0; i < pAttrib->m_uiNumComponents; ++i)"
  },
  {
    "label": "EVertexComponent()",
    "kind": "Method",
    "detail": "Function (sDeclAttrib . m_aeProperties [ i ] = pAttrib -> m_asProperties [ i ] . m_eProperty ; sDeclAttrib . m_aePropertyComponents [ i ] = pAttrib -> m_asProperties [ i ] . m_eComponent ; sDeclAttrib . m_auiVertexOffsets [ i ] = m_uiVertexSize ; SProperty& sDeclProperty = m_asProperties [ pAttrib -> m_asProperties [ i ] . m_eProperty ] ; sDeclProperty . m_eFormat = pAttrib -> m_eFormat ; sDeclProperty . m_aeAttribs [ pAttrib -> m_asProperties [ i ] . m_eComponent ] = pAttrib -> m_eAttrib ; sDeclProperty . m_aeAttribComponents [ pAttrib -> m_asProperties [ i ] . m_eComponent ] =)",
    "insertText": "EVertexComponent(i)"
  },
  {
    "label": "st_uint8()",
    "kind": "Method",
    "detail": "Function (sDeclProperty . m_auiOffsets [ pAttrib -> m_asProperties [ i ] . m_eComponent ] = m_uiVertexSize ; m_uiVertexSize + =)",
    "insertText": "st_uint8(SVertexDecl::FormatSize(pAttrib->m_eFormat))"
  }
]