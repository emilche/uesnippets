[
  {
    "label": "FCookConfigAccessTracker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FCookConfigAccessTracker"
  },
  {
    "label": "FConfigAccessTrackingCollector",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FConfigAccessTrackingCollector"
  },
  {
    "label": "FIgnoreScope",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FIgnoreScope"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Misc / ConfigAccessTracking . h \" # include \" Containers / ArrayView . h \" # include \" Containers / StringView . h \" # include \" Misc / StringBuilder . h \" # include \" UObject / NameTypes . h \" # if UE_WITH_CONFIG_TRACKING # include \" Async / Mutex . h \" # include \" Cooker / MPCollector . h \" # include \" Containers / Array . h \" # include \" Containers / Map . h \" # include \" Containers / Set . h \" # include \" Interfaces / ITargetPlatform . h \" # include \" Misc / ConfigAccessData . h \" # include \" Misc / ConfigCacheIni . h \" # include \" Misc / PackageAccessTracking . h \" # include \" Templates / TypeHash . h \" # include \" Templates / UnrealTemplate . h \" # endif # if UE_WITH_CONFIG_TRACKING namespace UE::ConfigAccessTracking { class FCookConfigAccessTracker : public FNoncopyable { public : FCookConfigAccessTracker&)",
    "insertText": "Get()"
  },
  {
    "label": "IsEnabled()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEnabled()"
  },
  {
    "label": "DumpStats()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DumpStats()"
  },
  {
    "label": "GetPackageRecords()",
    "kind": "Method",
    "detail": "Function (TArray<FConfigAccessData>)",
    "insertText": "GetPackageRecords(FName ReferencerPackage, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "GetCookRecords()",
    "kind": "Method",
    "detail": "Function (TArray<FConfigAccessData>)",
    "insertText": "GetCookRecords()"
  },
  {
    "label": "GetCookRecords()",
    "kind": "Method",
    "detail": "Function (TArray<FConfigAccessData>)",
    "insertText": "GetCookRecords(const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "AddRecord()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddRecord(FName PackageName, const FConfigAccessData& Data)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetValue(const FConfigAccessData& AccessData)"
  },
  {
    "label": "GetValue()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetValue(FStringView AccessDataFullPath)"
  },
  {
    "label": "FCookConfigAccessTracker()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FCookConfigAccessTracker()"
  },
  {
    "label": "RecordValuesFromFile()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RecordValuesFromFile(const FConfigAccessData& FileOnlyData, const FConfigFile& ConfigFile)"
  },
  {
    "label": "StaticOnConfigValueRead()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StaticOnConfigValueRead(UE::ConfigAccessTracking::FSection* Section, FMinimalName ValueName, const FConfigValue& ConfigValue)"
  },
  {
    "label": "SortRecordsAndFilterByPlatform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SortRecordsAndFilterByPlatform(TArray<FConfigAccessData>& Records, const ITargetPlatform* TargetPlatform)"
  },
  {
    "label": "MultiValueToString()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "MultiValueToString(const FConfigSection& Section, FName ValueName)"
  },
  {
    "label": "FindOrLoadConfigFile()",
    "kind": "Method",
    "detail": "Function (private : UE::FMutex RecordsLock ; UE::FMutex ConfigCacheLock ; TMap<FName,TSet<UE::ConfigAccessTracking::FConfigAccessData>> PackageRecords ; TSet<FConfigAccessData> LoadedConfigFiles ; TMap<FConfigAccessData,FString> LoadedValues ; UE::ConfigAccessTracking::FConfigValueReadCallbackId OnConfigValueReadCallbackHandle ; bool bEnabled = false ; private : FCookConfigAccessTracker Singleton ; } ; const FConfigFile*)",
    "insertText": "FindOrLoadConfigFile(const FConfigAccessData& AccessData, FConfigFile& Buffer)"
  },
  {
    "label": "IsLoadableLoadType()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLoadableLoadType(ELoadType LoadType)"
  },
  {
    "label": "GetMessageType()",
    "kind": "Method",
    "detail": "Function (} namespace UE::ConfigAccessTracking { class FConfigAccessTrackingCollector : public UE::Cook::IMPCollector { public : FGuid)",
    "insertText": "GetMessageType()"
  },
  {
    "label": "ClientTick()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ClientTick(UE::Cook::FMPCollectorClientTickContext& Context)"
  },
  {
    "label": "ServerReceiveMessage()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ServerReceiveMessage(UE::Cook::FMPCollectorServerMessageContext& Context, FCbObjectView Message)"
  },
  {
    "label": "FIgnoreScope()",
    "kind": "Method",
    "detail": "Function (FGuid MessageType ; } ; } # else namespace UE::ConfigAccessTracking { struct FIgnoreScope {)",
    "insertText": "FIgnoreScope()"
  }
]