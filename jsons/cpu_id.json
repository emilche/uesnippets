[
  {
    "label": "InitCpuFlags()",
    "kind": "Method",
    "detail": "Function (# ifndef INCLUDE_LIBYUV_CPU_ID_H_ # define INCLUDE_LIBYUV_CPU_ID_H_ # include \" libyuv / basic_types . h \" # ifdef __cplusplus namespace libyuv { \" C \" { # endif const int kCpuInitialized = 0 x1 ; const int kCpuHasARM = 0 x2 ; const int kCpuHasNEON = 0 x4 ; const int kCpuHasX86 = 0 x10 ; const int kCpuHasSSE2 = 0 x20 ; const int kCpuHasSSSE3 = 0 x40 ; const int kCpuHasSSE41 = 0 x80 ; const int kCpuHasSSE42 = 0 x100 ; const int kCpuHasAVX = 0 x200 ; const int kCpuHasAVX2 = 0 x400 ; const int kCpuHasERMS = 0 x800 ; const int kCpuHasFMA3 = 0 x1000 ; const int kCpuHasF16C = 0 x2000 ; const int kCpuHasGFNI = 0 x4000 ; const int kCpuHasAVX512BW = 0 x8000 ; const int kCpuHasAVX512VL = 0 x10000 ; const int kCpuHasAVX512VNNI = 0 x20000 ; const int kCpuHasAVX512VBMI = 0 x40000 ; const int kCpuHasAVX512VBMI2 = 0 x80000 ; const int kCpuHasAVX512VBITALG = 0 x100000 ; const int kCpuHasAVX512VPOPCNTDQ = 0 x200000 ; const int kCpuHasMIPS = 0 x400000 ; const int kCpuHasMSA = 0 x800000 ; const int kCpuHasLOONGARCH = 0 x2000000 ; const int kCpuHasLSX = 0 x4000000 ; const int kCpuHasLASX = 0 x8000000 ; int)",
    "insertText": "InitCpuFlags(void)"
  },
  {
    "label": "TestCpuFlag()",
    "kind": "Method",
    "detail": "Function (__inline int)",
    "insertText": "TestCpuFlag(int test_flag)"
  },
  {
    "label": "__atomic_load_n()",
    "kind": "Method",
    "detail": "Function (int cpu_info_ ; # ifdef __ATOMIC_RELAXED int cpu_info =)",
    "insertText": "__atomic_load_n(&cpu_info_, __ATOMIC_RELAXED)"
  },
  {
    "label": "return()",
    "kind": "Method",
    "detail": "Function (# else int cpu_info = cpu_info_ ; # endif)",
    "insertText": "return(!cpu_info ? InitCpuFlags() : cpu_info)"
  },
  {
    "label": "ArmCpuCaps()",
    "kind": "Method",
    "detail": "Function (} int)",
    "insertText": "ArmCpuCaps(const char* cpuinfo_name)"
  },
  {
    "label": "MipsCpuCaps()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MipsCpuCaps(const char* cpuinfo_name)"
  },
  {
    "label": "MaskCpuFlags()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "MaskCpuFlags(int enable_flags)"
  },
  {
    "label": "SetCpuFlags()",
    "kind": "Method",
    "detail": "Function (__inline void)",
    "insertText": "SetCpuFlags(int cpu_flags)"
  },
  {
    "label": "__atomic_store_n()",
    "kind": "Method",
    "detail": "Function (int cpu_info_ ; # ifdef __ATOMIC_RELAXED)",
    "insertText": "__atomic_store_n(&cpu_info_, cpu_flags, __ATOMIC_RELAXED)"
  },
  {
    "label": "CpuId()",
    "kind": "Method",
    "detail": "Function (# else cpu_info_ = cpu_flags ; # endif } void)",
    "insertText": "CpuId(int info_eax, int info_ecx, int* cpu_info)"
  }
]