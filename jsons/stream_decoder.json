[
  {
    "label": "FLAC__StreamDecoderProtected",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamDecoderProtected"
  },
  {
    "label": "FLAC__StreamDecoderPrivate",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLAC__StreamDecoderPrivate"
  },
  {
    "label": "FLAC__StreamDecoderReadStatus()",
    "kind": "Method",
    "detail": "Function (# ifndef FLAC__STREAM_DECODER_H # define FLAC__STREAM_DECODER_H # include<stdio . h> # include \" export . h \" # include \" format . h \" # ifdef __cplusplus \" C \" { # endif typedef enum { FLAC__STREAM_DECODER_SEARCH_FOR_METADATA = 0,FLAC__STREAM_DECODER_READ_METADATA,FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC,FLAC__STREAM_DECODER_READ_FRAME,FLAC__STREAM_DECODER_END_OF_STREAM,FLAC__STREAM_DECODER_OGG_ERROR,FLAC__STREAM_DECODER_SEEK_ERROR,FLAC__STREAM_DECODER_ABORTED,FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR,FLAC__STREAM_DECODER_UNINITIALIZED } FLAC__StreamDecoderState ; const char* const FLAC__StreamDecoderStateString [ ] ; typedef enum { FLAC__STREAM_DECODER_INIT_STATUS_OK = 0,FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER,FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS,FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR,FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE,FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED } FLAC__StreamDecoderInitStatus ; const char* const FLAC__StreamDecoderInitStatusString [ ] ; typedef enum { FLAC__STREAM_DECODER_READ_STATUS_CONTINUE,FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM,FLAC__STREAM_DECODER_READ_STATUS_ABORT } FLAC__StreamDecoderReadStatus ; const char* const FLAC__StreamDecoderReadStatusString [ ] ; typedef enum { FLAC__STREAM_DECODER_SEEK_STATUS_OK,FLAC__STREAM_DECODER_SEEK_STATUS_ERROR,FLAC__STREAM_DECODER_SEEK_STATUS_UNSUPPORTED } FLAC__StreamDecoderSeekStatus ; const char* const FLAC__StreamDecoderSeekStatusString [ ] ; typedef enum { FLAC__STREAM_DECODER_TELL_STATUS_OK,FLAC__STREAM_DECODER_TELL_STATUS_ERROR,FLAC__STREAM_DECODER_TELL_STATUS_UNSUPPORTED } FLAC__StreamDecoderTellStatus ; const char* const FLAC__StreamDecoderTellStatusString [ ] ; typedef enum { FLAC__STREAM_DECODER_LENGTH_STATUS_OK,FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR,FLAC__STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED } FLAC__StreamDecoderLengthStatus ; const char* const FLAC__StreamDecoderLengthStatusString [ ] ; typedef enum { FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE,FLAC__STREAM_DECODER_WRITE_STATUS_ABORT } FLAC__StreamDecoderWriteStatus ; const char* const FLAC__StreamDecoderWriteStatusString [ ] ; typedef enum { FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC,FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER,FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH,FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM,FLAC__STREAM_DECODER_ERROR_STATUS_BAD_METADATA } FLAC__StreamDecoderErrorStatus ; const char* const FLAC__StreamDecoderErrorStatusString [ ] ; struct FLAC__StreamDecoderProtected ; struct FLAC__StreamDecoderPrivate ; typedef struct { struct FLAC__StreamDecoderProtected* protected_ ; struct FLAC__StreamDecoderPrivate* private_ ; } FLAC__StreamDecoder ; typedef)",
    "insertText": "FLAC__StreamDecoderReadStatus(*FLAC__StreamDecoderReadCallback)(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data)"
  },
  {
    "label": "FLAC__StreamDecoderSeekStatus()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__StreamDecoderSeekStatus(*FLAC__StreamDecoderSeekCallback)(const FLAC__StreamDecoder *decoder, FLAC__uint64 absolute_byte_offset, void *client_data)"
  },
  {
    "label": "FLAC__StreamDecoderTellStatus()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__StreamDecoderTellStatus(*FLAC__StreamDecoderTellCallback)(const FLAC__StreamDecoder *decoder, FLAC__uint64 *absolute_byte_offset, void *client_data)"
  },
  {
    "label": "FLAC__StreamDecoderLengthStatus()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__StreamDecoderLengthStatus(*FLAC__StreamDecoderLengthCallback)(const FLAC__StreamDecoder *decoder, FLAC__uint64 *stream_length, void *client_data)"
  },
  {
    "label": "FLAC__bool()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__bool(*FLAC__StreamDecoderEofCallback)(const FLAC__StreamDecoder *decoder, void *client_data)"
  },
  {
    "label": "FLAC__StreamDecoderWriteStatus()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "FLAC__StreamDecoderWriteStatus(*FLAC__StreamDecoderWriteCallback)(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 * const buffer[], void *client_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FLAC__StreamDecoderMetadataCallback)(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data)"
  },
  {
    "label": "void()",
    "kind": "Method",
    "detail": "Function (typedef)",
    "insertText": "void(*FLAC__StreamDecoderErrorCallback)(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data)"
  },
  {
    "label": "FLAC__stream_decoder_new()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoder*)",
    "insertText": "FLAC__stream_decoder_new(void)"
  },
  {
    "label": "FLAC__stream_decoder_delete()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FLAC__stream_decoder_delete(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_set_ogg_serial_number()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_ogg_serial_number(FLAC__StreamDecoder *decoder, long serial_number)"
  },
  {
    "label": "FLAC__stream_decoder_set_md5_checking()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_md5_checking(FLAC__StreamDecoder *decoder, FLAC__bool value)"
  },
  {
    "label": "FLAC__stream_decoder_set_metadata_respond()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_metadata_respond(FLAC__StreamDecoder *decoder, FLAC__MetadataType type)"
  },
  {
    "label": "FLAC__stream_decoder_set_metadata_respond_application()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_metadata_respond_application(FLAC__StreamDecoder *decoder, const FLAC__byte id[4])"
  },
  {
    "label": "FLAC__stream_decoder_set_metadata_respond_all()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_metadata_respond_all(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_set_metadata_ignore()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_metadata_ignore(FLAC__StreamDecoder *decoder, FLAC__MetadataType type)"
  },
  {
    "label": "FLAC__stream_decoder_set_metadata_ignore_application()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_metadata_ignore_application(FLAC__StreamDecoder *decoder, const FLAC__byte id[4])"
  },
  {
    "label": "FLAC__stream_decoder_set_metadata_ignore_all()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_set_metadata_ignore_all(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_state()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderState)",
    "insertText": "FLAC__stream_decoder_get_state(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_resolved_state_string()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "FLAC__stream_decoder_get_resolved_state_string(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_md5_checking()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_get_md5_checking(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_total_samples()",
    "kind": "Method",
    "detail": "Function (FLAC__uint64)",
    "insertText": "FLAC__stream_decoder_get_total_samples(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_channels()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_decoder_get_channels(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_channel_assignment()",
    "kind": "Method",
    "detail": "Function (FLAC__ChannelAssignment)",
    "insertText": "FLAC__stream_decoder_get_channel_assignment(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_bits_per_sample()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_decoder_get_bits_per_sample(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_sample_rate()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_decoder_get_sample_rate(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_blocksize()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "FLAC__stream_decoder_get_blocksize(const FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_get_decode_position()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_get_decode_position(const FLAC__StreamDecoder *decoder, FLAC__uint64 *position)"
  },
  {
    "label": "FLAC__stream_decoder_get_client_data()",
    "kind": "Method",
    "detail": "Function (const void*)",
    "insertText": "FLAC__stream_decoder_get_client_data(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_init_stream()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderInitStatus)",
    "insertText": "FLAC__stream_decoder_init_stream(FLAC__StreamDecoder *decoder, FLAC__StreamDecoderReadCallback read_callback, FLAC__StreamDecoderSeekCallback seek_callback, FLAC__StreamDecoderTellCallback tell_callback, FLAC__StreamDecoderLengthCallback length_callback, FLAC__StreamDecoderEofCallback eof_callback, FLAC__StreamDecoderWriteCallback write_callback, FLAC__StreamDecoderMetadataCallback metadata_callback, FLAC__StreamDecoderErrorCallback error_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_decoder_init_ogg_stream()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderInitStatus)",
    "insertText": "FLAC__stream_decoder_init_ogg_stream(FLAC__StreamDecoder *decoder, FLAC__StreamDecoderReadCallback read_callback, FLAC__StreamDecoderSeekCallback seek_callback, FLAC__StreamDecoderTellCallback tell_callback, FLAC__StreamDecoderLengthCallback length_callback, FLAC__StreamDecoderEofCallback eof_callback, FLAC__StreamDecoderWriteCallback write_callback, FLAC__StreamDecoderMetadataCallback metadata_callback, FLAC__StreamDecoderErrorCallback error_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_decoder_init_FILE()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderInitStatus)",
    "insertText": "FLAC__stream_decoder_init_FILE(FLAC__StreamDecoder *decoder, FILE *file, FLAC__StreamDecoderWriteCallback write_callback, FLAC__StreamDecoderMetadataCallback metadata_callback, FLAC__StreamDecoderErrorCallback error_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_decoder_init_ogg_FILE()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderInitStatus)",
    "insertText": "FLAC__stream_decoder_init_ogg_FILE(FLAC__StreamDecoder *decoder, FILE *file, FLAC__StreamDecoderWriteCallback write_callback, FLAC__StreamDecoderMetadataCallback metadata_callback, FLAC__StreamDecoderErrorCallback error_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_decoder_init_file()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderInitStatus)",
    "insertText": "FLAC__stream_decoder_init_file(FLAC__StreamDecoder *decoder, const char *filename, FLAC__StreamDecoderWriteCallback write_callback, FLAC__StreamDecoderMetadataCallback metadata_callback, FLAC__StreamDecoderErrorCallback error_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_decoder_init_ogg_file()",
    "kind": "Method",
    "detail": "Function (FLAC__StreamDecoderInitStatus)",
    "insertText": "FLAC__stream_decoder_init_ogg_file(FLAC__StreamDecoder *decoder, const char *filename, FLAC__StreamDecoderWriteCallback write_callback, FLAC__StreamDecoderMetadataCallback metadata_callback, FLAC__StreamDecoderErrorCallback error_callback, void *client_data)"
  },
  {
    "label": "FLAC__stream_decoder_finish()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_finish(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_flush()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_flush(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_reset()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_reset(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_process_single()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_process_single(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_process_until_end_of_metadata()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_process_until_end_of_metadata(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_process_until_end_of_stream()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_process_until_end_of_stream(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_skip_single_frame()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_skip_single_frame(FLAC__StreamDecoder *decoder)"
  },
  {
    "label": "FLAC__stream_decoder_seek_absolute()",
    "kind": "Method",
    "detail": "Function (FLAC__bool)",
    "insertText": "FLAC__stream_decoder_seek_absolute(FLAC__StreamDecoder *decoder, FLAC__uint64 sample)"
  }
]