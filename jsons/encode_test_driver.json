[
  {
    "label": "CodecFactory",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CodecFactory"
  },
  {
    "label": "VideoSource",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "VideoSource"
  },
  {
    "label": "TestMode",
    "kind": "Enum",
    "detail": "enum declaration",
    "insertText": "TestMode"
  },
  {
    "label": "CxDataIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "CxDataIterator"
  },
  {
    "label": "TwopassStatsStore",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TwopassStatsStore"
  },
  {
    "label": "Encoder",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "Encoder"
  },
  {
    "label": "vpx_scaling_mode",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_scaling_mode"
  },
  {
    "label": "vpx_svc_layer_id",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_svc_layer_id"
  },
  {
    "label": "vpx_svc_ref_frame_config",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_svc_ref_frame_config"
  },
  {
    "label": "vpx_svc_parameters",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_svc_parameters"
  },
  {
    "label": "vpx_svc_frame_drop",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_svc_frame_drop"
  },
  {
    "label": "vpx_svc_spatial_layer_sync",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "vpx_svc_spatial_layer_sync"
  },
  {
    "label": "EncoderTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "EncoderTest"
  },
  {
    "label": "Values()",
    "kind": "Method",
    "detail": "Function (# ifndef VPX_TEST_ENCODE_TEST_DRIVER_H_ # define VPX_TEST_ENCODE_TEST_DRIVER_H_ # include<string> # include<vector> # include \" third_party / googletest / src / include / gtest / gtest . h \" # include \" . / vpx_config . h \" # if CONFIG_VP8_ENCODER | | CONFIG_VP9_ENCODER # include \" vpx / vp8cx . h \" # endif # include \" vpx / vpx_encoder . h \" namespace libvpx_test { class CodecFactory ; class VideoSource ; enum TestMode { kRealTime,kOnePassGood,kOnePassBest,kTwoPassGood,kTwoPassBest } ; # define ALL_TEST_MODES \\::)",
    "insertText": "Values(::libvpx_test::kRealTime, ::libvpx_test::kOnePassGood, \\ ::libvpx_test::kOnePassBest, ::libvpx_test::kTwoPassGood, \\ ::libvpx_test::kTwoPassBest) #define ONE_PASS_TEST_MODES \\ ::testing::Values(::libvpx_test::kRealTime, ::libvpx_test::kOnePassGood, \\ ::libvpx_test::kOnePassBest) #define TWO_PASS_TEST_MODES \\ ::testing::Values(::libvpx_test::kTwoPassGood, ::libvpx_test::kTwoPassBest)"
  },
  {
    "label": "CxDataIterator()",
    "kind": "Method",
    "detail": "Function (public :)",
    "insertText": "CxDataIterator(vpx_codec_ctx_t *encoder) : encoder_(encoder), iter_(nullptr)"
  },
  {
    "label": "Next()",
    "kind": "Method",
    "detail": "Function (} const vpx_codec_cx_pkt_t*)",
    "insertText": "Next()"
  },
  {
    "label": "Append()",
    "kind": "Method",
    "detail": "Function (} private : vpx_codec_ctx_t* encoder_ ; vpx_codec_iter_t iter_ ; } ; class TwopassStatsStore { public : void)",
    "insertText": "Append(const vpx_codec_cx_pkt_t &pkt)"
  },
  {
    "label": "append()",
    "kind": "Method",
    "detail": "Function (buffer_ .)",
    "insertText": "append(reinterpret_cast<char *>(pkt.data.twopass_stats.buf), pkt.data.twopass_stats.sz)"
  },
  {
    "label": "buf()",
    "kind": "Method",
    "detail": "Function (} vpx_fixed_buf_t)",
    "insertText": "buf()"
  },
  {
    "label": "size()",
    "kind": "Method",
    "detail": "Function (const vpx_fixed_buf_t buf = {& buffer_ [ 0 ],buffer_ .)",
    "insertText": "size()"
  },
  {
    "label": "clear()",
    "kind": "Method",
    "detail": "Function (buffer_ .)",
    "insertText": "clear()"
  },
  {
    "label": "Encoder()",
    "kind": "Method",
    "detail": "Function (} protected : std::string buffer_ ; } ; class Encoder { public :)",
    "insertText": "Encoder(vpx_codec_enc_cfg_t cfg, unsigned long deadline, const unsigned long init_flags, TwopassStatsStore *stats) : cfg_(cfg), deadline_(deadline), init_flags_(init_flags), stats_(stats)"
  },
  {
    "label": "memset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "memset(&encoder_, 0, sizeof(encoder_))"
  },
  {
    "label": "Encoder()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "Encoder()"
  },
  {
    "label": "vpx_codec_destroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "vpx_codec_destroy(&encoder_)"
  },
  {
    "label": "GetCxData()",
    "kind": "Method",
    "detail": "Function (} CxDataIterator)",
    "insertText": "GetCxData()"
  },
  {
    "label": "InitEncoder()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitEncoder(VideoSource *video)"
  },
  {
    "label": "GetPreviewFrame()",
    "kind": "Method",
    "detail": "Function (const vpx_image_t*)",
    "insertText": "GetPreviewFrame()"
  },
  {
    "label": "EncodeFrame()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EncodeFrame(VideoSource *video, vpx_enc_frame_flags_t frame_flags)"
  },
  {
    "label": "EncodeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeFrame(VideoSource *video)"
  },
  {
    "label": "EncodeFrame()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EncodeFrame(video, 0)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, int arg)"
  },
  {
    "label": "vpx_codec_control_()",
    "kind": "Method",
    "detail": "Function (const vpx_codec_err_t res =)",
    "insertText": "vpx_codec_control_(&encoder_, ctrl_id, arg)"
  },
  {
    "label": "ASSERT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "ASSERT_EQ(VPX_CODEC_OK, res) << EncoderError()"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, int *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, struct vpx_scaling_mode *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, struct vpx_svc_layer_id *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, struct vpx_svc_ref_frame_config *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, struct vpx_svc_parameters *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, struct vpx_svc_frame_drop *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, struct vpx_svc_spatial_layer_sync *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} # if CONFIG_VP9_ENCODER void)",
    "insertText": "Control(int ctrl_id, vpx_rc_funcs_t *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} # endif # if CONFIG_VP8_ENCODER | | CONFIG_VP9_ENCODER void)",
    "insertText": "Control(int ctrl_id, vpx_active_map_t *arg)"
  },
  {
    "label": "Control()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "Control(int ctrl_id, vpx_roi_map_t *arg)"
  },
  {
    "label": "Config()",
    "kind": "Method",
    "detail": "Function (} # endif void)",
    "insertText": "Config(const vpx_codec_enc_cfg_t *cfg)"
  },
  {
    "label": "vpx_codec_enc_config_set()",
    "kind": "Method",
    "detail": "Function (const vpx_codec_err_t res =)",
    "insertText": "vpx_codec_enc_config_set(&encoder_, cfg)"
  },
  {
    "label": "set_deadline()",
    "kind": "Method",
    "detail": "Function (cfg_ =* cfg ; } void)",
    "insertText": "set_deadline(unsigned long deadline)"
  },
  {
    "label": "CodecInterface()",
    "kind": "Method",
    "detail": "Function (deadline_ = deadline ; } protected : vpx_codec_iface_t*)",
    "insertText": "CodecInterface()"
  },
  {
    "label": "EncoderError()",
    "kind": "Method",
    "detail": "Function (const char*)",
    "insertText": "EncoderError()"
  },
  {
    "label": "vpx_codec_error_detail()",
    "kind": "Method",
    "detail": "Function (const char* detail =)",
    "insertText": "vpx_codec_error_detail(&encoder_)"
  },
  {
    "label": "EncodeFrameInternal()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EncodeFrameInternal(const VideoSource &video, vpx_enc_frame_flags_t frame_flags)"
  },
  {
    "label": "Flush()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Flush()"
  },
  {
    "label": "EncoderTest()",
    "kind": "Method",
    "detail": "Function (vpx_codec_ctx_t encoder_ ; vpx_codec_enc_cfg_t cfg_ ; unsigned long deadline_ ; unsigned long init_flags_ ; TwopassStatsStore* stats_ ; } ; class EncoderTest { protected :)",
    "insertText": "EncoderTest(const CodecFactory *codec) : codec_(codec), abort_(false), init_flags_(0), frame_flags_(0)"
  },
  {
    "label": "EncoderTest()",
    "kind": "Method",
    "detail": "Function (cfg_ . g_threads = 1 ; } ~)",
    "insertText": "EncoderTest()"
  },
  {
    "label": "InitializeConfig()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "InitializeConfig()"
  },
  {
    "label": "SetMode()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetMode(TestMode mode)"
  },
  {
    "label": "set_init_flags()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_init_flags(unsigned long flag)"
  },
  {
    "label": "RunLoop()",
    "kind": "Method",
    "detail": "Function (init_flags_ = flag ; } void)",
    "insertText": "RunLoop(VideoSource *video)"
  },
  {
    "label": "BeginPassHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginPassHook(unsigned int)"
  },
  {
    "label": "EndPassHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "EndPassHook()"
  },
  {
    "label": "PreEncodeFrameHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreEncodeFrameHook(VideoSource *)"
  },
  {
    "label": "PreEncodeFrameHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreEncodeFrameHook(VideoSource * , Encoder *)"
  },
  {
    "label": "PreDecodeFrameHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PreDecodeFrameHook(VideoSource * , Decoder *)"
  },
  {
    "label": "PostEncodeFrameHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PostEncodeFrameHook(Encoder *)"
  },
  {
    "label": "FramePktHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "FramePktHook(const vpx_codec_cx_pkt_t *)"
  },
  {
    "label": "PSNRPktHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "PSNRPktHook(const vpx_codec_cx_pkt_t *)"
  },
  {
    "label": "StatsPktHook()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "StatsPktHook(const vpx_codec_cx_pkt_t *)"
  },
  {
    "label": "Continue()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "Continue()"
  },
  {
    "label": "DoDecode()",
    "kind": "Method",
    "detail": "Function (} const CodecFactory* codec_ ; bool)",
    "insertText": "DoDecode()"
  },
  {
    "label": "DecompressedFrameHook()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "DecompressedFrameHook(const vpx_image_t & , vpx_codec_pts_t)"
  },
  {
    "label": "HandleDecodeResult()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "HandleDecodeResult(const vpx_codec_err_t res_dec, const VideoSource & , Decoder *decoder)"
  },
  {
    "label": "EXPECT_EQ()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EXPECT_EQ(VPX_CODEC_OK, res_dec) << decoder->DecodeError()"
  }
]