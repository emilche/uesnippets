[
  {
    "label": "UVREditorBaseUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorBaseUserWidget"
  },
  {
    "label": "UVREditorUISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorUISystem"
  },
  {
    "label": "FVREditorFloatingUICreationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVREditorFloatingUICreationContext"
  },
  {
    "label": "AVREditorFloatingUI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorFloatingUI"
  },
  {
    "label": "UVREditorUISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorUISystem"
  },
  {
    "label": "UVREditorUISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorUISystem"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "UVREditorWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorWidgetComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "UVREditorWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorWidgetComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "UVREditorUISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorUISystem"
  },
  {
    "label": "SetSlateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateWidget( class UVREditorUISystem& InitOwner, const VREditorPanelID& InID, const TSharedRef<SWidget>& InitSlateWidget, const FIntPoint InitResolution, const float InitScale, const EDockedTo InitDockedTo )"
  },
  {
    "label": "SetSlateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateWidget(const TSharedRef<SWidget>& InitSlateWidget)"
  },
  {
    "label": "SetUMGWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUMGWidget(class UVREditorUISystem& InitOwner, const VREditorPanelID& InID, class TSubclassOf<class UUserWidget> InitUserWidgetClass, const FIntPoint InitResolution, const float InitScale, const EDockedTo InitDockedTo)"
  },
  {
    "label": "ShowUI()",
    "kind": "Method",
    "detail": "Function (VREDITOR_API)",
    "insertText": "ShowUI( const bool bShow, const bool bAllowFading = true, const float InitFadeDelay = 0.0f, const bool bInClearWidgetOnHide = false )"
  },
  {
    "label": "SetResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResolution(const FIntPoint& InResolution)"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(const float NewSize, const bool bScaleWidget = true)"
  },
  {
    "label": "SetWidgetComponentScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetComponentScale(const FVector& InScale)"
  },
  {
    "label": "CleanupWidgetReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupWidgetReferences()"
  },
  {
    "label": "SetupWidgetComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupWidgetComponent()"
  },
  {
    "label": "SetWindowMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMesh(class UStaticMesh* InWindowMesh)"
  },
  {
    "label": "SetCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollision(const ECollisionEnabled::Type InCollisionType, const ECollisionResponse InCollisionResponse, const ECollisionChannel InCollisionChannel)"
  },
  {
    "label": "UpdateFadingState()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "UpdateFadingState( const float DeltaTime )"
  }
]