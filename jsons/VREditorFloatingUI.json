[
  {
    "label": "UVREditorBaseUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorBaseUserWidget"
  },
  {
    "label": "UVREditorUISystem",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorUISystem"
  },
  {
    "label": "FVREditorFloatingUICreationContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FVREditorFloatingUICreationContext"
  },
  {
    "label": "AVREditorFloatingUI",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "AVREditorFloatingUI"
  },
  {
    "label": "TSubclassOf",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TSubclassOf"
  },
  {
    "label": "UUserWidget",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UUserWidget"
  },
  {
    "label": "UVREditorWidgetComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UVREditorWidgetComponent"
  },
  {
    "label": "UStaticMeshComponent",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMeshComponent"
  },
  {
    "label": "T",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "T"
  },
  {
    "label": "UStaticMesh",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "UStaticMesh"
  },
  {
    "label": "USTRUCT()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / ObjectMacros . h \" # include \" Widgets / SWidget . h \" # include \" VREditorBaseActor . h \" # include \" Blueprint / UserWidget . h \" # include \" VREditorFloatingUI . generated . h \" class UVREditorBaseUserWidget ; class UVREditorUISystem ; typedef FName VREditorPanelID ;)",
    "insertText": "USTRUCT(BlueprintType)"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \"VR Mode UI\")"
  },
  {
    "label": "UCLASS()",
    "kind": "Method",
    "detail": "Function (} ;)",
    "insertText": "UCLASS()"
  },
  {
    "label": "GENERATED_BODY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GENERATED_BODY() public: AVREditorFloatingUI(const FObjectInitializer& ObjectInitializer)"
  },
  {
    "label": "SetSlateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateWidget(class UVREditorUISystem& InitOwner, const VREditorPanelID& InID, const TSharedRef<SWidget>& InitSlateWidget, const FIntPoint InitResolution, const float InitScale, const EDockedTo InitDockedTo)"
  },
  {
    "label": "SetSlateWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetSlateWidget(const TSharedRef<SWidget>& InitSlateWidget)"
  },
  {
    "label": "SetUMGWidget()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetUMGWidget(class UVREditorUISystem& InitOwner, const VREditorPanelID& InID, class TSubclassOf<class UUserWidget> InitUserWidgetClass, const FIntPoint InitResolution, const float InitScale, const EDockedTo InitDockedTo)"
  },
  {
    "label": "TickManually()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TickManually(float DeltaTime)"
  },
  {
    "label": "IsUIVisible()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsUIVisible()"
  },
  {
    "label": "ShowUI()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "ShowUI(const bool bShow, const bool bAllowFading = true, const float InitFadeDelay = 0.0f, const bool bInClearWidgetOnHide = false)"
  },
  {
    "label": "SetResolution()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetResolution(const FIntPoint& InResolution)"
  },
  {
    "label": "GetWidgetComponent()",
    "kind": "Method",
    "detail": "Function (class UVREditorWidgetComponent*)",
    "insertText": "GetWidgetComponent()"
  },
  {
    "label": "GetScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetScale()"
  },
  {
    "label": "SetScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetScale(const float NewSize, const bool bScaleWidget = true)"
  },
  {
    "label": "SetWidgetComponentScale()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWidgetComponentScale(const FVector& InScale)"
  },
  {
    "label": "SetTransform()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetTransform(const FTransform& Transform)"
  },
  {
    "label": "BeginDestroy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BeginDestroy()"
  },
  {
    "label": "Destroyed()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Destroyed()"
  },
  {
    "label": "CleanupWidgetReferences()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CleanupWidgetReferences()"
  },
  {
    "label": "IsEditorOnly()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsEditorOnly()"
  },
  {
    "label": "GetUserWidget()",
    "kind": "Method",
    "detail": "Function (} UUserWidget*)",
    "insertText": "GetUserWidget()"
  },
  {
    "label": "GetInitialScale()",
    "kind": "Method",
    "detail": "Function (float)",
    "insertText": "GetInitialScale()"
  },
  {
    "label": "SetupWidgetComponent()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetupWidgetComponent()"
  },
  {
    "label": "GetID()",
    "kind": "Method",
    "detail": "Function (VREditorPanelID)",
    "insertText": "GetID()"
  },
  {
    "label": "GetSlateWidget()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<SWidget>)",
    "insertText": "GetSlateWidget()"
  },
  {
    "label": "SetWindowMesh()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetWindowMesh(class UStaticMesh* InWindowMesh)"
  },
  {
    "label": "CalculateAnimatedScale()",
    "kind": "Method",
    "detail": "Function (protected : FVector)",
    "insertText": "CalculateAnimatedScale()"
  },
  {
    "label": "SetCollision()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetCollision(const ECollisionEnabled::Type InCollisionType, const ECollisionResponse InCollisionResponse, const ECollisionChannel InCollisionChannel)"
  },
  {
    "label": "UpdateFadingState()",
    "kind": "Method",
    "detail": "Function (private : void)",
    "insertText": "UpdateFadingState(const float DeltaTime)"
  }
]