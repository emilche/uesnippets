[
  {
    "label": "FActiveTimerHandle",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FActiveTimerHandle"
  },
  {
    "label": "SSubMenuHandler",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SSubMenuHandler"
  },
  {
    "label": "SMenuOwner",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "SMenuOwner"
  },
  {
    "label": "SLATE_BEGIN_ARGS()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" Widgets / DeclarativeSyntaxSupport . h \" # include \" Widgets / SCompoundWidget . h \" # include \" Widgets / Layout / SMenuOwner . h \" class FActiveTimerHandle ; class SSubMenuHandler : public SCompoundWidget { public :)",
    "insertText": "SLATE_BEGIN_ARGS(SSubMenuHandler ) : _Placement( EMenuPlacement::MenuPlacement_MenuRight)"
  },
  {
    "label": "SLATE_DEFAULT_SLOT()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "SLATE_DEFAULT_SLOT(FArguments, Content ) SLATE_ARGUMENT( TSharedPtr<SMenuAnchor>, MenuAnchor ) SLATE_ARGUMENT( TSharedPtr<SWidget>, MenuContent ) SLATE_ATTRIBUTE( EMenuPlacement, Placement ) SLATE_EVENT( FOnGetContent, OnGetMenuContent ) SLATE_END_ARGS() SLATE_API void Construct(const FArguments& InArgs, TWeakPtr<SMenuOwner> InMenuOwner)"
  },
  {
    "label": "OnMouseEnter()",
    "kind": "Method",
    "detail": "Function (public : void)",
    "insertText": "OnMouseEnter(const FGeometry& MyGeometry, const FPointerEvent& MouseEvent)"
  },
  {
    "label": "OnMouseLeave()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "OnMouseLeave(const FPointerEvent& MouseEvent)"
  },
  {
    "label": "ShouldSubMenuAppearHovered()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "ShouldSubMenuAppearHovered()"
  },
  {
    "label": "RequestSubMenuToggle()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RequestSubMenuToggle(bool bOpenMenu, const bool bClobber, const bool bImmediate = false)"
  },
  {
    "label": "CancelPendingSubMenu()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CancelPendingSubMenu()"
  },
  {
    "label": "HasSubMenu()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "HasSubMenu()"
  },
  {
    "label": "IsSubMenuOpen()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "IsSubMenuOpen()"
  },
  {
    "label": "UpdateSubMenuState()",
    "kind": "Method",
    "detail": "Function (protected : EActiveTimerReturnType)",
    "insertText": "UpdateSubMenuState(double InCurrentTime, float InDeltaTime, bool bWantsOpen)"
  }
]