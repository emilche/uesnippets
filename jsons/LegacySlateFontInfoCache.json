[
  {
    "label": "FLegacySlateFontInfoCache",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FLegacySlateFontInfoCache"
  },
  {
    "label": "FFallbackContext",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FFallbackContext"
  },
  {
    "label": "FLegacyFontKey",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FLegacyFontKey"
  },
  {
    "label": "FFallbackContext()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" CoreMinimal . h \" # include \" UObject / GCObject . h \" # include \" Fonts / CompositeFont . h \" class FLegacySlateFontInfoCache : public FGCObject,public TSharedFromThis<FLegacySlateFontInfoCache> { public : struct FFallbackContext { public :)",
    "insertText": "FFallbackContext()"
  },
  {
    "label": "FFallbackContext()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FFallbackContext(const FFontData* InFontData, const UTF32CHAR InCodepoint) : FontData(InFontData) , Codepoint(InCodepoint)"
  },
  {
    "label": "ToString()",
    "kind": "Method",
    "detail": "Function (} FString)",
    "insertText": "ToString()"
  },
  {
    "label": "Get()",
    "kind": "Method",
    "detail": "Function (private : const FFontData* FontData = nullptr ; UTF32CHAR Codepoint = 0 ; } ; FLegacySlateFontInfoCache&)",
    "insertText": "Get()"
  },
  {
    "label": "GetCompositeFont()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FCompositeFont>)",
    "insertText": "GetCompositeFont(const FName& InLegacyFontName, const EFontHinting InLegacyFontHinting)"
  },
  {
    "label": "GetDefaultFont()",
    "kind": "Method",
    "detail": "Function (TSharedRef<const FCompositeFont>)",
    "insertText": "GetDefaultFont()"
  },
  {
    "label": "GetSystemFont()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FCompositeFont>)",
    "insertText": "GetSystemFont()"
  },
  {
    "label": "IsLastResortFontAvailable()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "IsLastResortFontAvailable()"
  },
  {
    "label": "GetLastResortFont()",
    "kind": "Method",
    "detail": "Function (TSharedPtr<const FCompositeFont>)",
    "insertText": "GetLastResortFont()"
  },
  {
    "label": "GetLastResortFontData()",
    "kind": "Method",
    "detail": "Function (const FFontData&)",
    "insertText": "GetLastResortFontData(const FFallbackContext& InContext)"
  },
  {
    "label": "AddReferencedObjects()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddReferencedObjects(FReferenceCollector& Collector)"
  },
  {
    "label": "GetReferencerName()",
    "kind": "Method",
    "detail": "Function (FString)",
    "insertText": "GetReferencerName()"
  },
  {
    "label": "FLegacySlateFontInfoCache()",
    "kind": "Method",
    "detail": "Function (private :)",
    "insertText": "FLegacySlateFontInfoCache()"
  },
  {
    "label": "FLegacyFontKey()",
    "kind": "Method",
    "detail": "Function (struct FLegacyFontKey {)",
    "insertText": "FLegacyFontKey() : Name() , Hinting(EFontHinting::Default)"
  },
  {
    "label": "FLegacyFontKey()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "FLegacyFontKey(const FName& InName, const EFontHinting InHinting) : Name(InName) , Hinting(InHinting)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "operator(const FLegacyFontKey& Other)"
  },
  {
    "label": "GetTypeHash()",
    "kind": "Method",
    "detail": "Function (} uint32)",
    "insertText": "GetTypeHash(const FLegacyFontKey& Key)"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (uint32 Hash = 0 ; Hash =)",
    "insertText": "HashCombine(Hash, GetTypeHash(Key.Name))"
  },
  {
    "label": "HashCombine()",
    "kind": "Method",
    "detail": "Function (Hash =)",
    "insertText": "HashCombine(Hash, uint32(Key.Hinting))"
  }
]