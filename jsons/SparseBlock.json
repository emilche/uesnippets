[
  {
    "label": "BlockImpl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "BlockImpl"
  },
  {
    "label": "sparse_matrix_block_impl",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "sparse_matrix_block_impl"
  },
  {
    "label": "internal",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "internal"
  },
  {
    "label": "unary_evaluator",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "unary_evaluator"
  },
  {
    "label": "InnerVectorInnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "InnerVectorInnerIterator"
  },
  {
    "label": "OuterVectorInnerIterator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "OuterVectorInnerIterator"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (# ifndef EIGEN_SPARSE_BLOCK_H # define EIGEN_SPARSE_BLOCK_H namespace Eigen { template<XprType,int BlockRows,int BlockCols> class BlockImpl<XprType,BlockRows,BlockCols,true,Sparse> : public SparseMatrixBase<Block<XprType,BlockRows,BlockCols,true>> { typedef internal::remove_all<XprType::Nested>::type _MatrixTypeNested ; typedef Block<XprType,BlockRows,BlockCols,true> BlockType ; public : enum { IsRowMajor = internal::traits<BlockType>::IsRowMajor } ; protected : enum { OuterSize = IsRowMajor ? BlockRows : BlockCols } ; typedef SparseMatrixBase<BlockType> Base ; using Base::convert_index ; public :)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(BlockType) inline BlockImpl(XprType& xpr, Index i) : m_matrix(xpr), m_outerStart(convert_index(i)), m_outerSize(OuterSize)"
  },
  {
    "label": "BlockImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlockImpl(XprType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols) : m_matrix(xpr), m_outerStart(convert_index(IsRowMajor ? startRow : startCol)), m_outerSize(convert_index(IsRowMajor ? blockRows : blockCols))"
  },
  {
    "label": "rows()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "rows()"
  },
  {
    "label": "cols()",
    "kind": "Method",
    "detail": "Function (} EIGEN_STRONG_INLINE Index)",
    "insertText": "cols()"
  },
  {
    "label": "nonZeros()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZeros()"
  },
  {
    "label": "matEval()",
    "kind": "Method",
    "detail": "Function (typedef internal::evaluator<XprType> EvaluatorType ; EvaluatorType)",
    "insertText": "matEval(m_matrix)"
  },
  {
    "label": "value()",
    "kind": "Method",
    "detail": "Function (Index nnz = 0 ; Index end = m_outerStart + m_outerSize .)",
    "insertText": "value()"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} const Scalar)",
    "insertText": "coeff(Index index)"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (} const XprType&)",
    "insertText": "nestedExpression()"
  },
  {
    "label": "blockCols()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockCols()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} protected : internal::ref_selector<XprType>::non_const_type m_matrix ; Index m_outerStart ; const internal::variable_if_dynamic<Index,OuterSize> m_outerSize ; protected : template<T> BlockImpl&)",
    "insertText": "operator(const T&)"
  },
  {
    "label": "EIGEN_STATIC_ASSERT()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT(sizeof(T)==0, THIS_SPARSE_BLOCK_SUBEXPRESSION_IS_READ_ONLY)"
  },
  {
    "label": "sparse_matrix_block_impl()",
    "kind": "Method",
    "detail": "Function (enum { OuterSize = IsRowMajor ? BlockRows : BlockCols } ; public :)",
    "insertText": "sparse_matrix_block_impl(SparseMatrixType& xpr, Index i) : m_matrix(xpr), m_outerStart(convert_index(i)), m_outerSize(OuterSize)"
  },
  {
    "label": "sparse_matrix_block_impl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "sparse_matrix_block_impl(SparseMatrixType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols) : m_matrix(xpr), m_outerStart(convert_index(IsRowMajor ? startRow : startCol)), m_outerSize(convert_index(IsRowMajor ? blockRows : blockCols))"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} template<OtherDerived> BlockType&)",
    "insertText": "operator(const SparseMatrixBase<OtherDerived>& other)"
  },
  {
    "label": "tmp()",
    "kind": "Method",
    "detail": "Function (typedef internal::remove_all<SparseMatrixType::Nested>::type _NestedMatrixType ; _NestedMatrixType& matrix = m_matrix ; Ref<const SparseMatrix<Scalar,IsRowMajor ? RowMajor : ColMajor,StorageIndex>>)",
    "insertText": "tmp(other.derived())"
  },
  {
    "label": "eigen_internal_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_internal_assert(tmp.outerSize()==m_outerSize.value())"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (Index start = m_outerStart = = 0 ? 0 : m_matrix .)",
    "insertText": "outerIndexPtr()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (Index end = m_matrix .)",
    "insertText": "outerIndexPtr()[m_outerStart+m_outerSize.value()"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (Index block_size = end - start ; Index tail_size = m_matrix .)",
    "insertText": "outerIndexPtr()[m_matrix.outerSize()"
  },
  {
    "label": "isCompressed()",
    "kind": "Method",
    "detail": "Function (Index free_size = m_matrix .)",
    "insertText": "isCompressed() ? Index(matrix.data().allocatedSize())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (bool update_trailing_pointers = false ;)",
    "insertText": "if(nnz>free_size)"
  },
  {
    "label": "newdata()",
    "kind": "Method",
    "detail": "Function (SparseMatrixType::Storage)",
    "insertText": "newdata(m_matrix.data().allocatedSize() - block_size + nnz)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(m_matrix.valuePtr(), m_matrix.valuePtr() + start, newdata.valuePtr())"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(m_matrix.innerIndexPtr(), m_matrix.innerIndexPtr() + start, newdata.indexPtr())"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(tmp.valuePtr() + tmp_start, tmp.valuePtr() + tmp_start + nnz, newdata.valuePtr() + start)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(tmp.innerIndexPtr() + tmp_start, tmp.innerIndexPtr() + tmp_start + nnz, newdata.indexPtr() + start)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(matrix.valuePtr()+end, matrix.valuePtr()+end + tail_size, newdata.valuePtr()+start+nnz)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(matrix.innerIndexPtr()+end, matrix.innerIndexPtr()+end + tail_size, newdata.indexPtr()+start+nnz)"
  },
  {
    "label": "resize()",
    "kind": "Method",
    "detail": "Function (newdata .)",
    "insertText": "resize(m_matrix.outerIndexPtr()[m_matrix.outerSize()] - block_size + nnz)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (matrix .)",
    "insertText": "data().swap(newdata)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (update_trailing_pointers = true ; } else {)",
    "insertText": "if(m_matrix.isCompressed() && nnz!=block_size)"
  },
  {
    "label": "data()",
    "kind": "Method",
    "detail": "Function (matrix .)",
    "insertText": "data().resize(start + nnz + tail_size)"
  },
  {
    "label": "smart_memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_memmove(matrix.valuePtr()+end, matrix.valuePtr() + end+tail_size, matrix.valuePtr() + start+nnz)"
  },
  {
    "label": "smart_memmove()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_memmove(matrix.innerIndexPtr()+end, matrix.innerIndexPtr() + end+tail_size, matrix.innerIndexPtr() + start+nnz)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (update_trailing_pointers = true ; })",
    "insertText": "smart_copy(tmp.valuePtr() + tmp_start, tmp.valuePtr() + tmp_start + nnz, matrix.valuePtr() + start)"
  },
  {
    "label": "smart_copy()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "smart_copy(tmp.innerIndexPtr() + tmp_start, tmp.innerIndexPtr() + tmp_start + nnz, matrix.innerIndexPtr() + start)"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "if(IsVectorAtCompileTime)"
  },
  {
    "label": "outerIndexPtr()",
    "kind": "Method",
    "detail": "Function (matrix .)",
    "insertText": "outerIndexPtr()[m_outerStart] = StorageIndex(start)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (} else { StorageIndex p =)",
    "insertText": "StorageIndex(start)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex nnz_k = internal::convert_index<)",
    "insertText": "StorageIndex(tmp.innerVector(k).nonZeros())"
  },
  {
    "label": "if()",
    "kind": "Method",
    "detail": "Function (p + = nnz_k ; } })",
    "insertText": "if(update_trailing_pointers)"
  },
  {
    "label": "StorageIndex()",
    "kind": "Method",
    "detail": "Function (StorageIndex offset = internal::convert_index<)",
    "insertText": "StorageIndex(nnz - block_size)"
  },
  {
    "label": "derived()",
    "kind": "Method",
    "detail": "Function (} } return)",
    "insertText": "derived()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} BlockType&)",
    "insertText": "operator(const BlockType& other)"
  },
  {
    "label": "valuePtr()",
    "kind": "Method",
    "detail": "Function (} const Scalar*)",
    "insertText": "valuePtr()"
  },
  {
    "label": "innerIndexPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "innerIndexPtr()"
  },
  {
    "label": "innerNonZeroPtr()",
    "kind": "Method",
    "detail": "Function (} const StorageIndex*)",
    "insertText": "innerNonZeroPtr()"
  },
  {
    "label": "isCompressed()",
    "kind": "Method",
    "detail": "Function (} bool)",
    "insertText": "isCompressed()"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "coeffRef(Index row, Index col)"
  },
  {
    "label": "coeff()",
    "kind": "Method",
    "detail": "Function (} const Scalar)",
    "insertText": "coeff(Index row, Index col)"
  },
  {
    "label": "lastCoeff()",
    "kind": "Method",
    "detail": "Function (} const Scalar&)",
    "insertText": "lastCoeff()"
  },
  {
    "label": "EIGEN_STATIC_ASSERT_VECTOR_ONLY()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_STATIC_ASSERT_VECTOR_ONLY(sparse_matrix_block_impl)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(Base::nonZeros()>0)"
  },
  {
    "label": "BlockImpl()",
    "kind": "Method",
    "detail": "Function (} protected : internal::ref_selector<SparseMatrixType>::non_const_type m_matrix ; Index m_outerStart ; const internal::variable_if_dynamic<Index,OuterSize> m_outerSize ; } ; } template<_Scalar,int _Options,_StorageIndex,int BlockRows,int BlockCols> class BlockImpl<SparseMatrix<_Scalar,_Options,_StorageIndex>,BlockRows,BlockCols,true,Sparse> : public internal::sparse_matrix_block_impl<SparseMatrix<_Scalar,_Options,_StorageIndex>,BlockRows,BlockCols> { public : typedef _StorageIndex StorageIndex ; typedef SparseMatrix<_Scalar,_Options,_StorageIndex> SparseMatrixType ; typedef internal::sparse_matrix_block_impl<SparseMatrixType,BlockRows,BlockCols> Base ;)",
    "insertText": "BlockImpl(SparseMatrixType& xpr, Index i) : Base(xpr, i)"
  },
  {
    "label": "BlockImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlockImpl(SparseMatrixType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols) : Base(xpr, startRow, startCol, blockRows, blockCols)"
  },
  {
    "label": "BlockImpl()",
    "kind": "Method",
    "detail": "Function (} using Base::operator = ; private : template<Derived>)",
    "insertText": "BlockImpl(const SparseMatrixBase<Derived>& xpr, Index i)"
  },
  {
    "label": "BlockImpl()",
    "kind": "Method",
    "detail": "Function (template<Derived>)",
    "insertText": "BlockImpl(const SparseMatrixBase<Derived>& xpr)"
  },
  {
    "label": "EIGEN_SPARSE_PUBLIC_INTERFACE()",
    "kind": "Method",
    "detail": "Function (} ; template<XprType,int BlockRows,int BlockCols,bool InnerPanel> class BlockImpl<XprType,BlockRows,BlockCols,InnerPanel,Sparse> : public SparseMatrixBase<Block<XprType,BlockRows,BlockCols,InnerPanel>>,internal::no_assignment_operator { typedef Block<XprType,BlockRows,BlockCols,InnerPanel> BlockType ; typedef SparseMatrixBase<BlockType> Base ; using Base::convert_index ; public : enum { IsRowMajor = internal::traits<BlockType>::IsRowMajor } ;)",
    "insertText": "EIGEN_SPARSE_PUBLIC_INTERFACE(BlockType)"
  },
  {
    "label": "BlockImpl()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "BlockImpl(XprType& xpr, Index i) : m_matrix(xpr), m_startRow( (BlockRows==1) && (BlockCols==XprType::ColsAtCompileTime) ? convert_index(i) : 0), m_startCol( (BlockRows==XprType::RowsAtCompileTime) && (BlockCols==1) ? convert_index(i) : 0), m_blockRows(BlockRows==1 ? 1 : xpr.rows()), m_blockCols(BlockCols==1 ? 1 : xpr.cols())"
  },
  {
    "label": "BlockImpl()",
    "kind": "Method",
    "detail": "Function (})",
    "insertText": "BlockImpl(XprType& xpr, Index startRow, Index startCol, Index blockRows, Index blockCols) : m_matrix(xpr), m_startRow(convert_index(startRow)), m_startCol(convert_index(startCol)), m_blockRows(convert_index(blockRows)), m_blockCols(convert_index(blockCols))"
  },
  {
    "label": "coeffRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "coeffRef(Index index)"
  },
  {
    "label": "startCol()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "startCol()"
  },
  {
    "label": "blockRows()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "blockRows()"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (typedef internal::conditional<OuterVector,OuterVectorInnerIterator,InnerVectorInnerIterator>::type InnerIterator ;)",
    "insertText": "unary_evaluator(const XprType& op) : m_argImpl(op.nestedExpression()), m_block(op)"
  },
  {
    "label": "nonZerosEstimate()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "nonZerosEstimate()"
  },
  {
    "label": "nestedExpression()",
    "kind": "Method",
    "detail": "Function (const Index nested_sz = m_block .)",
    "insertText": "nestedExpression().size()"
  },
  {
    "label": "InnerVectorInnerIterator()",
    "kind": "Method",
    "detail": "Function (} return nnz ; } protected : typedef evaluator<ArgType>::InnerIterator EvalIterator ; evaluator<ArgType> m_argImpl ; const XprType& m_block ; } ; template<ArgType,int BlockRows,int BlockCols,bool InnerPanel> class unary_evaluator<Block<ArgType,BlockRows,BlockCols,InnerPanel>,IteratorBased>::InnerVectorInnerIterator : public EvalIterator { enum { XprIsRowMajor = unary_evaluator::IsRowMajor } ; const XprType& m_block ; Index m_end ; public : EIGEN_STRONG_INLINE)",
    "insertText": "InnerVectorInnerIterator(const unary_evaluator& aEval, Index outer) : EvalIterator(aEval.m_argImpl, outer + (XprIsRowMajor ? aEval.m_block.startRow() : aEval.m_block.startCol())), m_block(aEval.m_block), m_end(XprIsRowMajor ? aEval.m_block.startCol()+aEval.m_block.blockCols() : aEval.m_block.startRow()+aEval.m_block.blockRows())"
  },
  {
    "label": "index()",
    "kind": "Method",
    "detail": "Function (} StorageIndex)",
    "insertText": "index()"
  },
  {
    "label": "outer()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "outer()"
  },
  {
    "label": "row()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "row()"
  },
  {
    "label": "col()",
    "kind": "Method",
    "detail": "Function (} Index)",
    "insertText": "col()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (} operator)",
    "insertText": "bool()"
  },
  {
    "label": "OuterVectorInnerIterator()",
    "kind": "Method",
    "detail": "Function (} } ; template<ArgType,int BlockRows,int BlockCols,bool InnerPanel> class unary_evaluator<Block<ArgType,BlockRows,BlockCols,InnerPanel>,IteratorBased>::OuterVectorInnerIterator { enum { XprIsRowMajor = unary_evaluator::IsRowMajor } ; const unary_evaluator& m_eval ; Index m_outerPos ; const Index m_innerIndex ; Index m_end ; EvalIterator m_it ; public : EIGEN_STRONG_INLINE)",
    "insertText": "OuterVectorInnerIterator(const unary_evaluator& aEval, Index outer) : m_eval(aEval), m_outerPos( (XprIsRowMajor ? aEval.m_block.startCol() : aEval.m_block.startRow()) ), m_innerIndex(XprIsRowMajor ? aEval.m_block.startRow() : aEval.m_block.startCol()), m_end(XprIsRowMajor ? aEval.m_block.startCol()+aEval.m_block.blockCols() : aEval.m_block.startRow()+aEval.m_block.blockRows()), m_it(m_eval.m_argImpl, m_outerPos)"
  },
  {
    "label": "EIGEN_UNUSED_VARIABLE()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "EIGEN_UNUSED_VARIABLE(outer)"
  },
  {
    "label": "eigen_assert()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "eigen_assert(outer==0)"
  },
  {
    "label": "valueRef()",
    "kind": "Method",
    "detail": "Function (} Scalar&)",
    "insertText": "valueRef()"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (} OuterVectorInnerIterator&)",
    "insertText": "operator()"
  },
  {
    "label": "EvalIterator()",
    "kind": "Method",
    "detail": "Function (m_it . ~)",
    "insertText": "EvalIterator()"
  },
  {
    "label": "new()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "new(&m_it) EvalIterator(m_eval.m_argImpl, m_outerPos)"
  },
  {
    "label": "unary_evaluator()",
    "kind": "Method",
    "detail": "Function (} } ; template<_Scalar,int _Options,_StorageIndex,int BlockRows,int BlockCols> struct unary_evaluator<Block<const SparseMatrix<_Scalar,_Options,_StorageIndex>,BlockRows,BlockCols,true>,IteratorBased> : evaluator<SparseCompressedBase<Block<const SparseMatrix<_Scalar,_Options,_StorageIndex>,BlockRows,BlockCols,true>>> { typedef Block<const SparseMatrix<_Scalar,_Options,_StorageIndex>,BlockRows,BlockCols,true> XprType ; typedef evaluator<SparseCompressedBase<XprType>> Base ;)",
    "insertText": "unary_evaluator(const XprType &xpr) : Base(xpr)"
  }
]