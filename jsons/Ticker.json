[
  {
    "label": "FTSTicker",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTSTicker"
  },
  {
    "label": "FElement",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "FElement"
  },
  {
    "label": "FTSTickerObjectBase",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "FTSTickerObjectBase"
  },
  {
    "label": "DECLARE_DELEGATE_RetVal_OneParam()",
    "kind": "Method",
    "detail": "Function (# pragma once # include \" Containers / Array . h \" # include \" Containers / ContainerAllocationPolicies . h \" # include \" Containers / MpscQueue . h \" # include \" CoreTypes . h \" # include \" Delegates / Delegate . h \" # include \" Templates / Function . h \" # include \" Templates / SharedPointer . h \" # include<atomic>)",
    "insertText": "DECLARE_DELEGATE_RetVal_OneParam(bool, FTickerDelegate, float)"
  },
  {
    "label": "GetCoreTicker()",
    "kind": "Method",
    "detail": "Function (class FTSTicker { private : struct FElement ; public : using FDelegateHandle = TWeakPtr<FElement> ; FTSTicker&)",
    "insertText": "GetCoreTicker()"
  },
  {
    "label": "AddTicker()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddTicker(const FTickerDelegate & InDelegate, float InDelay = 0.0f)"
  },
  {
    "label": "AddTicker()",
    "kind": "Method",
    "detail": "Function (FDelegateHandle)",
    "insertText": "AddTicker(const TCHAR* InName, float InDelay, TUniqueFunction<bool(float)>&& InFunction)"
  },
  {
    "label": "RemoveTicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoveTicker(FDelegateHandle Handle)"
  },
  {
    "label": "Tick()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Tick(float DeltaTime)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "bool()",
    "kind": "Method",
    "detail": "Function (private : struct FElement { double FireTime ; float DelayTime ; TUniqueFunction<)",
    "insertText": "bool(float)"
  },
  {
    "label": "FElement()",
    "kind": "Method",
    "detail": "Function (uint64 DefaultState = 0 ; uint64 RemovedState = 1 ; std::atomic<uint64> State { DefaultState } ;)",
    "insertText": "FElement()"
  },
  {
    "label": "FElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FElement(double InFireTime, float InDelayTime, const FTickerDelegate& InDelegate)"
  },
  {
    "label": "FElement()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FElement(double InFireTime, float InDelayTime, TUniqueFunction<bool(float)>&& InFunction)"
  },
  {
    "label": "Fire()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Fire(float DeltaTime)"
  },
  {
    "label": "UE_NONCOPYABLE()",
    "kind": "Method",
    "detail": "Function (} ; using FElementPtr = TSharedPtr<FElement> ; TMpscQueue<FElementPtr> AddedElements ; std::atomic<double> CurrentTime { 0 . 0 } ; TArray<FElementPtr> Elements ; } ; class FTSTickerObjectBase { public :)",
    "insertText": "UE_NONCOPYABLE(FTSTickerObjectBase)"
  },
  {
    "label": "FTSTickerObjectBase()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "FTSTickerObjectBase(float InDelay = 0.0f, FTSTicker& Ticker = FTSTicker::GetCoreTicker())"
  },
  {
    "label": "FTSTickerObjectBase()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "FTSTickerObjectBase()"
  },
  {
    "label": "ExecuteOnGameThread()",
    "kind": "Method",
    "detail": "Function (private : FTSTicker::FDelegateHandle TickHandle ; } ; template<FunctorType> void)",
    "insertText": "ExecuteOnGameThread(const TCHAR* DebugName, FunctorType&& Functor)"
  },
  {
    "label": "GetCoreTicker()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "GetCoreTicker().AddTicker(DebugName, 0.0f, [Functor = MoveTemp(Functor)] (float) mutable { Functor(); return false; })"
  }
]