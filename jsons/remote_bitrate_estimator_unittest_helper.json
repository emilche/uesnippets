[
  {
    "label": "TestBitrateObserver",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "TestBitrateObserver"
  },
  {
    "label": "RtpStream",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RtpStream"
  },
  {
    "label": "RtpPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtpPacket"
  },
  {
    "label": "RtcpPacket",
    "kind": "Type",
    "detail": "struct declaration",
    "insertText": "RtcpPacket"
  },
  {
    "label": "StreamGenerator",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "StreamGenerator"
  },
  {
    "label": "RemoteBitrateEstimatorTest",
    "kind": "Type",
    "detail": "class declaration",
    "insertText": "RemoteBitrateEstimatorTest"
  },
  {
    "label": "TestBitrateObserver()",
    "kind": "Method",
    "detail": "Function (# ifndef MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_UNITTEST_HELPER_H_ # define MODULES_REMOTE_BITRATE_ESTIMATOR_REMOTE_BITRATE_ESTIMATOR_UNITTEST_HELPER_H_ # include<list> # include<map> # include<memory> # include<utility> # include<vector> # include \" modules / remote_bitrate_estimator / include / remote_bitrate_estimator . h \" # include \" system_wrappers / include / clock . h \" # include \" test / gtest . h \" namespace webrtc { namespace testing { class TestBitrateObserver : public RemoteBitrateObserver { public :)",
    "insertText": "TestBitrateObserver() : updated_(false), latest_bitrate_(0)"
  },
  {
    "label": "TestBitrateObserver()",
    "kind": "Method",
    "detail": "Function (} ~)",
    "insertText": "TestBitrateObserver()"
  },
  {
    "label": "OnReceiveBitrateChanged()",
    "kind": "Method",
    "detail": "Function (} void)",
    "insertText": "OnReceiveBitrateChanged(const std::vector<uint32_t>& ssrcs, uint32_t bitrate)"
  },
  {
    "label": "Reset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "Reset()"
  },
  {
    "label": "updated()",
    "kind": "Method",
    "detail": "Function (updated_ = false ; } bool)",
    "insertText": "updated()"
  },
  {
    "label": "RtpStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RtpStream(const RtpStream&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RtpStream&)",
    "insertText": "operator(const RtpStream&)"
  },
  {
    "label": "set_rtp_timestamp_offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_rtp_timestamp_offset(uint32_t offset)"
  },
  {
    "label": "GenerateFrame()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GenerateFrame(int64_t time_now_us, PacketList* packets)"
  },
  {
    "label": "next_rtp_time()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "next_rtp_time()"
  },
  {
    "label": "Rtcp()",
    "kind": "Method",
    "detail": "Function (RtcpPacket*)",
    "insertText": "Rtcp(int64_t time_now_us)"
  },
  {
    "label": "set_bitrate_bps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_bitrate_bps(int bitrate_bps)"
  },
  {
    "label": "bitrate_bps()",
    "kind": "Method",
    "detail": "Function (int)",
    "insertText": "bitrate_bps()"
  },
  {
    "label": "ssrc()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "ssrc()"
  },
  {
    "label": "Compare()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "Compare(const std::pair<uint32_t, RtpStream*>& left, const std::pair<uint32_t, RtpStream*>& right)"
  },
  {
    "label": "StreamGenerator()",
    "kind": "Method",
    "detail": "Function (private : enum { kRtcpIntervalUs = 1 0 0 0 0 0 0 } ; int fps_ ; int bitrate_bps_ ; uint32_t ssrc_ ; uint32_t frequency_ ; int64_t next_rtp_time_ ; int64_t next_rtcp_time_ ; uint32_t rtp_timestamp_offset_ ; const double kNtpFracPerMs ; } ; class StreamGenerator { public : typedef std::list<RtpStream::RtcpPacket*> RtcpList ;)",
    "insertText": "StreamGenerator(int capacity, int64_t time_now)"
  },
  {
    "label": "StreamGenerator()",
    "kind": "Method",
    "detail": "Function (~)",
    "insertText": "StreamGenerator()"
  },
  {
    "label": "StreamGenerator()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "StreamGenerator(const StreamGenerator&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (StreamGenerator&)",
    "insertText": "operator(const StreamGenerator&)"
  },
  {
    "label": "AddStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddStream(RtpStream* stream)"
  },
  {
    "label": "set_capacity_bps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_capacity_bps(int capacity_bps)"
  },
  {
    "label": "SetBitrateBps()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "SetBitrateBps(int bitrate_bps)"
  },
  {
    "label": "set_rtp_timestamp_offset()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "set_rtp_timestamp_offset(uint32_t ssrc, uint32_t offset)"
  },
  {
    "label": "GenerateFrame()",
    "kind": "Method",
    "detail": "Function (int64_t)",
    "insertText": "GenerateFrame(RtpStream::PacketList* packets, int64_t time_now_us)"
  },
  {
    "label": "RemoteBitrateEstimatorTest()",
    "kind": "Method",
    "detail": "Function (private : typedef std::map<uint32_t,RtpStream*> StreamMap ; int capacity_ ; int64_t prev_arrival_time_us_ ; StreamMap streams_ ; } ; } class RemoteBitrateEstimatorTest : public::testing::Test { public :)",
    "insertText": "RemoteBitrateEstimatorTest()"
  },
  {
    "label": "RemoteBitrateEstimatorTest()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RemoteBitrateEstimatorTest(const RemoteBitrateEstimatorTest&)"
  },
  {
    "label": "operator()",
    "kind": "Method",
    "detail": "Function (RemoteBitrateEstimatorTest&)",
    "insertText": "operator(const RemoteBitrateEstimatorTest&)"
  },
  {
    "label": "SetUp()",
    "kind": "Method",
    "detail": "Function (protected : void)",
    "insertText": "SetUp()"
  },
  {
    "label": "AddDefaultStream()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "AddDefaultStream()"
  },
  {
    "label": "AbsSendTime()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "AbsSendTime(int64_t t, int64_t denom)"
  },
  {
    "label": "AddAbsSendTime()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "AddAbsSendTime(uint32_t t1, uint32_t t2)"
  },
  {
    "label": "IncomingPacket()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "IncomingPacket(uint32_t ssrc, size_t payload_size, int64_t arrival_time, uint32_t rtp_timestamp, uint32_t absolute_send_time)"
  },
  {
    "label": "GenerateAndProcessFrame()",
    "kind": "Method",
    "detail": "Function (bool)",
    "insertText": "GenerateAndProcessFrame(uint32_t ssrc, uint32_t bitrate_bps)"
  },
  {
    "label": "SteadyStateRun()",
    "kind": "Method",
    "detail": "Function (uint32_t)",
    "insertText": "SteadyStateRun(uint32_t ssrc, int number_of_frames, uint32_t start_bitrate, uint32_t min_bitrate, uint32_t max_bitrate, uint32_t target_bitrate)"
  },
  {
    "label": "TestTimestampGroupingTestHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestTimestampGroupingTestHelper()"
  },
  {
    "label": "TestWrappingHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "TestWrappingHelper(int silence_time_s)"
  },
  {
    "label": "InitialBehaviorTestHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "InitialBehaviorTestHelper(uint32_t expected_converge_bitrate)"
  },
  {
    "label": "RateIncreaseReorderingTestHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RateIncreaseReorderingTestHelper(uint32_t expected_bitrate)"
  },
  {
    "label": "RateIncreaseRtpTimestampsTestHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "RateIncreaseRtpTimestampsTestHelper(int expected_iterations)"
  },
  {
    "label": "CapacityDropTestHelper()",
    "kind": "Method",
    "detail": "Function (void)",
    "insertText": "CapacityDropTestHelper(int number_of_streams, bool wrap_time_stamp, uint32_t expected_bitrate_drop_delta, int64_t receiver_clock_offset_change_ms)"
  }
]